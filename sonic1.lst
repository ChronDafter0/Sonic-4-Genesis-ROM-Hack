00000000                            ; /=========================================================================\
00000000                            ; �	This file is generated by The Interactive Disassembler (IDA)	    �
00000000                            ; �	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    �
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            		include	"Equz80.asm"
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; ListEqu.exe generated from "Dual PCM\Z80.lst"
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00000E80                  E_BuffStart = $E80 ; Start of the buffer (ALWAYS keep it multiples of 20)
00000000 =00000FFF                  E_BuffFinish = $FFF ; End of the buffer (keep in multiples of 100 - 1, e.g. 0FFF, 0EFF, 0DFF, 0CFF, etc)
00000000 =00000020                  E_BuffSize = $20 ; Number of bytes to buffer ahead of time (keep at POT) (part of it is done manually, so just changing this value won't do it all).
00000000 =00001000                  E_CueStart = $1000 ; Start of the cue, (ALWAYS keep in multiples of 10)
00000000 =00002000                  E_CueFinish = $2000 ; End of the cue (keep in multiples of 10)
00000000 =00000300                  E_CueSize = $300 ; Number of bytes for the 68k to cue ahead (keep in multiples of 100)
00000000 =00000000                  M_Flush = $0 
00000000 =00000000                  Start = $0 
00000000 =00000008                  Switch_PCM = $8 
00000000 =0000000E                  SD_NextBit = $E 
00000000 =0000001F                  CUPCM1_Switch = $1F 
00000000 =0000002D                  CUPCM1_SwStack = $2D 
00000000 =00000031                  CUPCM2_Switch = $31 
00000000 =0000003F                  CUPCM2_SwStack = $3F 
00000000 =00000047                  CU_Stack = $47 
00000000 =00000049                  InitRout = $49 
00000000 =000000E0                  CUPCM1_Reset = $E0 
00000000 =000000F8                  CUPCM1_Mute = $F8 
00000000 =0000011B                  CatchUp_Exx = $11B 
00000000 =0000011C                  CatchUp = $11C 
00000000 =0000011C                  CUPCM1_Switch0 = $11C 
00000000 =0000011D                  CUPCM1_Switch1 = $11D 
00000000 =0000011E                  CUPCM1_Switch2 = $11E 
00000000 =0000011F                  CUPCM1_Switch3 = $11F 
00000000 =00000120                  CUPCM1_Switch4 = $120 
00000000 =00000121                  CUPCM1_Switch5 = $121 
00000000 =00000122                  CUPCM1_Switch6 = $122 
00000000 =00000123                  CUPCM1_Switch7 = $123 
00000000 =00000124                  CUPCM1_Switch8 = $124 
00000000 =00000132                  CUPCM1_Load = $132 
00000000 =0000015B                  CUPCM1_ResRet = $15B 
00000000 =0000015E                  CUPCM1_MuteRet = $15E 
00000000 =0000015F                  CUPCM2_Switch0 = $15F 
00000000 =00000160                  CUPCM2_Switch1 = $160 
00000000 =00000161                  CUPCM2_Switch2 = $161 
00000000 =00000162                  CUPCM2_Switch3 = $162 
00000000 =00000163                  CUPCM2_Switch4 = $163 
00000000 =00000164                  CUPCM2_Switch5 = $164 
00000000 =00000165                  CUPCM2_Switch6 = $165 
00000000 =00000166                  CUPCM2_Switch7 = $166 
00000000 =00000167                  CUPCM2_Switch8 = $167 
00000000 =00000173                  CUPCM2_Load = $173 
00000000 =000001B8                  CUPCM2_ResRet = $1B8 
00000000 =000001BB                  CUPCM2_MuteRet = $1BB 
00000000 =000001BE                  CU_ResBufINRet = $1BE 
00000000 =000001C3                  CU_ResBufOTRet = $1C3 
00000000 =000001D2                  CUPCM1_RET = $1D2 
00000000 =000001D3                  CUPCM2_RET = $1D3 
00000000 =000001D6                  Flush = $1D6 
00000000 =000001D9                  FL_Return = $1D9 
00000000 =000001DD                  BM_ResBufOTRet = $1DD 
00000000 =000001DD                  FL_FlushSwitch = $1DD 
00000000 =000001E0                  CUPCM2_Mute = $1E0 
00000000 =00000202                  CUPCM2_Reset = $202 
00000000 =0000021A                  CU_ResetBufferIN = $21A 
00000000 =00000227                  CU_ResetBufferOUT = $227 
00000000 =00000234                  BM_ResetBufferOUT = $234 
00000000 =00000241                  CUPCM2_NewSample = $241 
00000000 =00000264                  CUPCM1_NewSample = $264 
00000000 =00000287                  FL_Loop = $287 
00000000 =0000028D                  BM_NextByte = $28D 
00000000 =000002BE                  Valid = $2BE 
00000000 =000002D7                  OutRange = $2D7 
00000000 =000002E0                  PCM1_SampCur = $2E0 
00000000 =000002E2                  PCM1_BankCur = $2E2 
00000000 =000002E3                  PCM2_SampCur = $2E3 
00000000 =000002E5                  PCM2_BankCur = $2E5 
00000000 =000002E6                  PCM1_Sample = $2E6 
00000000 =000002E8                  PCM1_Bank = $2E8 
00000000 =000002E9                  PCM2_Sample = $2E9 
00000000 =000002EB                  PCM2_Bank = $2EB 
00000000 =000002EC                  MuteSample = $2EC 
00000000 =000002EF                  YM_Access = $2EF 
00000000 =000002F0                  YM_Point68k = $2F0 
00000000 =000002F2                  YM_PointZ80 = $2F2 
00000000 =00001000                  YM_List = $1000 
00000000                            
00000000                            ; ===========================================================================
00000000                            ; ===========================================================================
00000000                            		include	"Macros.asm"
00000000 =FFFFD000                  v_objspace:	equ $FFFFD000	; object variable space ($40 bytes per object) ($2000 bytes)
00000000 =FFFFD000                  v_player:	equ v_objspace	; object variable space for Sonic ($40 bytes)
00000000 =FFFFF700                  v_screenposx:	equ $FFFFF700
00000000 =FFFFFC00                  v_objstate:	equ $FFFFFC00
00000000                            
00000000                            ; Object variables
00000000 =00000001                  obRender:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  obGfx:		equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  obMap:		equ 4	; mappings address (4 bytes)
00000000 =00000008                  obX:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000A                  obScreenY:	equ $A	; y-axis position for screen-fixed items (2 bytes)
00000000 =0000000C                  obY:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  obVelX:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  obVelY:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000014                  obInertia:	equ $14	; potential speed (2 bytes)
00000000 =00000016                  obHeight:	equ $16	; height/2
00000000 =00000017                  obWidth:	equ $17	; width/2
00000000 =00000018                  obPriority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000019                  obActWid:	equ $19	; action width
00000000 =0000001A                  obFrame:	equ $1A	; current frame displayed
00000000 =0000001B                  obAniFrame:	equ $1B	; current frame in animation script
00000000 =0000001C                  obAnim:		equ $1C	; current animation
00000000 =0000001D                  obNextAni:	equ $1D	; next animation
00000000 =0000001E                  obTimeFrame:	equ $1E	; time to next frame
00000000 =0000001F                  obDelayAni:	equ $1F	; time to delay animation
00000000 =00000020                  obColType:	equ $20	; collision response type
00000000 =00000021                  obColProp:	equ $21	; collision extra property
00000000 =00000022                  obStatus:	equ $22	; orientation or mode
00000000 =00000023                  obRespawnNo:	equ $23	; respawn list index number
00000000 =00000024                  obRoutine:	equ $24	; routine number
00000000 =00000025                  ob2ndRout:	equ $25	; secondary routine number
00000000 =00000026                  obAngle:	equ $26	; angle
00000000 =00000028                  obSubtype:	equ $28	; object subtype
00000000 =00000025                  obSolid:	equ ob2ndRout ; solid status flag
00000000                            out_of_range:	macro exit,pos
00000000                            		if (narg=2)
00000000                            		move.w	pos,d0		; get object position (if specified as not obX)
00000000                            		else
00000000                            		move.w	obX(a0),d0	; get object position
00000000                            		endc
00000000                            		andi.w	#$FF80,d0	; round down to nearest $80
00000000                            		move.w	(v_screenposx).w,d1 ; get screen position
00000000                            		subi.w	#128,d1
00000000                            		andi.w	#$FF80,d1
00000000                            		sub.w	d1,d0		; approx distance between object and screen
00000000                            		cmpi.w	#128+320+192,d0
00000000                            		bhi.\0	exit
00000000                            		endm
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Macros
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            	; --- Alignment ---
00000000                            
00000000                            align		macro	Size,Value
00000000                            		dcb.b	Size-(*%Size),Value
00000000                            		endm
00000000                            
00000000                            	; --- Stop Z80 ---
00000000                            
00000000                            StopZ80		macro
00000000                            		move.w	#$0100,($A11100).l			; request Z80 stop (ON)
00000000                            		btst.b	#$00,($A11100).l			; has the Z80 stopped yet?
00000000                            		bne.s	*-$08					; if not, branch
00000000                            		endm
00000000                            
00000000                            	; --- Start Z80 ---
00000000                            
00000000                            StartZ80	macro
00000000                            		move.w	#$0000,($A11100).l			; request Z80 stop (OFF)
00000000                            		endm
00000000                            
00000000                            	; --- Turning DMA mode on ---
00000000                            
00000000                            Z80DMA_ON	macro
00000000                            		StopZ80
00000000                            		move.b	#(Flush&$FF),($A00000+FL_FlushSwitch+1).l	; change the "jp" instruction address to "Flush" routine loop
00000000                            		StartZ80
00000000                            		move.w	#$0180,d7				; set delay time (give z80 time to get out of the "CatchUp" routine...
00000000                            		nop						; ...and into the "Flush" routine, so the 68k doesn't start DMA before...
00000000                            		nop						; ...the z80 has a chance to stop reading from the window
00000000                            		dbf	d7,*-$04				; loop back and perform the nops again...
00000000                            		endm
00000000                            
00000000                            	; --- Turning DMA mode off ---
00000000                            
00000000                            Z80DMA_OFF	macro
00000000                            		StopZ80
00000000                            		move.b	#(CatchUp&$FF),($A00000+FL_FlushSwitch+1).l	; change the "jp" instruction address to "CatchUp" routine loop
00000000                            		StartZ80
00000000                            		endm
00000000                            
00000000                            
00000000                            	; --- Storing 68k address for Z80 as dc ---
00000000                            
00000000                            dcz80		macro	Sample
00000000                            		dc.b	(Sample&$FF)
00000000                            		dc.b	(((Sample>>$08)&$7F)|$80)
00000000                            		dc.b	((Sample&$7F8000)>>$0F)
00000000                            		endm
00000000                            
00000000                            ; =============
00000000                            ;Sonic 2 Macros
00000000                            ; =============
00000000                            
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
00000000                            ; Equates section - Names for variables.
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; size variables - you'll get an informational error if you need to change these...
00000000                            ; they are all in units of bytes
00000000 =00002F00                  Size_of_DAC_samples =		$2F00
00000000 =00006174                  Size_of_SEGA_sound =		$6174
00000000 =00000F64                  Size_of_Snd_driver_guess =	$F64 ; approximate post-compressed size of the Z80 sound driver
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Object Status Table offsets (for everything between Object_RAM and Primary_Collision)
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; universally followed object conventions:
00000000 =00000001                  render_flags =		  1 ; bitfield ; bit 7 = onscreen flag, bit 0 = x mirror, bit 1 = y mirror, bit 2 = coordinate system
00000000 =00000002                  art_tile =		  2 ; and 3 ; start of sprite's art
00000000 =00000004                  mappings =		  4 ; and 5 and 6 and 7
00000000 =00000008                  x_pos =			  8 ; and 9 ... some objects use $A and $B as well when extra precision is required (see ObjectMove) ... for screen-space objects this is called x_pixel instead
00000000 =0000000C                  y_pos =			 $C ; and $D ... some objects use $E and $F as well when extra precision is required ... screen-space objects use y_pixel instead
00000000 =00000018                  priority =		$18 ; 0 = front
00000000 =00000019                  width_pixels =		$19
00000000 =0000001A                  mapping_frame =		$1A
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions followed by most objects:
00000000 =00000010                  x_vel =			$10 ; and $11 ; horizontal velocity
00000000 =00000012                  y_vel =			$12 ; and $13 ; vertical velocity
00000000 =00000016                  y_radius =		$16 ; collision width / 2
00000000 =00000017                  x_radius =		$17 ; collision height / 2
00000000 =0000001B                  anim_frame =		$1B
00000000 =0000001C                  anim =			$1C
00000000 =0000001D                  next_anim =		$1D
00000000 =0000001E                  anim_frame_duration =	$1E
00000000 =00000022                  status =		$22 ; note: exact meaning depends on the object... for sonic/tails: bit 0: leftfacing. bit 1: inair. bit 2: spinning. bit 3: onobject. bit 4: rolljumping. bit 5: pushing. bit 6: underwater.
00000000 =00000024                  routine =		$24
00000000 =00000025                  routine_secondary =	$25
00000000 =00000026                  angle =			$26 ; angle about the z=0 axis (360 degrees = 256)
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions followed by many objects but NOT sonic/tails:
00000000 =00000020                  collision_flags =	$20
00000000 =00000021                  collision_property =	$21
00000000 =00000023                  respawn_index =		$23
00000000 =00000028                  subtype =		$28
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions specific to sonic/tails (Obj01, Obj02, and ObjDB):
00000000                            ; note: $1F, $20, and $21 are unused and available
00000000 =00000014                  inertia =		$14 ; and $15 ; directionless representation of speed... not updated in the air
00000000 =00000027                  flip_angle =		$27 ; angle about the x=0 axis (360 degrees = 256) (twist/tumble)
00000000 =00000028                  air_left =		$28
00000000 =00000029                  flip_turned =		$29 ; 0 for normal, 1 to invert flipping (it's a 180 degree rotation about the axis of Sonic's spine, so he stays in the same position but looks turned around)
00000000 =0000002A                  obj_control =		$2A ; 0 for normal, 1 for hanging or for resting on a flipper, $81 for going through CNZ/OOZ/MTZ tubes or stopped in CNZ cages or stoppers or flying if Tails
00000000 =0000002B                  status_secondary =	$2B
00000000 =0000002C                  flips_remaining =	$2C ; number of flip revolutions remaining
00000000 =0000002D                  flip_speed =		$2D ; number of flip revolutions per frame / 256
00000000 =0000002E                  move_lock =		$2E ; and $2F ; horizontal control lock, counts down to 0
00000000 =00000030                  invulnerable_time =	$30 ; and $31 ; time remaining until you stop blinking
00000000 =00000032                  invincibility_time =	$32 ; and $33 ; remaining
00000000 =00000034                  speedshoes_time =	$34 ; and $35 ; remaining
00000000 =00000036                  next_tilt =		$36 ; angle on ground in front of sprite
00000000 =00000037                  tilt =			$37 ; angle on ground
00000000 =00000038                  stick_to_convex =	$38 ; 0 for normal, 1 to make Sonic stick to convex surfaces like the rotating discs in Sonic 1 and 3 (unused in Sonic 2 but fully functional)
00000000 =00000039                  spindash_flag =		$39 ; 0 for normal, 1 for charging a spindash or forced rolling
00000000 =0000003A                  spindash_counter =	$3A ; and $3B
00000000 =0000003C                  jumping =		$3C
00000000 =0000003D                  interact =		$3D ; RAM address of the last object Sonic stood on, minus $FFFFB000 and divided by $40
00000000 =0000003E                  layer =			$3E ; collision plane, track switching...
00000000 =0000003F                  layer_plus =		$3F ; always same as layer+1 ?? used for collision somehow
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions followed by several objects but NOT sonic/tails:
00000000 =0000000A                  y_pixel =		2+x_pos ; and 3+x_pos ; y coordinate for objects using screen-space coordinate system
00000000 =00000008                  x_pixel =		x_pos ; and 1+x_pos ; x coordinate for objects using screen-space coordinate system
00000000 =0000003E                  parent =		$3E ; and $3F ; address of object that owns or spawned this one, if applicable
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; unknown or inconsistently used offsets that are not applicable to sonic/tails:
00000000                            ; (provided because rearrangement of the above values sometimes requires making space in here too)
00000000 =0000000A                  objoff_A =		2+x_pos ; note: x_pos can be 4 bytes, but sometimes the last 2 bytes of x_pos are used for other unrelated things
00000000 =0000000B                  objoff_B =		3+x_pos
00000000 =0000000E                  objoff_E =		2+y_pos
00000000 =0000000F                  objoff_F =		3+y_pos
00000000 =00000014                  objoff_14 =		$14
00000000 =00000015                  objoff_15 =		$15
00000000 =0000001F                  objoff_1F =		$1F
00000000 =00000027                  objoff_27 =		$27
00000000 =00000028                  objoff_28 =		$28 ; overlaps subtype, but a few objects use it for other things anyway
00000000 =00000029                  objoff_29 =		$29
00000000 =0000002A                  objoff_2A =		$2A
00000000 =0000002B                  objoff_2B =		$2B
00000000 =0000002C                  objoff_2C =		$2C
00000000 =0000002D                  objoff_2D =		$2D
00000000 =0000002E                  objoff_2E =		$2E
00000000 =0000002F                  objoff_2F =		$2F
00000000 =00000030                  objoff_30 =		$30
00000000 =00000031                  objoff_31 =		$31
00000000 =00000032                  objoff_32 =		$32
00000000 =00000033                  objoff_33 =		$33
00000000 =00000034                  objoff_34 =		$34
00000000 =00000035                  objoff_35 =		$35
00000000 =00000036                  objoff_36 =		$36
00000000 =00000037                  objoff_37 =		$37
00000000 =00000038                  objoff_38 =		$38
00000000 =00000039                  objoff_39 =		$39
00000000 =0000003A                  objoff_3A =		$3A
00000000 =0000003B                  objoff_3B =		$3B
00000000 =0000003C                  objoff_3C =		$3C
00000000 =0000003D                  objoff_3D =		$3D
00000000 =0000003E                  objoff_3E =		$3E
00000000 =0000003F                  objoff_3F =		$3F
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; property of all objects:
00000000 =00000040                  next_object =		$40 ; the size of an object
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; RAM variables
00000000 =FFFF0000                  RAM_Start =			$FFFF0000
00000000 =FFFF0000                  Metablock_Table =		$FFFF0000
00000000 =FFFF8000                  Level_Layout =			$FFFF8000
00000000 =FFFF9000                  Block_Table =			$FFFF9000
00000000 =FFFFAA00                  Decomp_Buffer =			$FFFFAA00
00000000 =FFFFAC00                  Sprite_Table_Input = 		$FFFFAC00 ; in custom format before being converted and stored in Sprite_Table/Sprite_Table_2
00000000 =FFFFB000                  Object_RAM =			$FFFFB000 ; through $FFFFD5FF
00000000 =FFFFB000                  MainCharacter =			$FFFFB000 ; first object (usually Sonic except in a Tails Alone game)
00000000 =FFFFB040                  Sidekick =			$FFFFB040 ; second object (Tails in a Sonic and Tails game)
00000000 =FFFFD000                  Tails_Tails =			$FFFFD000 ; address of the Tail's Tails object
00000000 =FFFFD100                  Sonic_Dust =			$FFFFD100
00000000 =FFFFD140                  Tails_Dust =			$FFFFD140
00000000                            
00000000 =FFFFD000                  PNT_Buffer =			$FFFFD000 ; in special stage
00000000 =FFFFD600                  Primary_Collision =		$FFFFD600
00000000 =FFFFD700                  Horiz_Scroll_Buf_2 =		$FFFFD700 ; in special stage
00000000 =FFFFD900                  Secondary_Collision =		$FFFFD900
00000000 =FFFFDC00                  VDP_Command_Buffer =		$FFFFDC00 ; stores VDP commands to issue the next time ProcessDMAQueue is called
00000000 =FFFFDCFC                  VDP_Command_Buffer_Slot =	$FFFFDCFC ; stores the address of the next open slot for a queued VDP command
00000000 =FFFFDD00                  Sprite_Table_2 =		$FFFFDD00 ; Sprite attribute table buffer for the bottom split screen in 2-player mode
00000000 =FFFFE000                  Horiz_Scroll_Buf =		$FFFFE000
00000000 =FFFFE400                  Sonic_Stat_Record_Buf =		$FFFFE400
00000000 =FFFFE500                  Sonic_Pos_Record_Buf =		$FFFFE500
00000000 =FFFFE600                  Tails_Pos_Record_Buf =		$FFFFE600
00000000 =FFFFE800                  Ring_Positions =		$FFFFE800
00000000 =FFFFEE00                  Camera_RAM =			$FFFFEE00
00000000 =FFFFEE00                  Camera_X_pos =			$FFFFEE00
00000000 =FFFFEE04                  Camera_Y_pos =			$FFFFEE04
00000000 =FFFFEEC6                  Camera_Max_Y_pos =		$FFFFEEC6
00000000 =FFFFEEC8                  Camera_Min_X_pos =		$FFFFEEC8
00000000 =FFFFEECA                  Camera_Max_X_pos =		$FFFFEECA
00000000 =FFFFEECC                  Camera_Min_Y_pos =		$FFFFEECC
00000000 =FFFFEECE                  Camera_Max_Y_pos_now =		$FFFFEECE ; was "Camera_max_scroll_spd"...
00000000 =FFFFEED2                  Sonic_Pos_Record_Index =	$FFFFEED2 ; into Sonic_Pos_Record_Buf and Sonic_Stat_Record_Buf
00000000 =FFFFEED6                  Tails_Pos_Record_Index =	$FFFFEED6 ; into Tails_Pos_Record_Buf
00000000 =FFFFEED8                  Camera_Y_pos_bias =		$FFFFEED8 ; added to y position for lookup/lookdown, $60 is center
00000000 =FFFFEEDA                  Camera_Y_pos_bias_2P =		$FFFFEEDA ; for Tails
00000000 =FFFFEEDF                  Dynamic_Resize_Routine =	$FFFFEEDF
00000000 =FFFFEEF8                  Tails_Min_X_pos =		$FFFFEEF8
00000000 =FFFFEEFA                  Tails_Max_X_pos =		$FFFFEEFA
00000000 =FFFFEEFE                  Tails_Max_Y_pos =		$FFFFEEFE
00000000                            
00000000 =FFFFF000                  Underwater_palette_2 = 		$FFFFF000 ; not sure what it's used for but it's only used when there's water
00000000 =FFFFF080                  Underwater_palette = 		$FFFFF080 ; main palette for underwater parts of the screen
00000000 =FFFFF0E0                  Underwater_palette_line4 = 	$FFFFF0E0
00000000                            
00000000 =FFFFF600                  Game_Mode =			$FFFFF600 ; 1 byte ; see GameModesArray (master level trigger, Mstr_Lvl_Trigger)
00000000 =FFFFF602                  Ctrl_1_Logical =		$FFFFF602 ; 2 bytes
00000000 =FFFFF602                  Ctrl_1_Held_Logical =		$FFFFF602 ; 1 byte
00000000 =FFFFF603                  Ctrl_1_Press_Logical =		$FFFFF603 ; 1 byte
00000000 =FFFFF604                  Ctrl_1 =			$FFFFF604 ; 2 bytes
00000000 =FFFFF604                  Ctrl_1_Held =			$FFFFF604 ; 1 byte ; (pressed and held were switched around before)
00000000 =FFFFF605                  Ctrl_1_Press =			$FFFFF605 ; 1 byte
00000000 =FFFFF606                  Ctrl_2 =			$FFFFF606 ; 2 bytes
00000000 =FFFFF606                  Ctrl_2_Held =			$FFFFF606 ; 1 byte
00000000 =FFFFF607                  Ctrl_2_Press =			$FFFFF607 ; 1 byte
00000000 =FFFFF614                  Demo_Time_left =		$FFFFF614 ; 2 bytes
00000000                            
00000000 =FFFFF616                  Vscroll_Factor =		$FFFFF616
00000000 =FFFFF624                  Hint_counter_reserve =		$FFFFF624 ; Must contain a VDP command word, preferably a write to register $0A. Executed every V-INT.
00000000 =FFFFF62A                  Delay_Time =			$FFFFF62A ; number of frames to delay the game
00000000 =FFFFF636                  RNG_seed =			$FFFFF636 ; used for random number generation
00000000 =FFFFF63A                  Game_paused =			$FFFFF63A
00000000 =FFFFF640                  DMA_data_thunk =		$FFFFF640 ; Used as a RAM holder for the final DMA command word. Data will NOT be preserved across V-INTs, so consider this space reserved.
00000000                            
00000000 =FFFFF646                  Water_Level_1 =			$FFFFF646
00000000 =FFFFF648                  Water_Level_2 =			$FFFFF648
00000000 =FFFFF64A                  Water_Level_3 =			$FFFFF64A
00000000 =FFFFF64D                  Water_routine =			$FFFFF64D
00000000 =FFFFF64E                  Water_move =			$FFFFF64E
00000000 =FFFFF64C                  Water_on =			$FFFFF64C ; is set based on Water_flag
00000000 =FFFFF650                  New_Water_Level =		$FFFFF650
00000000 =FFFFF652                  Water_change_speed =		$FFFFF652
00000000 =FFFFF65E                  Palette_frame_count =		$FFFFF65E
00000000                            
00000000 =FFFFF66A                  Ctrl_2_Logical =		$FFFFF66A ; 2 bytes
00000000 =FFFFF66A                  Ctrl_2_Held_Logical =		$FFFFF66A ; 1 byte
00000000 =FFFFF66B                  Ctrl_2_Press_Logical =		$FFFFF66B ; 1 byte
00000000 =FFFFF66C                  Sonic_Look_delay_counter = 	$FFFFF66C ; 2 bytes
00000000 =FFFFF66E                  Tails_Look_delay_counter = 	$FFFFF66E ; 2 bytes
00000000 =FFFFF670                  Super_Sonic_frame_count =	$FFFFF670
00000000 =FFFFF680                  Plc_Buffer =			$FFFFF680 ; Pattern load queue
00000000                            
00000000 =FFFFF700                  Misc_Variables =		$FFFFF700
00000000                            
00000000                            ; extra variables for the second player (CPU) in 1-player mode
00000000 =FFFFF702                  Tails_control_counter =		$FFFFF702 ; how long until the CPU takes control
00000000 =FFFFF704                  Tails_respawn_counter =		$FFFFF704
00000000 =FFFFF708                  Tails_CPU_routine =		$FFFFF708
00000000 =FFFFF70A                  Tails_CPU_target_x =		$FFFFF70A
00000000 =FFFFF70C                  Tails_CPU_target_y =		$FFFFF70C
00000000 =FFFFF70E                  Tails_interact_ID =		$FFFFF70E ; object ID of last object stood on
00000000                            
00000000 =FFFFF711                  Level_started_flag =		$FFFFF711
00000000 =FFFFF71A                  CNZ_Bumper_routine =		$FFFFF71A
00000000 =FFFFF72C                  Dirty_flag =			$FFFFF72C ; if whole screen needs to redraw
00000000 =FFFFF730                  Water_flag =			$FFFFF730 ; if the level has water or oil
00000000                            
00000000 =FFFFF760                  Sonic_top_speed =		$FFFFF760
00000000 =FFFFF762                  Sonic_acceleration =		$FFFFF762
00000000 =FFFFF764                  Sonic_deceleration =		$FFFFF764
00000000 =FFFFF76C                  Obj_placement_routine =		$FFFFF76C
00000000 =FFFFF770                  Obj_load_addr_0 =		$FFFFF770
00000000 =FFFFF774                  Obj_load_addr_1 =		$FFFFF774
00000000 =FFFFF778                  Obj_load_addr_2 =		$FFFFF778
00000000 =FFFFF77C                  Obj_load_addr_3 =		$FFFFF77C
00000000 =FFFFF790                  Demo_button_index =		$FFFFF790 ; index into button press demo data, for player 1
00000000 =FFFFF792                  Demo_press_counter =		$FFFFF792 ; frames remaining until next button press, for player 1
00000000 =FFFFF732                  Demo_button_index_2P =		$FFFFF732 ; index into button press demo data, for player 2
00000000 =FFFFF734                  Demo_press_counter_2P =		$FFFFF734 ; frames remaining until next button press, for player 2
00000000 =FFFFF796                  Collision_addr =		$FFFFF796
00000000 =FFFFF7AA                  Current_Boss_ID =		$FFFFF7AA
00000000 =FFFFF7CC                  Control_Locked =		$FFFFF7CC
00000000 =FFFFF7D0                  Chain_Bonus_counter =		$FFFFF7D0 ; counts up when you destroy things that give points, resets when you touch the ground
00000000 =FFFFF7D2                  Bonus_Countdown_1 =		$FFFFF7D2 ; level results time bonus or special stage sonic ring bonus
00000000 =FFFFF7D4                  Bonus_Countdown_2 =		$FFFFF7D4 ; level results ring bonus or special stage tails ring bonus
00000000 =FFFFF7D6                  Update_Bonus_score =		$FFFFF7D6
00000000 =FFFFF7DA                  Camera_X_pos_coarse =		$FFFFF7DA ; (Camera_X_pos - 128) / 256
00000000                            
00000000 =FFFFF800                  Sprite_Table =			$FFFFF800 ; Sprite attribute table buffer
00000000                            
00000000 =FFFFFB00                  Normal_palette =		$FFFFFB00
00000000 =FFFFFB20                  Normal_palette_line2 =		$FFFFFB20
00000000 =FFFFFB40                  Normal_palette_line3 =		$FFFFFB40
00000000 =FFFFFB60                  Normal_palette_line4 =		$FFFFFB60
00000000 =FFFFFB80                  Second_palette =		$FFFFFB80
00000000 =FFFFFBA0                  Second_palette_line2 =		$FFFFFBA0
00000000 =FFFFFBC0                  Second_palette_line3 =		$FFFFFBC0
00000000 =FFFFFBE0                  Second_palette_line4 =		$FFFFFBE0
00000000                            
00000000 =FFFFFC00                  Object_Respawn_Table =		$FFFFFC00
00000000 =FFFFFE00                  System_Stack =			$FFFFFE00
00000000 =FFFFFE02                  Level_Inactive_flag = 		$FFFFFE02 ; (2 bytes)
00000000 =FFFFFE04                  Timer_frames =			$FFFFFE04 ; (2 bytes)
00000000 =FFFFFE06                  Debug_object =			$FFFFFE06
00000000 =FFFFFE08                  Debug_placement_mode =		$FFFFFE08
00000000 =FFFFFE10                  Current_ZoneAndAct =		$FFFFFE10 ; 2 bytes
00000000 =FFFFFE10                  Current_Zone =			$FFFFFE10 ; 1 byte
00000000 =FFFFFE11                  Current_Act =			$FFFFFE11 ; 1 byte
00000000 =FFFFFE12                  Life_count =			$FFFFFE12
00000000 =FFFFFE16                  Current_Special_Stage =		$FFFFFE16
00000000 =FFFFFE18                  Continue_count =		$FFFFFE18
00000000 =FFFFFE19                  Super_Sonic_flag =		$FFFFFE19
00000000 =FFFFFE1A                  Time_Over_flag =		$FFFFFE1A
00000000 =FFFFFE1B                  Extra_life_flags =		$FFFFFE1B
00000000                            
00000000                            ; If set, the respective HUD element will be updated.
00000000 =FFFFFE1C                  Update_HUD_lives =		$FFFFFE1C
00000000 =FFFFFE1D                  Update_HUD_rings =		$FFFFFE1D
00000000 =FFFFFE1E                  Update_HUD_timer =		$FFFFFE1E
00000000 =FFFFFE1F                  Update_HUD_score =		$FFFFFE1F
00000000                            
00000000 =FFFFFE20                  Ring_count =			$FFFFFE20 ; 2 bytes
00000000 =FFFFFE22                  Timer =				$FFFFFE22 ; 4 bytes
00000000 =FFFFFE22                  Timer_minute_word =		$FFFFFE22 ; 2 bytes
00000000 =FFFFFE23                  Timer_minute =			$FFFFFE23 ; 1 byte
00000000 =FFFFFE24                  Timer_second =			$FFFFFE24 ; 1 byte
00000000 =FFFFFE25                  Timer_centisecond =		$FFFFFE25 ; 1 byte
00000000 =FFFFFE26                  Score =				$FFFFFE26 ; 4 bytes
00000000 =FFFFFE30                  Last_star_pole_hit =		$FFFFFE30 ; 1 byte -- max activated starpole ID in this act
00000000                            
00000000 =FFFFFE31                  Saved_Last_star_pole_hit =	$FFFFFE31
00000000 =FFFFFE32                  Saved_x_pos =			$FFFFFE32
00000000 =FFFFFE34                  Saved_y_pos =			$FFFFFE34
00000000 =FFFFFE36                  Saved_Ring_count =		$FFFFFE36
00000000 =FFFFFE38                  Saved_Timer =			$FFFFFE38
00000000 =FFFFFE3C                  Saved_art_tile =		$FFFFFE3C
00000000 =FFFFFE3E                  Saved_layer =			$FFFFFE3E
00000000 =FFFFFE40                  Saved_Camera_X_pos =		$FFFFFE40
00000000 =FFFFFE42                  Saved_Camera_Y_pos =		$FFFFFE42
00000000 =FFFFFE50                  Saved_Water_Level =		$FFFFFE50
00000000 =FFFFFE52                  Saved_Water_routine =		$FFFFFE52
00000000 =FFFFFE53                  Saved_Water_move =		$FFFFFE53
00000000 =FFFFFE54                  Saved_Extra_life_flags =	$FFFFFE54
00000000 =FFFFFE55                  Saved_Extra_life_flags_2P =	$FFFFFE55
00000000 =FFFFFE56                  Saved_Camera_Max_Y_pos =	$FFFFFE56
00000000 =FFFFFE58                  Saved_Dynamic_Resize_Routine =	$FFFFFE58
00000000                            
00000000 =FFFFFEA0                  Logspike_anim_counter =		$FFFFFEA0
00000000 =FFFFFEA1                  Logspike_anim_frame =		$FFFFFEA1
00000000 =FFFFFEA2                  Rings_anim_counter =		$FFFFFEA2
00000000 =FFFFFEA3                  Rings_anim_frame =		$FFFFFEA3
00000000 =FFFFFEA4                  Unknown_anim_counter =		$FFFFFEA4 ; I think this was $FFFFFEC4 in the alpha
00000000 =FFFFFEA5                  Unknown_anim_frame =		$FFFFFEA5
00000000 =FFFFFEA6                  Ring_spill_anim_counter =	$FFFFFEA6 ; scattered rings
00000000 =FFFFFEA7                  Ring_spill_anim_frame =		$FFFFFEA7
00000000 =FFFFFEA8                  Ring_spill_anim_accum =		$FFFFFEA8
00000000                            
00000000                            ; values for the second player (some of these only apply to 2-player games)
00000000 =FFFFFEC0                  Tails_top_speed =		$FFFFFEC0 ; Tails_max_vel
00000000 =FFFFFEC2                  Tails_acceleration =		$FFFFFEC2
00000000 =FFFFFEC4                  Tails_deceleration =		$FFFFFEC4
00000000 =FFFFFEC6                  Life_count_2P =			$FFFFFEC6
00000000 =FFFFFEC7                  Extra_life_flags_2P =		$FFFFFEC7
00000000 =FFFFFEC8                  Update_HUD_lives_2P =		$FFFFFEC8
00000000 =FFFFFEC9                  Update_HUD_rings_2P =		$FFFFFEC9
00000000 =FFFFFECA                  Update_HUD_timer_2P =		$FFFFFECA
00000000 =FFFFFECB                  Update_HUD_score_2P =		$FFFFFECB ; mostly unused
00000000 =FFFFFECC                  Time_Over_flag_2P =		$FFFFFECC
00000000 =FFFFFED0                  Ring_count_2P =			$FFFFFED0
00000000 =FFFFFED2                  Timer_2P =			$FFFFFED2 ; 4 bytes
00000000 =FFFFFED2                  Timer_minute_word_2P =		$FFFFFED2 ; 2 bytes
00000000 =FFFFFED3                  Timer_minute_2P =		$FFFFFED3 ; 1 byte
00000000 =FFFFFED4                  Timer_second_2P =		$FFFFFED4 ; 1 byte
00000000 =FFFFFED5                  Timer_centisecond_2P =		$FFFFFED5 ; 1 byte
00000000 =FFFFFED6                  Score_2P =			$FFFFFED6
00000000 =FFFFFEE0                  Last_star_pole_hit_2P =		$FFFFFEE0
00000000                            
00000000 =FFFFFEE1                  Saved_Last_star_pole_hit_2P =	$FFFFFEE1
00000000 =FFFFFEE2                  Saved_x_pos_2P =		$FFFFFEE2
00000000 =FFFFFEE4                  Saved_y_pos_2P =		$FFFFFEE4
00000000 =FFFFFEE6                  Saved_Ring_count_2P =		$FFFFFEE6
00000000 =FFFFFEE8                  Saved_Timer_2P =		$FFFFFEE8
00000000 =FFFFFEEC                  Saved_art_tile_2P =		$FFFFFEEC
00000000 =FFFFFEEE                  Saved_layer_2P =		$FFFFFEEE
00000000                            
00000000 =FFFFFEF8                  Loser_Time_Left =		$FFFFFEF8
00000000 =FFFFFF10                  Results_Screen_2P =		$FFFFFF10 ; 0 = act, 1 = zone, 2 = game, 3 = SS, 4 = SS all
00000000 =FFFFFF20                  Results_Data_2P =		$FFFFFF20 ; $18 bytes
00000000 =FFFFFF20                  EHZ_Results_2P =		$FFFFFF20 ; 6 bytes
00000000 =FFFFFF26                  MCZ_Results_2P =		$FFFFFF26 ; 6 bytes
00000000 =FFFFFF2C                  CNZ_Results_2P =		$FFFFFF2C ; 6 bytes
00000000 =FFFFFF32                  SS_Results_2P =			$FFFFFF32 ; 6 bytes
00000000 =FFFFFF38                  SS_Total_Won =			$FFFFFF38 ; 2 bytes (player 1 then player 2)
00000000 =FFFFFF40                  Perfect_rings_left =		$FFFFFF40
00000000 =FFFFFF70                  Player_mode =			$FFFFFF70 ; 0 = Sonic and Tails, 1 = Sonic, 2 = Tails
00000000 =FFFFFF72                  Player_option =			$FFFFFF72 ; 0 = Sonic and Tails, 1 = Sonic, 2 = Tails
00000000                            
00000000 =FFFFFF74                  Two_player_items =		$FFFFFF74
00000000 =FFFFFF82                  Level_select_zone =		$FFFFFF82
00000000 =FFFFFF84                  Sound_test_sound =		$FFFFFF84
00000000 =FFFFFF86                  Title_screen_option =		$FFFFFF86
00000000 =FFFFFF88                  Current_Zone_2P =		$FFFFFF88
00000000 =FFFFFF89                  Current_Act_2P =		$FFFFFF89
00000000 =FFFFFF8A                  Two_player_mode_copy =		$FFFFFF8A
00000000 =FFFFFF8C                  Options_menu_box =		$FFFFFF8C
00000000 =FFFFFF90                  Level_Music =			$FFFFFF90
00000000 =FFFFFF98                  Game_Over_2P =			$FFFFFF98
00000000 =FFFFFFB0                  Got_Emerald =			$FFFFFFB0
00000000 =FFFFFFB1                  Emerald_count =			$FFFFFFB1
00000000 =FFFFFFB2                  Got_Emeralds_array =		$FFFFFFB2 ; 7 bytes
00000000 =FFFFFFC0                  Next_Extra_life_score =		$FFFFFFC0
00000000 =FFFFFFC4                  Next_Extra_life_score_2P =	$FFFFFFC4
00000000 =FFFFFFC8                  Level_Has_Signpost =		$FFFFFFC8 ; 1 byte ; 1 = signpost, 0 = boss or nothing
00000000 =FFFFFFD0                  Level_select_flag =		$FFFFFFD0
00000000 =FFFFFFD4                  Correct_cheat_entries =		$FFFFFFD4
00000000 =FFFFFFD6                  Correct_cheat_entries_2 =	$FFFFFFD6 ; for 14 continues or 7 emeralds codes
00000000 =FFFFFFD8                  Two_player_mode =		$FFFFFFD8 ; flag (0 for main game)
00000000                            
00000000                            ; Values in these variables are passed to the sound driver during V-INT.
00000000                            ; They use a playlist index, not a sound test index.
00000000 =FFFFFFE0                  Music_to_play =			$FFFFFFE0
00000000 =FFFFFFE1                  SFX_to_play =			$FFFFFFE1 ; normal
00000000 =FFFFFFE2                  SFX_to_play_2 =			$FFFFFFE2 ; alternating stereo
00000000 =FFFFFFE4                  Music_to_play_2 =		$FFFFFFE4 ; alternate (higher priority?) slot
00000000                            
00000000 =FFFFFFF0                  Demo_mode_flag =		$FFFFFFF0 ; 1 if a demo is playing (2 bytes)
00000000 =FFFFFFF2                  Demo_number =			$FFFFFFF2 ; which demo will play next (2 bytes)
00000000 =FFFFFFF8                  Graphics_Flags =		$FFFFFFF8 ; misc. bitfield
00000000 =FFFFFFFC                  Checksum_fourcc =		$FFFFFFFC ; (4 bytes)
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; VDP addressses
00000000 =00C00000                  VDP_data_port =			$C00000 ; (8=r/w, 16=r/w)
00000000 =00C00004                  VDP_control_port =		$C00004 ; (8=r/w, 16=r/w)
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Z80 addresses
00000000 =00A00000                  Z80_RAM =			$A00000 ; start of Z80 RAM
00000000 =00A02000                  Z80_RAM_End =			$A02000 ; end of non-reserved Z80 RAM
00000000 =00A10001                  Z80_Version =			$A10001
00000000 =00A10002                  Z80_Port_1_Data =		$A10002
00000000 =00A10008                  Z80_Port_1_Control =		$A10008
00000000 =00A1000A                  Z80_Port_2_Control =		$A1000A
00000000 =00A1000C                  Z80_Expansion_Control =		$A1000C
00000000 =00A11100                  Z80_Bus_Request =		$A11100
00000000 =00A11200                  Z80_Reset =			$A11200
00000000                            
00000000 =00A14000                  Security_Addr =			$A14000	
00000000 =00A14000                  Security_Addr =			$A14000	
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:    dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+          dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+          dc.l PrivilegeViol, Trace, Line1010Emu, Line1111Emu
00000030 0000 0000 0000 0000 0000+          dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+          dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+          dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+          dc.l ErrorExcept, ErrorTrap, ErrorTrap, ErrorTrap
00000070 0000 0000 0000 0000 0000+          dc.l PalToCRAM,    ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
00000100                            
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2953 4547 4120 3139+  Date:		dc.b '(C)SEGA 1991.APR' ; Release date
00000120 534F 4E49 4320 5448 4520+  Title_Local:	dc.b 'SONIC THE               HEDGEHOG 4 EPISODE I    ' ; Domestic name
00000150 534F 4E49 4320 5448 4520+  Title_Int:	dc.b 'SONIC THE               HEDGEHOG 4 EPISODE I    ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            jmp_DisplaySprite:
00000300 4EF9 0000 0000             	jmp DisplaySprite
00000306                            
00000306                            GameProgram:
00000306 4A79 00C0 0004             		tst.w	($C00004).l
0000030C 0839 0006 00A1 000D        		btst	#6,($A1000D).l
00000314 6700                       		beq.s	CheckSumCheck
00000316 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
0000031E 6700 0000                  		beq.w	GameInit	; if yes, branch
00000322                            
00000322                            CheckSumCheck:
00000322 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000328 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
0000032E 2011                       		move.l	(a1),d0
00000330 7200                       		moveq	#0,d1
00000332                            
00000332                            loc_32C:
00000332 D258                       		add.w	(a0)+,d1
00000334 B088                       		cmp.l	a0,d0
00000336 64FA                       		bcc.s	loc_32C
00000338 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
0000033E                            	;	cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033E                            	;	bne.w	CheckSumError	; if they don't match, branch
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            
00000348                            loc_348:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,loc_348
0000034E 1039 00A1 0001             		move.b	($A10001).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            
00000370                            GameClrRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000376 6100 0000                  		bsr.w	VDPSetupGame
0000037A 6100 0000                  		bsr.w	SoundDriverLoad
0000037E 6100 0000                  		bsr.w	JoypadInit
00000382 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000388                            
00000388                            MainGameLoop:
00000388 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000038C 0240 001C                  		andi.w	#$1C,d0
00000390 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000394 60F2                       		bra.s	MainGameLoop
00000396                            ; ===========================================================================
00000396                            ; ---------------------------------------------------------------------------
00000396                            ; Main game mode array
00000396                            ; ---------------------------------------------------------------------------
00000396                            
00000396                            GameModeArray:
00000396 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000039A                            ; ===========================================================================
0000039A 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000039E                            ; ===========================================================================
0000039E 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A2                            ; ===========================================================================
000003A2 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003A6                            ; ===========================================================================
000003A6 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003AA                            ; ===========================================================================
000003AA 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003AE                            ; ===========================================================================
000003AE 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003B2                            ; ===========================================================================
000003B2 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003B6                            ; ===========================================================================
000003B6 4E75                       		rts
000003B8                            ; ===========================================================================
000003B8                            
000003B8                            CheckSumError:
000003B8 6100 0000                  		bsr.w	VDPSetupGame
000003BC 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003C6 7E3F                       		moveq	#$3F,d7
000003C8                            
000003C8                            CheckSum_Red:
000003C8 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003D0 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003D4                            
000003D4                            CheckSum_Loop:
000003D4 60FE                       		bra.s	CheckSum_Loop
000003D6                            ; ===========================================================================
000003D6                            
000003D6                            loc_43A:
000003D6 46FC 2700                  		move	#$2700,sr
000003DA 544F                       		addq.w	#2,sp
000003DC 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
000003E0 544F                       		addq.w	#2,sp
000003E2 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
000003E8 6100 0000                  		bsr.w	ShowErrorMsg
000003EC 202F 0002                  		move.l	2(sp),d0
000003F0 6100 0000                  		bsr.w	sub_5BA
000003F4 2038 FC40                  		move.l	($FFFFFC40).w,d0
000003F8 6100 0000                  		bsr.w	sub_5BA
000003FC 6000                       		bra.s	loc_478
000003FE                            ; ===========================================================================
000003FE                            
000003FE                            loc_462:
000003FE 46FC 2700                  		move	#$2700,sr
00000402 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000408 6100 0000                  		bsr.w	ShowErrorMsg
0000040C 202F 0002                  		move.l	2(sp),d0
00000410 6100 0000                  		bsr.w	sub_5BA
00000414                            
00000414                            loc_478:
00000414 6100 0000                  		bsr.w	ErrorWaitForC
00000418 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
0000041E 46FC 2300                  		move	#$2300,sr
00000422 4E73                       		rte	
00000424                            
00000424                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000424                            
00000424                            
00000424                            ShowErrorMsg:				; XREF: loc_43A; loc_462
00000424 4DF9 00C0 0000             		lea	($C00000).l,a6
0000042A 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
00000434 41F9 0000 0000             		lea	(Art_Text).l,a0
0000043A 323C 027F                  		move.w	#$27F,d1
0000043E                            
0000043E                            Error_LoadGfx:
0000043E 3C98                       		move.w	(a0)+,(a6)
00000440 51C9 FFFC                  		dbf	d1,Error_LoadGfx
00000444 7000                       		moveq	#0,d0		; clear	d0
00000446 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
0000044A 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
0000044E 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
00000452 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
0000045C 7212                       		moveq	#$12,d1		; number of characters
0000045E                            
0000045E                            Error_LoopChars:
0000045E 7000                       		moveq	#0,d0
00000460 1018                       		move.b	(a0)+,d0
00000462 0640 0790                  		addi.w	#$790,d0
00000466 3C80                       		move.w	d0,(a6)
00000468 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
0000046C 4E75                       		rts	
0000046E                            ; End of function ShowErrorMsg
0000046E                            
0000046E                            ; ===========================================================================
0000046E 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
00000472 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
00000476 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
0000047A 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
0000047E 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
00000482 0000                       		dc.w asc_5A6-ErrorText
00000484 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
00000497 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
000004AA 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
000004BD 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
000004D0 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
000004E3 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
000004F6 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
00000509 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
0000051C 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
0000052F 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
00000542 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
00000556 00                         		even
00000556                            
00000556                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000556                            
00000556                            
00000556                            sub_5BA:				; XREF: loc_43A; loc_462
00000556 3CBC 07CA                  		move.w	#$7CA,(a6)
0000055A 7407                       		moveq	#7,d2
0000055C                            
0000055C                            loc_5C0:
0000055C E998                       		rol.l	#4,d0
0000055E 6100                       		bsr.s	sub_5CA
00000560 51CA FFFA                  		dbf	d2,loc_5C0
00000564 4E75                       		rts	
00000566                            ; End of function sub_5BA
00000566                            
00000566                            
00000566                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000566                            
00000566                            
00000566                            sub_5CA:				; XREF: sub_5BA
00000566 3200                       		move.w	d0,d1
00000568 0241 000F                  		andi.w	#$F,d1
0000056C 0C41 000A                  		cmpi.w	#$A,d1
00000570 6500                       		bcs.s	loc_5D8
00000572 5E41                       		addq.w	#7,d1
00000574                            
00000574                            loc_5D8:
00000574 0641 07C0                  		addi.w	#$7C0,d1
00000578 3C81                       		move.w	d1,(a6)
0000057A 4E75                       		rts	
0000057C                            ; End of function sub_5CA
0000057C                            
0000057C                            
0000057C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000057C                            
0000057C                            
0000057C                            ErrorWaitForC:				; XREF: loc_478
0000057C 6100 0000                  		bsr.w	ReadJoypads
00000580 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
00000586 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
0000058A 4E75                       		rts	
0000058C                            ; End of function ErrorWaitForC
0000058C                            
0000058C                            ; ===========================================================================
0000058C                            
0000058C                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000AAC                            		even
00000AAC                            
00000AAC                            ; ===========================================================================
00000AAC                            
00000AAC                            loc_B10:				; XREF: Vectors
00000AAC 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000AB0 4A38 F62A                  		tst.b	($FFFFF62A).w
00000AB4 6700                       		beq.s	loc_B88
00000AB6 3039 00C0 0004             		move.w	($C00004).l,d0
00000ABC 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000AC6 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000ACE 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000AD4 6700                       		beq.s	loc_B42
00000AD6 303C 0700                  		move.w	#$700,d0
00000ADA                            
00000ADA                            loc_B3E:
00000ADA 51C8 FFFE                  		dbf	d0,loc_B3E
00000ADE                            
00000ADE                            loc_B42:
00000ADE 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000AE2 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000AE8 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000AEE 0240 003E                  		andi.w	#$3E,d0
00000AF2 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000AF6 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000AFA                            
00000AFA                            loc_B5E:				; XREF: loc_B88
00000AFA 4EB9 0000 0000             		jsr	sub_71B4C
00000B00                            
00000B00                            loc_B64:				; XREF: loc_D50
00000B00 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000B04 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B08 4E73                       		rte
00000B0A                            ; ===========================================================================
00000B0A 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000B0E 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000B12 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000B16 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000B1A 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000B1E 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000B22 0000                       		dc.w loc_E72-off_B6E
00000B24                            ; ===========================================================================
00000B24                            
00000B24                            loc_B88:				; XREF: loc_B10; off_B6E
00000B24 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000B2A 6700                       		beq.s	loc_B9A
00000B2C 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000B32 6600 FFC6                  		bne.w	loc_B5E
00000B36                            
00000B36                            loc_B9A:
00000B36 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000B3C 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000B40 3039 00C0 0004             		move.w	($C00004).l,d0
00000B46 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000B4C 6700                       		beq.s	loc_BBA
00000B4E 303C 0700                  		move.w	#$700,d0
00000B52                            
00000B52                            loc_BB6:
00000B52 51C8 FFFE                  		dbf	d0,loc_BB6
00000B56                            
00000B56                            loc_BBA:
00000B56 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000B5C 33FC 0100 00A1 1100 0839+  	Z80DMA_ON
00000B8A 4A38 F64E                  		tst.b	($FFFFF64E).w
00000B8E 6600                       		bne.s	loc_BFE
00000B90 4BF9 00C0 0004             		lea	($C00004).l,a5
00000B96 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000B9C 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000BA2 3ABC 977F                  		move.w	#$977F,(a5)
00000BA6 3ABC C000                  		move.w	#$C000,(a5)
00000BAA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BB0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BB4 6000                       		bra.s	loc_C22
00000BB6                            ; ===========================================================================
00000BB6                            
00000BB6                            loc_BFE:				; XREF: loc_BC8
00000BB6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BBC 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000BC2 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000BC8 3ABC 977F                  		move.w	#$977F,(a5)
00000BCC 3ABC C000                  		move.w	#$C000,(a5)
00000BD0 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BD6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BDA                            
00000BDA                            loc_C22:				; XREF: loc_BC8
00000BDA 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000BDE 33FC 0100 00A1 1100 0839+  	Z80DMA_OFF
00000C00 6000 FEF8                  		bra.w	loc_B5E
00000C04                            ; ===========================================================================
00000C04                            
00000C04                            loc_C32:				; XREF: off_B6E
00000C04 6100 0000                  		bsr.w	sub_106E
00000C08                            
00000C08                            loc_C36:				; XREF: off_B6E
00000C08 4A78 F614                  		tst.w	($FFFFF614).w
00000C0C 6700 0000                  		beq.w	locret_C42
00000C10 5378 F614                  		subq.w	#1,($FFFFF614).w
00000C14                            
00000C14                            locret_C42:
00000C14 4E75                       		rts
00000C16                            ; ===========================================================================
00000C16                            
00000C16                            loc_C44:				; XREF: off_B6E
00000C16 6100 0000                  		bsr.w	sub_106E
00000C1A 6100 0000                  		bsr.w	sub_6886
00000C1E 6100 0000                  		bsr.w	sub_1642
00000C22 4A78 F614                  		tst.w	($FFFFF614).w
00000C26 6700 0000                  		beq.w	locret_C5C
00000C2A 5378 F614                  		subq.w	#1,($FFFFF614).w
00000C2E                            
00000C2E                            locret_C5C:
00000C2E 4E75                       		rts
00000C30                            ; ===========================================================================
00000C30                            
00000C30                            loc_C5E:				; XREF: off_B6E
00000C30 6100 0000                  		bsr.w	sub_106E
00000C34 4E75                       		rts
00000C36                            
00000C36                            Return:
00000C36 6100 0000                  		bsr.w	ReadJoypads
00000C3A 4E75                       		rts
00000C3C                            ; ===========================================================================
00000C3C                            
00000C3C                            loc_C64:				; XREF: off_B6E
00000C3C 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000C42 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000C46                            
00000C46                            loc_C6E:				; XREF: off_B6E
00000C46 33FC 0100 00A1 1100 0839+  	Z80DMA_ON
00000C74 6100 0000                  		bsr.w	ReadJoypads
00000C78 4A38 F64E                  		tst.b	($FFFFF64E).w
00000C7C 6600                       		bne.s	loc_CB0
00000C7E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C84 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C8A 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000C90 3ABC 977F                  		move.w	#$977F,(a5)
00000C94 3ABC C000                  		move.w	#$C000,(a5)
00000C98 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C9E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CA2 6000                       		bra.s	loc_CD4
00000CA4                            ; ===========================================================================
00000CA4                            
00000CA4                            loc_CB0:				; XREF: loc_C76
00000CA4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CAA 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000CB0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000CB6 3ABC 977F                  		move.w	#$977F,(a5)
00000CBA 3ABC C000                  		move.w	#$C000,(a5)
00000CBE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000CC4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CC8                            
00000CC8                            loc_CD4:				; XREF: loc_C76
00000CC8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000CCC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CD2 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000CD8 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000CDE 3ABC 977F                  		move.w	#$977F,(a5)
00000CE2 3ABC 7C00                  		move.w	#$7C00,(a5)
00000CE6 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000CEC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CF0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CF6 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000CFC 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000D02 3ABC 977F                  		move.w	#$977F,(a5)
00000D06 3ABC 7800                  		move.w	#$7800,(a5)
00000D0A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D10 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D14 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000D1A                            
00000D1A                            loc_D50:
00000D1A 33FC 0100 00A1 1100 0839+  	Z80DMA_OFF
00000D3C 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000D42 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000D48 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000D4E 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000D54 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000D5A 6400                       		bcc.s	Demo_Time
00000D5C 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000D62 588F                       		addq.l	#4,sp
00000D64 6000 FD9A                  		bra.w	loc_B64
00000D68                            
00000D68                            ; ---------------------------------------------------------------------------
00000D68                            ; Subroutine to	run a demo for an amount of time
00000D68                            ; ---------------------------------------------------------------------------
00000D68                            
00000D68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000D68                            
00000D68                            
00000D68                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000D68 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000D6C 4EB9 0000 0000             		jsr	AniArt_Load
00000D72 4EB9 0000 0000             		jsr	HudUpdate
00000D78 6100 0000                  		bsr.w	sub_165E
00000D7C 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000D80 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000D84 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000D88                            
00000D88                            Demo_TimeEnd:
00000D88 4E75                       		rts
00000D8A                            ; End of function Demo_Time
00000D8A                            
00000D8A                            ; ===========================================================================
00000D8A                            
00000D8A                            loc_DA6:				; XREF: off_B6E
00000D8A 6100 0000                  		bsr.w	ReadJoypads
00000D8E 33FC 0100 00A1 1100 0839+  	Z80DMA_ON
00000DBC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DC2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000DC8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000DCE 3ABC 977F                  		move.w	#$977F,(a5)
00000DD2 3ABC C000                  		move.w	#$C000,(a5)
00000DD6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DDC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DE0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DE6 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000DEC 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000DF2 3ABC 977F                  		move.w	#$977F,(a5)
00000DF6 3ABC 7800                  		move.w	#$7800,(a5)
00000DFA 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E00 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E04 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E0A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000E10 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000E16 3ABC 977F                  		move.w	#$977F,(a5)
00000E1A 3ABC 7C00                  		move.w	#$7C00,(a5)
00000E1E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E24 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E28 6100 0000                  		bsr.w	PalCycle_SS
00000E2C 4A38 F767                  		tst.b	($FFFFF767).w
00000E30 6700                       		beq.s	loc_E64
00000E32 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E38 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000E3E 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000E44 3ABC 977F                  		move.w	#$977F,(a5)
00000E48 3ABC 7000                  		move.w	#$7000,(a5)
00000E4C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E52 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E56 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000E5C                            
00000E5C                            loc_E64:
00000E5C 33FC 0100 00A1 1100 0839+  	Z80DMA_OFF
00000E7E 4A78 F614                  		tst.w	($FFFFF614).w
00000E82 6700 0000                  		beq.w	locret_E70
00000E86 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E8A                            
00000E8A                            locret_E70:
00000E8A 4E75                       		rts	
00000E8C                            ; ===========================================================================
00000E8C                            
00000E8C                            loc_E72:				; XREF: off_B6E
00000E8C 6100 0000                  		bsr.w	ReadJoypads
00000E90 33FC 0100 00A1 1100 0839+  	Z80DMA_ON
00000EBE 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EC2 6600                       		bne.s	loc_EB4
00000EC4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000ECA 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000ED0 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000ED6 3ABC 977F                  		move.w	#$977F,(a5)
00000EDA 3ABC C000                  		move.w	#$C000,(a5)
00000EDE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EE4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EE8 6000                       		bra.s	loc_ED8
00000EEA                            ; ===========================================================================
00000EEA                            
00000EEA                            loc_EB4:				; XREF: loc_E7A
00000EEA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EF0 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EF6 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EFC 3ABC 977F                  		move.w	#$977F,(a5)
00000F00 3ABC C000                  		move.w	#$C000,(a5)
00000F04 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000F0A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F0E                            
00000F0E                            loc_ED8:				; XREF: loc_E7A
00000F0E 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000F12 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F18 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F1E 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F24                            
00000F24                            loc_EEE:
00000F24 3ABC 977F                  		move.w	#$977F,(a5)
00000F28 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F2C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F32 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F36 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F3C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F42 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F48 3ABC 977F                  		move.w	#$977F,(a5)
00000F4C 3ABC 7800                  		move.w	#$7800,(a5)
00000F50 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F56 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F5A 4A38 F767                  		tst.b	($FFFFF767).w
00000F5E 6700                       		beq.s	loc_F54
00000F60 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F66 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F6C 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F72 3ABC 977F                  		move.w	#$977F,(a5)
00000F76 3ABC 7000                  		move.w	#$7000,(a5)
00000F7A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F80 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F84 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F8A                            
00000F8A                            loc_F54:
00000F8A 33FC 0100 00A1 1100 0839+  	Z80DMA_OFF
00000FAC 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000FB2 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000FB8 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000FBE 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000FC4 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000FC8 4EB9 0000 0000             		jsr	AniArt_Load
00000FCE 4EB9 0000 0000             		jsr	HudUpdate
00000FD4 6100 0000                  		bsr.w	sub_1642
00000FD8 4E75                       		rts	
00000FDA                            ; ===========================================================================
00000FDA                            
00000FDA                            loc_F8A:				; XREF: off_B6E
00000FDA 6100 0000                  		bsr.w	sub_106E
00000FDE 5238 F628                  		addq.b	#1,($FFFFF628).w
00000FE2 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00000FE8 4E75                       		rts	
00000FEA                            ; ===========================================================================
00000FEA                            
00000FEA                            loc_F9A:				; XREF: off_B6E
00000FEA 6100 0000                  		bsr.w	sub_106E
00000FEE 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000FF2 6000 0000                  		bra.w	sub_1642
00000FF6                            ; ===========================================================================
00000FF6                            
00000FF6                            loc_FA6:				; XREF: off_B6E
00000FF6 6100 0000                  		bsr.w	ReadJoypads
00000FFA 33FC 0100 00A1 1100 0839+  	Z80DMA_ON
00001028 4BF9 00C0 0004             		lea	($C00004).l,a5
0000102E 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001034 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
0000103A 3ABC 977F                  		move.w	#$977F,(a5)
0000103E 3ABC C000                  		move.w	#$C000,(a5)
00001042 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001048 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000104C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001052 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001058 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
0000105E 3ABC 977F                  		move.w	#$977F,(a5)
00001062 3ABC 7800                  		move.w	#$7800,(a5)
00001066 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000106C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001070 4BF9 00C0 0004             		lea	($C00004).l,a5
00001076 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
0000107C 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001082 3ABC 977F                  		move.w	#$977F,(a5)
00001086 3ABC 7C00                  		move.w	#$7C00,(a5)
0000108A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001090 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001094 4A38 F767                  		tst.b	($FFFFF767).w
00001098 6700                       		beq.s	loc_1060
0000109A 4BF9 00C0 0004             		lea	($C00004).l,a5
000010A0 2ABC 9401 9370             		move.l	#$94019370,(a5)
000010A6 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
000010AC 3ABC 977F                  		move.w	#$977F,(a5)
000010B0 3ABC 7000                  		move.w	#$7000,(a5)
000010B4 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000010BA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010BE 11FC 0000 F767             		move.b	#0,($FFFFF767).w
000010C4                            
000010C4                            loc_1060:
000010C4 33FC 0100 00A1 1100 0839+  	Z80DMA_OFF
000010E6 4A78 F614                  		tst.w	($FFFFF614).w
000010EA 6700 0000                  		beq.w	locret_106C
000010EE 5378 F614                  		subq.w	#1,($FFFFF614).w
000010F2                            
000010F2                            locret_106C:
000010F2 4E75                       		rts	
000010F4                            
000010F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010F4                            
000010F4                            
000010F4                            sub_106E:				; XREF: loc_C32; et al
000010F4 6100 0000                  		bsr.w	ReadJoypads
000010F8 33FC 0100 00A1 1100 0839+  	Z80DMA_ON
00001126 4A38 F64E                  		tst.b	($FFFFF64E).w
0000112A 6600                       		bne.s	loc_10B0
0000112C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001132 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001138 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
0000113E 3ABC 977F                  		move.w	#$977F,(a5)
00001142 3ABC C000                  		move.w	#$C000,(a5)
00001146 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
0000114C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001150                            
00001150                            PAL1_LOAD:
00001150 6000                       		bra.s	loc_10D4
00001152                            ; ===========================================================================
00001152                            
00001152                            loc_10B0:
00001152 4BF9 00C0 0004             		lea	($C00004).l,a5
00001158 2ABC 9400 9340             		move.l	#$94009340,(a5)
0000115E 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00001164 3ABC 977F                  		move.w	#$977F,(a5)
00001168 3ABC C000                  		move.w	#$C000,(a5)
0000116C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001172 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001176                            loc_10D4:
00001176 4BF9 00C0 0004             		lea	($C00004).l,a5
0000117C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001182 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001188 3ABC 977F                  		move.w	#$977F,(a5)
0000118C 3ABC 7800                  		move.w	#$7800,(a5)
00001190 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001196 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000119A 4BF9 00C0 0004             		lea	($C00004).l,a5
000011A0 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
000011A6 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
000011AC 3ABC 977F                  		move.w	#$977F,(a5)
000011B0 3ABC 7C00                  		move.w	#$7C00,(a5)
000011B4 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000011BA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000011BE 33FC 0100 00A1 1100 0839+  	Z80DMA_OFF
000011E0 4E75                       		rts	
000011E2                            ; End of function sub_106E
000011E2                            
000011E2                            ; ---------------------------------------------------------------------------
000011E2                            ; Subroutine to	move pallets from the RAM to CRAM
000011E2                            ; ---------------------------------------------------------------------------
000011E2                            
000011E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011E2                            
000011E2                            
000011E2                            PalToCRAM:
000011E2 46FC 2700                  		move	#$2700,sr
000011E6 4A78 F644                  		tst.w	($FFFFF644).w
000011EA 6700                       		beq.s	locret_119C
000011EC 31FC 0000 F644             		move.w	#0,($FFFFF644).w
000011F2 48E7 00C0                  		movem.l	a0-a1,-(sp)
000011F6 43F9 00C0 0000             		lea	($C00000).l,a1
000011FC 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001200 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001208 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
0000120A 2298                       		move.l	(a0)+,(a1)
0000120C 2298                       		move.l	(a0)+,(a1)
0000120E 2298                       		move.l	(a0)+,(a1)
00001210 2298                       		move.l	(a0)+,(a1)
00001212 2298                       		move.l	(a0)+,(a1)
00001214 2298                       		move.l	(a0)+,(a1)
00001216 2298                       		move.l	(a0)+,(a1)
00001218 2298                       		move.l	(a0)+,(a1)
0000121A 2298                       		move.l	(a0)+,(a1)
0000121C 2298                       		move.l	(a0)+,(a1)
0000121E 2298                       		move.l	(a0)+,(a1)
00001220 2298                       		move.l	(a0)+,(a1)
00001222 2298                       		move.l	(a0)+,(a1)
00001224 2298                       		move.l	(a0)+,(a1)
00001226 2298                       		move.l	(a0)+,(a1)
00001228 2298                       		move.l	(a0)+,(a1)
0000122A 2298                       		move.l	(a0)+,(a1)
0000122C 2298                       		move.l	(a0)+,(a1)
0000122E 2298                       		move.l	(a0)+,(a1)
00001230 2298                       		move.l	(a0)+,(a1)
00001232 2298                       		move.l	(a0)+,(a1)
00001234 2298                       		move.l	(a0)+,(a1)
00001236 2298                       		move.l	(a0)+,(a1)
00001238 2298                       		move.l	(a0)+,(a1)
0000123A 2298                       		move.l	(a0)+,(a1)
0000123C 2298                       		move.l	(a0)+,(a1)
0000123E 2298                       		move.l	(a0)+,(a1)
00001240 2298                       		move.l	(a0)+,(a1)
00001242 2298                       		move.l	(a0)+,(a1)
00001244 2298                       		move.l	(a0)+,(a1)
00001246 2298                       		move.l	(a0)+,(a1)
00001248 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
0000124E 4CDF 0300                  		movem.l	(sp)+,a0-a1
00001252 4A38 F64F                  		tst.b	($FFFFF64F).w
00001256 6600                       		bne.s	loc_119E
00001258                            
00001258                            locret_119C:
00001258 4E73                       		rte	
0000125A                            ; ===========================================================================
0000125A                            
0000125A                            loc_119E:				; XREF: PalToCRAM
0000125A 4238 F64F                  		clr.b	($FFFFF64F).w
0000125E 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00001262 6100 FB04                  		bsr.w	Demo_Time
00001266 4EB9 0000 0000             		jsr	sub_71B4C
0000126C 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00001270 4E73                       		rte	
00001272                            ; End of function PalToCRAM
00001272                            
00001272                            ; ---------------------------------------------------------------------------
00001272                            ; Subroutine to	initialise joypads
00001272                            ; ---------------------------------------------------------------------------
00001272                            
00001272                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001272                            
00001272                            
00001272                            JoypadInit:				; XREF: GameClrRAM
00001272 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000127A                            
0000127A                            Joypad_WaitZ80:
0000127A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
00001282 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
00001284 7040                       		moveq	#$40,d0
00001286 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
0000128C 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00001292 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00001298 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000012A0 4E75                       		rts	
000012A2                            ; End of function JoypadInit
000012A2                            
000012A2                            ; ---------------------------------------------------------------------------
000012A2                            ; Subroutine to	read joypad input, and send it to the RAM
000012A2                            ; ---------------------------------------------------------------------------
000012A2                            
000012A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012A2                            
000012A2                            
000012A2                            ReadJoypads:
000012A2 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
000012A6 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000012AC 6100                       		bsr.s	Joypad_Read	; do the first joypad
000012AE 5449                       		addq.w	#2,a1		; do the second	joypad
000012B0                            
000012B0                            Joypad_Read:
000012B0 12BC 0000                  		move.b	#0,(a1)
000012B4 4E71                       		nop	
000012B6 4E71                       		nop	
000012B8 1011                       		move.b	(a1),d0
000012BA E508                       		lsl.b	#2,d0
000012BC 0200 00C0                  		andi.b	#$C0,d0
000012C0 12BC 0040                  		move.b	#$40,(a1)
000012C4 4E71                       		nop	
000012C6 4E71                       		nop	
000012C8 1211                       		move.b	(a1),d1
000012CA 0201 003F                  		andi.b	#$3F,d1
000012CE 8001                       		or.b	d1,d0
000012D0 4600                       		not.b	d0
000012D2 1210                       		move.b	(a0),d1
000012D4 B101                       		eor.b	d0,d1
000012D6 10C0                       		move.b	d0,(a0)+
000012D8 C200                       		and.b	d0,d1
000012DA 10C1                       		move.b	d1,(a0)+
000012DC 4E75                       		rts	
000012DE                            ; End of function ReadJoypads
000012DE                            
000012DE                            
000012DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012DE                            
000012DE                            
000012DE                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
000012DE 41F9 00C0 0004             		lea	($C00004).l,a0
000012E4 43F9 00C0 0000             		lea	($C00000).l,a1
000012EA 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
000012F0 7E12                       		moveq	#$12,d7
000012F2                            
000012F2                            VDP_Loop:
000012F2 309A                       		move.w	(a2)+,(a0)
000012F4 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
000012F8                            
000012F8 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
000012FE 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001302 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001308 7000                       		moveq	#0,d0
0000130A 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001314 3E3C 003F                  		move.w	#$3F,d7
00001318                            
00001318                            VDP_ClrCRAM:
00001318 3280                       		move.w	d0,(a1)
0000131A 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
0000131E                            
0000131E 42B8 F616                  		clr.l	($FFFFF616).w
00001322 42B8 F61A                  		clr.l	($FFFFF61A).w
00001326 2F01                       		move.l	d1,-(sp)
00001328 4BF9 00C0 0004             		lea	($C00004).l,a5
0000132E 3ABC 8F01                  		move.w	#$8F01,(a5)
00001332 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
00001338 3ABC 9780                  		move.w	#$9780,(a5)
0000133C 2ABC 4000 0080             		move.l	#$40000080,(a5)
00001342 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
0000134A                            
0000134A                            loc_128E:
0000134A 3215                       		move.w	(a5),d1
0000134C 0801 0001                  		btst	#1,d1
00001350 66F8                       		bne.s	loc_128E
00001352                            
00001352 3ABC 8F02                  		move.w	#$8F02,(a5)
00001356 221F                       		move.l	(sp)+,d1
00001358 4E75                       		rts	
0000135A                            ; End of function VDPSetupGame
0000135A                            
0000135A                            ; ===========================================================================
0000135A 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
00001362 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
0000136A 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
00001372 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
0000137A 9001 9100 9200             		dc.w $9001, $9100, $9200
00001380                            
00001380                            ; ---------------------------------------------------------------------------
00001380                            ; Subroutine to	clear the screen
00001380                            ; ---------------------------------------------------------------------------
00001380                            
00001380                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001380                            
00001380                            
00001380                            ClearScreen:
00001380 4BF9 00C0 0004             		lea	($C00004).l,a5
00001386 3ABC 8F01                  		move.w	#$8F01,(a5)
0000138A 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001390 3ABC 9780                  		move.w	#$9780,(a5)
00001394 2ABC 4000 0083             		move.l	#$40000083,(a5)
0000139A 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000013A2                            
000013A2                            loc_12E6:
000013A2 3215                       		move.w	(a5),d1
000013A4 0801 0001                  		btst	#1,d1
000013A8 66F8                       		bne.s	loc_12E6
000013AA                            
000013AA 3ABC 8F02                  		move.w	#$8F02,(a5)
000013AE 4BF9 00C0 0004             		lea	($C00004).l,a5
000013B4 3ABC 8F01                  		move.w	#$8F01,(a5)
000013B8 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000013BE 3ABC 9780                  		move.w	#$9780,(a5)
000013C2 2ABC 6000 0083             		move.l	#$60000083,(a5)
000013C8 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000013D0                            
000013D0                            loc_1314:
000013D0 3215                       		move.w	(a5),d1
000013D2 0801 0001                  		btst	#1,d1
000013D6 66F8                       		bne.s	loc_1314
000013D8                            
000013D8 3ABC 8F02                  		move.w	#$8F02,(a5)
000013DC 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
000013E4 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
000013EC 43F8 F800                  		lea	($FFFFF800).w,a1
000013F0 7000                       		moveq	#0,d0
000013F2 323C 00A0                  		move.w	#$A0,d1
000013F6                            
000013F6                            loc_133A:
000013F6 22C0                       		move.l	d0,(a1)+
000013F8 51C9 FFFC                  		dbf	d1,loc_133A
000013FC                            
000013FC 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001400 7000                       		moveq	#0,d0
00001402 323C 0100                  		move.w	#$100,d1
00001406                            
00001406                            loc_134A:
00001406 22C0                       		move.l	d0,(a1)+
00001408 51C9 FFFC                  		dbf	d1,loc_134A
0000140C 4E75                       		rts	
0000140E                            ; End of function ClearScreen
0000140E                            
0000140E                            ; ---------------------------------------------------------------------------
0000140E                            ; Subroutine to	load the sound driver
0000140E                            ; ---------------------------------------------------------------------------
0000140E                            
0000140E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000140E                            
0000140E                            
0000140E                            SoundDriverLoad:
0000140E 41F9 0000 0000             		lea	(Z80ROM).l,a0				; load Z80 ROM data
00001414 43F9 00A0 0000             		lea	($A00000).l,a1				; load Z80 RAM space address
0000141A 323C 0000                  		move.w	#(Z80ROM_End-Z80ROM)-$01,d1		; set repeat times
0000141E 33FC 0100 00A1 1100        		move.w	#$0100,($A11100).l			; request Z80 stop (ON)
00001426 33FC 0100 00A1 1200        		move.w	#$0100,($A11200).l			; request Z80 reset (OFF)
0000142E 0839 0000 00A1 1100        		btst.b	#$00,($A11100).l			; has the Z80 stopped yet?
00001436 66F6                       		bne.s	*-$08					; if not, branch
00001438                            
00001438                            SM_LoadZ80:
00001438 12D8                       		move.b	(a0)+,(a1)+				; dump Z80 data to Z80 space
0000143A 51C9 FFFC                  		dbf	d1,SM_LoadZ80				; repeat til done
0000143E 41F9 0000 0000             		lea	(StopSample).l,a0			; load stop/mute sample address
00001444 43F9 00A0 02EC             		lea	($A00000+MuteSample).l,a1		; load Z80 RAM space where the pointer is to be stored
0000144A 12D8                       		move.b	(a0)+,(a1)+				; copy pointer over into Z80
0000144C 12D8                       		move.b	(a0)+,(a1)+				; ''
0000144E 12D8                       		move.b	(a0)+,(a1)+				; ''
00001450 33FC 0000 00A1 1200        		move.w	#$0000,($A11200).l			; request Z80 reset (ON)
00001458 727F                       		moveq	#$7F,d1					; set repeat times
0000145A 51C9 FFFE                  		dbf	d1,*					; there's no way of checking for reset, so a manual delay is necessary
0000145E 33FC 0000 00A1 1100        		move.w	#$0000,($A11100).l			; request Z80 stop (OFF)
00001466 33FC 0100 00A1 1200        		move.w	#$0100,($A11200).l			; request Z80 reset (OFF)
0000146E 4E75                       		rts						; return
00001470                            
00001470                            ; ---------------------------------------------------------------------------
00001470                            ; Subroutine to	play a sound or	music track
00001470                            ; ---------------------------------------------------------------------------
00001470                            
00001470                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001470                            
00001470                            
00001470                            PlaySound:
00001470 11C0 F00A                  		move.b	d0,($FFFFF00A).w
00001474 4E75                       		rts	
00001476                            ; End of function PlaySound
00001476                            
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; Subroutine to	play a special sound/music (E0-E4)
00001476                            ;
00001476                            ; E0 - Fade out
00001476                            ; E1 - Sega
00001476                            ; E2 - Speed up
00001476                            ; E3 - Normal speed
00001476                            ; E4 - Stop
00001476                            ; ---------------------------------------------------------------------------
00001476                            
00001476                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001476                            
00001476                            
00001476                            PlaySound_Special:
00001476 11C0 F00B                  		move.b	d0,($FFFFF00B).w
0000147A 4E75                       		rts	
0000147C                            ; End of function PlaySound_Special
0000147C                            
0000147C                            ; ===========================================================================
0000147C                            ; ---------------------------------------------------------------------------
0000147C                            ; Unused sound/music subroutine
0000147C                            ; ---------------------------------------------------------------------------
0000147C                            
0000147C                            PlaySound_Unk:
0000147C 11C0 F00C                  		move.b	d0,($FFFFF00C).w
00001480 4E75                       		rts	
00001482                            
00001482                            ; ---------------------------------------------------------------------------
00001482                            ; Subroutine to	pause the game
00001482                            ; ---------------------------------------------------------------------------
00001482                            
00001482                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001482                            
00001482                            
00001482                            PauseGame:				; XREF: Level_MainLoop; et al
00001482 4E71                       		nop	
00001484 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
00001488 6700                       		beq.s	Unpause		; if not, branch
0000148A 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
0000148E 6600                       		bne.s	loc_13BE	; if yes, branch
00001490 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001496 6700                       		beq.s	Pause_DoNothing	; if not, branch
00001498                            
00001498                            loc_13BE:
00001498 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
0000149E 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000014A4                            
000014A4                            loc_13CA:
000014A4 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000014AA 6100 0000                  		bsr.w	DelayProgram
000014AE 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000014B2 6700                       		beq.s	Pause_ChkStart	; if not, branch
000014B4 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
000014BA 6700                       		beq.s	Pause_ChkBC	; if not, branch
000014BC 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
000014C2 4E71                       		nop	
000014C4 6000                       		bra.s	loc_1404
000014C6                            ; ===========================================================================
000014C6                            
000014C6                            Pause_ChkBC:				; XREF: PauseGame
000014C6 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
000014CC 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000014CE 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
000014D4 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000014D6                            
000014D6                            Pause_ChkStart:				; XREF: PauseGame
000014D6 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000014DC 67C6                       		beq.s	loc_13CA	; if not, branch
000014DE                            
000014DE                            loc_1404:				; XREF: PauseGame
000014DE 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
000014E4                            
000014E4                            Unpause:				; XREF: PauseGame
000014E4 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
000014EA                            
000014EA                            Pause_DoNothing:			; XREF: PauseGame
000014EA 4E75                       		rts	
000014EC                            ; ===========================================================================
000014EC                            
000014EC                            Pause_SlowMo:				; XREF: PauseGame
000014EC 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
000014F2 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
000014F8 4E75                       		rts	
000014FA                            ; End of function PauseGame
000014FA                            
000014FA                            ; ---------------------------------------------------------------------------
000014FA                            ; Subroutine to	display	patterns via the VDP
000014FA                            ; ---------------------------------------------------------------------------
000014FA                            
000014FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014FA                            
000014FA                            
000014FA                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
000014FA 4DF9 00C0 0000             		lea	($C00000).l,a6
00001500 283C 0080 0000             		move.l	#$800000,d4
00001506                            
00001506                            loc_142C:
00001506 2D40 0004                  		move.l	d0,4(a6)
0000150A 3601                       		move.w	d1,d3
0000150C                            
0000150C                            loc_1432:
0000150C 3C99                       		move.w	(a1)+,(a6)
0000150E 51CB FFFC                  		dbf	d3,loc_1432
00001512 D084                       		add.l	d4,d0
00001514 51CA FFF0                  		dbf	d2,loc_142C
00001518 4E75                       		rts	
0000151A                            ; End of function ShowVDPGraphics
0000151A                            
0000151A                            ; ---------------------------------------------------------------------------
0000151A                            ; Subroutine for queueing VDP commands (seems to only queue transfers to VRAM),
0000151A                            ; to be issued the next time ProcessDMAQueue is called.
0000151A                            ; Can be called a maximum of 18 times before the buffer needs to be cleared
0000151A                            ; by issuing the commands (this subroutine DOES check for overflow)
0000151A                            ; ---------------------------------------------------------------------------
0000151A                            ; In case you wish to use this queue system outside of the spin dash, this is the
0000151A                            ; registers in which it expects data in:
0000151A                            ; d1.l: Address to data (In 68k address space)
0000151A                            ; d2.w: Destination in VRAM
0000151A                            ; d3.w: Length of data
0000151A                            ; ---------------------------------------------------------------------------
0000151A                            
0000151A                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000151A                            
0000151A                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand: Add_To_DMA_Queue:
0000151A                            QueueDMATransfer:
0000151A 2278 C8FC                  		movea.l	($FFFFC8FC).w,a1
0000151E B2FC C8FC                  		cmpa.w	#$C8FC,a1
00001522 6700                       		beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
00001524                            
00001524                            		; piece together some VDP commands and store them for later...
00001524 303C 9300                  		move.w	#$9300,d0 ; command to specify DMA transfer length & $00FF
00001528 1003                       		move.b	d3,d0
0000152A 32C0                       		move.w	d0,(a1)+ ; store command
0000152C                            
0000152C 303C 9400                  		move.w	#$9400,d0 ; command to specify DMA transfer length & $FF00
00001530 E04B                       		lsr.w	#8,d3
00001532 1003                       		move.b	d3,d0
00001534 32C0                       		move.w	d0,(a1)+ ; store command
00001536                            
00001536 303C 9500                  		move.w	#$9500,d0 ; command to specify source address & $0001FE
0000153A E289                       		lsr.l	#1,d1
0000153C 1001                       		move.b	d1,d0
0000153E 32C0                       		move.w	d0,(a1)+ ; store command
00001540                            
00001540 303C 9600                  		move.w	#$9600,d0 ; command to specify source address & $01FE00
00001544 E089                       		lsr.l	#8,d1
00001546 1001                       		move.b	d1,d0
00001548 32C0                       		move.w	d0,(a1)+ ; store command
0000154A                            
0000154A 303C 9700                  		move.w	#$9700,d0 ; command to specify source address & $FE0000
0000154E E089                       		lsr.l	#8,d1
00001550 1001                       		move.b	d1,d0
00001552 32C0                       		move.w	d0,(a1)+ ; store command
00001554                            
00001554 0282 0000 FFFF             		andi.l	#$FFFF,d2 ; command to specify destination address and begin DMA
0000155A E58A                       		lsl.l	#2,d2
0000155C E44A                       		lsr.w	#2,d2
0000155E 4842                       		swap	d2
00001560 0082 4000 0080             		ori.l	#$40000080,d2 ; set bits to specify VRAM transfer
00001566 22C2                       		move.l	d2,(a1)+ ; store command
00001568                            
00001568 21C9 C8FC                  		move.l	a1,($FFFFC8FC).w ; set the next free slot address
0000156C B2FC C8FC                  		cmpa.w	#$C8FC,a1
00001570 6700                       		beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
00001572 32BC 0000                  		move.w	#0,(a1) ; put a stop token at the end of the used part of the buffer
00001576                            ; return_14AA:
00001576                            QueueDMATransfer_Done:
00001576 4E75                       		rts
00001578                            ; End of function QueueDMATransfer
00001578                            
00001578                            
00001578                            ; ---------------------------------------------------------------------------
00001578                            ; Subroutine for issuing all VDP commands that were queued
00001578                            ; (by earlier calls to QueueDMATransfer)
00001578                            ; Resets the queue when it's done
00001578                            ; ---------------------------------------------------------------------------
00001578                            
00001578                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001578                            
00001578                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA: Process_DMA_Queue:
00001578                            ProcessDMAQueue:
00001578 4BF9 00C0 0004             		lea	($C00004).l,a5
0000157E 43F8 C800                  		lea	($FFFFC800).w,a1
00001582                            ; loc_14B6:
00001582                            ProcessDMAQueue_Loop:
00001582 3019                       		move.w	(a1)+,d0
00001584 6700                       		beq.s	ProcessDMAQueue_Done ; branch if we reached a stop token
00001586                            		; issue a set of VDP commands...
00001586 3A80                       		move.w	d0,(a5)		; transfer length
00001588 3A99                       		move.w	(a1)+,(a5)	; transfer length
0000158A 3A99                       		move.w	(a1)+,(a5)	; source address
0000158C 3A99                       		move.w	(a1)+,(a5)	; source address
0000158E 3A99                       		move.w	(a1)+,(a5)	; source address
00001590 3A99                       		move.w	(a1)+,(a5)	; destination
00001592 3A99                       		move.w	(a1)+,(a5)	; destination
00001594 B2FC C8FC                  		cmpa.w	#$C8FC,a1
00001598 66E8                       		bne.s	ProcessDMAQueue_Loop ; loop if we haven't reached the end of the buffer
0000159A                            ; loc_14CE:
0000159A                            ProcessDMAQueue_Done:
0000159A 31FC 0000 C800             		move.w	#0,($FFFFC800).w
000015A0 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
000015A8 4E75                       		rts
000015AA                            ; End of function ProcessDMAQueue
000015AA                            
000015AA                            ; ---------------------------------------------------------------------------
000015AA                            ; Nemesis decompression	algorithm
000015AA                            ; ---------------------------------------------------------------------------
000015AA                            
000015AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015AA                            
000015AA                            
000015AA                            NemDec:
000015AA 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
000015AE 47F9 0000 0000             		lea	(loc_1502).l,a3
000015B4 49F9 00C0 0000             		lea	($C00000).l,a4
000015BA 6000                       		bra.s	loc_145C
000015BC                            ; ===========================================================================
000015BC 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
000015C0 47F9 0000 0000             		lea	(loc_1518).l,a3
000015C6                            
000015C6                            loc_145C:				; XREF: NemDec
000015C6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000015CA 3418                       		move.w	(a0)+,d2
000015CC E34A                       		lsl.w	#1,d2
000015CE 6400                       		bcc.s	loc_146A
000015D0 D6FC 000A                  		adda.w	#$A,a3
000015D4                            
000015D4                            loc_146A:
000015D4 E54A                       		lsl.w	#2,d2
000015D6 3A42                       		movea.w	d2,a5
000015D8 7608                       		moveq	#8,d3
000015DA 7400                       		moveq	#0,d2
000015DC 7800                       		moveq	#0,d4
000015DE 6100 0000                  		bsr.w	NemDec4
000015E2 1A18                       		move.b	(a0)+,d5
000015E4 E145                       		asl.w	#8,d5
000015E6 1A18                       		move.b	(a0)+,d5
000015E8 3C3C 0010                  		move.w	#$10,d6
000015EC 6100                       		bsr.s	NemDec2
000015EE 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000015F2 4E75                       		rts	
000015F4                            ; End of function NemDec
000015F4                            
000015F4                            
000015F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015F4                            
000015F4                            
000015F4                            NemDec2:				; XREF: NemDec
000015F4 3E06                       		move.w	d6,d7
000015F6 5147                       		subq.w	#8,d7
000015F8 3205                       		move.w	d5,d1
000015FA EE69                       		lsr.w	d7,d1
000015FC 0C01 00FC                  		cmpi.b	#-4,d1
00001600 6400                       		bcc.s	loc_14D6
00001602 0241 00FF                  		andi.w	#$FF,d1
00001606 D241                       		add.w	d1,d1
00001608 1031 1000                  		move.b	(a1,d1.w),d0
0000160C 4880                       		ext.w	d0
0000160E 9C40                       		sub.w	d0,d6
00001610 0C46 0009                  		cmpi.w	#9,d6
00001614 6400                       		bcc.s	loc_14B2
00001616 5046                       		addq.w	#8,d6
00001618 E145                       		asl.w	#8,d5
0000161A 1A18                       		move.b	(a0)+,d5
0000161C                            
0000161C                            loc_14B2:
0000161C 1231 1001                  		move.b	1(a1,d1.w),d1
00001620 3001                       		move.w	d1,d0
00001622 0241 000F                  		andi.w	#$F,d1
00001626 0240 00F0                  		andi.w	#$F0,d0
0000162A                            
0000162A                            loc_14C0:				; XREF: NemDec3
0000162A E848                       		lsr.w	#4,d0
0000162C                            
0000162C                            loc_14C2:				; XREF: NemDec3
0000162C E98C                       		lsl.l	#4,d4
0000162E 8801                       		or.b	d1,d4
00001630 5343                       		subq.w	#1,d3
00001632 6600                       		bne.s	loc_14D0
00001634 4ED3                       		jmp	(a3)
00001636                            ; End of function NemDec2
00001636                            
00001636                            
00001636                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001636                            
00001636                            
00001636                            NemDec3:				; XREF: loc_1502
00001636 7800                       		moveq	#0,d4
00001638 7608                       		moveq	#8,d3
0000163A                            
0000163A                            loc_14D0:				; XREF: NemDec2
0000163A 51C8 FFF0                  		dbf	d0,loc_14C2
0000163E 60B4                       		bra.s	NemDec2
00001640                            ; ===========================================================================
00001640                            
00001640                            loc_14D6:				; XREF: NemDec2
00001640 5D46                       		subq.w	#6,d6
00001642 0C46 0009                  		cmpi.w	#9,d6
00001646 6400                       		bcc.s	loc_14E4
00001648 5046                       		addq.w	#8,d6
0000164A E145                       		asl.w	#8,d5
0000164C 1A18                       		move.b	(a0)+,d5
0000164E                            
0000164E                            loc_14E4:				; XREF: NemDec3
0000164E 5F46                       		subq.w	#7,d6
00001650 3205                       		move.w	d5,d1
00001652 EC69                       		lsr.w	d6,d1
00001654 3001                       		move.w	d1,d0
00001656 0241 000F                  		andi.w	#$F,d1
0000165A 0240 0070                  		andi.w	#$70,d0
0000165E 0C46 0009                  		cmpi.w	#9,d6
00001662 64C6                       		bcc.s	loc_14C0
00001664 5046                       		addq.w	#8,d6
00001666 E145                       		asl.w	#8,d5
00001668 1A18                       		move.b	(a0)+,d5
0000166A 60BE                       		bra.s	loc_14C0
0000166C                            ; End of function NemDec3
0000166C                            
0000166C                            ; ===========================================================================
0000166C                            
0000166C                            loc_1502:				; XREF: NemDec
0000166C 2884                       		move.l	d4,(a4)
0000166E 534D                       		subq.w	#1,a5
00001670 380D                       		move.w	a5,d4
00001672 66C2                       		bne.s	NemDec3
00001674 4E75                       		rts	
00001676                            ; ===========================================================================
00001676 B982                       		eor.l	d4,d2
00001678 2882                       		move.l	d2,(a4)
0000167A 534D                       		subq.w	#1,a5
0000167C 380D                       		move.w	a5,d4
0000167E 66B6                       		bne.s	NemDec3
00001680 4E75                       		rts	
00001682                            ; ===========================================================================
00001682                            
00001682                            loc_1518:				; XREF: NemDec
00001682 28C4                       		move.l	d4,(a4)+
00001684 534D                       		subq.w	#1,a5
00001686 380D                       		move.w	a5,d4
00001688 66AC                       		bne.s	NemDec3
0000168A 4E75                       		rts	
0000168C                            ; ===========================================================================
0000168C B982                       		eor.l	d4,d2
0000168E 28C2                       		move.l	d2,(a4)+
00001690 534D                       		subq.w	#1,a5
00001692 380D                       		move.w	a5,d4
00001694 66A0                       		bne.s	NemDec3
00001696 4E75                       		rts	
00001698                            
00001698                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001698                            
00001698                            
00001698                            NemDec4:				; XREF: NemDec
00001698 1018                       		move.b	(a0)+,d0
0000169A                            
0000169A                            loc_1530:
0000169A 0C00 00FF                  		cmpi.b	#-1,d0
0000169E 6600                       		bne.s	loc_1538
000016A0 4E75                       		rts	
000016A2                            ; ===========================================================================
000016A2                            
000016A2                            loc_1538:				; XREF: NemDec4
000016A2 3E00                       		move.w	d0,d7
000016A4                            
000016A4                            loc_153A:
000016A4 1018                       		move.b	(a0)+,d0
000016A6 0C00 0080                  		cmpi.b	#$80,d0
000016AA 64EE                       		bcc.s	loc_1530
000016AC 1200                       		move.b	d0,d1
000016AE 0247 000F                  		andi.w	#$F,d7
000016B2 0241 0070                  		andi.w	#$70,d1
000016B6 8E41                       		or.w	d1,d7
000016B8 0240 000F                  		andi.w	#$F,d0
000016BC 1200                       		move.b	d0,d1
000016BE E149                       		lsl.w	#8,d1
000016C0 8E41                       		or.w	d1,d7
000016C2 7208                       		moveq	#8,d1
000016C4 9240                       		sub.w	d0,d1
000016C6 6600                       		bne.s	loc_1568
000016C8 1018                       		move.b	(a0)+,d0
000016CA D040                       		add.w	d0,d0
000016CC 3387 0000                  		move.w	d7,(a1,d0.w)
000016D0 60D2                       		bra.s	loc_153A
000016D2                            ; ===========================================================================
000016D2                            
000016D2                            loc_1568:				; XREF: NemDec4
000016D2 1018                       		move.b	(a0)+,d0
000016D4 E368                       		lsl.w	d1,d0
000016D6 D040                       		add.w	d0,d0
000016D8 7A01                       		moveq	#1,d5
000016DA E36D                       		lsl.w	d1,d5
000016DC 5345                       		subq.w	#1,d5
000016DE                            
000016DE                            loc_1574:
000016DE 3387 0000                  		move.w	d7,(a1,d0.w)
000016E2 5440                       		addq.w	#2,d0
000016E4 51CD FFF8                  		dbf	d5,loc_1574
000016E8 60BA                       		bra.s	loc_153A
000016EA                            ; End of function NemDec4
000016EA                            
000016EA                            ; ---------------------------------------------------------------------------
000016EA                            ; Subroutine to	load pattern load cues
000016EA                            ; ---------------------------------------------------------------------------
000016EA                            
000016EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016EA                            
000016EA                            
000016EA                            LoadPLC:
000016EA 48E7 0060                  		movem.l	a1-a2,-(sp)
000016EE 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000016F4 D040                       		add.w	d0,d0
000016F6 3031 0000                  		move.w	(a1,d0.w),d0
000016FA 43F1 0000                  		lea	(a1,d0.w),a1
000016FE 45F8 F680                  		lea	($FFFFF680).w,a2
00001702                            
00001702                            loc_1598:
00001702 4A92                       		tst.l	(a2)
00001704 6700                       		beq.s	loc_15A0
00001706 5C4A                       		addq.w	#6,a2
00001708 60F8                       		bra.s	loc_1598
0000170A                            ; ===========================================================================
0000170A                            
0000170A                            loc_15A0:				; XREF: LoadPLC
0000170A 3019                       		move.w	(a1)+,d0
0000170C 6B00                       		bmi.s	loc_15AC
0000170E                            
0000170E                            loc_15A4:
0000170E 24D9                       		move.l	(a1)+,(a2)+
00001710 34D9                       		move.w	(a1)+,(a2)+
00001712 51C8 FFFA                  		dbf	d0,loc_15A4
00001716                            
00001716                            loc_15AC:
00001716 4CDF 0600                  		movem.l	(sp)+,a1-a2
0000171A 4E75                       		rts	
0000171C                            ; End of function LoadPLC
0000171C                            
0000171C                            
0000171C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000171C                            
0000171C                            
0000171C                            LoadPLC2:
0000171C 48E7 0060                  		movem.l	a1-a2,-(sp)
00001720 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001726 D040                       		add.w	d0,d0
00001728 3031 0000                  		move.w	(a1,d0.w),d0
0000172C 43F1 0000                  		lea	(a1,d0.w),a1
00001730 6100                       		bsr.s	ClearPLC
00001732 45F8 F680                  		lea	($FFFFF680).w,a2
00001736 3019                       		move.w	(a1)+,d0
00001738 6B00                       		bmi.s	loc_15D8
0000173A                            
0000173A                            loc_15D0:
0000173A 24D9                       		move.l	(a1)+,(a2)+
0000173C 34D9                       		move.w	(a1)+,(a2)+
0000173E 51C8 FFFA                  		dbf	d0,loc_15D0
00001742                            
00001742                            loc_15D8:
00001742 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001746 4E75                       		rts	
00001748                            ; End of function LoadPLC2
00001748                            
00001748                            ; ---------------------------------------------------------------------------
00001748                            ; Subroutine to	clear the pattern load cues
00001748                            ; ---------------------------------------------------------------------------
00001748                            
00001748                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001748                            
00001748                            
00001748                            ClearPLC:				; XREF: LoadPLC2
00001748 45F8 F680                  		lea	($FFFFF680).w,a2
0000174C 701F                       		moveq	#$1F,d0
0000174E                            
0000174E                            ClearPLC_Loop:
0000174E 429A                       		clr.l	(a2)+
00001750 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
00001754 4E75                       		rts	
00001756                            ; End of function ClearPLC
00001756                            
00001756                            ; ---------------------------------------------------------------------------
00001756                            ; Subroutine to	use graphics listed in a pattern load cue
00001756                            ; ---------------------------------------------------------------------------
00001756                            
00001756                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001756                            
00001756                            
00001756                            RunPLC_RAM:				; XREF: Pal_FadeTo
00001756 4AB8 F680                  		tst.l	($FFFFF680).w
0000175A 6700                       		beq.s	locret_1640
0000175C 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001760 6600                       		bne.s	locret_1640
00001762 2078 F680                  		movea.l	($FFFFF680).w,a0
00001766 47F9 0000 166C             		lea	(loc_1502).l,a3
0000176C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001770 3418                       		move.w	(a0)+,d2
00001772 6A00                       		bpl.s	loc_160E
00001774 D6FC 000A                  		adda.w	#$A,a3
00001778                            
00001778                            loc_160E:
00001778 0242 7FFF                  		andi.w	#$7FFF,d2
0000177C 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001780 6100 FF16                  		bsr.w	NemDec4
00001784 1A18                       		move.b	(a0)+,d5
00001786 E145                       		asl.w	#8,d5
00001788 1A18                       		move.b	(a0)+,d5
0000178A 7C10                       		moveq	#$10,d6
0000178C 7000                       		moveq	#0,d0
0000178E 21C8 F680                  		move.l	a0,($FFFFF680).w
00001792 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001796 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
0000179A 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
0000179E 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
000017A2 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000017A6 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000017AA                            
000017AA                            locret_1640:
000017AA 4E75                       		rts	
000017AC                            ; End of function RunPLC_RAM
000017AC                            
000017AC                            
000017AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017AC                            
000017AC                            
000017AC                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
000017AC 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000017B0 6700 0000                  		beq.w	locret_16DA
000017B4 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
000017BA 7000                       		moveq	#0,d0
000017BC 3038 F684                  		move.w	($FFFFF684).w,d0
000017C0 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
000017C6 6000                       		bra.s	loc_1676
000017C8                            ; End of function sub_1642
000017C8                            
000017C8                            
000017C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017C8                            
000017C8                            
000017C8                            sub_165E:				; XREF: Demo_Time
000017C8 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000017CC 6700                       		beq.s	locret_16DA
000017CE 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
000017D4 7000                       		moveq	#0,d0
000017D6 3038 F684                  		move.w	($FFFFF684).w,d0
000017DA 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
000017E0                            
000017E0                            loc_1676:				; XREF: sub_1642
000017E0 49F9 00C0 0004             		lea	($C00004).l,a4
000017E6 E588                       		lsl.l	#2,d0
000017E8 E448                       		lsr.w	#2,d0
000017EA 0040 4000                  		ori.w	#$4000,d0
000017EE 4840                       		swap	d0
000017F0 2880                       		move.l	d0,(a4)
000017F2 594C                       		subq.w	#4,a4
000017F4 2078 F680                  		movea.l	($FFFFF680).w,a0
000017F8 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000017FC 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001800 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00001804 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
00001808 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
0000180C 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
00001810 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001814                            
00001814                            loc_16AA:				; XREF: sub_165E
00001814 3A7C 0008                  		movea.w	#8,a5
00001818 6100 FE1C                  		bsr.w	NemDec3
0000181C 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
00001820 6700                       		beq.s	loc_16DC
00001822 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
00001826 66EC                       		bne.s	loc_16AA
00001828 21C8 F680                  		move.l	a0,($FFFFF680).w
0000182C 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001830 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001834 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00001838 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
0000183C 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001840 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001844                            
00001844                            locret_16DA:				; XREF: sub_1642
00001844 4E75                       		rts	
00001846                            ; ===========================================================================
00001846                            
00001846                            loc_16DC:				; XREF: sub_165E
00001846 41F8 F680                  		lea	($FFFFF680).w,a0
0000184A 7015                       		moveq	#$15,d0
0000184C                            
0000184C                            loc_16E2:				; XREF: sub_165E
0000184C 20E8 0006                  		move.l	6(a0),(a0)+
00001850 51C8 FFFA                  		dbf	d0,loc_16E2
00001854 4E75                       		rts	
00001856                            ; End of function sub_165E
00001856                            
00001856                            ; ---------------------------------------------------------------------------
00001856                            ; Subroutine to	execute	the pattern load cue
00001856                            ; ---------------------------------------------------------------------------
00001856                            
00001856                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001856                            
00001856                            
00001856                            RunPLC_ROM:
00001856 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
0000185C D040                       		add.w	d0,d0
0000185E 3031 0000                  		move.w	(a1,d0.w),d0
00001862 43F1 0000                  		lea	(a1,d0.w),a1
00001866 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00001868                            
00001868                            RunPLC_Loop:
00001868 2059                       		movea.l	(a1)+,a0	; get art pointer
0000186A 7000                       		moveq	#0,d0
0000186C 3019                       		move.w	(a1)+,d0	; get VRAM address
0000186E E588                       		lsl.l	#2,d0		; divide address by $20
00001870 E448                       		lsr.w	#2,d0
00001872 0040 4000                  		ori.w	#$4000,d0
00001876 4840                       		swap	d0
00001878 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
0000187E 6100 FD2A                  		bsr.w	NemDec		; decompress
00001882 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
00001886 4E75                       		rts	
00001888                            ; End of function RunPLC_ROM
00001888                            
00001888                            ; ---------------------------------------------------------------------------
00001888                            ; Enigma decompression algorithm
00001888                            ; ---------------------------------------------------------------------------
00001888                            
00001888                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001888                            
00001888                            
00001888                            EniDec:
00001888 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
0000188C 3640                       		movea.w	d0,a3
0000188E 1018                       		move.b	(a0)+,d0
00001890 4880                       		ext.w	d0
00001892 3A40                       		movea.w	d0,a5
00001894 1818                       		move.b	(a0)+,d4
00001896 E70C                       		lsl.b	#3,d4
00001898 3458                       		movea.w	(a0)+,a2
0000189A D4CB                       		adda.w	a3,a2
0000189C 3858                       		movea.w	(a0)+,a4
0000189E D8CB                       		adda.w	a3,a4
000018A0 1A18                       		move.b	(a0)+,d5
000018A2 E145                       		asl.w	#8,d5
000018A4 1A18                       		move.b	(a0)+,d5
000018A6 7C10                       		moveq	#$10,d6
000018A8                            
000018A8                            loc_173E:				; XREF: loc_1768
000018A8 7007                       		moveq	#7,d0
000018AA 3E06                       		move.w	d6,d7
000018AC 9E40                       		sub.w	d0,d7
000018AE 3205                       		move.w	d5,d1
000018B0 EE69                       		lsr.w	d7,d1
000018B2 0241 007F                  		andi.w	#$7F,d1
000018B6 3401                       		move.w	d1,d2
000018B8 0C41 0040                  		cmpi.w	#$40,d1
000018BC 6400                       		bcc.s	loc_1758
000018BE 7006                       		moveq	#6,d0
000018C0 E24A                       		lsr.w	#1,d2
000018C2                            
000018C2                            loc_1758:
000018C2 6100 0000                  		bsr.w	sub_188C
000018C6 0242 000F                  		andi.w	#$F,d2
000018CA E849                       		lsr.w	#4,d1
000018CC D241                       		add.w	d1,d1
000018CE 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
000018D2                            ; End of function EniDec
000018D2                            
000018D2                            ; ===========================================================================
000018D2                            
000018D2                            loc_1768:				; XREF: loc_17B4
000018D2 32CA                       		move.w	a2,(a1)+
000018D4 524A                       		addq.w	#1,a2
000018D6 51CA FFFA                  		dbf	d2,loc_1768
000018DA 60CC                       		bra.s	loc_173E
000018DC                            ; ===========================================================================
000018DC                            
000018DC                            loc_1772:				; XREF: loc_17B4
000018DC 32CC                       		move.w	a4,(a1)+
000018DE 51CA FFFC                  		dbf	d2,loc_1772
000018E2 60C4                       		bra.s	loc_173E
000018E4                            ; ===========================================================================
000018E4                            
000018E4                            loc_177A:				; XREF: loc_17B4
000018E4 6100 0000                  		bsr.w	loc_17DC
000018E8                            
000018E8                            loc_177E:
000018E8 32C1                       		move.w	d1,(a1)+
000018EA 51CA FFFC                  		dbf	d2,loc_177E
000018EE 60B8                       		bra.s	loc_173E
000018F0                            ; ===========================================================================
000018F0                            
000018F0                            loc_1786:				; XREF: loc_17B4
000018F0 6100 0000                  		bsr.w	loc_17DC
000018F4                            
000018F4                            loc_178A:
000018F4 32C1                       		move.w	d1,(a1)+
000018F6 5241                       		addq.w	#1,d1
000018F8 51CA FFFA                  		dbf	d2,loc_178A
000018FC 60AA                       		bra.s	loc_173E
000018FE                            ; ===========================================================================
000018FE                            
000018FE                            loc_1794:				; XREF: loc_17B4
000018FE 6100 0000                  		bsr.w	loc_17DC
00001902                            
00001902                            loc_1798:
00001902 32C1                       		move.w	d1,(a1)+
00001904 5341                       		subq.w	#1,d1
00001906 51CA FFFA                  		dbf	d2,loc_1798
0000190A 609C                       		bra.s	loc_173E
0000190C                            ; ===========================================================================
0000190C                            
0000190C                            loc_17A2:				; XREF: loc_17B4
0000190C 0C42 000F                  		cmpi.w	#$F,d2
00001910 6700                       		beq.s	loc_17C4
00001912                            
00001912                            loc_17A8:
00001912 6100 0000                  		bsr.w	loc_17DC
00001916 32C1                       		move.w	d1,(a1)+
00001918 51CA FFF8                  		dbf	d2,loc_17A8
0000191C 608A                       		bra.s	loc_173E
0000191E                            ; ===========================================================================
0000191E                            
0000191E                            loc_17B4:				; XREF: EniDec
0000191E 60B2                       		bra.s	loc_1768
00001920                            ; ===========================================================================
00001920 60B0                       		bra.s	loc_1768
00001922                            ; ===========================================================================
00001922 60B8                       		bra.s	loc_1772
00001924                            ; ===========================================================================
00001924 60B6                       		bra.s	loc_1772
00001926                            ; ===========================================================================
00001926 60BC                       		bra.s	loc_177A
00001928                            ; ===========================================================================
00001928 60C6                       		bra.s	loc_1786
0000192A                            ; ===========================================================================
0000192A 60D2                       		bra.s	loc_1794
0000192C                            ; ===========================================================================
0000192C 60DE                       		bra.s	loc_17A2
0000192E                            ; ===========================================================================
0000192E                            
0000192E                            loc_17C4:				; XREF: loc_17A2
0000192E 5348                       		subq.w	#1,a0
00001930 0C46 0010                  		cmpi.w	#$10,d6
00001934 6600                       		bne.s	loc_17CE
00001936 5348                       		subq.w	#1,a0
00001938                            
00001938                            loc_17CE:
00001938 3008                       		move.w	a0,d0
0000193A E248                       		lsr.w	#1,d0
0000193C 6400                       		bcc.s	loc_17D6
0000193E 5248                       		addq.w	#1,a0
00001940                            
00001940                            loc_17D6:
00001940 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
00001944 4E75                       		rts	
00001946                            ; ===========================================================================
00001946                            
00001946                            loc_17DC:				; XREF: loc_17A2
00001946 360B                       		move.w	a3,d3
00001948 1204                       		move.b	d4,d1
0000194A D201                       		add.b	d1,d1
0000194C 6400                       		bcc.s	loc_17EE
0000194E 5346                       		subq.w	#1,d6
00001950 0D05                       		btst	d6,d5
00001952 6700                       		beq.s	loc_17EE
00001954 0043 8000                  		ori.w	#-$8000,d3
00001958                            
00001958                            loc_17EE:
00001958 D201                       		add.b	d1,d1
0000195A 6400                       		bcc.s	loc_17FC
0000195C 5346                       		subq.w	#1,d6
0000195E 0D05                       		btst	d6,d5
00001960 6700                       		beq.s	loc_17FC
00001962 0643 4000                  		addi.w	#$4000,d3
00001966                            
00001966                            loc_17FC:
00001966 D201                       		add.b	d1,d1
00001968 6400                       		bcc.s	loc_180A
0000196A 5346                       		subq.w	#1,d6
0000196C 0D05                       		btst	d6,d5
0000196E 6700                       		beq.s	loc_180A
00001970 0643 2000                  		addi.w	#$2000,d3
00001974                            
00001974                            loc_180A:
00001974 D201                       		add.b	d1,d1
00001976 6400                       		bcc.s	loc_1818
00001978 5346                       		subq.w	#1,d6
0000197A 0D05                       		btst	d6,d5
0000197C 6700                       		beq.s	loc_1818
0000197E 0043 1000                  		ori.w	#$1000,d3
00001982                            
00001982                            loc_1818:
00001982 D201                       		add.b	d1,d1
00001984 6400                       		bcc.s	loc_1826
00001986 5346                       		subq.w	#1,d6
00001988 0D05                       		btst	d6,d5
0000198A 6700                       		beq.s	loc_1826
0000198C 0043 0800                  		ori.w	#$800,d3
00001990                            
00001990                            loc_1826:
00001990 3205                       		move.w	d5,d1
00001992 3E06                       		move.w	d6,d7
00001994 9E4D                       		sub.w	a5,d7
00001996 6400                       		bcc.s	loc_1856
00001998 3C07                       		move.w	d7,d6
0000199A 0646 0010                  		addi.w	#$10,d6
0000199E 4447                       		neg.w	d7
000019A0 EF69                       		lsl.w	d7,d1
000019A2 1A10                       		move.b	(a0),d5
000019A4 EF3D                       		rol.b	d7,d5
000019A6 DE47                       		add.w	d7,d7
000019A8 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
000019AC D245                       		add.w	d5,d1
000019AE                            
000019AE                            loc_1844:				; XREF: loc_1868
000019AE 300D                       		move.w	a5,d0
000019B0 D040                       		add.w	d0,d0
000019B2 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
000019B6 D243                       		add.w	d3,d1
000019B8 1A18                       		move.b	(a0)+,d5
000019BA E14D                       		lsl.w	#8,d5
000019BC 1A18                       		move.b	(a0)+,d5
000019BE 4E75                       		rts	
000019C0                            ; ===========================================================================
000019C0                            
000019C0                            loc_1856:				; XREF: loc_1826
000019C0 6700                       		beq.s	loc_1868
000019C2 EE69                       		lsr.w	d7,d1
000019C4 300D                       		move.w	a5,d0
000019C6 D040                       		add.w	d0,d0
000019C8 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
000019CC D243                       		add.w	d3,d1
000019CE 300D                       		move.w	a5,d0
000019D0 6000                       		bra.s	sub_188C
000019D2                            ; ===========================================================================
000019D2                            
000019D2                            loc_1868:				; XREF: loc_1856
000019D2 7C10                       		moveq	#$10,d6
000019D4                            
000019D4                            loc_186A:
000019D4 60D8                       		bra.s	loc_1844
000019D6                            ; ===========================================================================
000019D6 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
000019EC 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
000019F6                            
000019F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000019F6                            
000019F6                            
000019F6                            sub_188C:				; XREF: EniDec
000019F6 9C40                       		sub.w	d0,d6
000019F8 0C46 0009                  		cmpi.w	#9,d6
000019FC 6400                       		bcc.s	locret_189A
000019FE 5046                       		addq.w	#8,d6
00001A00 E145                       		asl.w	#8,d5
00001A02 1A18                       		move.b	(a0)+,d5
00001A04                            
00001A04                            locret_189A:
00001A04 4E75                       		rts	
00001A06                            ; End of function sub_188C
00001A06                            
00001A06                            ; ---------------------------------------------------------------------------
00001A06                            ; Kosinski decompression algorithm
00001A06                            ; ---------------------------------------------------------------------------
00001A06                            
00001A06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A06                            
00001A06                            
00001A06                            KosDec:
00001A06                            
00001A06 =FFFFFFFE                  var_2		= -2
00001A06 =FFFFFFFF                  var_1		= -1
00001A06                            
00001A06 558F                       		subq.l	#2,sp
00001A08 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001A0C 1E98                       		move.b	(a0)+,(sp)
00001A0E 3A17                       		move.w	(sp),d5
00001A10 780F                       		moveq	#$F,d4
00001A12                            
00001A12                            loc_18A8:
00001A12 E24D                       		lsr.w	#1,d5
00001A14 40C6                       		move	sr,d6
00001A16 51CC 0000                  		dbf	d4,loc_18BA
00001A1A 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001A1E 1E98                       		move.b	(a0)+,(sp)
00001A20 3A17                       		move.w	(sp),d5
00001A22 780F                       		moveq	#$F,d4
00001A24                            
00001A24                            loc_18BA:
00001A24 44C6                       		move	d6,ccr
00001A26 6400                       		bcc.s	loc_18C2
00001A28 12D8                       		move.b	(a0)+,(a1)+
00001A2A 60E6                       		bra.s	loc_18A8
00001A2C                            ; ===========================================================================
00001A2C                            
00001A2C                            loc_18C2:				; XREF: KosDec
00001A2C 7600                       		moveq	#0,d3
00001A2E E24D                       		lsr.w	#1,d5
00001A30 40C6                       		move	sr,d6
00001A32 51CC 0000                  		dbf	d4,loc_18D6
00001A36 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001A3A 1E98                       		move.b	(a0)+,(sp)
00001A3C 3A17                       		move.w	(sp),d5
00001A3E 780F                       		moveq	#$F,d4
00001A40                            
00001A40                            loc_18D6:
00001A40 44C6                       		move	d6,ccr
00001A42 6500                       		bcs.s	loc_1906
00001A44 E24D                       		lsr.w	#1,d5
00001A46 51CC 0000                  		dbf	d4,loc_18EA
00001A4A 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001A4E 1E98                       		move.b	(a0)+,(sp)
00001A50 3A17                       		move.w	(sp),d5
00001A52 780F                       		moveq	#$F,d4
00001A54                            
00001A54                            loc_18EA:
00001A54 E353                       		roxl.w	#1,d3
00001A56 E24D                       		lsr.w	#1,d5
00001A58 51CC 0000                  		dbf	d4,loc_18FC
00001A5C 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001A60 1E98                       		move.b	(a0)+,(sp)
00001A62 3A17                       		move.w	(sp),d5
00001A64 780F                       		moveq	#$F,d4
00001A66                            
00001A66                            loc_18FC:
00001A66 E353                       		roxl.w	#1,d3
00001A68 5243                       		addq.w	#1,d3
00001A6A 74FF                       		moveq	#-1,d2
00001A6C 1418                       		move.b	(a0)+,d2
00001A6E 6000                       		bra.s	loc_191C
00001A70                            ; ===========================================================================
00001A70                            
00001A70                            loc_1906:				; XREF: loc_18C2
00001A70 1018                       		move.b	(a0)+,d0
00001A72 1218                       		move.b	(a0)+,d1
00001A74 74FF                       		moveq	#-1,d2
00001A76 1401                       		move.b	d1,d2
00001A78 EB4A                       		lsl.w	#5,d2
00001A7A 1400                       		move.b	d0,d2
00001A7C 0241 0007                  		andi.w	#7,d1
00001A80 6700                       		beq.s	loc_1928
00001A82 1601                       		move.b	d1,d3
00001A84 5243                       		addq.w	#1,d3
00001A86                            
00001A86                            loc_191C:
00001A86 1031 2000                  		move.b	(a1,d2.w),d0
00001A8A 12C0                       		move.b	d0,(a1)+
00001A8C 51CB FFF8                  		dbf	d3,loc_191C
00001A90 6080                       		bra.s	loc_18A8
00001A92                            ; ===========================================================================
00001A92                            
00001A92                            loc_1928:				; XREF: loc_1906
00001A92 1218                       		move.b	(a0)+,d1
00001A94 6700                       		beq.s	loc_1938
00001A96 0C01 0001                  		cmpi.b	#1,d1
00001A9A 6700 FF76                  		beq.w	loc_18A8
00001A9E 1601                       		move.b	d1,d3
00001AA0 60E4                       		bra.s	loc_191C
00001AA2                            ; ===========================================================================
00001AA2                            
00001AA2                            loc_1938:				; XREF: loc_1928
00001AA2 548F                       		addq.l	#2,sp
00001AA4 4E75                       		rts	
00001AA6                            ; End of function KosDec
00001AA6                            
00001AA6                            ; ---------------------------------------------------------------------------
00001AA6                            ; Pallet cycling routine loading subroutine
00001AA6                            ; ---------------------------------------------------------------------------
00001AA6                            
00001AA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AA6                            
00001AA6                            
00001AA6                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001AA6 4EB9 0000 0000                 	jsr    PalCycle_SuperSonic
00001AAC 7400                       		moveq	#0,d2
00001AAE 7000                       		moveq	#0,d0
00001AB0 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001AB4 D040                       		add.w	d0,d0		; multiply by 2
00001AB6 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001ABA 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001ABE                            ; End of function PalCycle_Load
00001ABE                            
00001ABE                            ; ===========================================================================
00001ABE                            ; ---------------------------------------------------------------------------
00001ABE                            ; Pallet cycling routines
00001ABE                            ; ---------------------------------------------------------------------------
00001ABE 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001AC0 0000                       		dc.w PalCycle_LZ-PalCycle
00001AC2 0000                       		dc.w PalCycle_MZ-PalCycle
00001AC4 0000                       		dc.w PalCycle_SLZ-PalCycle
00001AC6 0000                       		dc.w PalCycle_SYZ-PalCycle
00001AC8 0000                       		dc.w PalCycle_SBZ-PalCycle
00001ACA 0000                       		dc.w PalCycle_GHZ-PalCycle
00001ACC                            
00001ACC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ACC                            
00001ACC                            
00001ACC                            PalCycle_Title:				; XREF: TitleScreen
00001ACC 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001AD2 6000                       		bra.s	loc_196A
00001AD4                            ; ===========================================================================
00001AD4                            
00001AD4                            PalCycle_GHZ:				; XREF: PalCycle
00001AD4 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001ADA                            
00001ADA                            loc_196A:				; XREF: PalCycle_Title
00001ADA 5378 F634                  		subq.w	#1,($FFFFF634).w
00001ADE 6A00                       		bpl.s	locret_1990
00001AE0 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001AE6 3038 F632                  		move.w	($FFFFF632).w,d0
00001AEA 5278 F632                  		addq.w	#1,($FFFFF632).w
00001AEE 0240 0003                  		andi.w	#3,d0
00001AF2 E748                       		lsl.w	#3,d0
00001AF4 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001AF8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001AFC 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B00                            
00001B00                            locret_1990:
00001B00 4E75                       		rts	
00001B02                            ; End of function PalCycle_Title
00001B02                            
00001B02                            
00001B02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B02                            
00001B02                            
00001B02                            PalCycle_LZ:				; XREF: PalCycle
00001B02 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B06 6A00                       		bpl.s	loc_19D8
00001B08 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001B0E 3038 F632                  		move.w	($FFFFF632).w,d0
00001B12 5278 F632                  		addq.w	#1,($FFFFF632).w
00001B16 0240 0003                  		andi.w	#3,d0
00001B1A E748                       		lsl.w	#3,d0
00001B1C 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001B22 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001B28 6600                       		bne.s	loc_19C0
00001B2A 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001B30                            
00001B30                            loc_19C0:
00001B30 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001B34 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B38 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B3C 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001B40 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B44 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B48                            
00001B48                            loc_19D8:
00001B48 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001B4C 0240 0007                  		andi.w	#7,d0
00001B50 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001B54 6700                       		beq.s	locret_1A3A
00001B56 7201                       		moveq	#1,d1
00001B58 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001B5C 6700                       		beq.s	loc_19F0
00001B5E 4441                       		neg.w	d1
00001B60                            
00001B60                            loc_19F0:
00001B60 3038 F650                  		move.w	($FFFFF650).w,d0
00001B64 0240 0003                  		andi.w	#3,d0
00001B68 D041                       		add.w	d1,d0
00001B6A 0C40 0003                  		cmpi.w	#3,d0
00001B6E 6500                       		bcs.s	loc_1A0A
00001B70 3200                       		move.w	d0,d1
00001B72 7000                       		moveq	#0,d0
00001B74 4A41                       		tst.w	d1
00001B76 6A00                       		bpl.s	loc_1A0A
00001B78 7002                       		moveq	#2,d0
00001B7A                            
00001B7A                            loc_1A0A:
00001B7A 31C0 F650                  		move.w	d0,($FFFFF650).w
00001B7E D040                       		add.w	d0,d0
00001B80 3200                       		move.w	d0,d1
00001B82 D040                       		add.w	d0,d0
00001B84 D041                       		add.w	d1,d0
00001B86 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001B8C 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001B90 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B94 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001B98 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001B9E 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001BA2 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BA6 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001BAA                            
00001BAA                            locret_1A3A:
00001BAA 4E75                       		rts	
00001BAC                            ; End of function PalCycle_LZ
00001BAC                            
00001BAC                            ; ===========================================================================
00001BAC 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001BB4                            ; ===========================================================================
00001BB4                            
00001BB4                            PalCycle_MZ:				; XREF: PalCycle
00001BB4 4E75                       		rts	
00001BB6                            
00001BB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BB6                            
00001BB6                            
00001BB6                            PalCycle_SLZ:				; XREF: PalCycle
00001BB6 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BBA 6A00                       		bpl.s	locret_1A80
00001BBC 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001BC2 3038 F632                  		move.w	($FFFFF632).w,d0
00001BC6 5240                       		addq.w	#1,d0
00001BC8 0C40 0006                  		cmpi.w	#6,d0
00001BCC 6500                       		bcs.s	loc_1A60
00001BCE 7000                       		moveq	#0,d0
00001BD0                            
00001BD0                            loc_1A60:
00001BD0 31C0 F632                  		move.w	d0,($FFFFF632).w
00001BD4 3200                       		move.w	d0,d1
00001BD6 D241                       		add.w	d1,d1
00001BD8 D041                       		add.w	d1,d0
00001BDA D040                       		add.w	d0,d0
00001BDC 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001BE2 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BE6 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001BEA 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001BF0                            
00001BF0                            locret_1A80:
00001BF0 4E75                       		rts	
00001BF2                            ; End of function PalCycle_SLZ
00001BF2                            
00001BF2                            
00001BF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BF2                            
00001BF2                            
00001BF2                            PalCycle_SYZ:				; XREF: PalCycle
00001BF2 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BF6 6A00                       		bpl.s	locret_1AC6
00001BF8 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001BFE 3038 F632                  		move.w	($FFFFF632).w,d0
00001C02 5278 F632                  		addq.w	#1,($FFFFF632).w
00001C06 0240 0003                  		andi.w	#3,d0
00001C0A E548                       		lsl.w	#2,d0
00001C0C 3200                       		move.w	d0,d1
00001C0E D040                       		add.w	d0,d0
00001C10 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001C16 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001C1A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C1E 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C22 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001C28 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C2C 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001C30 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001C36                            
00001C36                            locret_1AC6:
00001C36 4E75                       		rts	
00001C38                            ; End of function PalCycle_SYZ
00001C38                            
00001C38                            
00001C38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C38                            
00001C38                            
00001C38                            PalCycle_SBZ:				; XREF: PalCycle
00001C38 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001C3E 4A38 FE11                  		tst.b	($FFFFFE11).w
00001C42 6700                       		beq.s	loc_1ADA
00001C44 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001C4A                            
00001C4A                            loc_1ADA:
00001C4A 43F8 F650                  		lea	($FFFFF650).w,a1
00001C4E 321A                       		move.w	(a2)+,d1
00001C50                            
00001C50                            loc_1AE0:
00001C50 5311                       		subq.b	#1,(a1)
00001C52 6B00                       		bmi.s	loc_1AEA
00001C54 5489                       		addq.l	#2,a1
00001C56 5C8A                       		addq.l	#6,a2
00001C58 6000                       		bra.s	loc_1B06
00001C5A                            ; ===========================================================================
00001C5A                            
00001C5A                            loc_1AEA:				; XREF: PalCycle_SBZ
00001C5A 12DA                       		move.b	(a2)+,(a1)+
00001C5C 1011                       		move.b	(a1),d0
00001C5E 5200                       		addq.b	#1,d0
00001C60 B01A                       		cmp.b	(a2)+,d0
00001C62 6500                       		bcs.s	loc_1AF6
00001C64 7000                       		moveq	#0,d0
00001C66                            
00001C66                            loc_1AF6:
00001C66 12C0                       		move.b	d0,(a1)+
00001C68 0240 000F                  		andi.w	#$F,d0
00001C6C D040                       		add.w	d0,d0
00001C6E 305A                       		movea.w	(a2)+,a0
00001C70 365A                       		movea.w	(a2)+,a3
00001C72 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001C76                            
00001C76                            loc_1B06:				; XREF: PalCycle_SBZ
00001C76 51C9 FFD8                  		dbf	d1,loc_1AE0
00001C7A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C7E 6A00                       		bpl.s	locret_1B64
00001C80 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001C86 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001C8C 4A38 FE11                  		tst.b	($FFFFFE11).w
00001C90 6700                       		beq.s	loc_1B2E
00001C92 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001C98 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001C9E                            
00001C9E                            loc_1B2E:
00001C9E 72FF                       		moveq	#-1,d1
00001CA0 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001CA4 6700                       		beq.s	loc_1B38
00001CA6 4441                       		neg.w	d1
00001CA8                            
00001CA8                            loc_1B38:
00001CA8 3038 F632                  		move.w	($FFFFF632).w,d0
00001CAC 0240 0003                  		andi.w	#3,d0
00001CB0 D041                       		add.w	d1,d0
00001CB2 0C40 0003                  		cmpi.w	#3,d0
00001CB6 6500                       		bcs.s	loc_1B52
00001CB8 3200                       		move.w	d0,d1
00001CBA 7000                       		moveq	#0,d0
00001CBC 4A41                       		tst.w	d1
00001CBE 6A00                       		bpl.s	loc_1B52
00001CC0 7002                       		moveq	#2,d0
00001CC2                            
00001CC2                            loc_1B52:
00001CC2 31C0 F632                  		move.w	d0,($FFFFF632).w
00001CC6 D040                       		add.w	d0,d0
00001CC8 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001CCC 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001CD0 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001CD4                            
00001CD4                            locret_1B64:
00001CD4 4E75                       		rts	
00001CD6                            ; End of function PalCycle_SBZ
00001CD6                            
00001CD6 =FFFFFFC4                  Palette_frame equ   $FFFFFFC4   ; < free RAM word (make sure its even or youll get errors!!!!)
00001CD6 =FFFFF65F                  Super_Sonic_palette equ $FFFFF65F    ; < free RAM byte
00001CD6 =FFFFF65C                  Palette_timer equ $FFFFF65C  ; < free RAM byte
00001CD6                            
00001CD6                            PalCycle_SuperSonic:
00001CD6 1038 F65F                          move.b    ($FFFFF65F).w,d0
00001CDA 6700                               beq.s    return_2186
00001CDC 6B00 0000                          bmi.w    loc_21E6
00001CE0 5300                               subq.b    #1,d0
00001CE2 6600                               bne.s    loc_2188
00001CE4 5338 F65E                          subq.b    #1,($FFFFF65E).w
00001CE8 6A00                               bpl.s    return_2186
00001CEA 11FC 0003 F65E                     move.b    #3,($FFFFF65E).w
00001CF0 41F9 0000 0000                     lea    (Pal_2246).l,a0
00001CF6 3038 F65C                          move.w    ($FFFFF65C).w,d0
00001CFA 5C78 F65C                          addq.w    #6,($FFFFF65C).w ; was 8
00001CFE 0C78 0030 F65C                     cmpi.w    #$30,($FFFFF65C).w
00001D04 6500                               bcs.s    PalCycleSS_1
00001D06 11FC 00FF F65F                     move.b    #-1,($FFFFF65F).w
00001D0C 11FC 0000 F7F2                     move.b    #0,($FFFFF7C8+$2A).w
00001D12                            
00001D12                            PalCycleSS_1:
00001D12 43F8 FB04                          lea    ($FFFFFB04).w,a1 ; 04
00001D16 22F0 0000                          move.l    (a0,d0.w),(a1)+ ; there was +
00001D1A 22B0 0004                          move.l    4(a0,d0.w),(a1)
00001D1E                            
00001D1E                            return_2186:
00001D1E 4E75                               rts
00001D20                            ; ===========================================================================
00001D20                            
00001D20                            loc_2188:
00001D20 5338 F65E                          subq.b    #1,($FFFFF65E).w
00001D24 6AF8                               bpl.s    return_2186
00001D26 11FC 0003 F65E                     move.b    #3,($FFFFF65E).w
00001D2C 41F9 0000 0000                     lea    (Pal_2246).l,a0
00001D32 3038 F65C                          move.w    ($FFFFF65C).w,d0
00001D36 5D78 F65C                          subq.w    #$6,($FFFFF65C).w ; it was 8
00001D3A 6400                               bcc.s     loc_21B0
00001D3C 11FC 0000 F65C                     move.b    #0,($FFFFF65C).w
00001D42 11FC 0000 F65F                     move.b    #0,($FFFFF65F).w
00001D48 4278 FB02                          clr.w 	  ($FFFFFB02).w
00001D4C 4278 FB04                          clr.w 	  ($FFFFFB04).w
00001D50 4E75                               rts
00001D52                            
00001D52                            loc_21B0:
00001D52 43F8 FB04                          lea    ($FFFFFB04).w,a1
00001D56 22F0 0000                          move.l    (a0,d0.w),(a1)+ ; there was +
00001D5A 22B0 0004                          move.l    4(a0,d0.w),(a1)
00001D5E 0C38 0001 FE10                     cmpi.b    #$1,($FFFFFE10).w
00001D64 6700                               beq.s    PalCycleSS_2
00001D66 4E75                               rts
00001D68                            ; ===========================================================================
00001D68                            
00001D68                            PalCycleSS_2:
00001D68 43F8 F084                          lea    ($FFFFF084).w,a1
00001D6C 22F0 0000                          move.l    (a0,d0.w),(a1)+
00001D70 22B0 0004                          move.l    4(a0,d0.w),(a1)
00001D74 4E75                               rts
00001D76                            ; ===========================================================================
00001D76                            
00001D76                            loc_21E6:
00001D76 5338 F65E                          subq.b    #1,($FFFFF65E).w
00001D7A 6AA2                               bpl.s    return_2186
00001D7C 11FC 0007 F65E                     move.b    #7,($FFFFF65E).w
00001D82 41F9 0000 0000                     lea    (Pal_2246).l,a0
00001D88 3038 F65C                          move.w    ($FFFFF65C).w,d0
00001D8C 5078 F65C                          addq.w    #8,($FFFFF65C).w ; it was 8
00001D90 0C78 0078 F65C                     cmpi.w    #$78,($FFFFF65C).w
00001D96 6500                               bcs.s    PalCycleSS_3
00001D98 31FC 0030 F65C                     move.w    #$30,($FFFFF65C).w
00001D9E                            
00001D9E                            PalCycleSS_3:
00001D9E 43F8 FB04                          lea    ($FFFFFB04).w,a1
00001DA2 22F0 0000                          move.l    (a0,d0.w),(a1)+ ; there was +
00001DA6 22B0 0004                          move.l    4(a0,d0.w),(a1)
00001DAA                            ;		cmpi.b  #$02,($FFFFFFBB).w ; is it Shadow?
00001DAA                            ;		beq.s   PalCycle_SSEnd ; if not, branch
00001DAA                            ;        lea    ($FFFFFB02).w,a1 ; it was 04
00001DAA                            ;        move.w    (a0,d0.w),(a1) ; there was +
00001DAA                            ;        move.w    4(a0,d0.w),(a1)
00001DAA 0C38 0001 FE10                     cmpi.b    #$1,($FFFFFE10).w
00001DB0 6700                               beq.s    PalCycleSS_4
00001DB2 4E75                               rts
00001DB4                            ; ===========================================================================
00001DB4                            PalCycleSS_4:
00001DB4 43F8 F084                          lea    ($FFFFF084).w,a1
00001DB8 22F0 0000                          move.l    (a0,d0.w),(a1)+
00001DBC 22B0 0004                          move.l    4(a0,d0.w),(a1)
00001DC0 4E75                               rts
00001DC2                            
00001DC2                            PalCycle_SSEnd:
00001DC2 4E75                       		rts
00001DC4                            ; End of function PalCycle_SuperSonic
00001DC4                            
00001DC4                            ; ===========================================================================
00001DC4                            ;----------------------------------------------------------------------------
00001DC4                            ;Palette for transformation to Super Sonic
00001DC4                            ;----------------------------------------------------------------------------
00001DC4                            Pal_2246:
00001DC4                            	incbin  "pallet/SuperSonic.bin"
00001E44                                even
00001E44                            ;----------------------------------------------------------------------------
00001E44                            ;Palette for transformation to Super Sonic while underwater in CPZ
00001E44                            ;----------------------------------------------------------------------------
00001E44                            ; Pal_22C6:
00001E44                            CyclingPal_CPZUWTransformation:
00001E44                            	incbin  "pallet/CPZWater SS transformation.bin"
00001E64                                even
00001E64                            ;----------------------------------------------------------------------------
00001E64                            ;Palette for transformation to Super Sonic while underwater in ARZ
00001E64                            ;----------------------------------------------------------------------------
00001E64                            ; Pal_2346:
00001E64                            CyclingPal_ARZUWTransformation:
00001E64                                incbin  "pallet/ARZWater SS transformation.bin"
00001E84                                even
00001E84                            
00001E84                            ; ===========================================================================
00001E84                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001EA4                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001EC4                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001EE4                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001EF6                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001F08                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001F70                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001F94                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001FB4                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001FC4                            
00001FC4                            Pal_SBZCycList:
00001FC4                            	include "_inc\SBZ pallet script 1.asm"
00001FC4                            ; ---------------------------------------------------------------------------
00001FC4                            ; Scrap Brain Zone 1 pallet cycling script
00001FC4                            ; ---------------------------------------------------------------------------
00001FC4 0008                       	dc.w 8			; number of entries - 1
00001FC6 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001FC8 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001FCA FB50                       	dc.w $FB50		; RAM address
00001FCC 0D08                       	dc.b $D, 8
00001FCE 0000                       	dc.w Pal_SBZCyc2
00001FD0 FB52                       	dc.w $FB52
00001FD2 0E08                       	dc.b $E, 8
00001FD4 0000                       	dc.w Pal_SBZCyc3
00001FD6 FB6E                       	dc.w $FB6E
00001FD8 0B08                       	dc.b $B, 8
00001FDA 0000                       	dc.w Pal_SBZCyc5
00001FDC FB70                       	dc.w $FB70
00001FDE 0708                       	dc.b 7,	8
00001FE0 0000                       	dc.w Pal_SBZCyc6
00001FE2 FB72                       	dc.w $FB72
00001FE4 1C10                       	dc.b $1C, $10
00001FE6 0000                       	dc.w Pal_SBZCyc7
00001FE8 FB7E                       	dc.w $FB7E
00001FEA 0303                       	dc.b 3,	3
00001FEC 0000                       	dc.w Pal_SBZCyc8
00001FEE FB78                       	dc.w $FB78
00001FF0 0303                       	dc.b 3,	3
00001FF2 0000                       	dc.w Pal_SBZCyc8+2
00001FF4 FB7A                       	dc.w $FB7A
00001FF6 0303                       	dc.b 3,	3
00001FF8 0000                       	dc.w Pal_SBZCyc8+4
00001FFA FB7C                       	dc.w $FB7C
00001FFC                            	even
00001FFC                            	even
00001FFC                            
00001FFC                            Pal_SBZCycList2:
00001FFC                            	include "_inc\SBZ pallet script 2.asm"
00001FFC                            ; ---------------------------------------------------------------------------
00001FFC                            ; Scrap Brain Zone 2 pallet cycling script
00001FFC                            ; ---------------------------------------------------------------------------
00001FFC 0006                       	dc.w 6
00001FFE 0708                       	dc.b 7,	8
00002000 0000                       	dc.w Pal_SBZCyc1
00002002 FB50                       	dc.w $FB50
00002004 0D08                       	dc.b $D, 8
00002006 0000                       	dc.w Pal_SBZCyc2
00002008 FB52                       	dc.w $FB52
0000200A 0908                       	dc.b 9,	8
0000200C 0000                       	dc.w Pal_SBZCyc9
0000200E FB70                       	dc.w $FB70
00002010 0708                       	dc.b 7,	8
00002012 0000                       	dc.w Pal_SBZCyc6
00002014 FB72                       	dc.w $FB72
00002016 0303                       	dc.b 3,	3
00002018 0000                       	dc.w Pal_SBZCyc8
0000201A FB78                       	dc.w $FB78
0000201C 0303                       	dc.b 3,	3
0000201E 0000                       	dc.w Pal_SBZCyc8+2
00002020 FB7A                       	dc.w $FB7A
00002022 0303                       	dc.b 3,	3
00002024 0000                       	dc.w Pal_SBZCyc8+4
00002026 FB7C                       	dc.w $FB7C
00002028                            	even
00002028                            	even
00002028                            
00002028                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00002038                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00002048                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00002058                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00002064                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00002074                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00002084                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
000020A4                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
000020AE                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
000020BE                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
000020CA                            ; ---------------------------------------------------------------------------
000020CA                            ; Subroutine to	fade out and fade in
000020CA                            ; ---------------------------------------------------------------------------
000020CA                            
000020CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020CA                            
000020CA                            
000020CA                            Pal_FadeTo:
000020CA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020D0                            
000020D0                            Pal_FadeTo2:
000020D0 7000                       		moveq	#0,d0
000020D2 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020D6 1038 F626                  		move.b	($FFFFF626).w,d0
000020DA D0C0                       		adda.w	d0,a0
000020DC 7200                       		moveq	#0,d1
000020DE 1038 F627                  		move.b	($FFFFF627).w,d0
000020E2                            
000020E2                            Pal_ToBlack:
000020E2 30C1                       		move.w	d1,(a0)+
000020E4 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
000020E8 780E                       		moveq	#$0E,d4					; MJ: prepare maximum colour check
000020EA 7C00                       		moveq	#$00,d6					; MJ: clear d6
000020EC                            
000020EC                            loc_1DCE:
000020EC 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000020F2 6100 0000                  		bsr.w	DelayProgram
000020F6 0846 0000                  		bchg	#$00,d6					; MJ: change delay counter
000020FA 67F0                       		beq	loc_1DCE				; MJ: if null, delay a frame
000020FC 6100                       		bsr.s	Pal_FadeIn
000020FE 6100 F656                  		bsr.w	RunPLC_RAM
00002102 5504                       		subq.b	#$02,d4					; MJ: decrease colour check
00002104 66E6                       		bne	loc_1DCE				; MJ: if it has not reached null, branch
00002106 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w			; MJ: wait for V-blank again (so colours transfer)
0000210C 6000 0000                  		bra	DelayProgram				; MJ: ''
00002110                            
00002110                            ; End of function Pal_FadeTo
00002110                            
00002110                            ; ---------------------------------------------------------------------------
00002110                            ; Pallet fade-in subroutine
00002110                            ; ---------------------------------------------------------------------------
00002110                            
00002110                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002110                            
00002110                            
00002110                            Pal_FadeIn:				; XREF: Pal_FadeTo
00002110 7000                       		moveq	#0,d0
00002112 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002116 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000211A 1038 F626                  		move.b	($FFFFF626).w,d0
0000211E D0C0                       		adda.w	d0,a0
00002120 D2C0                       		adda.w	d0,a1
00002122 1038 F627                  		move.b	($FFFFF627).w,d0
00002126                            
00002126                            loc_1DFA:
00002126 6100                       		bsr.s	Pal_AddColor
00002128 51C8 FFFC                  		dbf	d0,loc_1DFA
0000212C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002132 6600                       		bne.s	locret_1E24
00002134 7000                       		moveq	#0,d0
00002136 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000213A 43F8 FA00                  		lea	($FFFFFA00).w,a1
0000213E 1038 F626                  		move.b	($FFFFF626).w,d0
00002142 D0C0                       		adda.w	d0,a0
00002144 D2C0                       		adda.w	d0,a1
00002146 1038 F627                  		move.b	($FFFFF627).w,d0
0000214A                            
0000214A                            loc_1E1E:
0000214A 6100                       		bsr.s	Pal_AddColor
0000214C 51C8 FFFC                  		dbf	d0,loc_1E1E
00002150                            
00002150                            locret_1E24:
00002150 4E75                       		rts	
00002152                            ; End of function Pal_FadeIn
00002152                            
00002152                            
00002152                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002152                            
00002152                            
00002152                            Pal_AddColor:				; XREF: Pal_FadeIn
00002152 1A11                       		move.b	(a1),d5					; MJ: load blue
00002154 3219                       		move.w	(a1)+,d1				; MJ: load green and red
00002156 1401                       		move.b	d1,d2					; MJ: load red
00002158 E809                       		lsr.b	#$04,d1					; MJ: get only green
0000215A 0202 000E                  		andi.b	#$0E,d2					; MJ: get only red
0000215E 3610                       		move.w	(a0),d3					; MJ: load current colour in buffer
00002160 B805                       		cmp.b	d5,d4					; MJ: is it time for blue to fade?
00002162 6200 0000                  		bhi	FCI_NoBlue				; MJ: if not, branch
00002166 0643 0200                  		addi.w	#$0200,d3				; MJ: increase blue
0000216A                            
0000216A                            FCI_NoBlue:
0000216A B801                       		cmp.b	d1,d4					; MJ: is it time for green to fade?
0000216C 6200 0000                  		bhi	FCI_NoGreen				; MJ: if not, branch
00002170 0603 0020                  		addi.b	#$20,d3					; MJ: increase green
00002174                            
00002174                            FCI_NoGreen:
00002174 B802                       		cmp.b	d2,d4					; MJ: is it time for red to fade?
00002176 6200 0000                  		bhi	FCI_NoRed				; MJ: if not, branch
0000217A 5403                       		addq.b	#$02,d3					; MJ: increase red
0000217C                            
0000217C                            FCI_NoRed:
0000217C 30C3                       		move.w	d3,(a0)+				; MJ: save colour
0000217E 4E75                       		rts						; MJ: return
00002180                            
00002180                            ; End of function Pal_AddColor
00002180                            
00002180                            
00002180                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002180                            
00002180                            
00002180                            Pal_FadeFrom:
00002180 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002186 7807                       		moveq	#$07,d4					; MJ: set repeat times
00002188 7C00                       		moveq	#$00,d6					; MJ: clear d6
0000218A                            
0000218A                            loc_1E5C:
0000218A 6100 F5CA                  		bsr.w	RunPLC_RAM
0000218E 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002194 6100 0000                  		bsr.w	DelayProgram
00002198 0846 0000                  		bchg	#$00,d6					; MJ: change delay counter
0000219C 67EC                       		beq	loc_1E5C				; MJ: if null, delay a frame
0000219E 6100                       		bsr.s	Pal_FadeOut
000021A0 51CC FFE8                  		dbf	d4,loc_1E5C
000021A4 4E75                       		rts	
000021A6                            ; End of function Pal_FadeFrom
000021A6                            
000021A6                            ; ---------------------------------------------------------------------------
000021A6                            ; Pallet fade-out subroutine
000021A6                            ; ---------------------------------------------------------------------------
000021A6                            
000021A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021A6                            
000021A6                            
000021A6                            Pal_FadeOut:				; XREF: Pal_FadeFrom
000021A6 7000                       		moveq	#0,d0
000021A8 41F8 FB00                  		lea	($FFFFFB00).w,a0
000021AC 1038 F626                  		move.b	($FFFFF626).w,d0
000021B0 D0C0                       		adda.w	d0,a0
000021B2 1038 F627                  		move.b	($FFFFF627).w,d0
000021B6                            
000021B6                            loc_1E82:
000021B6 6100                       		bsr.s	Pal_DecColor
000021B8 51C8 FFFC                  		dbf	d0,loc_1E82
000021BC                            
000021BC 7000                       		moveq	#0,d0
000021BE 41F8 FA80                  		lea	($FFFFFA80).w,a0
000021C2 1038 F626                  		move.b	($FFFFF626).w,d0
000021C6 D0C0                       		adda.w	d0,a0
000021C8 1038 F627                  		move.b	($FFFFF627).w,d0
000021CC                            
000021CC                            loc_1E98:
000021CC 6100                       		bsr.s	Pal_DecColor
000021CE 51C8 FFFC                  		dbf	d0,loc_1E98
000021D2 4E75                       		rts	
000021D4                            ; End of function Pal_FadeOut
000021D4                            
000021D4                            
000021D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021D4                            
000021D4                            
000021D4                            Pal_DecColor:				; XREF: Pal_FadeOut
000021D4 3A10                       		move.w	(a0),d5					; MJ: load colour
000021D6 3205                       		move.w	d5,d1					; MJ: copy to d1
000021D8 1401                       		move.b	d1,d2					; MJ: load green and red
000021DA 1601                       		move.b	d1,d3					; MJ: load red
000021DC 0241 0E00                  		andi.w	#$0E00,d1				; MJ: get only blue
000021E0 6700 0000                  		beq	FCO_NoBlue				; MJ: if blue is finished, branch
000021E4 0445 0200                  		subi.w	#$0200,d5				; MJ: decrease blue
000021E8                            
000021E8                            FCO_NoBlue:
000021E8 0242 00E0                  		andi.w	#$00E0,d2				; MJ: get only green (needs to be word)
000021EC 6700 0000                  		beq	FCO_NoGreen				; MJ: if green is finished, branch
000021F0 0405 0020                  		subi.b	#$20,d5					; MJ: decrease green
000021F4                            
000021F4                            FCO_NoGreen:
000021F4 0203 000E                  		andi.b	#$0E,d3					; MJ: get only red
000021F8 6700 0000                  		beq	FCO_NoRed				; MJ: if red is finished, branch
000021FC 5505                       		subq.b	#$02,d5					; MJ: decrease red
000021FE                            
000021FE                            FCO_NoRed:
000021FE 30C5                       		move.w	d5,(a0)+				; MJ: save new colour
00002200 4E75                       		rts						; MJ: return
00002202                            
00002202                            ; End of function Pal_DecColor
00002202                            
00002202                            ; ---------------------------------------------------------------------------
00002202                            ; Subroutine to	fill the pallet	with white (special stage)
00002202                            ; ---------------------------------------------------------------------------
00002202                            
00002202                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002202                            
00002202                            
00002202                            Pal_MakeWhite:				; XREF: SpecialStage
00002202 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002208 7000                       		moveq	#0,d0
0000220A 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000220E 1038 F626                  		move.b	($FFFFF626).w,d0
00002212 D0C0                       		adda.w	d0,a0
00002214 323C 0EEE                  		move.w	#$EEE,d1
00002218 1038 F627                  		move.b	($FFFFF627).w,d0
0000221C                            
0000221C                            PalWhite_Loop:
0000221C 30C1                       		move.w	d1,(a0)+
0000221E 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00002222 383C 0015                  		move.w	#$15,d4
00002226                            
00002226                            loc_1EF4:
00002226 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000222C 6100 0000                  		bsr.w	DelayProgram
00002230 6100                       		bsr.s	Pal_WhiteToBlack
00002232 6100 F522                  		bsr.w	RunPLC_RAM
00002236 51CC FFEE                  		dbf	d4,loc_1EF4
0000223A 4E75                       		rts	
0000223C                            ; End of function Pal_MakeWhite
0000223C                            
0000223C                            
0000223C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000223C                            
0000223C                            
0000223C                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
0000223C 7000                       		moveq	#0,d0
0000223E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002242 43F8 FB80                  		lea	($FFFFFB80).w,a1
00002246 1038 F626                  		move.b	($FFFFF626).w,d0
0000224A D0C0                       		adda.w	d0,a0
0000224C D2C0                       		adda.w	d0,a1
0000224E 1038 F627                  		move.b	($FFFFF627).w,d0
00002252                            
00002252                            loc_1F20:
00002252 6100                       		bsr.s	Pal_DecColor2
00002254 51C8 FFFC                  		dbf	d0,loc_1F20
00002258                            
00002258 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000225E 6600                       		bne.s	locret_1F4A
00002260 7000                       		moveq	#0,d0
00002262 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002266 43F8 FA00                  		lea	($FFFFFA00).w,a1
0000226A 1038 F626                  		move.b	($FFFFF626).w,d0
0000226E D0C0                       		adda.w	d0,a0
00002270 D2C0                       		adda.w	d0,a1
00002272 1038 F627                  		move.b	($FFFFF627).w,d0
00002276                            
00002276                            loc_1F44:
00002276 6100                       		bsr.s	Pal_DecColor2
00002278 51C8 FFFC                  		dbf	d0,loc_1F44
0000227C                            
0000227C                            locret_1F4A:
0000227C 4E75                       		rts	
0000227E                            ; End of function Pal_WhiteToBlack
0000227E                            
0000227E                            
0000227E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000227E                            
0000227E                            
0000227E                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
0000227E 3419                       		move.w	(a1)+,d2
00002280 3610                       		move.w	(a0),d3
00002282 B642                       		cmp.w	d2,d3
00002284 6700                       		beq.s	loc_1F78
00002286 3203                       		move.w	d3,d1
00002288 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
0000228C 6500                       		bcs.s	loc_1F64
0000228E B242                       		cmp.w	d2,d1
00002290 6500                       		bcs.s	loc_1F64
00002292 30C1                       		move.w	d1,(a0)+
00002294 4E75                       		rts	
00002296                            ; ===========================================================================
00002296                            
00002296                            loc_1F64:				; XREF: Pal_DecColor2
00002296 3203                       		move.w	d3,d1
00002298 0441 0020                  		subi.w	#$20,d1		; decrease green value
0000229C 6500                       		bcs.s	loc_1F74
0000229E B242                       		cmp.w	d2,d1
000022A0 6500                       		bcs.s	loc_1F74
000022A2 30C1                       		move.w	d1,(a0)+
000022A4 4E75                       		rts	
000022A6                            ; ===========================================================================
000022A6                            
000022A6                            loc_1F74:				; XREF: loc_1F64
000022A6 5558                       		subq.w	#2,(a0)+	; decrease red value
000022A8 4E75                       		rts	
000022AA                            ; ===========================================================================
000022AA                            
000022AA                            loc_1F78:				; XREF: Pal_DecColor2
000022AA 5448                       		addq.w	#2,a0
000022AC 4E75                       		rts	
000022AE                            ; End of function Pal_DecColor2
000022AE                            
000022AE                            ; ---------------------------------------------------------------------------
000022AE                            ; Subroutine to	make a white flash when	you enter a special stage
000022AE                            ; ---------------------------------------------------------------------------
000022AE                            
000022AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022AE                            
000022AE                            
000022AE                            Pal_MakeFlash:				; XREF: SpecialStage
000022AE 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000022B4 383C 0015                  		move.w	#$15,d4
000022B8                            
000022B8                            loc_1F86:
000022B8 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000022BE 6100 0000                  		bsr.w	DelayProgram
000022C2 6100                       		bsr.s	Pal_ToWhite
000022C4 6100 F490                  		bsr.w	RunPLC_RAM
000022C8 51CC FFEE                  		dbf	d4,loc_1F86
000022CC 4E75                       		rts	
000022CE                            ; End of function Pal_MakeFlash
000022CE                            
000022CE                            
000022CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022CE                            
000022CE                            
000022CE                            Pal_ToWhite:				; XREF: Pal_MakeFlash
000022CE 7000                       		moveq	#0,d0
000022D0 41F8 FB00                  		lea	($FFFFFB00).w,a0
000022D4 1038 F626                  		move.b	($FFFFF626).w,d0
000022D8 D0C0                       		adda.w	d0,a0
000022DA 1038 F627                  		move.b	($FFFFF627).w,d0
000022DE                            
000022DE                            loc_1FAC:
000022DE 6100                       		bsr.s	Pal_AddColor2
000022E0 51C8 FFFC                  		dbf	d0,loc_1FAC
000022E4 7000                       		moveq	#0,d0
000022E6 41F8 FA80                  		lea	($FFFFFA80).w,a0
000022EA 1038 F626                  		move.b	($FFFFF626).w,d0
000022EE D0C0                       		adda.w	d0,a0
000022F0 1038 F627                  		move.b	($FFFFF627).w,d0
000022F4                            
000022F4                            loc_1FC2:
000022F4 6100                       		bsr.s	Pal_AddColor2
000022F6 51C8 FFFC                  		dbf	d0,loc_1FC2
000022FA 4E75                       		rts	
000022FC                            ; End of function Pal_ToWhite
000022FC                            
000022FC                            
000022FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022FC                            
000022FC                            
000022FC                            Pal_AddColor2:				; XREF: Pal_ToWhite
000022FC 3410                       		move.w	(a0),d2
000022FE 0C42 0EEE                  		cmpi.w	#$EEE,d2
00002302 6700                       		beq.s	loc_2006
00002304 3202                       		move.w	d2,d1
00002306 0241 000E                  		andi.w	#$E,d1
0000230A 0C41 000E                  		cmpi.w	#$E,d1
0000230E 6700                       		beq.s	loc_1FE2
00002310 5458                       		addq.w	#2,(a0)+	; increase red value
00002312 4E75                       		rts	
00002314                            ; ===========================================================================
00002314                            
00002314                            loc_1FE2:				; XREF: Pal_AddColor2
00002314 3202                       		move.w	d2,d1
00002316 0241 00E0                  		andi.w	#$E0,d1
0000231A 0C41 00E0                  		cmpi.w	#$E0,d1
0000231E 6700                       		beq.s	loc_1FF4
00002320 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00002324 4E75                       		rts	
00002326                            ; ===========================================================================
00002326                            
00002326                            loc_1FF4:				; XREF: loc_1FE2
00002326 3202                       		move.w	d2,d1
00002328 0241 0E00                  		andi.w	#$E00,d1
0000232C 0C41 0E00                  		cmpi.w	#$E00,d1
00002330 6700                       		beq.s	loc_2006
00002332 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002336 4E75                       		rts	
00002338                            ; ===========================================================================
00002338                            
00002338                            loc_2006:				; XREF: Pal_AddColor2
00002338 5448                       		addq.w	#2,a0
0000233A 4E75                       		rts	
0000233C                            ; End of function Pal_AddColor2
0000233C                            
0000233C                            ; ---------------------------------------------------------------------------
0000233C                            ; Pallet cycling routine - Sega	logo
0000233C                            ; ---------------------------------------------------------------------------
0000233C                            
0000233C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000233C                            
0000233C                            
0000233C                            PalCycle_Sega:				; XREF: SegaScreen
0000233C 4A38 F635                  		tst.b	($FFFFF635).w
00002340 6600                       		bne.s	loc_206A
00002342 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002346 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000234C 7205                       		moveq	#5,d1
0000234E 3038 F632                  		move.w	($FFFFF632).w,d0
00002352                            
00002352                            loc_2020:
00002352 6A00                       		bpl.s	loc_202A
00002354 5448                       		addq.w	#2,a0
00002356 5341                       		subq.w	#1,d1
00002358 5440                       		addq.w	#2,d0
0000235A 60F6                       		bra.s	loc_2020
0000235C                            ; ===========================================================================
0000235C                            
0000235C                            loc_202A:				; XREF: PalCycle_Sega
0000235C 3400                       		move.w	d0,d2
0000235E 0242 001E                  		andi.w	#$1E,d2
00002362 6600                       		bne.s	loc_2034
00002364 5440                       		addq.w	#2,d0
00002366                            
00002366                            loc_2034:
00002366 0C40 0060                  		cmpi.w	#$60,d0
0000236A 6400                       		bcc.s	loc_203E
0000236C 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002370                            
00002370                            loc_203E:
00002370 5440                       		addq.w	#2,d0
00002372 51C9 FFE8                  		dbf	d1,loc_202A
00002376 3038 F632                  		move.w	($FFFFF632).w,d0
0000237A 5440                       		addq.w	#2,d0
0000237C 3400                       		move.w	d0,d2
0000237E 0242 001E                  		andi.w	#$1E,d2
00002382 6600                       		bne.s	loc_2054
00002384 5440                       		addq.w	#2,d0
00002386                            
00002386                            loc_2054:
00002386 0C40 0064                  		cmpi.w	#$64,d0
0000238A 6D00                       		blt.s	loc_2062
0000238C 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002392 70F4                       		moveq	#-$C,d0
00002394                            
00002394                            loc_2062:
00002394 31C0 F632                  		move.w	d0,($FFFFF632).w
00002398 7001                       		moveq	#1,d0
0000239A 4E75                       		rts	
0000239C                            ; ===========================================================================
0000239C                            
0000239C                            loc_206A:				; XREF: loc_202A
0000239C 5338 F634                  		subq.b	#1,($FFFFF634).w
000023A0 6A00                       		bpl.s	loc_20BC
000023A2 11FC 0004 F634             		move.b	#4,($FFFFF634).w
000023A8 3038 F632                  		move.w	($FFFFF632).w,d0
000023AC 0640 000C                  		addi.w	#$C,d0
000023B0 0C40 0030                  		cmpi.w	#$30,d0
000023B4 6500                       		bcs.s	loc_2088
000023B6 7000                       		moveq	#0,d0
000023B8 4E75                       		rts	
000023BA                            ; ===========================================================================
000023BA                            
000023BA                            loc_2088:				; XREF: loc_206A
000023BA 31C0 F632                  		move.w	d0,($FFFFF632).w
000023BE 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
000023C4 41F0 0000                  		lea	(a0,d0.w),a0
000023C8 43F8 FB04                  		lea	($FFFFFB04).w,a1
000023CC 22D8                       		move.l	(a0)+,(a1)+
000023CE 22D8                       		move.l	(a0)+,(a1)+
000023D0 3298                       		move.w	(a0)+,(a1)
000023D2 43F8 FB20                  		lea	($FFFFFB20).w,a1
000023D6 7000                       		moveq	#0,d0
000023D8 722C                       		moveq	#$2C,d1
000023DA                            
000023DA                            loc_20A8:
000023DA 3400                       		move.w	d0,d2
000023DC 0242 001E                  		andi.w	#$1E,d2
000023E0 6600                       		bne.s	loc_20B2
000023E2 5440                       		addq.w	#2,d0
000023E4                            
000023E4                            loc_20B2:
000023E4 3390 0000                  		move.w	(a0),(a1,d0.w)
000023E8 5440                       		addq.w	#2,d0
000023EA 51C9 FFEE                  		dbf	d1,loc_20A8
000023EE                            
000023EE                            loc_20BC:
000023EE 7001                       		moveq	#1,d0
000023F0 4E75                       		rts	
000023F2                            ; End of function PalCycle_Sega
000023F2                            
000023F2                            ; ===========================================================================
000023F2                            
000023F2                            Pal_Sega1:	incbin	pallet\sega1.bin
000023FE                            Pal_Sega2:	incbin	pallet\sega2.bin
0000242E                            
0000242E                            ; ---------------------------------------------------------------------------
0000242E                            ; Subroutines to load pallets
0000242E                            ; ---------------------------------------------------------------------------
0000242E                            
0000242E                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000242E                            
0000242E                            PalLoad1:
0000242E 1238 FE11                  		move.b ($FFFFFE11),d1
00002432 43F9 0000 0000             		lea (PalPointers).l,a1
00002438 0C01 0000                  		cmp.b #0,d1
0000243C 6700 0000                  		beq.w PalLoad1_Continue
00002440 43F9 0000 0000             		lea (PalPointers2).l,a1
00002446 0C01 0001                  		cmp.b #1,d1
0000244A 6700 0000                  		beq.w PalLoad1_Continue
0000244E 43F9 0000 0000             		lea (PalPointers3).l,a1
00002454                            
00002454                            PalLoad1_Continue:
00002454 E748                       		lsl.w #3,d0
00002456 D2C0                       		adda.w d0,a1
00002458 2459                       		movea.l (a1)+,a2
0000245A 3659                       		movea.w (a1)+,a3
0000245C D6FC 0080                  		adda.w #$80,a3
00002460 3E19                       		move.w (a1)+,d7
00002462                            
00002462                            loc_2110:
00002462 26DA                       		move.l (a2)+,(a3)+
00002464 51CF FFFC                  		dbf d7,loc_2110
00002468 4E75                       		rts
0000246A                             ; End of function PalLoad1
0000246A                            
0000246A                            
0000246A                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000246A                            
0000246A                            PalLoad2:
0000246A 1238 FE11                  		move.b ($FFFFFE11),d1
0000246E 43F9 0000 0000             		lea (PalPointers).l,a1
00002474 0C01 0000                  		cmp.b #0,d1
00002478 6700 0000                  		beq.w PalLoad2_Continue
0000247C 43F9 0000 0000             		lea (PalPointers2).l,a1
00002482 0C01 0001                  		cmp.b #1,d1
00002486 6700 0000                  		beq.w PalLoad2_Continue
0000248A 43F9 0000 0000             		lea (PalPointers3).l,a1
00002490                            
00002490                            
00002490                            PalLoad2_Continue:
00002490 E748                       		lsl.w #3,d0
00002492 D2C0                       		adda.w d0,a1
00002494 2459                       		movea.l (a1)+,a2
00002496 3659                       		movea.w (a1)+,a3
00002498 3E19                       		move.w (a1)+,d7
0000249A                            
0000249A                            loc_2128:
0000249A 26DA                       		move.l (a2)+,(a3)+
0000249C 51CF FFFC                  		dbf d7,loc_2128
000024A0 4E75                       		rts
000024A2                            ; End of function PalLoad2
000024A2                            
000024A2                            
000024A2                            ; ---------------------------------------------------------------------------
000024A2                            ; Underwater pallet loading subroutine
000024A2                            ; ---------------------------------------------------------------------------
000024A2                            
000024A2                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000024A2                            
000024A2                            PalLoad3_Water:
000024A2 1238 FE11                  		move.b ($FFFFFE11),d1
000024A6 43F9 0000 0000             		lea (PalPointers).l,a1
000024AC 0C01 0000                  		cmp.b #0,d1
000024B0 6700 0000                  		beq.w PalLoad3_Continue
000024B4 43F9 0000 0000             		lea (PalPointers2).l,a1
000024BA 0C01 0001                  		cmp.b #1,d1
000024BE 6700 0000                  		beq.w PalLoad3_Continue
000024C2 43F9 0000 0000             		lea (PalPointers3).l,a1
000024C8                            
000024C8                            PalLoad3_Continue:
000024C8 E748                       		lsl.w #3,d0
000024CA D2C0                       		adda.w d0,a1
000024CC 2459                       		movea.l (a1)+,a2
000024CE 3659                       		movea.w (a1)+,a3
000024D0 96FC 0080                  		suba.w #$80,a3
000024D4 3E19                       		move.w (a1)+,d7
000024D6                            
000024D6                            loc_2144:
000024D6 26DA                       		move.l (a2)+,(a3)+
000024D8 51CF FFFC                  		dbf d7,loc_2144
000024DC 4E75                       		rts
000024DE                            ; End of function PalLoad3_Water
000024DE                            
000024DE                            
000024DE                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000024DE                            
000024DE                            
000024DE                            PalLoad4_Water:
000024DE 1238 FE11                  		move.b ($FFFFFE11),d1
000024E2 43F9 0000 0000             		lea (PalPointers).l,a1
000024E8 0C01 0000                  		cmp.b #0,d1
000024EC 6700 0000                  		beq.w PalLoad4_Continue
000024F0 43F9 0000 0000             		lea (PalPointers2).l,a1
000024F6 0C01 0001                  		cmp.b #1,d1
000024FA 6700 0000                  		beq.w PalLoad4_Continue
000024FE 43F9 0000 0000             		lea (PalPointers3).l,a1
00002504                            
00002504                            PalLoad4_Continue:
00002504 E748                       		lsl.w #3,d0
00002506 D2C0                       		adda.w d0,a1
00002508 2459                       		movea.l (a1)+,a2
0000250A 3659                       		movea.w (a1)+,a3
0000250C 96FC 0100                  		suba.w #$100,a3
00002510 3E19                       		move.w (a1)+,d7
00002512                            loc_2160:
00002512 26DA                       		move.l (a2)+,(a3)+
00002514 51CF FFFC                  		dbf d7,loc_2160
00002518 4E75                       		rts
0000251A                             ; End of function PalLoad4_Water
0000251A                            
0000251A                            ; ===========================================================================
0000251A                            ; ---------------------------------------------------------------------------
0000251A                            ; Pallet pointers
0000251A                            ; ---------------------------------------------------------------------------
0000251A                            PalPointers:
0000251A                            	include "_inc\Pallet pointers.asm"
0000251A                            ; ---------------------------------------------------------------------------
0000251A                            ; Pallet pointers
0000251A                            ; ---------------------------------------------------------------------------
0000251A 0000 0000                  	dc.l Pal_SegaBG		; pallet address
0000251E FB00                       	dc.w $FB00		; RAM address
00002520 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002522 0000 0000                  	dc.l Pal_Title
00002526 FB00                       	dc.w $FB00
00002528 001F                       	dc.w $1F
0000252A 0000 0000                  	dc.l Pal_LevelSel
0000252E FB00                       	dc.w $FB00
00002530 001F                       	dc.w $1F
00002532 0000 0000                  	dc.l Pal_Sonic
00002536 FB00                       	dc.w $FB00
00002538 0007                       	dc.w 7
0000253A 0000 0000                  	dc.l Pal_GHZ
0000253E FB20                       	dc.w $FB20
00002540 0017                       	dc.w $17
00002542 0000 0000                  	dc.l Pal_LZ
00002546 FB20                       	dc.w $FB20
00002548 0017                       	dc.w $17
0000254A 0000 0000                  	dc.l Pal_MZ
0000254E FB20                       	dc.w $FB20
00002550 0017                       	dc.w $17
00002552 0000 0000                  	dc.l Pal_SLZ
00002556 FB20                       	dc.w $FB20
00002558 0017                       	dc.w $17
0000255A 0000 0000                  	dc.l Pal_SYZ
0000255E FB20                       	dc.w $FB20
00002560 0017                       	dc.w $17
00002562 0000 0000                  	dc.l Pal_SBZ1
00002566 FB20                       	dc.w $FB20
00002568 0017                       	dc.w $17
0000256A 0000 0000                  	dc.l Pal_Special
0000256E FB00                       	dc.w $FB00
00002570 001F                       	dc.w $1F
00002572 0000 0000                  	dc.l Pal_LZWater
00002576 FB00                       	dc.w $FB00
00002578 001F                       	dc.w $1F
0000257A 0000 0000                  	dc.l Pal_SBZ3
0000257E FB20                       	dc.w $FB20
00002580 0017                       	dc.w $17
00002582 0000 0000                  	dc.l Pal_SBZ3Water
00002586 FB00                       	dc.w $FB00
00002588 001F                       	dc.w $1F
0000258A 0000 0000                  	dc.l Pal_SBZ2
0000258E FB20                       	dc.w $FB20
00002590 0017                       	dc.w $17
00002592 0000 0000                  	dc.l Pal_LZSonWater
00002596 FB00                       	dc.w $FB00
00002598 0007                       	dc.w 7
0000259A 0000 0000                  	dc.l Pal_SBZ3SonWat
0000259E FB00                       	dc.w $FB00
000025A0 0007                       	dc.w 7
000025A2 0000 0000                  	dc.l Pal_SpeResult
000025A6 FB00                       	dc.w $FB00
000025A8 001F                       	dc.w $1F
000025AA 0000 0000                  	dc.l Pal_SpeContinue
000025AE FB00                       	dc.w $FB00
000025B0 000F                       	dc.w $F
000025B2 0000 0000                  	dc.l Pal_Ending
000025B6 FB00                       	dc.w $FB00
000025B8 001F                       	dc.w $1F
000025BA 0000 0000                  	dc.l Menu_Palette; pallet address
000025BE FB00                       	dc.w $FB00	; RAM address
000025C0 001F                       	dc.w $1F	; (pallet length / 2) - 1	
000025C0 001F                       	dc.w $1F	; (pallet length / 2) - 1	
000025C2                            PalPointers2:
000025C2                            		include "_inc\Pallet pointers2.asm"
000025C2                            	
000025C2                            ; ---------------------------------------------------------------------------
000025C2                            ; Pallet pointers 2
000025C2                            ; ---------------------------------------------------------------------------
000025C2 0000 0000                  	dc.l Pal_SegaBG		; pallet address
000025C6 FB00                       	dc.w $FB00		; RAM address
000025C8 001F                       	dc.w $1F		; (pallet length / 2) - 1
000025CA 0000 0000                  	dc.l Pal_Title
000025CE FB00                       	dc.w $FB00
000025D0 001F                       	dc.w $1F
000025D2 0000 0000                  	dc.l Pal_LevelSel
000025D6 FB00                       	dc.w $FB00
000025D8 001F                       	dc.w $1F
000025DA 0000 0000                  	dc.l Pal_Sonic
000025DE FB00                       	dc.w $FB00
000025E0 0007                       	dc.w 7
000025E2 0000 0000                  	dc.l Pal_GHZ2
000025E6 FB20                       	dc.w $FB20
000025E8 0017                       	dc.w $17
000025EA 0000 0000                  	dc.l Pal_LZ2
000025EE FB20                       	dc.w $FB20
000025F0 0017                       	dc.w $17
000025F2 0000 0000                  	dc.l Pal_MZ2
000025F6 FB20                       	dc.w $FB20
000025F8 0017                       	dc.w $17
000025FA 0000 0000                  	dc.l Pal_SLZ2
000025FE FB20                       	dc.w $FB20
00002600 0017                       	dc.w $17
00002602 0000 0000                  	dc.l Pal_SYZ2
00002606 FB20                       	dc.w $FB20
00002608 0017                       	dc.w $17
0000260A 0000 0000                  	dc.l Pal_SBZ1
0000260E FB20                       	dc.w $FB20
00002610 0017                       	dc.w $17
00002612 0000 0000                  	dc.l Pal_Special
00002616 FB00                       	dc.w $FB00
00002618 001F                       	dc.w $1F
0000261A 0000 0000                  	dc.l Pal_LZWater2
0000261E FB00                       	dc.w $FB00
00002620 001F                       	dc.w $1F
00002622 0000 0000                  	dc.l Pal_SBZ3
00002626 FB20                       	dc.w $FB20
00002628 0017                       	dc.w $17
0000262A 0000 0000                  	dc.l Pal_SBZ3Water
0000262E FB00                       	dc.w $FB00
00002630 001F                       	dc.w $1F
00002632 0000 0000                  	dc.l Pal_SBZ2
00002636 FB20                       	dc.w $FB20
00002638 0017                       	dc.w $17
0000263A 0000 0000                  	dc.l Pal_LZSonWater2
0000263E FB00                       	dc.w $FB00
00002640 0007                       	dc.w 7
00002642 0000 0000                  	dc.l Pal_SBZ3SonWat
00002646 FB00                       	dc.w $FB00
00002648 0007                       	dc.w 7
0000264A 0000 0000                  	dc.l Pal_SpeResult
0000264E FB00                       	dc.w $FB00
00002650 001F                       	dc.w $1F
00002652 0000 0000                  	dc.l Pal_SpeContinue
00002656 FB00                       	dc.w $FB00
00002658 000F                       	dc.w $F
0000265A 0000 0000                  	dc.l Pal_Ending
0000265E FB00                       	dc.w $FB00
00002660 001F                       	dc.w $1F
00002660 001F                       	dc.w $1F
00002662                            PalPointers3:
00002662                            		include "_inc\Pallet pointers3.asm"
00002662                            	
00002662                            ; ---------------------------------------------------------------------------
00002662                            ; Pallet pointers 3
00002662                            ; ---------------------------------------------------------------------------
00002662 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002666 FB00                       	dc.w $FB00		; RAM address
00002668 001F                       	dc.w $1F		; (pallet length / 2) - 1
0000266A 0000 0000                  	dc.l Pal_Title
0000266E FB00                       	dc.w $FB00
00002670 001F                       	dc.w $1F
00002672 0000 0000                  	dc.l Pal_LevelSel
00002676 FB00                       	dc.w $FB00
00002678 001F                       	dc.w $1F
0000267A 0000 0000                  	dc.l Pal_Sonic
0000267E FB00                       	dc.w $FB00
00002680 0007                       	dc.w 7
00002682 0000 0000                  	dc.l Pal_GHZ3
00002686 FB20                       	dc.w $FB20
00002688 0017                       	dc.w $17
0000268A 0000 0000                  	dc.l Pal_LZ3
0000268E FB20                       	dc.w $FB20
00002690 0017                       	dc.w $17
00002692 0000 0000                  	dc.l Pal_MZ3
00002696 FB20                       	dc.w $FB20
00002698 0017                       	dc.w $17
0000269A 0000 0000                  	dc.l Pal_SLZ3
0000269E FB20                       	dc.w $FB20
000026A0 0017                       	dc.w $17
000026A2 0000 0000                  	dc.l Pal_SYZ3
000026A6 FB20                       	dc.w $FB20
000026A8 0017                       	dc.w $17
000026AA 0000 0000                  	dc.l Pal_SBZ1
000026AE FB20                       	dc.w $FB20
000026B0 0017                       	dc.w $17
000026B2 0000 0000                  	dc.l Pal_Special
000026B6 FB00                       	dc.w $FB00
000026B8 001F                       	dc.w $1F
000026BA 0000 0000                  	dc.l Pal_LZWater3
000026BE FB00                       	dc.w $FB00
000026C0 001F                       	dc.w $1F
000026C2 0000 0000                  	dc.l Pal_SBZ3
000026C6 FB20                       	dc.w $FB20
000026C8 0017                       	dc.w $17
000026CA 0000 0000                  	dc.l Pal_SBZ3Water
000026CE FB00                       	dc.w $FB00
000026D0 001F                       	dc.w $1F
000026D2 0000 0000                  	dc.l Pal_SBZ2
000026D6 FB20                       	dc.w $FB20
000026D8 0017                       	dc.w $17
000026DA 0000 0000                  	dc.l Pal_LZSonWater3
000026DE FB00                       	dc.w $FB00
000026E0 0007                       	dc.w 7
000026E2 0000 0000                  	dc.l Pal_SBZ3SonWat
000026E6 FB00                       	dc.w $FB00
000026E8 0007                       	dc.w 7
000026EA 0000 0000                  	dc.l Pal_SpeResult
000026EE FB00                       	dc.w $FB00
000026F0 001F                       	dc.w $1F
000026F2 0000 0000                  	dc.l Pal_SpeContinue
000026F6 FB00                       	dc.w $FB00
000026F8 000F                       	dc.w $F
000026FA 0000 0000                  	dc.l Pal_Ending
000026FE FB00                       	dc.w $FB00
00002700 001F                       	dc.w $1F
00002700 001F                       	dc.w $1F
00002702                            ; ---------------------------------------------------------------------------
00002702                            ; Pallet data
00002702                            ; ---------------------------------------------------------------------------
00002702                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
00002782                            Pal_Title:	incbin	pallet\title.bin
00002802                            Pal_LevelSel:	incbin	pallet\levelsel.bin
00002882                            Pal_Sonic:	incbin	pallet\sonic.bin
000028A2                            Pal_GHZ:	incbin	pallet\ghz.bin
00002902                            Pal_GHZ2: incbin pallet\ghz2.bin
00002962                            Pal_GHZ3: incbin pallet\ghz3.bin
000029C2                            Pal_LZ:		incbin	pallet\lz.bin
00002A22                            Pal_LZ2: incbin pallet\lz2.bin
00002A82                            Pal_LZ3: incbin pallet\lz3.bin
00002AE2                            Pal_LZWater: incbin pallet\lz_uw.bin; LZ underwater pallets
00002B62                            Pal_LZWater2: incbin pallet\lz_uw2.bin; LZ underwater pallets
00002BE2                            Pal_LZWater3: incbin pallet\lz_uw3.bin; LZ underwater pallets
00002C62                            Pal_MZ:		incbin	pallet\mz.bin
00002CC2                            Pal_MZ2: incbin pallet\mz2.bin
00002D22                            Pal_MZ3: incbin pallet\mz3.bin
00002D82                            Pal_SLZ:	incbin	pallet\slz.bin
00002DE2                            Pal_SLZ2: incbin pallet\slz2.bin
00002E42                            Pal_SLZ3: incbin pallet\slz3.bin
00002EA2                            Pal_SYZ:	incbin	pallet\syz.bin
00002F02                            Pal_SYZ2: incbin pallet\syz2.bin
00002F62                            Pal_SYZ3: incbin pallet\syz3.bin
00002FC2                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00003022                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
00003082                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00003102                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
00003162                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
000031E2                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00003202                            Pal_LZSonWater2:	incbin	pallet\son_lzuw2.bin	; Sonic (underwater in LZ) pallet
00003222                            Pal_LZSonWater3:	incbin	pallet\son_lzuw3.bin	; Sonic (underwater in LZ) pallet
00003242                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00003262                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
000032E2                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00003322                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
000033A2                            
000033A2                            ; ---------------------------------------------------------------------------
000033A2                            ; Subroutine to	delay the program by ($FFFFF62A) frames
000033A2                            ; ---------------------------------------------------------------------------
000033A2                            
000033A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000033A2                            
000033A2                            
000033A2                            DelayProgram:				; XREF: PauseGame
000033A2 46FC 2300                  		move	#$2300,sr
000033A6                            
000033A6                            loc_29AC:
000033A6 4A38 F62A                  		tst.b	($FFFFF62A).w
000033AA 66FA                       		bne.s	loc_29AC
000033AC 4E75                       		rts	
000033AE                            ; End of function DelayProgram
000033AE                            
000033AE                            ; ---------------------------------------------------------------------------
000033AE                            ; Subroutine to	generate a pseudo-random number	in d0
000033AE                            ; ---------------------------------------------------------------------------
000033AE                            
000033AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000033AE                            
000033AE                            
000033AE                            RandomNumber:
000033AE 2238 F636                  		move.l	($FFFFF636).w,d1
000033B2 6600                       		bne.s	loc_29C0
000033B4 223C 2A6D 365A             		move.l	#$2A6D365A,d1
000033BA                            
000033BA                            loc_29C0:
000033BA 2001                       		move.l	d1,d0
000033BC E581                       		asl.l	#2,d1
000033BE D280                       		add.l	d0,d1
000033C0 E781                       		asl.l	#3,d1
000033C2 D280                       		add.l	d0,d1
000033C4 3001                       		move.w	d1,d0
000033C6 4841                       		swap	d1
000033C8 D041                       		add.w	d1,d0
000033CA 3200                       		move.w	d0,d1
000033CC 4841                       		swap	d1
000033CE 21C1 F636                  		move.l	d1,($FFFFF636).w
000033D2 4E75                       		rts	
000033D4                            ; End of function RandomNumber
000033D4                            
000033D4                            
000033D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000033D4                            
000033D4                            
000033D4                            CalcSine:				; XREF: SS_BGAnimate; et al
000033D4 0240 00FF                  		andi.w	#$FF,d0
000033D8 D040                       		add.w	d0,d0
000033DA 0640 0080                  		addi.w	#$80,d0
000033DE 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
000033E2 0440 0080                  		subi.w	#$80,d0
000033E6 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
000033EA 4E75                       		rts	
000033EC                            ; End of function CalcSine
000033EC                            
000033EC                            ; ===========================================================================
000033EC                            
000033EC                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360� sine wave
0000366C                            
0000366C                            ; ===========================================================================
0000366C 48E7 6000                  		movem.l	d1-d2,-(sp)
00003670 3200                       		move.w	d0,d1
00003672 4841                       		swap	d1
00003674 7000                       		moveq	#0,d0
00003676 3200                       		move.w	d0,d1
00003678 7407                       		moveq	#7,d2
0000367A                            
0000367A                            loc_2C80:
0000367A E599                       		rol.l	#2,d1
0000367C D040                       		add.w	d0,d0
0000367E 5240                       		addq.w	#1,d0
00003680 9240                       		sub.w	d0,d1
00003682 6400                       		bcc.s	loc_2C9A
00003684 D240                       		add.w	d0,d1
00003686 5340                       		subq.w	#1,d0
00003688 51CA FFF0                  		dbf	d2,loc_2C80
0000368C E248                       		lsr.w	#1,d0
0000368E 4CDF 0006                  		movem.l	(sp)+,d1-d2
00003692 4E75                       		rts	
00003694                            ; ===========================================================================
00003694                            
00003694                            loc_2C9A:
00003694 5240                       		addq.w	#1,d0
00003696 51CA FFE2                  		dbf	d2,loc_2C80
0000369A E248                       		lsr.w	#1,d0
0000369C 4CDF 0006                  		movem.l	(sp)+,d1-d2
000036A0 4E75                       		rts	
000036A2                            
000036A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000036A2                            
000036A2                            
000036A2                            CalcAngle:
000036A2 48E7 1800                  		movem.l	d3-d4,-(sp)
000036A6 7600                       		moveq	#0,d3
000036A8 7800                       		moveq	#0,d4
000036AA 3601                       		move.w	d1,d3
000036AC 3802                       		move.w	d2,d4
000036AE 8843                       		or.w	d3,d4
000036B0 6700                       		beq.s	loc_2D04
000036B2 3802                       		move.w	d2,d4
000036B4 4A43                       		tst.w	d3
000036B6 6A00 0000                  		bpl.w	loc_2CC2
000036BA 4443                       		neg.w	d3
000036BC                            
000036BC                            loc_2CC2:
000036BC 4A44                       		tst.w	d4
000036BE 6A00 0000                  		bpl.w	loc_2CCA
000036C2 4444                       		neg.w	d4
000036C4                            
000036C4                            loc_2CCA:
000036C4 B843                       		cmp.w	d3,d4
000036C6 6400 0000                  		bcc.w	loc_2CDC
000036CA E18C                       		lsl.l	#8,d4
000036CC 88C3                       		divu.w	d3,d4
000036CE 7000                       		moveq	#0,d0
000036D0 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
000036D4 6000                       		bra.s	loc_2CE6
000036D6                            ; ===========================================================================
000036D6                            
000036D6                            loc_2CDC:				; XREF: CalcAngle
000036D6 E18B                       		lsl.l	#8,d3
000036D8 86C4                       		divu.w	d4,d3
000036DA 7040                       		moveq	#$40,d0
000036DC 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
000036E0                            
000036E0                            loc_2CE6:
000036E0 4A41                       		tst.w	d1
000036E2 6A00 0000                  		bpl.w	loc_2CF2
000036E6 4440                       		neg.w	d0
000036E8 0640 0080                  		addi.w	#$80,d0
000036EC                            
000036EC                            loc_2CF2:
000036EC 4A42                       		tst.w	d2
000036EE 6A00 0000                  		bpl.w	loc_2CFE
000036F2 4440                       		neg.w	d0
000036F4 0640 0100                  		addi.w	#$100,d0
000036F8                            
000036F8                            loc_2CFE:
000036F8 4CDF 0018                  		movem.l	(sp)+,d3-d4
000036FC 4E75                       		rts	
000036FE                            ; ===========================================================================
000036FE                            
000036FE                            loc_2D04:				; XREF: CalcAngle
000036FE 303C 0040                  		move.w	#$40,d0
00003702 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003706 4E75                       		rts	
00003708                            ; End of function CalcAngle
00003708                            
00003708                            ; ===========================================================================
00003708                            
00003708                            Angle_Data:	incbin	misc\angles.bin
0000380A                            
0000380A                            ; ===========================================================================
0000380A                            
0000380A                            ; ---------------------------------------------------------------------------
0000380A                            ; Sega screen
0000380A                            ; ---------------------------------------------------------------------------
0000380A                            
0000380A                            SegaScreen:				; XREF: GameModeArray
0000380A 103C 00E4                  		move.b	#$E4,d0
0000380E 6100 DC66                  		bsr.w	PlaySound_Special ; stop music
00003812 6100 DF34                  		bsr.w	ClearPLC
00003816 6100 EA96                  		bsr.w	Pal_MakeFlash
0000381A 4DF9 00C0 0004             		lea	($C00004).l,a6
00003820 3CBC 8004                  		move.w	#$8004,(a6)
00003824 3CBC 8230                  		move.w	#$8230,(a6)
00003828 3CBC 8407                  		move.w	#$8407,(a6)
0000382C 3CBC 8700                  		move.w	#$8700,(a6)
00003830 3CBC 8B00                  		move.w	#$8B00,(a6)
00003834 4238 F64E                  		clr.b	($FFFFF64E).w
00003838 46FC 2700                  		move	#$2700,sr
0000383C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003840 0200 00BF                  		andi.b	#$BF,d0
00003844 33C0 00C0 0004             		move.w	d0,($C00004).l
0000384A 6100 DB34                  		bsr.w	ClearScreen
0000384E 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003858 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
0000385E 6100 DD4A                  		bsr.w	NemDec
00003862 43F9 00FF 0000             		lea	($FF0000).l,a1
00003868 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
0000386E 303C 0000                  		move.w	#0,d0
00003872 6100 E014                  		bsr.w	EniDec
00003876 43F9 00FF 0000             		lea	($FF0000).l,a1
0000387C 203C 6510 0003             		move.l	#$65100003,d0
00003882 7217                       		moveq	#$17,d1
00003884 7407                       		moveq	#7,d2
00003886 6100 DC72                  		bsr.w	ShowVDPGraphics
0000388A 43F9 00FF 0180             		lea	($FF0180).l,a1
00003890 203C 4000 0003             		move.l	#$40000003,d0
00003896 7227                       		moveq	#$27,d1
00003898 741B                       		moveq	#$1B,d2
0000389A 6100 DC5E                  		bsr.w	ShowVDPGraphics
0000389E 7000                       		moveq	#0,d0
000038A0 6100 EBC8                  		bsr.w	PalLoad2	; load Sega logo pallet
000038A4 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
000038AA 31FC 0000 F634             		move.w	#0,($FFFFF634).w
000038B0 31FC 0000 F662             		move.w	#0,($FFFFF662).w
000038B6 31FC 0000 F660             		move.w	#0,($FFFFF660).w
000038BC 3038 F60C                  		move.w	($FFFFF60C).w,d0
000038C0 0000 0040                  		ori.b	#$40,d0
000038C4 33C0 00C0 0004             		move.w	d0,($C00004).l
000038CA                            
000038CA                            Sega_WaitPallet:
000038CA 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000038D0 6100 FAD0                  		bsr.w	DelayProgram
000038D4 6100 EA66                  		bsr.w	PalCycle_Sega
000038D8 66F0                       		bne.s	Sega_WaitPallet
000038DA                            
000038DA 103C 00E1                  		move.b	#$E1,d0
000038DE 6100 DB96                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
000038E2 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
000038E8 6100 FAB8                  		bsr.w	DelayProgram
000038EC 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000038F2                            
000038F2                            Sega_WaitEnd:
000038F2 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000038F8 6100 FAA8                  		bsr.w	DelayProgram
000038FC 4A78 F614                  		tst.w	($FFFFF614).w
00003900 6700                       		beq.s	Sega_GotoTitle
00003902 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003908 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
0000390A                            
0000390A                            Sega_GotoTitle:
0000390A 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00003910 4E75                       		rts	
00003912                            ; ===========================================================================
00003912                            
00003912                            ; ---------------------------------------------------------------------------
00003912                            ; Title	screen
00003912                            ; ---------------------------------------------------------------------------
00003912                            
00003912                            TitleScreen:				; XREF: GameModeArray
00003912 103C 00E4                  		move.b	#$E4,d0
00003916 6100 DB5E                  		bsr.w	PlaySound_Special ; stop music
0000391A 6100 DE2C                  		bsr.w	ClearPLC
0000391E 6100 E860                  		bsr.w	Pal_FadeFrom
00003922 46FC 2700                  		move	#$2700,sr
00003926 6100 DAE6                  		bsr.w	SoundDriverLoad
0000392A 4DF9 00C0 0004             		lea	($C00004).l,a6
00003930 3CBC 8004                  		move.w	#$8004,(a6)
00003934 3CBC 8230                  		move.w	#$8230,(a6)
00003938 3CBC 8407                  		move.w	#$8407,(a6)
0000393C 3CBC 9001                  		move.w	#$9001,(a6)
00003940 3CBC 9200                  		move.w	#$9200,(a6)
00003944 3CBC 8B03                  		move.w	#$8B03,(a6)
00003948 3CBC 8720                  		move.w	#$8720,(a6)
0000394C 4238 F64E                  		clr.b	($FFFFF64E).w
00003950 6100 DA2E                  		bsr.w	ClearScreen
00003954 43F8 D000                  		lea	($FFFFD000).w,a1
00003958 7000                       		moveq	#0,d0
0000395A 323C 07FF                  		move.w	#$7FF,d1
0000395E                            
0000395E                            Title_ClrObjRam:
0000395E 22C0                       		move.l	d0,(a1)+
00003960 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
00003964                            
00003964 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000396E 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00003974 6100 DC34                  		bsr.w	NemDec
00003978 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00003982 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00003988 6100 DC20                  		bsr.w	NemDec
0000398C 43F9 00FF 0000             		lea	($FF0000).l,a1
00003992 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00003998 303C 0000                  		move.w	#0,d0
0000399C 6100 DEEA                  		bsr.w	EniDec
000039A0 43F9 00FF 0000             		lea	($FF0000).l,a1
000039A6 203C 4000 0003             		move.l	#$40000003,d0
000039AC 7227                       		moveq	#$27,d1
000039AE 741B                       		moveq	#$1B,d2
000039B0 6100 DB48                  		bsr.w	ShowVDPGraphics
000039B4 43F8 FB80                  		lea	($FFFFFB80).w,a1
000039B8 7000                       		moveq	#0,d0
000039BA 323C 001F                  		move.w	#$1F,d1
000039BE                            
000039BE                            Title_ClrPallet:
000039BE 22C0                       		move.l	d0,(a1)+
000039C0 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
000039C4                            
000039C4 7003                       		moveq	#3,d0		; load Sonic's pallet
000039C6 6100 EA66                  		bsr.w	PalLoad1
000039CA 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
000039D0 4EB9 0000 0000             		jsr	ObjectsLoad
000039D6 4EB9 0000 0000             		jsr	BuildSprites
000039DC 6100 E6EC                  		bsr.w	Pal_FadeTo
000039E0 46FC 2700                  		move	#$2700,sr
000039E4 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
000039EE 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
000039F4 6100 DBB4                  		bsr.w	NemDec
000039F8 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00003A02 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00003A08 6100 DBA0                  		bsr.w	NemDec
00003A0C 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00003A16 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
00003A1C 6100 DB8C                  		bsr.w	NemDec
00003A20 4DF9 00C0 0000             		lea	($C00000).l,a6
00003A26 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
00003A2E 4BF9 0000 058C             		lea	(Art_Text).l,a5
00003A34 323C 028F                  		move.w	#$28F,d1
00003A38                            
00003A38                            Title_LoadText:
00003A38 3C9D                       		move.w	(a5)+,(a6)
00003A3A                            
00003A3A 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00003A3E 41F9 0000 0000                             lea	(Kos_Menu_art).l,a0	; load that art
00003A44 2279 00FF 0000             		move.l	($FF0000).l,a1	; don't wanna corrupt level loading in any way!!
00003A4A 4EB8 1A06                  		jsr	KosDec		; decompress that fucker
00003A4E 3609                       		move.w	a1,d3
00003A50 E24B                       		lsr.w	#1,d3
00003A52                            
00003A52 4DF9 00C0 0000             		lea	($C00000).l,a6 ; lea to video ram
00003A58 2D7C 60C0 0000 0004        		move.l	#$60C00000,4(a6)  ; its location on V ram
00003A60 2A7C 00FF 0000             		move.l	#$FF0000,a5 ; dump decompression to Video ram
00003A66 323C 010E                  		move.w	#$1B*10,d1	; Tile limit: $10 bytes/tile
00003A6A                            
00003A6A                            LoadMenuSelectThing:
00003A6A 3C9D                       		move.w	(a5)+,(a6)
00003A6C 51C9 FFFC                  		dbf	d1,LoadMenuSelectThing
00003A70                                           ; move.w	#$1B*10,d3
00003A70                                           ; divu.w  #$10,d3 ; devide this
00003A70                            
00003A70                                          ;  add.w
00003A70 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00003A76 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003A7C 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00003A82 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
00003A88 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
00003A8E 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00003A94 6100 0000                  		bsr.w	LevelSizeLoad
00003A98 6100 0000                  		bsr.w	DeformBgLayer
00003A9C 43F8 B000                  		lea	($FFFFB000).w,a1
00003AA0 41F9 0000 0000             		lea	(Blk16_TS).l,a0 ; load TS 16x16 mappings
00003AA6 303C 0000                  		move.w	#0,d0
00003AAA 6100 DDDC                  		bsr.w	EniDec
00003AAE 41F9 0000 0000             		lea	(Blk256_TS).l,a0 ; load TS 256x256 mappings
00003AB4 43F9 00FF 0000             		lea	($FF0000).l,a1
00003ABA 6100 DF4A                  		bsr.w	KosDec
00003ABE 6100 0000                  		bsr.w	LevelLayoutLoad
00003AC2 6100 E6BC                  		bsr.w	Pal_FadeFrom
00003AC6 46FC 2700                  		move	#$2700,sr
00003ACA 6100 D8B4                  		bsr.w	ClearScreen
00003ACE 4BF9 00C0 0004             		lea	($C00004).l,a5
00003AD4 4DF9 00C0 0000             		lea	($C00000).l,a6
00003ADA 47F8 F708                  		lea	($FFFFF708).w,a3
00003ADE 49F8 A440                  		lea	($FFFFA440).w,a4
00003AE2 343C 6000                  		move.w	#$6000,d2
00003AE6 6100 0000                  		bsr.w	LoadTilesFromStart2
00003AEA 43F9 00FF 0000             		lea	($FF0000).l,a1
00003AF0 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003AF6 303C 0000                  		move.w	#0,d0
00003AFA 6100 DD8C                  		bsr.w	EniDec
00003AFE 43F9 00FF 0000             		lea	($FF0000).l,a1
00003B04 203C 4208 0003             		move.l	#$42080003,d0
00003B0A 7221                       		moveq	#$21,d1
00003B0C 7415                       		moveq	#$15,d2
00003B0E 6100 D9EA                  		bsr.w	ShowVDPGraphics
00003B12 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003B1C 41F9 0000 0000             		lea	(Nem_TS_1st).l,a0 ; load TS patterns
00003B22 6100 DA86                  		bsr.w	NemDec
00003B26 7001                       		moveq	#1,d0		; load title screen pallet
00003B28 6100 E904                  		bsr.w	PalLoad1
00003B2C 103C 008A                  		move.b	#$8A,d0		; play title screen music
00003B30 6100 D944                  		bsr.w	PlaySound_Special
00003B34 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00003B3A 31FC 0578 F614             		move.w	#$578,($FFFFF614).w ; run title	screen for 578 frames
00003B40 43F8 D080                  		lea	($FFFFD080).w,a1
00003B44 7000                       		moveq	#0,d0
00003B46 323C 000F                  		move.w	#$F,d1	; ($40 / 4) - 1
00003B4A                            
00003B4A                            Title_ClrObjRam2:
00003B4A 22C0                       		move.l	d0,(a1)+
00003B4C 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00003B50                            
00003B50 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
00003B56 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00003B5C 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
00003B62 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00003B68 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00003B6E 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003B74 4EB9 0000 0000             		jsr	ObjectsLoad
00003B7A 6100 0000                  		bsr.w	DeformBgLayer
00003B7E 4EB9 0000 0000             		jsr	BuildSprites
00003B84 7000                       		moveq	#0,d0
00003B86 6100 DB94                  		bsr.w	LoadPLC2
00003B8A 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003B90 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
00003B96 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003B9A 0000 0040                  		ori.b	#$40,d0
00003B9E 33C0 00C0 0004             		move.w	d0,($C00004).l
00003BA4 6100 E524                  		bsr.w	Pal_FadeTo
00003BA8                            
00003BA8                            loc_317C:
00003BA8 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003BAE 6100 F7F2                  		bsr.w	DelayProgram
00003BB2 4EB9 0000 0000             		jsr	ObjectsLoad
00003BB8 6100 0000                  		bsr.w	DeformBgLayer
00003BBC 4EB9 0000 0000             		jsr	BuildSprites
00003BC2 6100 DF08                  		bsr.w	PalCycle_Title
00003BC6 6100 DB8E                  		bsr.w	RunPLC_RAM
00003BCA 3038 D008                  		move.w	($FFFFD008).w,d0
00003BCE 5440                       		addq.w	#2,d0
00003BD0 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00003BD4 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
00003BD8 6500                       		bcs.s	Title_ChkRegion	; if not, branch
00003BDA 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003BE0 4E75                       		rts
00003BE2                            ; ===========================================================================
00003BE2                            
00003BE2                            Title_ChkRegion:
00003BE2 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003BE6 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00003BE8 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
00003BEE 6000                       		bra.s	Title_EnterCheat
00003BF0                            ; ===========================================================================
00003BF0                            
00003BF0                            Title_RegionJ:				; XREF: Title_ChkRegion
00003BF0 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003BF6                            
00003BF6                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003BF6 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00003BFA D0C0                       		adda.w	d0,a0
00003BFC 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
00003C00 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003C04 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003C06 6600                       		bne.s	loc_3210	; if not, branch
00003C08 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00003C0C 4A00                       		tst.b	d0
00003C0E 6600                       		bne.s	Title_CountC
00003C10 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00003C14 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
00003C18 E249                       		lsr.w	#1,d1
00003C1A 0241 0003                  		andi.w	#3,d1
00003C1E 6700                       		beq.s	Title_PlayRing
00003C20 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00003C24 6A00                       		bpl.s	Title_PlayRing
00003C26 7201                       		moveq	#1,d1
00003C28 1181 1001                  		move.b	d1,1(a0,d1.w)
00003C2C                            
00003C2C                            Title_PlayRing:
00003C2C 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00003C32 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003C36 6100 D83E                  		bsr.w	PlaySound_Special
00003C3A 6000                       		bra.s	Title_CountC
00003C3C                            ; ===========================================================================
00003C3C                            
00003C3C                            loc_3210:				; XREF: Title_EnterCheat
00003C3C 4A00                       		tst.b	d0
00003C3E 6700                       		beq.s	Title_CountC
00003C40 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
00003C46 6700                       		beq.s	Title_CountC
00003C48 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003C4E                            
00003C4E                            Title_CountC:
00003C4E 1038 F605                  		move.b	($FFFFF605).w,d0
00003C52 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
00003C56 6700                       		beq.s	loc_3230	; if not, branch
00003C58 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003C5C                            
00003C5C                            loc_3230:
00003C5C 4A78 F614                  		tst.w	($FFFFF614).w
00003C60 6700 0000                  		beq.w	Demo
00003C64 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00003C6A 6700 FF3C                  		beq.w	loc_317C	; if not, branch
00003C6E                            
00003C6E                            Title_ChkLevSel:
00003C6E 4A38 FFE0                  		tst.b	($FFFFFFE0).w		; check	if level select	code is	on
00003C72 6700 0000                  		beq.w	PlayLevel		; if not, play level
00003C76 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00003C7C 6700 0000                  		beq.w	PlayLevel		; if not, play level
00003C80 4EF9 0000 0000             		jmp	Level_Select_Menu	; if yes, goto Sonic 2 level select	
00003C86 7002                       		moveq	#2,d0
00003C88 43F8 CC00                  		lea	($FFFFCC00).w,a1
00003C8C 7000                       		moveq	#0,d0
00003C8E 323C 00DF                  		move.w	#$DF,d1
00003C92                            
00003C92                            Title_ClrScroll:
00003C92 22C0                       		move.l	d0,(a1)+
00003C94 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00003C98                            
00003C98 21C0 F616                  		move.l	d0,($FFFFF616).w
00003C9C 46FC 2700                  		move	#$2700,sr
00003CA0 4DF9 00C0 0000             		lea	($C00000).l,a6
00003CA6 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003CB0 323C 03FF                  		move.w	#$3FF,d1
00003CB4                            
00003CB4                            Title_ClrVram:
00003CB4 2C80                       		move.l	d0,(a6)
00003CB6 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
00003CBA                            
00003CBA 6100 0000                  		bsr.w	LevSelTextLoad
00003CBE                            
00003CBE                            ; ---------------------------------------------------------------------------
00003CBE                            ; Level	Select
00003CBE                            ; ---------------------------------------------------------------------------
00003CBE                            
00003CBE                            LevelSelect:
00003CBE 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003CC4 6100 F6DC                  		bsr.w	DelayProgram
00003CC8 6100 0000                  		bsr.w	LevSelControls
00003CCC 6100 DA88                  		bsr.w	RunPLC_RAM
00003CD0 4AB8 F680                  		tst.l	($FFFFF680).w
00003CD4 66E8                       		bne.s	LevelSelect
00003CD6 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00003CDC 67E0                       		beq.s	LevelSelect	; if not, branch
00003CDE 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003CE2 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
00003CE6 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00003CE8 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003CEC 0640 0080                  		addi.w	#$80,d0
00003CF0 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is Japanese Credits cheat on?
00003CF4 6700                       		beq.s	LevSel_NoCheat	; if not, branch
00003CF6 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
00003CFA 6700                       		beq.s	LevSel_Ending	; if yes, branch
00003CFC 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
00003D00 6700                       		beq.s	LevSel_Credits	; if yes, branch
00003D02                            
00003D02                            LevSel_NoCheat:
00003D02 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $80-$94 being played?
00003D06 6500                       		bcs.s	LevSel_PlaySnd	; if yes, branch
00003D08 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
00003D0C 65B0                       		bcs.s	LevelSelect	; if yes, branch
00003D0E                            
00003D0E                            LevSel_PlaySnd:
00003D0E 6100 D766                  		bsr.w	PlaySound_Special
00003D12 60AA                       		bra.s	LevelSelect
00003D14                            ; ===========================================================================
00003D14                            
00003D14                            LevSel_Ending:				; XREF: LevelSelect
00003D14 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00003D1A 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
00003D20 4E75                       		rts	
00003D22                            ; ===========================================================================
00003D22                            
00003D22                            LevSel_Credits:				; XREF: LevelSelect
00003D22 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00003D28 103C 0091                  		move.b	#$91,d0
00003D2C 6100 D748                  		bsr.w	PlaySound_Special ; play credits music
00003D30 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00003D36 4E75                       		rts	
00003D38                            ; ===========================================================================
00003D38                            
00003D38                            LevSel_Level_SS:			; XREF: LevelSelect
00003D38 D040                       		add.w	d0,d0
00003D3A 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00003D3E 6B00 FF7E                  		bmi.w	LevelSelect
00003D42 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
00003D46 6600                       		bne.s	LevSel_Level	; if not, branch
00003D48 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003D4E 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00003D52 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003D58 7000                       		moveq	#0,d0
00003D5A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003D5E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003D62 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003D66 4E75                       		rts	
00003D68                            ; ===========================================================================
00003D68                            
00003D68                            LevSel_Level:				; XREF: LevSel_Level_SS
00003D68 0240 3FFF                  		andi.w	#$3FFF,d0
00003D6C 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00003D70                            
00003D70                            PlayLevel:				; XREF: ROM:00003246j ...
00003D70 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00003D76 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003D7C 7000                       		moveq	#0,d0
00003D7E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003D82 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003D86 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003D8A 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00003D8E 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00003D92 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00003D96 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
00003D9A 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003D9E 103C 00E0                  		move.b	#$E0,d0
00003DA2 6100 D6D2                  		bsr.w	PlaySound_Special ; fade out music
00003DA6 4E75                       		rts	
00003DA8                            ; ===========================================================================
00003DA8                            ; ---------------------------------------------------------------------------
00003DA8                            ; Level	select - level pointers
00003DA8                            ; ---------------------------------------------------------------------------
00003DA8                            LSelectPointers:
00003DA8                            		incbin	misc\ls_point.bin
00003DD2                            		even
00003DD2                            ; ---------------------------------------------------------------------------
00003DD2                            ; Level	select codes
00003DD2                            ; ---------------------------------------------------------------------------
00003DD2                            LevelSelectCode_J:
00003DD2                            		incbin	misc\ls_jcode.bin
00003DD8                            		even
00003DD8                            
00003DD8                            LevelSelectCode_US:
00003DD8                            		incbin	misc\ls_ucode.bin
00003DDE                            		even
00003DDE                            ; ===========================================================================
00003DDE                            
00003DDE                            ; ---------------------------------------------------------------------------
00003DDE                            ; Demo mode
00003DDE                            ; ---------------------------------------------------------------------------
00003DDE                            
00003DDE                            Demo:					; XREF: TitleScreen
00003DDE 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003DE4                            
00003DE4                            loc_33B6:				; XREF: loc_33E4
00003DE4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003DEA 6100 F5B6                  		bsr.w	DelayProgram
00003DEE 6100 0000                  		bsr.w	DeformBgLayer
00003DF2 6100 DCB2                  		bsr.w	PalCycle_Load
00003DF6 6100 D95E                  		bsr.w	RunPLC_RAM
00003DFA 3038 D008                  		move.w	($FFFFD008).w,d0
00003DFE 5440                       		addq.w	#2,d0
00003E00 31C0 D008                  		move.w	d0,($FFFFD008).w
00003E04 0C40 1C00                  		cmpi.w	#$1C00,d0
00003E08 6500                       		bcs.s	loc_33E4
00003E0A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00003E10 4E75                       		rts	
00003E12                            ; ===========================================================================
00003E12                            
00003E12                            loc_33E4:				; XREF: Demo
00003E12 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003E18 6600 FE54                  		bne.w	Title_ChkLevSel	; if yes, branch
00003E1C 4A78 F614                  		tst.w	($FFFFF614).w
00003E20 6600 FFC2                  		bne.w	loc_33B6
00003E24 103C 00E0                  		move.b	#$E0,d0
00003E28 6100 D64C                  		bsr.w	PlaySound_Special ; fade out music
00003E2C 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00003E30 0240 0007                  		andi.w	#7,d0
00003E34 D040                       		add.w	d0,d0
00003E36 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00003E3A 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00003E3E 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00003E42 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00003E48 6500                       		bcs.s	loc_3422	; if yes, branch
00003E4A 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00003E50                            
00003E50                            loc_3422:
00003E50 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00003E56 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00003E5C 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00003E60 6600                       		bne.s	Demo_Level	; if not, branch
00003E62 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003E68 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00003E6C 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00003E70                            
00003E70                            Demo_Level:
00003E70 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003E76 7000                       		moveq	#0,d0
00003E78 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003E7C 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003E80 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003E84 4E75                       		rts	
00003E86                            ; ===========================================================================
00003E86                            ; ---------------------------------------------------------------------------
00003E86                            ; Levels used in demos
00003E86                            ; ---------------------------------------------------------------------------
00003E86                            Demo_Levels:	incbin	misc\dm_ord1.bin
00003E8E                            		even
00003E8E                            
00003E8E                            ; ---------------------------------------------------------------------------
00003E8E                            ; Subroutine to	change what you're selecting in the level select
00003E8E                            ; ---------------------------------------------------------------------------
00003E8E                            
00003E8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003E8E                            
00003E8E                            
00003E8E                            LevSelControls:				; XREF: LevelSelect
00003E8E 1238 F605                  		move.b	($FFFFF605).w,d1
00003E92 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003E96 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00003E98 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003E9C 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00003E9E                            
00003E9E                            LevSel_UpDown:
00003E9E 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003EA4 1238 F604                  		move.b	($FFFFF604).w,d1
00003EA8 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00003EAC 6700                       		beq.s	LevSel_SndTest	; if not, branch
00003EAE 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003EB2 0801 0000                  		btst	#0,d1		; is up	pressed?
00003EB6 6700                       		beq.s	LevSel_Down	; if not, branch
00003EB8 5340                       		subq.w	#1,d0		; move up 1 selection
00003EBA 6400                       		bcc.s	LevSel_Down
00003EBC 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00003EBE                            
00003EBE                            LevSel_Down:
00003EBE 0801 0001                  		btst	#1,d1		; is down pressed?
00003EC2 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003EC4 5240                       		addq.w	#1,d0		; move down 1 selection
00003EC6 0C40 0015                  		cmpi.w	#$15,d0
00003ECA 6500                       		bcs.s	LevSel_Refresh
00003ECC 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
00003ECE                            
00003ECE                            LevSel_Refresh:
00003ECE 31C0 FF82                  		move.w	d0,($FFFFFF82).w ; set new selection
00003ED2 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00003ED6 4E75                       		rts	
00003ED8                            ; ===========================================================================
00003ED8                            
00003ED8                            LevSel_SndTest:				; XREF: LevSelControls
00003ED8 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
00003EDE 6600                       		bne.s	LevSel_NoMove	; if not, branch
00003EE0 1238 F605                  		move.b	($FFFFF605).w,d1
00003EE4 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
00003EE8 6700                       		beq.s	LevSel_NoMove	; if not, branch
00003EEA 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003EEE 0801 0002                  		btst	#2,d1		; is left pressed?
00003EF2 6700                       		beq.s	LevSel_Right	; if not, branch
00003EF4 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
00003EF6 6400                       		bcc.s	LevSel_Right
00003EF8 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
00003EFA                            
00003EFA                            LevSel_Right:
00003EFA 0801 0003                  		btst	#3,d1		; is right pressed?
00003EFE 6700                       		beq.s	LevSel_Refresh2	; if not, branch
00003F00 5240                       		addq.w	#1,d0		; add 1	to sound test
00003F02 0C40 0050                  		cmpi.w	#$50,d0
00003F06 6500                       		bcs.s	LevSel_Refresh2
00003F08 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
00003F0A                            
00003F0A                            LevSel_Refresh2:
00003F0A 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
00003F0E 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00003F12                            
00003F12                            LevSel_NoMove:
00003F12 4E75                       		rts	
00003F14                            ; End of function LevSelControls
00003F14                            
00003F14                            ; ---------------------------------------------------------------------------
00003F14                            ; Subroutine to load level select text
00003F14                            ; ---------------------------------------------------------------------------
00003F14                            
00003F14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003F14                            
00003F14                            
00003F14                            LevSelTextLoad:				; XREF: TitleScreen
00003F14 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003F1A 4DF9 00C0 0000             		lea	($C00000).l,a6
00003F20 283C 6210 0003             		move.l	#$62100003,d4	; screen position (text)
00003F26 363C E680                  		move.w	#$E680,d3	; VRAM setting
00003F2A 7214                       		moveq	#$14,d1		; number of lines of text
00003F2C                            
00003F2C                            loc_34FE:				; XREF: LevSelTextLoad+26j
00003F2C 2D44 0004                  		move.l	d4,4(a6)
00003F30 6100 0000                  		bsr.w	LevSel_ChgLine
00003F34 0684 0080 0000             		addi.l	#$800000,d4
00003F3A 51C9 FFF0                  		dbf	d1,loc_34FE
00003F3E 7000                       		moveq	#0,d0
00003F40 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003F44 3200                       		move.w	d0,d1
00003F46 283C 6210 0003             		move.l	#$62100003,d4
00003F4C EF48                       		lsl.w	#7,d0
00003F4E 4840                       		swap	d0
00003F50 D880                       		add.l	d0,d4
00003F52 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003F58 E749                       		lsl.w	#3,d1
00003F5A 3001                       		move.w	d1,d0
00003F5C D241                       		add.w	d1,d1
00003F5E D240                       		add.w	d0,d1
00003F60 D2C1                       		adda.w	d1,a1
00003F62 363C C680                  		move.w	#$C680,d3
00003F66 2D44 0004                  		move.l	d4,4(a6)
00003F6A 6100 0000                  		bsr.w	LevSel_ChgLine
00003F6E 363C E680                  		move.w	#$E680,d3
00003F72 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
00003F78 6600                       		bne.s	loc_3550
00003F7A 363C C680                  		move.w	#$C680,d3
00003F7E                            
00003F7E                            loc_3550:
00003F7E 23FC 6C30 0003 00C0 0004   		move.l	#$6C300003,($C00004).l ; screen	position (sound	test)
00003F88 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003F8C 0640 0080                  		addi.w	#$80,d0
00003F90 1400                       		move.b	d0,d2
00003F92 E808                       		lsr.b	#4,d0
00003F94 6100 0000                  		bsr.w	LevSel_ChgSnd
00003F98 1002                       		move.b	d2,d0
00003F9A 6100 0000                  		bsr.w	LevSel_ChgSnd
00003F9E 4E75                       		rts	
00003FA0                            ; End of function LevSelTextLoad
00003FA0                            
00003FA0                            
00003FA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003FA0                            
00003FA0                            
00003FA0                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00003FA0 0240 000F                  		andi.w	#$F,d0
00003FA4 0C00 000A                  		cmpi.b	#$A,d0
00003FA8 6500                       		bcs.s	loc_3580
00003FAA 5E00                       		addi.b	#7,d0
00003FAC                            
00003FAC                            loc_3580:
00003FAC D043                       		add.w	d3,d0
00003FAE 3C80                       		move.w	d0,(a6)
00003FB0 4E75                       		rts	
00003FB2                            ; End of function LevSel_ChgSnd
00003FB2                            
00003FB2                            
00003FB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003FB2                            
00003FB2                            
00003FB2                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003FB2 7417                       		moveq	#$17,d2		; number of characters per line
00003FB4                            
00003FB4                            loc_3588:
00003FB4 7000                       		moveq	#0,d0
00003FB6 1019                       		move.b	(a1)+,d0
00003FB8 6A00                       		bpl.s	loc_3598
00003FBA 3CBC 0000                  		move.w	#0,(a6)
00003FBE 51CA FFF4                  		dbf	d2,loc_3588
00003FC2 4E75                       		rts	
00003FC4                            ; ===========================================================================
00003FC4                            
00003FC4                            loc_3598:				; XREF: LevSel_ChgLine
00003FC4 D043                       		add.w	d3,d0
00003FC6 3C80                       		move.w	d0,(a6)
00003FC8 51CA FFEA                  		dbf	d2,loc_3588
00003FCC 4E75                       		rts	
00003FCE                            ; End of function LevSel_ChgLine
00003FCE                            
00003FCE                            ; ===========================================================================
00003FCE                            ; ---------------------------------------------------------------------------
00003FCE                            ; Level	select menu text
00003FCE                            ; ---------------------------------------------------------------------------
00003FCE                            LevelMenuText:	incbin	misc\menutext.bin
000041C6                            		even
000041C6                            ; ---------------------------------------------------------------------------
000041C6                            ; Music	playlist
000041C6                            ; ---------------------------------------------------------------------------
000041C6                            MusicList1:	incbin	misc\muslist1.bin
000041CC                            		even
000041CC                            MusicList2:	incbin	misc\muslist2.bin
000041D2                            		even
000041D2                            MusicList3:	incbin	misc\muslist3.bin
000041D8                            		even
000041D8                            MusicList4:	incbin	misc\muslist4.bin
000041DE                            		even
000041DE                            ; ===========================================================================
000041DE                            
000041DE                            ; ---------------------------------------------------------------------------
000041DE                            ; Level
000041DE                            ; ---------------------------------------------------------------------------
000041DE                            
000041DE                            Level:					; XREF: GameModeArray
000041DE 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
000041E4 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000041E8 6B00                       		bmi.s	loc_37B6
000041EA 103C 00E0                  		move.b	#$E0,d0
000041EE 6100 D286                  		bsr.w	PlaySound_Special ; fade out music
000041F2                            
000041F2                            loc_37B6:
000041F2 6100 D554                  		bsr.w	ClearPLC
000041F6 6100 DF88                  		bsr.w	Pal_FadeFrom
000041FA 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000041FE 6B00                       		bmi.s	Level_ClrRam
00004200 46FC 2700                  		move	#$2700,sr
00004204 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
0000420E 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004214 6100 D394                  		bsr.w	NemDec
00004218 46FC 2300                  		move	#$2300,sr
0000421C 7000                       		moveq	#0,d0
0000421E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004222 E948                       		lsl.w	#4,d0
00004224 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
0000422A 45F2 0000                  		lea	(a2,d0.w),a2
0000422E 7000                       		moveq	#0,d0
00004230 1012                       		move.b	(a2),d0
00004232 6700                       		beq.s	loc_37FC
00004234 6100 D4B4                  		bsr.w	LoadPLC		; load level patterns
00004238                            
00004238                            loc_37FC:
00004238 7001                       		moveq	#1,d0
0000423A 6100 D4AE                  		bsr.w	LoadPLC		; load standard	patterns
0000423E                            
0000423E                            Level_ClrRam:
0000423E 43F8 D000                  		lea	($FFFFD000).w,a1
00004242 7000                       		moveq	#0,d0
00004244 323C 07FF                  		move.w	#$7FF,d1
00004248                            
00004248                            Level_ClrObjRam:
00004248 22C0                       		move.l	d0,(a1)+
0000424A 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
0000424E                            
0000424E 43F8 F628                  		lea	($FFFFF628).w,a1
00004252 7000                       		moveq	#0,d0
00004254 323C 0015                  		move.w	#$15,d1
00004258                            
00004258                            Level_ClrVars:
00004258 22C0                       		move.l	d0,(a1)+
0000425A 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
0000425E                            
0000425E 43F8 F700                  		lea	($FFFFF700).w,a1
00004262 7000                       		moveq	#0,d0
00004264 323C 003F                  		move.w	#$3F,d1
00004268                            
00004268                            Level_ClrVars2:
00004268 22C0                       		move.l	d0,(a1)+
0000426A 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
0000426E                            
0000426E 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004272 7000                       		moveq	#0,d0
00004274 323C 0047                  		move.w	#$47,d1
00004278                            
00004278                            Level_ClrVars3:
00004278 22C0                       		move.l	d0,(a1)+
0000427A 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
0000427E                            
0000427E 46FC 2700                  		move	#$2700,sr
00004282 6100 D0FC                  		bsr.w	ClearScreen
00004286 4DF9 00C0 0004             		lea	($C00004).l,a6
0000428C 3CBC 8B03                  		move.w	#$8B03,(a6)
00004290 3CBC 8230                  		move.w	#$8230,(a6)
00004294 3CBC 8407                  		move.w	#$8407,(a6)
00004298 3CBC 857C                  		move.w	#$857C,(a6)
0000429C 3CBC 9001                  		move.w	#$9001,(a6)
000042A0 3CBC 8004                  		move.w	#$8004,(a6)
000042A4 3CBC 8720                  		move.w	#$8720,(a6)
000042A8 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
000042AE 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
000042B2 4278 C800                  		clr.w	($FFFFC800).w
000042B6 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
000042BE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000042C4 6600                       		bne.s	Level_LoadPal	; if not, branch
000042C6 3CBC 8014                  		move.w	#$8014,(a6)
000042CA 7000                       		moveq	#0,d0
000042CC 1038 FE11                  		move.b	($FFFFFE11).w,d0
000042D0 D040                       		add.w	d0,d0
000042D2 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
000042D8 3031 0000                  		move.w	(a1,d0.w),d0
000042DC 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
000042E0 31C0 F648                  		move.w	d0,($FFFFF648).w
000042E4 31C0 F64A                  		move.w	d0,($FFFFF64A).w
000042E8 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
000042EC 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
000042F0 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
000042F6                            
000042F6                            Level_LoadPal:
000042F6 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000042FC 46FC 2300                  		move	#$2300,sr
00004300 7003                       		moveq	#3,d0
00004302 6100 E166                  		bsr.w	PalLoad2	; load Sonic's pallet line
00004306 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0000430C 6600                       		bne.s	Level_GetBgm	; if not, branch
0000430E 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
00004310 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00004316 6600                       		bne.s	Level_WaterPal	; if not, branch
00004318 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
0000431A                            
0000431A                            Level_WaterPal:
0000431A 6100 E186                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
0000431E 4A38 FE30                  		tst.b	($FFFFFE30).w
00004322 6700                       		beq.s	Level_GetBgm
00004324 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
0000432A                            
0000432A                            ; NineKode begins here - How to play different songs on different acts
0000432A                             
0000432A                            Level_GetBgm:
0000432A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000432E 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00004332 7000                       		moveq	#0,d0
00004334 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004338                             
00004338 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
0000433E 6600                       		bne.s	Level_GetBgm2	; if not, branch
00004340 43F9 0000 41C6             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00004346 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00004348                             
00004348                            Level_GetBgm2:
00004348 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
0000434E 6600                       		bne.s	Level_GetBgm3	; if not, branch
00004350 43F9 0000 41CC             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00004356 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00004358                             
00004358                            Level_GetBgm3:
00004358 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
0000435E 6600                       		bne.s	Level_GetBgm4	; if not, branch
00004360 43F9 0000 41D2             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00004366 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00004368                             
00004368                            Level_GetBgm4:
00004368 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
0000436E 6600                       		bne.s	Level_PlayBgm	; if not, branch
00004370 43F9 0000 41D8             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00004376                             
00004376                            Level_PlayBgm:
00004376 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
0000437A 6100 D0F4                  		bsr.w	PlaySound	; play music
0000437E 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00004384                             
00004384                            ; NineKode ends here
00004384                            
00004384                            Level_TtlCard:
00004384 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
0000438A 6100 F016                  		bsr.w	DelayProgram
0000438E 4EB9 0000 0000             		jsr	ObjectsLoad
00004394 4EB9 0000 0000             		jsr	BuildSprites
0000439A 6100 D3BA                  		bsr.w	RunPLC_RAM
0000439E 3038 D108                  		move.w	($FFFFD108).w,d0
000043A2 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
000043A6 66DC                       		bne.s	Level_TtlCard	; if not, branch
000043A8 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
000043AC 66D6                       		bne.s	Level_TtlCard	; if yes, branch
000043AE 4EB9 0000 0000             		jsr	Hud_Base
000043B4                            
000043B4                            loc_3946:
000043B4 7003                       		moveq	#3,d0
000043B6 6100 E076                  		bsr.w	PalLoad1	; load Sonic's pallet line
000043BA 6100 0000                  		bsr.w	LevelSizeLoad
000043BE 6100 0000                  		bsr.w	DeformBgLayer
000043C2 08F8 0002 F754             		bset	#2,($FFFFF754).w
000043C8 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
000043CC 6100 0000                  		bsr.w	LoadTilesFromStart
000043D0 4EB9 0000 0000             		jsr	FloorLog_Unk
000043D6 6100 0000                  		bsr.w	ColIndexLoad
000043DA 6100 0000                  		bsr.w	LZWaterEffects
000043DE 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000043E4 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000043E8 6B00                       		bmi.s	Level_ChkDebug
000043EA 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
000043F0                            
000043F0                            Level_ChkDebug:
000043F0 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
000043F4 6700                       		beq.s	Level_ChkWater	; if not, branch
000043F6 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
000043FC 6700                       		beq.s	Level_ChkWater	; if not, branch
000043FE 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004404                            
00004404                            Level_ChkWater:
00004404 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0000440A 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00004410 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00004416 6600                       		bne.s	Level_LoadObj	; if not, branch
00004418 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
0000441E 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00004424 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
0000442A 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00004430                            
00004430                            Level_LoadObj:
00004430 4EB9 0000 0000             		jsr	ObjPosLoad
00004436 4EB9 0000 0000             		jsr	ObjectsLoad
0000443C 4EB9 0000 0000             		jsr	BuildSprites
00004442 7000                       		moveq	#0,d0
00004444 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00004448 6600                       		bne.s	loc_39E8	; if yes, branch
0000444A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000444E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004452 11C0 FEBF                          move.b  d0,($FFFFFEBF).w ; value used to increment centiseconds
00004456 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
0000445A                            
0000445A                            loc_39E8:
0000445A 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
0000445E 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00004462 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00004466 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
0000446A 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000446E 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00004472 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00004476 31C0 FE04                  		move.w	d0,($FFFFFE04).w
0000447A 6100 0000                  		bsr.w	OscillateNumInit
0000447E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004484 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
0000448A 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004490 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00004496 7000                       		moveq	#0,d0
00004498 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000449C E548                       		lsl.w	#2,d0
0000449E 2271 0000                  		movea.l	(a1,d0.w),a1
000044A2 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000044A6 6A00                       		bpl.s	Level_Demo	; if yes, branch
000044A8 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
000044AE 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000044B2 5340                       		subq.w	#1,d0
000044B4 E548                       		lsl.w	#2,d0
000044B6 2271 0000                  		movea.l	(a1,d0.w),a1
000044BA                            
000044BA                            Level_Demo:
000044BA 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
000044C0 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
000044C4 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000044CA 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000044CE 6A00                       		bpl.s	Level_ChkWaterPal
000044D0 31FC 021C F614             		move.w	#540,($FFFFF614).w
000044D6 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
000044DC 6600                       		bne.s	Level_ChkWaterPal
000044DE 31FC 01FE F614             		move.w	#510,($FFFFF614).w
000044E4                            
000044E4                            Level_ChkWaterPal:
000044E4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
000044EA 6600                       		bne.s	Level_Delay	; if not, branch
000044EC 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
000044EE 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
000044F4 6600                       		bne.s	Level_WaterPal2	; if not, branch
000044F6 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
000044F8                            
000044F8                            Level_WaterPal2:
000044F8 6100 DFE4                  		bsr.w	PalLoad4_Water
000044FC                            
000044FC                            Level_Delay:
000044FC 323C 0003                  		move.w	#3,d1
00004500                            
00004500                            Level_DelayLoop:
00004500 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004506 6100 EE9A                  		bsr.w	DelayProgram
0000450A 51C9 FFF4                  		dbf	d1,Level_DelayLoop
0000450E                            
0000450E 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00004514 6100 DBBA                  		bsr.w	Pal_FadeTo2
00004518 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000451C 6B00                       		bmi.s	Level_ClrCardArt
0000451E 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00004522 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00004526 5838 D124                  		addq.b	#4,($FFFFD124).w
0000452A 5838 D164                  		addq.b	#4,($FFFFD164).w
0000452E 6000                       		bra.s	Level_StartGame
00004530                            ; ===========================================================================
00004530                            
00004530                            Level_ClrCardArt:
00004530 7002                       		moveq	#2,d0
00004532 4EB9 0000 16EA             		jsr	(LoadPLC).l	; load explosion patterns
00004538 7000                       		moveq	#0,d0
0000453A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000453E 0640 0015                  		addi.w	#$15,d0
00004542 4EB9 0000 16EA             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00004548                            
00004548                            Level_StartGame:
00004548 11FC 0001 FE1E                     move.b    #1,($FFFFFE1E).w ; update time counter
0000454E 08B8 0007 F600                     bclr    #7,($FFFFF600).w ; subtract 80 from screen mode
00004554                            
00004554                            ; ---------------------------------------------------------------------------
00004554                            ; Main level loop (when	all title card and loading sequences are finished)
00004554                            ; ---------------------------------------------------------------------------
00004554                            
00004554                            Level_MainLoop:
00004554 6100 CF2C                  		bsr.w	PauseGame
00004558 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000455E 6100 EE42                  		bsr.w	DelayProgram
00004562 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00004566 6100 0000                  		bsr.w	MoveSonicInDemo
0000456A 6100 0000                  		bsr.w	LZWaterEffects
0000456E 4EB9 0000 0000             		jsr	ObjectsLoad
00004574 4A78 FE08                  		tst.w	($FFFFFE08).w
00004578 6600                       		bne.s	loc_3B10
0000457A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004580 6400                       		bcc.s	loc_3B14
00004582                            
00004582                            loc_3B10:
00004582 6100 0000                  		bsr.w	DeformBgLayer
00004586                            
00004586                            loc_3B14:
00004586 4EB9 0000 0000             		jsr	BuildSprites
0000458C 4EB9 0000 0000             		jsr	ObjPosLoad
00004592 6100 D512                  		bsr.w	PalCycle_Load
00004596 6100 D1BE                  		bsr.w	RunPLC_RAM
0000459A 6100 0000                  		bsr.w	OscillateNumDo
0000459E 6100 0000                  		bsr.w	ChangeRingFrame
000045A2 6100 0000                  		bsr.w	SignpostArtLoad
000045A6 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000045AC 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
000045AE 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
000045B2 6600 FC2A                  		bne.w	Level		; if yes, branch
000045B6 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
000045BC 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
000045C0 4E75                       		rts	
000045C2                            ; ===========================================================================
000045C2                            
000045C2                            Level_ChkDemo:				; XREF: Level_MainLoop
000045C2 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000045C6 6600                       		bne.s	Level_EndDemo	; if yes, branch
000045C8 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
000045CC 6700                       		beq.s	Level_EndDemo	; if not, branch
000045CE 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000045D4 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
000045D8 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000045DE 4E75                       		rts	
000045E0                            ; ===========================================================================
000045E0                            
000045E0                            Level_EndDemo:				; XREF: Level_ChkDemo
000045E0 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
000045E6 6600                       		bne.s	loc_3B88	; if not, branch
000045E8 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000045EE 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000045F2 6A00                       		bpl.s	loc_3B88	; if yes, branch
000045F4 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
000045FA                            
000045FA                            loc_3B88:
000045FA 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00004600 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004606 4278 F794                  		clr.w	($FFFFF794).w
0000460A                            
0000460A                            loc_3B98:
0000460A 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004610 6100 ED90                  		bsr.w	DelayProgram
00004614 6100 0000                  		bsr.w	MoveSonicInDemo
00004618 4EB9 0000 0000             		jsr	ObjectsLoad
0000461E 4EB9 0000 0000             		jsr	BuildSprites
00004624 4EB9 0000 0000             		jsr	ObjPosLoad
0000462A 5378 F794                  		subq.w	#1,($FFFFF794).w
0000462E 6A00                       		bpl.s	loc_3BC8
00004630 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004636 6100 DB6E                  		bsr.w	Pal_FadeOut
0000463A                            
0000463A                            loc_3BC8:
0000463A 4A78 F614                  		tst.w	($FFFFF614).w
0000463E 66CA                       		bne.s	loc_3B98
00004640 4E75                       		rts	
00004642                            ; ===========================================================================
00004642                            ; ---------------------------------------------------------------------------
00004642                            ; Subroutine to	do special water effects in Labyrinth Zone
00004642                            ; ---------------------------------------------------------------------------
00004642                            
00004642                            LZWaterEffects:				; XREF: Level
00004642 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00004648 6600                       		bne.s	locret_3C28	; if not, branch
0000464A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004650 6400                       		bcc.s	LZMoveWater
00004652 6100 0000                  		bsr.w	LZWindTunnels
00004656 6100 0000                  		bsr.w	LZWaterSlides
0000465A 6100 0000                  		bsr.w	LZDynamicWater
0000465E                            
0000465E                            LZMoveWater:
0000465E 4238 F64E                  		clr.b	($FFFFF64E).w
00004662 7000                       		moveq	#0,d0
00004664 1038 FE60                  		move.b	($FFFFFE60).w,d0
00004668 E248                       		lsr.w	#1,d0
0000466A D078 F648                  		add.w	($FFFFF648).w,d0
0000466E 31C0 F646                  		move.w	d0,($FFFFF646).w
00004672 3038 F646                  		move.w	($FFFFF646).w,d0
00004676 9078 F704                  		sub.w	($FFFFF704).w,d0
0000467A 6400                       		bcc.s	loc_3C1A
0000467C 4A40                       		tst.w	d0
0000467E 6A00                       		bpl.s	loc_3C1A
00004680 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00004686 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
0000468C                            
0000468C                            loc_3C1A:
0000468C 0C40 00DF                  		cmpi.w	#$DF,d0
00004690 6500                       		bcs.s	loc_3C24
00004692 303C 00DF                  		move.w	#$DF,d0
00004696                            
00004696                            loc_3C24:
00004696 11C0 F625                  		move.b	d0,($FFFFF625).w
0000469A                            
0000469A                            locret_3C28:
0000469A 4E75                       		rts	
0000469C                            ; ===========================================================================
0000469C                            ; ---------------------------------------------------------------------------
0000469C                            ; Labyrinth default water heights
0000469C                            ; ---------------------------------------------------------------------------
0000469C                            WaterHeight:	incbin	misc\lz_heigh.bin
000046A4                            		even
000046A4                            
000046A4                            ; ===========================================================================
000046A4                            
000046A4                            ; ---------------------------------------------------------------------------
000046A4                            ; Labyrinth dynamic water routines
000046A4                            ; ---------------------------------------------------------------------------
000046A4                            
000046A4                            LZDynamicWater:				; XREF: LZWaterEffects
000046A4 7000                       		moveq	#0,d0
000046A6 1038 FE11                  		move.b	($FFFFFE11).w,d0
000046AA D040                       		add.w	d0,d0
000046AC 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
000046B0 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
000046B4 7200                       		moveq	#0,d1
000046B6 1238 F64C                  		move.b	($FFFFF64C).w,d1
000046BA 3038 F64A                  		move.w	($FFFFF64A).w,d0
000046BE 9078 F648                  		sub.w	($FFFFF648).w,d0
000046C2 6700                       		beq.s	locret_3C5A
000046C4 6400                       		bcc.s	loc_3C56
000046C6 4441                       		neg.w	d1
000046C8                            
000046C8                            loc_3C56:
000046C8 D378 F648                  		add.w	d1,($FFFFF648).w
000046CC                            
000046CC                            locret_3C5A:
000046CC 4E75                       		rts	
000046CE                            ; ===========================================================================
000046CE 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
000046D0 0000                       		dc.w DynWater_LZ2-DynWater_Index
000046D2 0000                       		dc.w DynWater_LZ3-DynWater_Index
000046D4 0000                       		dc.w DynWater_SBZ3-DynWater_Index
000046D6                            ; ===========================================================================
000046D6                            
000046D6                            DynWater_LZ1:				; XREF: DynWater_Index
000046D6 3038 F700                  		move.w	($FFFFF700).w,d0
000046DA 1438 F64D                  		move.b	($FFFFF64D).w,d2
000046DE 6600                       		bne.s	loc_3CD0
000046E0 323C 00B8                  		move.w	#$B8,d1
000046E4 0C40 0600                  		cmpi.w	#$600,d0
000046E8 6500                       		bcs.s	loc_3CB4
000046EA 323C 0108                  		move.w	#$108,d1
000046EE 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
000046F4 6500                       		bcs.s	loc_3CBA
000046F6 0C40 0C00                  		cmpi.w	#$C00,d0
000046FA 6500                       		bcs.s	loc_3CB4
000046FC 323C 0318                  		move.w	#$318,d1
00004700 0C40 1080                  		cmpi.w	#$1080,d0
00004704 6500                       		bcs.s	loc_3CB4
00004706 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
0000470C 323C 05C8                  		move.w	#$5C8,d1
00004710 0C40 1380                  		cmpi.w	#$1380,d0
00004714 6500                       		bcs.s	loc_3CB4
00004716 323C 03A8                  		move.w	#$3A8,d1
0000471A B278 F648                  		cmp.w	($FFFFF648).w,d1
0000471E 6600                       		bne.s	loc_3CB4
00004720 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004726                            
00004726                            loc_3CB4:
00004726 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000472A 4E75                       		rts	
0000472C                            ; ===========================================================================
0000472C                            
0000472C                            loc_3CBA:				; XREF: DynWater_LZ1
0000472C 0C40 0C80                  		cmpi.w	#$C80,d0
00004730 65F4                       		bcs.s	loc_3CB4
00004732 323C 00E8                  		move.w	#$E8,d1
00004736 0C40 1500                  		cmpi.w	#$1500,d0
0000473A 65EA                       		bcs.s	loc_3CB4
0000473C 323C 0108                  		move.w	#$108,d1
00004740 60E4                       		bra.s	loc_3CB4
00004742                            ; ===========================================================================
00004742                            
00004742                            loc_3CD0:				; XREF: DynWater_LZ1
00004742 5302                       		subq.b	#1,d2
00004744 6600                       		bne.s	locret_3CF4
00004746 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
0000474C 6400                       		bcc.s	locret_3CF4
0000474E 323C 03A8                  		move.w	#$3A8,d1
00004752 0C40 1300                  		cmpi.w	#$1300,d0
00004756 6500                       		bcs.s	loc_3CF0
00004758 323C 0108                  		move.w	#$108,d1
0000475C 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004762                            
00004762                            loc_3CF0:
00004762 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004766                            
00004766                            locret_3CF4:
00004766 4E75                       		rts	
00004768                            ; ===========================================================================
00004768                            
00004768                            DynWater_LZ2:				; XREF: DynWater_Index
00004768 3038 F700                  		move.w	($FFFFF700).w,d0
0000476C 323C 0328                  		move.w	#$328,d1
00004770 0C40 0500                  		cmpi.w	#$500,d0
00004774 6500                       		bcs.s	loc_3D12
00004776 323C 03C8                  		move.w	#$3C8,d1
0000477A 0C40 0B00                  		cmpi.w	#$B00,d0
0000477E 6500                       		bcs.s	loc_3D12
00004780 323C 0428                  		move.w	#$428,d1
00004784                            
00004784                            loc_3D12:
00004784 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004788 4E75                       		rts	
0000478A                            ; ===========================================================================
0000478A                            
0000478A                            DynWater_LZ3:				; XREF: DynWater_Index
0000478A 3038 F700                  		move.w	($FFFFF700).w,d0
0000478E 1438 F64D                  		move.b	($FFFFF64D).w,d2
00004792 6600                       		bne.s	loc_3D5E
00004794 323C 0900                  		move.w	#$900,d1
00004798 0C40 0600                  		cmpi.w	#$600,d0
0000479C 6500                       		bcs.s	loc_3D54
0000479E 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
000047A4 6500                       		bcs.s	loc_3D54
000047A6 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000047AC 6400                       		bcc.s	loc_3D54
000047AE 323C 04C8                  		move.w	#$4C8,d1
000047B2 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
000047B8 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
000047BE 303C 00B7                  		move.w	#$B7,d0
000047C2 6100 CCB2                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
000047C6                            
000047C6                            loc_3D54:
000047C6 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000047CA 31C1 F648                  		move.w	d1,($FFFFF648).w
000047CE 4E75                       		rts	
000047D0                            ; ===========================================================================
000047D0                            
000047D0                            loc_3D5E:				; XREF: DynWater_LZ3
000047D0 5302                       		subq.b	#1,d2
000047D2 6600                       		bne.s	loc_3DA8
000047D4 323C 04C8                  		move.w	#$4C8,d1
000047D8 0C40 0770                  		cmpi.w	#$770,d0
000047DC 6500                       		bcs.s	loc_3DA2
000047DE 323C 0308                  		move.w	#$308,d1
000047E2 0C40 1400                  		cmpi.w	#$1400,d0
000047E6 6500                       		bcs.s	loc_3DA2
000047E8 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
000047EE 6700                       		beq.s	loc_3D8E
000047F0 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000047F6 6400                       		bcc.s	loc_3D8E
000047F8 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
000047FE 6400                       		bcc.s	loc_3DA2
00004800                            
00004800                            loc_3D8E:
00004800 323C 0508                  		move.w	#$508,d1
00004804 31C1 F648                  		move.w	d1,($FFFFF648).w
00004808 0C40 1770                  		cmpi.w	#$1770,d0
0000480C 6500                       		bcs.s	loc_3DA2
0000480E 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004814                            
00004814                            loc_3DA2:
00004814 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004818 4E75                       		rts	
0000481A                            ; ===========================================================================
0000481A                            
0000481A                            loc_3DA8:
0000481A 5302                       		subq.b	#1,d2
0000481C 6600                       		bne.s	loc_3DD2
0000481E 323C 0508                  		move.w	#$508,d1
00004822 0C40 1860                  		cmpi.w	#$1860,d0
00004826 6500                       		bcs.s	loc_3DCC
00004828 323C 0188                  		move.w	#$188,d1
0000482C 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004830 6400                       		bcc.s	loc_3DC6
00004832 B278 F648                  		cmp.w	($FFFFF648).w,d1
00004836 6600                       		bne.s	loc_3DCC
00004838                            
00004838                            loc_3DC6:
00004838 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
0000483E                            
0000483E                            loc_3DCC:
0000483E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004842 4E75                       		rts	
00004844                            ; ===========================================================================
00004844                            
00004844                            loc_3DD2:
00004844 5302                       		subq.b	#1,d2
00004846 6600                       		bne.s	loc_3E0E
00004848 323C 0188                  		move.w	#$188,d1
0000484C 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004850 6500                       		bcs.s	loc_3E04
00004852 323C 0900                  		move.w	#$900,d1
00004856 0C40 1BC0                  		cmpi.w	#$1BC0,d0
0000485A 6500                       		bcs.s	loc_3E04
0000485C 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00004862 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00004868 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
0000486E 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00004874 4E75                       		rts	
00004876                            ; ===========================================================================
00004876                            
00004876                            loc_3E04:
00004876 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000487A 31C1 F648                  		move.w	d1,($FFFFF648).w
0000487E 4E75                       		rts	
00004880                            ; ===========================================================================
00004880                            
00004880                            loc_3E0E:
00004880 0C40 1E00                  		cmpi.w	#$1E00,d0
00004884 6500                       		bcs.s	locret_3E1A
00004886 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
0000488C                            
0000488C                            locret_3E1A:
0000488C 4E75                       		rts	
0000488E                            ; ===========================================================================
0000488E                            
0000488E                            DynWater_SBZ3:				; XREF: DynWater_Index
0000488E 323C 0228                  		move.w	#$228,d1
00004892 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00004898 6500                       		bcs.s	loc_3E2C
0000489A 323C 04C8                  		move.w	#$4C8,d1
0000489E                            
0000489E                            loc_3E2C:
0000489E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000048A2 4E75                       		rts
000048A4                            
000048A4                            ; ---------------------------------------------------------------------------
000048A4                            ; Labyrinth Zone "wind tunnels"	subroutine
000048A4                            ; ---------------------------------------------------------------------------
000048A4                            
000048A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000048A4                            
000048A4                            
000048A4                            LZWindTunnels:				; XREF: LZWaterEffects
000048A4 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000048A8 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
000048AC 45F9 0000 0000             		lea	(LZWind_Data).l,a2
000048B2 7000                       		moveq	#0,d0
000048B4 1038 FE11                  		move.b	($FFFFFE11).w,d0
000048B8 E748                       		lsl.w	#3,d0
000048BA D4C0                       		adda.w	d0,a2
000048BC 7200                       		moveq	#0,d1
000048BE 4A38 FE11                  		tst.b	($FFFFFE11).w
000048C2 6600                       		bne.s	loc_3E56
000048C4 7201                       		moveq	#1,d1
000048C6 514A                       		subq.w	#8,a2
000048C8                            
000048C8                            loc_3E56:
000048C8 43F8 D000                  		lea	($FFFFD000).w,a1
000048CC                            
000048CC                            LZWind_Loop:
000048CC 3029 0008                  		move.w	8(a1),d0
000048D0 B052                       		cmp.w	(a2),d0
000048D2 6500 0000                  		bcs.w	loc_3EF4
000048D6 B06A 0004                  		cmp.w	4(a2),d0
000048DA 6400 0000                  		bcc.w	loc_3EF4
000048DE 3429 000C                  		move.w	$C(a1),d2
000048E2 B46A 0002                  		cmp.w	2(a2),d2
000048E6 6500                       		bcs.s	loc_3EF4
000048E8 B46A 0006                  		cmp.w	6(a2),d2
000048EC 6400                       		bcc.s	loc_3EF4
000048EE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000048F2 0200 003F                  		andi.b	#$3F,d0
000048F6 6600                       		bne.s	loc_3E90
000048F8 303C 00D0                  		move.w	#$D0,d0
000048FC 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play rushing water sound
00004902                            
00004902                            loc_3E90:
00004902 4A38 F7C9                  		tst.b	($FFFFF7C9).w
00004906 6600 0000                  		bne.w	locret_3F0A
0000490A 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00004910 6400                       		bcc.s	loc_3F06
00004912 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
00004918 0440 0080                  		subi.w	#$80,d0
0000491C B052                       		cmp.w	(a2),d0
0000491E 6400                       		bcc.s	LZWind_Move
00004920 7002                       		moveq	#2,d0
00004922 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00004928 6600                       		bne.s	loc_3EBA
0000492A 4440                       		neg.w	d0
0000492C                            
0000492C                            loc_3EBA:
0000492C D169 000C                  		add.w	d0,$C(a1)
00004930                            
00004930                            LZWind_Move:
00004930 5869 0008                  		addq.w	#4,8(a1)
00004934 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
0000493A 337C 0000 0012             		move.w	#0,$12(a1)
00004940 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00004946 08E9 0001 0022             		bset	#1,$22(a1)
0000494C 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00004952 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00004954 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00004958                            
00004958                            LZWind_MoveDown:
00004958 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0000495E 6700                       		beq.s	locret_3EF2	; if not, branch
00004960 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00004964                            
00004964                            locret_3EF2:
00004964 4E75                       		rts	
00004966                            ; ===========================================================================
00004966                            
00004966                            loc_3EF4:				; XREF: LZWindTunnels
00004966 504A                       		addq.w	#8,a2
00004968 51C9 FF62                  		dbf	d1,LZWind_Loop
0000496C 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00004970 6700                       		beq.s	locret_3F0A
00004972 137C 0000 001C             		move.b	#0,$1C(a1)
00004978                            
00004978                            loc_3F06:
00004978 4238 F7C7                  		clr.b	($FFFFF7C7).w
0000497C                            
0000497C                            locret_3F0A:
0000497C 4E75                       		rts	
0000497E                            ; End of function LZWindTunnels
0000497E                            
0000497E                            ; ===========================================================================
0000497E 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00004986 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00004998 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
000049A6                            					; XREF: LZWindTunnels
000049A6                            		even
000049A6                            
000049A6                            ; ---------------------------------------------------------------------------
000049A6                            ; Labyrinth Zone water slide subroutine
000049A6                            ; ---------------------------------------------------------------------------
000049A6                            
000049A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000049A6                            
000049A6                            
000049A6                            LZWaterSlides:				; XREF: LZWaterEffects
000049A6 43F8 D000                  		lea	($FFFFD000).w,a1
000049AA 0829 0001 0022             		btst	#1,$22(a1)
000049B0 6600                       		bne.s	loc_3F6A
000049B2 3029 000C                  		move.w	$C(a1),d0
000049B6 E248                       		lsr.w	#1,d0
000049B8 0240 0380                  		andi.w	#$380,d0
000049BC 1229 0008                  		move.b	8(a1),d1
000049C0 0241 007F                  		andi.w	#$7F,d1
000049C4 D041                       		add.w	d1,d0
000049C6 45F8 A400                  		lea	($FFFFA400).w,a2
000049CA 1032 0000                  		move.b	(a2,d0.w),d0
000049CE 45FA 0000                  		lea	byte_3FCF(pc),a2
000049D2 7206                       		moveq	#6,d1
000049D4                            
000049D4                            loc_3F62:
000049D4 B022                       		cmp.b	-(a2),d0
000049D6 57C9 FFFC                  		dbeq	d1,loc_3F62
000049DA 6700                       		beq.s	LZSlide_Move
000049DC                            
000049DC                            loc_3F6A:
000049DC 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000049E0 6700                       		beq.s	locret_3F7A
000049E2 337C 0005 003E             		move.w	#5,$3E(a1)
000049E8 4238 F7CA                  		clr.b	($FFFFF7CA).w
000049EC                            
000049EC                            locret_3F7A:
000049EC 4E75                       		rts	
000049EE                            ; ===========================================================================
000049EE                            
000049EE                            LZSlide_Move:				; XREF: LZWaterSlides
000049EE 0C41 0003                  		cmpi.w	#3,d1
000049F2 6400                       		bcc.s	loc_3F84
000049F4 4E71                       		nop	
000049F6                            
000049F6                            loc_3F84:
000049F6 08A9 0000 0022             		bclr	#0,$22(a1)
000049FC 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
00004A00 1340 0014                  		move.b	d0,$14(a1)
00004A04 6A00                       		bpl.s	loc_3F9A
00004A06 08E9 0000 0022             		bset	#0,$22(a1)
00004A0C                            
00004A0C                            loc_3F9A:
00004A0C 4229 0015                  		clr.b	$15(a1)
00004A10 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
00004A16 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
00004A1C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004A20 0200 001F                  		andi.b	#$1F,d0
00004A24 6600                       		bne.s	locret_3FBE
00004A26 303C 00D0                  		move.w	#$D0,d0
00004A2A 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play water sound
00004A30                            
00004A30                            locret_3FBE:
00004A30 4E75                       		rts	
00004A32                            ; End of function LZWaterSlides
00004A32                            
00004A32                            ; ===========================================================================
00004A32 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00004A41 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00004A42                            		even
00004A42                            
00004A42                            ; ---------------------------------------------------------------------------
00004A42                            ; Subroutine to	move Sonic in demo mode
00004A42                            ; ---------------------------------------------------------------------------
00004A42                            
00004A42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004A42                            
00004A42                            
00004A42                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00004A42 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004A46 6600                       		bne.s	MoveDemo_On	; if yes, branch
00004A48 4E75                       		rts	
00004A4A                            ; ===========================================================================
00004A4A                            
00004A4A                            ; This is an unused subroutine for recording a demo
00004A4A                            
00004A4A                            MoveDemo_Record:
00004A4A 43F9 0008 0000             		lea	($80000).l,a1
00004A50 3038 F790                  		move.w	($FFFFF790).w,d0
00004A54 D2C0                       		adda.w	d0,a1
00004A56 1038 F604                  		move.b	($FFFFF604).w,d0
00004A5A B011                       		cmp.b	(a1),d0
00004A5C 6600                       		bne.s	loc_3FFA
00004A5E 5229 0001                  		addq.b	#1,1(a1)
00004A62 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004A68 6700                       		beq.s	loc_3FFA
00004A6A 4E75                       		rts	
00004A6C                            ; ===========================================================================
00004A6C                            
00004A6C                            loc_3FFA:				; XREF: MoveDemo_Record
00004A6C 1340 0002                  		move.b	d0,2(a1)
00004A70 137C 0000 0003             		move.b	#0,3(a1)
00004A76 5478 F790                  		addq.w	#2,($FFFFF790).w
00004A7A 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
00004A80 4E75                       		rts	
00004A82                            ; ===========================================================================
00004A82                            
00004A82                            MoveDemo_On:				; XREF: MoveSonicInDemo
00004A82 4A38 F604                  		tst.b	($FFFFF604).w
00004A86 6A00                       		bpl.s	loc_4022
00004A88 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004A8C 6B00                       		bmi.s	loc_4022
00004A8E 11FC 0004 F600             		move.b	#4,($FFFFF600).w
00004A94                            
00004A94                            loc_4022:
00004A94 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004A9A 7000                       		moveq	#0,d0
00004A9C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004AA0 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004AA6 6600                       		bne.s	loc_4038
00004AA8 7006                       		moveq	#6,d0
00004AAA                            
00004AAA                            loc_4038:
00004AAA E548                       		lsl.w	#2,d0
00004AAC 2271 0000                  		movea.l	(a1,d0.w),a1
00004AB0 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004AB4 6A00                       		bpl.s	loc_4056
00004AB6 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00004ABC 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00004AC0 5340                       		subq.w	#1,d0
00004AC2 E548                       		lsl.w	#2,d0
00004AC4 2271 0000                  		movea.l	(a1,d0.w),a1
00004AC8                            
00004AC8                            loc_4056:
00004AC8 3038 F790                  		move.w	($FFFFF790).w,d0
00004ACC D2C0                       		adda.w	d0,a1
00004ACE 1011                       		move.b	(a1),d0
00004AD0 41F8 F604                  		lea	($FFFFF604).w,a0
00004AD4 1200                       		move.b	d0,d1
00004AD6 1410                       		move.b	(a0),d2
00004AD8 B500                       		eor.b	d2,d0
00004ADA 10C1                       		move.b	d1,(a0)+
00004ADC C001                       		and.b	d1,d0
00004ADE 10C0                       		move.b	d0,(a0)+
00004AE0 5338 F792                  		subq.b	#1,($FFFFF792).w
00004AE4 6400                       		bcc.s	locret_407E
00004AE6 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
00004AEC 5478 F790                  		addq.w	#2,($FFFFF790).w
00004AF0                            
00004AF0                            locret_407E:
00004AF0 4E75                       		rts	
00004AF2                            ; End of function MoveSonicInDemo
00004AF2                            
00004AF2                            ; ===========================================================================
00004AF2                            ; ---------------------------------------------------------------------------
00004AF2                            ; Demo sequence	pointers
00004AF2                            ; ---------------------------------------------------------------------------
00004AF2                            Demo_Index:
00004AF2                            	include "_inc\Demo pointers for intro.asm"
00004AF2                            ; ---------------------------------------------------------------------------
00004AF2                            ; Demo sequence	pointers
00004AF2                            ; ---------------------------------------------------------------------------
00004AF2 0000 0000                  	dc.l Demo_GHZ
00004AF6 0000 0000                  	dc.l Demo_GHZ
00004AFA 0000 0000                  	dc.l Demo_MZ
00004AFE 0000 0000                  	dc.l Demo_MZ
00004B02 0000 0000                  	dc.l Demo_SYZ
00004B06 0000 0000                  	dc.l Demo_SYZ
00004B0A 0000 0000                  	dc.l Demo_SS
00004B0E 0000 0000                  	dc.l Demo_SS
00004B0E 0000 0000                  	dc.l Demo_SS
00004B12                            
00004B12                            Demo_EndIndex:
00004B12                            	include "_inc\Demo pointers for ending.asm"
00004B12                            ; ---------------------------------------------------------------------------
00004B12                            ; Demo (ending) sequence pointers
00004B12                            ; ---------------------------------------------------------------------------
00004B12 0000 0000                  	dc.l Demo_EndGHZ1
00004B16 0000 0000                  	dc.l Demo_EndMZ
00004B1A 0000 0000                  	dc.l Demo_EndSYZ
00004B1E 0000 0000                  	dc.l Demo_EndLZ
00004B22 0000 0000                  	dc.l Demo_EndSLZ
00004B26 0000 0000                  	dc.l Demo_EndSBZ1
00004B2A 0000 0000                  	dc.l Demo_EndSBZ2
00004B2E 0000 0000                  	dc.l Demo_EndGHZ2
00004B2E 0000 0000                  	dc.l Demo_EndGHZ2
00004B32                            
00004B32 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00004B42 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00004B52 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004B62                            		even
00004B62                            
00004B62                            ; ---------------------------------------------------------------------------
00004B62                            ; Collision index loading subroutine
00004B62                            ; ---------------------------------------------------------------------------
00004B62                            
00004B62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004B62                            
00004B62                            
00004B62                            ColIndexLoad:				; XREF: Level
00004B62 7000                       		moveq	#0,d0
00004B64 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004B68 E548                       		lsl.w	#2,d0
00004B6A 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
00004B70 4E75                       		rts	
00004B72                            ; End of function ColIndexLoad
00004B72                            
00004B72                            ; ===========================================================================
00004B72                            ; ---------------------------------------------------------------------------
00004B72                            ; Collision index pointers
00004B72                            ; ---------------------------------------------------------------------------
00004B72                            ColPointers:
00004B72                            	include "_inc\Collision index pointers.asm"
00004B72                            ; ---------------------------------------------------------------------------
00004B72                            ; Collision index pointers
00004B72                            ; ---------------------------------------------------------------------------
00004B72 0000 0000                  	dc.l Col_GHZ
00004B76 0000 0000                  	dc.l Col_LZ
00004B7A 0000 0000                  	dc.l Col_MZ
00004B7E 0000 0000                  	dc.l Col_SLZ
00004B82 0000 0000                  	dc.l Col_SYZ
00004B86 0000 0000                  	dc.l Col_SBZ
00004B86 0000 0000                  	dc.l Col_SBZ
00004B8A                            
00004B8A                            ; ---------------------------------------------------------------------------
00004B8A                            ; Oscillating number subroutine
00004B8A                            ; ---------------------------------------------------------------------------
00004B8A                            
00004B8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004B8A                            
00004B8A                            
00004B8A                            OscillateNumInit:			; XREF: Level
00004B8A 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004B8E 45F9 0000 0000             		lea	(Osc_Data).l,a2
00004B94 7220                       		moveq	#$20,d1
00004B96                            
00004B96                            Osc_Loop:
00004B96 32DA                       		move.w	(a2)+,(a1)+
00004B98 51C9 FFFC                  		dbf	d1,Osc_Loop
00004B9C 4E75                       		rts	
00004B9E                            ; End of function OscillateNumInit
00004B9E                            
00004B9E                            ; ===========================================================================
00004B9E 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00004BA2 0000 0080                  		dc.w 0,	$80
00004BA6 0000 0080                  		dc.w 0,	$80
00004BAA 0000 0080                  		dc.w 0,	$80
00004BAE 0000 0080                  		dc.w 0,	$80
00004BB2 0000 0080                  		dc.w 0,	$80
00004BB6 0000 0080                  		dc.w 0,	$80
00004BBA 0000 0080                  		dc.w 0,	$80
00004BBE 0000 0080                  		dc.w 0,	$80
00004BC2 0000 50F0                  		dc.w 0,	$50F0
00004BC6 011E 2080                  		dc.w $11E, $2080
00004BCA 00B4 3080                  		dc.w $B4, $3080
00004BCE 010E 5080                  		dc.w $10E, $5080
00004BD2 01C2 7080                  		dc.w $1C2, $7080
00004BD6 0276 0080                  		dc.w $276, $80
00004BDA 0000 0080                  		dc.w 0,	$80
00004BDE 0000                       		dc.w 0
00004BE0                            		even
00004BE0                            
00004BE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004BE0                            
00004BE0                            
00004BE0                            OscillateNumDo:				; XREF: Level
00004BE0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004BE6 6400                       		bcc.s	locret_41C4
00004BE8 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004BEC 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00004BF2 3619                       		move.w	(a1)+,d3
00004BF4 720F                       		moveq	#$F,d1
00004BF6                            
00004BF6                            loc_4184:
00004BF6 341A                       		move.w	(a2)+,d2
00004BF8 381A                       		move.w	(a2)+,d4
00004BFA 0303                       		btst	d1,d3
00004BFC 6600                       		bne.s	loc_41A4
00004BFE 3029 0002                  		move.w	2(a1),d0
00004C02 D042                       		add.w	d2,d0
00004C04 3340 0002                  		move.w	d0,2(a1)
00004C08 D151                       		add.w	d0,0(a1)
00004C0A B811                       		cmp.b	0(a1),d4
00004C0C 6200                       		bhi.s	loc_41BA
00004C0E 03C3                       		bset	d1,d3
00004C10 6000                       		bra.s	loc_41BA
00004C12                            ; ===========================================================================
00004C12                            
00004C12                            loc_41A4:				; XREF: OscillateNumDo
00004C12 3029 0002                  		move.w	2(a1),d0
00004C16 9042                       		sub.w	d2,d0
00004C18 3340 0002                  		move.w	d0,2(a1)
00004C1C D151                       		add.w	d0,0(a1)
00004C1E B811                       		cmp.b	0(a1),d4
00004C20 6300                       		bls.s	loc_41BA
00004C22 0383                       		bclr	d1,d3
00004C24                            
00004C24                            loc_41BA:
00004C24 5849                       		addq.w	#4,a1
00004C26 51C9 FFCE                  		dbf	d1,loc_4184
00004C2A 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00004C2E                            
00004C2E                            locret_41C4:
00004C2E 4E75                       		rts	
00004C30                            ; End of function OscillateNumDo
00004C30                            
00004C30                            ; ===========================================================================
00004C30 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
00004C34 0002 0018                  		dc.w 2,	$18
00004C38 0002 0020                  		dc.w 2,	$20
00004C3C 0002 0030                  		dc.w 2,	$30
00004C40 0004 0020                  		dc.w 4,	$20
00004C44 0008 0008                  		dc.w 8,	8
00004C48 0008 0040                  		dc.w 8,	$40
00004C4C 0004 0040                  		dc.w 4,	$40
00004C50 0002 0050                  		dc.w 2,	$50
00004C54 0002 0050                  		dc.w 2,	$50
00004C58 0002 0020                  		dc.w 2,	$20
00004C5C 0003 0030                  		dc.w 3,	$30
00004C60 0005 0050                  		dc.w 5,	$50
00004C64 0007 0070                  		dc.w 7,	$70
00004C68 0002 0010                  		dc.w 2,	$10
00004C6C 0002 0010                  		dc.w 2,	$10
00004C70                            		even
00004C70                            
00004C70                            ; ---------------------------------------------------------------------------
00004C70                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00004C70                            ; ---------------------------------------------------------------------------
00004C70                            
00004C70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004C70                            
00004C70                            
00004C70                            ChangeRingFrame:			; XREF: Level
00004C70 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004C74 6A00                       		bpl.s	loc_421C
00004C76 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00004C7C 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00004C80 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004C86                            
00004C86                            loc_421C:
00004C86 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00004C8A 6A00                       		bpl.s	loc_4232
00004C8C 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00004C92 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004C96 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00004C9C                            
00004C9C                            loc_4232:
00004C9C 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00004CA0 6A00                       		bpl.s	loc_4250
00004CA2 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004CA8 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00004CAC 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00004CB2 6500                       		bcs.s	loc_4250
00004CB4 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00004CBA                            
00004CBA                            loc_4250:
00004CBA 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00004CBE 6700                       		beq.s	locret_4272
00004CC0 7000                       		moveq	#0,d0
00004CC2 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00004CC6 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00004CCA 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
00004CCE EF58                       		rol.w	#7,d0
00004CD0 0240 0003                  		andi.w	#3,d0
00004CD4 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00004CD8 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
00004CDC                            
00004CDC                            locret_4272:
00004CDC 4E75                       		rts	
00004CDE                            ; End of function ChangeRingFrame
00004CDE                            
00004CDE                            ; ---------------------------------------------------------------------------
00004CDE                            ; End-of-act signpost pattern loading subroutine
00004CDE                            ; ---------------------------------------------------------------------------
00004CDE                            
00004CDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004CDE                            
00004CDE                            
00004CDE                            SignpostArtLoad:			; XREF: Level
00004CDE 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004CE2 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00004CE6 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
00004CEC 6700                       		beq.s	Signpost_Exit	; if yes, branch
00004CEE 3038 F700                  		move.w	($FFFFF700).w,d0
00004CF2 3238 F72A                  		move.w	($FFFFF72A).w,d1
00004CF6 0441 0100                  		subi.w	#$100,d1
00004CFA B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00004CFC 6D00                       		blt.s	Signpost_Exit	; if not, branch
00004CFE 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00004D02 6700                       		beq.s	Signpost_Exit
00004D04 B278 F728                  		cmp.w	($FFFFF728).w,d1
00004D08 6700                       		beq.s	Signpost_Exit
00004D0A 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
00004D0E 7012                       		moveq	#$12,d0
00004D10 6000 CA0A                  		bra.w	LoadPLC2	; load signpost	patterns
00004D14                            ; ===========================================================================
00004D14                            
00004D14                            Signpost_Exit:
00004D14 4E75                       		rts	
00004D16                            ; End of function SignpostArtLoad
00004D16                            
00004D16                            ; ===========================================================================
00004D16                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004D96                            Demo_MZ:	incbin	demodata\i_mz.bin
00004EC6                            Demo_SYZ:	incbin	demodata\i_syz.bin
00004F46                            Demo_SS:	incbin	demodata\i_ss.bin
00005046                            ; ===========================================================================
00005046                            
00005046                            ; ---------------------------------------------------------------------------
00005046                            ; Special Stage
00005046                            ; ---------------------------------------------------------------------------
00005046                            
00005046                            SpecialStage:				; XREF: GameModeArray
00005046 303C 00CA                  		move.w	#$CA,d0
0000504A 6100 C42A                  		bsr.w	PlaySound_Special ; play special stage entry sound
0000504E 6100 D25E                  		bsr.w	Pal_MakeFlash
00005052 46FC 2700                  		move	#$2700,sr
00005056 4DF9 00C0 0004             		lea	($C00004).l,a6
0000505C 3CBC 8B03                  		move.w	#$8B03,(a6)
00005060 3CBC 8004                  		move.w	#$8004,(a6)
00005064 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
0000506A 3CBC 9011                  		move.w	#$9011,(a6)
0000506E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005072 0200 00BF                  		andi.b	#$BF,d0
00005076 33C0 00C0 0004             		move.w	d0,($C00004).l
0000507C 6100 C302                  		bsr.w	ClearScreen
00005080 46FC 2300                  		move	#$2300,sr
00005084 4BF9 00C0 0004             		lea	($C00004).l,a5
0000508A 3ABC 8F01                  		move.w	#$8F01,(a5)
0000508E 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00005094 3ABC 9780                  		move.w	#$9780,(a5)
00005098 2ABC 5000 0081             		move.l	#$50000081,(a5)
0000509E 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000050A6                            
000050A6                            loc_463C:
000050A6 3215                       		move.w	(a5),d1
000050A8 0801 0001                  		btst	#1,d1
000050AC 66F8                       		bne.s	loc_463C
000050AE 3ABC 8F02                  		move.w	#$8F02,(a5)
000050B2 6100 0000                  		bsr.w	SS_BGLoad
000050B6 7014                       		moveq	#$14,d0
000050B8 6100 C79C                  		bsr.w	RunPLC_ROM	; load special stage patterns
000050BC 43F8 D000                  		lea	($FFFFD000).w,a1
000050C0 7000                       		moveq	#0,d0
000050C2 323C 07FF                  		move.w	#$7FF,d1
000050C6                            
000050C6                            SS_ClrObjRam:
000050C6 22C0                       		move.l	d0,(a1)+
000050C8 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
000050CC                            
000050CC 43F8 F700                  		lea	($FFFFF700).w,a1
000050D0 7000                       		moveq	#0,d0
000050D2 323C 003F                  		move.w	#$3F,d1
000050D6                            
000050D6                            SS_ClrRam:
000050D6 22C0                       		move.l	d0,(a1)+
000050D8 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
000050DC                            
000050DC 43F8 FE60                  		lea	($FFFFFE60).w,a1
000050E0 7000                       		moveq	#0,d0
000050E2 323C 0027                  		move.w	#$27,d1
000050E6                            
000050E6                            SS_ClrRam2:
000050E6 22C0                       		move.l	d0,(a1)+
000050E8 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
000050EC                            
000050EC 43F8 AA00                  		lea	($FFFFAA00).w,a1
000050F0 7000                       		moveq	#0,d0
000050F2 323C 007F                  		move.w	#$7F,d1
000050F6                            
000050F6                            SS_ClrNemRam:
000050F6 22C0                       		move.l	d0,(a1)+
000050F8 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
000050FC                            
000050FC 4238 F64E                  		clr.b	($FFFFF64E).w
00005100 4278 FE02                  		clr.w	($FFFFFE02).w
00005104 700A                       		moveq	#$A,d0
00005106 6100 D326                  		bsr.w	PalLoad1	; load special stage pallet
0000510A 4EB9 0000 0000             		jsr	SS_Load
00005110 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00005118 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00005120 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00005126 6100 0000                  		bsr.w	PalCycle_SS
0000512A 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
0000512E 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
00005134 303C 0089                  		move.w	#$89,d0
00005138 6100 C336                  		bsr.w	PlaySound	; play special stage BG	music
0000513C 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00005142 43F9 0000 4AF2             		lea	(Demo_Index).l,a1
00005148 7006                       		moveq	#6,d0
0000514A E548                       		lsl.w	#2,d0
0000514C 2271 0000                  		movea.l	(a1,d0.w),a1
00005150 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00005156 5338 F792                  		subq.b	#1,($FFFFF792).w
0000515A 4278 FE20                  		clr.w	($FFFFFE20).w
0000515E 4238 FE1B                  		clr.b	($FFFFFE1B).w
00005162 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00005168 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
0000516E 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00005172 6700                       		beq.s	SS_NoDebug	; if not, branch
00005174 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
0000517A 6700                       		beq.s	SS_NoDebug	; if not, branch
0000517C 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005182                            
00005182                            SS_NoDebug:
00005182 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005186 0000 0040                  		ori.b	#$40,d0
0000518A 33C0 00C0 0004             		move.w	d0,($C00004).l
00005190 6100 D070                  		bsr.w	Pal_MakeWhite
00005194                            
00005194                            ; ---------------------------------------------------------------------------
00005194                            ; Main Special Stage loop
00005194                            ; ---------------------------------------------------------------------------
00005194                            
00005194                            SS_MainLoop:
00005194 6100 C2EC                  		bsr.w	PauseGame
00005198 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
0000519E 6100 E202                  		bsr.w	DelayProgram
000051A2 6100 F89E                  		bsr.w	MoveSonicInDemo
000051A6 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
000051AC 4EB9 0000 0000             		jsr	ObjectsLoad
000051B2 4EB9 0000 0000             		jsr	BuildSprites
000051B8 4EB9 0000 0000             		jsr	SS_ShowLayout
000051BE 6100 0000                  		bsr.w	SS_BGAnimate
000051C2 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000051C6 6700                       		beq.s	SS_ChkEnd	; if not, branch
000051C8 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
000051CC 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
000051D0                            
000051D0                            SS_ChkEnd:
000051D0 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
000051D6 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
000051DA                            
000051DA 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000051DE 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
000051E2 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000051E8 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
000051EE 6500                       		bcs.s	SS_End		; if not, branch
000051F0 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
000051F4                            
000051F4                            SS_End:
000051F4 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
000051FA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005200 4278 F794                  		clr.w	($FFFFF794).w
00005204                            
00005204                            SS_EndLoop:
00005204 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
0000520A 6100 E196                  		bsr.w	DelayProgram
0000520E 6100 F832                  		bsr.w	MoveSonicInDemo
00005212 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00005218 4EB9 0000 0000             		jsr	ObjectsLoad
0000521E 4EB9 0000 0000             		jsr	BuildSprites
00005224 4EB9 0000 0000             		jsr	SS_ShowLayout
0000522A 6100 0000                  		bsr.w	SS_BGAnimate
0000522E 5378 F794                  		subq.w	#1,($FFFFF794).w
00005232 6A00                       		bpl.s	loc_47D4
00005234 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000523A 6100 D092                  		bsr.w	Pal_ToWhite
0000523E                            
0000523E                            loc_47D4:
0000523E 4A78 F614                  		tst.w	($FFFFF614).w
00005242 66C0                       		bne.s	SS_EndLoop
00005244                            
00005244 46FC 2700                  		move	#$2700,sr
00005248 4DF9 00C0 0004             		lea	($C00004).l,a6
0000524E 3CBC 8230                  		move.w	#$8230,(a6)
00005252 3CBC 8407                  		move.w	#$8407,(a6)
00005256 3CBC 9001                  		move.w	#$9001,(a6)
0000525A 6100 C124                  		bsr.w	ClearScreen
0000525E 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00005268 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000526E 6100 C33A                  		bsr.w	NemDec
00005272 4EB9 0000 0000             		jsr	Hud_Base
00005278 4278 C800                  		clr.w	($FFFFC800).w
0000527C 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
00005284 46FC 2300                  		move	#$2300,sr
00005288 7011                       		moveq	#$11,d0
0000528A 6100 D1DE                  		bsr.w	PalLoad2	; load results screen pallet
0000528E 7000                       		moveq	#0,d0
00005290 6100 C48A                  		bsr.w	LoadPLC2
00005294 701B                       		moveq	#$1B,d0
00005296 6100 C452                  		bsr.w	LoadPLC		; load results screen patterns
0000529A 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
000052A0 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
000052A6 3038 FE20                  		move.w	($FFFFFE20).w,d0
000052AA C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
000052AE 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
000052B2 303C 008E                  		move.w	#$8E,d0
000052B6 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play end-of-level music
000052BC 43F8 D000                  		lea	($FFFFD000).w,a1
000052C0 7000                       		moveq	#0,d0
000052C2 323C 07FF                  		move.w	#$7FF,d1
000052C6                            
000052C6                            SS_EndClrObjRam:
000052C6 22C0                       		move.l	d0,(a1)+
000052C8 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
000052CC                            
000052CC 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
000052D2                            
000052D2                            SS_NormalExit:
000052D2 6100 C1AE                  		bsr.w	PauseGame
000052D6 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
000052DC 6100 E0C4                  		bsr.w	DelayProgram
000052E0 4EB9 0000 0000             		jsr	ObjectsLoad
000052E6 4EB9 0000 0000             		jsr	BuildSprites
000052EC 6100 C468                  		bsr.w	RunPLC_RAM
000052F0 4A78 FE02                  		tst.w	($FFFFFE02).w
000052F4 67DC                       		beq.s	SS_NormalExit
000052F6 4AB8 F680                  		tst.l	($FFFFF680).w
000052FA 66D6                       		bne.s	SS_NormalExit
000052FC 303C 00CA                  		move.w	#$CA,d0
00005300 6100 C174                  		bsr.w	PlaySound_Special ; play special stage exit sound
00005304 6100 CFA8                  		bsr.w	Pal_MakeFlash
00005308 4E75                       		rts	
0000530A                            ; ===========================================================================
0000530A                            
0000530A                            SS_ToSegaScreen:
0000530A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00005310 4E75                       		rts
00005312                            
00005312                            ; ---------------------------------------------------------------------------
00005312                            ; Special stage	background loading subroutine
00005312                            ; ---------------------------------------------------------------------------
00005312                            
00005312                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005312                            
00005312                            
00005312                            SS_BGLoad:				; XREF: SpecialStage
00005312 43F9 00FF 0000             		lea	($FF0000).l,a1
00005318 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
0000531E 303C 4051                  		move.w	#$4051,d0
00005322 6100 C564                  		bsr.w	EniDec
00005326 263C 5000 0001             		move.l	#$50000001,d3
0000532C 45F9 00FF 0080             		lea	($FF0080).l,a2
00005332 7E06                       		moveq	#6,d7
00005334                            
00005334                            loc_48BE:
00005334 2003                       		move.l	d3,d0
00005336 7C03                       		moveq	#3,d6
00005338 7800                       		moveq	#0,d4
0000533A 0C47 0003                  		cmpi.w	#3,d7
0000533E 6400                       		bcc.s	loc_48CC
00005340 7801                       		moveq	#1,d4
00005342                            
00005342                            loc_48CC:
00005342 7A07                       		moveq	#7,d5
00005344                            
00005344                            loc_48CE:
00005344 224A                       		movea.l	a2,a1
00005346 0A04 0001                  		eori.b	#1,d4
0000534A 6600                       		bne.s	loc_48E2
0000534C 0C47 0006                  		cmpi.w	#6,d7
00005350 6600                       		bne.s	loc_48F2
00005352 43F9 00FF 0000             		lea	($FF0000).l,a1
00005358                            
00005358                            loc_48E2:
00005358 48E7 F800                  		movem.l	d0-d4,-(sp)
0000535C 7207                       		moveq	#7,d1
0000535E 7407                       		moveq	#7,d2
00005360 6100 C198                  		bsr.w	ShowVDPGraphics
00005364 4CDF 001F                  		movem.l	(sp)+,d0-d4
00005368                            
00005368                            loc_48F2:
00005368 0680 0010 0000             		addi.l	#$100000,d0
0000536E 51CD FFD4                  		dbf	d5,loc_48CE
00005372 0680 0380 0000             		addi.l	#$3800000,d0
00005378 0A04 0001                  		eori.b	#1,d4
0000537C 51CE FFC4                  		dbf	d6,loc_48CC
00005380 0683 1000 0000             		addi.l	#$10000000,d3
00005386 6A00                       		bpl.s	loc_491C
00005388 4843                       		swap	d3
0000538A 0683 0000 C000             		addi.l	#$C000,d3
00005390 4843                       		swap	d3
00005392                            
00005392                            loc_491C:
00005392 D4FC 0080                  		adda.w	#$80,a2
00005396 51CF FF9C                  		dbf	d7,loc_48BE
0000539A 43F9 00FF 0000             		lea	($FF0000).l,a1
000053A0 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
000053A6 303C 4000                  		move.w	#$4000,d0
000053AA 6100 C4DC                  		bsr.w	EniDec
000053AE 43F9 00FF 0000             		lea	($FF0000).l,a1
000053B4 203C 4000 0003             		move.l	#$40000003,d0
000053BA 723F                       		moveq	#$3F,d1
000053BC 741F                       		moveq	#$1F,d2
000053BE 6100 C13A                  		bsr.w	ShowVDPGraphics
000053C2 43F9 00FF 0000             		lea	($FF0000).l,a1
000053C8 203C 5000 0003             		move.l	#$50000003,d0
000053CE 723F                       		moveq	#$3F,d1
000053D0 743F                       		moveq	#$3F,d2
000053D2 6100 C126                  		bsr.w	ShowVDPGraphics
000053D6 4E75                       		rts	
000053D8                            ; End of function SS_BGLoad
000053D8                            
000053D8                            ; ---------------------------------------------------------------------------
000053D8                            ; Pallet cycling routine - special stage
000053D8                            ; ---------------------------------------------------------------------------
000053D8                            
000053D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000053D8                            
000053D8                            
000053D8                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
000053D8 4A78 F63A                  		tst.w	($FFFFF63A).w
000053DC 6600                       		bne.s	locret_49E6
000053DE 5378 F79C                  		subq.w	#1,($FFFFF79C).w
000053E2 6A00                       		bpl.s	locret_49E6
000053E4 4DF9 00C0 0004             		lea	($C00004).l,a6
000053EA 3038 F79A                  		move.w	($FFFFF79A).w,d0
000053EE 5278 F79A                  		addq.w	#1,($FFFFF79A).w
000053F2 0240 001F                  		andi.w	#$1F,d0
000053F6 E548                       		lsl.w	#2,d0
000053F8 41F9 0000 0000             		lea	(byte_4A3C).l,a0
000053FE D0C0                       		adda.w	d0,a0
00005400 1018                       		move.b	(a0)+,d0
00005402 6A00                       		bpl.s	loc_4992
00005404 303C 01FF                  		move.w	#$1FF,d0
00005408                            
00005408                            loc_4992:
00005408 31C0 F79C                  		move.w	d0,($FFFFF79C).w
0000540C 7000                       		moveq	#0,d0
0000540E 1018                       		move.b	(a0)+,d0
00005410 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00005414 43F9 0000 0000             		lea	(byte_4ABC).l,a1
0000541A 43F1 0000                  		lea	(a1,d0.w),a1
0000541E 303C 8200                  		move.w	#-$7E00,d0
00005422 1019                       		move.b	(a1)+,d0
00005424 3C80                       		move.w	d0,(a6)
00005426 11D1 F616                  		move.b	(a1),($FFFFF616).w
0000542A 303C 8400                  		move.w	#-$7C00,d0
0000542E 1018                       		move.b	(a0)+,d0
00005430 3C80                       		move.w	d0,(a6)
00005432 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
0000543C 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00005444 7000                       		moveq	#0,d0
00005446 1018                       		move.b	(a0)+,d0
00005448 6B00                       		bmi.s	loc_49E8
0000544A 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00005450 D2C0                       		adda.w	d0,a1
00005452 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00005456 24D9                       		move.l	(a1)+,(a2)+
00005458 24D9                       		move.l	(a1)+,(a2)+
0000545A 24D9                       		move.l	(a1)+,(a2)+
0000545C                            
0000545C                            locret_49E6:
0000545C 4E75                       		rts	
0000545E                            ; ===========================================================================
0000545E                            
0000545E                            loc_49E8:				; XREF: PalCycle_SS
0000545E 3238 F79E                  		move.w	($FFFFF79E).w,d1
00005462 0C40 008A                  		cmpi.w	#$8A,d0
00005466 6500                       		bcs.s	loc_49F4
00005468 5241                       		addq.w	#1,d1
0000546A                            
0000546A                            loc_49F4:
0000546A C2FC 002A                  		mulu.w	#$2A,d1
0000546E 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00005474 D2C1                       		adda.w	d1,a1
00005476 0240 007F                  		andi.w	#$7F,d0
0000547A 0880 0000                  		bclr	#0,d0
0000547E 6700                       		beq.s	loc_4A18
00005480 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00005484 24D1                       		move.l	(a1),(a2)+
00005486 24E9 0004                  		move.l	4(a1),(a2)+
0000548A 24E9 0008                  		move.l	8(a1),(a2)+
0000548E                            
0000548E                            loc_4A18:
0000548E D2FC 000C                  		adda.w	#$C,a1
00005492 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00005496 0C40 000A                  		cmpi.w	#$A,d0
0000549A 6500                       		bcs.s	loc_4A2E
0000549C 0440 000A                  		subi.w	#$A,d0
000054A0 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
000054A4                            
000054A4                            loc_4A2E:
000054A4 3200                       		move.w	d0,d1
000054A6 D040                       		add.w	d0,d0
000054A8 D041                       		add.w	d1,d0
000054AA D2C0                       		adda.w	d0,a1
000054AC 24D9                       		move.l	(a1)+,(a2)+
000054AE 34D9                       		move.w	(a1)+,(a2)+
000054B0 4E75                       		rts	
000054B2                            ; End of function PalCycle_SS
000054B2                            
000054B2                            ; ===========================================================================
000054B2 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
000054C2                            					; XREF: PalCycle_SS
000054C2 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
000054D2 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
000054E2 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
000054F2 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00005502 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00005512 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00005522 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00005532                            		even
00005532 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00005540                            					; XREF: PalCycle_SS
00005540                            		even
00005540                            
00005540                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00005588                            		even
00005588                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
0000565A                            		even
0000565A                            
0000565A                            ; ---------------------------------------------------------------------------
0000565A                            ; Subroutine to	make the special stage background animated
0000565A                            ; ---------------------------------------------------------------------------
0000565A                            
0000565A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000565A                            
0000565A                            
0000565A                            SS_BGAnimate:				; XREF: SpecialStage
0000565A 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
0000565E 6600                       		bne.s	loc_4BF6
00005660 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00005666 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000566C                            
0000566C                            loc_4BF6:
0000566C 0C40 0008                  		cmpi.w	#8,d0
00005670 6400                       		bcc.s	loc_4C4E
00005672 0C40 0006                  		cmpi.w	#6,d0
00005676 6600                       		bne.s	loc_4C10
00005678 5278 F718                  		addq.w	#1,($FFFFF718).w
0000567C 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00005680 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005686                            
00005686                            loc_4C10:
00005686 7000                       		moveq	#0,d0
00005688 3038 F708                  		move.w	($FFFFF708).w,d0
0000568C 4440                       		neg.w	d0
0000568E 4840                       		swap	d0
00005690 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00005696 47F8 AA00                  		lea	($FFFFAA00).w,a3
0000569A 7609                       		moveq	#9,d3
0000569C                            
0000569C                            loc_4C26:
0000569C 302B 0002                  		move.w	2(a3),d0
000056A0 6100 DD32                  		bsr.w	CalcSine
000056A4 7400                       		moveq	#0,d2
000056A6 1419                       		move.b	(a1)+,d2
000056A8 C1C2                       		muls.w	d2,d0
000056AA E080                       		asr.l	#8,d0
000056AC 36C0                       		move.w	d0,(a3)+
000056AE 1419                       		move.b	(a1)+,d2
000056B0 4882                       		ext.w	d2
000056B2 D55B                       		add.w	d2,(a3)+
000056B4 51CB FFE6                  		dbf	d3,loc_4C26
000056B8 47F8 AA00                  		lea	($FFFFAA00).w,a3
000056BC 45F9 0000 0000             		lea	(byte_4CB8).l,a2
000056C2 6000                       		bra.s	loc_4C7E
000056C4                            ; ===========================================================================
000056C4                            
000056C4                            loc_4C4E:				; XREF: SS_BGAnimate
000056C4 0C40 000C                  		cmpi.w	#$C,d0
000056C8 6600                       		bne.s	loc_4C74
000056CA 5378 F718                  		subq.w	#1,($FFFFF718).w
000056CE 47F8 AB00                  		lea	($FFFFAB00).w,a3
000056D2 243C 0001 8000             		move.l	#$18000,d2
000056D8 7206                       		moveq	#6,d1
000056DA                            
000056DA                            loc_4C64:
000056DA 2013                       		move.l	(a3),d0
000056DC 9082                       		sub.l	d2,d0
000056DE 26C0                       		move.l	d0,(a3)+
000056E0 0482 0000 2000             		subi.l	#$2000,d2
000056E6 51C9 FFF2                  		dbf	d1,loc_4C64
000056EA                            
000056EA                            loc_4C74:
000056EA 47F8 AB00                  		lea	($FFFFAB00).w,a3
000056EE 45F9 0000 0000             		lea	(byte_4CC4).l,a2
000056F4                            
000056F4                            loc_4C7E:
000056F4 43F8 CC00                  		lea	($FFFFCC00).w,a1
000056F8 3038 F718                  		move.w	($FFFFF718).w,d0
000056FC 4440                       		neg.w	d0
000056FE 4840                       		swap	d0
00005700 7600                       		moveq	#0,d3
00005702 161A                       		move.b	(a2)+,d3
00005704 3438 F70C                  		move.w	($FFFFF70C).w,d2
00005708 4442                       		neg.w	d2
0000570A 0242 00FF                  		andi.w	#$FF,d2
0000570E E54A                       		lsl.w	#2,d2
00005710                            
00005710                            loc_4C9A:
00005710 301B                       		move.w	(a3)+,d0
00005712 544B                       		addq.w	#2,a3
00005714 7200                       		moveq	#0,d1
00005716 121A                       		move.b	(a2)+,d1
00005718 5341                       		subq.w	#1,d1
0000571A                            
0000571A                            loc_4CA4:
0000571A 2380 2000                  		move.l	d0,(a1,d2.w)
0000571E 5842                       		addq.w	#4,d2
00005720 0242 03FC                  		andi.w	#$3FC,d2
00005724 51C9 FFF4                  		dbf	d1,loc_4CA4
00005728 51CB FFE6                  		dbf	d3,loc_4C9A
0000572C 4E75                       		rts	
0000572E                            ; End of function SS_BGAnimate
0000572E                            
0000572E                            ; ===========================================================================
0000572E 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
0000573A                            		even
0000573A 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005742                            		even
00005742 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005756                            		even
00005756                            					; XREF: SS_BGAnimate
00005756                            ; ===========================================================================
00005756                            
00005756                            ; ---------------------------------------------------------------------------
00005756                            ; Continue screen
00005756                            ; ---------------------------------------------------------------------------
00005756                            
00005756                            ContinueScreen:				; XREF: GameModeArray
00005756 6100 CA28                  		bsr.w	Pal_FadeFrom
0000575A 46FC 2700                  		move	#$2700,sr
0000575E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005762 0200 00BF                  		andi.b	#$BF,d0
00005766 33C0 00C0 0004             		move.w	d0,($C00004).l
0000576C 4DF9 00C0 0004             		lea	($C00004).l,a6
00005772 3CBC 8004                  		move.w	#$8004,(a6)
00005776 3CBC 8700                  		move.w	#$8700,(a6)
0000577A 6100 BC04                  		bsr.w	ClearScreen
0000577E 43F8 D000                  		lea	($FFFFD000).w,a1
00005782 7000                       		moveq	#0,d0
00005784 323C 07FF                  		move.w	#$7FF,d1
00005788                            
00005788                            Cont_ClrObjRam:
00005788 22C0                       		move.l	d0,(a1)+
0000578A 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
0000578E                            
0000578E 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00005798 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000579E 6100 BE0A                  		bsr.w	NemDec
000057A2 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
000057AC 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
000057B2 6100 BDF6                  		bsr.w	NemDec
000057B6 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
000057C0 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
000057C6 6100 BDE2                  		bsr.w	NemDec
000057CA 720A                       		moveq	#10,d1
000057CC 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
000057D2 7012                       		moveq	#$12,d0
000057D4 6100 CC58                  		bsr.w	PalLoad1	; load continue	screen pallet
000057D8 103C 0090                  		move.b	#$90,d0
000057DC 6100 BC92                  		bsr.w	PlaySound	; play continue	music
000057E0 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
000057E6 42B8 F700                  		clr.l	($FFFFF700).w
000057EA 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
000057F2 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
000057F8 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
000057FE 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
00005804 11FC 0003 D098             		move.b	#3,($FFFFD098).w
0000580A 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00005810 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
00005816 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
0000581C 4EB9 0000 0000             		jsr	ObjectsLoad
00005822 4EB9 0000 0000             		jsr	BuildSprites
00005828 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000582C 0000 0040                  		ori.b	#$40,d0
00005830 33C0 00C0 0004             		move.w	d0,($C00004).l
00005836 6100 C892                  		bsr.w	Pal_FadeTo
0000583A                            
0000583A                            ; ---------------------------------------------------------------------------
0000583A                            ; Continue screen main loop
0000583A                            ; ---------------------------------------------------------------------------
0000583A                            
0000583A                            Cont_MainLoop:
0000583A 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00005840 6100 DB60                  		bsr.w	DelayProgram
00005844 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000584A 6400                       		bcc.s	loc_4DF2
0000584C 46FC 2700                  		move	#$2700,sr
00005850 3238 F614                  		move.w	($FFFFF614).w,d1
00005854 82FC 003C                  		divu.w	#$3C,d1
00005858 0281 0000 000F             		andi.l	#$F,d1
0000585E 4EB9 0000 0000             		jsr	ContScrCounter
00005864 46FC 2300                  		move	#$2300,sr
00005868                            
00005868                            loc_4DF2:
00005868 4EB9 0000 0000             		jsr	ObjectsLoad
0000586E 4EB9 0000 0000             		jsr	BuildSprites
00005874 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
0000587A 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
0000587C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005882 64B6                       		bcc.s	Cont_MainLoop
00005884 4A78 F614                  		tst.w	($FFFFF614).w
00005888 6600 FFB0                  		bne.w	Cont_MainLoop
0000588C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005892 4E75                       		rts	
00005894                            ; ===========================================================================
00005894                            
00005894                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00005894 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
0000589A 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000058A0 7000                       		moveq	#0,d0
000058A2 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000058A6 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000058AA 11C0 FEBF                          move.b    d0,($FFFFFEBF).w ; value used to increment centiseconds
000058AE 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000058B2 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
000058B6 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
000058BA 4E75                       		rts	
000058BC                            ; ===========================================================================
000058BC                            
000058BC                            ; ---------------------------------------------------------------------------
000058BC                            ; Object 80 - Continue screen elements
000058BC                            ; ---------------------------------------------------------------------------
000058BC                            
000058BC                            Obj80:					; XREF: Obj_Index
000058BC 7000                       		moveq	#0,d0
000058BE 1028 0024                  		move.b	$24(a0),d0
000058C2 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
000058C6 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
000058CA                            ; ===========================================================================
000058CA 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
000058CC 0000                       		dc.w Obj80_Display-Obj80_Index
000058CE 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
000058D0 0000                       		dc.w Obj80_ChkType-Obj80_Index
000058D2                            ; ===========================================================================
000058D2                            
000058D2                            Obj80_Main:				; XREF: Obj80_Index
000058D2 5428 0024                  		addq.b	#2,$24(a0)
000058D6 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000058DE 317C 8500 0002             		move.w	#$8500,2(a0)
000058E4 117C 0000 0001             		move.b	#0,1(a0)
000058EA 117C 003C 0019             		move.b	#$3C,$19(a0)
000058F0 317C 0120 0008             		move.w	#$120,8(a0)
000058F6 317C 00C0 000A             		move.w	#$C0,$A(a0)
000058FC 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
00005902                            
00005902                            Obj80_Display:				; XREF: Obj80_Index
00005902 4EF9 0000 0000             		jmp	DisplaySprite
00005908                            ; ===========================================================================
00005908                            Obj80_MiniSonicPos:
00005908 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
0000591A 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00005926                            ; ===========================================================================
00005926                            
00005926                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
00005926 2248                       		movea.l	a0,a1
00005928 45F9 0000 5908             		lea	(Obj80_MiniSonicPos).l,a2
0000592E 7200                       		moveq	#0,d1
00005930 1238 FE18                  		move.b	($FFFFFE18).w,d1
00005934 5501                       		subq.b	#2,d1
00005936 6400                       		bcc.s	loc_4EC4
00005938 4EF9 0000 0000             		jmp	DeleteObject
0000593E                            ; ===========================================================================
0000593E                            
0000593E                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
0000593E 7601                       		moveq	#1,d3
00005940 0C01 000E                  		cmpi.b	#$E,d1
00005944 6500                       		bcs.s	loc_4ED0
00005946 7600                       		moveq	#0,d3
00005948 720E                       		moveq	#$E,d1
0000594A                            
0000594A                            loc_4ED0:
0000594A 1401                       		move.b	d1,d2
0000594C 0202 0001                  		andi.b	#1,d2
00005950                            
00005950                            Obj80_MiniSonLoop:
00005950 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
00005954 335A 0008                  		move.w	(a2)+,8(a1)
00005958 4A02                       		tst.b	d2
0000595A 6700                       		beq.s	loc_4EEA
0000595C 0469 000A 0008             		subi.w	#$A,8(a1)
00005962                            
00005962                            loc_4EEA:
00005962 337C 00D0 000A             		move.w	#$D0,$A(a1)
00005968 137C 0006 001A             		move.b	#6,$1A(a1)
0000596E 137C 0006 0024             		move.b	#6,$24(a1)
00005974 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
0000597C 337C 8551 0002             		move.w	#$8551,2(a1)
00005982 137C 0000 0001             		move.b	#0,1(a1)
00005988 43E9 0040                  		lea	$40(a1),a1
0000598C 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
00005990 43E9 FFC0                  		lea	-$40(a1),a1
00005994 1343 0028                  		move.b	d3,$28(a1)
00005998                            
00005998                            Obj80_ChkType:				; XREF: Obj80_Index
00005998 4A28 0028                  		tst.b	$28(a0)
0000599C 6700                       		beq.s	loc_4F40
0000599E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000059A4 6500                       		bcs.s	loc_4F40
000059A6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000059AA 0200 0001                  		andi.b	#1,d0
000059AE 6600                       		bne.s	loc_4F40
000059B0 4A78 D010                  		tst.w	($FFFFD010).w
000059B4 6600                       		bne.s	Obj80_Delete
000059B6 4E75                       		rts	
000059B8                            ; ===========================================================================
000059B8                            
000059B8                            loc_4F40:				; XREF: Obj80_ChkType
000059B8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000059BC 0200 000F                  		andi.b	#$F,d0
000059C0 6600                       		bne.s	Obj80_Display2
000059C2 0868 0000 001A             		bchg	#0,$1A(a0)
000059C8                            
000059C8                            Obj80_Display2:
000059C8 4EF9 0000 0000             		jmp	DisplaySprite
000059CE                            ; ===========================================================================
000059CE                            
000059CE                            Obj80_Delete:				; XREF: Obj80_ChkType
000059CE 4EF9 0000 0000             		jmp	DeleteObject
000059D4                            ; ===========================================================================
000059D4                            
000059D4                            ; ---------------------------------------------------------------------------
000059D4                            ; Object 81 - Sonic on the continue screen
000059D4                            ; ---------------------------------------------------------------------------
000059D4                            
000059D4                            Obj81:					; XREF: Obj_Index
000059D4 7000                       		moveq	#0,d0
000059D6 1028 0024                  		move.b	$24(a0),d0
000059DA 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
000059DE 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
000059E2 4EF9 0000 0000             		jmp	DisplaySprite
000059E8                            ; ===========================================================================
000059E8 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
000059EA 0000                       		dc.w Obj81_ChkLand-Obj81_Index
000059EC 0000                       		dc.w Obj81_Animate-Obj81_Index
000059EE 0000                       		dc.w Obj81_Run-Obj81_Index
000059F0                            ; ===========================================================================
000059F0                            
000059F0                            Obj81_Main:				; XREF: Obj81_Index
000059F0 5428 0024                  		addq.b	#2,$24(a0)
000059F4 317C 00A0 0008             		move.w	#$A0,8(a0)
000059FA 317C 00C0 000C             		move.w	#$C0,$C(a0)
00005A00 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005A08 317C 0780 0002             		move.w	#$780,2(a0)
00005A0E 117C 0004 0001             		move.b	#4,1(a0)
00005A14 117C 0002 0018             		move.b	#2,$18(a0)
00005A1A 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
00005A20 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
00005A26                            
00005A26                            Obj81_ChkLand:				; XREF: Obj81_Index
00005A26 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00005A2C 6600                       		bne.s	Obj81_ShowFall	; if not, branch
00005A2E 5428 0024                  		addq.b	#2,$24(a0)
00005A32 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00005A36 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005A3E 317C 8500 0002             		move.w	#$8500,2(a0)
00005A44 117C 0000 001C             		move.b	#0,$1C(a0)
00005A4A 6000                       		bra.s	Obj81_Animate
00005A4C                            ; ===========================================================================
00005A4C                            
00005A4C                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005A4C 4EB9 0000 0000             		jsr	SpeedToPos
00005A52 4EB9 0000 0000             		jsr	Sonic_Animate
00005A58 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005A5E                            ; ===========================================================================
00005A5E                            
00005A5E                            Obj81_Animate:				; XREF: Obj81_Index
00005A5E 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
00005A62 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00005A64 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00005A6A 4EF9 0000 0000             		jmp	AnimateSprite
00005A70                            ; ===========================================================================
00005A70                            
00005A70                            Obj81_GetUp:				; XREF: Obj81_Animate
00005A70 5428 0024                  		addq.b	#2,$24(a0)
00005A74 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005A7C 317C 0780 0002             		move.w	#$780,2(a0)
00005A82 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005A88 4268 0014                  		clr.w	$14(a0)
00005A8C 5168 000C                  		subq.w	#8,$C(a0)
00005A90 103C 00E0                  		move.b	#$E0,d0
00005A94 6100 B9E0                  		bsr.w	PlaySound_Special ; fade out music
00005A98                            
00005A98                            Obj81_Run:				; XREF: Obj81_Index
00005A98 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
00005A9E 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
00005AA0 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005AA6 6000                       		bra.s	Obj81_ShowRun
00005AA8                            ; ===========================================================================
00005AA8                            
00005AA8                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005AA8 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
00005AAE                            
00005AAE                            Obj81_ShowRun:				; XREF: Obj81_Run
00005AAE 4EB9 0000 0000             		jsr	SpeedToPos
00005AB4 4EB9 0000 0000             		jsr	Sonic_Animate
00005ABA 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005AC0                            ; ===========================================================================
00005AC0                            Ani_obj81:
00005AC0                            	include "_anim\obj81.asm"
00005AC0                            ; ---------------------------------------------------------------------------
00005AC0                            ; Animation script - Sonic on the continue screen
00005AC0                            ; ---------------------------------------------------------------------------
00005AC0 0000                       		dc.w byte_504A-Ani_obj81
00005AC2 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
00005ACE 00                         		even
00005ACE 00                         		even
00005ACE                            
00005ACE                            ; ---------------------------------------------------------------------------
00005ACE                            ; Sprite mappings - Continue screen
00005ACE                            ; ---------------------------------------------------------------------------
00005ACE                            Map_obj80:
00005ACE                            	include "_maps\obj80.asm"
00005ACE                            ; ---------------------------------------------------------------------------
00005ACE                            ; Sprite mappings - Continue screen
00005ACE                            ; ---------------------------------------------------------------------------
00005ACE 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
00005AD2 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
00005AD6 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00005ADA 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
00005ADE 0B                         byte_5066:	dc.b $B
00005ADF F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00005AE4 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00005AE9 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
00005AEE F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00005AF3 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00005AF8 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00005AFD F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
00005B02 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00005B07 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
00005B0C 3805 2021 08               		dc.b $38, 5, $20, $21, 8
00005B11 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00005B16 03                         byte_509E:	dc.b 3
00005B17 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
00005B1C F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005B21 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005B26 03                         byte_50AE:	dc.b 3
00005B27 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
00005B2C F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005B31 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005B36 03                         byte_50BE:	dc.b 3
00005B37 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005B3C F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005B41 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005B46 02                         byte_50CE:	dc.b 2
00005B47 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005B4C 6009 2800 00               		dc.b $60, 9, $28, 0, 0
00005B51 01                         byte_50D9:	dc.b 1
00005B52 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00005B57 01                         byte_50DF:	dc.b 1
00005B58 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00005B5E 00                         		even
00005B5E 00                         		even
00005B5E                            
00005B5E                            ; ===========================================================================
00005B5E                            ; ---------------------------------------------------------------------------
00005B5E                            ; Ending sequence in Green Hill	Zone
00005B5E                            ; ---------------------------------------------------------------------------
00005B5E                            
00005B5E                            EndingSequence:				; XREF: GameModeArray
00005B5E 103C 00E4                  		move.b	#$E4,d0
00005B62 6100 B912                  		bsr.w	PlaySound_Special ; stop music
00005B66 6100 C618                  		bsr.w	Pal_FadeFrom
00005B6A 43F8 D000                  		lea	($FFFFD000).w,a1
00005B6E 7000                       		moveq	#0,d0
00005B70 323C 07FF                  		move.w	#$7FF,d1
00005B74                            
00005B74                            End_ClrObjRam:
00005B74 22C0                       		move.l	d0,(a1)+
00005B76 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00005B7A                            
00005B7A 43F8 F628                  		lea	($FFFFF628).w,a1
00005B7E 7000                       		moveq	#0,d0
00005B80 323C 0015                  		move.w	#$15,d1
00005B84                            
00005B84                            End_ClrRam:
00005B84 22C0                       		move.l	d0,(a1)+
00005B86 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005B8A                            
00005B8A 43F8 F700                  		lea	($FFFFF700).w,a1
00005B8E 7000                       		moveq	#0,d0
00005B90 323C 003F                  		move.w	#$3F,d1
00005B94                            
00005B94                            End_ClrRam2:
00005B94 22C0                       		move.l	d0,(a1)+
00005B96 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005B9A                            
00005B9A 43F8 FE60                  		lea	($FFFFFE60).w,a1
00005B9E 7000                       		moveq	#0,d0
00005BA0 323C 0047                  		move.w	#$47,d1
00005BA4                            
00005BA4                            End_ClrRam3:
00005BA4 22C0                       		move.l	d0,(a1)+
00005BA6 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005BAA                            
00005BAA 46FC 2700                  		move	#$2700,sr
00005BAE 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005BB2 0200 00BF                  		andi.b	#$BF,d0
00005BB6 33C0 00C0 0004             		move.w	d0,($C00004).l
00005BBC 6100 B7C2                  		bsr.w	ClearScreen
00005BC0 4DF9 00C0 0004             		lea	($C00004).l,a6
00005BC6 3CBC 8B03                  		move.w	#$8B03,(a6)
00005BCA 3CBC 8230                  		move.w	#$8230,(a6)
00005BCE 3CBC 8407                  		move.w	#$8407,(a6)
00005BD2 3CBC 857C                  		move.w	#$857C,(a6)
00005BD6 3CBC 9001                  		move.w	#$9001,(a6)
00005BDA 3CBC 8004                  		move.w	#$8004,(a6)
00005BDE 3CBC 8720                  		move.w	#$8720,(a6)
00005BE2 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00005BE8 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00005BEC 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00005BF2 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00005BF8 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005BFE 6700                       		beq.s	End_LoadData	; if yes, branch
00005C00 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
00005C06                            
00005C06                            End_LoadData:
00005C06 701C                       		moveq	#$1C,d0
00005C08 6100 BC4C                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
00005C0C 4EB9 0000 0000             		jsr	Hud_Base
00005C12 6100 0000                  		bsr.w	LevelSizeLoad
00005C16 6100 0000                  		bsr.w	DeformBgLayer
00005C1A 08F8 0002 F754             		bset	#2,($FFFFF754).w
00005C20 6100 0000                  		bsr.w	MainLoadBlockLoad
00005C24 6100 0000                  		bsr.w	LoadTilesFromStart
00005C28 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
00005C30 46FC 2300                  		move	#$2300,sr
00005C34 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005C3A 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00005C3E 6100 BDC6                  		bsr.w	KosDec
00005C42 7003                       		moveq	#3,d0
00005C44 6100 C7E8                  		bsr.w	PalLoad1	; load Sonic's pallet
00005C48 303C 008B                  		move.w	#$8B,d0
00005C4C 6100 B822                  		bsr.w	PlaySound	; play ending sequence music
00005C50 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00005C56 6700                       		beq.s	End_LoadSonic	; if not, branch
00005C58 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005C5E                            
00005C5E                            End_LoadSonic:
00005C5E 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00005C64 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00005C6A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00005C70 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00005C76 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00005C7C 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00005C82 4EB9 0000 0000             		jsr	ObjPosLoad
00005C88 4EB9 0000 0000             		jsr	ObjectsLoad
00005C8E 4EB9 0000 0000             		jsr	BuildSprites
00005C94 7000                       		moveq	#0,d0
00005C96 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00005C9A 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00005C9E 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
00005CA2 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005CA6 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00005CAA 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00005CAE 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00005CB2 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005CB6 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005CBA 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005CBE 6100 EECA                  		bsr.w	OscillateNumInit
00005CC2 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005CC8 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00005CCE 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00005CD4 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00005CDA 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005CE0 6100 D6C0                  		bsr.w	DelayProgram
00005CE4 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005CE8 0000 0040                  		ori.b	#$40,d0
00005CEC 33C0 00C0 0004             		move.w	d0,($C00004).l
00005CF2 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005CF8 6100 C3D0                  		bsr.w	Pal_FadeTo
00005CFC                            
00005CFC                            ; ---------------------------------------------------------------------------
00005CFC                            ; Main ending sequence loop
00005CFC                            ; ---------------------------------------------------------------------------
00005CFC                            
00005CFC                            End_MainLoop:
00005CFC 6100 B784                  		bsr.w	PauseGame
00005D00 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005D06 6100 D69A                  		bsr.w	DelayProgram
00005D0A 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005D0E 6100 0000                  		bsr.w	End_MoveSonic
00005D12 4EB9 0000 0000             		jsr	ObjectsLoad
00005D18 6100 0000                  		bsr.w	DeformBgLayer
00005D1C 4EB9 0000 0000             		jsr	BuildSprites
00005D22 4EB9 0000 0000             		jsr	ObjPosLoad
00005D28 6100 BD7C                  		bsr.w	PalCycle_Load
00005D2C 6100 EEB2                  		bsr.w	OscillateNumDo
00005D30 6100 EF3E                  		bsr.w	ChangeRingFrame
00005D34 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00005D3A 6700                       		beq.s	loc_52DA	; if yes, branch
00005D3C 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
00005D42 103C 0091                  		move.b	#$91,d0
00005D46 6100 B72E                  		bsr.w	PlaySound_Special ; play credits music
00005D4A 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
00005D50 4E75                       		rts	
00005D52                            ; ===========================================================================
00005D52                            
00005D52                            loc_52DA:
00005D52 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00005D56 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
00005D5A                            
00005D5A 4278 FE02                  		clr.w	($FFFFFE02).w
00005D5E 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005D64 4278 F794                  		clr.w	($FFFFF794).w
00005D68                            
00005D68                            End_AllEmlds:				; XREF: loc_5334
00005D68 6100 B718                  		bsr.w	PauseGame
00005D6C 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005D72 6100 D62E                  		bsr.w	DelayProgram
00005D76 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005D7A 6100 0000                  		bsr.w	End_MoveSonic
00005D7E 4EB9 0000 0000             		jsr	ObjectsLoad
00005D84 6100 0000                  		bsr.w	DeformBgLayer
00005D88 4EB9 0000 0000             		jsr	BuildSprites
00005D8E 4EB9 0000 0000             		jsr	ObjPosLoad
00005D94 6100 EE4A                  		bsr.w	OscillateNumDo
00005D98 6100 EED6                  		bsr.w	ChangeRingFrame
00005D9C 5378 F794                  		subq.w	#1,($FFFFF794).w
00005DA0 6A00                       		bpl.s	loc_5334
00005DA2 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005DA8 6100 C524                  		bsr.w	Pal_ToWhite
00005DAC                            
00005DAC                            loc_5334:
00005DAC 4A78 FE02                  		tst.w	($FFFFFE02).w
00005DB0 6700 FFB6                  		beq.w	End_AllEmlds
00005DB4 4278 FE02                  		clr.w	($FFFFFE02).w
00005DB8 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00005DBE 4BF9 00C0 0004             		lea	($C00004).l,a5
00005DC4 4DF9 00C0 0000             		lea	($C00000).l,a6
00005DCA 47F8 F700                  		lea	($FFFFF700).w,a3
00005DCE 49F8 A400                  		lea	($FFFFA400).w,a4
00005DD2 343C 4000                  		move.w	#$4000,d2
00005DD6 6100 0000                  		bsr.w	LoadTilesFromStart2
00005DDA 7013                       		moveq	#$13,d0
00005DDC 6100 C650                  		bsr.w	PalLoad1	; load ending pallet
00005DE0 6100 C420                  		bsr.w	Pal_MakeWhite
00005DE4 6000 FF16                  		bra.w	End_MainLoop
00005DE8                            
00005DE8                            ; ---------------------------------------------------------------------------
00005DE8                            ; Subroutine controlling Sonic on the ending sequence
00005DE8                            ; ---------------------------------------------------------------------------
00005DE8                            
00005DE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005DE8                            
00005DE8                            
00005DE8                            End_MoveSonic:				; XREF: End_MainLoop
00005DE8 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
00005DEC 6600                       		bne.s	End_MoveSonic2
00005DEE 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
00005DF4 6400                       		bcc.s	End_MoveSonExit	; if not, branch
00005DF6 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005DFA 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
00005E00 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
00005E06 4E75                       		rts	
00005E08                            ; ===========================================================================
00005E08                            
00005E08                            End_MoveSonic2:				; XREF: End_MoveSonic
00005E08 5500                       		subq.b	#2,d0
00005E0A 6600                       		bne.s	End_MoveSonic3
00005E0C 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
00005E12 6500                       		bcs.s	End_MoveSonExit	; if not, branch
00005E14 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005E18 7000                       		moveq	#0,d0
00005E1A 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
00005E1E 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
00005E22 31C0 D014                  		move.w	d0,($FFFFD014).w
00005E26 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
00005E2C 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
00005E32 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00005E38 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00005E3E 4E75                       		rts	
00005E40                            ; ===========================================================================
00005E40                            
00005E40                            End_MoveSonic3:				; XREF: End_MoveSonic
00005E40 5500                       		subq.b	#2,d0
00005E42 6600                       		bne.s	End_MoveSonExit
00005E44 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005E48 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00005E4E 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00005E54 4278 D024                  		clr.w	($FFFFD024).w
00005E58                            
00005E58                            End_MoveSonExit:
00005E58 4E75                       		rts	
00005E5A                            ; End of function End_MoveSonic
00005E5A                            
00005E5A                            ; ===========================================================================
00005E5A                            ; ---------------------------------------------------------------------------
00005E5A                            ; Object 87 - Sonic on ending sequence
00005E5A                            ; ---------------------------------------------------------------------------
00005E5A                            
00005E5A                            Obj87:					; XREF: Obj_Index
00005E5A 7000                       		moveq	#0,d0
00005E5C 1028 0025                  		move.b	$25(a0),d0
00005E60 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00005E64 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005E68 4EF9 0000 0000             		jmp	DisplaySprite
00005E6E                            ; ===========================================================================
00005E6E 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00005E72 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005E76 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00005E7A 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00005E7E 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00005E82                            ; ===========================================================================
00005E82                            
00005E82                            Obj87_Main:				; XREF: Obj87_Index
00005E82 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005E88 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005E8A 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00005E90 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005E96 4E75                       		rts	
00005E98                            ; ===========================================================================
00005E98                            
00005E98                            Obj87_Main2:				; XREF: Obj87_Main
00005E98 5428 0025                  		addq.b	#2,$25(a0)
00005E9C 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005EA4 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005EAA 117C 0004 0001             		move.b	#4,1(a0)
00005EB0 4228 0022                  		clr.b	$22(a0)
00005EB4 117C 0002 0018             		move.b	#2,$18(a0)
00005EBA 117C 0000 001A             		move.b	#0,$1A(a0)
00005EC0 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005EC6                            
00005EC6                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005EC6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005ECA 6600                       		bne.s	Obj87_Wait
00005ECC 5428 0025                  		addq.b	#2,$25(a0)
00005ED0 317C 0001 001C             		move.w	#1,$1C(a0)
00005ED6 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00005EDC                            
00005EDC                            Obj87_Wait:
00005EDC 4E75                       		rts	
00005EDE                            ; ===========================================================================
00005EDE                            
00005EDE                            Obj87_LookUp:				; XREF: Obj87_Index
00005EDE 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005EE6 6600                       		bne.s	locret_5480
00005EE8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00005EEE 317C 005A 0030             		move.w	#$5A,$30(a0)
00005EF4 5428 0025                  		addq.b	#2,$25(a0)
00005EF8                            
00005EF8                            locret_5480:
00005EF8 4E75                       		rts	
00005EFA                            ; ===========================================================================
00005EFA                            
00005EFA                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00005EFA 5368 0030                  		subq.w	#1,$30(a0)
00005EFE 6600                       		bne.s	Obj87_Wait2
00005F00 43F8 D400                  		lea	($FFFFD400).w,a1
00005F04 323C 00FF                  		move.w	#$FF,d1
00005F08                            
00005F08                            Obj87_ClrLoop:
00005F08 4299                       		clr.l	(a1)+
00005F0A 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00005F0E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00005F14 5428 0025                  		addq.b	#2,$25(a0)
00005F18 117C 0001 001C             		move.b	#1,$1C(a0)
00005F1E 317C 003C 0030             		move.w	#$3C,$30(a0)
00005F24                            
00005F24                            Obj87_Wait2:
00005F24 4E75                       		rts	
00005F26                            ; ===========================================================================
00005F26                            
00005F26                            Obj87_MakeLogo:				; XREF: Obj87_Index
00005F26 5368 0030                  		subq.w	#1,$30(a0)
00005F2A 6600                       		bne.s	Obj87_Wait3
00005F2C 5428 0025                  		addq.b	#2,$25(a0)
00005F30 317C 00B4 0030             		move.w	#$B4,$30(a0)
00005F36 117C 0002 001C             		move.b	#2,$1C(a0)
00005F3C 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005F42                            
00005F42                            Obj87_Wait3:
00005F42 4E75                       		rts	
00005F44                            ; ===========================================================================
00005F44                            
00005F44                            Obj87_Animate:				; XREF: Obj87_Index
00005F44 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00005F4A 4EF9 0000 0000             		jmp	AnimateSprite
00005F50                            ; ===========================================================================
00005F50                            
00005F50                            Obj87_Leap:				; XREF: Obj87_Index
00005F50 5368 0030                  		subq.w	#1,$30(a0)
00005F54 6600                       		bne.s	Obj87_Wait4
00005F56 5428 0025                  		addq.b	#2,$25(a0)
00005F5A 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005F62 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005F68 117C 0004 0001             		move.b	#4,1(a0)
00005F6E 4228 0022                  		clr.b	$22(a0)
00005F72 117C 0002 0018             		move.b	#2,$18(a0)
00005F78 117C 0005 001A             		move.b	#5,$1A(a0)
00005F7E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005F84 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005F8A 60B8                       		bra.s	Obj87_Animate
00005F8C                            ; ===========================================================================
00005F8C                            
00005F8C                            Obj87_Wait4:				; XREF: Obj87_Leap
00005F8C 4E75                       		rts	
00005F8E                            ; ===========================================================================
00005F8E                            Ani_obj87:
00005F8E                            	include "_anim\obj87.asm"
00005F8E                            ; ---------------------------------------------------------------------------
00005F8E                            ; Animation script - Sonic on the ending sequence
00005F8E                            ; ---------------------------------------------------------------------------
00005F8E 0000                       		dc.w byte_551C-Ani_obj87
00005F90 0000                       		dc.w byte_552A-Ani_obj87
00005F92 0000                       		dc.w byte_5534-Ani_obj87
00005F94 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00005FA2 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005FAC 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005FB4                            		even
00005FB4                            		even
00005FB4                            
00005FB4                            ; ===========================================================================
00005FB4                            ; ---------------------------------------------------------------------------
00005FB4                            ; Object 88 - chaos emeralds on	the ending sequence
00005FB4                            ; ---------------------------------------------------------------------------
00005FB4                            
00005FB4                            Obj88:					; XREF: Obj_Index
00005FB4 7000                       		moveq	#0,d0
00005FB6 1028 0024                  		move.b	$24(a0),d0
00005FBA 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005FBE 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005FC2 4EF9 0000 0000             		jmp	DisplaySprite
00005FC8                            ; ===========================================================================
00005FC8 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005FCA 0000                       		dc.w Obj88_Move-Obj88_Index
00005FCC                            ; ===========================================================================
00005FCC                            
00005FCC                            Obj88_Main:				; XREF: Obj88_Index
00005FCC 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005FD2 6700                       		beq.s	Obj88_Main2
00005FD4 588F                       		addq.l	#4,sp
00005FD6 4E75                       		rts	
00005FD8                            ; ===========================================================================
00005FD8                            
00005FD8                            Obj88_Main2:				; XREF: Obj88_Main
00005FD8 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00005FDE 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005FE4 2248                       		movea.l	a0,a1
00005FE6 7600                       		moveq	#0,d3
00005FE8 7401                       		moveq	#1,d2
00005FEA 7205                       		moveq	#5,d1
00005FEC                            
00005FEC                            Obj88_MainLoop:
00005FEC 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00005FF0 5429 0024                  		addq.b	#2,$24(a1)
00005FF4 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00005FFC 337C 03C5 0002             		move.w	#$3C5,2(a1)
00006002 137C 0004 0001             		move.b	#4,1(a1)
00006008 137C 0001 0018             		move.b	#1,$18(a1)
0000600E 3368 0008 0038             		move.w	8(a0),$38(a1)
00006014 3368 000C 003A             		move.w	$C(a0),$3A(a1)
0000601A 1342 001C                  		move.b	d2,$1C(a1)
0000601E 1342 001A                  		move.b	d2,$1A(a1)
00006022 5202                       		addq.b	#1,d2
00006024 1343 0026                  		move.b	d3,$26(a1)
00006028 0603 002A                  		addi.b	#$2A,d3
0000602C 43E9 0040                  		lea	$40(a1),a1
00006030 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00006034                            
00006034                            Obj88_Move:				; XREF: Obj88_Index
00006034 3028 003E                  		move.w	$3E(a0),d0
00006038 D168 0026                  		add.w	d0,$26(a0)
0000603C 1028 0026                  		move.b	$26(a0),d0
00006040 4EB9 0000 33D4             		jsr	(CalcSine).l
00006046 7800                       		moveq	#0,d4
00006048 1828 003C                  		move.b	$3C(a0),d4
0000604C C3C4                       		muls.w	d4,d1
0000604E E081                       		asr.l	#8,d1
00006050 C1C4                       		muls.w	d4,d0
00006052 E080                       		asr.l	#8,d0
00006054 D268 0038                  		add.w	$38(a0),d1
00006058 D068 003A                  		add.w	$3A(a0),d0
0000605C 3141 0008                  		move.w	d1,8(a0)
00006060 3140 000C                  		move.w	d0,$C(a0)
00006064 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
0000606A 6700                       		beq.s	loc_55FA
0000606C 0668 0020 003C             		addi.w	#$20,$3C(a0)
00006072                            
00006072                            loc_55FA:
00006072 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00006078 6700                       		beq.s	loc_5608
0000607A 0668 0020 003E             		addi.w	#$20,$3E(a0)
00006080                            
00006080                            loc_5608:
00006080 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00006086 6700                       		beq.s	locret_5614
00006088 5368 003A                  		subq.w	#1,$3A(a0)
0000608C                            
0000608C                            locret_5614:
0000608C 4E75                       		rts	
0000608E                            ; ===========================================================================
0000608E                            ; ---------------------------------------------------------------------------
0000608E                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
0000608E                            ; ---------------------------------------------------------------------------
0000608E                            
0000608E                            Obj89:					; XREF: Obj_Index
0000608E 7000                       		moveq	#0,d0
00006090 1028 0024                  		move.b	$24(a0),d0
00006094 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00006098 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
0000609C                            ; ===========================================================================
0000609C 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
0000609E 0000                       		dc.w Obj89_Move-Obj89_Index
000060A0 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
000060A2                            ; ===========================================================================
000060A2                            
000060A2                            Obj89_Main:				; XREF: Obj89_Index
000060A2 5428 0024                  		addq.b	#2,$24(a0)
000060A6 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
000060AC 317C 00D8 000A             		move.w	#$D8,$A(a0)
000060B2 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
000060BA 317C 05C5 0002             		move.w	#$5C5,2(a0)
000060C0 117C 0000 0001             		move.b	#0,1(a0)
000060C6 117C 0000 0018             		move.b	#0,$18(a0)
000060CC                            
000060CC                            Obj89_Move:				; XREF: Obj89_Index
000060CC 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
000060D2 6700                       		beq.s	Obj89_Delay	; if yes, branch
000060D4 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
000060DA 6000 A224                  		bra.w	jmp_DisplaySprite
000060DE                            ; ===========================================================================
000060DE                            
000060DE                            Obj89_Delay:				; XREF: Obj89_Move
000060DE 5428 0024                  		addq.b	#2,$24(a0)
000060E2 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
000060E8                            
000060E8                            Obj89_GotoCredits:			; XREF: Obj89_Index
000060E8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
000060EC 6A00                       		bpl.s	Obj89_Display
000060EE 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
000060F4                            
000060F4                            Obj89_Display:
000060F4 6000 A20A                  		bra.w	jmp_DisplaySprite
000060F8                            ; ===========================================================================
000060F8                            ; ---------------------------------------------------------------------------
000060F8                            ; Sprite mappings - Sonic on the ending	sequence
000060F8                            ; ---------------------------------------------------------------------------
000060F8                            Map_obj87:
000060F8                            	include "_maps\obj87.asm"
000060F8                            ; ---------------------------------------------------------------------------
000060F8                            ; Sprite mappings - Sonic on the ending	sequence
000060F8                            ; ---------------------------------------------------------------------------
000060F8 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
000060FC 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00006100 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00006104 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00006108 02                         byte_5690:	dc.b 2
00006109 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
0000610E 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00006113 03                         byte_569B:	dc.b 3
00006114 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00006119 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
0000611E 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00006123 02                         byte_56AB:	dc.b 2
00006124 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00006129 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
0000612E 02                         byte_56B6:	dc.b 2
0000612F EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00006134 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00006139 02                         byte_56C1:	dc.b 2
0000613A EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
0000613F FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00006144 03                         byte_56CC:	dc.b 3
00006145 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
0000614A EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
0000614F 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00006154 07                         byte_56DC:	dc.b 7
00006155 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
0000615A BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
0000615F BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00006164 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00006169 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
0000616E E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00006173 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00006178 18                         byte_5700:	dc.b $18
00006179 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
0000617E 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00006183 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00006188 980B 0098 30               		dc.b $98, $B, 0, $98, $30
0000618D A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00006192 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00006197 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
0000619C A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
000061A1 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
000061A6 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
000061AB A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
000061B0 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
000061B5 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
000061BA B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
000061BF B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
000061C4 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
000061C9 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
000061CE D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
000061D3 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
000061D8 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
000061DD D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
000061E2 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
000061E7 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
000061EC F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
000061F2 00                         		even
000061F2 00                         		even
000061F2                            
000061F2                            ; ---------------------------------------------------------------------------
000061F2                            ; Sprite mappings - chaos emeralds on the ending sequence
000061F2                            ; ---------------------------------------------------------------------------
000061F2                            Map_obj88:
000061F2                            	include "_maps\obj88.asm"
000061F2                            ; ---------------------------------------------------------------------------
000061F2                            ; Sprite mappings - chaos emeralds on the ending sequence
000061F2                            ; ---------------------------------------------------------------------------
000061F2 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
000061F6 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
000061FA 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
000061FE 0000                       		dc.w byte_57AC-Map_obj88
00006200 01                         byte_5788:	dc.b 1
00006201 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00006206 01                         byte_578E:	dc.b 1
00006207 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000620C 01                         byte_5794:	dc.b 1
0000620D F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00006212 01                         byte_579A:	dc.b 1
00006213 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00006218 01                         byte_57A0:	dc.b 1
00006219 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
0000621E 01                         byte_57A6:	dc.b 1
0000621F F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00006224 01                         byte_57AC:	dc.b 1
00006225 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0000622A                            		even
0000622A                            		even
0000622A                            
0000622A                            ; ---------------------------------------------------------------------------
0000622A                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
0000622A                            ; ---------------------------------------------------------------------------
0000622A                            Map_obj89:
0000622A                            	include "_maps\obj89.asm"
0000622A                            ; ---------------------------------------------------------------------------
0000622A                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
0000622A                            ; ---------------------------------------------------------------------------
0000622A 0000                       		dc.w byte_57B4-Map_obj89
0000622C 03                         byte_57B4:	dc.b 3
0000622D F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00006232 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00006237 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
0000623C                            		even
0000623C                            		even
0000623C                            
0000623C                            ; ===========================================================================
0000623C                            ; ---------------------------------------------------------------------------
0000623C                            ; Credits ending sequence
0000623C                            ; ---------------------------------------------------------------------------
0000623C                            
0000623C                            Credits:				; XREF: GameModeArray
0000623C 6100 B50A                  		bsr.w	ClearPLC
00006240 6100 BF3E                  		bsr.w	Pal_FadeFrom
00006244 4DF9 00C0 0004             		lea	($C00004).l,a6
0000624A 3CBC 8004                  		move.w	#$8004,(a6)
0000624E 3CBC 8230                  		move.w	#$8230,(a6)
00006252 3CBC 8407                  		move.w	#$8407,(a6)
00006256 3CBC 9001                  		move.w	#$9001,(a6)
0000625A 3CBC 9200                  		move.w	#$9200,(a6)
0000625E 3CBC 8B03                  		move.w	#$8B03,(a6)
00006262 3CBC 8720                  		move.w	#$8720,(a6)
00006266 4238 F64E                  		clr.b	($FFFFF64E).w
0000626A 6100 B114                  		bsr.w	ClearScreen
0000626E 43F8 D000                  		lea	($FFFFD000).w,a1
00006272 7000                       		moveq	#0,d0
00006274 323C 07FF                  		move.w	#$7FF,d1
00006278                            
00006278                            Cred_ClrObjRam:
00006278 22C0                       		move.l	d0,(a1)+
0000627A 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
0000627E                            
0000627E 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00006288 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
0000628E 6100 B31A                  		bsr.w	NemDec
00006292 43F8 FB80                  		lea	($FFFFFB80).w,a1
00006296 7000                       		moveq	#0,d0
00006298 323C 001F                  		move.w	#$1F,d1
0000629C                            
0000629C                            Cred_ClrPallet:
0000629C 22C0                       		move.l	d0,(a1)+
0000629E 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
000062A2                            
000062A2 7003                       		moveq	#3,d0
000062A4 6100 C188                  		bsr.w	PalLoad1	; load Sonic's pallet
000062A8 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
000062AE 4EB9 0000 0000             		jsr	ObjectsLoad
000062B4 4EB9 0000 0000             		jsr	BuildSprites
000062BA 6100 0000                  		bsr.w	EndingDemoLoad
000062BE 7000                       		moveq	#0,d0
000062C0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000062C4 E948                       		lsl.w	#4,d0
000062C6 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
000062CC 45F2 0000                  		lea	(a2,d0.w),a2
000062D0 7000                       		moveq	#0,d0
000062D2 1012                       		move.b	(a2),d0
000062D4 6700                       		beq.s	loc_5862
000062D6 6100 B412                  		bsr.w	LoadPLC		; load level patterns
000062DA                            
000062DA                            loc_5862:
000062DA 7001                       		moveq	#1,d0
000062DC 6100 B40C                  		bsr.w	LoadPLC		; load standard	level patterns
000062E0 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
000062E6 6100 BDE2                  		bsr.w	Pal_FadeTo
000062EA                            
000062EA                            Cred_WaitLoop:
000062EA 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000062F0 6100 D0B0                  		bsr.w	DelayProgram
000062F4 6100 B460                  		bsr.w	RunPLC_RAM
000062F8 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
000062FC 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
000062FE 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00006302 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00006304 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
0000630A 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
0000630E 4E75                       		rts	
00006310                            
00006310                            ; ---------------------------------------------------------------------------
00006310                            ; Ending sequence demo loading subroutine
00006310                            ; ---------------------------------------------------------------------------
00006310                            
00006310                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006310                            
00006310                            
00006310                            EndingDemoLoad:				; XREF: Credits
00006310 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00006314 0240 000F                  		andi.w	#$F,d0
00006318 D040                       		add.w	d0,d0
0000631A 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
0000631E 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00006322 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00006326 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
0000632C 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
0000632E 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00006334 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
0000633A 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00006340 7000                       		moveq	#0,d0
00006342 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00006346 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000634A 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000634E 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00006352 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00006358 6600                       		bne.s	EndDemo_Exit	; if not, branch
0000635A 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00006360 45F8 FE30                  		lea	($FFFFFE30).w,a2
00006364 303C 0008                  		move.w	#8,d0
00006368                            
00006368                            EndDemo_LampLoad:
00006368 24D9                       		move.l	(a1)+,(a2)+
0000636A 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
0000636E                            
0000636E                            EndDemo_Exit:
0000636E 4E75                       		rts	
00006370                            ; End of function EndingDemoLoad
00006370                            
00006370                            ; ===========================================================================
00006370                            ; ---------------------------------------------------------------------------
00006370                            ; Levels used in the end sequence demos
00006370                            ; ---------------------------------------------------------------------------
00006370                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00006380                            
00006380                            ; ---------------------------------------------------------------------------
00006380                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00006380                            ; ---------------------------------------------------------------------------
00006380                            EndDemo_LampVar:
00006380 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00006382 0A00 062C 000D             		dc.w $A00, $62C, $D
00006388 0000 0000                  		dc.l 0
0000638C 0000                       		dc.b 0,	0
0000638E 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
000063A2 0101                       		dc.b 1,	1
000063A4                            ; ===========================================================================
000063A4                            ; ---------------------------------------------------------------------------
000063A4                            ; "TRY AGAIN" and "END"	screens
000063A4                            ; ---------------------------------------------------------------------------
000063A4                            
000063A4                            TryAgainEnd:				; XREF: Credits
000063A4 6100 B3A2                  		bsr.w	ClearPLC
000063A8 6100 BDD6                  		bsr.w	Pal_FadeFrom
000063AC 4DF9 00C0 0004             		lea	($C00004).l,a6
000063B2 3CBC 8004                  		move.w	#$8004,(a6)
000063B6 3CBC 8230                  		move.w	#$8230,(a6)
000063BA 3CBC 8407                  		move.w	#$8407,(a6)
000063BE 3CBC 9001                  		move.w	#$9001,(a6)
000063C2 3CBC 9200                  		move.w	#$9200,(a6)
000063C6 3CBC 8B03                  		move.w	#$8B03,(a6)
000063CA 3CBC 8720                  		move.w	#$8720,(a6)
000063CE 4238 F64E                  		clr.b	($FFFFF64E).w
000063D2 6100 AFAC                  		bsr.w	ClearScreen
000063D6 43F8 D000                  		lea	($FFFFD000).w,a1
000063DA 7000                       		moveq	#0,d0
000063DC 323C 07FF                  		move.w	#$7FF,d1
000063E0                            
000063E0                            TryAg_ClrObjRam:
000063E0 22C0                       		move.l	d0,(a1)+
000063E2 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
000063E6                            
000063E6 701D                       		moveq	#$1D,d0
000063E8 6100 B46C                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
000063EC 43F8 FB80                  		lea	($FFFFFB80).w,a1
000063F0 7000                       		moveq	#0,d0
000063F2 323C 001F                  		move.w	#$1F,d1
000063F6                            
000063F6                            TryAg_ClrPallet:
000063F6 22C0                       		move.l	d0,(a1)+
000063F8 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
000063FC                            
000063FC 7013                       		moveq	#$13,d0
000063FE 6100 C02E                  		bsr.w	PalLoad1	; load ending pallet
00006402 4278 FBC0                  		clr.w	($FFFFFBC0).w
00006406 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
0000640C 4EB9 0000 0000             		jsr	ObjectsLoad
00006412 4EB9 0000 0000             		jsr	BuildSprites
00006418 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
0000641E 6100 BCAA                  		bsr.w	Pal_FadeTo
00006422                            
00006422                            ; ---------------------------------------------------------------------------
00006422                            ; "TRY AGAIN" and "END"	screen main loop
00006422                            ; ---------------------------------------------------------------------------
00006422                            TryAg_MainLoop:
00006422 6100 B05E                  		bsr.w	PauseGame
00006426 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000642C 6100 CF74                  		bsr.w	DelayProgram
00006430 4EB9 0000 0000             		jsr	ObjectsLoad
00006436 4EB9 0000 0000             		jsr	BuildSprites
0000643C 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00006442 6600                       		bne.s	TryAg_Exit	; if yes, branch
00006444 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00006448 6700                       		beq.s	TryAg_Exit	; if yes, branch
0000644A 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00006450 67D0                       		beq.s	TryAg_MainLoop
00006452                            
00006452                            TryAg_Exit:
00006452 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00006458 4E75                       		rts	
0000645A                            
0000645A                            ; ===========================================================================
0000645A                            ; ---------------------------------------------------------------------------
0000645A                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
0000645A                            ; ---------------------------------------------------------------------------
0000645A                            
0000645A                            Obj8B:					; XREF: Obj_Index
0000645A 7000                       		moveq	#0,d0
0000645C 1028 0024                  		move.b	$24(a0),d0
00006460 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00006464 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00006468 4EF9 0000 0000             		jmp	DisplaySprite
0000646E                            ; ===========================================================================
0000646E 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00006470 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00006472 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00006474 0000                       		dc.w loc_5A8E-Obj8B_Index
00006476                            ; ===========================================================================
00006476                            
00006476                            Obj8B_Main:				; XREF: Obj8B_Index
00006476 5428 0024                  		addq.b	#2,$24(a0)
0000647A 317C 0120 0008             		move.w	#$120,8(a0)
00006480 317C 00F4 000A             		move.w	#$F4,$A(a0)
00006486 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
0000648E 317C 03E1 0002             		move.w	#$3E1,2(a0)
00006494 117C 0000 0001             		move.b	#0,1(a0)
0000649A 117C 0002 0018             		move.b	#2,$18(a0)
000064A0 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
000064A6 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000064AC 6700                       		beq.s	Obj8B_Animate	; if yes, branch
000064AE 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
000064B4 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
000064BA 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
000064C0 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
000064C6                            
000064C6                            Obj8B_Animate:				; XREF: Obj8B_Index
000064C6 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
000064CC 4EF9 0000 0000             		jmp	AnimateSprite
000064D2                            ; ===========================================================================
000064D2                            
000064D2                            Obj8B_Juggle:				; XREF: Obj8B_Index
000064D2 5428 0024                  		addq.b	#2,$24(a0)
000064D6 7002                       		moveq	#2,d0
000064D8 0828 0000 001C             		btst	#0,$1C(a0)
000064DE 6700                       		beq.s	loc_5A6A
000064E0 4440                       		neg.w	d0
000064E2                            
000064E2                            loc_5A6A:
000064E2 43F8 D800                  		lea	($FFFFD800).w,a1
000064E6 7205                       		moveq	#5,d1
000064E8                            
000064E8                            loc_5A70:
000064E8 1340 003E                  		move.b	d0,$3E(a1)
000064EC 3400                       		move.w	d0,d2
000064EE E742                       		asl.w	#3,d2
000064F0 D529 0026                  		add.b	d2,$26(a1)
000064F4 43E9 0040                  		lea	$40(a1),a1
000064F8 51C9 FFEE                  		dbf	d1,loc_5A70
000064FC 5228 001A                  		addq.b	#1,$1A(a0)
00006500 317C 0070 0030             		move.w	#112,$30(a0)
00006506                            
00006506                            loc_5A8E:				; XREF: Obj8B_Index
00006506 5368 0030                  		subq.w	#1,$30(a0)
0000650A 6A00                       		bpl.s	locret_5AA0
0000650C 0868 0000 001C             		bchg	#0,$1C(a0)
00006512 117C 0002 0024             		move.b	#2,$24(a0)
00006518                            
00006518                            locret_5AA0:
00006518 4E75                       		rts	
0000651A                            ; ===========================================================================
0000651A                            Ani_obj8B:
0000651A                            	include "_anim\obj8B.asm"
0000651A                            ; ---------------------------------------------------------------------------
0000651A                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
0000651A                            ; ---------------------------------------------------------------------------
0000651A 0000                       		dc.w byte_5AA8-Ani_obj8B
0000651C 0000                       		dc.w byte_5AAC-Ani_obj8B
0000651E 0000                       		dc.w byte_5AB0-Ani_obj8B
00006520 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00006524 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00006528 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
0000653A                            		even
0000653A                            		even
0000653A                            
0000653A                            ; ===========================================================================
0000653A                            ; ---------------------------------------------------------------------------
0000653A                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
0000653A                            ; ---------------------------------------------------------------------------
0000653A                            
0000653A                            Obj8C:					; XREF: Obj_Index
0000653A 7000                       		moveq	#0,d0
0000653C 1028 0024                  		move.b	$24(a0),d0
00006540 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00006544 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00006548 4EF9 0000 0000             		jmp	DisplaySprite
0000654E                            ; ===========================================================================
0000654E 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00006550 0000                       		dc.w Obj8C_Move-Obj8C_Index
00006552                            ; ===========================================================================
00006552                            
00006552                            Obj8C_Main:				; XREF: Obj8C_Index
00006552 2248                       		movea.l	a0,a1
00006554 7400                       		moveq	#0,d2
00006556 7600                       		moveq	#0,d3
00006558 7205                       		moveq	#5,d1
0000655A 9238 FE57                  		sub.b	($FFFFFE57).w,d1
0000655E                            
0000655E                            Obj8C_MakeEms:				; XREF: loc_5B42
0000655E 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00006562 5429 0024                  		addq.b	#2,$24(a1)
00006566 237C 0000 61F2 0004        		move.l	#Map_obj88,4(a1)
0000656E 337C 03C5 0002             		move.w	#$3C5,2(a1)
00006574 137C 0000 0001             		move.b	#0,1(a1)
0000657A 137C 0001 0018             		move.b	#1,$18(a1)
00006580 337C 0104 0008             		move.w	#$104,8(a1)
00006586 337C 0120 0038             		move.w	#$120,$38(a1)
0000658C 337C 00EC 000A             		move.w	#$EC,$A(a1)
00006592 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00006598 137C 001C 003C             		move.b	#$1C,$3C(a1)
0000659E 47F8 FE58                  		lea	($FFFFFE58).w,a3
000065A2                            
000065A2                            Obj8C_ChkEms:
000065A2 7000                       		moveq	#0,d0
000065A4 1038 FE57                  		move.b	($FFFFFE57).w,d0
000065A8 5340                       		subq.w	#1,d0
000065AA 6500                       		bcs.s	loc_5B42
000065AC                            
000065AC                            Obj8C_ChkEmLoop:
000065AC B433 0000                  		cmp.b	(a3,d0.w),d2
000065B0 6600                       		bne.s	loc_5B3E
000065B2 5202                       		addq.b	#1,d2
000065B4 60EC                       		bra.s	Obj8C_ChkEms
000065B6                            ; ===========================================================================
000065B6                            
000065B6                            loc_5B3E:
000065B6 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
000065BA                            
000065BA                            loc_5B42:
000065BA 1342 001A                  		move.b	d2,$1A(a1)
000065BE 5229 001A                  		addq.b	#1,$1A(a1)
000065C2 5202                       		addq.b	#1,d2
000065C4 137C 0080 0026             		move.b	#$80,$26(a1)
000065CA 1343 001E                  		move.b	d3,$1E(a1)
000065CE 1343 001F                  		move.b	d3,$1F(a1)
000065D2 0643 000A                  		addi.w	#$A,d3
000065D6 43E9 0040                  		lea	$40(a1),a1
000065DA 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
000065DE                            
000065DE                            Obj8C_Move:				; XREF: Obj8C_Index
000065DE 4A68 003E                  		tst.w	$3E(a0)
000065E2 6700                       		beq.s	locret_5BBA
000065E4 4A28 001E                  		tst.b	$1E(a0)
000065E8 6700                       		beq.s	loc_5B78
000065EA 5328 001E                  		subq.b	#1,$1E(a0)
000065EE 6600                       		bne.s	loc_5B80
000065F0                            
000065F0                            loc_5B78:
000065F0 3028 003E                  		move.w	$3E(a0),d0
000065F4 D168 0026                  		add.w	d0,$26(a0)
000065F8                            
000065F8                            loc_5B80:
000065F8 1028 0026                  		move.b	$26(a0),d0
000065FC 6700                       		beq.s	loc_5B8C
000065FE 0C00 0080                  		cmpi.b	#$80,d0
00006602 6600                       		bne.s	loc_5B96
00006604                            
00006604                            loc_5B8C:
00006604 4268 003E                  		clr.w	$3E(a0)
00006608 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0000660E                            
0000660E                            loc_5B96:
0000660E 4EB9 0000 33D4             		jsr	(CalcSine).l
00006614 7800                       		moveq	#0,d4
00006616 1828 003C                  		move.b	$3C(a0),d4
0000661A C3C4                       		muls.w	d4,d1
0000661C E081                       		asr.l	#8,d1
0000661E C1C4                       		muls.w	d4,d0
00006620 E080                       		asr.l	#8,d0
00006622 D268 0038                  		add.w	$38(a0),d1
00006626 D068 003A                  		add.w	$3A(a0),d0
0000662A 3141 0008                  		move.w	d1,8(a0)
0000662E 3140 000A                  		move.w	d0,$A(a0)
00006632                            
00006632                            locret_5BBA:
00006632 4E75                       		rts	
00006634                            ; ===========================================================================
00006634                            ; ---------------------------------------------------------------------------
00006634                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00006634                            ; ---------------------------------------------------------------------------
00006634                            Map_obj8B:
00006634                            	include "_maps\obj8B.asm"
00006634                            ; ---------------------------------------------------------------------------
00006634                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00006634                            ; ---------------------------------------------------------------------------
00006634 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00006638 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
0000663C 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00006640 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00006644 08                         byte_5BCC:	dc.b 8
00006645 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
0000664A F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
0000664F E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006654 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006659 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
0000665E 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006663 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006668 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000666D 08                         byte_5BF5:	dc.b 8
0000666E E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006673 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006678 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
0000667D F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006682 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006687 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
0000668C 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006691 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006696 08                         byte_5C1E:	dc.b 8
00006697 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
0000669C F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
000066A1 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
000066A6 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
000066AB 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
000066B0 0106 0823 00               		dc.b 1,	6, 8, $23, 0
000066B5 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000066BA 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000066BF 08                         byte_5C47:	dc.b 8
000066C0 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
000066C5 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
000066CA E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
000066CF F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
000066D4 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
000066D9 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
000066DE 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000066E3 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000066E8 0C                         byte_5C70:	dc.b $C
000066E9 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
000066EE F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
000066F3 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
000066F8 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
000066FD ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00006702 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00006707 0504 0835 00               		dc.b 5,	4, 8, $35, 0
0000670C 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00006711 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00006716 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
0000671B 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006720 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006725 0A                         byte_5CAD:	dc.b $A
00006726 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
0000672B DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006730 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006735 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
0000673A DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
0000673F F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006744 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006749 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000674E 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006753 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006758 0A                         byte_5CE0:	dc.b $A
00006759 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
0000675E E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006763 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006768 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
0000676D E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006772 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006777 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
0000677C 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006781 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006786 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
0000678B 0C                         byte_5D13:	dc.b $C
0000678C F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006791 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006796 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
0000679B 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
000067A0 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
000067A5 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
000067AA 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
000067AF 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
000067B4 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
000067B9 180C 0087 00               		dc.b $18, $C, 0, $87, 0
000067BE 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000067C3 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000067C8                            		even
000067C8                            		even
000067C8                            
000067C8                            ; ---------------------------------------------------------------------------
000067C8                            ; Ending sequence demos
000067C8                            ; ---------------------------------------------------------------------------
000067C8                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
000067F6                            		even
000067F6                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00006836                            		even
00006836                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00006866                            		even
00006866                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00006896                            		even
00006896                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
000068B6                            		even
000068B6                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
000068D6                            		even
000068D6                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
00006906                            		even
00006906                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00006936                            		even
00006936                            
00006936                            ; ---------------------------------------------------------------------------
00006936                            ; Subroutine to	load level boundaries and start	locations
00006936                            ; ---------------------------------------------------------------------------
00006936                            
00006936                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006936                            
00006936                            
00006936                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00006936 7000                       		moveq	#0,d0
00006938 11C0 F740                  		move.b	d0,($FFFFF740).w
0000693C 11C0 F741                  		move.b	d0,($FFFFF741).w
00006940 11C0 F746                  		move.b	d0,($FFFFF746).w
00006944 11C0 F748                  		move.b	d0,($FFFFF748).w
00006948 11C0 F742                  		move.b	d0,($FFFFF742).w
0000694C 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006950 ED08                       		lsl.b	#6,d0
00006952 E848                       		lsr.w	#4,d0
00006954 3200                       		move.w	d0,d1
00006956 D040                       		add.w	d0,d0
00006958 D041                       		add.w	d1,d0
0000695A 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
0000695E 3018                       		move.w	(a0)+,d0
00006960 31C0 F730                  		move.w	d0,($FFFFF730).w
00006964 2018                       		move.l	(a0)+,d0
00006966 21C0 F728                  		move.l	d0,($FFFFF728).w
0000696A 21C0 F720                  		move.l	d0,($FFFFF720).w
0000696E 2018                       		move.l	(a0)+,d0
00006970 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00006974 21C0 F724                  		move.l	d0,($FFFFF724).w
00006978 3038 F728                  		move.w	($FFFFF728).w,d0
0000697C 0640 0240                  		addi.w	#$240,d0
00006980 31C0 F732                  		move.w	d0,($FFFFF732).w
00006984 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
0000698A 3018                       		move.w	(a0)+,d0
0000698C 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00006990 6000 0000                  		bra.w	LevSz_ChkLamp
00006994                            ; ===========================================================================
00006994                            ; ---------------------------------------------------------------------------
00006994                            ; Level size array and ending start location array
00006994                            ; ---------------------------------------------------------------------------
00006994                            LevelSizeArray:	incbin	misc\lvl_size.bin
00006AE4                            		even
00006AE4                            
00006AE4                            EndingStLocArray:
00006AE4                            		incbin	misc\sloc_end.bin
00006B04                            		even
00006B04                            
00006B04                            ; ===========================================================================
00006B04                            
00006B04                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
00006B04 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
00006B08 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006B0A 4EB9 0000 0000             		jsr	Obj79_LoadInfo
00006B10 3238 D008                  		move.w	($FFFFD008).w,d1
00006B14 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006B18 6000                       		bra.s	loc_60D0
00006B1A                            ; ===========================================================================
00006B1A                            
00006B1A                            LevSz_StartLoc:				; XREF: LevelSizeLoad
00006B1A 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006B1E ED08                       		lsl.b	#6,d0
00006B20 E848                       		lsr.w	#4,d0
00006B22 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006B26 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006B2A 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00006B2C 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00006B30 5340                       		subq.w	#1,d0
00006B32 E548                       		lsl.w	#2,d0
00006B34 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006B38                            
00006B38                            LevSz_SonicPos:
00006B38 7200                       		moveq	#0,d1
00006B3A 3219                       		move.w	(a1)+,d1
00006B3C 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
00006B40 7000                       		moveq	#0,d0
00006B42 3011                       		move.w	(a1),d0
00006B44 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00006B48                            
00006B48                            loc_60D0:				; XREF: LevSz_ChkLamp
00006B48 4278 F7A8                  		clr.w	($FFFFF7A8).w		; reset Sonic's position tracking index
00006B4C 45F8 CB00                  		lea	($FFFFCB00).w,a2	; load the tracking array into a2
00006B50 743F                       		moveq	#63,d2				; begin a 64-step loop
00006B52                            @looppoint:
00006B52 34C1                       		move.w	d1,(a2)+			; fill in X
00006B54 34C0                       		move.w	d0,(a2)+			; fill in Y
00006B56 51CA FFFA                  		dbf	d2,@looppoint		; loop
00006B5A 0441 00A0                  		subi.w	#$A0,d1
00006B5E 6400                       		bcc.s	loc_60D8
00006B60 7200                       		moveq	#0,d1
00006B62                            
00006B62                            loc_60D8:
00006B62 3438 F72A                  		move.w	($FFFFF72A).w,d2
00006B66 B242                       		cmp.w	d2,d1
00006B68 6500                       		bcs.s	loc_60E2
00006B6A 3202                       		move.w	d2,d1
00006B6C                            
00006B6C                            loc_60E2:
00006B6C 31C1 F700                  		move.w	d1,($FFFFF700).w
00006B70 0440 0060                  		subi.w	#$60,d0
00006B74 6400                       		bcc.s	loc_60EE
00006B76 7000                       		moveq	#0,d0
00006B78                            
00006B78                            loc_60EE:
00006B78 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006B7C 6D00                       		blt.s	loc_60F8
00006B7E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00006B82                            
00006B82                            loc_60F8:
00006B82 31C0 F704                  		move.w	d0,($FFFFF704).w
00006B86 6100 0000                  		bsr.w	BgScrollSpeed
00006B8A 7000                       		moveq	#0,d0
00006B8C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006B90 E508                       		lsl.b	#2,d0
00006B92 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00006B98 6000 0000                  		bra.w	LevSz_Unk
00006B9C                            ; ===========================================================================
00006B9C                            ; ---------------------------------------------------------------------------
00006B9C                            ; Sonic	start location array
00006B9C                            ; ---------------------------------------------------------------------------
00006B9C                            StartLocArray:	incbin	misc\sloc_lev.bin
00006C0C                            		even
00006C0C                            
00006C0C                            ; ---------------------------------------------------------------------------
00006C0C                            ; Which	256x256	tiles contain loops or roll-tunnels
00006C0C                            ; ---------------------------------------------------------------------------
00006C0C                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00006C0C                            ; loop,	loop, tunnel, tunnel
00006C0C                            ; ---------------------------------------------------------------------------
00006C0C                            LoopTileNums:	incbin	misc\loopnums.bin
00006C28                            		even
00006C28                            
00006C28                            ; ===========================================================================
00006C28                            
00006C28                            LevSz_Unk:				; XREF: LevelSizeLoad
00006C28 7000                       		moveq	#0,d0
00006C2A 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006C2E E748                       		lsl.w	#3,d0
00006C30 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
00006C34 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
00006C38 24D9                       		move.l	(a1)+,(a2)+
00006C3A 24D9                       		move.l	(a1)+,(a2)+
00006C3C 4E75                       		rts	
00006C3E                            ; End of function LevelSizeLoad
00006C3E                            
00006C3E                            ; ===========================================================================
00006C3E 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00006C46 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006C4E 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006C56 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006C5E 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006C66 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006C6E 0070 0100 0100 0100        		dc.l $700100, $1000100
00006C76                            
00006C76                            ; ---------------------------------------------------------------------------
00006C76                            ; Subroutine to	set scroll speed of some backgrounds
00006C76                            ; ---------------------------------------------------------------------------
00006C76                            
00006C76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C76                            
00006C76                            
00006C76                            BgScrollSpeed:				; XREF: LevelSizeLoad
00006C76 4A38 FE30                  		tst.b	($FFFFFE30).w
00006C7A 6600                       		bne.s	loc_6206
00006C7C 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006C80 31C0 F714                  		move.w	d0,($FFFFF714).w
00006C84 31C1 F708                  		move.w	d1,($FFFFF708).w
00006C88 31C1 F710                  		move.w	d1,($FFFFF710).w
00006C8C 31C1 F718                  		move.w	d1,($FFFFF718).w
00006C90                            
00006C90                            loc_6206:
00006C90 7400                       		moveq	#0,d2
00006C92 1438 FE10                  		move.b	($FFFFFE10).w,d2
00006C96 D442                       		add.w	d2,d2
00006C98 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00006C9C 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00006CA0                            ; End of function BgScrollSpeed
00006CA0                            
00006CA0                            ; ===========================================================================
00006CA0 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006CA4 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00006CA8 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00006CAC 0000                       		dc.w BgScroll_End-BgScroll_Index
00006CAE                            ; ===========================================================================
00006CAE                            
00006CAE                            BgScroll_GHZ:				; XREF: BgScroll_Index
00006CAE 6000 0000                  		bra.w	Deform_GHZ
00006CB2                            ; ===========================================================================
00006CB2                            
00006CB2                            BgScroll_LZ:				; XREF: BgScroll_Index
00006CB2 E280                       		asr.l	#1,d0
00006CB4 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006CB8 4E75                       		rts	
00006CBA                            ; ===========================================================================
00006CBA                            
00006CBA                            BgScroll_MZ:				; XREF: BgScroll_Index
00006CBA 4E75                       		rts	
00006CBC                            ; ===========================================================================
00006CBC                            
00006CBC                            BgScroll_SLZ:				; XREF: BgScroll_Index
00006CBC E280                       		asr.l	#1,d0
00006CBE 0640 00C0                  		addi.w	#$C0,d0
00006CC2 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006CC6 4E75                       		rts	
00006CC8                            ; ===========================================================================
00006CC8                            
00006CC8                            BgScroll_SYZ:				; XREF: BgScroll_Index
00006CC8 E980                       		asl.l	#4,d0
00006CCA 2400                       		move.l	d0,d2
00006CCC E380                       		asl.l	#1,d0
00006CCE D082                       		add.l	d2,d0
00006CD0 E080                       		asr.l	#8,d0
00006CD2 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006CD6 31C0 F714                  		move.w	d0,($FFFFF714).w
00006CDA 4E75                       		rts	
00006CDC                            ; ===========================================================================
00006CDC                            
00006CDC                            BgScroll_SBZ:				; XREF: BgScroll_Index
00006CDC E980                       		asl.l	#4,d0
00006CDE E380                       		asl.l	#1,d0
00006CE0 E080                       		asr.l	#8,d0
00006CE2 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006CE6 4E75                       		rts	
00006CE8                            ; ===========================================================================
00006CE8                            
00006CE8                            BgScroll_End:				; XREF: BgScroll_Index
00006CE8 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006CEE 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006CF4 4E75                       		rts	
00006CF6                            ; ===========================================================================
00006CF6 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
00006CFC 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006D02 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
00006D08 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006D0E 4E75                       		rts
00006D10                            
00006D10                            ; ---------------------------------------------------------------------------
00006D10                            ; Background layer deformation subroutines
00006D10                            ; ---------------------------------------------------------------------------
00006D10                            
00006D10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D10                            
00006D10                            
00006D10                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00006D10 4A38 F744                  		tst.b	($FFFFF744).w
00006D14 6700                       		beq.s	loc_628E
00006D16 4E75                       		rts	
00006D18                            ; ===========================================================================
00006D18                            
00006D18                            loc_628E:
00006D18 4278 F754                  		clr.w	($FFFFF754).w
00006D1C 4278 F756                  		clr.w	($FFFFF756).w
00006D20 4278 F758                  		clr.w	($FFFFF758).w
00006D24 4278 F75A                  		clr.w	($FFFFF75A).w
00006D28 6100 0000                  		bsr.w	ScrollHoriz
00006D2C 6100 0000                  		bsr.w	ScrollVertical
00006D30 6100 0000                  		bsr.w	DynScrResizeLoad
00006D34 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
00006D3A 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
00006D40 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00006D46 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006D4C 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
00006D52 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00006D58 7000                       		moveq	#0,d0
00006D5A 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006D5E D040                       		add.w	d0,d0
00006D60 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00006D64 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00006D68                            ; End of function DeformBgLayer
00006D68                            
00006D68                            ; ===========================================================================
00006D68                            ; ---------------------------------------------------------------------------
00006D68                            ; Offset index for background layer deformation	code
00006D68                            ; ---------------------------------------------------------------------------
00006D68 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00006D6C 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00006D70 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00006D74 0000                       		dc.w Deform_GHZ-Deform_Index
00006D76                            ; ---------------------------------------------------------------------------
00006D76                            ; Green	Hill Zone background layer deformation code
00006D76                            ; ---------------------------------------------------------------------------
00006D76                            
00006D76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D76                            
00006D76                            
00006D76                            Deform_GHZ:				; XREF: Deform_Index
00006D76 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006D7A 48C4                       		ext.l	d4
00006D7C EB84                       		asl.l	#5,d4
00006D7E 2204                       		move.l	d4,d1
00006D80 E384                       		asl.l	#1,d4
00006D82 D881                       		add.l	d1,d4
00006D84 7A00                       		moveq	#0,d5
00006D86 6100 0000                  		bsr.w	ScrollBlock1
00006D8A 6100 0000                  		bsr.w	ScrollBlock4
00006D8E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006D92 3038 F704                  		move.w	($FFFFF704).w,d0
00006D96 0240 07FF                  		andi.w	#$7FF,d0
00006D9A EA48                       		lsr.w	#5,d0
00006D9C 4440                       		neg.w	d0
00006D9E 0640 0026                  		addi.w	#$26,d0
00006DA2 31C0 F714                  		move.w	d0,($FFFFF714).w
00006DA6 3800                       		move.w	d0,d4
00006DA8 6100 0000                  		bsr.w	ScrollBlock3
00006DAC 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006DB2 323C 006F                  		move.w	#$6F,d1
00006DB6 9244                       		sub.w	d4,d1
00006DB8 3038 F700                  		move.w	($FFFFF700).w,d0
00006DBC 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00006DC2 6600                       		bne.s	loc_633C
00006DC4 7000                       		moveq	#0,d0
00006DC6                            
00006DC6                            loc_633C:
00006DC6 4440                       		neg.w	d0
00006DC8 4840                       		swap	d0
00006DCA 3038 F708                  		move.w	($FFFFF708).w,d0
00006DCE 4440                       		neg.w	d0
00006DD0                            
00006DD0                            loc_6346:
00006DD0 22C0                       		move.l	d0,(a1)+
00006DD2 51C9 FFFC                  		dbf	d1,loc_6346
00006DD6 323C 0027                  		move.w	#$27,d1
00006DDA 3038 F710                  		move.w	($FFFFF710).w,d0
00006DDE 4440                       		neg.w	d0
00006DE0                            
00006DE0                            loc_6356:
00006DE0 22C0                       		move.l	d0,(a1)+
00006DE2 51C9 FFFC                  		dbf	d1,loc_6356
00006DE6 3038 F710                  		move.w	($FFFFF710).w,d0
00006DEA 0640 0000                  		addi.w	#0,d0
00006DEE 3438 F700                  		move.w	($FFFFF700).w,d2
00006DF2 0642 FE00                  		addi.w	#-$200,d2
00006DF6 9440                       		sub.w	d0,d2
00006DF8 48C2                       		ext.l	d2
00006DFA E182                       		asl.l	#8,d2
00006DFC 85FC 0068                  		divs.w	#$68,d2
00006E00 48C2                       		ext.l	d2
00006E02 E182                       		asl.l	#8,d2
00006E04 7600                       		moveq	#0,d3
00006E06 3600                       		move.w	d0,d3
00006E08 323C 0047                  		move.w	#$47,d1
00006E0C D244                       		add.w	d4,d1
00006E0E                            
00006E0E                            loc_6384:
00006E0E 3003                       		move.w	d3,d0
00006E10 4440                       		neg.w	d0
00006E12 22C0                       		move.l	d0,(a1)+
00006E14 4843                       		swap	d3
00006E16 D682                       		add.l	d2,d3
00006E18 4843                       		swap	d3
00006E1A 51C9 FFF2                  		dbf	d1,loc_6384
00006E1E 4E75                       		rts	
00006E20                            ; End of function Deform_GHZ
00006E20                            
00006E20                            ; ---------------------------------------------------------------------------
00006E20                            ; Labyrinth Zone background layer deformation code
00006E20                            ; ---------------------------------------------------------------------------
00006E20                            
00006E20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E20                            
00006E20                            
00006E20                            Deform_LZ:				; XREF: Deform_Index
00006E20 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006E24 48C4                       		ext.l	d4
00006E26 EF84                       		asl.l	#7,d4
00006E28 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006E2C 48C5                       		ext.l	d5
00006E2E EF85                       		asl.l	#7,d5
00006E30 6100 0000                  		bsr.w	ScrollBlock1
00006E34 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006E3A 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006E3E 323C 00DF                  		move.w	#$DF,d1
00006E42 3038 F700                  		move.w	($FFFFF700).w,d0
00006E46 4440                       		neg.w	d0
00006E48 4840                       		swap	d0
00006E4A 3038 F708                  		move.w	($FFFFF708).w,d0
00006E4E 4440                       		neg.w	d0
00006E50                            
00006E50                            loc_63C6:
00006E50 22C0                       		move.l	d0,(a1)+
00006E52 51C9 FFFC                  		dbf	d1,loc_63C6
00006E56 3038 F646                  		move.w	($FFFFF646).w,d0
00006E5A 9078 F704                  		sub.w	($FFFFF704).w,d0
00006E5E 4E75                       		rts	
00006E60                            ; End of function Deform_LZ
00006E60                            
00006E60                            ; ---------------------------------------------------------------------------
00006E60                            ; Marble Zone background layer deformation code
00006E60                            ; ---------------------------------------------------------------------------
00006E60                            
00006E60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E60                            
00006E60                            
00006E60                            Deform_MZ:				; XREF: Deform_Index
00006E60 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006E64 48C4                       		ext.l	d4
00006E66 ED84                       		asl.l	#6,d4
00006E68 2204                       		move.l	d4,d1
00006E6A E384                       		asl.l	#1,d4
00006E6C D881                       		add.l	d1,d4
00006E6E 7A00                       		moveq	#0,d5
00006E70 6100 0000                  		bsr.w	ScrollBlock1
00006E74 303C 0200                  		move.w	#$200,d0
00006E78 3238 F704                  		move.w	($FFFFF704).w,d1
00006E7C 0441 01C8                  		subi.w	#$1C8,d1
00006E80 6500                       		bcs.s	loc_6402
00006E82 3401                       		move.w	d1,d2
00006E84 D241                       		add.w	d1,d1
00006E86 D242                       		add.w	d2,d1
00006E88 E441                       		asr.w	#2,d1
00006E8A D041                       		add.w	d1,d0
00006E8C                            
00006E8C                            loc_6402:
00006E8C 31C0 F714                  		move.w	d0,($FFFFF714).w
00006E90 6100 0000                  		bsr.w	ScrollBlock3
00006E94 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006E9A 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006E9E 323C 00DF                  		move.w	#$DF,d1
00006EA2 3038 F700                  		move.w	($FFFFF700).w,d0
00006EA6 4440                       		neg.w	d0
00006EA8 4840                       		swap	d0
00006EAA 3038 F708                  		move.w	($FFFFF708).w,d0
00006EAE 4440                       		neg.w	d0
00006EB0                            
00006EB0                            loc_6426:
00006EB0 22C0                       		move.l	d0,(a1)+
00006EB2 51C9 FFFC                  		dbf	d1,loc_6426
00006EB6 4E75                       		rts	
00006EB8                            ; End of function Deform_MZ
00006EB8                            
00006EB8                            ; ---------------------------------------------------------------------------
00006EB8                            ; Star Light Zone background layer deformation code
00006EB8                            ; ---------------------------------------------------------------------------
00006EB8                            
00006EB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EB8                            
00006EB8                            
00006EB8                            Deform_SLZ:				; XREF: Deform_Index
00006EB8 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006EBC 48C4                       		ext.l	d4
00006EBE EF84                       		asl.l	#7,d4
00006EC0 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006EC4 48C5                       		ext.l	d5
00006EC6 EF85                       		asl.l	#7,d5
00006EC8 6100 0000                  		bsr.w	ScrollBlock2
00006ECC 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006ED2 6100 0000                  		bsr.w	Deform_SLZ_2
00006ED6 45F8 A800                  		lea	($FFFFA800).w,a2
00006EDA 3038 F70C                  		move.w	($FFFFF70C).w,d0
00006EDE 3400                       		move.w	d0,d2
00006EE0 0440 00C0                  		subi.w	#$C0,d0
00006EE4 0240 03F0                  		andi.w	#$3F0,d0
00006EE8 E648                       		lsr.w	#3,d0
00006EEA 45F2 0000                  		lea	(a2,d0.w),a2
00006EEE 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006EF2 323C 000E                  		move.w	#$E,d1
00006EF6 3038 F700                  		move.w	($FFFFF700).w,d0
00006EFA 4440                       		neg.w	d0
00006EFC 4840                       		swap	d0
00006EFE 0242 000F                  		andi.w	#$F,d2
00006F02 D442                       		add.w	d2,d2
00006F04 301A                       		move.w	(a2)+,d0
00006F06 4EFB 2000                  		jmp	loc_6482(pc,d2.w)
00006F0A                            ; ===========================================================================
00006F0A                            
00006F0A                            loc_6480:				; XREF: Deform_SLZ
00006F0A 301A                       		move.w	(a2)+,d0
00006F0C                            
00006F0C                            loc_6482:
00006F0C 22C0                       		move.l	d0,(a1)+
00006F0E 22C0                       		move.l	d0,(a1)+
00006F10 22C0                       		move.l	d0,(a1)+
00006F12 22C0                       		move.l	d0,(a1)+
00006F14 22C0                       		move.l	d0,(a1)+
00006F16 22C0                       		move.l	d0,(a1)+
00006F18 22C0                       		move.l	d0,(a1)+
00006F1A 22C0                       		move.l	d0,(a1)+
00006F1C 22C0                       		move.l	d0,(a1)+
00006F1E 22C0                       		move.l	d0,(a1)+
00006F20 22C0                       		move.l	d0,(a1)+
00006F22 22C0                       		move.l	d0,(a1)+
00006F24 22C0                       		move.l	d0,(a1)+
00006F26 22C0                       		move.l	d0,(a1)+
00006F28 22C0                       		move.l	d0,(a1)+
00006F2A 22C0                       		move.l	d0,(a1)+
00006F2C 51C9 FFDC                  		dbf	d1,loc_6480
00006F30 4E75                       		rts	
00006F32                            ; End of function Deform_SLZ
00006F32                            
00006F32                            
00006F32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F32                            
00006F32                            
00006F32                            Deform_SLZ_2:				; XREF: Deform_SLZ
00006F32 43F8 A800                  		lea	($FFFFA800).w,a1
00006F36 3438 F700                  		move.w	($FFFFF700).w,d2
00006F3A 4442                       		neg.w	d2
00006F3C 3002                       		move.w	d2,d0
00006F3E E640                       		asr.w	#3,d0
00006F40 9042                       		sub.w	d2,d0
00006F42 48C0                       		ext.l	d0
00006F44 E980                       		asl.l	#4,d0
00006F46 81FC 001C                  		divs.w	#$1C,d0
00006F4A 48C0                       		ext.l	d0
00006F4C E980                       		asl.l	#4,d0
00006F4E E180                       		asl.l	#8,d0
00006F50 7600                       		moveq	#0,d3
00006F52 3602                       		move.w	d2,d3
00006F54 323C 001B                  		move.w	#$1B,d1
00006F58                            
00006F58                            loc_64CE:
00006F58 32C3                       		move.w	d3,(a1)+
00006F5A 4843                       		swap	d3
00006F5C D680                       		add.l	d0,d3
00006F5E 4843                       		swap	d3
00006F60 51C9 FFF6                  		dbf	d1,loc_64CE
00006F64 3002                       		move.w	d2,d0
00006F66 E640                       		asr.w	#3,d0
00006F68 323C 0004                  		move.w	#4,d1
00006F6C                            
00006F6C                            loc_64E2:
00006F6C 32C0                       		move.w	d0,(a1)+
00006F6E 51C9 FFFC                  		dbf	d1,loc_64E2
00006F72 3002                       		move.w	d2,d0
00006F74 E440                       		asr.w	#2,d0
00006F76 323C 0004                  		move.w	#4,d1
00006F7A                            
00006F7A                            loc_64F0:
00006F7A 32C0                       		move.w	d0,(a1)+
00006F7C 51C9 FFFC                  		dbf	d1,loc_64F0
00006F80 3002                       		move.w	d2,d0
00006F82 E240                       		asr.w	#1,d0
00006F84 323C 001D                  		move.w	#$1D,d1
00006F88                            
00006F88                            loc_64FE:
00006F88 32C0                       		move.w	d0,(a1)+
00006F8A 51C9 FFFC                  		dbf	d1,loc_64FE
00006F8E 4E75                       		rts	
00006F90                            ; End of function Deform_SLZ_2
00006F90                            
00006F90                            ; ---------------------------------------------------------------------------
00006F90                            ; Spring Yard Zone background layer deformation	code
00006F90                            ; ---------------------------------------------------------------------------
00006F90                            
00006F90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F90                            
00006F90                            
00006F90                            Deform_SYZ:				; XREF: Deform_Index
00006F90 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006F94 48C4                       		ext.l	d4
00006F96 ED84                       		asl.l	#6,d4
00006F98 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006F9C 48C5                       		ext.l	d5
00006F9E E985                       		asl.l	#4,d5
00006FA0 2205                       		move.l	d5,d1
00006FA2 E385                       		asl.l	#1,d5
00006FA4 DA81                       		add.l	d1,d5
00006FA6 6100 0000                  		bsr.w	ScrollBlock1
00006FAA 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006FB0 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006FB4 323C 00DF                  		move.w	#$DF,d1
00006FB8 3038 F700                  		move.w	($FFFFF700).w,d0
00006FBC 4440                       		neg.w	d0
00006FBE 4840                       		swap	d0
00006FC0 3038 F708                  		move.w	($FFFFF708).w,d0
00006FC4 4440                       		neg.w	d0
00006FC6                            
00006FC6                            loc_653C:
00006FC6 22C0                       		move.l	d0,(a1)+
00006FC8 51C9 FFFC                  		dbf	d1,loc_653C
00006FCC 4E75                       		rts	
00006FCE                            ; End of function Deform_SYZ
00006FCE                            
00006FCE                            ; ---------------------------------------------------------------------------
00006FCE                            ; Scrap	Brain Zone background layer deformation	code
00006FCE                            ; ---------------------------------------------------------------------------
00006FCE                            
00006FCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FCE                            
00006FCE                            
00006FCE                            Deform_SBZ:				; XREF: Deform_Index
00006FCE 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006FD2 48C4                       		ext.l	d4
00006FD4 ED84                       		asl.l	#6,d4
00006FD6 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006FDA 48C5                       		ext.l	d5
00006FDC E985                       		asl.l	#4,d5
00006FDE E385                       		asl.l	#1,d5
00006FE0 6100 0000                  		bsr.w	ScrollBlock1
00006FE4 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006FEA 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006FEE 323C 00DF                  		move.w	#$DF,d1
00006FF2 3038 F700                  		move.w	($FFFFF700).w,d0
00006FF6 4440                       		neg.w	d0
00006FF8 4840                       		swap	d0
00006FFA 3038 F708                  		move.w	($FFFFF708).w,d0
00006FFE 4440                       		neg.w	d0
00007000                            
00007000                            loc_6576:
00007000 22C0                       		move.l	d0,(a1)+
00007002 51C9 FFFC                  		dbf	d1,loc_6576
00007006 4E75                       		rts	
00007008                            ; End of function Deform_SBZ
00007008                            
00007008                            ; ---------------------------------------------------------------------------
00007008                            ; Subroutine to	scroll the level horizontally as Sonic moves
00007008                            ; ---------------------------------------------------------------------------
00007008                            
00007008                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007008                            
00007008                            
00007008                            ScrollHoriz:				; XREF: DeformBgLayer
00007008 3838 F700                  		move.w	($FFFFF700).w,d4
0000700C 6100                       		bsr.s	ScrollHoriz2
0000700E 3038 F700                  		move.w	($FFFFF700).w,d0
00007012 0240 0010                  		andi.w	#$10,d0
00007016 1238 F74A                  		move.b	($FFFFF74A).w,d1
0000701A B300                       		eor.b	d1,d0
0000701C 6600                       		bne.s	locret_65B0
0000701E 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00007024 3038 F700                  		move.w	($FFFFF700).w,d0
00007028 9044                       		sub.w	d4,d0
0000702A 6A00                       		bpl.s	loc_65AA
0000702C 08F8 0002 F754             		bset	#2,($FFFFF754).w
00007032 4E75                       		rts	
00007034                            ; ===========================================================================
00007034                            
00007034                            loc_65AA:
00007034 08F8 0003 F754             		bset	#3,($FFFFF754).w
0000703A                            
0000703A                            locret_65B0:
0000703A 4E75                       		rts	
0000703C                            ; End of function ScrollHoriz
0000703C                            
0000703C                            
0000703C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000703C                            
0000703C                            
0000703C                            ScrollHoriz2:				; XREF: ScrollHoriz
0000703C 3238 C904                  		move.w	($FFFFC904).w,d1
00007040 6700                       		beq.s	@cont1
00007042 0441 0100                  		sub.w	#$100,d1
00007046 31C1 C904                  		move.w	d1,($FFFFC904).w
0000704A 7200                       		moveq	#0,d1
0000704C 1238 C904                  		move.b	($FFFFC904).w,d1
00007050 E509                       		lsl.b	#2,d1
00007052 5801                       		addq.b	#4,d1
00007054 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007058 9001                       		sub.b	d1,d0
0000705A 43F8 CB00                  		lea	($FFFFCB00).w,a1
0000705E 3031 0000                  		move.w	(a1,d0.w),d0
00007062 0240 3FFF                  		and.w	#$3FFF,d0
00007066 6000                       		bra.s	@cont2
00007068                            		
00007068                            @cont1:
00007068 3038 D008                  		move.w	($FFFFD008).w,d0
0000706C                            		
0000706C                            @cont2:
0000706C 9078 F700                  		sub.w	($FFFFF700).w,d0
00007070 0440 0090                  		subi.w	#$90,d0
00007074 6500                       		bcs.s	loc_65F6
00007076 0440 0010                  		subi.w	#$10,d0
0000707A 6400                       		bcc.s	loc_65CC
0000707C 4278 F73A                  		clr.w	($FFFFF73A).w
00007080 4E75                       		rts	
00007082                            ; ===========================================================================
00007082                            
00007082                            loc_65CC:
00007082 0C40 0010                  		cmpi.w	#$10,d0
00007086 6500                       		bcs.s	loc_65D6
00007088 303C 0010                  		move.w	#$10,d0
0000708C                            
0000708C                            loc_65D6:
0000708C D078 F700                  		add.w	($FFFFF700).w,d0
00007090 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00007094 6D00                       		blt.s	loc_65E4
00007096 3038 F72A                  		move.w	($FFFFF72A).w,d0
0000709A                            
0000709A                            loc_65E4:
0000709A 3200                       		move.w	d0,d1
0000709C 9278 F700                  		sub.w	($FFFFF700).w,d1
000070A0 E141                       		asl.w	#8,d1
000070A2 31C0 F700                  		move.w	d0,($FFFFF700).w
000070A6 31C1 F73A                  		move.w	d1,($FFFFF73A).w
000070AA 4E75                       		rts	
000070AC                            ; ===========================================================================
000070AC                            
000070AC                            loc_65F6:				; XREF: ScrollHoriz2
000070AC 0C40 FFF0                  		cmpi.w	#-$10,d0
000070B0 6E00                       		bgt.s	@cont
000070B2 303C FFF0                  		move.w	#-$10,d0	
000070B6                            		
000070B6                            @cont:
000070B6 D078 F700                  		add.w	($FFFFF700).w,d0
000070BA B078 F728                  		cmp.w	($FFFFF728).w,d0
000070BE 6EDA                       		bgt.s	loc_65E4
000070C0 3038 F728                  		move.w	($FFFFF728).w,d0
000070C4 60D4                       		bra.s	loc_65E4
000070C6                            ; End of function ScrollHoriz2
000070C6                            
000070C6                            ; ===========================================================================
000070C6 4A40                       		tst.w	d0
000070C8 6A00                       		bpl.s	loc_6610
000070CA 303C FFFE                  		move.w	#-2,d0
000070CE 60DC                       		bra.s	loc_65F6
000070D0                            ; ===========================================================================
000070D0                            
000070D0                            loc_6610:
000070D0 303C 0002                  		move.w	#2,d0
000070D4 60AC                       		bra.s	loc_65CC
000070D6                            
000070D6                            ; ---------------------------------------------------------------------------
000070D6                            ; Subroutine to	scroll the level vertically as Sonic moves
000070D6                            ; ---------------------------------------------------------------------------
000070D6                            
000070D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070D6                            
000070D6                            
000070D6                            ScrollVertical:				; XREF: DeformBgLayer
000070D6 7200                       		moveq	#0,d1
000070D8 3038 D00C                  		move.w	($FFFFD00C).w,d0
000070DC 9078 F704                  		sub.w	($FFFFF704).w,d0
000070E0 0838 0002 D022             		btst	#2,($FFFFD022).w
000070E6 6700                       		beq.s	loc_662A
000070E8 5B40                       		subq.w	#5,d0
000070EA                            
000070EA                            loc_662A:
000070EA 0838 0001 D022             		btst	#1,($FFFFD022).w
000070F0 6700                       		beq.s	loc_664A
000070F2 0640 0020                  		addi.w	#$20,d0
000070F6 9078 F73E                  		sub.w	($FFFFF73E).w,d0
000070FA 6500                       		bcs.s	loc_6696
000070FC 0440 0040                  		subi.w	#$40,d0
00007100 6400                       		bcc.s	loc_6696
00007102 4A38 F75C                  		tst.b	($FFFFF75C).w
00007106 6600                       		bne.s	loc_66A8
00007108 6000                       		bra.s	loc_6656
0000710A                            ; ===========================================================================
0000710A                            
0000710A                            loc_664A:
0000710A 9078 F73E                  		sub.w	($FFFFF73E).w,d0
0000710E 6600                       		bne.s	loc_665C
00007110 4A38 F75C                  		tst.b	($FFFFF75C).w
00007114 6600                       		bne.s	loc_66A8
00007116                            
00007116                            loc_6656:
00007116 4278 F73C                  		clr.w	($FFFFF73C).w
0000711A 4E75                       		rts	
0000711C                            ; ===========================================================================
0000711C                            
0000711C                            loc_665C:
0000711C 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00007122 6600                       		bne.s	loc_6684
00007124 3238 D014                  		move.w	($FFFFD014).w,d1
00007128 6A00                       		bpl.s	loc_666C
0000712A 4441                       		neg.w	d1
0000712C                            
0000712C                            loc_666C:
0000712C 0C41 0800                  		cmpi.w	#$800,d1
00007130 6400                       		bcc.s	loc_6696
00007132 323C 0600                  		move.w	#$600,d1
00007136 0C40 0006                  		cmpi.w	#6,d0
0000713A 6E00                       		bgt.s	loc_66F6
0000713C 0C40 FFFA                  		cmpi.w	#-6,d0
00007140 6D00                       		blt.s	loc_66C0
00007142 6000                       		bra.s	loc_66AE
00007144                            ; ===========================================================================
00007144                            
00007144                            loc_6684:
00007144 323C 0200                  		move.w	#$200,d1
00007148 0C40 0002                  		cmpi.w	#2,d0
0000714C 6E00                       		bgt.s	loc_66F6
0000714E 0C40 FFFE                  		cmpi.w	#-2,d0
00007152 6D00                       		blt.s	loc_66C0
00007154 6000                       		bra.s	loc_66AE
00007156                            ; ===========================================================================
00007156                            
00007156                            loc_6696:
00007156 323C 1000                  		move.w	#$1000,d1
0000715A 0C40 0010                  		cmpi.w	#$10,d0
0000715E 6E00                       		bgt.s	loc_66F6
00007160 0C40 FFF0                  		cmpi.w	#-$10,d0
00007164 6D00                       		blt.s	loc_66C0
00007166 6000                       		bra.s	loc_66AE
00007168                            ; ===========================================================================
00007168                            
00007168                            loc_66A8:
00007168 7000                       		moveq	#0,d0
0000716A 11C0 F75C                  		move.b	d0,($FFFFF75C).w
0000716E                            
0000716E                            loc_66AE:
0000716E 7200                       		moveq	#0,d1
00007170 3200                       		move.w	d0,d1
00007172 D278 F704                  		add.w	($FFFFF704).w,d1
00007176 4A40                       		tst.w	d0
00007178 6A00 0000                  		bpl.w	loc_6700
0000717C 6000 0000                  		bra.w	loc_66CC
00007180                            ; ===========================================================================
00007180                            
00007180                            loc_66C0:
00007180 4441                       		neg.w	d1
00007182 48C1                       		ext.l	d1
00007184 E181                       		asl.l	#8,d1
00007186 D2B8 F704                  		add.l	($FFFFF704).w,d1
0000718A 4841                       		swap	d1
0000718C                            
0000718C                            loc_66CC:
0000718C B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00007190 6E00                       		bgt.s	loc_6724
00007192 0C41 FF00                  		cmpi.w	#-$100,d1
00007196 6E00                       		bgt.s	loc_66F0
00007198 0241 07FF                  		andi.w	#$7FF,d1
0000719C 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
000071A2 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
000071A8 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
000071AE 6000                       		bra.s	loc_6724
000071B0                            ; ===========================================================================
000071B0                            
000071B0                            loc_66F0:
000071B0 3238 F72C                  		move.w	($FFFFF72C).w,d1
000071B4 6000                       		bra.s	loc_6724
000071B6                            ; ===========================================================================
000071B6                            
000071B6                            loc_66F6:
000071B6 48C1                       		ext.l	d1
000071B8 E181                       		asl.l	#8,d1
000071BA D2B8 F704                  		add.l	($FFFFF704).w,d1
000071BE 4841                       		swap	d1
000071C0                            
000071C0                            loc_6700:
000071C0 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
000071C4 6D00                       		blt.s	loc_6724
000071C6 0441 0800                  		subi.w	#$800,d1
000071CA 6500                       		bcs.s	loc_6720
000071CC 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
000071D2 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
000071D8 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
000071DE 6000                       		bra.s	loc_6724
000071E0                            ; ===========================================================================
000071E0                            
000071E0                            loc_6720:
000071E0 3238 F72E                  		move.w	($FFFFF72E).w,d1
000071E4                            
000071E4                            loc_6724:
000071E4 3838 F704                  		move.w	($FFFFF704).w,d4
000071E8 4841                       		swap	d1
000071EA 2601                       		move.l	d1,d3
000071EC 96B8 F704                  		sub.l	($FFFFF704).w,d3
000071F0 E09B                       		ror.l	#8,d3
000071F2 31C3 F73C                  		move.w	d3,($FFFFF73C).w
000071F6 21C1 F704                  		move.l	d1,($FFFFF704).w
000071FA 3038 F704                  		move.w	($FFFFF704).w,d0
000071FE 0240 0010                  		andi.w	#$10,d0
00007202 1238 F74B                  		move.b	($FFFFF74B).w,d1
00007206 B300                       		eor.b	d1,d0
00007208 6600                       		bne.s	locret_6766
0000720A 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00007210 3038 F704                  		move.w	($FFFFF704).w,d0
00007214 9044                       		sub.w	d4,d0
00007216 6A00                       		bpl.s	loc_6760
00007218 08F8 0000 F754             		bset	#0,($FFFFF754).w
0000721E 4E75                       		rts	
00007220                            ; ===========================================================================
00007220                            
00007220                            loc_6760:
00007220 08F8 0001 F754             		bset	#1,($FFFFF754).w
00007226                            
00007226                            locret_6766:
00007226 4E75                       		rts	
00007228                            ; End of function ScrollVertical
00007228                            
00007228                            
00007228                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007228                            
00007228                            
00007228                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00007228 2438 F708                  		move.l	($FFFFF708).w,d2
0000722C 2002                       		move.l	d2,d0
0000722E D084                       		add.l	d4,d0
00007230 21C0 F708                  		move.l	d0,($FFFFF708).w
00007234 2200                       		move.l	d0,d1
00007236 4841                       		swap	d1
00007238 0241 0010                  		andi.w	#$10,d1
0000723C 1638 F74C                  		move.b	($FFFFF74C).w,d3
00007240 B701                       		eor.b	d3,d1
00007242 6600                       		bne.s	loc_679C
00007244 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
0000724A 9082                       		sub.l	d2,d0
0000724C 6A00                       		bpl.s	loc_6796
0000724E 08F8 0002 F756             		bset	#2,($FFFFF756).w
00007254 6000                       		bra.s	loc_679C
00007256                            ; ===========================================================================
00007256                            
00007256                            loc_6796:
00007256 08F8 0003 F756             		bset	#3,($FFFFF756).w
0000725C                            
0000725C                            loc_679C:
0000725C 2638 F70C                  		move.l	($FFFFF70C).w,d3
00007260 2003                       		move.l	d3,d0
00007262 D085                       		add.l	d5,d0
00007264 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00007268 2200                       		move.l	d0,d1
0000726A 4841                       		swap	d1
0000726C 0241 0010                  		andi.w	#$10,d1
00007270 1438 F74D                  		move.b	($FFFFF74D).w,d2
00007274 B501                       		eor.b	d2,d1
00007276 6600                       		bne.s	locret_67D0
00007278 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
0000727E 9083                       		sub.l	d3,d0
00007280 6A00                       		bpl.s	loc_67CA
00007282 08F8 0000 F756             		bset	#0,($FFFFF756).w
00007288 4E75                       		rts	
0000728A                            ; ===========================================================================
0000728A                            
0000728A                            loc_67CA:
0000728A 08F8 0001 F756             		bset	#1,($FFFFF756).w
00007290                            
00007290                            locret_67D0:
00007290 4E75                       		rts	
00007292                            ; End of function ScrollBlock1
00007292                            
00007292                            
00007292                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007292                            
00007292                            
00007292                            ScrollBlock2:				; XREF: Deform_SLZ
00007292 2438 F708                  		move.l	($FFFFF708).w,d2
00007296 2002                       		move.l	d2,d0
00007298 D084                       		add.l	d4,d0
0000729A 21C0 F708                  		move.l	d0,($FFFFF708).w
0000729E 2638 F70C                  		move.l	($FFFFF70C).w,d3
000072A2 2003                       		move.l	d3,d0
000072A4 D085                       		add.l	d5,d0
000072A6 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000072AA 2200                       		move.l	d0,d1
000072AC 4841                       		swap	d1
000072AE 0241 0010                  		andi.w	#$10,d1
000072B2 1438 F74D                  		move.b	($FFFFF74D).w,d2
000072B6 B501                       		eor.b	d2,d1
000072B8 6600                       		bne.s	locret_6812
000072BA 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000072C0 9083                       		sub.l	d3,d0
000072C2 6A00                       		bpl.s	loc_680C
000072C4 08F8 0000 F756             		bset	#0,($FFFFF756).w
000072CA 4E75                       		rts	
000072CC                            ; ===========================================================================
000072CC                            
000072CC                            loc_680C:
000072CC 08F8 0001 F756             		bset	#1,($FFFFF756).w
000072D2                            
000072D2                            locret_6812:
000072D2 4E75                       		rts	
000072D4                            ; End of function ScrollBlock2
000072D4                            
000072D4                            
000072D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072D4                            
000072D4                            
000072D4                            ScrollBlock3:				; XREF: Deform_GHZ; et al
000072D4 3638 F70C                  		move.w	($FFFFF70C).w,d3
000072D8 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000072DC 3200                       		move.w	d0,d1
000072DE 0241 0010                  		andi.w	#$10,d1
000072E2 1438 F74D                  		move.b	($FFFFF74D).w,d2
000072E6 B501                       		eor.b	d2,d1
000072E8 6600                       		bne.s	locret_6842
000072EA 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000072F0 9043                       		sub.w	d3,d0
000072F2 6A00                       		bpl.s	loc_683C
000072F4 08F8 0000 F756             		bset	#0,($FFFFF756).w
000072FA 4E75                       		rts	
000072FC                            ; ===========================================================================
000072FC                            
000072FC                            loc_683C:
000072FC 08F8 0001 F756             		bset	#1,($FFFFF756).w
00007302                            
00007302                            locret_6842:
00007302 4E75                       		rts	
00007304                            ; End of function ScrollBlock3
00007304                            
00007304                            
00007304                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007304                            
00007304                            
00007304                            ScrollBlock4:				; XREF: Deform_GHZ
00007304 3438 F710                  		move.w	($FFFFF710).w,d2
00007308 3638 F714                  		move.w	($FFFFF714).w,d3
0000730C 3038 F73A                  		move.w	($FFFFF73A).w,d0
00007310 48C0                       		ext.l	d0
00007312 EF80                       		asl.l	#7,d0
00007314 D1B8 F710                  		add.l	d0,($FFFFF710).w
00007318 3038 F710                  		move.w	($FFFFF710).w,d0
0000731C 0240 0010                  		andi.w	#$10,d0
00007320 1238 F74E                  		move.b	($FFFFF74E).w,d1
00007324 B300                       		eor.b	d1,d0
00007326 6600                       		bne.s	locret_6884
00007328 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
0000732E 3038 F710                  		move.w	($FFFFF710).w,d0
00007332 9042                       		sub.w	d2,d0
00007334 6A00                       		bpl.s	loc_687E
00007336 08F8 0002 F758             		bset	#2,($FFFFF758).w
0000733C 6000                       		bra.s	locret_6884
0000733E                            ; ===========================================================================
0000733E                            
0000733E                            loc_687E:
0000733E 08F8 0003 F758             		bset	#3,($FFFFF758).w
00007344                            
00007344                            locret_6884:
00007344 4E75                       		rts	
00007346                            ; End of function ScrollBlock4
00007346                            
00007346                            
00007346                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007346                            
00007346                            
00007346                            sub_6886:				; XREF: loc_C44
00007346 4BF9 00C0 0004             		lea	($C00004).l,a5
0000734C 4DF9 00C0 0000             		lea	($C00000).l,a6
00007352 45F8 F756                  		lea	($FFFFF756).w,a2
00007356 47F8 F708                  		lea	($FFFFF708).w,a3
0000735A 49F8 A440                  		lea	($FFFFA440).w,a4
0000735E 343C 6000                  		move.w	#$6000,d2
00007362 6100 0000                  		bsr.w	sub_6954
00007366 45F8 F758                  		lea	($FFFFF758).w,a2
0000736A 47F8 F710                  		lea	($FFFFF710).w,a3
0000736E 6000 0000                  		bra.w	sub_69F4
00007372                            ; End of function sub_6886
00007372                            
00007372                            ; ---------------------------------------------------------------------------
00007372                            ; Subroutine to	display	correct	tiles as you move
00007372                            ; ---------------------------------------------------------------------------
00007372                            
00007372                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007372                            
00007372                            
00007372                            LoadTilesAsYouMove:			; XREF: Demo_Time
00007372 4BF9 00C0 0004             		lea	($C00004).l,a5
00007378 4DF9 00C0 0000             		lea	($C00000).l,a6
0000737E 45F8 FF32                  		lea	($FFFFFF32).w,a2
00007382 47F8 FF18                  		lea	($FFFFFF18).w,a3
00007386 49F8 A440                  		lea	($FFFFA440).w,a4
0000738A 343C 6000                  		move.w	#$6000,d2
0000738E 6100 0000                  		bsr.w	sub_6954
00007392 45F8 FF34                  		lea	($FFFFFF34).w,a2
00007396 47F8 FF20                  		lea	($FFFFFF20).w,a3
0000739A 6100 0000                  		bsr.w	sub_69F4
0000739E 45F8 FF30                  		lea	($FFFFFF30).w,a2
000073A2 47F8 FF10                  		lea	($FFFFFF10).w,a3
000073A6 49F8 A400                  		lea	($FFFFA400).w,a4
000073AA 343C 4000                  		move.w	#$4000,d2
000073AE 4A12                       		tst.b	(a2)
000073B0 6700                       		beq.s	locret_6952
000073B2 0892 0000                  		bclr	#0,(a2)
000073B6 6700                       		beq.s	loc_6908
000073B8 78F0                       		moveq	#-$10,d4
000073BA 7AF0                       		moveq	#-$10,d5
000073BC 6100 0000                  		bsr.w	sub_6C20
000073C0 78F0                       		moveq	#-$10,d4
000073C2 7AF0                       		moveq	#-$10,d5
000073C4 6100 0000                  		bsr.w	sub_6AD8
000073C8                            
000073C8                            loc_6908:
000073C8 0892 0001                  		bclr	#1,(a2)
000073CC 6700                       		beq.s	loc_6922
000073CE 383C 00E0                  		move.w	#$E0,d4
000073D2 7AF0                       		moveq	#-$10,d5
000073D4 6100 0000                  		bsr.w	sub_6C20
000073D8 383C 00E0                  		move.w	#$E0,d4
000073DC 7AF0                       		moveq	#-$10,d5
000073DE 6100 0000                  		bsr.w	sub_6AD8
000073E2                            
000073E2                            loc_6922:
000073E2 0892 0002                  		bclr	#2,(a2)
000073E6 6700                       		beq.s	loc_6938
000073E8 78F0                       		moveq	#-$10,d4
000073EA 7AF0                       		moveq	#-$10,d5
000073EC 6100 0000                  		bsr.w	sub_6C20
000073F0 78F0                       		moveq	#-$10,d4
000073F2 7AF0                       		moveq	#-$10,d5
000073F4 6100 0000                  		bsr.w	sub_6B04
000073F8                            
000073F8                            loc_6938:
000073F8 0892 0003                  		bclr	#3,(a2)
000073FC 6700                       		beq.s	locret_6952
000073FE 78F0                       		moveq	#-$10,d4
00007400 3A3C 0140                  		move.w	#$140,d5
00007404 6100 0000                  		bsr.w	sub_6C20
00007408 78F0                       		moveq	#-$10,d4
0000740A 3A3C 0140                  		move.w	#$140,d5
0000740E 6100 0000                  		bsr.w	sub_6B04
00007412                            
00007412                            locret_6952:
00007412 4E75                       		rts	
00007414                            ; End of function LoadTilesAsYouMove
00007414                            
00007414                            
00007414                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007414                            
00007414                            
00007414                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00007414 4A12                       		tst.b	(a2)
00007416 6700 0000                  		beq.w	locret_69F2
0000741A 0892 0000                  		bclr	#0,(a2)
0000741E 6700                       		beq.s	loc_6972
00007420 78F0                       		moveq	#-$10,d4
00007422 7AF0                       		moveq	#-$10,d5
00007424 6100 0000                  		bsr.w	sub_6C20
00007428 78F0                       		moveq	#-$10,d4
0000742A 7AF0                       		moveq	#-$10,d5
0000742C 7C1F                       		moveq	#$1F,d6
0000742E 6100 0000                  		bsr.w	sub_6ADA
00007432                            
00007432                            loc_6972:
00007432 0892 0001                  		bclr	#1,(a2)
00007436 6700                       		beq.s	loc_698E
00007438 383C 00E0                  		move.w	#$E0,d4
0000743C 7AF0                       		moveq	#-$10,d5
0000743E 6100 0000                  		bsr.w	sub_6C20
00007442 383C 00E0                  		move.w	#$E0,d4
00007446 7AF0                       		moveq	#-$10,d5
00007448 7C1F                       		moveq	#$1F,d6
0000744A 6100 0000                  		bsr.w	sub_6ADA
0000744E                            
0000744E                            loc_698E:
0000744E 0892 0002                  		bclr	#2,(a2)
00007452 6700                       		beq.s	loc_69BE
00007454 78F0                       		moveq	#-$10,d4
00007456 7AF0                       		moveq	#-$10,d5
00007458 6100 0000                  		bsr.w	sub_6C20
0000745C 78F0                       		moveq	#-$10,d4
0000745E 7AF0                       		moveq	#-$10,d5
00007460 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007464 322B 0004                  		move.w	4(a3),d1
00007468 0241 FFF0                  		andi.w	#-$10,d1
0000746C 9C41                       		sub.w	d1,d6
0000746E 6D00                       		blt.s	loc_69BE
00007470 E84E                       		lsr.w	#4,d6
00007472 0C46 000F                  		cmpi.w	#$F,d6
00007476 6500                       		bcs.s	loc_69BA
00007478 7C0F                       		moveq	#$F,d6
0000747A                            
0000747A                            loc_69BA:
0000747A 6100 0000                  		bsr.w	sub_6B06
0000747E                            
0000747E                            loc_69BE:
0000747E 0892 0003                  		bclr	#3,(a2)
00007482 6700                       		beq.s	locret_69F2
00007484 78F0                       		moveq	#-$10,d4
00007486 3A3C 0140                  		move.w	#$140,d5
0000748A 6100 0000                  		bsr.w	sub_6C20
0000748E 78F0                       		moveq	#-$10,d4
00007490 3A3C 0140                  		move.w	#$140,d5
00007494 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007498 322B 0004                  		move.w	4(a3),d1
0000749C 0241 FFF0                  		andi.w	#-$10,d1
000074A0 9C41                       		sub.w	d1,d6
000074A2 6D00                       		blt.s	locret_69F2
000074A4 E84E                       		lsr.w	#4,d6
000074A6 0C46 000F                  		cmpi.w	#$F,d6
000074AA 6500                       		bcs.s	loc_69EE
000074AC 7C0F                       		moveq	#$F,d6
000074AE                            
000074AE                            loc_69EE:
000074AE 6100 0000                  		bsr.w	sub_6B06
000074B2                            
000074B2                            locret_69F2:
000074B2 4E75                       		rts	
000074B4                            ; End of function sub_6954
000074B4                            
000074B4                            
000074B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000074B4                            
000074B4                            
000074B4                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
000074B4 4A12                       		tst.b	(a2)
000074B6 6700 0000                  		beq.w	locret_6A80
000074BA 0892 0002                  		bclr	#2,(a2)
000074BE 6700                       		beq.s	loc_6A3E
000074C0 0C53 0010                  		cmpi.w	#$10,(a3)
000074C4 6500                       		bcs.s	loc_6A3E
000074C6 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
000074CA 322B 0004                  		move.w	4(a3),d1
000074CE 0241 FFF0                  		andi.w	#-$10,d1
000074D2 9841                       		sub.w	d1,d4
000074D4 3F04                       		move.w	d4,-(sp)
000074D6 7AF0                       		moveq	#-$10,d5
000074D8 6100 0000                  		bsr.w	sub_6C20
000074DC 381F                       		move.w	(sp)+,d4
000074DE 7AF0                       		moveq	#-$10,d5
000074E0 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000074E4 322B 0004                  		move.w	4(a3),d1
000074E8 0241 FFF0                  		andi.w	#-$10,d1
000074EC 9C41                       		sub.w	d1,d6
000074EE 6D00                       		blt.s	loc_6A3E
000074F0 E84E                       		lsr.w	#4,d6
000074F2 0446 000E                  		subi.w	#$E,d6
000074F6 6400                       		bcc.s	loc_6A3E
000074F8 4446                       		neg.w	d6
000074FA 6100 0000                  		bsr.w	sub_6B06
000074FE                            
000074FE                            loc_6A3E:
000074FE 0892 0003                  		bclr	#3,(a2)
00007502 6700                       		beq.s	locret_6A80
00007504 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00007508 322B 0004                  		move.w	4(a3),d1
0000750C 0241 FFF0                  		andi.w	#-$10,d1
00007510 9841                       		sub.w	d1,d4
00007512 3F04                       		move.w	d4,-(sp)
00007514 3A3C 0140                  		move.w	#$140,d5
00007518 6100 0000                  		bsr.w	sub_6C20
0000751C 381F                       		move.w	(sp)+,d4
0000751E 3A3C 0140                  		move.w	#$140,d5
00007522 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007526 322B 0004                  		move.w	4(a3),d1
0000752A 0241 FFF0                  		andi.w	#-$10,d1
0000752E 9C41                       		sub.w	d1,d6
00007530 6D00                       		blt.s	locret_6A80
00007532 E84E                       		lsr.w	#4,d6
00007534 0446 000E                  		subi.w	#$E,d6
00007538 6400                       		bcc.s	locret_6A80
0000753A 4446                       		neg.w	d6
0000753C 6100 0000                  		bsr.w	sub_6B06
00007540                            
00007540                            locret_6A80:
00007540 4E75                       		rts	
00007542                            ; End of function sub_69F4
00007542                            
00007542                            ; ===========================================================================
00007542 4A12                       		tst.b	(a2)
00007544 6700                       		beq.s	locret_6AD6
00007546 0892 0002                  		bclr	#2,(a2)
0000754A 6700                       		beq.s	loc_6AAC
0000754C 383C 00D0                  		move.w	#$D0,d4
00007550 322B 0004                  		move.w	4(a3),d1
00007554 0241 FFF0                  		andi.w	#-$10,d1
00007558 9841                       		sub.w	d1,d4
0000755A 3F04                       		move.w	d4,-(sp)
0000755C 7AF0                       		moveq	#-$10,d5
0000755E 6100 0000                  		bsr.w	sub_6C3C
00007562 381F                       		move.w	(sp)+,d4
00007564 7AF0                       		moveq	#-$10,d5
00007566 7C02                       		moveq	#2,d6
00007568 6100 0000                  		bsr.w	sub_6B06
0000756C                            
0000756C                            loc_6AAC:
0000756C 0892 0003                  		bclr	#3,(a2)
00007570 6700                       		beq.s	locret_6AD6
00007572 383C 00D0                  		move.w	#$D0,d4
00007576 322B 0004                  		move.w	4(a3),d1
0000757A 0241 FFF0                  		andi.w	#-$10,d1
0000757E 9841                       		sub.w	d1,d4
00007580 3F04                       		move.w	d4,-(sp)
00007582 3A3C 0140                  		move.w	#$140,d5
00007586 6100 0000                  		bsr.w	sub_6C3C
0000758A 381F                       		move.w	(sp)+,d4
0000758C 3A3C 0140                  		move.w	#$140,d5
00007590 7C02                       		moveq	#2,d6
00007592 6100 0000                  		bsr.w	sub_6B06
00007596                            
00007596                            locret_6AD6:
00007596 4E75                       		rts	
00007598                            
00007598                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007598                            
00007598                            
00007598                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00007598 7C15                       		moveq	#$15,d6
0000759A                            ; End of function sub_6AD8
0000759A                            
0000759A                            
0000759A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000759A                            
0000759A                            
0000759A                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
0000759A 2E3C 0080 0000             		move.l	#$800000,d7
000075A0 2200                       		move.l	d0,d1
000075A2                            
000075A2                            loc_6AE2:
000075A2 48E7 0C00                  		movem.l	d4-d5,-(sp)
000075A6 6100 0000                  		bsr.w	sub_6BD6
000075AA 2001                       		move.l	d1,d0
000075AC 6100 0000                  		bsr.w	sub_6B32
000075B0 5801                       		addq.b	#4,d1
000075B2 0201 007F                  		andi.b	#$7F,d1
000075B6 4CDF 0030                  		movem.l	(sp)+,d4-d5
000075BA 0645 0010                  		addi.w	#$10,d5
000075BE 51CE FFE2                  		dbf	d6,loc_6AE2
000075C2 4E75                       		rts	
000075C4                            ; End of function sub_6ADA
000075C4                            
000075C4                            
000075C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000075C4                            
000075C4                            
000075C4                            sub_6B04:				; XREF: LoadTilesAsYouMove
000075C4 7C0F                       		moveq	#$F,d6
000075C6                            ; End of function sub_6B04
000075C6                            
000075C6                            
000075C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000075C6                            
000075C6                            
000075C6                            sub_6B06:				; XREF: sub_6954
000075C6 2E3C 0080 0000             		move.l	#$800000,d7
000075CC 2200                       		move.l	d0,d1
000075CE                            
000075CE                            loc_6B0E:
000075CE 48E7 0C00                  		movem.l	d4-d5,-(sp)
000075D2 6100 0000                  		bsr.w	sub_6BD6
000075D6 2001                       		move.l	d1,d0
000075D8 6100 0000                  		bsr.w	sub_6B32
000075DC 0641 0100                  		addi.w	#$100,d1
000075E0 0241 0FFF                  		andi.w	#$FFF,d1
000075E4 4CDF 0030                  		movem.l	(sp)+,d4-d5
000075E8 0644 0010                  		addi.w	#$10,d4
000075EC 51CE FFE0                  		dbf	d6,loc_6B0E
000075F0 4E75                       		rts	
000075F2                            ; End of function sub_6B06
000075F2                            
000075F2                            
000075F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000075F2                            
000075F2                            
000075F2                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
000075F2 8042                       		or.w	d2,d0
000075F4 4840                       		swap	d0
000075F6 0810 0004                  		btst	#4,(a0)
000075FA 6600                       		bne.s	loc_6B6E
000075FC 0810 0003                  		btst	#3,(a0)
00007600 6600                       		bne.s	loc_6B4E
00007602 2A80                       		move.l	d0,(a5)
00007604 2C99                       		move.l	(a1)+,(a6)
00007606 D087                       		add.l	d7,d0
00007608 2A80                       		move.l	d0,(a5)
0000760A 2C99                       		move.l	(a1)+,(a6)
0000760C 4E75                       		rts	
0000760E                            ; ===========================================================================
0000760E                            
0000760E                            loc_6B4E:
0000760E 2A80                       		move.l	d0,(a5)
00007610 2819                       		move.l	(a1)+,d4
00007612 0A84 0800 0800             		eori.l	#$8000800,d4
00007618 4844                       		swap	d4
0000761A 2C84                       		move.l	d4,(a6)
0000761C D087                       		add.l	d7,d0
0000761E 2A80                       		move.l	d0,(a5)
00007620 2819                       		move.l	(a1)+,d4
00007622 0A84 0800 0800             		eori.l	#$8000800,d4
00007628 4844                       		swap	d4
0000762A 2C84                       		move.l	d4,(a6)
0000762C 4E75                       		rts	
0000762E                            ; ===========================================================================
0000762E                            
0000762E                            loc_6B6E:
0000762E 0810 0003                  		btst	#3,(a0)
00007632 6600                       		bne.s	loc_6B90
00007634 2A80                       		move.l	d0,(a5)
00007636 2A19                       		move.l	(a1)+,d5
00007638 2819                       		move.l	(a1)+,d4
0000763A 0A84 1000 1000             		eori.l	#$10001000,d4
00007640 2C84                       		move.l	d4,(a6)
00007642 D087                       		add.l	d7,d0
00007644 2A80                       		move.l	d0,(a5)
00007646 0A85 1000 1000             		eori.l	#$10001000,d5
0000764C 2C85                       		move.l	d5,(a6)
0000764E 4E75                       		rts	
00007650                            ; ===========================================================================
00007650                            
00007650                            loc_6B90:
00007650 2A80                       		move.l	d0,(a5)
00007652 2A19                       		move.l	(a1)+,d5
00007654 2819                       		move.l	(a1)+,d4
00007656 0A84 1800 1800             		eori.l	#$18001800,d4
0000765C 4844                       		swap	d4
0000765E 2C84                       		move.l	d4,(a6)
00007660 D087                       		add.l	d7,d0
00007662 2A80                       		move.l	d0,(a5)
00007664 0A85 1800 1800             		eori.l	#$18001800,d5
0000766A 4845                       		swap	d5
0000766C 2C85                       		move.l	d5,(a6)
0000766E 4E75                       		rts	
00007670                            ; End of function sub_6B32
00007670                            
00007670                            ; ===========================================================================
00007670 4E75                       		rts	
00007672                            ; ===========================================================================
00007672 2A80                       		move.l	d0,(a5)
00007674 3A3C 2000                  		move.w	#$2000,d5
00007678 3819                       		move.w	(a1)+,d4
0000767A D845                       		add.w	d5,d4
0000767C 3C84                       		move.w	d4,(a6)
0000767E 3819                       		move.w	(a1)+,d4
00007680 D845                       		add.w	d5,d4
00007682 3C84                       		move.w	d4,(a6)
00007684 D087                       		add.l	d7,d0
00007686 2A80                       		move.l	d0,(a5)
00007688 3819                       		move.w	(a1)+,d4
0000768A D845                       		add.w	d5,d4
0000768C 3C84                       		move.w	d4,(a6)
0000768E 3819                       		move.w	(a1)+,d4
00007690 D845                       		add.w	d5,d4
00007692 3C84                       		move.w	d4,(a6)
00007694 4E75                       		rts	
00007696                            
00007696                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007696                            
00007696                            
00007696                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00007696 43F8 B000                  		lea	($FFFFB000).w,a1
0000769A D86B 0004                  		add.w	4(a3),d4
0000769E DA53                       		add.w	(a3),d5
000076A0 3604                       		move.w	d4,d3
000076A2 E24B                       		lsr.w	#1,d3
000076A4 0243 0380                  		andi.w	#$380,d3
000076A8 E64D                       		lsr.w	#3,d5
000076AA 3005                       		move.w	d5,d0
000076AC EA48                       		lsr.w	#5,d0
000076AE 0240 007F                  		andi.w	#$7F,d0
000076B2 D043                       		add.w	d3,d0
000076B4 76FF                       		moveq	#-1,d3
000076B6 1634 0000                  		move.b	(a4,d0.w),d3
000076BA 6700                       		beq.s	locret_6C1E
000076BC 5303                       		subq.b	#1,d3
000076BE 0243 007F                  		andi.w	#$7F,d3
000076C2 EE5B                       		ror.w	#7,d3
000076C4 D844                       		add.w	d4,d4
000076C6 0244 01E0                  		andi.w	#$1E0,d4
000076CA 0245 001E                  		andi.w	#$1E,d5
000076CE D644                       		add.w	d4,d3
000076D0 D645                       		add.w	d5,d3
000076D2 2043                       		movea.l	d3,a0
000076D4 3610                       		move.w	(a0),d3
000076D6 0243 03FF                  		andi.w	#$3FF,d3
000076DA E74B                       		lsl.w	#3,d3
000076DC D2C3                       		adda.w	d3,a1
000076DE                            
000076DE                            locret_6C1E:
000076DE 4E75                       		rts	
000076E0                            ; End of function sub_6BD6
000076E0                            
000076E0                            
000076E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076E0                            
000076E0                            
000076E0                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
000076E0 D86B 0004                  		add.w	4(a3),d4
000076E4 DA53                       		add.w	(a3),d5
000076E6 0244 00F0                  		andi.w	#$F0,d4
000076EA 0245 01F0                  		andi.w	#$1F0,d5
000076EE E94C                       		lsl.w	#4,d4
000076F0 E44D                       		lsr.w	#2,d5
000076F2 D845                       		add.w	d5,d4
000076F4 7003                       		moveq	#3,d0
000076F6 4840                       		swap	d0
000076F8 3004                       		move.w	d4,d0
000076FA 4E75                       		rts	
000076FC                            ; End of function sub_6C20
000076FC                            
000076FC                            
000076FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076FC                            ; not used
000076FC                            
000076FC                            
000076FC                            sub_6C3C:
000076FC D86B 0004                  		add.w	4(a3),d4
00007700 DA53                       		add.w	(a3),d5
00007702 0244 00F0                  		andi.w	#$F0,d4
00007706 0245 01F0                  		andi.w	#$1F0,d5
0000770A E94C                       		lsl.w	#4,d4
0000770C E44D                       		lsr.w	#2,d5
0000770E D845                       		add.w	d5,d4
00007710 7002                       		moveq	#2,d0
00007712 4840                       		swap	d0
00007714 3004                       		move.w	d4,d0
00007716 4E75                       		rts	
00007718                            ; End of function sub_6C3C
00007718                            
00007718                            ; ---------------------------------------------------------------------------
00007718                            ; Subroutine to	load tiles as soon as the level	appears
00007718                            ; ---------------------------------------------------------------------------
00007718                            
00007718                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007718                            
00007718                            
00007718                            LoadTilesFromStart:			; XREF: Level; EndingSequence
00007718 4BF9 00C0 0004             		lea	($C00004).l,a5
0000771E 4DF9 00C0 0000             		lea	($C00000).l,a6
00007724 47F8 F700                  		lea	($FFFFF700).w,a3
00007728 49F8 A400                  		lea	($FFFFA400).w,a4
0000772C 343C 4000                  		move.w	#$4000,d2
00007730 6100                       		bsr.s	LoadTilesFromStart2
00007732 47F8 F708                  		lea	($FFFFF708).w,a3
00007736 49F8 A440                  		lea	($FFFFA440).w,a4
0000773A 343C 6000                  		move.w	#$6000,d2
0000773E                            ; End of function LoadTilesFromStart
0000773E                            
0000773E                            
0000773E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000773E                            
0000773E                            
0000773E                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
0000773E 78F0                       		moveq	#-$10,d4
00007740 7C0F                       		moveq	#$F,d6
00007742                            
00007742                            loc_6C82:
00007742 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007746 7A00                       		moveq	#0,d5
00007748 3204                       		move.w	d4,d1
0000774A 6100 FF94                  		bsr.w	sub_6C20
0000774E 3801                       		move.w	d1,d4
00007750 7A00                       		moveq	#0,d5
00007752 7C1F                       		moveq	#$1F,d6
00007754 6100 FE44                  		bsr.w	sub_6ADA
00007758 4CDF 0070                  		movem.l	(sp)+,d4-d6
0000775C 0644 0010                  		addi.w	#$10,d4
00007760 51CE FFE0                  		dbf	d6,loc_6C82
00007764 4E75                       		rts	
00007766                            ; End of function LoadTilesFromStart2
00007766                            
00007766                            ; ---------------------------------------------------------------------------
00007766                            ; Main Load Block loading subroutine
00007766                            ; ---------------------------------------------------------------------------
00007766                            
00007766                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007766                            
00007766                            
00007766                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00007766 7000                       		moveq	#0,d0
00007768 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000776C E948                       		lsl.w	#4,d0
0000776E 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00007774 45F2 0000                  		lea	(a2,d0.w),a2
00007778 2F0A                       		move.l	a2,-(sp)
0000777A 588A                       		addq.l	#4,a2
0000777C 205A                       		movea.l	(a2)+,a0
0000777E 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00007782 303C 0000                  		move.w	#0,d0
00007786 6100 A100                  		bsr.w	EniDec
0000778A 205A                       		movea.l	(a2)+,a0
0000778C 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00007792 6100 A272                  		bsr.w	KosDec
00007796 6100 0000                  		bsr.w	LevelLayoutLoad
0000779A 301A                       		move.w	(a2)+,d0
0000779C 3012                       		move.w	(a2),d0
0000779E 0240 00FF                  		andi.w	#$FF,d0
000077A2 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
000077A8 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
000077AA 700C                       		moveq	#$C,d0		; use SB3 pallet
000077AC                            
000077AC                            MLB_ChkSBZPal:
000077AC 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
000077B2 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
000077B4 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
000077BA 6600                       		bne.s	MLB_NormalPal	; if not, branch
000077BC                            
000077BC                            MLB_UsePal0E:
000077BC 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
000077BE                            
000077BE                            MLB_NormalPal:
000077BE 6100 AC6E                  		bsr.w	PalLoad1	; load pallet (based on	d0)
000077C2 245F                       		movea.l	(sp)+,a2
000077C4 584A                       		addq.w	#4,a2
000077C6 7000                       		moveq	#0,d0
000077C8 1012                       		move.b	(a2),d0
000077CA 6700                       		beq.s	locret_6D10
000077CC 6100 9F1C                  		bsr.w	LoadPLC		; load pattern load cues
000077D0                            
000077D0                            locret_6D10:
000077D0 4E75                       		rts	
000077D2                            ; End of function MainLoadBlockLoad
000077D2                            
000077D2                            ; ---------------------------------------------------------------------------
000077D2                            ; Level	layout loading subroutine
000077D2                            ; ---------------------------------------------------------------------------
000077D2                            
000077D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000077D2                            
000077D2                            
000077D2                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
000077D2 47F8 A400                  		lea	($FFFFA400).w,a3
000077D6 323C 01FF                  		move.w	#$1FF,d1
000077DA 7000                       		moveq	#0,d0
000077DC                            
000077DC                            LevLoad_ClrRam:
000077DC 26C0                       		move.l	d0,(a3)+
000077DE 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
000077E2                            
000077E2 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
000077E6 7200                       		moveq	#0,d1
000077E8 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
000077EC 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
000077F0 7202                       		moveq	#2,d1
000077F2                            ; End of function LevelLayoutLoad
000077F2                            
000077F2                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
000077F2                            
000077F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000077F2                            
000077F2                            
000077F2                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
000077F2 3038 FE10                  		move.w	($FFFFFE10).w,d0
000077F6 ED08                       		lsl.b	#6,d0
000077F8 EA48                       		lsr.w	#5,d0
000077FA 3400                       		move.w	d0,d2
000077FC D040                       		add.w	d0,d0
000077FE D042                       		add.w	d2,d0
00007800 D041                       		add.w	d1,d0
00007802 43F9 0000 0000             		lea	(Level_Index).l,a1
00007808 3031 0000                  		move.w	(a1,d0.w),d0
0000780C 43F1 0000                  		lea	(a1,d0.w),a1
00007810 7200                       		moveq	#0,d1
00007812 3401                       		move.w	d1,d2
00007814 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00007816 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00007818                            
00007818                            LevLoad_NumRows:
00007818 3001                       		move.w	d1,d0
0000781A 204B                       		movea.l	a3,a0
0000781C                            
0000781C                            LevLoad_Row:
0000781C 10D9                       		move.b	(a1)+,(a0)+
0000781E 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00007822 47EB 0080                  		lea	$80(a3),a3	; do next row
00007826 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
0000782A 4E75                       		rts	
0000782C                            ; End of function LevelLayoutLoad2
0000782C                            
0000782C                            ; ---------------------------------------------------------------------------
0000782C                            ; Dynamic screen resize	loading	subroutine
0000782C                            ; ---------------------------------------------------------------------------
0000782C                            
0000782C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000782C                            
0000782C                            
0000782C                            DynScrResizeLoad:			; XREF: DeformBgLayer
0000782C 7000                       		moveq	#0,d0
0000782E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007832 D040                       		add.w	d0,d0
00007834 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00007838 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
0000783C 7202                       		moveq	#2,d1
0000783E 3038 F726                  		move.w	($FFFFF726).w,d0
00007842 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00007846 6700                       		beq.s	locret_6DAA
00007848 6400                       		bcc.s	loc_6DAC
0000784A 4441                       		neg.w	d1
0000784C 3038 F704                  		move.w	($FFFFF704).w,d0
00007850 B078 F726                  		cmp.w	($FFFFF726).w,d0
00007854 6300                       		bls.s	loc_6DA0
00007856 31C0 F72E                  		move.w	d0,($FFFFF72E).w
0000785A 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00007860                            
00007860                            loc_6DA0:
00007860 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007864 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
0000786A                            
0000786A                            locret_6DAA:
0000786A 4E75                       		rts	
0000786C                            ; ===========================================================================
0000786C                            
0000786C                            loc_6DAC:				; XREF: DynScrResizeLoad
0000786C 3038 F704                  		move.w	($FFFFF704).w,d0
00007870 5040                       		addq.w	#8,d0
00007872 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007876 6500                       		bcs.s	loc_6DC4
00007878 0838 0001 D022             		btst	#1,($FFFFD022).w
0000787E 6700                       		beq.s	loc_6DC4
00007880 D241                       		add.w	d1,d1
00007882 D241                       		add.w	d1,d1
00007884                            
00007884                            loc_6DC4:
00007884 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007888 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
0000788E 4E75                       		rts	
00007890                            ; End of function DynScrResizeLoad
00007890                            
00007890                            ; ===========================================================================
00007890                            ; ---------------------------------------------------------------------------
00007890                            ; Offset index for dynamic screen resizing
00007890                            ; ---------------------------------------------------------------------------
00007890 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00007894 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00007898 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
0000789C 0000                       		dc.w Resize_Ending-Resize_Index
0000789E                            ; ===========================================================================
0000789E                            ; ---------------------------------------------------------------------------
0000789E                            ; Green	Hill Zone dynamic screen resizing
0000789E                            ; ---------------------------------------------------------------------------
0000789E                            
0000789E                            Resize_GHZ:				; XREF: Resize_Index
0000789E 7000                       		moveq	#0,d0
000078A0 1038 FE11                  		move.b	($FFFFFE11).w,d0
000078A4 D040                       		add.w	d0,d0
000078A6 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
000078AA 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
000078AE                            ; ===========================================================================
000078AE 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
000078B0 0000                       		dc.w Resize_GHZ2-Resize_GHZx
000078B2 0000                       		dc.w Resize_GHZ3-Resize_GHZx
000078B4                            ; ===========================================================================
000078B4                            
000078B4                            Resize_GHZ1:
000078B4 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
000078BA 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
000078C0 6500                       		bcs.s	locret_6E08	; if not, branch
000078C2 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
000078C8                            
000078C8                            locret_6E08:
000078C8 4E75                       		rts	
000078CA                            ; ===========================================================================
000078CA                            
000078CA                            Resize_GHZ2:
000078CA 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000078D0 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
000078D6 6500                       		bcs.s	locret_6E3A
000078D8 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000078DE 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
000078E4 6500                       		bcs.s	locret_6E3A
000078E6 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
000078EC 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
000078F2 6500                       		bcs.s	locret_6E3A
000078F4 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000078FA                            
000078FA                            locret_6E3A:
000078FA 4E75                       		rts	
000078FC                            ; ===========================================================================
000078FC                            
000078FC                            Resize_GHZ3:
000078FC 7000                       		moveq	#0,d0
000078FE 1038 F742                  		move.b	($FFFFF742).w,d0
00007902 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00007906 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
0000790A                            ; ===========================================================================
0000790A 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
0000790C 0000                       		dc.w Resize_GHZ3boss-off_6E4A
0000790E 0000                       		dc.w Resize_GHZ3end-off_6E4A
00007910                            ; ===========================================================================
00007910                            
00007910                            Resize_GHZ3main:
00007910 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007916 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
0000791C 6500                       		bcs.s	locret_6E96
0000791E 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00007924 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
0000792A 6500                       		bcs.s	locret_6E96
0000792C 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00007932 6500                       		bcs.s	loc_6E98
00007934 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
0000793A 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00007940 6400                       		bcc.s	loc_6E8E
00007942 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00007948 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
0000794E                            
0000794E                            loc_6E8E:
0000794E 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007954 6400                       		bcc.s	loc_6E98
00007956                            
00007956                            locret_6E96:
00007956 4E75                       		rts	
00007958                            ; ===========================================================================
00007958                            
00007958                            loc_6E98:
00007958 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000795E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007962 4E75                       		rts	
00007964                            ; ===========================================================================
00007964                            
00007964                            Resize_GHZ3boss:
00007964 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
0000796A 6400                       		bcc.s	loc_6EB0
0000796C 5538 F742                  		subq.b	#2,($FFFFF742).w
00007970                            
00007970                            loc_6EB0:
00007970 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00007976 6500                       		bcs.s	locret_6EE8
00007978 6100 0000                  		bsr.w	SingleObjLoad
0000797C 6600                       		bne.s	loc_6ED0
0000797E 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00007982 337C 2A60 0008             		move.w	#$2A60,8(a1)
00007988 337C 0280 000C             		move.w	#$280,$C(a1)
0000798E                            
0000798E                            loc_6ED0:
0000798E 303C 008C                  		move.w	#$8C,d0
00007992 6100 9ADC                  		bsr.w	PlaySound	; play boss music
00007996 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000799C 5438 F742                  		addq.b	#2,($FFFFF742).w
000079A0 7011                       		moveq	#$11,d0
000079A2 6000 9D46                  		bra.w	LoadPLC		; load boss patterns
000079A6                            ; ===========================================================================
000079A6                            
000079A6                            locret_6EE8:
000079A6 4E75                       		rts	
000079A8                            ; ===========================================================================
000079A8                            
000079A8                            Resize_GHZ3end:
000079A8 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000079AE 4E75                       		rts	
000079B0                            ; ===========================================================================
000079B0                            ; ---------------------------------------------------------------------------
000079B0                            ; Labyrinth Zone dynamic screen	resizing
000079B0                            ; ---------------------------------------------------------------------------
000079B0                            
000079B0                            Resize_LZ:				; XREF: Resize_Index
000079B0 7000                       		moveq	#0,d0
000079B2 1038 FE11                  		move.b	($FFFFFE11).w,d0
000079B6 D040                       		add.w	d0,d0
000079B8 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
000079BC 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
000079C0                            ; ===========================================================================
000079C0 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
000079C2 0000                       		dc.w Resize_LZ12-Resize_LZx
000079C4 0000                       		dc.w Resize_LZ3-Resize_LZx
000079C6 0000                       		dc.w Resize_SBZ3-Resize_LZx
000079C8                            ; ===========================================================================
000079C8                            
000079C8                            Resize_LZ12:
000079C8 4E75                       		rts	
000079CA                            ; ===========================================================================
000079CA                            
000079CA                            Resize_LZ3:
000079CA 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
000079CE 6700                       		beq.s	loc_6F28	; if not, branch
000079D0 43F8 A506                  		lea	($FFFFA506).w,a1
000079D4 0C11 0007                  		cmpi.b	#7,(a1)
000079D8 6700                       		beq.s	loc_6F28
000079DA 12BC 0007                  		move.b	#7,(a1)		; modify level layout
000079DE 303C 00B7                  		move.w	#$B7,d0
000079E2 6100 9A92                  		bsr.w	PlaySound_Special ; play rumbling sound
000079E6                            
000079E6                            loc_6F28:
000079E6 4A38 F742                  		tst.b	($FFFFF742).w
000079EA 6600                       		bne.s	locret_6F64
000079EC 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
000079F2 6500                       		bcs.s	locret_6F62
000079F4 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
000079FA 6400                       		bcc.s	locret_6F62
000079FC 6100 0000                  		bsr.w	SingleObjLoad
00007A00 6600                       		bne.s	loc_6F4A
00007A02 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00007A06                            
00007A06                            loc_6F4A:
00007A06 303C 008C                  		move.w	#$8C,d0
00007A0A 6100 9A64                  		bsr.w	PlaySound	; play boss music
00007A0E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007A14 5438 F742                  		addq.b	#2,($FFFFF742).w
00007A18 7011                       		moveq	#$11,d0
00007A1A 6000 9CCE                  		bra.w	LoadPLC		; load boss patterns
00007A1E                            ; ===========================================================================
00007A1E                            
00007A1E                            locret_6F62:
00007A1E 4E75                       		rts	
00007A20                            ; ===========================================================================
00007A20                            
00007A20                            locret_6F64:
00007A20 4E75                       		rts	
00007A22                            ; ===========================================================================
00007A22                            
00007A22                            Resize_SBZ3:
00007A22 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007A28 6500                       		bcs.s	locret_6F8C
00007A2A 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00007A30 6400                       		bcc.s	locret_6F8C	; if not, branch
00007A32 4238 FE30                  		clr.b	($FFFFFE30).w
00007A36 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
00007A3C 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00007A42 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00007A48                            
00007A48                            locret_6F8C:
00007A48 4E75                       		rts	
00007A4A                            ; ===========================================================================
00007A4A                            ; ---------------------------------------------------------------------------
00007A4A                            ; Marble Zone dynamic screen resizing
00007A4A                            ; ---------------------------------------------------------------------------
00007A4A                            
00007A4A                            Resize_MZ:				; XREF: Resize_Index
00007A4A 7000                       		moveq	#0,d0
00007A4C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007A50 D040                       		add.w	d0,d0
00007A52 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00007A56 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
00007A5A                            ; ===========================================================================
00007A5A 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
00007A5C 0000                       		dc.w Resize_MZ2-Resize_MZx
00007A5E 0000                       		dc.w Resize_MZ3-Resize_MZx
00007A60                            ; ===========================================================================
00007A60                            
00007A60                            Resize_MZ1:
00007A60 7000                       		moveq	#0,d0
00007A62 1038 F742                  		move.b	($FFFFF742).w,d0
00007A66 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00007A6A 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
00007A6E                            ; ===========================================================================
00007A6E 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
00007A70 0000                       		dc.w loc_6FEA-off_6FB2
00007A72 0000                       		dc.w loc_702E-off_6FB2
00007A74 0000                       		dc.w loc_7050-off_6FB2
00007A76                            ; ===========================================================================
00007A76                            
00007A76                            loc_6FBA:
00007A76 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
00007A7C 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
00007A82 6500                       		bcs.s	locret_6FE8
00007A84 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00007A8A 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007A90 6500                       		bcs.s	locret_6FE8
00007A92 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007A98 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007A9E 6500                       		bcs.s	locret_6FE8
00007AA0 5438 F742                  		addq.b	#2,($FFFFF742).w
00007AA4                            
00007AA4                            locret_6FE8:
00007AA4 4E75                       		rts	
00007AA6                            ; ===========================================================================
00007AA6                            
00007AA6                            loc_6FEA:
00007AA6 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007AAC 6400                       		bcc.s	loc_6FF8
00007AAE 5538 F742                  		subq.b	#2,($FFFFF742).w
00007AB2 4E75                       		rts	
00007AB4                            ; ===========================================================================
00007AB4                            
00007AB4                            loc_6FF8:
00007AB4 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007ABA 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00007AC0 6400                       		bcc.s	locret_702C
00007AC2 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00007AC8 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007ACE 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007AD4 6400                       		bcc.s	locret_702C
00007AD6 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007ADC 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007AE2 6500                       		bcs.s	locret_702C
00007AE4 5438 F742                  		addq.b	#2,($FFFFF742).w
00007AE8                            
00007AE8                            locret_702C:
00007AE8 4E75                       		rts	
00007AEA                            ; ===========================================================================
00007AEA                            
00007AEA                            loc_702E:
00007AEA 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007AF0 6400                       		bcc.s	loc_703C
00007AF2 5538 F742                  		subq.b	#2,($FFFFF742).w
00007AF6 4E75                       		rts	
00007AF8                            ; ===========================================================================
00007AF8                            
00007AF8                            loc_703C:
00007AF8 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00007AFE 6500                       		bcs.s	locret_704E
00007B00 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00007B06 5438 F742                  		addq.b	#2,($FFFFF742).w
00007B0A                            
00007B0A                            locret_704E:
00007B0A 4E75                       		rts	
00007B0C                            ; ===========================================================================
00007B0C                            
00007B0C                            loc_7050:
00007B0C 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00007B12 6500                       		bcs.s	locret_7072
00007B14 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007B1A 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007B20 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00007B26 6500                       		bcs.s	locret_7072
00007B28 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007B2E                            
00007B2E                            locret_7072:
00007B2E 4E75                       		rts	
00007B30                            ; ===========================================================================
00007B30                            
00007B30                            Resize_MZ2:
00007B30 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007B36 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007B3C 6500                       		bcs.s	locret_7088
00007B3E 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007B44                            
00007B44                            locret_7088:
00007B44 4E75                       		rts	
00007B46                            ; ===========================================================================
00007B46                            
00007B46                            Resize_MZ3:
00007B46 7000                       		moveq	#0,d0
00007B48 1038 F742                  		move.b	($FFFFF742).w,d0
00007B4C 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00007B50 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00007B54                            ; ===========================================================================
00007B54 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00007B56 0000                       		dc.w Resize_MZ3end-off_7098
00007B58                            ; ===========================================================================
00007B58                            
00007B58                            Resize_MZ3boss:
00007B58 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007B5E 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00007B64 6500                       		bcs.s	locret_70E8
00007B66 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007B6C 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
00007B72 6500                       		bcs.s	locret_70E8
00007B74 6100 0000                  		bsr.w	SingleObjLoad
00007B78 6600                       		bne.s	loc_70D0
00007B7A 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
00007B7E 337C 19F0 0008             		move.w	#$19F0,8(a1)
00007B84 337C 022C 000C             		move.w	#$22C,$C(a1)
00007B8A                            
00007B8A                            loc_70D0:
00007B8A 303C 008C                  		move.w	#$8C,d0
00007B8E 6100 98E0                  		bsr.w	PlaySound	; play boss music
00007B92 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007B98 5438 F742                  		addq.b	#2,($FFFFF742).w
00007B9C 7011                       		moveq	#$11,d0
00007B9E 6000 9B4A                  		bra.w	LoadPLC		; load boss patterns
00007BA2                            ; ===========================================================================
00007BA2                            
00007BA2                            locret_70E8:
00007BA2 4E75                       		rts	
00007BA4                            ; ===========================================================================
00007BA4                            
00007BA4                            Resize_MZ3end:
00007BA4 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007BAA 4E75                       		rts	
00007BAC                            ; ===========================================================================
00007BAC                            ; ---------------------------------------------------------------------------
00007BAC                            ; Star Light Zone dynamic screen resizing
00007BAC                            ; ---------------------------------------------------------------------------
00007BAC                            
00007BAC                            Resize_SLZ:				; XREF: Resize_Index
00007BAC 7000                       		moveq	#0,d0
00007BAE 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007BB2 D040                       		add.w	d0,d0
00007BB4 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00007BB8 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
00007BBC                            ; ===========================================================================
00007BBC 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
00007BBE 0000                       		dc.w Resize_SLZ12-Resize_SLZx
00007BC0 0000                       		dc.w Resize_SLZ3-Resize_SLZx
00007BC2                            ; ===========================================================================
00007BC2                            
00007BC2                            Resize_SLZ12:
00007BC2 4E75                       		rts	
00007BC4                            ; ===========================================================================
00007BC4                            
00007BC4                            Resize_SLZ3:
00007BC4 7000                       		moveq	#0,d0
00007BC6 1038 F742                  		move.b	($FFFFF742).w,d0
00007BCA 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00007BCE 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00007BD2                            ; ===========================================================================
00007BD2 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00007BD4 0000                       		dc.w Resize_SLZ3boss-off_7118
00007BD6 0000                       		dc.w Resize_SLZ3end-off_7118
00007BD8                            ; ===========================================================================
00007BD8                            
00007BD8                            Resize_SLZ3main:
00007BD8 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
00007BDE 6500                       		bcs.s	locret_7130
00007BE0 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007BE6 5438 F742                  		addq.b	#2,($FFFFF742).w
00007BEA                            
00007BEA                            locret_7130:
00007BEA 4E75                       		rts	
00007BEC                            ; ===========================================================================
00007BEC                            
00007BEC                            Resize_SLZ3boss:
00007BEC 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007BF2 6500                       		bcs.s	locret_715C
00007BF4 6100 0000                  		bsr.w	SingleObjLoad
00007BF8 6600                       		bne.s	loc_7144
00007BFA 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00007BFE                            
00007BFE                            loc_7144:
00007BFE 303C 008C                  		move.w	#$8C,d0
00007C02 6100 986C                  		bsr.w	PlaySound	; play boss music
00007C06 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007C0C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007C10 7011                       		moveq	#$11,d0
00007C12 6000 9AD6                  		bra.w	LoadPLC		; load boss patterns
00007C16                            ; ===========================================================================
00007C16                            
00007C16                            locret_715C:
00007C16 4E75                       		rts	
00007C18                            ; ===========================================================================
00007C18                            
00007C18                            Resize_SLZ3end:
00007C18 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007C1E 4E75                       		rts
00007C20 4E75                       		rts
00007C22                            ; ===========================================================================
00007C22                            ; ---------------------------------------------------------------------------
00007C22                            ; Spring Yard Zone dynamic screen resizing
00007C22                            ; ---------------------------------------------------------------------------
00007C22                            
00007C22                            Resize_SYZ:				; XREF: Resize_Index
00007C22 7000                       		moveq	#0,d0
00007C24 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007C28 D040                       		add.w	d0,d0
00007C2A 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00007C2E 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00007C32                            ; ===========================================================================
00007C32 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
00007C34 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00007C36 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00007C38                            ; ===========================================================================
00007C38                            
00007C38                            Resize_SYZ1:
00007C38 4E75                       		rts	
00007C3A                            ; ===========================================================================
00007C3A                            
00007C3A                            Resize_SYZ2:
00007C3A 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007C40 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00007C46 6500                       		bcs.s	locret_71A2
00007C48 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
00007C4E 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
00007C54 6500                       		bcs.s	locret_71A2
00007C56 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007C5C                            
00007C5C                            locret_71A2:
00007C5C 4E75                       		rts	
00007C5E                            ; ===========================================================================
00007C5E                            
00007C5E                            Resize_SYZ3:
00007C5E 7000                       		moveq	#0,d0
00007C60 1038 F742                  		move.b	($FFFFF742).w,d0
00007C64 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00007C68 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00007C6C                            ; ===========================================================================
00007C6C 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
00007C6E 0000                       		dc.w Resize_SYZ3boss-off_71B2
00007C70 0000                       		dc.w Resize_SYZ3end-off_71B2
00007C72                            ; ===========================================================================
00007C72                            
00007C72                            Resize_SYZ3main:
00007C72 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00007C78 6500                       		bcs.s	locret_71CE
00007C7A 6100 0000                  		bsr.w	SingleObjLoad
00007C7E 6600                       		bne.s	locret_71CE
00007C80 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
00007C84 5438 F742                  		addq.b	#2,($FFFFF742).w
00007C88                            
00007C88                            locret_71CE:
00007C88 4E75                       		rts	
00007C8A                            ; ===========================================================================
00007C8A                            
00007C8A                            Resize_SYZ3boss:
00007C8A 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
00007C90 6500                       		bcs.s	locret_7200
00007C92 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00007C98 6100 0000                  		bsr.w	SingleObjLoad
00007C9C 6600                       		bne.s	loc_71EC
00007C9E 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
00007CA2 5438 F742                  		addq.b	#2,($FFFFF742).w
00007CA6                            
00007CA6                            loc_71EC:
00007CA6 303C 008C                  		move.w	#$8C,d0
00007CAA 6100 97C4                  		bsr.w	PlaySound	; play boss music
00007CAE 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007CB4 7011                       		moveq	#$11,d0
00007CB6 6000 9A32                  		bra.w	LoadPLC		; load boss patterns
00007CBA                            ; ===========================================================================
00007CBA                            
00007CBA                            locret_7200:
00007CBA 4E75                       		rts	
00007CBC                            ; ===========================================================================
00007CBC                            
00007CBC                            Resize_SYZ3end:
00007CBC 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007CC2 4E75                       		rts	
00007CC4                            ; ===========================================================================
00007CC4                            ; ---------------------------------------------------------------------------
00007CC4                            ; Scrap	Brain Zone dynamic screen resizing
00007CC4                            ; ---------------------------------------------------------------------------
00007CC4                            
00007CC4                            Resize_SBZ:				; XREF: Resize_Index
00007CC4 7000                       		moveq	#0,d0
00007CC6 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007CCA D040                       		add.w	d0,d0
00007CCC 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00007CD0 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00007CD4                            ; ===========================================================================
00007CD4 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00007CD6 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00007CD8 0000                       		dc.w Resize_FZ-Resize_SBZx
00007CDA                            ; ===========================================================================
00007CDA                            
00007CDA                            Resize_SBZ1:
00007CDA 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007CE0 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00007CE6 6500                       		bcs.s	locret_7242
00007CE8 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00007CEE 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007CF4 6500                       		bcs.s	locret_7242
00007CF6 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00007CFC                            
00007CFC                            locret_7242:
00007CFC 4E75                       		rts	
00007CFE                            ; ===========================================================================
00007CFE                            
00007CFE                            Resize_SBZ2:
00007CFE 7000                       		moveq	#0,d0
00007D00 1038 F742                  		move.b	($FFFFF742).w,d0
00007D04 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00007D08 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00007D0C                            ; ===========================================================================
00007D0C 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00007D0E 0000                       		dc.w Resize_SBZ2boss-off_7252
00007D10 0000                       		dc.w Resize_SBZ2boss2-off_7252
00007D12 0000                       		dc.w Resize_SBZ2end-off_7252
00007D14                            ; ===========================================================================
00007D14                            
00007D14                            Resize_SBZ2main:
00007D14 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00007D1A 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00007D20 6500                       		bcs.s	locret_727A
00007D22 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00007D28 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00007D2E 6500                       		bcs.s	locret_727A
00007D30 5438 F742                  		addq.b	#2,($FFFFF742).w
00007D34                            
00007D34                            locret_727A:
00007D34 4E75                       		rts	
00007D36                            ; ===========================================================================
00007D36                            
00007D36                            Resize_SBZ2boss:
00007D36 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
00007D3C 6500                       		bcs.s	locret_7298
00007D3E 6100 0000                  		bsr.w	SingleObjLoad
00007D42 6600                       		bne.s	locret_7298
00007D44 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00007D48 5438 F742                  		addq.b	#2,($FFFFF742).w
00007D4C 701E                       		moveq	#$1E,d0
00007D4E 6000 999A                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
00007D52                            ; ===========================================================================
00007D52                            
00007D52                            locret_7298:
00007D52 4E75                       		rts	
00007D54                            ; ===========================================================================
00007D54                            
00007D54                            Resize_SBZ2boss2:
00007D54 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
00007D5A 6500                       		bcs.s	loc_72B6
00007D5C 6100 0000                  		bsr.w	SingleObjLoad
00007D60 6600                       		bne.s	loc_72B0
00007D62 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00007D66 5438 F742                  		addq.b	#2,($FFFFF742).w
00007D6A                            
00007D6A                            loc_72B0:
00007D6A 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007D70                            
00007D70                            loc_72B6:
00007D70 6000                       		bra.s	loc_72C2
00007D72                            ; ===========================================================================
00007D72                            
00007D72                            Resize_SBZ2end:
00007D72 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00007D78 6500                       		bcs.s	loc_72C2
00007D7A 4E75                       		rts	
00007D7C                            ; ===========================================================================
00007D7C                            
00007D7C                            loc_72C2:
00007D7C 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007D82 4E75                       		rts	
00007D84                            ; ===========================================================================
00007D84                            
00007D84                            Resize_FZ:
00007D84 7000                       		moveq	#0,d0
00007D86 1038 F742                  		move.b	($FFFFF742).w,d0
00007D8A 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00007D8E 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00007D92                            ; ===========================================================================
00007D92 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00007D96 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00007D9A 0000                       		dc.w Resize_FZend2-off_72D8
00007D9C                            ; ===========================================================================
00007D9C                            
00007D9C                            Resize_FZmain:
00007D9C 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
00007DA2 6500                       		bcs.s	loc_72F4
00007DA4 5438 F742                  		addq.b	#2,($FFFFF742).w
00007DA8 701F                       		moveq	#$1F,d0
00007DAA 6100 993E                  		bsr.w	LoadPLC		; load FZ boss patterns
00007DAE                            
00007DAE                            loc_72F4:
00007DAE 60CC                       		bra.s	loc_72C2
00007DB0                            ; ===========================================================================
00007DB0                            
00007DB0                            Resize_FZboss:
00007DB0 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00007DB6 6500                       		bcs.s	loc_7312
00007DB8 6100 0000                  		bsr.w	SingleObjLoad
00007DBC 6600                       		bne.s	loc_7312
00007DBE 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
00007DC2 5438 F742                  		addq.b	#2,($FFFFF742).w
00007DC6 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007DCC                            
00007DCC                            loc_7312:
00007DCC 60AE                       		bra.s	loc_72C2
00007DCE                            ; ===========================================================================
00007DCE                            
00007DCE                            Resize_FZend:
00007DCE 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00007DD4 6500                       		bcs.s	loc_7320
00007DD6 5438 F742                  		addq.b	#2,($FFFFF742).w
00007DDA                            
00007DDA                            loc_7320:
00007DDA 60A0                       		bra.s	loc_72C2
00007DDC                            ; ===========================================================================
00007DDC                            
00007DDC                            locret_7322:
00007DDC 4E75                       		rts	
00007DDE                            ; ===========================================================================
00007DDE                            
00007DDE                            Resize_FZend2:
00007DDE 609C                       		bra.s	loc_72C2
00007DE0                            ; ===========================================================================
00007DE0                            ; ---------------------------------------------------------------------------
00007DE0                            ; Ending sequence dynamic screen resizing (empty)
00007DE0                            ; ---------------------------------------------------------------------------
00007DE0                            
00007DE0                            Resize_Ending:				; XREF: Resize_Index
00007DE0 4E75                       		rts	
00007DE2                            ; ===========================================================================
00007DE2                            ; ---------------------------------------------------------------------------
00007DE2                            ; Object 11 - GHZ bridge
00007DE2                            ; ---------------------------------------------------------------------------
00007DE2                            
00007DE2                            Obj11:					; XREF: Obj_Index
00007DE2 7000                       		moveq	#0,d0
00007DE4 1028 0024                  		move.b	$24(a0),d0
00007DE8 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00007DEC 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00007DF0                            ; ===========================================================================
00007DF0 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007DF4 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007DF8 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00007DFC                            ; ===========================================================================
00007DFC                            
00007DFC                            Obj11_Main:				; XREF: Obj11_Index
00007DFC 5428 0024                  		addq.b	#2,$24(a0)
00007E00 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00007E08 317C 438E 0002             		move.w	#$438E,2(a0)
00007E0E 117C 0004 0001             		move.b	#4,1(a0)
00007E14 117C 0003 0018             		move.b	#3,$18(a0)
00007E1A 117C 0080 0019             		move.b	#$80,$19(a0)
00007E20 3428 000C                  		move.w	$C(a0),d2
00007E24 3628 0008                  		move.w	8(a0),d3
00007E28 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00007E2A 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00007E2E 7200                       		moveq	#0,d1
00007E30 1212                       		move.b	(a2),d1		; copy a2 to d1
00007E32 14FC 0000                  		move.b	#0,(a2)+
00007E36 3001                       		move.w	d1,d0
00007E38 E248                       		lsr.w	#1,d0
00007E3A E948                       		lsl.w	#4,d0
00007E3C 9640                       		sub.w	d0,d3
00007E3E 5501                       		subq.b	#2,d1
00007E40 6500                       		bcs.s	Obj11_Action
00007E42                            
00007E42                            Obj11_MakeBdg:
00007E42 6100 0000                  		bsr.w	SingleObjLoad
00007E46 6600                       		bne.s	Obj11_Action
00007E48 5228 0028                  		addq.b	#1,$28(a0)
00007E4C B668 0008                  		cmp.w	8(a0),d3
00007E50 6600                       		bne.s	loc_73B8
00007E52 0643 0010                  		addi.w	#$10,d3
00007E56 3142 000C                  		move.w	d2,$C(a0)
00007E5A 3142 003C                  		move.w	d2,$3C(a0)
00007E5E 3A08                       		move.w	a0,d5
00007E60 0445 D000                  		subi.w	#-$3000,d5
00007E64 EC4D                       		lsr.w	#6,d5
00007E66 0245 007F                  		andi.w	#$7F,d5
00007E6A 14C5                       		move.b	d5,(a2)+
00007E6C 5228 0028                  		addq.b	#1,$28(a0)
00007E70                            
00007E70                            loc_73B8:				; XREF: ROM:00007398j
00007E70 3A09                       		move.w	a1,d5
00007E72 0445 D000                  		subi.w	#-$3000,d5
00007E76 EC4D                       		lsr.w	#6,d5
00007E78 0245 007F                  		andi.w	#$7F,d5
00007E7C 14C5                       		move.b	d5,(a2)+
00007E7E 137C 000A 0024             		move.b	#$A,$24(a1)
00007E84 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00007E86 3342 000C                  		move.w	d2,$C(a1)
00007E8A 3342 003C                  		move.w	d2,$3C(a1)
00007E8E 3343 0008                  		move.w	d3,8(a1)
00007E92 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007E9A 337C 438E 0002             		move.w	#$438E,2(a1)
00007EA0 137C 0004 0001             		move.b	#4,1(a1)
00007EA6 137C 0003 0018             		move.b	#3,$18(a1)
00007EAC 137C 0008 0019             		move.b	#8,$19(a1)
00007EB2 0643 0010                  		addi.w	#$10,d3
00007EB6 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007EBA                            
00007EBA                            Obj11_Action:				; XREF: Obj11_Index
00007EBA 6100                       		bsr.s	Obj11_Solid
00007EBC 4A28 003E                  		tst.b	$3E(a0)
00007EC0 6700                       		beq.s	Obj11_Display
00007EC2 5928 003E                  		subq.b	#4,$3E(a0)
00007EC6 6100 0000                  		bsr.w	Obj11_Bend
00007ECA                            
00007ECA                            Obj11_Display:
00007ECA 6100 0000                  		bsr.w	DisplaySprite
00007ECE 6000 0000                  		bra.w	Obj11_ChkDel
00007ED2                            
00007ED2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007ED2                            
00007ED2                            
00007ED2                            Obj11_Solid:				; XREF: Obj11_Action
00007ED2 7200                       		moveq	#0,d1
00007ED4 1228 0028                  		move.b	$28(a0),d1
00007ED8 E749                       		lsl.w	#3,d1
00007EDA 3401                       		move.w	d1,d2
00007EDC 5041                       		addq.w	#8,d1
00007EDE D442                       		add.w	d2,d2
00007EE0 43F8 D000                  		lea	($FFFFD000).w,a1
00007EE4 4A69 0012                  		tst.w	$12(a1)
00007EE8 6B00 0000                  		bmi.w	locret_751E
00007EEC 3029 0008                  		move.w	8(a1),d0
00007EF0 9068 0008                  		sub.w	8(a0),d0
00007EF4 D041                       		add.w	d1,d0
00007EF6 6B00 0000                  		bmi.w	locret_751E
00007EFA B042                       		cmp.w	d2,d0
00007EFC 6400 0000                  		bcc.w	locret_751E
00007F00 6000                       		bra.s	Platform2
00007F02                            ; End of function Obj11_Solid
00007F02                            
00007F02                            ; ---------------------------------------------------------------------------
00007F02                            ; Platform subroutine
00007F02                            ; ---------------------------------------------------------------------------
00007F02                            
00007F02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F02                            
00007F02                            
00007F02                            PlatformObject:
00007F02 43F8 D000                  		lea	($FFFFD000).w,a1
00007F06 4A69 0012                  		tst.w	$12(a1)
00007F0A 6B00 0000                  		bmi.w	locret_751E
00007F0E 3029 0008                  		move.w	8(a1),d0
00007F12 9068 0008                  		sub.w	8(a0),d0
00007F16 D041                       		add.w	d1,d0
00007F18 6B00 0000                  		bmi.w	locret_751E
00007F1C D241                       		add.w	d1,d1
00007F1E B041                       		cmp.w	d1,d0
00007F20 6400 0000                  		bcc.w	locret_751E
00007F24                            
00007F24                            Platform2:
00007F24 3028 000C                  		move.w	$C(a0),d0
00007F28 5140                       		subq.w	#8,d0
00007F2A                            
00007F2A                            Platform3:
00007F2A 3429 000C                  		move.w	$C(a1),d2
00007F2E 1229 0016                  		move.b	$16(a1),d1
00007F32 4881                       		ext.w	d1
00007F34 D242                       		add.w	d2,d1
00007F36 5841                       		addq.w	#4,d1
00007F38 9041                       		sub.w	d1,d0
00007F3A 6200 0000                  		bhi.w	locret_751E
00007F3E 0C40 FFF0                  		cmpi.w	#-$10,d0
00007F42 6500 0000                  		bcs.w	locret_751E
00007F46 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007F4A 6B00 0000                  		bmi.w	locret_751E
00007F4E 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00007F54 6400 0000                  		bcc.w	locret_751E
00007F58 D440                       		add.w	d0,d2
00007F5A 5642                       		addq.w	#3,d2
00007F5C 3342 000C                  		move.w	d2,$C(a1)
00007F60 5428 0024                  		addq.b	#2,$24(a0)
00007F64                            
00007F64                            loc_74AE:
00007F64 0829 0003 0022             		btst	#3,$22(a1)
00007F6A 6700                       		beq.s	loc_74DC
00007F6C 7000                       		moveq	#0,d0
00007F6E 1029 003D                  		move.b	$3D(a1),d0
00007F72 ED48                       		lsl.w	#6,d0
00007F74 0680 00FF D000             		addi.l	#$FFD000,d0
00007F7A 2440                       		movea.l	d0,a2
00007F7C 08AA 0003 0022             		bclr	#3,$22(a2)
00007F82 422A 0025                  		clr.b	$25(a2)
00007F86 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007F8C 6600                       		bne.s	loc_74DC
00007F8E 552A 0024                  		subq.b	#2,$24(a2)
00007F92                            
00007F92                            loc_74DC:
00007F92 3008                       		move.w	a0,d0
00007F94 0440 D000                  		subi.w	#-$3000,d0
00007F98 EC48                       		lsr.w	#6,d0
00007F9A 0240 007F                  		andi.w	#$7F,d0
00007F9E 1340 003D                  		move.b	d0,$3D(a1)
00007FA2 137C 0000 0026             		move.b	#0,$26(a1)
00007FA8 337C 0000 0012             		move.w	#0,$12(a1)
00007FAE 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007FB4 0829 0001 0022             		btst	#1,$22(a1)
00007FBA 6700                       		beq.s	loc_7512
00007FBC 2F08                       		move.l	a0,-(sp)
00007FBE 2049                       		movea.l	a1,a0
00007FC0 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007FC6 205F                       		movea.l	(sp)+,a0
00007FC8                            
00007FC8                            loc_7512:
00007FC8 08E9 0003 0022             		bset	#3,$22(a1)
00007FCE 08E8 0003 0022             		bset	#3,$22(a0)
00007FD4                            
00007FD4                            locret_751E:
00007FD4 4E75                       		rts	
00007FD6                            ; End of function PlatformObject
00007FD6                            
00007FD6                            ; ---------------------------------------------------------------------------
00007FD6                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007FD6                            ; ---------------------------------------------------------------------------
00007FD6                            
00007FD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FD6                            
00007FD6                            
00007FD6                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007FD6 43F8 D000                  		lea	($FFFFD000).w,a1
00007FDA 4A69 0012                  		tst.w	$12(a1)
00007FDE 6B00 FFF4                  		bmi.w	locret_751E
00007FE2 3029 0008                  		move.w	8(a1),d0
00007FE6 9068 0008                  		sub.w	8(a0),d0
00007FEA D041                       		add.w	d1,d0
00007FEC 6BE6                       		bmi.s	locret_751E
00007FEE D241                       		add.w	d1,d1
00007FF0 B041                       		cmp.w	d1,d0
00007FF2 64E0                       		bcc.s	locret_751E
00007FF4 0828 0000 0001             		btst	#0,1(a0)
00007FFA 6700                       		beq.s	loc_754A
00007FFC 4640                       		not.w	d0
00007FFE D041                       		add.w	d1,d0
00008000                            
00008000                            loc_754A:
00008000 E248                       		lsr.w	#1,d0
00008002 7600                       		moveq	#0,d3
00008004 1632 0000                  		move.b	(a2,d0.w),d3
00008008 3028 000C                  		move.w	$C(a0),d0
0000800C 9043                       		sub.w	d3,d0
0000800E 6000 FF1A                  		bra.w	Platform3
00008012                            ; End of function SlopeObject
00008012                            
00008012                            
00008012                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008012                            
00008012                            
00008012                            Obj15_Solid:				; XREF: Obj15_SetSolid
00008012 43F8 D000                  		lea	($FFFFD000).w,a1
00008016 4A69 0012                  		tst.w	$12(a1)
0000801A 6B00 FFB8                  		bmi.w	locret_751E
0000801E 3029 0008                  		move.w	8(a1),d0
00008022 9068 0008                  		sub.w	8(a0),d0
00008026 D041                       		add.w	d1,d0
00008028 6B00 FFAA                  		bmi.w	locret_751E
0000802C D241                       		add.w	d1,d1
0000802E B041                       		cmp.w	d1,d0
00008030 6400 FFA2                  		bcc.w	locret_751E
00008034 3028 000C                  		move.w	$C(a0),d0
00008038 9043                       		sub.w	d3,d0
0000803A 6000 FEEE                  		bra.w	Platform3
0000803E                            ; End of function Obj15_Solid
0000803E                            
0000803E                            ; ===========================================================================
0000803E                            
0000803E                            Obj11_Action2:				; XREF: Obj11_Index
0000803E 6100                       		bsr.s	Obj11_WalkOff
00008040 6100 0000                  		bsr.w	DisplaySprite
00008044 6000 0000                  		bra.w	Obj11_ChkDel
00008048                            
00008048                            ; ---------------------------------------------------------------------------
00008048                            ; Subroutine allowing Sonic to walk off a bridge
00008048                            ; ---------------------------------------------------------------------------
00008048                            
00008048                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008048                            
00008048                            
00008048                            Obj11_WalkOff:				; XREF: Obj11_Action2
00008048 7200                       		moveq	#0,d1
0000804A 1228 0028                  		move.b	$28(a0),d1
0000804E E749                       		lsl.w	#3,d1
00008050 3401                       		move.w	d1,d2
00008052 5041                       		addq.w	#8,d1
00008054 6100                       		bsr.s	ExitPlatform2
00008056 6400                       		bcc.s	locret_75BE
00008058 E848                       		lsr.w	#4,d0
0000805A 1140 003F                  		move.b	d0,$3F(a0)
0000805E 1028 003E                  		move.b	$3E(a0),d0
00008062 0C00 0040                  		cmpi.b	#$40,d0
00008066 6700                       		beq.s	loc_75B6
00008068 5828 003E                  		addq.b	#4,$3E(a0)
0000806C                            
0000806C                            loc_75B6:
0000806C 6100 0000                  		bsr.w	Obj11_Bend
00008070 6100 0000                  		bsr.w	Obj11_MoveSonic
00008074                            
00008074                            locret_75BE:
00008074 4E75                       		rts	
00008076                            ; End of function Obj11_WalkOff
00008076                            
00008076                            ; ---------------------------------------------------------------------------
00008076                            ; Subroutine allowing Sonic to walk or jump off	a platform
00008076                            ; ---------------------------------------------------------------------------
00008076                            
00008076                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008076                            
00008076                            
00008076                            ExitPlatform:
00008076 3401                       		move.w	d1,d2
00008078                            
00008078                            ExitPlatform2:
00008078 D442                       		add.w	d2,d2
0000807A 43F8 D000                  		lea	($FFFFD000).w,a1
0000807E 0829 0001 0022             		btst	#1,$22(a1)
00008084 6600                       		bne.s	loc_75E0
00008086 3029 0008                  		move.w	8(a1),d0
0000808A 9068 0008                  		sub.w	8(a0),d0
0000808E D041                       		add.w	d1,d0
00008090 6B00                       		bmi.s	loc_75E0
00008092 B042                       		cmp.w	d2,d0
00008094 6500                       		bcs.s	locret_75F2
00008096                            
00008096                            loc_75E0:
00008096 08A9 0003 0022             		bclr	#3,$22(a1)
0000809C 117C 0002 0024             		move.b	#2,$24(a0)
000080A2 08A8 0003 0022             		bclr	#3,$22(a0)
000080A8                            
000080A8                            locret_75F2:
000080A8 4E75                       		rts	
000080AA                            ; End of function ExitPlatform
000080AA                            
000080AA                            
000080AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000080AA                            
000080AA                            
000080AA                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
000080AA 7000                       		moveq	#0,d0
000080AC 1028 003F                  		move.b	$3F(a0),d0
000080B0 1030 0029                  		move.b	$29(a0,d0.w),d0
000080B4 ED48                       		lsl.w	#6,d0
000080B6 0680 00FF D000             		addi.l	#$FFD000,d0
000080BC 2440                       		movea.l	d0,a2
000080BE 43F8 D000                  		lea	($FFFFD000).w,a1
000080C2 302A 000C                  		move.w	$C(a2),d0
000080C6 5140                       		subq.w	#8,d0
000080C8 7200                       		moveq	#0,d1
000080CA 1229 0016                  		move.b	$16(a1),d1
000080CE 9041                       		sub.w	d1,d0
000080D0 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
000080D4 4E75                       		rts	
000080D6                            ; End of function Obj11_MoveSonic
000080D6                            
000080D6                            
000080D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000080D6                            
000080D6                            
000080D6                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
000080D6 1028 003E                  		move.b	$3E(a0),d0
000080DA 6100 B2F8                  		bsr.w	CalcSine
000080DE 3800                       		move.w	d0,d4
000080E0 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
000080E6 7000                       		moveq	#0,d0
000080E8 1028 0028                  		move.b	$28(a0),d0
000080EC E948                       		lsl.w	#4,d0
000080EE 7600                       		moveq	#0,d3
000080F0 1628 003F                  		move.b	$3F(a0),d3
000080F4 3403                       		move.w	d3,d2
000080F6 D640                       		add.w	d0,d3
000080F8 7A00                       		moveq	#0,d5
000080FA 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00008100 1A35 3000                  		move.b	(a5,d3.w),d5
00008104 0243 000F                  		andi.w	#$F,d3
00008108 E94B                       		lsl.w	#4,d3
0000810A 47F4 3000                  		lea	(a4,d3.w),a3
0000810E 45E8 0029                  		lea	$29(a0),a2
00008112                            
00008112                            loc_765C:
00008112 7000                       		moveq	#0,d0
00008114 101A                       		move.b	(a2)+,d0
00008116 ED48                       		lsl.w	#6,d0
00008118 0680 00FF D000             		addi.l	#$FFD000,d0
0000811E 2240                       		movea.l	d0,a1
00008120 7000                       		moveq	#0,d0
00008122 101B                       		move.b	(a3)+,d0
00008124 5240                       		addq.w	#1,d0
00008126 C0C5                       		mulu.w	d5,d0
00008128 C0C4                       		mulu.w	d4,d0
0000812A 4840                       		swap	d0
0000812C D069 003C                  		add.w	$3C(a1),d0
00008130 3340 000C                  		move.w	d0,$C(a1)
00008134 51CA FFDC                  		dbf	d2,loc_765C
00008138 7000                       		moveq	#0,d0
0000813A 1028 0028                  		move.b	$28(a0),d0
0000813E 7600                       		moveq	#0,d3
00008140 1628 003F                  		move.b	$3F(a0),d3
00008144 5203                       		addq.b	#1,d3
00008146 9600                       		sub.b	d0,d3
00008148 4403                       		neg.b	d3
0000814A 6B00                       		bmi.s	locret_76CA
0000814C 3403                       		move.w	d3,d2
0000814E E94B                       		lsl.w	#4,d3
00008150 47F4 3000                  		lea	(a4,d3.w),a3
00008154 D6C2                       		adda.w	d2,a3
00008156 5342                       		subq.w	#1,d2
00008158 6500                       		bcs.s	locret_76CA
0000815A                            
0000815A                            loc_76A4:
0000815A 7000                       		moveq	#0,d0
0000815C 101A                       		move.b	(a2)+,d0
0000815E ED48                       		lsl.w	#6,d0
00008160 0680 00FF D000             		addi.l	#$FFD000,d0
00008166 2240                       		movea.l	d0,a1
00008168 7000                       		moveq	#0,d0
0000816A 1023                       		move.b	-(a3),d0
0000816C 5240                       		addq.w	#1,d0
0000816E C0C5                       		mulu.w	d5,d0
00008170 C0C4                       		mulu.w	d4,d0
00008172 4840                       		swap	d0
00008174 D069 003C                  		add.w	$3C(a1),d0
00008178 3340 000C                  		move.w	d0,$C(a1)
0000817C 51CA FFDC                  		dbf	d2,loc_76A4
00008180                            
00008180                            locret_76CA:
00008180 4E75                       		rts	
00008182                            ; End of function Obj11_Bend
00008182                            
00008182                            ; ===========================================================================
00008182                            ; ---------------------------------------------------------------------------
00008182                            ; GHZ bridge-bending data
00008182                            ; (Defines how the bridge bends	when Sonic walks across	it)
00008182                            ; ---------------------------------------------------------------------------
00008182                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00008292                            		even
00008292                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00008392                            		even
00008392                            
00008392                            ; ===========================================================================
00008392                            
00008392                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00008392 3028 0008                  		move.w	8(a0),d0
00008396 0240 FF80                  		andi.w	#$FF80,d0
0000839A 3238 F700                  		move.w	($FFFFF700).w,d1
0000839E 0441 0080                  		subi.w	#$80,d1
000083A2 0241 FF80                  		andi.w	#$FF80,d1
000083A6 9041                       		sub.w	d1,d0
000083A8 0C40 0280                  		cmpi.w	#$280,d0
000083AC 6200 0000                  		bhi.w	Obj11_DelAll
000083B0 4E75                       		rts	
000083B2                            ; ===========================================================================
000083B2                            
000083B2                            Obj11_DelAll:				; XREF: Obj11_ChkDel
000083B2 7400                       		moveq	#0,d2
000083B4 45E8 0028                  		lea	$28(a0),a2	; load bridge length
000083B8 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
000083BA 5302                       		subq.b	#1,d2		; subtract 1
000083BC 6500                       		bcs.s	Obj11_Delete
000083BE                            
000083BE                            Obj11_DelLoop:
000083BE 7000                       		moveq	#0,d0
000083C0 101A                       		move.b	(a2)+,d0
000083C2 ED48                       		lsl.w	#6,d0
000083C4 0680 00FF D000             		addi.l	#$FFD000,d0
000083CA 2240                       		movea.l	d0,a1
000083CC B048                       		cmp.w	a0,d0
000083CE 6700                       		beq.s	loc_791E
000083D0 6100 0000                  		bsr.w	DeleteObject2
000083D4                            
000083D4                            loc_791E:
000083D4 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
000083D8                            
000083D8                            Obj11_Delete:
000083D8 6100 0000                  		bsr.w	DeleteObject
000083DC 4E75                       		rts	
000083DE                            ; ===========================================================================
000083DE                            
000083DE                            Obj11_Delete2:				; XREF: Obj11_Index
000083DE 6100 0000                  		bsr.w	DeleteObject
000083E2 4E75                       		rts	
000083E4                            ; ===========================================================================
000083E4                            
000083E4                            Obj11_Display2:				; XREF: Obj11_Index
000083E4 6100 0000                  		bsr.w	DisplaySprite
000083E8 4E75                       		rts	
000083EA                            ; ===========================================================================
000083EA                            ; ---------------------------------------------------------------------------
000083EA                            ; Sprite mappings - GHZ	bridge
000083EA                            ; ---------------------------------------------------------------------------
000083EA                            Map_obj11:
000083EA                            	include "_maps\obj11.asm"
000083EA                            ; ---------------------------------------------------------------------------
000083EA                            ; Sprite mappings - GHZ	bridge
000083EA                            ; ---------------------------------------------------------------------------
000083EA 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
000083EE 0000                       		dc.w byte_794B-Map_obj11
000083F0 01                         byte_793A:	dc.b 1
000083F1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000083F6 02                         byte_7940:	dc.b 2
000083F7 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
000083FC 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00008401 01                         byte_794B:	dc.b 1
00008402 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00008408 00                         		even
00008408 00                         		even
00008408                            
00008408                            ; ===========================================================================
00008408                            ; ---------------------------------------------------------------------------
00008408                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00008408                            ;	    - spiked ball on a chain (SBZ)
00008408                            ; ---------------------------------------------------------------------------
00008408                            
00008408                            Obj15:					; XREF: Obj_Index
00008408 7000                       		moveq	#0,d0
0000840A 1028 0024                  		move.b	$24(a0),d0
0000840E 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00008412 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00008416                            ; ===========================================================================
00008416 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
0000841A 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
0000841E 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00008422 0000                       		dc.w Obj15_Action-Obj15_Index
00008424                            ; ===========================================================================
00008424                            
00008424                            Obj15_Main:				; XREF: Obj15_Index
00008424 5428 0024                  		addq.b	#2,$24(a0)
00008428 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00008430 317C 4380 0002             		move.w	#$4380,2(a0)
00008436 117C 0004 0001             		move.b	#4,1(a0)
0000843C 117C 0003 0018             		move.b	#3,$18(a0)
00008442 117C 0018 0019             		move.b	#$18,$19(a0)
00008448 117C 0008 0016             		move.b	#8,$16(a0)
0000844E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00008454 3168 0008 003A             		move.w	8(a0),$3A(a0)
0000845A 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008460 6600                       		bne.s	Obj15_NotSLZ
00008462 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
0000846A 317C 43DC 0002             		move.w	#$43DC,2(a0)
00008470 117C 0020 0019             		move.b	#$20,$19(a0)
00008476 117C 0010 0016             		move.b	#$10,$16(a0)
0000847C 117C 0099 0020             		move.b	#$99,$20(a0)
00008482                            
00008482                            Obj15_NotSLZ:
00008482 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008488 6600                       		bne.s	Obj15_SetLength
0000848A 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00008492 317C 0391 0002             		move.w	#$391,2(a0)
00008498 117C 0018 0019             		move.b	#$18,$19(a0)
0000849E 117C 0018 0016             		move.b	#$18,$16(a0)
000084A4 117C 0086 0020             		move.b	#$86,$20(a0)
000084AA 117C 000C 0024             		move.b	#$C,$24(a0)
000084B0                            
000084B0                            Obj15_SetLength:
000084B0 1810                       		move.b	0(a0),d4
000084B2 7200                       		moveq	#0,d1
000084B4 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
000084B8 1212                       		move.b	(a2),d1		; move a2 to d1
000084BA 3F01                       		move.w	d1,-(sp)
000084BC 0241 000F                  		andi.w	#$F,d1
000084C0 14FC 0000                  		move.b	#0,(a2)+
000084C4 3601                       		move.w	d1,d3
000084C6 E94B                       		lsl.w	#4,d3
000084C8 5003                       		addq.b	#8,d3
000084CA 1143 003C                  		move.b	d3,$3C(a0)
000084CE 5103                       		subq.b	#8,d3
000084D0 4A28 001A                  		tst.b	$1A(a0)
000084D4 6700                       		beq.s	Obj15_MakeChain
000084D6 5003                       		addq.b	#8,d3
000084D8 5341                       		subq.w	#1,d1
000084DA                            
000084DA                            Obj15_MakeChain:
000084DA 6100 0000                  		bsr.w	SingleObjLoad
000084DE 6600                       		bne.s	loc_7A92
000084E0 5228 0028                  		addq.b	#1,$28(a0)
000084E4 3A09                       		move.w	a1,d5
000084E6 0445 D000                  		subi.w	#-$3000,d5
000084EA EC4D                       		lsr.w	#6,d5
000084EC 0245 007F                  		andi.w	#$7F,d5
000084F0 14C5                       		move.b	d5,(a2)+
000084F2 137C 000A 0024             		move.b	#$A,$24(a1)
000084F8 1284                       		move.b	d4,0(a1)	; load swinging	object
000084FA 2368 0004 0004             		move.l	4(a0),4(a1)
00008500 3368 0002 0002             		move.w	2(a0),2(a1)
00008506 08A9 0006 0002             		bclr	#6,2(a1)
0000850C 137C 0004 0001             		move.b	#4,1(a1)
00008512 137C 0004 0018             		move.b	#4,$18(a1)
00008518 137C 0008 0019             		move.b	#8,$19(a1)
0000851E 137C 0001 001A             		move.b	#1,$1A(a1)
00008524 1343 003C                  		move.b	d3,$3C(a1)
00008528 0403 0010                  		subi.b	#$10,d3
0000852C 6400                       		bcc.s	loc_7A8E
0000852E 137C 0002 001A             		move.b	#2,$1A(a1)
00008534 137C 0003 0018             		move.b	#3,$18(a1)
0000853A 08E9 0006 0002             		bset	#6,2(a1)
00008540                            
00008540                            loc_7A8E:
00008540 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00008544                            
00008544                            loc_7A92:
00008544 3A08                       		move.w	a0,d5
00008546 0445 D000                  		subi.w	#-$3000,d5
0000854A EC4D                       		lsr.w	#6,d5
0000854C 0245 007F                  		andi.w	#$7F,d5
00008550 14C5                       		move.b	d5,(a2)+
00008552 317C 4080 0026             		move.w	#$4080,$26(a0)
00008558 317C FE00 003E             		move.w	#-$200,$3E(a0)
0000855E 321F                       		move.w	(sp)+,d1
00008560 0801 0004                  		btst	#4,d1		; is object type $8X ?
00008564 6700                       		beq.s	loc_7AD4	; if not, branch
00008566 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
0000856E 317C 43AA 0002             		move.w	#$43AA,2(a0)
00008574 117C 0001 001A             		move.b	#1,$1A(a0)
0000857A 117C 0002 0018             		move.b	#2,$18(a0)
00008580 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00008586                            
00008586                            loc_7AD4:
00008586 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
0000858C 6700                       		beq.s	Obj15_Action	; if yes, branch
0000858E                            
0000858E                            Obj15_SetSolid:				; XREF: Obj15_Index
0000858E 7200                       		moveq	#0,d1
00008590 1228 0019                  		move.b	$19(a0),d1
00008594 7600                       		moveq	#0,d3
00008596 1628 0016                  		move.b	$16(a0),d3
0000859A 6100 FA76                  		bsr.w	Obj15_Solid
0000859E                            
0000859E                            Obj15_Action:				; XREF: Obj15_Index
0000859E 6100 0000                  		bsr.w	Obj15_Move
000085A2 6100 0000                  		bsr.w	DisplaySprite
000085A6 6000 0000                  		bra.w	Obj15_ChkDel
000085AA                            ; ===========================================================================
000085AA                            
000085AA                            Obj15_Action2:				; XREF: Obj15_Index
000085AA 7200                       		moveq	#0,d1
000085AC 1228 0019                  		move.b	$19(a0),d1
000085B0 6100 FAC4                  		bsr.w	ExitPlatform
000085B4 3F28 0008                  		move.w	8(a0),-(sp)
000085B8 6100 0000                  		bsr.w	Obj15_Move
000085BC 341F                       		move.w	(sp)+,d2
000085BE 7600                       		moveq	#0,d3
000085C0 1628 0016                  		move.b	$16(a0),d3
000085C4 5203                       		addq.b	#1,d3
000085C6 6100 0000                  		bsr.w	MvSonicOnPtfm
000085CA 6100 0000                  		bsr.w	DisplaySprite
000085CE 6000 0000                  		bra.w	Obj15_ChkDel
000085D2                            
000085D2 4E75                       		rts
000085D4                            
000085D4                            ; ---------------------------------------------------------------------------
000085D4                            ; Subroutine to	change Sonic's position with a platform
000085D4                            ; ---------------------------------------------------------------------------
000085D4                            
000085D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085D4                            
000085D4                            
000085D4                            MvSonicOnPtfm:
000085D4 43F8 D000                  		lea	($FFFFD000).w,a1
000085D8 3028 000C                  		move.w	$C(a0),d0
000085DC 9043                       		sub.w	d3,d0
000085DE 6000                       		bra.s	MvSonic2
000085E0                            ; End of function MvSonicOnPtfm
000085E0                            
000085E0                            ; ---------------------------------------------------------------------------
000085E0                            ; Subroutine to	change Sonic's position with a platform
000085E0                            ; ---------------------------------------------------------------------------
000085E0                            
000085E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085E0                            
000085E0                            
000085E0                            MvSonicOnPtfm2:
000085E0 43F8 D000                  		lea	($FFFFD000).w,a1
000085E4 3028 000C                  		move.w	$C(a0),d0
000085E8 0440 0009                  		subi.w	#9,d0
000085EC                            
000085EC                            MvSonic2:
000085EC 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000085F0 6B00                       		bmi.s	locret_7B62
000085F2 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000085F8 6400                       		bcc.s	locret_7B62
000085FA 4A78 FE08                  		tst.w	($FFFFFE08).w
000085FE 6600                       		bne.s	locret_7B62
00008600 7200                       		moveq	#0,d1
00008602 1229 0016                  		move.b	$16(a1),d1
00008606 9041                       		sub.w	d1,d0
00008608 3340 000C                  		move.w	d0,$C(a1)
0000860C 9468 0008                  		sub.w	8(a0),d2
00008610 9569 0008                  		sub.w	d2,8(a1)
00008614                            
00008614                            locret_7B62:
00008614 4E75                       		rts	
00008616                            ; End of function MvSonicOnPtfm2
00008616                            
00008616                            
00008616                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008616                            
00008616                            
00008616                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00008616 1038 FE78                  		move.b	($FFFFFE78).w,d0
0000861A 323C 0080                  		move.w	#$80,d1
0000861E 0828 0000 0022             		btst	#0,$22(a0)
00008624 6700                       		beq.s	loc_7B78
00008626 4440                       		neg.w	d0
00008628 D041                       		add.w	d1,d0
0000862A                            
0000862A                            loc_7B78:
0000862A 6000                       		bra.s	Obj15_Move2
0000862C                            ; End of function Obj15_Move
0000862C                            
0000862C                            
0000862C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000862C                            
0000862C                            
0000862C                            Obj48_Move:				; XREF: Obj48_Display2
0000862C 4A28 003D                  		tst.b	$3D(a0)
00008630 6600                       		bne.s	loc_7B9C
00008632 3028 003E                  		move.w	$3E(a0),d0
00008636 5040                       		addq.w	#8,d0
00008638 3140 003E                  		move.w	d0,$3E(a0)
0000863C D168 0026                  		add.w	d0,$26(a0)
00008640 0C40 0200                  		cmpi.w	#$200,d0
00008644 6600                       		bne.s	loc_7BB6
00008646 117C 0001 003D             		move.b	#1,$3D(a0)
0000864C 6000                       		bra.s	loc_7BB6
0000864E                            ; ===========================================================================
0000864E                            
0000864E                            loc_7B9C:
0000864E 3028 003E                  		move.w	$3E(a0),d0
00008652 5140                       		subq.w	#8,d0
00008654 3140 003E                  		move.w	d0,$3E(a0)
00008658 D168 0026                  		add.w	d0,$26(a0)
0000865C 0C40 FE00                  		cmpi.w	#-$200,d0
00008660 6600                       		bne.s	loc_7BB6
00008662 117C 0000 003D             		move.b	#0,$3D(a0)
00008668                            
00008668                            loc_7BB6:
00008668 1028 0026                  		move.b	$26(a0),d0
0000866C                            ; End of function Obj48_Move
0000866C                            
0000866C                            
0000866C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000866C                            
0000866C                            
0000866C                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
0000866C 6100 AD66                  		bsr.w	CalcSine
00008670 3428 0038                  		move.w	$38(a0),d2
00008674 3628 003A                  		move.w	$3A(a0),d3
00008678 45E8 0028                  		lea	$28(a0),a2
0000867C 7C00                       		moveq	#0,d6
0000867E 1C1A                       		move.b	(a2)+,d6
00008680                            
00008680                            loc_7BCE:
00008680 7800                       		moveq	#0,d4
00008682 181A                       		move.b	(a2)+,d4
00008684 ED4C                       		lsl.w	#6,d4
00008686 0684 00FF D000             		addi.l	#$FFD000,d4
0000868C 2244                       		movea.l	d4,a1
0000868E 7800                       		moveq	#0,d4
00008690 1829 003C                  		move.b	$3C(a1),d4
00008694 2A04                       		move.l	d4,d5
00008696 C9C0                       		muls.w	d0,d4
00008698 E084                       		asr.l	#8,d4
0000869A CBC1                       		muls.w	d1,d5
0000869C E085                       		asr.l	#8,d5
0000869E D842                       		add.w	d2,d4
000086A0 DA43                       		add.w	d3,d5
000086A2 3344 000C                  		move.w	d4,$C(a1)
000086A6 3345 0008                  		move.w	d5,8(a1)
000086AA 51CE FFD4                  		dbf	d6,loc_7BCE
000086AE 4E75                       		rts	
000086B0                            ; End of function Obj15_Move2
000086B0                            
000086B0                            ; ===========================================================================
000086B0                            
000086B0                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
000086B0 3028 003A                  		move.w	$3A(a0),d0
000086B4 0240 FF80                  		andi.w	#$FF80,d0
000086B8 3238 F700                  		move.w	($FFFFF700).w,d1
000086BC 0441 0080                  		subi.w	#$80,d1
000086C0 0241 FF80                  		andi.w	#$FF80,d1
000086C4 9041                       		sub.w	d1,d0
000086C6 0C40 0280                  		cmpi.w	#$280,d0
000086CA 6200 0000                  		bhi.w	Obj15_DelAll
000086CE 4E75                       		rts	
000086D0                            ; ===========================================================================
000086D0                            
000086D0                            Obj15_DelAll:				; XREF: Obj15_ChkDel
000086D0 7400                       		moveq	#0,d2
000086D2 45E8 0028                  		lea	$28(a0),a2
000086D6 141A                       		move.b	(a2)+,d2
000086D8                            
000086D8                            Obj15_DelLoop:
000086D8 7000                       		moveq	#0,d0
000086DA 101A                       		move.b	(a2)+,d0
000086DC ED48                       		lsl.w	#6,d0
000086DE 0680 00FF D000             		addi.l	#$FFD000,d0
000086E4 2240                       		movea.l	d0,a1
000086E6 6100 0000                  		bsr.w	DeleteObject2
000086EA 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
000086EE 4E75                       		rts	
000086F0                            ; ===========================================================================
000086F0                            
000086F0                            Obj15_Delete:				; XREF: Obj15_Index
000086F0 6100 0000                  		bsr.w	DeleteObject
000086F4 4E75                       		rts	
000086F6                            ; ===========================================================================
000086F6                            
000086F6                            Obj15_Display:				; XREF: Obj15_Index
000086F6 6000 0000                  		bra.w	DisplaySprite
000086FA                            ; ===========================================================================
000086FA                            ; ---------------------------------------------------------------------------
000086FA                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000086FA                            ; ---------------------------------------------------------------------------
000086FA                            Map_obj15:
000086FA                            	include "_maps\obj15ghz.asm"
000086FA                            ; ---------------------------------------------------------------------------
000086FA                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000086FA                            ; ---------------------------------------------------------------------------
000086FA 0000                       		dc.w byte_7C4E-Map_obj15
000086FC 0000                       		dc.w byte_7C59-Map_obj15
000086FE 0000                       		dc.w byte_7C5F-Map_obj15
00008700 02                         byte_7C4E:	dc.b 2
00008701 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00008706 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
0000870B 01                         byte_7C59:	dc.b 1
0000870C F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008711 01                         byte_7C5F:	dc.b 1
00008712 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00008718 00                         		even
00008718 00                         		even
00008718                            
00008718                            ; ---------------------------------------------------------------------------
00008718                            ; Sprite mappings - SLZ	swinging platforms
00008718                            ; ---------------------------------------------------------------------------
00008718                            Map_obj15a:
00008718                            	include "_maps\obj15slz.asm"
00008718                            ; ---------------------------------------------------------------------------
00008718                            ; Sprite mappings - SLZ	swinging platforms
00008718                            ; ---------------------------------------------------------------------------
00008718 0000                       		dc.w byte_7C6C-Map_obj15a
0000871A 0000                       		dc.w byte_7C95-Map_obj15a
0000871C 0000                       		dc.w byte_7C9B-Map_obj15a
0000871E 08                         byte_7C6C:	dc.b 8
0000871F F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00008724 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00008729 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
0000872E F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00008733 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00008738 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
0000873D 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00008742 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00008747 01                         byte_7C95:	dc.b 1
00008748 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
0000874D 01                         byte_7C9B:	dc.b 1
0000874E F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00008754 00                         		even
00008754 00                         		even
00008754                            
00008754                            ; ===========================================================================
00008754                            ; ---------------------------------------------------------------------------
00008754                            ; Object 17 - helix of spikes on a pole	(GHZ)
00008754                            ; ---------------------------------------------------------------------------
00008754                            
00008754                            Obj17:					; XREF: Obj_Index
00008754 7000                       		moveq	#0,d0
00008756 1028 0024                  		move.b	$24(a0),d0
0000875A 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
0000875E 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00008762                            ; ===========================================================================
00008762 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00008764 0000                       		dc.w Obj17_Action-Obj17_Index
00008766 0000                       		dc.w Obj17_Action-Obj17_Index
00008768 0000                       		dc.w Obj17_Delete-Obj17_Index
0000876A 0000                       		dc.w Obj17_Display-Obj17_Index
0000876C                            ; ===========================================================================
0000876C                            
0000876C                            Obj17_Main:				; XREF: Obj17_Index
0000876C 5428 0024                  		addq.b	#2,$24(a0)
00008770 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00008778 317C 4398 0002             		move.w	#$4398,2(a0)
0000877E 117C 0007 0022             		move.b	#7,$22(a0)
00008784 117C 0004 0001             		move.b	#4,1(a0)
0000878A 117C 0003 0018             		move.b	#3,$18(a0)
00008790 117C 0008 0019             		move.b	#8,$19(a0)
00008796 3428 000C                  		move.w	$C(a0),d2
0000879A 3628 0008                  		move.w	8(a0),d3
0000879E 1810                       		move.b	0(a0),d4
000087A0 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
000087A4 7200                       		moveq	#0,d1
000087A6 1212                       		move.b	(a2),d1		; move a2 to d1
000087A8 14FC 0000                  		move.b	#0,(a2)+
000087AC 3001                       		move.w	d1,d0
000087AE E248                       		lsr.w	#1,d0
000087B0 E948                       		lsl.w	#4,d0
000087B2 9640                       		sub.w	d0,d3
000087B4 5501                       		subq.b	#2,d1
000087B6 6500                       		bcs.s	Obj17_Action
000087B8 7C00                       		moveq	#0,d6
000087BA                            
000087BA                            Obj17_MakeHelix:
000087BA 6100 0000                  		bsr.w	SingleObjLoad
000087BE 6600                       		bne.s	Obj17_Action
000087C0 5228 0028                  		addq.b	#1,$28(a0)
000087C4 3A09                       		move.w	a1,d5
000087C6 0445 D000                  		subi.w	#$D000,d5
000087CA EC4D                       		lsr.w	#6,d5
000087CC 0245 007F                  		andi.w	#$7F,d5
000087D0 14C5                       		move.b	d5,(a2)+
000087D2 137C 0008 0024             		move.b	#8,$24(a1)
000087D8 1284                       		move.b	d4,0(a1)
000087DA 3342 000C                  		move.w	d2,$C(a1)
000087DE 3343 0008                  		move.w	d3,8(a1)
000087E2 2368 0004 0004             		move.l	4(a0),4(a1)
000087E8 337C 4398 0002             		move.w	#$4398,2(a1)
000087EE 137C 0004 0001             		move.b	#4,1(a1)
000087F4 137C 0003 0018             		move.b	#3,$18(a1)
000087FA 137C 0008 0019             		move.b	#8,$19(a1)
00008800 1346 003E                  		move.b	d6,$3E(a1)
00008804 5206                       		addq.b	#1,d6
00008806 0206 0007                  		andi.b	#7,d6
0000880A 0643 0010                  		addi.w	#$10,d3
0000880E B668 0008                  		cmp.w	8(a0),d3
00008812 6600                       		bne.s	loc_7D78
00008814 1146 003E                  		move.b	d6,$3E(a0)
00008818 5206                       		addq.b	#1,d6
0000881A 0206 0007                  		andi.b	#7,d6
0000881E 0643 0010                  		addi.w	#$10,d3
00008822 5228 0028                  		addq.b	#1,$28(a0)
00008826                            
00008826                            loc_7D78:
00008826 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
0000882A                            
0000882A                            Obj17_Action:				; XREF: Obj17_Index
0000882A 6100 0000                  		bsr.w	Obj17_RotateSpikes
0000882E 6100 0000                  		bsr.w	DisplaySprite
00008832 6000 0000                  		bra.w	Obj17_ChkDel
00008836                            
00008836                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008836                            
00008836                            
00008836                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00008836 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0000883A 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00008840 D028 003E                  		add.b	$3E(a0),d0
00008844 0200 0007                  		andi.b	#7,d0
00008848 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
0000884C 6600                       		bne.s	locret_7DA6
0000884E 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00008854                            
00008854                            locret_7DA6:
00008854 4E75                       		rts	
00008856                            ; End of function Obj17_RotateSpikes
00008856                            
00008856                            ; ===========================================================================
00008856                            
00008856                            Obj17_ChkDel:				; XREF: Obj17_Action
00008856 3028 0008                  		move.w	8(a0),d0
0000885A 0240 FF80                  		andi.w	#$FF80,d0
0000885E 3238 F700                  		move.w	($FFFFF700).w,d1
00008862 0441 0080                  		subi.w	#$80,d1
00008866 0241 FF80                  		andi.w	#$FF80,d1
0000886A 9041                       		sub.w	d1,d0
0000886C 0C40 0280                  		cmpi.w	#$280,d0
00008870 6200 0000                  		bhi.w	Obj17_DelAll
00008874 4E75                       		rts	
00008876                            ; ===========================================================================
00008876                            
00008876                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00008876 7400                       		moveq	#0,d2
00008878 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
0000887C 141A                       		move.b	(a2)+,d2	; move a2 to d2
0000887E 5502                       		subq.b	#2,d2
00008880 6500                       		bcs.s	Obj17_Delete
00008882                            
00008882                            Obj17_DelLoop:
00008882 7000                       		moveq	#0,d0
00008884 101A                       		move.b	(a2)+,d0
00008886 ED48                       		lsl.w	#6,d0
00008888 0680 00FF D000             		addi.l	#$FFD000,d0
0000888E 2240                       		movea.l	d0,a1
00008890 6100 0000                  		bsr.w	DeleteObject2	; delete object
00008894 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00008898                            
00008898                            Obj17_Delete:				; XREF: Obj17_Index
00008898 6100 0000                  		bsr.w	DeleteObject
0000889C 4E75                       		rts	
0000889E                            ; ===========================================================================
0000889E                            
0000889E                            Obj17_Display:				; XREF: Obj17_Index
0000889E 6100 FF96                  		bsr.w	Obj17_RotateSpikes
000088A2 6000 0000                  		bra.w	DisplaySprite
000088A6                            ; ===========================================================================
000088A6                            ; ---------------------------------------------------------------------------
000088A6                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000088A6                            ; ---------------------------------------------------------------------------
000088A6                            Map_obj17:
000088A6                            	include "_maps\obj17.asm"
000088A6                            ; ---------------------------------------------------------------------------
000088A6                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000088A6                            ; ---------------------------------------------------------------------------
000088A6 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
000088AA 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
000088AE 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
000088B2 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
000088B6 01                         byte_7E08:	dc.b 1
000088B7 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
000088BC 01                         byte_7E0E:	dc.b 1
000088BD F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
000088C2 01                         byte_7E14:	dc.b 1
000088C3 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
000088C8 01                         byte_7E1A:	dc.b 1
000088C9 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
000088CE 01                         byte_7E20:	dc.b 1
000088CF 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
000088D4 01                         byte_7E26:	dc.b 1
000088D5 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
000088DA 01                         byte_7E2C:	dc.b 1
000088DB F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
000088E0                            		even
000088E0                            		even
000088E0                            
000088E0                            ; ===========================================================================
000088E0                            ; ---------------------------------------------------------------------------
000088E0                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
000088E0                            ; ---------------------------------------------------------------------------
000088E0                            
000088E0                            Obj18:					; XREF: Obj_Index
000088E0 7000                       		moveq	#0,d0
000088E2 1028 0024                  		move.b	$24(a0),d0
000088E6 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
000088EA 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
000088EE                            ; ===========================================================================
000088EE 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
000088F0 0000                       		dc.w Obj18_Solid-Obj18_Index
000088F2 0000                       		dc.w Obj18_Action2-Obj18_Index
000088F4 0000                       		dc.w Obj18_Delete-Obj18_Index
000088F6 0000                       		dc.w Obj18_Action-Obj18_Index
000088F8                            ; ===========================================================================
000088F8                            
000088F8                            Obj18_Main:				; XREF: Obj18_Index
000088F8 5428 0024                  		addq.b	#2,$24(a0)
000088FC 317C 4000 0002             		move.w	#$4000,2(a0)
00008902 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
0000890A 117C 0020 0019             		move.b	#$20,$19(a0)
00008910 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00008916 6600                       		bne.s	Obj18_NotSYZ
00008918 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00008920 117C 0020 0019             		move.b	#$20,$19(a0)
00008926                            
00008926                            Obj18_NotSYZ:
00008926 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000892C 6600                       		bne.s	Obj18_NotSLZ
0000892E 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00008936 117C 0020 0019             		move.b	#$20,$19(a0)
0000893C 317C 4000 0002             		move.w	#$4000,2(a0)
00008942 117C 0003 0028             		move.b	#3,$28(a0)
00008948                            
00008948                            Obj18_NotSLZ:
00008948 117C 0004 0001             		move.b	#4,1(a0)
0000894E 117C 0004 0018             		move.b	#4,$18(a0)
00008954 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000895A 3168 000C 0034             		move.w	$C(a0),$34(a0)
00008960 3168 0008 0032             		move.w	8(a0),$32(a0)
00008966 317C 0080 0026             		move.w	#$80,$26(a0)
0000896C 7200                       		moveq	#0,d1
0000896E 1028 0028                  		move.b	$28(a0),d0
00008972 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00008976 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00008978 5201                       		addq.b	#1,d1		; use frame #1
0000897A 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00008980                            
00008980                            Obj18_SetFrame:
00008980 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00008984                            
00008984                            Obj18_Solid:				; XREF: Obj18_Index
00008984 4A28 0038                  		tst.b	$38(a0)
00008988 6700                       		beq.s	loc_7EE0
0000898A 5928 0038                  		subq.b	#4,$38(a0)
0000898E                            
0000898E                            loc_7EE0:
0000898E 7200                       		moveq	#0,d1
00008990 1228 0019                  		move.b	$19(a0),d1
00008994 6100 F56C                  		bsr.w	PlatformObject
00008998                            
00008998                            Obj18_Action:				; XREF: Obj18_Index
00008998 6100 0000                  		bsr.w	Obj18_Move
0000899C 6100 0000                  		bsr.w	Obj18_Nudge
000089A0 6100 0000                  		bsr.w	DisplaySprite
000089A4 6000 0000                  		bra.w	Obj18_ChkDel
000089A8                            ; ===========================================================================
000089A8                            
000089A8                            Obj18_Action2:				; XREF: Obj18_Index
000089A8 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
000089AE 6700                       		beq.s	loc_7F06
000089B0 5828 0038                  		addq.b	#4,$38(a0)
000089B4                            
000089B4                            loc_7F06:
000089B4 7200                       		moveq	#0,d1
000089B6 1228 0019                  		move.b	$19(a0),d1
000089BA 6100 F6BA                  		bsr.w	ExitPlatform
000089BE 3F28 0008                  		move.w	8(a0),-(sp)
000089C2 6100 0000                  		bsr.w	Obj18_Move
000089C6 6100 0000                  		bsr.w	Obj18_Nudge
000089CA 341F                       		move.w	(sp)+,d2
000089CC 6100 FC12                  		bsr.w	MvSonicOnPtfm2
000089D0 6100 0000                  		bsr.w	DisplaySprite
000089D4 6000 0000                  		bra.w	Obj18_ChkDel
000089D8                            
000089D8 4E75                       		rts
000089DA                            
000089DA                            ; ---------------------------------------------------------------------------
000089DA                            ; Subroutine to	move platform slightly when you	stand on it
000089DA                            ; ---------------------------------------------------------------------------
000089DA                            
000089DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089DA                            
000089DA                            
000089DA                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
000089DA 1028 0038                  		move.b	$38(a0),d0
000089DE 6100 A9F4                  		bsr.w	CalcSine
000089E2 323C 0400                  		move.w	#$400,d1
000089E6 C1C1                       		muls.w	d1,d0
000089E8 4840                       		swap	d0
000089EA D068 002C                  		add.w	$2C(a0),d0
000089EE 3140 000C                  		move.w	d0,$C(a0)
000089F2 4E75                       		rts	
000089F4                            ; End of function Obj18_Nudge
000089F4                            
000089F4                            ; ---------------------------------------------------------------------------
000089F4                            ; Subroutine to	move platforms
000089F4                            ; ---------------------------------------------------------------------------
000089F4                            
000089F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089F4                            
000089F4                            
000089F4                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
000089F4 7000                       		moveq	#0,d0
000089F6 1028 0028                  		move.b	$28(a0),d0
000089FA 0240 000F                  		andi.w	#$F,d0
000089FE D040                       		add.w	d0,d0
00008A00 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
00008A04 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
00008A08                            ; End of function Obj18_Move
00008A08                            
00008A08                            ; ===========================================================================
00008A08 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
00008A0C 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
00008A10 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
00008A14 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
00008A18 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
00008A1C 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
00008A20 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
00008A22                            ; ===========================================================================
00008A22                            
00008A22                            Obj18_Type00:
00008A22 4E75                       		rts			; platform 00 doesn't move
00008A24                            ; ===========================================================================
00008A24                            
00008A24                            Obj18_Type05:
00008A24 3028 0032                  		move.w	$32(a0),d0
00008A28 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008A2C 4401                       		neg.b	d1		; reverse platform-motion
00008A2E 0601 0040                  		addi.b	#$40,d1
00008A32 6000                       		bra.s	Obj18_01_Move
00008A34                            ; ===========================================================================
00008A34                            
00008A34                            Obj18_Type01:
00008A34 3028 0032                  		move.w	$32(a0),d0
00008A38 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008A3C 0401 0040                  		subi.b	#$40,d1
00008A40                            
00008A40                            Obj18_01_Move:
00008A40 4881                       		ext.w	d1
00008A42 D041                       		add.w	d1,d0
00008A44 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
00008A48 6000 0000                  		bra.w	Obj18_ChgMotion
00008A4C                            ; ===========================================================================
00008A4C                            
00008A4C                            Obj18_Type0C:
00008A4C 3028 0034                  		move.w	$34(a0),d0
00008A50 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008A54 4401                       		neg.b	d1		; reverse platform-motion
00008A56 0601 0030                  		addi.b	#$30,d1
00008A5A 6000                       		bra.s	Obj18_02_Move
00008A5C                            ; ===========================================================================
00008A5C                            
00008A5C                            Obj18_Type0B:
00008A5C 3028 0034                  		move.w	$34(a0),d0
00008A60 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008A64 0401 0030                  		subi.b	#$30,d1
00008A68 6000                       		bra.s	Obj18_02_Move
00008A6A                            ; ===========================================================================
00008A6A                            
00008A6A                            Obj18_Type06:
00008A6A 3028 0034                  		move.w	$34(a0),d0
00008A6E 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008A72 4401                       		neg.b	d1		; reverse platform-motion
00008A74 0601 0040                  		addi.b	#$40,d1
00008A78 6000                       		bra.s	Obj18_02_Move
00008A7A                            ; ===========================================================================
00008A7A                            
00008A7A                            Obj18_Type02:
00008A7A 3028 0034                  		move.w	$34(a0),d0
00008A7E 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008A82 0401 0040                  		subi.b	#$40,d1
00008A86                            
00008A86                            Obj18_02_Move:
00008A86 4881                       		ext.w	d1
00008A88 D041                       		add.w	d1,d0
00008A8A 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008A8E 6000 0000                  		bra.w	Obj18_ChgMotion
00008A92                            ; ===========================================================================
00008A92                            
00008A92                            Obj18_Type03:
00008A92 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008A96 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00008A98 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
00008A9E 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
00008AA0 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00008AA6                            
00008AA6                            Obj18_03_NoMove:
00008AA6 4E75                       		rts	
00008AA8                            ; ===========================================================================
00008AA8                            
00008AA8                            Obj18_03_Wait:
00008AA8 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00008AAC 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
00008AAE 317C 0020 003A             		move.w	#32,$3A(a0)
00008AB4 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00008AB8 4E75                       		rts	
00008ABA                            ; ===========================================================================
00008ABA                            
00008ABA                            Obj18_Type04:
00008ABA 4A68 003A                  		tst.w	$3A(a0)
00008ABE 6700                       		beq.s	loc_8048
00008AC0 5368 003A                  		subq.w	#1,$3A(a0)
00008AC4 6600                       		bne.s	loc_8048
00008AC6 0828 0003 0022             		btst	#3,$22(a0)
00008ACC 6700                       		beq.s	loc_8042
00008ACE 08E9 0001 0022             		bset	#1,$22(a1)
00008AD4 08A9 0003 0022             		bclr	#3,$22(a1)
00008ADA 137C 0002 0024             		move.b	#2,$24(a1)
00008AE0 08A8 0003 0022             		bclr	#3,$22(a0)
00008AE6 4228 0025                  		clr.b	$25(a0)
00008AEA 3368 0012 0012             		move.w	$12(a0),$12(a1)
00008AF0                            
00008AF0                            loc_8042:
00008AF0 117C 0008 0024             		move.b	#8,$24(a0)
00008AF6                            
00008AF6                            loc_8048:
00008AF6 2628 002C                  		move.l	$2C(a0),d3
00008AFA 3028 0012                  		move.w	$12(a0),d0
00008AFE 48C0                       		ext.l	d0
00008B00 E180                       		asl.l	#8,d0
00008B02 D680                       		add.l	d0,d3
00008B04 2143 002C                  		move.l	d3,$2C(a0)
00008B08 0668 0038 0012             		addi.w	#$38,$12(a0)
00008B0E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008B12 0640 00E0                  		addi.w	#$E0,d0
00008B16 B068 002C                  		cmp.w	$2C(a0),d0
00008B1A 6400                       		bcc.s	locret_8074
00008B1C 117C 0006 0024             		move.b	#6,$24(a0)
00008B22                            
00008B22                            locret_8074:
00008B22 4E75                       		rts	
00008B24                            ; ===========================================================================
00008B24                            
00008B24                            Obj18_Type07:
00008B24 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008B28 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
00008B2A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00008B2E 7000                       		moveq	#0,d0
00008B30 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
00008B34 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00008B36 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00008B3A 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
00008B3C 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00008B42                            
00008B42                            Obj18_07_NoMove:
00008B42 4E75                       		rts	
00008B44                            ; ===========================================================================
00008B44                            
00008B44                            Obj18_07_Wait:
00008B44 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00008B48 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
00008B4A 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
00008B4E 4E75                       		rts	
00008B50                            ; ===========================================================================
00008B50                            
00008B50                            Obj18_Type08:
00008B50 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00008B54 3028 0034                  		move.w	$34(a0),d0
00008B58 0440 0200                  		subi.w	#$200,d0
00008B5C B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00008B60 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
00008B62 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00008B66                            
00008B66                            Obj18_08_NoStop:
00008B66 4E75                       		rts	
00008B68                            ; ===========================================================================
00008B68                            
00008B68                            Obj18_Type0A:
00008B68 3028 0034                  		move.w	$34(a0),d0
00008B6C 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008B70 0401 0040                  		subi.b	#$40,d1
00008B74 4881                       		ext.w	d1
00008B76 E241                       		asr.w	#1,d1
00008B78 D041                       		add.w	d1,d0
00008B7A 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008B7E                            
00008B7E                            Obj18_ChgMotion:
00008B7E 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00008B84 4E75                       		rts	
00008B86                            ; ===========================================================================
00008B86                            
00008B86                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00008B86 3028 0032                  		move.w	$32(a0),d0
00008B8A 0240 FF80                  		andi.w	#$FF80,d0
00008B8E 3238 F700                  		move.w	($FFFFF700).w,d1
00008B92 0441 0080                  		subi.w	#$80,d1
00008B96 0241 FF80                  		andi.w	#$FF80,d1
00008B9A 9041                       		sub.w	d1,d0
00008B9C 0C40 0280                  		cmpi.w	#$280,d0
00008BA0 6200                       		bhi.s	Obj18_Delete
00008BA2 4E75                       		rts	
00008BA4                            ; ===========================================================================
00008BA4                            
00008BA4                            Obj18_Delete:				; XREF: Obj18_Index
00008BA4 6000 0000                  		bra.w	DeleteObject
00008BA8                            ; ===========================================================================
00008BA8                            ; ---------------------------------------------------------------------------
00008BA8                            ; Sprite mappings - unused
00008BA8                            ; ---------------------------------------------------------------------------
00008BA8                            Map_obj18x:
00008BA8                            	include "_maps\obj18x.asm"
00008BA8                            ; ---------------------------------------------------------------------------
00008BA8                            ; Sprite mappings - unused
00008BA8                            ; ---------------------------------------------------------------------------
00008BA8 0000                       		dc.w byte_80FE-Map_obj18x
00008BAA 0000                       		dc.w byte_8109-Map_obj18x
00008BAC 02                         byte_80FE:	dc.b 2
00008BAD F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00008BB2 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00008BB7 0A                         byte_8109:	dc.b $A
00008BB8 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00008BBD 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00008BC2 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00008BC7 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00008BCC 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00008BD1 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00008BD6 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00008BDB 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00008BE0 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00008BE5 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00008BEA                            		even
00008BEA                            		even
00008BEA                            
00008BEA                            ; ---------------------------------------------------------------------------
00008BEA                            ; Sprite mappings - GHZ	platforms
00008BEA                            ; ---------------------------------------------------------------------------
00008BEA                            Map_obj18:
00008BEA                            	include "_maps\obj18ghz.asm"
00008BEA                            ; ---------------------------------------------------------------------------
00008BEA                            ; Sprite mappings - GHZ	platforms
00008BEA                            ; ---------------------------------------------------------------------------
00008BEA 0000                       		dc.w byte_8140-Map_obj18
00008BEC 0000                       		dc.w byte_8155-Map_obj18
00008BEE 04                         byte_8140:	dc.b 4
00008BEF F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00008BF4 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00008BF9 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00008BFE F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00008C03 0A                         byte_8155:	dc.b $A
00008C04 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00008C09 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00008C0E 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00008C13 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00008C18 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00008C1D F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00008C22 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00008C27 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00008C2C 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00008C31 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00008C36                            		even
00008C36                            		even
00008C36                            
00008C36                            ; ---------------------------------------------------------------------------
00008C36                            ; Sprite mappings - SYZ	platforms
00008C36                            ; ---------------------------------------------------------------------------
00008C36                            Map_obj18a:
00008C36                            	include "_maps\obj18syz.asm"
00008C36                            ; ---------------------------------------------------------------------------
00008C36                            ; Sprite mappings - SYZ	platforms
00008C36                            ; ---------------------------------------------------------------------------
00008C36 0000                       		dc.w byte_818A-Map_obj18a
00008C38 03                         byte_818A:	dc.b 3
00008C39 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00008C3E F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00008C43 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00008C48                            		even
00008C48                            		even
00008C48                            
00008C48                            ; ---------------------------------------------------------------------------
00008C48                            ; Sprite mappings - SLZ	platforms
00008C48                            ; ---------------------------------------------------------------------------
00008C48                            Map_obj18b:
00008C48                            	include "_maps\obj18slz.asm"
00008C48                            ; ---------------------------------------------------------------------------
00008C48                            ; Sprite mappings - SLZ	platforms
00008C48                            ; ---------------------------------------------------------------------------
00008C48 0000                       		dc.w byte_819C-Map_obj18b
00008C4A 02                         byte_819C:	dc.b 2
00008C4B F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00008C50 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00008C56 00                         		even
00008C56 00                         		even
00008C56                            
00008C56                            ; ===========================================================================
00008C56                            ; ---------------------------------------------------------------------------
00008C56                            ; Object 19 - blank
00008C56                            ; ---------------------------------------------------------------------------
00008C56                            
00008C56                            Obj19:					; XREF: Obj_Index
00008C56 4E75                       		rts	
00008C58                            ; ===========================================================================
00008C58                            ; ---------------------------------------------------------------------------
00008C58                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008C58                            ; ---------------------------------------------------------------------------
00008C58                            Map_obj48:
00008C58                            	include "_maps\obj48.asm"
00008C58                            ; ---------------------------------------------------------------------------
00008C58                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008C58                            ; ---------------------------------------------------------------------------
00008C58 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
00008C5C 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
00008C60 06                         byte_81B2:	dc.b 6
00008C61 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00008C66 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00008C6B E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00008C70 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00008C75 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00008C7A 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00008C7F 04                         byte_81D1:	dc.b 4
00008C80 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00008C85 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00008C8A 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00008C8F 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00008C94 04                         byte_81E6:	dc.b 4
00008C95 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00008C9A E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00008C9F 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00008CA4 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00008CA9 04                         byte_81FB:	dc.b 4
00008CAA E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00008CAF E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00008CB4 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00008CB9 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00008CBE                            		even
00008CBE                            		even
00008CBE                            
00008CBE                            ; ===========================================================================
00008CBE                            ; ---------------------------------------------------------------------------
00008CBE                            ; Object 1A - GHZ collapsing ledge
00008CBE                            ; ---------------------------------------------------------------------------
00008CBE                            
00008CBE                            Obj1A:					; XREF: Obj_Index
00008CBE 7000                       		moveq	#0,d0
00008CC0 1028 0024                  		move.b	$24(a0),d0
00008CC4 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00008CC8 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00008CCC                            ; ===========================================================================
00008CCC 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
00008CD0 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00008CD4 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00008CD8                            ; ===========================================================================
00008CD8                            
00008CD8                            Obj1A_Main:				; XREF: Obj1A_Index
00008CD8 5428 0024                  		addq.b	#2,$24(a0)
00008CDC 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008CE4 317C 4000 0002             		move.w	#$4000,2(a0)
00008CEA 0028 0004 0001             		ori.b	#4,1(a0)
00008CF0 117C 0004 0018             		move.b	#4,$18(a0)
00008CF6 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00008CFC 117C 0064 0019             		move.b	#$64,$19(a0)
00008D02 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00008D08 117C 0038 0016             		move.b	#$38,$16(a0)
00008D0E 08E8 0004 0001             		bset	#4,1(a0)
00008D14                            
00008D14                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00008D14 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00008D18 6700                       		beq.s	Obj1A_Slope	; if not, branch
00008D1A 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00008D1E 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00008D22 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008D26                            
00008D26                            Obj1A_Slope:
00008D26 323C 0030                  		move.w	#$30,d1
00008D2A 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008D30 6100 F2A4                  		bsr.w	SlopeObject
00008D34 6000 0000                  		bra.w	MarkObjGone
00008D38                            ; ===========================================================================
00008D38                            
00008D38                            Obj1A_Touch:				; XREF: Obj1A_Index
00008D38 4A28 0038                  		tst.b	$38(a0)
00008D3C 6700 0000                  		beq.w	loc_847A
00008D40 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008D46 5328 0038                  		subq.b	#1,$38(a0)
00008D4A                            
00008D4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D4A                            
00008D4A                            
00008D4A                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00008D4A 323C 0030                  		move.w	#$30,d1
00008D4E 6100 F326                  		bsr.w	ExitPlatform
00008D52 323C 0030                  		move.w	#$30,d1
00008D56 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008D5C 3428 0008                  		move.w	8(a0),d2
00008D60 6100 0000                  		bsr.w	SlopeObject2
00008D64 6000 0000                  		bra.w	MarkObjGone
00008D68                            ; End of function Obj1A_WalkOff
00008D68                            
00008D68                            ; ===========================================================================
00008D68                            
00008D68                            Obj1A_Display:				; XREF: Obj1A_Index
00008D68 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008D6C 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00008D6E 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008D72 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00008D76 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008D7A 6000 0000                  		bra.w	DisplaySprite
00008D7E                            ; ===========================================================================
00008D7E                            
00008D7E                            loc_82D0:				; XREF: Obj1A_Display
00008D7E 5328 0038                  		subq.b	#1,$38(a0)
00008D82 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00008D86 43F8 D000                  		lea	($FFFFD000).w,a1
00008D8A 0829 0003 0022             		btst	#3,$22(a1)
00008D90 6700                       		beq.s	loc_82FC
00008D92 4A28 0038                  		tst.b	$38(a0)
00008D96 6600                       		bne.s	locret_8308
00008D98 08A9 0003 0022             		bclr	#3,$22(a1)
00008D9E 08A9 0005 0022             		bclr	#5,$22(a1)
00008DA4 137C 0001 001D             		move.b	#1,$1D(a1)
00008DAA                            
00008DAA                            loc_82FC:
00008DAA 117C 0000 003A             		move.b	#0,$3A(a0)
00008DB0 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00008DB6                            
00008DB6                            locret_8308:
00008DB6 4E75                       		rts	
00008DB8                            ; ===========================================================================
00008DB8                            
00008DB8                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00008DB8 6100 0000                  		bsr.w	ObjectFall
00008DBC 6100 0000                  		bsr.w	DisplaySprite
00008DC0 4A28 0001                  		tst.b	1(a0)
00008DC4 6A00                       		bpl.s	Obj1A_Delete
00008DC6 4E75                       		rts	
00008DC8                            ; ===========================================================================
00008DC8                            
00008DC8                            Obj1A_Delete:				; XREF: Obj1A_Index
00008DC8 6100 0000                  		bsr.w	DeleteObject
00008DCC 4E75                       		rts	
00008DCE                            ; ===========================================================================
00008DCE                            ; ---------------------------------------------------------------------------
00008DCE                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00008DCE                            ; ---------------------------------------------------------------------------
00008DCE                            
00008DCE                            Obj53:					; XREF: Obj_Index
00008DCE 7000                       		moveq	#0,d0
00008DD0 1028 0024                  		move.b	$24(a0),d0
00008DD4 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008DD8 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00008DDC                            ; ===========================================================================
00008DDC 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00008DE0 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008DE4 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008DE8                            ; ===========================================================================
00008DE8                            
00008DE8                            Obj53_Main:				; XREF: Obj53_Index
00008DE8 5428 0024                  		addq.b	#2,$24(a0)
00008DEC 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008DF4 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008DFA 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008E00 6600                       		bne.s	Obj53_NotSLZ
00008E02 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008E08 5428 001A                  		addq.b	#2,$1A(a0)
00008E0C                            
00008E0C                            Obj53_NotSLZ:
00008E0C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008E12 6600                       		bne.s	Obj53_NotSBZ
00008E14 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00008E1A                            
00008E1A                            Obj53_NotSBZ:
00008E1A 0028 0004 0001             		ori.b	#4,1(a0)
00008E20 117C 0004 0018             		move.b	#4,$18(a0)
00008E26 117C 0007 0038             		move.b	#7,$38(a0)
00008E2C 117C 0044 0019             		move.b	#$44,$19(a0)
00008E32                            
00008E32                            Obj53_ChkTouch:				; XREF: Obj53_Index
00008E32 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008E36 6700                       		beq.s	Obj53_Solid	; if not, branch
00008E38 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008E3C 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00008E40 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008E44                            
00008E44                            Obj53_Solid:
00008E44 323C 0020                  		move.w	#$20,d1
00008E48 6100 F0B8                  		bsr.w	PlatformObject
00008E4C 4A28 0028                  		tst.b	$28(a0)
00008E50 6A00                       		bpl.s	Obj53_MarkAsGone
00008E52 0829 0003 0022             		btst	#3,$22(a1)
00008E58 6700                       		beq.s	Obj53_MarkAsGone
00008E5A 08A8 0000 0001             		bclr	#0,1(a0)
00008E60 3029 0008                  		move.w	8(a1),d0
00008E64 9068 0008                  		sub.w	8(a0),d0
00008E68 6400                       		bcc.s	Obj53_MarkAsGone
00008E6A 08E8 0000 0001             		bset	#0,1(a0)
00008E70                            
00008E70                            Obj53_MarkAsGone:
00008E70 6000 0000                  		bra.w	MarkObjGone
00008E74                            ; ===========================================================================
00008E74                            
00008E74                            Obj53_Touch:				; XREF: Obj53_Index
00008E74 4A28 0038                  		tst.b	$38(a0)
00008E78 6700 0000                  		beq.w	loc_8458
00008E7C 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008E82 5328 0038                  		subq.b	#1,$38(a0)
00008E86                            
00008E86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008E86                            
00008E86                            
00008E86                            Obj53_WalkOff:				; XREF: Obj53_Index
00008E86 323C 0020                  		move.w	#$20,d1
00008E8A 6100 F1EA                  		bsr.w	ExitPlatform
00008E8E 3428 0008                  		move.w	8(a0),d2
00008E92 6100 F74C                  		bsr.w	MvSonicOnPtfm2
00008E96 6000 0000                  		bra.w	MarkObjGone
00008E9A                            ; End of function Obj53_WalkOff
00008E9A                            
00008E9A                            ; ===========================================================================
00008E9A                            
00008E9A                            Obj53_Display:				; XREF: Obj53_Index
00008E9A 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008E9E 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00008EA0 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008EA4 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008EA8 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008EAC 6000 0000                  		bra.w	DisplaySprite
00008EB0                            ; ===========================================================================
00008EB0                            
00008EB0                            loc_8402:
00008EB0 5328 0038                  		subq.b	#1,$38(a0)
00008EB4 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008EB8 43F8 D000                  		lea	($FFFFD000).w,a1
00008EBC 0829 0003 0022             		btst	#3,$22(a1)
00008EC2 6700                       		beq.s	loc_842E
00008EC4 4A28 0038                  		tst.b	$38(a0)
00008EC8 6600                       		bne.s	locret_843A
00008ECA 08A9 0003 0022             		bclr	#3,$22(a1)
00008ED0 08A9 0005 0022             		bclr	#5,$22(a1)
00008ED6 137C 0001 001D             		move.b	#1,$1D(a1)
00008EDC                            
00008EDC                            loc_842E:
00008EDC 117C 0000 003A             		move.b	#0,$3A(a0)
00008EE2 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008EE8                            
00008EE8                            locret_843A:
00008EE8 4E75                       		rts	
00008EEA                            ; ===========================================================================
00008EEA                            
00008EEA                            Obj53_TimeZero:				; XREF: Obj53_Display
00008EEA 6100 0000                  		bsr.w	ObjectFall
00008EEE 6100 0000                  		bsr.w	DisplaySprite
00008EF2 4A28 0001                  		tst.b	1(a0)
00008EF6 6A00                       		bpl.s	Obj53_Delete
00008EF8 4E75                       		rts	
00008EFA                            ; ===========================================================================
00008EFA                            
00008EFA                            Obj53_Delete:				; XREF: Obj53_Index
00008EFA 6100 0000                  		bsr.w	DeleteObject
00008EFE 4E75                       		rts	
00008F00                            ; ===========================================================================
00008F00                            
00008F00                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008F00 117C 0000 003A             		move.b	#0,$3A(a0)
00008F06                            
00008F06                            loc_8458:				; XREF: Obj53_Touch
00008F06 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00008F0C 0828 0000 0028             		btst	#0,$28(a0)
00008F12 6700                       		beq.s	loc_846C
00008F14 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008F1A                            
00008F1A                            loc_846C:
00008F1A 7207                       		moveq	#7,d1
00008F1C 5228 001A                  		addq.b	#1,$1A(a0)
00008F20 6000                       		bra.s	loc_8486
00008F22                            ; ===========================================================================
00008F22                            
00008F22                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008F22 117C 0000 003A             		move.b	#0,$3A(a0)
00008F28                            
00008F28                            loc_847A:				; XREF: Obj1A_Touch
00008F28 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00008F2E 7218                       		moveq	#$18,d1
00008F30 5428 001A                  		addq.b	#2,$1A(a0)
00008F34                            
00008F34                            loc_8486:				; XREF: Obj53_Collapse
00008F34 7000                       		moveq	#0,d0
00008F36 1028 001A                  		move.b	$1A(a0),d0
00008F3A D040                       		add.w	d0,d0
00008F3C 2668 0004                  		movea.l	4(a0),a3
00008F40 D6F3 0000                  		adda.w	(a3,d0.w),a3
00008F44 524B                       		addq.w	#1,a3
00008F46 08E8 0005 0001             		bset	#5,1(a0)
00008F4C 1810                       		move.b	0(a0),d4
00008F4E 1A28 0001                  		move.b	1(a0),d5
00008F52 2248                       		movea.l	a0,a1
00008F54 6000                       		bra.s	loc_84B2
00008F56                            ; ===========================================================================
00008F56                            
00008F56                            loc_84AA:
00008F56 6100 0000                  		bsr.w	SingleObjLoad
00008F5A 6600                       		bne.s	loc_84F2
00008F5C 5A4B                       		addq.w	#5,a3
00008F5E                            
00008F5E                            loc_84B2:
00008F5E 137C 0006 0024             		move.b	#6,$24(a1)
00008F64 1284                       		move.b	d4,0(a1)
00008F66 234B 0004                  		move.l	a3,4(a1)
00008F6A 1345 0001                  		move.b	d5,1(a1)
00008F6E 3368 0008 0008             		move.w	8(a0),8(a1)
00008F74 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008F7A 3368 0002 0002             		move.w	2(a0),2(a1)
00008F80 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008F86 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008F8C 135C 0038                  		move.b	(a4)+,$38(a1)
00008F90 B3C8                       		cmpa.l	a0,a1
00008F92 6400                       		bcc.s	loc_84EE
00008F94 6100 0000                  		bsr.w	DisplaySprite2
00008F98                            
00008F98                            loc_84EE:
00008F98 51C9 FFBC                  		dbf	d1,loc_84AA
00008F9C                            
00008F9C                            loc_84F2:
00008F9C 6100 0000                  		bsr.w	DisplaySprite
00008FA0 303C 00B9                  		move.w	#$B9,d0
00008FA4 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008FAA                            ; ===========================================================================
00008FAA                            ; ---------------------------------------------------------------------------
00008FAA                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008FAA                            ; ---------------------------------------------------------------------------
00008FAA 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008FBA 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008FC4 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008FCC 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008FD4                            
00008FD4                            ; ---------------------------------------------------------------------------
00008FD4                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008FD4                            ; ---------------------------------------------------------------------------
00008FD4                            
00008FD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008FD4                            
00008FD4                            
00008FD4                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008FD4 43F8 D000                  		lea	($FFFFD000).w,a1
00008FD8 0829 0003 0022             		btst	#3,$22(a1)
00008FDE 6700                       		beq.s	locret_856E
00008FE0 3029 0008                  		move.w	8(a1),d0
00008FE4 9068 0008                  		sub.w	8(a0),d0
00008FE8 D041                       		add.w	d1,d0
00008FEA E248                       		lsr.w	#1,d0
00008FEC 0828 0000 0001             		btst	#0,1(a0)
00008FF2 6700                       		beq.s	loc_854E
00008FF4 4640                       		not.w	d0
00008FF6 D041                       		add.w	d1,d0
00008FF8                            
00008FF8                            loc_854E:
00008FF8 7200                       		moveq	#0,d1
00008FFA 1232 0000                  		move.b	(a2,d0.w),d1
00008FFE 3028 000C                  		move.w	$C(a0),d0
00009002 9041                       		sub.w	d1,d0
00009004 7200                       		moveq	#0,d1
00009006 1229 0016                  		move.b	$16(a1),d1
0000900A 9041                       		sub.w	d1,d0
0000900C 3340 000C                  		move.w	d0,$C(a1)
00009010 9468 0008                  		sub.w	8(a0),d2
00009014 9569 0008                  		sub.w	d2,8(a1)
00009018                            
00009018                            locret_856E:
00009018 4E75                       		rts	
0000901A                            ; End of function SlopeObject2
0000901A                            
0000901A                            ; ===========================================================================
0000901A                            ; ---------------------------------------------------------------------------
0000901A                            ; Collision data for GHZ collapsing ledge
0000901A                            ; ---------------------------------------------------------------------------
0000901A                            Obj1A_SlopeData:
0000901A                            		incbin	misc\ghzledge.bin
0000904A                            		even
0000904A                            
0000904A                            ; ---------------------------------------------------------------------------
0000904A                            ; Sprite mappings - GHZ	collapsing ledge
0000904A                            ; ---------------------------------------------------------------------------
0000904A                            Map_obj1A:
0000904A                            	include "_maps\obj1A.asm"
0000904A                            ; ---------------------------------------------------------------------------
0000904A                            ; Sprite mappings - GHZ	collapsing ledge
0000904A                            ; ---------------------------------------------------------------------------
0000904A 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
0000904E 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00009052 10                         byte_85A8:	dc.b $10
00009053 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00009058 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000905D E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009062 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009067 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000906C D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009071 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009076 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000907B F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009080 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009085 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000908A 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000908F 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009094 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009099 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000909E 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000090A3 10                         byte_85F9:	dc.b $10
000090A4 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
000090A9 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
000090AE E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
000090B3 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
000090B8 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000090BD D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
000090C2 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
000090C7 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
000090CC F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000090D1 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
000090D6 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
000090DB 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000090E0 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
000090E5 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
000090EA 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
000090EF 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000090F4 19                         byte_864A:	dc.b $19
000090F5 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
000090FA C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
000090FF D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009104 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009109 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000910E E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009113 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009118 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000911D D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009122 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009127 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000912C F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00009131 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009136 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000913B F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009140 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009145 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000914A 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000914F 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009154 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00009159 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000915E 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009163 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00009168 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000916D 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009172 19                         byte_86C8:	dc.b $19
00009173 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00009178 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000917D D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009182 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009187 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000918C E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009191 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009196 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000919B D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000091A0 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
000091A5 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
000091AA F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
000091AF F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
000091B4 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
000091B9 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000091BE F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
000091C3 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
000091C8 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
000091CD 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000091D2 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
000091D7 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
000091DC 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
000091E1 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
000091E6 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
000091EB 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000091F0                            		even
000091F0                            		even
000091F0                            
000091F0                            ; ---------------------------------------------------------------------------
000091F0                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
000091F0                            ; ---------------------------------------------------------------------------
000091F0                            Map_obj53:
000091F0                            	include "_maps\obj53.asm"
000091F0                            ; ---------------------------------------------------------------------------
000091F0                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
000091F0                            ; ---------------------------------------------------------------------------
000091F0 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
000091F4 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
000091F8 04                         byte_874E:	dc.b 4
000091F9 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
000091FE 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00009203 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00009208 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
0000920D 08                         byte_8763:	dc.b 8
0000920E F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00009213 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00009218 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000921D F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00009222 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00009227 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
0000922C 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00009231 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00009236 04                         byte_878C:	dc.b 4
00009237 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
0000923C 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00009241 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00009246 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
0000924B 08                         byte_87A1:	dc.b 8
0000924C F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00009251 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00009256 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000925B F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00009260 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00009265 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
0000926A 0805 0008 00               		dc.b 8,	5, 0, 8, 0
0000926F 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00009274                            		even
00009274                            		even
00009274                            
00009274                            ; ===========================================================================
00009274                            ; ---------------------------------------------------------------------------
00009274                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00009274                            ; ---------------------------------------------------------------------------
00009274                            
00009274                            Obj1C:					; XREF: Obj_Index
00009274 7000                       		moveq	#0,d0
00009276 1028 0024                  		move.b	$24(a0),d0
0000927A 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
0000927E 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00009282                            ; ===========================================================================
00009282 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00009284 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00009286                            ; ===========================================================================
00009286                            
00009286                            Obj1C_Main:				; XREF: Obj1C_Index
00009286 5428 0024                  		addq.b	#2,$24(a0)
0000928A 7000                       		moveq	#0,d0
0000928C 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00009290 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00009294 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00009298 2159 0004                  		move.l	(a1)+,4(a0)
0000929C 3159 0002                  		move.w	(a1)+,2(a0)
000092A0 0028 0004 0001             		ori.b	#4,1(a0)
000092A6 1159 001A                  		move.b	(a1)+,$1A(a0)
000092AA 1159 0019                  		move.b	(a1)+,$19(a0)
000092AE 1159 0018                  		move.b	(a1)+,$18(a0)
000092B2 1159 0020                  		move.b	(a1)+,$20(a0)
000092B6                            
000092B6                            Obj1C_ChkDel:				; XREF: Obj1C_Index
000092B6 3028 0008                  		move.w	8(a0),d0
000092BA 0240 FF80                  		andi.w	#$FF80,d0
000092BE 3238 F700                  		move.w	($FFFFF700).w,d1
000092C2 0441 0080                  		subi.w	#$80,d1
000092C6 0241 FF80                  		andi.w	#$FF80,d1
000092CA 9041                       		sub.w	d1,d0
000092CC 0C40 0280                  		cmpi.w	#$280,d0
000092D0 6200 0000                  		bhi.w	DeleteObject
000092D4 6000 0000                  		bra.w	DisplaySprite
000092D8                            ; ===========================================================================
000092D8                            ; ---------------------------------------------------------------------------
000092D8                            ; Variables for	object $1C are stored in an array
000092D8                            ; ---------------------------------------------------------------------------
000092D8 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
000092DC 44D8                       		dc.w $44D8		; VRAM setting
000092DE 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
000092E2 0000 0000                  		dc.l Map_obj1C
000092E6 44D8                       		dc.w $44D8
000092E8 0008 0200                  		dc.b 0,	8, 2, 0
000092EC 0000 0000                  		dc.l Map_obj1C
000092F0 44D8                       		dc.w $44D8
000092F2 0008 0200                  		dc.b 0,	8, 2, 0
000092F6 0000 83EA                  		dc.l Map_obj11
000092FA 438E                       		dc.w $438E
000092FC 0110 0100                  		dc.b 1,	$10, 1,	0
00009300                            ; ---------------------------------------------------------------------------
00009300                            ; Sprite mappings - SLZ	lava thrower
00009300                            ; ---------------------------------------------------------------------------
00009300                            Map_obj1C:
00009300                            	include "_maps\obj1C.asm"
00009300                            ; ---------------------------------------------------------------------------
00009300                            ; Sprite mappings - SLZ	lava thrower
00009300                            ; ---------------------------------------------------------------------------
00009300 0000                       		dc.w byte_8858-Map_obj1C
00009302 01                         byte_8858:	dc.b 1
00009303 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00009308                            		even
00009308                            		even
00009308                            
00009308                            ; ===========================================================================
00009308                            ; ---------------------------------------------------------------------------
00009308                            ; Object 1D - switch that activates when Sonic touches it
00009308                            ; (this	is not used anywhere in	the game)
00009308                            ; ---------------------------------------------------------------------------
00009308                            
00009308                            Obj1D:					; XREF: Obj_Index
00009308 7000                       		moveq	#0,d0
0000930A 1028 0024                  		move.b	$24(a0),d0
0000930E 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00009312 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00009316                            ; ===========================================================================
00009316 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00009318 0000                       		dc.w Obj1D_Action-Obj1D_Index
0000931A 0000                       		dc.w Obj1D_Delete-Obj1D_Index
0000931C                            ; ===========================================================================
0000931C                            
0000931C                            Obj1D_Main:				; XREF: Obj1D_Index
0000931C 5428 0024                  		addq.b	#2,$24(a0)
00009320 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00009328 317C 4000 0002             		move.w	#$4000,2(a0)
0000932E 117C 0004 0001             		move.b	#4,1(a0)
00009334 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
0000933A 117C 0010 0019             		move.b	#$10,$19(a0)
00009340 117C 0005 0018             		move.b	#5,$18(a0)
00009346                            
00009346                            Obj1D_Action:				; XREF: Obj1D_Index
00009346 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
0000934C 323C 0010                  		move.w	#$10,d1
00009350 6100 0000                  		bsr.w	Obj1D_ChkTouch
00009354 6700                       		beq.s	Obj1D_ChkDel
00009356 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
0000935A 7001                       		moveq	#1,d0
0000935C 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00009360                            
00009360                            Obj1D_ChkDel:
00009360 6100 0000                  		bsr.w	DisplaySprite
00009364 3028 0008                  		move.w	8(a0),d0
00009368 0240 FF80                  		andi.w	#$FF80,d0
0000936C 3238 F700                  		move.w	($FFFFF700).w,d1
00009370 0441 0080                  		subi.w	#$80,d1
00009374 0241 FF80                  		andi.w	#$FF80,d1
00009378 9041                       		sub.w	d1,d0
0000937A 0C40 0280                  		cmpi.w	#$280,d0
0000937E 6200 0000                  		bhi.w	Obj1D_Delete
00009382 4E75                       		rts	
00009384                            ; ===========================================================================
00009384                            
00009384                            Obj1D_Delete:				; XREF: Obj1D_Index
00009384 6100 0000                  		bsr.w	DeleteObject
00009388 4E75                       		rts	
0000938A                            ; ---------------------------------------------------------------------------
0000938A                            ; Subroutine to	check if Sonic touches the object
0000938A                            ; ---------------------------------------------------------------------------
0000938A                            
0000938A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000938A                            
0000938A                            
0000938A                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
0000938A 43F8 D000                  		lea	($FFFFD000).w,a1
0000938E 3029 0008                  		move.w	8(a1),d0
00009392 9068 0008                  		sub.w	8(a0),d0
00009396 D041                       		add.w	d1,d0
00009398 6B00                       		bmi.s	loc_8918
0000939A D241                       		add.w	d1,d1
0000939C B041                       		cmp.w	d1,d0
0000939E 6400                       		bcc.s	loc_8918
000093A0 3429 000C                  		move.w	$C(a1),d2
000093A4 1229 0016                  		move.b	$16(a1),d1
000093A8 4881                       		ext.w	d1
000093AA D242                       		add.w	d2,d1
000093AC 3028 000C                  		move.w	$C(a0),d0
000093B0 0440 0010                  		subi.w	#$10,d0
000093B4 9041                       		sub.w	d1,d0
000093B6 6200                       		bhi.s	loc_8918
000093B8 0C40 FFF0                  		cmpi.w	#-$10,d0
000093BC 6500                       		bcs.s	loc_8918
000093BE 70FF                       		moveq	#-1,d0
000093C0 4E75                       		rts	
000093C2                            ; ===========================================================================
000093C2                            
000093C2                            loc_8918:
000093C2 7000                       		moveq	#0,d0
000093C4 4E75                       		rts	
000093C6                            ; End of function Obj1D_ChkTouch
000093C6                            
000093C6                            ; ===========================================================================
000093C6                            ; ---------------------------------------------------------------------------
000093C6                            ; Sprite mappings - object 1D
000093C6                            ; ---------------------------------------------------------------------------
000093C6                            Map_obj1D:
000093C6                            	include "_maps\obj1D.asm"
000093C6                            ; ---------------------------------------------------------------------------
000093C6                            ; Sprite mappings - object 1D
000093C6                            ; ---------------------------------------------------------------------------
000093C6 0000                       		dc.w byte_891E-Map_obj1D
000093C8 04                         byte_891E:	dc.b 4
000093C9 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
000093CE 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
000093D3 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
000093D8 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
000093DE 00                         		even
000093DE 00                         		even
000093DE                            
000093DE                            ; ===========================================================================
000093DE                            ; ---------------------------------------------------------------------------
000093DE                            ; Object 2A - doors (SBZ)
000093DE                            ; ---------------------------------------------------------------------------
000093DE                            
000093DE                            Obj2A:					; XREF: Obj_Index
000093DE 7000                       		moveq	#0,d0
000093E0 1028 0024                  		move.b	$24(a0),d0
000093E4 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
000093E8 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
000093EC                            ; ===========================================================================
000093EC 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
000093EE 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
000093F0                            ; ===========================================================================
000093F0                            
000093F0                            Obj2A_Main:				; XREF: Obj2A_Index
000093F0 5428 0024                  		addq.b	#2,$24(a0)
000093F4 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
000093FC 317C 42E8 0002             		move.w	#$42E8,2(a0)
00009402 0028 0004 0001             		ori.b	#4,1(a0)
00009408 117C 0008 0019             		move.b	#8,$19(a0)
0000940E 117C 0004 0018             		move.b	#4,$18(a0)
00009414                            
00009414                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00009414 323C 0040                  		move.w	#$40,d1
00009418 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
0000941C 3038 D008                  		move.w	($FFFFD008).w,d0
00009420 D041                       		add.w	d1,d0
00009422 B068 0008                  		cmp.w	8(a0),d0
00009426 6500                       		bcs.s	Obj2A_Animate
00009428 9041                       		sub.w	d1,d0
0000942A 9041                       		sub.w	d1,d0
0000942C B068 0008                  		cmp.w	8(a0),d0
00009430 6400                       		bcc.s	Obj2A_Animate
00009432 D041                       		add.w	d1,d0
00009434 B068 0008                  		cmp.w	8(a0),d0
00009438 6400                       		bcc.s	loc_899A
0000943A 0828 0000 0022             		btst	#0,$22(a0)
00009440 6600                       		bne.s	Obj2A_Animate
00009442 6000                       		bra.s	Obj2A_Open
00009444                            ; ===========================================================================
00009444                            
00009444                            loc_899A:				; XREF: Obj2A_OpenShut
00009444 0828 0000 0022             		btst	#0,$22(a0)
0000944A 6700                       		beq.s	Obj2A_Animate
0000944C                            
0000944C                            Obj2A_Open:				; XREF: Obj2A_OpenShut
0000944C 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00009452                            
00009452                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00009452 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00009458 6100 0000                  		bsr.w	AnimateSprite
0000945C 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00009460 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00009462 323C 0011                  		move.w	#$11,d1
00009466 343C 0020                  		move.w	#$20,d2
0000946A 3602                       		move.w	d2,d3
0000946C 5243                       		addq.w	#1,d3
0000946E 3828 0008                  		move.w	8(a0),d4
00009472 6100 0000                  		bsr.w	SolidObject
00009476                            
00009476                            Obj2A_MarkAsUsed:
00009476 6000 0000                  		bra.w	MarkObjGone
0000947A                            ; ===========================================================================
0000947A                            Ani_obj2A:
0000947A                            	include "_anim\obj2A.asm"
0000947A                            ; ---------------------------------------------------------------------------
0000947A                            ; Animation script - doors (SBZ)
0000947A                            ; ---------------------------------------------------------------------------
0000947A 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
0000947C 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
0000947E 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
0000948A 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00009496                            		even
00009496                            		even
00009496                            
00009496                            ; ---------------------------------------------------------------------------
00009496                            ; Sprite mappings - doors (SBZ)
00009496                            ; ---------------------------------------------------------------------------
00009496                            Map_obj2A:
00009496                            	include "_maps\obj2A.asm"
00009496                            ; ---------------------------------------------------------------------------
00009496                            ; Sprite mappings - doors (SBZ)
00009496                            ; ---------------------------------------------------------------------------
00009496 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
0000949A 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
0000949E 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
000094A2 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
000094A6 0000                       		dc.w byte_8A56-Map_obj2A
000094A8 02                         byte_89FE:	dc.b 2
000094A9 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
000094AE 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
000094B3 02                         byte_8A09:	dc.b 2
000094B4 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
000094B9 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
000094BE 02                         byte_8A14:	dc.b 2
000094BF D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
000094C4 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
000094C9 02                         byte_8A1F:	dc.b 2
000094CA D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
000094CF 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
000094D4 02                         byte_8A2A:	dc.b 2
000094D5 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
000094DA 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
000094DF 02                         byte_8A35:	dc.b 2
000094E0 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
000094E5 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
000094EA 02                         byte_8A40:	dc.b 2
000094EB C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
000094F0 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
000094F5 02                         byte_8A4B:	dc.b 2
000094F6 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
000094FB 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00009500 02                         byte_8A56:	dc.b 2
00009501 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00009506 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
0000950C 00                         		even
0000950C 00                         		even
0000950C                            
0000950C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000950C                            
0000950C                            
0000950C                            Obj44_SolidWall:			; XREF: Obj44_Solid
0000950C 6100 0000                  		bsr.w	Obj44_SolidWall2
00009510 6700                       		beq.s	loc_8AA8
00009512 6B00 0000                  		bmi.w	loc_8AC4
00009516 4A40                       		tst.w	d0
00009518 6700 0000                  		beq.w	loc_8A92
0000951C 6B00                       		bmi.s	loc_8A7C
0000951E 4A69 0010                  		tst.w	$10(a1)
00009522 6B00                       		bmi.s	loc_8A92
00009524 6000                       		bra.s	loc_8A82
00009526                            ; ===========================================================================
00009526                            
00009526                            loc_8A7C:
00009526 4A69 0010                  		tst.w	$10(a1)
0000952A 6A00                       		bpl.s	loc_8A92
0000952C                            
0000952C                            loc_8A82:
0000952C 9169 0008                  		sub.w	d0,8(a1)
00009530 337C 0000 0014             		move.w	#0,$14(a1)
00009536 337C 0000 0010             		move.w	#0,$10(a1)
0000953C                            
0000953C                            loc_8A92:
0000953C 0829 0001 0022             		btst	#1,$22(a1)
00009542 6600                       		bne.s	loc_8AB6
00009544 08E9 0005 0022             		bset	#5,$22(a1)
0000954A 08E8 0005 0022             		bset	#5,$22(a0)
00009550 4E75                       		rts	
00009552                            ; ===========================================================================
00009552                            
00009552                            loc_8AA8:
00009552 0828 0005 0022             		btst	#5,$22(a0)
00009558 6700                       		beq.s	locret_8AC2
0000955A 337C 0001 001C             		move.w	#1,$1C(a1)
00009560                            
00009560                            loc_8AB6:
00009560 08A8 0005 0022             		bclr	#5,$22(a0)
00009566 08A9 0005 0022             		bclr	#5,$22(a1)
0000956C                            
0000956C                            locret_8AC2:
0000956C 4E75                       		rts	
0000956E                            ; ===========================================================================
0000956E                            
0000956E                            loc_8AC4:
0000956E 4A69 0012                  		tst.w	$12(a1)
00009572 6A00                       		bpl.s	locret_8AD8
00009574 4A43                       		tst.w	d3
00009576 6A00                       		bpl.s	locret_8AD8
00009578 9769 000C                  		sub.w	d3,$C(a1)
0000957C 337C 0000 0012             		move.w	#0,$12(a1)
00009582                            
00009582                            locret_8AD8:
00009582 4E75                       		rts	
00009584                            ; End of function Obj44_SolidWall
00009584                            
00009584                            
00009584                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009584                            
00009584                            
00009584                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00009584 43F8 D000                  		lea	($FFFFD000).w,a1
00009588 3029 0008                  		move.w	8(a1),d0
0000958C 9068 0008                  		sub.w	8(a0),d0
00009590 D041                       		add.w	d1,d0
00009592 6B00                       		bmi.s	loc_8B48
00009594 3601                       		move.w	d1,d3
00009596 D643                       		add.w	d3,d3
00009598 B043                       		cmp.w	d3,d0
0000959A 6200                       		bhi.s	loc_8B48
0000959C 1629 0016                  		move.b	$16(a1),d3
000095A0 4883                       		ext.w	d3
000095A2 D443                       		add.w	d3,d2
000095A4 3629 000C                  		move.w	$C(a1),d3
000095A8 9668 000C                  		sub.w	$C(a0),d3
000095AC D642                       		add.w	d2,d3
000095AE 6B00                       		bmi.s	loc_8B48
000095B0 3802                       		move.w	d2,d4
000095B2 D844                       		add.w	d4,d4
000095B4 B644                       		cmp.w	d4,d3
000095B6 6400                       		bcc.s	loc_8B48
000095B8 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000095BC 6B00                       		bmi.s	loc_8B48
000095BE 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000095C4 6400                       		bcc.s	loc_8B48
000095C6 4A78 FE08                  		tst.w	($FFFFFE08).w
000095CA 6600                       		bne.s	loc_8B48
000095CC 3A00                       		move.w	d0,d5
000095CE B240                       		cmp.w	d0,d1
000095D0 6400                       		bcc.s	loc_8B30
000095D2 D241                       		add.w	d1,d1
000095D4 9041                       		sub.w	d1,d0
000095D6 3A00                       		move.w	d0,d5
000095D8 4445                       		neg.w	d5
000095DA                            
000095DA                            loc_8B30:
000095DA 3203                       		move.w	d3,d1
000095DC B443                       		cmp.w	d3,d2
000095DE 6400                       		bcc.s	loc_8B3C
000095E0 9644                       		sub.w	d4,d3
000095E2 3203                       		move.w	d3,d1
000095E4 4441                       		neg.w	d1
000095E6                            
000095E6                            loc_8B3C:
000095E6 BA41                       		cmp.w	d1,d5
000095E8 6200                       		bhi.s	loc_8B44
000095EA 7801                       		moveq	#1,d4
000095EC 4E75                       		rts	
000095EE                            ; ===========================================================================
000095EE                            
000095EE                            loc_8B44:
000095EE 78FF                       		moveq	#-1,d4
000095F0 4E75                       		rts	
000095F2                            ; ===========================================================================
000095F2                            
000095F2                            loc_8B48:
000095F2 7800                       		moveq	#0,d4
000095F4 4E75                       		rts	
000095F6                            ; End of function Obj44_SolidWall2
000095F6                            
000095F6                            ; ===========================================================================
000095F6                            ; ---------------------------------------------------------------------------
000095F6                            ; Object 1E - Ball Hog enemy (SBZ)
000095F6                            ; ---------------------------------------------------------------------------
000095F6                            
000095F6                            Obj1E:					; XREF: Obj_Index
000095F6 7000                       		moveq	#0,d0
000095F8 1028 0024                  		move.b	$24(a0),d0
000095FC 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00009600 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00009604                            ; ===========================================================================
00009604 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00009606 0000                       		dc.w Obj1E_Action-Obj1E_Index
00009608                            ; ===========================================================================
00009608                            
00009608                            Obj1E_Main:				; XREF: Obj1E_Index
00009608 117C 0013 0016             		move.b	#$13,$16(a0)
0000960E 117C 0008 0017             		move.b	#8,$17(a0)
00009614 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
0000961C 317C 2302 0002             		move.w	#$2302,2(a0)
00009622 117C 0004 0001             		move.b	#4,1(a0)
00009628 117C 0004 0018             		move.b	#4,$18(a0)
0000962E 117C 0005 0020             		move.b	#5,$20(a0)
00009634 117C 000C 0019             		move.b	#$C,$19(a0)
0000963A 6100 0000                  		bsr.w	ObjectFall
0000963E 4EB9 0000 0000             		jsr	ObjHitFloor
00009644 4A41                       		tst.w	d1
00009646 6A00                       		bpl.s	locret_8BAC
00009648 D368 000C                  		add.w	d1,$C(a0)
0000964C 317C 0000 0012             		move.w	#0,$12(a0)
00009652 5428 0024                  		addq.b	#2,$24(a0)
00009656                            
00009656                            locret_8BAC:
00009656 4E75                       		rts	
00009658                            ; ===========================================================================
00009658                            
00009658                            Obj1E_Action:				; XREF: Obj1E_Index
00009658 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
0000965E 6100 0000                  		bsr.w	AnimateSprite
00009662 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00009668 6600                       		bne.s	Obj1E_SetBall	; if not, branch
0000966A 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
0000966E 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00009670 6000                       		bra.s	Obj1E_MarkAsGone
00009672                            ; ===========================================================================
00009672                            
00009672                            Obj1E_SetBall:				; XREF: Obj1E_Action
00009672 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00009676                            
00009676                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00009676 6000 0000                  		bra.w	MarkObjGone
0000967A                            ; ===========================================================================
0000967A                            
0000967A                            Obj1E_MakeBall:				; XREF: Obj1E_Action
0000967A 117C 0001 0032             		move.b	#1,$32(a0)
00009680 6100 0000                  		bsr.w	SingleObjLoad
00009684 6600                       		bne.s	loc_8C1A
00009686 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
0000968A 3368 0008 0008             		move.w	8(a0),8(a1)
00009690 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009696 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
0000969C 337C 0000 0012             		move.w	#0,$12(a1)
000096A2 70FC                       		moveq	#-4,d0
000096A4 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
000096AA 6700                       		beq.s	loc_8C0A	; if not, branch
000096AC 4440                       		neg.w	d0
000096AE 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
000096B2                            
000096B2                            loc_8C0A:
000096B2 D169 0008                  		add.w	d0,8(a1)
000096B6 0669 000C 000C             		addi.w	#$C,$C(a1)
000096BC 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
000096C2                            
000096C2                            loc_8C1A:
000096C2 60B2                       		bra.s	Obj1E_MarkAsGone
000096C4                            ; ===========================================================================
000096C4                            ; ---------------------------------------------------------------------------
000096C4                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
000096C4                            ; ---------------------------------------------------------------------------
000096C4                            
000096C4                            Obj20:					; XREF: Obj_Index
000096C4 7000                       		moveq	#0,d0
000096C6 1028 0024                  		move.b	$24(a0),d0
000096CA 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
000096CE 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
000096D2                            ; ===========================================================================
000096D2 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
000096D4 0000                       		dc.w Obj20_Bounce-Obj20_Index
000096D6                            ; ===========================================================================
000096D6                            
000096D6                            Obj20_Main:				; XREF: Obj20_Index
000096D6 5428 0024                  		addq.b	#2,$24(a0)
000096DA 117C 0007 0016             		move.b	#7,$16(a0)
000096E0 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
000096E8 317C 2302 0002             		move.w	#$2302,2(a0)
000096EE 117C 0004 0001             		move.b	#4,1(a0)
000096F4 117C 0003 0018             		move.b	#3,$18(a0)
000096FA 117C 0087 0020             		move.b	#$87,$20(a0)
00009700 117C 0008 0019             		move.b	#8,$19(a0)
00009706 7000                       		moveq	#0,d0
00009708 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000970C C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
00009710 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
00009714 117C 0004 001A             		move.b	#4,$1A(a0)
0000971A                            
0000971A                            Obj20_Bounce:				; XREF: Obj20_Index
0000971A 4EB9 0000 0000             		jsr	ObjectFall
00009720 4A68 0012                  		tst.w	$12(a0)
00009724 6B00                       		bmi.s	Obj20_ChkExplode
00009726 4EB9 0000 0000             		jsr	ObjHitFloor
0000972C 4A41                       		tst.w	d1
0000972E 6A00                       		bpl.s	Obj20_ChkExplode
00009730 D368 000C                  		add.w	d1,$C(a0)
00009734 317C FD00 0012             		move.w	#-$300,$12(a0)
0000973A 4A03                       		tst.b	d3
0000973C 6700                       		beq.s	Obj20_ChkExplode
0000973E 6B00                       		bmi.s	loc_8CA4
00009740 4A68 0010                  		tst.w	$10(a0)
00009744 6A00                       		bpl.s	Obj20_ChkExplode
00009746 4468 0010                  		neg.w	$10(a0)
0000974A 6000                       		bra.s	Obj20_ChkExplode
0000974C                            ; ===========================================================================
0000974C                            
0000974C                            loc_8CA4:				; XREF: Obj20_Bounce
0000974C 4A68 0010                  		tst.w	$10(a0)
00009750 6B00                       		bmi.s	Obj20_ChkExplode
00009752 4468 0010                  		neg.w	$10(a0)
00009756                            
00009756                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
00009756 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
0000975A 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
0000975C 10BC 0024                  		move.b	#$24,0(a0)
00009760 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00009764 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
0000976A 6000 0000                  		bra.w	Obj3F		; jump to explosion code
0000976E                            ; ===========================================================================
0000976E                            
0000976E                            Obj20_Animate:				; XREF: Obj20_ChkExplode
0000976E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009772 6A00                       		bpl.s	Obj20_Display
00009774 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
0000977A 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00009780                            
00009780                            Obj20_Display:
00009780 6100 0000                  		bsr.w	DisplaySprite
00009784 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009788 0640 00E0                  		addi.w	#$E0,d0
0000978C B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
00009790 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00009794 4E75                       		rts	
00009796                            ; ===========================================================================
00009796                            ; ---------------------------------------------------------------------------
00009796                            ; Object 24 - explosion	from a destroyed monitor
00009796                            ; ---------------------------------------------------------------------------
00009796                            
00009796                            Obj24:					; XREF: Obj_Index
00009796 7000                       		moveq	#0,d0
00009798 1028 0024                  		move.b	$24(a0),d0
0000979C 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
000097A0 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
000097A4                            ; ===========================================================================
000097A4 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
000097A6 0000                       		dc.w Obj24_Animate-Obj24_Index
000097A8                            ; ===========================================================================
000097A8                            
000097A8                            Obj24_Main:				; XREF: Obj24_Index
000097A8 5428 0024                  		addq.b	#2,$24(a0)
000097AC 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
000097B4 317C 041C 0002             		move.w	#$41C,2(a0)
000097BA 117C 0004 0001             		move.b	#4,1(a0)
000097C0 117C 0001 0018             		move.b	#1,$18(a0)
000097C6 117C 0000 0020             		move.b	#0,$20(a0)
000097CC 117C 000C 0019             		move.b	#$C,$19(a0)
000097D2 117C 0009 001E             		move.b	#9,$1E(a0)
000097D8 117C 0000 001A             		move.b	#0,$1A(a0)
000097DE 303C 00A5                  		move.w	#$A5,d0
000097E2 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play explosion sound
000097E8                            
000097E8                            Obj24_Animate:				; XREF: Obj24_Index
000097E8 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000097EC 6A00                       		bpl.s	Obj24_Display
000097EE 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
000097F4 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
000097F8 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
000097FE 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009802                            
00009802                            Obj24_Display:
00009802 6000 0000                  		bra.w	DisplaySprite
00009806                            ; ===========================================================================
00009806                            ; ---------------------------------------------------------------------------
00009806                            ; Object 27 - explosion	from a destroyed enemy
00009806                            ; ---------------------------------------------------------------------------
00009806                            
00009806                            Obj27:					; XREF: Obj_Index
00009806 7000                       		moveq	#0,d0
00009808 1028 0024                  		move.b	$24(a0),d0
0000980C 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
00009810 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
00009814                            ; ===========================================================================
00009814 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
00009816 0000                       		dc.w Obj27_Main-Obj27_Index
00009818 0000                       		dc.w Obj27_Animate-Obj27_Index
0000981A                            ; ===========================================================================
0000981A                            
0000981A                            Obj27_LoadAnimal:			; XREF: Obj27_Index
0000981A 5428 0024                  		addq.b	#2,$24(a0)
0000981E 6100 0000                  		bsr.w	SingleObjLoad
00009822 6600                       		bne.s	Obj27_Main
00009824 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00009828 3368 0008 0008             		move.w	8(a0),8(a1)
0000982E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009834 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000983A                            
0000983A                            Obj27_Main:				; XREF: Obj27_Index
0000983A 5428 0024                  		addq.b	#2,$24(a0)
0000983E 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
00009846 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000984C 117C 0004 0001             		move.b	#4,1(a0)
00009852 117C 0001 0018             		move.b	#1,$18(a0)
00009858 117C 0000 0020             		move.b	#0,$20(a0)
0000985E 117C 000C 0019             		move.b	#$C,$19(a0)
00009864 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000986A 117C 0000 001A             		move.b	#0,$1A(a0)
00009870 303C 00C1                  		move.w	#$C1,d0
00009874 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
0000987A                            
0000987A                            Obj27_Animate:				; XREF: Obj27_Index
0000987A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000987E 6A00                       		bpl.s	Obj27_Display
00009880 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009886 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000988A 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
00009890 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009894                            
00009894                            Obj27_Display:
00009894 6000 0000                  		bra.w	DisplaySprite
00009898                            ; ===========================================================================
00009898                            ; ---------------------------------------------------------------------------
00009898                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00009898                            ; ---------------------------------------------------------------------------
00009898                            
00009898                            Obj3F:					; XREF: Obj_Index
00009898 7000                       		moveq	#0,d0
0000989A 1028 0024                  		move.b	$24(a0),d0
0000989E 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
000098A2 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
000098A6                            ; ===========================================================================
000098A6 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
000098A8 FFD4                       		dc.w Obj27_Animate-Obj3F_Index
000098AA                            ; ===========================================================================
000098AA                            
000098AA                            Obj3F_Main:				; XREF: Obj3F_Index
000098AA 5428 0024                  		addq.b	#2,$24(a0)
000098AE 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
000098B6 317C 05A0 0002             		move.w	#$5A0,2(a0)
000098BC 117C 0004 0001             		move.b	#4,1(a0)
000098C2 117C 0001 0018             		move.b	#1,$18(a0)
000098C8 117C 0000 0020             		move.b	#0,$20(a0)
000098CE 117C 000C 0019             		move.b	#$C,$19(a0)
000098D4 117C 0007 001E             		move.b	#7,$1E(a0)
000098DA 117C 0000 001A             		move.b	#0,$1A(a0)
000098E0 303C 00C4                  		move.w	#$C4,d0
000098E4 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
000098EA                            ; ===========================================================================
000098EA                            Ani_obj1E:
000098EA                            	include "_anim\obj1E.asm"
000098EA                            ; ---------------------------------------------------------------------------
000098EA                            ; Animation script - doors (SBZ)
000098EA                            ; ---------------------------------------------------------------------------
000098EA 0000                       		dc.w byte_8E4A-Ani_obj1E
000098EC 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
00009904 00                         		even
00009904 00                         		even
00009904                            
00009904                            ; ---------------------------------------------------------------------------
00009904                            ; Sprite mappings - Ball Hog enemy (SBZ)
00009904                            ; ---------------------------------------------------------------------------
00009904                            Map_obj1E:
00009904                            	include "_maps\obj1E.asm"
00009904                            ; ---------------------------------------------------------------------------
00009904                            ; Sprite mappings - Ball Hog enemy (SBZ)
00009904                            ; ---------------------------------------------------------------------------
00009904 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
00009908 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
0000990C 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
00009910 02                         byte_8E6E:	dc.b 2
00009911 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00009916 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
0000991B 02                         byte_8E79:	dc.b 2
0000991C EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00009921 FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
00009926 02                         byte_8E84:	dc.b 2
00009927 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
0000992C 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
00009931 02                         byte_8E8F:	dc.b 2
00009932 E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
00009937 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
0000993C 01                         byte_8E9A:	dc.b 1
0000993D F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
00009942 01                         byte_8EA0:	dc.b 1
00009943 F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
00009948                            		even
00009948                            		even
00009948                            
00009948                            ; ---------------------------------------------------------------------------
00009948                            ; Sprite mappings - explosion
00009948                            ; ---------------------------------------------------------------------------
00009948                            Map_obj24:
00009948                            	include "_maps\obj24.asm"
00009948                            ; ---------------------------------------------------------------------------
00009948                            ; Sprite mappings - explosion
00009948                            ; ---------------------------------------------------------------------------
00009948 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
0000994C 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
00009950 01                         byte_8EAE:	dc.b 1
00009951 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00009956 01                         byte_8EB4:	dc.b 1
00009957 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000995C 01                         byte_8EBA:	dc.b 1
0000995D F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00009962 01                         byte_8EC0:	dc.b 1
00009963 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
00009968                            		even
00009968                            		even
00009968                            
00009968                            ; ---------------------------------------------------------------------------
00009968                            ; Sprite mappings - explosion
00009968                            ; ---------------------------------------------------------------------------
00009968 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
0000996C 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
00009970 0000                       		dc.w byte_8EF7-Map_obj27
00009972 01                         byte_8ED0:	dc.b 1
00009973 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
00009978 01                         byte_8ED6:	dc.b 1
00009979 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000997E 01                         byte_8EDC:	dc.b 1
0000997F F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
00009984 04                         byte_8EE2:	dc.b 4
00009985 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000998A EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000998F 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00009994 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00009999 04                         byte_8EF7:	dc.b 4
0000999A EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000999F EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
000099A4 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
000099A9 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
000099AE                            		even
000099AE                            ; ---------------------------------------------------------------------------
000099AE                            ; Sprite mappings - explosion from when	a boss is destroyed
000099AE                            ; ---------------------------------------------------------------------------
000099AE FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
000099B0 0000                       		dc.w byte_8F16-Map_obj3F
000099B2 0000                       		dc.w byte_8F1C-Map_obj3F
000099B4 FFD6                       		dc.w byte_8EE2-Map_obj3F
000099B6 FFEB                       		dc.w byte_8EF7-Map_obj3F
000099B8 01                         byte_8F16:	dc.b 1
000099B9 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
000099BE 01                         byte_8F1C:	dc.b 1
000099BF F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
000099C4                            		even
000099C4                            ; ===========================================================================
000099C4                            ; ---------------------------------------------------------------------------
000099C4                            ; Object 28 - animals
000099C4                            ; ---------------------------------------------------------------------------
000099C4                            
000099C4                            Obj28:					; XREF: Obj_Index
000099C4 7000                       		moveq	#0,d0
000099C6 1028 0024                  		move.b	$24(a0),d0
000099CA 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
000099CE 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
000099D2                            ; ===========================================================================
000099D2 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
000099D6 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000099DA 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
000099DE 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000099E2 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
000099E6 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
000099EA 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
000099EE 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000099F2 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000099F6 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
000099FA 0000                       		dc.w loc_92D6-Obj28_Index
000099FC                            
000099FC 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
00009A08                            
00009A08 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
00009A0C 0000 0000                  		dc.l Map_obj28
00009A10 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00009A14 0000 0000                  		dc.l Map_obj28a		; mappings address
00009A18 FE80 FD00                  		dc.w $FE80, $FD00
00009A1C 0000 0000                  		dc.l Map_obj28
00009A20 FEC0 FE80                  		dc.w $FEC0, $FE80
00009A24 0000 0000                  		dc.l Map_obj28a
00009A28 FE40 FD00                  		dc.w $FE40, $FD00
00009A2C 0000 0000                  		dc.l Map_obj28b
00009A30 FD00 FC00                  		dc.w $FD00, $FC00
00009A34 0000 0000                  		dc.l Map_obj28a
00009A38 FD80 FC80                  		dc.w $FD80, $FC80
00009A3C 0000 0000                  		dc.l Map_obj28b
00009A40                            
00009A40 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
00009A50 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
00009A60 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
00009A6C                            
00009A6C 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
00009A80 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00009A94 0000 0000                  		dc.l Map_obj28b
00009A98                            
00009A98 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
00009AAA 0565 05B3                  		dc.w $565, $5B3
00009AAE                            ; ===========================================================================
00009AAE                            
00009AAE                            Obj28_Ending:				; XREF: Obj28_Index
00009AAE 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
00009AB2 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
00009AB6 7000                       		moveq	#0,d0
00009AB8 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009ABC D040                       		add.w	d0,d0		; multiply d0 by 2
00009ABE 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
00009AC2 0440 0014                  		subi.w	#$14,d0
00009AC6 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
00009ACC D040                       		add.w	d0,d0
00009ACE 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
00009AD4 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
00009AD8 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
00009ADE 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
00009AE4 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
00009AEA 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
00009AF0 117C 000C 0016             		move.b	#$C,$16(a0)
00009AF6 117C 0004 0001             		move.b	#4,1(a0)
00009AFC 08E8 0000 0001             		bset	#0,1(a0)
00009B02 117C 0006 0018             		move.b	#6,$18(a0)
00009B08 117C 0008 0019             		move.b	#8,$19(a0)
00009B0E 117C 0007 001E             		move.b	#7,$1E(a0)
00009B14 6000 0000                  		bra.w	DisplaySprite
00009B18                            ; ===========================================================================
00009B18                            
00009B18                            Obj28_FromEnemy:			; XREF: Obj28_Ending
00009B18 5428 0024                  		addq.b	#2,$24(a0)
00009B1C 6100 9890                  		bsr.w	RandomNumber
00009B20 0240 0001                  		andi.w	#1,d0
00009B24 7200                       		moveq	#0,d1
00009B26 1238 FE10                  		move.b	($FFFFFE10).w,d1
00009B2A D241                       		add.w	d1,d1
00009B2C D240                       		add.w	d0,d1
00009B2E 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
00009B32 1031 1000                  		move.b	(a1,d1.w),d0
00009B36 1140 0030                  		move.b	d0,$30(a0)
00009B3A E748                       		lsl.w	#3,d0
00009B3C 43FA FECA                  		lea	Obj28_Variables(pc),a1
00009B40 D2C0                       		adda.w	d0,a1
00009B42 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
00009B46 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
00009B4A 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
00009B4E 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
00009B54 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
00009B5A 6700                       		beq.s	loc_90C0	; if yes, branch
00009B5C 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
00009B62                            
00009B62                            loc_90C0:
00009B62 117C 000C 0016             		move.b	#$C,$16(a0)
00009B68 117C 0004 0001             		move.b	#4,1(a0)
00009B6E 08E8 0000 0001             		bset	#0,1(a0)
00009B74 117C 0006 0018             		move.b	#6,$18(a0)
00009B7A 117C 0008 0019             		move.b	#8,$19(a0)
00009B80 117C 0007 001E             		move.b	#7,$1E(a0)
00009B86 117C 0002 001A             		move.b	#2,$1A(a0)
00009B8C 317C FC00 0012             		move.w	#-$400,$12(a0)
00009B92 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009B96 6600                       		bne.s	loc_911C
00009B98 6100 0000                  		bsr.w	SingleObjLoad
00009B9C 6600                       		bne.s	Obj28_Display
00009B9E 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00009BA2 3368 0008 0008             		move.w	8(a0),8(a1)
00009BA8 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009BAE 3028 003E                  		move.w	$3E(a0),d0
00009BB2 E248                       		lsr.w	#1,d0
00009BB4 1340 001A                  		move.b	d0,$1A(a1)
00009BB8                            
00009BB8                            Obj28_Display:
00009BB8 6000 0000                  		bra.w	DisplaySprite
00009BBC                            ; ===========================================================================
00009BBC                            
00009BBC                            loc_911C:
00009BBC 117C 0012 0024             		move.b	#$12,$24(a0)
00009BC2 4268 0010                  		clr.w	$10(a0)
00009BC6 6000 0000                  		bra.w	DisplaySprite
00009BCA                            ; ===========================================================================
00009BCA                            
00009BCA                            loc_912A:				; XREF: Obj28_Index
00009BCA 4A28 0001                  		tst.b	1(a0)
00009BCE 6A00 0000                  		bpl.w	DeleteObject
00009BD2 6100 0000                  		bsr.w	ObjectFall
00009BD6 4A68 0012                  		tst.w	$12(a0)
00009BDA 6B00                       		bmi.s	loc_9180
00009BDC 4EB9 0000 0000             		jsr	ObjHitFloor
00009BE2 4A41                       		tst.w	d1
00009BE4 6A00                       		bpl.s	loc_9180
00009BE6 D368 000C                  		add.w	d1,$C(a0)
00009BEA 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009BF0 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009BF6 117C 0001 001A             		move.b	#1,$1A(a0)
00009BFC 1028 0030                  		move.b	$30(a0),d0
00009C00 D000                       		add.b	d0,d0
00009C02 5800                       		addq.b	#4,d0
00009C04 1140 0024                  		move.b	d0,$24(a0)
00009C08 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009C0C 6700                       		beq.s	loc_9180
00009C0E 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009C14 6700                       		beq.s	loc_9180
00009C16 4468 0010                  		neg.w	$10(a0)
00009C1A 0868 0000 0001             		bchg	#0,1(a0)
00009C20                            
00009C20                            loc_9180:
00009C20 6000 0000                  		bra.w	DisplaySprite
00009C24                            ; ===========================================================================
00009C24                            
00009C24                            loc_9184:				; XREF: Obj28_Index
00009C24 6100 0000                  		bsr.w	ObjectFall
00009C28 117C 0001 001A             		move.b	#1,$1A(a0)
00009C2E 4A68 0012                  		tst.w	$12(a0)
00009C32 6B00                       		bmi.s	loc_91AE
00009C34 117C 0000 001A             		move.b	#0,$1A(a0)
00009C3A 4EB9 0000 0000             		jsr	ObjHitFloor
00009C40 4A41                       		tst.w	d1
00009C42 6A00                       		bpl.s	loc_91AE
00009C44 D368 000C                  		add.w	d1,$C(a0)
00009C48 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009C4E                            
00009C4E                            loc_91AE:
00009C4E 4A28 0028                  		tst.b	$28(a0)
00009C52 6600                       		bne.s	loc_9224
00009C54 4A28 0001                  		tst.b	1(a0)
00009C58 6A00 0000                  		bpl.w	DeleteObject
00009C5C 6000 0000                  		bra.w	DisplaySprite
00009C60                            ; ===========================================================================
00009C60                            
00009C60                            loc_91C0:				; XREF: Obj28_Index
00009C60 6100 0000                  		bsr.w	SpeedToPos
00009C64 0668 0018 0012             		addi.w	#$18,$12(a0)
00009C6A 4A68 0012                  		tst.w	$12(a0)
00009C6E 6B00                       		bmi.s	loc_91FC
00009C70 4EB9 0000 0000             		jsr	ObjHitFloor
00009C76 4A41                       		tst.w	d1
00009C78 6A00                       		bpl.s	loc_91FC
00009C7A D368 000C                  		add.w	d1,$C(a0)
00009C7E 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009C84 4A28 0028                  		tst.b	$28(a0)
00009C88 6700                       		beq.s	loc_91FC
00009C8A 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
00009C90 6700                       		beq.s	loc_91FC
00009C92 4468 0010                  		neg.w	$10(a0)
00009C96 0868 0000 0001             		bchg	#0,1(a0)
00009C9C                            
00009C9C                            loc_91FC:
00009C9C 5328 001E                  		subq.b	#1,$1E(a0)
00009CA0 6A00                       		bpl.s	loc_9212
00009CA2 117C 0001 001E             		move.b	#1,$1E(a0)
00009CA8 5228 001A                  		addq.b	#1,$1A(a0)
00009CAC 0228 0001 001A             		andi.b	#1,$1A(a0)
00009CB2                            
00009CB2                            loc_9212:
00009CB2 4A28 0028                  		tst.b	$28(a0)
00009CB6 6600                       		bne.s	loc_9224
00009CB8 4A28 0001                  		tst.b	1(a0)
00009CBC 6A00 0000                  		bpl.w	DeleteObject
00009CC0 6000 0000                  		bra.w	DisplaySprite
00009CC4                            ; ===========================================================================
00009CC4                            
00009CC4                            loc_9224:				; XREF: Obj28_Index
00009CC4 3028 0008                  		move.w	8(a0),d0
00009CC8 9078 D008                  		sub.w	($FFFFD008).w,d0
00009CCC 6500                       		bcs.s	loc_923C
00009CCE 0440 0180                  		subi.w	#$180,d0
00009CD2 6A00                       		bpl.s	loc_923C
00009CD4 4A28 0001                  		tst.b	1(a0)
00009CD8 6A00 0000                  		bpl.w	DeleteObject
00009CDC                            
00009CDC                            loc_923C:
00009CDC 6000 0000                  		bra.w	DisplaySprite
00009CE0                            ; ===========================================================================
00009CE0                            
00009CE0                            loc_9240:				; XREF: Obj28_Index
00009CE0 4A28 0001                  		tst.b	1(a0)
00009CE4 6A00 0000                  		bpl.w	DeleteObject
00009CE8 5368 0036                  		subq.w	#1,$36(a0)
00009CEC 6600 0000                  		bne.w	loc_925C
00009CF0 117C 0002 0024             		move.b	#2,$24(a0)
00009CF6 117C 0003 0018             		move.b	#3,$18(a0)
00009CFC                            
00009CFC                            loc_925C:
00009CFC 6000 0000                  		bra.w	DisplaySprite
00009D00                            ; ===========================================================================
00009D00                            
00009D00                            loc_9260:				; XREF: Obj28_Index
00009D00 6100 0000                  		bsr.w	sub_9404
00009D04 6400                       		bcc.s	loc_927C
00009D06 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009D0C 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009D12 117C 000E 0024             		move.b	#$E,$24(a0)
00009D18 6000 FF46                  		bra.w	loc_91C0
00009D1C                            ; ===========================================================================
00009D1C                            
00009D1C                            loc_927C:
00009D1C 6000 FFA6                  		bra.w	loc_9224
00009D20                            ; ===========================================================================
00009D20                            
00009D20                            loc_9280:				; XREF: Obj28_Index
00009D20 6100 0000                  		bsr.w	sub_9404
00009D24 6A00                       		bpl.s	loc_92B6
00009D26 4268 0010                  		clr.w	$10(a0)
00009D2A 4268 0032                  		clr.w	$32(a0)
00009D2E 6100 0000                  		bsr.w	SpeedToPos
00009D32 0668 0018 0012             		addi.w	#$18,$12(a0)
00009D38 6100 0000                  		bsr.w	loc_93C4
00009D3C 6100 0000                  		bsr.w	loc_93EC
00009D40 5328 001E                  		subq.b	#1,$1E(a0)
00009D44 6A00                       		bpl.s	loc_92B6
00009D46 117C 0001 001E             		move.b	#1,$1E(a0)
00009D4C 5228 001A                  		addq.b	#1,$1A(a0)
00009D50 0228 0001 001A             		andi.b	#1,$1A(a0)
00009D56                            
00009D56                            loc_92B6:
00009D56 6000 FF6C                  		bra.w	loc_9224
00009D5A                            ; ===========================================================================
00009D5A                            
00009D5A                            loc_92BA:				; XREF: Obj28_Index
00009D5A 6100 0000                  		bsr.w	sub_9404
00009D5E 6A00                       		bpl.s	loc_9310
00009D60 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009D66 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009D6C 117C 0004 0024             		move.b	#4,$24(a0)
00009D72 6000 FEB0                  		bra.w	loc_9184
00009D76                            ; ===========================================================================
00009D76                            
00009D76                            loc_92D6:				; XREF: Obj28_Index
00009D76 6100 0000                  		bsr.w	ObjectFall
00009D7A 117C 0001 001A             		move.b	#1,$1A(a0)
00009D80 4A68 0012                  		tst.w	$12(a0)
00009D84 6B00                       		bmi.s	loc_9310
00009D86 117C 0000 001A             		move.b	#0,$1A(a0)
00009D8C 4EB9 0000 0000             		jsr	ObjHitFloor
00009D92 4A41                       		tst.w	d1
00009D94 6A00                       		bpl.s	loc_9310
00009D96 4628 0029                  		not.b	$29(a0)
00009D9A 6600                       		bne.s	loc_9306
00009D9C 4468 0010                  		neg.w	$10(a0)
00009DA0 0868 0000 0001             		bchg	#0,1(a0)
00009DA6                            
00009DA6                            loc_9306:
00009DA6 D368 000C                  		add.w	d1,$C(a0)
00009DAA 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009DB0                            
00009DB0                            loc_9310:
00009DB0 6000 FF12                  		bra.w	loc_9224
00009DB4                            ; ===========================================================================
00009DB4                            
00009DB4                            loc_9314:				; XREF: Obj28_Index
00009DB4 6100 0000                  		bsr.w	sub_9404
00009DB8 6A00                       		bpl.s	loc_932E
00009DBA 4268 0010                  		clr.w	$10(a0)
00009DBE 4268 0032                  		clr.w	$32(a0)
00009DC2 6100 0000                  		bsr.w	ObjectFall
00009DC6 6100 0000                  		bsr.w	loc_93C4
00009DCA 6100 0000                  		bsr.w	loc_93EC
00009DCE                            
00009DCE                            loc_932E:
00009DCE 6000 FEF4                  		bra.w	loc_9224
00009DD2                            ; ===========================================================================
00009DD2                            
00009DD2                            loc_9332:				; XREF: Obj28_Index
00009DD2 6100 0000                  		bsr.w	sub_9404
00009DD6 6A00                       		bpl.s	loc_936C
00009DD8 6100 0000                  		bsr.w	ObjectFall
00009DDC 117C 0001 001A             		move.b	#1,$1A(a0)
00009DE2 4A68 0012                  		tst.w	$12(a0)
00009DE6 6B00                       		bmi.s	loc_936C
00009DE8 117C 0000 001A             		move.b	#0,$1A(a0)
00009DEE 4EB9 0000 0000             		jsr	ObjHitFloor
00009DF4 4A41                       		tst.w	d1
00009DF6 6A00                       		bpl.s	loc_936C
00009DF8 4468 0010                  		neg.w	$10(a0)
00009DFC 0868 0000 0001             		bchg	#0,1(a0)
00009E02 D368 000C                  		add.w	d1,$C(a0)
00009E06 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009E0C                            
00009E0C                            loc_936C:
00009E0C 6000 FEB6                  		bra.w	loc_9224
00009E10                            ; ===========================================================================
00009E10                            
00009E10                            loc_9370:				; XREF: Obj28_Index
00009E10 6100 0000                  		bsr.w	sub_9404
00009E14 6A00                       		bpl.s	loc_93C0
00009E16 6100 0000                  		bsr.w	SpeedToPos
00009E1A 0668 0018 0012             		addi.w	#$18,$12(a0)
00009E20 4A68 0012                  		tst.w	$12(a0)
00009E24 6B00                       		bmi.s	loc_93AA
00009E26 4EB9 0000 0000             		jsr	ObjHitFloor
00009E2C 4A41                       		tst.w	d1
00009E2E 6A00                       		bpl.s	loc_93AA
00009E30 4628 0029                  		not.b	$29(a0)
00009E34 6600                       		bne.s	loc_93A0
00009E36 4468 0010                  		neg.w	$10(a0)
00009E3A 0868 0000 0001             		bchg	#0,1(a0)
00009E40                            
00009E40                            loc_93A0:
00009E40 D368 000C                  		add.w	d1,$C(a0)
00009E44 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009E4A                            
00009E4A                            loc_93AA:
00009E4A 5328 001E                  		subq.b	#1,$1E(a0)
00009E4E 6A00                       		bpl.s	loc_93C0
00009E50 117C 0001 001E             		move.b	#1,$1E(a0)
00009E56 5228 001A                  		addq.b	#1,$1A(a0)
00009E5A 0228 0001 001A             		andi.b	#1,$1A(a0)
00009E60                            
00009E60                            loc_93C0:
00009E60 6000 FE62                  		bra.w	loc_9224
00009E64                            ; ===========================================================================
00009E64                            
00009E64                            loc_93C4:
00009E64 117C 0001 001A             		move.b	#1,$1A(a0)
00009E6A 4A68 0012                  		tst.w	$12(a0)
00009E6E 6B00                       		bmi.s	locret_93EA
00009E70 117C 0000 001A             		move.b	#0,$1A(a0)
00009E76 4EB9 0000 0000             		jsr	ObjHitFloor
00009E7C 4A41                       		tst.w	d1
00009E7E 6A00                       		bpl.s	locret_93EA
00009E80 D368 000C                  		add.w	d1,$C(a0)
00009E84 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009E8A                            
00009E8A                            locret_93EA:
00009E8A 4E75                       		rts	
00009E8C                            ; ===========================================================================
00009E8C                            
00009E8C                            loc_93EC:
00009E8C 08E8 0000 0001             		bset	#0,1(a0)
00009E92 3028 0008                  		move.w	8(a0),d0
00009E96 9078 D008                  		sub.w	($FFFFD008).w,d0
00009E9A 6400                       		bcc.s	locret_9402
00009E9C 08A8 0000 0001             		bclr	#0,1(a0)
00009EA2                            
00009EA2                            locret_9402:
00009EA2 4E75                       		rts	
00009EA4                            
00009EA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009EA4                            
00009EA4                            
00009EA4                            sub_9404:
00009EA4 3038 D008                  		move.w	($FFFFD008).w,d0
00009EA8 9068 0008                  		sub.w	8(a0),d0
00009EAC 0440 00B8                  		subi.w	#$B8,d0
00009EB0 4E75                       		rts	
00009EB2                            ; End of function sub_9404
00009EB2                            
00009EB2                            ; ===========================================================================
00009EB2                            ; ---------------------------------------------------------------------------
00009EB2                            ; Object 29 - points that appear when you destroy something
00009EB2                            ; ---------------------------------------------------------------------------
00009EB2                            
00009EB2                            Obj29:					; XREF: Obj_Index
00009EB2 7000                       		moveq	#0,d0
00009EB4 1028 0024                  		move.b	$24(a0),d0
00009EB8 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00009EBC 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009EC0 6000 0000                  		bra.w	DisplaySprite
00009EC4                            ; ===========================================================================
00009EC4 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009EC6 0000                       		dc.w Obj29_Slower-Obj29_Index
00009EC8                            ; ===========================================================================
00009EC8                            
00009EC8                            Obj29_Main:				; XREF: Obj29_Index
00009EC8 5428 0024                  		addq.b	#2,$24(a0)
00009ECC 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009ED4 317C 2797 0002             		move.w	#$2797,2(a0)
00009EDA 117C 0004 0001             		move.b	#4,1(a0)
00009EE0 117C 0001 0018             		move.b	#1,$18(a0)
00009EE6 117C 0008 0019             		move.b	#8,$19(a0)
00009EEC 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009EF2                            
00009EF2                            Obj29_Slower:				; XREF: Obj29_Index
00009EF2 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009EF6 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009EFA 6100 0000                  		bsr.w	SpeedToPos
00009EFE 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009F04 4E75                       		rts	
00009F06                            ; ===========================================================================
00009F06                            ; ---------------------------------------------------------------------------
00009F06                            ; Sprite mappings - animals
00009F06                            ; ---------------------------------------------------------------------------
00009F06                            Map_obj28:
00009F06                            	include "_maps\obj28.asm"
00009F06                            ; ---------------------------------------------------------------------------
00009F06                            ; Sprite mappings - animals
00009F06                            ; ---------------------------------------------------------------------------
00009F06 0000                       		dc.w byte_9472-Map_obj28
00009F08 0000                       		dc.w byte_9478-Map_obj28
00009F0A 0000                       		dc.w byte_946C-Map_obj28
00009F0C 01                         byte_946C:	dc.b 1
00009F0D F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009F12 01                         byte_9472:	dc.b 1
00009F13 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009F18 01                         byte_9478:	dc.b 1
00009F19 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009F1E                            		even
00009F1E                            		even
00009F1E                            
00009F1E                            Map_obj28a:
00009F1E                            	include "_maps\obj28a.asm"
00009F1E                            ; ---------------------------------------------------------------------------
00009F1E                            ; Sprite mappings - animals
00009F1E                            ; ---------------------------------------------------------------------------
00009F1E 0000                       		dc.w byte_948A-Map_obj28a
00009F20 0000                       		dc.w byte_9490-Map_obj28a
00009F22 0000                       		dc.w byte_9484-Map_obj28a
00009F24 01                         byte_9484:	dc.b 1
00009F25 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009F2A 01                         byte_948A:	dc.b 1
00009F2B FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009F30 01                         byte_9490:	dc.b 1
00009F31 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009F36                            		even
00009F36                            		even
00009F36                            
00009F36                            Map_obj28b:
00009F36                            	include "_maps\obj28b.asm"
00009F36                            ; ---------------------------------------------------------------------------
00009F36                            ; Sprite mappings - animals
00009F36                            ; ---------------------------------------------------------------------------
00009F36 0000                       		dc.w byte_94A2-Map_obj28b
00009F38 0000                       		dc.w byte_94A8-Map_obj28b
00009F3A 0000                       		dc.w byte_949C-Map_obj28b
00009F3C 01                         byte_949C:	dc.b 1
00009F3D F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009F42 01                         byte_94A2:	dc.b 1
00009F43 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009F48 01                         byte_94A8:	dc.b 1
00009F49 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009F4E                            		even
00009F4E                            		even
00009F4E                            
00009F4E                            ; ---------------------------------------------------------------------------
00009F4E                            ; Sprite mappings - points that	appear when you	destroy	something
00009F4E                            ; ---------------------------------------------------------------------------
00009F4E                            Map_obj29:
00009F4E                            	include "_maps\obj29.asm"
00009F4E                            ; ---------------------------------------------------------------------------
00009F4E                            ; Sprite mappings - points that	appear when you	destroy	something
00009F4E                            ; ---------------------------------------------------------------------------
00009F4E 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00009F52 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009F56 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009F5A 0000                       		dc.w byte_94E5-Map_obj29
00009F5C 01                         byte_94BC:	dc.b 1
00009F5D FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
00009F62 01                         byte_94C2:	dc.b 1
00009F63 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009F68 01                         byte_94C8:	dc.b 1
00009F69 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
00009F6E 01                         byte_94CE:	dc.b 1
00009F6F FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009F74 01                         byte_94D4:	dc.b 1
00009F75 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009F7A 02                         byte_94DA:	dc.b 2
00009F7B FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
00009F80 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009F85 02                         byte_94E5:	dc.b 2
00009F86 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009F8B FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
00009F90                            		even
00009F90                            		even
00009F90                            
00009F90                            ; ===========================================================================
00009F90                            ; ---------------------------------------------------------------------------
00009F90                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
00009F90                            ; ---------------------------------------------------------------------------
00009F90                            
00009F90                            Obj1F:					; XREF: Obj_Index
00009F90 7000                       		moveq	#0,d0
00009F92 1028 0024                  		move.b	$24(a0),d0
00009F96 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009F9A 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
00009F9E                            ; ===========================================================================
00009F9E 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
00009FA0 0000                       		dc.w Obj1F_Action-Obj1F_Index
00009FA2 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009FA4 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009FA6 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009FA8                            ; ===========================================================================
00009FA8                            
00009FA8                            Obj1F_Main:				; XREF: Obj1F_Index
00009FA8 117C 0010 0016             		move.b	#$10,$16(a0)
00009FAE 117C 0008 0017             		move.b	#8,$17(a0)
00009FB4 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009FBC 317C 0400 0002             		move.w	#$400,2(a0)
00009FC2 117C 0004 0001             		move.b	#4,1(a0)
00009FC8 117C 0003 0018             		move.b	#3,$18(a0)
00009FCE 117C 0006 0020             		move.b	#6,$20(a0)
00009FD4 117C 0015 0019             		move.b	#$15,$19(a0)
00009FDA 6100 0000                  		bsr.w	ObjectFall
00009FDE 4EB9 0000 0000             		jsr	ObjHitFloor
00009FE4 4A41                       		tst.w	d1
00009FE6 6A00                       		bpl.s	locret_955A
00009FE8 D368 000C                  		add.w	d1,$C(a0)
00009FEC 1143 0026                  		move.b	d3,$26(a0)
00009FF0 317C 0000 0012             		move.w	#0,$12(a0)
00009FF6 5428 0024                  		addq.b	#2,$24(a0)
00009FFA                            
00009FFA                            locret_955A:
00009FFA 4E75                       		rts	
00009FFC                            ; ===========================================================================
00009FFC                            
00009FFC                            Obj1F_Action:				; XREF: Obj1F_Index
00009FFC 7000                       		moveq	#0,d0
00009FFE 1028 0025                  		move.b	$25(a0),d0
0000A002 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
0000A006 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
0000A00A 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000A010 6100 0000                  		bsr.w	AnimateSprite
0000A014 6000 0000                  		bra.w	MarkObjGone
0000A018                            ; ===========================================================================
0000A018 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
0000A01A 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
0000A01C                            ; ===========================================================================
0000A01C                            
0000A01C                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
0000A01C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0000A020 6A00                       		bpl.s	locret_95B6
0000A022 4A28 0001                  		tst.b	1(a0)
0000A026 6A00                       		bpl.s	Obj1F_Move
0000A028 0868 0001 0032             		bchg	#1,$32(a0)
0000A02E 6600                       		bne.s	Obj1F_MakeFire
0000A030                            
0000A030                            Obj1F_Move:
0000A030 5428 0025                  		addq.b	#2,$25(a0)
0000A034 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
0000A03A 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
0000A040 6100 0000                  		bsr.w	Obj1F_SetAni
0000A044 5600                       		addq.b	#3,d0
0000A046 1140 001C                  		move.b	d0,$1C(a0)
0000A04A 0868 0000 0022             		bchg	#0,$22(a0)
0000A050 6600                       		bne.s	locret_95B6
0000A052 4468 0010                  		neg.w	$10(a0)		; change direction
0000A056                            
0000A056                            locret_95B6:
0000A056 4E75                       		rts	
0000A058                            ; ===========================================================================
0000A058                            
0000A058                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
0000A058 317C 003B 0030             		move.w	#$3B,$30(a0)
0000A05E 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
0000A064 6100 0000                  		bsr.w	SingleObjLoad
0000A068 6600                       		bne.s	Obj1F_MakeFire2
0000A06A 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
0000A06E 137C 0006 0024             		move.b	#6,$24(a1)
0000A074 3368 0008 0008             		move.w	8(a0),8(a1)
0000A07A 0469 0010 0008             		subi.w	#$10,8(a1)
0000A080 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A086 337C FF00 0010             		move.w	#-$100,$10(a1)
0000A08C                            
0000A08C                            Obj1F_MakeFire2:
0000A08C 6100 0000                  		bsr.w	SingleObjLoad
0000A090 6600                       		bne.s	locret_9618
0000A092 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
0000A096 137C 0006 0024             		move.b	#6,$24(a1)
0000A09C 3368 0008 0008             		move.w	8(a0),8(a1)
0000A0A2 0669 0010 0008             		addi.w	#$10,8(a1)
0000A0A8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A0AE 337C 0100 0010             		move.w	#$100,$10(a1)
0000A0B4                            
0000A0B4                            locret_9618:
0000A0B4 4E75                       		rts	
0000A0B6                            ; ===========================================================================
0000A0B6                            
0000A0B6                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
0000A0B6 5368 0030                  		subq.w	#1,$30(a0)
0000A0BA 6B00                       		bmi.s	loc_966E
0000A0BC 6100 0000                  		bsr.w	SpeedToPos
0000A0C0 0868 0000 0032             		bchg	#0,$32(a0)
0000A0C6 6600                       		bne.s	loc_9654
0000A0C8 3628 0008                  		move.w	8(a0),d3
0000A0CC 0643 0010                  		addi.w	#$10,d3
0000A0D0 0828 0000 0022             		btst	#0,$22(a0)
0000A0D6 6700                       		beq.s	loc_9640
0000A0D8 0443 0020                  		subi.w	#$20,d3
0000A0DC                            
0000A0DC                            loc_9640:
0000A0DC 4EB9 0000 0000             		jsr	ObjHitFloor2
0000A0E2 0C41 FFF8                  		cmpi.w	#-8,d1
0000A0E6 6D00                       		blt.s	loc_966E
0000A0E8 0C41 000C                  		cmpi.w	#$C,d1
0000A0EC 6C00                       		bge.s	loc_966E
0000A0EE 4E75                       		rts	
0000A0F0                            ; ===========================================================================
0000A0F0                            
0000A0F0                            loc_9654:				; XREF: Obj1F_WalkOnFloor
0000A0F0 4EB9 0000 0000             		jsr	ObjHitFloor
0000A0F6 D368 000C                  		add.w	d1,$C(a0)
0000A0FA 1143 0026                  		move.b	d3,$26(a0)
0000A0FE 6100 0000                  		bsr.w	Obj1F_SetAni
0000A102 5600                       		addq.b	#3,d0
0000A104 1140 001C                  		move.b	d0,$1C(a0)
0000A108 4E75                       		rts	
0000A10A                            ; ===========================================================================
0000A10A                            
0000A10A                            loc_966E:				; XREF: Obj1F_WalkOnFloor
0000A10A 5528 0025                  		subq.b	#2,$25(a0)
0000A10E 317C 003B 0030             		move.w	#59,$30(a0)
0000A114 317C 0000 0010             		move.w	#0,$10(a0)
0000A11A 6100 0000                  		bsr.w	Obj1F_SetAni
0000A11E 1140 001C                  		move.b	d0,$1C(a0)
0000A122 4E75                       		rts	
0000A124                            ; ---------------------------------------------------------------------------
0000A124                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000A124                            ; ---------------------------------------------------------------------------
0000A124                            
0000A124                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A124                            
0000A124                            
0000A124                            Obj1F_SetAni:				; XREF: loc_966E
0000A124 7000                       		moveq	#0,d0
0000A126 1628 0026                  		move.b	$26(a0),d3
0000A12A 6B00                       		bmi.s	loc_96A4
0000A12C 0C03 0006                  		cmpi.b	#6,d3
0000A130 6500                       		bcs.s	locret_96A2
0000A132 7001                       		moveq	#1,d0
0000A134 0828 0000 0022             		btst	#0,$22(a0)
0000A13A 6600                       		bne.s	locret_96A2
0000A13C 7002                       		moveq	#2,d0
0000A13E                            
0000A13E                            locret_96A2:
0000A13E 4E75                       		rts	
0000A140                            ; ===========================================================================
0000A140                            
0000A140                            loc_96A4:				; XREF: Obj1F_SetAni
0000A140 0C03 00FA                  		cmpi.b	#-6,d3
0000A144 6200                       		bhi.s	locret_96B6
0000A146 7002                       		moveq	#2,d0
0000A148 0828 0000 0022             		btst	#0,$22(a0)
0000A14E 6600                       		bne.s	locret_96B6
0000A150 7001                       		moveq	#1,d0
0000A152                            
0000A152                            locret_96B6:
0000A152 4E75                       		rts	
0000A154                            ; End of function Obj1F_SetAni
0000A154                            
0000A154                            ; ===========================================================================
0000A154                            
0000A154                            Obj1F_Delete:				; XREF: Obj1F_Index
0000A154 6100 0000                  		bsr.w	DeleteObject
0000A158 4E75                       		rts	
0000A15A                            ; ===========================================================================
0000A15A                            ; ---------------------------------------------------------------------------
0000A15A                            ; Sub-object - missile that the	Crabmeat throws
0000A15A                            ; ---------------------------------------------------------------------------
0000A15A                            
0000A15A                            Obj1F_BallMain:				; XREF: Obj1F_Index
0000A15A 5428 0024                  		addq.b	#2,$24(a0)
0000A15E 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000A166 317C 0400 0002             		move.w	#$400,2(a0)
0000A16C 117C 0004 0001             		move.b	#4,1(a0)
0000A172 117C 0003 0018             		move.b	#3,$18(a0)
0000A178 117C 0087 0020             		move.b	#$87,$20(a0)
0000A17E 117C 0008 0019             		move.b	#8,$19(a0)
0000A184 317C FC00 0012             		move.w	#-$400,$12(a0)
0000A18A 117C 0007 001C             		move.b	#7,$1C(a0)
0000A190                            
0000A190                            Obj1F_BallMove:				; XREF: Obj1F_Index
0000A190 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000A196 6100 0000                  		bsr.w	AnimateSprite
0000A19A 6100 0000                  		bsr.w	ObjectFall
0000A19E 6100 0000                  		bsr.w	DisplaySprite
0000A1A2 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A1A6 0640 00E0                  		addi.w	#$E0,d0
0000A1AA B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A1AE 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
0000A1B0 4E75                       		rts	
0000A1B2                            ; ===========================================================================
0000A1B2                            
0000A1B2                            Obj1F_Delete2:
0000A1B2 6000 0000                  		bra.w	DeleteObject
0000A1B6                            ; ===========================================================================
0000A1B6                            Ani_obj1F:
0000A1B6                            	include "_anim\obj1F.asm"
0000A1B6                            ; ---------------------------------------------------------------------------
0000A1B6                            ; Animation script - Crabmeat enemy
0000A1B6                            ; ---------------------------------------------------------------------------
0000A1B6 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
0000A1BC 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
0000A1C2 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
0000A1C6 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
0000A1CA 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
0000A1CE 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
0000A1D2 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
0000A1D8 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
0000A1DE 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
0000A1E4 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
0000A1E8 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
0000A1EC                            		even
0000A1EC                            		even
0000A1EC                            
0000A1EC                            ; ---------------------------------------------------------------------------
0000A1EC                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000A1EC                            ; ---------------------------------------------------------------------------
0000A1EC                            Map_obj1F:
0000A1EC                            	include "_maps\obj1F.asm"
0000A1EC                            ; ---------------------------------------------------------------------------
0000A1EC                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000A1EC                            ; ---------------------------------------------------------------------------
0000A1EC 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
0000A1F0 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
0000A1F4 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
0000A1F8 0000                       		dc.w byte_97D7-Map_obj1F
0000A1FA 04                         byte_975E:	dc.b 4
0000A1FB F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
0000A200 F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000A205 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000A20A 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000A20F 04                         byte_9773:	dc.b 4
0000A210 F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
0000A215 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000A21A 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000A21F 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000A224 04                         byte_9788:	dc.b 4
0000A225 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
0000A22A EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000A22F FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000A234 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000A239 04                         byte_979D:	dc.b 4
0000A23A EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
0000A23F EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000A244 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000A249 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000A24E 06                         byte_97B2:	dc.b 6
0000A24F F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
0000A254 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000A259 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000A25E F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000A263 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000A268 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000A26D 01                         byte_97D1:	dc.b 1
0000A26E F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
0000A273 01                         byte_97D7:	dc.b 1
0000A274 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
0000A27A 00                         		even
0000A27A 00                         		even
0000A27A                            
0000A27A                            ; ===========================================================================
0000A27A                            ; ---------------------------------------------------------------------------
0000A27A                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000A27A                            ; ---------------------------------------------------------------------------
0000A27A                            
0000A27A                            Obj22:					; XREF: Obj_Index
0000A27A 7000                       		moveq	#0,d0
0000A27C 1028 0024                  		move.b	$24(a0),d0
0000A280 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0000A284 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0000A288                            ; ===========================================================================
0000A288 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
0000A28A 0000                       		dc.w Obj22_Action-Obj22_Index
0000A28C 0000                       		dc.w Obj22_Delete-Obj22_Index
0000A28E                            ; ===========================================================================
0000A28E                            
0000A28E                            Obj22_Main:				; XREF: Obj22_Index
0000A28E 5428 0024                  		addq.b	#2,$24(a0)
0000A292 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
0000A29A 317C 0444 0002             		move.w	#$444,2(a0)
0000A2A0 117C 0004 0001             		move.b	#4,1(a0)
0000A2A6 117C 0003 0018             		move.b	#3,$18(a0)
0000A2AC 117C 0008 0020             		move.b	#8,$20(a0)
0000A2B2 117C 0018 0019             		move.b	#$18,$19(a0)
0000A2B8                            
0000A2B8                            Obj22_Action:				; XREF: Obj22_Index
0000A2B8 7000                       		moveq	#0,d0
0000A2BA 1028 0025                  		move.b	$25(a0),d0
0000A2BE 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000A2C2 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000A2C6 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000A2CC 6100 0000                  		bsr.w	AnimateSprite
0000A2D0 6000 0000                  		bra.w	MarkObjGone
0000A2D4                            ; ===========================================================================
0000A2D4 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000A2D6 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000A2D8                            ; ===========================================================================
0000A2D8                            
0000A2D8                            Obj22_Move:				; XREF: Obj22_Index2
0000A2D8 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A2DC 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000A2DE 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000A2E4 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000A2E6 5428 0025                  		addq.b	#2,$25(a0)
0000A2EA 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000A2F0 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000A2F6 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000A2FC 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A302 6600                       		bne.s	locret_986C	; if not, branch
0000A304 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000A308                            
0000A308                            locret_986C:
0000A308 4E75                       		rts	
0000A30A                            ; ===========================================================================
0000A30A                            
0000A30A                            Obj22_Fire:				; XREF: Obj22_Move
0000A30A 6100 0000                  		bsr.w	SingleObjLoad
0000A30E 6600                       		bne.s	locret_98D0
0000A310 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000A314 3368 0008 0008             		move.w	8(a0),8(a1)
0000A31A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A320 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000A326 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000A32C 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000A332 303C 0018                  		move.w	#$18,d0
0000A336 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A33C 6600                       		bne.s	loc_98AA	; if not, branch
0000A33E 4440                       		neg.w	d0
0000A340 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000A344                            
0000A344                            loc_98AA:
0000A344 D169 0008                  		add.w	d0,8(a1)
0000A348 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000A34E 337C 000E 0032             		move.w	#$E,$32(a1)
0000A354 2348 003C                  		move.l	a0,$3C(a1)
0000A358 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000A35E 317C 003B 0032             		move.w	#$3B,$32(a0)
0000A364 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000A36A                            
0000A36A                            locret_98D0:
0000A36A 4E75                       		rts	
0000A36C                            ; ===========================================================================
0000A36C                            
0000A36C                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000A36C 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A370 6B00                       		bmi.s	Obj22_ChgDir
0000A372 6100 0000                  		bsr.w	SpeedToPos
0000A376 4A28 0034                  		tst.b	$34(a0)
0000A37A 6600                       		bne.s	locret_992A
0000A37C 3038 D008                  		move.w	($FFFFD008).w,d0
0000A380 9068 0008                  		sub.w	8(a0),d0
0000A384 6A00                       		bpl.s	Obj22_SetNrSonic
0000A386 4440                       		neg.w	d0
0000A388                            
0000A388                            Obj22_SetNrSonic:
0000A388 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000A38C 6400                       		bcc.s	locret_992A	; if not, branch
0000A38E 4A28 0001                  		tst.b	1(a0)
0000A392 6A00                       		bpl.s	locret_992A
0000A394 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000A39A 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000A3A0 6000                       		bra.s	Obj22_Stop
0000A3A2                            ; ===========================================================================
0000A3A2                            
0000A3A2                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000A3A2 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000A3A8 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000A3AE 317C 003B 0032             		move.w	#59,$32(a0)
0000A3B4                            
0000A3B4                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000A3B4 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000A3B8 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000A3BE 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000A3C4                            
0000A3C4                            locret_992A:
0000A3C4 4E75                       		rts	
0000A3C6                            ; ===========================================================================
0000A3C6                            
0000A3C6                            Obj22_Delete:				; XREF: Obj22_Index
0000A3C6 6100 0000                  		bsr.w	DeleteObject
0000A3CA 4E75                       		rts	
0000A3CC                            ; ===========================================================================
0000A3CC                            ; ---------------------------------------------------------------------------
0000A3CC                            ; Object 23 - missile that Buzz	Bomber throws
0000A3CC                            ; ---------------------------------------------------------------------------
0000A3CC                            
0000A3CC                            Obj23:					; XREF: Obj_Index
0000A3CC 7000                       		moveq	#0,d0
0000A3CE 1028 0024                  		move.b	$24(a0),d0
0000A3D2 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000A3D6 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000A3DA                            ; ===========================================================================
0000A3DA 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000A3DC 0000                       		dc.w Obj23_Animate-Obj23_Index
0000A3DE 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000A3E0 0000                       		dc.w Obj23_Delete-Obj23_Index
0000A3E2 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000A3E4                            ; ===========================================================================
0000A3E4                            
0000A3E4                            Obj23_Main:				; XREF: Obj23_Index
0000A3E4 5368 0032                  		subq.w	#1,$32(a0)
0000A3E8 6A00                       		bpl.s	Obj23_ChkCancel
0000A3EA 5428 0024                  		addq.b	#2,$24(a0)
0000A3EE 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000A3F6 317C 2444 0002             		move.w	#$2444,2(a0)
0000A3FC 117C 0004 0001             		move.b	#4,1(a0)
0000A402 117C 0003 0018             		move.b	#3,$18(a0)
0000A408 117C 0008 0019             		move.b	#8,$19(a0)
0000A40E 0228 0003 0022             		andi.b	#3,$22(a0)
0000A414 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000A418 6700                       		beq.s	Obj23_Animate	; if not, branch
0000A41A 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000A420 117C 0087 0020             		move.b	#$87,$20(a0)
0000A426 117C 0001 001C             		move.b	#1,$1C(a0)
0000A42C 6000                       		bra.s	Obj23_Animate2
0000A42E                            ; ===========================================================================
0000A42E                            
0000A42E                            Obj23_Animate:				; XREF: Obj23_Index
0000A42E 6100                       		bsr.s	Obj23_ChkCancel
0000A430 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A436 6100 0000                  		bsr.w	AnimateSprite
0000A43A 6000 0000                  		bra.w	DisplaySprite
0000A43E                            ; ---------------------------------------------------------------------------
0000A43E                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000A43E                            ; destroyed, and if it has, then cancel	the missile
0000A43E                            ; ---------------------------------------------------------------------------
0000A43E                            
0000A43E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A43E                            
0000A43E                            
0000A43E                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000A43E 2268 003C                  		movea.l	$3C(a0),a1
0000A442 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000A446 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000A448 4E75                       		rts	
0000A44A                            ; End of function Obj23_ChkCancel
0000A44A                            
0000A44A                            ; ===========================================================================
0000A44A                            
0000A44A                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000A44A 0828 0007 0022             		btst	#7,$22(a0)
0000A450 6600                       		bne.s	Obj23_Explode
0000A452 117C 0087 0020             		move.b	#$87,$20(a0)
0000A458 117C 0001 001C             		move.b	#1,$1C(a0)
0000A45E 6100 0000                  		bsr.w	SpeedToPos
0000A462 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A468 6100 0000                  		bsr.w	AnimateSprite
0000A46C 6100 0000                  		bsr.w	DisplaySprite
0000A470 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A474 0640 00E0                  		addi.w	#$E0,d0
0000A478 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A47C 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000A47E 4E75                       		rts	
0000A480                            ; ===========================================================================
0000A480                            
0000A480                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000A480 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000A484 117C 0000 0024             		move.b	#0,$24(a0)
0000A48A 6000 F30A                  		bra.w	Obj24
0000A48E                            ; ===========================================================================
0000A48E                            
0000A48E                            Obj23_Delete:				; XREF: Obj23_Index
0000A48E 6100 0000                  		bsr.w	DeleteObject
0000A492 4E75                       		rts	
0000A494                            ; ===========================================================================
0000A494                            
0000A494                            Obj23_FromNewt:				; XREF: Obj23_Index
0000A494 4A28 0001                  		tst.b	1(a0)
0000A498 6AF4                       		bpl.s	Obj23_Delete
0000A49A 6100 0000                  		bsr.w	SpeedToPos
0000A49E                            
0000A49E                            Obj23_Animate2:				; XREF: Obj23_Main
0000A49E 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A4A4 6100 0000                  		bsr.w	AnimateSprite
0000A4A8 6100 0000                  		bsr.w	DisplaySprite
0000A4AC 4E75                       		rts	
0000A4AE                            ; ===========================================================================
0000A4AE                            Ani_obj22:
0000A4AE                            	include "_anim\obj22.asm"
0000A4AE                            ; ---------------------------------------------------------------------------
0000A4AE                            ; Animation script - Buzz Bomber enemy
0000A4AE                            ; ---------------------------------------------------------------------------
0000A4AE 0000                       		dc.w byte_9A1E-Ani_obj22
0000A4B0 0000                       		dc.w byte_9A22-Ani_obj22
0000A4B2 0000                       		dc.w byte_9A26-Ani_obj22
0000A4B4 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000A4B8 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000A4BC 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000A4C0                            		even
0000A4C0                            		even
0000A4C0                            
0000A4C0                            Ani_obj23:
0000A4C0                            	include "_anim\obj23.asm"
0000A4C0                            ; ---------------------------------------------------------------------------
0000A4C0                            ; Animation script - missile that Buzz Bomber throws
0000A4C0                            ; ---------------------------------------------------------------------------
0000A4C0 0000                       		dc.w byte_9A2E-Ani_obj23
0000A4C2 0000                       		dc.w byte_9A32-Ani_obj23
0000A4C4 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000A4C8 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000A4CC                            		even
0000A4CC                            		even
0000A4CC                            
0000A4CC                            ; ---------------------------------------------------------------------------
0000A4CC                            ; Sprite mappings - Buzz Bomber	enemy
0000A4CC                            ; ---------------------------------------------------------------------------
0000A4CC                            Map_obj22:
0000A4CC                            	include "_maps\obj22.asm"
0000A4CC                            ; ---------------------------------------------------------------------------
0000A4CC                            ; Sprite mappings - Buzz Bomber	enemy
0000A4CC                            ; ---------------------------------------------------------------------------
0000A4CC 0000 0000                  		dc.w byte_9A42-Map_obj22, byte_9A61-Map_obj22
0000A4D0 0000 0000                  		dc.w byte_9A80-Map_obj22, byte_9AA4-Map_obj22
0000A4D4 0000 0000                  		dc.w byte_9AC8-Map_obj22, byte_9AE7-Map_obj22
0000A4D8 06                         byte_9A42:	dc.b 6
0000A4D9 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000A4DE F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000A4E3 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000A4E8 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000A4ED F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000A4F2 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000A4F7 06                         byte_9A61:	dc.b 6
0000A4F8 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000A4FD F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000A502 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000A507 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000A50C F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000A511 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000A516 07                         byte_9A80:	dc.b 7
0000A517 0400 0030 0C               		dc.b 4,	0, 0, $30, $C
0000A51C F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000A521 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000A526 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000A52B 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000A530 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000A535 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000A53A 07                         byte_9AA4:	dc.b 7
0000A53B 0404 0031 0C               		dc.b 4,	4, 0, $31, $C
0000A540 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000A545 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000A54A 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000A54F 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000A554 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000A559 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000A55E 06                         byte_9AC8:	dc.b 6
0000A55F F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000A564 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000A569 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000A56E 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000A573 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000A578 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000A57D 04                         byte_9AE7:	dc.b 4
0000A57E F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000A583 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000A588 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000A58D 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000A592 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000A597 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000A59C                            		even
0000A59C                            		even
0000A59C                            
0000A59C                            ; ---------------------------------------------------------------------------
0000A59C                            ; Sprite mappings - missile that Buzz Bomber throws
0000A59C                            ; ---------------------------------------------------------------------------
0000A59C                            Map_obj23:
0000A59C                            	include "_maps\obj23.asm"
0000A59C                            ; ---------------------------------------------------------------------------
0000A59C                            ; Sprite mappings - missile that Buzz Bomber throws
0000A59C                            ; ---------------------------------------------------------------------------
0000A59C 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000A5A0 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000A5A4 01                         byte_9B0E:	dc.b 1
0000A5A5 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000A5AA 01                         byte_9B14:	dc.b 1
0000A5AB F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000A5B0 01                         byte_9B1A:	dc.b 1
0000A5B1 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000A5B6 01                         byte_9B20:	dc.b 1
0000A5B7 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000A5BC                            		even
0000A5BC                            		even
0000A5BC                            
0000A5BC                            ; ===========================================================================
0000A5BC                            ; ---------------------------------------------------------------------------
0000A5BC                            ; Object 25 - rings
0000A5BC                            ; ---------------------------------------------------------------------------
0000A5BC                            
0000A5BC                            Obj25:					; XREF: Obj_Index
0000A5BC 7000                       		moveq	#0,d0
0000A5BE 1028 0024                  		move.b	$24(a0),d0
0000A5C2 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000A5C6 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000A5CA                            ; ===========================================================================
0000A5CA 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000A5CC 0000                       		dc.w Obj25_Animate-Obj25_Index
0000A5CE 0000                       		dc.w Obj25_Collect-Obj25_Index
0000A5D0 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000A5D2 0000                       		dc.w Obj25_Delete-Obj25_Index
0000A5D4                            ; ---------------------------------------------------------------------------
0000A5D4                            ; Distances between rings (format: horizontal, vertical)
0000A5D4                            ; ---------------------------------------------------------------------------
0000A5D4 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000A5D6 1800                       		dc.b $18, 0		; horizontal normal
0000A5D8 2000                       		dc.b $20, 0		; horizontal wide
0000A5DA 0010                       		dc.b 0,	$10		; vertical tight
0000A5DC 0018                       		dc.b 0,	$18		; vertical normal
0000A5DE 0020                       		dc.b 0,	$20		; vertical wide
0000A5E0 1010                       		dc.b $10, $10		; diagonal
0000A5E2 1818                       		dc.b $18, $18
0000A5E4 2020                       		dc.b $20, $20
0000A5E6 F010                       		dc.b $F0, $10
0000A5E8 E818                       		dc.b $E8, $18
0000A5EA E020                       		dc.b $E0, $20
0000A5EC 1008                       		dc.b $10, 8
0000A5EE 1810                       		dc.b $18, $10
0000A5F0 F008                       		dc.b $F0, 8
0000A5F2 E810                       		dc.b $E8, $10
0000A5F4                            ; ===========================================================================
0000A5F4                            
0000A5F4                            Obj25_Main:				; XREF: Obj25_Index
0000A5F4 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A5F8 7000                       		moveq	#0,d0
0000A5FA 1028 0023                  		move.b	$23(a0),d0
0000A5FE 45F2 0002                  		lea	2(a2,d0.w),a2
0000A602 1812                       		move.b	(a2),d4
0000A604 1228 0028                  		move.b	$28(a0),d1
0000A608 1001                       		move.b	d1,d0
0000A60A 0241 0007                  		andi.w	#7,d1
0000A60E 0C41 0007                  		cmpi.w	#7,d1
0000A612 6600                       		bne.s	loc_9B80
0000A614 7206                       		moveq	#6,d1
0000A616                            
0000A616                            loc_9B80:
0000A616 4841                       		swap	d1
0000A618 323C 0000                  		move.w	#0,d1
0000A61C E808                       		lsr.b	#4,d0
0000A61E D040                       		add.w	d0,d0
0000A620 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A624 4885                       		ext.w	d5
0000A626 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A62A 4886                       		ext.w	d6
0000A62C 2248                       		movea.l	a0,a1
0000A62E 3428 0008                  		move.w	8(a0),d2
0000A632 3628 000C                  		move.w	$C(a0),d3
0000A636 E20C                       		lsr.b	#1,d4
0000A638 6500                       		bcs.s	loc_9C02
0000A63A 0892 0007                  		bclr	#7,(a2)
0000A63E 6000                       		bra.s	loc_9BBA
0000A640                            ; ===========================================================================
0000A640                            
0000A640                            Obj25_MakeRings:
0000A640 4841                       		swap	d1
0000A642 E20C                       		lsr.b	#1,d4
0000A644 6500                       		bcs.s	loc_9C02
0000A646 0892 0007                  		bclr	#7,(a2)
0000A64A 6100 0000                  		bsr.w	SingleObjLoad
0000A64E 6600                       		bne.s	loc_9C0E
0000A650                            
0000A650                            loc_9BBA:				; XREF: Obj25_Main
0000A650 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A654 5429 0024                  		addq.b	#2,$24(a1)
0000A658 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A65C 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A662 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A666 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A66E 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A674 137C 0004 0001             		move.b	#4,1(a1)
0000A67A 137C 0002 0018             		move.b	#2,$18(a1)
0000A680 137C 0047 0020             		move.b	#$47,$20(a1)
0000A686 137C 0008 0019             		move.b	#8,$19(a1)
0000A68C 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A692 1341 0034                  		move.b	d1,$34(a1)
0000A696                            
0000A696                            loc_9C02:
0000A696 5241                       		addq.w	#1,d1
0000A698 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A69A D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A69C 4841                       		swap	d1
0000A69E 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A6A2                            
0000A6A2                            loc_9C0E:
0000A6A2 0812 0000                  		btst	#0,(a2)
0000A6A6 6600 0000                  		bne.w	DeleteObject
0000A6AA                            
0000A6AA                            Obj25_Animate:				; XREF: Obj25_Index
0000A6AA 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A6B0 6100 0000                  		bsr.w	DisplaySprite
0000A6B4 3028 0032                  		move.w	$32(a0),d0
0000A6B8 0240 FF80                  		andi.w	#$FF80,d0
0000A6BC 3238 F700                  		move.w	($FFFFF700).w,d1
0000A6C0 0441 0080                  		subi.w	#$80,d1
0000A6C4 0241 FF80                  		andi.w	#$FF80,d1
0000A6C8 9041                       		sub.w	d1,d0
0000A6CA 0C40 0280                  		cmpi.w	#$280,d0
0000A6CE 6200                       		bhi.s	Obj25_Delete
0000A6D0 4E75                       		rts	
0000A6D2                            ; ===========================================================================
0000A6D2                            
0000A6D2                            Obj25_Collect:				; XREF: Obj25_Index
0000A6D2 5428 0024                  		addq.b	#2,$24(a0)
0000A6D6 117C 0000 0020             		move.b	#0,$20(a0)
0000A6DC 117C 0001 0018             		move.b	#1,$18(a0)
0000A6E2 6100 0000                  		bsr.w	CollectRing
0000A6E6 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A6EA 7000                       		moveq	#0,d0
0000A6EC 1028 0023                  		move.b	$23(a0),d0
0000A6F0 1228 0034                  		move.b	$34(a0),d1
0000A6F4 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A6F8                            
0000A6F8                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A6F8 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A6FE 6100 0000                  		bsr.w	AnimateSprite
0000A702 6000 0000                  		bra.w	DisplaySprite
0000A706                            ; ===========================================================================
0000A706                            
0000A706                            Obj25_Delete:				; XREF: Obj25_Index
0000A706 6000 0000                  		bra.w	DeleteObject
0000A70A                            
0000A70A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A70A                            
0000A70A                            
0000A70A                            CollectRing:				; XREF: Obj25_Collect
0000A70A 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A70E 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A714 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A718 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A71E 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A720 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A726 6700                       		beq.s	loc_9CA4
0000A728 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A72E 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A730 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A736 6600                       		bne.s	Obj25_PlaySnd
0000A738                            
0000A738                            loc_9CA4:
0000A738 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A73C 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A740 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A744                            
0000A744                            Obj25_PlaySnd:
0000A744 4EF9 0000 1476             		jmp	(PlaySound_Special).l
0000A74A                            ; End of function CollectRing
0000A74A                            
0000A74A                            ; ===========================================================================
0000A74A                            ; ---------------------------------------------------------------------------
0000A74A                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A74A                            ; ---------------------------------------------------------------------------
0000A74A                            
0000A74A                            Obj37:					; XREF: Obj_Index
0000A74A 7000                       		moveq	#0,d0
0000A74C 1028 0024                  		move.b	$24(a0),d0
0000A750 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A754 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A758                            ; ===========================================================================
0000A758 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A75A 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A75C 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A75E 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A760 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A762                            ; ===========================================================================
0000A762                            
0000A762                            Obj37_CountRings:			; XREF: Obj37_Index
0000A762 2248                       		movea.l	a0,a1
0000A764 7A00                       		moveq	#0,d5
0000A766 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A76A 7020                       		moveq	#32,d0
0000A76C BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A76E 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A770 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A772                            
0000A772                            loc_9CDE:
0000A772 5345                       		subq.w	#1,d5
0000A774 383C 0288                  		move.w	#$288,d4
0000A778 6000                       		bra.s	Obj37_MakeRings
0000A77A                            ; ===========================================================================
0000A77A                            
0000A77A                            Obj37_Loop:
0000A77A 6100 0000                  		bsr.w	SingleObjLoad
0000A77E 6600 0000                  		bne.w	Obj37_ResetCounter
0000A782                            
0000A782                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A782 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A786 5429 0024                  		addq.b	#2,$24(a1)
0000A78A 137C 0008 0016             		move.b	#8,$16(a1)
0000A790 137C 0008 0017             		move.b	#8,$17(a1)
0000A796 3368 0008 0008             		move.w	8(a0),8(a1)
0000A79C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A7A2 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A7AA 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A7B0 137C 0004 0001             		move.b	#4,1(a1)
0000A7B6 137C 0003 0018             		move.b	#3,$18(a1)
0000A7BC 137C 0047 0020             		move.b	#$47,$20(a1)
0000A7C2 137C 0008 0019             		move.b	#8,$19(a1)
0000A7C8 4A44                       		tst.w	d4
0000A7CA 6B00                       		bmi.s	loc_9D62
0000A7CC 3004                       		move.w	d4,d0
0000A7CE 6100 8C04                  		bsr.w	CalcSine
0000A7D2 3404                       		move.w	d4,d2
0000A7D4 E04A                       		lsr.w	#8,d2
0000A7D6 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000A7DA 6700                       		beq.s	@skiphalvingvel		; If not, branch and skip underwater checks
0000A7DC 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000A7E0 BC68 000C                  		cmp.w	$C(a0),d6		; Is the ring object underneath the water level?
0000A7E4 6E00                       		bgt.s	@skiphalvingvel		; If not, branch and skip underwater commands
0000A7E6 E240                       		asr.w	d0			; Half d0. Makes the ring's x_vel bounce to the left/right slower
0000A7E8 E241                       		asr.w	d1			; Half d1. Makes the ring's y_vel bounce up/down slower
0000A7EA                            
0000A7EA                            @skiphalvingvel:		
0000A7EA E560                       		asl.w	d2,d0
0000A7EC E561                       		asl.w	d2,d1
0000A7EE 3400                       		move.w	d0,d2
0000A7F0 3601                       		move.w	d1,d3
0000A7F2 0604 0010                  		addi.b	#$10,d4
0000A7F6 6400                       		bcc.s	loc_9D62
0000A7F8 0444 0080                  		subi.w	#$80,d4
0000A7FC 6400                       		bcc.s	loc_9D62
0000A7FE 383C 0288                  		move.w	#$288,d4
0000A802                            
0000A802                            loc_9D62:
0000A802 3342 0010                  		move.w	d2,$10(a1)
0000A806 3343 0012                  		move.w	d3,$12(a1)
0000A80A 4442                       		neg.w	d2
0000A80C 4444                       		neg.w	d4
0000A80E 51CD FF6A                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A812                            
0000A812                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A812 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A818 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A81E 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A824 70FF                       		moveq	#-1,d0			; Move #-1 to d0
0000A826 1140 001F                  		move.b	d0,$1F(a0)	; Move d0 to new timer
0000A82A 11C0 FEC6                  		move.b	d0,($FFFFFEC6).w	; Move d0 to old timer (for animated purposes)
0000A82E 303C 00C6                  		move.w	#$C6,d0
0000A832 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A838                            
0000A838                            Obj37_Bounce:				; XREF: Obj37_Index
0000A838 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A83E 6100 0000                  		bsr.w	SpeedToPos
0000A842 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A848 6B00                       		bmi.s	Obj37_ChkDel
0000A84A 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000A84E 6700                       		beq.s	@skipbounceslow		; If not, branch and skip underwater checks
0000A850 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000A854 BC68 000C                  		cmp.w	$C(a0),d6		; Is the ring object underneath the water level?
0000A858 6E00                       		bgt.s	@skipbounceslow		; If not, branch and skip underwater commands
0000A85A 0468 000E 0012             		subi.w	#$E,$12(a0)		; Reduce gravity by $E ($18-$E=$A), giving the underwater effect
0000A860                            
0000A860                            @skipbounceslow:
0000A860 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A864 D007                       		add.b	d7,d0
0000A866 0200 0003                  		andi.b	#3,d0
0000A86A 6600                       		bne.s	Obj37_ChkDel
0000A86C 4EB9 0000 0000             		jsr	ObjHitFloor
0000A872 4A41                       		tst.w	d1
0000A874 6A00                       		bpl.s	Obj37_ChkDel
0000A876 D368 000C                  		add.w	d1,$C(a0)
0000A87A 3028 0012                  		move.w	$12(a0),d0
0000A87E E440                       		asr.w	#2,d0
0000A880 9168 0012                  		sub.w	d0,$12(a0)
0000A884 4468 0012                  		neg.w	$12(a0)
0000A888                            
0000A888                            Obj37_ChkDel:
0000A888 5328 001F                  		subq.b  #1,$1F(a0)  ; Subtract 1   ; RHS Ring Timer fix
0000A88C 6700 0000                                  beq.w   DeleteObject       ; If 0, delete ; RHS Ring Timer fix
0000A890 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A894 0640 00E0                  		addi.w	#$E0,d0
0000A898 B068 000C                  		cmp.w	$C(a0),d0	   ; has object moved below level boundary?
0000A89C 6500                       		bcs.s	Obj37_Delete	   ; if yes, branch	
0000A89E                            ;Mercury Lost Rings Flash
0000A89E 0828 0000 001F             		btst	#0, $1F(a0) ; Test the first bit of the timer, so rings flash every other frame.
0000A8A4 6700 0000                  		beq.w	DisplaySprite      ; If the bit is 0, the ring will appear.
0000A8A8 0C28 0050 001F             		cmpi.b	#80,$1F(a0) ; Rings will flash during last 80 steps of their life.
0000A8AE 6200 0000                  		bhi.w	DisplaySprite      ; If the timer is higher than 80, obviously the rings will STAY visible.
0000A8B2 4E75                       		rts
0000A8B4                            ;end Lost Rings Flash
0000A8B4                            ; ===========================================================================
0000A8B4                            
0000A8B4                            Obj37_Collect:				; XREF: Obj37_Index
0000A8B4 5428 0024                  		addq.b	#2,$24(a0)
0000A8B8 117C 0000 0020             		move.b	#0,$20(a0)
0000A8BE 117C 0001 0018             		move.b	#1,$18(a0)
0000A8C4 6100 FE44                  		bsr.w	CollectRing
0000A8C8                            
0000A8C8                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A8C8 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A8CE 6100 0000                  		bsr.w	AnimateSprite
0000A8D2 6000 0000                  		bra.w	DisplaySprite
0000A8D6                            ; ===========================================================================
0000A8D6                            
0000A8D6                            Obj37_Delete:				; XREF: Obj37_Index
0000A8D6 6000 0000                  		bra.w	DeleteObject
0000A8DA                            ; ===========================================================================
0000A8DA                            ; ---------------------------------------------------------------------------
0000A8DA                            ; Object 4B - giant ring for entry to special stage
0000A8DA                            ; ---------------------------------------------------------------------------
0000A8DA                            
0000A8DA                            Obj4B:					; XREF: Obj_Index
0000A8DA 7000                       		moveq	#0,d0
0000A8DC 1028 0024                  		move.b	$24(a0),d0
0000A8E0 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A8E4 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A8E8                            ; ===========================================================================
0000A8E8 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A8EA 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A8EC 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A8EE 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A8F0                            ; ===========================================================================
0000A8F0                            
0000A8F0                            Obj4B_Main:				; XREF: Obj4B_Index
0000A8F0 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A8F8 317C 2400 0002             		move.w	#$2400,2(a0)
0000A8FE 0028 0004 0001             		ori.b	#4,1(a0)
0000A904 117C 0040 0019             		move.b	#$40,$19(a0)
0000A90A 4A28 0001                  		tst.b	1(a0)
0000A90E 6A00                       		bpl.s	Obj4B_Animate
0000A910 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A916 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A91A 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A920 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A922 4E75                       		rts	
0000A924                            ; ===========================================================================
0000A924                            
0000A924                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A924 5428 0024                  		addq.b	#2,$24(a0)
0000A928 117C 0002 0018             		move.b	#2,$18(a0)
0000A92E 117C 0052 0020             		move.b	#$52,$20(a0)
0000A934 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A93A                            
0000A93A                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A93A 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A940 3028 0008                  		move.w	8(a0),d0
0000A944 0240 FF80                  		andi.w	#$FF80,d0
0000A948 3238 F700                  		move.w	($FFFFF700).w,d1
0000A94C 0441 0080                  		subi.w	#$80,d1
0000A950 0241 FF80                  		andi.w	#$FF80,d1
0000A954 9041                       		sub.w	d1,d0
0000A956 0C40 0280                  		cmpi.w	#$280,d0
0000A95A 6200 0000                  		bhi.w	DeleteObject
0000A95E 6000 0000                  		bra.w	DisplaySprite
0000A962                            ; ===========================================================================
0000A962                            
0000A962                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A962 5528 0024                  		subq.b	#2,$24(a0)
0000A966 117C 0000 0020             		move.b	#0,$20(a0)
0000A96C 6100 0000                  		bsr.w	SingleObjLoad
0000A970 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A974 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A978 3368 0008 0008             		move.w	8(a0),8(a1)
0000A97E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A984 2348 003C                  		move.l	a0,$3C(a1)
0000A988 3038 D008                  		move.w	($FFFFD008).w,d0
0000A98C B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A990 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A992 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A998                            
0000A998                            Obj4B_PlaySnd:
0000A998 303C 00C3                  		move.w	#$C3,d0
0000A99C 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A9A2 6096                       		bra.s	Obj4B_Animate
0000A9A4                            ; ===========================================================================
0000A9A4                            
0000A9A4                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A9A4 6000 0000                  		bra.w	DeleteObject
0000A9A8                            ; ===========================================================================
0000A9A8                            ; ---------------------------------------------------------------------------
0000A9A8                            ; Object 7C - flash effect when	you collect the	giant ring
0000A9A8                            ; ---------------------------------------------------------------------------
0000A9A8                            
0000A9A8                            Obj7C:					; XREF: Obj_Index
0000A9A8 7000                       		moveq	#0,d0
0000A9AA 1028 0024                  		move.b	$24(a0),d0
0000A9AE 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A9B2 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A9B6                            ; ===========================================================================
0000A9B6 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A9B8 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A9BA 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A9BC                            ; ===========================================================================
0000A9BC                            
0000A9BC                            Obj7C_Main:				; XREF: Obj7C_Index
0000A9BC 5428 0024                  		addq.b	#2,$24(a0)
0000A9C0 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A9C8 317C 2462 0002             		move.w	#$2462,2(a0)
0000A9CE 0028 0004 0001             		ori.b	#4,1(a0)
0000A9D4 117C 0000 0018             		move.b	#0,$18(a0)
0000A9DA 117C 0020 0019             		move.b	#$20,$19(a0)
0000A9E0 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A9E6                            
0000A9E6                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A9E6 6100                       		bsr.s	Obj7C_Collect
0000A9E8 3028 0008                  		move.w	8(a0),d0
0000A9EC 0240 FF80                  		andi.w	#$FF80,d0
0000A9F0 3238 F700                  		move.w	($FFFFF700).w,d1
0000A9F4 0441 0080                  		subi.w	#$80,d1
0000A9F8 0241 FF80                  		andi.w	#$FF80,d1
0000A9FC 9041                       		sub.w	d1,d0
0000A9FE 0C40 0280                  		cmpi.w	#$280,d0
0000AA02 6200 0000                  		bhi.w	DeleteObject
0000AA06 6000 0000                  		bra.w	DisplaySprite
0000AA0A                            
0000AA0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AA0A                            
0000AA0A                            
0000AA0A                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000AA0A 5328 001E                  		subq.b	#1,$1E(a0)
0000AA0E 6A00                       		bpl.s	locret_9F76
0000AA10 117C 0001 001E             		move.b	#1,$1E(a0)
0000AA16 5228 001A                  		addq.b	#1,$1A(a0)
0000AA1A 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000AA20 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000AA22 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000AA28 6600                       		bne.s	locret_9F76	; if not, branch
0000AA2A 2268 003C                  		movea.l	$3C(a0),a1
0000AA2E 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000AA34 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000AA3A 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000AA40 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000AA44 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000AA48                            
0000AA48                            locret_9F76:
0000AA48 4E75                       		rts	
0000AA4A                            ; ===========================================================================
0000AA4A                            
0000AA4A                            Obj7C_End:				; XREF: Obj7C_Collect
0000AA4A 5428 0024                  		addq.b	#2,$24(a0)
0000AA4E 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000AA54 588F                       		addq.l	#4,sp
0000AA56 4E75                       		rts	
0000AA58                            ; End of function Obj7C_Collect
0000AA58                            
0000AA58                            ; ===========================================================================
0000AA58                            
0000AA58                            Obj7C_Delete:				; XREF: Obj7C_Index
0000AA58 6000 0000                  		bra.w	DeleteObject
0000AA5C                            ; ===========================================================================
0000AA5C                            Ani_obj25:
0000AA5C                            	include "_anim\obj25.asm"
0000AA5C                            ; ---------------------------------------------------------------------------
0000AA5C                            ; Animation script - ring
0000AA5C                            ; ---------------------------------------------------------------------------
0000AA5C 0000                       		dc.w byte_9F8C-Ani_obj25
0000AA5E 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000AA64                            		even
0000AA64                            		even
0000AA64                            
0000AA64                            ; ---------------------------------------------------------------------------
0000AA64                            ; Sprite mappings - rings
0000AA64                            ; ---------------------------------------------------------------------------
0000AA64                            Map_obj25:
0000AA64                            	include "_maps\obj25.asm"
0000AA64                            ; ---------------------------------------------------------------------------
0000AA64                            ; Sprite mappings - rings
0000AA64                            ; ---------------------------------------------------------------------------
0000AA64 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000AA68 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000AA6C 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000AA70 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000AA74 01                         byte_9FA2:	dc.b 1
0000AA75 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000AA7A 01                         byte_9FA8:	dc.b 1
0000AA7B F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000AA80 01                         byte_9FAE:	dc.b 1
0000AA81 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000AA86 01                         byte_9FB4:	dc.b 1
0000AA87 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000AA8C 01                         byte_9FBA:	dc.b 1
0000AA8D F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000AA92 01                         byte_9FC0:	dc.b 1
0000AA93 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000AA98 01                         byte_9FC6:	dc.b 1
0000AA99 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000AA9E 01                         byte_9FCC:	dc.b 1
0000AA9F F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000AAA4                            		even
0000AAA4                            		even
0000AAA4                            
0000AAA4                            ; ---------------------------------------------------------------------------
0000AAA4                            ; Sprite mappings - giant ring
0000AAA4                            ; ---------------------------------------------------------------------------
0000AAA4                            Map_obj4B:
0000AAA4                            	include "_maps\obj4B.asm"
0000AAA4                            ; ---------------------------------------------------------------------------
0000AAA4                            ; Sprite mappings - giant ring
0000AAA4                            ; ---------------------------------------------------------------------------
0000AAA4 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000AAA8 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000AAAC 0A                         byte_9FDA:	dc.b $A
0000AAAD E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000AAB2 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000AAB7 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000AABC E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000AAC1 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000AAC6 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000AACB 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000AAD0 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000AAD5 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000AADA 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000AADF 08                         byte_A00D:	dc.b 8
0000AAE0 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000AAE5 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000AAEA E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000AAEF F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000AAF4 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000AAF9 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000AAFE 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000AB03 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000AB08 04                         byte_A036:	dc.b 4
0000AB09 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000AB0E E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000AB13 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000AB18 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000AB1D 08                         byte_A04B:	dc.b 8
0000AB1E E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000AB23 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000AB28 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000AB2D F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000AB32 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000AB37 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000AB3C 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000AB41 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000AB46                            		even
0000AB46                            		even
0000AB46                            
0000AB46                            ; ---------------------------------------------------------------------------
0000AB46                            ; Sprite mappings - flash effect when you collect the giant ring
0000AB46                            ; ---------------------------------------------------------------------------
0000AB46                            Map_obj7C:
0000AB46                            	include "_maps\obj7C.asm"
0000AB46                            ; ---------------------------------------------------------------------------
0000AB46                            ; Sprite mappings - flash effect when you collect the giant ring
0000AB46                            ; ---------------------------------------------------------------------------
0000AB46 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000AB4A 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000AB4E 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000AB52 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000AB56 02                         byte_A084:	dc.b 2
0000AB57 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000AB5C 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000AB61 04                         byte_A08F:	dc.b 4
0000AB62 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000AB67 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000AB6C 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000AB71 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000AB76 04                         byte_A0A4:	dc.b 4
0000AB77 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000AB7C E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000AB81 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000AB86 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000AB8B 04                         byte_A0B9:	dc.b 4
0000AB8C E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000AB91 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000AB96 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000AB9B 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000ABA0 04                         byte_A0CE:	dc.b 4
0000ABA1 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000ABA6 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000ABAB 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000ABB0 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000ABB5 04                         byte_A0E3:	dc.b 4
0000ABB6 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000ABBB E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000ABC0 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000ABC5 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000ABCA 02                         byte_A0F8:	dc.b 2
0000ABCB E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000ABD0 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000ABD5 04                         byte_A103:	dc.b 4
0000ABD6 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000ABDB E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000ABE0 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000ABE5 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000ABEA                            		even
0000ABEA                            		even
0000ABEA                            
0000ABEA                            ; ===========================================================================
0000ABEA                            ; ---------------------------------------------------------------------------
0000ABEA                            ; Object 26 - monitors
0000ABEA                            ; ---------------------------------------------------------------------------
0000ABEA                            
0000ABEA                            Obj26:					; XREF: Obj_Index
0000ABEA 7000                       		moveq	#0,d0
0000ABEC 1028 0024                  		move.b	$24(a0),d0
0000ABF0 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000ABF4 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000ABF8                            ; ===========================================================================
0000ABF8 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000ABFA 0000                       		dc.w Obj26_Solid-Obj26_Index
0000ABFC 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000ABFE 0000                       		dc.w Obj26_Animate-Obj26_Index
0000AC00 0000                       		dc.w Obj26_Display-Obj26_Index
0000AC02                            ; ===========================================================================
0000AC02                            
0000AC02                            Obj26_Main:				; XREF: Obj26_Index
0000AC02 5428 0024                  		addq.b	#2,$24(a0)
0000AC06 117C 000E 0016             		move.b	#$E,$16(a0)
0000AC0C 117C 000E 0017             		move.b	#$E,$17(a0)
0000AC12 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000AC1A 317C 0680 0002             		move.w	#$680,2(a0)
0000AC20 117C 0004 0001             		move.b	#4,1(a0)
0000AC26 117C 0003 0018             		move.b	#3,$18(a0)
0000AC2C 117C 000F 0019             		move.b	#$F,$19(a0)
0000AC32 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000AC36 7000                       		moveq	#0,d0
0000AC38 1028 0023                  		move.b	$23(a0),d0
0000AC3C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000AC42 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000AC48 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000AC4A 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000AC50 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000AC56 4E75                       		rts	
0000AC58                            ; ===========================================================================
0000AC58                            
0000AC58                            Obj26_NotBroken:			; XREF: Obj26_Main
0000AC58 117C 0046 0020             		move.b	#$46,$20(a0)
0000AC5E 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000AC64                            
0000AC64                            Obj26_Solid:				; XREF: Obj26_Index
0000AC64 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000AC68 6700                       		beq.s	loc_A1EC	; if not, branch
0000AC6A 5500                       		subq.b	#2,d0
0000AC6C 6600                       		bne.s	Obj26_Fall
0000AC6E 7200                       		moveq	#0,d1
0000AC70 1228 0019                  		move.b	$19(a0),d1
0000AC74 0641 000B                  		addi.w	#$B,d1
0000AC78 6100 D3FC                  		bsr.w	ExitPlatform
0000AC7C 0829 0003 0022             		btst	#3,$22(a1)
0000AC82 6600 0000                  		bne.w	loc_A1BC
0000AC86 4228 0025                  		clr.b	$25(a0)
0000AC8A 6000 0000                  		bra.w	Obj26_Animate
0000AC8E                            ; ===========================================================================
0000AC8E                            
0000AC8E                            loc_A1BC:				; XREF: Obj26_Solid
0000AC8E 363C 0010                  		move.w	#$10,d3
0000AC92 3428 0008                  		move.w	8(a0),d2
0000AC96 6100 D93C                  		bsr.w	MvSonicOnPtfm
0000AC9A 6000 0000                  		bra.w	Obj26_Animate
0000AC9E                            ; ===========================================================================
0000AC9E                            
0000AC9E                            Obj26_Fall:				; XREF: Obj26_Solid
0000AC9E 6100 0000                  		bsr.w	ObjectFall
0000ACA2 4EB9 0000 0000             		jsr	ObjHitFloor
0000ACA8 4A41                       		tst.w	d1
0000ACAA 6A00 0000                  		bpl.w	Obj26_Animate
0000ACAE D368 000C                  		add.w	d1,$C(a0)
0000ACB2 4268 0012                  		clr.w	$12(a0)
0000ACB6 4228 0025                  		clr.b	$25(a0)
0000ACBA 6000 0000                  		bra.w	Obj26_Animate
0000ACBE                            ; ===========================================================================
0000ACBE                            
0000ACBE                            loc_A1EC:				; XREF: Obj26_Solid
0000ACBE 323C 001A                  		move.w	#$1A,d1
0000ACC2 343C 000F                  		move.w	#$F,d2
0000ACC6 6100 0000                  		bsr.w	Obj26_SolidSides
0000ACCA 6700 0000                  		beq.w	loc_A25C
0000ACCE 4A69 0012                  		tst.w	$12(a1)
0000ACD2 6B00                       		bmi.s	loc_A20A
0000ACD4 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000ACDA 6700                       		beq.s	loc_A25C	; if yes, branch
0000ACDC 0C29 001F 001C             		cmpi.b	#$1F,$1C(a1)	; is Sonic spin-dashing?
0000ACE2 6700                       		beq.s	loc_A25C	; if yes, branch
0000ACE4                            
0000ACE4                            loc_A20A:
0000ACE4 4A41                       		tst.w	d1
0000ACE6 6A00                       		bpl.s	loc_A220
0000ACE8 9769 000C                  		sub.w	d3,$C(a1)
0000ACEC 6100 D276                  		bsr.w	loc_74AE
0000ACF0 117C 0002 0025             		move.b	#2,$25(a0)
0000ACF6 6000 0000                  		bra.w	Obj26_Animate
0000ACFA                            ; ===========================================================================
0000ACFA                            
0000ACFA                            loc_A220:
0000ACFA 4A40                       		tst.w	d0
0000ACFC 6700 0000                  		beq.w	loc_A246
0000AD00 6B00                       		bmi.s	loc_A230
0000AD02 4A69 0010                  		tst.w	$10(a1)
0000AD06 6B00                       		bmi.s	loc_A246
0000AD08 6000                       		bra.s	loc_A236
0000AD0A                            ; ===========================================================================
0000AD0A                            
0000AD0A                            loc_A230:
0000AD0A 4A69 0010                  		tst.w	$10(a1)
0000AD0E 6A00                       		bpl.s	loc_A246
0000AD10                            
0000AD10                            loc_A236:
0000AD10 9169 0008                  		sub.w	d0,8(a1)
0000AD14 337C 0000 0014             		move.w	#0,$14(a1)
0000AD1A 337C 0000 0010             		move.w	#0,$10(a1)
0000AD20                            
0000AD20                            loc_A246:
0000AD20 0829 0001 0022             		btst	#1,$22(a1)
0000AD26 6600                       		bne.s	loc_A26A
0000AD28 08E9 0005 0022             		bset	#5,$22(a1)
0000AD2E 08E8 0005 0022             		bset	#5,$22(a0)
0000AD34 6000                       		bra.s	Obj26_Animate
0000AD36                            ; ===========================================================================
0000AD36                            
0000AD36                            loc_A25C:
0000AD36 0828 0005 0022             		btst	#5,$22(a0)
0000AD3C 6700                       		beq.s	Obj26_Animate
0000AD3E 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
0000AD44 6700                       		beq.s	loc_A26A
0000AD46 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
0000AD4C 6700                       		beq.s	loc_A26A
0000AD4E 337C 0001 001C             		move.w	#1,$1C(a1)
0000AD54                            
0000AD54                            loc_A26A:
0000AD54 08A8 0005 0022             		bclr	#5,$22(a0)
0000AD5A 08A9 0005 0022             		bclr	#5,$22(a1)
0000AD60                            
0000AD60                            Obj26_Animate:				; XREF: Obj26_Index
0000AD60 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000AD66 6100 0000                  		bsr.w	AnimateSprite
0000AD6A                            
0000AD6A                            Obj26_Display:				; XREF: Obj26_Index
0000AD6A 6100 0000                  		bsr.w	DisplaySprite
0000AD6E 3028 0008                  		move.w	8(a0),d0
0000AD72 0240 FF80                  		andi.w	#$FF80,d0
0000AD76 3238 F700                  		move.w	($FFFFF700).w,d1
0000AD7A 0441 0080                  		subi.w	#$80,d1
0000AD7E 0241 FF80                  		andi.w	#$FF80,d1
0000AD82 9041                       		sub.w	d1,d0
0000AD84 0C40 0280                  		cmpi.w	#$280,d0
0000AD88 6200 0000                  		bhi.w	DeleteObject
0000AD8C 4E75                       		rts	
0000AD8E                            ; ===========================================================================
0000AD8E                            
0000AD8E                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000AD8E 5428 0024                  		addq.b	#2,$24(a0)
0000AD92 117C 0000 0020             		move.b	#0,$20(a0)
0000AD98 6100 0000                  		bsr.w	SingleObjLoad
0000AD9C 6600                       		bne.s	Obj26_Explode
0000AD9E 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000ADA2 3368 0008 0008             		move.w	8(a0),8(a1)
0000ADA8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000ADAE 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000ADB4                            
0000ADB4                            Obj26_Explode:
0000ADB4 6100 0000                  		bsr.w	SingleObjLoad
0000ADB8 6600                       		bne.s	Obj26_SetBroken
0000ADBA 12BC 0027                  		move.b	#$27,0(a1)	; load explosion object
0000ADBE 5429 0024                  		addq.b	#2,$24(a1)
0000ADC2 3368 0008 0008             		move.w	8(a0),8(a1)
0000ADC8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000ADCE                            
0000ADCE                            Obj26_SetBroken:
0000ADCE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000ADD2 7000                       		moveq	#0,d0
0000ADD4 1028 0023                  		move.b	$23(a0),d0
0000ADD8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000ADDE 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000ADE4 6000 0000                  		bra.w	DisplaySprite
0000ADE8                            ; ===========================================================================
0000ADE8                            ; ---------------------------------------------------------------------------
0000ADE8                            ; Object 2E - contents of monitors
0000ADE8                            ; ---------------------------------------------------------------------------
0000ADE8                            
0000ADE8                            Obj2E:					; XREF: Obj_Index
0000ADE8 7000                       		moveq	#0,d0
0000ADEA 1028 0024                  		move.b	$24(a0),d0
0000ADEE 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000ADF2 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000ADF6 6000 0000                  		bra.w	DisplaySprite
0000ADFA                            ; ===========================================================================
0000ADFA 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000ADFC 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000ADFE 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000AE00                            ; ===========================================================================
0000AE00                            
0000AE00                            Obj2E_Main:				; XREF: Obj2E_Index
0000AE00 5428 0024                  		addq.b	#2,$24(a0)
0000AE04 317C 0680 0002             		move.w	#$680,2(a0)
0000AE0A 117C 0024 0001             		move.b	#$24,1(a0)
0000AE10 117C 0003 0018             		move.b	#3,$18(a0)
0000AE16 117C 0008 0019             		move.b	#8,$19(a0)
0000AE1C 317C FD00 0012             		move.w	#-$300,$12(a0)
0000AE22 7000                       		moveq	#0,d0
0000AE24 1028 001C                  		move.b	$1C(a0),d0
0000AE28 5400                       		addq.b	#2,d0
0000AE2A 1140 001A                  		move.b	d0,$1A(a0)
0000AE2E 227C 0000 0000             		movea.l	#Map_obj26,a1
0000AE34 D000                       		add.b	d0,d0
0000AE36 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000AE3A 5249                       		addq.w	#1,a1
0000AE3C 2149 0004                  		move.l	a1,4(a0)
0000AE40                            
0000AE40                            Obj2E_Move:				; XREF: Obj2E_Index
0000AE40 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000AE44 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000AE48 6100 0000                  		bsr.w	SpeedToPos
0000AE4C 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000AE52 4E75                       		rts	
0000AE54                            ; ===========================================================================
0000AE54                            
0000AE54                            Obj2E_ChkEggman:    ; XREF: Obj2E_Move
0000AE54 5428 0024                          addq.b    #2,$24(a0)
0000AE58 317C 001D 001E                     move.w    #29,$1E(a0)
0000AE5E 1028 001C                          move.b    $1C(a0),d0
0000AE62 0C00 0001                          cmpi.b    #1,d0; does monitor contain Eggman?
0000AE66 6600                               bne.s    Obj2E_ChkSonic ; if not, go and check for the next monitor type (1-up icon)
0000AE68 2248                               move.l    a0,a1 ; move a0 to a1, because Touch_ChkHurt wants the damaging object to be in a1
0000AE6A 2F08                               move.l    a0,-(sp) ; push a0 on the stack, and decrement stack pointer
0000AE6C 41F8 D000                          lea    ($FFFFD000).w,a0 ; put Sonic's ram address in a0, because Touch_ChkHurt wants the damaged object to be in a0
0000AE70 4EB9 0000 0000                     jsr    Sonic_CheckGoSuper ; run the Touch_ChkHurt routine
0000AE76 205F                               move.l    (sp)+,a0 ; pop the previous value of a0 from the stack, and increment stack pointer
0000AE78 4E75                               rts ; The Eggman monitor now does something!
0000AE7A                            
0000AE7A                            ; ===========================================================================
0000AE7A                            
0000AE7A                            Obj2E_ChkSonic:
0000AE7A 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000AE7E 6600                       		bne.s	Obj2E_ChkShoes
0000AE80                            
0000AE80                            ExtraLife:
0000AE80 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000AE84 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000AE88 303C 0088                  		move.w	#$88,d0
0000AE8C 4EF9 0000 1470             		jmp	(PlaySound).l	; play extra life music
0000AE92                            ; ===========================================================================
0000AE92                            
0000AE92                            Obj2E_ChkShoes:
0000AE92 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000AE96 6600                       		bne.s	Obj2E_ChkShield
0000AE98 0C38 0001 FE19             		cmpi.b #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
0000AE9E 6700 0000                                  beq Obj2E_NoMusic		
0000AEA2 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000AEA8 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000AEAE 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000AEB4 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000AEBA 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000AEC0 303C 009E                  		move.w	#$9E,d0
0000AEC4 4EF9 0000 1470             		jmp	(PlaySound).l	; Speed	up the music
0000AECA                            ; ===========================================================================
0000AECA                            
0000AECA                            Obj2E_ChkShield:
0000AECA 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000AECE 6600                       		bne.s	Obj2E_ChkInvinc
0000AED0 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000AED6 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000AEDC 303C 00AF                  		move.w	#$AF,d0
0000AEE0 4EF9 0000 1470             		jmp	(PlaySound).l	; play shield sound
0000AEE6                            ; ===========================================================================
0000AEE6                            
0000AEE6                            Obj2E_ChkInvinc:
0000AEE6 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000AEEA 6600                       		bne.s	Obj2E_ChkRings
0000AEEC 0C38 0001 FE19             		cmpi.b #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
0000AEF2 6700 0000                                  beq Obj2E_NoMusic		
0000AEF6 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000AEFC 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000AF02 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000AF08 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000AF0E 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000AF14 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000AF1A 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000AF20 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000AF26 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000AF2C 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000AF32 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000AF36 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000AF38 303C 0087                  		move.w	#$87,d0
0000AF3C 4EF9 0000 1470             		jmp	(PlaySound).l	; play invincibility music
0000AF42                            ; ===========================================================================
0000AF42                            
0000AF42                            Obj2E_NoMusic:
0000AF42 4E75                       		rts	
0000AF44                            ; ===========================================================================
0000AF44                            
0000AF44                            Obj2E_ChkRings:
0000AF44 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000AF48 6600                       		bne.s	Obj2E_ChkS
0000AF4A 0678 004A FE20             		addi.w	#$4A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000AF50 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000AF56 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000AF5C 6500                       		bcs.s	Obj2E_RingSound
0000AF5E 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000AF64 6700 FF1A                  		beq.w	ExtraLife
0000AF68 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000AF6E 6500                       		bcs.s	Obj2E_RingSound
0000AF70 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000AF76 6700 FF08                  		beq.w	ExtraLife
0000AF7A                            
0000AF7A                            Obj2E_RingSound:
0000AF7A 303C 00B5                  		move.w	#$B5,d0
0000AF7E 4EF9 0000 1470             		jmp	(PlaySound).l	; play ring sound
0000AF84                            ; ===========================================================================
0000AF84                            
0000AF84                            Obj2E_ChkS:
0000AF84 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000AF88 6600                       		bne.s	Obj2E_ChkEnd
0000AF8A 4E71                       		nop	
0000AF8C                            
0000AF8C                            Obj2E_ChkEnd:
0000AF8C 4E75                       		rts			; 'S' and goggles monitors do nothing
0000AF8E                            ; ===========================================================================
0000AF8E                            
0000AF8E                            Obj2E_Delete:				; XREF: Obj2E_Index
0000AF8E 5368 001E                  		subq.w	#1,$1E(a0)
0000AF92 6B00 0000                  		bmi.w	DeleteObject
0000AF96 4E75                       		rts	
0000AF98                            ; ---------------------------------------------------------------------------
0000AF98                            ; Subroutine to	make the sides of a monitor solid
0000AF98                            ; ---------------------------------------------------------------------------
0000AF98                            
0000AF98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AF98                            
0000AF98                            
0000AF98                            Obj26_SolidSides:			; XREF: loc_A1EC
0000AF98 43F8 D000                  		lea	($FFFFD000).w,a1
0000AF9C 3029 0008                  		move.w	8(a1),d0
0000AFA0 9068 0008                  		sub.w	8(a0),d0
0000AFA4 D041                       		add.w	d1,d0
0000AFA6 6B00                       		bmi.s	loc_A4E6
0000AFA8 3601                       		move.w	d1,d3
0000AFAA D643                       		add.w	d3,d3
0000AFAC B043                       		cmp.w	d3,d0
0000AFAE 6200                       		bhi.s	loc_A4E6
0000AFB0 1629 0016                  		move.b	$16(a1),d3
0000AFB4 4883                       		ext.w	d3
0000AFB6 D443                       		add.w	d3,d2
0000AFB8 3629 000C                  		move.w	$C(a1),d3
0000AFBC 9668 000C                  		sub.w	$C(a0),d3
0000AFC0 D642                       		add.w	d2,d3
0000AFC2 6B00                       		bmi.s	loc_A4E6
0000AFC4 D442                       		add.w	d2,d2
0000AFC6 B642                       		cmp.w	d2,d3
0000AFC8 6400                       		bcc.s	loc_A4E6
0000AFCA 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000AFCE 6B00                       		bmi.s	loc_A4E6
0000AFD0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000AFD6 6400                       		bcc.s	loc_A4E6
0000AFD8 4A78 FE08                  		tst.w	($FFFFFE08).w
0000AFDC 6600                       		bne.s	loc_A4E6
0000AFDE B240                       		cmp.w	d0,d1
0000AFE0 6400                       		bcc.s	loc_A4DC
0000AFE2 D241                       		add.w	d1,d1
0000AFE4 9041                       		sub.w	d1,d0
0000AFE6                            
0000AFE6                            loc_A4DC:
0000AFE6 0C43 0010                  		cmpi.w	#$10,d3
0000AFEA 6500                       		bcs.s	loc_A4EA
0000AFEC                            
0000AFEC                            loc_A4E2:
0000AFEC 7201                       		moveq	#1,d1
0000AFEE 4E75                       		rts	
0000AFF0                            ; ===========================================================================
0000AFF0                            
0000AFF0                            loc_A4E6:
0000AFF0 7200                       		moveq	#0,d1
0000AFF2 4E75                       		rts	
0000AFF4                            ; ===========================================================================
0000AFF4                            
0000AFF4                            loc_A4EA:
0000AFF4 7200                       		moveq	#0,d1
0000AFF6 1228 0019                  		move.b	$19(a0),d1
0000AFFA 5841                       		addq.w	#4,d1
0000AFFC 3401                       		move.w	d1,d2
0000AFFE D442                       		add.w	d2,d2
0000B000 D269 0008                  		add.w	8(a1),d1
0000B004 9268 0008                  		sub.w	8(a0),d1
0000B008 6BE2                       		bmi.s	loc_A4E2
0000B00A B242                       		cmp.w	d2,d1
0000B00C 64DE                       		bcc.s	loc_A4E2
0000B00E 72FF                       		moveq	#-1,d1
0000B010 4E75                       		rts	
0000B012                            ; End of function Obj26_SolidSides
0000B012                            
0000B012                            ; ===========================================================================
0000B012                            Ani_obj26:
0000B012                            	include "_anim\obj26.asm"
0000B012                            ; ---------------------------------------------------------------------------
0000B012                            ; Animation script - monitors
0000B012                            ; ---------------------------------------------------------------------------
0000B012 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000B018 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000B01E 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000B024 0000                       		dc.w byte_A582-Ani_obj26
0000B026 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000B02C 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000B038 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000B044 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000B050 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000B05C 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000B068 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000B074 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000B080 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000B08C 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000B094                            		even
0000B094                            		even
0000B094                            
0000B094                            ; ---------------------------------------------------------------------------
0000B094                            ; Sprite mappings - monitors
0000B094                            ; ---------------------------------------------------------------------------
0000B094                            Map_obj26:
0000B094                            	include "_maps\obj26.asm"
0000B094                            ; ---------------------------------------------------------------------------
0000B094                            ; Sprite mappings - monitors (Optimized) Ported by -paranoimia-
0000B094                            ; ---------------------------------------------------------------------------
0000B094 0000 0000                  		dc.w byte_A5A2-Map_obj26, byte_A5A8-Map_obj26
0000B098 0000 0000                  		dc.w byte_A5B3-Map_obj26, byte_A5BE-Map_obj26
0000B09C 0000 0000                  		dc.w byte_A5C9-Map_obj26, byte_A5D4-Map_obj26
0000B0A0 0000 0000                  		dc.w byte_A5DF-Map_obj26, byte_A5EA-Map_obj26
0000B0A4 0000 0000                  		dc.w byte_A5F5-Map_obj26, byte_A600-Map_obj26
0000B0A8 0000 0000                  		dc.w byte_A60B-Map_obj26, byte_A616-Map_obj26
0000B0AC 01                         byte_A5A2:	dc.b 1			; static monitor
0000B0AD EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0B2 02                         byte_A5A8:	dc.b 2			; static monitor
0000B0B3 F505 0010 F8               		dc.b $F5, 5, 0,	$10, $F8
0000B0B8 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0BD 02                         byte_A5B3:	dc.b 2			; static monitor
0000B0BE F505 0014 F8               		dc.b $F5, 5, 0,	$14, $F8
0000B0C3 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0C8 02                         byte_A5BE:	dc.b 2			; Eggman monitor
0000B0C9 F505 0018 F8               		dc.b $F5, 5, 0,	$18, $F8
0000B0CE EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0D3 02                         byte_A5C9:	dc.b 2			; Sonic	monitor
0000B0D4 F505 001C F8               		dc.b $F5, 5, 0,	$1C, $F8
0000B0D9 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0DE 02                         byte_A5D4:	dc.b 2			; speed	shoes monitor
0000B0DF F505 0024 F8               		dc.b $F5, 5, 0,	$24, $F8
0000B0E4 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0E9 02                         byte_A5DF:	dc.b 2			; shield monitor
0000B0EA F505 0028 F8               		dc.b $F5, 5, 0,	$28, $F8
0000B0EF EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0F4 02                         byte_A5EA:	dc.b 2			; invincibility	monitor
0000B0F5 F505 002C F8               		dc.b $F5, 5, 0,	$2C, $F8
0000B0FA EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0FF 02                         byte_A5F5:	dc.b 2			; 10 rings monitor
0000B100 F505 0020 F8               		dc.b $F5, 5, 0,	$20, $F8
0000B105 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B10A 02                         byte_A600:	dc.b 2			; 'S' monitor
0000B10B F505 003C F8               		dc.b $F5, 5, 0,	$3C, $F8
0000B110 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B115 02                         byte_A60B:	dc.b 2			; goggles monitor
0000B116 F505 0038 F8               		dc.b $F5, 5, 0,	$38, $F8
0000B11B EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B120 01                         byte_A616:	dc.b 1			; broken monitor
0000B121 FF0D 0030 F0               		dc.b $FF, $D, 0, $30, $F0
0000B126                            		even
0000B126                            		even
0000B126                            
0000B126                            ; ===========================================================================
0000B126                            ; ---------------------------------------------------------------------------
0000B126                            ; Object 0E - Sonic on the title screen
0000B126                            ; ---------------------------------------------------------------------------
0000B126                            
0000B126                            Obj0E:					; XREF: Obj_Index
0000B126 7000                       		moveq	#0,d0
0000B128 1028 0024                  		move.b	$24(a0),d0
0000B12C 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000B130 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000B134                            ; ===========================================================================
0000B134 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000B136 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000B138 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000B13A 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000B13C                            ; ===========================================================================
0000B13C                            
0000B13C                            Obj0E_Main:				; XREF: Obj0E_Index
0000B13C 5428 0024                  		addq.b	#2,$24(a0)
0000B140 317C 00F8 0008             		move.w	#$F8,8(a0)
0000B146 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000B14C 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000B154 317C 2300 0002             		move.w	#$2300,2(a0)
0000B15A 117C 0001 0018             		move.b	#1,$18(a0)
0000B160 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000B166 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B16C 6100 0000                  		bsr.w	AnimateSprite
0000B170                            
0000B170                            Obj0E_Delay:				; XREF: Obj0E_Index
0000B170 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000B174 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000B176 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000B17A 6000 0000                  		bra.w	DisplaySprite
0000B17E                            ; ===========================================================================
0000B17E                            
0000B17E                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000B17E 4E75                       		rts	
0000B180                            ; ===========================================================================
0000B180                            
0000B180                            Obj0E_Move:				; XREF: Obj0E_Index
0000B180 5168 000A                  		subq.w	#8,$A(a0)
0000B184 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000B18A 6600                       		bne.s	Obj0E_Display
0000B18C 5428 0024                  		addq.b	#2,$24(a0)
0000B190                            
0000B190                            Obj0E_Display:
0000B190 6000 0000                  		bra.w	DisplaySprite
0000B194                            ; ===========================================================================
0000B194 4E75                       		rts	
0000B196                            ; ===========================================================================
0000B196                            
0000B196                            Obj0E_Animate:				; XREF: Obj0E_Index
0000B196 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B19C 6100 0000                  		bsr.w	AnimateSprite
0000B1A0 6000 0000                  		bra.w	DisplaySprite
0000B1A4                            ; ===========================================================================
0000B1A4 4E75                       		rts	
0000B1A6                            ; ===========================================================================
0000B1A6                            ; ---------------------------------------------------------------------------
0000B1A6                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000B1A6                            ; ---------------------------------------------------------------------------
0000B1A6                            
0000B1A6                            Obj0F:					; XREF: Obj_Index
0000B1A6 7000                       		moveq	#0,d0
0000B1A8 1028 0024                  		move.b	$24(a0),d0
0000B1AC 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000B1B0 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000B1B4 6000 0000                  		bra.w	DisplaySprite
0000B1B8                            ; ===========================================================================
0000B1B8 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000B1BA 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000B1BC 0000                       		dc.w locret_A6F8-Obj0F_Index
0000B1BE                            ; ===========================================================================
0000B1BE                            
0000B1BE                            Obj0F_Main:				; XREF: Obj0F_Index
0000B1BE 5428 0024                  		addq.b	#2,$24(a0)
0000B1C2 317C 00D8 0008             		move.w	#$D8,8(a0)
0000B1C8 317C 0130 000A             		move.w	#$130,$A(a0)
0000B1CE 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000B1D6 317C 0200 0002             		move.w	#$200,2(a0)
0000B1DC 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000B1E2 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000B1E4 5428 0024                  		addq.b	#2,$24(a0)
0000B1E8 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000B1EE 6600                       		bne.s	locret_A6F8	; if not, branch
0000B1F0 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000B1F6 317C 0178 0008             		move.w	#$178,8(a0)
0000B1FC 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000B202                            
0000B202                            locret_A6F8:				; XREF: Obj0F_Index
0000B202 4E75                       		rts	
0000B204                            ; ===========================================================================
0000B204                            
0000B204                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000B204 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000B20A 6000 0000                  		bra.w	AnimateSprite
0000B20E                            ; ===========================================================================
0000B20E                            Ani_obj0E:
0000B20E                            	include "_anim\obj0E.asm"
0000B20E                            ; ---------------------------------------------------------------------------
0000B20E                            ; Animation script - Sonic on the title screen
0000B20E                            ; ---------------------------------------------------------------------------
0000B20E 0000                       		dc.w byte_A706-Ani_obj0E
0000B210 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000B21C                            		even
0000B21C                            		even
0000B21C                            
0000B21C                            Ani_obj0F:
0000B21C                            	include "_anim\obj0F.asm"
0000B21C                            ; ---------------------------------------------------------------------------
0000B21C                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000B21C                            ; ---------------------------------------------------------------------------
0000B21C 0000                       		dc.w byte_A714-Ani_obj0F
0000B21E 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000B222                            		even
0000B222                            		even
0000B222                            
0000B222                            ; ---------------------------------------------------------------------------
0000B222                            ; Subroutine to	animate	a sprite using an animation script
0000B222                            ; ---------------------------------------------------------------------------
0000B222                            
0000B222                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B222                            
0000B222                            
0000B222                            AnimateSprite:
0000B222 7000                       		moveq	#0,d0
0000B224 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000B228 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000B22C 6700                       		beq.s	Anim_Run	; if not, branch
0000B22E 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000B232 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B238 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000B23E                            
0000B23E                            Anim_Run:
0000B23E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000B242 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000B244 D040                       		add.w	d0,d0
0000B246 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000B24A 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000B24E 7200                       		moveq	#0,d1
0000B250 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000B254 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000B258 0C00 00FA                  		cmp.b	#$FA,d0					; MJ: is it a flag from FA to FF?
0000B25C 6400 0000                  		bhs	Anim_End_FF				; MJ: if so, branch to flag routines
0000B260                            
0000B260                            Anim_Next:
0000B260 1200                       		move.b	d0,d1
0000B262 0200 001F                  		andi.b	#$1F,d0
0000B266 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000B26A 1028 0022                  		move.b	$22(a0),d0
0000B26E E719                       		rol.b	#3,d1
0000B270 B101                       		eor.b	d0,d1
0000B272 0201 0003                  		andi.b	#3,d1
0000B276 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000B27C 8328 0001                  		or.b	d1,1(a0)
0000B280 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000B284                            
0000B284                            Anim_Wait:
0000B284 4E75                       		rts	
0000B286                            ; ===========================================================================
0000B286                            
0000B286                            Anim_End_FF:
0000B286 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000B288 6600                       		bne.s	Anim_End_FE	; if not, branch
0000B28A 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000B290 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000B294 60CA                       		bra.s	Anim_Next
0000B296                            ; ===========================================================================
0000B296                            
0000B296                            Anim_End_FE:
0000B296 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000B298 6600                       		bne.s	Anim_End_FD	; if not, branch
0000B29A 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000B29E 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000B2A2 9200                       		sub.b	d0,d1
0000B2A4 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000B2A8 60B6                       		bra.s	Anim_Next
0000B2AA                            ; ===========================================================================
0000B2AA                            
0000B2AA                            Anim_End_FD:
0000B2AA 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000B2AC 6600                       		bne.s	Anim_End_FC	; if not, branch
0000B2AE 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000B2B4                            
0000B2B4                            Anim_End_FC:
0000B2B4 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000B2B6 6600                       		bne.s	Anim_End_FB	; if not, branch
0000B2B8 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000B2BC                            
0000B2BC                            Anim_End_FB:
0000B2BC 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000B2BE 6600                       		bne.s	Anim_End_FA	; if not, branch
0000B2C0 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B2C6 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000B2CA                            
0000B2CA                            Anim_End_FA:
0000B2CA 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000B2CC 6600                       		bne.s	Anim_End	; if not, branch
0000B2CE 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000B2D2                            
0000B2D2                            Anim_End:
0000B2D2 4E75                       		rts	
0000B2D4                            ; End of function AnimateSprite
0000B2D4                            
0000B2D4                            ; ===========================================================================
0000B2D4                            ; ---------------------------------------------------------------------------
0000B2D4                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B2D4                            ; ---------------------------------------------------------------------------
0000B2D4                            Map_obj0F:
0000B2D4                            	include "_maps\obj0F.asm"
0000B2D4                            ; ---------------------------------------------------------------------------
0000B2D4                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B2D4                            ; ---------------------------------------------------------------------------
0000B2D4 0000                       		dc.w byte_A7CD-Map_obj0F
0000B2D6 0000                       		dc.w byte_A7CC-Map_obj0F
0000B2D8 0000                       		dc.w byte_A7EB-Map_obj0F
0000B2DA 0000                       		dc.w byte_A882-Map_obj0F
0000B2DC 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000B2DD 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000B2E2 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000B2E7 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000B2EC 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000B2F1 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000B2F6 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000B2FB 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000B2FC B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B301 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B306 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B30B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B310 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B315 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B31A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B31F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B324 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B329 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B32E D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B333 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B338 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B33D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B342 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B347 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B34C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B351 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B356 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B35B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B360 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B365 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B36A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B36F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B374 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B379 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B37E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B383 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B388 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B38D F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B392 01                         byte_A882:	dc.b 1			; "TM"
0000B393 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000B398                            		even
0000B398                            		even
0000B398                            
0000B398                            ; ---------------------------------------------------------------------------
0000B398                            ; Sprite mappings - Sonic on the title screen
0000B398                            ; ---------------------------------------------------------------------------
0000B398                            Map_obj0E:
0000B398                            	include "_maps\obj0E.asm"
0000B398                            ; ---------------------------------------------------------------------------
0000B398                            ; Sprite mappings - Sonic on the title screen
0000B398                            ; ---------------------------------------------------------------------------
0000B398 0000                       		dc.w byte_A898-Map_obj0E
0000B39A 0000                       		dc.w byte_A8CB-Map_obj0E
0000B39C 0000                       		dc.w byte_A917-Map_obj0E
0000B39E 0000                       		dc.w byte_A96D-Map_obj0E
0000B3A0 0000                       		dc.w byte_A9AF-Map_obj0E
0000B3A2 0000                       		dc.w byte_A9E7-Map_obj0E
0000B3A4 0000                       		dc.w byte_AA47-Map_obj0E
0000B3A6 0000                       		dc.w byte_AAB1-Map_obj0E
0000B3A8 0A                         byte_A898:	dc.b $A
0000B3A9 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000B3AE 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000B3B3 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000B3B8 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000B3BD 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000B3C2 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000B3C7 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000B3CC 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000B3D1 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000B3D6 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000B3DB 0F                         byte_A8CB:	dc.b $F
0000B3DC 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000B3E1 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000B3E6 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000B3EB 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000B3F0 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000B3F5 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000B3FA 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000B3FF 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000B404 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000B409 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000B40E 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000B413 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000B418 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000B41D 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000B422 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000B427 11                         byte_A917:	dc.b $11
0000B428 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000B42D 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000B432 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000B437 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000B43C 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000B441 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000B446 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000B44B 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000B450 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000B455 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000B45A 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000B45F 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000B464 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000B469 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000B46E 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000B473 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000B478 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000B47D 0D                         byte_A96D:	dc.b $D
0000B47E 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000B483 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000B488 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000B48D 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000B492 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000B497 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000B49C 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000B4A1 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000B4A6 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000B4AB 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000B4B0 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000B4B5 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000B4BA 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000B4BF 0B                         byte_A9AF:	dc.b $B
0000B4C0 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000B4C5 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000B4CA 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000B4CF 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000B4D4 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000B4D9 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000B4DE 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000B4E3 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000B4E8 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000B4ED 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000B4F2 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000B4F7 13                         byte_A9E7:	dc.b $13
0000B4F8 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000B4FD 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000B502 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000B507 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000B50C 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000B511 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000B516 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000B51B 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000B520 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000B525 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000B52A 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000B52F 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000B534 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000B539 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000B53E 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000B543 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000B548 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000B54D 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000B552 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000B557 15                         byte_AA47:	dc.b $15
0000B558 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000B55D 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000B562 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000B567 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000B56C 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000B571 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000B576 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000B57B 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000B580 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000B585 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000B58A 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000B58F 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000B594 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000B599 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000B59E 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000B5A3 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000B5A8 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000B5AD 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000B5B2 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000B5B7 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000B5BC 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000B5C1 16                         byte_AAB1:	dc.b $16
0000B5C2 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000B5C7 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000B5CC 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000B5D1 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000B5D6 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000B5DB 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000B5E0 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000B5E5 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000B5EA 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000B5EF 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000B5F4 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000B5F9 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000B5FE 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000B603 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000B608 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000B60D 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000B612 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000B617 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000B61C 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000B621 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000B626 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000B62B 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000B630                            		even
0000B630                            		even
0000B630                            
0000B630                            ; ===========================================================================
0000B630                            ; ---------------------------------------------------------------------------
0000B630                            ; Object 2B - Chopper enemy (GHZ)
0000B630                            ; ---------------------------------------------------------------------------
0000B630                            
0000B630                            Obj2B:					; XREF: Obj_Index
0000B630 7000                       		moveq	#0,d0
0000B632 1028 0024                  		move.b	$24(a0),d0
0000B636 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B63A 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B63E 6000 0000                  		bra.w	MarkObjGone
0000B642                            ; ===========================================================================
0000B642 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B644 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B646                            ; ===========================================================================
0000B646                            
0000B646                            Obj2B_Main:				; XREF: Obj2B_Index
0000B646 5428 0024                  		addq.b	#2,$24(a0)
0000B64A 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B652 317C 047B 0002             		move.w	#$47B,2(a0)
0000B658 117C 0004 0001             		move.b	#4,1(a0)
0000B65E 117C 0004 0018             		move.b	#4,$18(a0)
0000B664 117C 0009 0020             		move.b	#9,$20(a0)
0000B66A 117C 0010 0019             		move.b	#$10,$19(a0)
0000B670 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B676 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B67C                            
0000B67C                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B67C 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B682 6100 FB9E                  		bsr.w	AnimateSprite
0000B686 6100 0000                  		bsr.w	SpeedToPos
0000B68A 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B690 3028 0030                  		move.w	$30(a0),d0
0000B694 B068 000C                  		cmp.w	$C(a0),d0
0000B698 6400                       		bcc.s	Obj2B_ChgAni
0000B69A 3140 000C                  		move.w	d0,$C(a0)
0000B69E 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B6A4                            
0000B6A4                            Obj2B_ChgAni:
0000B6A4 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B6AA 0440 00C0                  		subi.w	#$C0,d0
0000B6AE B068 000C                  		cmp.w	$C(a0),d0
0000B6B2 6400                       		bcc.s	locret_ABB6
0000B6B4 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B6BA 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B6BE 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B6C0 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B6C6                            
0000B6C6                            locret_ABB6:
0000B6C6 4E75                       		rts	
0000B6C8                            ; ===========================================================================
0000B6C8                            Ani_obj2B:
0000B6C8                            	include "_anim\obj2B.asm"
0000B6C8                            ; ---------------------------------------------------------------------------
0000B6C8                            ; Animation script - Chopper enemy
0000B6C8                            ; ---------------------------------------------------------------------------
0000B6C8 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B6CA 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B6CC 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B6CE 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B6D2 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B6D6 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B6DA 00                         		even
0000B6DA 00                         		even
0000B6DA                            
0000B6DA                            ; ---------------------------------------------------------------------------
0000B6DA                            ; Sprite mappings - Chopper enemy (GHZ)
0000B6DA                            ; ---------------------------------------------------------------------------
0000B6DA                            Map_obj2B:
0000B6DA                            	include "_maps\obj2B.asm"
0000B6DA                            ; ---------------------------------------------------------------------------
0000B6DA                            ; Sprite mappings - Chopper enemy (GHZ)
0000B6DA                            ; ---------------------------------------------------------------------------
0000B6DA 0000                       		dc.w byte_ABCE-Map_obj2B
0000B6DC 0000                       		dc.w byte_ABD4-Map_obj2B
0000B6DE 01                         byte_ABCE:	dc.b 1
0000B6DF F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000B6E4 01                         byte_ABD4:	dc.b 1
0000B6E5 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000B6EA                            		even
0000B6EA                            		even
0000B6EA                            
0000B6EA                            ; ===========================================================================
0000B6EA                            ; ---------------------------------------------------------------------------
0000B6EA                            ; Object 2C - Jaws enemy (LZ)
0000B6EA                            ; ---------------------------------------------------------------------------
0000B6EA                            
0000B6EA                            Obj2C:					; XREF: Obj_Index
0000B6EA 7000                       		moveq	#0,d0
0000B6EC 1028 0024                  		move.b	$24(a0),d0
0000B6F0 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B6F4 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B6F8                            ; ===========================================================================
0000B6F8 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B6FA 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B6FC                            ; ===========================================================================
0000B6FC                            
0000B6FC                            Obj2C_Main:				; XREF: Obj2C_Index
0000B6FC 5428 0024                  		addq.b	#2,$24(a0)
0000B700 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B708 317C 2486 0002             		move.w	#$2486,2(a0)
0000B70E 0028 0004 0001             		ori.b	#4,1(a0)
0000B714 117C 000A 0020             		move.b	#$A,$20(a0)
0000B71A 117C 0004 0018             		move.b	#4,$18(a0)
0000B720 117C 0010 0019             		move.b	#$10,$19(a0)
0000B726 7000                       		moveq	#0,d0
0000B728 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B72C ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B72E 5340                       		subq.w	#1,d0
0000B730 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B734 3140 0032                  		move.w	d0,$32(a0)
0000B738 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B73E 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B744 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B746 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B74A                            
0000B74A                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B74A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B74E 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B750 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B756 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B75A 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B760 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B766                            
0000B766                            Obj2C_Animate:
0000B766 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B76C 6100 FAB4                  		bsr.w	AnimateSprite
0000B770 6100 0000                  		bsr.w	SpeedToPos
0000B774 6000 0000                  		bra.w	MarkObjGone
0000B778                            ; ===========================================================================
0000B778                            Ani_obj2C:
0000B778                            	include "_anim\obj2C.asm"
0000B778                            ; ---------------------------------------------------------------------------
0000B778                            ; Animation script - Jaws enemy
0000B778                            ; ---------------------------------------------------------------------------
0000B778 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B77A 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B780                            		even
0000B780                            		even
0000B780                            
0000B780                            ; ---------------------------------------------------------------------------
0000B780                            ; Sprite mappings - Jaws enemy (LZ)
0000B780                            ; ---------------------------------------------------------------------------
0000B780                            Map_obj2C:
0000B780                            	include "_maps\obj2C.asm"
0000B780                            ; ---------------------------------------------------------------------------
0000B780                            ; Sprite mappings - Jaws enemy (LZ)
0000B780                            ; ---------------------------------------------------------------------------
0000B780 0000                       		dc.w byte_AC78-Map_obj2C
0000B782 0000                       		dc.w byte_AC83-Map_obj2C
0000B784 0000                       		dc.w byte_AC8E-Map_obj2C
0000B786 0000                       		dc.w byte_AC99-Map_obj2C
0000B788 02                         byte_AC78:	dc.b 2
0000B789 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B78E F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B793 02                         byte_AC83:	dc.b 2
0000B794 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B799 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B79E 02                         byte_AC8E:	dc.b 2
0000B79F F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B7A4 F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B7A9 02                         byte_AC99:	dc.b 2
0000B7AA F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B7AF F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B7B4                            		even
0000B7B4                            		even
0000B7B4                            
0000B7B4                            ; ===========================================================================
0000B7B4                            ; ---------------------------------------------------------------------------
0000B7B4                            ; Object 2D - Burrobot enemy (LZ)
0000B7B4                            ; ---------------------------------------------------------------------------
0000B7B4                            
0000B7B4                            Obj2D:					; XREF: Obj_Index
0000B7B4 7000                       		moveq	#0,d0
0000B7B6 1028 0024                  		move.b	$24(a0),d0
0000B7BA 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B7BE 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B7C2                            ; ===========================================================================
0000B7C2 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B7C4 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B7C6                            ; ===========================================================================
0000B7C6                            
0000B7C6                            Obj2D_Main:				; XREF: Obj2D_Index
0000B7C6 5428 0024                  		addq.b	#2,$24(a0)
0000B7CA 117C 0013 0016             		move.b	#$13,$16(a0)
0000B7D0 117C 0008 0017             		move.b	#8,$17(a0)
0000B7D6 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B7DE 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B7E4 0028 0004 0001             		ori.b	#4,1(a0)
0000B7EA 117C 0004 0018             		move.b	#4,$18(a0)
0000B7F0 117C 0005 0020             		move.b	#5,$20(a0)
0000B7F6 117C 000C 0019             		move.b	#$C,$19(a0)
0000B7FC 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B800 117C 0002 001C             		move.b	#2,$1C(a0)
0000B806                            
0000B806                            Obj2D_Action:				; XREF: Obj2D_Index
0000B806 7000                       		moveq	#0,d0
0000B808 1028 0025                  		move.b	$25(a0),d0
0000B80C 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B810 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B814 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B81A 6100 FA06                  		bsr.w	AnimateSprite
0000B81E 6000 0000                  		bra.w	MarkObjGone
0000B822                            ; ===========================================================================
0000B822 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B824 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B826 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B828 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B82A                            ; ===========================================================================
0000B82A                            
0000B82A                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B82A 5368 0030                  		subq.w	#1,$30(a0)
0000B82E 6A00                       		bpl.s	locret_AD42
0000B830 5428 0025                  		addq.b	#2,$25(a0)
0000B834 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B83A 317C 0080 0010             		move.w	#$80,$10(a0)
0000B840 117C 0001 001C             		move.b	#1,$1C(a0)
0000B846 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B84C 6700                       		beq.s	locret_AD42
0000B84E 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B852                            
0000B852                            locret_AD42:
0000B852 4E75                       		rts	
0000B854                            ; ===========================================================================
0000B854                            
0000B854                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B854 5368 0030                  		subq.w	#1,$30(a0)
0000B858 6B00                       		bmi.s	loc_AD84
0000B85A 6100 0000                  		bsr.w	SpeedToPos
0000B85E 0868 0000 0032             		bchg	#0,$32(a0)
0000B864 6600                       		bne.s	loc_AD78
0000B866 3628 0008                  		move.w	8(a0),d3
0000B86A 0643 000C                  		addi.w	#$C,d3
0000B86E 0828 0000 0022             		btst	#0,$22(a0)
0000B874 6600                       		bne.s	loc_AD6A
0000B876 0443 0018                  		subi.w	#$18,d3
0000B87A                            
0000B87A                            loc_AD6A:
0000B87A 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B880 0C41 000C                  		cmpi.w	#$C,d1
0000B884 6C00                       		bge.s	loc_AD84
0000B886 4E75                       		rts	
0000B888                            ; ===========================================================================
0000B888                            
0000B888                            loc_AD78:				; XREF: Obj2D_Move
0000B888 4EB9 0000 0000             		jsr	ObjHitFloor
0000B88E D368 000C                  		add.w	d1,$C(a0)
0000B892 4E75                       		rts	
0000B894                            ; ===========================================================================
0000B894                            
0000B894                            loc_AD84:				; XREF: Obj2D_Move
0000B894 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B89A 6700                       		beq.s	loc_ADA4
0000B89C 5528 0025                  		subq.b	#2,$25(a0)
0000B8A0 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B8A6 317C 0000 0010             		move.w	#0,$10(a0)
0000B8AC 117C 0000 001C             		move.b	#0,$1C(a0)
0000B8B2 4E75                       		rts	
0000B8B4                            ; ===========================================================================
0000B8B4                            
0000B8B4                            loc_ADA4:
0000B8B4 5428 0025                  		addq.b	#2,$25(a0)
0000B8B8 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B8BE 117C 0002 001C             		move.b	#2,$1C(a0)
0000B8C4 4E75                       		rts	
0000B8C6                            ; ===========================================================================
0000B8C6                            
0000B8C6                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B8C6 6100 0000                  		bsr.w	SpeedToPos
0000B8CA 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B8D0 6B00                       		bmi.s	locret_ADF0
0000B8D2 117C 0003 001C             		move.b	#3,$1C(a0)
0000B8D8 4EB9 0000 0000             		jsr	ObjHitFloor
0000B8DE 4A41                       		tst.w	d1
0000B8E0 6A00                       		bpl.s	locret_ADF0
0000B8E2 D368 000C                  		add.w	d1,$C(a0)
0000B8E6 317C 0000 0012             		move.w	#0,$12(a0)
0000B8EC 117C 0001 001C             		move.b	#1,$1C(a0)
0000B8F2 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B8F8 5528 0025                  		subq.b	#2,$25(a0)
0000B8FC 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B900                            
0000B900                            locret_ADF0:
0000B900 4E75                       		rts	
0000B902                            ; ===========================================================================
0000B902                            
0000B902                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B902 343C 0060                  		move.w	#$60,d2
0000B906 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B90A 6400                       		bcc.s	locret_AE20
0000B90C 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B910 9068 000C                  		sub.w	$C(a0),d0
0000B914 6400                       		bcc.s	locret_AE20
0000B916 0C40 FF80                  		cmpi.w	#-$80,d0
0000B91A 6500                       		bcs.s	locret_AE20
0000B91C 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B920 6600                       		bne.s	locret_AE20
0000B922 5528 0025                  		subq.b	#2,$25(a0)
0000B926 3141 0010                  		move.w	d1,$10(a0)
0000B92A 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B930                            
0000B930                            locret_AE20:
0000B930 4E75                       		rts	
0000B932                            
0000B932                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B932                            
0000B932                            
0000B932                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B932 323C 0080                  		move.w	#$80,d1
0000B936 08E8 0000 0022             		bset	#0,$22(a0)
0000B93C 3038 D008                  		move.w	($FFFFD008).w,d0
0000B940 9068 0008                  		sub.w	8(a0),d0
0000B944 6400                       		bcc.s	loc_AE40
0000B946 4440                       		neg.w	d0
0000B948 4441                       		neg.w	d1
0000B94A 08A8 0000 0022             		bclr	#0,$22(a0)
0000B950                            
0000B950                            loc_AE40:
0000B950 B042                       		cmp.w	d2,d0
0000B952 4E75                       		rts	
0000B954                            ; End of function Obj2D_ChkSonic2
0000B954                            
0000B954                            ; ===========================================================================
0000B954                            Ani_obj2D:
0000B954                            	include "_anim\obj2D.asm"
0000B954                            ; ---------------------------------------------------------------------------
0000B954                            ; Animation script - Burrobot enemy
0000B954                            ; ---------------------------------------------------------------------------
0000B954 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B956 0000                       		dc.w byte_AE50-Ani_obj2D
0000B958 0000                       		dc.w byte_AE54-Ani_obj2D
0000B95A 0000                       		dc.w byte_AE58-Ani_obj2D
0000B95C 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0000B960 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
0000B964 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000B968 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B96C 00                         		even
0000B96C 00                         		even
0000B96C                            
0000B96C                            ; ---------------------------------------------------------------------------
0000B96C                            ; Sprite mappings - Burrobot enemy (LZ)
0000B96C                            ; ---------------------------------------------------------------------------
0000B96C                            Map_obj2D:
0000B96C                            	include "_maps\obj2D.asm"
0000B96C                            ; ---------------------------------------------------------------------------
0000B96C                            ; Sprite mappings - Burrobot enemy (LZ)
0000B96C                            ; ---------------------------------------------------------------------------
0000B96C 0000                       		dc.w byte_AE6A-Map_obj2D
0000B96E 0000                       		dc.w byte_AE75-Map_obj2D
0000B970 0000                       		dc.w byte_AE80-Map_obj2D
0000B972 0000                       		dc.w byte_AE8B-Map_obj2D
0000B974 0000                       		dc.w byte_AE96-Map_obj2D
0000B976 0000                       		dc.w byte_AEA1-Map_obj2D
0000B978 0000                       		dc.w byte_AEAC-Map_obj2D
0000B97A 02                         byte_AE6A:	dc.b 2
0000B97B EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
0000B980 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000B985 02                         byte_AE75:	dc.b 2
0000B986 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000B98B 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000B990 02                         byte_AE80:	dc.b 2
0000B991 E80A 001E F4               		dc.b $E8, $A, 0, $1E, $F4
0000B996 000A 0027 F4               		dc.b 0,	$A, 0, $27, $F4
0000B99B 02                         byte_AE8B:	dc.b 2
0000B99C E80A 0030 F4               		dc.b $E8, $A, 0, $30, $F4
0000B9A1 000A 0039 F4               		dc.b 0,	$A, 0, $39, $F4
0000B9A6 02                         byte_AE96:	dc.b 2
0000B9A7 E80A 000F F0               		dc.b $E8, $A, 0, $F, $F0
0000B9AC 000A 0042 F4               		dc.b 0,	$A, 0, $42, $F4
0000B9B1 02                         byte_AEA1:	dc.b 2
0000B9B2 F406 004B E8               		dc.b $F4, 6, 0,	$4B, $E8
0000B9B7 F40A 0051 F8               		dc.b $F4, $A, 0, $51, $F8
0000B9BC 02                         byte_AEAC:	dc.b 2
0000B9BD EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000B9C2 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000B9C8 00                         		even
0000B9C8 00                         		even
0000B9C8                            
0000B9C8                            ; ===========================================================================
0000B9C8                            ; ---------------------------------------------------------------------------
0000B9C8                            ; Object 2F - large moving platforms (MZ)
0000B9C8                            ; ---------------------------------------------------------------------------
0000B9C8                            
0000B9C8                            Obj2F:					; XREF: Obj_Index
0000B9C8 7000                       		moveq	#0,d0
0000B9CA 1028 0024                  		move.b	$24(a0),d0
0000B9CE 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B9D2 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B9D6                            ; ===========================================================================
0000B9D6 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B9D8 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B9DA                            
0000B9DA 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B9DC 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B9DE 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B9E0 0140                       		dc.b 1,	$40
0000B9E2 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B9E4 0220                       		dc.b 2,	$20
0000B9E6                            ; ===========================================================================
0000B9E6                            
0000B9E6                            Obj2F_Main:				; XREF: Obj2F_Index
0000B9E6 5428 0024                  		addq.b	#2,$24(a0)
0000B9EA 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B9F2 317C C000 0002             		move.w	#$C000,2(a0)
0000B9F8 117C 0004 0001             		move.b	#4,1(a0)
0000B9FE 117C 0005 0018             		move.b	#5,$18(a0)
0000BA04 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000BA0A 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000BA10 7000                       		moveq	#0,d0
0000BA12 1028 0028                  		move.b	$28(a0),d0
0000BA16 E448                       		lsr.w	#2,d0
0000BA18 0240 001C                  		andi.w	#$1C,d0
0000BA1C 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000BA20 3019                       		move.w	(a1)+,d0
0000BA22 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000BA26 214A 0030                  		move.l	a2,$30(a0)
0000BA2A 1159 001A                  		move.b	(a1)+,$1A(a0)
0000BA2E 1151 0019                  		move.b	(a1),$19(a0)
0000BA32 0228 000F 0028             		andi.b	#$F,$28(a0)
0000BA38 117C 0040 0016             		move.b	#$40,$16(a0)
0000BA3E 08E8 0004 0001             		bset	#4,1(a0)
0000BA44                            
0000BA44                            Obj2F_Action:				; XREF: Obj2F_Index
0000BA44 6100 0000                  		bsr.w	Obj2F_Types
0000BA48 4A28 0025                  		tst.b	$25(a0)
0000BA4C 6700                       		beq.s	Obj2F_Solid
0000BA4E 7200                       		moveq	#0,d1
0000BA50 1228 0019                  		move.b	$19(a0),d1
0000BA54 0641 000B                  		addi.w	#$B,d1
0000BA58 6100 C61C                  		bsr.w	ExitPlatform
0000BA5C 0829 0003 0022             		btst	#3,$22(a1)
0000BA62 6600 0000                  		bne.w	Obj2F_Slope
0000BA66 4228 0025                  		clr.b	$25(a0)
0000BA6A 6000                       		bra.s	Obj2F_Display
0000BA6C                            ; ===========================================================================
0000BA6C                            
0000BA6C                            Obj2F_Slope:				; XREF: Obj2F_Action
0000BA6C 7200                       		moveq	#0,d1
0000BA6E 1228 0019                  		move.b	$19(a0),d1
0000BA72 0641 000B                  		addi.w	#$B,d1
0000BA76 2468 0030                  		movea.l	$30(a0),a2
0000BA7A 3428 0008                  		move.w	8(a0),d2
0000BA7E 6100 D554                  		bsr.w	SlopeObject2
0000BA82 6000                       		bra.s	Obj2F_Display
0000BA84                            ; ===========================================================================
0000BA84                            
0000BA84                            Obj2F_Solid:				; XREF: Obj2F_Action
0000BA84 7200                       		moveq	#0,d1
0000BA86 1228 0019                  		move.b	$19(a0),d1
0000BA8A 0641 000B                  		addi.w	#$B,d1
0000BA8E 343C 0020                  		move.w	#$20,d2
0000BA92 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000BA98 6600                       		bne.s	loc_AF8E
0000BA9A 343C 0030                  		move.w	#$30,d2
0000BA9E                            
0000BA9E                            loc_AF8E:
0000BA9E 2468 0030                  		movea.l	$30(a0),a2
0000BAA2 6100 0000                  		bsr.w	SolidObject2F
0000BAA6                            
0000BAA6                            Obj2F_Display:				; XREF: Obj2F_Action
0000BAA6 6100 0000                  		bsr.w	DisplaySprite
0000BAAA 6000 0000                  		bra.w	Obj2F_ChkDel
0000BAAE                            
0000BAAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BAAE                            
0000BAAE                            
0000BAAE                            Obj2F_Types:				; XREF: Obj2F_Action
0000BAAE 7000                       		moveq	#0,d0
0000BAB0 1028 0028                  		move.b	$28(a0),d0
0000BAB4 0240 0007                  		andi.w	#7,d0
0000BAB8 D040                       		add.w	d0,d0
0000BABA 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000BABE 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000BAC2                            ; End of function Obj2F_Types
0000BAC2                            
0000BAC2                            ; ===========================================================================
0000BAC2 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000BAC4 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000BAC6 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000BAC8 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000BACA 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000BACC 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000BACE                            ; ===========================================================================
0000BACE                            
0000BACE                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000BACE 4E75                       		rts			; type 00 platform doesn't move
0000BAD0                            ; ===========================================================================
0000BAD0                            
0000BAD0                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000BAD0 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000BAD4 323C 0020                  		move.w	#$20,d1
0000BAD8 6000                       		bra.s	Obj2F_Move
0000BADA                            ; ===========================================================================
0000BADA                            
0000BADA                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000BADA 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000BADE 323C 0030                  		move.w	#$30,d1
0000BAE2 6000                       		bra.s	Obj2F_Move
0000BAE4                            ; ===========================================================================
0000BAE4                            
0000BAE4                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000BAE4 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000BAE8 323C 0040                  		move.w	#$40,d1
0000BAEC 6000                       		bra.s	Obj2F_Move
0000BAEE                            ; ===========================================================================
0000BAEE                            
0000BAEE                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000BAEE 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000BAF2 323C 0060                  		move.w	#$60,d1
0000BAF6                            
0000BAF6                            Obj2F_Move:
0000BAF6 0828 0003 0028             		btst	#3,$28(a0)
0000BAFC 6700                       		beq.s	loc_AFF2
0000BAFE 4440                       		neg.w	d0
0000BB00 D041                       		add.w	d1,d0
0000BB02                            
0000BB02                            loc_AFF2:
0000BB02 3228 002C                  		move.w	$2C(a0),d1
0000BB06 9240                       		sub.w	d0,d1
0000BB08 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000BB0C 4E75                       		rts	
0000BB0E                            ; ===========================================================================
0000BB0E                            
0000BB0E                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000BB0E 1028 0034                  		move.b	$34(a0),d0
0000BB12 4A28 0025                  		tst.b	$25(a0)
0000BB16 6600                       		bne.s	loc_B010
0000BB18 5500                       		subq.b	#2,d0
0000BB1A 6400                       		bcc.s	loc_B01C
0000BB1C 7000                       		moveq	#0,d0
0000BB1E 6000                       		bra.s	loc_B01C
0000BB20                            ; ===========================================================================
0000BB20                            
0000BB20                            loc_B010:
0000BB20 5800                       		addq.b	#4,d0
0000BB22 0C00 0040                  		cmpi.b	#$40,d0
0000BB26 6500                       		bcs.s	loc_B01C
0000BB28 103C 0040                  		move.b	#$40,d0
0000BB2C                            
0000BB2C                            loc_B01C:
0000BB2C 1140 0034                  		move.b	d0,$34(a0)
0000BB30 4EB9 0000 33D4             		jsr	(CalcSine).l
0000BB36 E848                       		lsr.w	#4,d0
0000BB38 3200                       		move.w	d0,d1
0000BB3A D068 002C                  		add.w	$2C(a0),d0
0000BB3E 3140 000C                  		move.w	d0,$C(a0)
0000BB42 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000BB48 6600                       		bne.s	loc_B07A
0000BB4A 4A28 0035                  		tst.b	$35(a0)
0000BB4E 6600                       		bne.s	loc_B07A
0000BB50 117C 0001 0035             		move.b	#1,$35(a0)
0000BB56 6100 0000                  		bsr.w	SingleObjLoad2
0000BB5A 6600                       		bne.s	loc_B07A
0000BB5C 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000BB60 3368 0008 0008             		move.w	8(a0),8(a1)
0000BB66 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000BB6C 5069 002C                  		addq.w	#8,$2C(a1)
0000BB70 5769 002C                  		subq.w	#3,$2C(a1)
0000BB74 0469 0040 0008             		subi.w	#$40,8(a1)
0000BB7A 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000BB80 2348 0038                  		move.l	a0,$38(a1)
0000BB84 2448                       		movea.l	a0,a2
0000BB86 6100                       		bsr.s	sub_B09C
0000BB88                            
0000BB88                            loc_B07A:
0000BB88 7400                       		moveq	#0,d2
0000BB8A 45E8 0036                  		lea	$36(a0),a2
0000BB8E 141A                       		move.b	(a2)+,d2
0000BB90 5302                       		subq.b	#1,d2
0000BB92 6500                       		bcs.s	locret_B09A
0000BB94                            
0000BB94                            loc_B086:
0000BB94 7000                       		moveq	#0,d0
0000BB96 101A                       		move.b	(a2)+,d0
0000BB98 ED48                       		lsl.w	#6,d0
0000BB9A 0640 D000                  		addi.w	#-$3000,d0
0000BB9E 3240                       		movea.w	d0,a1
0000BBA0 3341 003C                  		move.w	d1,$3C(a1)
0000BBA4 51CA FFEE                  		dbf	d2,loc_B086
0000BBA8                            
0000BBA8                            locret_B09A:
0000BBA8 4E75                       		rts	
0000BBAA                            
0000BBAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BBAA                            
0000BBAA                            
0000BBAA                            sub_B09C:
0000BBAA 45EA 0036                  		lea	$36(a2),a2
0000BBAE 7000                       		moveq	#0,d0
0000BBB0 1012                       		move.b	(a2),d0
0000BBB2 5212                       		addq.b	#1,(a2)
0000BBB4 45F2 0001                  		lea	1(a2,d0.w),a2
0000BBB8 3009                       		move.w	a1,d0
0000BBBA 0440 D000                  		subi.w	#-$3000,d0
0000BBBE EC48                       		lsr.w	#6,d0
0000BBC0 0240 007F                  		andi.w	#$7F,d0
0000BBC4 1480                       		move.b	d0,(a2)
0000BBC6 4E75                       		rts	
0000BBC8                            ; End of function sub_B09C
0000BBC8                            
0000BBC8                            ; ===========================================================================
0000BBC8                            
0000BBC8                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000BBC8 4A28 0035                  		tst.b	$35(a0)
0000BBCC 6700                       		beq.s	loc_B0C6
0000BBCE 4A28 0001                  		tst.b	1(a0)
0000BBD2 6A00                       		bpl.s	Obj2F_DelFlames
0000BBD4                            
0000BBD4                            loc_B0C6:
0000BBD4 3028 002A                  		move.w	$2A(a0),d0
0000BBD8 0240 FF80                  		andi.w	#$FF80,d0
0000BBDC 3238 F700                  		move.w	($FFFFF700).w,d1
0000BBE0 0441 0080                  		subi.w	#$80,d1
0000BBE4 0241 FF80                  		andi.w	#$FF80,d1
0000BBE8 9041                       		sub.w	d1,d0
0000BBEA 0C40 0280                  		cmpi.w	#$280,d0
0000BBEE 6200 0000                  		bhi.w	DeleteObject
0000BBF2 4E75                       		rts	
0000BBF4                            ; ===========================================================================
0000BBF4                            
0000BBF4                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000BBF4 7400                       		moveq	#0,d2
0000BBF6                            
0000BBF6                            loc_B0E8:
0000BBF6 45E8 0036                  		lea	$36(a0),a2
0000BBFA 1412                       		move.b	(a2),d2
0000BBFC 421A                       		clr.b	(a2)+
0000BBFE 5302                       		subq.b	#1,d2
0000BC00 6500                       		bcs.s	locret_B116
0000BC02                            
0000BC02                            loc_B0F4:
0000BC02 7000                       		moveq	#0,d0
0000BC04 1012                       		move.b	(a2),d0
0000BC06 421A                       		clr.b	(a2)+
0000BC08 ED48                       		lsl.w	#6,d0
0000BC0A 0640 D000                  		addi.w	#-$3000,d0
0000BC0E 3240                       		movea.w	d0,a1
0000BC10 6100 0000                  		bsr.w	DeleteObject2
0000BC14 51CA FFEC                  		dbf	d2,loc_B0F4
0000BC18 117C 0000 0035             		move.b	#0,$35(a0)
0000BC1E 117C 0000 0034             		move.b	#0,$34(a0)
0000BC24                            
0000BC24                            locret_B116:
0000BC24 4E75                       		rts	
0000BC26                            ; ===========================================================================
0000BC26                            ; ---------------------------------------------------------------------------
0000BC26                            ; Collision data for large moving platforms (MZ)
0000BC26                            ; ---------------------------------------------------------------------------
0000BC26                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000BC72                            		even
0000BC72                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000BC9E                            		even
0000BC9E                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000BCEA                            		even
0000BCEA                            ; ===========================================================================
0000BCEA                            ; ---------------------------------------------------------------------------
0000BCEA                            ; Object 35 - fireball that sits on the	floor (MZ)
0000BCEA                            ; (appears when	you walk on sinking platforms)
0000BCEA                            ; ---------------------------------------------------------------------------
0000BCEA                            
0000BCEA                            Obj35:					; XREF: Obj_Index
0000BCEA 7000                       		moveq	#0,d0
0000BCEC 1028 0024                  		move.b	$24(a0),d0
0000BCF0 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000BCF4 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000BCF8                            ; ===========================================================================
0000BCF8 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000BCFA 0000                       		dc.w loc_B238-Obj35_Index
0000BCFC 0000                       		dc.w Obj35_Move-Obj35_Index
0000BCFE                            ; ===========================================================================
0000BCFE                            
0000BCFE                            Obj35_Main:				; XREF: Obj35_Index
0000BCFE 5428 0024                  		addq.b	#2,$24(a0)
0000BD02 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000BD0A 317C 0345 0002             		move.w	#$345,2(a0)
0000BD10 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000BD16 117C 0004 0001             		move.b	#4,1(a0)
0000BD1C 117C 0001 0018             		move.b	#1,$18(a0)
0000BD22 117C 008B 0020             		move.b	#$8B,$20(a0)
0000BD28 117C 0008 0019             		move.b	#8,$19(a0)
0000BD2E 303C 00C8                  		move.w	#$C8,d0
0000BD32 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play flame sound
0000BD38 4A28 0028                  		tst.b	$28(a0)
0000BD3C 6700                       		beq.s	loc_B238
0000BD3E 5428 0024                  		addq.b	#2,$24(a0)
0000BD42 6000 0000                  		bra.w	Obj35_Move
0000BD46                            ; ===========================================================================
0000BD46                            
0000BD46                            loc_B238:				; XREF: Obj35_Index
0000BD46 2268 0030                  		movea.l	$30(a0),a1
0000BD4A 3228 0008                  		move.w	8(a0),d1
0000BD4E 9268 002A                  		sub.w	$2A(a0),d1
0000BD52 0641 000C                  		addi.w	#$C,d1
0000BD56 3001                       		move.w	d1,d0
0000BD58 E248                       		lsr.w	#1,d0
0000BD5A 1031 0000                  		move.b	(a1,d0.w),d0
0000BD5E 4440                       		neg.w	d0
0000BD60 D068 002C                  		add.w	$2C(a0),d0
0000BD64 3400                       		move.w	d0,d2
0000BD66 D068 003C                  		add.w	$3C(a0),d0
0000BD6A 3140 000C                  		move.w	d0,$C(a0)
0000BD6E 0C41 0084                  		cmpi.w	#$84,d1
0000BD72 6400                       		bcc.s	loc_B2B0
0000BD74 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000BD7C 0C41 0080                  		cmpi.w	#$80,d1
0000BD80 6400                       		bcc.s	loc_B2B0
0000BD82 2028 0008                  		move.l	8(a0),d0
0000BD86 0680 0008 0000             		addi.l	#$80000,d0
0000BD8C 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000BD92 6600                       		bne.s	loc_B2B0
0000BD94 6100 0000                  		bsr.w	SingleObjLoad2
0000BD98 6600                       		bne.s	loc_B2B0
0000BD9A 12BC 0035                  		move.b	#$35,0(a1)
0000BD9E 3368 0008 0008             		move.w	8(a0),8(a1)
0000BDA4 3342 002C                  		move.w	d2,$2C(a1)
0000BDA8 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000BDAE 137C 0001 0028             		move.b	#1,$28(a1)
0000BDB4 2468 0038                  		movea.l	$38(a0),a2
0000BDB8 6100 FDF0                  		bsr.w	sub_B09C
0000BDBC                            
0000BDBC                            loc_B2B0:
0000BDBC 6000                       		bra.s	Obj35_Animate
0000BDBE                            ; ===========================================================================
0000BDBE                            
0000BDBE                            Obj35_Move:				; XREF: Obj35_Index
0000BDBE 3028 002C                  		move.w	$2C(a0),d0
0000BDC2 D068 003C                  		add.w	$3C(a0),d0
0000BDC6 3140 000C                  		move.w	d0,$C(a0)
0000BDCA                            
0000BDCA                            Obj35_Animate:				; XREF: loc_B238
0000BDCA 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000BDD0 6100 F450                  		bsr.w	AnimateSprite
0000BDD4 6000 0000                  		bra.w	DisplaySprite
0000BDD8                            ; ===========================================================================
0000BDD8                            Ani_obj35:
0000BDD8                            	include "_anim\obj35.asm"
0000BDD8                            ; ---------------------------------------------------------------------------
0000BDD8                            ; Animation script - fireball that sits on the	floor (MZ)
0000BDD8                            ; ---------------------------------------------------------------------------
0000BDD8 0000                       		dc.w byte_B2CE-Ani_obj35
0000BDDA 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000BDE0                            		even
0000BDE0                            		even
0000BDE0                            
0000BDE0                            ; ---------------------------------------------------------------------------
0000BDE0                            ; Sprite mappings - large moving platforms (MZ)
0000BDE0                            ; ---------------------------------------------------------------------------
0000BDE0                            Map_obj2F:
0000BDE0                            	include "_maps\obj2F.asm"
0000BDE0                            ; ---------------------------------------------------------------------------
0000BDE0                            ; Sprite mappings - large moving platforms (MZ)
0000BDE0                            ; ---------------------------------------------------------------------------
0000BDE0 0000                       		dc.w byte_B2DA-Map_obj2F
0000BDE2 0000                       		dc.w byte_B31C-Map_obj2F
0000BDE4 0000                       		dc.w byte_B34F-Map_obj2F
0000BDE6 0D                         byte_B2DA:	dc.b $D
0000BDE7 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000BDEC F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000BDF1 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BDF6 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000BDFB F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000BE00 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BE05 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000BE0A D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000BE0F F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000BE14 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BE19 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000BE1E D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000BE23 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000BE28 0A                         byte_B31C:	dc.b $A
0000BE29 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000BE2E F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000BE33 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BE38 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000BE3D E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000BE42 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BE47 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000BE4C E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000BE51 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000BE56 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000BE5B 06                         byte_B34F:	dc.b 6
0000BE5C D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000BE61 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BE66 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000BE6B D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000BE70 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BE75 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000BE7A                            		even
0000BE7A                            		even
0000BE7A                            
0000BE7A                            ; ---------------------------------------------------------------------------
0000BE7A                            ; Sprite mappings - lava balls (MZ, SLZ)
0000BE7A                            ; ---------------------------------------------------------------------------
0000BE7A                            Map_obj14:
0000BE7A                            	include "_maps\obj14.asm"
0000BE7A                            ; ---------------------------------------------------------------------------
0000BE7A                            ; Sprite mappings - lava balls (MZ, SLZ)
0000BE7A                            ; ---------------------------------------------------------------------------
0000BE7A 0000                       		dc.w byte_B37A-Map_obj14
0000BE7C 0000                       		dc.w byte_B380-Map_obj14
0000BE7E 0000                       		dc.w byte_B386-Map_obj14
0000BE80 0000                       		dc.w byte_B38C-Map_obj14
0000BE82 0000                       		dc.w byte_B392-Map_obj14
0000BE84 0000                       		dc.w byte_B398-Map_obj14
0000BE86 01                         byte_B37A:	dc.b 1
0000BE87 E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000BE8C 01                         byte_B380:	dc.b 1
0000BE8D E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000BE92 01                         byte_B386:	dc.b 1
0000BE93 F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000BE98 01                         byte_B38C:	dc.b 1
0000BE99 F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000BE9E 01                         byte_B392:	dc.b 1
0000BE9F F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000BEA4 01                         byte_B398:	dc.b 1
0000BEA5 F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000BEAA                            		even
0000BEAA                            		even
0000BEAA                            
0000BEAA                            ; ===========================================================================
0000BEAA                            ; ---------------------------------------------------------------------------
0000BEAA                            ; Object 30 - large green glassy blocks	(MZ)
0000BEAA                            ; ---------------------------------------------------------------------------
0000BEAA                            
0000BEAA                            Obj30:					; XREF: Obj_Index
0000BEAA 7000                       		moveq	#0,d0
0000BEAC 1028 0024                  		move.b	$24(a0),d0
0000BEB0 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000BEB4 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000BEB8 3028 0008                  		move.w	8(a0),d0
0000BEBC 0240 FF80                  		andi.w	#$FF80,d0
0000BEC0 3238 F700                  		move.w	($FFFFF700).w,d1
0000BEC4 0441 0080                  		subi.w	#$80,d1
0000BEC8 0241 FF80                  		andi.w	#$FF80,d1
0000BECC 9041                       		sub.w	d1,d0
0000BECE 0C40 0280                  		cmpi.w	#$280,d0
0000BED2 6200 0000                  		bhi.w	Obj30_Delete
0000BED6 6000 0000                  		bra.w	DisplaySprite
0000BEDA                            ; ===========================================================================
0000BEDA                            
0000BEDA                            Obj30_Delete:
0000BEDA 6000 0000                  		bra.w	DeleteObject
0000BEDE                            ; ===========================================================================
0000BEDE 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000BEE0 0000                       		dc.w Obj30_Block012-Obj30_Index
0000BEE2 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000BEE4 0000                       		dc.w Obj30_Block34-Obj30_Index
0000BEE6 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000BEE8                            
0000BEE8 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000BEEB 0400 01                    		dc.b 4,	0, 1
0000BEEE 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000BEF1 0800 01                    		dc.b 8,	0, 1
0000BEF4                            ; ===========================================================================
0000BEF4                            
0000BEF4                            Obj30_Main:				; XREF: Obj30_Index
0000BEF4 45F9 0000 BEE8             		lea	(Obj30_Vars1).l,a2
0000BEFA 7201                       		moveq	#1,d1
0000BEFC 117C 0048 0016             		move.b	#$48,$16(a0)
0000BF02 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000BF08 6500                       		bcs.s	loc_B40C	; if yes, branch
0000BF0A 45F9 0000 BEEE             		lea	(Obj30_Vars2).l,a2
0000BF10 7201                       		moveq	#1,d1
0000BF12 117C 0038 0016             		move.b	#$38,$16(a0)
0000BF18                            
0000BF18                            loc_B40C:
0000BF18 2248                       		movea.l	a0,a1
0000BF1A 6000                       		bra.s	Obj30_Load	; load main object
0000BF1C                            ; ===========================================================================
0000BF1C                            
0000BF1C                            Obj30_Loop:
0000BF1C 6100 0000                  		bsr.w	SingleObjLoad2
0000BF20 6600                       		bne.s	loc_B480
0000BF22                            
0000BF22                            Obj30_Load:				; XREF: Obj30_Main
0000BF22 135A 0024                  		move.b	(a2)+,$24(a1)
0000BF26 12BC 0030                  		move.b	#$30,0(a1)
0000BF2A 3368 0008 0008             		move.w	8(a0),8(a1)
0000BF30 101A                       		move.b	(a2)+,d0
0000BF32 4880                       		ext.w	d0
0000BF34 D068 000C                  		add.w	$C(a0),d0
0000BF38 3340 000C                  		move.w	d0,$C(a1)
0000BF3C 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000BF44 337C C38E 0002             		move.w	#$C38E,2(a1)
0000BF4A 137C 0004 0001             		move.b	#4,1(a1)
0000BF50 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BF56 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BF5C 137C 0020 0019             		move.b	#$20,$19(a1)
0000BF62 137C 0004 0018             		move.b	#4,$18(a1)
0000BF68 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BF6C 2348 003C                  		move.l	a0,$3C(a1)
0000BF70 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000BF74                            
0000BF74 137C 0010 0019             		move.b	#$10,$19(a1)
0000BF7A 137C 0003 0018             		move.b	#3,$18(a1)
0000BF80 5029 0028                  		addq.b	#8,$28(a1)
0000BF84 0229 000F 0028             		andi.b	#$F,$28(a1)
0000BF8A                            
0000BF8A                            loc_B480:
0000BF8A 317C 0090 0032             		move.w	#$90,$32(a0)
0000BF90 08E8 0004 0001             		bset	#4,1(a0)
0000BF96                            
0000BF96                            Obj30_Block012:				; XREF: Obj30_Index
0000BF96 6100 0000                  		bsr.w	Obj30_Types
0000BF9A 323C 002B                  		move.w	#$2B,d1
0000BF9E 343C 0048                  		move.w	#$48,d2
0000BFA2 363C 0049                  		move.w	#$49,d3
0000BFA6 3828 0008                  		move.w	8(a0),d4
0000BFAA 6000 0000                  		bra.w	SolidObject
0000BFAE                            ; ===========================================================================
0000BFAE                            
0000BFAE                            Obj30_Reflect012:			; XREF: Obj30_Index
0000BFAE 2268 003C                  		movea.l	$3C(a0),a1
0000BFB2 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BFB8 6000 0000                  		bra.w	Obj30_Types
0000BFBC                            ; ===========================================================================
0000BFBC                            
0000BFBC                            Obj30_Block34:				; XREF: Obj30_Index
0000BFBC 6100 0000                  		bsr.w	Obj30_Types
0000BFC0 323C 002B                  		move.w	#$2B,d1
0000BFC4 343C 0038                  		move.w	#$38,d2
0000BFC8 363C 0039                  		move.w	#$39,d3
0000BFCC 3828 0008                  		move.w	8(a0),d4
0000BFD0 6000 0000                  		bra.w	SolidObject
0000BFD4                            ; ===========================================================================
0000BFD4                            
0000BFD4                            Obj30_Reflect34:			; XREF: Obj30_Index
0000BFD4 2268 003C                  		movea.l	$3C(a0),a1
0000BFD8 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BFDE 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000BFE4 6000 0002                  		bra.w	*+4
0000BFE8                            
0000BFE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BFE8                            
0000BFE8                            
0000BFE8                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000BFE8 7000                       		moveq	#0,d0
0000BFEA 1028 0028                  		move.b	$28(a0),d0
0000BFEE 0240 0007                  		andi.w	#7,d0
0000BFF2 D040                       		add.w	d0,d0
0000BFF4 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000BFF8 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000BFFC                            ; End of function Obj30_Types
0000BFFC                            
0000BFFC                            ; ===========================================================================
0000BFFC 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000BFFE 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000C000 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000C002 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000C004 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000C006                            ; ===========================================================================
0000C006                            
0000C006                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000C006 4E75                       		rts	
0000C008                            ; ===========================================================================
0000C008                            
0000C008                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000C008 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C00C 323C 0040                  		move.w	#$40,d1
0000C010 6000                       		bra.s	loc_B514
0000C012                            ; ===========================================================================
0000C012                            
0000C012                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000C012 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C016 323C 0040                  		move.w	#$40,d1
0000C01A 4440                       		neg.w	d0
0000C01C D041                       		add.w	d1,d0
0000C01E                            
0000C01E                            loc_B514:				; XREF: Obj30_Type01
0000C01E 0828 0003 0028             		btst	#3,$28(a0)
0000C024 6700                       		beq.s	loc_B526
0000C026 4440                       		neg.w	d0
0000C028 D041                       		add.w	d1,d0
0000C02A E208                       		lsr.b	#1,d0
0000C02C 0640 0020                  		addi.w	#$20,d0
0000C030                            
0000C030                            loc_B526:
0000C030 6000 0000                  		bra.w	loc_B5EE
0000C034                            ; ===========================================================================
0000C034                            
0000C034                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000C034 0828 0003 0028             		btst	#3,$28(a0)
0000C03A 6700                       		beq.s	loc_B53E
0000C03C 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C040 0440 0010                  		subi.w	#$10,d0
0000C044 6000 0000                  		bra.w	loc_B5EE
0000C048                            ; ===========================================================================
0000C048                            
0000C048                            loc_B53E:
0000C048 0828 0003 0022             		btst	#3,$22(a0)
0000C04E 6600                       		bne.s	loc_B54E
0000C050 08A8 0000 0034             		bclr	#0,$34(a0)
0000C056 6000                       		bra.s	loc_B582
0000C058                            ; ===========================================================================
0000C058                            
0000C058                            loc_B54E:
0000C058 4A28 0034                  		tst.b	$34(a0)
0000C05C 6600                       		bne.s	loc_B582
0000C05E 117C 0001 0034             		move.b	#1,$34(a0)
0000C064 08E8 0000 0035             		bset	#0,$35(a0)
0000C06A 6700                       		beq.s	loc_B582
0000C06C 08E8 0007 0034             		bset	#7,$34(a0)
0000C072 317C 0010 0036             		move.w	#$10,$36(a0)
0000C078 117C 000A 0038             		move.b	#$A,$38(a0)
0000C07E 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000C084 6600                       		bne.s	loc_B582
0000C086 317C 0040 0036             		move.w	#$40,$36(a0)
0000C08C                            
0000C08C                            loc_B582:
0000C08C 4A28 0034                  		tst.b	$34(a0)
0000C090 6A00                       		bpl.s	loc_B5AA
0000C092 4A28 0038                  		tst.b	$38(a0)
0000C096 6700                       		beq.s	loc_B594
0000C098 5328 0038                  		subq.b	#1,$38(a0)
0000C09C 6600                       		bne.s	loc_B5AA
0000C09E                            
0000C09E                            loc_B594:
0000C09E 4A68 0032                  		tst.w	$32(a0)
0000C0A2 6700                       		beq.s	loc_B5A4
0000C0A4 5368 0032                  		subq.w	#1,$32(a0)
0000C0A8 5368 0036                  		subq.w	#1,$36(a0)
0000C0AC 6600                       		bne.s	loc_B5AA
0000C0AE                            
0000C0AE                            loc_B5A4:
0000C0AE 08A8 0007 0034             		bclr	#7,$34(a0)
0000C0B4                            
0000C0B4                            loc_B5AA:
0000C0B4 3028 0032                  		move.w	$32(a0),d0
0000C0B8 6000                       		bra.s	loc_B5EE
0000C0BA                            ; ===========================================================================
0000C0BA                            
0000C0BA                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000C0BA 0828 0003 0028             		btst	#3,$28(a0)
0000C0C0 6700                       		beq.s	Obj30_ChkSwitch
0000C0C2 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C0C6 0440 0010                  		subi.w	#$10,d0
0000C0CA 6000                       		bra.s	loc_B5EE
0000C0CC                            ; ===========================================================================
0000C0CC                            
0000C0CC                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000C0CC 4A28 0034                  		tst.b	$34(a0)
0000C0D0 6600                       		bne.s	loc_B5E0
0000C0D2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000C0D6 7000                       		moveq	#0,d0
0000C0D8 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000C0DC E848                       		lsr.w	#4,d0		; read only the	first nybble
0000C0DE 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000C0E2 6700                       		beq.s	loc_B5EA	; if not, branch
0000C0E4 117C 0001 0034             		move.b	#1,$34(a0)
0000C0EA                            
0000C0EA                            loc_B5E0:
0000C0EA 4A68 0032                  		tst.w	$32(a0)
0000C0EE 6700                       		beq.s	loc_B5EA
0000C0F0 5568 0032                  		subq.w	#2,$32(a0)
0000C0F4                            
0000C0F4                            loc_B5EA:
0000C0F4 3028 0032                  		move.w	$32(a0),d0
0000C0F8                            
0000C0F8                            loc_B5EE:
0000C0F8 3228 0030                  		move.w	$30(a0),d1
0000C0FC 9240                       		sub.w	d0,d1
0000C0FE 3141 000C                  		move.w	d1,$C(a0)
0000C102 4E75                       		rts	
0000C104                            ; ===========================================================================
0000C104                            ; ---------------------------------------------------------------------------
0000C104                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C104                            ; ---------------------------------------------------------------------------
0000C104                            Map_obj30:
0000C104                            	include "_maps\obj30.asm"
0000C104                            ; ---------------------------------------------------------------------------
0000C104                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C104                            ; ---------------------------------------------------------------------------
0000C104 0000                       		dc.w byte_B600-Map_obj30
0000C106 0000                       		dc.w byte_B63D-Map_obj30
0000C108 0000                       		dc.w byte_B648-Map_obj30
0000C10A 0C                         byte_B600:	dc.b $C
0000C10B B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000C110 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000C115 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000C11A C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000C11F E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000C124 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000C129 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000C12E 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000C133 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000C138 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000C13D 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000C142 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000C147 02                         byte_B63D:	dc.b 2
0000C148 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000C14D 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000C152 0A                         byte_B648:	dc.b $A
0000C153 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000C158 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000C15D D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000C162 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000C167 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000C16C F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000C171 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000C176 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000C17B 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000C180 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000C186 00                         		even
0000C186 00                         		even
0000C186                            
0000C186                            ; ===========================================================================
0000C186                            ; ---------------------------------------------------------------------------
0000C186                            ; Object 31 - stomping metal blocks on chains (MZ)
0000C186                            ; ---------------------------------------------------------------------------
0000C186                            
0000C186                            Obj31:					; XREF: Obj_Index
0000C186 7000                       		moveq	#0,d0
0000C188 1028 0024                  		move.b	$24(a0),d0
0000C18C 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000C190 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000C194                            ; ===========================================================================
0000C194 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000C196 0000                       		dc.w loc_B798-Obj31_Index
0000C198 0000                       		dc.w loc_B7FE-Obj31_Index
0000C19A 0000                       		dc.w Obj31_Display2-Obj31_Index
0000C19C 0000                       		dc.w loc_B7E2-Obj31_Index
0000C19E                            
0000C19E 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000C1A0 0100                       		dc.b 1,	0
0000C1A2                            
0000C1A2 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000C1A5 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000C1A8 08CC 03                    		dc.b 8,	$CC, 3
0000C1AB 06F0 02                    		dc.b 6,	$F0, 2
0000C1AE                            
0000C1AE 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000C1B2 5000 7800                  		dc.w $5000, $7800
0000C1B6 3800 5800                  		dc.w $3800, $5800
0000C1BA B800                       		dc.w $B800
0000C1BC                            ; ===========================================================================
0000C1BC                            
0000C1BC                            Obj31_Main:				; XREF: Obj31_Index
0000C1BC 7000                       		moveq	#0,d0
0000C1BE 1028 0028                  		move.b	$28(a0),d0
0000C1C2 6A00                       		bpl.s	loc_B6CE
0000C1C4 0240 007F                  		andi.w	#$7F,d0
0000C1C8 D040                       		add.w	d0,d0
0000C1CA 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000C1CE 115A 003A                  		move.b	(a2)+,$3A(a0)
0000C1D2 101A                       		move.b	(a2)+,d0
0000C1D4 1140 0028                  		move.b	d0,$28(a0)
0000C1D8                            
0000C1D8                            loc_B6CE:
0000C1D8 0200 000F                  		andi.b	#$F,d0
0000C1DC D040                       		add.w	d0,d0
0000C1DE 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000C1E2 4A40                       		tst.w	d0
0000C1E4 6600                       		bne.s	loc_B6E0
0000C1E6 3142 0032                  		move.w	d2,$32(a0)
0000C1EA                            
0000C1EA                            loc_B6E0:
0000C1EA 45F9 0000 C1A2             		lea	(Obj31_Var).l,a2
0000C1F0 2248                       		movea.l	a0,a1
0000C1F2 7203                       		moveq	#3,d1
0000C1F4 6000                       		bra.s	Obj31_MakeStomper
0000C1F6                            ; ===========================================================================
0000C1F6                            
0000C1F6                            Obj31_Loop:
0000C1F6 6100 0000                  		bsr.w	SingleObjLoad2
0000C1FA 6600 0000                  		bne.w	Obj31_SetSize
0000C1FE                            
0000C1FE                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000C1FE 135A 0024                  		move.b	(a2)+,$24(a1)
0000C202 12BC 0031                  		move.b	#$31,0(a1)
0000C206 3368 0008 0008             		move.w	8(a0),8(a1)
0000C20C 101A                       		move.b	(a2)+,d0
0000C20E 4880                       		ext.w	d0
0000C210 D068 000C                  		add.w	$C(a0),d0
0000C214 3340 000C                  		move.w	d0,$C(a1)
0000C218 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000C220 337C 0300 0002             		move.w	#$300,2(a1)
0000C226 137C 0004 0001             		move.b	#4,1(a1)
0000C22C 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000C232 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C238 137C 0010 0019             		move.b	#$10,$19(a1)
0000C23E 3342 0034                  		move.w	d2,$34(a1)
0000C242 137C 0004 0018             		move.b	#4,$18(a1)
0000C248 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C24C 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000C252 6600                       		bne.s	loc_B76A
0000C254 5341                       		subq.w	#1,d1
0000C256 1028 0028                  		move.b	$28(a0),d0
0000C25A 0240 00F0                  		andi.w	#$F0,d0
0000C25E 0C40 0020                  		cmpi.w	#$20,d0
0000C262 679A                       		beq.s	Obj31_MakeStomper
0000C264 137C 0038 0019             		move.b	#$38,$19(a1)
0000C26A 137C 0090 0020             		move.b	#$90,$20(a1)
0000C270 5241                       		addq.w	#1,d1
0000C272                            
0000C272                            loc_B76A:
0000C272 2348 003C                  		move.l	a0,$3C(a1)
0000C276 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000C27A                            
0000C27A 137C 0003 0018             		move.b	#3,$18(a1)
0000C280                            
0000C280                            Obj31_SetSize:
0000C280 7000                       		moveq	#0,d0
0000C282 1028 0028                  		move.b	$28(a0),d0
0000C286 E648                       		lsr.w	#3,d0
0000C288 0200 000E                  		andi.b	#$E,d0
0000C28C 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000C290 115A 0019                  		move.b	(a2)+,$19(a0)
0000C294 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C298 6000                       		bra.s	loc_B798
0000C29A                            ; ===========================================================================
0000C29A 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000C29C 3009                       		dc.b $30, 9
0000C29E 100A                       		dc.b $10, $A
0000C2A0                            ; ===========================================================================
0000C2A0                            
0000C2A0                            loc_B798:				; XREF: Obj31_Index
0000C2A0 6100 0000                  		bsr.w	Obj31_Types
0000C2A4 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000C2AA 7200                       		moveq	#0,d1
0000C2AC 1228 0019                  		move.b	$19(a0),d1
0000C2B0 0641 000B                  		addi.w	#$B,d1
0000C2B4 343C 000C                  		move.w	#$C,d2
0000C2B8 363C 000D                  		move.w	#$D,d3
0000C2BC 3828 0008                  		move.w	8(a0),d4
0000C2C0 6100 0000                  		bsr.w	SolidObject
0000C2C4 0828 0003 0022             		btst	#3,$22(a0)
0000C2CA 6700                       		beq.s	Obj31_Display
0000C2CC 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C2D2 6400                       		bcc.s	Obj31_Display
0000C2D4 2448                       		movea.l	a0,a2
0000C2D6 41F8 D000                  		lea	($FFFFD000).w,a0
0000C2DA 4EB9 0000 0000             		jsr	KillSonic
0000C2E0 204A                       		movea.l	a2,a0
0000C2E2                            
0000C2E2                            Obj31_Display:
0000C2E2 6100 0000                  		bsr.w	DisplaySprite
0000C2E6 6000 0000                  		bra.w	Obj31_ChkDel
0000C2EA                            ; ===========================================================================
0000C2EA                            
0000C2EA                            loc_B7E2:				; XREF: Obj31_Index
0000C2EA 117C 0080 0016             		move.b	#$80,$16(a0)
0000C2F0 08E8 0004 0001             		bset	#4,1(a0)
0000C2F6 2268 003C                  		movea.l	$3C(a0),a1
0000C2FA 1029 0032                  		move.b	$32(a1),d0
0000C2FE EA08                       		lsr.b	#5,d0
0000C300 5600                       		addq.b	#3,d0
0000C302 1140 001A                  		move.b	d0,$1A(a0)
0000C306                            
0000C306                            loc_B7FE:				; XREF: Obj31_Index
0000C306 2268 003C                  		movea.l	$3C(a0),a1
0000C30A 7000                       		moveq	#0,d0
0000C30C 1029 0032                  		move.b	$32(a1),d0
0000C310 D068 0030                  		add.w	$30(a0),d0
0000C314 3140 000C                  		move.w	d0,$C(a0)
0000C318                            
0000C318                            Obj31_Display2:				; XREF: Obj31_Index
0000C318 6100 0000                  		bsr.w	DisplaySprite
0000C31C                            
0000C31C                            Obj31_ChkDel:				; XREF: Obj31_Display
0000C31C 3028 0008                  		move.w	8(a0),d0
0000C320 0240 FF80                  		andi.w	#$FF80,d0
0000C324 3238 F700                  		move.w	($FFFFF700).w,d1
0000C328 0441 0080                  		subi.w	#$80,d1
0000C32C 0241 FF80                  		andi.w	#$FF80,d1
0000C330 9041                       		sub.w	d1,d0
0000C332 0C40 0280                  		cmpi.w	#$280,d0
0000C336 6200 0000                  		bhi.w	DeleteObject
0000C33A 4E75                       		rts	
0000C33C                            ; ===========================================================================
0000C33C                            
0000C33C                            Obj31_Types:				; XREF: loc_B798
0000C33C 1028 0028                  		move.b	$28(a0),d0
0000C340 0240 000F                  		andi.w	#$F,d0
0000C344 D040                       		add.w	d0,d0
0000C346 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000C34A 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000C34E                            ; ===========================================================================
0000C34E 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000C350 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C352 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C354 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C356 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C358 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C35A 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C35C                            ; ===========================================================================
0000C35C                            
0000C35C                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000C35C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000C360 7000                       		moveq	#0,d0
0000C362 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000C366 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000C36A 6700                       		beq.s	loc_B8A8	; if not, branch
0000C36C 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000C370 6A00                       		bpl.s	loc_B872
0000C372 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C378 6700                       		beq.s	loc_B8A0
0000C37A                            
0000C37A                            loc_B872:
0000C37A 4A68 0032                  		tst.w	$32(a0)
0000C37E 6700                       		beq.s	loc_B8A0
0000C380 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C384 0200 000F                  		andi.b	#$F,d0
0000C388 6600                       		bne.s	loc_B892
0000C38A 4A28 0001                  		tst.b	1(a0)
0000C38E 6A00                       		bpl.s	loc_B892
0000C390 303C 00C7                  		move.w	#$C7,d0
0000C394 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C39A                            
0000C39A                            loc_B892:
0000C39A 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C3A0 6400                       		bcc.s	Obj31_Restart
0000C3A2 317C 0000 0032             		move.w	#0,$32(a0)
0000C3A8                            
0000C3A8                            loc_B8A0:
0000C3A8 317C 0000 0012             		move.w	#0,$12(a0)
0000C3AE 6000                       		bra.s	Obj31_Restart
0000C3B0                            ; ===========================================================================
0000C3B0                            
0000C3B0                            loc_B8A8:				; XREF: Obj31_Type00
0000C3B0 3228 0034                  		move.w	$34(a0),d1
0000C3B4 B268 0032                  		cmp.w	$32(a0),d1
0000C3B8 6700                       		beq.s	Obj31_Restart
0000C3BA 3028 0012                  		move.w	$12(a0),d0
0000C3BE 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C3C4 D168 0032                  		add.w	d0,$32(a0)
0000C3C8 B268 0032                  		cmp.w	$32(a0),d1
0000C3CC 6200                       		bhi.s	Obj31_Restart
0000C3CE 3141 0032                  		move.w	d1,$32(a0)
0000C3D2 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C3D8 4A28 0001                  		tst.b	1(a0)
0000C3DC 6A00                       		bpl.s	Obj31_Restart
0000C3DE 303C 00BD                  		move.w	#$BD,d0
0000C3E2 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C3E8                            
0000C3E8                            Obj31_Restart:
0000C3E8 7000                       		moveq	#0,d0
0000C3EA 1028 0032                  		move.b	$32(a0),d0
0000C3EE D068 0030                  		add.w	$30(a0),d0
0000C3F2 3140 000C                  		move.w	d0,$C(a0)
0000C3F6 4E75                       		rts	
0000C3F8                            ; ===========================================================================
0000C3F8                            
0000C3F8                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000C3F8 4A68 0036                  		tst.w	$36(a0)
0000C3FC 6700                       		beq.s	loc_B938
0000C3FE 4A68 0038                  		tst.w	$38(a0)
0000C402 6700                       		beq.s	loc_B902
0000C404 5368 0038                  		subq.w	#1,$38(a0)
0000C408 6000                       		bra.s	loc_B97C
0000C40A                            ; ===========================================================================
0000C40A                            
0000C40A                            loc_B902:
0000C40A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C40E 0200 000F                  		andi.b	#$F,d0
0000C412 6600                       		bne.s	loc_B91C
0000C414 4A28 0001                  		tst.b	1(a0)
0000C418 6A00                       		bpl.s	loc_B91C
0000C41A 303C 00C7                  		move.w	#$C7,d0
0000C41E 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C424                            
0000C424                            loc_B91C:
0000C424 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C42A 6400                       		bcc.s	loc_B97C
0000C42C 317C 0000 0032             		move.w	#0,$32(a0)
0000C432 317C 0000 0012             		move.w	#0,$12(a0)
0000C438 317C 0000 0036             		move.w	#0,$36(a0)
0000C43E 6000                       		bra.s	loc_B97C
0000C440                            ; ===========================================================================
0000C440                            
0000C440                            loc_B938:				; XREF: Obj31_Type01
0000C440 3228 0034                  		move.w	$34(a0),d1
0000C444 B268 0032                  		cmp.w	$32(a0),d1
0000C448 6700                       		beq.s	loc_B97C
0000C44A 3028 0012                  		move.w	$12(a0),d0
0000C44E 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C454 D168 0032                  		add.w	d0,$32(a0)
0000C458 B268 0032                  		cmp.w	$32(a0),d1
0000C45C 6200                       		bhi.s	loc_B97C
0000C45E 3141 0032                  		move.w	d1,$32(a0)
0000C462 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C468 317C 0001 0036             		move.w	#1,$36(a0)
0000C46E 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C474 4A28 0001                  		tst.b	1(a0)
0000C478 6A00                       		bpl.s	loc_B97C
0000C47A 303C 00BD                  		move.w	#$BD,d0
0000C47E 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C484                            
0000C484                            loc_B97C:
0000C484 6000 FF62                  		bra.w	Obj31_Restart
0000C488                            ; ===========================================================================
0000C488                            
0000C488                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000C488 3038 D008                  		move.w	($FFFFD008).w,d0
0000C48C 9068 0008                  		sub.w	8(a0),d0
0000C490 6400                       		bcc.s	loc_B98C
0000C492 4440                       		neg.w	d0
0000C494                            
0000C494                            loc_B98C:
0000C494 0C40 0090                  		cmpi.w	#$90,d0
0000C498 6400                       		bcc.s	loc_B996
0000C49A 5228 0028                  		addq.b	#1,$28(a0)
0000C49E                            
0000C49E                            loc_B996:
0000C49E 6000 FF48                  		bra.w	Obj31_Restart
0000C4A2                            ; ===========================================================================
0000C4A2                            ; ---------------------------------------------------------------------------
0000C4A2                            ; Object 45 - spiked metal block from beta version (MZ)
0000C4A2                            ; ---------------------------------------------------------------------------
0000C4A2                            
0000C4A2                            Obj45:					; XREF: Obj_Index
0000C4A2 7000                       		moveq	#0,d0
0000C4A4 1028 0024                  		move.b	$24(a0),d0
0000C4A8 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000C4AC 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000C4B0                            ; ===========================================================================
0000C4B0 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000C4B2 0000                       		dc.w Obj45_Solid-Obj45_Index
0000C4B4 0000                       		dc.w loc_BA8E-Obj45_Index
0000C4B6 0000                       		dc.w Obj45_Display-Obj45_Index
0000C4B8 0000                       		dc.w loc_BA7A-Obj45_Index
0000C4BA                            
0000C4BA 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000C4BD 04E4 01                    		dc.b	4, $E4,	  1
0000C4C0 0834 03                    		dc.b	8, $34,	  3
0000C4C3 0628 02                    		dc.b	6, $28,	  2
0000C4C6                            
0000C4C6 3800                       word_B9BE:	dc.w $3800
0000C4C8 A000                       		dc.w -$6000
0000C4CA 5000                       		dc.w $5000
0000C4CC                            ; ===========================================================================
0000C4CC                            
0000C4CC                            Obj45_Main:				; XREF: Obj45_Index
0000C4CC 7000                       		moveq	#0,d0
0000C4CE 1028 0028                  		move.b	$28(a0),d0
0000C4D2 D040                       		add.w	d0,d0
0000C4D4 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000C4D8 45F9 0000 C4BA             		lea	(Obj45_Var).l,a2
0000C4DE 2248                       		movea.l	a0,a1
0000C4E0 7203                       		moveq	#3,d1
0000C4E2 6000                       		bra.s	Obj45_Load
0000C4E4                            ; ===========================================================================
0000C4E4                            
0000C4E4                            Obj45_Loop:
0000C4E4 6100 0000                  		bsr.w	SingleObjLoad2
0000C4E8 6600                       		bne.s	loc_BA52
0000C4EA                            
0000C4EA                            Obj45_Load:				; XREF: Obj45_Main
0000C4EA 135A 0024                  		move.b	(a2)+,$24(a1)
0000C4EE 12BC 0045                  		move.b	#$45,0(a1)
0000C4F2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C4F8 101A                       		move.b	(a2)+,d0
0000C4FA 4880                       		ext.w	d0
0000C4FC D068 0008                  		add.w	8(a0),d0
0000C500 3340 0008                  		move.w	d0,8(a1)
0000C504 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000C50C 337C 0300 0002             		move.w	#$300,2(a1)
0000C512 137C 0004 0001             		move.b	#4,1(a1)
0000C518 3369 0008 0030             		move.w	8(a1),$30(a1)
0000C51E 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000C524 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C52A 137C 0020 0019             		move.b	#$20,$19(a1)
0000C530 3342 0034                  		move.w	d2,$34(a1)
0000C534 137C 0004 0018             		move.b	#4,$18(a1)
0000C53A 0C12 0001                  		cmpi.b	#1,(a2)
0000C53E 6600                       		bne.s	loc_BA40
0000C540 137C 0091 0020             		move.b	#$91,$20(a1)
0000C546                            
0000C546                            loc_BA40:
0000C546 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C54A 2348 003C                  		move.l	a0,$3C(a1)
0000C54E 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000C552                            
0000C552 137C 0003 0018             		move.b	#3,$18(a1)
0000C558                            
0000C558                            loc_BA52:
0000C558 117C 0010 0019             		move.b	#$10,$19(a0)
0000C55E                            
0000C55E                            Obj45_Solid:				; XREF: Obj45_Index
0000C55E 3F28 0008                  		move.w	8(a0),-(sp)
0000C562 6100 0000                  		bsr.w	Obj45_Move
0000C566 323C 0017                  		move.w	#$17,d1
0000C56A 343C 0020                  		move.w	#$20,d2
0000C56E 363C 0020                  		move.w	#$20,d3
0000C572 381F                       		move.w	(sp)+,d4
0000C574 6100 0000                  		bsr.w	SolidObject
0000C578 6100 0000                  		bsr.w	DisplaySprite
0000C57C 6000 0000                  		bra.w	Obj45_ChkDel
0000C580                            ; ===========================================================================
0000C580                            
0000C580                            loc_BA7A:				; XREF: Obj45_Index
0000C580 2268 003C                  		movea.l	$3C(a0),a1
0000C584 1029 0032                  		move.b	$32(a1),d0
0000C588 0600 0010                  		addi.b	#$10,d0
0000C58C EA08                       		lsr.b	#5,d0
0000C58E 5600                       		addq.b	#3,d0
0000C590 1140 001A                  		move.b	d0,$1A(a0)
0000C594                            
0000C594                            loc_BA8E:				; XREF: Obj45_Index
0000C594 2268 003C                  		movea.l	$3C(a0),a1
0000C598 7000                       		moveq	#0,d0
0000C59A 1029 0032                  		move.b	$32(a1),d0
0000C59E 4440                       		neg.w	d0
0000C5A0 D068 0030                  		add.w	$30(a0),d0
0000C5A4 3140 0008                  		move.w	d0,8(a0)
0000C5A8                            
0000C5A8                            Obj45_Display:				; XREF: Obj45_Index
0000C5A8 6100 0000                  		bsr.w	DisplaySprite
0000C5AC                            
0000C5AC                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000C5AC 3028 003A                  		move.w	$3A(a0),d0
0000C5B0 0240 FF80                  		andi.w	#$FF80,d0
0000C5B4 3238 F700                  		move.w	($FFFFF700).w,d1
0000C5B8 0441 0080                  		subi.w	#$80,d1
0000C5BC 0241 FF80                  		andi.w	#$FF80,d1
0000C5C0 9041                       		sub.w	d1,d0
0000C5C2 0C40 0280                  		cmpi.w	#$280,d0
0000C5C6 6200 0000                  		bhi.w	DeleteObject
0000C5CA 4E75                       		rts	
0000C5CC                            
0000C5CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C5CC                            
0000C5CC                            
0000C5CC                            Obj45_Move:				; XREF: Obj45_Solid
0000C5CC 7000                       		moveq	#0,d0
0000C5CE 1028 0028                  		move.b	$28(a0),d0
0000C5D2 D040                       		add.w	d0,d0
0000C5D4 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000C5D8 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000C5DC                            ; End of function Obj45_Move
0000C5DC                            
0000C5DC                            ; ===========================================================================
0000C5DC 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000C5DE 0000                       		dc.w loc_BADA-off_BAD6
0000C5E0                            ; ===========================================================================
0000C5E0                            
0000C5E0                            loc_BADA:				; XREF: off_BAD6
0000C5E0 4A68 0036                  		tst.w	$36(a0)
0000C5E4 6700                       		beq.s	loc_BB08
0000C5E6 4A68 0038                  		tst.w	$38(a0)
0000C5EA 6700                       		beq.s	loc_BAEC
0000C5EC 5368 0038                  		subq.w	#1,$38(a0)
0000C5F0 6000                       		bra.s	loc_BB3C
0000C5F2                            ; ===========================================================================
0000C5F2                            
0000C5F2                            loc_BAEC:
0000C5F2 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C5F8 6400                       		bcc.s	loc_BB3C
0000C5FA 317C 0000 0032             		move.w	#0,$32(a0)
0000C600 317C 0000 0010             		move.w	#0,$10(a0)
0000C606 317C 0000 0036             		move.w	#0,$36(a0)
0000C60C 6000                       		bra.s	loc_BB3C
0000C60E                            ; ===========================================================================
0000C60E                            
0000C60E                            loc_BB08:				; XREF: loc_BADA
0000C60E 3228 0034                  		move.w	$34(a0),d1
0000C612 B268 0032                  		cmp.w	$32(a0),d1
0000C616 6700                       		beq.s	loc_BB3C
0000C618 3028 0010                  		move.w	$10(a0),d0
0000C61C 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C622 D168 0032                  		add.w	d0,$32(a0)
0000C626 B268 0032                  		cmp.w	$32(a0),d1
0000C62A 6200                       		bhi.s	loc_BB3C
0000C62C 3141 0032                  		move.w	d1,$32(a0)
0000C630 317C 0000 0010             		move.w	#0,$10(a0)
0000C636 317C 0001 0036             		move.w	#1,$36(a0)
0000C63C 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C642                            
0000C642                            loc_BB3C:
0000C642 7000                       		moveq	#0,d0
0000C644 1028 0032                  		move.b	$32(a0),d0
0000C648 4440                       		neg.w	d0
0000C64A D068 0030                  		add.w	$30(a0),d0
0000C64E 3140 0008                  		move.w	d0,8(a0)
0000C652 4E75                       		rts	
0000C654                            ; ===========================================================================
0000C654                            ; ---------------------------------------------------------------------------
0000C654                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C654                            ; ---------------------------------------------------------------------------
0000C654                            Map_obj31:
0000C654                            	include "_maps\obj31.asm"
0000C654                            ; ---------------------------------------------------------------------------
0000C654                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C654                            ; ---------------------------------------------------------------------------
0000C654 0000                       		dc.w byte_BB64-Map_obj31
0000C656 0000                       		dc.w byte_BB7E-Map_obj31
0000C658 0000                       		dc.w byte_BB98-Map_obj31
0000C65A 0000                       		dc.w byte_BB9E-Map_obj31
0000C65C 0000                       		dc.w byte_BBA9-Map_obj31
0000C65E 0000                       		dc.w byte_BBBE-Map_obj31
0000C660 0000                       		dc.w byte_BBDD-Map_obj31
0000C662 0000                       		dc.w byte_BC06-Map_obj31
0000C664 0000                       		dc.w byte_BC06-Map_obj31
0000C666 0000                       		dc.w byte_BC39-Map_obj31
0000C668 0000                       		dc.w byte_BC53-Map_obj31
0000C66A 05                         byte_BB64:	dc.b 5
0000C66B F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C670 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C675 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C67A F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C67F F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C684 05                         byte_BB7E:	dc.b 5
0000C685 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C68A F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C68F F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C694 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C699 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C69E 01                         byte_BB98:	dc.b 1
0000C69F DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C6A4 02                         byte_BB9E:	dc.b 2
0000C6A5 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C6AA 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C6AF 04                         byte_BBA9:	dc.b 4
0000C6B0 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C6B5 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C6BA 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C6BF 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C6C4 06                         byte_BBBE:	dc.b 6
0000C6C5 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C6CA D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C6CF E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C6D4 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C6D9 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C6DE 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C6E3 08                         byte_BBDD:	dc.b 8
0000C6E4 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C6E9 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C6EE C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C6F3 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C6F8 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C6FD F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C702 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C707 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C70C 0A                         byte_BC06:	dc.b $A
0000C70D 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C712 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C717 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C71C B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C721 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C726 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C72B E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C730 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C735 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C73A 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C73F 05                         byte_BC39:	dc.b 5
0000C740 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C745 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C74A F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C74F F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C754 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C759 01                         byte_BC53:	dc.b 1
0000C75A EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C760 00                         		even
0000C760 00                         		even
0000C760                            
0000C760                            ; ---------------------------------------------------------------------------
0000C760                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C760                            ; ---------------------------------------------------------------------------
0000C760                            Map_obj45:
0000C760                            	include "_maps\obj45.asm"
0000C760                            ; ---------------------------------------------------------------------------
0000C760                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C760                            ; ---------------------------------------------------------------------------
0000C760 0000                       		dc.w byte_BC6C-Map_obj45
0000C762 0000                       		dc.w byte_BC7C-Map_obj45
0000C764 0000                       		dc.w byte_BC8C-Map_obj45
0000C766 0000                       		dc.w byte_BC92-Map_obj45
0000C768 0000                       		dc.w byte_BC9D-Map_obj45
0000C76A 0000                       		dc.w byte_BCB2-Map_obj45
0000C76C 0000                       		dc.w byte_BCD1-Map_obj45
0000C76E 0000                       		dc.w byte_BCFA-Map_obj45
0000C770 0000                       		dc.w byte_BCFA-Map_obj45
0000C772 03                         byte_BC6C:	dc.b 3
0000C773 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C778 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C77D F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C782 03                         byte_BC7C:	dc.b 3
0000C783 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C788 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C78D 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C792 01                         byte_BC8C:	dc.b 1
0000C793 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C798 02                         byte_BC92:	dc.b 2
0000C799 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C79E F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C7A3 04                         byte_BC9D:	dc.b 4
0000C7A4 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C7A9 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C7AE F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C7B3 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C7B8 06                         byte_BCB2:	dc.b 6
0000C7B9 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C7BE F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C7C3 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C7C8 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C7CD F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C7D2 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C7D7 08                         byte_BCD1:	dc.b 8
0000C7D8 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C7DD F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C7E2 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C7E7 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C7EC F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C7F1 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C7F6 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C7FB F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C800 08                         byte_BCFA:	dc.b 8
0000C801 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C806 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C80B F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C810 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C815 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C81A F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C81F F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C824 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C829 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C82E F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C834 00                         		even
0000C834 00                         		even
0000C834                            
0000C834                            ; ===========================================================================
0000C834                            ; ---------------------------------------------------------------------------
0000C834                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C834                            ; ---------------------------------------------------------------------------
0000C834                            
0000C834                            Obj32:					; XREF: Obj_Index
0000C834 7000                       		moveq	#0,d0
0000C836 1028 0024                  		move.b	$24(a0),d0
0000C83A 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C83E 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C842                            ; ===========================================================================
0000C842 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C844 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C846                            ; ===========================================================================
0000C846                            
0000C846                            Obj32_Main:				; XREF: Obj32_Index
0000C846 5428 0024                  		addq.b	#2,$24(a0)
0000C84A 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C852 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C858 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C85E 6700                       		beq.s	loc_BD60
0000C860 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C866                            
0000C866                            loc_BD60:
0000C866 117C 0004 0001             		move.b	#4,1(a0)
0000C86C 117C 0010 0019             		move.b	#$10,$19(a0)
0000C872 117C 0004 0018             		move.b	#4,$18(a0)
0000C878 5668 000C                  		addq.w	#3,$C(a0)
0000C87C                            
0000C87C                            Obj32_Pressed:				; XREF: Obj32_Index
0000C87C 4A28 0001                  		tst.b	1(a0)
0000C880 6A00                       		bpl.s	Obj32_Display
0000C882 323C 001B                  		move.w	#$1B,d1
0000C886 343C 0005                  		move.w	#5,d2
0000C88A 363C 0005                  		move.w	#5,d3
0000C88E 3828 0008                  		move.w	8(a0),d4
0000C892 6100 0000                  		bsr.w	SolidObject
0000C896 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C89C 1028 0028                  		move.b	$28(a0),d0
0000C8A0 0240 000F                  		andi.w	#$F,d0
0000C8A4 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C8A8 47F3 0000                  		lea	(a3,d0.w),a3
0000C8AC 7600                       		moveq	#0,d3
0000C8AE 0828 0006 0028             		btst	#6,$28(a0)
0000C8B4 6700                       		beq.s	loc_BDB2
0000C8B6 7607                       		moveq	#7,d3
0000C8B8                            
0000C8B8                            loc_BDB2:
0000C8B8 4A28 0028                  		tst.b	$28(a0)
0000C8BC 6A00                       		bpl.s	loc_BDBE
0000C8BE 6100 0000                  		bsr.w	Obj32_MZBlock
0000C8C2 6600                       		bne.s	loc_BDC8
0000C8C4                            
0000C8C4                            loc_BDBE:
0000C8C4 4A28 0025                  		tst.b	$25(a0)
0000C8C8 6600                       		bne.s	loc_BDC8
0000C8CA 0793                       		bclr	d3,(a3)
0000C8CC 6000                       		bra.s	loc_BDDE
0000C8CE                            ; ===========================================================================
0000C8CE                            
0000C8CE                            loc_BDC8:
0000C8CE 4A13                       		tst.b	(a3)
0000C8D0 6600                       		bne.s	loc_BDD6
0000C8D2 303C 00CD                  		move.w	#$CD,d0
0000C8D6 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play switch sound
0000C8DC                            
0000C8DC                            loc_BDD6:
0000C8DC 07D3                       		bset	d3,(a3)
0000C8DE 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C8E4                            
0000C8E4                            loc_BDDE:
0000C8E4 0828 0005 0028             		btst	#5,$28(a0)
0000C8EA 6700                       		beq.s	Obj32_Display
0000C8EC 5328 001E                  		subq.b	#1,$1E(a0)
0000C8F0 6A00                       		bpl.s	Obj32_Display
0000C8F2 117C 0007 001E             		move.b	#7,$1E(a0)
0000C8F8 0868 0001 001A             		bchg	#1,$1A(a0)
0000C8FE                            
0000C8FE                            Obj32_Display:
0000C8FE 6100 0000                  		bsr.w	DisplaySprite
0000C902 3028 0008                  		move.w	8(a0),d0
0000C906 0240 FF80                  		andi.w	#$FF80,d0
0000C90A 3238 F700                  		move.w	($FFFFF700).w,d1
0000C90E 0441 0080                  		subi.w	#$80,d1
0000C912 0241 FF80                  		andi.w	#$FF80,d1
0000C916 9041                       		sub.w	d1,d0
0000C918 0C40 0280                  		cmpi.w	#$280,d0
0000C91C 6200 0000                  		bhi.w	Obj32_Delete
0000C920 4E75                       		rts	
0000C922                            ; ===========================================================================
0000C922                            
0000C922                            Obj32_Delete:
0000C922 6100 0000                  		bsr.w	DeleteObject
0000C926 4E75                       		rts	
0000C928                            
0000C928                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C928                            
0000C928                            
0000C928                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C928 3F03                       		move.w	d3,-(sp)
0000C92A 3428 0008                  		move.w	8(a0),d2
0000C92E 3628 000C                  		move.w	$C(a0),d3
0000C932 0442 0010                  		subi.w	#$10,d2
0000C936 5143                       		subq.w	#8,d3
0000C938 383C 0020                  		move.w	#$20,d4
0000C93C 3A3C 0010                  		move.w	#$10,d5
0000C940 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C944 3C3C 005F                  		move.w	#$5F,d6
0000C948                            
0000C948                            Obj32_MZLoop:
0000C948 4A29 0001                  		tst.b	1(a1)
0000C94C 6A00                       		bpl.s	loc_BE4E
0000C94E 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C952 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C954                            
0000C954                            loc_BE4E:
0000C954 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C958 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C95C                            
0000C95C 361F                       		move.w	(sp)+,d3
0000C95E 7000                       		moveq	#0,d0
0000C960                            
0000C960                            locret_BE5A:
0000C960 4E75                       		rts	
0000C962                            ; ===========================================================================
0000C962 1010                       Obj32_MZData:	dc.b $10, $10
0000C964                            ; ===========================================================================
0000C964                            
0000C964                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C964 7001                       		moveq	#1,d0
0000C966 0240 003F                  		andi.w	#$3F,d0
0000C96A D040                       		add.w	d0,d0
0000C96C 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C970 121A                       		move.b	(a2)+,d1
0000C972 4881                       		ext.w	d1
0000C974 3029 0008                  		move.w	8(a1),d0
0000C978 9041                       		sub.w	d1,d0
0000C97A 9042                       		sub.w	d2,d0
0000C97C 6400                       		bcc.s	loc_BE80
0000C97E D241                       		add.w	d1,d1
0000C980 D041                       		add.w	d1,d0
0000C982 6500                       		bcs.s	loc_BE84
0000C984 60CE                       		bra.s	loc_BE4E
0000C986                            ; ===========================================================================
0000C986                            
0000C986                            loc_BE80:
0000C986 B044                       		cmp.w	d4,d0
0000C988 62CA                       		bhi.s	loc_BE4E
0000C98A                            
0000C98A                            loc_BE84:
0000C98A 121A                       		move.b	(a2)+,d1
0000C98C 4881                       		ext.w	d1
0000C98E 3029 000C                  		move.w	$C(a1),d0
0000C992 9041                       		sub.w	d1,d0
0000C994 9043                       		sub.w	d3,d0
0000C996 6400                       		bcc.s	loc_BE9A
0000C998 D241                       		add.w	d1,d1
0000C99A D041                       		add.w	d1,d0
0000C99C 6500                       		bcs.s	loc_BE9E
0000C99E 60B4                       		bra.s	loc_BE4E
0000C9A0                            ; ===========================================================================
0000C9A0                            
0000C9A0                            loc_BE9A:
0000C9A0 B045                       		cmp.w	d5,d0
0000C9A2 62B0                       		bhi.s	loc_BE4E
0000C9A4                            
0000C9A4                            loc_BE9E:
0000C9A4 361F                       		move.w	(sp)+,d3
0000C9A6 7001                       		moveq	#1,d0
0000C9A8 4E75                       		rts	
0000C9AA                            ; End of function Obj32_MZBlock
0000C9AA                            
0000C9AA                            ; ===========================================================================
0000C9AA                            ; ---------------------------------------------------------------------------
0000C9AA                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C9AA                            ; ---------------------------------------------------------------------------
0000C9AA                            Map_obj32:
0000C9AA                            	include "_maps\obj32.asm"
0000C9AA                            ; ---------------------------------------------------------------------------
0000C9AA                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C9AA                            ; ---------------------------------------------------------------------------
0000C9AA 0000                       		dc.w byte_BEAC-Map_obj32
0000C9AC 0000                       		dc.w byte_BEB7-Map_obj32
0000C9AE 0000                       		dc.w byte_BEC2-Map_obj32
0000C9B0 0000                       		dc.w byte_BEB7-Map_obj32
0000C9B2 02                         byte_BEAC:	dc.b 2
0000C9B3 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C9B8 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C9BD 02                         byte_BEB7:	dc.b 2
0000C9BE F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C9C3 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C9C8 02                         byte_BEC2:	dc.b 2
0000C9C9 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C9CE F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C9D3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C9D8                            		even
0000C9D8                            		even
0000C9D8                            
0000C9D8                            ; ===========================================================================
0000C9D8                            ; ---------------------------------------------------------------------------
0000C9D8                            ; Object 33 - pushable blocks (MZ, LZ)
0000C9D8                            ; ---------------------------------------------------------------------------
0000C9D8                            
0000C9D8                            Obj33:					; XREF: Obj_Index
0000C9D8 7000                       		moveq	#0,d0
0000C9DA 1028 0024                  		move.b	$24(a0),d0
0000C9DE 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C9E2 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C9E6                            ; ===========================================================================
0000C9E6 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C9E8 0000                       		dc.w loc_BF6E-Obj33_Index
0000C9EA 0000                       		dc.w loc_C02C-Obj33_Index
0000C9EC                            
0000C9EC 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C9EE 4001                       		dc.b $40, 1
0000C9F0                            ; ===========================================================================
0000C9F0                            
0000C9F0                            Obj33_Main:				; XREF: Obj33_Index
0000C9F0 5428 0024                  		addq.b	#2,$24(a0)
0000C9F4 117C 000F 0016             		move.b	#$F,$16(a0)
0000C9FA 117C 000F 0017             		move.b	#$F,$17(a0)
0000CA00 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000CA08 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000CA0E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000CA14 6600                       		bne.s	loc_BF16
0000CA16 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000CA1C                            
0000CA1C                            loc_BF16:
0000CA1C 117C 0004 0001             		move.b	#4,1(a0)
0000CA22 117C 0003 0018             		move.b	#3,$18(a0)
0000CA28 3168 0008 0034             		move.w	8(a0),$34(a0)
0000CA2E 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000CA34 7000                       		moveq	#0,d0
0000CA36 1028 0028                  		move.b	$28(a0),d0
0000CA3A D040                       		add.w	d0,d0
0000CA3C 0240 000E                  		andi.w	#$E,d0
0000CA40 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000CA44 115A 0019                  		move.b	(a2)+,$19(a0)
0000CA48 115A 001A                  		move.b	(a2)+,$1A(a0)
0000CA4C 4A28 0028                  		tst.b	$28(a0)
0000CA50 6700                       		beq.s	Obj33_ChkGone
0000CA52 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000CA58                            
0000CA58                            Obj33_ChkGone:
0000CA58 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000CA5C 7000                       		moveq	#0,d0
0000CA5E 1028 0023                  		move.b	$23(a0),d0
0000CA62 6700                       		beq.s	loc_BF6E
0000CA64 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000CA6A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000CA70 6600 0000                  		bne.w	DeleteObject
0000CA74                            
0000CA74                            loc_BF6E:				; XREF: Obj33_Index
0000CA74 4A28 0032                  		tst.b	$32(a0)
0000CA78 6600 0000                  		bne.w	loc_C046
0000CA7C 7200                       		moveq	#0,d1
0000CA7E 1228 0019                  		move.b	$19(a0),d1
0000CA82 0641 000B                  		addi.w	#$B,d1
0000CA86 343C 0010                  		move.w	#$10,d2
0000CA8A 363C 0011                  		move.w	#$11,d3
0000CA8E 3828 0008                  		move.w	8(a0),d4
0000CA92 6100 0000                  		bsr.w	loc_C186
0000CA96 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000CA9C 6600                       		bne.s	loc_BFC6	; if not, branch
0000CA9E 08A8 0007 0028             		bclr	#7,$28(a0)
0000CAA4 3028 0008                  		move.w	8(a0),d0
0000CAA8 0C40 0A20                  		cmpi.w	#$A20,d0
0000CAAC 6500                       		bcs.s	loc_BFC6
0000CAAE 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000CAB2 6400                       		bcc.s	loc_BFC6
0000CAB4 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000CAB8 0440 001C                  		subi.w	#$1C,d0
0000CABC 3140 000C                  		move.w	d0,$C(a0)
0000CAC0 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000CAC6 08E8 0007 0028             		bset	#7,$28(a0)
0000CACC                            
0000CACC                            loc_BFC6:
0000CACC 3028 0008                  		move.w	8(a0),d0
0000CAD0 0240 FF80                  		andi.w	#$FF80,d0
0000CAD4 3238 F700                  		move.w	($FFFFF700).w,d1
0000CAD8 0441 0080                  		subi.w	#$80,d1
0000CADC 0241 FF80                  		andi.w	#$FF80,d1
0000CAE0 9041                       		sub.w	d1,d0
0000CAE2 0C40 0280                  		cmpi.w	#$280,d0
0000CAE6 6200                       		bhi.s	loc_BFE6
0000CAE8 6000 0000                  		bra.w	DisplaySprite
0000CAEC                            ; ===========================================================================
0000CAEC                            
0000CAEC                            loc_BFE6:
0000CAEC 3028 0034                  		move.w	$34(a0),d0
0000CAF0 0240 FF80                  		andi.w	#$FF80,d0
0000CAF4 3238 F700                  		move.w	($FFFFF700).w,d1
0000CAF8 0441 0080                  		subi.w	#$80,d1
0000CAFC 0241 FF80                  		andi.w	#$FF80,d1
0000CB00 9041                       		sub.w	d1,d0
0000CB02 0C40 0280                  		cmpi.w	#$280,d0
0000CB06 6200                       		bhi.s	loc_C016
0000CB08 3168 0034 0008             		move.w	$34(a0),8(a0)
0000CB0E 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000CB14 117C 0004 0024             		move.b	#4,$24(a0)
0000CB1A 6000                       		bra.s	loc_C02C
0000CB1C                            ; ===========================================================================
0000CB1C                            
0000CB1C                            loc_C016:
0000CB1C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000CB20 7000                       		moveq	#0,d0
0000CB22 1028 0023                  		move.b	$23(a0),d0
0000CB26 6700                       		beq.s	loc_C028
0000CB28 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000CB2E                            
0000CB2E                            loc_C028:
0000CB2E 6000 0000                  		bra.w	DeleteObject
0000CB32                            ; ===========================================================================
0000CB32                            
0000CB32                            loc_C02C:				; XREF: Obj33_Index
0000CB32 6100 0000                  		bsr.w	ChkObjOnScreen2
0000CB36 6700                       		beq.s	locret_C044
0000CB38 117C 0002 0024             		move.b	#2,$24(a0)
0000CB3E 4228 0032                  		clr.b	$32(a0)
0000CB42 4268 0010                  		clr.w	$10(a0)
0000CB46 4268 0012                  		clr.w	$12(a0)
0000CB4A                            
0000CB4A                            locret_C044:
0000CB4A 4E75                       		rts	
0000CB4C                            ; ===========================================================================
0000CB4C                            
0000CB4C                            loc_C046:				; XREF: loc_BF6E
0000CB4C 3F28 0008                  		move.w	8(a0),-(sp)
0000CB50 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000CB56 6400                       		bcc.s	loc_C056
0000CB58 6100 0000                  		bsr.w	SpeedToPos
0000CB5C                            
0000CB5C                            loc_C056:
0000CB5C 0828 0001 0022             		btst	#1,$22(a0)
0000CB62 6700                       		beq.s	loc_C0A0
0000CB64 0668 0018 0012             		addi.w	#$18,$12(a0)
0000CB6A 4EB9 0000 0000             		jsr	ObjHitFloor
0000CB70 4A41                       		tst.w	d1
0000CB72 6A00 0000                  		bpl.w	loc_C09E
0000CB76 D368 000C                  		add.w	d1,$C(a0)
0000CB7A 4268 0012                  		clr.w	$12(a0)
0000CB7E 08A8 0001 0022             		bclr	#1,$22(a0)
0000CB84 3011                       		move.w	(a1),d0
0000CB86 0240 03FF                  		andi.w	#$3FF,d0
0000CB8A 0C40 016A                  		cmpi.w	#$16A,d0
0000CB8E 6500                       		bcs.s	loc_C09E
0000CB90 3028 0030                  		move.w	$30(a0),d0
0000CB94 E640                       		asr.w	#3,d0
0000CB96 3140 0010                  		move.w	d0,$10(a0)
0000CB9A 117C 0001 0032             		move.b	#1,$32(a0)
0000CBA0 4268 000E                  		clr.w	$E(a0)
0000CBA4                            
0000CBA4                            loc_C09E:
0000CBA4 6000                       		bra.s	loc_C0E6
0000CBA6                            ; ===========================================================================
0000CBA6                            
0000CBA6                            loc_C0A0:
0000CBA6 4A68 0010                  		tst.w	$10(a0)
0000CBAA 6700 0000                  		beq.w	loc_C0D6
0000CBAE 6B00                       		bmi.s	loc_C0BC
0000CBB0 7600                       		moveq	#0,d3
0000CBB2 1628 0019                  		move.b	$19(a0),d3
0000CBB6 4EB9 0000 0000             		jsr	ObjHitWallRight
0000CBBC 4A41                       		tst.w	d1		; has block touched a wall?
0000CBBE 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000CBC0 6000                       		bra.s	loc_C0E6
0000CBC2                            ; ===========================================================================
0000CBC2                            
0000CBC2                            loc_C0BC:
0000CBC2 7600                       		moveq	#0,d3
0000CBC4 1628 0019                  		move.b	$19(a0),d3
0000CBC8 4643                       		not.w	d3
0000CBCA 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000CBD0 4A41                       		tst.w	d1		; has block touched a wall?
0000CBD2 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000CBD4 6000                       		bra.s	loc_C0E6
0000CBD6                            ; ===========================================================================
0000CBD6                            
0000CBD6                            Obj33_StopPush:
0000CBD6 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000CBDA 6000                       		bra.s	loc_C0E6
0000CBDC                            ; ===========================================================================
0000CBDC                            
0000CBDC                            loc_C0D6:
0000CBDC 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000CBE4 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000CBEA 6400                       		bcc.s	loc_C104
0000CBEC                            
0000CBEC                            loc_C0E6:
0000CBEC 7200                       		moveq	#0,d1
0000CBEE 1228 0019                  		move.b	$19(a0),d1
0000CBF2 0641 000B                  		addi.w	#$B,d1
0000CBF6 343C 0010                  		move.w	#$10,d2
0000CBFA 363C 0011                  		move.w	#$11,d3
0000CBFE 381F                       		move.w	(sp)+,d4
0000CC00 6100 0000                  		bsr.w	loc_C186
0000CC04 6100                       		bsr.s	Obj33_ChkLava
0000CC06 6000 FEC4                  		bra.w	loc_BFC6
0000CC0A                            ; ===========================================================================
0000CC0A                            
0000CC0A                            loc_C104:
0000CC0A 381F                       		move.w	(sp)+,d4
0000CC0C 43F8 D000                  		lea	($FFFFD000).w,a1
0000CC10 08A9 0003 0022             		bclr	#3,$22(a1)
0000CC16 08A8 0003 0022             		bclr	#3,$22(a0)
0000CC1C 6000 FECE                  		bra.w	loc_BFE6
0000CC20                            ; ===========================================================================
0000CC20                            
0000CC20                            Obj33_ChkLava:
0000CC20 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000CC26 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000CC28 343C FFE0                  		move.w	#-$20,d2
0000CC2C 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000CC32 6700                       		beq.s	Obj33_LoadLava
0000CC34 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000CC3A 6700                       		beq.s	Obj33_LoadLava
0000CC3C 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000CC42 6700                       		beq.s	Obj33_LoadLava
0000CC44 4E75                       		rts	
0000CC46                            ; ===========================================================================
0000CC46                            
0000CC46                            Obj33_ChkLava2:
0000CC46 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000CC4C 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000CC4E 343C 0020                  		move.w	#$20,d2
0000CC52 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000CC58 6700                       		beq.s	Obj33_LoadLava
0000CC5A 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000CC60 6700                       		beq.s	Obj33_LoadLava
0000CC62                            
0000CC62                            Obj33_NoLava:
0000CC62 4E75                       		rts	
0000CC64                            ; ===========================================================================
0000CC64                            
0000CC64                            Obj33_LoadLava:
0000CC64 6100 0000                  		bsr.w	SingleObjLoad
0000CC68 6600                       		bne.s	locret_C184
0000CC6A 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000CC6E 3368 0008 0008             		move.w	8(a0),8(a1)
0000CC74 D569 0008                  		add.w	d2,8(a1)
0000CC78 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CC7E 0669 0010 000C             		addi.w	#$10,$C(a1)
0000CC84 2348 003C                  		move.l	a0,$3C(a1)
0000CC88                            
0000CC88                            locret_C184:
0000CC88 4E75                       		rts	
0000CC8A                            ; ===========================================================================
0000CC8A                            
0000CC8A                            loc_C186:				; XREF: loc_BF6E
0000CC8A 1028 0025                  		move.b	$25(a0),d0
0000CC8E 6700 0000                  		beq.w	loc_C218
0000CC92 5500                       		subq.b	#2,d0
0000CC94 6600                       		bne.s	loc_C1AA
0000CC96 6100 B3DE                  		bsr.w	ExitPlatform
0000CC9A 0829 0003 0022             		btst	#3,$22(a1)
0000CCA0 6600                       		bne.s	loc_C1A4
0000CCA2 4228 0025                  		clr.b	$25(a0)
0000CCA6 4E75                       		rts	
0000CCA8                            ; ===========================================================================
0000CCA8                            
0000CCA8                            loc_C1A4:
0000CCA8 3404                       		move.w	d4,d2
0000CCAA 6000 B928                  		bra.w	MvSonicOnPtfm
0000CCAE                            ; ===========================================================================
0000CCAE                            
0000CCAE                            loc_C1AA:
0000CCAE 5500                       		subq.b	#2,d0
0000CCB0 6600                       		bne.s	loc_C1F2
0000CCB2 6100 0000                  		bsr.w	SpeedToPos
0000CCB6 0668 0018 0012             		addi.w	#$18,$12(a0)
0000CCBC 4EB9 0000 0000             		jsr	ObjHitFloor
0000CCC2 4A41                       		tst.w	d1
0000CCC4 6A00 0000                  		bpl.w	locret_C1F0
0000CCC8 D368 000C                  		add.w	d1,$C(a0)
0000CCCC 4268 0012                  		clr.w	$12(a0)
0000CCD0 4228 0025                  		clr.b	$25(a0)
0000CCD4 3011                       		move.w	(a1),d0
0000CCD6 0240 03FF                  		andi.w	#$3FF,d0
0000CCDA 0C40 016A                  		cmpi.w	#$16A,d0
0000CCDE 6500                       		bcs.s	locret_C1F0
0000CCE0 3028 0030                  		move.w	$30(a0),d0
0000CCE4 E640                       		asr.w	#3,d0
0000CCE6 3140 0010                  		move.w	d0,$10(a0)
0000CCEA 117C 0001 0032             		move.b	#1,$32(a0)
0000CCF0 4268 000E                  		clr.w	$E(a0)
0000CCF4                            
0000CCF4                            locret_C1F0:
0000CCF4 4E75                       		rts	
0000CCF6                            ; ===========================================================================
0000CCF6                            
0000CCF6                            loc_C1F2:
0000CCF6 6100 0000                  		bsr.w	SpeedToPos
0000CCFA 3028 0008                  		move.w	8(a0),d0
0000CCFE 0240 000C                  		andi.w	#$C,d0
0000CD02 6600 0000                  		bne.w	locret_C2E4
0000CD06 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000CD0C 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000CD12 4268 0010                  		clr.w	$10(a0)
0000CD16 5528 0025                  		subq.b	#2,$25(a0)
0000CD1A 4E75                       		rts	
0000CD1C                            ; ===========================================================================
0000CD1C                            
0000CD1C                            loc_C218:
0000CD1C 6100 0000                  		bsr.w	loc_FAC8
0000CD20 4A44                       		tst.w	d4
0000CD22 6700 0000                  		beq.w	locret_C2E4
0000CD26 6B00 0000                  		bmi.w	locret_C2E4
0000CD2A 4A28 0032                  		tst.b	$32(a0)
0000CD2E 6700                       		beq.s	loc_C230
0000CD30 6000 0000                  		bra.w	locret_C2E4
0000CD34                            ; ===========================================================================
0000CD34                            
0000CD34                            loc_C230:
0000CD34 4A40                       		tst.w	d0
0000CD36 6700 0000                  		beq.w	locret_C2E4
0000CD3A 6B00                       		bmi.s	loc_C268
0000CD3C 0829 0000 0022             		btst	#0,$22(a1)
0000CD42 6600 0000                  		bne.w	locret_C2E4
0000CD46 3F00                       		move.w	d0,-(sp)
0000CD48 7600                       		moveq	#0,d3
0000CD4A 1628 0019                  		move.b	$19(a0),d3
0000CD4E 4EB9 0000 0000             		jsr	ObjHitWallRight
0000CD54 301F                       		move.w	(sp)+,d0
0000CD56 4A41                       		tst.w	d1
0000CD58 6B00 0000                  		bmi.w	locret_C2E4
0000CD5C 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000CD64 7001                       		moveq	#1,d0
0000CD66 323C 0040                  		move.w	#$40,d1
0000CD6A 6000                       		bra.s	loc_C294
0000CD6C                            ; ===========================================================================
0000CD6C                            
0000CD6C                            loc_C268:
0000CD6C 0829 0000 0022             		btst	#0,$22(a1)
0000CD72 6700                       		beq.s	locret_C2E4
0000CD74 3F00                       		move.w	d0,-(sp)
0000CD76 7600                       		moveq	#0,d3
0000CD78 1628 0019                  		move.b	$19(a0),d3
0000CD7C 4643                       		not.w	d3
0000CD7E 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000CD84 301F                       		move.w	(sp)+,d0
0000CD86 4A41                       		tst.w	d1
0000CD88 6B00                       		bmi.s	locret_C2E4
0000CD8A 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000CD92 70FF                       		moveq	#-1,d0
0000CD94 323C FFC0                  		move.w	#-$40,d1
0000CD98                            
0000CD98                            loc_C294:
0000CD98 43F8 D000                  		lea	($FFFFD000).w,a1
0000CD9C D169 0008                  		add.w	d0,8(a1)
0000CDA0 3341 0014                  		move.w	d1,$14(a1)
0000CDA4 337C 0000 0010             		move.w	#0,$10(a1)
0000CDAA 3F00                       		move.w	d0,-(sp)
0000CDAC 303C 00A7                  		move.w	#$A7,d0
0000CDB0 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play pushing sound
0000CDB6 301F                       		move.w	(sp)+,d0
0000CDB8 4A28 0028                  		tst.b	$28(a0)
0000CDBC 6B00                       		bmi.s	locret_C2E4
0000CDBE 3F00                       		move.w	d0,-(sp)
0000CDC0 4EB9 0000 0000             		jsr	ObjHitFloor
0000CDC6 301F                       		move.w	(sp)+,d0
0000CDC8 0C41 0004                  		cmpi.w	#4,d1
0000CDCC 6F00                       		ble.s	loc_C2E0
0000CDCE 317C 0400 0010             		move.w	#$400,$10(a0)
0000CDD4 4A40                       		tst.w	d0
0000CDD6 6A00                       		bpl.s	loc_C2D8
0000CDD8 4468 0010                  		neg.w	$10(a0)
0000CDDC                            
0000CDDC                            loc_C2D8:
0000CDDC 117C 0006 0025             		move.b	#6,$25(a0)
0000CDE2 6000                       		bra.s	locret_C2E4
0000CDE4                            ; ===========================================================================
0000CDE4                            
0000CDE4                            loc_C2E0:
0000CDE4 D368 000C                  		add.w	d1,$C(a0)
0000CDE8                            
0000CDE8                            locret_C2E4:
0000CDE8 4E75                       		rts	
0000CDEA                            ; ===========================================================================
0000CDEA                            ; ---------------------------------------------------------------------------
0000CDEA                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CDEA                            ; ---------------------------------------------------------------------------
0000CDEA                            Map_obj33:
0000CDEA                            	include "_maps\obj33.asm"
0000CDEA                            ; ---------------------------------------------------------------------------
0000CDEA                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CDEA                            ; ---------------------------------------------------------------------------
0000CDEA 0000                       		dc.w byte_C2EA-Map_obj33
0000CDEC 0000                       		dc.w byte_C2F0-Map_obj33
0000CDEE 01                         byte_C2EA:	dc.b 1
0000CDEF F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000CDF4 04                         byte_C2F0:	dc.b 4
0000CDF5 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000CDFA F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000CDFF F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000CE04 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000CE0A 00                         		even
0000CE0A 00                         		even
0000CE0A                            
0000CE0A                            ; ===========================================================================
0000CE0A                            ; ---------------------------------------------------------------------------
0000CE0A                            ; Object 34 - zone title cards
0000CE0A                            ; ---------------------------------------------------------------------------
0000CE0A                            
0000CE0A                            Obj34:					; XREF: Obj_Index
0000CE0A 7000                       		moveq	#0,d0
0000CE0C 1028 0024                  		move.b	$24(a0),d0
0000CE10 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000CE14 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000CE18                            ; ===========================================================================
0000CE18 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000CE1A 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000CE1C 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CE1E 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CE20                            ; ===========================================================================
0000CE20                            
0000CE20                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000CE20 2248                       		movea.l	a0,a1
0000CE22 7000                       		moveq	#0,d0
0000CE24 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CE28 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000CE2E 6600                       		bne.s	Obj34_CheckFZ
0000CE30 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000CE32                            
0000CE32                            Obj34_CheckFZ:
0000CE32 3400                       		move.w	d0,d2
0000CE34 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000CE3A 6600                       		bne.s	Obj34_LoadConfig
0000CE3C 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000CE3E 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000CE40                            
0000CE40                            Obj34_LoadConfig:
0000CE40 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000CE46 E948                       		lsl.w	#4,d0
0000CE48 D6C0                       		adda.w	d0,a3
0000CE4A 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000CE50 7203                       		moveq	#3,d1
0000CE52                            
0000CE52                            Obj34_Loop:
0000CE52 12BC 0034                  		move.b	#$34,0(a1)
0000CE56 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000CE5A 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000CE5E 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000CE62 335A 000A                  		move.w	(a2)+,$A(a1)
0000CE66 135A 0024                  		move.b	(a2)+,$24(a1)
0000CE6A 101A                       		move.b	(a2)+,d0
0000CE6C 6600                       		bne.s	Obj34_ActNumber
0000CE6E 1002                       		move.b	d2,d0
0000CE70                            
0000CE70                            Obj34_ActNumber:
0000CE70 0C00 0007                  		cmpi.b	#7,d0
0000CE74 6600                       		bne.s	Obj34_MakeSprite
0000CE76 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000CE7A 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000CE80 6600                       		bne.s	Obj34_MakeSprite
0000CE82 5300                       		subq.b	#1,d0
0000CE84                            
0000CE84                            Obj34_MakeSprite:
0000CE84 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000CE88 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000CE90 337C 8580 0002             		move.w	#$8580,2(a1)
0000CE96 137C 0078 0019             		move.b	#$78,$19(a1)
0000CE9C 137C 0000 0001             		move.b	#0,1(a1)
0000CEA2 137C 0000 0018             		move.b	#0,$18(a1)
0000CEA8 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000CEAE 43E9 0040                  		lea	$40(a1),a1	; next object
0000CEB2 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000CEB6                            
0000CEB6                            Obj34_ChkPos:				; XREF: Obj34_Index
0000CEB6 7210                       		moveq	#$10,d1		; set horizontal speed
0000CEB8 3028 0030                  		move.w	$30(a0),d0
0000CEBC B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000CEC0 6700                       		beq.s	loc_C3C8	; if yes, branch
0000CEC2 6C00                       		bge.s	Obj34_Move
0000CEC4 4441                       		neg.w	d1
0000CEC6                            
0000CEC6                            Obj34_Move:
0000CEC6 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CECA                            
0000CECA                            loc_C3C8:
0000CECA 3028 0008                  		move.w	8(a0),d0
0000CECE 6B00                       		bmi.s	locret_C3D8
0000CED0 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CED4 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000CED6 6000 0000                  		bra.w	DisplaySprite
0000CEDA                            ; ===========================================================================
0000CEDA                            
0000CEDA                            locret_C3D8:
0000CEDA 4E75                       		rts	
0000CEDC                            ; ===========================================================================
0000CEDC                            
0000CEDC                            Obj34_Wait:				; XREF: Obj34_Index
0000CEDC 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000CEE0 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000CEE2 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000CEE6 6000 0000                  		bra.w	DisplaySprite
0000CEEA                            ; ===========================================================================
0000CEEA                            
0000CEEA                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000CEEA 4A28 0001                  		tst.b	1(a0)
0000CEEE 6A00                       		bpl.s	Obj34_ChangeArt
0000CEF0 7220                       		moveq	#$20,d1
0000CEF2 3028 0032                  		move.w	$32(a0),d0
0000CEF6 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000CEFA 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000CEFC 6C00                       		bge.s	Obj34_Move2
0000CEFE 4441                       		neg.w	d1
0000CF00                            
0000CF00                            Obj34_Move2:
0000CF00 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CF04 3028 0008                  		move.w	8(a0),d0
0000CF08 6B00                       		bmi.s	locret_C412
0000CF0A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CF0E 6400                       		bcc.s	locret_C412	; if yes, branch
0000CF10 6000 0000                  		bra.w	DisplaySprite
0000CF14                            ; ===========================================================================
0000CF14                            
0000CF14                            locret_C412:
0000CF14 4E75                       		rts	
0000CF16                            ; ===========================================================================
0000CF16                            
0000CF16                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000CF16 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000CF1C 6600                       		bne.s	Obj34_Delete
0000CF1E 7002                       		moveq	#2,d0
0000CF20 4EB9 0000 16EA             		jsr	(LoadPLC).l	; load explosion patterns
0000CF26 7000                       		moveq	#0,d0
0000CF28 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CF2C 0640 0015                  		addi.w	#$15,d0
0000CF30 4EB9 0000 16EA             		jsr	(LoadPLC).l	; load animal patterns
0000CF36                            
0000CF36                            Obj34_Delete:
0000CF36 6000 0000                  		bra.w	DeleteObject
0000CF3A                            ; ===========================================================================
0000CF3A 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000CF3C 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000CF3E 00E4                       		dc.w $E4
0000CF40 0206                       		dc.b 2,	6
0000CF42 00EA                       		dc.w $EA
0000CF44 0207                       		dc.b 2,	7
0000CF46 00E0                       		dc.w $E0
0000CF48 020A                       		dc.b 2,	$A
0000CF4A                            ; ---------------------------------------------------------------------------
0000CF4A                            ; Title	card configuration data
0000CF4A                            ; Format:
0000CF4A                            ; 4 bytes per item (YYYY XXXX)
0000CF4A                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000CF4A                            ; ---------------------------------------------------------------------------
0000CF4A 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CF5A 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000CF6A 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000CF7A 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000CF8A 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000CF9A 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000CFAA 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000CFBA                            ; ===========================================================================
0000CFBA                            ; ---------------------------------------------------------------------------
0000CFBA                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000CFBA                            ; ---------------------------------------------------------------------------
0000CFBA                            
0000CFBA                            Obj39:					; XREF: Obj_Index
0000CFBA 7000                       		moveq	#0,d0
0000CFBC 1028 0024                  		move.b	$24(a0),d0
0000CFC0 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000CFC4 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000CFC8                            ; ===========================================================================
0000CFC8 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000CFCA 0000                       		dc.w loc_C50C-Obj39_Index
0000CFCC 0000                       		dc.w Obj39_Wait-Obj39_Index
0000CFCE                            ; ===========================================================================
0000CFCE                            
0000CFCE                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000CFCE 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CFD2 6700                       		beq.s	Obj39_Main	; if yes, branch
0000CFD4 4E75                       		rts	
0000CFD6                            ; ===========================================================================
0000CFD6                            
0000CFD6                            Obj39_Main:
0000CFD6 5428 0024                  		addq.b	#2,$24(a0)
0000CFDA 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000CFE0 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000CFE6 6700                       		beq.s	loc_C4EC	; if not, branch
0000CFE8 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000CFEE                            
0000CFEE                            loc_C4EC:
0000CFEE 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000CFF4 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000CFFC 317C 855E 0002             		move.w	#$855E,2(a0)
0000D002 117C 0000 0001             		move.b	#0,1(a0)
0000D008 117C 0000 0018             		move.b	#0,$18(a0)
0000D00E                            
0000D00E                            loc_C50C:				; XREF: Obj39_Index
0000D00E 7210                       		moveq	#$10,d1		; set horizontal speed
0000D010 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000D016 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000D018 6500                       		bcs.s	Obj39_Move
0000D01A 4441                       		neg.w	d1
0000D01C                            
0000D01C                            Obj39_Move:
0000D01C D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D020 6000 0000                  		bra.w	DisplaySprite
0000D024                            ; ===========================================================================
0000D024                            
0000D024                            Obj39_SetWait:				; XREF: Obj39_Main
0000D024 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000D02A 5428 0024                  		addq.b	#2,$24(a0)
0000D02E 4E75                       		rts	
0000D030                            ; ===========================================================================
0000D030                            
0000D030                            Obj39_Wait:				; XREF: Obj39_Index
0000D030 1038 F605                  		move.b	($FFFFF605).w,d0
0000D034 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000D038 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000D03A 0828 0000 001A             		btst	#0,$1A(a0)
0000D040 6600                       		bne.s	Obj39_Display
0000D042 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000D046 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000D048 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D04C 6000 0000                  		bra.w	DisplaySprite
0000D050                            ; ===========================================================================
0000D050                            
0000D050                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000D050 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000D054 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000D056 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000D05C 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000D060 6600                       		bne.s	Obj39_Display	; if yes, branch
0000D062 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000D068 6000                       		bra.s	Obj39_Display
0000D06A                            ; ===========================================================================
0000D06A                            
0000D06A                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000D06A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D070                            
0000D070                            Obj39_Display:				; XREF: Obj39_ChgMode
0000D070 6000 0000                  		bra.w	DisplaySprite
0000D074                            ; ===========================================================================
0000D074                            ; ---------------------------------------------------------------------------
0000D074                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000D074                            ; ---------------------------------------------------------------------------
0000D074                            
0000D074                            Obj3A:					; XREF: Obj_Index
0000D074 7000                       		moveq	#0,d0
0000D076 1028 0024                  		move.b	$24(a0),d0
0000D07A 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000D07E 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000D082                            ; ===========================================================================
0000D082 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000D084 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000D086 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D088 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000D08A 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D08C 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000D08E 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D090 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000D092 0000                       		dc.w loc_C766-Obj3A_Index
0000D094                            ; ===========================================================================
0000D094                            
0000D094                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000D094 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D098 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000D09A 4E75                       		rts	
0000D09C                            ; ===========================================================================
0000D09C                            
0000D09C                            Obj3A_Main:
0000D09C 2248                       		movea.l	a0,a1
0000D09E 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000D0A4 7206                       		moveq	#6,d1
0000D0A6                            
0000D0A6                            Obj3A_Loop:
0000D0A6 12BC 003A                  		move.b	#$3A,0(a1)
0000D0AA 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000D0AE 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000D0B2 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D0B6 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D0BA 135A 0024                  		move.b	(a2)+,$24(a1)
0000D0BE 101A                       		move.b	(a2)+,d0
0000D0C0 0C00 0006                  		cmpi.b	#6,d0
0000D0C4 6600                       		bne.s	loc_C5CA
0000D0C6 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000D0CA                            
0000D0CA                            loc_C5CA:
0000D0CA 1340 001A                  		move.b	d0,$1A(a1)
0000D0CE 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000D0D6 337C 8580 0002             		move.w	#$8580,2(a1)
0000D0DC 137C 0000 0001             		move.b	#0,1(a1)
0000D0E2 43E9 0040                  		lea	$40(a1),a1
0000D0E6 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000D0EA                            
0000D0EA                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000D0EA 7210                       		moveq	#$10,d1		; set horizontal speed
0000D0EC 3028 0030                  		move.w	$30(a0),d0
0000D0F0 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D0F4 6700                       		beq.s	loc_C61A	; if yes, branch
0000D0F6 6C00                       		bge.s	Obj3A_Move
0000D0F8 4441                       		neg.w	d1
0000D0FA                            
0000D0FA                            Obj3A_Move:
0000D0FA D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D0FE                            
0000D0FE                            loc_C5FE:				; XREF: loc_C61A
0000D0FE 3028 0008                  		move.w	8(a0),d0
0000D102 6B00                       		bmi.s	locret_C60E
0000D104 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D108 6400                       		bcc.s	locret_C60E	; if yes, branch
0000D10A 6000 0000                  		bra.w	DisplaySprite
0000D10E                            ; ===========================================================================
0000D10E                            
0000D10E                            locret_C60E:
0000D10E 4E75                       		rts	
0000D110                            ; ===========================================================================
0000D110                            
0000D110                            loc_C610:				; XREF: loc_C61A
0000D110 117C 000E 0024             		move.b	#$E,$24(a0)
0000D116 6000 0000                  		bra.w	Obj3A_ChkPos2
0000D11A                            ; ===========================================================================
0000D11A                            
0000D11A                            loc_C61A:				; XREF: Obj3A_ChkPos
0000D11A 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000D120 67EE                       		beq.s	loc_C610
0000D122 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D128 66D4                       		bne.s	loc_C5FE
0000D12A 5428 0024                  		addq.b	#2,$24(a0)
0000D12E 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D134                            
0000D134                            Obj3A_Wait:				; XREF: Obj3A_Index
0000D134 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D138 6600                       		bne.s	Obj3A_Display
0000D13A 5428 0024                  		addq.b	#2,$24(a0)
0000D13E                            
0000D13E                            Obj3A_Display:
0000D13E 6000 0000                  		bra.w	DisplaySprite
0000D142                            ; ===========================================================================
0000D142                            
0000D142                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000D142 6100 0000                  		bsr.w	DisplaySprite
0000D146 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000D14C 7000                       		moveq	#0,d0
0000D14E 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000D152 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000D154 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D158 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000D15E                            
0000D15E                            Obj3A_RingBonus:
0000D15E 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D162 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000D164 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D168 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D16E                            
0000D16E                            Obj3A_ChkBonus:
0000D16E 4A40                       		tst.w	d0		; is there any bonus?
0000D170 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000D172 303C 00C5                  		move.w	#$C5,d0
0000D176 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D17C 5428 0024                  		addq.b	#2,$24(a0)
0000D180 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000D186 6600                       		bne.s	Obj3A_SetDelay
0000D188 5828 0024                  		addq.b	#4,$24(a0)
0000D18C                            
0000D18C                            Obj3A_SetDelay:
0000D18C 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D192                            
0000D192                            locret_C692:
0000D192 4E75                       		rts	
0000D194                            ; ===========================================================================
0000D194                            
0000D194                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000D194 4EB9 0000 0000             		jsr	AddPoints
0000D19A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D19E 0200 0003                  		andi.b	#3,d0
0000D1A2 66EE                       		bne.s	locret_C692
0000D1A4 303C 00CD                  		move.w	#$CD,d0
0000D1A8 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D1AE                            ; ===========================================================================
0000D1AE                            
0000D1AE                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000D1AE 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D1B2 0240 0007                  		andi.w	#7,d0
0000D1B6 E748                       		lsl.w	#3,d0
0000D1B8 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000D1BC 0241 0003                  		andi.w	#3,d1
0000D1C0 D241                       		add.w	d1,d1
0000D1C2 D041                       		add.w	d1,d0
0000D1C4 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000D1C8 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000D1CC 4A40                       		tst.w	d0
0000D1CE 6600                       		bne.s	Obj3A_ChkSS
0000D1D0 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000D1D6 6000                       		bra.s	Obj3A_Display2
0000D1D8                            ; ===========================================================================
0000D1D8                            
0000D1D8                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000D1D8 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000D1DC 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000D1E0 6700                       		beq.s	loc_C6EA	; if not, branch
0000D1E2 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000D1E8 6000                       		bra.s	Obj3A_Display2
0000D1EA                            ; ===========================================================================
0000D1EA                            
0000D1EA                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000D1EA 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D1F0                            
0000D1F0                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000D1F0 6000 0000                  		bra.w	DisplaySprite
0000D1F4                            ; ===========================================================================
0000D1F4                            ; ---------------------------------------------------------------------------
0000D1F4                            ; Level	order array
0000D1F4                            ; ---------------------------------------------------------------------------
0000D1F4                            LevelOrder:	incbin	misc\lvl_ord.bin
0000D224                            		even
0000D224                            ; ===========================================================================
0000D224                            
0000D224                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000D224 7220                       		moveq	#$20,d1		; set horizontal speed
0000D226 3028 0032                  		move.w	$32(a0),d0
0000D22A B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000D22E 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000D230 6C00                       		bge.s	Obj3A_Move2
0000D232 4441                       		neg.w	d1
0000D234                            
0000D234                            Obj3A_Move2:
0000D234 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D238 3028 0008                  		move.w	8(a0),d0
0000D23C 6B00                       		bmi.s	locret_C748
0000D23E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D242 6400                       		bcc.s	locret_C748	; if yes, branch
0000D244 6000 0000                  		bra.w	DisplaySprite
0000D248                            ; ===========================================================================
0000D248                            
0000D248                            locret_C748:
0000D248 4E75                       		rts	
0000D24A                            ; ===========================================================================
0000D24A                            
0000D24A                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000D24A 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D250 6600 0000                  		bne.w	DeleteObject
0000D254 5428 0024                  		addq.b	#2,$24(a0)
0000D258 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000D25C 303C 008D                  		move.w	#$8D,d0
0000D260 4EF9 0000 1470             		jmp	(PlaySound).l	; play FZ music
0000D266                            ; ===========================================================================
0000D266                            
0000D266                            loc_C766:				; XREF: Obj3A_Index
0000D266 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000D26A 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000D270 6700 0000                  		beq.w	DeleteObject
0000D274 4E75                       		rts	
0000D276                            ; ===========================================================================
0000D276 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000D27C 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000D27E FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000D284 0201                       		dc.b 2,	1
0000D286 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000D28C 0206                       		dc.b 2,	6
0000D28E 0520 0120 00EC             		dc.w $520, $120, $EC
0000D294 0202                       		dc.b 2,	2
0000D296 0540 0120 00FC             		dc.w $540, $120, $FC
0000D29C 0203                       		dc.b 2,	3
0000D29E 0560 0120 010C             		dc.w $560, $120, $10C
0000D2A4 0204                       		dc.b 2,	4
0000D2A6 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000D2AC 0205                       		dc.b 2,	5
0000D2AE                            ; ===========================================================================
0000D2AE                            ; ---------------------------------------------------------------------------
0000D2AE                            ; Object 7E - special stage results screen
0000D2AE                            ; ---------------------------------------------------------------------------
0000D2AE                            
0000D2AE                            Obj7E:					; XREF: Obj_Index
0000D2AE 7000                       		moveq	#0,d0
0000D2B0 1028 0024                  		move.b	$24(a0),d0
0000D2B4 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000D2B8 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000D2BC                            ; ===========================================================================
0000D2BC 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000D2BE 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000D2C0 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D2C2 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000D2C4 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D2C6 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D2C8 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D2CA 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000D2CC 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D2CE 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D2D0 0000                       		dc.w loc_C91A-Obj7E_Index
0000D2D2                            ; ===========================================================================
0000D2D2                            
0000D2D2                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000D2D2 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D2D6 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000D2D8 4E75                       		rts	
0000D2DA                            ; ===========================================================================
0000D2DA                            
0000D2DA                            Obj7E_Main:
0000D2DA 2248                       		movea.l	a0,a1
0000D2DC 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000D2E2 7203                       		moveq	#3,d1
0000D2E4 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000D2EA 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000D2EC 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000D2EE                            
0000D2EE                            Obj7E_Loop:
0000D2EE 12BC 007E                  		move.b	#$7E,0(a1)
0000D2F2 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000D2F6 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D2FA 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D2FE 135A 0024                  		move.b	(a2)+,$24(a1)
0000D302 135A 001A                  		move.b	(a2)+,$1A(a1)
0000D306 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000D30E 337C 8580 0002             		move.w	#$8580,2(a1)
0000D314 137C 0000 0001             		move.b	#0,1(a1)
0000D31A 43E9 0040                  		lea	$40(a1),a1
0000D31E 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000D322                            
0000D322 7007                       		moveq	#7,d0
0000D324 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000D328 6700                       		beq.s	loc_C842
0000D32A 7000                       		moveq	#0,d0
0000D32C 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000D330 6600                       		bne.s	loc_C842	; if not, branch
0000D332 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000D334 317C 0018 0008             		move.w	#$18,8(a0)
0000D33A 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000D340                            
0000D340                            loc_C842:
0000D340 1140 001A                  		move.b	d0,$1A(a0)
0000D344                            
0000D344                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000D344 7210                       		moveq	#$10,d1		; set horizontal speed
0000D346 3028 0030                  		move.w	$30(a0),d0
0000D34A B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D34E 6700                       		beq.s	loc_C86C	; if yes, branch
0000D350 6C00                       		bge.s	Obj7E_Move
0000D352 4441                       		neg.w	d1
0000D354                            
0000D354                            Obj7E_Move:
0000D354 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D358                            
0000D358                            loc_C85A:				; XREF: loc_C86C
0000D358 3028 0008                  		move.w	8(a0),d0
0000D35C 6B00                       		bmi.s	locret_C86A
0000D35E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D362 6400                       		bcc.s	locret_C86A	; if yes, branch
0000D364 6000 0000                  		bra.w	DisplaySprite
0000D368                            ; ===========================================================================
0000D368                            
0000D368                            locret_C86A:
0000D368 4E75                       		rts	
0000D36A                            ; ===========================================================================
0000D36A                            
0000D36A                            loc_C86C:				; XREF: Obj7E_ChkPos
0000D36A 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000D370 66E6                       		bne.s	loc_C85A
0000D372 5428 0024                  		addq.b	#2,$24(a0)
0000D376 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D37C 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000D382                            
0000D382                            Obj7E_Wait:				; XREF: Obj7E_Index
0000D382 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D386 6600                       		bne.s	Obj7E_Display
0000D388 5428 0024                  		addq.b	#2,$24(a0)
0000D38C                            
0000D38C                            Obj7E_Display:
0000D38C 6000 0000                  		bra.w	DisplaySprite
0000D390                            ; ===========================================================================
0000D390                            
0000D390                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000D390 6100 0000                  		bsr.w	DisplaySprite
0000D394 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000D39A 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D39E 6700                       		beq.s	loc_C8C4	; if yes, branch
0000D3A0 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D3A6 700A                       		moveq	#10,d0		; add 10 to score
0000D3A8 4EB9 0000 0000             		jsr	AddPoints
0000D3AE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D3B2 0200 0003                  		andi.b	#3,d0
0000D3B6 6600                       		bne.s	locret_C8EA
0000D3B8 303C 00CD                  		move.w	#$CD,d0
0000D3BC 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D3C2                            ; ===========================================================================
0000D3C2                            
0000D3C2                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000D3C2 303C 00C5                  		move.w	#$C5,d0
0000D3C6 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D3CC 5428 0024                  		addq.b	#2,$24(a0)
0000D3D0 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D3D6 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000D3DC 6500                       		bcs.s	locret_C8EA	; if not, branch
0000D3DE 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000D3E4 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000D3E8                            
0000D3E8                            locret_C8EA:
0000D3E8 4E75                       		rts	
0000D3EA                            ; ===========================================================================
0000D3EA                            
0000D3EA                            Obj7E_Exit:				; XREF: Obj7E_Index
0000D3EA 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D3F0 6000 0000                  		bra.w	DisplaySprite
0000D3F4                            ; ===========================================================================
0000D3F4                            
0000D3F4                            Obj7E_Continue:				; XREF: Obj7E_Index
0000D3F4 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000D3FA 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000D400 303C 00BF                  		move.w	#$BF,d0
0000D404 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play continues music
0000D40A 5428 0024                  		addq.b	#2,$24(a0)
0000D40E 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000D414 6000 0000                  		bra.w	DisplaySprite
0000D418                            ; ===========================================================================
0000D418                            
0000D418                            loc_C91A:				; XREF: Obj7E_Index
0000D418 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D41C 0200 000F                  		andi.b	#$F,d0
0000D420 6600                       		bne.s	Obj7E_Display2
0000D422 0868 0000 001A             		bchg	#0,$1A(a0)
0000D428                            
0000D428                            Obj7E_Display2:
0000D428 6000 0000                  		bra.w	DisplaySprite
0000D42C                            ; ===========================================================================
0000D42C 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000D432 0200                       		dc.b 2,	0		; rountine number, frame number
0000D434 0320 0120 0118             		dc.w $320, $120, $118
0000D43A 0201                       		dc.b 2,	1
0000D43C 0360 0120 0128             		dc.w $360, $120, $128
0000D442 0202                       		dc.b 2,	2
0000D444 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000D44A 0203                       		dc.b 2,	3
0000D44C 03A0 0120 0138             		dc.w $3A0, $120, $138
0000D452 0206                       		dc.b 2,	6
0000D454                            ; ===========================================================================
0000D454                            ; ---------------------------------------------------------------------------
0000D454                            ; Object 7F - chaos emeralds from the special stage results screen
0000D454                            ; ---------------------------------------------------------------------------
0000D454                            
0000D454                            Obj7F:					; XREF: Obj_Index
0000D454 7000                       		moveq	#0,d0
0000D456 1028 0024                  		move.b	$24(a0),d0
0000D45A 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000D45E 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000D462                            ; ===========================================================================
0000D462 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000D464 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000D466                            
0000D466                            ; ---------------------------------------------------------------------------
0000D466                            ; X-axis positions for chaos emeralds
0000D466                            ; ---------------------------------------------------------------------------
0000D466 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000D472                            ; ===========================================================================
0000D472                            
0000D472                            Obj7F_Main:				; XREF: Obj7F_Index
0000D472 2248                       		movea.l	a0,a1
0000D474 45F9 0000 D466             		lea	(Obj7F_PosData).l,a2
0000D47A 7400                       		moveq	#0,d2
0000D47C 7200                       		moveq	#0,d1
0000D47E 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000D482 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000D484 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000D488                            
0000D488                            Obj7F_Loop:
0000D488 12BC 007F                  		move.b	#$7F,0(a1)
0000D48C 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000D490 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000D496 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000D49A 1633 2000                  		move.b	(a3,d2.w),d3
0000D49E 1343 001A                  		move.b	d3,$1A(a1)
0000D4A2 1343 001C                  		move.b	d3,$1C(a1)
0000D4A6 5202                       		addq.b	#1,d2
0000D4A8 5429 0024                  		addq.b	#2,$24(a1)
0000D4AC 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000D4B4 337C 8541 0002             		move.w	#$8541,2(a1)
0000D4BA 137C 0000 0001             		move.b	#0,1(a1)
0000D4C0 43E9 0040                  		lea	$40(a1),a1	; next object
0000D4C4 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000D4C8                            
0000D4C8                            Obj7F_Flash:				; XREF: Obj7F_Index
0000D4C8 1028 001A                  		move.b	$1A(a0),d0
0000D4CC 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000D4D2 0C00 0006                  		cmpi.b	#6,d0
0000D4D6 6600                       		bne.s	Obj7F_Display
0000D4D8 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000D4DE                            
0000D4DE                            Obj7F_Display:
0000D4DE 6000 0000                  		bra.w	DisplaySprite
0000D4E2                            ; ===========================================================================
0000D4E2                            ; ---------------------------------------------------------------------------
0000D4E2                            ; Sprite mappings - zone title cards
0000D4E2                            ; ---------------------------------------------------------------------------
0000D4E2                            Map_obj34:
0000D4E2                            	include "_maps\obj34.asm"
0000D4E2                            ; ---------------------------------------------------------------------------
0000D4E2                            ; Sprite mappings - zone title cards
0000D4E2                            ; ---------------------------------------------------------------------------
0000D4E2 0000                           	dc.w byte_C9FE-Map_obj34
0000D4E4 0000                       		dc.w byte_CA2C-Map_obj34
0000D4E6 0000                       		dc.w byte_CA5A-Map_obj34
0000D4E8 0000                       		dc.w byte_CA7A-Map_obj34
0000D4EA 0000                       		dc.w byte_CAA8-Map_obj34
0000D4EC 0000                       		dc.w byte_CADC-Map_obj34
0000D4EE 0000                       		dc.w byte_CB10-Map_obj34
0000D4F0 0000                       		dc.w byte_CB26-Map_obj34
0000D4F2 0000                       		dc.w byte_CB31-Map_obj34
0000D4F4 0000                       		dc.w byte_CB3C-Map_obj34
0000D4F6 0000                       		dc.w byte_CB47-Map_obj34
0000D4F8 0000                       		dc.w byte_CB8A-Map_obj34
0000D4FA 09                         byte_C9FE:	dc.b 9 			; GREEN HILL
0000D4FB F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000D500 F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000D505 F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000D50A F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000D50F F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D514 F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000D519 F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000D51E F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000D523 F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000D528 09                         byte_CA2C:	dc.b 9			; LABYRINTH
0000D529 F805 0026 BC               		dc.b $F8, 5, 0,	$26, $BC
0000D52E F805 0000 CC               		dc.b $F8, 5, 0,	0, $CC
0000D533 F805 0004 DC               		dc.b $F8, 5, 0,	4, $DC
0000D538 F805 004A EC               		dc.b $F8, 5, 0,	$4A, $EC
0000D53D F805 003A FC               		dc.b $F8, 5, 0,	$3A, $FC
0000D542 F801 0020 0C               		dc.b $F8, 1, 0,	$20, $C
0000D547 F805 002E 14               		dc.b $F8, 5, 0,	$2E, $14
0000D54C F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D551 F805 001C 34               		dc.b $F8, 5, 0,	$1C, $34
0000D556 06                         byte_CA5A:	dc.b 6			; MARBLE
0000D557 F805 002A CF               		dc.b $F8, 5, 0,	$2A, $CF
0000D55C F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D561 F805 003A F0               		dc.b $F8, 5, 0,	$3A, $F0
0000D566 F805 0004 00               		dc.b $F8, 5, 0,	4, 0
0000D56B F805 0026 10               		dc.b $F8, 5, 0,	$26, $10
0000D570 F805 0010 20               		dc.b $F8, 5, 0,	$10, $20
0000D575 00                         		dc.b 0
0000D576 09                         byte_CA7A:	dc.b 9			; STAR	LIGHT
0000D577 F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000D57C F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000D581 F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000D586 F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000D58B F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000D590 F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000D595 F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000D59A F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000D59F F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000D5A4 0A                         byte_CAA8:	dc.b $A			; SPRING YARD
0000D5A5 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000D5AA F805 0036 BC               		dc.b $F8, 5, 0,	$36, $BC
0000D5AF F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000D5B4 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D5B9 F805 002E E4               		dc.b $F8, 5, 0,	$2E, $E4
0000D5BE F805 0018 F4               		dc.b $F8, 5, 0,	$18, $F4
0000D5C3 F805 004A 14               		dc.b $F8, 5, 0,	$4A, $14
0000D5C8 F805 0000 24               		dc.b $F8, 5, 0,	0, $24
0000D5CD F805 003A 34               		dc.b $F8, 5, 0,	$3A, $34
0000D5D2 F805 000C 44               		dc.b $F8, 5, 0,	$C, $44
0000D5D7 00                         		dc.b 0
0000D5D8 0A                         byte_CADC:	dc.b $A			; SCRAP BRAIN
0000D5D9 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000D5DE F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000D5E3 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000D5E8 F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000D5ED F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000D5F2 F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000D5F7 F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000D5FC F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000D601 F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000D606 F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000D60B 00                         		dc.b 0
0000D60C 04                         byte_CB10:	dc.b 4			; ZONE
0000D60D F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000D612 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000D617 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000D61C F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D621 00                         		dc.b 0
0000D622 02                         byte_CB26:	dc.b 2			; ACT 1
0000D623 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D628 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000D62D 02                         byte_CB31:	dc.b 2			; ACT 2
0000D62E 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D633 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000D638 02                         byte_CB3C:	dc.b 2			; ACT 3
0000D639 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D63E F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000D643 0D                         byte_CB47:	dc.b $D			; Oval
0000D644 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000D649 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000D64E EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000D653 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000D658 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000D65D 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000D662 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000D667 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000D66C EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000D671 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000D676 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000D67B 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000D680 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000D685 00                         		dc.b 0
0000D686 05                         byte_CB8A:	dc.b 5			; FINAL
0000D687 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000D68C F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000D691 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D696 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000D69B F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000D6A0                            		even
0000D6A0                            		even
0000D6A0                            ; ---------------------------------------------------------------------------
0000D6A0                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D6A0                            ; ---------------------------------------------------------------------------
0000D6A0                            Map_obj39:
0000D6A0                            	include "_maps\obj39.asm"
0000D6A0                            ; ---------------------------------------------------------------------------
0000D6A0                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D6A0                            ; ---------------------------------------------------------------------------
0000D6A0 0000                       		dc.w byte_CBAC-Map_obj39
0000D6A2 0000                       		dc.w byte_CBB7-Map_obj39
0000D6A4 0000                       		dc.w byte_CBC2-Map_obj39
0000D6A6 0000                       		dc.w byte_CBCD-Map_obj39
0000D6A8 02                         byte_CBAC:	dc.b 2
0000D6A9 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D6AE F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D6B3 02                         byte_CBB7:	dc.b 2
0000D6B4 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D6B9 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D6BE 02                         byte_CBC2:	dc.b 2
0000D6BF F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D6C4 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D6C9 02                         byte_CBCD:	dc.b 2
0000D6CA F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D6CF F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D6D4                            		even
0000D6D4                            		even
0000D6D4                            
0000D6D4                            ; ---------------------------------------------------------------------------
0000D6D4                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D6D4                            ; ---------------------------------------------------------------------------
0000D6D4 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D6D6 0000                       		dc.w byte_CC13-Map_obj3A
0000D6D8 0000                       		dc.w byte_CC32-Map_obj3A
0000D6DA 0000                       		dc.w byte_CC51-Map_obj3A
0000D6DC 0000                       		dc.w byte_CC75-Map_obj3A
0000D6DE FF6F                       		dc.w byte_CB47-Map_obj3A
0000D6E0 FF4E                       		dc.w byte_CB26-Map_obj3A
0000D6E2 FF59                       		dc.w byte_CB31-Map_obj3A
0000D6E4 FF64                       		dc.w byte_CB3C-Map_obj3A
0000D6E6 08                         byte_CBEA:	dc.b 8			; SONIC HAS
0000D6E7 F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000D6EC F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000D6F1 F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000D6F6 F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000D6FB F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000D700 F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000D705 F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000D70A F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000D70F 06                         byte_CC13:	dc.b 6			; PASSED
0000D710 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D715 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D71A F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D71F F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D724 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D729 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D72E 06                         byte_CC32:	dc.b 6			; SCORE
0000D72F F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D734 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D739 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D73E F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D743 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D748 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D74D 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D74E F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D753 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D758 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D75D F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D762 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D767 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D76C F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D771 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D772 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D777 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D77C F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D781 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D786 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D78B F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D790 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D796 00                         		even
0000D796                            ; ---------------------------------------------------------------------------
0000D796                            ; Sprite mappings - special stage results screen
0000D796                            ; ---------------------------------------------------------------------------
0000D796 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D798 0000                       		dc.w byte_CCEE-Map_obj7E
0000D79A 0000                       		dc.w byte_CD0D-Map_obj7E
0000D79C FEAD                       		dc.w byte_CB47-Map_obj7E
0000D79E 0000                       		dc.w byte_CD31-Map_obj7E
0000D7A0 0000                       		dc.w byte_CD46-Map_obj7E
0000D7A2 0000                       		dc.w byte_CD5B-Map_obj7E
0000D7A4 0000                       		dc.w byte_CD6B-Map_obj7E
0000D7A6 0000                       		dc.w byte_CDA8-Map_obj7E
0000D7A8 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D7A9 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D7AE F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D7B3 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D7B8 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D7BD F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D7C2 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D7C7 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D7CC F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D7D1 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D7D6 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D7DB F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D7E0 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D7E5 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D7EA 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D7EB F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D7F0 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D7F5 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D7FA F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D7FF F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D804 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D809 07                         byte_CD0D:	dc.b 7
0000D80A F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D80F F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D814 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D819 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D81E FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D823 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D828 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D82D 04                         byte_CD31:	dc.b 4
0000D82E F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D833 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D838 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D83D F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D842 04                         byte_CD46:	dc.b 4
0000D843 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D848 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D84D F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D852 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D857 03                         byte_CD5B:	dc.b 3
0000D858 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D85D F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D862 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D867 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D868 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D86D F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D872 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D877 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D87C F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D881 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D886 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D88B F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D890 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D895 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D89A F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D89F F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D8A4 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D8A5 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D8AA F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D8AF F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D8B4 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D8B9 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D8BE F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D8C3 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D8C8 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D8CD F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D8D2 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D8D7 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D8DC F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D8E1 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D8E6 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D8EB F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D8F0                            		even
0000D8F0                            ; ---------------------------------------------------------------------------
0000D8F0                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D8F0                            ; ---------------------------------------------------------------------------
0000D8F0                            Map_obj7F:
0000D8F0                            	include "_maps\obj7F.asm"
0000D8F0                            ; ---------------------------------------------------------------------------
0000D8F0                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D8F0                            ; ---------------------------------------------------------------------------
0000D8F0 0000                       		dc.w byte_CE02-Map_obj7F
0000D8F2 0000                       		dc.w byte_CE08-Map_obj7F
0000D8F4 0000                       		dc.w byte_CE0E-Map_obj7F
0000D8F6 0000                       		dc.w byte_CE14-Map_obj7F
0000D8F8 0000                       		dc.w byte_CE1A-Map_obj7F
0000D8FA 0000                       		dc.w byte_CE20-Map_obj7F
0000D8FC 0000                       		dc.w byte_CE26-Map_obj7F
0000D8FE 01                         byte_CE02:	dc.b 1
0000D8FF F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D904 01                         byte_CE08:	dc.b 1
0000D905 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D90A 01                         byte_CE0E:	dc.b 1
0000D90B F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D910 01                         byte_CE14:	dc.b 1
0000D911 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D916 01                         byte_CE1A:	dc.b 1
0000D917 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D91C 01                         byte_CE20:	dc.b 1
0000D91D F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D922 00                         byte_CE26:	dc.b 0			; Blank frame
0000D924 00                         		even
0000D924 00                         		even
0000D924                            
0000D924                            ; ===========================================================================
0000D924                            ; ---------------------------------------------------------------------------
0000D924                            ; Object 36 - spikes
0000D924                            ; ---------------------------------------------------------------------------
0000D924                            
0000D924                            Obj36:					; XREF: Obj_Index
0000D924 7000                       		moveq	#0,d0
0000D926 1028 0024                  		move.b	$24(a0),d0
0000D92A 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D92E 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D932                            ; ===========================================================================
0000D932 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D934 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D936                            
0000D936 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D938 0110                       		dc.b 1,	$10
0000D93A 0204                       		dc.b 2,	4
0000D93C 031C                       		dc.b 3,	$1C
0000D93E 0440                       		dc.b 4,	$40
0000D940 0510                       		dc.b 5,	$10
0000D942                            ; ===========================================================================
0000D942                            
0000D942                            Obj36_Main:				; XREF: Obj36_Index
0000D942 5428 0024                  		addq.b	#2,$24(a0)
0000D946 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D94E 317C 051B 0002             		move.w	#$51B,2(a0)
0000D954 0028 0004 0001             		ori.b	#4,1(a0)
0000D95A 117C 0004 0018             		move.b	#4,$18(a0)
0000D960 1028 0028                  		move.b	$28(a0),d0
0000D964 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D96A 0240 00F0                  		andi.w	#$F0,d0
0000D96E 43F9 0000 D936             		lea	(Obj36_Var).l,a1
0000D974 E648                       		lsr.w	#3,d0
0000D976 D2C0                       		adda.w	d0,a1
0000D978 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D97C 1159 0019                  		move.b	(a1)+,$19(a0)
0000D980 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D986 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D98C                            
0000D98C                            Obj36_Solid:				; XREF: Obj36_Index
0000D98C 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D990 343C 0004                  		move.w	#4,d2
0000D994 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D99A 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D99C 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D9A2 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D9A4 343C 0014                  		move.w	#$14,d2
0000D9A8                            
0000D9A8                            ; Spikes types $1x and $5x face	sideways
0000D9A8                            
0000D9A8                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D9A8 323C 001B                  		move.w	#$1B,d1
0000D9AC 3602                       		move.w	d2,d3
0000D9AE 5243                       		addq.w	#1,d3
0000D9B0 3828 0008                  		move.w	8(a0),d4
0000D9B4 6100 0000                  		bsr.w	SolidObject
0000D9B8 0828 0003 0022             		btst	#3,$22(a0)
0000D9BE 6600                       		bne.s	Obj36_Display
0000D9C0 0C44 0001                  		cmpi.w	#1,d4
0000D9C4 6700                       		beq.s	Obj36_Hurt
0000D9C6 6000                       		bra.s	Obj36_Display
0000D9C8                            ; ===========================================================================
0000D9C8                            
0000D9C8                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D9C8                            
0000D9C8                            Obj36_Upright:				; XREF: Obj36_Solid
0000D9C8 7200                       		moveq	#0,d1
0000D9CA 1228 0019                  		move.b	$19(a0),d1
0000D9CE 0641 000B                  		addi.w	#$B,d1
0000D9D2 343C 0010                  		move.w	#$10,d2
0000D9D6 363C 0011                  		move.w	#$11,d3
0000D9DA 3828 0008                  		move.w	8(a0),d4
0000D9DE 6100 0000                  		bsr.w	SolidObject
0000D9E2 0828 0003 0022             		btst	#3,$22(a0)
0000D9E8 6600                       		bne.s	Obj36_Hurt
0000D9EA 4A44                       		tst.w	d4
0000D9EC 6A00                       		bpl.s	Obj36_Display
0000D9EE                            
0000D9EE                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D9EE 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D9F2 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D9F4 4A78 D030                  		tst.w	($FFFFD030).w	; +++ is Sonic invulnerable?
0000D9F8 6600                       		bne.s	Obj36_Display	; +++ if yes, branch
0000D9FA 2F08                       		move.l	a0,-(sp)
0000D9FC 2448                       		movea.l	a0,a2
0000D9FE 41F8 D000                  		lea	($FFFFD000).w,a0
0000DA02 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000DA08 6400                       		bcc.s	loc_CF20
0000DA0A 2628 000C                  		move.l	$C(a0),d3
0000DA0E 3028 0012                  		move.w	$12(a0),d0
0000DA12 48C0                       		ext.l	d0
0000DA14 E180                       		asl.l	#8,d0
0000DA16 9680                       		sub.l	d0,d3
0000DA18 2143 000C                  		move.l	d3,$C(a0)
0000DA1C 4EB9 0000 0000             		jsr	HurtSonic
0000DA22                            
0000DA22                            loc_CF20:
0000DA22 205F                       		movea.l	(sp)+,a0
0000DA24                            
0000DA24                            Obj36_Display:
0000DA24 6100 0000                  		bsr.w	DisplaySprite
0000DA28 3028 0030                  		move.w	$30(a0),d0
0000DA2C 0240 FF80                  		andi.w	#$FF80,d0
0000DA30 3238 F700                  		move.w	($FFFFF700).w,d1
0000DA34 0441 0080                  		subi.w	#$80,d1
0000DA38 0241 FF80                  		andi.w	#$FF80,d1
0000DA3C 9041                       		sub.w	d1,d0
0000DA3E 0C40 0280                  		cmpi.w	#$280,d0
0000DA42 6200 0000                  		bhi.w	DeleteObject
0000DA46 4E75                       		rts	
0000DA48                            ; ===========================================================================
0000DA48                            
0000DA48                            Obj36_Type0x:				; XREF: Obj36_Solid
0000DA48 7000                       		moveq	#0,d0
0000DA4A 1028 0028                  		move.b	$28(a0),d0
0000DA4E D040                       		add.w	d0,d0
0000DA50 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000DA54 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000DA58                            ; ===========================================================================
0000DA58 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000DA5A 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000DA5C 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000DA5E                            ; ===========================================================================
0000DA5E                            
0000DA5E                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000DA5E 4E75                       		rts			; don't move the object
0000DA60                            ; ===========================================================================
0000DA60                            
0000DA60                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000DA60 6100 0000                  		bsr.w	Obj36_Wait
0000DA64 7000                       		moveq	#0,d0
0000DA66 1028 0034                  		move.b	$34(a0),d0
0000DA6A D068 0032                  		add.w	$32(a0),d0
0000DA6E 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000DA72 4E75                       		rts	
0000DA74                            ; ===========================================================================
0000DA74                            
0000DA74                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000DA74 6100 0000                  		bsr.w	Obj36_Wait
0000DA78 7000                       		moveq	#0,d0
0000DA7A 1028 0034                  		move.b	$34(a0),d0
0000DA7E D068 0030                  		add.w	$30(a0),d0
0000DA82 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000DA86 4E75                       		rts	
0000DA88                            ; ===========================================================================
0000DA88                            
0000DA88                            Obj36_Wait:
0000DA88 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000DA8C 6700                       		beq.s	loc_CFA4	; if yes, branch
0000DA8E 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000DA92 6600                       		bne.s	locret_CFE6
0000DA94 4A28 0001                  		tst.b	1(a0)
0000DA98 6A00                       		bpl.s	locret_CFE6
0000DA9A 303C 00B6                  		move.w	#$B6,d0
0000DA9E 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000DAA4 6000                       		bra.s	locret_CFE6
0000DAA6                            ; ===========================================================================
0000DAA6                            
0000DAA6                            loc_CFA4:
0000DAA6 4A68 0036                  		tst.w	$36(a0)
0000DAAA 6700                       		beq.s	loc_CFC6
0000DAAC 0468 0800 0034             		subi.w	#$800,$34(a0)
0000DAB2 6400                       		bcc.s	locret_CFE6
0000DAB4 317C 0000 0034             		move.w	#0,$34(a0)
0000DABA 317C 0000 0036             		move.w	#0,$36(a0)
0000DAC0 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000DAC6 6000                       		bra.s	locret_CFE6
0000DAC8                            ; ===========================================================================
0000DAC8                            
0000DAC8                            loc_CFC6:
0000DAC8 0668 0800 0034             		addi.w	#$800,$34(a0)
0000DACE 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000DAD4 6500                       		bcs.s	locret_CFE6
0000DAD6 317C 2000 0034             		move.w	#$2000,$34(a0)
0000DADC 317C 0001 0036             		move.w	#1,$36(a0)
0000DAE2 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000DAE8                            
0000DAE8                            locret_CFE6:
0000DAE8 4E75                       		rts	
0000DAEA                            ; ===========================================================================
0000DAEA                            ; ---------------------------------------------------------------------------
0000DAEA                            ; Sprite mappings - spikes
0000DAEA                            ; ---------------------------------------------------------------------------
0000DAEA                            Map_obj36:
0000DAEA                            	include "_maps\obj36.asm"
0000DAEA                            ; ---------------------------------------------------------------------------
0000DAEA                            ; Sprite mappings - spikes
0000DAEA                            ; ---------------------------------------------------------------------------
0000DAEA 0000                       		dc.w byte_CFF4-Map_obj36
0000DAEC 0000                       		dc.w byte_D004-Map_obj36
0000DAEE 0000                       		dc.w byte_D014-Map_obj36
0000DAF0 0000                       		dc.w byte_D01A-Map_obj36
0000DAF2 0000                       		dc.w byte_D02A-Map_obj36
0000DAF4 0000                       		dc.w byte_D049-Map_obj36
0000DAF6 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000DAF7 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000DAFC F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000DB01 F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000DB06 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000DB07 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000DB0C FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000DB11 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000DB16 01                         byte_D014:	dc.b 1			; 1 spike
0000DB17 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000DB1C 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000DB1D F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000DB22 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000DB27 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000DB2C 06                         byte_D02A:	dc.b 6			; 6 spikes
0000DB2D F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000DB32 F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000DB37 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000DB3C F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000DB41 F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000DB46 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000DB4B 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000DB4C FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000DB52 00                         		even
0000DB52 00                         		even
0000DB52                            
0000DB52                            ; ===========================================================================
0000DB52                            ; ---------------------------------------------------------------------------
0000DB52                            ; Object 3B - purple rock (GHZ)
0000DB52                            ; ---------------------------------------------------------------------------
0000DB52                            
0000DB52                            Obj3B:					; XREF: Obj_Index
0000DB52 7000                       		moveq	#0,d0
0000DB54 1028 0024                  		move.b	$24(a0),d0
0000DB58 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000DB5C 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000DB60                            ; ===========================================================================
0000DB60 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000DB62 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000DB64                            ; ===========================================================================
0000DB64                            
0000DB64                            Obj3B_Main:				; XREF: Obj3B_Index
0000DB64 5428 0024                  		addq.b	#2,$24(a0)
0000DB68 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000DB70 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000DB76 117C 0004 0001             		move.b	#4,1(a0)
0000DB7C 117C 0013 0019             		move.b	#$13,$19(a0)
0000DB82 117C 0004 0018             		move.b	#4,$18(a0)
0000DB88                            
0000DB88                            Obj3B_Solid:				; XREF: Obj3B_Index
0000DB88 323C 001B                  		move.w	#$1B,d1
0000DB8C 343C 0010                  		move.w	#$10,d2
0000DB90 363C 0010                  		move.w	#$10,d3
0000DB94 3828 0008                  		move.w	8(a0),d4
0000DB98 6100 0000                  		bsr.w	SolidObject
0000DB9C 6100 0000                  		bsr.w	DisplaySprite
0000DBA0 3028 0008                  		move.w	8(a0),d0
0000DBA4 0240 FF80                  		andi.w	#$FF80,d0
0000DBA8 3238 F700                  		move.w	($FFFFF700).w,d1
0000DBAC 0441 0080                  		subi.w	#$80,d1
0000DBB0 0241 FF80                  		andi.w	#$FF80,d1
0000DBB4 9041                       		sub.w	d1,d0
0000DBB6 0C40 0280                  		cmpi.w	#$280,d0
0000DBBA 6200 0000                  		bhi.w	DeleteObject
0000DBBE 4E75                       		rts
0000DBC0                            ; ===========================================================================
0000DBC0                            ; ---------------------------------------------------------------------------
0000DBC0                            ; Object 49 - waterfall	sound effect (GHZ)
0000DBC0                            ; ---------------------------------------------------------------------------
0000DBC0                            
0000DBC0                            Obj49:					; XREF: Obj_Index
0000DBC0 7000                       		moveq	#0,d0
0000DBC2 1028 0024                  		move.b	$24(a0),d0
0000DBC6 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000DBCA 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000DBCE                            ; ===========================================================================
0000DBCE 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000DBD0 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000DBD2                            ; ===========================================================================
0000DBD2                            
0000DBD2                            Obj49_Main:				; XREF: Obj49_Index
0000DBD2 5428 0024                  		addq.b	#2,$24(a0)
0000DBD6 117C 0004 0001             		move.b	#4,1(a0)
0000DBDC                            
0000DBDC                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000DBDC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000DBE0 0200 003F                  		andi.b	#$3F,d0
0000DBE4 6600                       		bne.s	Obj49_ChkDel
0000DBE6 303C 00D0                  		move.w	#$D0,d0
0000DBEA 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000DBF0                            
0000DBF0                            Obj49_ChkDel:
0000DBF0 3028 0008                  		move.w	8(a0),d0
0000DBF4 0240 FF80                  		andi.w	#$FF80,d0
0000DBF8 3238 F700                  		move.w	($FFFFF700).w,d1
0000DBFC 0441 0080                  		subi.w	#$80,d1
0000DC00 0241 FF80                  		andi.w	#$FF80,d1
0000DC04 9041                       		sub.w	d1,d0
0000DC06 0C40 0280                  		cmpi.w	#$280,d0
0000DC0A 6200 0000                  		bhi.w	DeleteObject
0000DC0E 4E75                       		rts	
0000DC10                            ; ===========================================================================
0000DC10                            ; ---------------------------------------------------------------------------
0000DC10                            ; Sprite mappings - purple rock	(GHZ)
0000DC10                            ; ---------------------------------------------------------------------------
0000DC10                            Map_obj3B:
0000DC10                            	include "_maps\obj3B.asm"
0000DC10                            ; ---------------------------------------------------------------------------
0000DC10                            ; Sprite mappings - purple rock	(GHZ)
0000DC10                            ; ---------------------------------------------------------------------------
0000DC10 0000                       		dc.w byte_D110-Map_obj3B
0000DC12 02                         byte_D110:	dc.b 2
0000DC13 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000DC18 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000DC1E 00                         		even
0000DC1E 00                         		even
0000DC1E                            
0000DC1E                            ; ===========================================================================
0000DC1E                            ; ---------------------------------------------------------------------------
0000DC1E                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000DC1E                            ; ---------------------------------------------------------------------------
0000DC1E                            
0000DC1E                            Obj3C:					; XREF: Obj_Index
0000DC1E 7000                       		moveq	#0,d0
0000DC20 1028 0024                  		move.b	$24(a0),d0
0000DC24 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000DC28 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000DC2C 6000 0000                  		bra.w	MarkObjGone
0000DC30                            ; ===========================================================================
0000DC30 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000DC32 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000DC34 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000DC36                            ; ===========================================================================
0000DC36                            
0000DC36                            Obj3C_Main:				; XREF: Obj3C_Index
0000DC36 5428 0024                  		addq.b	#2,$24(a0)
0000DC3A 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000DC42 317C 450F 0002             		move.w	#$450F,2(a0)
0000DC48 117C 0004 0001             		move.b	#4,1(a0)
0000DC4E 117C 0010 0019             		move.b	#$10,$19(a0)
0000DC54 117C 0004 0018             		move.b	#4,$18(a0)
0000DC5A 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000DC60                            
0000DC60                            Obj3C_Solid:				; XREF: Obj3C_Index
0000DC60 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000DC66 323C 001B                  		move.w	#$1B,d1
0000DC6A 343C 0020                  		move.w	#$20,d2
0000DC6E 363C 0020                  		move.w	#$20,d3
0000DC72 3828 0008                  		move.w	8(a0),d4
0000DC76 6100 0000                  		bsr.w	SolidObject
0000DC7A 0828 0005 0022             		btst	#5,$22(a0)
0000DC80 6600                       		bne.s	Obj3C_ChkRoll
0000DC82                            
0000DC82                            locret_D180:
0000DC82 4E75                       		rts
0000DC84                            ; ===========================================================================
0000DC84                            
0000DC84                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000DC84 4A38 FE19                                  tst.b   (Super_Sonic_flag).w
0000DC88 6600                                       bne.s   ObjBreakeAnyways
0000DC8A 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000DC90 66F0                       		bne.s	locret_D180	; if not, branch
0000DC92 3028 0030                  		move.w	$30(a0),d0
0000DC96 6A00                       		bpl.s	Obj3C_ChkSpeed
0000DC98 4440                       		neg.w	d0
0000DC9A                            
0000DC9A                            Obj3C_ChkSpeed:
0000DC9A 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000DC9E 65E2                       		bcs.s	locret_D180	; if not, branch
0000DCA0                            ObjBreakeAnyways:		
0000DCA0 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000DCA6 5869 0008                  		addq.w	#4,8(a1)
0000DCAA 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000DCB0 3028 0008                  		move.w	8(a0),d0
0000DCB4 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000DCB8 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000DCBA 5169 0008                  		subq.w	#8,8(a1)
0000DCBE 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000DCC4                            
0000DCC4                            Obj3C_Smash:
0000DCC4 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000DCCA 08A8 0005 0022             		bclr	#5,$22(a0)
0000DCD0 08A9 0005 0022             		bclr	#5,$22(a1)
0000DCD6 7207                       		moveq	#7,d1		; load 8 fragments
0000DCD8 343C 0070                  		move.w	#$70,d2
0000DCDC 6100                       		bsr.s	SmashObject
0000DCDE                            
0000DCDE                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000DCDE 6100 0000                  		bsr.w	SpeedToPos
0000DCE2 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000DCE8 6100 0000                  		bsr.w	DisplaySprite
0000DCEC 4A28 0001                  		tst.b	1(a0)
0000DCF0 6A00 0000                  		bpl.w	DeleteObject
0000DCF4 4E75                       		rts
0000DCF6                            
0000DCF6                            ; ---------------------------------------------------------------------------
0000DCF6                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000DCF6                            ; ---------------------------------------------------------------------------
0000DCF6                            
0000DCF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DCF6                            
0000DCF6                            
0000DCF6                            SmashObject:				; XREF: Obj3C_Smash
0000DCF6 7000                       		moveq	#0,d0
0000DCF8 1028 001A                  		move.b	$1A(a0),d0
0000DCFC D040                       		add.w	d0,d0
0000DCFE 2668 0004                  		movea.l	4(a0),a3
0000DD02 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000DD06 524B                       		addq.w	#1,a3
0000DD08 08E8 0005 0001             		bset	#5,1(a0)
0000DD0E 1810                       		move.b	0(a0),d4
0000DD10 1A28 0001                  		move.b	1(a0),d5
0000DD14 2248                       		movea.l	a0,a1
0000DD16 6000                       		bra.s	Smash_LoadFrag
0000DD18                            ; ===========================================================================
0000DD18                            
0000DD18                            Smash_Loop:
0000DD18 6100 0000                  		bsr.w	SingleObjLoad
0000DD1C 6600                       		bne.s	Smash_PlaySnd
0000DD1E 5A4B                       		addq.w	#5,a3
0000DD20                            
0000DD20                            Smash_LoadFrag:				; XREF: SmashObject
0000DD20 137C 0004 0024             		move.b	#4,$24(a1)
0000DD26 1284                       		move.b	d4,0(a1)
0000DD28 234B 0004                  		move.l	a3,4(a1)
0000DD2C 1345 0001                  		move.b	d5,1(a1)
0000DD30 3368 0008 0008             		move.w	8(a0),8(a1)
0000DD36 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DD3C 3368 0002 0002             		move.w	2(a0),2(a1)
0000DD42 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000DD48 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000DD4E 335C 0010                  		move.w	(a4)+,$10(a1)
0000DD52 335C 0012                  		move.w	(a4)+,$12(a1)
0000DD56 B3C8                       		cmpa.l	a0,a1
0000DD58 6400                       		bcc.s	loc_D268
0000DD5A 2F08                       		move.l	a0,-(sp)
0000DD5C 2049                       		movea.l	a1,a0
0000DD5E 6100 0000                  		bsr.w	SpeedToPos
0000DD62 D568 0012                  		add.w	d2,$12(a0)
0000DD66 205F                       		movea.l	(sp)+,a0
0000DD68 6100 0000                  		bsr.w	DisplaySprite2
0000DD6C                            
0000DD6C                            loc_D268:
0000DD6C 51C9 FFAA                  		dbf	d1,Smash_Loop
0000DD70                            
0000DD70                            Smash_PlaySnd:
0000DD70 303C 00CB                  		move.w	#$CB,d0
0000DD74 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play smashing sound
0000DD7A                            ; End of function SmashObject
0000DD7A                            
0000DD7A                            ; ===========================================================================
0000DD7A                            ; Smashed block	fragment speeds
0000DD7A                            ;
0000DD7A 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000DD7E 0600 FF00                  		dc.w $600, $FF00
0000DD82 0600 0100                  		dc.w $600, $100
0000DD86 0400 0500                  		dc.w $400, $500
0000DD8A 0600 FA00                  		dc.w $600, $FA00
0000DD8E 0800 FE00                  		dc.w $800, $FE00
0000DD92 0800 0200                  		dc.w $800, $200
0000DD96 0600 0600                  		dc.w $600, $600
0000DD9A                            
0000DD9A FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000DD9E F800 FE00                  		dc.w $F800, $FE00
0000DDA2 F800 0200                  		dc.w $F800, $200
0000DDA6 FA00 0600                  		dc.w $FA00, $600
0000DDAA FC00 FB00                  		dc.w $FC00, $FB00
0000DDAE FA00 FF00                  		dc.w $FA00, $FF00
0000DDB2 FA00 0100                  		dc.w $FA00, $100
0000DDB6 FC00 0500                  		dc.w $FC00, $500
0000DDBA                            ; ---------------------------------------------------------------------------
0000DDBA                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DDBA                            ; ---------------------------------------------------------------------------
0000DDBA                            Map_obj3C:
0000DDBA                            	include "_maps\obj3C.asm"
0000DDBA                            ; ---------------------------------------------------------------------------
0000DDBA                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DDBA                            ; ---------------------------------------------------------------------------
0000DDBA 0000                       		dc.w byte_D2BC-Map_obj3C
0000DDBC 0000                       		dc.w byte_D2E5-Map_obj3C
0000DDBE 0000                       		dc.w byte_D30E-Map_obj3C
0000DDC0 08                         byte_D2BC:	dc.b 8
0000DDC1 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000DDC6 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000DDCB 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000DDD0 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000DDD5 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DDDA F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DDDF 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DDE4 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DDE9 08                         byte_D2E5:	dc.b 8
0000DDEA E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DDEF F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DDF4 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DDF9 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DDFE E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DE03 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DE08 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DE0D 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DE12 08                         byte_D30E:	dc.b 8
0000DE13 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DE18 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DE1D 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DE22 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DE27 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000DE2C F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000DE31 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000DE36 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000DE3C 00                         		even
0000DE3C 00                         		even
0000DE3C                            
0000DE3C                            ; ---------------------------------------------------------------------------
0000DE3C                            ; Object code loading subroutine
0000DE3C                            ; ---------------------------------------------------------------------------
0000DE3C                            
0000DE3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE3C                            
0000DE3C                            
0000DE3C                            ObjectsLoad:				; XREF: TitleScreen; et al
0000DE3C 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000DE40 7E7F                       		moveq	#$7F,d7
0000DE42 7000                       		moveq	#0,d0
0000DE44 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000DE4A 6400                       		bcc.s	loc_D362
0000DE4C                            
0000DE4C                            loc_D348:
0000DE4C 1010                       		move.b	(a0),d0		; load object number from RAM
0000DE4E 6700                       		beq.s	loc_D358
0000DE50 D040                       		add.w	d0,d0
0000DE52 D040                       		add.w	d0,d0
0000DE54 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000DE58 4E91                       		jsr	(a1)		; run the object's code
0000DE5A 7000                       		moveq	#0,d0
0000DE5C                            
0000DE5C                            loc_D358:
0000DE5C 41E8 0040                  		lea	$40(a0),a0	; next object
0000DE60 51CF FFEA                  		dbf	d7,loc_D348
0000DE64 4E75                       		rts	
0000DE66                            ; ===========================================================================
0000DE66                            
0000DE66                            loc_D362:
0000DE66 0C38 000A D024             		cmpi.b	#$A,($FFFFD000+$24).w	; Has Sonic drowned?
0000DE6C 67DE                       		beq.s	loc_D348				; If so, run objects a little longer
0000DE6E 7E1F                       		moveq	#$1F,d7
0000DE70 61DA                       		bsr.s	loc_D348
0000DE72 7E5F                       		moveq	#$5F,d7
0000DE74                            
0000DE74                            loc_D368:
0000DE74 7000                       		moveq	#0,d0
0000DE76 1010                       		move.b	(a0),d0
0000DE78 6700                       		beq.s	loc_D378
0000DE7A 4A28 0001                  		tst.b	1(a0)
0000DE7E 6A00                       		bpl.s	loc_D378
0000DE80 6100 0000                  		bsr.w	DisplaySprite
0000DE84                            
0000DE84                            loc_D378:
0000DE84 41E8 0040                  		lea	$40(a0),a0
0000DE88                            
0000DE88                            loc_D37C:
0000DE88 51CF FFEA                  		dbf	d7,loc_D368
0000DE8C 4E75                       		rts	
0000DE8E                            ; End of function ObjectsLoad
0000DE8E                            
0000DE8E                            ; ===========================================================================
0000DE8E                            ; ---------------------------------------------------------------------------
0000DE8E                            ; Object pointers
0000DE8E                            ; ---------------------------------------------------------------------------
0000DE8E                            Obj_Index:
0000DE8E                            	include "_inc\Object pointers.asm"
0000DE8E                            ; ---------------------------------------------------------------------------
0000DE8E                            ; Object pointers
0000DE8E                            ; ---------------------------------------------------------------------------
0000DE8E 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000DE9E 0000 0000 0000 0000 0000+  	dc.l SpinDash_dust, speedboosters, ObjectFall, Obj08
0000DEAE 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000DEBE 0000 0000 0000 B126 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000DECE 0000 7DE2 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000DEDE 0000 8408 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000DEEE 0000 8C56 0000 8CBE 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000DEFE 0000 9308 0000 95F6 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000DF0E 0000 0000 0000 A27A 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000DF1E 0000 A5BC 0000 ABEA 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000DF2E 0000 9EB2 0000 93DE 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000DF3E 0000 B7B4 0000 ADE8 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000DF4E 0000 C186 0000 C834 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000DF5E 0000 BCEA 0000 D924 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000DF6E 0000 CFBA 0000 D074 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000DF7E 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000DF8E 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DF9E 0000 C4A2 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DFAE 0000 DBC0 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DFBE 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DFCE 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DFDE 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DFEE 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DFFE 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000E00E 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000E01E 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000E02E 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000E03E 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000E04E 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000E05E 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000E06E 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000E07E 0000 0000 0000 D2AE 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000E08E 0000 59D4 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000E09E 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000E0AE 0000 608E 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E0AE 0000 608E 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E0BE                            
0000E0BE                            ; ---------------------------------------------------------------------------
0000E0BE                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000E0BE                            ; ---------------------------------------------------------------------------
0000E0BE                            
0000E0BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E0BE                            
0000E0BE                            
0000E0BE                            ObjectFall:
0000E0BE 2428 0008                  		move.l	8(a0),d2
0000E0C2 2628 000C                  		move.l	$C(a0),d3
0000E0C6 3028 0010                  		move.w	$10(a0),d0
0000E0CA 48C0                       		ext.l	d0
0000E0CC E180                       		asl.l	#8,d0
0000E0CE D480                       		add.l	d0,d2
0000E0D0 3028 0012                  		move.w	$12(a0),d0
0000E0D4 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000E0DA 48C0                       		ext.l	d0
0000E0DC E180                       		asl.l	#8,d0
0000E0DE D680                       		add.l	d0,d3
0000E0E0 2142 0008                  		move.l	d2,8(a0)
0000E0E4 2143 000C                  		move.l	d3,$C(a0)
0000E0E8 4E75                       		rts	
0000E0EA                            ; End of function ObjectFall
0000E0EA                            
0000E0EA                            ; ---------------------------------------------------------------------------
0000E0EA                            ; Subroutine translating object	speed to update	object position
0000E0EA                            ; ---------------------------------------------------------------------------
0000E0EA                            
0000E0EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E0EA                            
0000E0EA                            
0000E0EA                            SpeedToPos:
0000E0EA 2428 0008                  		move.l	8(a0),d2
0000E0EE 2628 000C                  		move.l	$C(a0),d3
0000E0F2 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000E0F6 48C0                       		ext.l	d0
0000E0F8 E180                       		asl.l	#8,d0		; multiply speed by $100
0000E0FA D480                       		add.l	d0,d2		; add to x-axis	position
0000E0FC 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000E100 48C0                       		ext.l	d0
0000E102 E180                       		asl.l	#8,d0		; multiply by $100
0000E104 D680                       		add.l	d0,d3		; add to y-axis	position
0000E106 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000E10A 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000E10E 4E75                       		rts	
0000E110                            ; End of function SpeedToPos
0000E110                            
0000E110                            ; ---------------------------------------------------------------------------
0000E110                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000E110                            ; ---------------------------------------------------------------------------
0000E110                            
0000E110                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E110                            
0000E110                            
0000E110                            DisplaySprite:
0000E110 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000E114 3028 0018                  		move.w	$18(a0),d0
0000E118 E248                       		lsr.w	#1,d0
0000E11A 0240 0380                  		andi.w	#$380,d0
0000E11E D2C0                       		adda.w	d0,a1
0000E120 0C51 007E                  		cmpi.w	#$7E,(a1)
0000E124 6400                       		bcc.s	locret_D620
0000E126 5451                       		addq.w	#2,(a1)
0000E128 D2D1                       		adda.w	(a1),a1
0000E12A 3288                       		move.w	a0,(a1)
0000E12C                            
0000E12C                            locret_D620:
0000E12C 4E75                       		rts	
0000E12E                            ; End of function DisplaySprite
0000E12E                            
0000E12E                            ; ---------------------------------------------------------------------------
0000E12E                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000E12E                            ; ---------------------------------------------------------------------------
0000E12E                            
0000E12E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E12E                            
0000E12E                            
0000E12E                            DisplaySprite2:
0000E12E 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000E132 3029 0018                  		move.w	$18(a1),d0
0000E136 E248                       		lsr.w	#1,d0
0000E138 0240 0380                  		andi.w	#$380,d0
0000E13C D4C0                       		adda.w	d0,a2
0000E13E 0C52 007E                  		cmpi.w	#$7E,(a2)
0000E142 6400                       		bcc.s	locret_D63E
0000E144 5452                       		addq.w	#2,(a2)
0000E146 D4D2                       		adda.w	(a2),a2
0000E148 3489                       		move.w	a1,(a2)
0000E14A                            
0000E14A                            locret_D63E:
0000E14A 4E75                       		rts
0000E14C                            ; End of function DisplaySprite2
0000E14C                            
0000E14C                            ; ---------------------------------------------------------------------------
0000E14C                            ; Subroutine to	delete an object
0000E14C                            ; ---------------------------------------------------------------------------
0000E14C                            
0000E14C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E14C                            
0000E14C                            
0000E14C                            DeleteObject:
0000E14C 2248                       		movea.l	a0,a1
0000E14E                            
0000E14E                            DeleteObject2:
0000E14E 7200                       		moveq	#0,d1
0000E150 700F                       		moveq	#$F,d0
0000E152                            
0000E152                            loc_D646:
0000E152 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000E154 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000E158 4E75                       		rts
0000E15A                            ; End of function DeleteObject
0000E15A                            
0000E15A                            ; ===========================================================================
0000E15A 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000E15E 00FF F700                  		dc.l $FFF700		; main screen x-position
0000E162 00FF F708                  		dc.l $FFF708		; background x-position	1
0000E166 00FF F718                  		dc.l $FFF718		; background x-position	2
0000E16A                            ; ---------------------------------------------------------------------------
0000E16A                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000E16A                            ; ---------------------------------------------------------------------------
0000E16A                            
0000E16A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E16A                            
0000E16A                            
0000E16A                            BuildSprites:				; XREF: TitleScreen; et al
0000E16A 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000E16E 7A00                       		moveq	#0,d5
0000E170 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000E174 7E07                       		moveq	#7,d7
0000E176                            
0000E176                            loc_D66A:
0000E176 4A54                       		tst.w	(a4)
0000E178 6700 0000                  		beq.w	loc_D72E
0000E17C 7C02                       		moveq	#2,d6
0000E17E                            
0000E17E                            loc_D672:
0000E17E 3074 6000                  		movea.w	(a4,d6.w),a0
0000E182 4A10                       		tst.b	(a0)
0000E184 6700 0000                  		beq.w	loc_D726
0000E188 08A8 0007 0001             		bclr	#7,1(a0)
0000E18E 1028 0001                  		move.b	1(a0),d0
0000E192 1800                       		move.b	d0,d4
0000E194 0240 000C                  		andi.w	#$C,d0
0000E198 6700                       		beq.s	loc_D6DE
0000E19A 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000E19E 7000                       		moveq	#0,d0
0000E1A0 1028 0019                  		move.b	$19(a0),d0
0000E1A4 3628 0008                  		move.w	8(a0),d3
0000E1A8 9651                       		sub.w	(a1),d3
0000E1AA 3203                       		move.w	d3,d1
0000E1AC D240                       		add.w	d0,d1
0000E1AE 6B00 0000                  		bmi.w	loc_D726
0000E1B2 3203                       		move.w	d3,d1
0000E1B4 9240                       		sub.w	d0,d1
0000E1B6 0C41 0140                  		cmpi.w	#$140,d1
0000E1BA 6C00                       		bge.s	loc_D726
0000E1BC 0643 0080                  		addi.w	#$80,d3
0000E1C0 0804 0004                  		btst	#4,d4
0000E1C4 6700                       		beq.s	loc_D6E8
0000E1C6 7000                       		moveq	#0,d0
0000E1C8 1028 0016                  		move.b	$16(a0),d0
0000E1CC 3428 000C                  		move.w	$C(a0),d2
0000E1D0 9469 0004                  		sub.w	4(a1),d2
0000E1D4 3202                       		move.w	d2,d1
0000E1D6 D240                       		add.w	d0,d1
0000E1D8 6B00                       		bmi.s	loc_D726
0000E1DA 3202                       		move.w	d2,d1
0000E1DC 9240                       		sub.w	d0,d1
0000E1DE 0C41 00E0                  		cmpi.w	#$E0,d1
0000E1E2 6C00                       		bge.s	loc_D726
0000E1E4 0642 0080                  		addi.w	#$80,d2
0000E1E8 6000                       		bra.s	loc_D700
0000E1EA                            ; ===========================================================================
0000E1EA                            
0000E1EA                            loc_D6DE:
0000E1EA 3428 000A                  		move.w	$A(a0),d2
0000E1EE 3628 0008                  		move.w	8(a0),d3
0000E1F2 6000                       		bra.s	loc_D700
0000E1F4                            ; ===========================================================================
0000E1F4                            
0000E1F4                            loc_D6E8:
0000E1F4 3428 000C                  		move.w	$C(a0),d2
0000E1F8 9469 0004                  		sub.w	4(a1),d2
0000E1FC 0642 0080                  		addi.w	#$80,d2
0000E200 0C42 0060                  		cmpi.w	#$60,d2
0000E204 6500                       		bcs.s	loc_D726
0000E206 0C42 0180                  		cmpi.w	#$180,d2
0000E20A 6400                       		bcc.s	loc_D726
0000E20C                            
0000E20C                            loc_D700:
0000E20C 2268 0004                  		movea.l	4(a0),a1
0000E210 7200                       		moveq	#0,d1
0000E212 0804 0005                  		btst	#5,d4
0000E216 6600                       		bne.s	loc_D71C
0000E218 1228 001A                  		move.b	$1A(a0),d1
0000E21C D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
0000E21E D2F1 1000                  		adda.w	(a1,d1.w),a1
0000E222 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
0000E224 1219                       		move.b	(a1)+,d1
0000E226 5301                       		subq.b	#1,d1
0000E228 6B00                       		bmi.s	loc_D720
0000E22A                            
0000E22A                            loc_D71C:
0000E22A 6100 0000                  		bsr.w	sub_D750
0000E22E                            
0000E22E                            loc_D720:
0000E22E 08E8 0007 0001             		bset	#7,1(a0)
0000E234                            
0000E234                            loc_D726:
0000E234 5446                       		addq.w	#2,d6
0000E236 5554                       		subq.w	#2,(a4)
0000E238 6600 FF44                  		bne.w	loc_D672
0000E23C                            
0000E23C                            loc_D72E:
0000E23C 49EC 0080                  		lea	$80(a4),a4
0000E240 51CF FF34                  		dbf	d7,loc_D66A
0000E244 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000E248 0C05 0050                  		cmpi.b	#$50,d5
0000E24C 6700                       		beq.s	loc_D748
0000E24E 24BC 0000 0000             		move.l	#0,(a2)
0000E254 4E75                       		rts	
0000E256                            ; ===========================================================================
0000E256                            
0000E256                            loc_D748:
0000E256 157C 0000 FFFB             		move.b	#0,-5(a2)
0000E25C 4E75                       		rts	
0000E25E                            ; End of function BuildSprites
0000E25E                            
0000E25E                            
0000E25E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E25E                            
0000E25E                            
0000E25E                            sub_D750:				; XREF: BuildSprites
0000E25E 3668 0002                  		movea.w	2(a0),a3
0000E262 0804 0000                  		btst	#0,d4
0000E266 6600                       		bne.s	loc_D796
0000E268 0804 0001                  		btst	#1,d4
0000E26C 6600 0000                  		bne.w	loc_D7E4
0000E270                            ; End of function sub_D750
0000E270                            
0000E270                            
0000E270                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E270                            
0000E270                            
0000E270                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000E270 0C05 0050                  		cmpi.b	#$50,d5
0000E274 6700                       		beq.s	locret_D794
0000E276 1019                       		move.b	(a1)+,d0
0000E278 4880                       		ext.w	d0
0000E27A D042                       		add.w	d2,d0
0000E27C 34C0                       		move.w	d0,(a2)+
0000E27E 14D9                       		move.b	(a1)+,(a2)+
0000E280 5205                       		addq.b	#1,d5
0000E282 14C5                       		move.b	d5,(a2)+
0000E284 1019                       		move.b	(a1)+,d0
0000E286 E148                       		lsl.w	#8,d0
0000E288 1019                       		move.b	(a1)+,d0
0000E28A D04B                       		add.w	a3,d0
0000E28C 34C0                       		move.w	d0,(a2)+
0000E28E 1019                       		move.b	(a1)+,d0
0000E290 4880                       		ext.w	d0
0000E292 D043                       		add.w	d3,d0
0000E294 0240 01FF                  		andi.w	#$1FF,d0
0000E298 6600                       		bne.s	loc_D78E
0000E29A 5240                       		addq.w	#1,d0
0000E29C                            
0000E29C                            loc_D78E:
0000E29C 34C0                       		move.w	d0,(a2)+
0000E29E 51C9 FFD0                  		dbf	d1,sub_D762
0000E2A2                            
0000E2A2                            locret_D794:
0000E2A2 4E75                       		rts	
0000E2A4                            ; End of function sub_D762
0000E2A4                            
0000E2A4                            ; ===========================================================================
0000E2A4                            
0000E2A4                            loc_D796:
0000E2A4 0804 0001                  		btst	#1,d4
0000E2A8 6600 0000                  		bne.w	loc_D82A
0000E2AC                            
0000E2AC                            loc_D79E:
0000E2AC 0C05 0050                  		cmpi.b	#$50,d5
0000E2B0 6700                       		beq.s	locret_D7E2
0000E2B2 1019                       		move.b	(a1)+,d0
0000E2B4 4880                       		ext.w	d0
0000E2B6 D042                       		add.w	d2,d0
0000E2B8 34C0                       		move.w	d0,(a2)+
0000E2BA 1819                       		move.b	(a1)+,d4
0000E2BC 14C4                       		move.b	d4,(a2)+
0000E2BE 5205                       		addq.b	#1,d5
0000E2C0 14C5                       		move.b	d5,(a2)+
0000E2C2 1019                       		move.b	(a1)+,d0
0000E2C4 E148                       		lsl.w	#8,d0
0000E2C6 1019                       		move.b	(a1)+,d0
0000E2C8 D04B                       		add.w	a3,d0
0000E2CA 0A40 0800                  		eori.w	#$800,d0
0000E2CE 34C0                       		move.w	d0,(a2)+
0000E2D0 1019                       		move.b	(a1)+,d0
0000E2D2 4880                       		ext.w	d0
0000E2D4 4440                       		neg.w	d0
0000E2D6 D804                       		add.b	d4,d4
0000E2D8 0244 0018                  		andi.w	#$18,d4
0000E2DC 5044                       		addq.w	#8,d4
0000E2DE 9044                       		sub.w	d4,d0
0000E2E0 D043                       		add.w	d3,d0
0000E2E2 0240 01FF                  		andi.w	#$1FF,d0
0000E2E6 6600                       		bne.s	loc_D7DC
0000E2E8 5240                       		addq.w	#1,d0
0000E2EA                            
0000E2EA                            loc_D7DC:
0000E2EA 34C0                       		move.w	d0,(a2)+
0000E2EC 51C9 FFBE                  		dbf	d1,loc_D79E
0000E2F0                            
0000E2F0                            locret_D7E2:
0000E2F0 4E75                       		rts	
0000E2F2                            ; ===========================================================================
0000E2F2                            
0000E2F2                            loc_D7E4:				; XREF: sub_D750
0000E2F2 0C05 0050                  		cmpi.b	#$50,d5
0000E2F6 6700                       		beq.s	locret_D828
0000E2F8 1019                       		move.b	(a1)+,d0
0000E2FA 1811                       		move.b	(a1),d4
0000E2FC 4880                       		ext.w	d0
0000E2FE 4440                       		neg.w	d0
0000E300 E70C                       		lsl.b	#3,d4
0000E302 0244 0018                  		andi.w	#$18,d4
0000E306 5044                       		addq.w	#8,d4
0000E308 9044                       		sub.w	d4,d0
0000E30A D042                       		add.w	d2,d0
0000E30C 34C0                       		move.w	d0,(a2)+
0000E30E 14D9                       		move.b	(a1)+,(a2)+
0000E310 5205                       		addq.b	#1,d5
0000E312 14C5                       		move.b	d5,(a2)+
0000E314 1019                       		move.b	(a1)+,d0
0000E316 E148                       		lsl.w	#8,d0
0000E318 1019                       		move.b	(a1)+,d0
0000E31A D04B                       		add.w	a3,d0
0000E31C 0A40 1000                  		eori.w	#$1000,d0
0000E320 34C0                       		move.w	d0,(a2)+
0000E322 1019                       		move.b	(a1)+,d0
0000E324 4880                       		ext.w	d0
0000E326 D043                       		add.w	d3,d0
0000E328 0240 01FF                  		andi.w	#$1FF,d0
0000E32C 6600                       		bne.s	loc_D822
0000E32E 5240                       		addq.w	#1,d0
0000E330                            
0000E330                            loc_D822:
0000E330 34C0                       		move.w	d0,(a2)+
0000E332 51C9 FFBE                  		dbf	d1,loc_D7E4
0000E336                            
0000E336                            locret_D828:
0000E336 4E75                       		rts	
0000E338                            ; ===========================================================================
0000E338                            
0000E338                            loc_D82A:
0000E338 0C05 0050                  		cmpi.b	#$50,d5
0000E33C 6700                       		beq.s	locret_D87C
0000E33E 1019                       		move.b	(a1)+,d0
0000E340 1811                       		move.b	(a1),d4
0000E342 4880                       		ext.w	d0
0000E344 4440                       		neg.w	d0
0000E346 E70C                       		lsl.b	#3,d4
0000E348 0244 0018                  		andi.w	#$18,d4
0000E34C 5044                       		addq.w	#8,d4
0000E34E 9044                       		sub.w	d4,d0
0000E350 D042                       		add.w	d2,d0
0000E352 34C0                       		move.w	d0,(a2)+
0000E354 1819                       		move.b	(a1)+,d4
0000E356 14C4                       		move.b	d4,(a2)+
0000E358 5205                       		addq.b	#1,d5
0000E35A 14C5                       		move.b	d5,(a2)+
0000E35C 1019                       		move.b	(a1)+,d0
0000E35E E148                       		lsl.w	#8,d0
0000E360 1019                       		move.b	(a1)+,d0
0000E362 D04B                       		add.w	a3,d0
0000E364 0A40 1800                  		eori.w	#$1800,d0
0000E368 34C0                       		move.w	d0,(a2)+
0000E36A 1019                       		move.b	(a1)+,d0
0000E36C 4880                       		ext.w	d0
0000E36E 4440                       		neg.w	d0
0000E370 D804                       		add.b	d4,d4
0000E372 0244 0018                  		andi.w	#$18,d4
0000E376 5044                       		addq.w	#8,d4
0000E378 9044                       		sub.w	d4,d0
0000E37A D043                       		add.w	d3,d0
0000E37C 0240 01FF                  		andi.w	#$1FF,d0
0000E380 6600                       		bne.s	loc_D876
0000E382 5240                       		addq.w	#1,d0
0000E384                            
0000E384                            loc_D876:
0000E384 34C0                       		move.w	d0,(a2)+
0000E386 51C9 FFB0                  		dbf	d1,loc_D82A
0000E38A                            
0000E38A                            locret_D87C:
0000E38A 4E75                       		rts	
0000E38C                            ; ---------------------------------------------------------------------------
0000E38C                            ; Subroutine to	check if an object is on the screen
0000E38C                            ; ---------------------------------------------------------------------------
0000E38C                            
0000E38C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E38C                            
0000E38C                            
0000E38C                            ChkObjOnScreen:
0000E38C 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000E390 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000E394 6B00                       		bmi.s	NotOnScreen
0000E396 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000E39A 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E39C                            
0000E39C 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000E3A0 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000E3A4 6B00                       		bmi.s	NotOnScreen
0000E3A6 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000E3AA 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E3AC                            
0000E3AC 7000                       		moveq	#0,d0		; set flag to 0
0000E3AE 4E75                       		rts	
0000E3B0                            ; ===========================================================================
0000E3B0                            
0000E3B0                            NotOnScreen:				; XREF: ChkObjOnScreen
0000E3B0 7001                       		moveq	#1,d0		; set flag to 1
0000E3B2 4E75                       		rts	
0000E3B4                            ; End of function ChkObjOnScreen
0000E3B4                            
0000E3B4                            
0000E3B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E3B4                            
0000E3B4                            
0000E3B4                            ChkObjOnScreen2:
0000E3B4 7200                       		moveq	#0,d1
0000E3B6 1228 0019                  		move.b	$19(a0),d1
0000E3BA 3028 0008                  		move.w	8(a0),d0
0000E3BE 9078 F700                  		sub.w	($FFFFF700).w,d0
0000E3C2 D041                       		add.w	d1,d0
0000E3C4 6B00                       		bmi.s	NotOnScreen2
0000E3C6 D241                       		add.w	d1,d1
0000E3C8 9041                       		sub.w	d1,d0
0000E3CA 0C40 0140                  		cmpi.w	#320,d0
0000E3CE 6C00                       		bge.s	NotOnScreen2
0000E3D0                            
0000E3D0 3228 000C                  		move.w	$C(a0),d1
0000E3D4 9278 F704                  		sub.w	($FFFFF704).w,d1
0000E3D8 6B00                       		bmi.s	NotOnScreen2
0000E3DA 0C41 00E0                  		cmpi.w	#224,d1
0000E3DE 6C00                       		bge.s	NotOnScreen2
0000E3E0                            
0000E3E0 7000                       		moveq	#0,d0
0000E3E2 4E75                       		rts	
0000E3E4                            ; ===========================================================================
0000E3E4                            
0000E3E4                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000E3E4 7001                       		moveq	#1,d0
0000E3E6 4E75                       		rts	
0000E3E8                            ; End of function ChkObjOnScreen2
0000E3E8                            
0000E3E8                            ; ---------------------------------------------------------------------------
0000E3E8                            ; Subroutine to	load a level's objects
0000E3E8                            ; ---------------------------------------------------------------------------
0000E3E8                            
0000E3E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E3E8                            
0000E3E8                            
0000E3E8                            ObjPosLoad:				; XREF: Level; et al
0000E3E8 7000                       		moveq	#0,d0
0000E3EA 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000E3EE 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000E3F2 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000E3F6                            ; End of function ObjPosLoad
0000E3F6                            
0000E3F6                            ; ===========================================================================
0000E3F6 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000E3F8 0000                       		dc.w OPL_Next-OPL_Index
0000E3FA                            ; ===========================================================================
0000E3FA                            
0000E3FA                            OPL_Main:				; XREF: OPL_Index
0000E3FA 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000E3FE 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000E402 ED08                       		lsl.b	#6,d0
0000E404 E848                       		lsr.w	#4,d0
0000E406 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000E40C 2248                       		movea.l	a0,a1
0000E40E D0F0 0000                  		adda.w	(a0,d0.w),a0
0000E412 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E416 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E41A D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000E41E 21C9 F778                  		move.l	a1,($FFFFF778).w
0000E422 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000E426 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E42A 34FC 0101                  		move.w	#$101,(a2)+
0000E42E 303C 005E                  		move.w	#$5E,d0
0000E432                            
0000E432                            OPL_ClrList:
0000E432 429A                       		clr.l	(a2)+
0000E434 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000E438                            
0000E438 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E43C 7400                       		moveq	#0,d2
0000E43E 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E442 0446 0080                  		subi.w	#$80,d6
0000E446 6400                       		bcc.s	loc_D93C
0000E448 7C00                       		moveq	#0,d6
0000E44A                            
0000E44A                            loc_D93C:
0000E44A 0246 FF80                  		andi.w	#$FF80,d6
0000E44E 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E452                            
0000E452                            loc_D944:
0000E452 BC50                       		cmp.w	(a0),d6
0000E454 6300                       		bls.s	loc_D956
0000E456 4A28 0004                  		tst.b	4(a0)
0000E45A 6A00                       		bpl.s	loc_D952
0000E45C 1412                       		move.b	(a2),d2
0000E45E 5212                       		addq.b	#1,(a2)
0000E460                            
0000E460                            loc_D952:
0000E460 5C48                       		addq.w	#6,a0
0000E462 60EE                       		bra.s	loc_D944
0000E464                            ; ===========================================================================
0000E464                            
0000E464                            loc_D956:
0000E464 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E468 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E46C 0446 0080                  		subi.w	#$80,d6
0000E470 6500                       		bcs.s	loc_D976
0000E472                            
0000E472                            loc_D964:
0000E472 BC50                       		cmp.w	(a0),d6
0000E474 6300                       		bls.s	loc_D976
0000E476 4A28 0004                  		tst.b	4(a0)
0000E47A 6A00                       		bpl.s	loc_D972
0000E47C 522A 0001                  		addq.b	#1,1(a2)
0000E480                            
0000E480                            loc_D972:
0000E480 5C48                       		addq.w	#6,a0
0000E482 60EE                       		bra.s	loc_D964
0000E484                            ; ===========================================================================
0000E484                            
0000E484                            loc_D976:
0000E484 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E488 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000E48E                            
0000E48E                            OPL_Next:				; XREF: OPL_Index
0000E48E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E492 7400                       		moveq	#0,d2
0000E494 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E498 0246 FF80                  		andi.w	#$FF80,d6
0000E49C BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000E4A0 6700 0000                  		beq.w	locret_DA3A
0000E4A4 6C00                       		bge.s	loc_D9F6
0000E4A6 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E4AA 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E4AE 0446 0080                  		subi.w	#$80,d6
0000E4B2 6500                       		bcs.s	loc_D9D2
0000E4B4                            
0000E4B4                            loc_D9A6:
0000E4B4 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E4B8 6C00                       		bge.s	loc_D9D2
0000E4BA 5D48                       		subq.w	#6,a0
0000E4BC 4A28 0004                  		tst.b	4(a0)
0000E4C0 6A00                       		bpl.s	loc_D9BC
0000E4C2 532A 0001                  		subq.b	#1,1(a2)
0000E4C6 142A 0001                  		move.b	1(a2),d2
0000E4CA                            
0000E4CA                            loc_D9BC:
0000E4CA 6100 0000                  		bsr.w	loc_DA3C
0000E4CE 6600                       		bne.s	loc_D9C6
0000E4D0 5D48                       		subq.w	#6,a0
0000E4D2 60E0                       		bra.s	loc_D9A6
0000E4D4                            ; ===========================================================================
0000E4D4                            
0000E4D4                            loc_D9C6:
0000E4D4 4A28 0004                  		tst.b	4(a0)
0000E4D8 6A00                       		bpl.s	loc_D9D0
0000E4DA 522A 0001                  		addq.b	#1,1(a2)
0000E4DE                            
0000E4DE                            loc_D9D0:
0000E4DE 5C48                       		addq.w	#6,a0
0000E4E0                            
0000E4E0                            loc_D9D2:
0000E4E0 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E4E4 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E4E8 0646 0300                  		addi.w	#$300,d6
0000E4EC                            
0000E4EC                            loc_D9DE:
0000E4EC BC68 FFFA                  		cmp.w	-6(a0),d6
0000E4F0 6E00                       		bgt.s	loc_D9F0
0000E4F2 4A28 FFFE                  		tst.b	-2(a0)
0000E4F6 6A00                       		bpl.s	loc_D9EC
0000E4F8 5312                       		subq.b	#1,(a2)
0000E4FA                            
0000E4FA                            loc_D9EC:
0000E4FA 5D48                       		subq.w	#6,a0
0000E4FC 60EE                       		bra.s	loc_D9DE
0000E4FE                            ; ===========================================================================
0000E4FE                            
0000E4FE                            loc_D9F0:
0000E4FE 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E502 4E75                       		rts	
0000E504                            ; ===========================================================================
0000E504                            
0000E504                            loc_D9F6:
0000E504 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E508 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E50C 0646 0280                  		addi.w	#$280,d6
0000E510                            
0000E510                            loc_DA02:
0000E510 BC50                       		cmp.w	(a0),d6
0000E512 6300                       		bls.s	loc_DA16
0000E514 4A28 0004                  		tst.b	4(a0)
0000E518 6A00                       		bpl.s	loc_DA10
0000E51A 1412                       		move.b	(a2),d2
0000E51C 5212                       		addq.b	#1,(a2)
0000E51E                            
0000E51E                            loc_DA10:
0000E51E 6100 0000                  		bsr.w	loc_DA3C
0000E522 67EC                       		beq.s	loc_DA02
0000E524 4A28 0004                  		tst.b	$04(a0)		; was this object a remember state?
0000E528 6A00                       		bpl.s	loc_DA16	; if not, branch
0000E52A 5312                       		subq.b	#$01,(a2)	; move right counter back		
0000E52C                            
0000E52C                            loc_DA16:
0000E52C 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E530 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E534 0446 0300                  		subi.w	#$300,d6
0000E538 6500                       		bcs.s	loc_DA36
0000E53A                            
0000E53A                            loc_DA24:
0000E53A BC50                       		cmp.w	(a0),d6
0000E53C 6300                       		bls.s	loc_DA36
0000E53E 4A28 0004                  		tst.b	4(a0)
0000E542 6A00                       		bpl.s	loc_DA32
0000E544 522A 0001                  		addq.b	#1,1(a2)
0000E548                            
0000E548                            loc_DA32:
0000E548 5C48                       		addq.w	#6,a0
0000E54A 60EE                       		bra.s	loc_DA24
0000E54C                            ; ===========================================================================
0000E54C                            
0000E54C                            loc_DA36:
0000E54C 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E550                            
0000E550                            locret_DA3A:
0000E550 4E75                       		rts	
0000E552                            ; ===========================================================================
0000E552                            
0000E552                            loc_DA3C:
0000E552 4A28 0004                  		tst.b	4(a0)
0000E556 6A00                       		bpl.s	OPL_MakeItem
0000E558 0832 0007 2002             		btst	#7,2(a2,d2.w)
0000E55E 6700                       		beq.s	OPL_MakeItem
0000E560 5C48                       		addq.w	#6,a0
0000E562 7000                       		moveq	#0,d0
0000E564 4E75                       		rts	
0000E566                            ; ===========================================================================
0000E566                            
0000E566                            OPL_MakeItem:
0000E566 6100 0000                  		bsr.w	SingleObjLoad
0000E56A 6600                       		bne.s	locret_DA8A
0000E56C 3358 0008                  		move.w	(a0)+,8(a1)
0000E570 3018                       		move.w	(a0)+,d0
0000E572 3200                       		move.w	d0,d1
0000E574 0240 0FFF                  		andi.w	#$FFF,d0
0000E578 3340 000C                  		move.w	d0,$C(a1)
0000E57C E559                       		rol.w	#2,d1
0000E57E 0201 0003                  		andi.b	#3,d1
0000E582 1341 0001                  		move.b	d1,1(a1)
0000E586 1341 0022                  		move.b	d1,$22(a1)
0000E58A 1018                       		move.b	(a0)+,d0
0000E58C 6A00                       		bpl.s	loc_DA80
0000E58E 08F2 0007 2002             		bset	#$07,$02(a2,d2.w)	; set as removed
0000E594 0200 007F                  		andi.b	#$7F,d0
0000E598 1342 0023                  		move.b	d2,$23(a1)
0000E59C                            
0000E59C                            loc_DA80:
0000E59C 1280                       		move.b	d0,0(a1)
0000E59E 1358 0028                  		move.b	(a0)+,$28(a1)
0000E5A2 7000                       		moveq	#0,d0
0000E5A4                            
0000E5A4                            locret_DA8A:
0000E5A4 4E75                       		rts	
0000E5A6                            ; ---------------------------------------------------------------------------
0000E5A6                            ; Single object	loading	subroutine
0000E5A6                            ; ---------------------------------------------------------------------------
0000E5A6                            
0000E5A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E5A6                            
0000E5A6                            
0000E5A6                            SingleObjLoad:
0000E5A6 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E5AA 303C 005F                  		move.w	#$5F,d0
0000E5AE                            
0000E5AE                            loc_DA94:
0000E5AE 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E5B0 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E5B2 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E5B6 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E5BA                            
0000E5BA                            locret_DAA0:
0000E5BA 4E75                       		rts	
0000E5BC                            ; End of function SingleObjLoad
0000E5BC                            
0000E5BC                            
0000E5BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E5BC                            
0000E5BC                            
0000E5BC                            SingleObjLoad2:
0000E5BC 2248                       		movea.l	a0,a1
0000E5BE 303C F000                  		move.w	#-$1000,d0
0000E5C2 9048                       		sub.w	a0,d0
0000E5C4 EC48                       		lsr.w	#6,d0
0000E5C6 5340                       		subq.w	#1,d0
0000E5C8 6500                       		bcs.s	locret_DABC
0000E5CA                            
0000E5CA                            loc_DAB0:
0000E5CA 4A11                       		tst.b	(a1)
0000E5CC 6700                       		beq.s	locret_DABC
0000E5CE 43E9 0040                  		lea	$40(a1),a1
0000E5D2 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E5D6                            
0000E5D6                            locret_DABC:
0000E5D6 4E75                       		rts	
0000E5D8                            ; End of function SingleObjLoad2
0000E5D8                            
0000E5D8                            ; ===========================================================================
0000E5D8                            ; ---------------------------------------------------------------------------
0000E5D8                            ; Object 41 - springs
0000E5D8                            ; ---------------------------------------------------------------------------
0000E5D8                            
0000E5D8                            Obj41:					; XREF: Obj_Index
0000E5D8 7000                       		moveq	#0,d0
0000E5DA 1028 0024                  		move.b	$24(a0),d0
0000E5DE 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E5E2 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E5E6 6100 FB28                  		bsr.w	DisplaySprite
0000E5EA 3028 0008                  		move.w	8(a0),d0
0000E5EE 0240 FF80                  		andi.w	#$FF80,d0
0000E5F2 3238 F700                  		move.w	($FFFFF700).w,d1
0000E5F6 0441 0080                  		subi.w	#$80,d1
0000E5FA 0241 FF80                  		andi.w	#$FF80,d1
0000E5FE 9041                       		sub.w	d1,d0
0000E600 0C40 0280                  		cmpi.w	#$280,d0
0000E604 6200 FB46                  		bhi.w	DeleteObject
0000E608 4E75                       		rts	
0000E60A                            ; ===========================================================================
0000E60A 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E60C 0000                       		dc.w Obj41_Up-Obj41_Index
0000E60E 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E610 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E612 0000                       		dc.w Obj41_LR-Obj41_Index
0000E614 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E616 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E618 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E61A 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E61C 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E61E                            
0000E61E F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E620 F600                       		dc.w -$A00		; power	of yellow spring
0000E622                            ; ===========================================================================
0000E622                            
0000E622                            Obj41_Main:				; XREF: Obj41_Index
0000E622 5428 0024                  		addq.b	#2,$24(a0)
0000E626 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E62E 317C 0523 0002             		move.w	#$523,2(a0)
0000E634 0028 0004 0001             		ori.b	#4,1(a0)
0000E63A 117C 0010 0019             		move.b	#$10,$19(a0)
0000E640 117C 0004 0018             		move.b	#4,$18(a0)
0000E646 1028 0028                  		move.b	$28(a0),d0
0000E64A 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E64E 6700                       		beq.s	loc_DB54	; if not, branch
0000E650 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E656 117C 0001 001C             		move.b	#1,$1C(a0)
0000E65C 117C 0003 001A             		move.b	#3,$1A(a0)
0000E662 317C 0533 0002             		move.w	#$533,2(a0)
0000E668 117C 0008 0019             		move.b	#8,$19(a0)
0000E66E                            
0000E66E                            loc_DB54:
0000E66E 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E672 6700                       		beq.s	loc_DB66	; if not, branch
0000E674 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E67A 08E8 0001 0022             		bset	#1,$22(a0)
0000E680                            
0000E680                            loc_DB66:
0000E680 0800 0001                  		btst	#1,d0
0000E684 6700                       		beq.s	loc_DB72
0000E686 08E8 0005 0002             		bset	#5,2(a0)
0000E68C                            
0000E68C                            loc_DB72:
0000E68C 0240 000F                  		andi.w	#$F,d0
0000E690 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E696 4E75                       		rts	
0000E698                            ; ===========================================================================
0000E698                            
0000E698                            Obj41_Up:				; XREF: Obj41_Index
0000E698 323C 001B                  		move.w	#$1B,d1
0000E69C 343C 0008                  		move.w	#8,d2
0000E6A0 363C 0010                  		move.w	#$10,d3
0000E6A4 3828 0008                  		move.w	8(a0),d4
0000E6A8 6100 0000                  		bsr.w	SolidObject
0000E6AC 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E6B0 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E6B2 4E75                       		rts	
0000E6B4                            ; ===========================================================================
0000E6B4                            
0000E6B4                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E6B4 5428 0024                  		addq.b	#2,$24(a0)
0000E6B8 5069 000C                  		addq.w	#8,$C(a1)
0000E6BC 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E6C2 08E9 0001 0022             		bset	#1,$22(a1)
0000E6C8 08A9 0003 0022             		bclr	#3,$22(a1)
0000E6CE 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E6D4 137C 0002 0024             		move.b	#2,$24(a1)
0000E6DA 08A8 0003 0022             		bclr	#3,$22(a0)
0000E6E0 4228 0025                  		clr.b	$25(a0)
0000E6E4 303C 00CC                  		move.w	#$CC,d0
0000E6E8 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play spring sound
0000E6EE                            
0000E6EE                            Obj41_AniUp:				; XREF: Obj41_Index
0000E6EE 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E6F4 6000 CB2C                  		bra.w	AnimateSprite
0000E6F8                            ; ===========================================================================
0000E6F8                            
0000E6F8                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E6F8 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E6FE 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E702 4E75                       		rts	
0000E704                            ; ===========================================================================
0000E704                            
0000E704                            Obj41_LR:				; XREF: Obj41_Index
0000E704 323C 0013                  		move.w	#$13,d1
0000E708 343C 000E                  		move.w	#$E,d2
0000E70C 363C 000F                  		move.w	#$F,d3
0000E710 3828 0008                  		move.w	8(a0),d4
0000E714 6100 0000                  		bsr.w	SolidObject
0000E718 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E71E 6600                       		bne.s	loc_DC0C
0000E720 117C 0008 0024             		move.b	#8,$24(a0)
0000E726                            
0000E726                            loc_DC0C:
0000E726 0828 0005 0022             		btst	#5,$22(a0)
0000E72C 6600                       		bne.s	Obj41_BounceLR
0000E72E 4E75                       		rts	
0000E730                            ; ===========================================================================
0000E730                            
0000E730                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E730 5428 0024                  		addq.b	#2,$24(a0)
0000E734 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E73A 5069 0008                  		addq.w	#8,8(a1)
0000E73E 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E744 6600                       		bne.s	loc_DC36	; if yes, branch
0000E746 0469 0010 0008             		subi.w	#$10,8(a1)
0000E74C 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E750                            
0000E750                            loc_DC36:
0000E750 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E756 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E75C 0869 0000 0022             		bchg	#0,$22(a1)
0000E762 0829 0002 0022             		btst	#2,$22(a1)
0000E768 6600                       		bne.s	loc_DC56
0000E76A 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E770                            
0000E770                            loc_DC56:
0000E770 08A8 0005 0022             		bclr	#5,$22(a0)
0000E776 08A9 0005 0022             		bclr	#5,$22(a1)
0000E77C 303C 00CC                  		move.w	#$CC,d0
0000E780 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play spring sound
0000E786                            
0000E786                            Obj41_AniLR:				; XREF: Obj41_Index
0000E786 4278 C904                  		clr.w	($FFFFC904).w	; clear screen delay counter
0000E78A 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E790 6000 CA90                  		bra.w	AnimateSprite
0000E794                            ; ===========================================================================
0000E794                            
0000E794                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E794 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E79A 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E79E 4E75                       		rts	
0000E7A0                            ; ===========================================================================
0000E7A0                            
0000E7A0                            Obj41_Dwn:				; XREF: Obj41_Index
0000E7A0 323C 001B                  		move.w	#$1B,d1
0000E7A4 343C 0008                  		move.w	#8,d2
0000E7A8 363C 0010                  		move.w	#$10,d3
0000E7AC 3828 0008                  		move.w	8(a0),d4
0000E7B0 6100 0000                  		bsr.w	SolidObject
0000E7B4 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E7BA 6600                       		bne.s	loc_DCA4
0000E7BC 117C 000E 0024             		move.b	#$E,$24(a0)
0000E7C2                            
0000E7C2                            loc_DCA4:
0000E7C2 4A28 0025                  		tst.b	$25(a0)
0000E7C6 6600                       		bne.s	locret_DCAE
0000E7C8 4A44                       		tst.w	d4
0000E7CA 6B00                       		bmi.s	Obj41_BounceDwn
0000E7CC                            
0000E7CC                            locret_DCAE:
0000E7CC 4E75                       		rts	
0000E7CE                            ; ===========================================================================
0000E7CE                            
0000E7CE                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E7CE 5428 0024                  		addq.b	#2,$24(a0)
0000E7D2 5169 000C                  		subq.w	#8,$C(a1)
0000E7D6 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E7DC 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E7E0 08E9 0001 0022             		bset	#1,$22(a1)
0000E7E6 08A9 0003 0022             		bclr	#3,$22(a1)
0000E7EC 137C 0002 0024             		move.b	#2,$24(a1)
0000E7F2 08A8 0003 0022             		bclr	#3,$22(a0)
0000E7F8 4228 0025                  		clr.b	$25(a0)
0000E7FC 303C 00CC                  		move.w	#$CC,d0
0000E800 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play spring sound
0000E806                            
0000E806                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E806 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E80C 6000 CA14                  		bra.w	AnimateSprite
0000E810                            ; ===========================================================================
0000E810                            
0000E810                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E810 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E816 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E81A 4E75                       		rts	
0000E81C                            ; ===========================================================================
0000E81C                            Ani_obj41:
0000E81C                            	include "_anim\obj41.asm"
0000E81C                            ; ---------------------------------------------------------------------------
0000E81C                            ; Animation script - springs
0000E81C                            ; ---------------------------------------------------------------------------
0000E81C 0000                       		dc.w byte_DD02-Ani_obj41
0000E81E 0000                       		dc.w byte_DD0E-Ani_obj41
0000E820 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E82C 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E838                            		even
0000E838                            		even
0000E838                            
0000E838                            ; ---------------------------------------------------------------------------
0000E838                            ; Sprite mappings - springs
0000E838                            ; ---------------------------------------------------------------------------
0000E838                            Map_obj41:
0000E838                            	include "_maps\obj41.asm"
0000E838                            ; ---------------------------------------------------------------------------
0000E838                            ; Sprite mappings - springs
0000E838                            ; ---------------------------------------------------------------------------
0000E838 0000                       		dc.w byte_DD26-Map_obj41
0000E83A 0000                       		dc.w byte_DD31-Map_obj41
0000E83C 0000                       		dc.w byte_DD37-Map_obj41
0000E83E 0000                       		dc.w byte_DD47-Map_obj41
0000E840 0000                       		dc.w byte_DD4D-Map_obj41
0000E842 0000                       		dc.w byte_DD53-Map_obj41
0000E844 02                         byte_DD26:	dc.b 2
0000E845 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E84A 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E84F 01                         byte_DD31:	dc.b 1
0000E850 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E855 03                         byte_DD37:	dc.b 3
0000E856 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E85B F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E860 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E865 01                         byte_DD47:	dc.b 1
0000E866 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E86B 01                         byte_DD4D:	dc.b 1
0000E86C F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E871 04                         byte_DD53:	dc.b 4
0000E872 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E877 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E87C F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E881 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E886                            		even
0000E886                            		even
0000E886                            
0000E886                            ; ===========================================================================
0000E886                            ; ---------------------------------------------------------------------------
0000E886                            ; Object 42 - Newtron enemy (GHZ)
0000E886                            ; ---------------------------------------------------------------------------
0000E886                            
0000E886                            Obj42:					; XREF: Obj_Index
0000E886 7000                       		moveq	#0,d0
0000E888 1028 0024                  		move.b	$24(a0),d0
0000E88C 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E890 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E894                            ; ===========================================================================
0000E894 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E896 0000                       		dc.w Obj42_Action-Obj42_Index
0000E898 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E89A                            ; ===========================================================================
0000E89A                            
0000E89A                            Obj42_Main:				; XREF: Obj42_Index
0000E89A 5428 0024                  		addq.b	#2,$24(a0)
0000E89E 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E8A6 317C 049B 0002             		move.w	#$49B,2(a0)
0000E8AC 117C 0004 0001             		move.b	#4,1(a0)
0000E8B2 117C 0004 0018             		move.b	#4,$18(a0)
0000E8B8 117C 0014 0019             		move.b	#$14,$19(a0)
0000E8BE 117C 0010 0016             		move.b	#$10,$16(a0)
0000E8C4 117C 0008 0017             		move.b	#8,$17(a0)
0000E8CA                            
0000E8CA                            Obj42_Action:				; XREF: Obj42_Index
0000E8CA 7000                       		moveq	#0,d0
0000E8CC 1028 0025                  		move.b	$25(a0),d0
0000E8D0 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E8D4 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E8D8 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E8DE 6100 C942                  		bsr.w	AnimateSprite
0000E8E2 6000 0000                  		bra.w	MarkObjGone
0000E8E6                            ; ===========================================================================
0000E8E6 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E8E8 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E8EA 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E8EC 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E8EE 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E8F0                            ; ===========================================================================
0000E8F0                            
0000E8F0                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E8F0 08E8 0000 0022             		bset	#0,$22(a0)
0000E8F6 3038 D008                  		move.w	($FFFFD008).w,d0
0000E8FA 9068 0008                  		sub.w	8(a0),d0
0000E8FE 6400                       		bcc.s	loc_DDEA
0000E900 4440                       		neg.w	d0
0000E902 08A8 0000 0022             		bclr	#0,$22(a0)
0000E908                            
0000E908                            loc_DDEA:
0000E908 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E90C 6400                       		bcc.s	locret_DE12	; if not, branch
0000E90E 5428 0025                  		addq.b	#2,$25(a0)
0000E912 117C 0001 001C             		move.b	#1,$1C(a0)
0000E918 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E91C 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E91E 317C 249B 0002             		move.w	#$249B,2(a0)
0000E924 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E92A 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E930                            
0000E930                            locret_DE12:
0000E930 4E75                       		rts	
0000E932                            ; ===========================================================================
0000E932                            
0000E932                            Obj42_Type00:				; XREF: Obj42_Index2
0000E932 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E938 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E93A 08E8 0000 0022             		bset	#0,$22(a0)
0000E940 3038 D008                  		move.w	($FFFFD008).w,d0
0000E944 9068 0008                  		sub.w	8(a0),d0
0000E948 6400                       		bcc.s	locret_DE32
0000E94A 08A8 0000 0022             		bclr	#0,$22(a0)
0000E950                            
0000E950                            locret_DE32:
0000E950 4E75                       		rts	
0000E952                            ; ===========================================================================
0000E952                            
0000E952                            Obj42_Fall:				; XREF: Obj42_Type00
0000E952 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E958 6600                       		bne.s	loc_DE42
0000E95A 117C 000C 0020             		move.b	#$C,$20(a0)
0000E960                            
0000E960                            loc_DE42:
0000E960 6100 F75C                  		bsr.w	ObjectFall
0000E964 6100 0000                  		bsr.w	ObjHitFloor
0000E968 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E96A 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E96C D368 000C                  		add.w	d1,$C(a0)
0000E970 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E976 5428 0025                  		addq.b	#2,$25(a0)
0000E97A 117C 0002 001C             		move.b	#2,$1C(a0)
0000E980 0828 0005 0002             		btst	#5,2(a0)
0000E986 6700                       		beq.s	Obj42_Move
0000E988 5228 001C                  		addq.b	#1,$1C(a0)
0000E98C                            
0000E98C                            Obj42_Move:
0000E98C 117C 000D 0020             		move.b	#$D,$20(a0)
0000E992 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E998 0828 0000 0022             		btst	#0,$22(a0)
0000E99E 6600                       		bne.s	locret_DE86
0000E9A0 4468 0010                  		neg.w	$10(a0)
0000E9A4                            
0000E9A4                            locret_DE86:
0000E9A4 4E75                       		rts	
0000E9A6                            ; ===========================================================================
0000E9A6                            
0000E9A6                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E9A6 6100 F742                  		bsr.w	SpeedToPos
0000E9AA 6100 0000                  		bsr.w	ObjHitFloor
0000E9AE 0C41 FFF8                  		cmpi.w	#-8,d1
0000E9B2 6D00                       		blt.s	loc_DEA2
0000E9B4 0C41 000C                  		cmpi.w	#$C,d1
0000E9B8 6C00                       		bge.s	loc_DEA2
0000E9BA D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E9BE 4E75                       		rts	
0000E9C0                            ; ===========================================================================
0000E9C0                            
0000E9C0                            loc_DEA2:
0000E9C0 5428 0025                  		addq.b	#2,$25(a0)
0000E9C4 4E75                       		rts	
0000E9C6                            ; ===========================================================================
0000E9C6                            
0000E9C6                            Obj42_Speed:				; XREF: Obj42_Index2
0000E9C6 6100 F722                  		bsr.w	SpeedToPos
0000E9CA 4E75                       		rts	
0000E9CC                            ; ===========================================================================
0000E9CC                            
0000E9CC                            Obj42_Type01:				; XREF: Obj42_Index2
0000E9CC 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E9D2 6600                       		bne.s	Obj42_FireMissile
0000E9D4 117C 000C 0020             		move.b	#$C,$20(a0)
0000E9DA                            
0000E9DA                            Obj42_FireMissile:
0000E9DA 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E9E0 6600                       		bne.s	locret_DF14
0000E9E2 4A28 0032                  		tst.b	$32(a0)
0000E9E6 6600                       		bne.s	locret_DF14
0000E9E8 117C 0001 0032             		move.b	#1,$32(a0)
0000E9EE 6100 FBB6                  		bsr.w	SingleObjLoad
0000E9F2 6600                       		bne.s	locret_DF14
0000E9F4 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E9F8 3368 0008 0008             		move.w	8(a0),8(a1)
0000E9FE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EA04 5169 000C                  		subq.w	#8,$C(a1)
0000EA08 337C 0200 0010             		move.w	#$200,$10(a1)
0000EA0E 303C 0014                  		move.w	#$14,d0
0000EA12 0828 0000 0022             		btst	#0,$22(a0)
0000EA18 6600                       		bne.s	loc_DF04
0000EA1A 4440                       		neg.w	d0
0000EA1C 4469 0010                  		neg.w	$10(a1)
0000EA20                            
0000EA20                            loc_DF04:
0000EA20 D169 0008                  		add.w	d0,8(a1)
0000EA24 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000EA2A 137C 0001 0028             		move.b	#1,$28(a1)
0000EA30                            
0000EA30                            locret_DF14:
0000EA30 4E75                       		rts	
0000EA32                            ; ===========================================================================
0000EA32                            
0000EA32                            Obj42_Delete:				; XREF: Obj42_Index
0000EA32 6000 F718                  		bra.w	DeleteObject
0000EA36                            ; ===========================================================================
0000EA36                            Ani_obj42:
0000EA36                            	include "_anim\obj42.asm"
0000EA36                            ; ---------------------------------------------------------------------------
0000EA36                            ; Animation script - Newtron enemy
0000EA36                            ; ---------------------------------------------------------------------------
0000EA36 0000                       		dc.w byte_DF24-Ani_obj42
0000EA38 0000                       		dc.w byte_DF28-Ani_obj42
0000EA3A 0000                       		dc.w byte_DF30-Ani_obj42
0000EA3C 0000                       		dc.w byte_DF34-Ani_obj42
0000EA3E 0000                       		dc.w byte_DF38-Ani_obj42
0000EA40 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000EA44 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000EA4C 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000EA50 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000EA54 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000EA5E                            		even
0000EA5E                            		even
0000EA5E                            
0000EA5E                            ; ---------------------------------------------------------------------------
0000EA5E                            ; Sprite mappings - Newtron enemy (GHZ)
0000EA5E                            ; ---------------------------------------------------------------------------
0000EA5E                            Map_obj42:
0000EA5E                            	include "_maps\obj42.asm"
0000EA5E                            ; ---------------------------------------------------------------------------
0000EA5E                            ; Sprite mappings - Newtron enemy (GHZ)
0000EA5E                            ; ---------------------------------------------------------------------------
0000EA5E 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000EA62 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000EA66 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000EA6A 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000EA6E 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000EA72 0000                       		dc.w byte_DFF8-Map_obj42
0000EA74 03                         byte_DF58:	dc.b 3
0000EA75 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000EA7A F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000EA7F FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000EA84 03                         byte_DF68:	dc.b 3
0000EA85 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000EA8A EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000EA8F FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000EA94 03                         byte_DF78:	dc.b 3
0000EA95 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000EA9A EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000EA9F FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000EAA4 04                         byte_DF88:	dc.b 4
0000EAA5 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000EAAA EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000EAAF FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000EAB4 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000EAB9 03                         byte_DF9D:	dc.b 3
0000EABA F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000EABF FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000EAC4 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000EAC9 02                         byte_DFAD:	dc.b 2
0000EACA F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EACF F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EAD4 03                         byte_DFB8:	dc.b 3
0000EAD5 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EADA F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EADF FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000EAE4 03                         byte_DFC8:	dc.b 3
0000EAE5 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EAEA F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EAEF FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000EAF4 03                         byte_DFD8:	dc.b 3
0000EAF5 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EAFA F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EAFF FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000EB04 03                         byte_DFE8:	dc.b 3
0000EB05 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EB0A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EB0F FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000EB14 00                         byte_DFF8:	dc.b 0
0000EB16 00                         		even
0000EB16 00                         		even
0000EB16                            
0000EB16                            ; ===========================================================================
0000EB16                            ; ---------------------------------------------------------------------------
0000EB16                            ; Object 43 - Roller enemy (SYZ)
0000EB16                            ; ---------------------------------------------------------------------------
0000EB16                            
0000EB16                            Obj43:					; XREF: Obj_Index
0000EB16 7000                       		moveq	#0,d0
0000EB18 1028 0024                  		move.b	$24(a0),d0
0000EB1C 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000EB20 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000EB24                            ; ===========================================================================
0000EB24 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000EB26 0000                       		dc.w Obj43_Action-Obj43_Index
0000EB28                            ; ===========================================================================
0000EB28                            
0000EB28                            Obj43_Main:				; XREF: Obj43_Index
0000EB28 117C 000E 0016             		move.b	#$E,$16(a0)
0000EB2E 117C 0008 0017             		move.b	#8,$17(a0)
0000EB34 6100 F588                  		bsr.w	ObjectFall
0000EB38 6100 0000                  		bsr.w	ObjHitFloor
0000EB3C 4A41                       		tst.w	d1
0000EB3E 6A00                       		bpl.s	locret_E052
0000EB40 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000EB44 317C 0000 0012             		move.w	#0,$12(a0)
0000EB4A 5428 0024                  		addq.b	#2,$24(a0)
0000EB4E 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000EB56 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000EB5C 117C 0004 0001             		move.b	#4,1(a0)
0000EB62 117C 0004 0018             		move.b	#4,$18(a0)
0000EB68 117C 0010 0019             		move.b	#$10,$19(a0)
0000EB6E                            
0000EB6E                            locret_E052:
0000EB6E 4E75                       		rts	
0000EB70                            ; ===========================================================================
0000EB70                            
0000EB70                            Obj43_Action:				; XREF: Obj43_Index
0000EB70 7000                       		moveq	#0,d0
0000EB72 1028 0025                  		move.b	$25(a0),d0
0000EB76 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000EB7A 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000EB7E 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000EB84 6100 C69C                  		bsr.w	AnimateSprite
0000EB88 3028 0008                  		move.w	8(a0),d0
0000EB8C 0240 FF80                  		andi.w	#$FF80,d0
0000EB90 3238 F700                  		move.w	($FFFFF700).w,d1
0000EB94 0441 0080                  		subi.w	#$80,d1
0000EB98 0241 FF80                  		andi.w	#$FF80,d1
0000EB9C 9041                       		sub.w	d1,d0
0000EB9E 0C40 0280                  		cmpi.w	#$280,d0
0000EBA2 6E00 0000                  		bgt.w	Obj43_ChkGone
0000EBA6 6000 F568                  		bra.w	DisplaySprite
0000EBAA                            ; ===========================================================================
0000EBAA                            
0000EBAA                            Obj43_ChkGone:				; XREF: Obj43_Action
0000EBAA 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EBAE 7000                       		moveq	#0,d0
0000EBB0 1028 0023                  		move.b	$23(a0),d0
0000EBB4 6700                       		beq.s	Obj43_Delete
0000EBB6 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000EBBC                            
0000EBBC                            Obj43_Delete:
0000EBBC 6000 F58E                  		bra.w	DeleteObject
0000EBC0                            ; ===========================================================================
0000EBC0 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000EBC2 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000EBC4 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000EBC6 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000EBC8                            ; ===========================================================================
0000EBC8                            
0000EBC8                            Obj43_RollChk:				; XREF: Obj43_Index2
0000EBC8 3038 D008                  		move.w	($FFFFD008).w,d0
0000EBCC 0440 0100                  		subi.w	#$100,d0
0000EBD0 6500                       		bcs.s	loc_E0D2
0000EBD2 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000EBD6 6500                       		bcs.s	loc_E0D2
0000EBD8 5828 0025                  		addq.b	#4,$25(a0)
0000EBDC 117C 0002 001C             		move.b	#2,$1C(a0)
0000EBE2 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000EBE8 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000EBEE                            
0000EBEE                            loc_E0D2:
0000EBEE 588F                       		addq.l	#4,sp
0000EBF0 4E75                       		rts	
0000EBF2                            ; ===========================================================================
0000EBF2                            
0000EBF2                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000EBF2 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000EBF8 6700                       		beq.s	loc_E0F8
0000EBFA 5368 0030                  		subq.w	#1,$30(a0)
0000EBFE 6A00                       		bpl.s	locret_E0F6
0000EC00 117C 0001 001C             		move.b	#1,$1C(a0)
0000EC06 317C 0700 0010             		move.w	#$700,$10(a0)
0000EC0C 117C 008E 0020             		move.b	#$8E,$20(a0)
0000EC12                            
0000EC12                            locret_E0F6:
0000EC12 4E75                       		rts	
0000EC14                            ; ===========================================================================
0000EC14                            
0000EC14                            loc_E0F8:
0000EC14 5428 0025                  		addq.b	#2,$25(a0)
0000EC18 4E75                       		rts	
0000EC1A                            ; ===========================================================================
0000EC1A                            
0000EC1A                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000EC1A 6100 0000                  		bsr.w	Obj43_Stop
0000EC1E 6100 F4CA                  		bsr.w	SpeedToPos
0000EC22 6100 0000                  		bsr.w	ObjHitFloor
0000EC26 0C41 FFF8                  		cmpi.w	#-8,d1
0000EC2A 6D00                       		blt.s	Obj43_Jump
0000EC2C 0C41 000C                  		cmpi.w	#$C,d1
0000EC30 6C00                       		bge.s	Obj43_Jump
0000EC32 D368 000C                  		add.w	d1,$C(a0)
0000EC36 4E75                       		rts	
0000EC38                            ; ===========================================================================
0000EC38                            
0000EC38                            Obj43_Jump:
0000EC38 5428 0025                  		addq.b	#2,$25(a0)
0000EC3C 08E8 0000 0032             		bset	#0,$32(a0)
0000EC42 6700                       		beq.s	locret_E12E
0000EC44 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000EC4A                            
0000EC4A                            locret_E12E:
0000EC4A 4E75                       		rts	
0000EC4C                            ; ===========================================================================
0000EC4C                            
0000EC4C                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000EC4C 6100 F470                  		bsr.w	ObjectFall
0000EC50 4A68 0012                  		tst.w	$12(a0)
0000EC54 6B00                       		bmi.s	locret_E150
0000EC56 6100 0000                  		bsr.w	ObjHitFloor
0000EC5A 4A41                       		tst.w	d1
0000EC5C 6A00                       		bpl.s	locret_E150
0000EC5E D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000EC62 5528 0025                  		subq.b	#2,$25(a0)
0000EC66 317C 0000 0012             		move.w	#0,$12(a0)
0000EC6C                            
0000EC6C                            locret_E150:
0000EC6C 4E75                       		rts	
0000EC6E                            
0000EC6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EC6E                            
0000EC6E                            
0000EC6E                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000EC6E 4A28 0032                  		tst.b	$32(a0)
0000EC72 6B00                       		bmi.s	locret_E188
0000EC74 3038 D008                  		move.w	($FFFFD008).w,d0
0000EC78 0440 0030                  		subi.w	#$30,d0
0000EC7C 9068 0008                  		sub.w	8(a0),d0
0000EC80 6400                       		bcc.s	locret_E188
0000EC82 117C 0000 001C             		move.b	#0,$1C(a0)
0000EC88 117C 000E 0020             		move.b	#$E,$20(a0)
0000EC8E 4268 0010                  		clr.w	$10(a0)
0000EC92 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000EC98 117C 0002 0025             		move.b	#2,$25(a0)
0000EC9E 08E8 0007 0032             		bset	#7,$32(a0)
0000ECA4                            
0000ECA4                            locret_E188:
0000ECA4 4E75                       		rts	
0000ECA6                            ; End of function Obj43_Stop
0000ECA6                            
0000ECA6                            ; ===========================================================================
0000ECA6                            Ani_obj43:
0000ECA6                            	include "_anim\obj43.asm"
0000ECA6                            ; ---------------------------------------------------------------------------
0000ECA6                            ; Animation script - Roller enemy
0000ECA6                            ; ---------------------------------------------------------------------------
0000ECA6 0000                       		dc.w byte_E190-Ani_obj43
0000ECA8 0000                       		dc.w byte_E196-Ani_obj43
0000ECAA 0000                       		dc.w byte_E19C-Ani_obj43
0000ECAC 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000ECB2 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000ECB8 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000ECBE 00                         		even
0000ECBE 00                         		even
0000ECBE                            
0000ECBE                            ; ---------------------------------------------------------------------------
0000ECBE                            ; Sprite mappings - Roller enemy (SYZ)
0000ECBE                            ; ---------------------------------------------------------------------------
0000ECBE                            Map_obj43:
0000ECBE                            	include "_maps\obj43.asm"
0000ECBE                            ; ---------------------------------------------------------------------------
0000ECBE                            ; Sprite mappings - Roller enemy (SYZ)
0000ECBE                            ; ---------------------------------------------------------------------------
0000ECBE 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0000ECC2 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0000ECC6 0000                       		dc.w byte_E1CE-Map_obj43
0000ECC8 02                         byte_E1AC:	dc.b 2
0000ECC9 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0000ECCE F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000ECD3 02                         byte_E1B7:	dc.b 2
0000ECD4 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0000ECD9 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000ECDE 01                         byte_E1C2:	dc.b 1
0000ECDF F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0000ECE4 01                         byte_E1C8:	dc.b 1
0000ECE5 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0000ECEA 01                         byte_E1CE:	dc.b 1
0000ECEB F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000ECF0                            		even
0000ECF0                            		even
0000ECF0                            
0000ECF0                            ; ===========================================================================
0000ECF0                            ; ---------------------------------------------------------------------------
0000ECF0                            ; Object 44 - walls (GHZ)
0000ECF0                            ; ---------------------------------------------------------------------------
0000ECF0                            
0000ECF0                            Obj44:					; XREF: Obj_Index
0000ECF0 7000                       		moveq	#0,d0
0000ECF2 1028 0024                  		move.b	$24(a0),d0
0000ECF6 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000ECFA 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000ECFE                            ; ===========================================================================
0000ECFE 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000ED00 0000                       		dc.w Obj44_Solid-Obj44_Index
0000ED02 0000                       		dc.w Obj44_Display-Obj44_Index
0000ED04                            ; ===========================================================================
0000ED04                            
0000ED04                            Obj44_Main:				; XREF: Obj44_Index
0000ED04 5428 0024                  		addq.b	#2,$24(a0)
0000ED08 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000ED10 317C 434C 0002             		move.w	#$434C,2(a0)
0000ED16 0028 0004 0001             		ori.b	#4,1(a0)
0000ED1C 117C 0008 0019             		move.b	#8,$19(a0)
0000ED22 117C 0006 0018             		move.b	#6,$18(a0)
0000ED28 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000ED2E 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000ED34 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000ED36 5428 0024                  		addq.b	#2,$24(a0)
0000ED3A 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000ED3C                            ; ===========================================================================
0000ED3C                            
0000ED3C                            Obj44_Solid:				; XREF: Obj44_Index
0000ED3C 323C 0013                  		move.w	#$13,d1
0000ED40 343C 0028                  		move.w	#$28,d2
0000ED44 6100 A7C6                  		bsr.w	Obj44_SolidWall
0000ED48                            
0000ED48                            Obj44_Display:				; XREF: Obj44_Index
0000ED48 6100 F3C6                  		bsr.w	DisplaySprite
0000ED4C 3028 0008                  		move.w	8(a0),d0
0000ED50 0240 FF80                  		andi.w	#$FF80,d0
0000ED54 3238 F700                  		move.w	($FFFFF700).w,d1
0000ED58 0441 0080                  		subi.w	#$80,d1
0000ED5C 0241 FF80                  		andi.w	#$FF80,d1
0000ED60 9041                       		sub.w	d1,d0
0000ED62 0C40 0280                  		cmpi.w	#$280,d0
0000ED66 6200 F3E4                  		bhi.w	DeleteObject
0000ED6A 4E75                       		rts	
0000ED6C                            ; ===========================================================================
0000ED6C                            ; ---------------------------------------------------------------------------
0000ED6C                            ; Sprite mappings - walls (GHZ)
0000ED6C                            ; ---------------------------------------------------------------------------
0000ED6C                            Map_obj44:
0000ED6C                            	include "_maps\obj44.asm"
0000ED6C                            ; ---------------------------------------------------------------------------
0000ED6C                            ; Sprite mappings - walls (GHZ)
0000ED6C                            ; ---------------------------------------------------------------------------
0000ED6C 0000                       		dc.w byte_E256-Map_obj44
0000ED6E 0000                       		dc.w byte_E26B-Map_obj44
0000ED70 0000                       		dc.w byte_E280-Map_obj44
0000ED72 04                         byte_E256:	dc.b 4
0000ED73 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000ED78 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000ED7D 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000ED82 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000ED87 04                         byte_E26B:	dc.b 4
0000ED88 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000ED8D F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000ED92 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000ED97 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000ED9C 04                         byte_E280:	dc.b 4
0000ED9D E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000EDA2 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000EDA7 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000EDAC 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000EDB2 00                         		even
0000EDB2 00                         		even
0000EDB2                            
0000EDB2                            ; ===========================================================================
0000EDB2                            ; ---------------------------------------------------------------------------
0000EDB2                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000EDB2                            ; ---------------------------------------------------------------------------
0000EDB2                            
0000EDB2                            Obj13:					; XREF: Obj_Index
0000EDB2 7000                       		moveq	#0,d0
0000EDB4 1028 0024                  		move.b	$24(a0),d0
0000EDB8 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000EDBC 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000EDC0 6000 0000                  		bra.w	Obj14_ChkDel
0000EDC4                            ; ===========================================================================
0000EDC4 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000EDC6 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000EDC8                            ; ---------------------------------------------------------------------------
0000EDC8                            ;
0000EDC8                            ; Lava ball production rates
0000EDC8                            ;
0000EDC8 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000EDCE                            ; ===========================================================================
0000EDCE                            
0000EDCE                            Obj13_Main:				; XREF: Obj13_Index
0000EDCE 5428 0024                  		addq.b	#2,$24(a0)
0000EDD2 1028 0028                  		move.b	$28(a0),d0
0000EDD6 E848                       		lsr.w	#4,d0
0000EDD8 0240 000F                  		andi.w	#$F,d0
0000EDDC 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000EDE2 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000EDE8 0228 000F 0028             		andi.b	#$F,$28(a0)
0000EDEE                            
0000EDEE                            Obj13_MakeLava:				; XREF: Obj13_Index
0000EDEE 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000EDF2 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000EDF4 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000EDFA 6100 F590                  		bsr.w	ChkObjOnScreen
0000EDFE 6600                       		bne.s	locret_E302
0000EE00 6100 F7A4                  		bsr.w	SingleObjLoad
0000EE04 6600                       		bne.s	locret_E302
0000EE06 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000EE0A 3368 0008 0008             		move.w	8(a0),8(a1)
0000EE10 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EE16 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EE1C                            
0000EE1C                            locret_E302:
0000EE1C 4E75                       		rts	
0000EE1E                            ; ===========================================================================
0000EE1E                            ; ---------------------------------------------------------------------------
0000EE1E                            ; Object 14 - lava balls (MZ, SLZ)
0000EE1E                            ; ---------------------------------------------------------------------------
0000EE1E                            
0000EE1E                            Obj14:					; XREF: Obj_Index
0000EE1E 7000                       		moveq	#0,d0
0000EE20 1028 0024                  		move.b	$24(a0),d0
0000EE24 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000EE28 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000EE2C 6000 F2E2                  		bra.w	DisplaySprite
0000EE30                            ; ===========================================================================
0000EE30 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000EE32 0000                       		dc.w Obj14_Action-Obj14_Index
0000EE34 0000                       		dc.w Obj14_Delete-Obj14_Index
0000EE36                            
0000EE36 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000EE40 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000EE48                            ; ===========================================================================
0000EE48                            
0000EE48                            Obj14_Main:				; XREF: Obj14_Index
0000EE48 5428 0024                  		addq.b	#2,$24(a0)
0000EE4C 117C 0008 0016             		move.b	#8,$16(a0)
0000EE52 117C 0008 0017             		move.b	#8,$17(a0)
0000EE58 217C 0000 BE7A 0004        		move.l	#Map_obj14,4(a0)
0000EE60 317C 0345 0002             		move.w	#$345,2(a0)
0000EE66 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000EE6C 6600                       		bne.s	loc_E35A
0000EE6E 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000EE74                            
0000EE74                            loc_E35A:
0000EE74 117C 0004 0001             		move.b	#4,1(a0)
0000EE7A 117C 0003 0018             		move.b	#3,$18(a0)
0000EE80 117C 008B 0020             		move.b	#$8B,$20(a0)
0000EE86 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EE8C 4A28 0029                  		tst.b	$29(a0)
0000EE90 6700                       		beq.s	Obj14_SetSpeed
0000EE92 5428 0018                  		addq.b	#2,$18(a0)
0000EE96                            
0000EE96                            Obj14_SetSpeed:
0000EE96 7000                       		moveq	#0,d0
0000EE98 1028 0028                  		move.b	$28(a0),d0
0000EE9C D040                       		add.w	d0,d0
0000EE9E 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000EEA4 117C 0008 0019             		move.b	#8,$19(a0)
0000EEAA 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000EEB0 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000EEB2 117C 0010 0019             		move.b	#$10,$19(a0)
0000EEB8 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000EEBE 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000EEC4 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000EECA                            
0000EECA                            Obj14_PlaySnd:
0000EECA 303C 00AE                  		move.w	#$AE,d0
0000EECE 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000EED4                            
0000EED4                            Obj14_Action:				; XREF: Obj14_Index
0000EED4 7000                       		moveq	#0,d0
0000EED6 1028 0028                  		move.b	$28(a0),d0
0000EEDA D040                       		add.w	d0,d0
0000EEDC 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000EEE0 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000EEE4 6100 F204                  		bsr.w	SpeedToPos
0000EEE8 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000EEEE 6100 C332                  		bsr.w	AnimateSprite
0000EEF2                            
0000EEF2                            Obj14_ChkDel:				; XREF: Obj13
0000EEF2 3028 0008                  		move.w	8(a0),d0
0000EEF6 0240 FF80                  		andi.w	#$FF80,d0
0000EEFA 3238 F700                  		move.w	($FFFFF700).w,d1
0000EEFE 0441 0080                  		subi.w	#$80,d1
0000EF02 0241 FF80                  		andi.w	#$FF80,d1
0000EF06 9041                       		sub.w	d1,d0
0000EF08 0C40 0280                  		cmpi.w	#$280,d0
0000EF0C 6200 F23E                  		bhi.w	DeleteObject
0000EF10 4E75                       		rts	
0000EF12                            ; ===========================================================================
0000EF12 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EF16 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EF1A 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000EF1E 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000EF22 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000EF24                            ; ===========================================================================
0000EF24                            ; lavaball types 00-03 fly up and fall back down
0000EF24                            
0000EF24                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000EF24 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000EF2A 3028 0030                  		move.w	$30(a0),d0
0000EF2E B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000EF32 6400                       		bcc.s	loc_E41E	; if not, branch
0000EF34 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000EF38                            
0000EF38                            loc_E41E:
0000EF38 08A8 0001 0022             		bclr	#1,$22(a0)
0000EF3E 4A68 0012                  		tst.w	$12(a0)
0000EF42 6A00                       		bpl.s	locret_E430
0000EF44 08E8 0001 0022             		bset	#1,$22(a0)
0000EF4A                            
0000EF4A                            locret_E430:
0000EF4A 4E75                       		rts	
0000EF4C                            ; ===========================================================================
0000EF4C                            ; lavaball type	04 flies up until it hits the ceiling
0000EF4C                            
0000EF4C                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000EF4C 08E8 0001 0022             		bset	#1,$22(a0)
0000EF52 6100 0000                  		bsr.w	ObjHitCeiling
0000EF56 4A41                       		tst.w	d1
0000EF58 6A00                       		bpl.s	locret_E452
0000EF5A 117C 0008 0028             		move.b	#8,$28(a0)
0000EF60 117C 0001 001C             		move.b	#1,$1C(a0)
0000EF66 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000EF6C                            
0000EF6C                            locret_E452:
0000EF6C 4E75                       		rts	
0000EF6E                            ; ===========================================================================
0000EF6E                            ; lavaball type	05 falls down until it hits the	floor
0000EF6E                            
0000EF6E                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000EF6E 08A8 0001 0022             		bclr	#1,$22(a0)
0000EF74 6100 0000                  		bsr.w	ObjHitFloor
0000EF78 4A41                       		tst.w	d1
0000EF7A 6A00                       		bpl.s	locret_E474
0000EF7C 117C 0008 0028             		move.b	#8,$28(a0)
0000EF82 117C 0001 001C             		move.b	#1,$1C(a0)
0000EF88 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000EF8E                            
0000EF8E                            locret_E474:
0000EF8E 4E75                       		rts	
0000EF90                            ; ===========================================================================
0000EF90                            ; lavaball types 06-07 move sideways
0000EF90                            
0000EF90                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000EF90 08E8 0000 0022             		bset	#0,$22(a0)
0000EF96 76F8                       		moveq	#-8,d3
0000EF98 6100 0000                  		bsr.w	ObjHitWallLeft
0000EF9C 4A41                       		tst.w	d1
0000EF9E 6A00                       		bpl.s	locret_E498
0000EFA0 117C 0008 0028             		move.b	#8,$28(a0)
0000EFA6 117C 0003 001C             		move.b	#3,$1C(a0)
0000EFAC 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EFB2                            
0000EFB2                            locret_E498:
0000EFB2 4E75                       		rts	
0000EFB4                            ; ===========================================================================
0000EFB4                            
0000EFB4                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000EFB4 08A8 0000 0022             		bclr	#0,$22(a0)
0000EFBA 7608                       		moveq	#8,d3
0000EFBC 6100 0000                  		bsr.w	ObjHitWallRight
0000EFC0 4A41                       		tst.w	d1
0000EFC2 6A00                       		bpl.s	locret_E4BC
0000EFC4 117C 0008 0028             		move.b	#8,$28(a0)
0000EFCA 117C 0003 001C             		move.b	#3,$1C(a0)
0000EFD0 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EFD6                            
0000EFD6                            locret_E4BC:
0000EFD6 4E75                       		rts	
0000EFD8                            ; ===========================================================================
0000EFD8                            
0000EFD8                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000EFD8 4E75                       		rts	
0000EFDA                            ; ===========================================================================
0000EFDA                            
0000EFDA                            Obj14_Delete:				; XREF: Obj14_Index
0000EFDA 6000 F170                  		bra.w	DeleteObject
0000EFDE                            ; ===========================================================================
0000EFDE                            Ani_obj14:
0000EFDE                            	include "_anim\obj14.asm"
0000EFDE                            ; ---------------------------------------------------------------------------
0000EFDE                            ; Animation script - lava balls
0000EFDE                            ; ---------------------------------------------------------------------------
0000EFDE 0000                       		dc.w byte_E4CC-Ani_obj14
0000EFE0 0000                       		dc.w byte_E4D2-Ani_obj14
0000EFE2 0000                       		dc.w byte_E4D6-Ani_obj14
0000EFE4 0000                       		dc.w byte_E4DC-Ani_obj14
0000EFE6 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000EFEC 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000EFF0 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000EFF6 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000EFFA                            		even
0000EFFA                            		even
0000EFFA                            
0000EFFA                            ; ===========================================================================
0000EFFA                            ; ---------------------------------------------------------------------------
0000EFFA                            ; Object 6D - flame thrower (SBZ)
0000EFFA                            ; ---------------------------------------------------------------------------
0000EFFA                            
0000EFFA                            Obj6D:					; XREF: Obj_Index
0000EFFA 7000                       		moveq	#0,d0
0000EFFC 1028 0024                  		move.b	$24(a0),d0
0000F000 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000F004 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000F008                            ; ===========================================================================
0000F008 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000F00A 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000F00C                            ; ===========================================================================
0000F00C                            
0000F00C                            Obj6D_Main:				; XREF: Obj6D_Index
0000F00C 5428 0024                  		addq.b	#2,$24(a0)
0000F010 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000F018 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000F01E 0028 0004 0001             		ori.b	#4,1(a0)
0000F024 117C 0001 0018             		move.b	#1,$18(a0)
0000F02A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F030 117C 000C 0019             		move.b	#$C,$19(a0)
0000F036 1028 0028                  		move.b	$28(a0),d0
0000F03A 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000F03E D040                       		add.w	d0,d0		; multiply by 2
0000F040 3140 0030                  		move.w	d0,$30(a0)
0000F044 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000F048 1028 0028                  		move.b	$28(a0),d0
0000F04C 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000F050 EB48                       		lsl.w	#5,d0		; multiply by $20
0000F052 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000F056 117C 000A 0036             		move.b	#$A,$36(a0)
0000F05C 0828 0001 0022             		btst	#1,$22(a0)
0000F062 6700                       		beq.s	Obj6D_Action
0000F064 117C 0002 001C             		move.b	#2,$1C(a0)
0000F06A 117C 0015 0036             		move.b	#$15,$36(a0)
0000F070                            
0000F070                            Obj6D_Action:				; XREF: Obj6D_Index
0000F070 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000F074 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000F076 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000F07C 0868 0000 001C             		bchg	#0,$1C(a0)
0000F082 6700                       		beq.s	loc_E57A
0000F084 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000F08A 303C 00B3                  		move.w	#$B3,d0
0000F08E 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play flame sound
0000F094                            
0000F094                            loc_E57A:
0000F094 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000F09A 6100 C186                  		bsr.w	AnimateSprite
0000F09E 117C 0000 0020             		move.b	#0,$20(a0)
0000F0A4 1028 0036                  		move.b	$36(a0),d0
0000F0A8 B028 001A                  		cmp.b	$1A(a0),d0
0000F0AC 6600                       		bne.s	Obj6D_ChkDel
0000F0AE 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000F0B4                            
0000F0B4                            Obj6D_ChkDel:
0000F0B4 3028 0008                  		move.w	8(a0),d0
0000F0B8 0240 FF80                  		andi.w	#$FF80,d0
0000F0BC 3238 F700                  		move.w	($FFFFF700).w,d1
0000F0C0 0441 0080                  		subi.w	#$80,d1
0000F0C4 0241 FF80                  		andi.w	#$FF80,d1
0000F0C8 9041                       		sub.w	d1,d0
0000F0CA 0C40 0280                  		cmpi.w	#$280,d0
0000F0CE 6200 F07C                  		bhi.w	DeleteObject
0000F0D2 6000 F03C                  		bra.w	DisplaySprite
0000F0D6                            ; ===========================================================================
0000F0D6                            Ani_obj6D:
0000F0D6                            	include "_anim\obj6D.asm"
0000F0D6                            ; ---------------------------------------------------------------------------
0000F0D6                            ; Animation script - flamethrower (SBZ)
0000F0D6                            ; ---------------------------------------------------------------------------
0000F0D6 0000                       		dc.w byte_E5C4-Ani_obj6D
0000F0D8 0000                       		dc.w byte_E5D2-Ani_obj6D
0000F0DA 0000                       		dc.w byte_E5DC-Ani_obj6D
0000F0DC 0000                       		dc.w byte_E5EA-Ani_obj6D
0000F0DE 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000F0EC 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000F0F6 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000F104 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000F10E                            		even
0000F10E                            		even
0000F10E                            
0000F10E                            ; ---------------------------------------------------------------------------
0000F10E                            ; Sprite mappings - flame thrower (SBZ)
0000F10E                            ; ---------------------------------------------------------------------------
0000F10E                            Map_obj6D:
0000F10E                            	include "_maps\obj6D.asm"
0000F10E                            ; ---------------------------------------------------------------------------
0000F10E                            ; Sprite mappings - flame thrower (SBZ)
0000F10E                            ; ---------------------------------------------------------------------------
0000F10E 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000F112 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000F116 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000F11A 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000F11E 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000F122 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000F126 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000F12A 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000F12E 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000F132 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000F136 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000F13A 01                         byte_E620:	dc.b 1
0000F13B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F140 02                         byte_E626:	dc.b 2
0000F141 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F146 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F14B 02                         byte_E631:	dc.b 2
0000F14C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F151 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F156 03                         byte_E63C:	dc.b 3
0000F157 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F15C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F161 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F166 03                         byte_E64C:	dc.b 3
0000F167 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F16C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F171 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F176 04                         byte_E65C:	dc.b 4
0000F177 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F17C 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F181 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F186 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F18B 04                         byte_E671:	dc.b 4
0000F18C 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F191 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F196 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F19B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F1A0 05                         byte_E686:	dc.b 5
0000F1A1 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F1A6 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F1AB 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F1B0 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F1B5 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F1BA 05                         byte_E6A0:	dc.b 5
0000F1BB F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F1C0 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F1C5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F1CA 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F1CF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F1D4 06                         byte_E6BA:	dc.b 6
0000F1D5 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F1DA F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F1DF 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F1E4 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F1E9 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F1EE 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F1F3 06                         byte_E6D9:	dc.b 6
0000F1F4 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F1F9 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F1FE 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F203 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F208 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F20D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F212 01                         byte_E6F8:	dc.b 1
0000F213 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F218 02                         byte_E6FE:	dc.b 2
0000F219 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F21E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F223 02                         byte_E709:	dc.b 2
0000F224 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F229 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F22E 03                         byte_E714:	dc.b 3
0000F22F 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F234 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F239 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F23E 03                         byte_E724:	dc.b 3
0000F23F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F244 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F249 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F24E 04                         byte_E734:	dc.b 4
0000F24F 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F254 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F259 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F25E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F263 04                         byte_E749:	dc.b 4
0000F264 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F269 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F26E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F273 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F278 05                         byte_E75E:	dc.b 5
0000F279 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F27E 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F283 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F288 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F28D 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F292 05                         byte_E778:	dc.b 5
0000F293 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F298 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F29D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F2A2 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F2A7 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F2AC 06                         byte_E792:	dc.b 6
0000F2AD E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F2B2 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F2B7 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F2BC 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F2C1 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F2C6 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F2CB 06                         byte_E7B1:	dc.b 6
0000F2CC E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F2D1 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F2D6 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F2DB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F2E0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F2E5 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F2EA                            		even
0000F2EA                            		even
0000F2EA                            
0000F2EA                            ; ===========================================================================
0000F2EA                            ; ---------------------------------------------------------------------------
0000F2EA                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000F2EA                            ; ---------------------------------------------------------------------------
0000F2EA                            
0000F2EA                            Obj46:					; XREF: Obj_Index
0000F2EA 7000                       		moveq	#0,d0
0000F2EC 1028 0024                  		move.b	$24(a0),d0
0000F2F0 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000F2F4 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000F2F8                            ; ===========================================================================
0000F2F8 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000F2FA 0000                       		dc.w Obj46_Action-Obj46_Index
0000F2FC                            ; ===========================================================================
0000F2FC                            
0000F2FC                            Obj46_Main:				; XREF: Obj46_Index
0000F2FC 5428 0024                  		addq.b	#2,$24(a0)
0000F300 117C 000F 0016             		move.b	#$F,$16(a0)
0000F306 117C 000F 0017             		move.b	#$F,$17(a0)
0000F30C 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000F314 317C 4000 0002             		move.w	#$4000,2(a0)
0000F31A 117C 0004 0001             		move.b	#4,1(a0)
0000F320 117C 0003 0018             		move.b	#3,$18(a0)
0000F326 117C 0010 0019             		move.b	#$10,$19(a0)
0000F32C 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F332 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000F338                            
0000F338                            Obj46_Action:				; XREF: Obj46_Index
0000F338 4A28 0001                  		tst.b	1(a0)
0000F33C 6A00                       		bpl.s	Obj46_ChkDel
0000F33E 7000                       		moveq	#0,d0
0000F340 1028 0028                  		move.b	$28(a0),d0	; get object type
0000F344 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000F348 D040                       		add.w	d0,d0
0000F34A 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000F34E 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000F352 323C 001B                  		move.w	#$1B,d1
0000F356 343C 0010                  		move.w	#$10,d2
0000F35A 363C 0011                  		move.w	#$11,d3
0000F35E 3828 0008                  		move.w	8(a0),d4
0000F362 6100 0000                  		bsr.w	SolidObject
0000F366                            
0000F366                            Obj46_ChkDel:
0000F366 6100 EDA8                  		bsr.w	DisplaySprite
0000F36A 3028 0008                  		move.w	8(a0),d0
0000F36E 0240 FF80                  		andi.w	#$FF80,d0
0000F372 3238 F700                  		move.w	($FFFFF700).w,d1
0000F376 0441 0080                  		subi.w	#$80,d1
0000F37A 0241 FF80                  		andi.w	#$FF80,d1
0000F37E 9041                       		sub.w	d1,d0
0000F380 0C40 0280                  		cmpi.w	#$280,d0
0000F384 6200 EDC6                  		bhi.w	DeleteObject
0000F388 4E75                       		rts	
0000F38A                            ; ===========================================================================
0000F38A 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000F38C 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000F38E 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000F390 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000F392 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000F394                            ; ===========================================================================
0000F394                            
0000F394                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000F394 4E75                       		rts	
0000F396                            ; ===========================================================================
0000F396                            
0000F396                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000F396 3038 D008                  		move.w	($FFFFD008).w,d0
0000F39A 9068 0008                  		sub.w	8(a0),d0
0000F39E 6400                       		bcc.s	loc_E888
0000F3A0 4440                       		neg.w	d0
0000F3A2                            
0000F3A2                            loc_E888:
0000F3A2 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000F3A6 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000F3A8 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000F3AE                            
0000F3AE                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000F3AE 7000                       		moveq	#0,d0
0000F3B0 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000F3B4 0828 0003 0028             		btst	#3,$28(a0)
0000F3BA 6700                       		beq.s	loc_E8A8
0000F3BC 4440                       		neg.w	d0
0000F3BE 0640 0010                  		addi.w	#$10,d0
0000F3C2                            
0000F3C2                            loc_E8A8:
0000F3C2 3228 0030                  		move.w	$30(a0),d1
0000F3C6 9240                       		sub.w	d0,d1
0000F3C8 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000F3CC 4E75                       		rts	
0000F3CE                            ; ===========================================================================
0000F3CE                            
0000F3CE                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000F3CE 6100 ED1A                  		bsr.w	SpeedToPos
0000F3D2 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000F3D8 6100 0000                  		bsr.w	ObjHitFloor
0000F3DC 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000F3DE 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000F3E2 D368 000C                  		add.w	d1,$C(a0)
0000F3E6 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000F3EA 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F3F0 117C 0004 0028             		move.b	#4,$28(a0)
0000F3F6 3011                       		move.w	(a1),d0
0000F3F8 0240 03FF                  		andi.w	#$3FF,d0
0000F3FC 0C40 02E8                  		cmpi.w	#$2E8,d0
0000F400 6400                       		bcc.s	locret_E8EE
0000F402 117C 0000 0028             		move.b	#0,$28(a0)
0000F408                            
0000F408                            locret_E8EE:
0000F408 4E75                       		rts	
0000F40A                            ; ===========================================================================
0000F40A                            
0000F40A                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000F40A 7000                       		moveq	#0,d0
0000F40C 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000F410 E648                       		lsr.w	#3,d0
0000F412 3228 0030                  		move.w	$30(a0),d1
0000F416 9240                       		sub.w	d0,d1
0000F418 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000F41C 4E75                       		rts	
0000F41E                            ; ===========================================================================
0000F41E                            ; ---------------------------------------------------------------------------
0000F41E                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F41E                            ; ---------------------------------------------------------------------------
0000F41E                            Map_obj46:
0000F41E                            	include "_maps\obj46.asm"
0000F41E                            ; ---------------------------------------------------------------------------
0000F41E                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F41E                            ; ---------------------------------------------------------------------------
0000F41E 0000                       		dc.w byte_E906-Map_obj46
0000F420 01                         byte_E906:	dc.b 1
0000F421 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000F426                            		even
0000F426                            		even
0000F426                            
0000F426                            ; ===========================================================================
0000F426                            ; ---------------------------------------------------------------------------
0000F426                            ; Object 12 - lamp (SYZ)
0000F426                            ; ---------------------------------------------------------------------------
0000F426                            
0000F426                            Obj12:					; XREF: Obj_Index
0000F426 7000                       		moveq	#0,d0
0000F428 1028 0024                  		move.b	$24(a0),d0
0000F42C 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000F430 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000F434                            ; ===========================================================================
0000F434 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000F436 0000                       		dc.w Obj12_Animate-Obj12_Index
0000F438                            ; ===========================================================================
0000F438                            
0000F438                            Obj12_Main:				; XREF: Obj12_Index
0000F438 5428 0024                  		addq.b	#2,$24(a0)
0000F43C 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000F444 317C 0000 0002             		move.w	#0,2(a0)
0000F44A 117C 0004 0001             		move.b	#4,1(a0)
0000F450 117C 0010 0019             		move.b	#$10,$19(a0)
0000F456 117C 0006 0018             		move.b	#6,$18(a0)
0000F45C                            
0000F45C                            Obj12_Animate:				; XREF: Obj12_Index
0000F45C 5328 001E                  		subq.b	#1,$1E(a0)
0000F460 6A00                       		bpl.s	Obj12_ChkDel
0000F462 117C 0007 001E             		move.b	#7,$1E(a0)
0000F468 5228 001A                  		addq.b	#1,$1A(a0)
0000F46C 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000F472 6500                       		bcs.s	Obj12_ChkDel
0000F474 117C 0000 001A             		move.b	#0,$1A(a0)
0000F47A                            
0000F47A                            Obj12_ChkDel:
0000F47A 3028 0008                  		move.w	8(a0),d0
0000F47E 0240 FF80                  		andi.w	#$FF80,d0
0000F482 3238 F700                  		move.w	($FFFFF700).w,d1
0000F486 0441 0080                  		subi.w	#$80,d1
0000F48A 0241 FF80                  		andi.w	#$FF80,d1
0000F48E 9041                       		sub.w	d1,d0
0000F490 0C40 0280                  		cmpi.w	#$280,d0
0000F494 6200 ECB6                  		bhi.w	DeleteObject
0000F498 6000 EC76                  		bra.w	DisplaySprite
0000F49C                            ; ===========================================================================
0000F49C                            ; ---------------------------------------------------------------------------
0000F49C                            ; Sprite mappings - lamp (SYZ)
0000F49C                            ; ---------------------------------------------------------------------------
0000F49C                            Map_obj12:
0000F49C                            	include "_maps\obj12.asm"
0000F49C                            ; ---------------------------------------------------------------------------
0000F49C                            ; Sprite mappings - lamp (SYZ)
0000F49C                            ; ---------------------------------------------------------------------------
0000F49C 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000F4A0 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000F4A4 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000F4A8 02                         byte_E98E:	dc.b 2
0000F4A9 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000F4AE 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000F4B3 02                         byte_E999:	dc.b 2
0000F4B4 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000F4B9 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000F4BE 02                         byte_E9A4:	dc.b 2
0000F4BF F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000F4C4 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000F4C9 02                         byte_E9AF:	dc.b 2
0000F4CA F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000F4CF 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000F4D4 02                         byte_E9BA:	dc.b 2
0000F4D5 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000F4DA 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000F4DF 02                         byte_E9C5:	dc.b 2
0000F4E0 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000F4E5 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000F4EA                            		even
0000F4EA                            		even
0000F4EA                            
0000F4EA                            ; ===========================================================================
0000F4EA                            ; ---------------------------------------------------------------------------
0000F4EA                            ; Object 47 - pinball bumper (SYZ)
0000F4EA                            ; ---------------------------------------------------------------------------
0000F4EA                            
0000F4EA                            Obj47:					; XREF: Obj_Index
0000F4EA 7000                       		moveq	#0,d0
0000F4EC 1028 0024                  		move.b	$24(a0),d0
0000F4F0 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000F4F4 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000F4F8                            ; ===========================================================================
0000F4F8 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000F4FA 0000                       		dc.w Obj47_Hit-Obj47_Index
0000F4FC                            ; ===========================================================================
0000F4FC                            
0000F4FC                            Obj47_Main:				; XREF: Obj47_Index
0000F4FC 5428 0024                  		addq.b	#2,$24(a0)
0000F500 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000F508 317C 0380 0002             		move.w	#$380,2(a0)
0000F50E 117C 0004 0001             		move.b	#4,1(a0)
0000F514 117C 0010 0019             		move.b	#$10,$19(a0)
0000F51A 117C 0001 0018             		move.b	#1,$18(a0)
0000F520 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000F526                            
0000F526                            Obj47_Hit:				; XREF: Obj47_Index
0000F526 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000F52A 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000F52E 4228 0021                  		clr.b	$21(a0)
0000F532 43F8 D000                  		lea	($FFFFD000).w,a1
0000F536 3228 0008                  		move.w	8(a0),d1
0000F53A 3428 000C                  		move.w	$C(a0),d2
0000F53E 9269 0008                  		sub.w	8(a1),d1
0000F542 9469 000C                  		sub.w	$C(a1),d2
0000F546 4EB9 0000 36A2             		jsr	(CalcAngle).l
0000F54C 4EB9 0000 33D4             		jsr	(CalcSine).l
0000F552 C3FC F900                  		muls.w	#-$700,d1
0000F556 E081                       		asr.l	#8,d1
0000F558 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000F55C C1FC F900                  		muls.w	#-$700,d0
0000F560 E080                       		asr.l	#8,d0
0000F562 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000F566 08E9 0001 0022             		bset	#1,$22(a1)
0000F56C 08A9 0004 0022             		bclr	#4,$22(a1)
0000F572 08A9 0005 0022             		bclr	#5,$22(a1)
0000F578 4229 003C                  		clr.b	$3C(a1)
0000F57C 117C 0001 001C             		move.b	#1,$1C(a0)
0000F582 303C 00B4                  		move.w	#$B4,d0
0000F586 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F58C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F590 7000                       		moveq	#0,d0
0000F592 1028 0023                  		move.b	$23(a0),d0
0000F596 6700                       		beq.s	Obj47_Score
0000F598 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F59E 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F5A0 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F5A4                            
0000F5A4                            Obj47_Score:
0000F5A4 7001                       		moveq	#1,d0
0000F5A6 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F5AC 6100 EFF8                  		bsr.w	SingleObjLoad
0000F5B0 6600                       		bne.s	Obj47_Display
0000F5B2 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F5B6 3368 0008 0008             		move.w	8(a0),8(a1)
0000F5BC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F5C2 137C 0004 001A             		move.b	#4,$1A(a1)
0000F5C8                            
0000F5C8                            Obj47_Display:
0000F5C8 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F5CE 6100 BC52                  		bsr.w	AnimateSprite
0000F5D2 3028 0008                  		move.w	8(a0),d0
0000F5D6 0240 FF80                  		andi.w	#$FF80,d0
0000F5DA 3238 F700                  		move.w	($FFFFF700).w,d1
0000F5DE 0441 0080                  		subi.w	#$80,d1
0000F5E2 0241 FF80                  		andi.w	#$FF80,d1
0000F5E6 9041                       		sub.w	d1,d0
0000F5E8 0C40 0280                  		cmpi.w	#$280,d0
0000F5EC 6200                       		bhi.s	Obj47_ChkHit
0000F5EE 6000 EB20                  		bra.w	DisplaySprite
0000F5F2                            ; ===========================================================================
0000F5F2                            
0000F5F2                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F5F2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F5F6 7000                       		moveq	#0,d0
0000F5F8 1028 0023                  		move.b	$23(a0),d0
0000F5FC 6700                       		beq.s	Obj47_Delete
0000F5FE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F604                            
0000F604                            Obj47_Delete:
0000F604 6000 EB46                  		bra.w	DeleteObject
0000F608                            ; ===========================================================================
0000F608                            Ani_obj47:
0000F608                            	include "_anim\obj47.asm"
0000F608                            ; ---------------------------------------------------------------------------
0000F608                            ; Animation script - flamethrower (SBZ)
0000F608                            ; ---------------------------------------------------------------------------
0000F608 0000                       		dc.w byte_EAF4-Ani_obj47
0000F60A 0000                       		dc.w byte_EAF8-Ani_obj47
0000F60C 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F610 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F618                            		even
0000F618                            		even
0000F618                            
0000F618                            ; ---------------------------------------------------------------------------
0000F618                            ; Sprite mappings - pinball bumper (SYZ)
0000F618                            ; ---------------------------------------------------------------------------
0000F618                            Map_obj47:
0000F618                            	include "_maps\obj47.asm"
0000F618                            ; ---------------------------------------------------------------------------
0000F618                            ; Sprite mappings - pinball bumper (SYZ)
0000F618                            ; ---------------------------------------------------------------------------
0000F618 0000                       		dc.w byte_EB06-Map_obj47
0000F61A 0000                       		dc.w byte_EB11-Map_obj47
0000F61C 0000                       		dc.w byte_EB1C-Map_obj47
0000F61E 02                         byte_EB06:	dc.b 2
0000F61F F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F624 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F629 02                         byte_EB11:	dc.b 2
0000F62A F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F62F F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F634 02                         byte_EB1C:	dc.b 2
0000F635 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F63A F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F640 00                         		even
0000F640 00                         		even
0000F640                            
0000F640                            ; ===========================================================================
0000F640                            ; ---------------------------------------------------------------------------
0000F640                            ; Object 0D - signpost at the end of a level
0000F640                            ; ---------------------------------------------------------------------------
0000F640                            
0000F640                            Obj0D:					; XREF: Obj_Index
0000F640 7000                       		moveq	#0,d0
0000F642 1028 0024                  		move.b	$24(a0),d0
0000F646 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F64A 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F64E 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F654 6100 BBCC                  		bsr.w	AnimateSprite
0000F658 6100 EAB6                  		bsr.w	DisplaySprite
0000F65C 3028 0008                  		move.w	8(a0),d0
0000F660 0240 FF80                  		andi.w	#$FF80,d0
0000F664 3238 F700                  		move.w	($FFFFF700).w,d1
0000F668 0441 0080                  		subi.w	#$80,d1
0000F66C 0241 FF80                  		andi.w	#$FF80,d1
0000F670 9041                       		sub.w	d1,d0
0000F672 0C40 0280                  		cmpi.w	#$280,d0
0000F676 6200 EAD4                  		bhi.w	DeleteObject
0000F67A 4E75                       		rts	
0000F67C                            ; ===========================================================================
0000F67C 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F67E 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F680 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F682 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F684 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F686                            ; ===========================================================================
0000F686                            
0000F686                            Obj0D_Main:				; XREF: Obj0D_Index
0000F686 5428 0024                  		addq.b	#2,$24(a0)
0000F68A 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F692 317C 0680 0002             		move.w	#$680,2(a0)
0000F698 117C 0004 0001             		move.b	#4,1(a0)
0000F69E 117C 0018 0019             		move.b	#$18,$19(a0)
0000F6A4 117C 0004 0018             		move.b	#4,$18(a0)
0000F6AA                            
0000F6AA                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F6AA 3038 D008                  		move.w	($FFFFD008).w,d0
0000F6AE 9068 0008                  		sub.w	8(a0),d0
0000F6B2 6500                       		bcs.s	locret_EBBA
0000F6B4 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F6B8 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F6BA 303C 00CF                  		move.w	#$CF,d0
0000F6BE 4EB9 0000 1470             		jsr	(PlaySound).l	; play signpost	sound
0000F6C4 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F6C8 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F6CE 5428 0024                  		addq.b	#2,$24(a0)
0000F6D2                            
0000F6D2                            locret_EBBA:
0000F6D2 4E75                       		rts	
0000F6D4                            ; ===========================================================================
0000F6D4                            
0000F6D4                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F6D4 4238 FE19                  		clr.b (Super_Sonic_Flag).w ; Revert Sonic to Normal
0000F6D8 31FC 0600 F760             		move.w #$600,(Sonic_top_speed).w ; Revert speeds
0000F6DE 31FC 000C F762             		move.w #$C,(Sonic_acceleration).w ; ^^^
0000F6E4 31FC 0080 F764             		move.w #$80,(Sonic_deceleration).w ; ^^^
0000F6EA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F6EE 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F6F0 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F6F6 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F6FA 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F700 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F702 5428 0024                  		addq.b	#2,$24(a0)
0000F706                            
0000F706                            Obj0D_Sparkle:
0000F706 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F70A 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F70C 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F712 7000                       		moveq	#0,d0
0000F714 1028 0034                  		move.b	$34(a0),d0
0000F718 5428 0034                  		addq.b	#2,$34(a0)
0000F71C 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F722 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F726 6100 EE7E                  		bsr.w	SingleObjLoad
0000F72A 6600                       		bne.s	locret_EC42
0000F72C 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F730 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F736 101A                       		move.b	(a2)+,d0
0000F738 4880                       		ext.w	d0
0000F73A D068 0008                  		add.w	8(a0),d0
0000F73E 3340 0008                  		move.w	d0,8(a1)
0000F742 101A                       		move.b	(a2)+,d0
0000F744 4880                       		ext.w	d0
0000F746 D068 000C                  		add.w	$C(a0),d0
0000F74A 3340 000C                  		move.w	d0,$C(a1)
0000F74E 237C 0000 AA64 0004        		move.l	#Map_obj25,4(a1)
0000F756 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F75C 137C 0004 0001             		move.b	#4,1(a1)
0000F762 137C 0002 0018             		move.b	#2,$18(a1)
0000F768 137C 0008 0019             		move.b	#8,$19(a1)
0000F76E                            
0000F76E                            locret_EC42:
0000F76E 4E75                       		rts	
0000F770                            ; ===========================================================================
0000F770 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F772 0808                       		dc.b	8,   8
0000F774 F000                       		dc.b -$10,   0
0000F776 18F8                       		dc.b  $18,  -8
0000F778 00F8                       		dc.b	0,  -8
0000F77A 1000                       		dc.b  $10,   0
0000F77C E808                       		dc.b -$18,   8
0000F77E 1810                       		dc.b  $18, $10
0000F780                            ; ===========================================================================
0000F780                            
0000F780                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F780 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F784 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F788 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F78E 6600                       		bne.s	loc_EC70
0000F790 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F796 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F79C                            
0000F79C                            loc_EC70:
0000F79C 4A38 D000                  		tst.b	($FFFFD000).w
0000F7A0 6700                       		beq.s	loc_EC86
0000F7A2 3038 D008                  		move.w	($FFFFD008).w,d0
0000F7A6 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F7AA 0641 0128                  		addi.w	#$128,d1
0000F7AE B041                       		cmp.w	d1,d0
0000F7B0 6500                       		bcs.s	locret_ECEE
0000F7B2                            
0000F7B2                            loc_EC86:
0000F7B2 5428 0024                  		addq.b	#2,$24(a0)
0000F7B6                            
0000F7B6                            ; ---------------------------------------------------------------------------
0000F7B6                            ; Subroutine to	set up bonuses at the end of an	act
0000F7B6                            ; ---------------------------------------------------------------------------
0000F7B6                            
0000F7B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F7B6                            
0000F7B6                            
0000F7B6                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F7B6 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F7BA 6600                       		bne.s	locret_ECEE
0000F7BC 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F7C2 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F7C6 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F7CA 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F7D0 7010                       		moveq	#$10,d0
0000F7D2 4EB9 0000 171C             		jsr	(LoadPLC2).l	; load title card patterns
0000F7D8 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F7DE 7000                       		moveq	#0,d0
0000F7E0 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F7E4 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F7E8 7200                       		moveq	#0,d1
0000F7EA 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F7EE D041                       		add.w	d1,d0		; add up your time
0000F7F0 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F7F4 7214                       		moveq	#$14,d1
0000F7F6 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F7F8 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F7FA 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F7FC                            
0000F7FC                            loc_ECD0:
0000F7FC D040                       		add.w	d0,d0
0000F7FE 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F804 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F808 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F80C 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F810 303C 008E                  		move.w	#$8E,d0
0000F814 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F81A                            
0000F81A                            locret_ECEE:
0000F81A 4E75                       		rts	
0000F81C                            ; End of function GotThroughAct
0000F81C                            
0000F81C                            ; ===========================================================================
0000F81C 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F830 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F846                            ; ===========================================================================
0000F846                            
0000F846                            locret_ED1A:				; XREF: Obj0D_Index
0000F846 4E75                       		rts	
0000F848                            ; ===========================================================================
0000F848                            Ani_obj0D:
0000F848                            	include "_anim\obj0D.asm"
0000F848                            ; ---------------------------------------------------------------------------
0000F848                            ; Animation script - signpost
0000F848                            ; ---------------------------------------------------------------------------
0000F848 0000                       		dc.w byte_ED24-Ani_obj0D
0000F84A 0000                       		dc.w byte_ED28-Ani_obj0D
0000F84C 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F84E 0000                       		dc.w byte_ED34-Ani_obj0D
0000F850 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F854 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F85A 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F860 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F864 00                         		even
0000F864 00                         		even
0000F864                            
0000F864                            ; ---------------------------------------------------------------------------
0000F864                            ; Sprite mappings - signpost
0000F864                            ; ---------------------------------------------------------------------------
0000F864                            Map_obj0D:
0000F864                            	include "_maps\obj0D.asm"
0000F864                            ; ---------------------------------------------------------------------------
0000F864                            ; Sprite mappings - signpost
0000F864                            ; ---------------------------------------------------------------------------
0000F864 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F868 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F86C 0000                       		dc.w byte_ED73-Map_obj0D
0000F86E 03                         byte_ED42:	dc.b 3
0000F86F F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F874 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F879 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F87E 02                         byte_ED52:	dc.b 2
0000F87F F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F884 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F889 02                         byte_ED5D:	dc.b 2
0000F88A F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F88F 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F894 02                         byte_ED68:	dc.b 2
0000F895 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F89A 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F89F 03                         byte_ED73:	dc.b 3
0000F8A0 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F8A5 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F8AA 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F8B0 00                         		even
0000F8B0 00                         		even
0000F8B0                            
0000F8B0                            ; ===========================================================================
0000F8B0                            ; ---------------------------------------------------------------------------
0000F8B0                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F8B0                            ; ---------------------------------------------------------------------------
0000F8B0                            
0000F8B0                            Obj4C:					; XREF: Obj_Index
0000F8B0 7000                       		moveq	#0,d0
0000F8B2 1028 0024                  		move.b	$24(a0),d0
0000F8B6 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F8BA 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F8BE 6000 0000                  		bra.w	Obj4D_ChkDel
0000F8C2                            ; ===========================================================================
0000F8C2 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F8C4 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F8C6 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F8C8 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F8CA 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F8CC 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F8CE                            ; ===========================================================================
0000F8CE                            
0000F8CE                            Obj4C_Main:				; XREF: Obj4C_Index
0000F8CE 5428 0024                  		addq.b	#2,$24(a0)
0000F8D2 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F8DA 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F8E0 117C 0004 0001             		move.b	#4,1(a0)
0000F8E6 117C 0001 0018             		move.b	#1,$18(a0)
0000F8EC 117C 0038 0019             		move.b	#$38,$19(a0)
0000F8F2 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F8F8                            
0000F8F8                            loc_EDCC:				; XREF: Obj4C_Index
0000F8F8 5368 0032                  		subq.w	#1,$32(a0)
0000F8FC 6A00                       		bpl.s	locret_EDF0
0000F8FE 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F904 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F908 3228 000C                  		move.w	$C(a0),d1
0000F90C B041                       		cmp.w	d1,d0
0000F90E 6400                       		bcc.s	locret_EDF0
0000F910 0441 0170                  		subi.w	#$170,d1
0000F914 B041                       		cmp.w	d1,d0
0000F916 6500                       		bcs.s	locret_EDF0
0000F918 5428 0024                  		addq.b	#2,$24(a0)
0000F91C                            
0000F91C                            locret_EDF0:
0000F91C 4E75                       		rts	
0000F91E                            ; ===========================================================================
0000F91E                            
0000F91E                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F91E 5428 0024                  		addq.b	#2,$24(a0)
0000F922 6100 EC98                  		bsr.w	SingleObjLoad2
0000F926 6600                       		bne.s	loc_EE18
0000F928 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F92C 3368 0008 0008             		move.w	8(a0),8(a1)
0000F932 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F938 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F93E 2348 003C                  		move.l	a0,$3C(a1)
0000F942                            
0000F942                            loc_EE18:
0000F942 117C 0001 001C             		move.b	#1,$1C(a0)
0000F948 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F94C 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F94E 117C 0004 001C             		move.b	#4,$1C(a0)
0000F954 6000                       		bra.s	Obj4C_Display
0000F956                            ; ===========================================================================
0000F956                            
0000F956                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F956 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F95A 08E9 0001 0022             		bset	#1,$22(a1)
0000F960 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F966 6000                       		bra.s	Obj4C_Display
0000F968                            ; ===========================================================================
0000F968                            
0000F968                            loc_EE3E:				; XREF: Obj4C_Index
0000F968 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F96C 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F96E 5428 0024                  		addq.b	#2,$24(a0)
0000F972 4E75                       		rts	
0000F974                            ; ===========================================================================
0000F974                            
0000F974                            Obj4C_Display:				; XREF: Obj4C_Index
0000F974 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F97A 6100 B8A6                  		bsr.w	AnimateSprite
0000F97E 6100 E790                  		bsr.w	DisplaySprite
0000F982 4E75                       		rts	
0000F984                            ; ===========================================================================
0000F984                            
0000F984                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F984 117C 0000 001C             		move.b	#0,$1C(a0)
0000F98A 117C 0002 0024             		move.b	#2,$24(a0)
0000F990 4A28 0028                  		tst.b	$28(a0)
0000F994 6700 E7B6                  		beq.w	DeleteObject
0000F998 4E75                       		rts	
0000F99A                            ; ===========================================================================
0000F99A                            ; ---------------------------------------------------------------------------
0000F99A                            ; Object 4D - lava geyser / lavafall (MZ)
0000F99A                            ; ---------------------------------------------------------------------------
0000F99A                            
0000F99A                            Obj4D:					; XREF: Obj_Index
0000F99A 7000                       		moveq	#0,d0
0000F99C 1028 0024                  		move.b	$24(a0),d0
0000F9A0 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F9A4 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F9A8 6000 E766                  		bra.w	DisplaySprite
0000F9AC                            ; ===========================================================================
0000F9AC 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F9AE 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F9B0 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F9B2 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F9B4                            
0000F9B4 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F9B8                            ; ===========================================================================
0000F9B8                            
0000F9B8                            Obj4D_Main:				; XREF: Obj4D_Index
0000F9B8 5428 0024                  		addq.b	#2,$24(a0)
0000F9BC 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F9C2 4A28 0028                  		tst.b	$28(a0)
0000F9C6 6700                       		beq.s	loc_EEA4
0000F9C8 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F9CE                            
0000F9CE                            loc_EEA4:
0000F9CE 7000                       		moveq	#0,d0
0000F9D0 1028 0028                  		move.b	$28(a0),d0
0000F9D4 D040                       		add.w	d0,d0
0000F9D6 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F9DC 2248                       		movea.l	a0,a1
0000F9DE 7201                       		moveq	#1,d1
0000F9E0 6100                       		bsr.s	Obj4D_MakeLava
0000F9E2 6000                       		bra.s	loc_EF10
0000F9E4                            ; ===========================================================================
0000F9E4                            
0000F9E4                            Obj4D_Loop:
0000F9E4 6100 EBD6                  		bsr.w	SingleObjLoad2
0000F9E8 6600                       		bne.s	loc_EF0A
0000F9EA                            
0000F9EA                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F9EA 12BC 004D                  		move.b	#$4D,0(a1)
0000F9EE 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F9F6 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F9FC 137C 0004 0001             		move.b	#4,1(a1)
0000FA02 137C 0020 0019             		move.b	#$20,$19(a1)
0000FA08 3368 0008 0008             		move.w	8(a0),8(a1)
0000FA0E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FA14 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000FA1A 137C 0001 0018             		move.b	#1,$18(a1)
0000FA20 137C 0005 001C             		move.b	#5,$1C(a1)
0000FA26 4A28 0028                  		tst.b	$28(a0)
0000FA2A 6700                       		beq.s	loc_EF0A
0000FA2C 137C 0002 001C             		move.b	#2,$1C(a1)
0000FA32                            
0000FA32                            loc_EF0A:
0000FA32 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000FA36 4E75                       		rts	
0000FA38                            ; ===========================================================================
0000FA38                            
0000FA38                            loc_EF10:				; XREF: Obj4D_Main
0000FA38 0669 0060 000C             		addi.w	#$60,$C(a1)
0000FA3E 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000FA44 0669 0060 0030             		addi.w	#$60,$30(a1)
0000FA4A 137C 0093 0020             		move.b	#$93,$20(a1)
0000FA50 137C 0080 0016             		move.b	#$80,$16(a1)
0000FA56 08E9 0004 0001             		bset	#4,1(a1)
0000FA5C 5829 0024                  		addq.b	#4,$24(a1)
0000FA60 2348 003C                  		move.l	a0,$3C(a1)
0000FA64 4A28 0028                  		tst.b	$28(a0)
0000FA68 6700                       		beq.s	Obj4D_PlaySnd
0000FA6A 7200                       		moveq	#0,d1
0000FA6C 6100 FF76                  		bsr.w	Obj4D_Loop
0000FA70 5429 0024                  		addq.b	#2,$24(a1)
0000FA74 08E9 0004 0002             		bset	#4,2(a1)
0000FA7A 0669 0100 000C             		addi.w	#$100,$C(a1)
0000FA80 137C 0000 0018             		move.b	#0,$18(a1)
0000FA86 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000FA8C 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000FA92 117C 0000 0028             		move.b	#0,$28(a0)
0000FA98                            
0000FA98                            Obj4D_PlaySnd:
0000FA98 303C 00C8                  		move.w	#$C8,d0
0000FA9C 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play flame sound
0000FAA2                            
0000FAA2                            Obj4D_Action:				; XREF: Obj4D_Index
0000FAA2 7000                       		moveq	#0,d0
0000FAA4 1028 0028                  		move.b	$28(a0),d0
0000FAA8 D040                       		add.w	d0,d0
0000FAAA 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000FAAE 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000FAB2 6100 E636                  		bsr.w	SpeedToPos
0000FAB6 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000FABC 6100 B764                  		bsr.w	AnimateSprite
0000FAC0                            
0000FAC0                            Obj4D_ChkDel:				; XREF: Obj4C
0000FAC0 3028 0008                  		move.w	8(a0),d0
0000FAC4 0240 FF80                  		andi.w	#$FF80,d0
0000FAC8 3238 F700                  		move.w	($FFFFF700).w,d1
0000FACC 0441 0080                  		subi.w	#$80,d1
0000FAD0 0241 FF80                  		andi.w	#$FF80,d1
0000FAD4 9041                       		sub.w	d1,d0
0000FAD6 0C40 0280                  		cmpi.w	#$280,d0
0000FADA 6200 E670                  		bhi.w	DeleteObject
0000FADE 4E75                       		rts	
0000FAE0                            ; ===========================================================================
0000FAE0 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000FAE2 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000FAE4                            ; ===========================================================================
0000FAE4                            
0000FAE4                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000FAE4 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000FAEA 3028 0030                  		move.w	$30(a0),d0
0000FAEE B068 000C                  		cmp.w	$C(a0),d0
0000FAF2 6400                       		bcc.s	locret_EFDA
0000FAF4 5828 0024                  		addq.b	#4,$24(a0)
0000FAF8 2268 003C                  		movea.l	$3C(a0),a1
0000FAFC 137C 0003 001C             		move.b	#3,$1C(a1)
0000FB02                            
0000FB02                            locret_EFDA:
0000FB02 4E75                       		rts	
0000FB04                            ; ===========================================================================
0000FB04                            
0000FB04                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000FB04 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000FB0A 3028 0030                  		move.w	$30(a0),d0
0000FB0E B068 000C                  		cmp.w	$C(a0),d0
0000FB12 6400                       		bcc.s	locret_EFFA
0000FB14 5828 0024                  		addq.b	#4,$24(a0)
0000FB18 2268 003C                  		movea.l	$3C(a0),a1
0000FB1C 137C 0001 001C             		move.b	#1,$1C(a1)
0000FB22                            
0000FB22                            locret_EFFA:
0000FB22 4E75                       		rts	
0000FB24                            ; ===========================================================================
0000FB24                            
0000FB24                            loc_EFFC:				; XREF: Obj4D_Index
0000FB24 2268 003C                  		movea.l	$3C(a0),a1
0000FB28 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000FB2E 6700 0000                  		beq.w	Obj4D_Delete
0000FB32 3029 000C                  		move.w	$C(a1),d0
0000FB36 0640 0060                  		addi.w	#$60,d0
0000FB3A 3140 000C                  		move.w	d0,$C(a0)
0000FB3E 9068 0030                  		sub.w	$30(a0),d0
0000FB42 4440                       		neg.w	d0
0000FB44 7208                       		moveq	#8,d1
0000FB46 0C40 0040                  		cmpi.w	#$40,d0
0000FB4A 6C00                       		bge.s	loc_F026
0000FB4C 720B                       		moveq	#$B,d1
0000FB4E                            
0000FB4E                            loc_F026:
0000FB4E 0C40 0080                  		cmpi.w	#$80,d0
0000FB52 6F00                       		ble.s	loc_F02E
0000FB54 720E                       		moveq	#$E,d1
0000FB56                            
0000FB56                            loc_F02E:
0000FB56 5328 001E                  		subq.b	#1,$1E(a0)
0000FB5A 6A00                       		bpl.s	loc_F04C
0000FB5C 117C 0007 001E             		move.b	#7,$1E(a0)
0000FB62 5228 001B                  		addq.b	#1,$1B(a0)
0000FB66 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000FB6C 6500                       		bcs.s	loc_F04C
0000FB6E 117C 0000 001B             		move.b	#0,$1B(a0)
0000FB74                            
0000FB74                            loc_F04C:
0000FB74 1028 001B                  		move.b	$1B(a0),d0
0000FB78 D001                       		add.b	d1,d0
0000FB7A 1140 001A                  		move.b	d0,$1A(a0)
0000FB7E 6000 FF40                  		bra.w	Obj4D_ChkDel
0000FB82                            ; ===========================================================================
0000FB82                            
0000FB82                            Obj4D_Delete:				; XREF: Obj4D_Index
0000FB82 6000 E5C8                  		bra.w	DeleteObject
0000FB86                            ; ===========================================================================
0000FB86                            ; ---------------------------------------------------------------------------
0000FB86                            ; Object 4E - advancing	wall of	lava (MZ)
0000FB86                            ; ---------------------------------------------------------------------------
0000FB86                            
0000FB86                            Obj4E:					; XREF: Obj_Index
0000FB86 7000                       		moveq	#0,d0
0000FB88 1028 0024                  		move.b	$24(a0),d0
0000FB8C 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000FB90 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000FB94                            ; ===========================================================================
0000FB94 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000FB96 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000FB98 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000FB9A 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000FB9C 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000FB9E                            ; ===========================================================================
0000FB9E                            
0000FB9E                            Obj4E_Main:				; XREF: Obj4E_Index
0000FB9E 5828 0024                  		addq.b	#4,$24(a0)
0000FBA2 2248                       		movea.l	a0,a1
0000FBA4 7201                       		moveq	#1,d1
0000FBA6 6000                       		bra.s	Obj4E_Main2
0000FBA8                            ; ===========================================================================
0000FBA8                            
0000FBA8                            Obj4E_Loop:
0000FBA8 6100 EA12                  		bsr.w	SingleObjLoad2
0000FBAC 6600                       		bne.s	loc_F0C8
0000FBAE                            
0000FBAE                            Obj4E_Main2:				; XREF: Obj4E_Main
0000FBAE 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000FBB2 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000FBBA 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000FBC0 137C 0004 0001             		move.b	#4,1(a1)
0000FBC6 137C 0050 0019             		move.b	#$50,$19(a1)
0000FBCC 3368 0008 0008             		move.w	8(a0),8(a1)
0000FBD2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FBD8 137C 0001 0018             		move.b	#1,$18(a1)
0000FBDE 137C 0000 001C             		move.b	#0,$1C(a1)
0000FBE4 137C 0094 0020             		move.b	#$94,$20(a1)
0000FBEA 2348 003C                  		move.l	a0,$3C(a1)
0000FBEE                            
0000FBEE                            loc_F0C8:
0000FBEE 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000FBF2                            
0000FBF2 5C29 0024                  		addq.b	#6,$24(a1)
0000FBF6 137C 0004 001A             		move.b	#4,$1A(a1)
0000FBFC                            
0000FBFC                            Obj4E_Action:				; XREF: Obj4E_Index
0000FBFC 3038 D008                  		move.w	($FFFFD008).w,d0
0000FC00 9068 0008                  		sub.w	8(a0),d0
0000FC04 6400                       		bcc.s	Obj4E_ChkSonic
0000FC06 4440                       		neg.w	d0
0000FC08                            
0000FC08                            Obj4E_ChkSonic:
0000FC08 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000FC0C 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000FC0E 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000FC12 9068 000C                  		sub.w	$C(a0),d0
0000FC16 6400                       		bcc.s	loc_F0F4
0000FC18 4440                       		neg.w	d0
0000FC1A                            
0000FC1A                            loc_F0F4:
0000FC1A 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000FC1E 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000FC20 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000FC26 6000                       		bra.s	Obj4E_Solid
0000FC28                            ; ===========================================================================
0000FC28                            
0000FC28                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000FC28 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000FC2C 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000FC2E 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000FC34 5528 0024                  		subq.b	#2,$24(a0)
0000FC38                            
0000FC38                            Obj4E_Solid:				; XREF: Obj4E_Index
0000FC38 323C 002B                  		move.w	#$2B,d1
0000FC3C 343C 0018                  		move.w	#$18,d2
0000FC40 3602                       		move.w	d2,d3
0000FC42 5243                       		addq.w	#1,d3
0000FC44 3828 0008                  		move.w	8(a0),d4
0000FC48 1028 0024                  		move.b	$24(a0),d0
0000FC4C 3F00                       		move.w	d0,-(sp)
0000FC4E 6100 0000                  		bsr.w	SolidObject
0000FC52 301F                       		move.w	(sp)+,d0
0000FC54 1140 0024                  		move.b	d0,$24(a0)
0000FC58 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000FC5E 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000FC60 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000FC64 4228 0036                  		clr.b	$36(a0)
0000FC68                            
0000FC68                            Obj4E_Animate:
0000FC68 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000FC6E 6100 B5B2                  		bsr.w	AnimateSprite
0000FC72 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000FC78 6400                       		bcc.s	Obj4E_ChkDel
0000FC7A 6100 E46E                  		bsr.w	SpeedToPos
0000FC7E                            
0000FC7E                            Obj4E_ChkDel:
0000FC7E 6100 E490                  		bsr.w	DisplaySprite
0000FC82 4A28 0036                  		tst.b	$36(a0)
0000FC86 6600                       		bne.s	locret_F17E
0000FC88 3028 0008                  		move.w	8(a0),d0
0000FC8C 0240 FF80                  		andi.w	#$FF80,d0
0000FC90 3238 F700                  		move.w	($FFFFF700).w,d1
0000FC94 0441 0080                  		subi.w	#$80,d1
0000FC98 0241 FF80                  		andi.w	#$FF80,d1
0000FC9C 9041                       		sub.w	d1,d0
0000FC9E 0C40 0280                  		cmpi.w	#$280,d0
0000FCA2 6200                       		bhi.s	Obj4E_ChkGone
0000FCA4                            
0000FCA4                            locret_F17E:
0000FCA4 4E75                       		rts	
0000FCA6                            ; ===========================================================================
0000FCA6                            
0000FCA6                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000FCA6 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FCAA 7000                       		moveq	#0,d0
0000FCAC 1028 0023                  		move.b	$23(a0),d0
0000FCB0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FCB6 117C 0008 0024             		move.b	#8,$24(a0)
0000FCBC 4E75                       		rts	
0000FCBE                            ; ===========================================================================
0000FCBE                            
0000FCBE                            Obj4E_Move2:				; XREF: Obj4E_Index
0000FCBE 2268 003C                  		movea.l	$3C(a0),a1
0000FCC2 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000FCC8 6700                       		beq.s	Obj4E_Delete
0000FCCA 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000FCD0 0468 0080 0008             		subi.w	#$80,8(a0)
0000FCD6 6000 E438                  		bra.w	DisplaySprite
0000FCDA                            ; ===========================================================================
0000FCDA                            
0000FCDA                            Obj4E_Delete:				; XREF: Obj4E_Index
0000FCDA 6000 E470                  		bra.w	DeleteObject
0000FCDE                            ; ===========================================================================
0000FCDE                            ; ---------------------------------------------------------------------------
0000FCDE                            ; Object 54 - invisible	lava tag (MZ)
0000FCDE                            ; ---------------------------------------------------------------------------
0000FCDE                            
0000FCDE                            Obj54:					; XREF: Obj_Index
0000FCDE 7000                       		moveq	#0,d0
0000FCE0 1028 0024                  		move.b	$24(a0),d0
0000FCE4 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000FCE8 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000FCEC                            ; ===========================================================================
0000FCEC 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000FCEE 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000FCF0                            
0000FCF0 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000FCF4                            ; ===========================================================================
0000FCF4                            
0000FCF4                            Obj54_Main:				; XREF: Obj54_Index
0000FCF4 5428 0024                  		addq.b	#2,$24(a0)
0000FCF8 7000                       		moveq	#0,d0
0000FCFA 1028 0028                  		move.b	$28(a0),d0
0000FCFE 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000FD04 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000FD0C 117C 0084 0001             		move.b	#$84,1(a0)
0000FD12                            
0000FD12                            Obj54_ChkDel:				; XREF: Obj54_Index
0000FD12 3028 0008                  		move.w	8(a0),d0
0000FD16 0240 FF80                  		andi.w	#$FF80,d0
0000FD1A 3238 F700                  		move.w	($FFFFF700).w,d1
0000FD1E 0441 0080                  		subi.w	#$80,d1
0000FD22 0241 FF80                  		andi.w	#$FF80,d1
0000FD26 9041                       		sub.w	d1,d0
0000FD28 6B00 E422                  		bmi.w	DeleteObject
0000FD2C 0C40 0280                  		cmpi.w	#$280,d0
0000FD30 6200 E41A                  		bhi.w	DeleteObject
0000FD34 4E75                       		rts	
0000FD36                            ; ===========================================================================
0000FD36                            ; ---------------------------------------------------------------------------
0000FD36                            ; Sprite mappings - invisible lava tag (MZ)
0000FD36                            ; ---------------------------------------------------------------------------
0000FD36                            Map_obj54:
0000FD36                            	include "_maps\obj54.asm"
0000FD36                            ; ---------------------------------------------------------------------------
0000FD36                            ; Sprite mappings - invisible lava tag (MZ)
0000FD36                            ; ---------------------------------------------------------------------------
0000FD36 0000                       		dc.w byte_F212-Map_obj54
0000FD38 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000FD3A 00                         		even
0000FD3A 00                         		even
0000FD3A                            
0000FD3A                            Ani_obj4C:
0000FD3A                            	include "_anim\obj4C.asm"
0000FD3A                            ; ---------------------------------------------------------------------------
0000FD3A                            ; Animation script - geyser of lava (MZ)
0000FD3A                            ; ---------------------------------------------------------------------------
0000FD3A 0000                       		dc.w byte_F220-Ani_obj4C
0000FD3C 0000                       		dc.w byte_F22A-Ani_obj4C
0000FD3E 0000                       		dc.w byte_F22E-Ani_obj4C
0000FD40 0000                       		dc.w byte_F232-Ani_obj4C
0000FD42 0000                       		dc.w byte_F23A-Ani_obj4C
0000FD44 0000                       		dc.w byte_F23E-Ani_obj4C
0000FD46 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000FD50 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000FD54 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000FD58 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000FD60 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000FD64 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000FD68                            		even
0000FD68                            		even
0000FD68                            
0000FD68                            Ani_obj4E:
0000FD68                            	include "_anim\obj4E.asm"
0000FD68                            ; ---------------------------------------------------------------------------
0000FD68                            ; Animation script - advancing wall of lava (MZ)
0000FD68                            ; ---------------------------------------------------------------------------
0000FD68 0000                       		dc.w byte_F244-Ani_obj4E
0000FD6A 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000FD70                            		even
0000FD70                            		even
0000FD70                            
0000FD70                            ; ---------------------------------------------------------------------------
0000FD70                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FD70                            ; ---------------------------------------------------------------------------
0000FD70                            Map_obj4C:
0000FD70                            	include "_maps\obj4C.asm"
0000FD70                            ; ---------------------------------------------------------------------------
0000FD70                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FD70                            ; ---------------------------------------------------------------------------
0000FD70 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000FD74 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000FD78 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000FD7C 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000FD80 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000FD84 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000FD88 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000FD8C 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000FD90 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000FD94 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000FD98 02                         byte_F272:	dc.b 2
0000FD99 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000FD9E EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000FDA3 02                         byte_F27D:	dc.b 2
0000FDA4 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000FDA9 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000FDAE 04                         byte_F288:	dc.b 4
0000FDAF EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FDB4 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FDB9 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FDBE EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FDC3 04                         byte_F29D:	dc.b 4
0000FDC4 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FDC9 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FDCE F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FDD3 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FDD8 06                         byte_F2B2:	dc.b 6
0000FDD9 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FDDE F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FDE3 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FDE8 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FDED E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000FDF2 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000FDF7 06                         byte_F2D1:	dc.b 6
0000FDF8 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FDFD F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FE02 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FE07 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FE0C E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000FE11 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000FE16 02                         byte_F2F0:	dc.b 2
0000FE17 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000FE1C E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000FE21 02                         byte_F2FB:	dc.b 2
0000FE22 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000FE27 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000FE2C 0A                         byte_F306:	dc.b $A
0000FE2D 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FE32 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FE37 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FE3C B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FE41 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FE46 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FE4B F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FE50 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FE55 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FE5A 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FE5F 0A                         byte_F339:	dc.b $A
0000FE60 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FE65 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FE6A B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FE6F B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FE74 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FE79 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FE7E F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FE83 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FE88 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FE8D 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FE92 0A                         byte_F36C:	dc.b $A
0000FE93 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FE98 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FE9D B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FEA2 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FEA7 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FEAC D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FEB1 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FEB6 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FEBB 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FEC0 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FEC5 06                         byte_F39F:	dc.b 6
0000FEC6 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FECB 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FED0 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FED5 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FEDA D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FEDF D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FEE4 06                         byte_F3BE:	dc.b 6
0000FEE5 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FEEA 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FEEF B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FEF4 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FEF9 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FEFE D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FF03 06                         byte_F3DD:	dc.b 6
0000FF04 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FF09 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FF0E B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FF13 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FF18 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FF1D D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FF22 10                         byte_F3FC:	dc.b $10
0000FF23 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FF28 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FF2D B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FF32 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FF37 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FF3C D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FF41 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FF46 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FF4B 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FF50 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FF55 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000FF5A 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000FF5F 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000FF64 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000FF69 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000FF6E 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000FF73 10                         byte_F44D:	dc.b $10
0000FF74 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FF79 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FF7E B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FF83 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FF88 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FF8D D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FF92 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FF97 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FF9C 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FFA1 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FFA6 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FFAB 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FFB0 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FFB5 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FFBA 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FFBF 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FFC4 10                         byte_F49E:	dc.b $10
0000FFC5 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FFCA 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FFCF B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FFD4 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FFD9 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FFDE D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FFE3 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FFE8 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FFED 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FFF2 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FFF7 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FFFC 300F 0860 00               		dc.b $30, $F, 8, $60, 0
00010001 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
00010006 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0001000B 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
00010010 700F 0860 00               		dc.b $70, $F, 8, $60, 0
00010015 06                         byte_F4EF:	dc.b 6
00010016 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0001001B E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
00010020 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
00010025 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0001002A D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0001002F D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
00010034 06                         byte_F50E:	dc.b 6
00010035 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0001003A E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0001003F E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
00010044 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
00010049 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0001004E D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
00010053 00                         byte_F52D:	dc.b 0
00010054                            		even
00010054                            		even
00010054                            
00010054                            ; ---------------------------------------------------------------------------
00010054                            ; Sprite mappings - advancing wall of lava (MZ)
00010054                            ; ---------------------------------------------------------------------------
00010054                            Map_obj4E:
00010054                            	include "_maps\obj4E.asm"
00010054                            ; ---------------------------------------------------------------------------
00010054                            ; Sprite mappings - advancing wall of lava (MZ)
00010054                            ; ---------------------------------------------------------------------------
00010054 0000                       		dc.w byte_F538-Map_obj4E
00010056 0000                       		dc.w byte_F566-Map_obj4E
00010058 0000                       		dc.w byte_F594-Map_obj4E
0001005A 0000                       		dc.w byte_F5C2-Map_obj4E
0001005C 0000                       		dc.w byte_F5F0-Map_obj4E
0001005E 09                         byte_F538:	dc.b 9
0001005F E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
00010064 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
00010069 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0001006E E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010073 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010078 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0001007D 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010082 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010087 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0001008C 09                         byte_F566:	dc.b 9
0001008D E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00010092 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
00010097 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0001009C E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000100A1 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000100A6 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000100AB 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000100B0 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000100B5 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000100BA 09                         byte_F594:	dc.b 9
000100BB E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
000100C0 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
000100C5 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000100CA E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000100CF 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000100D4 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000100D9 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000100DE E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000100E3 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000100E8 09                         byte_F5C2:	dc.b 9
000100E9 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
000100EE 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
000100F3 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000100F8 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000100FD 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010102 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010107 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0001010C E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010111 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010116 08                         byte_F5F0:	dc.b 8
00010117 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0001011C 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010121 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010126 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0001012B E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010130 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010135 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0001013A 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010140 00                         		even
00010140 00                         		even
00010140                            
00010140                            ; ===========================================================================
00010140                            ; ---------------------------------------------------------------------------
00010140                            ; Object 40 - Moto Bug enemy (GHZ)
00010140                            ; ---------------------------------------------------------------------------
00010140                            
00010140                            Obj40:					; XREF: Obj_Index
00010140 7000                       		moveq	#0,d0
00010142 1028 0024                  		move.b	$24(a0),d0
00010146 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0001014A 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0001014E                            ; ===========================================================================
0001014E 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
00010150 0000                       		dc.w Obj40_Action-Obj40_Index
00010152 0000                       		dc.w Obj40_Animate-Obj40_Index
00010154 0000                       		dc.w Obj40_Delete-Obj40_Index
00010156                            ; ===========================================================================
00010156                            
00010156                            Obj40_Main:				; XREF: Obj40_Index
00010156 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0001015E 317C 04F0 0002             		move.w	#$4F0,2(a0)
00010164 117C 0004 0001             		move.b	#4,1(a0)
0001016A 117C 0004 0018             		move.b	#4,$18(a0)
00010170 117C 0014 0019             		move.b	#$14,$19(a0)
00010176 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0001017A 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0001017C 117C 000E 0016             		move.b	#$E,$16(a0)
00010182 117C 0008 0017             		move.b	#8,$17(a0)
00010188 117C 000C 0020             		move.b	#$C,$20(a0)
0001018E 6100 DF2E                  		bsr.w	ObjectFall
00010192 4EB9 0000 0000             		jsr	ObjHitFloor
00010198 4A41                       		tst.w	d1
0001019A 6A00                       		bpl.s	locret_F68A
0001019C D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
000101A0 317C 0000 0012             		move.w	#0,$12(a0)
000101A6 5428 0024                  		addq.b	#2,$24(a0)
000101AA 0868 0000 0022             		bchg	#0,$22(a0)
000101B0                            
000101B0                            locret_F68A:
000101B0 4E75                       		rts	
000101B2                            ; ===========================================================================
000101B2                            
000101B2                            Obj40_SetSmoke:				; XREF: Obj40_Main
000101B2 5828 0024                  		addq.b	#4,$24(a0)
000101B6 6000 0000                  		bra.w	Obj40_Animate
000101BA                            ; ===========================================================================
000101BA                            
000101BA                            Obj40_Action:				; XREF: Obj40_Index
000101BA 7000                       		moveq	#0,d0
000101BC 1028 0025                  		move.b	$25(a0),d0
000101C0 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
000101C4 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
000101C8 43F9 0000 0000             		lea	(Ani_obj40).l,a1
000101CE 6100 B052                  		bsr.w	AnimateSprite
000101D2                            
000101D2                            ; ---------------------------------------------------------------------------
000101D2                            ; Routine to mark an enemy/monitor/ring	as destroyed
000101D2                            ; ---------------------------------------------------------------------------
000101D2                            
000101D2                            MarkObjGone:
000101D2 3028 0008                  		move.w	8(a0),d0
000101D6 0240 FF80                  		andi.w	#$FF80,d0
000101DA 3238 F700                  		move.w	($FFFFF700).w,d1
000101DE 0441 0080                  		subi.w	#$80,d1
000101E2 0241 FF80                  		andi.w	#$FF80,d1
000101E6 9041                       		sub.w	d1,d0
000101E8 0C40 0280                  		cmpi.w	#$280,d0
000101EC 6200 0000                  		bhi.w	Mark_ChkGone
000101F0 6000 DF1E                  		bra.w	DisplaySprite
000101F4                            ; ===========================================================================
000101F4                            
000101F4                            Mark_ChkGone:
000101F4 45F8 FC00                  		lea	($FFFFFC00).w,a2
000101F8 7000                       		moveq	#0,d0
000101FA 1028 0023                  		move.b	$23(a0),d0
000101FE 6700                       		beq.s	Mark_Delete
00010200 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010206                            
00010206                            Mark_Delete:
00010206 6000 DF44                  		bra.w	DeleteObject
0001020A                            
0001020A                            ; ===========================================================================
0001020A 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0001020C 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0001020E                            ; ===========================================================================
0001020E                            
0001020E                            Obj40_Move:				; XREF: Obj40_Index2
0001020E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00010212 6A00                       		bpl.s	locret_F70A	; if time remains, branch
00010214 5428 0025                  		addq.b	#2,$25(a0)
00010218 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0001021E 117C 0001 001C             		move.b	#1,$1C(a0)
00010224 0868 0000 0022             		bchg	#0,$22(a0)
0001022A 6600                       		bne.s	locret_F70A
0001022C 4468 0010                  		neg.w	$10(a0)		; change direction
00010230                            
00010230                            locret_F70A:
00010230 4E75                       		rts	
00010232                            ; ===========================================================================
00010232                            
00010232                            Obj40_FixToFloor:			; XREF: Obj40_Index2
00010232 6100 DEB6                  		bsr.w	SpeedToPos
00010236 4EB9 0000 0000             		jsr	ObjHitFloor
0001023C 0C41 FFF8                  		cmpi.w	#-8,d1
00010240 6D00                       		blt.s	Obj40_Pause
00010242 0C41 000C                  		cmpi.w	#$C,d1
00010246 6C00                       		bge.s	Obj40_Pause
00010248 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0001024C 5328 0033                  		subq.b	#1,$33(a0)
00010250 6A00                       		bpl.s	locret_F756
00010252 117C 000F 0033             		move.b	#$F,$33(a0)
00010258 6100 E34C                  		bsr.w	SingleObjLoad
0001025C 6600                       		bne.s	locret_F756
0001025E 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
00010262 3368 0008 0008             		move.w	8(a0),8(a1)
00010268 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001026E 1368 0022 0022             		move.b	$22(a0),$22(a1)
00010274 137C 0002 001C             		move.b	#2,$1C(a1)
0001027A                            
0001027A                            locret_F756:
0001027A 4E75                       		rts	
0001027C                            ; ===========================================================================
0001027C                            
0001027C                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0001027C 5528 0025                  		subq.b	#2,$25(a0)
00010280 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00010286 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0001028C 117C 0000 001C             		move.b	#0,$1C(a0)
00010292 4E75                       		rts	
00010294                            ; ===========================================================================
00010294                            
00010294                            Obj40_Animate:				; XREF: Obj40_Index
00010294 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0001029A 6100 AF86                  		bsr.w	AnimateSprite
0001029E 6000 DE70                  		bra.w	DisplaySprite
000102A2                            ; ===========================================================================
000102A2                            
000102A2                            Obj40_Delete:				; XREF: Obj40_Index
000102A2 6000 DEA8                  		bra.w	DeleteObject
000102A6                            ; ===========================================================================
000102A6                            Ani_obj40:
000102A6                            	include "_anim\obj40.asm"
000102A6                            ; ---------------------------------------------------------------------------
000102A6                            ; Animation script - Motobug enemy
000102A6                            ; ---------------------------------------------------------------------------
000102A6 0000                       		dc.w byte_F788-Ani_obj40
000102A8 0000                       		dc.w byte_F78C-Ani_obj40
000102AA 0000                       		dc.w byte_F792-Ani_obj40
000102AC 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
000102B0 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
000102B6 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
000102C4                            		even
000102C4                            		even
000102C4                            
000102C4                            ; ---------------------------------------------------------------------------
000102C4                            ; Sprite mappings - Moto Bug enemy (GHZ)
000102C4                            ; ---------------------------------------------------------------------------
000102C4                            Map_obj40:
000102C4                            	include "_maps\obj40.asm"
000102C4                            ; ---------------------------------------------------------------------------
000102C4                            ; Sprite mappings - Moto Bug enemy (GHZ)
000102C4                            ; ---------------------------------------------------------------------------
000102C4 0000 0000                  		dc.w byte_F7AE-Map_obj40, byte_F7C3-Map_obj40
000102C8 0000 0000                  		dc.w byte_F7D8-Map_obj40, byte_F7F2-Map_obj40
000102CC 0000 0000                  		dc.w byte_F7F8-Map_obj40, byte_F7FE-Map_obj40
000102D0 0000                       		dc.w byte_F804-Map_obj40
000102D2 04                         byte_F7AE:	dc.b 4
000102D3 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
000102D8 000C 0008 EC               		dc.b 0,	$C, 0, 8, $EC
000102DD F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
000102E2 0808 000E F4               		dc.b 8,	8, 0, $E, $F4
000102E7 04                         byte_F7C3:	dc.b 4
000102E8 F10D 0000 EC               		dc.b $F1, $D, 0, 0, $EC
000102ED 010C 0008 EC               		dc.b 1,	$C, 0, 8, $EC
000102F2 F901 000C 0C               		dc.b $F9, 1, 0,	$C, $C
000102F7 0908 0011 F4               		dc.b 9,	8, 0, $11, $F4
000102FC 05                         byte_F7D8:	dc.b 5
000102FD F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
00010302 000C 0014 EC               		dc.b 0,	$C, 0, $14, $EC
00010307 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
0001030C 0804 0018 EC               		dc.b 8,	4, 0, $18, $EC
00010311 0804 0012 FC               		dc.b 8,	4, 0, $12, $FC
00010316 01                         byte_F7F2:	dc.b 1
00010317 FA00 001A 10               		dc.b $FA, 0, 0,	$1A, $10
0001031C 01                         byte_F7F8:	dc.b 1
0001031D FA00 001B 10               		dc.b $FA, 0, 0,	$1B, $10
00010322 01                         byte_F7FE:	dc.b 1
00010323 FA00 001C 10               		dc.b $FA, 0, 0,	$1C, $10
00010328 00                         byte_F804:	dc.b 0
0001032A 00                         		even
0001032A 00                         		even
0001032A                            
0001032A                            ; ===========================================================================
0001032A                            ; ---------------------------------------------------------------------------
0001032A                            ; Object 4F - blank
0001032A                            ; ---------------------------------------------------------------------------
0001032A                            
0001032A                            Obj4F:					; XREF: Obj_Index
0001032A 4E75                       		rts	
0001032C                            
0001032C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001032C                            
0001032C                            
0001032C                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0001032C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00010330 D047                       		add.w	d7,d0
00010332 0240 0003                  		andi.w	#3,d0
00010336 6600                       		bne.s	loc_F836
00010338 7600                       		moveq	#0,d3
0001033A 1628 0019                  		move.b	$19(a0),d3
0001033E 4A68 0010                  		tst.w	$10(a0)
00010342 6B00                       		bmi.s	loc_F82C
00010344 6100 0000                  		bsr.w	ObjHitWallRight
00010348 4A41                       		tst.w	d1
0001034A 6A00                       		bpl.s	loc_F836
0001034C                            
0001034C                            loc_F828:
0001034C 7001                       		moveq	#1,d0
0001034E 4E75                       		rts	
00010350                            ; ===========================================================================
00010350                            
00010350                            loc_F82C:
00010350 4643                       		not.w	d3
00010352 6100 0000                  		bsr.w	ObjHitWallLeft
00010356 4A41                       		tst.w	d1
00010358 6BF2                       		bmi.s	loc_F828
0001035A                            
0001035A                            loc_F836:
0001035A 7000                       		moveq	#0,d0
0001035C 4E75                       		rts	
0001035E                            ; End of function Obj50_ChkWall
0001035E                            
0001035E                            ; ===========================================================================
0001035E                            ; ---------------------------------------------------------------------------
0001035E                            ; Object 50 - Yadrin enemy (SYZ)
0001035E                            ; ---------------------------------------------------------------------------
0001035E                            
0001035E                            Obj50:					; XREF: Obj_Index
0001035E 7000                       		moveq	#0,d0
00010360 1028 0024                  		move.b	$24(a0),d0
00010364 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
00010368 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0001036C                            ; ===========================================================================
0001036C 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0001036E 0000                       		dc.w Obj50_Action-Obj50_Index
00010370                            ; ===========================================================================
00010370                            
00010370                            Obj50_Main:				; XREF: Obj50_Index
00010370 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
00010378 317C 247B 0002             		move.w	#$247B,2(a0)
0001037E 117C 0004 0001             		move.b	#4,1(a0)
00010384 117C 0004 0018             		move.b	#4,$18(a0)
0001038A 117C 0014 0019             		move.b	#$14,$19(a0)
00010390 117C 0011 0016             		move.b	#$11,$16(a0)
00010396 117C 0008 0017             		move.b	#8,$17(a0)
0001039C 117C 00CC 0020             		move.b	#$CC,$20(a0)
000103A2 6100 DD1A                  		bsr.w	ObjectFall
000103A6 6100 0000                  		bsr.w	ObjHitFloor
000103AA 4A41                       		tst.w	d1
000103AC 6A00                       		bpl.s	locret_F89E
000103AE D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
000103B2 317C 0000 0012             		move.w	#0,$12(a0)
000103B8 5428 0024                  		addq.b	#2,$24(a0)
000103BC 0868 0000 0022             		bchg	#0,$22(a0)
000103C2                            
000103C2                            locret_F89E:
000103C2 4E75                       		rts	
000103C4                            ; ===========================================================================
000103C4                            
000103C4                            Obj50_Action:				; XREF: Obj50_Index
000103C4 7000                       		moveq	#0,d0
000103C6 1028 0025                  		move.b	$25(a0),d0
000103CA 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
000103CE 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
000103D2 43F9 0000 0000             		lea	(Ani_obj50).l,a1
000103D8 6100 AE48                  		bsr.w	AnimateSprite
000103DC 6000 FDF4                  		bra.w	MarkObjGone
000103E0                            ; ===========================================================================
000103E0 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
000103E2 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
000103E4                            ; ===========================================================================
000103E4                            
000103E4                            Obj50_Move:				; XREF: Obj50_Index2
000103E4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
000103E8 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
000103EA 5428 0025                  		addq.b	#2,$25(a0)
000103EE 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
000103F4 117C 0001 001C             		move.b	#1,$1C(a0)
000103FA 0868 0000 0022             		bchg	#0,$22(a0)
00010400 6600                       		bne.s	locret_F8E2
00010402 4468 0010                  		neg.w	$10(a0)		; change direction
00010406                            
00010406                            locret_F8E2:
00010406 4E75                       		rts	
00010408                            ; ===========================================================================
00010408                            
00010408                            Obj50_FixToFloor:			; XREF: Obj50_Index2
00010408 6100 DCE0                  		bsr.w	SpeedToPos
0001040C 6100 0000                  		bsr.w	ObjHitFloor
00010410 0C41 FFF8                  		cmpi.w	#-8,d1
00010414 6D00                       		blt.s	Obj50_Pause
00010416 0C41 000C                  		cmpi.w	#$C,d1
0001041A 6C00                       		bge.s	Obj50_Pause
0001041C D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
00010420 6100 FF0A                  		bsr.w	Obj50_ChkWall
00010424 6600                       		bne.s	Obj50_Pause
00010426 4E75                       		rts	
00010428                            ; ===========================================================================
00010428                            
00010428                            Obj50_Pause:				; XREF: Obj50_FixToFloor
00010428 5528 0025                  		subq.b	#2,$25(a0)
0001042C 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00010432 317C 0000 0010             		move.w	#0,$10(a0)
00010438 117C 0000 001C             		move.b	#0,$1C(a0)
0001043E 4E75                       		rts	
00010440                            ; ===========================================================================
00010440                            Ani_obj50:
00010440                            	include "_anim\obj50.asm"
00010440                            ; ---------------------------------------------------------------------------
00010440                            ; Animation script - Yadrin enemy
00010440                            ; ---------------------------------------------------------------------------
00010440 0000                       		dc.w byte_F920-Ani_obj50
00010442 0000                       		dc.w byte_F924-Ani_obj50
00010444 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
00010448 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
00010452                            		even
00010452                            		even
00010452                            
00010452                            ; ---------------------------------------------------------------------------
00010452                            ; Sprite mappings - Yadrin enemy (SYZ)
00010452                            ; ---------------------------------------------------------------------------
00010452                            Map_obj50:
00010452                            	include "_maps\obj50.asm"
00010452                            ; ---------------------------------------------------------------------------
00010452                            ; Sprite mappings - Yadrin enemy (SYZ)
00010452                            ; ---------------------------------------------------------------------------
00010452 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
00010456 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
0001045A 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
0001045E 05                         byte_F93A:	dc.b 5
0001045F F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
00010464 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
00010469 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0001046E F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00010473 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00010478 05                         byte_F954:	dc.b 5
00010479 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0001047E FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
00010483 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00010488 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0001048D 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00010492 05                         byte_F96E:	dc.b 5
00010493 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
00010498 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0001049D EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000104A2 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000104A7 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
000104AC 05                         byte_F988:	dc.b 5
000104AD F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
000104B2 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
000104B7 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000104BC F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000104C1 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
000104C6 05                         byte_F9A2:	dc.b 5
000104C7 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
000104CC FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
000104D1 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000104D6 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000104DB 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
000104E0 05                         byte_F9BC:	dc.b 5
000104E1 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
000104E6 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
000104EB EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000104F0 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000104F5 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
000104FA                            		even
000104FA                            		even
000104FA                            
000104FA                            ; ---------------------------------------------------------------------------
000104FA                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
000104FA                            ;
000104FA                            ; variables:
000104FA                            ; d1 = width
000104FA                            ; d2 = height /	2 (when	jumping)
000104FA                            ; d3 = height /	2 (when	walking)
000104FA                            ; d4 = x-axis position
000104FA                            ; ---------------------------------------------------------------------------
000104FA                            
000104FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000104FA                            
000104FA                            
000104FA                            SolidObject:
000104FA 4A28 0025                  		tst.b	$25(a0)
000104FE 6700 0000                  		beq.w	loc_FAC8
00010502 3401                       		move.w	d1,d2
00010504 D442                       		add.w	d2,d2
00010506 43F8 D000                  		lea	($FFFFD000).w,a1
0001050A 0829 0001 0022             		btst	#1,$22(a1)
00010510 6600                       		bne.s	loc_F9FE
00010512 3029 0008                  		move.w	8(a1),d0
00010516 9068 0008                  		sub.w	8(a0),d0
0001051A D041                       		add.w	d1,d0
0001051C 6B00                       		bmi.s	loc_F9FE
0001051E B042                       		cmp.w	d2,d0
00010520 6500                       		bcs.s	loc_FA12
00010522                            
00010522                            loc_F9FE:
00010522 08A9 0003 0022             		bclr	#3,$22(a1)
00010528 08A8 0003 0022             		bclr	#3,$22(a0)
0001052E 4228 0025                  		clr.b	$25(a0)
00010532 7800                       		moveq	#0,d4
00010534 4E75                       		rts	
00010536                            ; ===========================================================================
00010536                            
00010536                            loc_FA12:
00010536 3404                       		move.w	d4,d2
00010538 6100 809A                  		bsr.w	MvSonicOnPtfm
0001053C 7800                       		moveq	#0,d4
0001053E 4E75                       		rts	
00010540                            ; ===========================================================================
00010540                            
00010540                            SolidObject71:				; XREF: Obj71_Solid
00010540 4A28 0025                  		tst.b	$25(a0)
00010544 6700 0000                  		beq.w	loc_FAD0
00010548 3401                       		move.w	d1,d2
0001054A D442                       		add.w	d2,d2
0001054C 43F8 D000                  		lea	($FFFFD000).w,a1
00010550 0829 0001 0022             		btst	#1,$22(a1)
00010556 6600                       		bne.s	loc_FA44
00010558 3029 0008                  		move.w	8(a1),d0
0001055C 9068 0008                  		sub.w	8(a0),d0
00010560 D041                       		add.w	d1,d0
00010562 6B00                       		bmi.s	loc_FA44
00010564 B042                       		cmp.w	d2,d0
00010566 6500                       		bcs.s	loc_FA58
00010568                            
00010568                            loc_FA44:
00010568 08A9 0003 0022             		bclr	#3,$22(a1)
0001056E 08A8 0003 0022             		bclr	#3,$22(a0)
00010574 4228 0025                  		clr.b	$25(a0)
00010578 7800                       		moveq	#0,d4
0001057A 4E75                       		rts	
0001057C                            ; ===========================================================================
0001057C                            
0001057C                            loc_FA58:
0001057C 3404                       		move.w	d4,d2
0001057E 6100 8054                  		bsr.w	MvSonicOnPtfm
00010582 7800                       		moveq	#0,d4
00010584 4E75                       		rts	
00010586                            ; ===========================================================================
00010586                            
00010586                            SolidObject2F:				; XREF: Obj2F_Solid
00010586 43F8 D000                  		lea	($FFFFD000).w,a1
0001058A 4A28 0001                  		tst.b	1(a0)
0001058E 6A00 0000                  		bpl.w	loc_FB92
00010592 3029 0008                  		move.w	8(a1),d0
00010596 9068 0008                  		sub.w	8(a0),d0
0001059A D041                       		add.w	d1,d0
0001059C 6B00 0000                  		bmi.w	loc_FB92
000105A0 3601                       		move.w	d1,d3
000105A2 D643                       		add.w	d3,d3
000105A4 B043                       		cmp.w	d3,d0
000105A6 6200 0000                  		bhi.w	loc_FB92
000105AA 3A00                       		move.w	d0,d5
000105AC 0828 0000 0001             		btst	#0,1(a0)
000105B2 6700                       		beq.s	loc_FA94
000105B4 4645                       		not.w	d5
000105B6 DA43                       		add.w	d3,d5
000105B8                            
000105B8                            loc_FA94:
000105B8 E24D                       		lsr.w	#1,d5
000105BA 7600                       		moveq	#0,d3
000105BC 1632 5000                  		move.b	(a2,d5.w),d3
000105C0 9612                       		sub.b	(a2),d3
000105C2 3A28 000C                  		move.w	$C(a0),d5
000105C6 9A43                       		sub.w	d3,d5
000105C8 1629 0016                  		move.b	$16(a1),d3
000105CC 4883                       		ext.w	d3
000105CE D443                       		add.w	d3,d2
000105D0 3629 000C                  		move.w	$C(a1),d3
000105D4 9645                       		sub.w	d5,d3
000105D6 5843                       		addq.w	#4,d3
000105D8 D642                       		add.w	d2,d3
000105DA 6B00 0000                  		bmi.w	loc_FB92
000105DE 3802                       		move.w	d2,d4
000105E0 D844                       		add.w	d4,d4
000105E2 B644                       		cmp.w	d4,d3
000105E4 6400 0000                  		bcc.w	loc_FB92
000105E8 6000 0000                  		bra.w	loc_FB0E
000105EC                            ; ===========================================================================
000105EC                            
000105EC                            loc_FAC8:
000105EC 4A28 0001                  		tst.b	1(a0)
000105F0 6A00 0000                  		bpl.w	loc_FB92
000105F4                            
000105F4                            loc_FAD0:
000105F4 43F8 D000                  		lea	($FFFFD000).w,a1
000105F8 3029 0008                  		move.w	8(a1),d0
000105FC 9068 0008                  		sub.w	8(a0),d0
00010600 D041                       		add.w	d1,d0
00010602 6B00 0000                  		bmi.w	loc_FB92
00010606 3601                       		move.w	d1,d3
00010608 D643                       		add.w	d3,d3
0001060A B043                       		cmp.w	d3,d0
0001060C 6200 0000                  		bhi.w	loc_FB92
00010610 1629 0016                  		move.b	$16(a1),d3
00010614 4883                       		ext.w	d3
00010616 D443                       		add.w	d3,d2
00010618 3629 000C                  		move.w	$C(a1),d3
0001061C 9668 000C                  		sub.w	$C(a0),d3
00010620 5843                       		addq.w	#4,d3
00010622 D642                       		add.w	d2,d3
00010624 6B00 0000                  		bmi.w	loc_FB92
00010628 3802                       		move.w	d2,d4
0001062A D844                       		add.w	d4,d4
0001062C B644                       		cmp.w	d4,d3
0001062E 6400 0000                  		bcc.w	loc_FB92
00010632                            
00010632                            loc_FB0E:
00010632 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00010636 6B00 0000                  		bmi.w	loc_FB92
0001063A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00010640 6400 0000                  		bcc.w	loc_FB92
00010644 4A78 FE08                  		tst.w	($FFFFFE08).w
00010648 6600 0000                  		bne.w	loc_FBAC
0001064C 3A00                       		move.w	d0,d5
0001064E B240                       		cmp.w	d0,d1
00010650 6400                       		bcc.s	loc_FB36
00010652 D241                       		add.w	d1,d1
00010654 9041                       		sub.w	d1,d0
00010656 3A00                       		move.w	d0,d5
00010658 4445                       		neg.w	d5
0001065A                            
0001065A                            loc_FB36:
0001065A 3203                       		move.w	d3,d1
0001065C B443                       		cmp.w	d3,d2
0001065E 6400                       		bcc.s	loc_FB44
00010660 5943                       		subq.w	#4,d3
00010662 9644                       		sub.w	d4,d3
00010664 3203                       		move.w	d3,d1
00010666 4441                       		neg.w	d1
00010668                            
00010668                            loc_FB44:
00010668 BA41                       		cmp.w	d1,d5
0001066A 6200 0000                  		bhi.w	loc_FBB0
0001066E 0C41 0004                  		cmpi.w	#4,d1
00010672 6300                       		bls.s	loc_FB8C
00010674 4A40                       		tst.w	d0
00010676 6700                       		beq.s	loc_FB70
00010678 6B00                       		bmi.s	loc_FB5E
0001067A 4A69 0010                  		tst.w	$10(a1)
0001067E 6B00                       		bmi.s	loc_FB70
00010680 6000                       		bra.s	loc_FB64
00010682                            ; ===========================================================================
00010682                            
00010682                            loc_FB5E:
00010682 4A69 0010                  		tst.w	$10(a1)
00010686 6A00                       		bpl.s	loc_FB70
00010688                            
00010688                            loc_FB64:
00010688 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
0001068E 337C 0000 0010             		move.w	#0,$10(a1)
00010694                            
00010694                            loc_FB70:
00010694 9169 0008                  		sub.w	d0,8(a1)
00010698 0829 0001 0022             		btst	#1,$22(a1)
0001069E 6600                       		bne.s	loc_FB8C
000106A0 08E9 0005 0022             		bset	#5,$22(a1)
000106A6 08E8 0005 0022             		bset	#5,$22(a0)
000106AC 7801                       		moveq	#1,d4
000106AE 4E75                       		rts	
000106B0                            ; ===========================================================================
000106B0                            
000106B0                            loc_FB8C:
000106B0 6100                       		bsr.s	loc_FBA0
000106B2 7801                       		moveq	#1,d4
000106B4 4E75                       		rts	
000106B6                            ; ===========================================================================
000106B6                            
000106B6                            loc_FB92:
000106B6 0828 0005 0022             		btst	#5,$22(a0)
000106BC 6700                       		beq.s	loc_FBAC
000106BE 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
000106C4 6700                       		beq.s	loc_FBA0
000106C6 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
000106CC 6700                       		beq.s	loc_FBA0
000106CE 0C29 001A 001C             		cmp.b	#$1A,$1C(a1)	; check if in hurt animation
000106D4 6700                       		beq.s	loc_FBA0
000106D6 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
000106DC                            
000106DC                            loc_FBA0:
000106DC 08A8 0005 0022             		bclr	#5,$22(a0)
000106E2                            
000106E2 08A9 0005 0022             		bclr	#5,$22(a1)
000106E8                            
000106E8                            loc_FBAC:
000106E8 7800                       		moveq	#0,d4
000106EA 4E75                       		rts	
000106EC                            ; ===========================================================================
000106EC                            
000106EC                            loc_FBB0:
000106EC 4A43                       		tst.w	d3
000106EE 6B00                       		bmi.s	loc_FBBC
000106F0 0C43 0010                  		cmpi.w	#$10,d3
000106F4 6500                       		bcs.s	loc_FBEE
000106F6 60BE                       		bra.s	loc_FB92
000106F8                            ; ===========================================================================
000106F8                            
000106F8                            loc_FBBC:
000106F8 4A69 0012                  		tst.w	$12(a1)
000106FC 6700                       		beq.s	loc_FBD6
000106FE 6A00                       		bpl.s	loc_FBD2
00010700 4A43                       		tst.w	d3
00010702 6A00                       		bpl.s	loc_FBD2
00010704 9769 000C                  		sub.w	d3,$C(a1)
00010708 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
0001070E                            
0001070E                            loc_FBD2:
0001070E 78FF                       		moveq	#-1,d4
00010710 4E75                       		rts	
00010712                            ; ===========================================================================
00010712                            
00010712                            loc_FBD6:
00010712 0829 0001 0022             		btst	#1,$22(a1)
00010718 66F4                       		bne.s	loc_FBD2
0001071A 2F08                       		move.l	a0,-(sp)
0001071C 2049                       		movea.l	a1,a0
0001071E 4EB9 0000 0000             		jsr	KillSonic
00010724 205F                       		movea.l	(sp)+,a0
00010726 78FF                       		moveq	#-1,d4
00010728 4E75                       		rts	
0001072A                            ; ===========================================================================
0001072A                            
0001072A                            loc_FBEE:
0001072A 5943                       		subq.w	#4,d3
0001072C 7200                       		moveq	#0,d1
0001072E 1228 0019                  		move.b	$19(a0),d1
00010732 3401                       		move.w	d1,d2
00010734 D442                       		add.w	d2,d2
00010736 D269 0008                  		add.w	8(a1),d1
0001073A 9268 0008                  		sub.w	8(a0),d1
0001073E 6B00                       		bmi.s	loc_FC28
00010740 B242                       		cmp.w	d2,d1
00010742 6400                       		bcc.s	loc_FC28
00010744 4A69 0012                  		tst.w	$12(a1)
00010748 6B00                       		bmi.s	loc_FC28
0001074A 9769 000C                  		sub.w	d3,$C(a1)
0001074E 5369 000C                  		subq.w	#1,$C(a1)
00010752 6100                       		bsr.s	sub_FC2C
00010754 117C 0002 0025             		move.b	#2,$25(a0)
0001075A 08E8 0003 0022             		bset	#3,$22(a0)
00010760 78FF                       		moveq	#-1,d4
00010762 4E75                       		rts	
00010764                            ; ===========================================================================
00010764                            
00010764                            loc_FC28:
00010764 7800                       		moveq	#0,d4
00010766 4E75                       		rts	
00010768                            ; End of function SolidObject
00010768                            
00010768                            
00010768                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010768                            
00010768                            
00010768                            sub_FC2C:				; XREF: SolidObject
00010768 0829 0003 0022             		btst	#3,$22(a1)
0001076E 6700                       		beq.s	loc_FC4E
00010770 7000                       		moveq	#0,d0
00010772 1029 003D                  		move.b	$3D(a1),d0
00010776 ED48                       		lsl.w	#6,d0
00010778 0680 00FF D000             		addi.l	#$FFD000,d0
0001077E 2440                       		movea.l	d0,a2
00010780 08AA 0003 0022             		bclr	#3,$22(a2)
00010786 422A 0025                  		clr.b	$25(a2)
0001078A                            
0001078A                            loc_FC4E:
0001078A 3008                       		move.w	a0,d0
0001078C 0440 D000                  		subi.w	#-$3000,d0
00010790 EC48                       		lsr.w	#6,d0
00010792 0240 007F                  		andi.w	#$7F,d0
00010796 1340 003D                  		move.b	d0,$3D(a1)
0001079A 137C 0000 0026             		move.b	#0,$26(a1)
000107A0 337C 0000 0012             		move.w	#0,$12(a1)
000107A6 3369 0010 0014             		move.w	$10(a1),$14(a1)
000107AC 0829 0001 0022             		btst	#1,$22(a1)
000107B2 6700                       		beq.s	loc_FC84
000107B4 2F08                       		move.l	a0,-(sp)
000107B6 2049                       		movea.l	a1,a0
000107B8 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
000107BE 205F                       		movea.l	(sp)+,a0
000107C0                            
000107C0                            loc_FC84:
000107C0 08E9 0003 0022             		bset	#3,$22(a1)
000107C6 08E8 0003 0022             		bset	#3,$22(a0)
000107CC 4E75                       		rts	
000107CE                            ; End of function sub_FC2C
000107CE                            
000107CE                            ; ===========================================================================
000107CE                            ; ---------------------------------------------------------------------------
000107CE                            ; Object 51 - smashable	green block (MZ)
000107CE                            ; ---------------------------------------------------------------------------
000107CE                            
000107CE                            Obj51:					; XREF: Obj_Index
000107CE 7000                       		moveq	#0,d0
000107D0 1028 0024                  		move.b	$24(a0),d0
000107D4 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
000107D8 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
000107DC 6000 F9F4                  		bra.w	MarkObjGone
000107E0                            ; ===========================================================================
000107E0 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
000107E2 0000                       		dc.w Obj51_Solid-Obj51_Index
000107E4 0000                       		dc.w Obj51_Display-Obj51_Index
000107E6                            ; ===========================================================================
000107E6                            
000107E6                            Obj51_Main:				; XREF: Obj51_Index
000107E6 5428 0024                  		addq.b	#2,$24(a0)
000107EA 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
000107F2 317C 42B8 0002             		move.w	#$42B8,2(a0)
000107F8 117C 0004 0001             		move.b	#4,1(a0)
000107FE 117C 0010 0019             		move.b	#$10,$19(a0)
00010804 117C 0004 0018             		move.b	#4,$18(a0)
0001080A 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00010810                            
00010810                            Obj51_Solid:				; XREF: Obj51_Index
00010810 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
00010816 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
0001081C 323C 001B                  		move.w	#$1B,d1
00010820 343C 0010                  		move.w	#$10,d2
00010824 363C 0011                  		move.w	#$11,d3
00010828 3828 0008                  		move.w	8(a0),d4
0001082C 6100 FCCC                  		bsr.w	SolidObject
00010830 0828 0003 0022             		btst	#3,$22(a0)
00010836 6600                       		bne.s	Obj51_Smash
00010838                            
00010838                            locret_FCFC:
00010838 4E75                       		rts	
0001083A                            ; ===========================================================================
0001083A                            
0001083A                            Obj51_Smash:				; XREF: Obj51_Solid
0001083A 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
00010840 66F6                       		bne.s	locret_FCFC	; if not, branch
00010842 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
00010848 08E9 0002 0022             		bset	#2,$22(a1)
0001084E 137C 000E 0016             		move.b	#$E,$16(a1)
00010854 137C 0007 0017             		move.b	#7,$17(a1)
0001085A 137C 0002 001C             		move.b	#2,$1C(a1)
00010860 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
00010866 08E9 0001 0022             		bset	#1,$22(a1)
0001086C 08A9 0003 0022             		bclr	#3,$22(a1)
00010872 137C 0002 0024             		move.b	#2,$24(a1)
00010878 08A8 0003 0022             		bclr	#3,$22(a0)
0001087E 4228 0025                  		clr.b	$25(a0)
00010882 117C 0001 001A             		move.b	#1,$1A(a0)
00010888 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
0001088E 7203                       		moveq	#3,d1		; set number of	fragments to 4
00010890 343C 0038                  		move.w	#$38,d2
00010894 6100 D460                  		bsr.w	SmashObject
00010898 6100 DD0C                  		bsr.w	SingleObjLoad
0001089C 6600                       		bne.s	Obj51_Display
0001089E 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000108A2 3368 0008 0008             		move.w	8(a0),8(a1)
000108A8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000108AE 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
000108B2 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
000108B6 0C42 0006                  		cmpi.w	#6,d2
000108BA 6500                       		bcs.s	Obj51_Bonus
000108BC 7406                       		moveq	#6,d2
000108BE                            
000108BE                            Obj51_Bonus:
000108BE 7000                       		moveq	#0,d0
000108C0 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
000108C4 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
000108CA 6500                       		bcs.s	loc_FD98	; if not, branch
000108CC 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
000108D0 740A                       		moveq	#10,d2
000108D2                            
000108D2                            loc_FD98:
000108D2 4EB9 0000 0000             		jsr	AddPoints
000108D8 E24A                       		lsr.w	#1,d2
000108DA 1342 001A                  		move.b	d2,$1A(a1)
000108DE                            
000108DE                            Obj51_Display:				; XREF: Obj51_Index
000108DE 6100 D80A                  		bsr.w	SpeedToPos
000108E2 0668 0038 0012             		addi.w	#$38,$12(a0)
000108E8 6100 D826                  		bsr.w	DisplaySprite
000108EC 4A28 0001                  		tst.b	1(a0)
000108F0 6A00 D85A                  		bpl.w	DeleteObject
000108F4 4E75                       		rts	
000108F6                            ; ===========================================================================
000108F6 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
000108FA FF00 FF00                  		dc.w $FF00, $FF00
000108FE 0200 FE00                  		dc.w $200, $FE00
00010902 0100 FF00                  		dc.w $100, $FF00
00010906                            
00010906 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
0001090E                            ; ---------------------------------------------------------------------------
0001090E                            ; Sprite mappings - smashable green block (MZ)
0001090E                            ; ---------------------------------------------------------------------------
0001090E                            Map_obj51:
0001090E                            	include "_maps\obj51.asm"
0001090E                            ; ---------------------------------------------------------------------------
0001090E                            ; Sprite mappings - smashable green block (MZ)
0001090E                            ; ---------------------------------------------------------------------------
0001090E 0000                       		dc.w byte_FDD8-Map_obj51
00010910 0000                       		dc.w byte_FDE3-Map_obj51
00010912 02                         byte_FDD8:	dc.b 2
00010913 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
00010918 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
0001091D 04                         byte_FDE3:	dc.b 4
0001091E F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
00010923 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00010928 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
0001092D 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00010932                            		even
00010932                            		even
00010932                            
00010932                            ; ===========================================================================
00010932                            ; ---------------------------------------------------------------------------
00010932                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00010932                            ; ---------------------------------------------------------------------------
00010932                            
00010932                            Obj52:					; XREF: Obj_Index
00010932 7000                       		moveq	#0,d0
00010934 1028 0024                  		move.b	$24(a0),d0
00010938 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
0001093C 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
00010940                            ; ===========================================================================
00010940 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
00010942 0000                       		dc.w Obj52_Platform-Obj52_Index
00010944 0000                       		dc.w Obj52_StandOn-Obj52_Index
00010946                            
00010946 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
00010948 2001                       		dc.b $20, 1
0001094A 2002                       		dc.b $20, 2
0001094C 4003                       		dc.b $40, 3
0001094E 3004                       		dc.b $30, 4
00010950                            ; ===========================================================================
00010950                            
00010950                            Obj52_Main:				; XREF: Obj52_Index
00010950 5428 0024                  		addq.b	#2,$24(a0)
00010954 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
0001095C 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010962 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010968 6600                       		bne.s	loc_FE44
0001096A 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00010972 317C 43BC 0002             		move.w	#$43BC,2(a0)
00010978 117C 0007 0016             		move.b	#7,$16(a0)
0001097E                            
0001097E                            loc_FE44:
0001097E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00010984 6600                       		bne.s	loc_FE60
00010986 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
0001098C 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
00010992 6700                       		beq.s	loc_FE60	; if yes, branch
00010994 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
0001099A                            
0001099A                            loc_FE60:
0001099A 117C 0004 0001             		move.b	#4,1(a0)
000109A0 7000                       		moveq	#0,d0
000109A2 1028 0028                  		move.b	$28(a0),d0
000109A6 E648                       		lsr.w	#3,d0
000109A8 0240 001E                  		andi.w	#$1E,d0
000109AC 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
000109B0 115A 0019                  		move.b	(a2)+,$19(a0)
000109B4 115A 001A                  		move.b	(a2)+,$1A(a0)
000109B8 117C 0004 0018             		move.b	#4,$18(a0)
000109BE 3168 0008 0030             		move.w	8(a0),$30(a0)
000109C4 3168 000C 0032             		move.w	$C(a0),$32(a0)
000109CA 0228 000F 0028             		andi.b	#$F,$28(a0)
000109D0                            
000109D0                            Obj52_Platform:				; XREF: Obj52_Index
000109D0 6100 0000                  		bsr.w	Obj52_Move
000109D4 7200                       		moveq	#0,d1
000109D6 1228 0019                  		move.b	$19(a0),d1
000109DA 4EB9 0000 7F02             		jsr	(PlatformObject).l
000109E0 6000                       		bra.s	Obj52_ChkDel
000109E2                            ; ===========================================================================
000109E2                            
000109E2                            Obj52_StandOn:				; XREF: Obj52_Index
000109E2 7200                       		moveq	#0,d1
000109E4 1228 0019                  		move.b	$19(a0),d1
000109E8 4EB9 0000 8076             		jsr	(ExitPlatform).l
000109EE 3F28 0008                  		move.w	8(a0),-(sp)
000109F2 6100 0000                  		bsr.w	Obj52_Move
000109F6 341F                       		move.w	(sp)+,d2
000109F8 4EB9 0000 85E0             		jsr	(MvSonicOnPtfm2).l
000109FE                            
000109FE                            Obj52_ChkDel:				; XREF: Obj52_Platform
000109FE 3028 0030                  		move.w	$30(a0),d0
00010A02 0240 FF80                  		andi.w	#$FF80,d0
00010A06 3238 F700                  		move.w	($FFFFF700).w,d1
00010A0A 0441 0080                  		subi.w	#$80,d1
00010A0E 0241 FF80                  		andi.w	#$FF80,d1
00010A12 9041                       		sub.w	d1,d0
00010A14 0C40 0280                  		cmpi.w	#$280,d0
00010A18 6200 D732                  		bhi.w	DeleteObject
00010A1C 6000 D6F2                  		bra.w	DisplaySprite
00010A20                            ; ===========================================================================
00010A20                            
00010A20                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
00010A20 7000                       		moveq	#0,d0
00010A22 1028 0028                  		move.b	$28(a0),d0
00010A26 0240 000F                  		andi.w	#$F,d0
00010A2A D040                       		add.w	d0,d0
00010A2C 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
00010A30 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
00010A34                            ; ===========================================================================
00010A34 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00010A38 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
00010A3C 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
00010A40 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00010A44 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00010A48 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00010A4A                            ; ===========================================================================
00010A4A                            
00010A4A                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00010A4A 4E75                       		rts	
00010A4C                            ; ===========================================================================
00010A4C                            
00010A4C                            Obj52_Type01:				; XREF: Obj52_TypeIndex
00010A4C 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010A50 323C 0060                  		move.w	#$60,d1
00010A54 0828 0000 0022             		btst	#0,$22(a0)
00010A5A 6700                       		beq.s	loc_FF26
00010A5C 4440                       		neg.w	d0
00010A5E D041                       		add.w	d1,d0
00010A60                            
00010A60                            loc_FF26:
00010A60 3228 0030                  		move.w	$30(a0),d1
00010A64 9240                       		sub.w	d0,d1
00010A66 3141 0008                  		move.w	d1,8(a0)
00010A6A 4E75                       		rts	
00010A6C                            ; ===========================================================================
00010A6C                            
00010A6C                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00010A6C 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00010A72 6600                       		bne.s	Obj52_02_Wait
00010A74 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00010A78                            
00010A78                            Obj52_02_Wait:
00010A78 4E75                       		rts	
00010A7A                            ; ===========================================================================
00010A7A                            
00010A7A                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00010A7A 7600                       		moveq	#0,d3
00010A7C 1628 0019                  		move.b	$19(a0),d3
00010A80 6100 0000                  		bsr.w	ObjHitWallRight
00010A84 4A41                       		tst.w	d1		; has the platform hit a wall?
00010A86 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00010A88 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010A8C 3168 0008 0030             		move.w	8(a0),$30(a0)
00010A92 4E75                       		rts	
00010A94                            ; ===========================================================================
00010A94                            
00010A94                            Obj52_03_End:
00010A94 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
00010A98 4E75                       		rts	
00010A9A                            ; ===========================================================================
00010A9A                            
00010A9A                            Obj52_Type05:				; XREF: Obj52_TypeIndex
00010A9A 7600                       		moveq	#0,d3
00010A9C 1628 0019                  		move.b	$19(a0),d3
00010AA0 6100 0000                  		bsr.w	ObjHitWallRight
00010AA4 4A41                       		tst.w	d1		; has the platform hit a wall?
00010AA6 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
00010AA8 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010AAC 3168 0008 0030             		move.w	8(a0),$30(a0)
00010AB2 4E75                       		rts	
00010AB4                            ; ===========================================================================
00010AB4                            
00010AB4                            Obj52_05_End:
00010AB4 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
00010AB8 4E75                       		rts	
00010ABA                            ; ===========================================================================
00010ABA                            
00010ABA                            Obj52_Type06:				; XREF: Obj52_TypeIndex
00010ABA 6100 D62E                  		bsr.w	SpeedToPos
00010ABE 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
00010AC4 6100 0000                  		bsr.w	ObjHitFloor
00010AC8 4A41                       		tst.w	d1		; has platform hit the floor?
00010ACA 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00010ACE D368 000C                  		add.w	d1,$C(a0)
00010AD2 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00010AD6 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
00010ADA                            
00010ADA                            locret_FFA0:
00010ADA 4E75                       		rts	
00010ADC                            ; ===========================================================================
00010ADC                            
00010ADC                            Obj52_Type07:				; XREF: Obj52_TypeIndex
00010ADC 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
00010AE0 6700                       		beq.s	Obj52_07_ChkDel
00010AE2 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
00010AE6                            
00010AE6                            Obj52_07_ChkDel:
00010AE6 588F                       		addq.l	#4,sp
00010AE8 3028 0030                  		move.w	$30(a0),d0
00010AEC 0240 FF80                  		andi.w	#$FF80,d0
00010AF0 3238 F700                  		move.w	($FFFFF700).w,d1
00010AF4 0441 0080                  		subi.w	#$80,d1
00010AF8 0241 FF80                  		andi.w	#$FF80,d1
00010AFC 9041                       		sub.w	d1,d0
00010AFE 0C40 0280                  		cmpi.w	#$280,d0
00010B02 6200 D648                  		bhi.w	DeleteObject
00010B06 4E75                       		rts	
00010B08                            ; ===========================================================================
00010B08                            
00010B08                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00010B08 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010B0C 323C 0080                  		move.w	#$80,d1
00010B10 0828 0000 0022             		btst	#0,$22(a0)
00010B16 6700                       		beq.s	loc_FFE2
00010B18 4440                       		neg.w	d0
00010B1A D041                       		add.w	d1,d0
00010B1C                            
00010B1C                            loc_FFE2:
00010B1C 3228 0032                  		move.w	$32(a0),d1
00010B20 9240                       		sub.w	d0,d1
00010B22 3141 000C                  		move.w	d1,$C(a0)
00010B26 4E75                       		rts	
00010B28                            ; ===========================================================================
00010B28                            
00010B28                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00010B28 7600                       		moveq	#0,d3
00010B2A 1628 0019                  		move.b	$19(a0),d3
00010B2E D643                       		add.w	d3,d3
00010B30 7208                       		moveq	#8,d1
00010B32 0828 0000 0022             		btst	#0,$22(a0)
00010B38 6700                       		beq.s	loc_10004
00010B3A 4441                       		neg.w	d1
00010B3C 4443                       		neg.w	d3
00010B3E                            
00010B3E                            loc_10004:
00010B3E 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00010B42 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00010B44 3028 0008                  		move.w	8(a0),d0
00010B48 9068 0030                  		sub.w	$30(a0),d0
00010B4C B043                       		cmp.w	d3,d0
00010B4E 6700                       		beq.s	Obj52_0A_Wait
00010B50 D368 0008                  		add.w	d1,8(a0)	; move platform
00010B54 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00010B5A 4E75                       		rts	
00010B5C                            ; ===========================================================================
00010B5C                            
00010B5C                            Obj52_0A_Wait:
00010B5C 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00010B60 6600                       		bne.s	locret_1002E	; if time remains, branch
00010B62 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00010B68                            
00010B68                            locret_1002E:
00010B68 4E75                       		rts	
00010B6A                            ; ===========================================================================
00010B6A                            
00010B6A                            Obj52_0A_Back:
00010B6A 3028 0008                  		move.w	8(a0),d0
00010B6E 9068 0030                  		sub.w	$30(a0),d0
00010B72 6700                       		beq.s	Obj52_0A_Reset
00010B74 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00010B78 4E75                       		rts	
00010B7A                            ; ===========================================================================
00010B7A                            
00010B7A                            Obj52_0A_Reset:
00010B7A 4268 0036                  		clr.w	$36(a0)
00010B7E 5328 0028                  		subq.b	#1,$28(a0)
00010B82 4E75                       		rts	
00010B84                            ; ===========================================================================
00010B84                            ; ---------------------------------------------------------------------------
00010B84                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010B84                            ; ---------------------------------------------------------------------------
00010B84                            Map_obj52:
00010B84                            	include "_maps\obj52mz.asm"
00010B84                            ; ---------------------------------------------------------------------------
00010B84                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010B84                            ; ---------------------------------------------------------------------------
00010B84 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00010B88 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00010B8C 0000                       		dc.w byte_1008F-Map_obj52
00010B8E 01                         byte_10054:	dc.b 1
00010B8F F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010B94 02                         byte_1005A:	dc.b 2
00010B95 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00010B9A F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00010B9F 04                         byte_10065:	dc.b 4
00010BA0 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00010BA5 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00010BAA F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00010BAF 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00010BB4 04                         byte_1007A:	dc.b 4
00010BB5 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00010BBA F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00010BBF F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00010BC4 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00010BC9 03                         byte_1008F:	dc.b 3
00010BCA F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00010BCF F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010BD4 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00010BDA 00                         		even
00010BDA 00                         		even
00010BDA                            
00010BDA                            ; ---------------------------------------------------------------------------
00010BDA                            ; Sprite mappings - moving block (LZ)
00010BDA                            ; ---------------------------------------------------------------------------
00010BDA                            Map_obj52a:
00010BDA                            	include "_maps\obj52lz.asm"
00010BDA                            ; ---------------------------------------------------------------------------
00010BDA                            ; Sprite mappings - moving block (LZ)
00010BDA                            ; ---------------------------------------------------------------------------
00010BDA 0000                       		dc.w byte_100A2-Map_obj52a
00010BDC 01                         byte_100A2:	dc.b 1
00010BDD F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00010BE2                            		even
00010BE2                            		even
00010BE2                            
00010BE2                            ; ===========================================================================
00010BE2                            ; ---------------------------------------------------------------------------
00010BE2                            ; Object 55 - Basaran enemy (MZ)
00010BE2                            ; ---------------------------------------------------------------------------
00010BE2                            
00010BE2                            Obj55:					; XREF: Obj_Index
00010BE2 7000                       		moveq	#0,d0
00010BE4 1028 0024                  		move.b	$24(a0),d0
00010BE8 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00010BEC 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00010BF0                            ; ===========================================================================
00010BF0 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00010BF2 0000                       		dc.w Obj55_Action-Obj55_Index
00010BF4                            ; ===========================================================================
00010BF4                            
00010BF4                            Obj55_Main:				; XREF: Obj55_Index
00010BF4 5428 0024                  		addq.b	#2,$24(a0)
00010BF8 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00010C00 317C 84B8 0002             		move.w	#$84B8,2(a0)
00010C06 117C 0004 0001             		move.b	#4,1(a0)
00010C0C 117C 000C 0016             		move.b	#$C,$16(a0)
00010C12 117C 0002 0018             		move.b	#2,$18(a0)
00010C18 117C 000B 0020             		move.b	#$B,$20(a0)
00010C1E 117C 0010 0019             		move.b	#$10,$19(a0)
00010C24                            
00010C24                            Obj55_Action:				; XREF: Obj55_Index
00010C24 7000                       		moveq	#0,d0
00010C26 1028 0025                  		move.b	$25(a0),d0
00010C2A 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00010C2E 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00010C32 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00010C38 6100 A5E8                  		bsr.w	AnimateSprite
00010C3C 6000 F594                  		bra.w	MarkObjGone
00010C40                            ; ===========================================================================
00010C40 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00010C42 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00010C44 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00010C46 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00010C48                            ; ===========================================================================
00010C48                            
00010C48                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00010C48 343C 0080                  		move.w	#$80,d2
00010C4C 6100 0000                  		bsr.w	Obj55_ChkSonic
00010C50 6400                       		bcc.s	Obj55_NoDrop
00010C52 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010C56 3140 0036                  		move.w	d0,$36(a0)
00010C5A 9068 000C                  		sub.w	$C(a0),d0
00010C5E 6500                       		bcs.s	Obj55_NoDrop
00010C60 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00010C64 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00010C66 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00010C6A 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00010C6C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010C70 D007                       		add.b	d7,d0
00010C72 0200 0007                  		andi.b	#7,d0
00010C76 6600                       		bne.s	Obj55_NoDrop
00010C78 117C 0001 001C             		move.b	#1,$1C(a0)
00010C7E 5428 0025                  		addq.b	#2,$25(a0)
00010C82                            
00010C82                            Obj55_NoDrop:
00010C82 4E75                       		rts	
00010C84                            ; ===========================================================================
00010C84                            
00010C84                            Obj55_DropFly:				; XREF: Obj55_Index2
00010C84 6100 D464                  		bsr.w	SpeedToPos
00010C88 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
00010C8E 343C 0080                  		move.w	#$80,d2
00010C92 6100 0000                  		bsr.w	Obj55_ChkSonic
00010C96 3028 0036                  		move.w	$36(a0),d0
00010C9A 9068 000C                  		sub.w	$C(a0),d0
00010C9E 6500                       		bcs.s	Obj55_ChkDel
00010CA0 0C40 0010                  		cmpi.w	#$10,d0
00010CA4 6400                       		bcc.s	locret_10180
00010CA6 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00010CAA 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00010CB0 117C 0002 001C             		move.b	#2,$1C(a0)
00010CB6 5428 0025                  		addq.b	#2,$25(a0)
00010CBA                            
00010CBA                            locret_10180:
00010CBA 4E75                       		rts	
00010CBC                            ; ===========================================================================
00010CBC                            
00010CBC                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00010CBC 4A28 0001                  		tst.b	1(a0)
00010CC0 6A00 D48A                  		bpl.w	DeleteObject
00010CC4 4E75                       		rts	
00010CC6                            ; ===========================================================================
00010CC6                            
00010CC6                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00010CC6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010CCA 0200 000F                  		andi.b	#$F,d0
00010CCE 6600                       		bne.s	loc_101A0
00010CD0 303C 00C0                  		move.w	#$C0,d0
00010CD4 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play flapping sound
00010CDA                            
00010CDA                            loc_101A0:
00010CDA 6100 D40E                  		bsr.w	SpeedToPos
00010CDE 3038 D008                  		move.w	($FFFFD008).w,d0
00010CE2 9068 0008                  		sub.w	8(a0),d0
00010CE6 6400                       		bcc.s	loc_101B0
00010CE8 4440                       		neg.w	d0
00010CEA                            
00010CEA                            loc_101B0:
00010CEA 0C40 0080                  		cmpi.w	#$80,d0
00010CEE 6500                       		bcs.s	locret_101C6
00010CF0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010CF4 D007                       		add.b	d7,d0
00010CF6 0200 0007                  		andi.b	#7,d0
00010CFA 6600                       		bne.s	locret_101C6
00010CFC 5428 0025                  		addq.b	#2,$25(a0)
00010D00                            
00010D00                            locret_101C6:
00010D00 4E75                       		rts	
00010D02                            ; ===========================================================================
00010D02                            
00010D02                            Obj55_FlyUp:				; XREF: Obj55_Index2
00010D02 6100 D3E6                  		bsr.w	SpeedToPos
00010D06 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00010D0C 6100 0000                  		bsr.w	ObjHitCeiling
00010D10 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00010D12 6A00                       		bpl.s	locret_101F4	; if not, branch
00010D14 9368 000C                  		sub.w	d1,$C(a0)
00010D18 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010D1E 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00010D22 4268 0012                  		clr.w	$12(a0)
00010D26 4228 001C                  		clr.b	$1C(a0)
00010D2A 4228 0025                  		clr.b	$25(a0)
00010D2E                            
00010D2E                            locret_101F4:
00010D2E 4E75                       		rts	
00010D30                            ; ===========================================================================
00010D30                            
00010D30                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00010D30 323C 0100                  		move.w	#$100,d1
00010D34 08E8 0000 0022             		bset	#0,$22(a0)
00010D3A 3038 D008                  		move.w	($FFFFD008).w,d0
00010D3E 9068 0008                  		sub.w	8(a0),d0
00010D42 6400                       		bcc.s	loc_10214
00010D44 4440                       		neg.w	d0
00010D46 4441                       		neg.w	d1
00010D48 08A8 0000 0022             		bclr	#0,$22(a0)
00010D4E                            
00010D4E                            loc_10214:
00010D4E B042                       		cmp.w	d2,d0
00010D50 4E75                       		rts	
00010D52                            ; ===========================================================================
00010D52 6100 D396                  		bsr.w	SpeedToPos
00010D56 6100 D3B8                  		bsr.w	DisplaySprite
00010D5A 4A28 0001                  		tst.b	1(a0)
00010D5E 6A00 D3EC                  		bpl.w	DeleteObject
00010D62 4E75                       		rts	
00010D64                            ; ===========================================================================
00010D64                            Ani_obj55:
00010D64                            	include "_anim\obj55.asm"
00010D64                            ; ---------------------------------------------------------------------------
00010D64                            ; Animation script - Basaran enemy
00010D64                            ; ---------------------------------------------------------------------------
00010D64 0000                       		dc.w byte_10230-Ani_obj55
00010D66 0000                       		dc.w byte_10234-Ani_obj55
00010D68 0000                       		dc.w byte_10238-Ani_obj55
00010D6A 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00010D6E 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00010D72 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00010D78                            		even
00010D78                            		even
00010D78                            
00010D78                            ; ---------------------------------------------------------------------------
00010D78                            ; Sprite mappings - Basaran enemy (MZ)
00010D78                            ; ---------------------------------------------------------------------------
00010D78                            Map_obj55:
00010D78                            	include "_maps\obj55.asm"
00010D78                            ; ---------------------------------------------------------------------------
00010D78                            ; Sprite mappings - Basaran enemy (MZ)
00010D78                            ; ---------------------------------------------------------------------------
00010D78 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00010D7C 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00010D80 01                         byte_10246:	dc.b 1
00010D81 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00010D86 03                         byte_1024C:	dc.b 3
00010D87 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00010D8C 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00010D91 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00010D96 04                         byte_1025C:	dc.b 4
00010D97 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00010D9C 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00010DA1 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00010DA6 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00010DAB 04                         byte_10271:	dc.b 4
00010DAC F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00010DB1 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00010DB6 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00010DBB FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00010DC0                            		even
00010DC0                            		even
00010DC0                            
00010DC0                            ; ===========================================================================
00010DC0                            ; ---------------------------------------------------------------------------
00010DC0                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00010DC0                            ; ---------------------------------------------------------------------------
00010DC0                            
00010DC0                            Obj56:					; XREF: Obj_Index
00010DC0 7000                       		moveq	#0,d0
00010DC2 1028 0024                  		move.b	$24(a0),d0
00010DC6 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010DCA 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010DCE                            ; ===========================================================================
00010DCE 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00010DD0 0000                       		dc.w Obj56_Action-Obj56_Index
00010DD2                            
00010DD2 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00010DD4 2020                       		dc.b  $20, $20
00010DD6 1020                       		dc.b  $10, $20
00010DD8 201A                       		dc.b  $20, $1A
00010DDA 1027                       		dc.b  $10, $27
00010DDC 1010                       		dc.b  $10, $10
00010DDE 0820                       		dc.b	8, $20
00010DE0 4010                       		dc.b  $40, $10
00010DE2                            ; ===========================================================================
00010DE2                            
00010DE2                            Obj56_Main:				; XREF: Obj56_Index
00010DE2 5428 0024                  		addq.b	#2,$24(a0)
00010DE6 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010DEE 317C 4000 0002             		move.w	#$4000,2(a0)
00010DF4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010DFA 6600                       		bne.s	loc_102C8
00010DFC 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010E02                            
00010E02                            loc_102C8:
00010E02 117C 0004 0001             		move.b	#4,1(a0)
00010E08 117C 0003 0018             		move.b	#3,$18(a0)
00010E0E 7000                       		moveq	#0,d0
00010E10 1028 0028                  		move.b	$28(a0),d0
00010E14 E648                       		lsr.w	#3,d0
00010E16 0240 000E                  		andi.w	#$E,d0
00010E1A 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010E1E 115A 0019                  		move.b	(a2)+,$19(a0)
00010E22 1152 0016                  		move.b	(a2),$16(a0)
00010E26 E248                       		lsr.w	#1,d0
00010E28 1140 001A                  		move.b	d0,$1A(a0)
00010E2C 3168 0008 0034             		move.w	8(a0),$34(a0)
00010E32 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010E38 7000                       		moveq	#0,d0
00010E3A 1012                       		move.b	(a2),d0
00010E3C D040                       		add.w	d0,d0
00010E3E 3140 003A                  		move.w	d0,$3A(a0)
00010E42 7000                       		moveq	#0,d0
00010E44 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010E4A 6700                       		beq.s	loc_10332
00010E4C 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010E50 0240 000F                  		andi.w	#$F,d0
00010E54 5140                       		subq.w	#8,d0
00010E56 6500                       		bcs.s	loc_10332
00010E58 E548                       		lsl.w	#2,d0
00010E5A 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010E5E 45F2 0000                  		lea	(a2,d0.w),a2
00010E62 4A52                       		tst.w	(a2)
00010E64 6A00                       		bpl.s	loc_10332
00010E66 0868 0000 0022             		bchg	#0,$22(a0)
00010E6C                            
00010E6C                            loc_10332:
00010E6C 1028 0028                  		move.b	$28(a0),d0
00010E70 6A00                       		bpl.s	Obj56_Action
00010E72 0200 000F                  		andi.b	#$F,d0
00010E76 1140 003C                  		move.b	d0,$3C(a0)
00010E7A 117C 0005 0028             		move.b	#5,$28(a0)
00010E80 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00010E86 6600                       		bne.s	Obj56_ChkGone
00010E88 117C 000C 0028             		move.b	#$C,$28(a0)
00010E8E 317C 0080 003A             		move.w	#$80,$3A(a0)
00010E94                            
00010E94                            Obj56_ChkGone:
00010E94 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010E98 7000                       		moveq	#0,d0
00010E9A 1028 0023                  		move.b	$23(a0),d0
00010E9E 6700                       		beq.s	Obj56_Action
00010EA0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010EA6 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010EAC 6700                       		beq.s	Obj56_Action
00010EAE 5228 0028                  		addq.b	#1,$28(a0)
00010EB2 4268 003A                  		clr.w	$3A(a0)
00010EB6                            
00010EB6                            Obj56_Action:				; XREF: Obj56_Index
00010EB6 3F28 0008                  		move.w	8(a0),-(sp)
00010EBA 7000                       		moveq	#0,d0
00010EBC 1028 0028                  		move.b	$28(a0),d0	; get object type
00010EC0 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010EC4 D040                       		add.w	d0,d0
00010EC6 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010ECA 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010ECE 381F                       		move.w	(sp)+,d4
00010ED0 4A28 0001                  		tst.b	1(a0)
00010ED4 6A00                       		bpl.s	Obj56_ChkDel
00010ED6 7200                       		moveq	#0,d1
00010ED8 1228 0019                  		move.b	$19(a0),d1
00010EDC 0641 000B                  		addi.w	#$B,d1
00010EE0 7400                       		moveq	#0,d2
00010EE2 1428 0016                  		move.b	$16(a0),d2
00010EE6 3602                       		move.w	d2,d3
00010EE8 5243                       		addq.w	#1,d3
00010EEA 6100 F60E                  		bsr.w	SolidObject
00010EEE                            
00010EEE                            Obj56_ChkDel:
00010EEE 3028 0034                  		move.w	$34(a0),d0
00010EF2 0240 FF80                  		andi.w	#$FF80,d0
00010EF6 3238 F700                  		move.w	($FFFFF700).w,d1
00010EFA 0441 0080                  		subi.w	#$80,d1
00010EFE 0241 FF80                  		andi.w	#$FF80,d1
00010F02 9041                       		sub.w	d1,d0
00010F04 0C40 0280                  		cmpi.w	#$280,d0
00010F08 6200 D242                  		bhi.w	DeleteObject
00010F0C 6000 D202                  		bra.w	DisplaySprite
00010F10                            ; ===========================================================================
00010F10 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010F14 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010F18 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010F1C 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010F20 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010F24 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010F28 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010F2C                            ; ===========================================================================
00010F2C                            
00010F2C                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010F2C 4E75                       		rts	
00010F2E                            ; ===========================================================================
00010F2E                            
00010F2E                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010F2E 323C 0040                  		move.w	#$40,d1
00010F32 7000                       		moveq	#0,d0
00010F34 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010F38 6000                       		bra.s	Obj56_Move_LR
00010F3A                            ; ===========================================================================
00010F3A                            
00010F3A                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010F3A 323C 0080                  		move.w	#$80,d1
00010F3E 7000                       		moveq	#0,d0
00010F40 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010F44                            
00010F44                            Obj56_Move_LR:
00010F44 0828 0000 0022             		btst	#0,$22(a0)
00010F4A 6700                       		beq.s	loc_10416
00010F4C 4440                       		neg.w	d0
00010F4E D041                       		add.w	d1,d0
00010F50                            
00010F50                            loc_10416:
00010F50 3228 0034                  		move.w	$34(a0),d1
00010F54 9240                       		sub.w	d0,d1
00010F56 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010F5A 4E75                       		rts	
00010F5C                            ; ===========================================================================
00010F5C                            
00010F5C                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010F5C 323C 0040                  		move.w	#$40,d1
00010F60 7000                       		moveq	#0,d0
00010F62 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010F66 6000                       		bra.s	Obj56_Move_UD
00010F68                            ; ===========================================================================
00010F68                            
00010F68                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00010F68 323C 0080                  		move.w	#$80,d1
00010F6C 7000                       		moveq	#0,d0
00010F6E 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010F72                            
00010F72                            Obj56_Move_UD:
00010F72 0828 0000 0022             		btst	#0,$22(a0)
00010F78 6700                       		beq.s	loc_10444
00010F7A 4440                       		neg.w	d0
00010F7C D041                       		add.w	d1,d0
00010F7E                            
00010F7E                            loc_10444:
00010F7E 3228 0030                  		move.w	$30(a0),d1
00010F82 9240                       		sub.w	d0,d1
00010F84 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010F88 4E75                       		rts	
00010F8A                            ; ===========================================================================
00010F8A                            
00010F8A                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00010F8A 4A28 0038                  		tst.b	$38(a0)
00010F8E 6600                       		bne.s	loc_104A4
00010F90 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010F96 6600                       		bne.s	loc_1047A	; if not, branch
00010F98 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010F9E 6600                       		bne.s	loc_1047A
00010FA0 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010FA4 3038 D008                  		move.w	($FFFFD008).w,d0
00010FA8 B068 0008                  		cmp.w	8(a0),d0
00010FAC 6400                       		bcc.s	loc_1047A
00010FAE 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010FB4                            
00010FB4                            loc_1047A:
00010FB4 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010FB8 7000                       		moveq	#0,d0
00010FBA 1028 003C                  		move.b	$3C(a0),d0
00010FBE 0832 0000 0000             		btst	#0,(a2,d0.w)
00010FC4 6700                       		beq.s	loc_104AE
00010FC6 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010FCC 6600                       		bne.s	loc_1049E	; if not, branch
00010FCE 0C00 0003                  		cmpi.b	#3,d0
00010FD2 6600                       		bne.s	loc_1049E
00010FD4 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010FD8                            
00010FD8                            loc_1049E:
00010FD8 117C 0001 0038             		move.b	#1,$38(a0)
00010FDE                            
00010FDE                            loc_104A4:
00010FDE 4A68 003A                  		tst.w	$3A(a0)
00010FE2 6700                       		beq.s	loc_104C8
00010FE4 5568 003A                  		subq.w	#2,$3A(a0)
00010FE8                            
00010FE8                            loc_104AE:
00010FE8 3028 003A                  		move.w	$3A(a0),d0
00010FEC 0828 0000 0022             		btst	#0,$22(a0)
00010FF2 6700                       		beq.s	loc_104BC
00010FF4 4440                       		neg.w	d0
00010FF6                            
00010FF6                            loc_104BC:
00010FF6 3228 0030                  		move.w	$30(a0),d1
00010FFA D240                       		add.w	d0,d1
00010FFC 3141 000C                  		move.w	d1,$C(a0)
00011000 4E75                       		rts	
00011002                            ; ===========================================================================
00011002                            
00011002                            loc_104C8:
00011002 5228 0028                  		addq.b	#1,$28(a0)
00011006 4228 0038                  		clr.b	$38(a0)
0001100A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001100E 7000                       		moveq	#0,d0
00011010 1028 0023                  		move.b	$23(a0),d0
00011014 67D2                       		beq.s	loc_104AE
00011016 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001101C 60CA                       		bra.s	loc_104AE
0001101E                            ; ===========================================================================
0001101E                            
0001101E                            Obj56_Type06:				; XREF: Obj56_TypeIndex
0001101E 4A28 0038                  		tst.b	$38(a0)
00011022 6600                       		bne.s	loc_10500
00011024 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011028 7000                       		moveq	#0,d0
0001102A 1028 003C                  		move.b	$3C(a0),d0
0001102E 4A32 0000                  		tst.b	(a2,d0.w)
00011032 6A00                       		bpl.s	loc_10512
00011034 117C 0001 0038             		move.b	#1,$38(a0)
0001103A                            
0001103A                            loc_10500:
0001103A 7000                       		moveq	#0,d0
0001103C 1028 0016                  		move.b	$16(a0),d0
00011040 D040                       		add.w	d0,d0
00011042 B068 003A                  		cmp.w	$3A(a0),d0
00011046 6700                       		beq.s	loc_1052C
00011048 5468 003A                  		addq.w	#2,$3A(a0)
0001104C                            
0001104C                            loc_10512:
0001104C 3028 003A                  		move.w	$3A(a0),d0
00011050 0828 0000 0022             		btst	#0,$22(a0)
00011056 6700                       		beq.s	loc_10520
00011058 4440                       		neg.w	d0
0001105A                            
0001105A                            loc_10520:
0001105A 3228 0030                  		move.w	$30(a0),d1
0001105E D240                       		add.w	d0,d1
00011060 3141 000C                  		move.w	d1,$C(a0)
00011064 4E75                       		rts	
00011066                            ; ===========================================================================
00011066                            
00011066                            loc_1052C:
00011066 5328 0028                  		subq.b	#1,$28(a0)
0001106A 4228 0038                  		clr.b	$38(a0)
0001106E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011072 7000                       		moveq	#0,d0
00011074 1028 0023                  		move.b	$23(a0),d0
00011078 67D2                       		beq.s	loc_10512
0001107A 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00011080 60CA                       		bra.s	loc_10512
00011082                            ; ===========================================================================
00011082                            
00011082                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00011082 4A28 0038                  		tst.b	$38(a0)
00011086 6600                       		bne.s	loc_1055E
00011088 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
0001108C 6700                       		beq.s	locret_10578
0001108E 117C 0001 0038             		move.b	#1,$38(a0)
00011094 4268 003A                  		clr.w	$3A(a0)
00011098                            
00011098                            loc_1055E:
00011098 5268 0008                  		addq.w	#1,8(a0)
0001109C 3168 0008 0034             		move.w	8(a0),$34(a0)
000110A2 5268 003A                  		addq.w	#1,$3A(a0)
000110A6 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
000110AC 6600                       		bne.s	locret_10578
000110AE 4228 0028                  		clr.b	$28(a0)
000110B2                            
000110B2                            locret_10578:
000110B2 4E75                       		rts	
000110B4                            ; ===========================================================================
000110B4                            
000110B4                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
000110B4 4A28 0038                  		tst.b	$38(a0)
000110B8 6600                       		bne.s	loc_10598
000110BA 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000110BE 7000                       		moveq	#0,d0
000110C0 1028 003C                  		move.b	$3C(a0),d0
000110C4 0832 0000 0000             		btst	#0,(a2,d0.w)
000110CA 6700                       		beq.s	loc_105A2
000110CC 117C 0001 0038             		move.b	#1,$38(a0)
000110D2                            
000110D2                            loc_10598:
000110D2 4A68 003A                  		tst.w	$3A(a0)
000110D6 6700                       		beq.s	loc_105C0
000110D8 5568 003A                  		subq.w	#2,$3A(a0)
000110DC                            
000110DC                            loc_105A2:
000110DC 3028 003A                  		move.w	$3A(a0),d0
000110E0 0828 0000 0022             		btst	#0,$22(a0)
000110E6 6700                       		beq.s	loc_105B4
000110E8 4440                       		neg.w	d0
000110EA 0640 0080                  		addi.w	#$80,d0
000110EE                            
000110EE                            loc_105B4:
000110EE 3228 0034                  		move.w	$34(a0),d1
000110F2 D240                       		add.w	d0,d1
000110F4 3141 0008                  		move.w	d1,8(a0)
000110F8 4E75                       		rts	
000110FA                            ; ===========================================================================
000110FA                            
000110FA                            loc_105C0:
000110FA 5228 0028                  		addq.b	#1,$28(a0)
000110FE 4228 0038                  		clr.b	$38(a0)
00011102 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011106 7000                       		moveq	#0,d0
00011108 1028 0023                  		move.b	$23(a0),d0
0001110C 67CE                       		beq.s	loc_105A2
0001110E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00011114 60C6                       		bra.s	loc_105A2
00011116                            ; ===========================================================================
00011116                            
00011116                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00011116 4A28 0038                  		tst.b	$38(a0)
0001111A 6600                       		bne.s	loc_105F8
0001111C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011120 7000                       		moveq	#0,d0
00011122 1028 003C                  		move.b	$3C(a0),d0
00011126 4A32 0000                  		tst.b	(a2,d0.w)
0001112A 6A00                       		bpl.s	loc_10606
0001112C 117C 0001 0038             		move.b	#1,$38(a0)
00011132                            
00011132                            loc_105F8:
00011132 303C 0080                  		move.w	#$80,d0
00011136 B068 003A                  		cmp.w	$3A(a0),d0
0001113A 6700                       		beq.s	loc_10624
0001113C 5468 003A                  		addq.w	#2,$3A(a0)
00011140                            
00011140                            loc_10606:
00011140 3028 003A                  		move.w	$3A(a0),d0
00011144 0828 0000 0022             		btst	#0,$22(a0)
0001114A 6700                       		beq.s	loc_10618
0001114C 4440                       		neg.w	d0
0001114E 0640 0080                  		addi.w	#$80,d0
00011152                            
00011152                            loc_10618:
00011152 3228 0034                  		move.w	$34(a0),d1
00011156 D240                       		add.w	d0,d1
00011158 3141 0008                  		move.w	d1,8(a0)
0001115C 4E75                       		rts	
0001115E                            ; ===========================================================================
0001115E                            
0001115E                            loc_10624:
0001115E 5328 0028                  		subq.b	#1,$28(a0)
00011162 4228 0038                  		clr.b	$38(a0)
00011166 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001116A 7000                       		moveq	#0,d0
0001116C 1028 0023                  		move.b	$23(a0),d0
00011170 67CE                       		beq.s	loc_10606
00011172 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00011178 60C6                       		bra.s	loc_10606
0001117A                            ; ===========================================================================
0001117A                            
0001117A                            Obj56_Type08:				; XREF: Obj56_TypeIndex
0001117A 323C 0010                  		move.w	#$10,d1
0001117E 7000                       		moveq	#0,d0
00011180 1038 FE88                  		move.b	($FFFFFE88).w,d0
00011184 E248                       		lsr.w	#1,d0
00011186 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
0001118A 6000                       		bra.s	Obj56_Move_Sqr
0001118C                            ; ===========================================================================
0001118C                            
0001118C                            Obj56_Type09:				; XREF: Obj56_TypeIndex
0001118C 323C 0030                  		move.w	#$30,d1
00011190 7000                       		moveq	#0,d0
00011192 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00011196 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
0001119A 6000                       		bra.s	Obj56_Move_Sqr
0001119C                            ; ===========================================================================
0001119C                            
0001119C                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
0001119C 323C 0050                  		move.w	#$50,d1
000111A0 7000                       		moveq	#0,d0
000111A2 1038 FE90                  		move.b	($FFFFFE90).w,d0
000111A6 3638 FE92                  		move.w	($FFFFFE92).w,d3
000111AA 6000                       		bra.s	Obj56_Move_Sqr
000111AC                            ; ===========================================================================
000111AC                            
000111AC                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
000111AC 323C 0070                  		move.w	#$70,d1
000111B0 7000                       		moveq	#0,d0
000111B2 1038 FE94                  		move.b	($FFFFFE94).w,d0
000111B6 3638 FE96                  		move.w	($FFFFFE96).w,d3
000111BA                            
000111BA                            Obj56_Move_Sqr:
000111BA 4A43                       		tst.w	d3
000111BC 6600                       		bne.s	loc_1068E
000111BE 5228 0022                  		addq.b	#1,$22(a0)
000111C2 0228 0003 0022             		andi.b	#3,$22(a0)
000111C8                            
000111C8                            loc_1068E:
000111C8 1428 0022                  		move.b	$22(a0),d2
000111CC 0202 0003                  		andi.b	#3,d2
000111D0 6600                       		bne.s	loc_106AE
000111D2 9041                       		sub.w	d1,d0
000111D4 D068 0034                  		add.w	$34(a0),d0
000111D8 3140 0008                  		move.w	d0,8(a0)
000111DC 4441                       		neg.w	d1
000111DE D268 0030                  		add.w	$30(a0),d1
000111E2 3141 000C                  		move.w	d1,$C(a0)
000111E6 4E75                       		rts	
000111E8                            ; ===========================================================================
000111E8                            
000111E8                            loc_106AE:
000111E8 5302                       		subq.b	#1,d2
000111EA 6600                       		bne.s	loc_106CC
000111EC 5341                       		subq.w	#1,d1
000111EE 9041                       		sub.w	d1,d0
000111F0 4440                       		neg.w	d0
000111F2 D068 0030                  		add.w	$30(a0),d0
000111F6 3140 000C                  		move.w	d0,$C(a0)
000111FA 5241                       		addq.w	#1,d1
000111FC D268 0034                  		add.w	$34(a0),d1
00011200 3141 0008                  		move.w	d1,8(a0)
00011204 4E75                       		rts	
00011206                            ; ===========================================================================
00011206                            
00011206                            loc_106CC:
00011206 5302                       		subq.b	#1,d2
00011208 6600                       		bne.s	loc_106EA
0001120A 5341                       		subq.w	#1,d1
0001120C 9041                       		sub.w	d1,d0
0001120E 4440                       		neg.w	d0
00011210 D068 0034                  		add.w	$34(a0),d0
00011214 3140 0008                  		move.w	d0,8(a0)
00011218 5241                       		addq.w	#1,d1
0001121A D268 0030                  		add.w	$30(a0),d1
0001121E 3141 000C                  		move.w	d1,$C(a0)
00011222 4E75                       		rts	
00011224                            ; ===========================================================================
00011224                            
00011224                            loc_106EA:
00011224 9041                       		sub.w	d1,d0
00011226 D068 0030                  		add.w	$30(a0),d0
0001122A 3140 000C                  		move.w	d0,$C(a0)
0001122E 4441                       		neg.w	d1
00011230 D268 0034                  		add.w	$34(a0),d1
00011234 3141 0008                  		move.w	d1,8(a0)
00011238 4E75                       		rts	
0001123A                            ; ===========================================================================
0001123A                            ; ---------------------------------------------------------------------------
0001123A                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
0001123A                            ; ---------------------------------------------------------------------------
0001123A                            Map_obj56:
0001123A                            	include "_maps\obj56.asm"
0001123A                            ; ---------------------------------------------------------------------------
0001123A                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
0001123A                            ; ---------------------------------------------------------------------------
0001123A 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
0001123E 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00011242 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00011246 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
0001124A 01                         byte_10710:	dc.b 1
0001124B F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00011250 04                         byte_10716:	dc.b 4
00011251 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00011256 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
0001125B 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00011260 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00011265 02                         byte_1072B:	dc.b 2
00011266 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
0001126B 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00011270 04                         byte_10736:	dc.b 4
00011271 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00011276 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
0001127B 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00011280 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00011285 03                         byte_1074B:	dc.b 3
00011286 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
0001128B F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00011290 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00011295 01                         byte_1075B:	dc.b 1
00011296 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
0001129B 02                         byte_10761:	dc.b 2
0001129C E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
000112A1 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
000112A6 04                         byte_1076C:	dc.b 4
000112A7 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
000112AC F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
000112B1 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
000112B6 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
000112BC 00                         		even
000112BC 00                         		even
000112BC                            
000112BC                            ; ===========================================================================
000112BC                            ; ---------------------------------------------------------------------------
000112BC                            ; Object 57 - spiked balls (SYZ, LZ)
000112BC                            ; ---------------------------------------------------------------------------
000112BC                            
000112BC                            Obj57:					; XREF: Obj_Index
000112BC 7000                       		moveq	#0,d0
000112BE 1028 0024                  		move.b	$24(a0),d0
000112C2 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
000112C6 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
000112CA                            ; ===========================================================================
000112CA 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
000112CC 0000                       		dc.w Obj57_Move-Obj57_Index
000112CE 0000                       		dc.w Obj57_Display-Obj57_Index
000112D0                            ; ===========================================================================
000112D0                            
000112D0                            Obj57_Main:				; XREF: Obj57_Index
000112D0 5428 0024                  		addq.b	#2,$24(a0)
000112D4 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
000112DC 317C 03BA 0002             		move.w	#$3BA,2(a0)
000112E2 117C 0004 0001             		move.b	#4,1(a0)
000112E8 117C 0004 0018             		move.b	#4,$18(a0)
000112EE 117C 0008 0019             		move.b	#8,$19(a0)
000112F4 3168 0008 003A             		move.w	8(a0),$3A(a0)
000112FA 3168 000C 0038             		move.w	$C(a0),$38(a0)
00011300 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00011306 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001130C 6600                       		bne.s	loc_107E8
0001130E 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00011314 317C 0310 0002             		move.w	#$310,2(a0)
0001131A 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00011322                            
00011322                            loc_107E8:
00011322 1228 0028                  		move.b	$28(a0),d1	; get object type
00011326 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001132A 4881                       		ext.w	d1
0001132C E741                       		asl.w	#3,d1		; multiply by 8
0001132E 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00011332 1028 0022                  		move.b	$22(a0),d0
00011336 E418                       		ror.b	#2,d0
00011338 0200 00C0                  		andi.b	#-$40,d0
0001133C 1140 0026                  		move.b	d0,$26(a0)
00011340 45E8 0029                  		lea	$29(a0),a2
00011344 1228 0028                  		move.b	$28(a0),d1	; get object type
00011348 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
0001134C 14FC 0000                  		move.b	#0,(a2)+
00011350 3601                       		move.w	d1,d3
00011352 E94B                       		lsl.w	#4,d3
00011354 1143 003C                  		move.b	d3,$3C(a0)
00011358 5341                       		subq.w	#1,d1		; set chain length (type-1)
0001135A 6500                       		bcs.s	loc_10894
0001135C 0828 0003 0028             		btst	#3,$28(a0)
00011362 6700                       		beq.s	Obj57_MakeChain
00011364 5341                       		subq.w	#1,d1
00011366 6500                       		bcs.s	loc_10894
00011368                            
00011368                            Obj57_MakeChain:
00011368 6100 D23C                  		bsr.w	SingleObjLoad
0001136C 6600                       		bne.s	loc_10894
0001136E 5228 0029                  		addq.b	#1,$29(a0)
00011372 3A09                       		move.w	a1,d5
00011374 0445 D000                  		subi.w	#-$3000,d5
00011378 EC4D                       		lsr.w	#6,d5
0001137A 0245 007F                  		andi.w	#$7F,d5
0001137E 14C5                       		move.b	d5,(a2)+
00011380 137C 0004 0024             		move.b	#4,$24(a1)
00011386 1290                       		move.b	0(a0),0(a1)
00011388 2368 0004 0004             		move.l	4(a0),4(a1)
0001138E 3368 0002 0002             		move.w	2(a0),2(a1)
00011394 1368 0001 0001             		move.b	1(a0),1(a1)
0001139A 1368 0018 0018             		move.b	$18(a0),$18(a1)
000113A0 1368 0019 0019             		move.b	$19(a0),$19(a1)
000113A6 1368 0020 0020             		move.b	$20(a0),$20(a1)
000113AC 0403 0010                  		subi.b	#$10,d3
000113B0 1343 003C                  		move.b	d3,$3C(a1)
000113B4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000113BA 6600                       		bne.s	loc_10890
000113BC 4A03                       		tst.b	d3
000113BE 6600                       		bne.s	loc_10890
000113C0 137C 0002 001A             		move.b	#2,$1A(a1)
000113C6                            
000113C6                            loc_10890:
000113C6 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
000113CA                            
000113CA                            loc_10894:
000113CA 3A08                       		move.w	a0,d5
000113CC 0445 D000                  		subi.w	#-$3000,d5
000113D0 EC4D                       		lsr.w	#6,d5
000113D2 0245 007F                  		andi.w	#$7F,d5
000113D6 14C5                       		move.b	d5,(a2)+
000113D8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000113DE 6600                       		bne.s	Obj57_Move
000113E0 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
000113E6 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
000113EC                            
000113EC                            Obj57_Move:				; XREF: Obj57_Index
000113EC 6100 0000                  		bsr.w	Obj57_MoveSub
000113F0 6000 0000                  		bra.w	Obj57_ChkDel
000113F4                            ; ===========================================================================
000113F4                            
000113F4                            Obj57_MoveSub:				; XREF: Obj57_Move
000113F4 3028 003E                  		move.w	$3E(a0),d0
000113F8 D168 0026                  		add.w	d0,$26(a0)
000113FC 1028 0026                  		move.b	$26(a0),d0
00011400 4EB9 0000 33D4             		jsr	(CalcSine).l
00011406 3428 0038                  		move.w	$38(a0),d2
0001140A 3628 003A                  		move.w	$3A(a0),d3
0001140E 45E8 0029                  		lea	$29(a0),a2
00011412 7C00                       		moveq	#0,d6
00011414 1C1A                       		move.b	(a2)+,d6
00011416                            
00011416                            Obj57_MoveLoop:
00011416 7800                       		moveq	#0,d4
00011418 181A                       		move.b	(a2)+,d4
0001141A ED4C                       		lsl.w	#6,d4
0001141C 0684 00FF D000             		addi.l	#$FFD000,d4
00011422 2244                       		movea.l	d4,a1
00011424 7800                       		moveq	#0,d4
00011426 1829 003C                  		move.b	$3C(a1),d4
0001142A 2A04                       		move.l	d4,d5
0001142C C9C0                       		muls.w	d0,d4
0001142E E084                       		asr.l	#8,d4
00011430 CBC1                       		muls.w	d1,d5
00011432 E085                       		asr.l	#8,d5
00011434 D842                       		add.w	d2,d4
00011436 DA43                       		add.w	d3,d5
00011438 3344 000C                  		move.w	d4,$C(a1)
0001143C 3345 0008                  		move.w	d5,8(a1)
00011440 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00011444 4E75                       		rts	
00011446                            ; ===========================================================================
00011446                            
00011446                            Obj57_ChkDel:				; XREF: Obj57_Move
00011446 3028 003A                  		move.w	$3A(a0),d0
0001144A 0240 FF80                  		andi.w	#$FF80,d0
0001144E 3238 F700                  		move.w	($FFFFF700).w,d1
00011452 0441 0080                  		subi.w	#$80,d1
00011456 0241 FF80                  		andi.w	#$FF80,d1
0001145A 9041                       		sub.w	d1,d0
0001145C 0C40 0280                  		cmpi.w	#$280,d0
00011460 6200 0000                  		bhi.w	Obj57_Delete
00011464 6000 CCAA                  		bra.w	DisplaySprite
00011468                            ; ===========================================================================
00011468                            
00011468                            Obj57_Delete:				; XREF: Obj57_ChkDel
00011468 7400                       		moveq	#0,d2
0001146A 45E8 0029                  		lea	$29(a0),a2
0001146E 141A                       		move.b	(a2)+,d2
00011470                            
00011470                            Obj57_DelLoop:
00011470 7000                       		moveq	#0,d0
00011472 101A                       		move.b	(a2)+,d0
00011474 ED48                       		lsl.w	#6,d0
00011476 0680 00FF D000             		addi.l	#$FFD000,d0
0001147C 2240                       		movea.l	d0,a1
0001147E 6100 CCCE                  		bsr.w	DeleteObject2
00011482 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00011486                            
00011486 4E75                       		rts	
00011488                            ; ===========================================================================
00011488                            
00011488                            Obj57_Display:				; XREF: Obj57_Index
00011488 6000 CC86                  		bra.w	DisplaySprite
0001148C                            ; ===========================================================================
0001148C                            ; ---------------------------------------------------------------------------
0001148C                            ; Sprite mappings - chain of spiked balls (SYZ)
0001148C                            ; ---------------------------------------------------------------------------
0001148C                            Map_obj57:
0001148C                            	include "_maps\obj57syz.asm"
0001148C                            ; ---------------------------------------------------------------------------
0001148C                            ; Sprite mappings - chain of spiked balls (SYZ)
0001148C                            ; ---------------------------------------------------------------------------
0001148C 0000                       		dc.w byte_10958-Map_obj57
0001148E 01                         byte_10958:	dc.b 1
0001148F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00011494                            		even
00011494                            		even
00011494                            
00011494                            ; ---------------------------------------------------------------------------
00011494                            ; Sprite mappings - spiked ball	on a chain (LZ)
00011494                            ; ---------------------------------------------------------------------------
00011494                            Map_obj57a:
00011494                            	include "_maps\obj57lz.asm"
00011494                            ; ---------------------------------------------------------------------------
00011494                            ; Sprite mappings - spiked ball	on a chain (LZ)
00011494                            ; ---------------------------------------------------------------------------
00011494 0000                       		dc.w byte_10964-Map_obj57a
00011496 0000                       		dc.w byte_1096A-Map_obj57a
00011498 0000                       		dc.w byte_10970-Map_obj57a
0001149A 01                         byte_10964:	dc.b 1
0001149B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000114A0 01                         byte_1096A:	dc.b 1
000114A1 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
000114A6 01                         byte_10970:	dc.b 1
000114A7 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
000114AC                            		even
000114AC                            		even
000114AC                            
000114AC                            ; ===========================================================================
000114AC                            ; ---------------------------------------------------------------------------
000114AC                            ; Object 58 - giant spiked balls (SYZ)
000114AC                            ; ---------------------------------------------------------------------------
000114AC                            
000114AC                            Obj58:					; XREF: Obj_Index
000114AC 7000                       		moveq	#0,d0
000114AE 1028 0024                  		move.b	$24(a0),d0
000114B2 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
000114B6 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
000114BA                            ; ===========================================================================
000114BA 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
000114BC 0000                       		dc.w Obj58_Move-Obj58_Index
000114BE                            ; ===========================================================================
000114BE                            
000114BE                            Obj58_Main:				; XREF: Obj58_Index
000114BE 5428 0024                  		addq.b	#2,$24(a0)
000114C2 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
000114CA 317C 0396 0002             		move.w	#$396,2(a0)
000114D0 117C 0004 0001             		move.b	#4,1(a0)
000114D6 117C 0004 0018             		move.b	#4,$18(a0)
000114DC 117C 0018 0019             		move.b	#$18,$19(a0)
000114E2 3168 0008 003A             		move.w	8(a0),$3A(a0)
000114E8 3168 000C 0038             		move.w	$C(a0),$38(a0)
000114EE 117C 0086 0020             		move.b	#$86,$20(a0)
000114F4 1228 0028                  		move.b	$28(a0),d1	; get object type
000114F8 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000114FC 4881                       		ext.w	d1
000114FE E741                       		asl.w	#3,d1		; multiply by 8
00011500 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00011504 1028 0022                  		move.b	$22(a0),d0
00011508 E418                       		ror.b	#2,d0
0001150A 0200 00C0                  		andi.b	#$C0,d0
0001150E 1140 0026                  		move.b	d0,$26(a0)
00011512 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00011518                            
00011518                            Obj58_Move:				; XREF: Obj58_Index
00011518 7000                       		moveq	#0,d0
0001151A 1028 0028                  		move.b	$28(a0),d0	; get object type
0001151E 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00011522 D040                       		add.w	d0,d0
00011524 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00011528 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
0001152C 3028 003A                  		move.w	$3A(a0),d0
00011530 0240 FF80                  		andi.w	#$FF80,d0
00011534 3238 F700                  		move.w	($FFFFF700).w,d1
00011538 0441 0080                  		subi.w	#$80,d1
0001153C 0241 FF80                  		andi.w	#$FF80,d1
00011540 9041                       		sub.w	d1,d0
00011542 0C40 0280                  		cmpi.w	#$280,d0
00011546 6200 CC04                  		bhi.w	DeleteObject
0001154A 6000 CBC4                  		bra.w	DisplaySprite
0001154E                            ; ===========================================================================
0001154E 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00011550 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00011552 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00011554 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00011556                            ; ===========================================================================
00011556                            
00011556                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00011556 4E75                       		rts	
00011558                            ; ===========================================================================
00011558                            
00011558                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00011558 323C 0060                  		move.w	#$60,d1
0001155C 7000                       		moveq	#0,d0
0001155E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011562 0828 0000 0022             		btst	#0,$22(a0)
00011568 6700                       		beq.s	loc_10A38
0001156A 4440                       		neg.w	d0
0001156C D041                       		add.w	d1,d0
0001156E                            
0001156E                            loc_10A38:
0001156E 3228 003A                  		move.w	$3A(a0),d1
00011572 9240                       		sub.w	d0,d1
00011574 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011578 4E75                       		rts	
0001157A                            ; ===========================================================================
0001157A                            
0001157A                            Obj58_Type02:				; XREF: Obj58_TypeIndex
0001157A 323C 0060                  		move.w	#$60,d1
0001157E 7000                       		moveq	#0,d0
00011580 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011584 0828 0000 0022             		btst	#0,$22(a0)
0001158A 6700                       		beq.s	loc_10A5C
0001158C 4440                       		neg.w	d0
0001158E 0640 0080                  		addi.w	#$80,d0
00011592                            
00011592                            loc_10A5C:
00011592 3228 0038                  		move.w	$38(a0),d1
00011596 9240                       		sub.w	d0,d1
00011598 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
0001159C 4E75                       		rts	
0001159E                            ; ===========================================================================
0001159E                            
0001159E                            Obj58_Type03:				; XREF: Obj58_TypeIndex
0001159E 3028 003E                  		move.w	$3E(a0),d0
000115A2 D168 0026                  		add.w	d0,$26(a0)
000115A6 1028 0026                  		move.b	$26(a0),d0
000115AA 4EB9 0000 33D4             		jsr	(CalcSine).l
000115B0 3428 0038                  		move.w	$38(a0),d2
000115B4 3628 003A                  		move.w	$3A(a0),d3
000115B8 7800                       		moveq	#0,d4
000115BA 1828 003C                  		move.b	$3C(a0),d4
000115BE 2A04                       		move.l	d4,d5
000115C0 C9C0                       		muls.w	d0,d4
000115C2 E084                       		asr.l	#8,d4
000115C4 CBC1                       		muls.w	d1,d5
000115C6 E085                       		asr.l	#8,d5
000115C8 D842                       		add.w	d2,d4
000115CA DA43                       		add.w	d3,d5
000115CC 3144 000C                  		move.w	d4,$C(a0)
000115D0 3145 0008                  		move.w	d5,8(a0)
000115D4 4E75                       		rts	
000115D6                            ; ===========================================================================
000115D6                            ; ---------------------------------------------------------------------------
000115D6                            ; Sprite mappings - SBZ	spiked ball on a chain
000115D6                            ; ---------------------------------------------------------------------------
000115D6                            Map_obj15b:
000115D6                            	include "_maps\obj15sbz.asm"
000115D6                            ; ---------------------------------------------------------------------------
000115D6                            ; Sprite mappings - spiked ball on a chain (SBZ)
000115D6                            ; ---------------------------------------------------------------------------
000115D6 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
000115DA 0000                       		dc.w byte_10AC6-Map_obj15b
000115DC 05                         byte_10AA6:	dc.b 5
000115DD E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
000115E2 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
000115E7 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
000115EC F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
000115F1 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
000115F6 01                         byte_10AC0:	dc.b 1
000115F7 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
000115FC 02                         byte_10AC6:	dc.b 2
000115FD F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00011602 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00011608 00                         		even
00011608 00                         		even
00011608                            
00011608                            ; ===========================================================================
00011608                            ; ---------------------------------------------------------------------------
00011608                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00011608                            ; ---------------------------------------------------------------------------
00011608                            
00011608                            Obj59:					; XREF: Obj_Index
00011608 7000                       		moveq	#0,d0
0001160A 1028 0024                  		move.b	$24(a0),d0
0001160E 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00011612 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
00011616 3028 0032                  		move.w	$32(a0),d0
0001161A 0240 FF80                  		andi.w	#$FF80,d0
0001161E 3238 F700                  		move.w	($FFFFF700).w,d1
00011622 0441 0080                  		subi.w	#$80,d1
00011626 0241 FF80                  		andi.w	#$FF80,d1
0001162A 9041                       		sub.w	d1,d0
0001162C 0C40 0280                  		cmpi.w	#$280,d0
00011630 6200 CB1A                  		bhi.w	DeleteObject
00011634 6000 CADA                  		bra.w	DisplaySprite
00011638                            ; ===========================================================================
00011638 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
0001163A 0000                       		dc.w Obj59_Platform-Obj59_Index
0001163C 0000                       		dc.w Obj59_Action-Obj59_Index
0001163E 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00011640                            
00011640 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00011642                            
00011642 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00011644 2001                       		dc.b $20, 1
00011646 3401                       		dc.b $34, 1
00011648 1003                       		dc.b $10, 3
0001164A 2003                       		dc.b $20, 3
0001164C 3403                       		dc.b $34, 3
0001164E 1401                       		dc.b $14, 1
00011650 2401                       		dc.b $24, 1
00011652 2C01                       		dc.b $2C, 1
00011654 1403                       		dc.b $14, 3
00011656 2403                       		dc.b $24, 3
00011658 2C03                       		dc.b $2C, 3
0001165A 2005                       		dc.b $20, 5
0001165C 2007                       		dc.b $20, 7
0001165E 3009                       		dc.b $30, 9
00011660                            ; ===========================================================================
00011660                            
00011660                            Obj59_Main:				; XREF: Obj59_Index
00011660 5428 0024                  		addq.b	#2,$24(a0)
00011664 7000                       		moveq	#0,d0
00011666 1028 0028                  		move.b	$28(a0),d0
0001166A 6A00                       		bpl.s	Obj59_Main2
0001166C 5828 0024                  		addq.b	#4,$24(a0)
00011670 0240 007F                  		andi.w	#$7F,d0
00011674 C0FC 0006                  		mulu.w	#6,d0
00011678 3140 003C                  		move.w	d0,$3C(a0)
0001167C 3140 003E                  		move.w	d0,$3E(a0)
00011680 588F                       		addq.l	#4,sp
00011682 4E75                       		rts	
00011684                            ; ===========================================================================
00011684                            
00011684                            Obj59_Main2:
00011684 E648                       		lsr.w	#3,d0
00011686 0240 001E                  		andi.w	#$1E,d0
0001168A 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
0001168E 115A 0019                  		move.b	(a2)+,$19(a0)
00011692 115A 001A                  		move.b	(a2)+,$1A(a0)
00011696 7000                       		moveq	#0,d0
00011698 1028 0028                  		move.b	$28(a0),d0
0001169C D040                       		add.w	d0,d0
0001169E 0240 001E                  		andi.w	#$1E,d0
000116A2 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
000116A6 101A                       		move.b	(a2)+,d0
000116A8 E548                       		lsl.w	#2,d0
000116AA 3140 003C                  		move.w	d0,$3C(a0)
000116AE 115A 0028                  		move.b	(a2)+,$28(a0)
000116B2 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
000116BA 317C 4000 0002             		move.w	#$4000,2(a0)
000116C0 117C 0004 0001             		move.b	#4,1(a0)
000116C6 117C 0004 0018             		move.b	#4,$18(a0)
000116CC 3168 0008 0032             		move.w	8(a0),$32(a0)
000116D2 3168 000C 0030             		move.w	$C(a0),$30(a0)
000116D8                            
000116D8                            Obj59_Platform:				; XREF: Obj59_Index
000116D8 7200                       		moveq	#0,d1
000116DA 1228 0019                  		move.b	$19(a0),d1
000116DE 4EB9 0000 7F02             		jsr	(PlatformObject).l
000116E4 6000 0000                  		bra.w	Obj59_Types
000116E8                            ; ===========================================================================
000116E8                            
000116E8                            Obj59_Action:				; XREF: Obj59_Index
000116E8 7200                       		moveq	#0,d1
000116EA 1228 0019                  		move.b	$19(a0),d1
000116EE 4EB9 0000 8076             		jsr	(ExitPlatform).l
000116F4 3F28 0008                  		move.w	8(a0),-(sp)
000116F8 6100 0000                  		bsr.w	Obj59_Types
000116FC 341F                       		move.w	(sp)+,d2
000116FE 4A10                       		tst.b	0(a0)
00011700 6700                       		beq.s	locret_10BD4
00011702 4EF9 0000 85E0             		jmp	(MvSonicOnPtfm2).l
00011708                            ; ===========================================================================
00011708                            
00011708                            locret_10BD4:
00011708 4E75                       		rts	
0001170A                            ; ===========================================================================
0001170A                            
0001170A                            Obj59_Types:
0001170A 7000                       		moveq	#0,d0
0001170C 1028 0028                  		move.b	$28(a0),d0
00011710 0240 000F                  		andi.w	#$F,d0
00011714 D040                       		add.w	d0,d0
00011716 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
0001171A 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
0001171E                            ; ===========================================================================
0001171E 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011722 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011726 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001172A 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001172E 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00011732                            ; ===========================================================================
00011732                            
00011732                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00011732 4E75                       		rts	
00011734                            ; ===========================================================================
00011734                            
00011734                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00011734 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
0001173A 6600                       		bne.s	locret_10C0C
0001173C 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00011740                            
00011740                            locret_10C0C:
00011740 4E75                       		rts	
00011742                            ; ===========================================================================
00011742                            
00011742                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00011742 6100 0000                  		bsr.w	Obj59_Move
00011746 3028 0034                  		move.w	$34(a0),d0
0001174A 4440                       		neg.w	d0
0001174C D068 0030                  		add.w	$30(a0),d0
00011750 3140 000C                  		move.w	d0,$C(a0)
00011754 4E75                       		rts	
00011756                            ; ===========================================================================
00011756                            
00011756                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00011756 6100 0000                  		bsr.w	Obj59_Move
0001175A 3028 0034                  		move.w	$34(a0),d0
0001175E D068 0030                  		add.w	$30(a0),d0
00011762 3140 000C                  		move.w	d0,$C(a0)
00011766 4E75                       		rts	
00011768                            ; ===========================================================================
00011768                            
00011768                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00011768 6100 0000                  		bsr.w	Obj59_Move
0001176C 3028 0034                  		move.w	$34(a0),d0
00011770 E240                       		asr.w	#1,d0
00011772 4440                       		neg.w	d0
00011774 D068 0030                  		add.w	$30(a0),d0
00011778 3140 000C                  		move.w	d0,$C(a0)
0001177C 3028 0034                  		move.w	$34(a0),d0
00011780 D068 0032                  		add.w	$32(a0),d0
00011784 3140 0008                  		move.w	d0,8(a0)
00011788 4E75                       		rts	
0001178A                            ; ===========================================================================
0001178A                            
0001178A                            Obj59_Type08:				; XREF: Obj59_TypeIndex
0001178A 6100 0000                  		bsr.w	Obj59_Move
0001178E 3028 0034                  		move.w	$34(a0),d0
00011792 E240                       		asr.w	#1,d0
00011794 D068 0030                  		add.w	$30(a0),d0
00011798 3140 000C                  		move.w	d0,$C(a0)
0001179C 3028 0034                  		move.w	$34(a0),d0
000117A0 4440                       		neg.w	d0
000117A2 D068 0032                  		add.w	$32(a0),d0
000117A6 3140 0008                  		move.w	d0,8(a0)
000117AA 4E75                       		rts	
000117AC                            ; ===========================================================================
000117AC                            
000117AC                            Obj59_Type09:				; XREF: Obj59_TypeIndex
000117AC 6100 0000                  		bsr.w	Obj59_Move
000117B0 3028 0034                  		move.w	$34(a0),d0
000117B4 4440                       		neg.w	d0
000117B6 D068 0030                  		add.w	$30(a0),d0
000117BA 3140 000C                  		move.w	d0,$C(a0)
000117BE 4A28 0028                  		tst.b	$28(a0)
000117C2 6700 0000                  		beq.w	loc_10C94
000117C6 4E75                       		rts	
000117C8                            ; ===========================================================================
000117C8                            
000117C8                            loc_10C94:
000117C8 0828 0003 0022             		btst	#3,$22(a0)
000117CE 6700                       		beq.s	Obj59_Delete
000117D0 08E9 0001 0022             		bset	#1,$22(a1)
000117D6 08A9 0003 0022             		bclr	#3,$22(a1)
000117DC 137C 0002 0024             		move.b	#2,$24(a1)
000117E2                            
000117E2                            Obj59_Delete:
000117E2 6000 C968                  		bra.w	DeleteObject
000117E6                            
000117E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000117E6                            
000117E6                            
000117E6                            Obj59_Move:				; XREF: Obj59_Type02; et al
000117E6 3028 0038                  		move.w	$38(a0),d0
000117EA 4A28 003A                  		tst.b	$3A(a0)
000117EE 6600                       		bne.s	loc_10CC8
000117F0 0C40 0800                  		cmpi.w	#$800,d0
000117F4 6400                       		bcc.s	loc_10CD0
000117F6 0640 0010                  		addi.w	#$10,d0
000117FA 6000                       		bra.s	loc_10CD0
000117FC                            ; ===========================================================================
000117FC                            
000117FC                            loc_10CC8:
000117FC 4A40                       		tst.w	d0
000117FE 6700                       		beq.s	loc_10CD0
00011800 0440 0010                  		subi.w	#$10,d0
00011804                            
00011804                            loc_10CD0:
00011804 3140 0038                  		move.w	d0,$38(a0)
00011808 48C0                       		ext.l	d0
0001180A E180                       		asl.l	#8,d0
0001180C D0A8 0034                  		add.l	$34(a0),d0
00011810 2140 0034                  		move.l	d0,$34(a0)
00011814 4840                       		swap	d0
00011816 3428 003C                  		move.w	$3C(a0),d2
0001181A B042                       		cmp.w	d2,d0
0001181C 6300                       		bls.s	loc_10CF0
0001181E 117C 0001 003A             		move.b	#1,$3A(a0)
00011824                            
00011824                            loc_10CF0:
00011824 D442                       		add.w	d2,d2
00011826 B042                       		cmp.w	d2,d0
00011828 6600                       		bne.s	locret_10CFA
0001182A 4228 0028                  		clr.b	$28(a0)
0001182E                            
0001182E                            locret_10CFA:
0001182E 4E75                       		rts	
00011830                            ; End of function Obj59_Move
00011830                            
00011830                            ; ===========================================================================
00011830                            
00011830                            Obj59_MakeMulti:			; XREF: Obj59_Index
00011830 5368 003C                  		subq.w	#1,$3C(a0)
00011834 6600                       		bne.s	Obj59_ChkDel
00011836 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
0001183C 6100 CD68                  		bsr.w	SingleObjLoad
00011840 6600                       		bne.s	Obj59_ChkDel
00011842 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00011846 3368 0008 0008             		move.w	8(a0),8(a1)
0001184C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011852 137C 000E 0028             		move.b	#$E,$28(a1)
00011858                            
00011858                            Obj59_ChkDel:
00011858 588F                       		addq.l	#4,sp
0001185A 3028 0008                  		move.w	8(a0),d0
0001185E 0240 FF80                  		andi.w	#$FF80,d0
00011862 3238 F700                  		move.w	($FFFFF700).w,d1
00011866 0441 0080                  		subi.w	#$80,d1
0001186A 0241 FF80                  		andi.w	#$FF80,d1
0001186E 9041                       		sub.w	d1,d0
00011870 0C40 0280                  		cmpi.w	#$280,d0
00011874 6200 C8D6                  		bhi.w	DeleteObject
00011878 4E75                       		rts	
0001187A                            ; ===========================================================================
0001187A                            ; ---------------------------------------------------------------------------
0001187A                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001187A                            ; ---------------------------------------------------------------------------
0001187A                            Map_obj59:
0001187A                            	include "_maps\obj59.asm"
0001187A                            ; ---------------------------------------------------------------------------
0001187A                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001187A                            ; ---------------------------------------------------------------------------
0001187A 0000                       		dc.w byte_10D4A-Map_obj59
0001187C 03                         byte_10D4A:	dc.b 3
0001187D F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00011882 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00011887 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
0001188C                            		even
0001188C                            		even
0001188C                            
0001188C                            ; ===========================================================================
0001188C                            ; ---------------------------------------------------------------------------
0001188C                            ; Object 5A - platforms	moving in circles (SLZ)
0001188C                            ; ---------------------------------------------------------------------------
0001188C                            
0001188C                            Obj5A:					; XREF: Obj_Index
0001188C 7000                       		moveq	#0,d0
0001188E 1028 0024                  		move.b	$24(a0),d0
00011892 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
00011896 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
0001189A 3028 0032                  		move.w	$32(a0),d0
0001189E 0240 FF80                  		andi.w	#$FF80,d0
000118A2 3238 F700                  		move.w	($FFFFF700).w,d1
000118A6 0441 0080                  		subi.w	#$80,d1
000118AA 0241 FF80                  		andi.w	#$FF80,d1
000118AE 9041                       		sub.w	d1,d0
000118B0 0C40 0280                  		cmpi.w	#$280,d0
000118B4 6200 C896                  		bhi.w	DeleteObject
000118B8 6000 C856                  		bra.w	DisplaySprite
000118BC                            ; ===========================================================================
000118BC 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
000118BE 0000                       		dc.w Obj5A_Platform-Obj5A_Index
000118C0 0000                       		dc.w Obj5A_Action-Obj5A_Index
000118C2                            ; ===========================================================================
000118C2                            
000118C2                            Obj5A_Main:				; XREF: Obj5A_Index
000118C2 5428 0024                  		addq.b	#2,$24(a0)
000118C6 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
000118CE 317C 4000 0002             		move.w	#$4000,2(a0)
000118D4 117C 0004 0001             		move.b	#4,1(a0)
000118DA 117C 0004 0018             		move.b	#4,$18(a0)
000118E0 117C 0018 0019             		move.b	#$18,$19(a0)
000118E6 3168 0008 0032             		move.w	8(a0),$32(a0)
000118EC 3168 000C 0030             		move.w	$C(a0),$30(a0)
000118F2                            
000118F2                            Obj5A_Platform:				; XREF: Obj5A_Index
000118F2 7200                       		moveq	#0,d1
000118F4 1228 0019                  		move.b	$19(a0),d1
000118F8 4EB9 0000 7F02             		jsr	(PlatformObject).l
000118FE 6000 0000                  		bra.w	Obj5A_Types
00011902                            ; ===========================================================================
00011902                            
00011902                            Obj5A_Action:				; XREF: Obj5A_Index
00011902 7200                       		moveq	#0,d1
00011904 1228 0019                  		move.b	$19(a0),d1
00011908 4EB9 0000 8076             		jsr	(ExitPlatform).l
0001190E 3F28 0008                  		move.w	8(a0),-(sp)
00011912 6100 0000                  		bsr.w	Obj5A_Types
00011916 341F                       		move.w	(sp)+,d2
00011918 4EF9 0000 85E0             		jmp	(MvSonicOnPtfm2).l
0001191E                            ; ===========================================================================
0001191E                            
0001191E                            Obj5A_Types:
0001191E 7000                       		moveq	#0,d0
00011920 1028 0028                  		move.b	$28(a0),d0
00011924 0240 000C                  		andi.w	#$C,d0
00011928 E248                       		lsr.w	#1,d0
0001192A 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
0001192E 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00011932                            ; ===========================================================================
00011932 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00011934 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00011936                            ; ===========================================================================
00011936                            
00011936                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00011936 1238 FE80                  		move.b	($FFFFFE80).w,d1
0001193A 0401 0050                  		subi.b	#$50,d1
0001193E 4881                       		ext.w	d1
00011940 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011944 0402 0050                  		subi.b	#$50,d2
00011948 4882                       		ext.w	d2
0001194A 0828 0000 0028             		btst	#0,$28(a0)
00011950 6700                       		beq.s	loc_10E24
00011952 4441                       		neg.w	d1
00011954 4442                       		neg.w	d2
00011956                            
00011956                            loc_10E24:
00011956 0828 0001 0028             		btst	#1,$28(a0)
0001195C 6700                       		beq.s	loc_10E30
0001195E 4441                       		neg.w	d1
00011960 C342                       		exg	d1,d2
00011962                            
00011962                            loc_10E30:
00011962 D268 0032                  		add.w	$32(a0),d1
00011966 3141 0008                  		move.w	d1,8(a0)
0001196A D468 0030                  		add.w	$30(a0),d2
0001196E 3142 000C                  		move.w	d2,$C(a0)
00011972 4E75                       		rts	
00011974                            ; ===========================================================================
00011974                            
00011974                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00011974 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011978 0401 0050                  		subi.b	#$50,d1
0001197C 4881                       		ext.w	d1
0001197E 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011982 0402 0050                  		subi.b	#$50,d2
00011986 4882                       		ext.w	d2
00011988 0828 0000 0028             		btst	#0,$28(a0)
0001198E 6700                       		beq.s	loc_10E62
00011990 4441                       		neg.w	d1
00011992 4442                       		neg.w	d2
00011994                            
00011994                            loc_10E62:
00011994 0828 0001 0028             		btst	#1,$28(a0)
0001199A 6700                       		beq.s	loc_10E6E
0001199C 4441                       		neg.w	d1
0001199E C342                       		exg	d1,d2
000119A0                            
000119A0                            loc_10E6E:
000119A0 4441                       		neg.w	d1
000119A2 D268 0032                  		add.w	$32(a0),d1
000119A6 3141 0008                  		move.w	d1,8(a0)
000119AA D468 0030                  		add.w	$30(a0),d2
000119AE 3142 000C                  		move.w	d2,$C(a0)
000119B2 4E75                       		rts	
000119B4                            ; ===========================================================================
000119B4                            ; ---------------------------------------------------------------------------
000119B4                            ; Sprite mappings - platforms that move	in circles (SLZ)
000119B4                            ; ---------------------------------------------------------------------------
000119B4                            Map_obj5A:
000119B4                            	include "_maps\obj5A.asm"
000119B4                            ; ---------------------------------------------------------------------------
000119B4                            ; Sprite mappings - platforms that move	in circles (SLZ)
000119B4                            ; ---------------------------------------------------------------------------
000119B4 0000                       		dc.w byte_10E84-Map_obj5A
000119B6 02                         byte_10E84:	dc.b 2
000119B7 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
000119BC F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
000119C2 00                         		even
000119C2 00                         		even
000119C2                            
000119C2                            ; ===========================================================================
000119C2                            ; ---------------------------------------------------------------------------
000119C2                            ; Object 5B - blocks that form a staircase (SLZ)
000119C2                            ; ---------------------------------------------------------------------------
000119C2                            
000119C2                            Obj5B:					; XREF: Obj_Index
000119C2 7000                       		moveq	#0,d0
000119C4 1028 0024                  		move.b	$24(a0),d0
000119C8 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
000119CC 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
000119D0 3028 0030                  		move.w	$30(a0),d0
000119D4 0240 FF80                  		andi.w	#$FF80,d0
000119D8 3238 F700                  		move.w	($FFFFF700).w,d1
000119DC 0441 0080                  		subi.w	#$80,d1
000119E0 0241 FF80                  		andi.w	#$FF80,d1
000119E4 9041                       		sub.w	d1,d0
000119E6 0C40 0280                  		cmpi.w	#$280,d0
000119EA 6200 C760                  		bhi.w	DeleteObject
000119EE 6000 C720                  		bra.w	DisplaySprite
000119F2                            ; ===========================================================================
000119F2 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
000119F4 0000                       		dc.w Obj5B_Move-Obj5B_Index
000119F6 0000                       		dc.w Obj5B_Solid-Obj5B_Index
000119F8                            ; ===========================================================================
000119F8                            
000119F8                            Obj5B_Main:				; XREF: Obj5B_Index
000119F8 5428 0024                  		addq.b	#2,$24(a0)
000119FC 7638                       		moveq	#$38,d3
000119FE 7801                       		moveq	#1,d4
00011A00 0828 0000 0022             		btst	#0,$22(a0)
00011A06 6700                       		beq.s	loc_10EDA
00011A08 763B                       		moveq	#$3B,d3
00011A0A 78FF                       		moveq	#-1,d4
00011A0C                            
00011A0C                            loc_10EDA:
00011A0C 3428 0008                  		move.w	8(a0),d2
00011A10 2248                       		movea.l	a0,a1
00011A12 7203                       		moveq	#3,d1
00011A14 6000                       		bra.s	Obj5B_MakeBlocks
00011A16                            ; ===========================================================================
00011A16                            
00011A16                            Obj5B_Loop:
00011A16 6100 CBA4                  		bsr.w	SingleObjLoad2
00011A1A 6600 0000                  		bne.w	Obj5B_Move
00011A1E 137C 0004 0024             		move.b	#4,$24(a1)
00011A24                            
00011A24                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
00011A24 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00011A28 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
00011A30 337C 4000 0002             		move.w	#$4000,2(a1)
00011A36 137C 0004 0001             		move.b	#4,1(a1)
00011A3C 137C 0003 0018             		move.b	#3,$18(a1)
00011A42 137C 0010 0019             		move.b	#$10,$19(a1)
00011A48 1368 0028 0028             		move.b	$28(a0),$28(a1)
00011A4E 3342 0008                  		move.w	d2,8(a1)
00011A52 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011A58 3368 0008 0030             		move.w	8(a0),$30(a1)
00011A5E 3369 000C 0032             		move.w	$C(a1),$32(a1)
00011A64 0642 0020                  		addi.w	#$20,d2
00011A68 1343 0037                  		move.b	d3,$37(a1)
00011A6C 2348 003C                  		move.l	a0,$3C(a1)
00011A70 D604                       		add.b	d4,d3
00011A72 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00011A76                            
00011A76                            Obj5B_Move:				; XREF: Obj5B_Index
00011A76 7000                       		moveq	#0,d0
00011A78 1028 0028                  		move.b	$28(a0),d0
00011A7C 0240 0007                  		andi.w	#7,d0
00011A80 D040                       		add.w	d0,d0
00011A82 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00011A86 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00011A8A                            
00011A8A                            Obj5B_Solid:				; XREF: Obj5B_Index
00011A8A 2468 003C                  		movea.l	$3C(a0),a2
00011A8E 7000                       		moveq	#0,d0
00011A90 1028 0037                  		move.b	$37(a0),d0
00011A94 1032 0000                  		move.b	(a2,d0.w),d0
00011A98 D068 0032                  		add.w	$32(a0),d0
00011A9C 3140 000C                  		move.w	d0,$C(a0)
00011AA0 7200                       		moveq	#0,d1
00011AA2 1228 0019                  		move.b	$19(a0),d1
00011AA6 0641 000B                  		addi.w	#$B,d1
00011AAA 343C 0010                  		move.w	#$10,d2
00011AAE 363C 0011                  		move.w	#$11,d3
00011AB2 3828 0008                  		move.w	8(a0),d4
00011AB6 6100 EA42                  		bsr.w	SolidObject
00011ABA 4A04                       		tst.b	d4
00011ABC 6A00                       		bpl.s	loc_10F92
00011ABE 1544 0036                  		move.b	d4,$36(a2)
00011AC2                            
00011AC2                            loc_10F92:
00011AC2 0828 0003 0022             		btst	#3,$22(a0)
00011AC8 6700                       		beq.s	locret_10FA0
00011ACA 157C 0001 0036             		move.b	#1,$36(a2)
00011AD0                            
00011AD0                            locret_10FA0:
00011AD0 4E75                       		rts	
00011AD2                            ; ===========================================================================
00011AD2 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00011AD4 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011AD6 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00011AD8 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011ADA                            ; ===========================================================================
00011ADA                            
00011ADA                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00011ADA 4A68 0034                  		tst.w	$34(a0)
00011ADE 6600                       		bne.s	loc_10FC0
00011AE0 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00011AE6 6600                       		bne.s	locret_10FBE
00011AE8 317C 001E 0034             		move.w	#$1E,$34(a0)
00011AEE                            
00011AEE                            locret_10FBE:
00011AEE 4E75                       		rts	
00011AF0                            ; ===========================================================================
00011AF0                            
00011AF0                            loc_10FC0:
00011AF0 5368 0034                  		subq.w	#1,$34(a0)
00011AF4 66F8                       		bne.s	locret_10FBE
00011AF6 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011AFA 4E75                       		rts	
00011AFC                            ; ===========================================================================
00011AFC                            
00011AFC                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00011AFC 4A68 0034                  		tst.w	$34(a0)
00011B00 6600                       		bne.s	loc_10FE0
00011B02 4A28 0036                  		tst.b	$36(a0)
00011B06 6A00                       		bpl.s	locret_10FDE
00011B08 317C 003C 0034             		move.w	#$3C,$34(a0)
00011B0E                            
00011B0E                            locret_10FDE:
00011B0E 4E75                       		rts	
00011B10                            ; ===========================================================================
00011B10                            
00011B10                            loc_10FE0:
00011B10 5368 0034                  		subq.w	#1,$34(a0)
00011B14 6600                       		bne.s	loc_10FEC
00011B16 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011B1A 4E75                       		rts	
00011B1C                            ; ===========================================================================
00011B1C                            
00011B1C                            loc_10FEC:
00011B1C 43E8 0038                  		lea	$38(a0),a1
00011B20 3028 0034                  		move.w	$34(a0),d0
00011B24 E408                       		lsr.b	#2,d0
00011B26 0200 0001                  		andi.b	#1,d0
00011B2A 12C0                       		move.b	d0,(a1)+
00011B2C 0A00 0001                  		eori.b	#1,d0
00011B30 12C0                       		move.b	d0,(a1)+
00011B32 0A00 0001                  		eori.b	#1,d0
00011B36 12C0                       		move.b	d0,(a1)+
00011B38 0A00 0001                  		eori.b	#1,d0
00011B3C 12C0                       		move.b	d0,(a1)+
00011B3E 4E75                       		rts	
00011B40                            ; ===========================================================================
00011B40                            
00011B40                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00011B40 43E8 0038                  		lea	$38(a0),a1
00011B44 0C11 0080                  		cmpi.b	#$80,(a1)
00011B48 6700                       		beq.s	locret_11038
00011B4A 5211                       		addq.b	#1,(a1)
00011B4C 7200                       		moveq	#0,d1
00011B4E 1219                       		move.b	(a1)+,d1
00011B50 4841                       		swap	d1
00011B52 E289                       		lsr.l	#1,d1
00011B54 2401                       		move.l	d1,d2
00011B56 E289                       		lsr.l	#1,d1
00011B58 2601                       		move.l	d1,d3
00011B5A D682                       		add.l	d2,d3
00011B5C 4841                       		swap	d1
00011B5E 4842                       		swap	d2
00011B60 4843                       		swap	d3
00011B62 12C3                       		move.b	d3,(a1)+
00011B64 12C2                       		move.b	d2,(a1)+
00011B66 12C1                       		move.b	d1,(a1)+
00011B68                            
00011B68                            locret_11038:
00011B68 4E75                       		rts	
00011B6A 4E75                       		rts	
00011B6C                            ; ===========================================================================
00011B6C                            ; ---------------------------------------------------------------------------
00011B6C                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011B6C                            ; ---------------------------------------------------------------------------
00011B6C                            Map_obj5B:
00011B6C                            	include "_maps\obj5B.asm"
00011B6C                            ; ---------------------------------------------------------------------------
00011B6C                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011B6C                            ; ---------------------------------------------------------------------------
00011B6C 0000                       		dc.w byte_1103E-Map_obj5B
00011B6E 01                         byte_1103E:	dc.b 1
00011B6F F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00011B74                            		even
00011B74                            		even
00011B74                            
00011B74                            ; ===========================================================================
00011B74                            ; ---------------------------------------------------------------------------
00011B74                            ; Object 5C - metal girders in foreground (SLZ)
00011B74                            ; ---------------------------------------------------------------------------
00011B74                            
00011B74                            Obj5C:					; XREF: Obj_Index
00011B74 7000                       		moveq	#0,d0
00011B76 1028 0024                  		move.b	$24(a0),d0
00011B7A 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00011B7E 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00011B82                            ; ===========================================================================
00011B82 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00011B84 0000                       		dc.w Obj5C_Display-Obj5C_Index
00011B86                            ; ===========================================================================
00011B86                            
00011B86                            Obj5C_Main:				; XREF: Obj5C_Index
00011B86 5428 0024                  		addq.b	#2,$24(a0)
00011B8A 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00011B92 317C 83CC 0002             		move.w	#$83CC,2(a0)
00011B98 117C 0010 0019             		move.b	#$10,$19(a0)
00011B9E                            
00011B9E                            Obj5C_Display:				; XREF: Obj5C_Index
00011B9E 2238 F700                  		move.l	($FFFFF700).w,d1
00011BA2 D281                       		add.l	d1,d1
00011BA4 4841                       		swap	d1
00011BA6 4441                       		neg.w	d1
00011BA8 3141 0008                  		move.w	d1,8(a0)
00011BAC 2238 F704                  		move.l	($FFFFF704).w,d1
00011BB0 D281                       		add.l	d1,d1
00011BB2 4841                       		swap	d1
00011BB4 0241 003F                  		andi.w	#$3F,d1
00011BB8 4441                       		neg.w	d1
00011BBA 0641 0100                  		addi.w	#$100,d1
00011BBE 3141 000A                  		move.w	d1,$A(a0)
00011BC2 6000 C54C                  		bra.w	DisplaySprite
00011BC6                            ; ===========================================================================
00011BC6                            ; ---------------------------------------------------------------------------
00011BC6                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011BC6                            ; ---------------------------------------------------------------------------
00011BC6                            Map_obj5C:
00011BC6                            	include "_maps\obj5C.asm"
00011BC6                            ; ---------------------------------------------------------------------------
00011BC6                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011BC6                            ; ---------------------------------------------------------------------------
00011BC6 0000                       		dc.w byte_11098-Map_obj5C
00011BC8 09                         byte_11098:	dc.b 9
00011BC9 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00011BCE A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00011BD3 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00011BD8 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00011BDD 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00011BE2 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00011BE7 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00011BEC 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00011BF1 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00011BF6                            		even
00011BF6                            		even
00011BF6                            
00011BF6                            ; ===========================================================================
00011BF6                            ; ---------------------------------------------------------------------------
00011BF6                            ; Object 1B - water surface (LZ)
00011BF6                            ; ---------------------------------------------------------------------------
00011BF6                            
00011BF6                            Obj1B:					; XREF: Obj_Index
00011BF6 7000                       		moveq	#0,d0
00011BF8 1028 0024                  		move.b	$24(a0),d0
00011BFC 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00011C00 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00011C04                            ; ===========================================================================
00011C04 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00011C06 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011C08                            ; ===========================================================================
00011C08                            
00011C08                            Obj1B_Main:				; XREF: Obj1B_Index
00011C08 5428 0024                  		addq.b	#2,$24(a0)
00011C0C 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00011C14 317C C300 0002             		move.w	#$C300,2(a0)
00011C1A 117C 0004 0001             		move.b	#4,1(a0)
00011C20 117C 0080 0019             		move.b	#$80,$19(a0)
00011C26 3168 0008 0030             		move.w	8(a0),$30(a0)
00011C2C                            
00011C2C                            Obj1B_Action:				; XREF: Obj1B_Index
00011C2C 3238 F700                  		move.w	($FFFFF700).w,d1
00011C30 0241 FFE0                  		andi.w	#$FFE0,d1
00011C34 D268 0030                  		add.w	$30(a0),d1
00011C38 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00011C3E 6700                       		beq.s	loc_11114
00011C40 0641 0020                  		addi.w	#$20,d1
00011C44                            
00011C44                            loc_11114:
00011C44 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00011C48 3238 F646                  		move.w	($FFFFF646).w,d1
00011C4C 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00011C50 4A28 0032                  		tst.b	$32(a0)
00011C54 6600                       		bne.s	Obj1B_Animate
00011C56 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00011C5C 6700                       		beq.s	loc_1114A	; if not, branch
00011C5E 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00011C62 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00011C68 6000                       		bra.s	Obj1B_Display
00011C6A                            ; ===========================================================================
00011C6A                            
00011C6A                            Obj1B_Animate:				; XREF: loc_11114
00011C6A 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00011C6E 6600                       		bne.s	Obj1B_Display	; if yes, branch
00011C70 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00011C76 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00011C7A                            
00011C7A                            loc_1114A:				; XREF: loc_11114
00011C7A 5328 001E                  		subq.b	#1,$1E(a0)
00011C7E 6A00                       		bpl.s	Obj1B_Display
00011C80 117C 0007 001E             		move.b	#7,$1E(a0)
00011C86 5228 001A                  		addq.b	#1,$1A(a0)
00011C8A 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00011C90 6500                       		bcs.s	Obj1B_Display
00011C92 117C 0000 001A             		move.b	#0,$1A(a0)
00011C98                            
00011C98                            Obj1B_Display:
00011C98 6000 C476                  		bra.w	DisplaySprite
00011C9C                            ; ===========================================================================
00011C9C                            ; ---------------------------------------------------------------------------
00011C9C                            ; Sprite mappings - water surface (LZ)
00011C9C                            ; ---------------------------------------------------------------------------
00011C9C                            Map_obj1B:
00011C9C                            	include "_maps\obj1B.asm"
00011C9C                            ; ---------------------------------------------------------------------------
00011C9C                            ; Sprite mappings - water surface (LZ)
00011C9C                            ; ---------------------------------------------------------------------------
00011C9C 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00011CA0 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00011CA4 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00011CA8 03                         byte_11178:	dc.b 3
00011CA9 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011CAE FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011CB3 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011CB8 03                         byte_11188:	dc.b 3
00011CB9 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011CBE FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011CC3 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011CC8 03                         byte_11198:	dc.b 3
00011CC9 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011CCE FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011CD3 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011CD8 06                         byte_111A8:	dc.b 6
00011CD9 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011CDE FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00011CE3 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011CE8 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00011CED FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011CF2 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00011CF7 06                         byte_111C7:	dc.b 6
00011CF8 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011CFD FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00011D02 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011D07 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011D0C FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011D11 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00011D16 06                         byte_111E6:	dc.b 6
00011D17 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011D1C FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00011D21 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011D26 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00011D2B FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011D30 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00011D36 00                         		even
00011D36 00                         		even
00011D36                            
00011D36                            ; ===========================================================================
00011D36                            ; ---------------------------------------------------------------------------
00011D36                            ; Object 0B - pole that	breaks (LZ)
00011D36                            ; ---------------------------------------------------------------------------
00011D36                            
00011D36                            Obj0B:					; XREF: Obj_Index
00011D36 7000                       		moveq	#0,d0
00011D38 1028 0024                  		move.b	$24(a0),d0
00011D3C 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00011D40 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00011D44                            ; ===========================================================================
00011D44 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00011D46 0000                       		dc.w Obj0B_Action-Obj0B_Index
00011D48 0000                       		dc.w Obj0B_Display-Obj0B_Index
00011D4A                            ; ===========================================================================
00011D4A                            
00011D4A                            Obj0B_Main:				; XREF: Obj0B_Index
00011D4A 5428 0024                  		addq.b	#2,$24(a0)
00011D4E 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00011D56 317C 43DE 0002             		move.w	#$43DE,2(a0)
00011D5C 117C 0004 0001             		move.b	#4,1(a0)
00011D62 117C 0008 0019             		move.b	#8,$19(a0)
00011D68 117C 0004 0018             		move.b	#4,$18(a0)
00011D6E 117C 00E1 0020             		move.b	#$E1,$20(a0)
00011D74 7000                       		moveq	#0,d0
00011D76 1028 0028                  		move.b	$28(a0),d0	; get object type
00011D7A C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011D7E 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00011D82                            
00011D82                            Obj0B_Action:				; XREF: Obj0B_Index
00011D82 4A28 0032                  		tst.b	$32(a0)
00011D86 6700                       		beq.s	Obj0B_Grab
00011D88 4A68 0030                  		tst.w	$30(a0)
00011D8C 6700                       		beq.s	Obj0B_MoveUp
00011D8E 5368 0030                  		subq.w	#1,$30(a0)
00011D92 6600                       		bne.s	Obj0B_MoveUp
00011D94 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00011D9A 6000                       		bra.s	Obj0B_Release
00011D9C                            ; ===========================================================================
00011D9C                            
00011D9C                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00011D9C 43F8 D000                  		lea	($FFFFD000).w,a1
00011DA0 3028 000C                  		move.w	$C(a0),d0
00011DA4 0440 0018                  		subi.w	#$18,d0
00011DA8 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00011DAE 6700                       		beq.s	Obj0B_MoveDown
00011DB0 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00011DB4 B069 000C                  		cmp.w	$C(a1),d0
00011DB8 6500                       		bcs.s	Obj0B_MoveDown
00011DBA 3340 000C                  		move.w	d0,$C(a1)
00011DBE                            
00011DBE                            Obj0B_MoveDown:
00011DBE 0640 0024                  		addi.w	#$24,d0
00011DC2 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011DC8 6700                       		beq.s	Obj0B_LetGo
00011DCA 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011DCE B069 000C                  		cmp.w	$C(a1),d0
00011DD2 6400                       		bcc.s	Obj0B_LetGo
00011DD4 3340 000C                  		move.w	d0,$C(a1)
00011DD8                            
00011DD8                            Obj0B_LetGo:
00011DD8 1038 F603                  		move.b	($FFFFF603).w,d0
00011DDC 0240 0070                  		andi.w	#$70,d0
00011DE0 6700                       		beq.s	Obj0B_Display
00011DE2                            
00011DE2                            Obj0B_Release:				; XREF: Obj0B_Action
00011DE2 4228 0020                  		clr.b	$20(a0)
00011DE6 5428 0024                  		addq.b	#2,$24(a0)
00011DEA 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011DEE 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011DF2 4228 0032                  		clr.b	$32(a0)
00011DF6 6000                       		bra.s	Obj0B_Display
00011DF8                            ; ===========================================================================
00011DF8                            
00011DF8                            Obj0B_Grab:				; XREF: Obj0B_Action
00011DF8 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011DFC 6700                       		beq.s	Obj0B_Display	; if not, branch
00011DFE 43F8 D000                  		lea	($FFFFD000).w,a1
00011E02 3028 0008                  		move.w	8(a0),d0
00011E06 0640 0014                  		addi.w	#$14,d0
00011E0A B069 0008                  		cmp.w	8(a1),d0
00011E0E 6400                       		bcc.s	Obj0B_Display
00011E10 4228 0021                  		clr.b	$21(a0)
00011E14 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011E1A 6400                       		bcc.s	Obj0B_Display
00011E1C 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011E20 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011E24 3028 0008                  		move.w	8(a0),d0
00011E28 0640 0014                  		addi.w	#$14,d0
00011E2C 3340 0008                  		move.w	d0,8(a1)
00011E30 08A9 0000 0022             		bclr	#0,$22(a1)
00011E36 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011E3C 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00011E42 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011E48 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011E4E                            
00011E4E                            Obj0B_Display:				; XREF: Obj0B_Index
00011E4E 6000 E382                  		bra.w	MarkObjGone
00011E52                            ; ===========================================================================
00011E52                            ; ---------------------------------------------------------------------------
00011E52                            ; Sprite mappings - pole that breaks (LZ)
00011E52                            ; ---------------------------------------------------------------------------
00011E52                            Map_obj0B:
00011E52                            	include "_maps\obj0B.asm"
00011E52                            ; ---------------------------------------------------------------------------
00011E52                            ; Sprite mappings - pole that breaks (LZ)
00011E52                            ; ---------------------------------------------------------------------------
00011E52 0000                       		dc.w byte_11326-Map_obj0B
00011E54 0000                       		dc.w byte_11331-Map_obj0B
00011E56 02                         byte_11326:	dc.b 2			; normal pole
00011E57 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011E5C 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011E61 04                         byte_11331:	dc.b 4			; broken pole
00011E62 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011E67 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011E6C 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011E71 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011E76                            		even
00011E76                            		even
00011E76                            
00011E76                            ; ===========================================================================
00011E76                            ; ---------------------------------------------------------------------------
00011E76                            ; Object 0C - flapping door (LZ)
00011E76                            ; ---------------------------------------------------------------------------
00011E76                            
00011E76                            Obj0C:					; XREF: Obj_Index
00011E76 7000                       		moveq	#0,d0
00011E78 1028 0024                  		move.b	$24(a0),d0
00011E7C 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00011E80 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00011E84                            ; ===========================================================================
00011E84 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00011E86 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00011E88                            ; ===========================================================================
00011E88                            
00011E88                            Obj0C_Main:				; XREF: Obj0C_Index
00011E88 5428 0024                  		addq.b	#2,$24(a0)
00011E8C 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00011E94 317C 4328 0002             		move.w	#$4328,2(a0)
00011E9A 0028 0004 0001             		ori.b	#4,1(a0)
00011EA0 117C 0028 0019             		move.b	#$28,$19(a0)
00011EA6 7000                       		moveq	#0,d0
00011EA8 1028 0028                  		move.b	$28(a0),d0	; get object type
00011EAC C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011EB0 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011EB4                            
00011EB4                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011EB4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011EB8 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011EBA 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00011EC0 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011EC6 4A28 0001                  		tst.b	1(a0)
00011ECA 6A00                       		bpl.s	Obj0C_Solid
00011ECC 303C 00BB                  		move.w	#$BB,d0
00011ED0 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play door sound
00011ED6                            
00011ED6                            Obj0C_Solid:
00011ED6 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011EDC 6100 9344                  		bsr.w	AnimateSprite
00011EE0 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011EE4 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011EE8 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011EEA 3038 D008                  		move.w	($FFFFD008).w,d0
00011EEE B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011EF2 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011EF4 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011EFA 323C 0013                  		move.w	#$13,d1
00011EFE 343C 0020                  		move.w	#$20,d2
00011F02 3602                       		move.w	d2,d3
00011F04 5243                       		addq.w	#1,d3
00011F06 3828 0008                  		move.w	8(a0),d4
00011F0A 6100 E5EE                  		bsr.w	SolidObject	; make the door	solid
00011F0E                            
00011F0E                            Obj0C_Display:
00011F0E 6000 E2C2                  		bra.w	MarkObjGone
00011F12                            ; ===========================================================================
00011F12                            Ani_obj0C:
00011F12                            	include "_anim\obj0C.asm"
00011F12                            ; ---------------------------------------------------------------------------
00011F12                            ; Animation script - flapping door (LZ)
00011F12                            ; ---------------------------------------------------------------------------
00011F12 0000                       		dc.w byte_113E6-Ani_obj0C
00011F14 0000                       		dc.w byte_113EC-Ani_obj0C
00011F16 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011F1C 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011F22                            		even
00011F22                            		even
00011F22                            
00011F22                            ; ---------------------------------------------------------------------------
00011F22                            ; Sprite mappings - flapping door (LZ)
00011F22                            ; ---------------------------------------------------------------------------
00011F22                            Map_obj0C:
00011F22                            	include "_maps\obj0C.asm"
00011F22                            ; ---------------------------------------------------------------------------
00011F22                            ; Sprite mappings - flapping door (LZ)
00011F22                            ; ---------------------------------------------------------------------------
00011F22 0000                       		dc.w byte_113F8-Map_obj0C
00011F24 0000                       		dc.w byte_11403-Map_obj0C
00011F26 0000                       		dc.w byte_1140E-Map_obj0C
00011F28 02                         byte_113F8:	dc.b 2
00011F29 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011F2E 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011F33 02                         byte_11403:	dc.b 2
00011F34 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011F39 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011F3E 02                         byte_1140E:	dc.b 2
00011F3F D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00011F44 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011F4A 00                         		even
00011F4A 00                         		even
00011F4A                            
00011F4A                            ; ===========================================================================
00011F4A                            ; ---------------------------------------------------------------------------
00011F4A                            ; Object 71 - invisible	solid blocks
00011F4A                            ; ---------------------------------------------------------------------------
00011F4A                            
00011F4A                            Obj71:					; XREF: Obj_Index
00011F4A 7000                       		moveq	#0,d0
00011F4C 1028 0024                  		move.b	$24(a0),d0
00011F50 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00011F54 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011F58                            ; ===========================================================================
00011F58 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011F5A 0000                       		dc.w Obj71_Solid-Obj71_Index
00011F5C                            ; ===========================================================================
00011F5C                            
00011F5C                            Obj71_Main:				; XREF: Obj71_Index
00011F5C 5428 0024                  		addq.b	#2,$24(a0)
00011F60 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00011F68 317C 8680 0002             		move.w	#$8680,2(a0)
00011F6E 0028 0004 0001             		ori.b	#4,1(a0)
00011F74 1028 0028                  		move.b	$28(a0),d0	; get object type
00011F78 1200                       		move.b	d0,d1
00011F7A 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00011F7E 0640 0010                  		addi.w	#$10,d0
00011F82 E248                       		lsr.w	#1,d0
00011F84 1140 0019                  		move.b	d0,$19(a0)	; set object width
00011F88 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011F8C 5241                       		addq.w	#1,d1
00011F8E E749                       		lsl.w	#3,d1
00011F90 1141 0016                  		move.b	d1,$16(a0)	; set object height
00011F94                            
00011F94                            Obj71_Solid:				; XREF: Obj71_Index
00011F94 6100 C3F6                  		bsr.w	ChkObjOnScreen
00011F98 6600                       		bne.s	Obj71_ChkDel
00011F9A 7200                       		moveq	#0,d1
00011F9C 1228 0019                  		move.b	$19(a0),d1
00011FA0 0641 000B                  		addi.w	#$B,d1
00011FA4 7400                       		moveq	#0,d2
00011FA6 1428 0016                  		move.b	$16(a0),d2
00011FAA 3602                       		move.w	d2,d3
00011FAC 5243                       		addq.w	#1,d3
00011FAE 3828 0008                  		move.w	8(a0),d4
00011FB2 6100 E58C                  		bsr.w	SolidObject71
00011FB6                            
00011FB6                            Obj71_ChkDel:
00011FB6 3028 0008                  		move.w	8(a0),d0
00011FBA 0240 FF80                  		andi.w	#$FF80,d0
00011FBE 3238 F700                  		move.w	($FFFFF700).w,d1
00011FC2 0441 0080                  		subi.w	#$80,d1
00011FC6 0241 FF80                  		andi.w	#$FF80,d1
00011FCA 9041                       		sub.w	d1,d0
00011FCC 0C40 0280                  		cmpi.w	#$280,d0
00011FD0 6200                       		bhi.s	Obj71_Delete
00011FD2 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011FD6 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011FD8 4EFA C136                  		jmp	DisplaySprite	; if yes, display the object
00011FDC                            ; ===========================================================================
00011FDC                            
00011FDC                            Obj71_NoDisplay:
00011FDC 4E75                       		rts	
00011FDE                            ; ===========================================================================
00011FDE                            
00011FDE                            Obj71_Delete:
00011FDE 4EFA C16C                  		jmp	DeleteObject
00011FE2                            ; ===========================================================================
00011FE2                            ; ---------------------------------------------------------------------------
00011FE2                            ; Sprite mappings - invisible solid blocks
00011FE2                            ; ---------------------------------------------------------------------------
00011FE2                            Map_obj71:
00011FE2                            	include "_maps\obj71.asm"
00011FE2                            ; ---------------------------------------------------------------------------
00011FE2                            ; Sprite mappings - invisible solid blocks
00011FE2                            ; ---------------------------------------------------------------------------
00011FE2 0000                       		dc.w byte_114BC-Map_obj71
00011FE4 0000                       		dc.w byte_114D1-Map_obj71
00011FE6 0000                       		dc.w byte_114E6-Map_obj71
00011FE8 04                         byte_114BC:	dc.b 4
00011FE9 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011FEE F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011FF3 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011FF8 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011FFD 04                         byte_114D1:	dc.b 4
00011FFE E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00012003 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00012008 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
0001200D 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00012012 04                         byte_114E6:	dc.b 4
00012013 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00012018 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
0001201D 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00012022 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00012028 00                         		even
00012028 00                         		even
00012028                            
00012028                            ; ===========================================================================
00012028                            ; ---------------------------------------------------------------------------
00012028                            ; Object 5D - fans (SLZ)
00012028                            ; ---------------------------------------------------------------------------
00012028                            
00012028                            Obj5D:					; XREF: Obj_Index
00012028 7000                       		moveq	#0,d0
0001202A 1028 0024                  		move.b	$24(a0),d0
0001202E 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00012032 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00012036                            ; ===========================================================================
00012036 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00012038 0000                       		dc.w Obj5D_Delay-Obj5D_Index
0001203A                            ; ===========================================================================
0001203A                            
0001203A                            Obj5D_Main:				; XREF: Obj5D_Index
0001203A 5428 0024                  		addq.b	#2,$24(a0)
0001203E 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00012046 317C 43A0 0002             		move.w	#$43A0,2(a0)
0001204C 0028 0004 0001             		ori.b	#4,1(a0)
00012052 117C 0010 0019             		move.b	#$10,$19(a0)
00012058 117C 0004 0018             		move.b	#4,$18(a0)
0001205E                            
0001205E                            Obj5D_Delay:				; XREF: Obj5D_Index
0001205E 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00012064 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00012066 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001206A 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
0001206C 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00012072 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00012078 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
0001207A 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00012080                            
00012080                            Obj5D_Blow:
00012080 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00012084 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00012088 43F8 D000                  		lea	($FFFFD000).w,a1
0001208C 3029 0008                  		move.w	8(a1),d0
00012090 9068 0008                  		sub.w	8(a0),d0
00012094 0828 0000 0022             		btst	#0,$22(a0)
0001209A 6600                       		bne.s	Obj5D_ChkSonic
0001209C 4440                       		neg.w	d0
0001209E                            
0001209E                            Obj5D_ChkSonic:
0001209E 0640 0050                  		addi.w	#$50,d0
000120A2 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
000120A6 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
000120A8 3229 000C                  		move.w	$C(a1),d1
000120AC 0641 0060                  		addi.w	#$60,d1
000120B0 9268 000C                  		sub.w	$C(a0),d1
000120B4 6500                       		bcs.s	Obj5D_Animate
000120B6 0C41 0070                  		cmpi.w	#$70,d1
000120BA 6400                       		bcc.s	Obj5D_Animate
000120BC 0440 0050                  		subi.w	#$50,d0
000120C0 6400                       		bcc.s	loc_1159A
000120C2 4640                       		not.w	d0
000120C4 D040                       		add.w	d0,d0
000120C6                            
000120C6                            loc_1159A:
000120C6 0640 0060                  		addi.w	#$60,d0
000120CA 0828 0000 0022             		btst	#0,$22(a0)
000120D0 6600                       		bne.s	loc_115A8
000120D2 4440                       		neg.w	d0
000120D4                            
000120D4                            loc_115A8:
000120D4 4400                       		neg.b	d0
000120D6 E840                       		asr.w	#4,d0
000120D8 0828 0000 0028             		btst	#0,$28(a0)
000120DE 6700                       		beq.s	Obj5D_MoveSonic
000120E0 4440                       		neg.w	d0
000120E2                            
000120E2                            Obj5D_MoveSonic:
000120E2 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
000120E6                            
000120E6                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
000120E6 5328 001E                  		subq.b	#1,$1E(a0)
000120EA 6A00                       		bpl.s	Obj5D_ChkDel
000120EC 117C 0000 001E             		move.b	#0,$1E(a0)
000120F2 5228 001B                  		addq.b	#1,$1B(a0)
000120F6 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
000120FC 6500                       		bcs.s	loc_115D8
000120FE 117C 0000 001B             		move.b	#0,$1B(a0)
00012104                            
00012104                            loc_115D8:
00012104 7000                       		moveq	#0,d0
00012106 0828 0000 0028             		btst	#0,$28(a0)
0001210C 6700                       		beq.s	loc_115E4
0001210E 7002                       		moveq	#2,d0
00012110                            
00012110                            loc_115E4:
00012110 D028 001B                  		add.b	$1B(a0),d0
00012114 1140 001A                  		move.b	d0,$1A(a0)
00012118                            
00012118                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00012118 6100 BFF6                  		bsr.w	DisplaySprite
0001211C 3028 0008                  		move.w	8(a0),d0
00012120 0240 FF80                  		andi.w	#$FF80,d0
00012124 3238 F700                  		move.w	($FFFFF700).w,d1
00012128 0441 0080                  		subi.w	#$80,d1
0001212C 0241 FF80                  		andi.w	#$FF80,d1
00012130 9041                       		sub.w	d1,d0
00012132 0C40 0280                  		cmpi.w	#$280,d0
00012136 6200 C014                  		bhi.w	DeleteObject
0001213A 4E75                       		rts	
0001213C                            ; ===========================================================================
0001213C                            ; ---------------------------------------------------------------------------
0001213C                            ; Sprite mappings - fans (SLZ)
0001213C                            ; ---------------------------------------------------------------------------
0001213C                            Map_obj5D:
0001213C                            	include "_maps\obj5D.asm"
0001213C                            ; ---------------------------------------------------------------------------
0001213C                            ; Sprite mappings - fans (SLZ)
0001213C                            ; ---------------------------------------------------------------------------
0001213C 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00012140 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00012144 0000                       		dc.w byte_1161A-Map_obj5D
00012146 02                         byte_1161A:	dc.b 2
00012147 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
0001214C 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00012151 02                         byte_11625:	dc.b 2
00012152 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00012157 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
0001215C 02                         byte_11630:	dc.b 2
0001215D F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00012162 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00012168 00                         		even
00012168 00                         		even
00012168                            
00012168                            ; ===========================================================================
00012168                            ; ---------------------------------------------------------------------------
00012168                            ; Object 5E - seesaws (SLZ)
00012168                            ; ---------------------------------------------------------------------------
00012168                            
00012168                            Obj5E:					; XREF: Obj_Index
00012168 7000                       		moveq	#0,d0
0001216A 1028 0024                  		move.b	$24(a0),d0
0001216E 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00012172 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00012176 3028 0030                  		move.w	$30(a0),d0
0001217A 0240 FF80                  		andi.w	#$FF80,d0
0001217E 3238 F700                  		move.w	($FFFFF700).w,d1
00012182 0441 0080                  		subi.w	#$80,d1
00012186 0241 FF80                  		andi.w	#$FF80,d1
0001218A 9041                       		sub.w	d1,d0
0001218C 6B00 BFBE                  		bmi.w	DeleteObject
00012190 0C40 0280                  		cmpi.w	#$280,d0
00012194 6200 BFB6                  		bhi.w	DeleteObject
00012198 6000 BF76                  		bra.w	DisplaySprite
0001219C                            ; ===========================================================================
0001219C 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
0001219E 0000                       		dc.w Obj5E_Slope-Obj5E_Index
000121A0 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
000121A2 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
000121A4 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
000121A6 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
000121A8                            ; ===========================================================================
000121A8                            
000121A8                            Obj5E_Main:				; XREF: Obj5E_Index
000121A8 5428 0024                  		addq.b	#2,$24(a0)
000121AC 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
000121B4 317C 0374 0002             		move.w	#$374,2(a0)
000121BA 0028 0004 0001             		ori.b	#4,1(a0)
000121C0 117C 0004 0018             		move.b	#4,$18(a0)
000121C6 117C 0030 0019             		move.b	#$30,$19(a0)
000121CC 3168 0008 0030             		move.w	8(a0),$30(a0)
000121D2 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
000121D6 6600                       		bne.s	loc_116D2	; if not, branch
000121D8 6100 C3E2                  		bsr.w	SingleObjLoad2
000121DC 6600                       		bne.s	loc_116D2
000121DE 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
000121E2 5C29 0024                  		addq.b	#6,$24(a1)
000121E6 3368 0008 0008             		move.w	8(a0),8(a1)
000121EC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000121F2 1368 0022 0022             		move.b	$22(a0),$22(a1)
000121F8 2348 003C                  		move.l	a0,$3C(a1)
000121FC                            
000121FC                            loc_116D2:
000121FC 0828 0000 0022             		btst	#0,$22(a0)
00012202 6700                       		beq.s	loc_116E0
00012204 117C 0002 001A             		move.b	#2,$1A(a0)
0001220A                            
0001220A                            loc_116E0:
0001220A 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00012210                            
00012210                            Obj5E_Slope:				; XREF: Obj5E_Index
00012210 1228 003A                  		move.b	$3A(a0),d1
00012214 6100 0000                  		bsr.w	loc_11766
00012218 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
0001221E 0828 0000 001A             		btst	#0,$1A(a0)
00012224 6700                       		beq.s	loc_11702
00012226 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
0001222C                            
0001222C                            loc_11702:
0001222C 43F8 D000                  		lea	($FFFFD000).w,a1
00012230 3169 0012 0038             		move.w	$12(a1),$38(a0)
00012236 323C 0030                  		move.w	#$30,d1
0001223A 4EB9 0000 7FD6             		jsr	(SlopeObject).l
00012240 4E75                       		rts	
00012242                            ; ===========================================================================
00012242                            
00012242                            Obj5E_Slope2:				; XREF: Obj5E_Index
00012242 6100 0000                  		bsr.w	loc_1174A
00012246 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
0001224C 0828 0000 001A             		btst	#0,$1A(a0)
00012252 6700                       		beq.s	loc_11730
00012254 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
0001225A                            
0001225A                            loc_11730:
0001225A 323C 0030                  		move.w	#$30,d1
0001225E 4EB9 0000 8076             		jsr	(ExitPlatform).l
00012264 323C 0030                  		move.w	#$30,d1
00012268 3428 0008                  		move.w	8(a0),d2
0001226C 4EB9 0000 8FD4             		jsr	SlopeObject2
00012272 4E75                       		rts	
00012274                            ; ===========================================================================
00012274                            
00012274                            loc_1174A:				; XREF: Obj5E_Slope2
00012274 7202                       		moveq	#2,d1
00012276 43F8 D000                  		lea	($FFFFD000).w,a1
0001227A 3028 0008                  		move.w	8(a0),d0
0001227E 9069 0008                  		sub.w	8(a1),d0
00012282 6400                       		bcc.s	loc_1175E
00012284 4440                       		neg.w	d0
00012286 7200                       		moveq	#0,d1
00012288                            
00012288                            loc_1175E:
00012288 0C40 0008                  		cmpi.w	#8,d0
0001228C 6400                       		bcc.s	loc_11766
0001228E 7201                       		moveq	#1,d1
00012290                            
00012290                            loc_11766:
00012290 1028 001A                  		move.b	$1A(a0),d0
00012294 B001                       		cmp.b	d1,d0
00012296 6700                       		beq.s	locret_11790
00012298 6400                       		bcc.s	loc_11772
0001229A 5400                       		addq.b	#2,d0
0001229C                            
0001229C                            loc_11772:
0001229C 5300                       		subq.b	#1,d0
0001229E 1140 001A                  		move.b	d0,$1A(a0)
000122A2 1141 003A                  		move.b	d1,$3A(a0)
000122A6 08A8 0000 0001             		bclr	#0,1(a0)
000122AC 0828 0001 001A             		btst	#1,$1A(a0)
000122B2 6700                       		beq.s	locret_11790
000122B4 08E8 0000 0001             		bset	#0,1(a0)
000122BA                            
000122BA                            locret_11790:
000122BA 4E75                       		rts	
000122BC                            ; ===========================================================================
000122BC                            
000122BC                            Obj5E_Spikeball:			; XREF: Obj5E_Index
000122BC 5428 0024                  		addq.b	#2,$24(a0)
000122C0 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
000122C8 317C 04F0 0002             		move.w	#$4F0,2(a0)
000122CE 0028 0004 0001             		ori.b	#4,1(a0)
000122D4 117C 0004 0018             		move.b	#4,$18(a0)
000122DA 117C 008B 0020             		move.b	#$8B,$20(a0)
000122E0 117C 000C 0019             		move.b	#$C,$19(a0)
000122E6 3168 0008 0030             		move.w	8(a0),$30(a0)
000122EC 0668 0028 0008             		addi.w	#$28,8(a0)
000122F2 3168 000C 0034             		move.w	$C(a0),$34(a0)
000122F8 117C 0001 001A             		move.b	#1,$1A(a0)
000122FE 0828 0000 0022             		btst	#0,$22(a0)
00012304 6700                       		beq.s	Obj5E_MoveSpike
00012306 0468 0050 0008             		subi.w	#$50,8(a0)
0001230C 117C 0002 003A             		move.b	#2,$3A(a0)
00012312                            
00012312                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00012312 2268 003C                  		movea.l	$3C(a0),a1
00012316 7000                       		moveq	#0,d0
00012318 1028 003A                  		move.b	$3A(a0),d0
0001231C 9029 003A                  		sub.b	$3A(a1),d0
00012320 6700                       		beq.s	loc_1183E
00012322 6400                       		bcc.s	loc_117FC
00012324 4400                       		neg.b	d0
00012326                            
00012326                            loc_117FC:
00012326 323C F7E8                  		move.w	#-$818,d1
0001232A 343C FEEC                  		move.w	#-$114,d2
0001232E 0C00 0001                  		cmpi.b	#1,d0
00012332 6700                       		beq.s	loc_11822
00012334 323C F510                  		move.w	#-$AF0,d1
00012338 343C FF34                  		move.w	#-$CC,d2
0001233C 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00012342 6D00                       		blt.s	loc_11822
00012344 323C F200                  		move.w	#-$E00,d1
00012348 343C FF60                  		move.w	#-$A0,d2
0001234C                            
0001234C                            loc_11822:
0001234C 3141 0012                  		move.w	d1,$12(a0)
00012350 3142 0010                  		move.w	d2,$10(a0)
00012354 3028 0008                  		move.w	8(a0),d0
00012358 9068 0030                  		sub.w	$30(a0),d0
0001235C 6400                       		bcc.s	loc_11838
0001235E 4468 0010                  		neg.w	$10(a0)
00012362                            
00012362                            loc_11838:
00012362 5428 0024                  		addq.b	#2,$24(a0)
00012366 6000                       		bra.s	Obj5E_SpikeFall
00012368                            ; ===========================================================================
00012368                            
00012368                            loc_1183E:				; XREF: Obj5E_MoveSpike
00012368 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
0001236E 7000                       		moveq	#0,d0
00012370 1029 001A                  		move.b	$1A(a1),d0
00012374 343C 0028                  		move.w	#$28,d2
00012378 3228 0008                  		move.w	8(a0),d1
0001237C 9268 0030                  		sub.w	$30(a0),d1
00012380 6400                       		bcc.s	loc_1185C
00012382 4442                       		neg.w	d2
00012384 5440                       		addq.w	#2,d0
00012386                            
00012386                            loc_1185C:
00012386 D040                       		add.w	d0,d0
00012388 3228 0034                  		move.w	$34(a0),d1
0001238C D272 0000                  		add.w	(a2,d0.w),d1
00012390 3141 000C                  		move.w	d1,$C(a0)
00012394 D468 0030                  		add.w	$30(a0),d2
00012398 3142 0008                  		move.w	d2,8(a0)
0001239C 4268 000E                  		clr.w	$E(a0)
000123A0 4268 000A                  		clr.w	$A(a0)
000123A4 4E75                       		rts	
000123A6                            ; ===========================================================================
000123A6                            
000123A6                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
000123A6 4A68 0012                  		tst.w	$12(a0)
000123AA 6A00                       		bpl.s	loc_1189A
000123AC 6100 BD10                  		bsr.w	ObjectFall
000123B0 3028 0034                  		move.w	$34(a0),d0
000123B4 0440 002F                  		subi.w	#$2F,d0
000123B8 B068 000C                  		cmp.w	$C(a0),d0
000123BC 6E00                       		bgt.s	locret_11898
000123BE 6100 BCFE                  		bsr.w	ObjectFall
000123C2                            
000123C2                            locret_11898:
000123C2 4E75                       		rts	
000123C4                            ; ===========================================================================
000123C4                            
000123C4                            loc_1189A:				; XREF: Obj5E_SpikeFall
000123C4 6100 BCF8                  		bsr.w	ObjectFall
000123C8 2268 003C                  		movea.l	$3C(a0),a1
000123CC 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000123D2 7000                       		moveq	#0,d0
000123D4 1029 001A                  		move.b	$1A(a1),d0
000123D8 3228 0008                  		move.w	8(a0),d1
000123DC 9268 0030                  		sub.w	$30(a0),d1
000123E0 6400                       		bcc.s	loc_118BA
000123E2 5440                       		addq.w	#2,d0
000123E4                            
000123E4                            loc_118BA:
000123E4 D040                       		add.w	d0,d0
000123E6 3228 0034                  		move.w	$34(a0),d1
000123EA D272 0000                  		add.w	(a2,d0.w),d1
000123EE B268 000C                  		cmp.w	$C(a0),d1
000123F2 6E00                       		bgt.s	locret_11938
000123F4 2268 003C                  		movea.l	$3C(a0),a1
000123F8 7202                       		moveq	#2,d1
000123FA 4A68 0010                  		tst.w	$10(a0)
000123FE 6B00                       		bmi.s	Obj5E_Spring
00012400 7200                       		moveq	#0,d1
00012402                            
00012402                            Obj5E_Spring:
00012402 1341 003A                  		move.b	d1,$3A(a1)
00012406 1141 003A                  		move.b	d1,$3A(a0)
0001240A B229 001A                  		cmp.b	$1A(a1),d1
0001240E 6700                       		beq.s	loc_1192C
00012410 08A9 0003 0022             		bclr	#3,$22(a1)
00012416 6700                       		beq.s	loc_1192C
00012418 4229 0025                  		clr.b	$25(a1)
0001241C 137C 0002 0024             		move.b	#2,$24(a1)
00012422 45F8 D000                  		lea	($FFFFD000).w,a2
00012426 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001242C 446A 0012                  		neg.w	$12(a2)
00012430 08EA 0001 0022             		bset	#1,$22(a2)
00012436 08AA 0003 0022             		bclr	#3,$22(a2)
0001243C 422A 003C                  		clr.b	$3C(a2)
00012440 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00012446 157C 0002 0024             		move.b	#2,$24(a2)
0001244C 303C 00CC                  		move.w	#$CC,d0
00012450 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play spring sound
00012456                            
00012456                            loc_1192C:
00012456 4268 0010                  		clr.w	$10(a0)
0001245A 4268 0012                  		clr.w	$12(a0)
0001245E 5528 0024                  		subq.b	#2,$24(a0)
00012462                            
00012462                            locret_11938:
00012462 4E75                       		rts	
00012464                            ; ===========================================================================
00012464 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001246E                            
0001246E                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
0001249E                            		even
0001249E                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
000124CE                            		even
000124CE                            ; ---------------------------------------------------------------------------
000124CE                            ; Sprite mappings - seesaws (SLZ)
000124CE                            ; ---------------------------------------------------------------------------
000124CE                            Map_obj5E:
000124CE                            	include "_maps\obj5E.asm"
000124CE                            ; ---------------------------------------------------------------------------
000124CE                            ; Sprite mappings - seesaws (SLZ)
000124CE                            ; ---------------------------------------------------------------------------
000124CE 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000124D2 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000124D6 07                         byte_119AC:	dc.b 7
000124D7 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
000124DC DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
000124E1 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
000124E6 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
000124EB FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
000124F0 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
000124F5 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
000124FA 04                         byte_119D0:	dc.b 4
000124FB E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00012500 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00012505 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
0001250A E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00012510 00                         		even
00012510 00                         		even
00012510                            
00012510                            ; ---------------------------------------------------------------------------
00012510                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00012510                            ; ---------------------------------------------------------------------------
00012510                            Map_obj5Ea:
00012510                            	include "_maps\obj5Eballs.asm"
00012510                            ; ---------------------------------------------------------------------------
00012510                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00012510                            ; ---------------------------------------------------------------------------
00012510 0000                       		dc.w byte_119EA-Map_obj5Ea
00012512 0000                       		dc.w byte_119F0-Map_obj5Ea
00012514 01                         byte_119EA:	dc.b 1
00012515 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001251A 01                         byte_119F0:	dc.b 1
0001251B F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00012520                            		even
00012520                            		even
00012520                            
00012520                            ; ===========================================================================
00012520                            ; ---------------------------------------------------------------------------
00012520                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00012520                            ; ---------------------------------------------------------------------------
00012520                            
00012520                            Obj5F:					; XREF: Obj_Index
00012520 7000                       		moveq	#0,d0
00012522 1028 0024                  		move.b	$24(a0),d0
00012526 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
0001252A 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
0001252E                            ; ===========================================================================
0001252E 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00012530 0000                       		dc.w Obj5F_Action-Obj5F_Index
00012532 0000                       		dc.w Obj5F_Display-Obj5F_Index
00012534 0000                       		dc.w Obj5F_End-Obj5F_Index
00012536                            ; ===========================================================================
00012536                            
00012536                            Obj5F_Main:				; XREF: Obj5F_Index
00012536 5428 0024                  		addq.b	#2,$24(a0)
0001253A 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00012542 317C 0400 0002             		move.w	#$400,2(a0)
00012548 0028 0004 0001             		ori.b	#4,1(a0)
0001254E 117C 0003 0018             		move.b	#3,$18(a0)
00012554 117C 000C 0019             		move.b	#$C,$19(a0)
0001255A 1028 0028                  		move.b	$28(a0),d0
0001255E 6700                       		beq.s	loc_11A3C
00012560 1140 0024                  		move.b	d0,$24(a0)
00012564 4E75                       		rts	
00012566                            ; ===========================================================================
00012566                            
00012566                            loc_11A3C:
00012566 117C 009A 0020             		move.b	#$9A,$20(a0)
0001256C 0868 0000 0022             		bchg	#0,$22(a0)
00012572                            
00012572                            Obj5F_Action:				; XREF: Obj5F_Index
00012572 7000                       		moveq	#0,d0
00012574 1028 0025                  		move.b	$25(a0),d0
00012578 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
0001257C 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00012580 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012586 6100 8C9A                  		bsr.w	AnimateSprite
0001258A 6000 DC46                  		bra.w	MarkObjGone
0001258E                            ; ===========================================================================
0001258E 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00012590 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00012592 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00012594                            ; ===========================================================================
00012594                            
00012594                            Obj5F_Walk:				; XREF: Obj5F_Index2
00012594 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012598 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001259C 6A00                       		bpl.s	locret_11A96	; if time remains, branch
0001259E 5428 0025                  		addq.b	#2,$25(a0)
000125A2 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
000125A8 317C 0010 0010             		move.w	#$10,$10(a0)
000125AE 117C 0001 001C             		move.b	#1,$1C(a0)
000125B4 0868 0000 0022             		bchg	#0,$22(a0)
000125BA 6700                       		beq.s	locret_11A96
000125BC 4468 0010                  		neg.w	$10(a0)		; change direction
000125C0                            
000125C0                            locret_11A96:
000125C0 4E75                       		rts	
000125C2                            ; ===========================================================================
000125C2                            
000125C2                            Obj5F_Wait:				; XREF: Obj5F_Index2
000125C2 6100 0000                  		bsr.w	Obj5F_ChkSonic
000125C6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000125CA 6B00                       		bmi.s	loc_11AA8
000125CC 6100 BB1C                  		bsr.w	SpeedToPos
000125D0 4E75                       		rts	
000125D2                            ; ===========================================================================
000125D2                            
000125D2                            loc_11AA8:
000125D2 5528 0025                  		subq.b	#2,$25(a0)
000125D6 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
000125DC 4268 0010                  		clr.w	$10(a0)		; stop walking
000125E0 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
000125E6 4E75                       		rts	
000125E8                            ; ===========================================================================
000125E8                            
000125E8                            Obj5F_Explode:				; XREF: Obj5F_Index2
000125E8 5368 0030                  		subq.w	#1,$30(a0)
000125EC 6A00                       		bpl.s	locret_11AD0
000125EE 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
000125F2 117C 0000 0024             		move.b	#0,$24(a0)
000125F8                            
000125F8                            locret_11AD0:
000125F8 4E75                       		rts	
000125FA                            ; ===========================================================================
000125FA                            
000125FA                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
000125FA 3038 D008                  		move.w	($FFFFD008).w,d0
000125FE 9068 0008                  		sub.w	8(a0),d0
00012602 6400                       		bcc.s	loc_11ADE
00012604 4440                       		neg.w	d0
00012606                            
00012606                            loc_11ADE:
00012606 0C40 0060                  		cmpi.w	#$60,d0
0001260A 6400                       		bcc.s	locret_11B5E
0001260C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012610 9068 000C                  		sub.w	$C(a0),d0
00012614 6400                       		bcc.s	Obj5F_MakeFuse
00012616 4440                       		neg.w	d0
00012618                            
00012618                            Obj5F_MakeFuse:
00012618 0C40 0060                  		cmpi.w	#$60,d0
0001261C 6400                       		bcc.s	locret_11B5E
0001261E 4A78 FE08                  		tst.w	($FFFFFE08).w
00012622 6600                       		bne.s	locret_11B5E
00012624 117C 0004 0025             		move.b	#4,$25(a0)
0001262A 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00012630 4268 0010                  		clr.w	$10(a0)
00012634 117C 0002 001C             		move.b	#2,$1C(a0)
0001263A 6100 BF80                  		bsr.w	SingleObjLoad2
0001263E 6600                       		bne.s	locret_11B5E
00012640 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00012644 3368 0008 0008             		move.w	8(a0),8(a1)
0001264A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012650 3368 000C 0034             		move.w	$C(a0),$34(a1)
00012656 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001265C 137C 0004 0028             		move.b	#4,$28(a1)
00012662 137C 0003 001C             		move.b	#3,$1C(a1)
00012668 337C 0010 0012             		move.w	#$10,$12(a1)
0001266E 0828 0001 0022             		btst	#1,$22(a0)
00012674 6700                       		beq.s	loc_11B54
00012676 4469 0012                  		neg.w	$12(a1)
0001267A                            
0001267A                            loc_11B54:
0001267A 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00012680 2348 003C                  		move.l	a0,$3C(a1)
00012684                            
00012684                            locret_11B5E:
00012684 4E75                       		rts	
00012686                            ; ===========================================================================
00012686                            
00012686                            Obj5F_Display:				; XREF: Obj5F_Index
00012686 6100                       		bsr.s	loc_11B70
00012688 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001268E 6100 8B92                  		bsr.w	AnimateSprite
00012692 6000 DB3E                  		bra.w	MarkObjGone
00012696                            ; ===========================================================================
00012696                            
00012696                            loc_11B70:
00012696 5368 0030                  		subq.w	#1,$30(a0)
0001269A 6B00                       		bmi.s	loc_11B7C
0001269C 6100 BA4C                  		bsr.w	SpeedToPos
000126A0 4E75                       		rts	
000126A2                            ; ===========================================================================
000126A2                            
000126A2                            loc_11B7C:
000126A2 4268 0030                  		clr.w	$30(a0)
000126A6 4228 0024                  		clr.b	$24(a0)
000126AA 3168 0034 000C             		move.w	$34(a0),$C(a0)
000126B0 7203                       		moveq	#3,d1
000126B2 2248                       		movea.l	a0,a1
000126B4 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
000126BA 6000                       		bra.s	Obj5F_MakeShrap
000126BC                            ; ===========================================================================
000126BC                            
000126BC                            Obj5F_Loop:
000126BC 6100 BEFE                  		bsr.w	SingleObjLoad2
000126C0 6600                       		bne.s	loc_11BCE
000126C2                            
000126C2                            Obj5F_MakeShrap:			; XREF: loc_11B7C
000126C2 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
000126C6 3368 0008 0008             		move.w	8(a0),8(a1)
000126CC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000126D2 137C 0006 0028             		move.b	#6,$28(a1)
000126D8 137C 0004 001C             		move.b	#4,$1C(a1)
000126DE 335A 0010                  		move.w	(a2)+,$10(a1)
000126E2 335A 0012                  		move.w	(a2)+,$12(a1)
000126E6 137C 0098 0020             		move.b	#$98,$20(a1)
000126EC 08E9 0007 0001             		bset	#7,1(a1)
000126F2                            
000126F2                            loc_11BCE:
000126F2 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
000126F6                            
000126F6 117C 0006 0024             		move.b	#6,$24(a0)
000126FC                            
000126FC                            Obj5F_End:				; XREF: Obj5F_Index
000126FC 6100 B9EC                  		bsr.w	SpeedToPos
00012700 0668 0018 0012             		addi.w	#$18,$12(a0)
00012706 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001270C 6100 8B14                  		bsr.w	AnimateSprite
00012710 4A28 0001                  		tst.b	1(a0)
00012714 6A00 BA36                  		bpl.w	DeleteObject
00012718 6000 B9F6                  		bra.w	DisplaySprite
0001271C                            ; ===========================================================================
0001271C FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
0001272C                            
0001272C                            Ani_obj5F:
0001272C                            	include "_anim\obj5F.asm"
0001272C                            ; ---------------------------------------------------------------------------
0001272C                            ; Animation script - Bomb enemy
0001272C                            ; ---------------------------------------------------------------------------
0001272C 0000                       		dc.w byte_11C12-Ani_obj5F
0001272E 0000                       		dc.w byte_11C16-Ani_obj5F
00012730 0000                       		dc.w byte_11C1C-Ani_obj5F
00012732 0000                       		dc.w byte_11C20-Ani_obj5F
00012734 0000                       		dc.w byte_11C24-Ani_obj5F
00012736 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
0001273A 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00012740 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00012744 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00012748 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
0001274C                            		even
0001274C                            		even
0001274C                            
0001274C                            ; ---------------------------------------------------------------------------
0001274C                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001274C                            ; ---------------------------------------------------------------------------
0001274C                            Map_obj5F:
0001274C                            	include "_maps\obj5F.asm"
0001274C                            ; ---------------------------------------------------------------------------
0001274C                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001274C                            ; ---------------------------------------------------------------------------
0001274C 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00012750 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00012754 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00012758 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
0001275C 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00012760 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00012764 03                         byte_11C40:	dc.b 3
00012765 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
0001276A 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001276F E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012774 03                         byte_11C50:	dc.b 3
00012775 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001277A 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001277F E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012784 03                         byte_11C60:	dc.b 3
00012785 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
0001278A 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
0001278F E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012794 03                         byte_11C70:	dc.b 3
00012795 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001279A 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
0001279F E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000127A4 03                         byte_11C80:	dc.b 3
000127A5 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000127AA 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
000127AF E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000127B4 03                         byte_11C90:	dc.b 3
000127B5 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000127BA 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
000127BF E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000127C4 02                         byte_11CA0:	dc.b 2
000127C5 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000127CA 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000127CF 02                         byte_11CAB:	dc.b 2
000127D0 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000127D5 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000127DA 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
000127DB E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
000127E0 01                         byte_11CBC:	dc.b 1			; fuse
000127E1 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
000127E6 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
000127E7 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000127EC 01                         byte_11CC8:	dc.b 1			; fireball
000127ED FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000127F2                            		even
000127F2                            		even
000127F2                            
000127F2                            ; ===========================================================================
000127F2                            ; ---------------------------------------------------------------------------
000127F2                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
000127F2                            ; ---------------------------------------------------------------------------
000127F2                            
000127F2                            Obj60:					; XREF: Obj_Index
000127F2 7000                       		moveq	#0,d0
000127F4 1028 0024                  		move.b	$24(a0),d0
000127F8 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
000127FC 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
00012800                            ; ===========================================================================
00012800 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00012802 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00012804 0000                       		dc.w Obj60_Display-Obj60_Index
00012806 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00012808 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
0001280A                            ; ===========================================================================
0001280A                            
0001280A                            Obj60_Main:				; XREF: Obj60_Index
0001280A 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00012812 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00012818 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0001281E 6700                       		beq.s	loc_11D02
00012820 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
00012826                            
00012826                            loc_11D02:
00012826 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001282C 6600                       		bne.s	loc_11D10
0001282E 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00012834                            
00012834                            loc_11D10:
00012834 0028 0004 0001             		ori.b	#4,1(a0)
0001283A 117C 0004 0018             		move.b	#4,$18(a0)
00012840 117C 000B 0020             		move.b	#$B,$20(a0)
00012846 117C 000C 0019             		move.b	#$C,$19(a0)
0001284C 7400                       		moveq	#0,d2
0001284E 45E8 0037                  		lea	$37(a0),a2
00012852 264A                       		movea.l	a2,a3
00012854 524A                       		addq.w	#1,a2
00012856 7203                       		moveq	#3,d1
00012858                            
00012858                            Obj60_MakeOrbs:
00012858 6100 BD62                  		bsr.w	SingleObjLoad2
0001285C 6600                       		bne.s	loc_11D90
0001285E 5213                       		addq.b	#1,(a3)
00012860 3A09                       		move.w	a1,d5
00012862 0445 D000                  		subi.w	#-$3000,d5
00012866 EC4D                       		lsr.w	#6,d5
00012868 0245 007F                  		andi.w	#$7F,d5
0001286C 14C5                       		move.b	d5,(a2)+
0001286E 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00012870 137C 0006 0024             		move.b	#6,$24(a1)
00012876 2368 0004 0004             		move.l	4(a0),4(a1)
0001287C 3368 0002 0002             		move.w	2(a0),2(a1)
00012882 0029 0004 0001             		ori.b	#4,1(a1)
00012888 137C 0004 0018             		move.b	#4,$18(a1)
0001288E 137C 0008 0019             		move.b	#8,$19(a1)
00012894 137C 0003 001A             		move.b	#3,$1A(a1)
0001289A 137C 0098 0020             		move.b	#$98,$20(a1)
000128A0 1342 0026                  		move.b	d2,$26(a1)
000128A4 0602 0040                  		addi.b	#$40,d2
000128A8 2348 003C                  		move.l	a0,$3C(a1)
000128AC 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
000128B0                            
000128B0                            loc_11D90:
000128B0 7001                       		moveq	#1,d0
000128B2 0828 0000 0022             		btst	#0,$22(a0)
000128B8 6700                       		beq.s	Obj60_Move
000128BA 4440                       		neg.w	d0
000128BC                            
000128BC                            Obj60_Move:
000128BC 1140 0036                  		move.b	d0,$36(a0)
000128C0 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
000128C6 5428 0024                  		addq.b	#2,$24(a0)
000128CA 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
000128D0 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
000128D6 6700                       		beq.s	locret_11DBC	; if not, branch
000128D8 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
000128DC                            
000128DC                            locret_11DBC:
000128DC 4E75                       		rts	
000128DE                            ; ===========================================================================
000128DE                            
000128DE                            Obj60_ChkSonic:				; XREF: Obj60_Index
000128DE 3038 D008                  		move.w	($FFFFD008).w,d0
000128E2 9068 0008                  		sub.w	8(a0),d0
000128E6 6400                       		bcc.s	loc_11DCA
000128E8 4440                       		neg.w	d0
000128EA                            
000128EA                            loc_11DCA:
000128EA 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
000128EE 6400                       		bcc.s	Obj60_Animate	; if not, branch
000128F0 3038 D00C                  		move.w	($FFFFD00C).w,d0
000128F4 9068 000C                  		sub.w	$C(a0),d0
000128F8 6400                       		bcc.s	loc_11DDC
000128FA 4440                       		neg.w	d0
000128FC                            
000128FC                            loc_11DDC:
000128FC 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00012900 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012902 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00012906 6600                       		bne.s	Obj60_Animate	; if yes, branch
00012908 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
0001290E                            
0001290E                            Obj60_Animate:
0001290E 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00012914 6100 890C                  		bsr.w	AnimateSprite
00012918 6000 0000                  		bra.w	Obj60_ChkDel
0001291C                            ; ===========================================================================
0001291C                            
0001291C                            Obj60_Display:				; XREF: Obj60_Index
0001291C 6100 B7CC                  		bsr.w	SpeedToPos
00012920                            
00012920                            Obj60_ChkDel:				; XREF: Obj60_Animate
00012920 3028 0008                  		move.w	8(a0),d0
00012924 0240 FF80                  		andi.w	#$FF80,d0
00012928 3238 F700                  		move.w	($FFFFF700).w,d1
0001292C 0441 0080                  		subi.w	#$80,d1
00012930 0241 FF80                  		andi.w	#$FF80,d1
00012934 9041                       		sub.w	d1,d0
00012936 0C40 0280                  		cmpi.w	#$280,d0
0001293A 6200 0000                  		bhi.w	Obj60_ChkGone
0001293E 6000 B7D0                  		bra.w	DisplaySprite
00012942                            ; ===========================================================================
00012942                            
00012942                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00012942 45F8 FC00                  		lea	($FFFFFC00).w,a2
00012946 7000                       		moveq	#0,d0
00012948 1028 0023                  		move.b	$23(a0),d0
0001294C 6700                       		beq.s	loc_11E34
0001294E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012954                            
00012954                            loc_11E34:
00012954 45E8 0037                  		lea	$37(a0),a2
00012958 7400                       		moveq	#0,d2
0001295A 141A                       		move.b	(a2)+,d2
0001295C 5342                       		subq.w	#1,d2
0001295E 6500                       		bcs.s	Obj60_Delete
00012960                            
00012960                            loc_11E40:
00012960 7000                       		moveq	#0,d0
00012962 101A                       		move.b	(a2)+,d0
00012964 ED48                       		lsl.w	#6,d0
00012966 0680 00FF D000             		addi.l	#$FFD000,d0
0001296C 2240                       		movea.l	d0,a1
0001296E 6100 B7DE                  		bsr.w	DeleteObject2
00012972 51CA FFEC                  		dbf	d2,loc_11E40
00012976                            
00012976                            Obj60_Delete:
00012976 6000 B7D4                  		bra.w	DeleteObject
0001297A                            ; ===========================================================================
0001297A                            
0001297A                            Obj60_MoveOrb:				; XREF: Obj60_Index
0001297A 2268 003C                  		movea.l	$3C(a0),a1
0001297E 0C11 0060                  		cmpi.b	#$60,0(a1)
00012982 6600 B7C8                  		bne.w	DeleteObject
00012986 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
0001298C 6600                       		bne.s	Obj60_Circle
0001298E 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
00012994 6600                       		bne.s	Obj60_Circle
00012996 5428 0024                  		addq.b	#2,$24(a0)
0001299A 5329 0037                  		subq.b	#1,$37(a1)
0001299E 6600                       		bne.s	Obj60_FireOrb
000129A0 5429 0024                  		addq.b	#2,$24(a1)
000129A4                            
000129A4                            Obj60_FireOrb:
000129A4 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
000129AA 0829 0000 0022             		btst	#0,$22(a1)
000129B0 6700                       		beq.s	Obj60_Display2
000129B2 4468 0010                  		neg.w	$10(a0)
000129B6                            
000129B6                            Obj60_Display2:
000129B6 6000 B758                  		bra.w	DisplaySprite
000129BA                            ; ===========================================================================
000129BA                            
000129BA                            Obj60_Circle:				; XREF: Obj60_MoveOrb
000129BA 1028 0026                  		move.b	$26(a0),d0
000129BE 4EB9 0000 33D4             		jsr	(CalcSine).l
000129C4 E841                       		asr.w	#4,d1
000129C6 D269 0008                  		add.w	8(a1),d1
000129CA 3141 0008                  		move.w	d1,8(a0)
000129CE E840                       		asr.w	#4,d0
000129D0 D069 000C                  		add.w	$C(a1),d0
000129D4 3140 000C                  		move.w	d0,$C(a0)
000129D8 1029 0036                  		move.b	$36(a1),d0
000129DC D128 0026                  		add.b	d0,$26(a0)
000129E0 6000 B72E                  		bra.w	DisplaySprite
000129E4                            ; ===========================================================================
000129E4                            
000129E4                            Obj60_ChkDel2:				; XREF: Obj60_Index
000129E4 6100 B704                  		bsr.w	SpeedToPos
000129E8 4A28 0001                  		tst.b	1(a0)
000129EC 6A00 B75E                  		bpl.w	DeleteObject
000129F0 6000 B71E                  		bra.w	DisplaySprite
000129F4                            ; ===========================================================================
000129F4                            Ani_obj60:
000129F4                            	include "_anim\obj60.asm"
000129F4                            ; ---------------------------------------------------------------------------
000129F4                            ; Animation script - Orbinaut enemy
000129F4                            ; ---------------------------------------------------------------------------
000129F4 0000                       		dc.w byte_11EDA-Ani_obj60
000129F6 0000                       		dc.w byte_11EDE-Ani_obj60
000129F8 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
000129FC 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00012A02                            		even
00012A02                            		even
00012A02                            
00012A02                            ; ---------------------------------------------------------------------------
00012A02                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012A02                            ; ---------------------------------------------------------------------------
00012A02                            Map_obj60:
00012A02                            	include "_maps\obj60.asm"
00012A02                            ; ---------------------------------------------------------------------------
00012A02                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012A02                            ; ---------------------------------------------------------------------------
00012A02 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00012A06 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00012A0A 01                         byte_11EEC:	dc.b 1
00012A0B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012A10 01                         byte_11EF2:	dc.b 1
00012A11 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00012A16 01                         byte_11EF8:	dc.b 1
00012A17 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00012A1C 01                         byte_11EFE:	dc.b 1
00012A1D F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00012A22                            		even
00012A22                            		even
00012A22                            
00012A22                            ; ===========================================================================
00012A22                            ; ---------------------------------------------------------------------------
00012A22                            ; Object 16 - harpoon (LZ)
00012A22                            ; ---------------------------------------------------------------------------
00012A22                            
00012A22                            Obj16:					; XREF: Obj_Index
00012A22 7000                       		moveq	#0,d0
00012A24 1028 0024                  		move.b	$24(a0),d0
00012A28 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
00012A2C 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00012A30                            ; ===========================================================================
00012A30 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00012A32 0000                       		dc.w Obj16_Move-Obj16_Index
00012A34 0000                       		dc.w Obj16_Wait-Obj16_Index
00012A36                            ; ===========================================================================
00012A36                            
00012A36                            Obj16_Main:				; XREF: Obj16_Index
00012A36 5428 0024                  		addq.b	#2,$24(a0)
00012A3A 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00012A42 317C 03CC 0002             		move.w	#$3CC,2(a0)
00012A48 0028 0004 0001             		ori.b	#4,1(a0)
00012A4E 117C 0004 0018             		move.b	#4,$18(a0)
00012A54 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00012A5A 117C 0014 0019             		move.b	#$14,$19(a0)
00012A60 317C 003C 0030             		move.w	#60,$30(a0)
00012A66                            
00012A66                            Obj16_Move:				; XREF: Obj16_Index
00012A66 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00012A6C 6100 87B4                  		bsr.w	AnimateSprite
00012A70 7000                       		moveq	#0,d0
00012A72 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00012A76 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00012A7C 6000 D754                  		bra.w	MarkObjGone
00012A80                            ; ===========================================================================
00012A80 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00012A86                            ; ===========================================================================
00012A86                            
00012A86                            Obj16_Wait:				; XREF: Obj16_Index
00012A86 5368 0030                  		subq.w	#1,$30(a0)
00012A8A 6A00                       		bpl.s	Obj16_ChkDel
00012A8C 317C 003C 0030             		move.w	#60,$30(a0)
00012A92 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
00012A96 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
00012A9C                            
00012A9C                            Obj16_ChkDel:
00012A9C 6000 D734                  		bra.w	MarkObjGone
00012AA0                            ; ===========================================================================
00012AA0                            Ani_obj16:
00012AA0                            	include "_anim\obj16.asm"
00012AA0                            ; ---------------------------------------------------------------------------
00012AA0                            ; Animation script - harpoon (LZ)
00012AA0                            ; ---------------------------------------------------------------------------
00012AA0 0000                       		dc.w byte_11F8A-Ani_obj16
00012AA2 0000                       		dc.w byte_11F8E-Ani_obj16
00012AA4 0000                       		dc.w byte_11F92-Ani_obj16
00012AA6 0000                       		dc.w byte_11F96-Ani_obj16
00012AA8 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
00012AAC 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
00012AB0 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
00012AB4 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
00012AB8                            		even
00012AB8                            		even
00012AB8                            
00012AB8                            ; ---------------------------------------------------------------------------
00012AB8                            ; Sprite mappings - harpoon (LZ)
00012AB8                            ; ---------------------------------------------------------------------------
00012AB8                            Map_obj16:
00012AB8                            	include "_maps\obj16.asm"
00012AB8                            ; ---------------------------------------------------------------------------
00012AB8                            ; Sprite mappings - harpoon (LZ)
00012AB8                            ; ---------------------------------------------------------------------------
00012AB8 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
00012ABC 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
00012AC0 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00012AC4 01                         byte_11FA6:	dc.b 1
00012AC5 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00012ACA 01                         byte_11FAC:	dc.b 1
00012ACB FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00012AD0 02                         byte_11FB2:	dc.b 2
00012AD1 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00012AD6 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00012ADB 01                         byte_11FBD:	dc.b 1
00012ADC F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00012AE1 01                         byte_11FC3:	dc.b 1
00012AE2 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00012AE7 02                         byte_11FC9:	dc.b 2
00012AE8 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00012AED F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00012AF2                            		even
00012AF2                            		even
00012AF2                            
00012AF2                            ; ===========================================================================
00012AF2                            ; ---------------------------------------------------------------------------
00012AF2                            ; Object 61 - blocks (LZ)
00012AF2                            ; ---------------------------------------------------------------------------
00012AF2                            
00012AF2                            Obj61:					; XREF: Obj_Index
00012AF2 7000                       		moveq	#0,d0
00012AF4 1028 0024                  		move.b	$24(a0),d0
00012AF8 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00012AFC 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00012B00                            ; ===========================================================================
00012B00 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00012B02 0000                       		dc.w Obj61_Action-Obj61_Index
00012B04                            
00012B04 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00012B06 200C                       		dc.b $20, $C
00012B08 1010                       		dc.b $10, $10
00012B0A 1010                       		dc.b $10, $10
00012B0C                            ; ===========================================================================
00012B0C                            
00012B0C                            Obj61_Main:				; XREF: Obj61_Index
00012B0C 5428 0024                  		addq.b	#2,$24(a0)
00012B10 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00012B18 317C 43E6 0002             		move.w	#$43E6,2(a0)
00012B1E 117C 0004 0001             		move.b	#4,1(a0)
00012B24 117C 0003 0018             		move.b	#3,$18(a0)
00012B2A 7000                       		moveq	#0,d0
00012B2C 1028 0028                  		move.b	$28(a0),d0
00012B30 E648                       		lsr.w	#3,d0
00012B32 0240 000E                  		andi.w	#$E,d0
00012B36 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00012B3A 115A 0019                  		move.b	(a2)+,$19(a0)
00012B3E 1152 0016                  		move.b	(a2),$16(a0)
00012B42 E248                       		lsr.w	#1,d0
00012B44 1140 001A                  		move.b	d0,$1A(a0)
00012B48 3168 0008 0034             		move.w	8(a0),$34(a0)
00012B4E 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012B54 1028 0028                  		move.b	$28(a0),d0
00012B58 0200 000F                  		andi.b	#$F,d0
00012B5C 6700                       		beq.s	Obj61_Action
00012B5E 0C00 0007                  		cmpi.b	#7,d0
00012B62 6700                       		beq.s	Obj61_Action
00012B64 117C 0001 0038             		move.b	#1,$38(a0)
00012B6A                            
00012B6A                            Obj61_Action:				; XREF: Obj61_Index
00012B6A 3F28 0008                  		move.w	8(a0),-(sp)
00012B6E 7000                       		moveq	#0,d0
00012B70 1028 0028                  		move.b	$28(a0),d0
00012B74 0240 000F                  		andi.w	#$F,d0
00012B78 D040                       		add.w	d0,d0
00012B7A 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00012B7E 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00012B82 381F                       		move.w	(sp)+,d4
00012B84 4A28 0001                  		tst.b	1(a0)
00012B88 6A00                       		bpl.s	Obj61_ChkDel
00012B8A 7200                       		moveq	#0,d1
00012B8C 1228 0019                  		move.b	$19(a0),d1
00012B90 0641 000B                  		addi.w	#$B,d1
00012B94 7400                       		moveq	#0,d2
00012B96 1428 0016                  		move.b	$16(a0),d2
00012B9A 3602                       		move.w	d2,d3
00012B9C 5243                       		addq.w	#1,d3
00012B9E 6100 D95A                  		bsr.w	SolidObject
00012BA2 1144 003F                  		move.b	d4,$3F(a0)
00012BA6 6100 0000                  		bsr.w	loc_12180
00012BAA                            
00012BAA                            Obj61_ChkDel:
00012BAA 3028 0034                  		move.w	$34(a0),d0
00012BAE 0240 FF80                  		andi.w	#$FF80,d0
00012BB2 3238 F700                  		move.w	($FFFFF700).w,d1
00012BB6 0441 0080                  		subi.w	#$80,d1
00012BBA 0241 FF80                  		andi.w	#$FF80,d1
00012BBE 9041                       		sub.w	d1,d0
00012BC0 0C40 0280                  		cmpi.w	#$280,d0
00012BC4 6200 B586                  		bhi.w	DeleteObject
00012BC8 6000 B546                  		bra.w	DisplaySprite
00012BCC                            ; ===========================================================================
00012BCC 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012BD0 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012BD4 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00012BD8 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00012BDC                            ; ===========================================================================
00012BDC                            
00012BDC                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00012BDC 4E75                       		rts	
00012BDE                            ; ===========================================================================
00012BDE                            
00012BDE                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00012BDE 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00012BE2 6600                       		bne.s	loc_120D6	; if yes, branch
00012BE4 0828 0003 0022             		btst	#3,$22(a0)
00012BEA 6700                       		beq.s	locret_120D4
00012BEC 317C 001E 0036             		move.w	#30,$36(a0)	; wait for � second
00012BF2                            
00012BF2                            locret_120D4:
00012BF2 4E75                       		rts	
00012BF4                            ; ===========================================================================
00012BF4                            
00012BF4                            loc_120D6:
00012BF4 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00012BF8 66F8                       		bne.s	locret_120D4	; if time remains, branch
00012BFA 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012BFE 4228 0038                  		clr.b	$38(a0)
00012C02 4E75                       		rts	
00012C04                            ; ===========================================================================
00012C04                            
00012C04                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00012C04 6100 B4E4                  		bsr.w	SpeedToPos
00012C08 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00012C0C 6100 0000                  		bsr.w	ObjHitFloor
00012C10 4A41                       		tst.w	d1
00012C12 6A00 0000                  		bpl.w	locret_12106
00012C16 5241                       		addq.w	#1,d1
00012C18 D368 000C                  		add.w	d1,$C(a0)
00012C1C 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00012C20 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012C24                            
00012C24                            locret_12106:
00012C24 4E75                       		rts	
00012C26                            ; ===========================================================================
00012C26                            
00012C26                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00012C26 6100 B4C2                  		bsr.w	SpeedToPos
00012C2A 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00012C2E 6100 0000                  		bsr.w	ObjHitCeiling
00012C32 4A41                       		tst.w	d1
00012C34 6A00 0000                  		bpl.w	locret_12126
00012C38 9368 000C                  		sub.w	d1,$C(a0)
00012C3C 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00012C40 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012C44                            
00012C44                            locret_12126:
00012C44 4E75                       		rts	
00012C46                            ; ===========================================================================
00012C46                            
00012C46                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00012C46 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00012C4C 6600                       		bne.s	locret_12138	; if not, branch
00012C4E 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00012C52 4228 0038                  		clr.b	$38(a0)
00012C56                            
00012C56                            locret_12138:
00012C56 4E75                       		rts	
00012C58                            ; ===========================================================================
00012C58                            
00012C58                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00012C58 3038 F646                  		move.w	($FFFFF646).w,d0
00012C5C 9068 000C                  		sub.w	$C(a0),d0
00012C60 6700                       		beq.s	locret_1217E
00012C62 6400                       		bcc.s	loc_12162
00012C64 0C40 FFFE                  		cmpi.w	#-2,d0
00012C68 6C00                       		bge.s	loc_1214E
00012C6A 70FE                       		moveq	#-2,d0
00012C6C                            
00012C6C                            loc_1214E:
00012C6C D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00012C70 6100 0000                  		bsr.w	ObjHitCeiling
00012C74 4A41                       		tst.w	d1
00012C76 6A00 0000                  		bpl.w	locret_12160
00012C7A 9368 000C                  		sub.w	d1,$C(a0)
00012C7E                            
00012C7E                            locret_12160:
00012C7E 4E75                       		rts	
00012C80                            ; ===========================================================================
00012C80                            
00012C80                            loc_12162:				; XREF: Obj61_Type07
00012C80 0C40 0002                  		cmpi.w	#2,d0
00012C84 6F00                       		ble.s	loc_1216A
00012C86 7002                       		moveq	#2,d0
00012C88                            
00012C88                            loc_1216A:
00012C88 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00012C8C 6100 0000                  		bsr.w	ObjHitFloor
00012C90 4A41                       		tst.w	d1
00012C92 6A00 0000                  		bpl.w	locret_1217E
00012C96 5241                       		addq.w	#1,d1
00012C98 D368 000C                  		add.w	d1,$C(a0)
00012C9C                            
00012C9C                            locret_1217E:
00012C9C 4E75                       		rts	
00012C9E                            ; ===========================================================================
00012C9E                            
00012C9E                            loc_12180:				; XREF: Obj61_Action
00012C9E 4A28 0038                  		tst.b	$38(a0)
00012CA2 6700                       		beq.s	locret_121C0
00012CA4 0828 0003 0022             		btst	#3,$22(a0)
00012CAA 6600                       		bne.s	loc_1219A
00012CAC 4A28 003E                  		tst.b	$3E(a0)
00012CB0 6700                       		beq.s	locret_121C0
00012CB2 5928 003E                  		subq.b	#4,$3E(a0)
00012CB6 6000                       		bra.s	loc_121A6
00012CB8                            ; ===========================================================================
00012CB8                            
00012CB8                            loc_1219A:
00012CB8 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00012CBE 6700                       		beq.s	locret_121C0
00012CC0 5828 003E                  		addq.b	#4,$3E(a0)
00012CC4                            
00012CC4                            loc_121A6:
00012CC4 1028 003E                  		move.b	$3E(a0),d0
00012CC8 4EB9 0000 33D4             		jsr	(CalcSine).l
00012CCE 323C 0400                  		move.w	#$400,d1
00012CD2 C1C1                       		muls.w	d1,d0
00012CD4 4840                       		swap	d0
00012CD6 D068 0030                  		add.w	$30(a0),d0
00012CDA 3140 000C                  		move.w	d0,$C(a0)
00012CDE                            
00012CDE                            locret_121C0:
00012CDE 4E75                       		rts	
00012CE0                            ; ===========================================================================
00012CE0                            ; ---------------------------------------------------------------------------
00012CE0                            ; Sprite mappings - blocks (LZ)
00012CE0                            ; ---------------------------------------------------------------------------
00012CE0                            Map_obj61:
00012CE0                            	include "_maps\obj61.asm"
00012CE0                            ; ---------------------------------------------------------------------------
00012CE0                            ; Sprite mappings - blocks (LZ)
00012CE0                            ; ---------------------------------------------------------------------------
00012CE0 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00012CE4 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012CE8 01                         byte_121CA:	dc.b 1
00012CE9 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012CEE 02                         byte_121D0:	dc.b 2
00012CEF F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00012CF4 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012CF9 01                         byte_121DB:	dc.b 1
00012CFA F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012CFF 01                         byte_121E1:	dc.b 1
00012D00 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012D06 00                         		even
00012D06 00                         		even
00012D06                            
00012D06                            ; ===========================================================================
00012D06                            ; ---------------------------------------------------------------------------
00012D06                            ; Object 62 - gargoyle head (LZ)
00012D06                            ; ---------------------------------------------------------------------------
00012D06                            
00012D06                            Obj62:					; XREF: Obj_Index
00012D06 7000                       		moveq	#0,d0
00012D08 1028 0024                  		move.b	$24(a0),d0
00012D0C 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00012D10 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00012D14 6000 D4BC                  		bra.w	MarkObjGone
00012D18                            ; ===========================================================================
00012D18 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012D1A 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00012D1C 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012D1E 0000                       		dc.w Obj62_AniFire-Obj62_Index
00012D20                            
00012D20 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00012D28                            ; ===========================================================================
00012D28                            
00012D28                            Obj62_Main:				; XREF: Obj62_Index
00012D28 5428 0024                  		addq.b	#2,$24(a0)
00012D2C 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012D34 317C 42E9 0002             		move.w	#$42E9,2(a0)
00012D3A 0028 0004 0001             		ori.b	#4,1(a0)
00012D40 117C 0003 0018             		move.b	#3,$18(a0)
00012D46 117C 0010 0019             		move.b	#$10,$19(a0)
00012D4C 1028 0028                  		move.b	$28(a0),d0	; get object type
00012D50 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012D54 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00012D5A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012D60 0228 000F 0028             		andi.b	#$F,$28(a0)
00012D66                            
00012D66                            Obj62_MakeFire:				; XREF: Obj62_Index
00012D66 5328 001E                  		subq.b	#1,$1E(a0)
00012D6A 6600                       		bne.s	Obj62_NoFire
00012D6C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012D72 6100 B618                  		bsr.w	ChkObjOnScreen
00012D76 6600                       		bne.s	Obj62_NoFire
00012D78 6100 B82C                  		bsr.w	SingleObjLoad
00012D7C 6600                       		bne.s	Obj62_NoFire
00012D7E 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00012D82 5829 0024                  		addq.b	#4,$24(a1)
00012D86 3368 0008 0008             		move.w	8(a0),8(a1)
00012D8C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012D92 1368 0001 0001             		move.b	1(a0),1(a1)
00012D98 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012D9E                            
00012D9E                            Obj62_NoFire:
00012D9E 4E75                       		rts	
00012DA0                            ; ===========================================================================
00012DA0                            
00012DA0                            Obj62_FireBall:				; XREF: Obj62_Index
00012DA0 5428 0024                  		addq.b	#2,$24(a0)
00012DA4 117C 0008 0016             		move.b	#8,$16(a0)
00012DAA 117C 0008 0017             		move.b	#8,$17(a0)
00012DB0 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012DB8 317C 02E9 0002             		move.w	#$2E9,2(a0)
00012DBE 0028 0004 0001             		ori.b	#4,1(a0)
00012DC4 117C 0004 0018             		move.b	#4,$18(a0)
00012DCA 117C 0098 0020             		move.b	#$98,$20(a0)
00012DD0 117C 0008 0019             		move.b	#8,$19(a0)
00012DD6 117C 0002 001A             		move.b	#2,$1A(a0)
00012DDC 5068 000C                  		addq.w	#8,$C(a0)
00012DE0 317C 0200 0010             		move.w	#$200,$10(a0)
00012DE6 0828 0000 0022             		btst	#0,$22(a0)
00012DEC 6600                       		bne.s	Obj62_Sound
00012DEE 4468 0010                  		neg.w	$10(a0)
00012DF2                            
00012DF2                            Obj62_Sound:
00012DF2 303C 00AE                  		move.w	#$AE,d0
00012DF6 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012DFC                            
00012DFC                            Obj62_AniFire:				; XREF: Obj62_Index
00012DFC 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012E00 0200 0007                  		andi.b	#7,d0
00012E04 6600                       		bne.s	Obj62_StopFire
00012E06 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012E0C                            
00012E0C                            Obj62_StopFire:
00012E0C 6100 B2DC                  		bsr.w	SpeedToPos
00012E10 0828 0000 0022             		btst	#0,$22(a0)
00012E16 6600                       		bne.s	Obj62_StopFire2
00012E18 76F8                       		moveq	#-8,d3
00012E1A 6100 0000                  		bsr.w	ObjHitWallLeft
00012E1E 4A41                       		tst.w	d1
00012E20 6B00 B32A                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012E24 4E75                       		rts	
00012E26                            ; ===========================================================================
00012E26                            
00012E26                            Obj62_StopFire2:
00012E26 7608                       		moveq	#8,d3
00012E28 6100 0000                  		bsr.w	ObjHitWallRight
00012E2C 4A41                       		tst.w	d1
00012E2E 6B00 B31C                  		bmi.w	DeleteObject
00012E32 4E75                       		rts	
00012E34                            ; ===========================================================================
00012E34                            ; ---------------------------------------------------------------------------
00012E34                            ; Sprite mappings - gargoyle head (LZ)
00012E34                            ; ---------------------------------------------------------------------------
00012E34                            Map_obj62:
00012E34                            	include "_maps\obj62.asm"
00012E34                            ; ---------------------------------------------------------------------------
00012E34                            ; Sprite mappings - gargoyle head (LZ)
00012E34                            ; ---------------------------------------------------------------------------
00012E34 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012E38 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012E3C 03                         byte_12320:	dc.b 3
00012E3D F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00012E42 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012E47 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012E4C 01                         byte_12330:	dc.b 1
00012E4D FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012E52 01                         byte_12336:	dc.b 1
00012E53 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012E58                            		even
00012E58                            		even
00012E58                            
00012E58                            ; ===========================================================================
00012E58                            ; ---------------------------------------------------------------------------
00012E58                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012E58                            ; ---------------------------------------------------------------------------
00012E58                            
00012E58                            Obj63:					; XREF: Obj_Index
00012E58 7000                       		moveq	#0,d0
00012E5A 1028 0024                  		move.b	$24(a0),d0
00012E5E 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00012E62 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012E66 3028 0030                  		move.w	$30(a0),d0
00012E6A 0240 FF80                  		andi.w	#$FF80,d0
00012E6E 3238 F700                  		move.w	($FFFFF700).w,d1
00012E72 0441 0080                  		subi.w	#$80,d1
00012E76 0241 FF80                  		andi.w	#$FF80,d1
00012E7A 9041                       		sub.w	d1,d0
00012E7C 0C40 0280                  		cmpi.w	#$280,d0
00012E80 6200                       		bhi.s	loc_1236A
00012E82                            
00012E82                            Obj63_Display:				; XREF: loc_1236A
00012E82 6000 B28C                  		bra.w	DisplaySprite
00012E86                            ; ===========================================================================
00012E86                            
00012E86                            loc_1236A:				; XREF: Obj63
00012E86 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012E8C 6600                       		bne.s	loc_12378
00012E8E 0C40 FF80                  		cmpi.w	#-$80,d0
00012E92 64EE                       		bcc.s	Obj63_Display
00012E94                            
00012E94                            loc_12378:
00012E94 1028 002F                  		move.b	$2F(a0),d0
00012E98 6A00 B2B2                  		bpl.w	DeleteObject
00012E9C 0240 007F                  		andi.w	#$7F,d0
00012EA0 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012EA4 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012EAA 6000 B2A0                  		bra.w	DeleteObject
00012EAE                            ; ===========================================================================
00012EAE 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00012EB0 0000                       		dc.w loc_124B2-Obj63_Index
00012EB2 0000                       		dc.w loc_124C2-Obj63_Index
00012EB4 0000                       		dc.w loc_124DE-Obj63_Index
00012EB6                            ; ===========================================================================
00012EB6                            
00012EB6                            Obj63_Main:				; XREF: Obj63_Index
00012EB6 1028 0028                  		move.b	$28(a0),d0
00012EBA 6B00 0000                  		bmi.w	loc_12460
00012EBE 5428 0024                  		addq.b	#2,$24(a0)
00012EC2 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012ECA 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012ED0 0028 0004 0001             		ori.b	#4,1(a0)
00012ED6 117C 0010 0019             		move.b	#$10,$19(a0)
00012EDC 117C 0004 0018             		move.b	#4,$18(a0)
00012EE2 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012EE8 6600                       		bne.s	loc_123E2
00012EEA 5828 0024                  		addq.b	#4,$24(a0)
00012EEE 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012EF4 117C 0001 0018             		move.b	#1,$18(a0)
00012EFA 6000 0000                  		bra.w	loc_124DE
00012EFE                            ; ===========================================================================
00012EFE                            
00012EFE                            loc_123E2:
00012EFE 117C 0004 001A             		move.b	#4,$1A(a0)
00012F04 7000                       		moveq	#0,d0
00012F06 1028 0028                  		move.b	$28(a0),d0
00012F0A 3200                       		move.w	d0,d1
00012F0C E648                       		lsr.w	#3,d0
00012F0E 0240 001E                  		andi.w	#$1E,d0
00012F12 45FA 0000                  		lea	Obj63_Data(pc),a2
00012F16 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012F1A 315A 0038                  		move.w	(a2)+,$38(a0)
00012F1E 315A 0030                  		move.w	(a2)+,$30(a0)
00012F22 214A 003C                  		move.l	a2,$3C(a0)
00012F26 0241 000F                  		andi.w	#$F,d1
00012F2A E549                       		lsl.w	#2,d1
00012F2C 1141 0038                  		move.b	d1,$38(a0)
00012F30 117C 0004 003A             		move.b	#4,$3A(a0)
00012F36 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012F3A 6700                       		beq.s	loc_1244C
00012F3C 117C 0001 003B             		move.b	#1,$3B(a0)
00012F42 4428 003A                  		neg.b	$3A(a0)
00012F46 7200                       		moveq	#0,d1
00012F48 1228 0038                  		move.b	$38(a0),d1
00012F4C D228 003A                  		add.b	$3A(a0),d1
00012F50 B228 0039                  		cmp.b	$39(a0),d1
00012F54 6500                       		bcs.s	loc_12448
00012F56 1001                       		move.b	d1,d0
00012F58 7200                       		moveq	#0,d1
00012F5A 4A00                       		tst.b	d0
00012F5C 6A00                       		bpl.s	loc_12448
00012F5E 1228 0039                  		move.b	$39(a0),d1
00012F62 5901                       		subq.b	#4,d1
00012F64                            
00012F64                            loc_12448:
00012F64 1141 0038                  		move.b	d1,$38(a0)
00012F68                            
00012F68                            loc_1244C:
00012F68 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00012F6E 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00012F74 6100 0000                  		bsr.w	Obj63_ChangeDir
00012F78 6000 0000                  		bra.w	loc_124B2
00012F7C                            ; ===========================================================================
00012F7C                            
00012F7C                            loc_12460:				; XREF: Obj63_Main
00012F7C 1140 002F                  		move.b	d0,$2F(a0)
00012F80 0240 007F                  		andi.w	#$7F,d0
00012F84 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012F88 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012F8E 6600 B1BC                  		bne.w	DeleteObject
00012F92 D040                       		add.w	d0,d0
00012F94 0240 001E                  		andi.w	#$1E,d0
00012F98 0640 0070                  		addi.w	#$70,d0
00012F9C 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00012FA2 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012FA6 321A                       		move.w	(a2)+,d1
00012FA8 2248                       		movea.l	a0,a1
00012FAA 6000                       		bra.s	Obj63_MakePtfms
00012FAC                            ; ===========================================================================
00012FAC                            
00012FAC                            Obj63_Loop:
00012FAC 6100 B5F8                  		bsr.w	SingleObjLoad
00012FB0 6600                       		bne.s	loc_124AA
00012FB2                            
00012FB2                            Obj63_MakePtfms:			; XREF: loc_12460
00012FB2 12BC 0063                  		move.b	#$63,0(a1)
00012FB6 335A 0008                  		move.w	(a2)+,8(a1)
00012FBA 335A 000C                  		move.w	(a2)+,$C(a1)
00012FBE 301A                       		move.w	(a2)+,d0
00012FC0 1340 0028                  		move.b	d0,$28(a1)
00012FC4                            
00012FC4                            loc_124AA:
00012FC4 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012FC8                            
00012FC8 588F                       		addq.l	#4,sp
00012FCA 4E75                       		rts	
00012FCC                            ; ===========================================================================
00012FCC                            
00012FCC                            loc_124B2:				; XREF: Obj63_Index
00012FCC 7200                       		moveq	#0,d1
00012FCE 1228 0019                  		move.b	$19(a0),d1
00012FD2 4EB9 0000 7F02             		jsr	(PlatformObject).l
00012FD8 6000 0000                  		bra.w	sub_12502
00012FDC                            ; ===========================================================================
00012FDC                            
00012FDC                            loc_124C2:				; XREF: Obj63_Index
00012FDC 7200                       		moveq	#0,d1
00012FDE 1228 0019                  		move.b	$19(a0),d1
00012FE2 4EB9 0000 8076             		jsr	(ExitPlatform).l
00012FE8 3F28 0008                  		move.w	8(a0),-(sp)
00012FEC 6100 0000                  		bsr.w	sub_12502
00012FF0 341F                       		move.w	(sp)+,d2
00012FF2 4EF9 0000 85E0             		jmp	(MvSonicOnPtfm2).l
00012FF8                            ; ===========================================================================
00012FF8                            
00012FF8                            loc_124DE:				; XREF: Obj63_Index
00012FF8 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012FFC 0240 0003                  		andi.w	#3,d0
00013000 6600                       		bne.s	loc_124FC
00013002 7201                       		moveq	#1,d1
00013004 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00013008 6700                       		beq.s	loc_124F2
0001300A 4401                       		neg.b	d1
0001300C                            
0001300C                            loc_124F2:
0001300C D328 001A                  		add.b	d1,$1A(a0)
00013010 0228 0003 001A             		andi.b	#3,$1A(a0)
00013016                            
00013016                            loc_124FC:
00013016 588F                       		addq.l	#4,sp
00013018 6000 D1B8                  		bra.w	MarkObjGone
0001301C                            
0001301C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001301C                            
0001301C                            
0001301C                            sub_12502:				; XREF: loc_124B2; loc_124C2
0001301C 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00013020 6700                       		beq.s	loc_12520
00013022 4A28 003B                  		tst.b	$3B(a0)
00013026 6600                       		bne.s	loc_12520
00013028 117C 0001 003B             		move.b	#1,$3B(a0)
0001302E 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00013034 4428 003A                  		neg.b	$3A(a0)
00013038 6000                       		bra.s	loc_12534
0001303A                            ; ===========================================================================
0001303A                            
0001303A                            loc_12520:
0001303A 3028 0008                  		move.w	8(a0),d0
0001303E B068 0034                  		cmp.w	$34(a0),d0
00013042 6600                       		bne.s	loc_1256A
00013044 3028 000C                  		move.w	$C(a0),d0
00013048 B068 0036                  		cmp.w	$36(a0),d0
0001304C 6600                       		bne.s	loc_1256A
0001304E                            
0001304E                            loc_12534:
0001304E 7200                       		moveq	#0,d1
00013050 1228 0038                  		move.b	$38(a0),d1
00013054 D228 003A                  		add.b	$3A(a0),d1
00013058 B228 0039                  		cmp.b	$39(a0),d1
0001305C 6500                       		bcs.s	loc_12552
0001305E 1001                       		move.b	d1,d0
00013060 7200                       		moveq	#0,d1
00013062 4A00                       		tst.b	d0
00013064 6A00                       		bpl.s	loc_12552
00013066 1228 0039                  		move.b	$39(a0),d1
0001306A 5901                       		subq.b	#4,d1
0001306C                            
0001306C                            loc_12552:
0001306C 1141 0038                  		move.b	d1,$38(a0)
00013070 2268 003C                  		movea.l	$3C(a0),a1
00013074 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
0001307A 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00013080 6100 0000                  		bsr.w	Obj63_ChangeDir
00013084                            
00013084                            loc_1256A:
00013084 6100 B064                  		bsr.w	SpeedToPos
00013088 4E75                       		rts	
0001308A                            ; End of function sub_12502
0001308A                            
0001308A                            
0001308A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001308A                            
0001308A                            
0001308A                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
0001308A 7000                       		moveq	#0,d0
0001308C 343C FF00                  		move.w	#-$100,d2
00013090 3028 0008                  		move.w	8(a0),d0
00013094 9068 0034                  		sub.w	$34(a0),d0
00013098 6400                       		bcc.s	loc_12584
0001309A 4440                       		neg.w	d0
0001309C 4442                       		neg.w	d2
0001309E                            
0001309E                            loc_12584:
0001309E 7200                       		moveq	#0,d1
000130A0 363C FF00                  		move.w	#-$100,d3
000130A4 3228 000C                  		move.w	$C(a0),d1
000130A8 9268 0036                  		sub.w	$36(a0),d1
000130AC 6400                       		bcc.s	loc_12598
000130AE 4441                       		neg.w	d1
000130B0 4443                       		neg.w	d3
000130B2                            
000130B2                            loc_12598:
000130B2 B240                       		cmp.w	d0,d1
000130B4 6500                       		bcs.s	loc_125C2
000130B6 3028 0008                  		move.w	8(a0),d0
000130BA 9068 0034                  		sub.w	$34(a0),d0
000130BE 6700                       		beq.s	loc_125AE
000130C0 48C0                       		ext.l	d0
000130C2 E180                       		asl.l	#8,d0
000130C4 81C1                       		divs.w	d1,d0
000130C6 4440                       		neg.w	d0
000130C8                            
000130C8                            loc_125AE:
000130C8 3140 0010                  		move.w	d0,$10(a0)
000130CC 3143 0012                  		move.w	d3,$12(a0)
000130D0 4840                       		swap	d0
000130D2 3140 000A                  		move.w	d0,$A(a0)
000130D6 4268 000E                  		clr.w	$E(a0)
000130DA 4E75                       		rts	
000130DC                            ; ===========================================================================
000130DC                            
000130DC                            loc_125C2:				; XREF: Obj63_ChangeDir
000130DC 3228 000C                  		move.w	$C(a0),d1
000130E0 9268 0036                  		sub.w	$36(a0),d1
000130E4 6700                       		beq.s	loc_125D4
000130E6 48C1                       		ext.l	d1
000130E8 E181                       		asl.l	#8,d1
000130EA 83C0                       		divs.w	d0,d1
000130EC 4441                       		neg.w	d1
000130EE                            
000130EE                            loc_125D4:
000130EE 3141 0012                  		move.w	d1,$12(a0)
000130F2 3142 0010                  		move.w	d2,$10(a0)
000130F6 4841                       		swap	d1
000130F8 3141 000E                  		move.w	d1,$E(a0)
000130FC 4268 000A                  		clr.w	$A(a0)
00013100 4E75                       		rts	
00013102                            ; End of function Obj63_ChangeDir
00013102                            
00013102                            ; ===========================================================================
00013102 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00013104 0000                       		dc.w word_12610-Obj63_Data
00013106 0000                       		dc.w word_12628-Obj63_Data
00013108 0000                       		dc.w word_1263C-Obj63_Data
0001310A 0000                       		dc.w word_12650-Obj63_Data
0001310C 0000                       		dc.w word_12668-Obj63_Data
0001310E 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
0001311E 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
0001312A 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
0001313A 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00013142 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00013156 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
0001316A 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00013182 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00013196                            
00013196                            ; ---------------------------------------------------------------------------
00013196                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00013196                            ; ---------------------------------------------------------------------------
00013196                            Map_obj63:
00013196                            	include "_maps\obj63.asm"
00013196                            ; ---------------------------------------------------------------------------
00013196                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00013196                            ; ---------------------------------------------------------------------------
00013196 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
0001319A 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
0001319E 0000                       		dc.w byte_1269E-Map_obj63
000131A0 01                         byte_12686:	dc.b 1
000131A1 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000131A6 01                         byte_1268C:	dc.b 1
000131A7 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000131AC 01                         byte_12692:	dc.b 1
000131AD F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
000131B2 01                         byte_12698:	dc.b 1
000131B3 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
000131B8 01                         byte_1269E:	dc.b 1
000131B9 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
000131BE                            		even
000131BE                            		even
000131BE                            
000131BE                            ; ===========================================================================
000131BE                            ; ---------------------------------------------------------------------------
000131BE                            ; Object 64 - bubbles (LZ)
000131BE                            ; ---------------------------------------------------------------------------
000131BE                            
000131BE                            Obj64:					; XREF: Obj_Index
000131BE 7000                       		moveq	#0,d0
000131C0 1028 0024                  		move.b	$24(a0),d0
000131C4 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
000131C8 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
000131CC                            ; ===========================================================================
000131CC 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
000131CE 0000                       		dc.w Obj64_Animate-Obj64_Index
000131D0 0000                       		dc.w Obj64_ChkWater-Obj64_Index
000131D2 0000                       		dc.w Obj64_Display2-Obj64_Index
000131D4 0000                       		dc.w Obj64_Delete3-Obj64_Index
000131D6 0000                       		dc.w Obj64_BblMaker-Obj64_Index
000131D8                            ; ===========================================================================
000131D8                            
000131D8                            Obj64_Main:				; XREF: Obj64_Index
000131D8 5428 0024                  		addq.b	#2,$24(a0)
000131DC 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
000131E4 317C 8348 0002             		move.w	#$8348,2(a0)
000131EA 117C 0084 0001             		move.b	#$84,1(a0)
000131F0 117C 0010 0019             		move.b	#$10,$19(a0)
000131F6 117C 0001 0018             		move.b	#1,$18(a0)
000131FC 1028 0028                  		move.b	$28(a0),d0	; get object type
00013200 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00013202 5028 0024                  		addq.b	#8,$24(a0)
00013206 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
0001320A 1140 0032                  		move.b	d0,$32(a0)
0001320E 1140 0033                  		move.b	d0,$33(a0)
00013212 117C 0006 001C             		move.b	#6,$1C(a0)
00013218 6000 0000                  		bra.w	Obj64_BblMaker
0001321C                            ; ===========================================================================
0001321C                            
0001321C                            Obj64_Bubble:				; XREF: Obj64_Main
0001321C 1140 001C                  		move.b	d0,$1C(a0)
00013220 3168 0008 0030             		move.w	8(a0),$30(a0)
00013226 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
0001322C 4EB9 0000 33AE             		jsr	(RandomNumber).l
00013232 1140 0026                  		move.b	d0,$26(a0)
00013236                            
00013236                            Obj64_Animate:				; XREF: Obj64_Index
00013236 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001323C 4EB9 0000 B222             		jsr	AnimateSprite
00013242 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00013248 6600                       		bne.s	Obj64_ChkWater
0001324A 117C 0001 002E             		move.b	#1,$2E(a0)
00013250                            
00013250                            Obj64_ChkWater:				; XREF: Obj64_Index
00013250 3038 F646                  		move.w	($FFFFF646).w,d0
00013254 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00013258 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
0001325A                            
0001325A                            Obj64_Burst:				; XREF: Obj64_Wobble
0001325A 117C 0006 0024             		move.b	#6,$24(a0)
00013260 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00013264 6000 0000                  		bra.w	Obj64_Display2
00013268                            ; ===========================================================================
00013268                            
00013268                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00013268 1028 0026                  		move.b	$26(a0),d0
0001326C 5228 0026                  		addq.b	#1,$26(a0)
00013270 0240 007F                  		andi.w	#$7F,d0
00013274 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
0001327A 1031 0000                  		move.b	(a1,d0.w),d0
0001327E 4880                       		ext.w	d0
00013280 D068 0030                  		add.w	$30(a0),d0
00013284 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00013288 4A28 002E                  		tst.b	$2E(a0)
0001328C 6700                       		beq.s	Obj64_Display
0001328E 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00013292 6700                       		beq.s	Obj64_Display	; if not, branch
00013294                            
00013294 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00013298 303C 00AD                  		move.w	#$AD,d0
0001329C 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
000132A2 43F8 D000                  		lea	($FFFFD000).w,a1
000132A6 4269 0010                  		clr.w	$10(a1)
000132AA 4269 0012                  		clr.w	$12(a1)
000132AE 4269 0014                  		clr.w	$14(a1)
000132B2 137C 0015 001C             		move.b	#$15,$1C(a1)
000132B8 337C 0023 003E             		move.w	#$23,$3E(a1)
000132BE 137C 0000 003C             		move.b	#0,$3C(a1)
000132C4 08A9 0005 0022             		bclr	#5,$22(a1)
000132CA 08A9 0004 0022             		bclr	#4,$22(a1)
000132D0 0829 0002 0022             		btst	#2,$22(a1)
000132D6 6700 FF82                  		beq.w	Obj64_Burst
000132DA 08A9 0002 0022             		bclr	#2,$22(a1)
000132E0 137C 0013 0016             		move.b	#$13,$16(a1)
000132E6 137C 0009 0017             		move.b	#9,$17(a1)
000132EC 5B69 000C                  		subq.w	#5,$C(a1)
000132F0 6000 FF68                  		bra.w	Obj64_Burst
000132F4                            ; ===========================================================================
000132F4                            
000132F4                            Obj64_Display:				; XREF: Obj64_Wobble
000132F4 6100 ADF4                  		bsr.w	SpeedToPos
000132F8 4A28 0001                  		tst.b	1(a0)
000132FC 6A00                       		bpl.s	Obj64_Delete
000132FE 4EFA AE10                  		jmp	DisplaySprite
00013302                            ; ===========================================================================
00013302                            
00013302                            Obj64_Delete:
00013302 4EFA AE48                  		jmp	DeleteObject
00013306                            ; ===========================================================================
00013306                            
00013306                            Obj64_Display2:				; XREF: Obj64_Index
00013306 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001330C 4EB9 0000 B222             		jsr	AnimateSprite
00013312 4A28 0001                  		tst.b	1(a0)
00013316 6A00                       		bpl.s	Obj64_Delete2
00013318 4EFA ADF6                  		jmp	DisplaySprite
0001331C                            ; ===========================================================================
0001331C                            
0001331C                            Obj64_Delete2:
0001331C 4EFA AE2E                  		jmp	DeleteObject
00013320                            ; ===========================================================================
00013320                            
00013320                            Obj64_Delete3:				; XREF: Obj64_Index
00013320 6000 AE2A                  		bra.w	DeleteObject
00013324                            ; ===========================================================================
00013324                            
00013324                            Obj64_BblMaker:				; XREF: Obj64_Index
00013324 4A68 0036                  		tst.w	$36(a0)
00013328 6600                       		bne.s	loc_12874
0001332A 3038 F646                  		move.w	($FFFFF646).w,d0
0001332E B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00013332 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00013336 4A28 0001                  		tst.b	1(a0)
0001333A 6A00 0000                  		bpl.w	Obj64_ChkDel
0001333E 5368 0038                  		subq.w	#1,$38(a0)
00013342 6A00 0000                  		bpl.w	loc_12914
00013346 317C 0001 0036             		move.w	#1,$36(a0)
0001334C                            
0001334C                            loc_1283A:
0001334C 4EB9 0000 33AE             		jsr	(RandomNumber).l
00013352 3200                       		move.w	d0,d1
00013354 0240 0007                  		andi.w	#7,d0
00013358 0C40 0006                  		cmpi.w	#6,d0
0001335C 64EE                       		bcc.s	loc_1283A
0001335E                            
0001335E 1140 0034                  		move.b	d0,$34(a0)
00013362 0241 000C                  		andi.w	#$C,d1
00013366 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
0001336C D2C1                       		adda.w	d1,a1
0001336E 2149 003C                  		move.l	a1,$3C(a0)
00013372 5328 0032                  		subq.b	#1,$32(a0)
00013376 6A00                       		bpl.s	loc_12872
00013378 1168 0033 0032             		move.b	$33(a0),$32(a0)
0001337E 08E8 0007 0036             		bset	#7,$36(a0)
00013384                            
00013384                            loc_12872:
00013384 6000                       		bra.s	loc_1287C
00013386                            ; ===========================================================================
00013386                            
00013386                            loc_12874:				; XREF: Obj64_BblMaker
00013386 5368 0038                  		subq.w	#1,$38(a0)
0001338A 6A00 0000                  		bpl.w	loc_12914
0001338E                            
0001338E                            loc_1287C:
0001338E 4EB9 0000 33AE             		jsr	(RandomNumber).l
00013394 0240 001F                  		andi.w	#$1F,d0
00013398 3140 0038                  		move.w	d0,$38(a0)
0001339C 6100 B208                  		bsr.w	SingleObjLoad
000133A0 6600                       		bne.s	loc_128F8
000133A2 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
000133A6 3368 0008 0008             		move.w	8(a0),8(a1)
000133AC 4EB9 0000 33AE             		jsr	(RandomNumber).l
000133B2 0240 000F                  		andi.w	#$F,d0
000133B6 5140                       		subq.w	#8,d0
000133B8 D169 0008                  		add.w	d0,8(a1)
000133BC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000133C2 7000                       		moveq	#0,d0
000133C4 1028 0034                  		move.b	$34(a0),d0
000133C8 2468 003C                  		movea.l	$3C(a0),a2
000133CC 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
000133D2 0828 0007 0036             		btst	#7,$36(a0)
000133D8 6700                       		beq.s	loc_128F8
000133DA 4EB9 0000 33AE             		jsr	(RandomNumber).l
000133E0 0240 0003                  		andi.w	#3,d0
000133E4 6600                       		bne.s	loc_128E4
000133E6 08E8 0006 0036             		bset	#6,$36(a0)
000133EC 6600                       		bne.s	loc_128F8
000133EE 137C 0002 0028             		move.b	#2,$28(a1)
000133F4                            
000133F4                            loc_128E4:
000133F4 4A28 0034                  		tst.b	$34(a0)
000133F8 6600                       		bne.s	loc_128F8
000133FA 08E8 0006 0036             		bset	#6,$36(a0)
00013400 6600                       		bne.s	loc_128F8
00013402 137C 0002 0028             		move.b	#2,$28(a1)
00013408                            
00013408                            loc_128F8:
00013408 5328 0034                  		subq.b	#1,$34(a0)
0001340C 6A00                       		bpl.s	loc_12914
0001340E 4EB9 0000 33AE             		jsr	(RandomNumber).l
00013414 0240 007F                  		andi.w	#$7F,d0
00013418 0640 0080                  		addi.w	#$80,d0
0001341C D168 0038                  		add.w	d0,$38(a0)
00013420 4268 0036                  		clr.w	$36(a0)
00013424                            
00013424                            loc_12914:
00013424 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001342A 4EB9 0000 B222             		jsr	AnimateSprite
00013430                            
00013430                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00013430 3028 0008                  		move.w	8(a0),d0
00013434 0240 FF80                  		andi.w	#$FF80,d0
00013438 3238 F700                  		move.w	($FFFFF700).w,d1
0001343C 0441 0080                  		subi.w	#$80,d1
00013440 0241 FF80                  		andi.w	#$FF80,d1
00013444 9041                       		sub.w	d1,d0
00013446 0C40 0280                  		cmpi.w	#$280,d0
0001344A 6200 AD00                  		bhi.w	DeleteObject
0001344E 3038 F646                  		move.w	($FFFFF646).w,d0
00013452 B068 000C                  		cmp.w	$C(a0),d0
00013456 6500 ACB8                  		bcs.w	DisplaySprite
0001345A 4E75                       		rts	
0001345C                            ; ===========================================================================
0001345C                            ; bubble production sequence
0001345C                            
0001345C                            ; 0 = small bubble, 1 =	large bubble
0001345C                            
0001345C 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
0001346E                            
0001346E                            ; ===========================================================================
0001346E                            
0001346E                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
0001346E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013472 6B00                       		bmi.s	loc_12998
00013474 43F8 D000                  		lea	($FFFFD000).w,a1
00013478 3029 0008                  		move.w	8(a1),d0
0001347C 3228 0008                  		move.w	8(a0),d1
00013480 0441 0010                  		subi.w	#$10,d1
00013484 B240                       		cmp.w	d0,d1
00013486 6400                       		bcc.s	loc_12998
00013488 0641 0020                  		addi.w	#$20,d1
0001348C B240                       		cmp.w	d0,d1
0001348E 6500                       		bcs.s	loc_12998
00013490 3029 000C                  		move.w	$C(a1),d0
00013494 3228 000C                  		move.w	$C(a0),d1
00013498 B240                       		cmp.w	d0,d1
0001349A 6400                       		bcc.s	loc_12998
0001349C 0641 0010                  		addi.w	#$10,d1
000134A0 B240                       		cmp.w	d0,d1
000134A2 6500                       		bcs.s	loc_12998
000134A4 7001                       		moveq	#1,d0
000134A6 4E75                       		rts	
000134A8                            ; ===========================================================================
000134A8                            
000134A8                            loc_12998:
000134A8 7000                       		moveq	#0,d0
000134AA 4E75                       		rts	
000134AC                            ; ===========================================================================
000134AC                            Ani_obj64:
000134AC                            	include "_anim\obj64.asm"
000134AC                            ; ---------------------------------------------------------------------------
000134AC                            ; Animation script - bubbles (LZ)
000134AC                            ; ---------------------------------------------------------------------------
000134AC 0000                       		dc.w byte_129AA-Ani_obj64
000134AE 0000                       		dc.w byte_129B0-Ani_obj64
000134B0 0000                       		dc.w byte_129B6-Ani_obj64
000134B2 0000                       		dc.w byte_129BE-Ani_obj64
000134B4 0000                       		dc.w byte_129BE-Ani_obj64
000134B6 0000                       		dc.w byte_129C0-Ani_obj64
000134B8 0000                       		dc.w byte_129C6-Ani_obj64
000134BA 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
000134C0 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
000134C6 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
000134CE 04FC                       byte_129BE:	dc.b 4,	$FC
000134D0 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
000134D6 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
000134DC 00                         		even
000134DC 00                         		even
000134DC                            
000134DC                            ; ---------------------------------------------------------------------------
000134DC                            ; Sprite mappings - bubbles (LZ)
000134DC                            ; ---------------------------------------------------------------------------
000134DC                            Map_obj64:
000134DC                            	include "_maps\obj64.asm"
000134DC                            ; ---------------------------------------------------------------------------
000134DC                            ; Sprite mappings - bubbles (LZ)
000134DC                            ; ---------------------------------------------------------------------------
000134DC 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
000134E0 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
000134E4 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
000134E8 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
000134EC 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
000134F0 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
000134F4 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
000134F8 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
000134FC 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00013500 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00013504 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00013508 0000                       		dc.w byte_12A9C-Map_obj64
0001350A 01                         byte_129FA:	dc.b 1
0001350B FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00013510 01                         byte_12A00:	dc.b 1
00013511 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00013516 01                         byte_12A06:	dc.b 1
00013517 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
0001351C 01                         byte_12A0C:	dc.b 1
0001351D F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00013522 01                         byte_12A12:	dc.b 1
00013523 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00013528 01                         byte_12A18:	dc.b 1
00013529 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
0001352E 01                         byte_12A1E:	dc.b 1
0001352F F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00013534 04                         byte_12A24:	dc.b 4
00013535 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
0001353A F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
0001353F 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00013544 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00013549 04                         byte_12A39:	dc.b 4
0001354A F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
0001354F F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00013554 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00013559 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
0001355E 01                         byte_12A4E:	dc.b 1
0001355F F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00013564 01                         byte_12A54:	dc.b 1
00013565 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
0001356A 01                         byte_12A5A:	dc.b 1
0001356B F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00013570 01                         byte_12A60:	dc.b 1
00013571 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00013576 01                         byte_12A66:	dc.b 1
00013577 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
0001357C 01                         byte_12A6C:	dc.b 1
0001357D F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00013582 01                         byte_12A72:	dc.b 1
00013583 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00013588 01                         byte_12A78:	dc.b 1
00013589 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
0001358E 01                         byte_12A7E:	dc.b 1
0001358F F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00013594 01                         byte_12A84:	dc.b 1
00013595 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
0001359A 01                         byte_12A8A:	dc.b 1
0001359B F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
000135A0 01                         byte_12A90:	dc.b 1
000135A1 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
000135A6 01                         byte_12A96:	dc.b 1
000135A7 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
000135AC 00                         byte_12A9C:	dc.b 0
000135AE 00                         		even
000135AE 00                         		even
000135AE                            
000135AE                            ; ===========================================================================
000135AE                            ; ---------------------------------------------------------------------------
000135AE                            ; Object 65 - waterfalls (LZ)
000135AE                            ; ---------------------------------------------------------------------------
000135AE                            
000135AE                            Obj65:					; XREF: Obj_Index
000135AE 7000                       		moveq	#0,d0
000135B0 1028 0024                  		move.b	$24(a0),d0
000135B4 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
000135B8 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
000135BC                            ; ===========================================================================
000135BC 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
000135BE 0000                       		dc.w Obj65_Animate-Obj65_Index
000135C0 0000                       		dc.w Obj65_ChkDel-Obj65_Index
000135C2 0000                       		dc.w Obj65_FixHeight-Obj65_Index
000135C4 0000                       		dc.w loc_12B36-Obj65_Index
000135C6                            ; ===========================================================================
000135C6                            
000135C6                            Obj65_Main:				; XREF: Obj65_Index
000135C6 5828 0024                  		addq.b	#4,$24(a0)
000135CA 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
000135D2 317C 4259 0002             		move.w	#$4259,2(a0)
000135D8 0028 0004 0001             		ori.b	#4,1(a0)
000135DE 117C 0018 0019             		move.b	#$18,$19(a0)
000135E4 117C 0001 0018             		move.b	#1,$18(a0)
000135EA 1028 0028                  		move.b	$28(a0),d0	; get object type
000135EE 6A00                       		bpl.s	loc_12AE6
000135F0 08E8 0007 0002             		bset	#7,2(a0)
000135F6                            
000135F6                            loc_12AE6:
000135F6 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
000135FA 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
000135FE 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00013602 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00013604 4228 0018                  		clr.b	$18(a0)
00013608 5528 0024                  		subq.b	#2,$24(a0)
0001360C 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00013612 6700                       		beq.s	loc_12B0A	; if not, branch
00013614 117C 0006 0024             		move.b	#6,$24(a0)
0001361A                            
0001361A                            loc_12B0A:
0001361A 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
00013620 6700                       		beq.s	Obj65_Animate	; if not, branch
00013622 117C 0008 0024             		move.b	#8,$24(a0)
00013628                            
00013628                            Obj65_Animate:				; XREF: Obj65_Index
00013628 43F9 0000 0000             		lea	(Ani_obj65).l,a1
0001362E 4EB9 0000 B222             		jsr	AnimateSprite
00013634                            
00013634                            Obj65_ChkDel:				; XREF: Obj65_Index
00013634 6000 CB9C                  		bra.w	MarkObjGone
00013638                            ; ===========================================================================
00013638                            
00013638                            Obj65_FixHeight:			; XREF: Obj65_Index
00013638 3038 F646                  		move.w	($FFFFF646).w,d0
0001363C 0440 0010                  		subi.w	#$10,d0
00013640 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00013644 60E2                       		bra.s	Obj65_Animate
00013646                            ; ===========================================================================
00013646                            
00013646                            loc_12B36:				; XREF: Obj65_Index
00013646 08A8 0007 0002             		bclr	#7,2(a0)
0001364C 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00013652 6600                       		bne.s	Obj65_Animate2
00013654 08E8 0007 0002             		bset	#7,2(a0)
0001365A                            
0001365A                            Obj65_Animate2:
0001365A 60CC                       		bra.s	Obj65_Animate
0001365C                            ; ===========================================================================
0001365C                            Ani_obj65:
0001365C                            	include "_anim\obj65.asm"
0001365C                            ; ---------------------------------------------------------------------------
0001365C                            ; Animation script - waterfall (LZ)
0001365C                            ; ---------------------------------------------------------------------------
0001365C 0000                       		dc.w byte_12B4E-Ani_obj65
0001365E 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00013664 00                         		even
00013664 00                         		even
00013664                            
00013664                            ; ---------------------------------------------------------------------------
00013664                            ; Sprite mappings - waterfalls (LZ)
00013664                            ; ---------------------------------------------------------------------------
00013664                            Map_obj65:
00013664                            	include "_maps\obj65.asm"
00013664                            ; ---------------------------------------------------------------------------
00013664                            ; Sprite mappings - waterfalls (LZ)
00013664                            ; ---------------------------------------------------------------------------
00013664 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00013668 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
0001366C 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00013670 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00013674 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00013678 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
0001367C 01                         byte_12B6C:	dc.b 1
0001367D F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00013682 02                         byte_12B72:	dc.b 2
00013683 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00013688 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
0001368D 02                         byte_12B7D:	dc.b 2
0001368E F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013693 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00013698 01                         byte_12B88:	dc.b 1
00013699 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
0001369E 02                         byte_12B8E:	dc.b 2
0001369F F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000136A4 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000136A9 01                         byte_12B99:	dc.b 1
000136AA F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
000136AF 01                         byte_12B9F:	dc.b 1
000136B0 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
000136B5 01                         byte_12BA5:	dc.b 1
000136B6 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
000136BB 02                         byte_12BAB:	dc.b 2
000136BC F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
000136C1 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
000136C6 02                         byte_12BB6:	dc.b 2
000136C7 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
000136CC F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
000136D1 02                         byte_12BC1:	dc.b 2
000136D2 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
000136D7 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
000136DC 02                         byte_12BCC:	dc.b 2
000136DD F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
000136E2 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
000136E8 00                         		even
000136E8 00                         		even
000136E8                            
000136E8                            ; ===========================================================================
000136E8                            ; ---------------------------------------------------------------------------
000136E8                            ; Object 01 - Sonic
000136E8                            ; ---------------------------------------------------------------------------
000136E8                            
000136E8                            Obj01:					; XREF: Obj_Index
000136E8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000136EC 6700                       		beq.s	Obj01_Normal	; if not, branch
000136EE 4EF9 0000 0000             		jmp	DebugMode
000136F4                            ; ===========================================================================
000136F4                            
000136F4                            Obj01_Normal:
000136F4 7000                       		moveq	#0,d0
000136F6 1028 0024                  		move.b	$24(a0),d0
000136FA 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
000136FE 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00013702                            ; ===========================================================================
00013702 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00013704 0000                       		dc.w Obj01_Control-Obj01_Index
00013706 0000                       		dc.w Obj01_Hurt-Obj01_Index
00013708 0000                       		dc.w Obj01_Death-Obj01_Index
0001370A 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
0001370C 0000                       		dc.w Sonic_Drowned-Obj01_Index
0001370E                            ; ===========================================================================
0001370E                            
0001370E                            Obj01_Main:				; XREF: Obj01_Index
0001370E 5428 0024                  		addq.b	#2,$24(a0)
00013712 117C 0013 0016             		move.b	#$13,$16(a0)
00013718 117C 0009 0017             		move.b	#9,$17(a0)
0001371E 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00013726 317C 0780 0002             		move.w	#$780,2(a0)
0001372C 117C 0002 0018             		move.b	#2,$18(a0)
00013732 117C 0018 0019             		move.b	#$18,$19(a0)
00013738 117C 0004 0001             		move.b	#4,1(a0)
0001373E 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
00013744 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
0001374A 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00013750 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
00013756 11FC 0000 FE19             		move.b	#0,(Super_Sonic_flag).w
0001375C                            
0001375C                            Obj01_Control:				; XREF: Obj01_Index
0001375C 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00013760 6700                       		beq.s	loc_12C58	; if not, branch
00013762 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00013768 6700                       		beq.s	loc_12C58	; if not, branch
0001376A 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00013770 4238 F7CC                  		clr.b	($FFFFF7CC).w
00013774 4E75                       		rts
00013776                            ; ===========================================================================
00013776                            
00013776                            loc_12C58:
00013776 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
0001377A 6600                       		bne.s	loc_12C64	; if yes, branch
0001377C 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00013782                            
00013782                            loc_12C64:
00013782 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
00013788 6600                       		bne.s	loc_12C7E	; if yes, branch
0001378A 7000                       		moveq	#0,d0
0001378C 1028 0022                  		move.b	$22(a0),d0
00013790 0240 0006                  		andi.w	#6,d0
00013794 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00013798 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
0001379C                            
0001379C                            loc_12C7E:
0001379C 6100                       		bsr.s	Sonic_Display
0001379E 6100 0000                  		bsr.w	Sonic_Super
000137A2 6100 0000                  		bsr.w	Sonic_RecordPos
000137A6 6100 0000                  		bsr.w	Sonic_Water
000137AA 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
000137B0 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
000137B6 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000137BA 6700                       		beq.s	loc_12CA6
000137BC 4A28 001C                  		tst.b	$1C(a0)
000137C0 6600                       		bne.s	loc_12CA6
000137C2 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
000137C8                            
000137C8                            loc_12CA6:
000137C8 6100 0000                  		bsr.w	Sonic_Animate
000137CC 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000137D0 6B00                       		bmi.s	loc_12CB6
000137D2 4EB9 0000 0000             		jsr	TouchResponse
000137D8                            
000137D8                            loc_12CB6:
000137D8 6100 0000                  		bsr.w	Sonic_Loops
000137DC 6100 0000                  		bsr.w	LoadSonicDynPLC
000137E0 4E75                       		rts
000137E2                            ; ===========================================================================
000137E2 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
000137E4 0000                       		dc.w Obj01_MdJump-Obj01_Modes
000137E6 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
000137E8 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
000137EA                            ; ---------------------------------------------------------------------------
000137EA                            ; Music	to play	after invincibility wears off
000137EA                            ; ---------------------------------------------------------------------------
000137EA                            ;MusicList2:	incbin	misc\muslist2.bin
000137EA                            ;		even
000137EA                            ; ===========================================================================
000137EA                            
000137EA                            Sonic_Display:				; XREF: loc_12C7E
000137EA 3028 0030                  		move.w	$30(a0),d0
000137EE 6700                       		beq.s	Obj01_Display
000137F0 5368 0030                  		subq.w	#1,$30(a0)
000137F4 E648                       		lsr.w	#3,d0
000137F6 6400                       		bcc.s	Obj01_ChkInvin
000137F8                            
000137F8                            Obj01_Display:
000137F8 4EBA A916                  		jsr	DisplaySprite
000137FC                            
000137FC                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
000137FC                            
000137FC                            Obj01_ChkInvin:
000137FC 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00013800 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
00013804 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00013808 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
0001380C 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00013810 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
00013814 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013818 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
0001381C 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00013822 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
00013826 4A38 FE2E                  		tst.b ($FFFFFE2E).w ; does Sonic have speed shoes?
0001382A 6600                       		bne.s Obj01_ChkShoes	
0001382C 7000                       		moveq	#0,d0
0001382E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00013832                             
00013832 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00013838 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
0001383A 43F9 0000 41C6             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00013840 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013842                             
00013842                            Obj01_GetBgm2:
00013842 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00013848 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
0001384A 43F9 0000 41CC             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00013850 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013852                             
00013852                            Obj01_GetBgm3:
00013852 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00013858 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
0001385A 43F9 0000 41D2             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00013860 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013862                             
00013862                            Obj01_GetBgm4:
00013862 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00013868 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
0001386A 43F9 0000 41D8             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00013870                             
00013870                            Obj01_PlayMusic:
00013870 1031 0000                  		move.b	(a1,d0.w),d0
00013874 4EB9 0000 1470             		jsr	(PlaySound).l	; play normal music
0001387A                             
0001387A                            ; NineKode ends here.
0001387A                            
0001387A                            
0001387A                            Obj01_RmvInvin:
0001387A 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00013880                            
00013880                            Obj01_ChkShoes:
00013880 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00013884 6700                       		beq.s	Obj01_ExitChk	; if not, branch
00013886 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
0001388A 6700                       		beq.s	Obj01_ExitChk
0001388C 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
00013890 6600                       		bne.s	Obj01_ExitChk
00013892 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013898 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
0001389E 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000138A4 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
000138AA 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; does Sonic have invincibility?
000138AE 6600                       		bne.s Obj01_ExitChk
000138B0                            
000138B0 7000                       		moveq #0,d0
000138B2 1038 FE10                  		move.b ($FFFFFE10).w,d0
000138B6 0C78 0103 FE10             		cmpi.w #$103,($FFFFFE10).w ; check if level is SBZ3
000138BC 6600                       		bne.s playthemusic
000138BE 7009                       		moveq #9,d0 ; play SBZ music
000138C0                            playthemusic:
000138C0 43F9 0000 41CC             		lea (MusicList2).l,a1 ; load music playlist
000138C6 1031 0000                  		move.b (a1,d0.w),d0 ; add d0 to a1
000138CA 4EB9 0000 1470             		jsr (PlaySound).l ; play normal music
000138D0                            ; ===========================================================================
000138D0                            
000138D0                            Obj01_ExitChk:
000138D0 4E75                       		rts	
000138D2                            
000138D2                            ; ---------------------------------------------------------------------------
000138D2                            ; Subroutine to	record Sonic's previous positions for invincibility stars
000138D2                            ; ---------------------------------------------------------------------------
000138D2                            
000138D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138D2                            
000138D2                            
000138D2                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
000138D2 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000138D6 43F8 CB00                  		lea	($FFFFCB00).w,a1
000138DA 43F1 0000                  		lea	(a1,d0.w),a1
000138DE 32E8 0008                  		move.w	8(a0),(a1)+
000138E2 32E8 000C                  		move.w	$C(a0),(a1)+
000138E6 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
000138EA 4E75                       		rts	
000138EC                            ; End of function Sonic_RecordPos
000138EC                            
000138EC                            ; ---------------------------------------------------------------------------
000138EC                            ; Subroutine for Sonic when he's underwater
000138EC                            ; ---------------------------------------------------------------------------
000138EC                            
000138EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138EC                            
000138EC                            
000138EC                            Sonic_Water:				; XREF: loc_12C7E
000138EC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000138F2 6700                       		beq.s	Obj01_InWater	; if yes, branch
000138F4                            
000138F4                            locret_12D80:
000138F4 4E75                       		rts	
000138F6                            ; ===========================================================================
000138F6                            
000138F6                            Obj01_InWater:
000138F6 3038 F646                  		move.w	($FFFFF646).w,d0
000138FA B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
000138FE 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00013900 08E8 0006 0022             		bset	#6,$22(a0)
00013906 66EC                       		bne.s	locret_12D80
00013908 6100 0000                  		bsr.w	ResumeMusic
0001390C 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00013912 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00013918 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
0001391E 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
00013924 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
0001392A 4A38 FE19                  	tst.b	(Super_Sonic_flag).w	; Is Sonic Super?
0001392E 6700                       	beq.s	@Skip			; If not branch
00013930 31FC 0500 F760             	move.w	#$500,(Sonic_top_speed).w
00013936 31FC 0018 F762             	move.w	#$18,(Sonic_acceleration).w
0001393C 31FC 0080 F764             	move.w	#$80,(Sonic_deceleration).w
00013942                            @Skip:		
00013942 E0E8 0010                  		asr	$10(a0)
00013946 E0E8 0012                  		asr	$12(a0)
0001394A E0E8 0012                  		asr	$12(a0)
0001394E 67A4                       		beq.s	locret_12D80
00013950 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013956 303C 00AA                  		move.w	#$AA,d0
0001395A 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play splash sound
00013960                            ; ===========================================================================
00013960                            
00013960                            Obj01_OutWater:
00013960 08A8 0006 0022             		bclr	#6,$22(a0)
00013966 678C                       		beq.s	locret_12D80
00013968 6100 0000                  		bsr.w	ResumeMusic
0001396C 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013972 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013978 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
0001397E 4A38 FE19                  	tst.b	(Super_Sonic_flag).w	; Is Sonic Super?
00013982 6700                       	beq.s	@Skip2			; If not branch
00013984 31FC 0A00 F760             	move.w	#$A00,(Sonic_top_speed).w
0001398A 31FC 0030 F762             	move.w	#$30,(Sonic_acceleration).w
00013990 31FC 0100 F764             	move.w	#$100,(Sonic_deceleration).w
00013996                            @Skip2
00013996 E1E8 0012                  		asl	$12(a0)
0001399A 4A68 0012                  		tst.w   $12(a0)
0001399E 6700 FF54                  		beq.w	locret_12D80
000139A2 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
000139A8 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
000139AE 6E00                       		bgt.s	loc_12E0E
000139B0 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
000139B6                            
000139B6                            loc_12E0E:
000139B6 303C 00AA                  		move.w	#$AA,d0
000139BA 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play splash sound
000139C0                            ; End of function Sonic_Water
000139C0                            
000139C0                            ; ===========================================================================
000139C0                            ; ---------------------------------------------------------------------------
000139C0                            ; Modes	for controlling	Sonic
000139C0                            ; ---------------------------------------------------------------------------
000139C0                            
000139C0                            Obj01_MdNormal:				; XREF: Obj01_Modes
000139C0 6100 0000                  		bsr.w	Sonic_SpinDash
000139C4 6100 0000                  		bsr.w	Sonic_Jump
000139C8 6100 0000                  		bsr.w	Sonic_SlopeResist
000139CC 6100 0000                  		bsr.w	Sonic_Move
000139D0 6100 0000                  		bsr.w	Sonic_Roll
000139D4 6100 0000                  		bsr.w	Sonic_Super
000139D8 6100 0000                  		bsr.w	Sonic_LevelBound
000139DC 4EBA A70C                  		jsr	SpeedToPos
000139E0 6100 0000                  		bsr.w	Sonic_AnglePos
000139E4 6100 0000                  		bsr.w	Sonic_SlopeRepel
000139E8 4E75                       		rts	
000139EA                            ; ===========================================================================
000139EA                            
000139EA                            Obj01_MdJump:				; XREF: Obj01_Modes
000139EA 4228 0039                  		clr.b	$39(a0)
000139EE 6100 0000                  		bsr.w	Sonic_JumpHeight
000139F2 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000139F6 6100 0000                  		bsr.w	Sonic_LevelBound
000139FA 4EBA A6C2                  		jsr	ObjectFall
000139FE 0828 0006 0022             		btst	#6,$22(a0)
00013A04 6700                       		beq.s	loc_12E5C
00013A06 0468 0028 0012             		subi.w	#$28,$12(a0)
00013A0C                            
00013A0C                            loc_12E5C:
00013A0C 6100 0000                  		bsr.w	Sonic_JumpAngle
00013A10 6100 0000                  		bsr.w	Sonic_Floor
00013A14 4E75                       		rts	
00013A16                            ; ===========================================================================
00013A16                            
00013A16                            Obj01_MdRoll:				; XREF: Obj01_Modes
00013A16 6100 0000                  		bsr.w	Sonic_Jump
00013A1A 6100 0000                  		bsr.w	Sonic_RollRepel
00013A1E 6100 0000                  		bsr.w	Sonic_RollSpeed
00013A22 6100 0000                  		bsr.w	Sonic_LevelBound
00013A26 4EBA A6C2                  		jsr	SpeedToPos
00013A2A 6100 0000                  		bsr.w	Sonic_AnglePos
00013A2E 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013A32 4E75                       		rts	
00013A34                            ; ===========================================================================
00013A34                            
00013A34                            Obj01_MdJump2:				; XREF: Obj01_Modes
00013A34 4228 0039                  		clr.b	$39(a0)
00013A38 6100 0000                  		bsr.w	Sonic_JumpHeight
00013A3C 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013A40 6100 0000                  		bsr.w	Sonic_LevelBound
00013A44 4EBA A678                  		jsr	ObjectFall
00013A48 0828 0006 0022             		btst	#6,$22(a0)
00013A4E 6700                       		beq.s	loc_12EA6
00013A50 0468 0028 0012             		subi.w	#$28,$12(a0)
00013A56                            
00013A56                            loc_12EA6:
00013A56 6100 0000                  		bsr.w	Sonic_JumpAngle
00013A5A 6100 0000                  		bsr.w	Sonic_Floor
00013A5E 4E75                       		rts	
00013A60                            ; ---------------------------------------------------------------------------
00013A60                            ; Subroutine to	make Sonic walk/run
00013A60                            ; ---------------------------------------------------------------------------
00013A60                            
00013A60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A60                            
00013A60                            
00013A60                            Sonic_Move:				; XREF: Obj01_MdNormal
00013A60 3C38 F760                  		move.w	($FFFFF760).w,d6
00013A64 3A38 F762                  		move.w	($FFFFF762).w,d5
00013A68 3838 F764                  		move.w	($FFFFF764).w,d4
00013A6C 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013A70 6600 0000                  		bne.w	loc_12FEE
00013A74 4A68 003E                  		tst.w	$3E(a0)
00013A78 6600 0000                  		bne.w	Obj01_ResetScr
00013A7C 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013A82 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00013A84 6100 0000                  		bsr.w	Sonic_MoveLeft
00013A88                            
00013A88                            Obj01_NotLeft:
00013A88 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013A8E 6700                       		beq.s	Obj01_NotRight	; if not, branch
00013A90 6100 0000                  		bsr.w	Sonic_MoveRight
00013A94                            
00013A94                            Obj01_NotRight:
00013A94 1028 0026                  		move.b	$26(a0),d0
00013A98 0600 0020                  		addi.b	#$20,d0
00013A9C 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00013AA0 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013AA4 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013AA8 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013AAC 08A8 0005 0022             		bclr	#5,$22(a0)
00013AB2 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013AB8 0828 0003 0022             		btst	#3,$22(a0)
00013ABE 6700                       		beq.s	Sonic_Balance
00013AC0 7000                       		moveq	#0,d0
00013AC2 1028 003D                  		move.b	$3D(a0),d0
00013AC6 ED48                       		lsl.w	#6,d0
00013AC8 43F8 D000                  		lea	($FFFFD000).w,a1
00013ACC 43F1 0000                  		lea	(a1,d0.w),a1
00013AD0 4A29 0022                  		tst.b	$22(a1)
00013AD4 6B00                       		bmi.s	Sonic_LookUp
00013AD6 7200                       		moveq	#0,d1
00013AD8 1229 0019                  		move.b	$19(a1),d1
00013ADC 3401                       		move.w	d1,d2
00013ADE D442                       		add.w	d2,d2
00013AE0 5942                       		subq.w	#4,d2
00013AE2 D268 0008                  		add.w	8(a0),d1
00013AE6 9269 0008                  		sub.w	8(a1),d1
00013AEA 0C41 0004                  		cmpi.w	#4,d1
00013AEE 6D00                       		blt.s	loc_12F6A
00013AF0 B242                       		cmp.w	d2,d1
00013AF2 6C00                       		bge.s	loc_12F5A
00013AF4 6000                       		bra.s	Sonic_LookUp
00013AF6                            ; ===========================================================================
00013AF6                            
00013AF6                            Sonic_Balance:
00013AF6 4EB9 0000 0000             		jsr	ObjHitFloor
00013AFC 0C41 000C                  		cmpi.w	#$C,d1
00013B00 6D00                       		blt.s	Sonic_LookUp
00013B02 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00013B08 6600                       		bne.s	loc_12F62
00013B0A                            
00013B0A                            loc_12F5A:
00013B0A 08A8 0000 0022             		bclr	#0,$22(a0)
00013B10 6000                       		bra.s	loc_12F70
00013B12                            ; ===========================================================================
00013B12                            
00013B12                            loc_12F62:
00013B12 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00013B18 6600                       		bne.s	Sonic_LookUp
00013B1A                            
00013B1A                            loc_12F6A:
00013B1A 08E8 0000 0022             		bset	#0,$22(a0)
00013B20                            
00013B20                            loc_12F70:
00013B20 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00013B26 6000                       		bra.s	Obj01_ResetScr
00013B28                            ; ===========================================================================
00013B28                            
00013B28                            Sonic_LookUp:
00013B28 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00013B2E 6700                       		beq.s	Sonic_Duck	; if not, branch
00013B30 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00013B36 5238 C903                  		addq.b	#1,($FFFFC903).w
00013B3A 0C38 0078 C903             		cmp.b	#$78,($FFFFC903).w
00013B40 6500                       		bcs.s	Obj01_ResetScr_Part2
00013B42 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
00013B48 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00013B4E 6700                       		beq.s	loc_12FC2
00013B50 5478 F73E                  		addq.w	#2,($FFFFF73E).w
00013B54 6000                       		bra.s	loc_12FC2
00013B56                            ; ===========================================================================
00013B56                            
00013B56                            Sonic_Duck:
00013B56 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013B5C 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00013B5E 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
00013B64 5238 C903                  		addq.b	#1,($FFFFC903).w
00013B68 0C38 0078 C903             		cmpi.b	#$78,($FFFFC903).w
00013B6E 6500                       		bcs.s	Obj01_ResetScr_Part2
00013B70 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
00013B76 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00013B7C 6700                       		beq.s	loc_12FC2
00013B7E 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013B82 6000                       		bra.s	loc_12FC2
00013B84                            ; ===========================================================================
00013B84                            
00013B84                            Obj01_ResetScr:
00013B84 11FC 0000 C903             		move.b	#0,($FFFFC903).w
00013B8A                            		
00013B8A                            Obj01_ResetScr_Part2:
00013B8A 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00013B90 6700                       		beq.s	loc_12FC2	; if yes, branch
00013B92 6400                       		bcc.s	loc_12FBE
00013B94 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00013B98                            
00013B98                            loc_12FBE:
00013B98 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00013B9C                            
00013B9C                            
00013B9C                            loc_12FC2:
00013B9C 1038 F602                  		move.b	($FFFFF602).w,d0
00013BA0 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00013BA4 6600                       		bne.s	loc_12FEE	; if yes, branch
00013BA6 3028 0014                  		move.w	$14(a0),d0
00013BAA 6700                       		beq.s	loc_12FEE
00013BAC 6B00                       		bmi.s	loc_12FE2
00013BAE 9045                       		sub.w	d5,d0
00013BB0 6400                       		bcc.s	loc_12FDC
00013BB2 303C 0000                  		move.w	#0,d0
00013BB6                            
00013BB6                            loc_12FDC:
00013BB6 3140 0014                  		move.w	d0,$14(a0)
00013BBA 6000                       		bra.s	loc_12FEE
00013BBC                            ; ===========================================================================
00013BBC                            
00013BBC                            loc_12FE2:
00013BBC D045                       		add.w	d5,d0
00013BBE 6400                       		bcc.s	loc_12FEA
00013BC0 303C 0000                  		move.w	#0,d0
00013BC4                            
00013BC4                            loc_12FEA:
00013BC4 3140 0014                  		move.w	d0,$14(a0)
00013BC8                            
00013BC8                            loc_12FEE:
00013BC8 1028 0026                  		move.b	$26(a0),d0
00013BCC 4EB9 0000 33D4             		jsr	(CalcSine).l
00013BD2 C3E8 0014                  		muls.w	$14(a0),d1
00013BD6 E081                       		asr.l	#8,d1
00013BD8 3141 0010                  		move.w	d1,$10(a0)
00013BDC C1E8 0014                  		muls.w	$14(a0),d0
00013BE0 E080                       		asr.l	#8,d0
00013BE2 3140 0012                  		move.w	d0,$12(a0)
00013BE6                            
00013BE6                            loc_1300C:
00013BE6 1028 0026                  		move.b	$26(a0),d0
00013BEA 0600 0040                  		addi.b	#$40,d0
00013BEE 6B00                       		bmi.s	locret_1307C
00013BF0 123C 0040                  		move.b	#$40,d1
00013BF4 4A68 0014                  		tst.w	$14(a0)
00013BF8 6700                       		beq.s	locret_1307C
00013BFA 6B00                       		bmi.s	loc_13024
00013BFC 4441                       		neg.w	d1
00013BFE                            
00013BFE                            loc_13024:
00013BFE 1028 0026                  		move.b	$26(a0),d0
00013C02 D001                       		add.b	d1,d0
00013C04 3F00                       		move.w	d0,-(sp)
00013C06 6100 0000                  		bsr.w	Sonic_WalkSpeed
00013C0A 301F                       		move.w	(sp)+,d0
00013C0C 4A41                       		tst.w	d1
00013C0E 6A00                       		bpl.s	locret_1307C
00013C10 E141                       		asl.w	#8,d1
00013C12 0600 0020                  		addi.b	#$20,d0
00013C16 0200 00C0                  		andi.b	#$C0,d0
00013C1A 6700                       		beq.s	loc_13078
00013C1C 0C00 0040                  		cmpi.b	#$40,d0
00013C20 6700                       		beq.s	loc_13066
00013C22 0C00 0080                  		cmpi.b	#$80,d0
00013C26 6700                       		beq.s	loc_13060
00013C28 D368 0010                  		add.w	d1,$10(a0)
00013C2C 08E8 0005 0022             		bset	#5,$22(a0)
00013C32 317C 0000 0014             		move.w	#0,$14(a0)
00013C38 4E75                       		rts	
00013C3A                            ; ===========================================================================
00013C3A                            
00013C3A                            loc_13060:
00013C3A 9368 0012                  		sub.w	d1,$12(a0)
00013C3E 4E75                       		rts	
00013C40                            ; ===========================================================================
00013C40                            
00013C40                            loc_13066:
00013C40 9368 0010                  		sub.w	d1,$10(a0)
00013C44 08E8 0005 0022             		bset	#5,$22(a0)
00013C4A 317C 0000 0014             		move.w	#0,$14(a0)
00013C50 4E75                       		rts	
00013C52                            ; ===========================================================================
00013C52                            
00013C52                            loc_13078:
00013C52 D368 0012                  		add.w	d1,$12(a0)
00013C56                            
00013C56                            locret_1307C:
00013C56 4E75                       		rts	
00013C58                            ; End of function Sonic_Move
00013C58                            
00013C58                            
00013C58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C58                            
00013C58                            
00013C58                            Sonic_MoveLeft:		   ; XREF: Sonic_Move
00013C58 3028 0014                  		move.w	$14(a0),d0
00013C5C 6700                       		beq.s	loc_13086
00013C5E 6A00                       		bpl.s	loc_130B2
00013C60                            
00013C60                            loc_13086:
00013C60 08E8 0000 0022             		bset	#0,$22(a0)
00013C66 6600                       		bne.s	loc_1309A
00013C68 08A8 0005 0022             		bclr	#5,$22(a0)
00013C6E 117C 0001 001D             		move.b	#1,$1D(a0)
00013C74                            
00013C74                            loc_1309A:
00013C74 9045                       		sub.w	d5,d0
00013C76 3206                       		move.w	d6,d1
00013C78 4441                       		neg.w	d1
00013C7A B041                       		cmp.w	d1,d0
00013C7C 6E00                       		bgt.s	loc_130A6
00013C7E D045                       		add.w	d5,d0
00013C80 B041                       		cmp.w	d1,d0
00013C82 6F00                       		ble.s	loc_130A6
00013C84 3001                       		move.w	d1,d0
00013C86                            
00013C86                            loc_130A6:
00013C86 3140 0014                  		move.w	d0,$14(a0)
00013C8A 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00013C90 4E75                       		rts
00013C92                            
00013C92                            ; ===========================================================================
00013C92                            
00013C92                            loc_130B2:				; XREF: Sonic_MoveLeft
00013C92 9044                       		sub.w	d4,d0
00013C94 6400                       		bcc.s	loc_130BA
00013C96 303C FF80                  		move.w	#-$80,d0
00013C9A                            
00013C9A                            loc_130BA:
00013C9A 3140 0014                  		move.w	d0,$14(a0)
00013C9E 1028 0026                  		move.b	$26(a0),d0
00013CA2 0600 0020                  		addi.b	#$20,d0
00013CA6 0200 00C0                  		andi.b	#$C0,d0
00013CAA 6600                       		bne.s	locret_130E8
00013CAC 0C40 0400                  		cmpi.w	#$400,d0
00013CB0 6D00                       		blt.s	locret_130E8
00013CB2 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013CB8 08A8 0000 0022             		bclr	#0,$22(a0)
00013CBE 303C 00A4                  		move.w	#$A4,d0
00013CC2 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play stopping sound
00013CC8                            
00013CC8                            locret_130E8:
00013CC8 4E75                       		rts	
00013CCA                            ; End of function Sonic_MoveLeft
00013CCA                            
00013CCA                            
00013CCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013CCA                            
00013CCA                            
00013CCA                            Sonic_MoveRight:	   ; XREF: Sonic_Move
00013CCA 3028 0014                  		move.w	$14(a0),d0
00013CCE 6B00                       		bmi.s	loc_13118
00013CD0 08A8 0000 0022             		bclr	#0,$22(a0)
00013CD6 6700                       		beq.s	loc_13104
00013CD8 08A8 0005 0022             		bclr	#5,$22(a0)
00013CDE 117C 0001 001D             		move.b	#1,$1D(a0)
00013CE4                            
00013CE4                            loc_13104:
00013CE4 D045                       		add.w	d5,d0
00013CE6 B046                       		cmp.w	d6,d0
00013CE8 6D00                       		blt.s	loc_1310C
00013CEA 9045                       		sub.w	d5,d0
00013CEC B046                       		cmp.w	d6,d0
00013CEE 6C00                       		bge.s	loc_1310C
00013CF0 3006                       		move.w	d6,d0
00013CF2                            
00013CF2                            loc_1310C:
00013CF2 3140 0014                  		move.w	d0,$14(a0)
00013CF6 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00013CFC 4E75                       		rts
00013CFE                            
00013CFE                            ; ===========================================================================
00013CFE                            
00013CFE                            loc_13118:				; XREF: Sonic_MoveRight
00013CFE D044                       		add.w	d4,d0
00013D00 6400                       		bcc.s	loc_13120
00013D02 303C 0080                  		move.w	#$80,d0
00013D06                            
00013D06                            loc_13120:
00013D06 3140 0014                  		move.w	d0,$14(a0)
00013D0A 1028 0026                  		move.b	$26(a0),d0
00013D0E 0600 0020                  		addi.b	#$20,d0
00013D12 0200 00C0                  		andi.b	#$C0,d0
00013D16 6600                       		bne.s	locret_1314E
00013D18 0C40 FC00                  		cmpi.w	#-$400,d0
00013D1C 6E00                       		bgt.s	locret_1314E
00013D1E 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013D24 08E8 0000 0022             		bset	#0,$22(a0)
00013D2A 303C 00A4                  		move.w	#$A4,d0
00013D2E 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play stopping sound
00013D34                            
00013D34                            locret_1314E:
00013D34 4E75                       		rts	
00013D36                            ; End of function Sonic_MoveRight
00013D36                            
00013D36                            ; ---------------------------------------------------------------------------
00013D36                            ; Subroutine to	change Sonic's speed as he rolls
00013D36                            ; ---------------------------------------------------------------------------
00013D36                            
00013D36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D36                            
00013D36                            
00013D36                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00013D36 3C38 F760                  		move.w	($FFFFF760).w,d6
00013D3A E346                       		asl.w	#1,d6
00013D3C 3A38 F762                  		move.w	($FFFFF762).w,d5
00013D40 E245                       		asr.w	#1,d5
00013D42 3838 F764                  		move.w	($FFFFF764).w,d4
00013D46 E444                       		asr.w	#2,d4
00013D48 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013D4C 6600 0000                  		bne.w	loc_131CC
00013D50 4A68 003E                  		tst.w	$3E(a0)
00013D54 6600                       		bne.s	loc_13188
00013D56 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013D5C 6700                       		beq.s	loc_1317C	; if not, branch
00013D5E 6100 0000                  		bsr.w	Sonic_RollLeft
00013D62                            
00013D62                            loc_1317C:
00013D62 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013D68 6700                       		beq.s	loc_13188	; if not, branch
00013D6A 6100 0000                  		bsr.w	Sonic_RollRight
00013D6E                            
00013D6E                            loc_13188:
00013D6E 3028 0014                  		move.w	$14(a0),d0
00013D72 6700                       		beq.s	loc_131AA
00013D74 6B00                       		bmi.s	loc_1319E
00013D76 9045                       		sub.w	d5,d0
00013D78 6400                       		bcc.s	loc_13198
00013D7A 303C 0000                  		move.w	#0,d0
00013D7E                            
00013D7E                            loc_13198:
00013D7E 3140 0014                  		move.w	d0,$14(a0)
00013D82 6000                       		bra.s	loc_131AA
00013D84                            ; ===========================================================================
00013D84                            
00013D84                            loc_1319E:				; XREF: Sonic_RollSpeed
00013D84 D045                       		add.w	d5,d0
00013D86 6400                       		bcc.s	loc_131A6
00013D88 303C 0000                  		move.w	#0,d0
00013D8C                            
00013D8C                            loc_131A6:
00013D8C 3140 0014                  		move.w	d0,$14(a0)
00013D90                            
00013D90                            loc_131AA:
00013D90 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013D94 6600                       		bne.s	loc_131CC	; if yes, branch
00013D96 08A8 0002 0022             		bclr	#2,$22(a0)
00013D9C 117C 0013 0016             		move.b	#$13,$16(a0)
00013DA2 117C 0009 0017             		move.b	#9,$17(a0)
00013DA8 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013DAE 5B68 000C                  		subq.w	#5,$C(a0)
00013DB2                            
00013DB2                            loc_131CC:
00013DB2 0C78 0060 F73E             		cmp.w	#$60,($FFFFF73E).w
00013DB8 6700                       		beq.s	@cont2
00013DBA 6400                       		bcc.s	@cont1
00013DBC 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013DC0                            		
00013DC0                            @cont1:
00013DC0 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013DC4                            		
00013DC4                            @cont2:
00013DC4 1028 0026                  		move.b	$26(a0),d0
00013DC8 4EB9 0000 33D4             		jsr	(CalcSine).l
00013DCE C1E8 0014                  		muls.w	$14(a0),d0
00013DD2 E080                       		asr.l	#8,d0
00013DD4 3140 0012                  		move.w	d0,$12(a0)
00013DD8 C3E8 0014                  		muls.w	$14(a0),d1
00013DDC E081                       		asr.l	#8,d1
00013DDE 0C41 1000                  		cmpi.w	#$1000,d1
00013DE2 6F00                       		ble.s	loc_131F0
00013DE4 323C 1000                  		move.w	#$1000,d1
00013DE8                            
00013DE8                            loc_131F0:
00013DE8 0C41 F000                  		cmpi.w	#-$1000,d1
00013DEC 6C00                       		bge.s	loc_131FA
00013DEE 323C F000                  		move.w	#-$1000,d1
00013DF2                            
00013DF2                            loc_131FA:
00013DF2 3141 0010                  		move.w	d1,$10(a0)
00013DF6 6000 FDEE                  		bra.w	loc_1300C
00013DFA                            ; End of function Sonic_RollSpeed
00013DFA                            
00013DFA                            
00013DFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DFA                            
00013DFA                            
00013DFA                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00013DFA 3028 0014                  		move.w	$14(a0),d0
00013DFE 6700                       		beq.s	loc_1320A
00013E00 6A00                       		bpl.s	loc_13218
00013E02                            
00013E02                            loc_1320A:
00013E02 08E8 0000 0022             		bset	#0,$22(a0)
00013E08 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013E0E 4E75                       		rts	
00013E10                            ; ===========================================================================
00013E10                            
00013E10                            loc_13218:
00013E10 9044                       		sub.w	d4,d0
00013E12 6400                       		bcc.s	loc_13220
00013E14 303C FF80                  		move.w	#-$80,d0
00013E18                            
00013E18                            loc_13220:
00013E18 3140 0014                  		move.w	d0,$14(a0)
00013E1C 4E75                       		rts	
00013E1E                            ; End of function Sonic_RollLeft
00013E1E                            
00013E1E                            
00013E1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E1E                            
00013E1E                            
00013E1E                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00013E1E 3028 0014                  		move.w	$14(a0),d0
00013E22 6B00                       		bmi.s	loc_1323A
00013E24 08A8 0000 0022             		bclr	#0,$22(a0)
00013E2A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013E30 4E75                       		rts	
00013E32                            ; ===========================================================================
00013E32                            
00013E32                            loc_1323A:
00013E32 D044                       		add.w	d4,d0
00013E34 6400                       		bcc.s	loc_13242
00013E36 303C 0080                  		move.w	#$80,d0
00013E3A                            
00013E3A                            loc_13242:
00013E3A 3140 0014                  		move.w	d0,$14(a0)
00013E3E 4E75                       		rts	
00013E40                            ; End of function Sonic_RollRight
00013E40                            
00013E40                            ; ---------------------------------------------------------------------------
00013E40                            ; Subroutine to	change Sonic's direction while jumping
00013E40                            ; ---------------------------------------------------------------------------
00013E40                            
00013E40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E40                            
00013E40                            
00013E40                            Sonic_ChgJumpDir:		; XREF: Obj01_MdJump; Obj01_MdJump2
00013E40 3C38 F760                  		move.w	($FFFFF760).w,d6
00013E44 3A38 F762                  		move.w	($FFFFF762).w,d5
00013E48 E345                       		asl.w	#1,d5
00013E4A 0828 0004 0022             		btst	#4,$22(a0)	
00013E50 6600                       		bne.s	Obj01_ResetScr2	
00013E52 3028 0010                  		move.w	$10(a0),d0	
00013E56 0838 0002 F602             		btst	#2,($FFFFF602).w; is left being pressed?	
00013E5C 6700                       		beq.s	loc_13278; if not, branch	
00013E5E 08E8 0000 0022             		bset	#0,$22(a0)	
00013E64 9045                       		sub.w	d5,d0	
00013E66 3206                       		move.w	d6,d1	
00013E68 4441                       		neg.w	d1	
00013E6A B041                       		cmp.w	d1,d0	
00013E6C 6E00                       		bgt.s	loc_13278	
00013E6E D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
00013E70 B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
00013E72 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
00013E74 3001                       		move.w	d1,d0
00013E76                            
00013E76                            loc_13278:
00013E76 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
00013E7C 6700                       		beq.s	Obj01_JumpMove; if not, branch	
00013E7E 08A8 0000 0022             		bclr	#0,$22(a0)	
00013E84 D045                       		add.w	d5,d0	
00013E86 B046                       		cmp.w	d6,d0	
00013E88 6D00                       		blt.s	Obj01_JumpMove
00013E8A 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
00013E8C B046                       		cmp.w	d6,d0		; +++ compare speed with top speed
00013E8E 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
00013E90 3006                       		move.w	d6,d0
00013E92                            
00013E92                            Obj01_JumpMove:
00013E92 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013E96                            
00013E96                            Obj01_ResetScr2:
00013E96 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013E9C 6700                       		beq.s	loc_132A4	; if yes, branch
00013E9E 6400                       		bcc.s	loc_132A0
00013EA0 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013EA4                            
00013EA4                            loc_132A0:
00013EA4 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013EA8                            
00013EA8                            loc_132A4:
00013EA8 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013EAE 6500                       		bcs.s	locret_132D2	; if yes, branch
00013EB0 3028 0010                  		move.w	$10(a0),d0
00013EB4 3200                       		move.w	d0,d1
00013EB6 EA41                       		asr.w	#5,d1
00013EB8 6700                       		beq.s	locret_132D2
00013EBA 6B00                       		bmi.s	loc_132C6
00013EBC 9041                       		sub.w	d1,d0
00013EBE 6400                       		bcc.s	loc_132C0
00013EC0 303C 0000                  		move.w	#0,d0
00013EC4                            
00013EC4                            loc_132C0:
00013EC4 3140 0010                  		move.w	d0,$10(a0)
00013EC8 4E75                       		rts	
00013ECA                            ; ===========================================================================
00013ECA                            
00013ECA                            loc_132C6:
00013ECA 9041                       		sub.w	d1,d0
00013ECC 6500                       		bcs.s	loc_132CE
00013ECE 303C 0000                  		move.w	#0,d0
00013ED2                            
00013ED2                            loc_132CE:
00013ED2 3140 0010                  		move.w	d0,$10(a0)
00013ED6                            
00013ED6                            locret_132D2:
00013ED6 4E75                       		rts	
00013ED8                            ; End of function Sonic_ChgJumpDir
00013ED8                            
00013ED8                            ; ===========================================================================
00013ED8                            ; ---------------------------------------------------------------------------
00013ED8                            ; Unused subroutine to squash Sonic
00013ED8                            ; ---------------------------------------------------------------------------
00013ED8 1028 0026                  		move.b	$26(a0),d0
00013EDC 0600 0020                  		addi.b	#$20,d0
00013EE0 0200 00C0                  		andi.b	#$C0,d0
00013EE4 6600                       		bne.s	locret_13302
00013EE6 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013EEA 4A41                       		tst.w	d1
00013EEC 6A00                       		bpl.s	locret_13302
00013EEE 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013EF4 317C 0000 0010             		move.w	#0,$10(a0)
00013EFA 317C 0000 0012             		move.w	#0,$12(a0)
00013F00 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00013F06                            
00013F06                            locret_13302:
00013F06 4E75                       		rts	
00013F08                            ; ---------------------------------------------------------------------------
00013F08                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00013F08                            ; ---------------------------------------------------------------------------
00013F08                            
00013F08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F08                            
00013F08                            
00013F08                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00013F08 2228 0008                  		move.l	8(a0),d1
00013F0C 3028 0010                  		move.w	$10(a0),d0
00013F10 48C0                       		ext.l	d0
00013F12 E180                       		asl.l	#8,d0
00013F14 D280                       		add.l	d0,d1
00013F16 4841                       		swap	d1
00013F18 3038 F728                  		move.w	($FFFFF728).w,d0
00013F1C 0640 0010                  		addi.w	#$10,d0
00013F20 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013F22 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00013F24 3038 F72A                  		move.w	($FFFFF72A).w,d0
00013F28 0640 0128                  		addi.w	#$128,d0
00013F2C 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013F30 6600                       		bne.s	loc_13332
00013F32 0640 0040                  		addi.w	#$40,d0
00013F36                            
00013F36                            loc_13332:
00013F36 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013F38 6300                       		bls.s	Boundary_Sides	; if yes, branch
00013F3A                            
00013F3A                            loc_13336:
00013F3A 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013F3E 0640 00E0                  		addi.w	#$E0,d0
00013F42 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00013F46 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013F48 4E75                       		rts	
00013F4A                            ; ===========================================================================
00013F4A                            
00013F4A                            Jmp_KillSonic:
00013F4A 4EF9 0000 0000             	       jmp    KillSonic
00013F50                            
00013F50                            Boundary_Bottom:
00013F50 3038 F726                  		move.w	($FFFFF726).w,d0
00013F54 3238 F72E                  		move.w	($FFFFF72E).w,d1
00013F58 B240                       		cmp.w	d0,d1			; screen still scrolling down?
00013F5A 6D00                       		blt.s	Boundary_Bottom_locret	; if so, don't kill Sonic
00013F5C 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w	; is level SBZ2 ?
00013F62 6600 FFE6                  		bne.w	Jmp_KillSonic		; if not, kill Sonic
00013F66 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00013F6C 6500 FFDC                  		bcs.w	Jmp_KillSonic
00013F70 4238 FE30                  		clr.b	($FFFFFE30).w		; clear lamppost counter
00013F74 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w	; restart the level
00013F7A 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w	; set level to SBZ3 (LZ4)
00013F80                            
00013F80                            Boundary_Bottom_locret:
00013F80 4E75                       		rts	
00013F82                            ; ===========================================================================
00013F82                            
00013F82                            
00013F82                            Boundary_Sides:
00013F82 3140 0008                  		move.w	d0,8(a0)
00013F86 317C 0000 000A             		move.w	#0,$A(a0)
00013F8C 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013F92 317C 0000 0014             		move.w	#0,$14(a0)
00013F98 60A0                       		bra.s	loc_13336
00013F9A                            ; End of function Sonic_LevelBound
00013F9A                            
00013F9A                            ; ---------------------------------------------------------------------------
00013F9A                            ; Subroutine allowing Sonic to roll when he's moving
00013F9A                            ; ---------------------------------------------------------------------------
00013F9A                            
00013F9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F9A                            
00013F9A                            
00013F9A                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013F9A 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013F9E 6600                       		bne.s	Obj01_NoRoll
00013FA0 3028 0014                  		move.w	$14(a0),d0
00013FA4 6A00                       		bpl.s	loc_13392
00013FA6 4440                       		neg.w	d0
00013FA8                            
00013FA8                            loc_13392:
00013FA8 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013FAC 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013FAE 1038 F602                  		move.b	($FFFFF602).w,d0
00013FB2 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013FB6 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013FB8 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013FBE 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013FC0                            
00013FC0                            Obj01_NoRoll:
00013FC0 4E75                       		rts	
00013FC2                            ; ===========================================================================
00013FC2                            
00013FC2                            Obj01_ChkRoll:
00013FC2 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013FC8 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013FCA 4E75                       		rts	
00013FCC                            ; ===========================================================================
00013FCC                            
00013FCC                            Obj01_DoRoll:
00013FCC 08E8 0002 0022             		bset	#2,$22(a0)
00013FD2 117C 000E 0016             		move.b	#$E,$16(a0)
00013FD8 117C 0007 0017             		move.b	#7,$17(a0)
00013FDE 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013FE4 5A68 000C                  		addq.w	#5,$C(a0)
00013FE8 303C 00BE                  		move.w	#$BE,d0
00013FEC 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play rolling sound
00013FF2 4A68 0014                  		tst.w	$14(a0)
00013FF6 6600                       		bne.s	locret_133E8
00013FF8 317C 0200 0014             		move.w	#$200,$14(a0)
00013FFE                            
00013FFE                            locret_133E8:
00013FFE 4E75                       		rts	
00014000                            ; End of function Sonic_Roll
00014000                            
00014000                            ; ---------------------------------------------------------------------------
00014000                            ; Subroutine allowing Sonic to jump
00014000                            ; ---------------------------------------------------------------------------
00014000                            
00014000                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014000                            
00014000                            
00014000                            Sonic_Jump:                ; XREF: Obj01_MdNormal; Obj01_MdRoll
00014000 1038 F603                  		move.b	($FFFFF603).w,d0
00014004 0200 0070                          andi.b	#$70,d0		; is A,	B or C 
00014008 6700 0000                          beq.w    locret_1348E        ; if not, branch
0001400C 303C 00A0                          move.w    #$A0,d0    ; set jumping sound
00014010 4EB9 0000 1470                     jsr    (PlaySound).l ; play jumping sound
00014016 7000                               moveq    #0,d0
00014018 1028 0026                          move.b    $26(a0),d0
0001401C 0600 0080                          addi.b    #$80,d0
00014020 4EB9 0000 0000                     jsr    sub_14D48
00014026 0C41 0006                          cmpi.w    #6,d1
0001402A 6D00 0000                          blt.w    locret_1348E
0001402E 343C 0680                          move.w    #$680,d2 ; set normal jump speed
00014032 4A38 FE19                          tst.b    ($FFFFFE19).w    ; is Sonic Super?
00014036 6700                               beq.s    Sonic_JumpContinue2 ; if not, branch
00014038 343C 0880                          move.w    #$880,d2        ; set higher jump speed if super
0001403C                            
0001403C                            Sonic_JumpContinue2:
0001403C 0828 0006 0022                     btst    #6,$22(a0) ; is player underwater?
00014042 6700                               beq.s    loc_1341C ; if not, branch
00014044 343C 0380                          move.w    #$380,d2 ; if yes, decrease his jump speed
00014048 4A38 FE19                          tst.b    ($FFFFFE19).w    ; is Sonic Super?
0001404C 6700                               beq.s    loc_1341C ; if not, branch
0001404E 343C 0530                          move.w    #$530,d2 ; super jump speed
00014052                            
00014052                            loc_1341C:
00014052 7000                       		moveq	#0,d0
00014054 1028 0026                  		move.b	$26(a0),d0
00014058 0400 0040                  		subi.b	#$40,d0
0001405C 4EB9 0000 33D4             		jsr	(CalcSine).l
00014062 C3C2                       		muls.w	d2,d1
00014064 E081                       		asr.l	#8,d1
00014066 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
0001406A C1C2                       		muls.w	d2,d0
0001406C E080                       		asr.l	#8,d0
0001406E D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00014072 08E8 0001 0022             		bset	#1,$22(a0)
00014078 08A8 0005 0022             		bclr	#5,$22(a0)
0001407E 588F                       		addq.l	#4,sp
00014080 117C 0001 003C             		move.b	#1,$3C(a0)
00014086 4228 0038                  		clr.b	$38(a0)
0001408A 303C 00A0                  		move.w	#$A0,d0
0001408E 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play jumping sound
00014094 117C 0013 0016             		move.b	#$13,$16(a0)
0001409A 117C 0009 0017             		move.b	#9,$17(a0)
000140A0 0828 0002 0022             		btst	#2,$22(a0)
000140A6 6600                       		bne.s	loc_13490
000140A8 117C 000E 0016             		move.b	#$E,$16(a0)
000140AE 117C 0007 0017             		move.b	#7,$17(a0)
000140B4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
000140BA 08E8 0002 0022             		bset	#2,$22(a0)
000140C0 5A68 000C                  		addq.w	#5,$C(a0)
000140C4                            
000140C4                            locret_1348E:
000140C4 4E75                       		rts	
000140C6                            ; ===========================================================================
000140C6                            
000140C6                            loc_13490:
000140C6 08E8 0004 0022             		bset	#4,$22(a0)
000140CC 4E75                       		rts	
000140CE                            ; End of function Sonic_Jump
000140CE                            
000140CE                            
000140CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000140CE                            
000140CE                            
000140CE                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
000140CE 4A28 003C                  		tst.b	$3C(a0)
000140D2 6700                       		beq.s	loc_134C4
000140D4 323C FC00                  		move.w	#-$400,d1
000140D8 0828 0006 0022             		btst	#6,$22(a0)
000140DE 6700                       		beq.s	loc_134AE
000140E0 323C FE00                  		move.w	#-$200,d1
000140E4                            
000140E4                            loc_134AE:
000140E4 B268 0012                  		cmp.w	$12(a0),d1
000140E8 6F00                       		ble.s	locret_134C2
000140EA 1038 F602                  		move.b	($FFFFF602).w,d0
000140EE 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
000140F2 6600                       		bne.s	locret_134C2	; if yes, branch
000140F4 3141 0012                  		move.w	d1,$12(a0)
000140F8                            
000140F8                            locret_134C2:
000140F8 4A28 0012                  	tst.b	y_vel(a0)		; is Sonic exactly at the height of his jump?
000140FC 6700                       	beq.s	jmp_Sonic_CheckGoSuper	; if yes, test for turning into Super Sonic	
000140FE 4E75                       		rts	
00014100                            ; ===========================================================================
00014100                            
00014100                            loc_134C4:
00014100 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00014106 6C00                       		bge.s	locret_134D2
00014108 317C F040 0012             		move.w	#-$FC0,$12(a0)
0001410E                            
0001410E                            locret_134D2:
0001410E 4E75                       		rts	
00014110                            ; End of function Sonic_JumpHeight
00014110                            
00014110                            Jmp_Sonic_CheckGoSuper
00014110 4EF9 0000 0000             	jmp Sonic_CheckGoSuper
00014116                            ; ---------------------------------------------------------------------------
00014116                            ; Subroutine to make Sonic perform a spindash
00014116                            ; ---------------------------------------------------------------------------
00014116                             
00014116                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014116                             
00014116                             
00014116                            Sonic_SpinDash:
00014116 4A28 0039                  		tst.b	$39(a0)			; already Spin Dashing?
0001411A 6600                       		bne.s	loc2_1AC8E		; if set, branch
0001411C 0C28 0008 001C             		cmpi.b	#8,$1C(a0)		; is anim duck
00014122 6600                       		bne.s	locret2_1AC8C		; if not, return
00014124 1038 F603                  		move.b	($FFFFF603).w,d0	; read controller
00014128 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C ?
0001412C 6700 0000                  		beq.w	locret2_1AC8C		; if not, return
00014130 117C 001D 001C             		move.b	#$1D,$1C(a0)		; set Spin Dash anim (9 in s2)
00014136 303C 00D1                  		move.w	#$D1,d0			; spin sound ($E0 in s2)
0001413A 4EB9 0000 1476             		jsr	(PlaySound_Special).l	; play spin sound
00014140 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00014142 117C 0001 0039             		move.b	#1,$39(a0)		; set Spin Dash flag
00014148 317C 0000 003A             		move.w	#0,$3A(a0)		; set charge count to 0
0001414E 0C28 000C 0028             		cmpi.b	#$C,$28(a0)		; ??? oxygen remaining?
00014154 11FC 0002 D1DC             		move.b	#2,($FFFFD1DC).w	; Set the Spin Dash dust animation to $2.
0001415A                            						; the smoke/dust object
0001415A                            loc2_1AC84:
0001415A 6100 FDAC                  		bsr.w	Sonic_LevelBound
0001415E 6100 0000                  		bsr.w	Sonic_AnglePos
00014162                            
00014162                            locret2_1AC8C:
00014162 4E75                       		rts	
00014164                            ; ---------------------------------------------------------------------------
00014164                            
00014164                            loc2_1AC8E:
00014164 117C 001D 001C             		move.b	#$1D,$1C(a0)
0001416A 1038 F602                  		move.b	($FFFFF602).w,d0	; read controller
0001416E 0800 0001                  		btst	#1,d0			; check down button
00014172 6600 0000                  		bne.w	loc2_1AD30		; if set, branch
00014176 117C 000E 0016             		move.b	#$E,$16(a0)		; $16(a0) is height/2
0001417C 117C 0007 0017             		move.b	#7,$17(a0)		; $17(a0) is width/2
00014182 117C 0002 001C             		move.b	#2,$1C(a0)		; set animation to roll
00014188 5A68 000C                  		addq.w	#5,$C(a0)		; $C(a0) is Y coordinate
0001418C 117C 0000 0039             		move.b	#0,$39(a0)		; clear Spin Dash flag
00014192 7000                       		moveq	#0,d0
00014194 1028 003A                  		move.b	$3A(a0),d0		; copy charge count
00014198 D040                       		add.w	d0,d0			; double it
0001419A 317B 0000 0014             		move.w	Dash_Speeds(pc,d0.w),$14(a0) ; get normal speed
000141A0 3028 0014                  		move.w	$14(a0),d0		; get inertia
000141A4 0440 0800                  		subi.w	#$800,d0		; subtract $800
000141A8 D040                       		add.w	d0,d0			; double it
000141AA 0240 1F00                  		andi.w	#$1F00,d0		; mask it against $1F00
000141AE 4440                       		neg.w	d0			; negate it
000141B0 0640 2000                  		addi.w	#$2000,d0		; add $2000
000141B4 31C0 C904                  		move.w	d0,($FFFFC904).w	; move to $C904
000141B8 0828 0000 0022             		btst	#0,$22(a0)		; is sonic facing right?
000141BE 6700                       		beq.s	loc2_1ACF4		; if not, branch
000141C0 4468 0014                  		neg.w	$14(a0)			; negate inertia
000141C4                            ; ===========================================================================
000141C4                            jmp_loc2_1AD78:
000141C4 4EF9 0000 0000             	jmp loc2_1AD78
000141CA                            loc2_1ACF4:
000141CA 08E8 0002 0022             		bset	#2,$22(a0)		; set unused (in s1) flag
000141D0 11FC 0000 D1DC             		move.b	#0,($FFFFD1DC).w	; clear Spin Dash dust animation.
000141D6 303C 00BC                  		move.w	#$BC,d0			; spin release sound
000141DA 4EB9 0000 1476             		jsr	(PlaySound_Special).l	; play it!
000141E0 60E2                       		bra.s	jmp_loc2_1AD78
000141E2                            ; ===========================================================================
000141E2                            ;zafast:
000141E2                            ;		move.w	SuperDash_Speeds(pc,d0.w),$14(a0) ; get super speed
000141E2                            ;		move.w	$14(a0),d0		; get inertia
000141E2                            ;		subi.w	#$800,d0		; subtract $800
000141E2                            ;		add.w	d0,d0			; double it
000141E2                            ;		andi.w	#$1F00,d0		; mask it against $1F00
000141E2                            ;		neg.w	d0			; negate it
000141E2                            ;		addi.w	#$2000,d0		; add $2000
000141E2                            ;		move.w	d0,($FFFFC904).w	; move to $C904
000141E2                            ;		btst	#0,$22(a0)		; is sonic facing right?
000141E2                            ;		beq.s	loc2_1ACF4		; if not, branch
000141E2                            ;		neg.w	$14(a0)			; negate inertia
000141E2                            
000141E2                            ; ===========================================================================
000141E2                            Dash_Speeds:
000141E2 0800                       		dc.w  $800		; 0
000141E4 0880                       		dc.w  $880		; 1
000141E6 0900                       		dc.w  $900		; 2
000141E8 0980                       		dc.w  $980		; 3
000141EA 0A00                       		dc.w  $A00		; 4
000141EC 0A80                       		dc.w  $A80		; 5
000141EE 0B00                       		dc.w  $B00		; 6
000141F0 0B80                       		dc.w  $B80		; 7
000141F2 0C00                       		dc.w  $C00		; 8
000141F4                            ;SuperDash_Speeds:
000141F4                            ;		dc.w  $B00		; 0
000141F4                            ;		dc.w  $B80		; 1
000141F4                            ;		dc.w  $C00		; 2
000141F4                            ;		dc.w  $C80		; 3
000141F4                            ;		dc.w  $D00		; 4
000141F4                            ;		dc.w  $D80		; 5
000141F4                            ;		dc.w  $E00		; 6
000141F4                            ;		dc.w  $E80		; 7
000141F4                            ;		dc.w  $F00		; 8		
000141F4                            ; ===========================================================================
000141F4                            
000141F4                            loc2_1AD30:				; If still charging the dash...
000141F4 4A68 003A                  		tst.w	$3A(a0)		; check charge count
000141F8 6700                       		beq.s	loc2_1AD48	; if zero, branch
000141FA 3028 003A                  		move.w	$3A(a0),d0	; otherwise put it in d0
000141FE EA48                       		lsr.w	#5,d0		; shift right 5 (divide it by 32)
00014200 9168 003A                  		sub.w	d0,$3A(a0)	; subtract from charge count
00014204 6400                       		bcc.s	loc2_1AD48	; ??? branch if carry clear
00014206 317C 0000 003A             		move.w	#0,$3A(a0)	; set charge count to 0
0001420C                            
0001420C                            loc2_1AD48:
0001420C 1038 F603                  		move.b	($FFFFF603).w,d0	; read controller
00014210 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C?
00014214 6700 0000                  		beq.w	loc2_1AD78		; if not, branch
00014218 317C 1D00 001C             		move.w	#$1D00,$1C(a0)		; reset spdsh animation
0001421E 303C 00D1                  		move.w	#$D1,d0			; was $E0 in sonic 2
00014222 11FC 0002 D1DC             		move.b	#2,$FFFFD1DC.w	; Set the Spin Dash dust animation to $2.		
00014228 4EB9 0000 1476             		jsr	(PlaySound_Special).l	; play charge sound
0001422E 0668 0200 003A             		addi.w	#$200,$3A(a0)		; increase charge count
00014234 0C68 0800 003A             		cmpi.w	#$800,$3A(a0)		; check if it's maxed
0001423A 6500                       		bcs.s	loc2_1AD78		; if not, then branch
0001423C 317C 0800 003A             		move.w	#$800,$3A(a0)		; reset it to max
00014242                            
00014242                            loc2_1AD78:
00014242 588F                       		addq.l	#4,sp			; increase stack ptr
00014244 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
0001424A 6700                       		beq.s	loc2_1AD8C
0001424C 6400                       		bcc.s	loc2_1AD88
0001424E 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00014252                            
00014252                            loc2_1AD88:
00014252 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00014256                            
00014256                            loc2_1AD8C:
00014256 6100 FCB0                  		bsr.w	Sonic_LevelBound
0001425A 6100 0000                  		bsr.w	Sonic_AnglePos
0001425E                            		;move.w	#$60,($FFFFF73E).w	; reset looking up/down
0001425E 4E75                       		rts
00014260                            ; End of subroutine Sonic_SpinDash
00014260                            
00014260                            SpinDash_dust:
00014260                            Sprite_1DD20:				; DATA XREF: ROM:0001600C?o
00014260 7000                       		moveq	#0,d0
00014262 1028 0024                  		move.b	$24(a0),d0
00014266 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
0001426A 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
0001426E                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001426E 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBA?o h+6DBC?o ...
00014270 0000                       		dc loc_1DD90-off_1DD2E; 1
00014272 0000                       		dc loc_1DE46-off_1DD2E; 2
00014274 0000                       		dc loc_1DE4A-off_1DD2E; 3
00014276                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014276                            
00014276                            loc_1DD36:				; DATA XREF: h+6DBA?o
00014276 5428 0024                  		addq.b	#2,$24(a0)
0001427A 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
00014282 0028 0004 0001             		or.b	#4,1(a0)
00014288 117C 0001 0018             		move.b	#1,$18(a0)
0001428E 117C 0010 0019             		move.b	#$10,$19(a0)
00014294 317C 07A0 0002             		move	#$7A0,2(a0)
0001429A 317C D000 003E             		move	#-$3000,$3E(a0)
000142A0 317C F400 003C             		move	#$F400,$3C(a0)
000142A6 B0FC D1C0                  		cmp	#-$2E40,a0
000142AA 6700                       		beq.s	loc_1DD8C
000142AC 117C 0001 0034             		move.b	#1,$34(a0)
000142B2                            ;		cmp	#2,($FFFFFF70).w
000142B2                            ;		beq.s	loc_1DD8C
000142B2                            ;		move	#$48C,2(a0)
000142B2                            ;		move	#-$4FC0,$3E(a0)
000142B2                            ;		move	#-$6E80,$3C(a0)
000142B2                            
000142B2                            loc_1DD8C:				; CODE XREF: h+6DF6?j h+6E04?j
000142B2                            ;		bsr.w	sub_16D6E
000142B2                            
000142B2                            loc_1DD90:				; DATA XREF: h+6DBA?o
000142B2 3468 003E                  		movea.w	$3E(a0),a2
000142B6 7000                       		moveq	#0,d0
000142B8 1028 001C                  		move.b	$1C(a0),d0
000142BC D040                       		add	d0,d0
000142BE 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
000142C2 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
000142C6                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000142C6 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30?o h+6E32?o ...
000142C8 0000                       		dc loc_1DDAC-off_1DDA4; 1
000142CA 0000                       		dc loc_1DDCC-off_1DDA4; 2
000142CC 0000                       		dc loc_1DE20-off_1DDA4; 3
000142CE                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000142CE                            
000142CE                            loc_1DDAC:				; DATA XREF: h+6E30?o
000142CE 3178 F646 000C             		move	($FFFFF646).w,$C(a0)
000142D4 4A28 001D                  		tst.b	$1D(a0)
000142D8 6600                       		bne.s	loc_1DE28
000142DA 316A 0008 0008             		move	8(a2),8(a0)
000142E0 117C 0000 0022             		move.b	#0,$22(a0)
000142E6 0268 7FFF 0002             		and	#$7FFF,2(a0)
000142EC 6000                       		bra.s	loc_1DE28
000142EE                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000142EE                            
000142EE                            loc_1DDCC:				; DATA XREF: h+6E30?o
000142EE                            ;		cmp.b	#$C,$28(a2)
000142EE                            ;		bcs.s	loc_1DE3E
000142EE 0C2A 0004 0024             		cmp.b	#4,$24(a2)
000142F4 6400                       		bcc.s	loc_1DE3E
000142F6 4A2A 0039                  		tst.b	$39(a2)
000142FA 6700                       		beq.s	loc_1DE3E
000142FC 316A 0008 0008             		move	8(a2),8(a0)
00014302 316A 000C 000C             		move	$C(a2),$C(a0)
00014308 116A 0022 0022             		move.b	$22(a2),$22(a0)
0001430E 0228 0001 0022             		and.b	#1,$22(a0)
00014314 4A28 0034                  		tst.b	$34(a0)
00014318 6700                       		beq.s	loc_1DE06
0001431A 5968 000C                  		sub	#4,$C(a0)
0001431E                            
0001431E                            loc_1DE06:				; CODE XREF: h+6E8A?j
0001431E 4A28 001D                  		tst.b	$1D(a0)
00014322 6600                       		bne.s	loc_1DE28
00014324 0268 7FFF 0002             		and	#$7FFF,2(a0)
0001432A 4A6A 0002                  		tst	2(a2)
0001432E 6A00                       		bpl.s	loc_1DE28
00014330 0068 8000 0002             		or	#-$8000,2(a0)
00014336                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014336                            
00014336                            loc_1DE20:				; DATA XREF: h+6E30?o
00014336                            loc_1DE28:				; CODE XREF: h+6E42?j h+6E56?j ...
00014336 43F9 0000 0000             		lea	(off_1DF38).l,a1
0001433C 4EB9 0000 B222             		jsr	AnimateSprite
00014342 6100 0000                  		bsr.w	loc_1DEE4
00014346 4EFA 9DC8                  		jmp	DisplaySprite
0001434A                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001434A                            
0001434A                            loc_1DE3E:				; CODE XREF: h+6E5E?j h+6E66?j ...
0001434A 117C 0000 001C             		move.b	#0,$1C(a0)
00014350 4E75                       		rts	
00014352                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014352                            
00014352                            loc_1DE46:				; DATA XREF: h+6DBA?o
00014352 6000 9DF8                  		bra.w	DeleteObject
00014356                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014356                            
00014356                            
00014356                            
00014356                            loc_1DE4A:
00014356 3468 003E                  	movea.w	$3E(a0),a2
0001435A 7210                       	moveq	#$10,d1
0001435C 0C2A 000D 001C             	cmp.b	#$D,$1C(a2)
00014362 6700                       	beq.s	loc_1DE64
00014364 7206                       	moveq	#$6,d1
00014366 0C2A 0003 0021             	cmp.b	#$3,$21(a2)
0001436C 6700                       	beq.s	loc_1DE64
0001436E 117C 0002 0024             	move.b	#2,$24(a0)
00014374 117C 0000 0032             	move.b	#0,$32(a0)
0001437A 4E75                       	rts
0001437C                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001437C                            
0001437C                            loc_1DE64:				; CODE XREF: h+6EE0?j
0001437C 5328 0032                  		subq.b	#1,$32(a0)
00014380 6A00                       		bpl.s	loc_1DEE0
00014382 117C 0003 0032             		move.b	#3,$32(a0)
00014388 4EBA A21C                  		jsr	SingleObjLoad
0001438C 6600                       		bne.s	loc_1DEE0
0001438E 1290                       		move.b	0(a0),0(a1)
00014390 336A 0008 0008             		move	8(a2),8(a1)
00014396 336A 000C 000C             		move	$C(a2),$C(a1)
0001439C 4A28 0034                  		tst.b	$34(a0)
000143A0 6700                       		beq.s	loc_1DE9A
000143A2 5941                       		sub	#4,d1
000143A4                            
000143A4                            loc_1DE9A:				; CODE XREF: h+6F1E?j
000143A4 D369 000C                  		add	d1,$C(a1)
000143A8 137C 0000 0022             		move.b	#0,$22(a1)
000143AE 137C 0003 001C             		move.b	#3,$1C(a1)
000143B4 5429 0024                  		addq.b	#2,$24(a1)
000143B8 2368 0004 0004             		move.l	4(a0),4(a1)
000143BE 1368 0001 0001             		move.b	1(a0),1(a1)
000143C4 137C 0001 0018             		move.b	#1,$18(a1)
000143CA 137C 0004 0019             		move.b	#4,$19(a1)
000143D0 3368 0002 0002             		move	2(a0),2(a1)
000143D6 3368 003E 003E             		move	$3E(a0),$3E(a1)
000143DC 0269 7FFF 0002             		and	#$7FFF,2(a1)
000143E2 4A6A 0002                  		tst	2(a2)
000143E6 6A00                       		bpl.s	loc_1DEE0
000143E8 0069 8000 0002             		or	#-$8000,2(a1)
000143EE                            
000143EE                            loc_1DEE0:				; CODE XREF: h+6EF4?j h+6F00?j ...
000143EE 6100                       		bsr.s	loc_1DEE4
000143F0 4E75                       		rts	
000143F2                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000143F2                            
000143F2                            loc_1DEE4:				; CODE XREF: h+6EC0?p h+6F6C?p
000143F2 7000                       		moveq	#0,d0
000143F4 1028 001A                  		move.b	$1A(a0),d0
000143F8 B028 0030                  		cmp.b	$30(a0),d0
000143FC 6700 0000                  		beq.w	locret_1DF36
00014400 1140 0030                  		move.b	d0,$30(a0)
00014404 45F9 0000 0000             		lea	(off_1E074).l,a2
0001440A D040                       		add	d0,d0
0001440C D4F2 0000                  		add	(a2,d0.w),a2
00014410 3A1A                       		move	(a2)+,d5
00014412 5345                       		subq	#1,d5
00014414 6B00 0000                  		bmi.w	locret_1DF36
00014418 3828 003C                  		move $3C(a0),d4
0001441C                            
0001441C                            loc_1DF0A:				; CODE XREF: h+6FBE?j
0001441C 7200                       		moveq	#0,d1
0001441E 321A                       		move	(a2)+,d1
00014420 3601                       		move	d1,d3
00014422 E04B                       		lsr.w	#8,d3
00014424 0243 00F0                  		and	#$F0,d3	; 'ð'
00014428 0643 0010                  		add	#$10,d3
0001442C 0241 0FFF                  		and	#$FFF,d1
00014430 EB89                       		lsl.l	#5,d1
00014432 0681 0000 0000             		add.l	#Art_Dust,d1
00014438 3404                       		move	d4,d2
0001443A D843                       		add	d3,d4
0001443C D843                       		add	d3,d4
0001443E 4EB9 0000 151A             		jsr	(QueueDMATransfer).l
00014444 51CD FFD6                  		dbf	d5,loc_1DF0A
00014448 4E75                           rts
0001444A                            
0001444A                            locret_1DF36:				; CODE XREF: h+6F7A?j h+6F90?j
0001444A 4E75                       		rts	
0001444C                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001444C 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4?o h+6FC4?o ...
0001444E 0000                       		dc byte_1DF43-off_1DF38; 1
00014450 0000                       		dc byte_1DF4F-off_1DF38; 2
00014452 0000                       		dc byte_1DF58-off_1DF38; 3
00014454 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4?o
00014457 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4?o
00014463 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4?o
0001446C 0311 1213 14FC             byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC; 0	; DATA XREF: h+6FC4?o
00014472                            
00014472                            return_1ABA4:
00014472 4E75                       	rts
00014474                            Sonic_CheckGoSuper:
00014474                            	include "_inc\SuperSonic.asm"
00014474                            ; ---------------------------------------------------------------------------
00014474                            ; Subroutine called at the peak of a jump that transforms Sonic into Super Sonic
00014474                            ; if he has enough rings and emeralds
00014474                            ; ---------------------------------------------------------------------------
00014474                            
00014474                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00014474                            ; loc_1AB38: test_set_SS:
00014474 4A38 FE19                  	tst.b	(Super_Sonic_flag).w	; is Sonic already Super?
00014478 66F8                       	bne.s	return_1ABA4		; if yes, branch
0001447A                            ;	cmpi.b	#6,(Emerald_count).w	; does Sonic have exactly 7 emeralds?
0001447A                            ;	bne.s	return_1ABA4		; if not, branch
0001447A 0C78 0032 FE20             	cmpi.w	#50,(Ring_count).w	; does Sonic have at least 50 rings?
00014480 65F0                       	bcs.s	return_1ABA4		; if not, branch
00014482                            
00014482 11FC 0001 F65F             	move.b	#1,(Super_Sonic_palette).w
00014488 11FC 000F F65E             	move.b	#$F,(Palette_frame_count).w
0001448E 11FC 0001 FE19             	move.b	#1,(Super_Sonic_flag).w
00014494 117C 0081 002A             	move.b	#$81,obj_control(a0)
0001449A 117C 001F 001C             	move.b	#$1F,anim(a0)			; use transformation animation
000144A0                            ;	move.b	#$7E,(Object_RAM+$2040).w	; Obj7E is the ending sonic which is why it's commented out
000144A0 31FC 0A00 F760             	move.w	#$A00,(Sonic_top_speed).w
000144A6 31FC 0030 F762             	move.w	#$30,(Sonic_acceleration).w
000144AC 31FC 0100 F764             	move.w	#$100,(Sonic_deceleration).w
000144B2 317C 0000 0032             	move.w	#0,invincibility_time(a0)
000144B8 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
000144BE 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
000144C4 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
000144CA 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
000144D0 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
000144D6 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
000144DC 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
000144E2 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w	
000144E8 303C 00C3                          move.w	#$C3,d0         ; 
000144EC 4EB9 0000 1470             	jsr	(PlaySound).l	; Play special ring sound effect.
000144F2 303C 009F                  	move.w	#$9F,d0         
000144F6 4EF9 0000 1476             	jmp	(PlaySound_Special).l	; load the invincibility song and return also playmusic doesn't exist
000144FC                            
000144FC                            ; End of subroutine Sonic_CheckGoSuper
000144FC                            
000144FC                            ; ---------------------------------------------------------------------------
000144FC                            ; Subroutine doing the extra logic for Super Sonic
000144FC                            ; ---------------------------------------------------------------------------
000144FC                            
000144FC                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000144FC                            rts:
000144FC 4E75                       	rts
000144FE                            ; loc_1ABA6:
000144FE                            Sonic_Super:
000144FE 4A38 FE19                  	tst.b	(Super_Sonic_flag).w	; Ignore all this code if not Super Sonic
00014502 6700 0000                  	beq.w	return_1AC3C
00014506 4A38 FE1E                  	tst.b	(Update_HUD_timer).w
0001450A 6700                       	beq.s	Sonic_RevertToNormal ; ?
0001450C 5378 F670                  	subq.w	#1,(Super_Sonic_frame_count).w
00014510 6A00 0000                  	bpl.w	return_1AC3C
00014514 31FC 003C F670             	move.w	#60,(Super_Sonic_frame_count).w	; Reset frame counter to 60
0001451A 4A78 FE20                  	tst.w	(Ring_count).w
0001451E 6700                       	beq.s	Sonic_RevertToNormal
00014520 0038 0001 FE1D             	ori.b	#1,(Update_HUD_rings).w
00014526 0C78 0001 FE20             	cmpi.w	#1,(Ring_count).w
0001452C 6700                       	beq.s	@update
0001452E 0C78 000A FE20             	cmpi.w	#10,(Ring_count).w
00014534 6700                       	beq.s	@update
00014536 0C78 0064 FE20             	cmpi.w	#100,(Ring_count).w
0001453C 6600                       	bne.s	@update2
0001453E                            @update
0001453E 0038 0080 FE1D             	ori.b	#$80,(Update_HUD_rings).w
00014544                            @update2
00014544 5378 FE20                  	subq.w	#1,(Ring_count).w
00014548 66B2                       	bne.s	rts
0001454A                            ; loc_1ABF2:
0001454A                            Sonic_RevertToNormal:
0001454A 11FC 0002 F65F             	move.b	#2,(Super_Sonic_palette).w	; Remove rotating palette
00014550 31FC 0028 F65C             	move.w	#$28,($FFFFF65C).w	; Unknown
00014556 11FC 0000 FE19             	move.b	#0,(Super_Sonic_flag).w
0001455C 117C 0001 001D             	move.b	#1,next_anim(a0)	; Change animation back to normal ?
00014562 317C 0001 0032             	move.w	#1,invincibility_time(a0)	; Remove invincibility
00014568 31FC 0600 F760             	move.w	#$600,(Sonic_top_speed).w
0001456E 31FC 000C F762             	move.w	#$C,(Sonic_acceleration).w
00014574 31FC 0080 F764             	move.w	#$80,(Sonic_deceleration).w
0001457A 0828 0006 0022             	btst	#6,status(a0)	; Check if underwater, return if not
00014580 6700                       	beq.s	return_1AC3C
00014582 31FC 0300 F760             	move.w	#$300,(Sonic_top_speed).w
00014588 31FC 0006 F762             	move.w	#6,(Sonic_acceleration).w
0001458E 31FC 0040 F764             	move.w	#$40,(Sonic_deceleration).w
00014594                            
00014594                            return_1AC3C:
00014594 4E75                       	rts
00014596                            ; End of subroutine Sonic_Super
00014596                            ; End of subroutine Sonic_Super
00014596                            ; -------------------------------------------------------------------------------
00014596                            ; Unknown Sprite Mappings
00014596                            ; -------------------------------------------------------------------------------
00014596                            MapUnc_1DF5E:
00014596 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
00014598 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
0001459A 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
0001459C 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
0001459E 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
000145A0 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
000145A2 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
000145A4 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
000145A6 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
000145A8 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
000145AA 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
000145AC 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
000145AE 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
000145B0 0000                       	dc word_1E004-MapUnc_1DF5E; 13
000145B2 0000                       	dc word_1E016-MapUnc_1DF5E; 14
000145B4 0000                       	dc word_1E028-MapUnc_1DF5E; 15
000145B6 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
000145B8 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
000145BA 0000                       	dc word_1E056-MapUnc_1DF5E; 18
000145BC 0000                       	dc word_1E060-MapUnc_1DF5E; 19
000145BE 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
000145C0 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
000145C2 00                         word_1DF8A:	dc.b 0
000145C3 01                         word_1DF8C:	dc.b 1
000145C4 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000145C9 01                         word_1DF96:	dc.b 1
000145CA E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000145CF 01                         word_1DFA0:	dc.b 1
000145D0 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000145D5 01                         word_1DFAA:	dc.b 1
000145D6 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000145DB 01                         word_1DFB4:	dc.b 1
000145DC E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000145E1 01                         word_1DFBE:	dc.b 1
000145E2 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000145E7 01                         word_1DFC8:	dc.b 1
000145E8 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000145ED 01                         word_1DFD2:	dc.b 1
000145EE F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000145F3 01                         word_1DFDC:	dc.b 1
000145F4 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000145F9 01                         word_1DFE6:	dc.b 1
000145FA 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
000145FF 01                         word_1DFF0:	dc.b 1
00014600 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00014605 01                         word_1DFFA:	dc.b 1
00014606 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
0001460B 02                         word_1E004:	dc.b 2
0001460C F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
00014611 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
00014616 02                         word_1E016:	dc.b 2
00014617 F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
0001461C 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
00014621 02                         word_1E028:	dc.b 2
00014622 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00014627 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
0001462C 02                         word_1E03A:	dc.b 2
0001462D F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00014632 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00014637 01                         word_1E04C:	dc.b 1
00014638 F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
0001463D 01                         word_1E056:	dc.b 1
0001463E F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
00014643 01                         word_1E060:	dc.b 1
00014644 F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
00014649 01                         word_1E06A:	dc.b 1
0001464A F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
0001464F 00                         	dc.b 0
00014650 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
00014652 0000                       	dc word_1E0A2-off_1E074; 1
00014654 0000                       	dc word_1E0A6-off_1E074; 2
00014656 0000                       	dc word_1E0AA-off_1E074; 3
00014658 0000                       	dc word_1E0AE-off_1E074; 4
0001465A 0000                       	dc word_1E0B2-off_1E074; 5
0001465C 0000                       	dc word_1E0B6-off_1E074; 6
0001465E 0000                       	dc word_1E0BA-off_1E074; 7
00014660 0000                       	dc word_1E0BE-off_1E074; 8
00014662 0000                       	dc word_1E0C2-off_1E074; 9
00014664 0000                       	dc word_1E0C6-off_1E074; 10
00014666 0000                       	dc word_1E0CA-off_1E074; 11
00014668 0000                       	dc word_1E0CE-off_1E074; 12
0001466A 0000                       	dc word_1E0D2-off_1E074; 13
0001466C 0000                       	dc word_1E0D8-off_1E074; 14
0001466E 0000                       	dc word_1E0DE-off_1E074; 15
00014670 0000                       	dc word_1E0E4-off_1E074; 16
00014672 0000                       	dc word_1E0EA-off_1E074; 17
00014674 0000                       	dc word_1E0EA-off_1E074; 18
00014676 0000                       	dc word_1E0EA-off_1E074; 19
00014678 0000                       	dc word_1E0EA-off_1E074; 20
0001467A 0000                       	dc word_1E0EC-off_1E074; 21
0001467C 0000                       word_1E0A0:	dc 0
0001467E 0001                       word_1E0A2:	dc 1
00014680 7000                       	dc $7000
00014682 0001                       word_1E0A6:	dc 1
00014684 F008                       	dc $F008
00014686 0001                       word_1E0AA:	dc 1
00014688 F018                       	dc $F018
0001468A 0001                       word_1E0AE:	dc 1
0001468C F028                       	dc $F028
0001468E 0001                       word_1E0B2:	dc 1
00014690 F038                       	dc $F038
00014692 0001                       word_1E0B6:	dc 1
00014694 F048                       	dc $F048
00014696 0001                       word_1E0BA:	dc 1
00014698 7058                       	dc $7058
0001469A 0001                       word_1E0BE:	dc 1
0001469C 7060                       	dc $7060
0001469E 0001                       word_1E0C2:	dc 1
000146A0 7068                       	dc $7068
000146A2 0001                       word_1E0C6:	dc 1
000146A4 7070                       	dc $7070
000146A6 0001                       word_1E0CA:	dc 1
000146A8 7078                       	dc $7078
000146AA 0001                       word_1E0CE:	dc 1
000146AC 7080                       	dc $7080
000146AE 0002                       word_1E0D2:	dc 2
000146B0 1088                       	dc $1088
000146B2 708A                       	dc $708A
000146B4 0002                       word_1E0D8:	dc 2
000146B6 3092                       	dc $3092
000146B8 7096                       	dc $7096
000146BA 0002                       word_1E0DE:	dc 2
000146BC 509E                       	dc $509E
000146BE 70A4                       	dc $70A4
000146C0 0002                       word_1E0E4:	dc 2
000146C2 50AC                       	dc $50AC
000146C4 70B2                       	dc $70B2
000146C6 0000                       word_1E0EA:	dc 0
000146C8 0001                       word_1E0EC:	dc 1
000146CA F0BA                       	dc $F0BA
000146CC                            	even
000146CC                            
000146CC                            ; ---------------------------------------------------------------------------
000146CC                            ; Subroutine to	slow Sonic walking up a	slope
000146CC                            ; ---------------------------------------------------------------------------
000146CC                            
000146CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000146CC                            
000146CC                            
000146CC                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
000146CC 1028 0026                  		move.b	$26(a0),d0
000146D0 0600 0060                  		addi.b	#$60,d0
000146D4 0C00 00C0                  		cmpi.b	#$C0,d0
000146D8 6400                       		bcc.s	locret_13508
000146DA 1028 0026                  		move.b	$26(a0),d0
000146DE 4EB9 0000 33D4             		jsr	(CalcSine).l
000146E4 C1FC 0020                  		muls.w	#$20,d0
000146E8 E080                       		asr.l	#8,d0
000146EA 4A68 0014                  		tst.w	$14(a0)
000146EE 6700                       		beq.s	locret_13508
000146F0 6B00                       		bmi.s	loc_13504
000146F2 4A40                       		tst.w	d0
000146F4 6700                       		beq.s	locret_13502
000146F6 D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
000146FA                            
000146FA                            locret_13502:
000146FA 4E75                       		rts	
000146FC                            ; ===========================================================================
000146FC                            
000146FC                            loc_13504:
000146FC D168 0014                  		add.w	d0,$14(a0)
00014700                            
00014700                            locret_13508:
00014700 4E75                       		rts	
00014702                            ; End of function Sonic_SlopeResist
00014702                            
00014702                            ; ---------------------------------------------------------------------------
00014702                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00014702                            ; ---------------------------------------------------------------------------
00014702                            
00014702                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014702                            
00014702                            
00014702                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00014702 1028 0026                  		move.b	$26(a0),d0
00014706 0600 0060                  		addi.b	#$60,d0
0001470A 0C00 00C0                  		cmpi.b	#-$40,d0
0001470E 6400                       		bcc.s	locret_13544
00014710 1028 0026                  		move.b	$26(a0),d0
00014714 4EB9 0000 33D4             		jsr	(CalcSine).l
0001471A C1FC 0050                  		muls.w	#$50,d0
0001471E E080                       		asr.l	#8,d0
00014720 4A68 0014                  		tst.w	$14(a0)
00014724 6B00                       		bmi.s	loc_1353A
00014726 4A40                       		tst.w	d0
00014728 6A00                       		bpl.s	loc_13534
0001472A E480                       		asr.l	#2,d0
0001472C                            
0001472C                            loc_13534:
0001472C D168 0014                  		add.w	d0,$14(a0)
00014730 4E75                       		rts	
00014732                            ; ===========================================================================
00014732                            
00014732                            loc_1353A:
00014732 4A40                       		tst.w	d0
00014734 6B00                       		bmi.s	loc_13540
00014736 E480                       		asr.l	#2,d0
00014738                            
00014738                            loc_13540:
00014738 D168 0014                  		add.w	d0,$14(a0)
0001473C                            
0001473C                            locret_13544:
0001473C 4E75                       		rts	
0001473E                            ; End of function Sonic_RollRepel
0001473E                            
0001473E                            ; ---------------------------------------------------------------------------
0001473E                            ; Subroutine to	push Sonic down	a slope
0001473E                            ; ---------------------------------------------------------------------------
0001473E                            
0001473E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001473E                            
0001473E                            
0001473E                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
0001473E 4E71                       		nop	
00014740 4A28 0038                  		tst.b	$38(a0)
00014744 6600                       		bne.s	locret_13580
00014746 4A68 003E                  		tst.w	$3E(a0)
0001474A 6600                       		bne.s	loc_13582
0001474C 1028 0026                  		move.b	$26(a0),d0
00014750 0600 0020                  		addi.b	#$20,d0
00014754 0200 00C0                  		andi.b	#$C0,d0
00014758 6700                       		beq.s	locret_13580
0001475A 3028 0014                  		move.w	$14(a0),d0
0001475E 6A00                       		bpl.s	loc_1356A
00014760 4440                       		neg.w	d0
00014762                            
00014762                            loc_1356A:
00014762 0C40 0280                  		cmpi.w	#$280,d0
00014766 6400                       		bcc.s	locret_13580
00014768 4268 0014                  		clr.w	$14(a0)
0001476C 08E8 0001 0022             		bset	#1,$22(a0)
00014772 317C 001E 003E             		move.w	#$1E,$3E(a0)
00014778                            
00014778                            locret_13580:
00014778 4E75                       		rts	
0001477A                            ; ===========================================================================
0001477A                            
0001477A                            loc_13582:
0001477A 5368 003E                  		subq.w	#1,$3E(a0)
0001477E 4E75                       		rts	
00014780                            ; End of function Sonic_SlopeRepel
00014780                            
00014780                            ; ---------------------------------------------------------------------------
00014780                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00014780                            ; ---------------------------------------------------------------------------
00014780                            
00014780                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014780                            
00014780                            
00014780                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00014780 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00014784 6700                       		beq.s	locret_135A2	; if already 0,	branch
00014786 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00014788                            
00014788 5400                       		addq.b	#2,d0		; increase angle
0001478A 6400                       		bcc.s	loc_13596
0001478C 7000                       		moveq	#0,d0
0001478E                            
0001478E                            loc_13596:
0001478E 6000                       		bra.s	loc_1359E
00014790                            ; ===========================================================================
00014790                            
00014790                            loc_13598:
00014790 5500                       		subq.b	#2,d0		; decrease angle
00014792 6400                       		bcc.s	loc_1359E
00014794 7000                       		moveq	#0,d0
00014796                            
00014796                            loc_1359E:
00014796 1140 0026                  		move.b	d0,$26(a0)
0001479A                            
0001479A                            locret_135A2:
0001479A 4E75                       		rts	
0001479C                            ; End of function Sonic_JumpAngle
0001479C                            
0001479C                            ; ---------------------------------------------------------------------------
0001479C                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
0001479C                            ; ---------------------------------------------------------------------------
0001479C                            
0001479C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001479C                            
0001479C                            
0001479C                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
0001479C 3228 0010                  		move.w	$10(a0),d1
000147A0 3428 0012                  		move.w	$12(a0),d2
000147A4 4EB9 0000 36A2             		jsr	(CalcAngle).l
000147AA 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
000147AE 0400 0020                  		subi.b	#$20,d0
000147B2 11C0 FFED                  		move.b	d0,($FFFFFFED).w
000147B6 0200 00C0                  		andi.b	#$C0,d0
000147BA 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
000147BE 0C00 0040                  		cmpi.b	#$40,d0
000147C2 6700 0000                  		beq.w	loc_13680
000147C6 0C00 0080                  		cmpi.b	#$80,d0
000147CA 6700 0000                  		beq.w	loc_136E2
000147CE 0C00 00C0                  		cmpi.b	#-$40,d0
000147D2 6700 0000                  		beq.w	loc_1373E
000147D6 6100 0000                  		bsr.w	Sonic_HitWall
000147DA 4A41                       		tst.w	d1
000147DC 6A00                       		bpl.s	loc_135F0
000147DE 9368 0008                  		sub.w	d1,8(a0)
000147E2 317C 0000 0010             		move.w	#0,$10(a0)
000147E8                            
000147E8                            loc_135F0:
000147E8 6100 0000                  		bsr.w	sub_14EB4
000147EC 4A41                       		tst.w	d1
000147EE 6A00                       		bpl.s	loc_13602
000147F0 D368 0008                  		add.w	d1,8(a0)
000147F4 317C 0000 0010             		move.w	#0,$10(a0)
000147FA                            
000147FA                            loc_13602:
000147FA 6100 0000                  		bsr.w	Sonic_HitFloor
000147FE 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00014802 4A41                       		tst.w	d1
00014804 6A00                       		bpl.s	locret_1367E
00014806 1428 0012                  		move.b	$12(a0),d2
0001480A 5002                       		addq.b	#8,d2
0001480C 4402                       		neg.b	d2
0001480E B202                       		cmp.b	d2,d1
00014810 6C00                       		bge.s	loc_1361E
00014812 B002                       		cmp.b	d2,d0
00014814 6D00                       		blt.s	locret_1367E
00014816                            
00014816                            loc_1361E:
00014816 D368 000C                  		add.w	d1,$C(a0)
0001481A 1143 0026                  		move.b	d3,$26(a0)
0001481E 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014822 117C 0000 001C             		move.b	#0,$1C(a0)
00014828 1003                       		move.b	d3,d0
0001482A 0600 0020                  		addi.b	#$20,d0
0001482E 0200 0040                  		andi.b	#$40,d0
00014832 6600                       		bne.s	loc_1365C
00014834 1003                       		move.b	d3,d0
00014836 0600 0010                  		addi.b	#$10,d0
0001483A 0200 0020                  		andi.b	#$20,d0
0001483E 6700                       		beq.s	loc_1364E
00014840 E0E8 0012                  		asr	$12(a0)
00014844 6000                       		bra.s	loc_13670
00014846                            ; ===========================================================================
00014846                            
00014846                            loc_1364E:
00014846 317C 0000 0012             		move.w	#0,$12(a0)
0001484C 3168 0010 0014             		move.w	$10(a0),$14(a0)
00014852 4E75                       		rts	
00014854                            ; ===========================================================================
00014854                            
00014854                            loc_1365C:
00014854 317C 0000 0010             		move.w	#0,$10(a0)
0001485A 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00014860 6F00                       		ble.s	loc_13670
00014862 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00014868                            
00014868                            loc_13670:
00014868 3168 0012 0014             		move.w	$12(a0),$14(a0)
0001486E 4A03                       		tst.b	d3
00014870 6A00                       		bpl.s	locret_1367E
00014872 4468 0014                  		neg.w	$14(a0)
00014876                            
00014876                            locret_1367E:
00014876 4E75                       		rts	
00014878                            ; ===========================================================================
00014878                            
00014878                            loc_13680:
00014878 6100 0000                  		bsr.w	Sonic_HitWall
0001487C 4A41                       		tst.w	d1
0001487E 6A00                       		bpl.s	loc_1369A
00014880 9368 0008                  		sub.w	d1,8(a0)
00014884 317C 0000 0010             		move.w	#0,$10(a0)
0001488A 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014890 4E75                       		rts	
00014892                            ; ===========================================================================
00014892                            
00014892                            loc_1369A:
00014892 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014896 4A41                       		tst.w	d1
00014898 6A00                       		bpl.s	loc_136B4
0001489A 9368 000C                  		sub.w	d1,$C(a0)
0001489E 4A68 0012                  		tst.w	$12(a0)
000148A2 6A00                       		bpl.s	locret_136B2
000148A4 317C 0000 0012             		move.w	#0,$12(a0)
000148AA                            
000148AA                            locret_136B2:
000148AA 4E75                       		rts	
000148AC                            ; ===========================================================================
000148AC                            
000148AC                            loc_136B4:
000148AC 4A68 0012                  		tst.w	$12(a0)
000148B0 6B00                       		bmi.s	locret_136E0
000148B2 6100 0000                  		bsr.w	Sonic_HitFloor
000148B6 4A41                       		tst.w	d1
000148B8 6A00                       		bpl.s	locret_136E0
000148BA D368 000C                  		add.w	d1,$C(a0)
000148BE 1143 0026                  		move.b	d3,$26(a0)
000148C2 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000148C6 117C 0000 001C             		move.b	#0,$1C(a0)
000148CC 317C 0000 0012             		move.w	#0,$12(a0)
000148D2 3168 0010 0014             		move.w	$10(a0),$14(a0)
000148D8                            
000148D8                            locret_136E0:
000148D8 4E75                       		rts	
000148DA                            ; ===========================================================================
000148DA                            
000148DA                            loc_136E2:
000148DA 6100 0000                  		bsr.w	Sonic_HitWall
000148DE 4A41                       		tst.w	d1
000148E0 6A00                       		bpl.s	loc_136F4
000148E2 9368 0008                  		sub.w	d1,8(a0)
000148E6 317C 0000 0010             		move.w	#0,$10(a0)
000148EC                            
000148EC                            loc_136F4:
000148EC 6100 0000                  		bsr.w	sub_14EB4
000148F0 4A41                       		tst.w	d1
000148F2 6A00                       		bpl.s	loc_13706
000148F4 D368 0008                  		add.w	d1,8(a0)
000148F8 317C 0000 0010             		move.w	#0,$10(a0)
000148FE                            
000148FE                            loc_13706:
000148FE 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014902 4A41                       		tst.w	d1
00014904 6A00                       		bpl.s	locret_1373C
00014906 9368 000C                  		sub.w	d1,$C(a0)
0001490A 1003                       		move.b	d3,d0
0001490C 0600 0020                  		addi.b	#$20,d0
00014910 0200 0040                  		andi.b	#$40,d0
00014914 6600                       		bne.s	loc_13726
00014916 317C 0000 0012             		move.w	#0,$12(a0)
0001491C 4E75                       		rts	
0001491E                            ; ===========================================================================
0001491E                            
0001491E                            loc_13726:
0001491E 1143 0026                  		move.b	d3,$26(a0)
00014922 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014926 3168 0012 0014             		move.w	$12(a0),$14(a0)
0001492C 4A03                       		tst.b	d3
0001492E 6A00                       		bpl.s	locret_1373C
00014930 4468 0014                  		neg.w	$14(a0)
00014934                            
00014934                            locret_1373C:
00014934 4E75                       		rts	
00014936                            ; ===========================================================================
00014936                            
00014936                            loc_1373E:
00014936 6100 0000                  		bsr.w	sub_14EB4
0001493A 4A41                       		tst.w	d1
0001493C 6A00                       		bpl.s	loc_13758
0001493E D368 0008                  		add.w	d1,8(a0)
00014942 317C 0000 0010             		move.w	#0,$10(a0)
00014948 3168 0012 0014             		move.w	$12(a0),$14(a0)
0001494E 4E75                       		rts	
00014950                            ; ===========================================================================
00014950                            
00014950                            loc_13758:
00014950 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014954 4A41                       		tst.w	d1
00014956 6A00                       		bpl.s	loc_13772
00014958 9368 000C                  		sub.w	d1,$C(a0)
0001495C 4A68 0012                  		tst.w	$12(a0)
00014960 6A00                       		bpl.s	locret_13770
00014962 317C 0000 0012             		move.w	#0,$12(a0)
00014968                            
00014968                            locret_13770:
00014968 4E75                       		rts	
0001496A                            ; ===========================================================================
0001496A                            
0001496A                            loc_13772:
0001496A 4A68 0012                  		tst.w	$12(a0)
0001496E 6B00                       		bmi.s	locret_1379E
00014970 6100 0000                  		bsr.w	Sonic_HitFloor
00014974 4A41                       		tst.w	d1
00014976 6A00                       		bpl.s	locret_1379E
00014978 D368 000C                  		add.w	d1,$C(a0)
0001497C 1143 0026                  		move.b	d3,$26(a0)
00014980 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014984 117C 0000 001C             		move.b	#0,$1C(a0)
0001498A 317C 0000 0012             		move.w	#0,$12(a0)
00014990 3168 0010 0014             		move.w	$10(a0),$14(a0)
00014996                            
00014996                            locret_1379E:
00014996 4E75                       		rts	
00014998                            ; End of function Sonic_Floor
00014998                            
00014998                            ; ---------------------------------------------------------------------------
00014998                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00014998                            ; ---------------------------------------------------------------------------
00014998                            
00014998                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014998                            
00014998                            
00014998                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00014998 0828 0004 0022             		btst	#4,$22(a0)
0001499E 6700                       		beq.s	loc_137AE
000149A0 4E71                       		nop	
000149A2 4E71                       		nop	
000149A4 4E71                       		nop	
000149A6                            
000149A6                            loc_137AE:
000149A6 08A8 0005 0022             		bclr	#5,$22(a0)
000149AC 08A8 0001 0022             		bclr	#1,$22(a0)
000149B2 08A8 0004 0022             		bclr	#4,$22(a0)
000149B8 0828 0002 0022             		btst	#2,$22(a0)
000149BE 6700                       		beq.s	loc_137E4
000149C0 08A8 0002 0022             		bclr	#2,$22(a0)
000149C6 117C 0013 0016             		move.b	#$13,$16(a0)
000149CC 117C 0009 0017             		move.b	#9,$17(a0)
000149D2 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
000149D8 5B68 000C                  		subq.w	#5,$C(a0)
000149DC                            
000149DC                            loc_137E4:
000149DC 117C 0000 003C             		move.b	#0,$3C(a0)
000149E2 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
000149E8 4E75                       		rts	
000149EA                            ; End of function Sonic_ResetOnFloor
000149EA                            
000149EA                            ; ===========================================================================
000149EA                            ; ---------------------------------------------------------------------------
000149EA                            ; Sonic	when he	gets hurt
000149EA                            ; ---------------------------------------------------------------------------
000149EA                            
000149EA                            Obj01_Hurt:				; XREF: Obj01_Index
000149EA 4EBA 96FE                  		jsr	SpeedToPos
000149EE 0668 0030 0012             		addi.w	#$30,$12(a0)
000149F4 0828 0006 0022             		btst	#6,$22(a0)
000149FA 6700                       		beq.s	loc_1380C
000149FC 0468 0020 0012             		subi.w	#$20,$12(a0)
00014A02                            
00014A02                            loc_1380C:
00014A02 6100 0000                  		bsr.w	Sonic_HurtStop
00014A06 6100 F500                  		bsr.w	Sonic_LevelBound
00014A0A 6100 EEC6                  		bsr.w	Sonic_RecordPos
00014A0E 6100 EEDC                  		bsr.w	Sonic_Water		
00014A12 6100 0000                  		bsr.w	Sonic_Animate
00014A16 6100 0000                  		bsr.w	LoadSonicDynPLC
00014A1A 4EFA 96F4                  		jmp	DisplaySprite
00014A1E                            
00014A1E                            ; ---------------------------------------------------------------------------
00014A1E                            ; Subroutine to	stop Sonic falling after he's been hurt
00014A1E                            ; ---------------------------------------------------------------------------
00014A1E                            
00014A1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014A1E                            
00014A1E                            
00014A1E                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00014A1E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014A22 0640 00E0                  		addi.w	#$E0,d0
00014A26 B068 000C                  		cmp.w	$C(a0),d0
00014A2A 6500 F51E                  		bcs.w	Jmp_KillSonic
00014A2E 6100 FD6C                  		bsr.w	Sonic_Floor
00014A32 0828 0001 0022             		btst	#1,$22(a0)
00014A38 6600                       		bne.s	locret_13860
00014A3A 7000                       		moveq	#0,d0
00014A3C 3140 0012                  		move.w	d0,$12(a0)
00014A40 3140 0010                  		move.w	d0,$10(a0)
00014A44 3140 0014                  		move.w	d0,$14(a0)
00014A48 117C 0000 001C             		move.b	#0,$1C(a0)
00014A4E 5528 0024                  		subq.b	#2,$24(a0)
00014A52 317C 0078 0030             		move.w	#$78,$30(a0)
00014A58                            
00014A58                            locret_13860:
00014A58 4E75                       		rts	
00014A5A                            ; End of function Sonic_HurtStop
00014A5A                            
00014A5A                            ; ===========================================================================
00014A5A                            ; ---------------------------------------------------------------------------
00014A5A                            ; Sonic	when he	dies
00014A5A                            ; ---------------------------------------------------------------------------
00014A5A                            
00014A5A                            Obj01_Death:				; XREF: Obj01_Index
00014A5A 6100 0000                  		bsr.w	GameOver
00014A5E 4EBA 965E                  		jsr	ObjectFall
00014A62 6100 EE6E                  		bsr.w	Sonic_RecordPos
00014A66 6100 0000                  		bsr.w	Sonic_Animate
00014A6A 6100 0000                  		bsr.w	LoadSonicDynPLC
00014A6E 4EFA 96A0                  		jmp	DisplaySprite
00014A72                            
00014A72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014A72                            
00014A72                            
00014A72                            GameOver:				; XREF: Obj01_Death
00014A72 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014A76 0640 0100                  		addi.w	#$100,d0
00014A7A B068 000C                  		cmp.w	$C(a0),d0
00014A7E 6C00 0000                  		bge.w	locret_13900
00014A82 317C FFC8 0012             		move.w	#-$38,$12(a0)
00014A88 5428 0024                  		addq.b	#2,$24(a0)
00014A8C 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00014A90 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00014A94 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00014A98 6600                       		bne.s	loc_138D4
00014A9A 317C 0000 003A             		move.w	#0,$3A(a0)
00014AA0 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00014AA6 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00014AAC 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00014AB2 4238 FE1A                  		clr.b	($FFFFFE1A).w
00014AB6                            
00014AB6                            loc_138C2:
00014AB6 303C 008F                  		move.w	#$8F,d0
00014ABA 4EB9 0000 1470             		jsr	(PlaySound).l	; play game over music
00014AC0 7003                       		moveq	#3,d0
00014AC2 4EF9 0000 16EA             		jmp	(LoadPLC).l	; load game over patterns
00014AC8                            ; ===========================================================================
00014AC8                            
00014AC8                            loc_138D4:
00014AC8 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00014ACE 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00014AD2 6700                       		beq.s	locret_13900	; if not, branch
00014AD4 317C 0000 003A             		move.w	#0,$3A(a0)
00014ADA 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00014AE0 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00014AE6 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00014AEC 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00014AF2 60C2                       		bra.s	loc_138C2
00014AF4                            ; ===========================================================================
00014AF4                            
00014AF4                            locret_13900:
00014AF4 4E75                       		rts	
00014AF6                            ; End of function GameOver
00014AF6                            
00014AF6                            ; ===========================================================================
00014AF6                            ; ---------------------------------------------------------------------------
00014AF6                            ; Sonic	when the level is restarted
00014AF6                            ; ---------------------------------------------------------------------------
00014AF6                            
00014AF6                            Obj01_ResetLevel:			; XREF: Obj01_Index
00014AF6 4A68 003A                  		tst.w	$3A(a0)
00014AFA 6700                       		beq.s	locret_13914
00014AFC 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00014B00 6600                       		bne.s	locret_13914
00014B02 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00014B08                            
00014B08                            locret_13914:
00014B08 4E75                       		rts	
00014B0A                            
00014B0A                            ; ---------------------------------------------------------------------------
00014B0A                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00014B0A                            ; ---------------------------------------------------------------------------
00014B0A                            
00014B0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014B0A                            
00014B0A                            
00014B0A                            Sonic_Loops:				; XREF: Obj01_Control
00014B0A 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00014B10 6700                       		beq.s	loc_13926	; if yes, branch
00014B12 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00014B16 6600 0000                  		bne.w	locret_139C2	; if not, branch
00014B1A                            
00014B1A                            loc_13926:
00014B1A 3028 000C                  		move.w	$C(a0),d0
00014B1E E248                       		lsr.w	#1,d0
00014B20 0240 0380                  		andi.w	#$380,d0
00014B24 1228 0008                  		move.b	8(a0),d1
00014B28 0241 007F                  		andi.w	#$7F,d1
00014B2C D041                       		add.w	d1,d0
00014B2E 43F8 A400                  		lea	($FFFFA400).w,a1
00014B32 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00014B36 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00014B3A 6700 F486                  		beq.w	Obj01_ChkRoll
00014B3E B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00014B42 6700 F47E                  		beq.w	Obj01_ChkRoll
00014B46 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00014B4A 6700                       		beq.s	loc_13976
00014B4C B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00014B50 6700                       		beq.s	loc_13966
00014B52 08A8 0006 0001             		bclr	#6,1(a0)
00014B58 4E75                       		rts	
00014B5A                            ; ===========================================================================
00014B5A                            
00014B5A                            loc_13966:
00014B5A 0828 0001 0022             		btst	#1,$22(a0)
00014B60 6700                       		beq.s	loc_13976
00014B62 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014B68 4E75                       		rts	
00014B6A                            ; ===========================================================================
00014B6A                            
00014B6A                            loc_13976:
00014B6A 3428 0008                  		move.w	8(a0),d2
00014B6E 0C02 002C                  		cmpi.b	#$2C,d2
00014B72 6400                       		bcc.s	loc_13988
00014B74 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014B7A 4E75                       		rts	
00014B7C                            ; ===========================================================================
00014B7C                            
00014B7C                            loc_13988:
00014B7C 0C02 00E0                  		cmpi.b	#-$20,d2
00014B80 6500                       		bcs.s	loc_13996
00014B82 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014B88 4E75                       		rts	
00014B8A                            ; ===========================================================================
00014B8A                            
00014B8A                            loc_13996:
00014B8A 0828 0006 0001             		btst	#6,1(a0)
00014B90 6600                       		bne.s	loc_139B2
00014B92 1228 0026                  		move.b	$26(a0),d1
00014B96 6700                       		beq.s	locret_139C2
00014B98 0C01 0080                  		cmpi.b	#-$80,d1
00014B9C 6200                       		bhi.s	locret_139C2
00014B9E 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014BA4 4E75                       		rts	
00014BA6                            ; ===========================================================================
00014BA6                            
00014BA6                            loc_139B2:
00014BA6 1228 0026                  		move.b	$26(a0),d1
00014BAA 0C01 0080                  		cmpi.b	#-$80,d1
00014BAE 6300                       		bls.s	locret_139C2
00014BB0 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014BB6                            
00014BB6                            locret_139C2:
00014BB6 4E75                       		rts	
00014BB8                            ; End of function Sonic_Loops
00014BB8                            
00014BB8                            ; ---------------------------------------------------------------------------
00014BB8                            ; Sonic when he's drowning
00014BB8                            ; ---------------------------------------------------------------------------
00014BB8                             
00014BB8                            ; ||||||||||||||| S	U B	R O	U T	I N	E |||||||||||||||||||||||||||||||||||||||
00014BB8                             
00014BB8                             
00014BB8                            Sonic_Drowned:
00014BB8 6100 9530                  		bsr.w   SpeedToPos		; Make Sonic able to move
00014BBC 0668 0010 0012             		addi.w  #$10,$12(a0)	; Apply gravity
00014BC2 6100 ED0E                  		bsr.w   Sonic_RecordPos	; Record position
00014BC6 6100                       		bsr.s   Sonic_Animate	; Animate Sonic
00014BC8 6100 0000                  		bsr.w   LoadSonicDynPLC	; Load Sonic's DPLCs
00014BCC 6000 9542                  		bra.w   DisplaySprite	; And finally, display Sonic
00014BD0                            
00014BD0                            ; ---------------------------------------------------------------------------
00014BD0                            ; Subroutine to animate Sonic's sprites
00014BD0                            ; See also: AnimateSprite
00014BD0                            ; ---------------------------------------------------------------------------
00014BD0                            
00014BD0                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00014BD0                            
00014BD0                            ; loc_1B350:
00014BD0                            Sonic_Animate:
00014BD0 43F9 0000 0000             	lea	(SonicAniData).l,a1
00014BD6 4A38 FE19                  	tst.b	(Super_Sonic_flag).w
00014BDA 6700                       	beq.s	loc1
00014BDC 43F9 0000 0000             	lea	(SuperSonicAniData).l,a1
00014BE2                            loc1
00014BE2 7000                       	moveq	#0,d0
00014BE4 1028 001C                  	move.b	anim(a0),d0
00014BE8 B028 001D                  	cmp.b	next_anim(a0),d0	; has animation changed?
00014BEC 6700                       	beq.s	SAnim_Do		; if not, branch
00014BEE 1140 001D                  	move.b	d0,next_anim(a0)	; set to next animation
00014BF2 117C 0000 001B             	move.b	#0,anim_frame(a0)	; reset animation frame
00014BF8 117C 0000 001E             	move.b	#0,anim_frame_duration(a0)	; reset frame duration
00014BFE 08A8 0005 0022             	bclr	#5,status(a0)
00014C04                            ; loc_1B384:
00014C04                            SAnim_Do:
00014C04 D040                       	add.w	d0,d0
00014C06 D2F1 0000                  	adda.w	(a1,d0.w),a1	; calculate address of appropriate animation script
00014C0A 1011                       	move.b	(a1),d0
00014C0C 6B00                       	bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00014C0E 1228 0022                  	move.b	status(a0),d1
00014C12 0201 0001                  	andi.b	#1,d1
00014C16 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
00014C1C 8328 0001                  	or.b	d1,render_flags(a0)
00014C20 5328 001E                  	subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame duration
00014C24 6A00                       	bpl.s	SAnim_Delay			; if time remains, branch
00014C26 1140 001E                  	move.b	d0,anim_frame_duration(a0)	; load frame duration
00014C2A                            ; loc_1B3AA:
00014C2A                            SAnim_Do2:
00014C2A 7200                       	moveq	#0,d1
00014C2C 1228 001B                  	move.b	anim_frame(a0),d1	; load current frame number
00014C30 1031 1001                  	move.b	1(a1,d1.w),d0		; read sprite number from script
00014C34 0C00 00F0                  	cmpi.b	#$F0,d0
00014C38 6400                       	bcc.s	SAnim_End_FF		; if animation is complete, branch
00014C3A                            ; loc_1B3BA:
00014C3A                            SAnim_Next:
00014C3A 1140 001A                  	move.b	d0,mapping_frame(a0)	; load sprite number
00014C3E 5228 001B                  	addq.b	#1,anim_frame(a0)	; go to next frame
00014C42                            ; return_1B3C2:
00014C42                            SAnim_Delay:
00014C42 4E75                       	rts
00014C44                            ; ===========================================================================
00014C44                            ; loc_1B3C4:
00014C44                            SAnim_End_FF:
00014C44 5200                       	addq.b	#1,d0		; is the end flag = $FF ?
00014C46 6600                       	bne.s	SAnim_End_FE	; if not, branch
00014C48 117C 0000 001B             	move.b	#0,anim_frame(a0)	; restart the animation
00014C4E 1029 0001                  	move.b	1(a1),d0	; read sprite number
00014C52 60E6                       	bra.s	SAnim_Next
00014C54                            ; ===========================================================================
00014C54                            ; loc_1B3D4:
00014C54                            SAnim_End_FE:
00014C54 5200                       	addq.b	#1,d0		; is the end flag = $FE ?
00014C56 6600                       	bne.s	SAnim_End_FD	; if not, branch
00014C58 1031 1002                  	move.b	2(a1,d1.w),d0	; read the next byte in the script
00014C5C 9128 001B                  	sub.b	d0,anim_frame(a0)	; jump back d0 bytes in the script
00014C60 9200                       	sub.b	d0,d1
00014C62 1031 1001                  	move.b	1(a1,d1.w),d0	; read sprite number
00014C66 60D2                       	bra.s	SAnim_Next
00014C68                            ; ===========================================================================
00014C68                            ; loc_1B3E8:
00014C68                            SAnim_End_FD:
00014C68 5200                       	addq.b	#1,d0			; is the end flag = $FD ?
00014C6A 6600                       	bne.s	SAnim_End		; if not, branch
00014C6C 1171 1002 001C             	move.b	2(a1,d1.w),anim(a0)	; read next byte, run that animation
00014C72                            ; return_1B3F2:
00014C72                            SAnim_End:
00014C72 4E75                       	rts
00014C74                            ; ===========================================================================
00014C74                            ; loc_1B3F4:
00014C74                            SAnim_WalkRun:
00014C74 5200                       	addq.b	#1,d0		; is the start flag = $FF ?
00014C76 6600 0000                  	bne.w	SAnim_Roll	; if not, branch
00014C7A 7000                       	moveq	#0,d0		; is animation walking/running?
00014C7C 1028 0027                  	move.b	flip_angle(a0),d0	; if not, branch
00014C80 6600 0000                  	bne.w	SAnim_Tumble
00014C84 7200                       	moveq	#0,d1
00014C86 1028 0026                  	move.b	angle(a0),d0	; get Sonic's angle
00014C8A 6B00                       	bmi.s	loc2
00014C8C 6700                       	beq.s	loc2
00014C8E 5300                       	subq.b	#1,d0
00014C90                            loc2
00014C90 1428 0022                  	move.b	status(a0),d2
00014C94 0202 0001                  	andi.b	#1,d2		; is Sonic mirrored horizontally?
00014C98 6600                       	bne.s	loc3		; if yes, branch
00014C9A 4600                       	not.b	d0		; reverse angle
00014C9C                            loc3
00014C9C 0600 0010                  	addi.b	#$10,d0		; add $10 to angle
00014CA0 6A00                       	bpl.s	loc4		; if angle is $0-$7F, branch
00014CA2 7203                       	moveq	#3,d1
00014CA4                            loc4
00014CA4 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
00014CAA B302                       	eor.b	d1,d2
00014CAC 8528 0001                  	or.b	d2,render_flags(a0)
00014CB0 0828 0005 0022             	btst	#5,status(a0)
00014CB6 6600 0000                  	bne.w	SAnim_Push
00014CBA E808                       	lsr.b	#4,d0		; divide angle by 16
00014CBC 0200 0006                  	andi.b	#6,d0		; angle must be 0, 2, 4 or 6
00014CC0 3428 0014                  	move.w	inertia(a0),d2	; get Sonic's "speed" for animation purposes
00014CC4 6A00                       	bpl.s	loc5
00014CC6 4442                       	neg.w	d2
00014CC8                            loc5
00014CC8 4A28 002B                  	tst.b	status_secondary(a0)
00014CCC 6A00 0000                  	bpl.w	loc6
00014CD0 D442                       	add.w	d2,d2
00014CD2                            loc6
00014CD2 4A38 FE19                  	tst.b	(Super_Sonic_flag).w
00014CD6 6600                       	bne.s	SAnim_Super
00014CD8 43F9 0000 0000             	lea	(SonAni_Run).l,a1	; use running animation
00014CDE 0C42 0600                  	cmpi.w	#$600,d2		; is Sonic at running speed?
00014CE2 6400                       	bcc.s	loc7			; use running animation
00014CE4 43F9 0000 0000             	lea	(SonAni_Walk).l,a1	; if yes, branch
00014CEA D000                       	add.b	d0,d0
00014CEC                            loc7
00014CEC D000                       	add.b	d0,d0
00014CEE 1600                       	move.b	d0,d3
00014CF0 7200                       	moveq	#0,d1
00014CF2 1228 001B                  	move.b	anim_frame(a0),d1
00014CF6 1031 1001                  	move.b	1(a1,d1.w),d0
00014CFA 0C00 00FF                  	cmpi.b	#-1,d0
00014CFE 6600                       	bne.s	loc8
00014D00 117C 0000 001B             	move.b	#0,anim_frame(a0)
00014D06 1029 0001                  	move.b	1(a1),d0
00014D0A                            loc8
00014D0A 1140 001A                  	move.b	d0,mapping_frame(a0)
00014D0E D728 001A                  	add.b	d3,mapping_frame(a0)
00014D12 5328 001E                  	subq.b	#1,anim_frame_duration(a0)
00014D16 6A00                       	bpl.s	return_1B4AC
00014D18 4442                       	neg.w	d2
00014D1A 0642 0800                  	addi.w	#$800,d2
00014D1E 6A00                       	bpl.s	loc81
00014D20 7400                       	moveq	#0,d2
00014D22                            loc81
00014D22 E04A                       	lsr.w	#8,d2
00014D24 1142 001E                  	move.b	d2,anim_frame_duration(a0)	; modify frame duration
00014D28 5228 001B                  	addq.b	#1,anim_frame(a0)		; modify frame number
00014D2C                            
00014D2C                            return_1B4AC:
00014D2C 4E75                       	rts
00014D2E                            ; ===========================================================================
00014D2E                            ; loc_1B4AE:
00014D2E                            SAnim_Super:
00014D2E 43F9 0000 0000             	lea	(SupSonAni_Run).l,a1	; use fast animation
00014D34 0C42 0800                  	cmpi.w	#$800,d2		; is Sonic moving fast?
00014D38 6400                       	bcc.s	SAnim_SuperRun		; if yes, branch
00014D3A 43F9 0000 0000             	lea	(SupSonAni_Walk).l,a1	; use slower animation
00014D40 D000                       	add.b	d0,d0
00014D42 D000                       	add.b	d0,d0
00014D44 6000                       	bra.s	SAnim_SuperWalk
00014D46                            ; ---------------------------------------------------------------------------
00014D46                            ; loc_1B4C6:
00014D46                            SAnim_SuperRun:
00014D46 E208                       	lsr.b	#1,d0
00014D48                            ; loc_1B4C8:
00014D48                            SAnim_SuperWalk:
00014D48 1600                       	move.b	d0,d3
00014D4A 7200                       	moveq	#0,d1
00014D4C 1228 001B                  	move.b	anim_frame(a0),d1
00014D50 1031 1001                  	move.b	1(a1,d1.w),d0
00014D54 0C00 00FF                  	cmpi.b	#-1,d0
00014D58 6600                       	bne.s	loc9
00014D5A 117C 0000 001B             	move.b	#0,anim_frame(a0)
00014D60 1029 0001                  	move.b	1(a1),d0
00014D64                            loc9
00014D64 1140 001A                  	move.b	d0,mapping_frame(a0)
00014D68 D728 001A                  	add.b	d3,mapping_frame(a0)
00014D6C 1238 FE05                  	move.b	($FFFFFE05).w,d1
00014D70 0201 0003                  	andi.b	#3,d1
00014D74 6600                       	bne.s	loc10
00014D76 0C28 00B5 001A             	cmpi.b	#-$4B,mapping_frame(a0)
00014D7C 6400                       	bcc.s	loc10
00014D7E 0628 0020 001A             	addi.b	#$20,mapping_frame(a0)
00014D84                            loc10
00014D84 5328 001E                  	subq.b	#1,anim_frame_duration(a0)
00014D88 6A00                       	bpl.s	return_1B51E
00014D8A 4442                       	neg.w	d2
00014D8C 0642 0800                  	addi.w	#$800,d2
00014D90 6A00                       	bpl.s	loc11
00014D92 7400                       	moveq	#0,d2
00014D94                            loc11
00014D94 E04A                       	lsr.w	#8,d2
00014D96 1142 001E                  	move.b	d2,anim_frame_duration(a0)
00014D9A 5228 001B                  	addq.b	#1,anim_frame(a0)
00014D9E                            
00014D9E                            return_1B51E:
00014D9E 4E75                       	rts
00014DA0                            ; ===========================================================================
00014DA0                            ; loc_1B520:
00014DA0                            SAnim_Tumble:
00014DA0 1028 0027                  	move.b	flip_angle(a0),d0
00014DA4 7200                       	moveq	#0,d1
00014DA6 1428 0022                  	move.b	status(a0),d2
00014DAA 0202 0001                  	andi.b	#1,d2
00014DAE 6600                       	bne.s	SAnim_Tumble_Left
00014DB0                            
00014DB0 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
00014DB6 0600 000B                  	addi.b	#$B,d0
00014DBA 80FC 0016                  	divu.w	#$16,d0
00014DBE 0600 005F                  	addi.b	#$5F,d0
00014DC2 1140 001A                  	move.b	d0,mapping_frame(a0)
00014DC6 117C 0000 001E             	move.b	#0,anim_frame_duration(a0)
00014DCC 4E75                       	rts
00014DCE                            ; ===========================================================================
00014DCE                            ; loc_1B54E:
00014DCE                            SAnim_Tumble_Left:
00014DCE 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
00014DD4 4A28 0029                  	tst.b	flip_turned(a0)
00014DD8 6700                       	beq.s	loc_1B566
00014DDA 0028 0001 0001             	ori.b	#1,render_flags(a0)
00014DE0 0600 000B                  	addi.b	#$B,d0
00014DE4 6000                       	bra.s	loc_1B572
00014DE6                            ; ===========================================================================
00014DE6                            
00014DE6                            loc_1B566:
00014DE6 0028 0003 0001             	ori.b	#3,render_flags(a0)
00014DEC 4400                       	neg.b	d0
00014DEE 0600 008F                  	addi.b	#$8F,d0
00014DF2                            
00014DF2                            loc_1B572:
00014DF2 80FC 0016                  	divu.w	#$16,d0
00014DF6 0600 005F                  	addi.b	#$5F,d0
00014DFA 1140 001A                  	move.b	d0,mapping_frame(a0)
00014DFE 117C 0000 001E             	move.b	#0,anim_frame_duration(a0)
00014E04 4E75                       	rts
00014E06                            ; ===========================================================================
00014E06                            ; loc_1B586:
00014E06                            SAnim_Roll:
00014E06 5328 001E                  	subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame duration
00014E0A 6A00 FE36                  	bpl.w	SAnim_Delay			; if time remains, branch
00014E0E 5200                       	addq.b	#1,d0		; is the start flag = $FE ?
00014E10 6600                       	bne.s	SAnim_Push	; if not, branch
00014E12 3428 0014                  	move.w	inertia(a0),d2
00014E16 6A00                       	bpl.s	loc12
00014E18 4442                       	neg.w	d2
00014E1A                            loc12
00014E1A 43F9 0000 0000             	lea	(SonAni_Roll2).l,a1
00014E20 0C42 0600                  	cmpi.w	#$600,d2
00014E24 6400                       	bcc.s	loc14
00014E26 43F9 0000 0000             	lea	(SonAni_Roll).l,a1
00014E2C                            loc14
00014E2C 4442                       	neg.w	d2
00014E2E 0642 0400                  	addi.w	#$400,d2
00014E32 6A00                       	bpl.s	loc15
00014E34 7400                       	moveq	#0,d2
00014E36                            loc15
00014E36 E04A                       	lsr.w	#8,d2
00014E38 1142 001E                  	move.b	d2,anim_frame_duration(a0)
00014E3C 1228 0022                  	move.b	status(a0),d1
00014E40 0201 0001                  	andi.b	#1,d1
00014E44 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
00014E4A 8328 0001                  	or.b	d1,render_flags(a0)
00014E4E 6000 FDDA                  	bra.w	SAnim_Do2
00014E52                            ; ===========================================================================
00014E52                            
00014E52                            SAnim_Push:
00014E52 5328 001E                  	subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame duration
00014E56 6A00 FDEA                  	bpl.w	SAnim_Delay			; if time remains, branch
00014E5A 3428 0014                  	move.w	inertia(a0),d2
00014E5E 6B00                       	bmi.s	loc16
00014E60 4442                       	neg.w	d2
00014E62                            loc16
00014E62 0642 0800                  	addi.w	#$800,d2
00014E66 6A00                       	bpl.s	loc17
00014E68 7400                       	moveq	#0,d2
00014E6A                            loc17
00014E6A EC4A                       	lsr.w	#6,d2
00014E6C 1142 001E                  	move.b	d2,anim_frame_duration(a0)
00014E70 43F9 0000 0000             	lea	(SonAni_Push).l,a1
00014E76 4A38 FE19                  	tst.b	(Super_Sonic_flag).w
00014E7A 6700                       	beq.s	loc18
00014E7C 43F9 0000 0000             	lea	(SupSonAni_Push).l,a1
00014E82                            loc18
00014E82 1228 0022                  	move.b	status(a0),d1
00014E86 0201 0001                  	andi.b	#1,d1
00014E8A 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
00014E90 8328 0001                  	or.b	d1,render_flags(a0)
00014E94 6000 FD94                  	bra.w	SAnim_Do2
00014E98                            ; ===========================================================================
00014E98                            
00014E98                            ; ---------------------------------------------------------------------------
00014E98                            ; Animation script - Sonic
00014E98                            ; ---------------------------------------------------------------------------
00014E98                            ; off_1B618:
00014E98                            SonicAniData:
00014E98                            	include "_anim\Sonic.asm"
00014E98                            ; ---------------------------------------------------------------------------
00014E98                            ; Animation script - Sonic
00014E98                            ; ---------------------------------------------------------------------------
00014E98 0000                       		dc.w SonAni_Walk-SonicAniData	; 0
00014E9A 0000                       		dc.w SonAni_Run-SonicAniData	; 1
00014E9C 0000                       		dc.w SonAni_Roll-SonicAniData	; 2
00014E9E 0000                       		dc.w SonAni_Roll2-SonicAniData	; 3
00014EA0 0000                       		dc.w SonAni_Push-SonicAniData	; 4
00014EA2 0000                       		dc.w SonAni_Wait-SonicAniData	; 5
00014EA4 0000                       		dc.w SonAni_Balance-SonicAniData	; 6
00014EA6 0000                       		dc.w SonAni_LookUp-SonicAniData	; 7
00014EA8 0000                       		dc.w SonAni_Duck-SonicAniData	; 8
00014EAA 0000                       		dc.w SonAni_Warp1-SonicAniData	; 9
00014EAC 0000                       		dc.w SonAni_Warp2-SonicAniData	; A
00014EAE 0000                       		dc.w SonAni_Warp3-SonicAniData	; B
00014EB0 0000                       		dc.w SonAni_Warp4-SonicAniData	; C
00014EB2 0000                       		dc.w SonAni_Stop-SonicAniData	; D
00014EB4 0000                       		dc.w SonAni_Float1-SonicAniData	; E
00014EB6 0000                       		dc.w SonAni_Float2-SonicAniData	; F
00014EB8 0000                       		dc.w SonAni_Spring-SonicAniData	; 10
00014EBA 0000                       		dc.w SonAni_LZHang-SonicAniData	; 11
00014EBC 0000                       		dc.w SonAni_Leap1-SonicAniData	; 12
00014EBE 0000                       		dc.w SonAni_Leap2-SonicAniData	; 13
00014EC0 0000                       		dc.w SonAni_Surf-SonicAniData	; 14
00014EC2 0000                       		dc.w SonAni_Bubble-SonicAniData	; 15
00014EC4 0000                       		dc.w SonAni_Death-SonicAniData	; 16
00014EC6 0000                       		dc.w SonAni_Drown-SonicAniData	; 17
00014EC8 0000                       		dc.w SonAni_Hurt-SonicAniData	; 18
00014ECA 0000                       		dc.w SonAni_LZSlide-SonicAniData	; 19
00014ECC 0000                       		dc.w SonAni_Blank-SonicAniData	; 1A
00014ECE 0000                       		dc.w SonAni_Float3-SonicAniData	; 1B
00014ED0 0000                       		dc.w SonAni_Float4-SonicAniData	; 1C
00014ED2 0000                       		dc.w SonAni_Spindash-SonicAniData	; 1D
00014ED4 0000                       		dc.w SonAni_Blink-SonicAniData	; 1E
00014ED6 0000                       		dc.w SonAni_GetUp-SonicAniData	; 1F
00014ED8 0000                       		dc.w SonAni_Balance2-SonicAniData	; 20
00014EDA 0000                       		dc.w SonAni_Hang-SonicAniData		; 2A
00014EDC 0000                       		dc.w SonAni_Dash2-SonicAniData	; 2B
00014EDE 0000                       		dc.w SonAni_Dash3-SonicAniData	; 2C
00014EE0 0000                       		dc.w SonAni_Hang2-SonicAniData	; 2D
00014EE2 0000                       		dc.w SonAni_DeathBW-SonicAniData	; 2E	
00014EE4 0000                       		dc.w SonAni_Balance3-SonicAniData	; 2F
00014EE6 0000                       		dc.w SonAni_Balance4-SonicAniData	; 30		
00014EE8 0000                       		dc.w SonAni_Lying-SonicAniData	; 31
00014EEA 0000                       		dc.w SonAni_LieDown-SonicAniData	; 32
00014EEC FF0F 1011 1213 140D 0EFF   SonAni_Walk:	dc.b $FF, $F,$10,$11,$12,$13,$14, $D, $E,$FF
00014EF6 FF2D 2E2F 30FF FFFF FFFF   SonAni_Run:	dc.b $FF,$2D,$2E,$2F,$30,$FF,$FF,$FF,$FF,$FF
00014F00 FE3D 413E 413F 4140 41FF   SonAni_Roll:	dc.b $FE,$3D,$41,$3E,$41,$3F,$41,$40,$41,$FF
00014F0A FE3D 413E 413F 4140 41FF   SonAni_Roll2:	dc.b $FE,$3D,$41,$3E,$41,$3F,$41,$40,$41,$FF
00014F14 FD48 494A 4BFF FFFF FFFF   SonAni_Push:	dc.b $FD,$48,$49,$4A,$4B,$FF,$FF,$FF,$FF,$FF
00014F1E                            SonAni_Wait:
00014F1E 0501 0101 0101 0101 0101+  	dc.b   5,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1
00014F2E 0101 0101 0101 0101 0101+  	dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2
00014F3E 0303 0303 0304 0404 0505+  	dc.b   3,  3,  3,  3,  3,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5
00014F4E 0504 0404 0505 0504 0404+  	dc.b   5,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5,  5,  6,  6,  6
00014F5E 0606 0606 0606 0604 0404+  	dc.b   6,  6,  6,  6,  6,  6,  6,  4,  4,  4,  5,  5,  5,  4,  4,  4
00014F6E 0505 0504 0404 0505 0504+  	dc.b   5,  5,  5,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5,  5,  6
00014F7E 0606 0606 0606 0606 0604+  	dc.b   6,  6,  6,  6,  6,  6,  6,  6,  6,  4,  4,  4,  5,  5,  5,  4
00014F8E 0404 0505 0504 0404 0505+  	dc.b   4,  4,  5,  5,  5,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5
00014F9E 0506 0606 0606 0606 0606+  	dc.b   5,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  4,  4,  4,  5,  5
00014FAE 0504 0404 0505 0504 0404+  	dc.b   5,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5,  5,  4,  4,  4
00014FBE 0505 0506 0606 0606 0606+  	dc.b   5,  5,  5,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  7,  8,  8
00014FCE 0809 0909 FE06             	dc.b   8,  9,  9,  9,$FE,  6
00014FD4 09CC CDCE CDFF             SonAni_Balance:	dc.b   9,$CC,$CD,$CE,$CD,$FF
00014FDA 050B 0CFE 01               SonAni_LookUp:	dc.b   5, $B, $C,$FE,  1
00014FDF 054C 4DFE 01               SonAni_Duck:	dc.b   5,$4C,$4D,$FE,  1
00014FE4 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00014FE8 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00014FEC 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00014FF0 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
00014FF4 0102 FD00                  SonAni_Blink:	dc.b   1,  2,$FD,  0
00014FF8 030A FD00                  SonAni_GetUp:	dc.b   3, $A,$FD,  0
00014FFC 03C8 C9CA CBFF             SonAni_Balance2:    dc.b   3,$C8,$C9,$CA,$CB,$FF
00015002 05D2 D3D4 D5FD 00          SonAni_Stop:	dc.b   5,$D2,$D3,$D4,$D5,$FD,  0 ; halt/skidding animation
00015009 0754 59FF                  SonAni_Float1:	dc.b   7,$54,$59,$FF
0001500D 0754 5556 5758 FF          SonAni_Float2:	dc.b   7,$54,$55,$56,$57,$58,$FF
00015014 2F5B FD00                  SonAni_Spring:	dc.b $2F,$5B,$FD,  0
00015018 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
0001501C 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00015022 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
00015028 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
0001502C 0B5A 5A11 12FD 00          SonAni_Bubble:	dc.b  $B,$5A,$5A,$11,$12,$FD,  0 ; breathe
00015033 205D FF                    SonAni_Drown:	dc.b $20,$5D,$FF
00015036 205C FF                    SonAni_Death:	dc.b $20,$5C,$FF
00015039 404E FF                    SonAni_Hurt:	dc.b $40,$4E,$FF
0001503C 094E 4FFF                  SonAni_LZSlide:	dc.b   9,$4E,$4F,$FF
00015040 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
00015044 0042 4342 4442 4542 4642+  SonAni_Spindash: dc.b   0,$42,$43,$42,$44,$42,$45,$42,$46,$42,$47,$FF
00015050 0150 51FF                  SonAni_Hang:	dc.b   1,$50,$51,$FF
00015054 0F43 4343 FE01             SonAni_Dash2:	dc.b  $F,$43,$43,$43,$FE,  1
0001505A 0F43 44FE 01               SonAni_Dash3:	dc.b  $F,$43,$44,$FE,  1
0001505F 136B 6CFF                  SonAni_Hang2:	dc.b $13,$6B,$6C,$FF
00015063 205E FF                    SonAni_DeathBW:	dc.b $20,$5E,$FF
00015066 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
0001506E 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
00015072 13D0 D1FF                  SonAni_Balance3:dc.b $13,$D0,$D1,$FF
00015076 03CF C8C9 CACB FE04        SonAni_Balance4:dc.b   3,$CF,$C8,$C9,$CA,$CB,$FE,  4
0001507E 0908 09FF                  SonAni_Lying:	dc.b   9,  8,  9,$FF
00015082 0307 FD00                  SonAni_LieDown:	dc.b   3,  7,$FD,  0
00015086                            		even
00015086                            ; ---------------------------------------------------------------------------
00015086                            ; Animation script - Super Sonic
00015086                            ; (many of these point to the data above this)
00015086                            ; ---------------------------------------------------------------------------
00015086                            SuperSonicAniData:
00015086 0000                       	dc.w SupSonAni_Walk-SuperSonicAniData		; 0
00015088 0000                       	dc.w SupSonAni_Run-SuperSonicAniData          ; 1
0001508A FE7A                       	dc.w SonAni_Roll-SuperSonicAniData            ; 2
0001508C FE84                       	dc.w SonAni_Roll2-SuperSonicAniData           ; 3
0001508E 0000                       	dc.w SupSonAni_Push-SuperSonicAniData         ; 4
00015090 0000                       	dc.w SupSonAni_Stand-SuperSonicAniData        ; 5
00015092 0000                       	dc.w SupSonAni_Balance-SuperSonicAniData      ; 6
00015094 FF54                       	dc.w SonAni_LookUp-SuperSonicAniData          ; 7
00015096 0000                       	dc.w SupSonAni_Duck-SuperSonicAniData         ; 8
00015098 FFBE                       	dc.w SonAni_Spindash-SuperSonicAniData        ; 9
0001509A FF6E                       	dc.w SonAni_Blink-SuperSonicAniData           ; 10 ; $A
0001509C FF72                       	dc.w SonAni_GetUp-SuperSonicAniData           ; 11 ; $B
0001509E FF76                       	dc.w SonAni_Balance2-SuperSonicAniData        ; 12 ; $C
000150A0 FF7C                       	dc.w SonAni_Stop-SuperSonicAniData            ; 13 ; $D
000150A2 FF83                       	dc.w SonAni_Float1-SuperSonicAniData           ; 14 ; $E
000150A4 FF87                       	dc.w SonAni_Float2-SuperSonicAniData          ; 15 ; $F
000150A6 FF8E                       	dc.w SonAni_Spring-SuperSonicAniData          ; 16 ; $10
000150A8 FFCA                       	dc.w SonAni_Hang-SuperSonicAniData            ; 17 ; $11
000150AA FFCE                       	dc.w SonAni_Dash2-SuperSonicAniData           ; 18 ; $12
000150AC FFD4                       	dc.w SonAni_Dash3-SuperSonicAniData           ; 19 ; $13
000150AE FFD9                       	dc.w SonAni_Hang2-SuperSonicAniData           ; 20 ; $14
000150B0 FFA6                       	dc.w SonAni_Bubble-SuperSonicAniData          ; 21 ; $15
000150B2 FFDD                       	dc.w SonAni_DeathBW-SuperSonicAniData         ; 22 ; $16
000150B4 FFAD                       	dc.w SonAni_Drown-SuperSonicAniData           ; 23 ; $17
000150B6 FFB0                       	dc.w SonAni_Death-SuperSonicAniData           ; 24 ; $18
000150B8 FFB3                       	dc.w SonAni_Hurt-SuperSonicAniData            ; 25 ; $19
000150BA FFB3                       	dc.w SonAni_Hurt-SuperSonicAniData            ; 26 ; $1A
000150BC FFB6                       	dc.w SonAni_LZSlide-SuperSonicAniData           ; 27 ; $1B
000150BE FFBA                       	dc.w SonAni_Blank-SuperSonicAniData           ; 28 ; $1C
000150C0 FFEC                       	dc.w SonAni_Balance3-SuperSonicAniData        ; 29 ; $1D
000150C2 FFF0                       	dc.w SonAni_Balance4-SuperSonicAniData        ; 30 ; $1E
000150C4 0000                       	dc.w SupSonAni_Transform-SuperSonicAniData    ; 31 ; $1F
000150C6                            
000150C6 FF77 7879 7A7B 7C75 76FF   SupSonAni_Walk:		dc.b $FF,$77,$78,$79,$7A,$7B,$7C,$75,$76,$FF
000150D0 FFB5 B9FF FFFF FFFF FFFF   SupSonAni_Run:		dc.b $FF,$B5,$B9,$FF,$FF,$FF,$FF,$FF,$FF,$FF
000150DA FDBD BEBF C0FF FFFF FFFF   SupSonAni_Push:		dc.b $FD,$BD,$BE,$BF,$C0,$FF,$FF,$FF,$FF,$FF
000150E4 0772 7374 73FF             SupSonAni_Stand:	dc.b   7,$72,$73,$74,$73,$FF
000150EA 09C2 C3C4 C3C5 C6C7 C6FF   SupSonAni_Balance:	dc.b   9,$C2,$C3,$C4,$C3,$C5,$C6,$C7,$C6,$FF
000150F4 05C1 FF                    SupSonAni_Duck:		dc.b   5,$C1,$FF
000150F7 026D 6D6E 6E6F 7071 7071+  SupSonAni_Transform:	dc.b   2,$6D,$6D,$6E,$6E,$6F,$70,$71,$70,$71,$70,$71,$70,$71,$FD,  0
00015108 00                         	even		
00015108 00                         	even		
00015108                            
00015108                            
00015108                            ; ---------------------------------------------------------------------------
00015108                            ; Sonic	pattern	loading	subroutine
00015108                            ; ---------------------------------------------------------------------------
00015108                            
00015108                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015108                            
00015108                            
00015108                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
00015108 7000                       		moveq	#0,d0
0001510A 1028 001A                  		move.b	$1A(a0),d0	; load frame number
0001510E B038 F766                  		cmp.b	($FFFFF766).w,d0
00015112 6700                       		beq.s	locret_13C96
00015114 11C0 F766                  		move.b	d0,($FFFFF766).w
00015118 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
0001511E D040                       		add.w	d0,d0
00015120 D4F2 0000                  		adda.w	(a2,d0.w),a2
00015124 7A00                       		moveq	#0,d5
00015126 1A1A                       		move.b	(a2)+,d5
00015128 5345                       		subq.w	#1,d5
0001512A 6B00                       		bmi.s	locret_13C96
0001512C 383C F000                  		move.w	#$F000,d4
00015130 2C3C 0000 0000             		move.l	#Art_Sonic,d6
00015136                            
00015136                            SPLC_ReadEntry:
00015136 7200                       		moveq	#0,d1
00015138 121A                       		move.b	(a2)+,d1
0001513A E149                       		lsl.w	#8,d1
0001513C 121A                       		move.b	(a2)+,d1
0001513E 3601                       		move.w	d1,d3
00015140 E04B                       		lsr.w	#8,d3
00015142 0243 00F0                  		andi.w	#$F0,d3
00015146 0643 0010                  		addi.w	#$10,d3
0001514A 0241 0FFF                  		andi.w	#$FFF,d1
0001514E EB89                       		lsl.l	#5,d1
00015150 D286                       		add.l	d6,d1
00015152 3404                       		move.w	d4,d2
00015154 D843                       		add.w	d3,d4
00015156 D843                       		add.w	d3,d4
00015158 4EB9 0000 151A             		jsr	(QueueDMATransfer).l
0001515E 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
00015162                            
00015162                            locret_13C96:
00015162 4E75                       		rts
00015164                            ; End of function LoadSonicDynPLC
00015164                            
00015164                            ; ===========================================================================
00015164                            ; ---------------------------------------------------------------------------
00015164                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00015164                            ; ---------------------------------------------------------------------------
00015164                            
00015164                            Obj0A:					; XREF: Obj_Index
00015164 7000                       		moveq	#0,d0
00015166 1028 0024                  		move.b	$24(a0),d0
0001516A 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
0001516E 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00015172                            ; ===========================================================================
00015172 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00015176 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
0001517A 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
0001517E 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00015182 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00015184                            ; ===========================================================================
00015184                            
00015184                            Obj0A_Main:				; XREF: Obj0A_Index
00015184 5428 0024                  		addq.b	#2,$24(a0)
00015188 217C 0001 34DC 0004        		move.l	#Map_obj64,4(a0)
00015190 317C 8348 0002             		move.w	#$8348,2(a0)
00015196 117C 0084 0001             		move.b	#$84,1(a0)
0001519C 117C 0010 0019             		move.b	#$10,$19(a0)
000151A2 117C 0001 0018             		move.b	#1,$18(a0)
000151A8 1028 0028                  		move.b	$28(a0),d0
000151AC 6A00                       		bpl.s	loc_13D00
000151AE 5028 0024                  		addq.b	#8,$24(a0)
000151B2 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
000151BA 317C 0440 0002             		move.w	#$440,2(a0)
000151C0 0240 007F                  		andi.w	#$7F,d0
000151C4 1140 0033                  		move.b	d0,$33(a0)
000151C8 6000 0000                  		bra.w	Obj0A_Countdown
000151CC                            ; ===========================================================================
000151CC                            
000151CC                            loc_13D00:
000151CC 1140 001C                  		move.b	d0,$1C(a0)
000151D0 3168 0008 0030             		move.w	8(a0),$30(a0)
000151D6 317C FF78 0012             		move.w	#-$88,$12(a0)
000151DC                            
000151DC                            Obj0A_Animate:				; XREF: Obj0A_Index
000151DC 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000151E2 4EB9 0000 B222             		jsr	AnimateSprite
000151E8                            
000151E8                            Obj0A_ChkWater:				; XREF: Obj0A_Index
000151E8 3038 F646                  		move.w	($FFFFF646).w,d0
000151EC B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
000151F0 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
000151F2 117C 0006 0024             		move.b	#6,$24(a0)
000151F8 5E28 001C                  		addq.b	#7,$1C(a0)
000151FC 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00015202 6700                       		beq.s	Obj0A_Display
00015204 6000                       		bra.s	Obj0A_Display
00015206                            ; ===========================================================================
00015206                            
00015206                            Obj0A_Wobble:
00015206 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0001520A 6700                       		beq.s	loc_13D44
0001520C 5868 0030                  		addq.w	#4,$30(a0)
00015210                            
00015210                            loc_13D44:
00015210 1028 0026                  		move.b	$26(a0),d0
00015214 5228 0026                  		addq.b	#1,$26(a0)
00015218 0240 007F                  		andi.w	#$7F,d0
0001521C 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00015222 1031 0000                  		move.b	(a1,d0.w),d0
00015226 4880                       		ext.w	d0
00015228 D068 0030                  		add.w	$30(a0),d0
0001522C 3140 0008                  		move.w	d0,8(a0)
00015230 6100                       		bsr.s	Obj0A_ShowNumber
00015232 4EBA 8EB6                  		jsr	SpeedToPos
00015236 4A28 0001                  		tst.b	1(a0)
0001523A 6A00                       		bpl.s	Obj0A_Delete
0001523C 4EFA 8ED2                  		jmp	DisplaySprite
00015240                            ; ===========================================================================
00015240                            
00015240                            Obj0A_Delete:
00015240 4EFA 8F0A                  		jmp	DeleteObject
00015244                            ; ===========================================================================
00015244                            
00015244                            Obj0A_Display:				; XREF: Obj0A_Index
00015244 6100                       		bsr.s	Obj0A_ShowNumber
00015246 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001524C 4EB9 0000 B222             		jsr	AnimateSprite
00015252 4EFA 8EBC                  		jmp	DisplaySprite
00015256                            ; ===========================================================================
00015256                            
00015256                            Obj0A_Delete2:				; XREF: Obj0A_Index
00015256 4EFA 8EF4                  		jmp	DeleteObject
0001525A                            ; ===========================================================================
0001525A                            
0001525A                            Obj0A_AirLeft:				; XREF: Obj0A_Index
0001525A 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00015260 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00015262 5368 0038                  		subq.w	#1,$38(a0)
00015266 6600                       		bne.s	Obj0A_Display2
00015268 117C 000E 0024             		move.b	#$E,$24(a0)
0001526E 5E28 001C                  		addq.b	#7,$1C(a0)
00015272 60D0                       		bra.s	Obj0A_Display
00015274                            ; ===========================================================================
00015274                            
00015274                            Obj0A_Display2:
00015274 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001527A 4EB9 0000 B222             		jsr	AnimateSprite
00015280 4A28 0001                  		tst.b	1(a0)
00015284 6A00                       		bpl.s	Obj0A_Delete3
00015286 4EFA 8E88                  		jmp	DisplaySprite
0001528A                            ; ===========================================================================
0001528A                            
0001528A                            Obj0A_Delete3:
0001528A 4EFA 8EC0                  		jmp	DeleteObject
0001528E                            ; ===========================================================================
0001528E                            
0001528E                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
0001528E 4A68 0038                  		tst.w	$38(a0)
00015292 6700                       		beq.s	locret_13E1A
00015294 5368 0038                  		subq.w	#1,$38(a0)
00015298 6600                       		bne.s	locret_13E1A
0001529A 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
000152A0 6400                       		bcc.s	locret_13E1A
000152A2 317C 000F 0038             		move.w	#$F,$38(a0)
000152A8 4268 0012                  		clr.w	$12(a0)
000152AC 117C 0080 0001             		move.b	#$80,1(a0)
000152B2 3028 0008                  		move.w	8(a0),d0
000152B6 9078 F700                  		sub.w	($FFFFF700).w,d0
000152BA 0640 0080                  		addi.w	#$80,d0
000152BE 3140 0008                  		move.w	d0,8(a0)
000152C2 3028 000C                  		move.w	$C(a0),d0
000152C6 9078 F704                  		sub.w	($FFFFF704).w,d0
000152CA 0640 0080                  		addi.w	#$80,d0
000152CE 3140 000A                  		move.w	d0,$A(a0)
000152D2 117C 000C 0024             		move.b	#$C,$24(a0)
000152D8                            
000152D8                            locret_13E1A:
000152D8 4E75                       		rts	
000152DA                            ; ===========================================================================
000152DA                            Obj0A_WobbleData:
000152DA 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
000152EB 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
000152FC 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
0001530D 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
0001531D FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
0001532A FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015337 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015344 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00015351 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
0001535A                            ; ===========================================================================
0001535A                            
0001535A                            Obj0A_Countdown:			; XREF: Obj0A_Index
0001535A 4A68 002C                  		tst.w	$2C(a0)
0001535E 6600 0000                  		bne.w	loc_13F86
00015362 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00015368 6400 0000                  		bcc.w	locret_1408C
0001536C 0838 0006 D022             		btst	#6,($FFFFD022).w
00015372 6700 0000                  		beq.w	locret_1408C
00015376 5368 0038                  		subq.w	#1,$38(a0)
0001537A 6A00 0000                  		bpl.w	loc_13FAC
0001537E 317C 003B 0038             		move.w	#59,$38(a0)
00015384 317C 0001 0036             		move.w	#1,$36(a0)
0001538A 4EB9 0000 33AE             		jsr	(RandomNumber).l
00015390 0240 0001                  		andi.w	#1,d0
00015394 1140 0034                  		move.b	d0,$34(a0)
00015398 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
0001539C 0C40 0019                  		cmpi.w	#$19,d0
000153A0 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
000153A2 0C40 0014                  		cmpi.w	#$14,d0
000153A6 6700                       		beq.s	Obj0A_WarnSound
000153A8 0C40 000F                  		cmpi.w	#$F,d0
000153AC 6700                       		beq.s	Obj0A_WarnSound
000153AE 0C40 000C                  		cmpi.w	#$C,d0
000153B2 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
000153B4 6600                       		bne.s	loc_13F02
000153B6 303C 0092                  		move.w	#$92,d0
000153BA 4EB9 0000 1470             		jsr	(PlaySound).l	; play countdown music
000153C0                            
000153C0                            loc_13F02:
000153C0 5328 0032                  		subq.b	#1,$32(a0)
000153C4 6A00                       		bpl.s	Obj0A_ReduceAir
000153C6 1168 0033 0032             		move.b	$33(a0),$32(a0)
000153CC 08E8 0007 0036             		bset	#7,$36(a0)
000153D2 6000                       		bra.s	Obj0A_ReduceAir
000153D4                            ; ===========================================================================
000153D4                            
000153D4                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
000153D4 303C 00C2                  		move.w	#$C2,d0
000153D8 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
000153DE                            
000153DE                            Obj0A_ReduceAir:
000153DE 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
000153E2 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
000153E6 6100 0000                  		bsr.w	ResumeMusic
000153EA 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000153F0 303C 00B2                  		move.w	#$B2,d0
000153F4 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play drowning sound
000153FA 117C 000A 0034             		move.b	#$A,$34(a0)
00015400 317C 0001 0036             		move.w	#1,$36(a0)
00015406 317C 0078 002C             		move.w	#$78,$2C(a0)
0001540C 2F08                       		move.l	a0,-(sp)
0001540E 41F8 D000                  		lea	($FFFFD000).w,a0
00015412 6100 F584                  		bsr.w	Sonic_ResetOnFloor
00015416 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
0001541C 08E8 0001 0022             		bset	#1,$22(a0)
00015422 08E8 0007 0002             		bset	#7,2(a0)
00015428 317C 0000 0012             		move.w	#0,$12(a0)
0001542E 317C 0000 0010             		move.w	#0,$10(a0)
00015434 317C 0000 0014             		move.w	#0,$14(a0)
0001543A 117C 000A 0024             		move.b	#$A,$24(a0)		; Force the character to drown
00015440 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00015446 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w	; Stop the timer immediately
0001544C 205F                       		movea.l	(sp)+,a0
0001544E 4E75                       		rts
00015450                            ; ===========================================================================
00015450                            
00015450                            loc_13F86:
00015450 5368 002C                  		subq.w	#1,$2C(a0)
00015454 6600                       		bne.s	loc_13FAC	; Make it jump straight to this location
00015456 11FC 0006 D024             		move.b	#6,($FFFFD000+$24).w
0001545C 4E75                       		rts
0001545E                            ; ===========================================================================
0001545E                            
0001545E                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
0001545E 6000                       		bra.s	Obj0A_MakeItem
00015460                            ; ===========================================================================
00015460                            
00015460                            loc_13FAC:
00015460 4A68 0036                  		tst.w	$36(a0)
00015464 6700 0000                  		beq.w	locret_1408C
00015468 5368 003A                  		subq.w	#1,$3A(a0)
0001546C 6A00 0000                  		bpl.w	locret_1408C
00015470                            
00015470                            Obj0A_MakeItem:
00015470 4EB9 0000 33AE             		jsr	(RandomNumber).l
00015476 0240 000F                  		andi.w	#$F,d0
0001547A 3140 003A                  		move.w	d0,$3A(a0)
0001547E 4EBA 9126                  		jsr	SingleObjLoad
00015482 6600 0000                  		bne.w	locret_1408C
00015486 12BC 000A                  		move.b	#$A,0(a1)	; load object
0001548A 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00015490 7006                       		moveq	#6,d0
00015492 0838 0000 D022             		btst	#0,($FFFFD022).w
00015498 6700                       		beq.s	loc_13FF2
0001549A 4440                       		neg.w	d0
0001549C 137C 0040 0026             		move.b	#$40,$26(a1)
000154A2                            
000154A2                            loc_13FF2:
000154A2 D169 0008                  		add.w	d0,8(a1)
000154A6 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
000154AC 137C 0006 0028             		move.b	#6,$28(a1)
000154B2 4A68 002C                  		tst.w	$2C(a0)
000154B6 6700 0000                  		beq.w	loc_1403E
000154BA 0268 0007 003A             		andi.w	#7,$3A(a0)
000154C0 0668 0000 003A             		addi.w	#0,$3A(a0)
000154C6 3038 D00C                  		move.w	($FFFFD00C).w,d0
000154CA 0440 000C                  		subi.w	#$C,d0
000154CE 3340 000C                  		move.w	d0,$C(a1)
000154D2 4EB9 0000 33AE             		jsr	(RandomNumber).l
000154D8 1340 0026                  		move.b	d0,$26(a1)
000154DC 3038 FE04                  		move.w	($FFFFFE04).w,d0
000154E0 0200 0003                  		andi.b	#3,d0
000154E4 6600                       		bne.s	loc_14082
000154E6 137C 000E 0028             		move.b	#$E,$28(a1)
000154EC 6000                       		bra.s	loc_14082
000154EE                            ; ===========================================================================
000154EE                            
000154EE                            loc_1403E:
000154EE 0828 0007 0036             		btst	#7,$36(a0)
000154F4 6700                       		beq.s	loc_14082
000154F6 3438 FE14                  		move.w	($FFFFFE14).w,d2
000154FA E24A                       		lsr.w	#1,d2
000154FC 4EB9 0000 33AE             		jsr	(RandomNumber).l
00015502 0240 0003                  		andi.w	#3,d0
00015506 6600                       		bne.s	loc_1406A
00015508 08E8 0006 0036             		bset	#6,$36(a0)
0001550E 6600                       		bne.s	loc_14082
00015510 1342 0028                  		move.b	d2,$28(a1)
00015514 337C 001C 0038             		move.w	#$1C,$38(a1)
0001551A                            
0001551A                            loc_1406A:
0001551A 4A28 0034                  		tst.b	$34(a0)
0001551E 6600                       		bne.s	loc_14082
00015520 08E8 0006 0036             		bset	#6,$36(a0)
00015526 6600                       		bne.s	loc_14082
00015528 1342 0028                  		move.b	d2,$28(a1)
0001552C 337C 001C 0038             		move.w	#$1C,$38(a1)
00015532                            
00015532                            loc_14082:
00015532 5328 0034                  		subq.b	#1,$34(a0)
00015536 6A00                       		bpl.s	locret_1408C
00015538 4268 0036                  		clr.w	$36(a0)
0001553C                            
0001553C                            locret_1408C:
0001553C 4E75                       		rts	
0001553E                            
0001553E                            ; ---------------------------------------------------------------------------
0001553E                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
0001553E                            ; ---------------------------------------------------------------------------
0001553E                            
0001553E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001553E                            
0001553E                            
0001553E                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
0001553E 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00015544                             
00015544                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
00015544                             
00015544 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
00015548                             
00015548 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
0001554E 6600                       		bne.s	Air_GetBgm2	; if not, branch
00015550 43F9 0000 41C6             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00015556 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00015558                             
00015558                            Air_GetBgm2:
00015558 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
0001555E 6600                       		bne.s	Air_GetBgm3	; if not, branch
00015560 43F9 0000 41CC             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00015566 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00015568                             
00015568                            Air_GetBgm3:
00015568 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
0001556E 6600                       		bne.s	Air_GetBgm4	; if not, branch
00015570 43F9 0000 41D2             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00015576 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00015578                             
00015578                            Air_GetBgm4:
00015578 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
0001557E 6600                       		bne.s	Air_PlayMusic	; if not, branch
00015580 43F9 0000 41D8             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00015586                             
00015586                            Air_PlayMusic:
00015586 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
0001558A                             
0001558A                            loc_140A6:
0001558A 4EB9 0000 1470             		jsr	(PlaySound).l
00015590                             
00015590                            ; NineKode ends here
00015590                            
00015590                            loc_140AC:
00015590 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00015596 4238 D372                  		clr.b	($FFFFD372).w
0001559A 4E75                       		rts	
0001559C                            ; End of function ResumeMusic
0001559C                            
0001559C                            ; ===========================================================================
0001559C                            Ani_obj0A:
0001559C                            	include "_anim\obj0A.asm"
0001559C                            ; ---------------------------------------------------------------------------
0001559C                            ; Animation script - countdown numbers and bubbles (LZ)
0001559C                            ; ---------------------------------------------------------------------------
0001559C 0000                       		dc.w byte_140D6-Ani_obj0A
0001559E 0000                       		dc.w byte_140E0-Ani_obj0A
000155A0 0000                       		dc.w byte_140EA-Ani_obj0A
000155A2 0000                       		dc.w byte_140F4-Ani_obj0A
000155A4 0000                       		dc.w byte_140FE-Ani_obj0A
000155A6 0000                       		dc.w byte_14108-Ani_obj0A
000155A8 0000                       		dc.w byte_14112-Ani_obj0A
000155AA 0000                       		dc.w byte_14118-Ani_obj0A
000155AC 0000                       		dc.w byte_14120-Ani_obj0A
000155AE 0000                       		dc.w byte_14128-Ani_obj0A
000155B0 0000                       		dc.w byte_14130-Ani_obj0A
000155B2 0000                       		dc.w byte_14138-Ani_obj0A
000155B4 0000                       		dc.w byte_14140-Ani_obj0A
000155B6 0000                       		dc.w byte_14148-Ani_obj0A
000155B8 0000                       		dc.w byte_1414A-Ani_obj0A
000155BA 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
000155C4 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
000155CE 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
000155D8 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
000155E2 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
000155EC 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
000155F6 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
000155FC 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00015604 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
0001560C 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00015614 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
0001561C 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00015624 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
0001562C 0EFC                       byte_14148:	dc.b $E, $FC
0001562E 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00015634                            		even
00015634                            		even
00015634                            
00015634                            ; ---------------------------------------------------------------------------
00015634                            ; Sprite mappings - drowning countdown numbers (LZ)
00015634                            ; ---------------------------------------------------------------------------
00015634                            Map_obj0A:
00015634                            	include "_maps\obj0A.asm"
00015634                            ; ---------------------------------------------------------------------------
00015634                            ; Sprite mappings - drowning countdown numbers (LZ)
00015634                            ; ---------------------------------------------------------------------------
00015634 0000                       		dc.w byte_14152-Map_obj0A
00015636 01                         byte_14152:	dc.b 1
00015637 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
0001563C                            		even
0001563C                            		even
0001563C                            
0001563C                            ; ===========================================================================
0001563C                            ; ---------------------------------------------------------------------------
0001563C                            ; Object 38 - shield and invincibility stars
0001563C                            ; ---------------------------------------------------------------------------
0001563C                            
0001563C                            Obj38:					; XREF: Obj_Index
0001563C 7000                       		moveq	#0,d0
0001563E 1028 0024                  		move.b	$24(a0),d0
00015642 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00015646 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
0001564A                            ; ===========================================================================
0001564A 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
0001564C 0000                       		dc.w Obj38_Shield-Obj38_Index
0001564E 0000                       		dc.w Obj38_Stars-Obj38_Index
00015650                            ; ===========================================================================
00015650                            
00015650                            Obj38_Main:				; XREF: Obj38_Index
00015650 5428 0024                  		addq.b	#2,$24(a0)
00015654 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
0001565C 117C 0004 0001             		move.b	#4,1(a0)
00015662 117C 0001 0018             		move.b	#1,$18(a0)
00015668 117C 0010 0019             		move.b	#$10,$19(a0)
0001566E 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00015672 6600                       		bne.s	Obj38_DoStars	; if not, branch
00015674 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
0001567A 4E75                       		rts	
0001567C                            ; ===========================================================================
0001567C                            
0001567C                            Obj38_DoStars:
0001567C 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00015680 317C 055C 0002             		move.w	#$55C,2(a0)
00015686 4E75                       		rts	
00015688                            ; ===========================================================================
00015688                            
00015688                            Obj38_Shield:				; XREF: Obj38_Index
00015688 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
0001568C 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
0001568E 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00015692 6700                       		beq.s	Obj38_Delete	; if not, branch
00015694 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
0001569A 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
000156A0 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000156A6 43F9 0000 0000             		lea	(Ani_obj38).l,a1
000156AC 4EB9 0000 B222             		jsr	AnimateSprite
000156B2 4EFA 8A5C                  		jmp	DisplaySprite
000156B6                            ; ===========================================================================
000156B6                            
000156B6                            Obj38_RmvShield:
000156B6 4E75                       		rts	
000156B8                            ; ===========================================================================
000156B8                            
000156B8                            Obj38_Delete:
000156B8 4EFA 8A92                  		jmp	DeleteObject
000156BC                            ; ===========================================================================
000156BC                            
000156BC                            Obj38_Stars:				; XREF: Obj38_Index
000156BC 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000156C0 6700                       		beq.s	Obj38_Delete2	; if not, branch
000156C2 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000156C6 1228 001C                  		move.b	$1C(a0),d1
000156CA 5301                       		subq.b	#1,d1
000156CC 6000                       		bra.s	Obj38_StarTrail
000156CE                            ; ===========================================================================
000156CE E909                       		lsl.b	#4,d1
000156D0 5801                       		addq.b	#4,d1
000156D2 9001                       		sub.b	d1,d0
000156D4 1228 0030                  		move.b	$30(a0),d1
000156D8 9001                       		sub.b	d1,d0
000156DA 5801                       		addq.b	#4,d1
000156DC 0201 000F                  		andi.b	#$F,d1
000156E0 1141 0030                  		move.b	d1,$30(a0)
000156E4 6000                       		bra.s	Obj38_StarTrail2a
000156E6                            ; ===========================================================================
000156E6                            
000156E6                            Obj38_StarTrail:			; XREF: Obj38_Stars
000156E6 E709                       		lsl.b	#3,d1
000156E8 1401                       		move.b	d1,d2
000156EA D201                       		add.b	d1,d1
000156EC D202                       		add.b	d2,d1
000156EE 5801                       		addq.b	#4,d1
000156F0 9001                       		sub.b	d1,d0
000156F2 1228 0030                  		move.b	$30(a0),d1
000156F6 9001                       		sub.b	d1,d0
000156F8 5801                       		addq.b	#4,d1
000156FA 0C01 0018                  		cmpi.b	#$18,d1
000156FE 6500                       		bcs.s	Obj38_StarTrail2
00015700 7200                       		moveq	#0,d1
00015702                            
00015702                            Obj38_StarTrail2:
00015702 1141 0030                  		move.b	d1,$30(a0)
00015706                            
00015706                            Obj38_StarTrail2a:
00015706 43F8 CB00                  		lea	($FFFFCB00).w,a1
0001570A 43F1 0000                  		lea	(a1,d0.w),a1
0001570E 3159 0008                  		move.w	(a1)+,8(a0)
00015712 3159 000C                  		move.w	(a1)+,$C(a0)
00015716 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
0001571C 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00015722 4EB9 0000 B222             		jsr	AnimateSprite
00015728 4EFA 89E6                  		jmp	DisplaySprite
0001572C                            ; ===========================================================================
0001572C                            
0001572C                            Obj38_Delete2:				; XREF: Obj38_Stars
0001572C 4EFA 8A1E                  		jmp	DeleteObject
00015730                            ; ===========================================================================
00015730                            ; ---------------------------------------------------------------------------
00015730                            ; Object 4A - special stage entry from beta
00015730                            ; ---------------------------------------------------------------------------
00015730                            
00015730                            Obj4A:					; XREF: Obj_Index
00015730 7000                       		moveq	#0,d0
00015732 1028 0024                  		move.b	$24(a0),d0
00015736 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
0001573A 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
0001573E                            ; ===========================================================================
0001573E 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00015740 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00015742 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00015744                            ; ===========================================================================
00015744                            
00015744                            Obj4A_Main:				; XREF: Obj4A_Index
00015744 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00015748 6700                       		beq.s	Obj4A_Main2	; if yes, branch
0001574A 4E75                       		rts	
0001574C                            ; ===========================================================================
0001574C                            
0001574C                            Obj4A_Main2:
0001574C 5428 0024                  		addq.b	#2,$24(a0)
00015750 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00015758 117C 0004 0001             		move.b	#4,1(a0)
0001575E 117C 0001 0018             		move.b	#1,$18(a0)
00015764 117C 0038 0019             		move.b	#$38,$19(a0)
0001576A 317C 0541 0002             		move.w	#$541,2(a0)
00015770 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00015776                            
00015776                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00015776 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
0001577C 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00015782 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00015788 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
0001578E 4EB9 0000 B222             		jsr	AnimateSprite
00015794 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001579A 6600                       		bne.s	Obj4A_Display
0001579C 4A38 D000                  		tst.b	($FFFFD000).w
000157A0 6700                       		beq.s	Obj4A_Display
000157A2 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
000157A8 303C 00A8                  		move.w	#$A8,d0
000157AC 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
000157B2                            
000157B2                            Obj4A_Display:
000157B2 4EFA 895C                  		jmp	DisplaySprite
000157B6                            ; ===========================================================================
000157B6                            
000157B6                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
000157B6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
000157BA 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
000157BC 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000157C2 4EFA 8988                  		jmp	DeleteObject
000157C6                            ; ===========================================================================
000157C6                            
000157C6                            Obj4A_Wait:
000157C6 4E75                       		rts	
000157C8                            ; ===========================================================================
000157C8                            	include "_inc\sub RememberState.asm"
000157C8                            ; ---------------------------------------------------------------------------
000157C8                            ; Subroutine to remember whether an object is destroyed/collected
000157C8                            ; ---------------------------------------------------------------------------
000157C8                            
000157C8                            RememberState:
000157E6 6000 8928                  		bra.w	DisplaySprite
000157EA                            
000157EA                            	@offscreen:
000157EA 45F8 FC00                  		lea	(v_objstate).w,a2
000157EE 7000                       		moveq	#0,d0
000157F0 1028 0023                  		move.b	obRespawnNo(a0),d0
000157F4 6700                       		beq.s	@delete
000157F6 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000157FC                            
000157FC                            	@delete:
000157FC 6000 894E                  		bra.w	DeleteObject
000157FC 6000 894E                  		bra.w	DeleteObject
00015800 =00000034                  id_Roll:	equ (SonAni_Roll-SonicAniData)/2	; 2
00015800 0000 0000                  ptr_sndCC:	dc.l SoundCC
00015804                            ani_booster:
00015804                            	include "_anim\speedbooster.asm"
00015804                            ; ---------------------------------------------------------------------------
00015804                            ; Animation script - Sonic 4's Speed Booster
00015804                            ; ---------------------------------------------------------------------------
00015804 0000                       		dc.w idle-Ani_Booster
00015806 0101 0101 FE01             idle:	dc.b 1,	1, 1, 1, $FE, 1
0001580C                            		even
0001580C                            		even
0001580C                            speedboosters:
0001580C                            	include "_inc\speedbooster.asm"
0001580C                            ; ----------------------------------------------------------------------------
0001580C                            ; Object 06 - Booster things from CPZ
0001580C                            ; ----------------------------------------------------------------------------
0001580C                            
0001580C                            		; DATA XREF: ROM:0001600Co
0001580C 7000                       		moveq	#0,d0
0001580E 1028 0024                  		move.b	obRoutine(a0),d0
00015812 323B 0000                  		move.w	Booster_Index(pc,d0.w),d1
00015816 4EFB 1000                  		jmp	Booster_Index(pc,d1.w)
0001581A                            ; ===========================================================================
0001581A 0000                       Booster_Index:	dc.w Booster_Init-Booster_Index; 0 ; DATA XREF: h+B346o h+B348o
0001581C 0000                       		dc.w Booster_Loop-Booster_Index; 1
0001581E 1000                       word_222BE:	dc.w $1000		; 0
00015820 0A00                       		dc.w  $A00		; 1
00015822                            ; ===========================================================================
00015822                            
00015822                            Booster_Init:				; DATA XREF: h+B346o
00015822 5428 0024                  		addq.b	#2,obRoutine(a0)
00015826 217C 0000 0000 0004        		move.l	#Map_SpeedBooster,obMap(a0)
0001582E                            		
0001582E                            		;move.w	#$372,obGfx(a0) ; SYZ2 specific code
0001582E                            		;cmpi.w	#(id_SYZ<<8)+1,(v_zone).w ; check if level is SY2
0001582E                            		;beq.s	@Continue	; if yes, branch
0001582E 317C 5000 0002             		move.w	#$0400*20,obGfx(a0) ; 0 = palette line, XXX = Tile address (VRAM address / $20)
00015834                            		
00015834                            	@Continue:	
00015834                            		;bsr.w	loc_22402
00015834 0028 0004 0001             		ori.b	#4,obRender(a0)
0001583A 117C 0020 0019             		move.b	#$20,obActWid(a0) ; ' '
00015840 117C 0001 0018             		move.b	#1,obPriority(a0)
00015846 1028 0028                  		move.b	obSubtype(a0),d0
0001584A 0240 0002                  		andi.w	#2,d0
0001584E 317B 00CE 0030             		move.w	word_222BE(pc,d0.w),$30(a0)
00015854                            
00015854                            Booster_Loop:				; DATA XREF: h+B346o
00015854                            		;move.b	(obTimeFrame).w,obFrame(a0)
00015854                            		;andi.b	#2,d0
00015854                            		;move.b	d0,obFrame(a0)
00015854                            		;move.b	(v_ani1_frame).w,obFrame(a0)
00015854 3028 0008                  		move.w	obX(a0),d0
00015858 3200                       		move.w	d0,d1
0001585A 0440 0010                  		subi.w	#$10,d0
0001585E 0641 0010                  		addi.w	#$10,d1
00015862 3428 000C                  		move.w	obY(a0),d2
00015866 3602                       		move.w	d2,d3
00015868 0442 0010                  		subi.w	#$10,d2
0001586C 0643 0010                  		addi.w	#$10,d3
00015870                            		;lea	($FFFFB000).w,a1
00015870 43F8 D000                  		lea	(v_player).w,a1
00015874 0829 0001 0022             		btst	#1,obStatus(a1)
0001587A 6600                       		bne.s	loc_22384
0001587C 3829 0008                  		move.w	obX(a1),d4
00015880 B840                       		cmp.w	d0,d4
00015882 6500 0000                  		bcs.w	loc_22384
00015886 B841                       		cmp.w	d1,d4
00015888 6400 0000                  		bcc.w	loc_22384
0001588C 3829 000C                  		move.w	obY(a1),d4
00015890 B842                       		cmp.w	d2,d4
00015892 6500 0000                  		bcs.w	loc_22384
00015896 B843                       		cmp.w	d3,d4
00015898 6400 0000                  		bcc.w	loc_22384
0001589C 3F00                       		move.w	d0,-(sp)
0001589E 6100 0000                  		bsr.w	loc_22388
000158A2 301F                       		move.w	(sp)+,d0
000158A4                            		;bsr.w	loc_22388
000158A4                            
000158A4                            ;loc_22354:				; CODE XREF: h+B3B6j h+B3BEj ...
000158A4                            		;lea	(v_player).w,a1 ; a1=character
000158A4                            		;btst	#1,$22(a1)
000158A4                            		;bne.s	loc_22384
000158A4                            		;move.w	8(a1),d4
000158A4                            		;cmp.w	d0,d4
000158A4                            		;bcs.w	loc_22384
000158A4                            		;cmp.w	d1,d4
000158A4                            		;bcc.w	loc_22384
000158A4                            		;move.w	$C(a1),d4
000158A4                            		;cmp.w	d2,d4
000158A4                            		;bcs.w	loc_22384
000158A4                            		;cmp.w	d3,d4
000158A4                            		;bcc.w	loc_22384
000158A4                            		;bsr.w	loc_22388
000158A4                            
000158A4                            loc_22384:				; CODE XREF: h+B3EAj h+B3F2j ...
000158A4 4EFA A92C                  		jmp	MarkObjGone		;jsr	loc_223FC
000158A8                            ; ===========================================================================
000158A8                            
000158A8                            loc_22388:				; CODE XREF: h+B3DAp h+B40Cp
000158A8 3029 0010                  		move.w	obVelX(a1),d0
000158AC 0828 0000 0022             		btst	#0,obStatus(a0)
000158B2 6700                       		beq.s	loc_22396
000158B4 4440                       		neg.w	d0
000158B6                            
000158B6                            loc_22396:				; CODE XREF: h+B41Ej
000158B6 0C40 1000                  		cmpi.w	#$1000,d0 			; is the character already going super fast?
000158BA 6C00                       		bge.s	loc_223D8 			; if yes, branch to not change the speed
000158BC 3368 0030 0010             		move.w	$30(a0),obVelX(a1)  ; make the character go super fast
000158C2 08A9 0000 0022             		bclr	#0,obStatus(a1)		; turn him right
000158C8 0828 0000 0022             		btst	#0,obStatus(a0)		; was that the correct direction?
000158CE 6700                       		beq.s	loc_223BA 			; if yes, branch
000158D0 08E9 0000 0022             		bset	#0,obStatus(a1)		; turn him left
000158D6 4469 0010                  		neg.w	obVelX(a1)			; make the boosting direction left
000158DA                            
000158DA                            loc_223BA:				; CODE XREF: h+B43Aj
000158DA                            		;move.w	#$F,$2E(a1)
000158DA 3369 0010 0014             		move.w	obVelX(a1),obInertia(a1)
000158E0 08A8 0005 0022             		bclr	#5,obStatus(a0)
000158E6 08A8 0006 0022             		bclr	#6,obStatus(a0)
000158EC 08A9 0005 0022             		bclr	#5,obStatus(a1)
000158F2                            		
000158F2                            		;addq.w	#5,obY(a1)
000158F2                            
000158F2                            loc_223D8:				; CODE XREF: h+B426j
000158F2                            		;move.w	#$D1,d0	; 'Ì'
000158F2                            		;jmp	(play_SFX).l
000158F2                            ;		bset	#2,obStatus(a1)		;set rolling bit
000158F2                            ;		move.b	#$E,obHeight(a1) 	; change hitbox
000158F2                            ;		move.b	#7,obWidth(a1)	  	; change hitbox
000158F2                            ;		move.b	#id_Roll,obAnim(a1) ; use "rolling" animation
000158F2 303C 00D1                  		move.w	#$D1,d0
000158F6 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play spring sound
000158FC                            ; ===========================================================================
000158FC                            ; -------------------------------------------------------------------------------
000158FC                            ; sprite mappings
000158FC                            ; -------------------------------------------------------------------------------
000158FC                            Map_SpeedBooster:	incbin "_maps/SpeedBooster.asm"
00015AD6                            Nem_SpeedBooster:	incbin "artnem/speedbooster.bin"
00015CCD                            ; ===========================================================================
00015CCD                            
00015CCD                            ;loc_223FC:				; CODE XREF: h+B410j	
00015CCD                            ;       out_of_range    DeleteObject
00015CCD                            ;		lea	(Ani_Eggman).l,a1
00015CCD                            ;		jsr	AnimateSprite
00015CCD                            ;		bra.w	RememberState
00015CCD                            ;		even
00015CCD                            ;		even
00015CCD                            ; ---------------------------------------------------------------------------
00015CCD                            ; Object 08 - water splash (LZ)
00015CCD                            ; ---------------------------------------------------------------------------
00015CCD                            
00015CCD                            Obj08:					; XREF: Obj_Index
00015CCE 0070 00                    		moveq	#0,d0
00015CD0 1028 0024                  		move.b	$24(a0),d0
00015CD4 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00015CD8 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00015CDC                            ; ===========================================================================
00015CDC 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00015CDE 0000                       		dc.w Obj08_Display-Obj08_Index
00015CE0 0000                       		dc.w Obj08_Delete-Obj08_Index
00015CE2                            ; ===========================================================================
00015CE2                            
00015CE2                            Obj08_Main:				; XREF: Obj08_Index
00015CE2 5428 0024                  		addq.b	#2,$24(a0)
00015CE6 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00015CEE 0028 0004 0001             		ori.b	#4,1(a0)
00015CF4 117C 0001 0018             		move.b	#1,$18(a0)
00015CFA 117C 0010 0019             		move.b	#$10,$19(a0)
00015D00 317C 4259 0002             		move.w	#$4259,2(a0)
00015D06 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00015D0C                            
00015D0C                            Obj08_Display:				; XREF: Obj08_Index
00015D0C 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00015D12 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00015D18 4EB9 0000 B222             		jsr	AnimateSprite
00015D1E 4EFA 83F0                  		jmp	DisplaySprite
00015D22                            ; ===========================================================================
00015D22                            
00015D22                            Obj08_Delete:				; XREF: Obj08_Index
00015D22 4EFA 8428                  		jmp	DeleteObject	; delete when animation	is complete
00015D26                            ; ===========================================================================
00015D26                            Ani_obj38:
00015D26                            	include "_anim\obj38.asm"
00015D26                            ; ---------------------------------------------------------------------------
00015D26                            ; Animation script - shield and invincibility stars
00015D26                            ; ---------------------------------------------------------------------------
00015D26 0000                       		dc.w byte_14356-Ani_obj38
00015D28 0000                       		dc.w byte_1435E-Ani_obj38
00015D2A 0000                       		dc.w byte_14364-Ani_obj38
00015D2C 0000                       		dc.w byte_1437E-Ani_obj38
00015D2E 0000                       		dc.w byte_14398-Ani_obj38
00015D30 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00015D38 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00015D3E 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00015D4F 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00015D58 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00015D69 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00015D72 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00015D83 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00015D8C                            		even
00015D8C                            		even
00015D8C                            
00015D8C                            ; ---------------------------------------------------------------------------
00015D8C                            ; Sprite mappings - shield and invincibility stars
00015D8C                            ; ---------------------------------------------------------------------------
00015D8C                            Map_obj38:
00015D8C                            	include "_maps\obj38.asm"
00015D8C                            ; ---------------------------------------------------------------------------
00015D8C                            ; Sprite mappings - shield and invincibility stars
00015D8C                            ; ---------------------------------------------------------------------------
00015D8C 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00015D90 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00015D94 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00015D98 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00015D9C 04                         byte_143C2:	dc.b 4
00015D9D E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00015DA2 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00015DA7 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00015DAC 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00015DB1 04                         byte_143D7:	dc.b 4
00015DB2 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00015DB7 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00015DBC 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00015DC1 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00015DC6 04                         byte_143EC:	dc.b 4
00015DC7 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00015DCC E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00015DD1 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00015DD6 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00015DDB 04                         byte_14401:	dc.b 4
00015DDC E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00015DE1 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00015DE6 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00015DEB 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00015DF0 04                         byte_14416:	dc.b 4
00015DF1 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00015DF6 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00015DFB 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00015E00 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00015E05 04                         byte_1442B:	dc.b 4
00015E06 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00015E0B E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00015E10 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00015E15 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00015E1A 04                         byte_14440:	dc.b 4
00015E1B E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00015E20 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00015E25 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00015E2A 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00015E30 00                         		even
00015E30 00                         		even
00015E30                            
00015E30                            Ani_obj4A:
00015E30                            	include "_anim\obj4A.asm"
00015E30                            ; ---------------------------------------------------------------------------
00015E30                            ; Animation script - special stage entry effect from beta
00015E30                            ; ---------------------------------------------------------------------------
00015E30 0000                       		dc.w byte_14458-Ani_obj4A
00015E32 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00015E46                            		even
00015E46                            		even
00015E46                            
00015E46                            ; ---------------------------------------------------------------------------
00015E46                            ; Sprite mappings - special stage entry	from beta
00015E46                            ; ---------------------------------------------------------------------------
00015E46                            Map_obj4A:
00015E46                            	include "_maps\obj4A.asm"
00015E46                            ; ---------------------------------------------------------------------------
00015E46                            ; Sprite mappings - special stage entry	from beta
00015E46                            ; ---------------------------------------------------------------------------
00015E46 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00015E4A 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00015E4E 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00015E52 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00015E56 03                         byte_1447C:	dc.b 3
00015E57 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00015E5C 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00015E61 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00015E66 03                         byte_1448C:	dc.b 3
00015E67 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00015E6C 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00015E71 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00015E76 05                         byte_1449C:	dc.b 5
00015E77 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00015E7C EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00015E81 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00015E86 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00015E8B 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00015E90 09                         byte_144B6:	dc.b 9
00015E91 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00015E96 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00015E9B 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00015EA0 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00015EA5 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00015EAA F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00015EAF F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00015EB4 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00015EB9 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00015EBE 12                         byte_144E4:	dc.b $12
00015EBF 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00015EC4 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00015EC9 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00015ECE 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00015ED3 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00015ED8 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00015EDD 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00015EE2 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00015EE7 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00015EEC 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00015EF1 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00015EF6 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00015EFB F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00015F00 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00015F05 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00015F0A F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00015F0F 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00015F14 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00015F19 11                         byte_1453F:	dc.b $11
00015F1A F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00015F1F F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00015F24 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00015F29 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00015F2E 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00015F33 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00015F38 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00015F3D F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00015F42 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00015F47 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00015F4C 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00015F51 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00015F56 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00015F5B 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00015F60 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00015F65 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00015F6A 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00015F6F 09                         byte_14595:	dc.b 9
00015F70 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00015F75 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00015F7A 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00015F7F 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00015F84 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00015F89 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00015F8E 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00015F93 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00015F98 04                         		dc.b 4
00015F99 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00015F9E                            		even
00015F9E                            		even
00015F9E                            
00015F9E                            Ani_obj08:
00015F9E                            	include "_anim\obj08.asm"
00015F9E                            ; ---------------------------------------------------------------------------
00015F9E                            ; Animation script - water splash (LZ)
00015F9E                            ; ---------------------------------------------------------------------------
00015F9E 0000                       		dc.w byte_145C6-Ani_obj08
00015FA0 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00015FA6                            		even
00015FA6                            		even
00015FA6                            
00015FA6                            ; ---------------------------------------------------------------------------
00015FA6                            ; Sprite mappings - water splash (LZ)
00015FA6                            ; ---------------------------------------------------------------------------
00015FA6                            Map_obj08:
00015FA6                            	include "_maps\obj08.asm"
00015FA6                            ; ---------------------------------------------------------------------------
00015FA6                            ; Sprite mappings - water splash (LZ)
00015FA6                            ; ---------------------------------------------------------------------------
00015FA6 0000                       		dc.w byte_145D2-Map_obj08
00015FA8 0000                       		dc.w byte_145DD-Map_obj08
00015FAA 0000                       		dc.w byte_145E8-Map_obj08
00015FAC 02                         byte_145D2:	dc.b 2
00015FAD F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00015FB2 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00015FB7 02                         byte_145DD:	dc.b 2
00015FB8 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00015FBD EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00015FC2 01                         byte_145E8:	dc.b 1
00015FC3 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00015FC8                            		even
00015FC8                            		even
00015FC8                            
00015FC8                            ; ---------------------------------------------------------------------------
00015FC8                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00015FC8                            ; ---------------------------------------------------------------------------
00015FC8                            
00015FC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015FC8                            
00015FC8                            
00015FC8                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00015FC8 0828 0003 0022             		btst	#3,$22(a0)
00015FCE 6700                       		beq.s	loc_14602
00015FD0 7000                       		moveq	#0,d0
00015FD2 11C0 F768                  		move.b	d0,($FFFFF768).w
00015FD6 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015FDA 4E75                       		rts	
00015FDC                            ; ===========================================================================
00015FDC                            
00015FDC                            loc_14602:
00015FDC 7003                       		moveq	#3,d0
00015FDE 11C0 F768                  		move.b	d0,($FFFFF768).w
00015FE2 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015FE6 1028 0026                  		move.b	$26(a0),d0
00015FEA 0600 0020                  		addi.b	#$20,d0
00015FEE 6A00                       		bpl.s	loc_14624
00015FF0 1028 0026                  		move.b	$26(a0),d0
00015FF4 6A00                       		bpl.s	loc_1461E
00015FF6 5300                       		subq.b	#1,d0
00015FF8                            
00015FF8                            loc_1461E:
00015FF8 0600 0020                  		addi.b	#$20,d0
00015FFC 6000                       		bra.s	loc_14630
00015FFE                            ; ===========================================================================
00015FFE                            
00015FFE                            loc_14624:
00015FFE 1028 0026                  		move.b	$26(a0),d0
00016002 6A00                       		bpl.s	loc_1462C
00016004 5200                       		addq.b	#1,d0
00016006                            
00016006                            loc_1462C:
00016006 0600 001F                  		addi.b	#$1F,d0
0001600A                            
0001600A                            loc_14630:
0001600A 0200 00C0                  		andi.b	#$C0,d0
0001600E 0C00 0040                  		cmpi.b	#$40,d0
00016012 6700 0000                  		beq.w	Sonic_WalkVertL
00016016 0C00 0080                  		cmpi.b	#$80,d0
0001601A 6700 0000                  		beq.w	Sonic_WalkCeiling
0001601E 0C00 00C0                  		cmpi.b	#$C0,d0
00016022 6700 0000                  		beq.w	Sonic_WalkVertR
00016026 3428 000C                  		move.w	$C(a0),d2
0001602A 3628 0008                  		move.w	8(a0),d3
0001602E 7000                       		moveq	#0,d0
00016030 1028 0016                  		move.b	$16(a0),d0
00016034 4880                       		ext.w	d0
00016036 D440                       		add.w	d0,d2
00016038 1028 0017                  		move.b	$17(a0),d0
0001603C 4880                       		ext.w	d0
0001603E D640                       		add.w	d0,d3
00016040 49F8 F768                  		lea	($FFFFF768).w,a4
00016044 367C 0010                  		movea.w	#$10,a3
00016048 3C3C 0000                  		move.w	#0,d6
0001604C 7A0D                       		moveq	#$D,d5
0001604E 6100 0000                  		bsr.w	FindFloor
00016052 3F01                       		move.w	d1,-(sp)
00016054 3428 000C                  		move.w	$C(a0),d2
00016058 3628 0008                  		move.w	8(a0),d3
0001605C 7000                       		moveq	#0,d0
0001605E 1028 0016                  		move.b	$16(a0),d0
00016062 4880                       		ext.w	d0
00016064 D440                       		add.w	d0,d2
00016066 1028 0017                  		move.b	$17(a0),d0
0001606A 4880                       		ext.w	d0
0001606C 4440                       		neg.w	d0
0001606E D640                       		add.w	d0,d3
00016070 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016074 367C 0010                  		movea.w	#$10,a3
00016078 3C3C 0000                  		move.w	#0,d6
0001607C 7A0D                       		moveq	#$D,d5
0001607E 6100 0000                  		bsr.w	FindFloor
00016082 301F                       		move.w	(sp)+,d0
00016084 6100 0000                  		bsr.w	Sonic_Angle
00016088 4A41                       		tst.w	d1
0001608A 6700                       		beq.s	locret_146BE
0001608C 6A00                       		bpl.s	loc_146C0
0001608E 0C41 FFF2                  		cmpi.w	#-$E,d1
00016092 6D00                       		blt.s	locret_146E6
00016094 D368 000C                  		add.w	d1,$C(a0)
00016098                            
00016098                            locret_146BE:
00016098 4E75                       		rts	
0001609A                            ; ===========================================================================
0001609A                            
0001609A                            loc_146C0:
0001609A 0C41 000E                  		cmpi.w	#$E,d1
0001609E 6E00                       		bgt.s	loc_146CC
000160A0                            
000160A0                            loc_146C6:
000160A0 D368 000C                  		add.w	d1,$C(a0)
000160A4 4E75                       		rts	
000160A6                            ; ===========================================================================
000160A6                            
000160A6                            loc_146CC:
000160A6 4A28 0038                  		tst.b	$38(a0)
000160AA 66F4                       		bne.s	loc_146C6
000160AC 08E8 0001 0022             		bset	#1,$22(a0)
000160B2 08A8 0005 0022             		bclr	#5,$22(a0)
000160B8 117C 0001 001D             		move.b	#1,$1D(a0)
000160BE 4E75                       		rts	
000160C0                            ; ===========================================================================
000160C0                            
000160C0                            locret_146E6:
000160C0 4E75                       		rts	
000160C2                            ; End of function Sonic_AnglePos
000160C2                            
000160C2                            ; ===========================================================================
000160C2 2428 0008                  		move.l	8(a0),d2
000160C6 3028 0010                  		move.w	$10(a0),d0
000160CA 48C0                       		ext.l	d0
000160CC E180                       		asl.l	#8,d0
000160CE 9480                       		sub.l	d0,d2
000160D0 2142 0008                  		move.l	d2,8(a0)
000160D4 303C 0038                  		move.w	#$38,d0
000160D8 48C0                       		ext.l	d0
000160DA E180                       		asl.l	#8,d0
000160DC 9680                       		sub.l	d0,d3
000160DE 2143 000C                  		move.l	d3,$C(a0)
000160E2 4E75                       		rts	
000160E4                            ; ===========================================================================
000160E4                            
000160E4                            locret_1470A:
000160E4 4E75                       		rts	
000160E6                            ; ===========================================================================
000160E6 2628 000C                  		move.l	$C(a0),d3
000160EA 3028 0012                  		move.w	$12(a0),d0
000160EE 0440 0038                  		subi.w	#$38,d0
000160F2 3140 0012                  		move.w	d0,$12(a0)
000160F6 48C0                       		ext.l	d0
000160F8 E180                       		asl.l	#8,d0
000160FA 9680                       		sub.l	d0,d3
000160FC 2143 000C                  		move.l	d3,$C(a0)
00016100 4E75                       		rts	
00016102 4E75                       		rts	
00016104                            ; ===========================================================================
00016104 2428 0008                  		move.l	8(a0),d2
00016108 2628 000C                  		move.l	$C(a0),d3
0001610C 3028 0010                  		move.w	$10(a0),d0
00016110 48C0                       		ext.l	d0
00016112 E180                       		asl.l	#8,d0
00016114 9480                       		sub.l	d0,d2
00016116 3028 0012                  		move.w	$12(a0),d0
0001611A 48C0                       		ext.l	d0
0001611C E180                       		asl.l	#8,d0
0001611E 9680                       		sub.l	d0,d3
00016120 2142 0008                  		move.l	d2,8(a0)
00016124 2143 000C                  		move.l	d3,$C(a0)
00016128 4E75                       		rts	
0001612A                            
0001612A                            ; ---------------------------------------------------------------------------
0001612A                            ; Subroutine to	change Sonic's angle as he walks along the floor
0001612A                            ; ---------------------------------------------------------------------------
0001612A                            
0001612A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001612A                            
0001612A                            
0001612A                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
0001612A 1438 F76A                  		move.b	($FFFFF76A).w,d2
0001612E B240                       		cmp.w	d0,d1
00016130 6F00                       		ble.s	loc_1475E
00016132 1438 F768                  		move.b	($FFFFF768).w,d2
00016136 3200                       		move.w	d0,d1
00016138                            
00016138                            loc_1475E:
00016138 0802 0000                  		btst	#0,d2
0001613C 6600                       		bne.s	loc_1476A
0001613E 1142 0026                  		move.b	d2,$26(a0)
00016142 4E75                       		rts	
00016144                            ; ===========================================================================
00016144                            
00016144                            loc_1476A:
00016144 1428 0026                  		move.b	$26(a0),d2
00016148 0602 0020                  		addi.b	#$20,d2
0001614C 0202 00C0                  		andi.b	#$C0,d2
00016150 1142 0026                  		move.b	d2,$26(a0)
00016154 4E75                       		rts	
00016156                            ; End of function Sonic_Angle
00016156                            
00016156                            ; ---------------------------------------------------------------------------
00016156                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00016156                            ; ---------------------------------------------------------------------------
00016156                            
00016156                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016156                            
00016156                            
00016156                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00016156 3428 000C                  		move.w	$C(a0),d2
0001615A 3628 0008                  		move.w	8(a0),d3
0001615E 7000                       		moveq	#0,d0
00016160 1028 0017                  		move.b	$17(a0),d0
00016164 4880                       		ext.w	d0
00016166 4440                       		neg.w	d0
00016168 D440                       		add.w	d0,d2
0001616A 1028 0016                  		move.b	$16(a0),d0
0001616E 4880                       		ext.w	d0
00016170 D640                       		add.w	d0,d3
00016172 49F8 F768                  		lea	($FFFFF768).w,a4
00016176 367C 0010                  		movea.w	#$10,a3
0001617A 3C3C 0000                  		move.w	#0,d6
0001617E 7A0D                       		moveq	#$D,d5
00016180 6100 0000                  		bsr.w	FindWall
00016184 3F01                       		move.w	d1,-(sp)
00016186 3428 000C                  		move.w	$C(a0),d2
0001618A 3628 0008                  		move.w	8(a0),d3
0001618E 7000                       		moveq	#0,d0
00016190 1028 0017                  		move.b	$17(a0),d0
00016194 4880                       		ext.w	d0
00016196 D440                       		add.w	d0,d2
00016198 1028 0016                  		move.b	$16(a0),d0
0001619C 4880                       		ext.w	d0
0001619E D640                       		add.w	d0,d3
000161A0 49F8 F76A                  		lea	($FFFFF76A).w,a4
000161A4 367C 0010                  		movea.w	#$10,a3
000161A8 3C3C 0000                  		move.w	#0,d6
000161AC 7A0D                       		moveq	#$D,d5
000161AE 6100 0000                  		bsr.w	FindWall
000161B2 301F                       		move.w	(sp)+,d0
000161B4 6100 FF74                  		bsr.w	Sonic_Angle
000161B8 4A41                       		tst.w	d1
000161BA 6700                       		beq.s	locret_147F0
000161BC 6A00                       		bpl.s	loc_147F2
000161BE 0C41 FFF2                  		cmpi.w	#-$E,d1
000161C2 6D00 FF20                  		blt.w	locret_1470A
000161C6 D368 0008                  		add.w	d1,8(a0)
000161CA                            
000161CA                            locret_147F0:
000161CA 4E75                       		rts	
000161CC                            ; ===========================================================================
000161CC                            
000161CC                            loc_147F2:
000161CC 0C41 000E                  		cmpi.w	#$E,d1
000161D0 6E00                       		bgt.s	loc_147FE
000161D2                            
000161D2                            loc_147F8:
000161D2 D368 0008                  		add.w	d1,8(a0)
000161D6 4E75                       		rts	
000161D8                            ; ===========================================================================
000161D8                            
000161D8                            loc_147FE:
000161D8 4A28 0038                  		tst.b	$38(a0)
000161DC 66F4                       		bne.s	loc_147F8
000161DE 08E8 0001 0022             		bset	#1,$22(a0)
000161E4 08A8 0005 0022             		bclr	#5,$22(a0)
000161EA 117C 0001 001D             		move.b	#1,$1D(a0)
000161F0 4E75                       		rts	
000161F2                            ; End of function Sonic_WalkVertR
000161F2                            
000161F2                            ; ---------------------------------------------------------------------------
000161F2                            ; Subroutine allowing Sonic to walk upside-down
000161F2                            ; ---------------------------------------------------------------------------
000161F2                            
000161F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000161F2                            
000161F2                            
000161F2                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
000161F2 3428 000C                  		move.w	$C(a0),d2
000161F6 3628 0008                  		move.w	8(a0),d3
000161FA 7000                       		moveq	#0,d0
000161FC 1028 0016                  		move.b	$16(a0),d0
00016200 4880                       		ext.w	d0
00016202 9440                       		sub.w	d0,d2
00016204 0A42 000F                  		eori.w	#$F,d2
00016208 1028 0017                  		move.b	$17(a0),d0
0001620C 4880                       		ext.w	d0
0001620E D640                       		add.w	d0,d3
00016210 49F8 F768                  		lea	($FFFFF768).w,a4
00016214 367C FFF0                  		movea.w	#-$10,a3
00016218 3C3C 1000                  		move.w	#$1000,d6
0001621C 7A0D                       		moveq	#$D,d5
0001621E 6100 0000                  		bsr.w	FindFloor
00016222 3F01                       		move.w	d1,-(sp)
00016224 3428 000C                  		move.w	$C(a0),d2
00016228 3628 0008                  		move.w	8(a0),d3
0001622C 7000                       		moveq	#0,d0
0001622E 1028 0016                  		move.b	$16(a0),d0
00016232 4880                       		ext.w	d0
00016234 9440                       		sub.w	d0,d2
00016236 0A42 000F                  		eori.w	#$F,d2
0001623A 1028 0017                  		move.b	$17(a0),d0
0001623E 4880                       		ext.w	d0
00016240 9640                       		sub.w	d0,d3
00016242 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016246 367C FFF0                  		movea.w	#-$10,a3
0001624A 3C3C 1000                  		move.w	#$1000,d6
0001624E 7A0D                       		moveq	#$D,d5
00016250 6100 0000                  		bsr.w	FindFloor
00016254 301F                       		move.w	(sp)+,d0
00016256 6100 FED2                  		bsr.w	Sonic_Angle
0001625A 4A41                       		tst.w	d1
0001625C 6700                       		beq.s	locret_14892
0001625E 6A00                       		bpl.s	loc_14894
00016260 0C41 FFF2                  		cmpi.w	#-$E,d1
00016264 6D00 FE5A                  		blt.w	locret_146E6
00016268 9368 000C                  		sub.w	d1,$C(a0)
0001626C                            
0001626C                            locret_14892:
0001626C 4E75                       		rts	
0001626E                            ; ===========================================================================
0001626E                            
0001626E                            loc_14894:
0001626E 0C41 000E                  		cmpi.w	#$E,d1
00016272 6E00                       		bgt.s	loc_148A0
00016274                            
00016274                            loc_1489A:
00016274 9368 000C                  		sub.w	d1,$C(a0)
00016278 4E75                       		rts	
0001627A                            ; ===========================================================================
0001627A                            
0001627A                            loc_148A0:
0001627A 4A28 0038                  		tst.b	$38(a0)
0001627E 66F4                       		bne.s	loc_1489A
00016280 08E8 0001 0022             		bset	#1,$22(a0)
00016286 08A8 0005 0022             		bclr	#5,$22(a0)
0001628C 117C 0001 001D             		move.b	#1,$1D(a0)
00016292 4E75                       		rts	
00016294                            ; End of function Sonic_WalkCeiling
00016294                            
00016294                            ; ---------------------------------------------------------------------------
00016294                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00016294                            ; ---------------------------------------------------------------------------
00016294                            
00016294                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016294                            
00016294                            
00016294                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
00016294 3428 000C                  		move.w	$C(a0),d2
00016298 3628 0008                  		move.w	8(a0),d3
0001629C 7000                       		moveq	#0,d0
0001629E 1028 0017                  		move.b	$17(a0),d0
000162A2 4880                       		ext.w	d0
000162A4 9440                       		sub.w	d0,d2
000162A6 1028 0016                  		move.b	$16(a0),d0
000162AA 4880                       		ext.w	d0
000162AC 9640                       		sub.w	d0,d3
000162AE 0A43 000F                  		eori.w	#$F,d3
000162B2 49F8 F768                  		lea	($FFFFF768).w,a4
000162B6 367C FFF0                  		movea.w	#-$10,a3
000162BA 3C3C 0800                  		move.w	#$800,d6
000162BE 7A0D                       		moveq	#$D,d5
000162C0 6100 0000                  		bsr.w	FindWall
000162C4 3F01                       		move.w	d1,-(sp)
000162C6 3428 000C                  		move.w	$C(a0),d2
000162CA 3628 0008                  		move.w	8(a0),d3
000162CE 7000                       		moveq	#0,d0
000162D0 1028 0017                  		move.b	$17(a0),d0
000162D4 4880                       		ext.w	d0
000162D6 D440                       		add.w	d0,d2
000162D8 1028 0016                  		move.b	$16(a0),d0
000162DC 4880                       		ext.w	d0
000162DE 9640                       		sub.w	d0,d3
000162E0 0A43 000F                  		eori.w	#$F,d3
000162E4 49F8 F76A                  		lea	($FFFFF76A).w,a4
000162E8 367C FFF0                  		movea.w	#-$10,a3
000162EC 3C3C 0800                  		move.w	#$800,d6
000162F0 7A0D                       		moveq	#$D,d5
000162F2 6100 0000                  		bsr.w	FindWall
000162F6 301F                       		move.w	(sp)+,d0
000162F8 6100 FE30                  		bsr.w	Sonic_Angle
000162FC 4A41                       		tst.w	d1
000162FE 6700                       		beq.s	locret_14934
00016300 6A00                       		bpl.s	loc_14936
00016302 0C41 FFF2                  		cmpi.w	#-$E,d1
00016306 6D00 FDDC                  		blt.w	locret_1470A
0001630A 9368 0008                  		sub.w	d1,8(a0)
0001630E                            
0001630E                            locret_14934:
0001630E 4E75                       		rts	
00016310                            ; ===========================================================================
00016310                            
00016310                            loc_14936:
00016310 0C41 000E                  		cmpi.w	#$E,d1
00016314 6E00                       		bgt.s	loc_14942
00016316                            
00016316                            loc_1493C:
00016316 9368 0008                  		sub.w	d1,8(a0)
0001631A 4E75                       		rts	
0001631C                            ; ===========================================================================
0001631C                            
0001631C                            loc_14942:
0001631C 4A28 0038                  		tst.b	$38(a0)
00016320 66F4                       		bne.s	loc_1493C
00016322 08E8 0001 0022             		bset	#1,$22(a0)
00016328 08A8 0005 0022             		bclr	#5,$22(a0)
0001632E 117C 0001 001D             		move.b	#1,$1D(a0)
00016334 4E75                       		rts	
00016336                            ; End of function Sonic_WalkVertL
00016336                            
00016336                            ; ---------------------------------------------------------------------------
00016336                            ; Subroutine to	find which tile	the object is standing on
00016336                            ; ---------------------------------------------------------------------------
00016336                            
00016336                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016336                            
00016336                            
00016336                            Floor_ChkTile:				; XREF: FindFloor; et al
00016336 3002                       		move.w	d2,d0
00016338 E248                       		lsr.w	#1,d0
0001633A 0240 0380                  		andi.w	#$380,d0
0001633E 3203                       		move.w	d3,d1
00016340 E049                       		lsr.w	#8,d1
00016342 0241 007F                  		andi.w	#$7F,d1
00016346 D041                       		add.w	d1,d0
00016348 72FF                       		moveq	#-1,d1
0001634A 43F8 A400                  		lea	($FFFFA400).w,a1
0001634E 1231 0000                  		move.b	(a1,d0.w),d1
00016352 6700                       		beq.s	loc_14996
00016354 6B00                       		bmi.s	loc_1499A
00016356 5301                       		subq.b	#1,d1
00016358 4881                       		ext.w	d1
0001635A EE59                       		ror.w	#7,d1
0001635C 3002                       		move.w	d2,d0
0001635E D040                       		add.w	d0,d0
00016360 0240 01E0                  		andi.w	#$1E0,d0
00016364 D240                       		add.w	d0,d1
00016366 3003                       		move.w	d3,d0
00016368 E648                       		lsr.w	#3,d0
0001636A 0240 001E                  		andi.w	#$1E,d0
0001636E D240                       		add.w	d0,d1
00016370                            
00016370                            loc_14996:
00016370 2241                       		movea.l	d1,a1
00016372 4E75                       		rts	
00016374                            ; ===========================================================================
00016374                            
00016374                            loc_1499A:
00016374 0241 007F                  		andi.w	#$7F,d1
00016378 0828 0006 0001             		btst	#6,1(a0)
0001637E 6700                       		beq.s	loc_149B2
00016380 5241                       		addq.w	#1,d1
00016382 0C41 0029                  		cmpi.w	#$29,d1
00016386 6600                       		bne.s	loc_149B2
00016388 323C 0051                  		move.w	#$51,d1
0001638C                            
0001638C                            loc_149B2:
0001638C 5301                       		subq.b	#1,d1
0001638E EE59                       		ror.w	#7,d1
00016390 3002                       		move.w	d2,d0
00016392 D040                       		add.w	d0,d0
00016394 0240 01E0                  		andi.w	#$1E0,d0
00016398 D240                       		add.w	d0,d1
0001639A 3003                       		move.w	d3,d0
0001639C E648                       		lsr.w	#3,d0
0001639E 0240 001E                  		andi.w	#$1E,d0
000163A2 D240                       		add.w	d0,d1
000163A4 2241                       		movea.l	d1,a1
000163A6 4E75                       		rts	
000163A8                            ; End of function Floor_ChkTile
000163A8                            
000163A8                            
000163A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000163A8                            
000163A8                            
000163A8                            FindFloor:				; XREF: Sonic_AnglePos; et al
000163A8 618C                       		bsr.s	Floor_ChkTile
000163AA 3011                       		move.w	(a1),d0
000163AC 3800                       		move.w	d0,d4
000163AE 0240 07FF                  		andi.w	#$7FF,d0
000163B2 6700                       		beq.s	loc_149DE
000163B4 0B04                       		btst	d5,d4
000163B6 6600                       		bne.s	loc_149EC
000163B8                            
000163B8                            loc_149DE:
000163B8 D44B                       		add.w	a3,d2
000163BA 6100 0000                  		bsr.w	FindFloor2
000163BE 944B                       		sub.w	a3,d2
000163C0 0641 0010                  		addi.w	#$10,d1
000163C4 4E75                       		rts	
000163C6                            ; ===========================================================================
000163C6                            
000163C6                            loc_149EC:
000163C6 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
000163CA 1032 0000                  		move.b	(a2,d0.w),d0
000163CE 0240 00FF                  		andi.w	#$FF,d0
000163D2 67E4                       		beq.s	loc_149DE
000163D4 45F9 0000 0000             		lea	(AngleMap).l,a2
000163DA 18B2 0000                  		move.b	(a2,d0.w),(a4)
000163DE E948                       		lsl.w	#4,d0
000163E0 3203                       		move.w	d3,d1
000163E2 0804 000B                  		btst	#$B,d4
000163E6 6700                       		beq.s	loc_14A12
000163E8 4641                       		not.w	d1
000163EA 4414                       		neg.b	(a4)
000163EC                            
000163EC                            loc_14A12:
000163EC 0804 000C                  		btst	#$C,d4
000163F0 6700                       		beq.s	loc_14A22
000163F2 0614 0040                  		addi.b	#$40,(a4)
000163F6 4414                       		neg.b	(a4)
000163F8 0414 0040                  		subi.b	#$40,(a4)
000163FC                            
000163FC                            loc_14A22:
000163FC 0241 000F                  		andi.w	#$F,d1
00016400 D240                       		add.w	d0,d1
00016402 45F9 0000 0000             		lea	(CollArray1).l,a2
00016408 1032 1000                  		move.b	(a2,d1.w),d0
0001640C 4880                       		ext.w	d0
0001640E BD44                       		eor.w	d6,d4
00016410 0804 000C                  		btst	#$C,d4
00016414 6700                       		beq.s	loc_14A3E
00016416 4440                       		neg.w	d0
00016418                            
00016418                            loc_14A3E:
00016418 4A40                       		tst.w	d0
0001641A 679C                       		beq.s	loc_149DE
0001641C 6B00                       		bmi.s	loc_14A5A
0001641E 0C00 0010                  		cmpi.b	#$10,d0
00016422 6700                       		beq.s	loc_14A66
00016424 3202                       		move.w	d2,d1
00016426 0241 000F                  		andi.w	#$F,d1
0001642A D041                       		add.w	d1,d0
0001642C 323C 000F                  		move.w	#$F,d1
00016430 9240                       		sub.w	d0,d1
00016432 4E75                       		rts	
00016434                            ; ===========================================================================
00016434                            
00016434                            loc_14A5A:
00016434 3202                       		move.w	d2,d1
00016436 0241 000F                  		andi.w	#$F,d1
0001643A D041                       		add.w	d1,d0
0001643C 6A00 FF7A                  		bpl.w	loc_149DE
00016440                            
00016440                            loc_14A66:
00016440 944B                       		sub.w	a3,d2
00016442 6100 0000                  		bsr.w	FindFloor2
00016446 D44B                       		add.w	a3,d2
00016448 0441 0010                  		subi.w	#$10,d1
0001644C 4E75                       		rts	
0001644E                            ; End of function FindFloor
0001644E                            
0001644E                            
0001644E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001644E                            
0001644E                            
0001644E                            FindFloor2:				; XREF: FindFloor
0001644E 6100 FEE6                  		bsr.w	Floor_ChkTile
00016452 3011                       		move.w	(a1),d0
00016454 3800                       		move.w	d0,d4
00016456 0240 07FF                  		andi.w	#$7FF,d0
0001645A 6700                       		beq.s	loc_14A86
0001645C 0B04                       		btst	d5,d4
0001645E 6600                       		bne.s	loc_14A94
00016460                            
00016460                            loc_14A86:
00016460 323C 000F                  		move.w	#$F,d1
00016464 3002                       		move.w	d2,d0
00016466 0240 000F                  		andi.w	#$F,d0
0001646A 9240                       		sub.w	d0,d1
0001646C 4E75                       		rts	
0001646E                            ; ===========================================================================
0001646E                            
0001646E                            loc_14A94:
0001646E 2478 F796                  		movea.l	($FFFFF796).w,a2
00016472 1032 0000                  		move.b	(a2,d0.w),d0
00016476 0240 00FF                  		andi.w	#$FF,d0
0001647A 67E4                       		beq.s	loc_14A86
0001647C 45F9 0000 0000             		lea	(AngleMap).l,a2
00016482 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016486 E948                       		lsl.w	#4,d0
00016488 3203                       		move.w	d3,d1
0001648A 0804 000B                  		btst	#$B,d4
0001648E 6700                       		beq.s	loc_14ABA
00016490 4641                       		not.w	d1
00016492 4414                       		neg.b	(a4)
00016494                            
00016494                            loc_14ABA:
00016494 0804 000C                  		btst	#$C,d4
00016498 6700                       		beq.s	loc_14ACA
0001649A 0614 0040                  		addi.b	#$40,(a4)
0001649E 4414                       		neg.b	(a4)
000164A0 0414 0040                  		subi.b	#$40,(a4)
000164A4                            
000164A4                            loc_14ACA:
000164A4 0241 000F                  		andi.w	#$F,d1
000164A8 D240                       		add.w	d0,d1
000164AA 45F9 0000 0000             		lea	(CollArray1).l,a2
000164B0 1032 1000                  		move.b	(a2,d1.w),d0
000164B4 4880                       		ext.w	d0
000164B6 BD44                       		eor.w	d6,d4
000164B8 0804 000C                  		btst	#$C,d4
000164BC 6700                       		beq.s	loc_14AE6
000164BE 4440                       		neg.w	d0
000164C0                            
000164C0                            loc_14AE6:
000164C0 4A40                       		tst.w	d0
000164C2 679C                       		beq.s	loc_14A86
000164C4 6B00                       		bmi.s	loc_14AFC
000164C6 3202                       		move.w	d2,d1
000164C8 0241 000F                  		andi.w	#$F,d1
000164CC D041                       		add.w	d1,d0
000164CE 323C 000F                  		move.w	#$F,d1
000164D2 9240                       		sub.w	d0,d1
000164D4 4E75                       		rts	
000164D6                            ; ===========================================================================
000164D6                            
000164D6                            loc_14AFC:
000164D6 3202                       		move.w	d2,d1
000164D8 0241 000F                  		andi.w	#$F,d1
000164DC D041                       		add.w	d1,d0
000164DE 6A00 FF80                  		bpl.w	loc_14A86
000164E2 4641                       		not.w	d1
000164E4 4E75                       		rts	
000164E6                            ; End of function FindFloor2
000164E6                            
000164E6                            
000164E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000164E6                            
000164E6                            
000164E6                            FindWall:				; XREF: Sonic_WalkVertR; et al
000164E6 6100 FE4E                  		bsr.w	Floor_ChkTile
000164EA 3011                       		move.w	(a1),d0
000164EC 3800                       		move.w	d0,d4
000164EE 0240 07FF                  		andi.w	#$7FF,d0
000164F2 6700                       		beq.s	loc_14B1E
000164F4 0B04                       		btst	d5,d4
000164F6 6600                       		bne.s	loc_14B2C
000164F8                            
000164F8                            loc_14B1E:
000164F8 D64B                       		add.w	a3,d3
000164FA 6100 0000                  		bsr.w	FindWall2
000164FE 964B                       		sub.w	a3,d3
00016500 0641 0010                  		addi.w	#$10,d1
00016504 4E75                       		rts	
00016506                            ; ===========================================================================
00016506                            
00016506                            loc_14B2C:
00016506 2478 F796                  		movea.l	($FFFFF796).w,a2
0001650A 1032 0000                  		move.b	(a2,d0.w),d0
0001650E 0240 00FF                  		andi.w	#$FF,d0
00016512 67E4                       		beq.s	loc_14B1E
00016514 45F9 0000 0000             		lea	(AngleMap).l,a2
0001651A 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001651E E948                       		lsl.w	#4,d0
00016520 3202                       		move.w	d2,d1
00016522 0804 000C                  		btst	#$C,d4
00016526 6700                       		beq.s	loc_14B5A
00016528 4641                       		not.w	d1
0001652A 0614 0040                  		addi.b	#$40,(a4)
0001652E 4414                       		neg.b	(a4)
00016530 0414 0040                  		subi.b	#$40,(a4)
00016534                            
00016534                            loc_14B5A:
00016534 0804 000B                  		btst	#$B,d4
00016538 6700                       		beq.s	loc_14B62
0001653A 4414                       		neg.b	(a4)
0001653C                            
0001653C                            loc_14B62:
0001653C 0241 000F                  		andi.w	#$F,d1
00016540 D240                       		add.w	d0,d1
00016542 45F9 0000 0000             		lea	(CollArray2).l,a2
00016548 1032 1000                  		move.b	(a2,d1.w),d0
0001654C 4880                       		ext.w	d0
0001654E BD44                       		eor.w	d6,d4
00016550 0804 000B                  		btst	#$B,d4
00016554 6700                       		beq.s	loc_14B7E
00016556 4440                       		neg.w	d0
00016558                            
00016558                            loc_14B7E:
00016558 4A40                       		tst.w	d0
0001655A 679C                       		beq.s	loc_14B1E
0001655C 6B00                       		bmi.s	loc_14B9A
0001655E 0C00 0010                  		cmpi.b	#$10,d0
00016562 6700                       		beq.s	loc_14BA6
00016564 3203                       		move.w	d3,d1
00016566 0241 000F                  		andi.w	#$F,d1
0001656A D041                       		add.w	d1,d0
0001656C 323C 000F                  		move.w	#$F,d1
00016570 9240                       		sub.w	d0,d1
00016572 4E75                       		rts	
00016574                            ; ===========================================================================
00016574                            
00016574                            loc_14B9A:
00016574 3203                       		move.w	d3,d1
00016576 0241 000F                  		andi.w	#$F,d1
0001657A D041                       		add.w	d1,d0
0001657C 6A00 FF7A                  		bpl.w	loc_14B1E
00016580                            
00016580                            loc_14BA6:
00016580 964B                       		sub.w	a3,d3
00016582 6100 0000                  		bsr.w	FindWall2
00016586 D64B                       		add.w	a3,d3
00016588 0441 0010                  		subi.w	#$10,d1
0001658C 4E75                       		rts	
0001658E                            ; End of function FindWall
0001658E                            
0001658E                            
0001658E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001658E                            
0001658E                            
0001658E                            FindWall2:				; XREF: FindWall
0001658E 6100 FDA6                  		bsr.w	Floor_ChkTile
00016592 3011                       		move.w	(a1),d0
00016594 3800                       		move.w	d0,d4
00016596 0240 07FF                  		andi.w	#$7FF,d0
0001659A 6700                       		beq.s	loc_14BC6
0001659C 0B04                       		btst	d5,d4
0001659E 6600                       		bne.s	loc_14BD4
000165A0                            
000165A0                            loc_14BC6:
000165A0 323C 000F                  		move.w	#$F,d1
000165A4 3003                       		move.w	d3,d0
000165A6 0240 000F                  		andi.w	#$F,d0
000165AA 9240                       		sub.w	d0,d1
000165AC 4E75                       		rts	
000165AE                            ; ===========================================================================
000165AE                            
000165AE                            loc_14BD4:
000165AE 2478 F796                  		movea.l	($FFFFF796).w,a2
000165B2 1032 0000                  		move.b	(a2,d0.w),d0
000165B6 0240 00FF                  		andi.w	#$FF,d0
000165BA 67E4                       		beq.s	loc_14BC6
000165BC 45F9 0000 0000             		lea	(AngleMap).l,a2
000165C2 18B2 0000                  		move.b	(a2,d0.w),(a4)
000165C6 E948                       		lsl.w	#4,d0
000165C8 3202                       		move.w	d2,d1
000165CA 0804 000C                  		btst	#$C,d4
000165CE 6700                       		beq.s	loc_14C02
000165D0 4641                       		not.w	d1
000165D2 0614 0040                  		addi.b	#$40,(a4)
000165D6 4414                       		neg.b	(a4)
000165D8 0414 0040                  		subi.b	#$40,(a4)
000165DC                            
000165DC                            loc_14C02:
000165DC 0804 000B                  		btst	#$B,d4
000165E0 6700                       		beq.s	loc_14C0A
000165E2 4414                       		neg.b	(a4)
000165E4                            
000165E4                            loc_14C0A:
000165E4 0241 000F                  		andi.w	#$F,d1
000165E8 D240                       		add.w	d0,d1
000165EA 45F9 0000 0000             		lea	(CollArray2).l,a2
000165F0 1032 1000                  		move.b	(a2,d1.w),d0
000165F4 4880                       		ext.w	d0
000165F6 BD44                       		eor.w	d6,d4
000165F8 0804 000B                  		btst	#$B,d4
000165FC 6700                       		beq.s	loc_14C26
000165FE 4440                       		neg.w	d0
00016600                            
00016600                            loc_14C26:
00016600 4A40                       		tst.w	d0
00016602 679C                       		beq.s	loc_14BC6
00016604 6B00                       		bmi.s	loc_14C3C
00016606 3203                       		move.w	d3,d1
00016608 0241 000F                  		andi.w	#$F,d1
0001660C D041                       		add.w	d1,d0
0001660E 323C 000F                  		move.w	#$F,d1
00016612 9240                       		sub.w	d0,d1
00016614 4E75                       		rts	
00016616                            ; ===========================================================================
00016616                            
00016616                            loc_14C3C:
00016616 3203                       		move.w	d3,d1
00016618 0241 000F                  		andi.w	#$F,d1
0001661C D041                       		add.w	d1,d0
0001661E 6A00 FF80                  		bpl.w	loc_14BC6
00016622 4641                       		not.w	d1
00016624 4E75                       		rts	
00016626                            ; End of function FindWall2
00016626                            
00016626                            ; ---------------------------------------------------------------------------
00016626                            ; Unused floor/wall subroutine - logs something	to do with collision
00016626                            ; ---------------------------------------------------------------------------
00016626                            
00016626                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016626                            
00016626                            
00016626                            FloorLog_Unk:				; XREF: Level
00016626 4E75                       		rts	
00016628                            
00016628 43F9 0000 0000             		lea	(CollArray1).l,a1
0001662E 45F9 0000 0000             		lea	(CollArray1).l,a2
00016634 363C 00FF                  		move.w	#$FF,d3
00016638                            
00016638                            loc_14C5E:
00016638 7A10                       		moveq	#$10,d5
0001663A 343C 000F                  		move.w	#$F,d2
0001663E                            
0001663E                            loc_14C64:
0001663E 7800                       		moveq	#0,d4
00016640 323C 000F                  		move.w	#$F,d1
00016644                            
00016644                            loc_14C6A:
00016644 3019                       		move.w	(a1)+,d0
00016646 EAA8                       		lsr.l	d5,d0
00016648 D944                       		addx.w	d4,d4
0001664A 51C9 FFF8                  		dbf	d1,loc_14C6A
0001664E                            
0001664E 34C4                       		move.w	d4,(a2)+
00016650 92FC 0020                  		suba.w	#$20,a1
00016654 5345                       		subq.w	#1,d5
00016656 51CA FFE6                  		dbf	d2,loc_14C64
0001665A                            
0001665A D2FC 0020                  		adda.w	#$20,a1
0001665E 51CB FFD8                  		dbf	d3,loc_14C5E
00016662                            
00016662 43F9 0000 0000             		lea	(CollArray1).l,a1
00016668 45F9 0000 0000             		lea	(CollArray2).l,a2
0001666E 6100                       		bsr.s	FloorLog_Unk2
00016670 43F9 0000 0000             		lea	(CollArray1).l,a1
00016676 45F9 0000 0000             		lea	(CollArray1).l,a2
0001667C                            
0001667C                            ; End of function FloorLog_Unk
0001667C                            
0001667C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001667C                            
0001667C                            
0001667C                            FloorLog_Unk2:				; XREF: FloorLog_Unk
0001667C 363C 0FFF                  		move.w	#$FFF,d3
00016680                            
00016680                            loc_14CA6:
00016680 7400                       		moveq	#0,d2
00016682 323C 000F                  		move.w	#$F,d1
00016686 3019                       		move.w	(a1)+,d0
00016688 6700                       		beq.s	loc_14CD4
0001668A 6B00                       		bmi.s	loc_14CBE
0001668C                            
0001668C                            loc_14CB2:
0001668C E248                       		lsr.w	#1,d0
0001668E 6400                       		bcc.s	loc_14CB8
00016690 5202                       		addq.b	#1,d2
00016692                            
00016692                            loc_14CB8:
00016692 51C9 FFF8                  		dbf	d1,loc_14CB2
00016696                            
00016696 6000                       		bra.s	loc_14CD6
00016698                            ; ===========================================================================
00016698                            
00016698                            loc_14CBE:
00016698 0C40 FFFF                  		cmpi.w	#-1,d0
0001669C 6700                       		beq.s	loc_14CD0
0001669E                            
0001669E                            loc_14CC4:
0001669E E348                       		lsl.w	#1,d0
000166A0 6400                       		bcc.s	loc_14CCA
000166A2 5302                       		subq.b	#1,d2
000166A4                            
000166A4                            loc_14CCA:
000166A4 51C9 FFF8                  		dbf	d1,loc_14CC4
000166A8                            
000166A8 6000                       		bra.s	loc_14CD6
000166AA                            ; ===========================================================================
000166AA                            
000166AA                            loc_14CD0:
000166AA 303C 0010                  		move.w	#$10,d0
000166AE                            
000166AE                            loc_14CD4:
000166AE 3400                       		move.w	d0,d2
000166B0                            
000166B0                            loc_14CD6:
000166B0 14C2                       		move.b	d2,(a2)+
000166B2 51CB FFCC                  		dbf	d3,loc_14CA6
000166B6                            
000166B6 4E75                       		rts	
000166B8                            
000166B8                            ; End of function FloorLog_Unk2
000166B8                            
000166B8                            
000166B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000166B8                            
000166B8                            
000166B8                            Sonic_WalkSpeed:			; XREF: Sonic_Move
000166B8 2628 0008                  		move.l	8(a0),d3
000166BC 2428 000C                  		move.l	$C(a0),d2
000166C0 3228 0010                  		move.w	$10(a0),d1
000166C4 48C1                       		ext.l	d1
000166C6 E181                       		asl.l	#8,d1
000166C8 D681                       		add.l	d1,d3
000166CA 3228 0012                  		move.w	$12(a0),d1
000166CE 48C1                       		ext.l	d1
000166D0 E181                       		asl.l	#8,d1
000166D2 D481                       		add.l	d1,d2
000166D4 4842                       		swap	d2
000166D6 4843                       		swap	d3
000166D8 11C0 F768                  		move.b	d0,($FFFFF768).w
000166DC 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000166E0 1200                       		move.b	d0,d1
000166E2 0600 0020                  		addi.b	#$20,d0
000166E6 6A00                       		bpl.s	loc_14D1A
000166E8 1001                       		move.b	d1,d0
000166EA 6A00                       		bpl.s	loc_14D14
000166EC 5300                       		subq.b	#1,d0
000166EE                            
000166EE                            loc_14D14:
000166EE 0600 0020                  		addi.b	#$20,d0
000166F2 6000                       		bra.s	loc_14D24
000166F4                            ; ===========================================================================
000166F4                            
000166F4                            loc_14D1A:
000166F4 1001                       		move.b	d1,d0
000166F6 6A00                       		bpl.s	loc_14D20
000166F8 5200                       		addq.b	#1,d0
000166FA                            
000166FA                            loc_14D20:
000166FA 0600 001F                  		addi.b	#$1F,d0
000166FE                            
000166FE                            loc_14D24:
000166FE 0200 00C0                  		andi.b	#$C0,d0
00016702 6700 0000                  		beq.w	loc_14DF0
00016706 0C00 0080                  		cmpi.b	#$80,d0
0001670A 6700 0000                  		beq.w	loc_14F7C
0001670E 0201 0038                  		andi.b	#$38,d1
00016712 6600                       		bne.s	loc_14D3C
00016714 5042                       		addq.w	#8,d2
00016716                            
00016716                            loc_14D3C:
00016716 0C00 0040                  		cmpi.b	#$40,d0
0001671A 6700 0000                  		beq.w	loc_1504A
0001671E 6000 0000                  		bra.w	loc_14EBC
00016722                            
00016722                            ; End of function Sonic_WalkSpeed
00016722                            
00016722                            
00016722                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016722                            
00016722                            
00016722                            sub_14D48:				; XREF: Sonic_Jump
00016722 11C0 F768                  		move.b	d0,($FFFFF768).w
00016726 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001672A 0600 0020                  		addi.b	#$20,d0
0001672E 0200 00C0                  		andi.b	#$C0,d0
00016732 0C00 0040                  		cmpi.b	#$40,d0
00016736 6700 0000                  		beq.w	loc_14FD6
0001673A 0C00 0080                  		cmpi.b	#$80,d0
0001673E 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00016742 0C00 00C0                  		cmpi.b	#$C0,d0
00016746 6700 0000                  		beq.w	sub_14E50
0001674A                            
0001674A                            ; End of function sub_14D48
0001674A                            
0001674A                            ; ---------------------------------------------------------------------------
0001674A                            ; Subroutine to	make Sonic land	on the floor after jumping
0001674A                            ; ---------------------------------------------------------------------------
0001674A                            
0001674A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001674A                            
0001674A                            
0001674A                            Sonic_HitFloor:				; XREF: Sonic_Floor
0001674A 3428 000C                  		move.w	$C(a0),d2
0001674E 3628 0008                  		move.w	8(a0),d3
00016752 7000                       		moveq	#0,d0
00016754 1028 0016                  		move.b	$16(a0),d0
00016758 4880                       		ext.w	d0
0001675A D440                       		add.w	d0,d2
0001675C 1028 0017                  		move.b	$17(a0),d0
00016760 4880                       		ext.w	d0
00016762 D640                       		add.w	d0,d3
00016764 49F8 F768                  		lea	($FFFFF768).w,a4
00016768 367C 0010                  		movea.w	#$10,a3
0001676C 3C3C 0000                  		move.w	#0,d6
00016770 7A0D                       		moveq	#$D,d5
00016772 6100 FC34                  		bsr.w	FindFloor
00016776 3F01                       		move.w	d1,-(sp)
00016778 3428 000C                  		move.w	$C(a0),d2
0001677C 3628 0008                  		move.w	8(a0),d3
00016780 7000                       		moveq	#0,d0
00016782 1028 0016                  		move.b	$16(a0),d0
00016786 4880                       		ext.w	d0
00016788 D440                       		add.w	d0,d2
0001678A 1028 0017                  		move.b	$17(a0),d0
0001678E 4880                       		ext.w	d0
00016790 9640                       		sub.w	d0,d3
00016792 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016796 367C 0010                  		movea.w	#$10,a3
0001679A 3C3C 0000                  		move.w	#0,d6
0001679E 7A0D                       		moveq	#$D,d5
000167A0 6100 FC06                  		bsr.w	FindFloor
000167A4 301F                       		move.w	(sp)+,d0
000167A6 143C 0000                  		move.b	#0,d2
000167AA                            
000167AA                            loc_14DD0:
000167AA 1638 F76A                  		move.b	($FFFFF76A).w,d3
000167AE B240                       		cmp.w	d0,d1
000167B0 6F00                       		ble.s	loc_14DDE
000167B2 1638 F768                  		move.b	($FFFFF768).w,d3
000167B6 C141                       		exg	d0,d1
000167B8                            
000167B8                            loc_14DDE:
000167B8 0803 0000                  		btst	#0,d3
000167BC 6700                       		beq.s	locret_14DE6
000167BE 1602                       		move.b	d2,d3
000167C0                            
000167C0                            locret_14DE6:
000167C0 4E75                       		rts	
000167C2                            
000167C2                            ; End of function Sonic_HitFloor
000167C2                            
000167C2                            ; ===========================================================================
000167C2 3428 000C                  		move.w	$C(a0),d2
000167C6 3628 0008                  		move.w	8(a0),d3
000167CA                            
000167CA                            loc_14DF0:				; XREF: Sonic_WalkSpeed
000167CA 0642 000A                  		addi.w	#$A,d2
000167CE 49F8 F768                  		lea	($FFFFF768).w,a4
000167D2 367C 0010                  		movea.w	#$10,a3
000167D6 3C3C 0000                  		move.w	#0,d6
000167DA 7A0E                       		moveq	#$E,d5
000167DC 6100 FBCA                  		bsr.w	FindFloor
000167E0 143C 0000                  		move.b	#0,d2
000167E4                            
000167E4                            loc_14E0A:				; XREF: sub_14EB4
000167E4 1638 F768                  		move.b	($FFFFF768).w,d3
000167E8 0803 0000                  		btst	#0,d3
000167EC 6700                       		beq.s	locret_14E16
000167EE 1602                       		move.b	d2,d3
000167F0                            
000167F0                            locret_14E16:
000167F0 4E75                       		rts	
000167F2                            
000167F2                            ; ---------------------------------------------------------------------------
000167F2                            ; Subroutine allowing objects to interact with the floor
000167F2                            ; ---------------------------------------------------------------------------
000167F2                            
000167F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000167F2                            
000167F2                            
000167F2                            ObjHitFloor:
000167F2 3628 0008                  		move.w	8(a0),d3
000167F6                            
000167F6                            ; End of function ObjHitFloor
000167F6                            
000167F6                            
000167F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000167F6                            
000167F6                            
000167F6                            ObjHitFloor2:
000167F6 3428 000C                  		move.w	$C(a0),d2
000167FA 7000                       		moveq	#0,d0
000167FC 1028 0016                  		move.b	$16(a0),d0
00016800 4880                       		ext.w	d0
00016802 D440                       		add.w	d0,d2
00016804 49F8 F768                  		lea	($FFFFF768).w,a4
00016808 18BC 0000                  		move.b	#0,(a4)
0001680C 367C 0010                  		movea.w	#$10,a3
00016810 3C3C 0000                  		move.w	#0,d6
00016814 7A0D                       		moveq	#$D,d5
00016816 6100 FB90                  		bsr.w	FindFloor
0001681A 1638 F768                  		move.b	($FFFFF768).w,d3
0001681E 0803 0000                  		btst	#0,d3
00016822 6700                       		beq.s	locret_14E4E
00016824 163C 0000                  		move.b	#0,d3
00016828                            
00016828                            locret_14E4E:
00016828 4E75                       		rts	
0001682A                            ; End of function ObjHitFloor2
0001682A                            
0001682A                            
0001682A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001682A                            
0001682A                            
0001682A                            sub_14E50:				; XREF: sub_14D48
0001682A 3428 000C                  		move.w	$C(a0),d2
0001682E 3628 0008                  		move.w	8(a0),d3
00016832 7000                       		moveq	#0,d0
00016834 1028 0017                  		move.b	$17(a0),d0
00016838 4880                       		ext.w	d0
0001683A 9440                       		sub.w	d0,d2
0001683C 1028 0016                  		move.b	$16(a0),d0
00016840 4880                       		ext.w	d0
00016842 D640                       		add.w	d0,d3
00016844 49F8 F768                  		lea	($FFFFF768).w,a4
00016848 367C 0010                  		movea.w	#$10,a3
0001684C 3C3C 0000                  		move.w	#0,d6
00016850 7A0E                       		moveq	#$E,d5
00016852 6100 FC92                  		bsr.w	FindWall
00016856 3F01                       		move.w	d1,-(sp)
00016858 3428 000C                  		move.w	$C(a0),d2
0001685C 3628 0008                  		move.w	8(a0),d3
00016860 7000                       		moveq	#0,d0
00016862 1028 0017                  		move.b	$17(a0),d0
00016866 4880                       		ext.w	d0
00016868 D440                       		add.w	d0,d2
0001686A 1028 0016                  		move.b	$16(a0),d0
0001686E 4880                       		ext.w	d0
00016870 D640                       		add.w	d0,d3
00016872 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016876 367C 0010                  		movea.w	#$10,a3
0001687A 3C3C 0000                  		move.w	#0,d6
0001687E 7A0E                       		moveq	#$E,d5
00016880 6100 FC64                  		bsr.w	FindWall
00016884 301F                       		move.w	(sp)+,d0
00016886 143C 00C0                  		move.b	#-$40,d2
0001688A 6000 FF1E                  		bra.w	loc_14DD0
0001688E                            
0001688E                            ; End of function sub_14E50
0001688E                            
0001688E                            
0001688E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001688E                            
0001688E                            
0001688E                            sub_14EB4:				; XREF: Sonic_Floor
0001688E 3428 000C                  		move.w	$C(a0),d2
00016892 3628 0008                  		move.w	8(a0),d3
00016896                            
00016896                            loc_14EBC:
00016896 0643 000A                  		addi.w	#$A,d3
0001689A 49F8 F768                  		lea	($FFFFF768).w,a4
0001689E 367C 0010                  		movea.w	#$10,a3
000168A2 3C3C 0000                  		move.w	#0,d6
000168A6 7A0E                       		moveq	#$E,d5
000168A8 6100 FC3C                  		bsr.w	FindWall
000168AC 143C 00C0                  		move.b	#-$40,d2
000168B0 6000 FF32                  		bra.w	loc_14E0A
000168B4                            
000168B4                            ; End of function sub_14EB4
000168B4                            
000168B4                            ; ---------------------------------------------------------------------------
000168B4                            ; Subroutine to	detect when an object hits a wall to its right
000168B4                            ; ---------------------------------------------------------------------------
000168B4                            
000168B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000168B4                            
000168B4                            
000168B4                            ObjHitWallRight:
000168B4 D668 0008                  		add.w	8(a0),d3
000168B8 3428 000C                  		move.w	$C(a0),d2
000168BC 49F8 F768                  		lea	($FFFFF768).w,a4
000168C0 18BC 0000                  		move.b	#0,(a4)
000168C4 367C 0010                  		movea.w	#$10,a3
000168C8 3C3C 0000                  		move.w	#0,d6
000168CC 7A0E                       		moveq	#$E,d5
000168CE 6100 FC16                  		bsr.w	FindWall
000168D2 1638 F768                  		move.b	($FFFFF768).w,d3
000168D6 0803 0000                  		btst	#0,d3
000168DA 6700                       		beq.s	locret_14F06
000168DC 163C 00C0                  		move.b	#-$40,d3
000168E0                            
000168E0                            locret_14F06:
000168E0 4E75                       		rts	
000168E2                            
000168E2                            ; End of function ObjHitWallRight
000168E2                            
000168E2                            ; ---------------------------------------------------------------------------
000168E2                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
000168E2                            ; touches them
000168E2                            ; ---------------------------------------------------------------------------
000168E2                            
000168E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000168E2                            
000168E2                            
000168E2                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
000168E2 3428 000C                  		move.w	$C(a0),d2
000168E6 3628 0008                  		move.w	8(a0),d3
000168EA 7000                       		moveq	#0,d0
000168EC 1028 0016                  		move.b	$16(a0),d0
000168F0 4880                       		ext.w	d0
000168F2 9440                       		sub.w	d0,d2
000168F4 0A42 000F                  		eori.w	#$F,d2
000168F8 1028 0017                  		move.b	$17(a0),d0
000168FC 4880                       		ext.w	d0
000168FE D640                       		add.w	d0,d3
00016900 49F8 F768                  		lea	($FFFFF768).w,a4
00016904 367C FFF0                  		movea.w	#-$10,a3
00016908 3C3C 1000                  		move.w	#$1000,d6
0001690C 7A0E                       		moveq	#$E,d5
0001690E 6100 FA98                  		bsr.w	FindFloor
00016912 3F01                       		move.w	d1,-(sp)
00016914 3428 000C                  		move.w	$C(a0),d2
00016918 3628 0008                  		move.w	8(a0),d3
0001691C 7000                       		moveq	#0,d0
0001691E 1028 0016                  		move.b	$16(a0),d0
00016922 4880                       		ext.w	d0
00016924 9440                       		sub.w	d0,d2
00016926 0A42 000F                  		eori.w	#$F,d2
0001692A 1028 0017                  		move.b	$17(a0),d0
0001692E 4880                       		ext.w	d0
00016930 9640                       		sub.w	d0,d3
00016932 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016936 367C FFF0                  		movea.w	#-$10,a3
0001693A 3C3C 1000                  		move.w	#$1000,d6
0001693E 7A0E                       		moveq	#$E,d5
00016940 6100 FA66                  		bsr.w	FindFloor
00016944 301F                       		move.w	(sp)+,d0
00016946 143C 0080                  		move.b	#-$80,d2
0001694A 6000 FE5E                  		bra.w	loc_14DD0
0001694E                            ; End of function Sonic_DontRunOnWalls
0001694E                            
0001694E                            ; ===========================================================================
0001694E 3428 000C                  		move.w	$C(a0),d2
00016952 3628 0008                  		move.w	8(a0),d3
00016956                            
00016956                            loc_14F7C:
00016956 0442 000A                  		subi.w	#$A,d2
0001695A 0A42 000F                  		eori.w	#$F,d2
0001695E 49F8 F768                  		lea	($FFFFF768).w,a4
00016962 367C FFF0                  		movea.w	#-$10,a3
00016966 3C3C 1000                  		move.w	#$1000,d6
0001696A 7A0E                       		moveq	#$E,d5
0001696C 6100 FA3A                  		bsr.w	FindFloor
00016970 143C 0080                  		move.b	#-$80,d2
00016974 6000 FE6E                  		bra.w	loc_14E0A
00016978                            
00016978                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016978                            
00016978                            
00016978                            ObjHitCeiling:
00016978 3428 000C                  		move.w	$C(a0),d2
0001697C 3628 0008                  		move.w	8(a0),d3
00016980 7000                       		moveq	#0,d0
00016982 1028 0016                  		move.b	$16(a0),d0
00016986 4880                       		ext.w	d0
00016988 9440                       		sub.w	d0,d2
0001698A 0A42 000F                  		eori.w	#$F,d2
0001698E 49F8 F768                  		lea	($FFFFF768).w,a4
00016992 367C FFF0                  		movea.w	#-$10,a3
00016996 3C3C 1000                  		move.w	#$1000,d6
0001699A 7A0E                       		moveq	#$E,d5
0001699C 6100 FA0A                  		bsr.w	FindFloor
000169A0 1638 F768                  		move.b	($FFFFF768).w,d3
000169A4 0803 0000                  		btst	#0,d3
000169A8 6700                       		beq.s	locret_14FD4
000169AA 163C 0080                  		move.b	#-$80,d3
000169AE                            
000169AE                            locret_14FD4:
000169AE 4E75                       		rts	
000169B0                            ; End of function ObjHitCeiling
000169B0                            
000169B0                            ; ===========================================================================
000169B0                            
000169B0                            loc_14FD6:				; XREF: sub_14D48
000169B0 3428 000C                  		move.w	$C(a0),d2
000169B4 3628 0008                  		move.w	8(a0),d3
000169B8 7000                       		moveq	#0,d0
000169BA 1028 0017                  		move.b	$17(a0),d0
000169BE 4880                       		ext.w	d0
000169C0 9440                       		sub.w	d0,d2
000169C2 1028 0016                  		move.b	$16(a0),d0
000169C6 4880                       		ext.w	d0
000169C8 9640                       		sub.w	d0,d3
000169CA 0A43 000F                  		eori.w	#$F,d3
000169CE 49F8 F768                  		lea	($FFFFF768).w,a4
000169D2 367C FFF0                  		movea.w	#-$10,a3
000169D6 3C3C 0800                  		move.w	#$800,d6
000169DA 7A0E                       		moveq	#$E,d5
000169DC 6100 FB08                  		bsr.w	FindWall
000169E0 3F01                       		move.w	d1,-(sp)
000169E2 3428 000C                  		move.w	$C(a0),d2
000169E6 3628 0008                  		move.w	8(a0),d3
000169EA 7000                       		moveq	#0,d0
000169EC 1028 0017                  		move.b	$17(a0),d0
000169F0 4880                       		ext.w	d0
000169F2 D440                       		add.w	d0,d2
000169F4 1028 0016                  		move.b	$16(a0),d0
000169F8 4880                       		ext.w	d0
000169FA 9640                       		sub.w	d0,d3
000169FC 0A43 000F                  		eori.w	#$F,d3
00016A00 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016A04 367C FFF0                  		movea.w	#-$10,a3
00016A08 3C3C 0800                  		move.w	#$800,d6
00016A0C 7A0E                       		moveq	#$E,d5
00016A0E 6100 FAD6                  		bsr.w	FindWall
00016A12 301F                       		move.w	(sp)+,d0
00016A14 143C 0040                  		move.b	#$40,d2
00016A18 6000 FD90                  		bra.w	loc_14DD0
00016A1C                            
00016A1C                            ; ---------------------------------------------------------------------------
00016A1C                            ; Subroutine to	stop Sonic when	he jumps at a wall
00016A1C                            ; ---------------------------------------------------------------------------
00016A1C                            
00016A1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016A1C                            
00016A1C                            
00016A1C                            Sonic_HitWall:				; XREF: Sonic_Floor
00016A1C 3428 000C                  		move.w	$C(a0),d2
00016A20 3628 0008                  		move.w	8(a0),d3
00016A24                            
00016A24                            loc_1504A:
00016A24 0443 000A                  		subi.w	#$A,d3
00016A28 0A43 000F                  		eori.w	#$F,d3
00016A2C 49F8 F768                  		lea	($FFFFF768).w,a4
00016A30 367C FFF0                  		movea.w	#-$10,a3
00016A34 3C3C 0800                  		move.w	#$800,d6
00016A38 7A0E                       		moveq	#$E,d5
00016A3A 6100 FAAA                  		bsr.w	FindWall
00016A3E 143C 0040                  		move.b	#$40,d2
00016A42 6000 FDA0                  		bra.w	loc_14E0A
00016A46                            ; End of function Sonic_HitWall
00016A46                            
00016A46                            ; ---------------------------------------------------------------------------
00016A46                            ; Subroutine to	detect when an object hits a wall to its left
00016A46                            ; ---------------------------------------------------------------------------
00016A46                            
00016A46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016A46                            
00016A46                            
00016A46                            ObjHitWallLeft:
00016A46 D668 0008                  		add.w	8(a0),d3
00016A4A 3428 000C                  		move.w	$C(a0),d2
00016A4E 49F8 F768                  		lea	($FFFFF768).w,a4
00016A52 18BC 0000                  		move.b	#0,(a4)
00016A56 367C FFF0                  		movea.w	#-$10,a3
00016A5A 3C3C 0800                  		move.w	#$800,d6
00016A5E 7A0E                       		moveq	#$E,d5
00016A60 6100 FA84                  		bsr.w	FindWall
00016A64 1638 F768                  		move.b	($FFFFF768).w,d3
00016A68 0803 0000                  		btst	#0,d3
00016A6C 6700                       		beq.s	locret_15098
00016A6E 163C 0040                  		move.b	#$40,d3
00016A72                            
00016A72                            locret_15098:
00016A72 4E75                       		rts	
00016A74                            ; End of function ObjHitWallLeft
00016A74                            
00016A74                            ; ===========================================================================
00016A74                            ; ---------------------------------------------------------------------------
00016A74                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00016A74                            ; ---------------------------------------------------------------------------
00016A74                            
00016A74                            Obj66:					; XREF: Obj_Index
00016A74 7000                       		moveq	#0,d0
00016A76 1028 0024                  		move.b	$24(a0),d0
00016A7A 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00016A7E 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00016A82                            ; ===========================================================================
00016A82 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00016A84 0000                       		dc.w Obj66_Action-Obj66_Index
00016A86 0000                       		dc.w Obj66_Display-Obj66_Index
00016A88 0000                       		dc.w Obj66_Release-Obj66_Index
00016A8A                            ; ===========================================================================
00016A8A                            
00016A8A                            Obj66_Main:				; XREF: Obj66_Index
00016A8A 5428 0024                  		addq.b	#2,$24(a0)
00016A8E 323C 0001                  		move.w	#1,d1
00016A92 2248                       		movea.l	a0,a1
00016A94 6000                       		bra.s	Obj66_MakeItem
00016A96                            ; ===========================================================================
00016A96                            
00016A96                            jmp_SingleObjLoad:
00016A96 4EF9 0000 E5A6             	jmp SingleObjLoad
00016A9C                            
00016A9C                            Obj66_Loop:
00016A9C 6100 FFF8                  		bsr.w	jmp_SingleObjLoad
00016AA0 6600                       		bne.s	loc_150FE
00016AA2 12BC 0066                  		move.b	#$66,0(a1)
00016AA6 5829 0024                  		addq.b	#4,$24(a1)
00016AAA 3368 0008 0008             		move.w	8(a0),8(a1)
00016AB0 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016AB6 137C 0003 0018             		move.b	#3,$18(a1)
00016ABC 137C 0010 001A             		move.b	#$10,$1A(a1)
00016AC2                            
00016AC2                            Obj66_MakeItem:				; XREF: Obj66_Main
00016AC2 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00016ACA 337C 4348 0002             		move.w	#$4348,2(a1)
00016AD0 0029 0004 0001             		ori.b	#4,1(a1)
00016AD6 137C 0038 0019             		move.b	#$38,$19(a1)
00016ADC                            
00016ADC                            loc_150FE:
00016ADC 51C9 FFBE                  		dbf	d1,Obj66_Loop
00016AE0                            
00016AE0 117C 0030 0019             		move.b	#$30,$19(a0)
00016AE6 117C 0004 0018             		move.b	#4,$18(a0)
00016AEC 317C 003C 0030             		move.w	#$3C,$30(a0)
00016AF2 117C 0001 0034             		move.b	#1,$34(a0)
00016AF8 1168 0028 0038             		move.b	$28(a0),$38(a0)
00016AFE                            
00016AFE                            Obj66_Action:				; XREF: Obj66_Index
00016AFE 6100 0000                  		bsr.w	Obj66_ChkSwitch
00016B02 4A28 0001                  		tst.b	1(a0)
00016B06 6A00 0000                  		bpl.w	Obj66_Display
00016B0A 323C 0030                  		move.w	#$30,d1
00016B0E 3401                       		move.w	d1,d2
00016B10 3602                       		move.w	d2,d3
00016B12 5243                       		addq.w	#1,d3
00016B14 3828 0008                  		move.w	8(a0),d4
00016B18 6100 99E0                  		bsr.w	SolidObject
00016B1C 0828 0005 0022             		btst	#5,$22(a0)
00016B22 6700 0000                  		beq.w	Obj66_Display
00016B26 43F8 D000                  		lea	($FFFFD000).w,a1
00016B2A 720E                       		moveq	#$E,d1
00016B2C 3029 0008                  		move.w	8(a1),d0
00016B30 B068 0008                  		cmp.w	8(a0),d0
00016B34 6500                       		bcs.s	Obj66_GrabSonic
00016B36 7207                       		moveq	#7,d1
00016B38                            
00016B38                            Obj66_GrabSonic:
00016B38 B228 001A                  		cmp.b	$1A(a0),d1
00016B3C 6600                       		bne.s	Obj66_Display
00016B3E 1141 0032                  		move.b	d1,$32(a0)
00016B42 5828 0024                  		addq.b	#4,$24(a0)
00016B46 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00016B4C 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00016B52 337C 0800 0014             		move.w	#$800,$14(a1)
00016B58 337C 0000 0010             		move.w	#0,$10(a1)
00016B5E 337C 0000 0012             		move.w	#0,$12(a1)
00016B64 08A8 0005 0022             		bclr	#5,$22(a0)
00016B6A 08A9 0005 0022             		bclr	#5,$22(a1)
00016B70 08E9 0001 0022             		bset	#1,$22(a1)
00016B76 3429 0008                  		move.w	8(a1),d2
00016B7A 3629 000C                  		move.w	$C(a1),d3
00016B7E 6100 0000                  		bsr.w	Obj66_ChgPos
00016B82 D569 0008                  		add.w	d2,8(a1)
00016B86 D769 000C                  		add.w	d3,$C(a1)
00016B8A E0E9 0008                  		asr	8(a1)
00016B8E E0E9 000C                  		asr	$C(a1)
00016B92                            
00016B92                            Obj66_Display:				; XREF: Obj66_Index
00016B92 6000 963E                  		bra.w	MarkObjGone
00016B96                            ; ===========================================================================
00016B96                            
00016B96                            Obj66_Release:				; XREF: Obj66_Index
00016B96 1028 001A                  		move.b	$1A(a0),d0
00016B9A 0C00 0004                  		cmpi.b	#4,d0
00016B9E 6700                       		beq.s	loc_151C8
00016BA0 0C00 0007                  		cmpi.b	#7,d0
00016BA4 6600                       		bne.s	loc_151F8
00016BA6                            
00016BA6                            loc_151C8:
00016BA6 B028 0032                  		cmp.b	$32(a0),d0
00016BAA 6700                       		beq.s	loc_151F8
00016BAC 43F8 D000                  		lea	($FFFFD000).w,a1
00016BB0 337C 0000 0010             		move.w	#0,$10(a1)
00016BB6 337C 0800 0012             		move.w	#$800,$12(a1)
00016BBC 0C00 0004                  		cmpi.b	#4,d0
00016BC0 6700                       		beq.s	loc_151F0
00016BC2 337C 0800 0010             		move.w	#$800,$10(a1)
00016BC8 337C 0800 0012             		move.w	#$800,$12(a1)
00016BCE                            
00016BCE                            loc_151F0:
00016BCE 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00016BD2 5928 0024                  		subq.b	#4,$24(a0)
00016BD6                            
00016BD6                            loc_151F8:
00016BD6 6100                       		bsr.s	Obj66_ChkSwitch
00016BD8 6100                       		bsr.s	Obj66_ChgPos
00016BDA 6000 95F6                  		bra.w	MarkObjGone
00016BDE                            
00016BDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016BDE                            
00016BDE                            
00016BDE                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00016BDE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016BE2 7000                       		moveq	#0,d0
00016BE4 1028 0038                  		move.b	$38(a0),d0
00016BE8 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00016BEE 6700                       		beq.s	loc_15224	; if not, branch
00016BF0 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00016BF4 6600                       		bne.s	Obj66_Animate	; if yes, branch
00016BF6 4428 0034                  		neg.b	$34(a0)
00016BFA 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00016C00 6000                       		bra.s	Obj66_Animate
00016C02                            ; ===========================================================================
00016C02                            
00016C02                            loc_15224:
00016C02 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00016C06                            
00016C06                            Obj66_Animate:
00016C06 5328 001E                  		subq.b	#1,$1E(a0)
00016C0A 6A00                       		bpl.s	locret_15246
00016C0C 117C 0007 001E             		move.b	#7,$1E(a0)
00016C12 1228 0034                  		move.b	$34(a0),d1
00016C16 1028 001A                  		move.b	$1A(a0),d0
00016C1A D001                       		add.b	d1,d0
00016C1C 0200 000F                  		andi.b	#$F,d0
00016C20 1140 001A                  		move.b	d0,$1A(a0)
00016C24                            
00016C24                            locret_15246:
00016C24 4E75                       		rts	
00016C26                            ; End of function Obj66_ChkSwitch
00016C26                            
00016C26                            
00016C26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016C26                            
00016C26                            
00016C26                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00016C26 43F8 D000                  		lea	($FFFFD000).w,a1
00016C2A 7000                       		moveq	#0,d0
00016C2C 1028 001A                  		move.b	$1A(a0),d0
00016C30 D040                       		add.w	d0,d0
00016C32 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00016C36 101A                       		move.b	(a2)+,d0
00016C38 4880                       		ext.w	d0
00016C3A D068 0008                  		add.w	8(a0),d0
00016C3E 3340 0008                  		move.w	d0,8(a1)
00016C42 101A                       		move.b	(a2)+,d0
00016C44 4880                       		ext.w	d0
00016C46 D068 000C                  		add.w	$C(a0),d0
00016C4A 3340 000C                  		move.w	d0,$C(a1)
00016C4E 4E75                       		rts	
00016C50                            ; End of function Obj66_ChgPos
00016C50                            
00016C50                            ; ===========================================================================
00016C50 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00016C54 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00016C58 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00016C5C 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00016C60 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00016C64 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00016C68 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00016C6C E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00016C70                            ; ---------------------------------------------------------------------------
00016C70                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00016C70                            ; ---------------------------------------------------------------------------
00016C70                            Map_obj66:
00016C70                            	include "_maps\obj66.asm"
00016C70                            ; ---------------------------------------------------------------------------
00016C70                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00016C70                            ; ---------------------------------------------------------------------------
00016C70 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00016C74 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00016C78 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00016C7C 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00016C80 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00016C84 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00016C88 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00016C8C 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00016C90 0000                       		dc.w byte_154A4-Map_obj66
00016C92 06                         byte_152B4:	dc.b 6
00016C93 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00016C98 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00016C9D E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00016CA2 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00016CA7 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00016CAC 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00016CB1 06                         byte_152D3:	dc.b 6
00016CB2 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00016CB7 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00016CBC F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00016CC1 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00016CC6 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00016CCB 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00016CD0 06                         byte_152F2:	dc.b 6
00016CD1 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00016CD6 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00016CDB 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00016CE0 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00016CE5 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00016CEA 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00016CEF 06                         byte_15311:	dc.b 6
00016CF0 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00016CF5 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00016CFA 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00016CFF 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00016D04 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00016D09 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00016D0E 06                         byte_15330:	dc.b 6
00016D0F 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00016D14 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00016D19 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00016D1E 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00016D23 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00016D28 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00016D2D 06                         byte_1534F:	dc.b 6
00016D2E 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00016D33 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00016D38 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00016D3D 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00016D42 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00016D47 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00016D4C 06                         byte_1536E:	dc.b 6
00016D4D 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00016D52 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00016D57 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00016D5C 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00016D61 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00016D66 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00016D6B 06                         byte_1538D:	dc.b 6
00016D6C 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00016D71 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00016D76 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00016D7B F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00016D80 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00016D85 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00016D8A 06                         byte_153AC:	dc.b 6
00016D8B E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00016D90 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00016D95 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00016D9A E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00016D9F 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00016DA4 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00016DA9 06                         byte_153CB:	dc.b 6
00016DAA D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00016DAF E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00016DB4 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00016DB9 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00016DBE F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00016DC3 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00016DC8 06                         byte_153EA:	dc.b 6
00016DC9 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00016DCE E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00016DD3 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00016DD8 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00016DDD E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00016DE2 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00016DE7 06                         byte_15409:	dc.b 6
00016DE8 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00016DED D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00016DF2 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00016DF7 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00016DFC E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00016E01 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00016E06 06                         byte_15428:	dc.b 6
00016E07 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00016E0C D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00016E11 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00016E16 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00016E1B E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00016E20 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00016E25 06                         byte_15447:	dc.b 6
00016E26 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00016E2B D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00016E30 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00016E35 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00016E3A E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00016E3F E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00016E44 06                         byte_15466:	dc.b 6
00016E45 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00016E4A D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00016E4F D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00016E54 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00016E59 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00016E5E E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00016E63 06                         byte_15485:	dc.b 6
00016E64 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00016E69 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00016E6E DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00016E73 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00016E78 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00016E7D F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00016E82 0C                         byte_154A4:	dc.b $C
00016E83 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00016E88 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00016E8D E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00016E92 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00016E97 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00016E9C E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00016EA1 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00016EA6 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00016EAB 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00016EB0 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00016EB5 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00016EBA 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00016EC0 00                         		even
00016EC0 00                         		even
00016EC0                            
00016EC0                            ; ===========================================================================
00016EC0                            ; ---------------------------------------------------------------------------
00016EC0                            ; Object 67 - disc that	you run	around (SBZ)
00016EC0                            ; ---------------------------------------------------------------------------
00016EC0                            
00016EC0                            Obj67:					; XREF: Obj_Index
00016EC0 7000                       		moveq	#0,d0
00016EC2 1028 0024                  		move.b	$24(a0),d0
00016EC6 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00016ECA 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00016ECE                            ; ===========================================================================
00016ECE 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00016ED0 0000                       		dc.w Obj67_Action-Obj67_Index
00016ED2                            ; ===========================================================================
00016ED2                            
00016ED2                            Obj67_Main:				; XREF: Obj67_Index
00016ED2 5428 0024                  		addq.b	#2,$24(a0)
00016ED6 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00016EDE 317C C344 0002             		move.w	#$C344,2(a0)
00016EE4 117C 0004 0001             		move.b	#4,1(a0)
00016EEA 117C 0004 0018             		move.b	#4,$18(a0)
00016EF0 117C 0008 0019             		move.b	#8,$19(a0)
00016EF6 3168 0008 0032             		move.w	8(a0),$32(a0)
00016EFC 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016F02 117C 0018 0034             		move.b	#$18,$34(a0)
00016F08 117C 0048 0038             		move.b	#$48,$38(a0)
00016F0E 1228 0028                  		move.b	$28(a0),d1	; get object type
00016F12 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00016F16 6700                       		beq.s	loc_15546
00016F18 117C 0010 0034             		move.b	#$10,$34(a0)
00016F1E 117C 0038 0038             		move.b	#$38,$38(a0)
00016F24                            
00016F24                            loc_15546:
00016F24 1228 0028                  		move.b	$28(a0),d1	; get object type
00016F28 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00016F2C 4881                       		ext.w	d1
00016F2E E741                       		asl.w	#3,d1
00016F30 3141 0036                  		move.w	d1,$36(a0)
00016F34 1028 0022                  		move.b	$22(a0),d0
00016F38 E418                       		ror.b	#2,d0
00016F3A 0200 00C0                  		andi.b	#-$40,d0
00016F3E 1140 0026                  		move.b	d0,$26(a0)
00016F42                            
00016F42                            Obj67_Action:				; XREF: Obj67_Index
00016F42 6100 0000                  		bsr.w	Obj67_MoveSonic
00016F46 6100 0000                  		bsr.w	Obj67_MoveSpot
00016F4A 6000 0000                  		bra.w	Obj67_ChkDel
00016F4E                            ; ===========================================================================
00016F4E                            
00016F4E                            Obj67_MoveSonic:			; XREF: Obj67_Action
00016F4E 7400                       		moveq	#0,d2
00016F50 1428 0038                  		move.b	$38(a0),d2
00016F54 3602                       		move.w	d2,d3
00016F56 D643                       		add.w	d3,d3
00016F58 43F8 D000                  		lea	($FFFFD000).w,a1
00016F5C 3029 0008                  		move.w	8(a1),d0
00016F60 9068 0032                  		sub.w	$32(a0),d0
00016F64 D042                       		add.w	d2,d0
00016F66 B043                       		cmp.w	d3,d0
00016F68 6400                       		bcc.s	loc_155A8
00016F6A 3229 000C                  		move.w	$C(a1),d1
00016F6E 9268 0030                  		sub.w	$30(a0),d1
00016F72 D242                       		add.w	d2,d1
00016F74 B243                       		cmp.w	d3,d1
00016F76 6400                       		bcc.s	loc_155A8
00016F78 0829 0001 0022             		btst	#1,$22(a1)
00016F7E 6700                       		beq.s	loc_155B8
00016F80 4228 003A                  		clr.b	$3A(a0)
00016F84 4E75                       		rts	
00016F86                            ; ===========================================================================
00016F86                            
00016F86                            loc_155A8:
00016F86 4A28 003A                  		tst.b	$3A(a0)
00016F8A 6700                       		beq.s	locret_155B6
00016F8C 4229 0038                  		clr.b	$38(a1)
00016F90 4228 003A                  		clr.b	$3A(a0)
00016F94                            
00016F94                            locret_155B6:
00016F94 4E75                       		rts	
00016F96                            ; ===========================================================================
00016F96                            
00016F96                            loc_155B8:
00016F96 4A28 003A                  		tst.b	$3A(a0)
00016F9A 6600                       		bne.s	loc_155E2
00016F9C 117C 0001 003A             		move.b	#1,$3A(a0)
00016FA2 0829 0002 0022             		btst	#2,$22(a1)
00016FA8 6600                       		bne.s	loc_155D0
00016FAA 4229 001C                  		clr.b	$1C(a1)
00016FAE                            
00016FAE                            loc_155D0:
00016FAE 08A9 0005 0022             		bclr	#5,$22(a1)
00016FB4 137C 0001 001D             		move.b	#1,$1D(a1)
00016FBA 137C 0001 0038             		move.b	#1,$38(a1)
00016FC0                            
00016FC0                            loc_155E2:
00016FC0 3029 0014                  		move.w	$14(a1),d0
00016FC4 4A68 0036                  		tst.w	$36(a0)
00016FC8 6A00                       		bpl.s	loc_15608
00016FCA 0C40 FC00                  		cmpi.w	#-$400,d0
00016FCE 6F00                       		ble.s	loc_155FA
00016FD0 337C FC00 0014             		move.w	#-$400,$14(a1)
00016FD6 4E75                       		rts	
00016FD8                            ; ===========================================================================
00016FD8                            
00016FD8                            loc_155FA:
00016FD8 0C40 F100                  		cmpi.w	#-$F00,d0
00016FDC 6C00                       		bge.s	locret_15606
00016FDE 337C F100 0014             		move.w	#-$F00,$14(a1)
00016FE4                            
00016FE4                            locret_15606:
00016FE4 4E75                       		rts	
00016FE6                            ; ===========================================================================
00016FE6                            
00016FE6                            loc_15608:
00016FE6 0C40 0400                  		cmpi.w	#$400,d0
00016FEA 6C00                       		bge.s	loc_15616
00016FEC 337C 0400 0014             		move.w	#$400,$14(a1)
00016FF2 4E75                       		rts	
00016FF4                            ; ===========================================================================
00016FF4                            
00016FF4                            loc_15616:
00016FF4 0C40 0F00                  		cmpi.w	#$F00,d0
00016FF8 6F00                       		ble.s	locret_15622
00016FFA 337C 0F00 0014             		move.w	#$F00,$14(a1)
00017000                            
00017000                            locret_15622:
00017000 4E75                       		rts	
00017002                            ; ===========================================================================
00017002                            
00017002                            Obj67_MoveSpot:				; XREF: Obj67_Action
00017002 3028 0036                  		move.w	$36(a0),d0
00017006 D168 0026                  		add.w	d0,$26(a0)
0001700A 1028 0026                  		move.b	$26(a0),d0
0001700E 4EB9 0000 33D4             		jsr	(CalcSine).l
00017014 3428 0030                  		move.w	$30(a0),d2
00017018 3628 0032                  		move.w	$32(a0),d3
0001701C 7800                       		moveq	#0,d4
0001701E 1828 0034                  		move.b	$34(a0),d4
00017022 E14C                       		lsl.w	#8,d4
00017024 2A04                       		move.l	d4,d5
00017026 C9C0                       		muls.w	d0,d4
00017028 4844                       		swap	d4
0001702A CBC1                       		muls.w	d1,d5
0001702C 4845                       		swap	d5
0001702E D842                       		add.w	d2,d4
00017030 DA43                       		add.w	d3,d5
00017032 3144 000C                  		move.w	d4,$C(a0)
00017036 3145 0008                  		move.w	d5,8(a0)
0001703A 4E75                       		rts	
0001703C                            ; ===========================================================================
0001703C                            
0001703C                            Obj67_ChkDel:				; XREF: Obj67_Action
0001703C 3028 0032                  		move.w	$32(a0),d0
00017040 0240 FF80                  		andi.w	#-$80,d0
00017044 3238 F700                  		move.w	($FFFFF700).w,d1
00017048 0441 0080                  		subi.w	#$80,d1
0001704C 0241 FF80                  		andi.w	#-$80,d1
00017050 9041                       		sub.w	d1,d0
00017052 0C40 0280                  		cmpi.w	#$280,d0
00017056 6200                       		bhi.s	Obj67_Delete
00017058 4EF9 0000 E110             		jmp	DisplaySprite
0001705E                            ; ===========================================================================
0001705E                            
0001705E                            Obj67_Delete:
0001705E 4EF9 0000 E14C             		jmp	DeleteObject
00017064                            ; ===========================================================================
00017064                            ; ---------------------------------------------------------------------------
00017064                            ; Sprite mappings - disc that you run around (SBZ)
00017064                            ; (It's just a small blob that moves around in a circle. The disc itself is
00017064                            ; part of the level tiles.)
00017064                            ; ---------------------------------------------------------------------------
00017064                            Map_obj67:
00017064                            	include "_maps\obj67.asm"
00017064                            ; ---------------------------------------------------------------------------
00017064                            ; Sprite mappings - disc that you run around (SBZ)
00017064                            ; (It's just a small blob that moves around in a circle. The disc itself is
00017064                            ; part of the level tiles.)
00017064                            ; ---------------------------------------------------------------------------
00017064 0000                       		dc.w byte_15688-Map_obj67
00017066 01                         byte_15688:	dc.b 1
00017067 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001706C                            		even
0001706C                            		even
0001706C                            
0001706C                            ; ===========================================================================
0001706C                            ; ---------------------------------------------------------------------------
0001706C                            ; Object 68 - conveyor belts (SBZ)
0001706C                            ; ---------------------------------------------------------------------------
0001706C                            
0001706C                            Obj68:					; XREF: Obj_Index
0001706C 7000                       		moveq	#0,d0
0001706E 1028 0024                  		move.b	$24(a0),d0
00017072 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00017076 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
0001707A                            ; ===========================================================================
0001707A 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
0001707C 0000                       		dc.w Obj68_Action-Obj68_Index
0001707E                            ; ===========================================================================
0001707E                            
0001707E                            Obj68_Main:				; XREF: Obj68_Index
0001707E 5428 0024                  		addq.b	#2,$24(a0)
00017082 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00017088 1228 0028                  		move.b	$28(a0),d1	; get object type
0001708C 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00017090 6700                       		beq.s	loc_156BA	; if zero, branch
00017092 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00017098                            
00017098                            loc_156BA:
00017098 1228 0028                  		move.b	$28(a0),d1	; get object type
0001709C 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000170A0 4881                       		ext.w	d1
000170A2 E841                       		asr.w	#4,d1
000170A4 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
000170A8                            
000170A8                            Obj68_Action:				; XREF: Obj68_Index
000170A8 6100                       		bsr.s	Obj68_MoveSonic
000170AA 3028 0008                  		move.w	8(a0),d0
000170AE 0240 FF80                  		andi.w	#$FF80,d0
000170B2 3238 F700                  		move.w	($FFFFF700).w,d1
000170B6 0441 0080                  		subi.w	#$80,d1
000170BA 0241 FF80                  		andi.w	#$FF80,d1
000170BE 9041                       		sub.w	d1,d0
000170C0 0C40 0280                  		cmpi.w	#$280,d0
000170C4 6200                       		bhi.s	Obj68_Delete
000170C6 4E75                       		rts	
000170C8                            ; ===========================================================================
000170C8                            
000170C8                            Obj68_Delete:
000170C8 4EF9 0000 E14C             		jmp	DeleteObject
000170CE                            ; ===========================================================================
000170CE                            
000170CE                            Obj68_MoveSonic:			; XREF: Obj68_Action
000170CE 7400                       		moveq	#0,d2
000170D0 1428 0038                  		move.b	$38(a0),d2
000170D4 3602                       		move.w	d2,d3
000170D6 D643                       		add.w	d3,d3
000170D8 43F8 D000                  		lea	($FFFFD000).w,a1
000170DC 3029 0008                  		move.w	8(a1),d0
000170E0 9068 0008                  		sub.w	8(a0),d0
000170E4 D042                       		add.w	d2,d0
000170E6 B043                       		cmp.w	d3,d0
000170E8 6400                       		bcc.s	locret_1572E
000170EA 3229 000C                  		move.w	$C(a1),d1
000170EE 9268 000C                  		sub.w	$C(a0),d1
000170F2 0641 0030                  		addi.w	#$30,d1
000170F6 0C41 0030                  		cmpi.w	#$30,d1
000170FA 6400                       		bcc.s	locret_1572E
000170FC 0829 0001 0022             		btst	#1,$22(a1)
00017102 6600                       		bne.s	locret_1572E
00017104 3028 0036                  		move.w	$36(a0),d0
00017108 D169 0008                  		add.w	d0,8(a1)
0001710C                            
0001710C                            locret_1572E:
0001710C 4E75                       		rts	
0001710E                            
0001710E                            ; ===========================================================================
0001710E                            ; ---------------------------------------------------------------------------
0001710E                            ; Object 69 - spinning platforms and trapdoors (SBZ)
0001710E                            ; ---------------------------------------------------------------------------
0001710E                            
0001710E                            Obj69:					; XREF: Obj_Index
0001710E 7000                       		moveq	#0,d0
00017110 1028 0024                  		move.b	$24(a0),d0
00017114 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00017118 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
0001711C                            ; ===========================================================================
0001711C 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
0001711E 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00017120 0000                       		dc.w Obj69_Spinner-Obj69_Index
00017122                            ; ===========================================================================
00017122                            
00017122                            Obj69_Main:				; XREF: Obj69_Index
00017122 5428 0024                  		addq.b	#2,$24(a0)
00017126 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
0001712E 317C 4492 0002             		move.w	#$4492,2(a0)
00017134 0028 0004 0001             		ori.b	#4,1(a0)
0001713A 117C 0080 0019             		move.b	#$80,$19(a0)
00017140 7000                       		moveq	#0,d0
00017142 1028 0028                  		move.b	$28(a0),d0
00017146 0240 000F                  		andi.w	#$F,d0
0001714A C0FC 003C                  		mulu.w	#$3C,d0
0001714E 3140 0032                  		move.w	d0,$32(a0)
00017152 4A28 0028                  		tst.b	$28(a0)
00017156 6A00                       		bpl.s	Obj69_Trapdoor
00017158 5428 0024                  		addq.b	#2,$24(a0)
0001715C 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00017164 317C 04DF 0002             		move.w	#$4DF,2(a0)
0001716A 117C 0010 0019             		move.b	#$10,$19(a0)
00017170 117C 0002 001C             		move.b	#2,$1C(a0)
00017176 7000                       		moveq	#0,d0
00017178 1028 0028                  		move.b	$28(a0),d0	; get object type
0001717C 3200                       		move.w	d0,d1
0001717E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00017182 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00017186 3140 0030                  		move.w	d0,$30(a0)	; set time delay
0001718A 3140 0032                  		move.w	d0,$32(a0)
0001718E 0241 0070                  		andi.w	#$70,d1
00017192 0641 0010                  		addi.w	#$10,d1
00017196 E549                       		lsl.w	#2,d1
00017198 5341                       		subq.w	#1,d1
0001719A 3141 0036                  		move.w	d1,$36(a0)
0001719E 6000                       		bra.s	Obj69_Spinner
000171A0                            ; ===========================================================================
000171A0                            
000171A0                            Obj69_Trapdoor:				; XREF: Obj69_Index
000171A0 5368 0030                  		subq.w	#1,$30(a0)
000171A4 6A00                       		bpl.s	Obj69_Animate
000171A6 3168 0032 0030             		move.w	$32(a0),$30(a0)
000171AC 0868 0000 001C             		bchg	#0,$1C(a0)
000171B2 4A28 0001                  		tst.b	1(a0)
000171B6 6A00                       		bpl.s	Obj69_Animate
000171B8 303C 00BB                  		move.w	#$BB,d0
000171BC 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play door sound
000171C2                            
000171C2                            Obj69_Animate:
000171C2 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000171C8 4EB9 0000 B222             		jsr	AnimateSprite
000171CE 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
000171D2 6600                       		bne.s	Obj69_NotSolid	; if not, branch
000171D4 323C 004B                  		move.w	#$4B,d1
000171D8 343C 000C                  		move.w	#$C,d2
000171DC 3602                       		move.w	d2,d3
000171DE 5243                       		addq.w	#1,d3
000171E0 3828 0008                  		move.w	8(a0),d4
000171E4 6100 9314                  		bsr.w	SolidObject
000171E8 6000 8FE8                  		bra.w	MarkObjGone
000171EC                            ; ===========================================================================
000171EC                            
000171EC                            Obj69_NotSolid:
000171EC 0828 0003 0022             		btst	#3,$22(a0)
000171F2 6700                       		beq.s	Obj69_Display
000171F4 43F8 D000                  		lea	($FFFFD000).w,a1
000171F8 08A9 0003 0022             		bclr	#3,$22(a1)
000171FE 08A8 0003 0022             		bclr	#3,$22(a0)
00017204 4228 0025                  		clr.b	$25(a0)
00017208                            
00017208                            Obj69_Display:
00017208 6000 8FC8                  		bra.w	MarkObjGone
0001720C                            ; ===========================================================================
0001720C                            
0001720C                            Obj69_Spinner:				; XREF: Obj69_Index
0001720C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017210 C068 0036                  		and.w	$36(a0),d0
00017214 6600                       		bne.s	Obj69_Delay
00017216 117C 0001 0034             		move.b	#1,$34(a0)
0001721C                            
0001721C                            Obj69_Delay:
0001721C 4A28 0034                  		tst.b	$34(a0)
00017220 6700                       		beq.s	Obj69_Animate2
00017222 5368 0030                  		subq.w	#1,$30(a0)
00017226 6A00                       		bpl.s	Obj69_Animate2
00017228 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001722E 4228 0034                  		clr.b	$34(a0)
00017232 0868 0000 001C             		bchg	#0,$1C(a0)
00017238                            
00017238                            Obj69_Animate2:
00017238 43F9 0000 0000             		lea	(Ani_obj69).l,a1
0001723E 4EB9 0000 B222             		jsr	AnimateSprite
00017244 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00017248 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
0001724A 323C 001B                  		move.w	#$1B,d1
0001724E 343C 0007                  		move.w	#7,d2
00017252 3602                       		move.w	d2,d3
00017254 5243                       		addq.w	#1,d3
00017256 3828 0008                  		move.w	8(a0),d4
0001725A 6100 929E                  		bsr.w	SolidObject
0001725E 6000 8F72                  		bra.w	MarkObjGone
00017262                            ; ===========================================================================
00017262                            
00017262                            Obj69_NotSolid2:
00017262 0828 0003 0022             		btst	#3,$22(a0)
00017268 6700                       		beq.s	Obj69_Display2
0001726A 43F8 D000                  		lea	($FFFFD000).w,a1
0001726E 08A9 0003 0022             		bclr	#3,$22(a1)
00017274 08A8 0003 0022             		bclr	#3,$22(a0)
0001727A 4228 0025                  		clr.b	$25(a0)
0001727E                            
0001727E                            Obj69_Display2:
0001727E 6000 8F52                  		bra.w	MarkObjGone
00017282                            ; ===========================================================================
00017282                            Ani_obj69:
00017282                            	include "_anim\obj69.asm"
00017282                            ; ---------------------------------------------------------------------------
00017282                            ; Animation script - trapdoor (SBZ)
00017282                            ; ---------------------------------------------------------------------------
00017282 0000                       		dc.w byte_158AC-Ani_obj69
00017284 0000                       		dc.w byte_158B2-Ani_obj69
00017286 0000                       		dc.w byte_158B8-Ani_obj69
00017288 0000                       		dc.w byte_158CC-Ani_obj69
0001728A 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00017290 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00017296 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000172A3 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000172AA 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000172B7 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000172BE                            		even
000172BE                            		even
000172BE                            
000172BE                            ; ---------------------------------------------------------------------------
000172BE                            ; Sprite mappings - trapdoor (SBZ)
000172BE                            ; ---------------------------------------------------------------------------
000172BE                            Map_obj69:
000172BE                            	include "_maps\obj69.asm"
000172BE                            ; ---------------------------------------------------------------------------
000172BE                            ; Sprite mappings - trapdoor (SBZ)
000172BE                            ; ---------------------------------------------------------------------------
000172BE 0000                       		dc.w byte_158E6-Map_obj69
000172C0 0000                       		dc.w byte_158FB-Map_obj69
000172C2 0000                       		dc.w byte_15924-Map_obj69
000172C4 04                         byte_158E6:	dc.b 4
000172C5 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
000172CA F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
000172CF F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
000172D4 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
000172D9 08                         byte_158FB:	dc.b 8
000172DA F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
000172DF 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
000172E4 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
000172E9 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
000172EE F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
000172F3 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
000172F8 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
000172FD 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00017302 04                         byte_15924:	dc.b 4
00017303 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00017308 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
0001730D 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00017312 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00017318 00                         		even
00017318 00                         		even
00017318                            
00017318                            ; ---------------------------------------------------------------------------
00017318                            ; Sprite mappings - spinning platforms (SBZ)
00017318                            ; ---------------------------------------------------------------------------
00017318                            Map_obj69a:
00017318                            	include "_maps\obj69a.asm"
00017318                            ; ---------------------------------------------------------------------------
00017318                            ; Sprite mappings - spinning platforms (SBZ)
00017318                            ; ---------------------------------------------------------------------------
00017318 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
0001731C 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00017320 0000                       		dc.w byte_15970-Map_obj69a
00017322 02                         byte_15944:	dc.b 2
00017323 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00017328 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
0001732D 02                         byte_1594F:	dc.b 2
0001732E F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00017333 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00017338 02                         byte_1595A:	dc.b 2
00017339 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
0001733E 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00017343 02                         byte_15965:	dc.b 2
00017344 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00017349 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
0001734E 02                         byte_15970:	dc.b 2
0001734F F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00017354 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
0001735A 00                         		even
0001735A 00                         		even
0001735A                            
0001735A                            ; ===========================================================================
0001735A                            ; ---------------------------------------------------------------------------
0001735A                            ; Object 6A - ground saws and pizza cutters (SBZ)
0001735A                            ; ---------------------------------------------------------------------------
0001735A                            
0001735A                            Obj6A:					; XREF: Obj_Index
0001735A 7000                       		moveq	#0,d0
0001735C 1028 0024                  		move.b	$24(a0),d0
00017360 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00017364 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00017368                            ; ===========================================================================
00017368 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
0001736A 0000                       		dc.w Obj6A_Action-Obj6A_Index
0001736C                            ; ===========================================================================
0001736C                            
0001736C                            Obj6A_Main:				; XREF: Obj6A_Index
0001736C 5428 0024                  		addq.b	#2,$24(a0)
00017370 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00017378 317C 43B5 0002             		move.w	#$43B5,2(a0)
0001737E 117C 0004 0001             		move.b	#4,1(a0)
00017384 117C 0004 0018             		move.b	#4,$18(a0)
0001738A 117C 0020 0019             		move.b	#$20,$19(a0)
00017390 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017396 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001739C 0C28 0003 0028             		cmpi.b	#3,$28(a0)
000173A2 6400                       		bcc.s	Obj6A_Action
000173A4 117C 00A2 0020             		move.b	#$A2,$20(a0)
000173AA                            
000173AA                            Obj6A_Action:				; XREF: Obj6A_Index
000173AA 7000                       		moveq	#0,d0
000173AC 1028 0028                  		move.b	$28(a0),d0
000173B0 0240 0007                  		andi.w	#7,d0
000173B4 D040                       		add.w	d0,d0
000173B6 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
000173BA 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
000173BE 3028 003A                  		move.w	$3A(a0),d0
000173C2 0240 FF80                  		andi.w	#$FF80,d0
000173C6 3238 F700                  		move.w	($FFFFF700).w,d1
000173CA 0441 0080                  		subi.w	#$80,d1
000173CE 0241 FF80                  		andi.w	#$FF80,d1
000173D2 9041                       		sub.w	d1,d0
000173D4 0C40 0280                  		cmpi.w	#$280,d0
000173D8 6200                       		bhi.s	Obj6A_Delete
000173DA 4EF9 0000 E110             		jmp	DisplaySprite
000173E0                            ; ===========================================================================
000173E0                            
000173E0                            Obj6A_Delete:
000173E0 4EF9 0000 E14C             		jmp	DeleteObject
000173E6                            ; ===========================================================================
000173E6 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
000173EA 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
000173EE 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
000173F0                            ; ===========================================================================
000173F0                            
000173F0                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
000173F0 4E75                       		rts	
000173F2                            ; ===========================================================================
000173F2                            
000173F2                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
000173F2 323C 0060                  		move.w	#$60,d1
000173F6 7000                       		moveq	#0,d0
000173F8 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000173FC 0828 0000 0022             		btst	#0,$22(a0)
00017402 6700                       		beq.s	Obj6A_Animate01
00017404 4440                       		neg.w	d0
00017406 D041                       		add.w	d1,d0
00017408                            
00017408                            Obj6A_Animate01:
00017408 3228 003A                  		move.w	$3A(a0),d1
0001740C 9240                       		sub.w	d0,d1
0001740E 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00017412 5328 001E                  		subq.b	#1,$1E(a0)
00017416 6A00                       		bpl.s	loc_15A46
00017418 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
0001741E 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00017424                            
00017424                            loc_15A46:
00017424 4A28 0001                  		tst.b	1(a0)
00017428 6A00                       		bpl.s	locret_15A60
0001742A 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001742E 0240 000F                  		andi.w	#$F,d0
00017432 6600                       		bne.s	locret_15A60
00017434 303C 00B0                  		move.w	#$B0,d0
00017438 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play saw sound
0001743E                            
0001743E                            locret_15A60:
0001743E 4E75                       		rts	
00017440                            ; ===========================================================================
00017440                            
00017440                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00017440 323C 0030                  		move.w	#$30,d1
00017444 7000                       		moveq	#0,d0
00017446 1038 FE64                  		move.b	($FFFFFE64).w,d0
0001744A 0828 0000 0022             		btst	#0,$22(a0)
00017450 6700                       		beq.s	Obj6A_Animate02
00017452 4440                       		neg.w	d0
00017454 0640 0080                  		addi.w	#$80,d0
00017458                            
00017458                            Obj6A_Animate02:
00017458 3228 0038                  		move.w	$38(a0),d1
0001745C 9240                       		sub.w	d0,d1
0001745E 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00017462 5328 001E                  		subq.b	#1,$1E(a0)
00017466 6A00                       		bpl.s	loc_15A96
00017468 117C 0002 001E             		move.b	#2,$1E(a0)
0001746E 0868 0000 001A             		bchg	#0,$1A(a0)
00017474                            
00017474                            loc_15A96:
00017474 4A28 0001                  		tst.b	1(a0)
00017478 6A00                       		bpl.s	locret_15AB0
0001747A 1038 FE64                  		move.b	($FFFFFE64).w,d0
0001747E 0C00 0018                  		cmpi.b	#$18,d0
00017482 6600                       		bne.s	locret_15AB0
00017484 303C 00B0                  		move.w	#$B0,d0
00017488 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play saw sound
0001748E                            
0001748E                            locret_15AB0:
0001748E 4E75                       		rts	
00017490                            ; ===========================================================================
00017490                            
00017490                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00017490 4A28 003D                  		tst.b	$3D(a0)
00017494 6600                       		bne.s	Obj6A_Animate03
00017496 3038 D008                  		move.w	($FFFFD008).w,d0
0001749A 0440 00C0                  		subi.w	#$C0,d0
0001749E 6500                       		bcs.s	loc_15B02
000174A0 9068 0008                  		sub.w	8(a0),d0
000174A4 6500                       		bcs.s	loc_15B02
000174A6 3038 D00C                  		move.w	($FFFFD00C).w,d0
000174AA 0440 0080                  		subi.w	#$80,d0
000174AE B068 000C                  		cmp.w	$C(a0),d0
000174B2 6400                       		bcc.s	locret_15B04
000174B4 0640 0100                  		addi.w	#$100,d0
000174B8 B068 000C                  		cmp.w	$C(a0),d0
000174BC 6500                       		bcs.s	locret_15B04
000174BE 117C 0001 003D             		move.b	#1,$3D(a0)
000174C4 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
000174CA 117C 00A2 0020             		move.b	#$A2,$20(a0)
000174D0 117C 0002 001A             		move.b	#2,$1A(a0)
000174D6 303C 00B0                  		move.w	#$B0,d0
000174DA 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play saw sound
000174E0                            
000174E0                            loc_15B02:
000174E0 588F                       		addq.l	#4,sp
000174E2                            
000174E2                            locret_15B04:
000174E2 4E75                       		rts	
000174E4                            ; ===========================================================================
000174E4                            
000174E4                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
000174E4 4EB9 0000 E0EA             		jsr	SpeedToPos
000174EA 3168 0008 003A             		move.w	8(a0),$3A(a0)
000174F0 5328 001E                  		subq.b	#1,$1E(a0)
000174F4 6A00                       		bpl.s	locret_15B24
000174F6 117C 0002 001E             		move.b	#2,$1E(a0)
000174FC 0868 0000 001A             		bchg	#0,$1A(a0)
00017502                            
00017502                            locret_15B24:
00017502 4E75                       		rts	
00017504                            ; ===========================================================================
00017504                            
00017504                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00017504 4A28 003D                  		tst.b	$3D(a0)
00017508 6600                       		bne.s	Obj6A_Animate04
0001750A 3038 D008                  		move.w	($FFFFD008).w,d0
0001750E 0640 00E0                  		addi.w	#$E0,d0
00017512 9068 0008                  		sub.w	8(a0),d0
00017516 6400                       		bcc.s	loc_15B74
00017518 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001751C 0440 0080                  		subi.w	#$80,d0
00017520 B068 000C                  		cmp.w	$C(a0),d0
00017524 6400                       		bcc.s	locret_15B76
00017526 0640 0100                  		addi.w	#$100,d0
0001752A B068 000C                  		cmp.w	$C(a0),d0
0001752E 6500                       		bcs.s	locret_15B76
00017530 117C 0001 003D             		move.b	#1,$3D(a0)
00017536 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
0001753C 117C 00A2 0020             		move.b	#$A2,$20(a0)
00017542 117C 0002 001A             		move.b	#2,$1A(a0)
00017548 303C 00B0                  		move.w	#$B0,d0
0001754C 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play saw sound
00017552                            
00017552                            loc_15B74:
00017552 588F                       		addq.l	#4,sp
00017554                            
00017554                            locret_15B76:
00017554 4E75                       		rts	
00017556                            ; ===========================================================================
00017556                            
00017556                            Obj6A_Animate04:
00017556 4EB9 0000 E0EA             		jsr	SpeedToPos
0001755C 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017562 5328 001E                  		subq.b	#1,$1E(a0)
00017566 6A00                       		bpl.s	locret_15B96
00017568 117C 0002 001E             		move.b	#2,$1E(a0)
0001756E 0868 0000 001A             		bchg	#0,$1A(a0)
00017574                            
00017574                            locret_15B96:
00017574 4E75                       		rts	
00017576                            ; ===========================================================================
00017576                            ; ---------------------------------------------------------------------------
00017576                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00017576                            ; ---------------------------------------------------------------------------
00017576                            Map_obj6A:
00017576                            	include "_maps\obj6A.asm"
00017576                            ; ---------------------------------------------------------------------------
00017576                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00017576                            ; ---------------------------------------------------------------------------
00017576 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
0001757A 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
0001757E 07                         byte_15BA0:	dc.b 7
0001757F C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00017584 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00017589 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
0001758E E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00017593 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00017598 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
0001759D 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000175A2 07                         byte_15BC4:	dc.b 7
000175A3 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000175A8 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000175AD E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000175B2 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000175B7 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000175BC 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000175C1 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000175C6 04                         byte_15BE8:	dc.b 4
000175C7 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000175CC E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000175D1 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000175D6 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000175DB 04                         byte_15BFD:	dc.b 4
000175DC E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000175E1 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000175E6 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000175EB 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000175F0                            		even
000175F0                            		even
000175F0                            
000175F0                            ; ===========================================================================
000175F0                            ; ---------------------------------------------------------------------------
000175F0                            ; Object 6B - stomper (SBZ)
000175F0                            ; ---------------------------------------------------------------------------
000175F0                            
000175F0                            Obj6B:					; XREF: Obj_Index
000175F0 7000                       		moveq	#0,d0
000175F2 1028 0024                  		move.b	$24(a0),d0
000175F6 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
000175FA 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
000175FE                            ; ===========================================================================
000175FE 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00017600 0000                       		dc.w Obj6B_Action-Obj6B_Index
00017602                            
00017602 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00017606 1C20 3803                  		dc.b  $1C, $20,	$38,   3
0001760A 1C20 4004                  		dc.b  $1C, $20,	$40,   4
0001760E 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00017612 8040 0005                  		dc.b  $80, $40,	  0,   5
00017616                            ; ===========================================================================
00017616                            
00017616                            Obj6B_Main:				; XREF: Obj6B_Index
00017616 5428 0024                  		addq.b	#2,$24(a0)
0001761A 7000                       		moveq	#0,d0
0001761C 1028 0028                  		move.b	$28(a0),d0
00017620 E448                       		lsr.w	#2,d0
00017622 0240 001C                  		andi.w	#$1C,d0
00017626 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
0001762A 115B 0019                  		move.b	(a3)+,$19(a0)
0001762E 115B 0016                  		move.b	(a3)+,$16(a0)
00017632 E448                       		lsr.w	#2,d0
00017634 1140 001A                  		move.b	d0,$1A(a0)
00017638 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00017640 317C 22C0 0002             		move.w	#$22C0,2(a0)
00017646 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
0001764C 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
0001764E 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00017654 6700                       		beq.s	Obj6B_SBZ3
00017656                            
00017656                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00017656 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001765A 7000                       		moveq	#0,d0
0001765C 1028 0023                  		move.b	$23(a0),d0
00017660 6700                       		beq.s	Obj6B_Delete
00017662 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017668                            
00017668                            Obj6B_Delete:
00017668 4EF9 0000 E14C             		jmp	DeleteObject
0001766E                            ; ===========================================================================
0001766E                            
0001766E                            Obj6B_SBZ3:				; XREF: Obj6B_Main
0001766E 317C 41F0 0002             		move.w	#$41F0,2(a0)
00017674 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
0001767A 6600                       		bne.s	Obj6B_SBZ12
0001767C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017680 7000                       		moveq	#0,d0
00017682 1028 0023                  		move.b	$23(a0),d0
00017686 6700                       		beq.s	Obj6B_SBZ12
00017688 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001768E 6700                       		beq.s	Obj6B_SBZ12
00017690 4238 F7CB                  		clr.b	($FFFFF7CB).w
00017694 60C0                       		bra.s	Obj6B_ChkGone
00017696                            ; ===========================================================================
00017696                            
00017696                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00017696 0028 0004 0001             		ori.b	#4,1(a0)
0001769C 117C 0004 0018             		move.b	#4,$18(a0)
000176A2 3168 0008 0034             		move.w	8(a0),$34(a0)
000176A8 3168 000C 0030             		move.w	$C(a0),$30(a0)
000176AE 7000                       		moveq	#0,d0
000176B0 101B                       		move.b	(a3)+,d0
000176B2 3140 003C                  		move.w	d0,$3C(a0)
000176B6 7000                       		moveq	#0,d0
000176B8 1028 0028                  		move.b	$28(a0),d0
000176BC 6A00                       		bpl.s	Obj6B_Action
000176BE 0200 000F                  		andi.b	#$F,d0
000176C2 1140 003E                  		move.b	d0,$3E(a0)
000176C6 1153 0028                  		move.b	(a3),$28(a0)
000176CA 0C13 0005                  		cmpi.b	#5,(a3)
000176CE 6600                       		bne.s	Obj6B_ChkGone2
000176D0 08E8 0004 0001             		bset	#4,1(a0)
000176D6                            
000176D6                            Obj6B_ChkGone2:
000176D6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000176DA 7000                       		moveq	#0,d0
000176DC 1028 0023                  		move.b	$23(a0),d0
000176E0 6700                       		beq.s	Obj6B_Action
000176E2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000176E8                            
000176E8                            Obj6B_Action:				; XREF: Obj6B_Index
000176E8 3F28 0008                  		move.w	8(a0),-(sp)
000176EC 7000                       		moveq	#0,d0
000176EE 1028 0028                  		move.b	$28(a0),d0
000176F2 0240 000F                  		andi.w	#$F,d0
000176F6 D040                       		add.w	d0,d0
000176F8 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
000176FC 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00017700 381F                       		move.w	(sp)+,d4
00017702 4A28 0001                  		tst.b	1(a0)
00017706 6A00                       		bpl.s	Obj6B_ChkDel
00017708 7200                       		moveq	#0,d1
0001770A 1228 0019                  		move.b	$19(a0),d1
0001770E 0641 000B                  		addi.w	#$B,d1
00017712 7400                       		moveq	#0,d2
00017714 1428 0016                  		move.b	$16(a0),d2
00017718 3602                       		move.w	d2,d3
0001771A 5243                       		addq.w	#1,d3
0001771C 6100 8DDC                  		bsr.w	SolidObject
00017720                            
00017720                            Obj6B_ChkDel:
00017720 3028 0034                  		move.w	$34(a0),d0
00017724 0240 FF80                  		andi.w	#$FF80,d0
00017728 3238 F700                  		move.w	($FFFFF700).w,d1
0001772C 0441 0080                  		subi.w	#$80,d1
00017730 0241 FF80                  		andi.w	#$FF80,d1
00017734 9041                       		sub.w	d1,d0
00017736 0C40 0280                  		cmpi.w	#$280,d0
0001773A 6200                       		bhi.s	loc_15D64
0001773C 4EF9 0000 E110             		jmp	DisplaySprite
00017742                            ; ===========================================================================
00017742                            
00017742                            loc_15D64:
00017742 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017748 6600                       		bne.s	Obj6B_Delete2
0001774A 4238 F7CB                  		clr.b	($FFFFF7CB).w
0001774E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017752 7000                       		moveq	#0,d0
00017754 1028 0023                  		move.b	$23(a0),d0
00017758 6700                       		beq.s	Obj6B_Delete2
0001775A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017760                            
00017760                            Obj6B_Delete2:
00017760 4EF9 0000 E14C             		jmp	DeleteObject
00017766                            ; ===========================================================================
00017766 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
0001776A 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
0001776E 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00017772                            ; ===========================================================================
00017772                            
00017772                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00017772 4E75                       		rts	
00017774                            ; ===========================================================================
00017774                            
00017774                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00017774 4A28 0038                  		tst.b	$38(a0)
00017778 6600                       		bne.s	loc_15DB4
0001777A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001777E 7000                       		moveq	#0,d0
00017780 1028 003E                  		move.b	$3E(a0),d0
00017784 0832 0000 0000             		btst	#0,(a2,d0.w)
0001778A 6700                       		beq.s	loc_15DC2
0001778C 117C 0001 0038             		move.b	#1,$38(a0)
00017792                            
00017792                            loc_15DB4:
00017792 3028 003C                  		move.w	$3C(a0),d0
00017796 B068 003A                  		cmp.w	$3A(a0),d0
0001779A 6700                       		beq.s	loc_15DE0
0001779C 5468 003A                  		addq.w	#2,$3A(a0)
000177A0                            
000177A0                            loc_15DC2:
000177A0 3028 003A                  		move.w	$3A(a0),d0
000177A4 0828 0000 0022             		btst	#0,$22(a0)
000177AA 6700                       		beq.s	loc_15DD4
000177AC 4440                       		neg.w	d0
000177AE 0640 0080                  		addi.w	#$80,d0
000177B2                            
000177B2                            loc_15DD4:
000177B2 3228 0034                  		move.w	$34(a0),d1
000177B6 9240                       		sub.w	d0,d1
000177B8 3141 0008                  		move.w	d1,8(a0)
000177BC 4E75                       		rts	
000177BE                            ; ===========================================================================
000177BE                            
000177BE                            loc_15DE0:
000177BE 5228 0028                  		addq.b	#1,$28(a0)
000177C2 317C 00B4 0036             		move.w	#$B4,$36(a0)
000177C8 4228 0038                  		clr.b	$38(a0)
000177CC 45F8 FC00                  		lea	($FFFFFC00).w,a2
000177D0 7000                       		moveq	#0,d0
000177D2 1028 0023                  		move.b	$23(a0),d0
000177D6 67C8                       		beq.s	loc_15DC2
000177D8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000177DE 60C0                       		bra.s	loc_15DC2
000177E0                            ; ===========================================================================
000177E0                            
000177E0                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
000177E0 4A28 0038                  		tst.b	$38(a0)
000177E4 6600                       		bne.s	loc_15E14
000177E6 5368 0036                  		subq.w	#1,$36(a0)
000177EA 6600                       		bne.s	loc_15E1E
000177EC 117C 0001 0038             		move.b	#1,$38(a0)
000177F2                            
000177F2                            loc_15E14:
000177F2 4A68 003A                  		tst.w	$3A(a0)
000177F6 6700                       		beq.s	loc_15E3C
000177F8 5568 003A                  		subq.w	#2,$3A(a0)
000177FC                            
000177FC                            loc_15E1E:
000177FC 3028 003A                  		move.w	$3A(a0),d0
00017800 0828 0000 0022             		btst	#0,$22(a0)
00017806 6700                       		beq.s	loc_15E30
00017808 4440                       		neg.w	d0
0001780A 0640 0080                  		addi.w	#$80,d0
0001780E                            
0001780E                            loc_15E30:
0001780E 3228 0034                  		move.w	$34(a0),d1
00017812 9240                       		sub.w	d0,d1
00017814 3141 0008                  		move.w	d1,8(a0)
00017818 4E75                       		rts	
0001781A                            ; ===========================================================================
0001781A                            
0001781A                            loc_15E3C:
0001781A 5328 0028                  		subq.b	#1,$28(a0)
0001781E 4228 0038                  		clr.b	$38(a0)
00017822 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017826 7000                       		moveq	#0,d0
00017828 1028 0023                  		move.b	$23(a0),d0
0001782C 67CE                       		beq.s	loc_15E1E
0001782E 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00017834 60C6                       		bra.s	loc_15E1E
00017836                            ; ===========================================================================
00017836                            
00017836                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00017836 4A28 0038                  		tst.b	$38(a0)
0001783A 6600                       		bne.s	loc_15E7C
0001783C 4A68 003A                  		tst.w	$3A(a0)
00017840 6700                       		beq.s	loc_15E6A
00017842 5368 003A                  		subq.w	#1,$3A(a0)
00017846 6000                       		bra.s	loc_15E8E
00017848                            ; ===========================================================================
00017848                            
00017848                            loc_15E6A:
00017848 5368 0036                  		subq.w	#1,$36(a0)
0001784C 6A00                       		bpl.s	loc_15E8E
0001784E 317C 003C 0036             		move.w	#$3C,$36(a0)
00017854 117C 0001 0038             		move.b	#1,$38(a0)
0001785A                            
0001785A                            loc_15E7C:
0001785A 5068 003A                  		addq.w	#8,$3A(a0)
0001785E 3028 003A                  		move.w	$3A(a0),d0
00017862 B068 003C                  		cmp.w	$3C(a0),d0
00017866 6600                       		bne.s	loc_15E8E
00017868 4228 0038                  		clr.b	$38(a0)
0001786C                            
0001786C                            loc_15E8E:
0001786C 3028 003A                  		move.w	$3A(a0),d0
00017870 0828 0000 0022             		btst	#0,$22(a0)
00017876 6700                       		beq.s	loc_15EA0
00017878 4440                       		neg.w	d0
0001787A 0640 0038                  		addi.w	#$38,d0
0001787E                            
0001787E                            loc_15EA0:
0001787E 3228 0030                  		move.w	$30(a0),d1
00017882 D240                       		add.w	d0,d1
00017884 3141 000C                  		move.w	d1,$C(a0)
00017888 4E75                       		rts	
0001788A                            ; ===========================================================================
0001788A                            
0001788A                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
0001788A 4A28 0038                  		tst.b	$38(a0)
0001788E 6600                       		bne.s	loc_15ED0
00017890 4A68 003A                  		tst.w	$3A(a0)
00017894 6700                       		beq.s	loc_15EBE
00017896 5168 003A                  		subq.w	#8,$3A(a0)
0001789A 6000                       		bra.s	loc_15EF0
0001789C                            ; ===========================================================================
0001789C                            
0001789C                            loc_15EBE:
0001789C 5368 0036                  		subq.w	#1,$36(a0)
000178A0 6A00                       		bpl.s	loc_15EF0
000178A2 317C 003C 0036             		move.w	#$3C,$36(a0)
000178A8 117C 0001 0038             		move.b	#1,$38(a0)
000178AE                            
000178AE                            loc_15ED0:
000178AE 3028 003A                  		move.w	$3A(a0),d0
000178B2 B068 003C                  		cmp.w	$3C(a0),d0
000178B6 6700                       		beq.s	loc_15EE0
000178B8 5068 003A                  		addq.w	#8,$3A(a0)
000178BC 6000                       		bra.s	loc_15EF0
000178BE                            ; ===========================================================================
000178BE                            
000178BE                            loc_15EE0:
000178BE 5368 0036                  		subq.w	#1,$36(a0)
000178C2 6A00                       		bpl.s	loc_15EF0
000178C4 317C 003C 0036             		move.w	#$3C,$36(a0)
000178CA 4228 0038                  		clr.b	$38(a0)
000178CE                            
000178CE                            loc_15EF0:
000178CE 3028 003A                  		move.w	$3A(a0),d0
000178D2 0828 0000 0022             		btst	#0,$22(a0)
000178D8 6700                       		beq.s	loc_15F02
000178DA 4440                       		neg.w	d0
000178DC 0640 0038                  		addi.w	#$38,d0
000178E0                            
000178E0                            loc_15F02:
000178E0 3228 0030                  		move.w	$30(a0),d1
000178E4 D240                       		add.w	d0,d1
000178E6 3141 000C                  		move.w	d1,$C(a0)
000178EA 4E75                       		rts	
000178EC                            ; ===========================================================================
000178EC                            
000178EC                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
000178EC 4A28 0038                  		tst.b	$38(a0)
000178F0 6600                       		bne.s	loc_15F3E
000178F2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000178F6 7000                       		moveq	#0,d0
000178F8 1028 003E                  		move.b	$3E(a0),d0
000178FC 0832 0000 0000             		btst	#0,(a2,d0.w)
00017902 6700                       		beq.s	locret_15F5C
00017904 117C 0001 0038             		move.b	#1,$38(a0)
0001790A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001790E 7000                       		moveq	#0,d0
00017910 1028 0023                  		move.b	$23(a0),d0
00017914 6700                       		beq.s	loc_15F3E
00017916 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001791C                            
0001791C                            loc_15F3E:
0001791C 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00017924 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
0001792C 3168 0008 0034             		move.w	8(a0),$34(a0)
00017932 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00017938 6700                       		beq.s	loc_15F5E
0001793A                            
0001793A                            locret_15F5C:
0001793A 4E75                       		rts	
0001793C                            ; ===========================================================================
0001793C                            
0001793C                            loc_15F5E:
0001793C 4228 0028                  		clr.b	$28(a0)
00017940 4228 0038                  		clr.b	$38(a0)
00017944 4E75                       		rts	
00017946                            ; ===========================================================================
00017946                            ; ---------------------------------------------------------------------------
00017946                            ; Sprite mappings - stomper and	platforms (SBZ)
00017946                            ; ---------------------------------------------------------------------------
00017946                            Map_obj6B:
00017946                            	include "_maps\obj6B.asm"
00017946                            ; ---------------------------------------------------------------------------
00017946                            ; Sprite mappings - stomper and	platforms (SBZ)
00017946                            ; ---------------------------------------------------------------------------
00017946 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
0001794A 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
0001794E 0000                       		dc.w byte_15FB0-Map_obj6B
00017950 04                         byte_15F72:	dc.b 4
00017951 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00017956 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
0001795B F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00017960 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00017965 08                         byte_15F87:	dc.b 8
00017966 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
0001796B E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00017970 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00017975 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
0001797A 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
0001797F 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00017984 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00017989 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
0001798E 0E                         byte_15FB0:	dc.b $E
0001798F C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00017994 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00017999 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
0001799E C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
000179A3 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
000179A8 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
000179AD C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
000179B2 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
000179B7 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
000179BC E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
000179C1 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
000179C6 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
000179CB 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
000179D0 200F 0058 80               		dc.b $20, $F, 0, $58, $80
000179D6 00                         		even
000179D6 00                         		even
000179D6                            
000179D6                            ; ===========================================================================
000179D6                            ; ---------------------------------------------------------------------------
000179D6                            ; Object 6C - vanishing	platforms (SBZ)
000179D6                            ; ---------------------------------------------------------------------------
000179D6                            
000179D6                            Obj6C:					; XREF: Obj_Index
000179D6 7000                       		moveq	#0,d0
000179D8 1028 0024                  		move.b	$24(a0),d0
000179DC 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
000179E0 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
000179E4                            ; ===========================================================================
000179E4 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
000179E6 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000179E8 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000179EA 0000                       		dc.w loc_16068-Obj6C_Index
000179EC                            ; ===========================================================================
000179EC                            
000179EC                            Obj6C_Main:				; XREF: Obj6C_Index
000179EC 5C28 0024                  		addq.b	#6,$24(a0)
000179F0 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
000179F8 317C 44C3 0002             		move.w	#$44C3,2(a0)
000179FE 0028 0004 0001             		ori.b	#4,1(a0)
00017A04 117C 0010 0019             		move.b	#$10,$19(a0)
00017A0A 117C 0004 0018             		move.b	#4,$18(a0)
00017A10 7000                       		moveq	#0,d0
00017A12 1028 0028                  		move.b	$28(a0),d0	; get object type
00017A16 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00017A1A 5240                       		addq.w	#1,d0		; add 1
00017A1C EF48                       		lsl.w	#7,d0		; multiply by $80
00017A1E 3200                       		move.w	d0,d1
00017A20 5340                       		subq.w	#1,d0
00017A22 3140 0030                  		move.w	d0,$30(a0)
00017A26 3140 0032                  		move.w	d0,$32(a0)
00017A2A 7000                       		moveq	#0,d0
00017A2C 1028 0028                  		move.b	$28(a0),d0	; get object type
00017A30 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00017A34 0641 0080                  		addi.w	#$80,d1
00017A38 C0C1                       		mulu.w	d1,d0
00017A3A E088                       		lsr.l	#8,d0
00017A3C 3140 0036                  		move.w	d0,$36(a0)
00017A40 5341                       		subq.w	#1,d1
00017A42 3141 0038                  		move.w	d1,$38(a0)
00017A46                            
00017A46                            loc_16068:				; XREF: Obj6C_Index
00017A46 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017A4A 9068 0036                  		sub.w	$36(a0),d0
00017A4E C068 0038                  		and.w	$38(a0),d0
00017A52 6600                       		bne.s	Obj6C_Animate
00017A54 5928 0024                  		subq.b	#4,$24(a0)
00017A58 6000                       		bra.s	Obj6C_Vanish
00017A5A                            ; ===========================================================================
00017A5A                            
00017A5A                            Obj6C_Animate:
00017A5A 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00017A60 4EB9 0000 B222             		jsr	AnimateSprite
00017A66 6000 876A                  		bra.w	MarkObjGone
00017A6A                            ; ===========================================================================
00017A6A                            
00017A6A                            Obj6C_Vanish:				; XREF: Obj6C_Index
00017A6A 5368 0030                  		subq.w	#1,$30(a0)
00017A6E 6A00                       		bpl.s	loc_160AA
00017A70 317C 007F 0030             		move.w	#127,$30(a0)
00017A76 4A28 001C                  		tst.b	$1C(a0)
00017A7A 6700                       		beq.s	loc_160A4
00017A7C 3168 0032 0030             		move.w	$32(a0),$30(a0)
00017A82                            
00017A82                            loc_160A4:
00017A82 0868 0000 001C             		bchg	#0,$1C(a0)
00017A88                            
00017A88                            loc_160AA:
00017A88 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00017A8E 4EB9 0000 B222             		jsr	AnimateSprite
00017A94 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00017A9A 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00017A9C 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00017AA2 6600                       		bne.s	loc_160D6
00017AA4 7200                       		moveq	#0,d1
00017AA6 1228 0019                  		move.b	$19(a0),d1
00017AAA 4EB9 0000 7F02             		jsr	(PlatformObject).l
00017AB0 6000 8720                  		bra.w	MarkObjGone
00017AB4                            ; ===========================================================================
00017AB4                            
00017AB4                            loc_160D6:
00017AB4 7200                       		moveq	#0,d1
00017AB6 1228 0019                  		move.b	$19(a0),d1
00017ABA 4EB9 0000 8076             		jsr	(ExitPlatform).l
00017AC0 3428 0008                  		move.w	8(a0),d2
00017AC4 4EB9 0000 85E0             		jsr	(MvSonicOnPtfm2).l
00017ACA 6000 8706                  		bra.w	MarkObjGone
00017ACE                            ; ===========================================================================
00017ACE                            
00017ACE                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00017ACE 0828 0003 0022             		btst	#3,$22(a0)
00017AD4 6700                       		beq.s	Obj6C_Display
00017AD6 43F8 D000                  		lea	($FFFFD000).w,a1
00017ADA 08A9 0003 0022             		bclr	#3,$22(a1)
00017AE0 08A8 0003 0022             		bclr	#3,$22(a0)
00017AE6 117C 0002 0024             		move.b	#2,$24(a0)
00017AEC 4228 0025                  		clr.b	$25(a0)
00017AF0                            
00017AF0                            Obj6C_Display:
00017AF0 6000 86E0                  		bra.w	MarkObjGone
00017AF4                            ; ===========================================================================
00017AF4                            Ani_obj6C:
00017AF4                            	include "_anim\obj6C.asm"
00017AF4                            ; ---------------------------------------------------------------------------
00017AF4                            ; Animation script - vanishing platforms (SBZ)
00017AF4                            ; ---------------------------------------------------------------------------
00017AF4 0000                       		dc.w byte_1611A-Ani_obj6C
00017AF6 0000                       		dc.w byte_16122-Ani_obj6C
00017AF8 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00017B00 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00017B08                            		even
00017B08                            		even
00017B08                            
00017B08                            ; ---------------------------------------------------------------------------
00017B08                            ; Sprite mappings - vanishing platforms	(SBZ)
00017B08                            ; ---------------------------------------------------------------------------
00017B08                            Map_obj6C:
00017B08                            	include "_maps\obj6C.asm"
00017B08                            ; ---------------------------------------------------------------------------
00017B08                            ; Sprite mappings - vanishing platforms	(SBZ)
00017B08                            ; ---------------------------------------------------------------------------
00017B08 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00017B0C 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00017B10 01                         byte_16132:	dc.b 1
00017B11 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00017B16 01                         byte_16138:	dc.b 1
00017B17 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00017B1C 01                         byte_1613E:	dc.b 1
00017B1D F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00017B22 00                         byte_16144:	dc.b 0
00017B24 00                         		even
00017B24 00                         		even
00017B24                            
00017B24                            ; ===========================================================================
00017B24                            ; ---------------------------------------------------------------------------
00017B24                            ; Object 6E - electrocution orbs (SBZ)
00017B24                            ; ---------------------------------------------------------------------------
00017B24                            
00017B24                            Obj6E:					; XREF: Obj_Index
00017B24 7000                       		moveq	#0,d0
00017B26 1028 0024                  		move.b	$24(a0),d0
00017B2A 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00017B2E 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00017B32                            ; ===========================================================================
00017B32 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00017B34 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00017B36                            ; ===========================================================================
00017B36                            
00017B36                            Obj6E_Main:				; XREF: Obj6E_Index
00017B36 5428 0024                  		addq.b	#2,$24(a0)
00017B3A 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00017B42 317C 047E 0002             		move.w	#$47E,2(a0)
00017B48 0028 0004 0001             		ori.b	#4,1(a0)
00017B4E 117C 0028 0019             		move.b	#$28,$19(a0)
00017B54 7000                       		moveq	#0,d0
00017B56 1028 0028                  		move.b	$28(a0),d0	; read object type
00017B5A E948                       		lsl.w	#4,d0		; multiply by $10
00017B5C 5340                       		subq.w	#1,d0
00017B5E 3140 0034                  		move.w	d0,$34(a0)
00017B62                            
00017B62                            Obj6E_Shock:				; XREF: Obj6E_Index
00017B62 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017B66 C068 0034                  		and.w	$34(a0),d0
00017B6A 6600                       		bne.s	Obj6E_Animate
00017B6C 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00017B72 4A28 0001                  		tst.b	1(a0)
00017B76 6A00                       		bpl.s	Obj6E_Animate
00017B78 303C 00B1                  		move.w	#$B1,d0
00017B7C 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play electricity sound
00017B82                            
00017B82                            Obj6E_Animate:
00017B82 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00017B88 4EB9 0000 B222             		jsr	AnimateSprite
00017B8E 117C 0000 0020             		move.b	#0,$20(a0)
00017B94 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00017B9A 6600                       		bne.s	Obj6E_Display	; if not, branch
00017B9C 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00017BA2                            
00017BA2                            Obj6E_Display:
00017BA2 6000 862E                  		bra.w	MarkObjGone
00017BA6                            ; ===========================================================================
00017BA6                            Ani_obj6E:
00017BA6                            	include "_anim\obj6E.asm"
00017BA6                            ; ---------------------------------------------------------------------------
00017BA6                            ; Animation script - electrocution orbs (SBZ)
00017BA6                            ; ---------------------------------------------------------------------------
00017BA6 0000                       		dc.w byte_161CC-Ani_obj6E
00017BA8 0000                       		dc.w byte_161D0-Ani_obj6E
00017BAA 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00017BAE 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00017BBE                            		even
00017BBE                            		even
00017BBE                            
00017BBE                            ; ---------------------------------------------------------------------------
00017BBE                            ; Sprite mappings - electrocution orbs (SBZ)
00017BBE                            ; ---------------------------------------------------------------------------
00017BBE                            Map_obj6E:
00017BBE                            	include "_maps\obj6E.asm"
00017BBE                            ; ---------------------------------------------------------------------------
00017BBE                            ; Sprite mappings - electrocution orbs (SBZ)
00017BBE                            ; ---------------------------------------------------------------------------
00017BBE 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
00017BC2 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
00017BC6 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
00017BCA 02                         byte_161EC:	dc.b 2
00017BCB F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017BD0 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017BD5 03                         byte_161F7:	dc.b 3
00017BD6 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00017BDB F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017BE0 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017BE5 05                         byte_16207:	dc.b 5
00017BE6 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00017BEB F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017BF0 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017BF5 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00017BFA F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00017BFF 04                         byte_16221:	dc.b 4
00017C00 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017C05 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017C0A F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00017C0F F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00017C14 06                         byte_16236:	dc.b 6
00017C15 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017C1A 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017C1F F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
00017C24 F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
00017C29 F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
00017C2E F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
00017C33 04                         byte_16255:	dc.b 4
00017C34 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017C39 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017C3E F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
00017C43 F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
00017C48                            		even
00017C48                            		even
00017C48                            
00017C48                            ; ===========================================================================
00017C48                            ; ---------------------------------------------------------------------------
00017C48                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00017C48                            ; ---------------------------------------------------------------------------
00017C48                            
00017C48                            Obj6F:					; XREF: Obj_Index
00017C48 7000                       		moveq	#0,d0
00017C4A 1028 0024                  		move.b	$24(a0),d0
00017C4E 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00017C52 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00017C56 3028 0030                  		move.w	$30(a0),d0
00017C5A 0240 FF80                  		andi.w	#$FF80,d0
00017C5E 3238 F700                  		move.w	($FFFFF700).w,d1
00017C62 0441 0080                  		subi.w	#$80,d1
00017C66 0241 FF80                  		andi.w	#$FF80,d1
00017C6A 9041                       		sub.w	d1,d0
00017C6C 0C40 0280                  		cmpi.w	#$280,d0
00017C70 6200                       		bhi.s	loc_1629A
00017C72                            
00017C72                            Obj6F_Display:
00017C72 4EF9 0000 E110             		jmp	DisplaySprite
00017C78                            ; ===========================================================================
00017C78                            
00017C78                            loc_1629A:
00017C78 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00017C7E 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00017C80 0C40 FF80                  		cmpi.w	#-$80,d0
00017C84 64EC                       		bcc.s	Obj6F_Display
00017C86                            
00017C86                            Obj6F_Act1or2:
00017C86 1028 002F                  		move.b	$2F(a0),d0
00017C8A 6A00                       		bpl.s	Obj6F_Delete
00017C8C 0240 007F                  		andi.w	#$7F,d0
00017C90 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00017C94 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00017C9A                            
00017C9A                            Obj6F_Delete:
00017C9A 4EF9 0000 E14C             		jmp	DeleteObject
00017CA0                            ; ===========================================================================
00017CA0 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00017CA2 0000                       		dc.w loc_163D8-Obj6F_Index
00017CA4                            ; ===========================================================================
00017CA4                            
00017CA4                            Obj6F_Main:				; XREF: Obj6F_Index
00017CA4 1028 0028                  		move.b	$28(a0),d0
00017CA8 6B00 0000                  		bmi.w	loc_16380
00017CAC 5428 0024                  		addq.b	#2,$24(a0)
00017CB0 217C 0001 7318 0004        		move.l	#Map_obj69a,4(a0)
00017CB8 317C 04DF 0002             		move.w	#$4DF,2(a0)
00017CBE 117C 0010 0019             		move.b	#$10,$19(a0)
00017CC4 0028 0004 0001             		ori.b	#4,1(a0)
00017CCA 117C 0004 0018             		move.b	#4,$18(a0)
00017CD0 7000                       		moveq	#0,d0
00017CD2 1028 0028                  		move.b	$28(a0),d0
00017CD6 3200                       		move.w	d0,d1
00017CD8 E648                       		lsr.w	#3,d0
00017CDA 0240 001E                  		andi.w	#$1E,d0
00017CDE 45FA 0000                  		lea	off_164A6(pc),a2
00017CE2 D4F2 0000                  		adda.w	(a2,d0.w),a2
00017CE6 315A 0038                  		move.w	(a2)+,$38(a0)
00017CEA 315A 0030                  		move.w	(a2)+,$30(a0)
00017CEE 214A 003C                  		move.l	a2,$3C(a0)
00017CF2 0241 000F                  		andi.w	#$F,d1
00017CF6 E549                       		lsl.w	#2,d1
00017CF8 1141 0038                  		move.b	d1,$38(a0)
00017CFC 117C 0004 003A             		move.b	#4,$3A(a0)
00017D02 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00017D06 6700                       		beq.s	loc_16356
00017D08 117C 0001 003B             		move.b	#1,$3B(a0)
00017D0E 4428 003A                  		neg.b	$3A(a0)
00017D12 7200                       		moveq	#0,d1
00017D14 1228 0038                  		move.b	$38(a0),d1
00017D18 D228 003A                  		add.b	$3A(a0),d1
00017D1C B228 0039                  		cmp.b	$39(a0),d1
00017D20 6500                       		bcs.s	loc_16352
00017D22 1001                       		move.b	d1,d0
00017D24 7200                       		moveq	#0,d1
00017D26 4A00                       		tst.b	d0
00017D28 6A00                       		bpl.s	loc_16352
00017D2A 1228 0039                  		move.b	$39(a0),d1
00017D2E 5901                       		subq.b	#4,d1
00017D30                            
00017D30                            loc_16352:
00017D30 1141 0038                  		move.b	d1,$38(a0)
00017D34                            
00017D34                            loc_16356:
00017D34 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00017D3A 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00017D40 4A41                       		tst.w	d1
00017D42 6600                       		bne.s	loc_1636C
00017D44 117C 0001 001C             		move.b	#1,$1C(a0)
00017D4A                            
00017D4A                            loc_1636C:
00017D4A 0C41 0008                  		cmpi.w	#8,d1
00017D4E 6600                       		bne.s	loc_16378
00017D50 117C 0000 001C             		move.b	#0,$1C(a0)
00017D56                            
00017D56                            loc_16378:
00017D56 6100 B332                  		bsr.w	Obj63_ChangeDir
00017D5A 6000 0000                  		bra.w	loc_163D8
00017D5E                            ; ===========================================================================
00017D5E                            
00017D5E                            loc_16380:				; XREF: Obj6F_Main
00017D5E 1140 002F                  		move.b	d0,$2F(a0)
00017D62 0240 007F                  		andi.w	#$7F,d0
00017D66 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00017D6A 08F2 0000 0000             		bset	#0,(a2,d0.w)
00017D70 6700                       		beq.s	loc_1639A
00017D72 4EF9 0000 E14C             		jmp	DeleteObject
00017D78                            ; ===========================================================================
00017D78                            
00017D78                            loc_1639A:
00017D78 D040                       		add.w	d0,d0
00017D7A 0240 001E                  		andi.w	#$1E,d0
00017D7E 0640 0080                  		addi.w	#$80,d0
00017D82 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00017D88 D4F2 0000                  		adda.w	(a2,d0.w),a2
00017D8C 321A                       		move.w	(a2)+,d1
00017D8E 2248                       		movea.l	a0,a1
00017D90 6000                       		bra.s	Obj6F_LoadPform
00017D92                            ; ===========================================================================
00017D92                            
00017D92                            Obj6F_Loop:
00017D92 4EB9 0000 E5A6             		jsr	SingleObjLoad
00017D98 6600                       		bne.s	loc_163D0
00017D9A                            
00017D9A                            Obj6F_LoadPform:			; XREF: loc_1639A
00017D9A 12BC 006F                  		move.b	#$6F,0(a1)
00017D9E 335A 0008                  		move.w	(a2)+,8(a1)
00017DA2 335A 000C                  		move.w	(a2)+,$C(a1)
00017DA6 301A                       		move.w	(a2)+,d0
00017DA8 1340 0028                  		move.b	d0,$28(a1)
00017DAC                            
00017DAC                            loc_163D0:
00017DAC 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00017DB0                            
00017DB0 588F                       		addq.l	#4,sp
00017DB2 4E75                       		rts	
00017DB4                            ; ===========================================================================
00017DB4                            
00017DB4                            loc_163D8:				; XREF: Obj6F_Index
00017DB4 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00017DBA 4EB9 0000 B222             		jsr	AnimateSprite
00017DC0 4A28 001A                  		tst.b	$1A(a0)
00017DC4 6600                       		bne.s	loc_16404
00017DC6 3F28 0008                  		move.w	8(a0),-(sp)
00017DCA 6100 0000                  		bsr.w	loc_16424
00017DCE 323C 001B                  		move.w	#$1B,d1
00017DD2 343C 0007                  		move.w	#7,d2
00017DD6 3602                       		move.w	d2,d3
00017DD8 5243                       		addq.w	#1,d3
00017DDA 381F                       		move.w	(sp)+,d4
00017DDC 6000 871C                  		bra.w	SolidObject
00017DE0                            ; ===========================================================================
00017DE0                            
00017DE0                            loc_16404:
00017DE0 0828 0003 0022             		btst	#3,$22(a0)
00017DE6 6700                       		beq.s	loc_16420
00017DE8 43F8 D000                  		lea	($FFFFD000).w,a1
00017DEC 08A9 0003 0022             		bclr	#3,$22(a1)
00017DF2 08A8 0003 0022             		bclr	#3,$22(a0)
00017DF8 4228 0025                  		clr.b	$25(a0)
00017DFC                            
00017DFC                            loc_16420:
00017DFC 6000 0002                  		bra.w	*+4
00017E00                            
00017E00                            loc_16424:
00017E00 3028 0008                  		move.w	8(a0),d0
00017E04 B068 0034                  		cmp.w	$34(a0),d0
00017E08 6600                       		bne.s	loc_16484
00017E0A 3028 000C                  		move.w	$C(a0),d0
00017E0E B068 0036                  		cmp.w	$36(a0),d0
00017E12 6600                       		bne.s	loc_16484
00017E14 7200                       		moveq	#0,d1
00017E16 1228 0038                  		move.b	$38(a0),d1
00017E1A D228 003A                  		add.b	$3A(a0),d1
00017E1E B228 0039                  		cmp.b	$39(a0),d1
00017E22 6500                       		bcs.s	loc_16456
00017E24 1001                       		move.b	d1,d0
00017E26 7200                       		moveq	#0,d1
00017E28 4A00                       		tst.b	d0
00017E2A 6A00                       		bpl.s	loc_16456
00017E2C 1228 0039                  		move.b	$39(a0),d1
00017E30 5901                       		subq.b	#4,d1
00017E32                            
00017E32                            loc_16456:
00017E32 1141 0038                  		move.b	d1,$38(a0)
00017E36 2268 003C                  		movea.l	$3C(a0),a1
00017E3A 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00017E40 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00017E46 4A41                       		tst.w	d1
00017E48 6600                       		bne.s	loc_16474
00017E4A 117C 0001 001C             		move.b	#1,$1C(a0)
00017E50                            
00017E50                            loc_16474:
00017E50 0C41 0008                  		cmpi.w	#8,d1
00017E54 6600                       		bne.s	loc_16480
00017E56 117C 0000 001C             		move.b	#0,$1C(a0)
00017E5C                            
00017E5C                            loc_16480:
00017E5C 6100 B22C                  		bsr.w	Obj63_ChangeDir
00017E60                            
00017E60                            loc_16484:
00017E60 4EF9 0000 E0EA             		jmp	SpeedToPos
00017E66                            ; ===========================================================================
00017E66                            Ani_obj6F:
00017E66                            	include "_anim\obj6F.asm"
00017E66                            ; ---------------------------------------------------------------------------
00017E66                            ; Animation script - platform on conveyor belt (SBZ)
00017E66                            ; ---------------------------------------------------------------------------
00017E66 0000                       		dc.w byte_1648E-Ani_obj6F
00017E68 0000                       		dc.w byte_164A2-Ani_obj6F
00017E6A 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00017E77 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00017E7E 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00017E82 00                         		even
00017E82 00                         		even
00017E82                            
00017E82 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00017E88 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00017E8E 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00017EA2 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00017EB6 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00017ECA 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00017EDE 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00017EF2 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00017F06                            ; ===========================================================================
00017F06                            ; ---------------------------------------------------------------------------
00017F06                            ; Object 70 - large girder block (SBZ)
00017F06                            ; ---------------------------------------------------------------------------
00017F06                            
00017F06                            Obj70:					; XREF: Obj_Index
00017F06 7000                       		moveq	#0,d0
00017F08 1028 0024                  		move.b	$24(a0),d0
00017F0C 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00017F10 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00017F14                            ; ===========================================================================
00017F14 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00017F16 0000                       		dc.w Obj70_Action-Obj70_Index
00017F18                            ; ===========================================================================
00017F18                            
00017F18                            Obj70_Main:				; XREF: Obj70_Index
00017F18 5428 0024                  		addq.b	#2,$24(a0)
00017F1C 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00017F24 317C 42F0 0002             		move.w	#$42F0,2(a0)
00017F2A 0028 0004 0001             		ori.b	#4,1(a0)
00017F30 117C 0004 0018             		move.b	#4,$18(a0)
00017F36 117C 0060 0019             		move.b	#$60,$19(a0)
00017F3C 117C 0018 0016             		move.b	#$18,$16(a0)
00017F42 3168 0008 0032             		move.w	8(a0),$32(a0)
00017F48 3168 000C 0030             		move.w	$C(a0),$30(a0)
00017F4E 6100 0000                  		bsr.w	Obj70_Move2
00017F52                            
00017F52                            Obj70_Action:				; XREF: Obj70_Index
00017F52 3F28 0008                  		move.w	8(a0),-(sp)
00017F56 4A68 003A                  		tst.w	$3A(a0)
00017F5A 6700                       		beq.s	Obj70_Move
00017F5C 5368 003A                  		subq.w	#1,$3A(a0)
00017F60 6600                       		bne.s	Obj70_Solid
00017F62                            
00017F62                            Obj70_Move:
00017F62 4EB9 0000 E0EA             		jsr	SpeedToPos
00017F68 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00017F6C 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00017F6E 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00017F72                            
00017F72                            Obj70_Solid:
00017F72 381F                       		move.w	(sp)+,d4
00017F74 4A28 0001                  		tst.b	1(a0)
00017F78 6A00                       		bpl.s	Obj70_ChkDel
00017F7A 7200                       		moveq	#0,d1
00017F7C 1228 0019                  		move.b	$19(a0),d1
00017F80 0641 000B                  		addi.w	#$B,d1
00017F84 7400                       		moveq	#0,d2
00017F86 1428 0016                  		move.b	$16(a0),d2
00017F8A 3602                       		move.w	d2,d3
00017F8C 5243                       		addq.w	#1,d3
00017F8E 6100 856A                  		bsr.w	SolidObject
00017F92                            
00017F92                            Obj70_ChkDel:
00017F92 3028 0032                  		move.w	$32(a0),d0
00017F96 0240 FF80                  		andi.w	#$FF80,d0
00017F9A 3238 F700                  		move.w	($FFFFF700).w,d1
00017F9E 0441 0080                  		subi.w	#$80,d1
00017FA2 0241 FF80                  		andi.w	#$FF80,d1
00017FA6 9041                       		sub.w	d1,d0
00017FA8 0C40 0280                  		cmpi.w	#$280,d0
00017FAC 6200                       		bhi.s	Obj70_Delete
00017FAE 4EF9 0000 E110             		jmp	DisplaySprite
00017FB4                            ; ===========================================================================
00017FB4                            
00017FB4                            Obj70_Delete:
00017FB4 4EF9 0000 E14C             		jmp	DeleteObject
00017FBA                            ; ===========================================================================
00017FBA                            
00017FBA                            Obj70_Move2:				; XREF: Obj70_Main
00017FBA 1028 0038                  		move.b	$38(a0),d0
00017FBE 0240 0018                  		andi.w	#$18,d0
00017FC2 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00017FC8 43F1 0000                  		lea	(a1,d0.w),a1
00017FCC 3159 0010                  		move.w	(a1)+,$10(a0)
00017FD0 3159 0012                  		move.w	(a1)+,$12(a0)
00017FD4 3159 0034                  		move.w	(a1)+,$34(a0)
00017FD8 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00017FDC 317C 0007 003A             		move.w	#7,$3A(a0)
00017FE2 4E75                       		rts	
00017FE4                            ; ===========================================================================
00017FE4 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00017FEC 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00017FF4 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00017FFC 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00018004                            ; ---------------------------------------------------------------------------
00018004                            ; Sprite mappings - large girder block (SBZ)
00018004                            ; ---------------------------------------------------------------------------
00018004                            Map_obj70:
00018004                            	include "_maps\obj70.asm"
00018004                            ; ---------------------------------------------------------------------------
00018004                            ; Sprite mappings - large girder block (SBZ)
00018004                            ; ---------------------------------------------------------------------------
00018004 0000                       		dc.w byte_1662A-Map_obj70
00018006 0C                         byte_1662A:	dc.b $C
00018007 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
0001800C 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00018011 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00018016 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
0001801B E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00018020 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00018025 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
0001802A 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
0001802F E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00018034 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00018039 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
0001803E 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00018044 00                         		even
00018044 00                         		even
00018044                            
00018044                            ; ===========================================================================
00018044                            ; ---------------------------------------------------------------------------
00018044                            ; Object 72 - teleporter (SBZ)
00018044                            ; ---------------------------------------------------------------------------
00018044                            
00018044                            Obj72:					; XREF: Obj_Index
00018044 7000                       		moveq	#0,d0
00018046 1028 0024                  		move.b	$24(a0),d0
0001804A 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
0001804E 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00018052 3028 0008                  		move.w	8(a0),d0
00018056 0240 FF80                  		andi.w	#$FF80,d0
0001805A 3238 F700                  		move.w	($FFFFF700).w,d1
0001805E 0441 0080                  		subi.w	#$80,d1
00018062 0241 FF80                  		andi.w	#$FF80,d1
00018066 9041                       		sub.w	d1,d0
00018068 0C40 0280                  		cmpi.w	#$280,d0
0001806C 6200                       		bhi.s	Obj72_Delete
0001806E 4E75                       		rts	
00018070                            ; ===========================================================================
00018070                            
00018070                            Obj72_Delete:
00018070 4EF9 0000 E14C             		jmp	DeleteObject
00018076                            ; ===========================================================================
00018076 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00018078 0000                       		dc.w loc_166C8-Obj72_Index
0001807A 0000                       		dc.w loc_1675E-Obj72_Index
0001807C 0000                       		dc.w loc_16798-Obj72_Index
0001807E                            ; ===========================================================================
0001807E                            
0001807E                            Obj72_Main:				; XREF: Obj72_Index
0001807E 5428 0024                  		addq.b	#2,$24(a0)
00018082 1028 0028                  		move.b	$28(a0),d0
00018086 D040                       		add.w	d0,d0
00018088 0240 001E                  		andi.w	#$1E,d0
0001808C 45FA 0000                  		lea	Obj72_Data(pc),a2
00018090 D4F2 0000                  		adda.w	(a2,d0.w),a2
00018094 315A 003A                  		move.w	(a2)+,$3A(a0)
00018098 214A 003C                  		move.l	a2,$3C(a0)
0001809C 315A 0036                  		move.w	(a2)+,$36(a0)
000180A0 315A 0038                  		move.w	(a2)+,$38(a0)
000180A4                            
000180A4                            loc_166C8:				; XREF: Obj72_Index
000180A4 43F8 D000                  		lea	($FFFFD000).w,a1
000180A8 3029 0008                  		move.w	8(a1),d0
000180AC 9068 0008                  		sub.w	8(a0),d0
000180B0 0828 0000 0022             		btst	#0,$22(a0)
000180B6 6700                       		beq.s	loc_166E0
000180B8 0640 000F                  		addi.w	#$F,d0
000180BC                            
000180BC                            loc_166E0:
000180BC 0C40 0010                  		cmpi.w	#$10,d0
000180C0 6400                       		bcc.s	locret_1675C
000180C2 3229 000C                  		move.w	$C(a1),d1
000180C6 9268 000C                  		sub.w	$C(a0),d1
000180CA 0641 0020                  		addi.w	#$20,d1
000180CE 0C41 0040                  		cmpi.w	#$40,d1
000180D2 6400                       		bcc.s	locret_1675C
000180D4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000180D8 6600                       		bne.s	locret_1675C
000180DA 0C28 0007 0028             		cmpi.b	#7,$28(a0)
000180E0 6600                       		bne.s	loc_1670E
000180E2 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
000180E8 6500                       		bcs.s	locret_1675C
000180EA                            
000180EA                            loc_1670E:
000180EA 5428 0024                  		addq.b	#2,$24(a0)
000180EE 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000180F4 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
000180FA 337C 0800 0014             		move.w	#$800,$14(a1)
00018100 337C 0000 0010             		move.w	#0,$10(a1)
00018106 337C 0000 0012             		move.w	#0,$12(a1)
0001810C 08A8 0005 0022             		bclr	#5,$22(a0)
00018112 08A9 0005 0022             		bclr	#5,$22(a1)
00018118 08E9 0001 0022             		bset	#1,$22(a1)
0001811E 3368 0008 0008             		move.w	8(a0),8(a1)
00018124 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001812A 4228 0032                  		clr.b	$32(a0)
0001812E 303C 00BE                  		move.w	#$BE,d0
00018132 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00018138                            
00018138                            locret_1675C:
00018138 4E75                       		rts	
0001813A                            ; ===========================================================================
0001813A                            
0001813A                            loc_1675E:				; XREF: Obj72_Index
0001813A 43F8 D000                  		lea	($FFFFD000).w,a1
0001813E 1028 0032                  		move.b	$32(a0),d0
00018142 5428 0032                  		addq.b	#2,$32(a0)
00018146 4EB9 0000 33D4             		jsr	(CalcSine).l
0001814C EA40                       		asr.w	#5,d0
0001814E 3428 000C                  		move.w	$C(a0),d2
00018152 9440                       		sub.w	d0,d2
00018154 3342 000C                  		move.w	d2,$C(a1)
00018158 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
0001815E 6600                       		bne.s	locret_16796
00018160 6100 0000                  		bsr.w	sub_1681C
00018164 5428 0024                  		addq.b	#2,$24(a0)
00018168 303C 00BC                  		move.w	#$BC,d0
0001816C 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play teleport sound
00018172                            
00018172                            locret_16796:
00018172 4E75                       		rts	
00018174                            ; ===========================================================================
00018174                            
00018174                            loc_16798:				; XREF: Obj72_Index
00018174 588F                       		addq.l	#4,sp
00018176 43F8 D000                  		lea	($FFFFD000).w,a1
0001817A 5328 002E                  		subq.b	#1,$2E(a0)
0001817E 6A00                       		bpl.s	loc_167DA
00018180 3368 0036 0008             		move.w	$36(a0),8(a1)
00018186 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001818C 7200                       		moveq	#0,d1
0001818E 1228 003A                  		move.b	$3A(a0),d1
00018192 5801                       		addq.b	#4,d1
00018194 B228 003B                  		cmp.b	$3B(a0),d1
00018198 6500                       		bcs.s	loc_167C2
0001819A 7200                       		moveq	#0,d1
0001819C 6000                       		bra.s	loc_16800
0001819E                            ; ===========================================================================
0001819E                            
0001819E                            loc_167C2:
0001819E 1141 003A                  		move.b	d1,$3A(a0)
000181A2 2468 003C                  		movea.l	$3C(a0),a2
000181A6 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
000181AC 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
000181B2 6000 0000                  		bra.w	sub_1681C
000181B6                            ; ===========================================================================
000181B6                            
000181B6                            loc_167DA:
000181B6 2429 0008                  		move.l	8(a1),d2
000181BA 2629 000C                  		move.l	$C(a1),d3
000181BE 3029 0010                  		move.w	$10(a1),d0
000181C2 48C0                       		ext.l	d0
000181C4 E180                       		asl.l	#8,d0
000181C6 D480                       		add.l	d0,d2
000181C8 3029 0012                  		move.w	$12(a1),d0
000181CC 48C0                       		ext.l	d0
000181CE E180                       		asl.l	#8,d0
000181D0 D680                       		add.l	d0,d3
000181D2 2342 0008                  		move.l	d2,8(a1)
000181D6 2343 000C                  		move.l	d3,$C(a1)
000181DA 4E75                       		rts	
000181DC                            ; ===========================================================================
000181DC                            
000181DC                            loc_16800:
000181DC 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
000181E2 4228 0024                  		clr.b	$24(a0)
000181E6 4238 F7C8                  		clr.b	($FFFFF7C8).w
000181EA 337C 0000 0010             		move.w	#0,$10(a1)
000181F0 337C 0200 0012             		move.w	#$200,$12(a1)
000181F6 4E75                       		rts	
000181F8                            
000181F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000181F8                            
000181F8                            
000181F8                            sub_1681C:
000181F8 7000                       		moveq	#0,d0
000181FA 343C 1000                  		move.w	#$1000,d2
000181FE 3028 0036                  		move.w	$36(a0),d0
00018202 9069 0008                  		sub.w	8(a1),d0
00018206 6C00                       		bge.s	loc_16830
00018208 4440                       		neg.w	d0
0001820A 4442                       		neg.w	d2
0001820C                            
0001820C                            loc_16830:
0001820C 7200                       		moveq	#0,d1
0001820E 363C 1000                  		move.w	#$1000,d3
00018212 3228 0038                  		move.w	$38(a0),d1
00018216 9269 000C                  		sub.w	$C(a1),d1
0001821A 6C00                       		bge.s	loc_16844
0001821C 4441                       		neg.w	d1
0001821E 4443                       		neg.w	d3
00018220                            
00018220                            loc_16844:
00018220 B240                       		cmp.w	d0,d1
00018222 6500                       		bcs.s	loc_1687A
00018224 7200                       		moveq	#0,d1
00018226 3228 0038                  		move.w	$38(a0),d1
0001822A 9269 000C                  		sub.w	$C(a1),d1
0001822E 4841                       		swap	d1
00018230 83C3                       		divs.w	d3,d1
00018232 7000                       		moveq	#0,d0
00018234 3028 0036                  		move.w	$36(a0),d0
00018238 9069 0008                  		sub.w	8(a1),d0
0001823C 6700                       		beq.s	loc_16866
0001823E 4840                       		swap	d0
00018240 81C1                       		divs.w	d1,d0
00018242                            
00018242                            loc_16866:
00018242 3340 0010                  		move.w	d0,$10(a1)
00018246 3343 0012                  		move.w	d3,$12(a1)
0001824A 4A41                       		tst.w	d1
0001824C 6A00                       		bpl.s	loc_16874
0001824E 4441                       		neg.w	d1
00018250                            
00018250                            loc_16874:
00018250 3141 002E                  		move.w	d1,$2E(a0)
00018254 4E75                       		rts	
00018256                            ; ===========================================================================
00018256                            
00018256                            loc_1687A:
00018256 7000                       		moveq	#0,d0
00018258 3028 0036                  		move.w	$36(a0),d0
0001825C 9069 0008                  		sub.w	8(a1),d0
00018260 4840                       		swap	d0
00018262 81C2                       		divs.w	d2,d0
00018264 7200                       		moveq	#0,d1
00018266 3228 0038                  		move.w	$38(a0),d1
0001826A 9269 000C                  		sub.w	$C(a1),d1
0001826E 6700                       		beq.s	loc_16898
00018270 4841                       		swap	d1
00018272 83C0                       		divs.w	d0,d1
00018274                            
00018274                            loc_16898:
00018274 3341 0012                  		move.w	d1,$12(a1)
00018278 3342 0010                  		move.w	d2,$10(a1)
0001827C 4A40                       		tst.w	d0
0001827E 6A00                       		bpl.s	loc_168A6
00018280 4440                       		neg.w	d0
00018282                            
00018282                            loc_168A6:
00018282 3140 002E                  		move.w	d0,$2E(a0)
00018286 4E75                       		rts	
00018288                            ; End of function sub_1681C
00018288                            
00018288                            ; ===========================================================================
00018288 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
0001828E 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00018294 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00018298 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
0001829E 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
000182A4 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
000182AA 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
000182B0 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
000182B6 0884 0298 0894             		dc.w $884, $298, $894
000182BC 0270 0894 0190             		dc.w $270, $894, $190
000182C2 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
000182C8 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
000182CE 1184 0498 1158             		dc.w $1184, $498, $1158
000182D4 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
000182DA 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
000182E0 04E8 0F94 0590             		dc.w $4E8, $F94, $590
000182E6 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
000182EC 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
000182F2 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
000182F8 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
000182FE 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00018304 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
0001830A 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00018310                            ; ===========================================================================
00018310                            ; ---------------------------------------------------------------------------
00018310                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00018310                            ; ---------------------------------------------------------------------------
00018310                            
00018310                            Obj78:					; XREF: Obj_Index
00018310 7000                       		moveq	#0,d0
00018312 1028 0024                  		move.b	$24(a0),d0
00018316 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
0001831A 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
0001831E                            ; ===========================================================================
0001831E 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00018320 0000                       		dc.w Obj78_Action-Obj78_Index
00018322 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00018324 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00018326 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00018328 0000                       		dc.w Obj78_Delete-Obj78_Index
0001832A 0000                       		dc.w loc_16CC0-Obj78_Index
0001832C                            ; ===========================================================================
0001832C                            
0001832C                            locret_16950:
0001832C 4E75                       		rts	
0001832E                            ; ===========================================================================
0001832E                            
0001832E                            Obj78_Main:				; XREF: Obj78_Index
0001832E 117C 0007 0016             		move.b	#7,$16(a0)
00018334 117C 0008 0017             		move.b	#8,$17(a0)
0001833A 4EB9 0000 E0BE             		jsr	ObjectFall
00018340 4EBA E4B0                  		jsr	ObjHitFloor
00018344 4A41                       		tst.w	d1
00018346 6AE4                       		bpl.s	locret_16950
00018348 D368 000C                  		add.w	d1,$C(a0)
0001834C 4268 0012                  		clr.w	$12(a0)
00018350 5428 0024                  		addq.b	#2,$24(a0)
00018354 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
0001835C 317C 22B0 0002             		move.w	#$22B0,2(a0)
00018362 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00018368 6700                       		beq.s	loc_16996
0001836A 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00018370                            
00018370                            loc_16996:
00018370 0228 0003 0001             		andi.b	#3,1(a0)
00018376 0028 0004 0001             		ori.b	#4,1(a0)
0001837C 1168 0001 0022             		move.b	1(a0),$22(a0)
00018382 117C 0004 0018             		move.b	#4,$18(a0)
00018388 117C 0008 0019             		move.b	#8,$19(a0)
0001838E 117C 000B 0020             		move.b	#$B,$20(a0)
00018394 3428 0008                  		move.w	8(a0),d2
00018398 7A0C                       		moveq	#$C,d5
0001839A 0828 0000 0022             		btst	#0,$22(a0)
000183A0 6700                       		beq.s	loc_169CA
000183A2 4445                       		neg.w	d5
000183A4                            
000183A4                            loc_169CA:
000183A4 1C3C 0004                  		move.b	#4,d6
000183A8 7600                       		moveq	#0,d3
000183AA 7804                       		moveq	#4,d4
000183AC 2448                       		movea.l	a0,a2
000183AE 7202                       		moveq	#2,d1
000183B0                            
000183B0                            Obj78_LoadBody:
000183B0 4EB9 0000 E5BC             		jsr	SingleObjLoad2
000183B6 6600                       		bne.s	Obj78_QuitLoad
000183B8 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
000183BC 1346 0024                  		move.b	d6,$24(a1)
000183C0 5406                       		addq.b	#2,d6
000183C2 2368 0004 0004             		move.l	4(a0),4(a1)
000183C8 3368 0002 0002             		move.w	2(a0),2(a1)
000183CE 137C 0005 0018             		move.b	#5,$18(a1)
000183D4 137C 0008 0019             		move.b	#8,$19(a1)
000183DA 137C 00CB 0020             		move.b	#$CB,$20(a1)
000183E0 D445                       		add.w	d5,d2
000183E2 3342 0008                  		move.w	d2,8(a1)
000183E6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000183EC 1368 0022 0022             		move.b	$22(a0),$22(a1)
000183F2 1368 0022 0001             		move.b	$22(a0),1(a1)
000183F8 137C 0008 001A             		move.b	#8,$1A(a1)
000183FE 234A 003C                  		move.l	a2,$3C(a1)
00018402 1344 003C                  		move.b	d4,$3C(a1)
00018406 5804                       		addq.b	#4,d4
00018408 2449                       		movea.l	a1,a2
0001840A                            
0001840A                            Obj78_QuitLoad:
0001840A 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
0001840E                            
0001840E 117C 0007 002A             		move.b	#7,$2A(a0)
00018414 4228 003C                  		clr.b	$3C(a0)
00018418                            
00018418                            Obj78_Action:				; XREF: Obj78_Index
00018418 4A28 0022                  		tst.b	$22(a0)
0001841C 6B00 0000                  		bmi.w	loc_16C96
00018420 7000                       		moveq	#0,d0
00018422 1028 0025                  		move.b	$25(a0),d0
00018426 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
0001842A 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
0001842E 1228 002B                  		move.b	$2B(a0),d1
00018432 6A00                       		bpl.s	Obj78_Display
00018434 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001843A 1028 0026                  		move.b	$26(a0),d0
0001843E 0240 007F                  		andi.w	#$7F,d0
00018442 5828 0026                  		addq.b	#4,$26(a0)
00018446 1031 0000                  		move.b	(a1,d0.w),d0
0001844A 6A00                       		bpl.s	Obj78_AniHead
0001844C 08A8 0007 002B             		bclr	#7,$2B(a0)
00018452 6000                       		bra.s	Obj78_Display
00018454                            ; ===========================================================================
00018454                            
00018454                            Obj78_AniHead:
00018454 0201 0010                  		andi.b	#$10,d1
00018458 D001                       		add.b	d1,d0
0001845A 1140 001A                  		move.b	d0,$1A(a0)
0001845E                            
0001845E                            Obj78_Display:
0001845E 3028 0008                  		move.w	8(a0),d0
00018462 0240 FF80                  		andi.w	#$FF80,d0
00018466 3238 F700                  		move.w	($FFFFF700).w,d1
0001846A 0441 0080                  		subi.w	#$80,d1
0001846E 0241 FF80                  		andi.w	#$FF80,d1
00018472 9041                       		sub.w	d1,d0
00018474 0C40 0280                  		cmpi.w	#$280,d0
00018478 6200 0000                  		bhi.w	Obj78_ChkGone
0001847C 4EF9 0000 E110             		jmp	DisplaySprite
00018482                            ; ===========================================================================
00018482                            
00018482                            Obj78_ChkGone:
00018482 45F8 FC00                  		lea	($FFFFFC00).w,a2
00018486 7000                       		moveq	#0,d0
00018488 1028 0023                  		move.b	$23(a0),d0
0001848C 6700                       		beq.s	loc_16ABC
0001848E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018494                            
00018494                            loc_16ABC:
00018494 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
0001849A 4E75                       		rts	
0001849C                            ; ===========================================================================
0001849C                            
0001849C                            Obj78_Delete:				; XREF: Obj78_Index
0001849C 4EF9 0000 E14C             		jmp	DeleteObject
000184A2                            ; ===========================================================================
000184A2 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
000184A4 0000                       		dc.w loc_16B02-Obj78_Index2
000184A6                            ; ===========================================================================
000184A6                            
000184A6                            Obj78_Move:				; XREF: Obj78_Index2
000184A6 5328 002A                  		subq.b	#1,$2A(a0)
000184AA 6B00                       		bmi.s	Obj78_Move2
000184AC 4E75                       		rts	
000184AE                            ; ===========================================================================
000184AE                            
000184AE                            Obj78_Move2:
000184AE 5428 0025                  		addq.b	#2,$25(a0)
000184B2 117C 0010 002A             		move.b	#$10,$2A(a0)
000184B8 317C FF40 0010             		move.w	#-$C0,$10(a0)
000184BE 317C 0040 0014             		move.w	#$40,$14(a0)
000184C4 0868 0004 002B             		bchg	#4,$2B(a0)
000184CA 6600                       		bne.s	loc_16AFC
000184CC 4268 0010                  		clr.w	$10(a0)
000184D0 4468 0014                  		neg.w	$14(a0)
000184D4                            
000184D4                            loc_16AFC:
000184D4 08E8 0007 002B             		bset	#7,$2B(a0)
000184DA                            
000184DA                            loc_16B02:				; XREF: Obj78_Index2
000184DA 5328 002A                  		subq.b	#1,$2A(a0)
000184DE 6B00                       		bmi.s	loc_16B5E
000184E0 2F28 0008                  		move.l	8(a0),-(sp)
000184E4 2428 0008                  		move.l	8(a0),d2
000184E8 3028 0010                  		move.w	$10(a0),d0
000184EC 0828 0000 0022             		btst	#0,$22(a0)
000184F2 6700                       		beq.s	loc_16B1E
000184F4 4440                       		neg.w	d0
000184F6                            
000184F6                            loc_16B1E:
000184F6 48C0                       		ext.l	d0
000184F8 E180                       		asl.l	#8,d0
000184FA D480                       		add.l	d0,d2
000184FC 2142 0008                  		move.l	d2,8(a0)
00018500 4EBA E2F0                  		jsr	ObjHitFloor
00018504 241F                       		move.l	(sp)+,d2
00018506 0C41 FFF8                  		cmpi.w	#-8,d1
0001850A 6D00                       		blt.s	loc_16B70
0001850C 0C41 000C                  		cmpi.w	#$C,d1
00018510 6C00                       		bge.s	loc_16B70
00018512 D368 000C                  		add.w	d1,$C(a0)
00018516 4842                       		swap	d2
00018518 B468 0008                  		cmp.w	8(a0),d2
0001851C 6700                       		beq.s	locret_16B5C
0001851E 7000                       		moveq	#0,d0
00018520 1028 003C                  		move.b	$3C(a0),d0
00018524 5228 003C                  		addq.b	#1,$3C(a0)
00018528 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001852E 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018532                            
00018532                            locret_16B5C:
00018532 4E75                       		rts	
00018534                            ; ===========================================================================
00018534                            
00018534                            loc_16B5E:
00018534 5528 0025                  		subq.b	#2,$25(a0)
00018538 117C 0007 002A             		move.b	#7,$2A(a0)
0001853E 317C 0000 0010             		move.w	#0,$10(a0)
00018544 4E75                       		rts	
00018546                            ; ===========================================================================
00018546                            
00018546                            loc_16B70:
00018546 2142 0008                  		move.l	d2,8(a0)
0001854A 0868 0000 0022             		bchg	#0,$22(a0)
00018550 1168 0022 0001             		move.b	$22(a0),1(a0)
00018556 7000                       		moveq	#0,d0
00018558 1028 003C                  		move.b	$3C(a0),d0
0001855C 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00018562 5228 003C                  		addq.b	#1,$3C(a0)
00018566 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001856C 4E75                       		rts	
0001856E                            ; ===========================================================================
0001856E                            
0001856E                            Obj78_BodySeg2:				; XREF: Obj78_Index
0001856E 2268 003C                  		movea.l	$3C(a0),a1
00018572 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00018578 6A00                       		bpl.s	Obj78_BodySeg1
0001857A 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00018580 1028 0026                  		move.b	$26(a0),d0
00018584 0240 007F                  		andi.w	#$7F,d0
00018588 5828 0026                  		addq.b	#4,$26(a0)
0001858C 4A31 0004                  		tst.b	4(a1,d0.w)
00018590 6A00                       		bpl.s	Obj78_AniBody
00018592 5828 0026                  		addq.b	#4,$26(a0)
00018596                            
00018596                            Obj78_AniBody:
00018596 1031 0000                  		move.b	(a1,d0.w),d0
0001859A 5000                       		addq.b	#8,d0
0001859C 1140 001A                  		move.b	d0,$1A(a0)
000185A0                            
000185A0                            Obj78_BodySeg1:				; XREF: Obj78_Index
000185A0 2268 003C                  		movea.l	$3C(a0),a1
000185A4 4A28 0022                  		tst.b	$22(a0)
000185A8 6B00 0000                  		bmi.w	loc_16C90
000185AC 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000185B2 1169 0025 0025             		move.b	$25(a1),$25(a0)
000185B8 6700 0000                  		beq.w	loc_16C64
000185BC 3169 0014 0014             		move.w	$14(a1),$14(a0)
000185C2 3029 0010                  		move.w	$10(a1),d0
000185C6 D069 0014                  		add.w	$14(a1),d0
000185CA 3140 0010                  		move.w	d0,$10(a0)
000185CE 2428 0008                  		move.l	8(a0),d2
000185D2 2602                       		move.l	d2,d3
000185D4 3028 0010                  		move.w	$10(a0),d0
000185D8 0828 0000 0022             		btst	#0,$22(a0)
000185DE 6700                       		beq.s	loc_16C0C
000185E0 4440                       		neg.w	d0
000185E2                            
000185E2                            loc_16C0C:
000185E2 48C0                       		ext.l	d0
000185E4 E180                       		asl.l	#8,d0
000185E6 D480                       		add.l	d0,d2
000185E8 2142 0008                  		move.l	d2,8(a0)
000185EC 4843                       		swap	d3
000185EE B668 0008                  		cmp.w	8(a0),d3
000185F2 6700                       		beq.s	loc_16C64
000185F4 7000                       		moveq	#0,d0
000185F6 1028 003C                  		move.b	$3C(a0),d0
000185FA 1231 002C                  		move.b	$2C(a1,d0.w),d1
000185FE 0C01 0080                  		cmpi.b	#-$80,d1
00018602 6600                       		bne.s	loc_16C50
00018604 4843                       		swap	d3
00018606 2143 0008                  		move.l	d3,8(a0)
0001860A 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001860E 0868 0000 0022             		bchg	#0,$22(a0)
00018614 1168 0022 0001             		move.b	$22(a0),1(a0)
0001861A 5228 003C                  		addq.b	#1,$3C(a0)
0001861E 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018624 6000                       		bra.s	loc_16C64
00018626                            ; ===========================================================================
00018626                            
00018626                            loc_16C50:
00018626 4881                       		ext.w	d1
00018628 D368 000C                  		add.w	d1,$C(a0)
0001862C 5228 003C                  		addq.b	#1,$3C(a0)
00018630 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018636 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001863A                            
0001863A                            loc_16C64:
0001863A 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00018640 6700                       		beq.s	loc_16C90
00018642 0C11 0027                  		cmpi.b	#$27,0(a1)
00018646 6700                       		beq.s	loc_16C7C
00018648 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
0001864E 6600                       		bne.s	loc_16C82
00018650                            
00018650                            loc_16C7C:
00018650 4229 0020                  		clr.b	$20(a1)	; immediately remove all touch response values when destroying the head to avoid taking damage
00018654 117C 000A 0024             		move.b	#$A,$24(a0)
0001865A                            
0001865A                            loc_16C82:
0001865A 4EF9 0000 E110             		jmp	DisplaySprite
00018660                            
00018660                            ; ===========================================================================
00018660 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00018668                            ; ===========================================================================
00018668                            
00018668                            loc_16C90:
00018668 08E9 0007 0022             		bset	#7,$22(a1)
0001866E                            
0001866E                            loc_16C96:
0001866E 7000                       		moveq	#0,d0
00018670 1028 0024                  		move.b	$24(a0),d0
00018674 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00018678 0828 0000 0022             		btst	#0,$22(a0)
0001867E 6700                       		beq.s	loc_16CAA
00018680 4440                       		neg.w	d0
00018682                            
00018682                            loc_16CAA:
00018682 3140 0010                  		move.w	d0,$10(a0)
00018686 317C FC00 0012             		move.w	#-$400,$12(a0)
0001868C 117C 000C 0024             		move.b	#$C,$24(a0)
00018692 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00018698                            
00018698                            loc_16CC0:				; XREF: Obj78_Index
00018698 4EB9 0000 E0BE             		jsr	ObjectFall
0001869E 4A68 0012                  		tst.w	$12(a0)
000186A2 6B00                       		bmi.s	loc_16CE0
000186A4 4EBA E14C                  		jsr	ObjHitFloor
000186A8 4A41                       		tst.w	d1
000186AA 6A00                       		bpl.s	loc_16CE0
000186AC D368 000C                  		add.w	d1,$C(a0)
000186B0 317C FC00 0012             		move.w	#-$400,$12(a0)
000186B6                            
000186B6                            loc_16CE0:
000186B6 4A28 0001                  		tst.b	1(a0)
000186BA 6A00 FDC6                  		bpl.w	Obj78_ChkGone
000186BE 4EF9 0000 E110             		jmp	DisplaySprite
000186C4                            ; ===========================================================================
000186C4                            Ani_obj78:
000186C4                            	include "_anim\obj78.asm"
000186C4                            ; ---------------------------------------------------------------------------
000186C4                            ; Animation script - Caterkiller enemy (uses non-standard format)
000186C4                            ; ---------------------------------------------------------------------------
000186C4 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
000186D4 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
000186E4 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
000186F4 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00018704 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00018714 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00018724 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00018734 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00018744                            	even
00018744                            	even
00018744                            
00018744                            ; ---------------------------------------------------------------------------
00018744                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00018744                            ; ---------------------------------------------------------------------------
00018744                            Map_obj78:
00018744                            	include "_maps\obj78.asm"
00018744                            ; ---------------------------------------------------------------------------
00018744                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00018744                            ; ---------------------------------------------------------------------------
00018744 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00018748 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
0001874C 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00018750 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00018754 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00018758 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
0001875C 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00018760 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00018764 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00018768 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
0001876C 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00018770 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00018774 01                         byte_16D9E:	dc.b 1
00018775 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
0001877A 01                         byte_16DA4:	dc.b 1
0001877B F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00018780 01                         byte_16DAA:	dc.b 1
00018781 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00018786 01                         byte_16DB0:	dc.b 1
00018787 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
0001878C 01                         byte_16DB6:	dc.b 1
0001878D EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00018792 01                         byte_16DBC:	dc.b 1
00018793 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00018798 01                         byte_16DC2:	dc.b 1
00018799 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
0001879E 01                         byte_16DC8:	dc.b 1
0001879F EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
000187A4 01                         byte_16DCE:	dc.b 1
000187A5 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000187AA 01                         byte_16DD4:	dc.b 1
000187AB F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
000187B0 01                         byte_16DDA:	dc.b 1
000187B1 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
000187B6 01                         byte_16DE0:	dc.b 1
000187B7 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
000187BC 01                         byte_16DE6:	dc.b 1
000187BD F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
000187C2 01                         byte_16DEC:	dc.b 1
000187C3 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
000187C8 01                         byte_16DF2:	dc.b 1
000187C9 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
000187CE 01                         byte_16DF8:	dc.b 1
000187CF F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
000187D4 01                         byte_16DFE:	dc.b 1
000187D5 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
000187DA 01                         byte_16E04:	dc.b 1
000187DB F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
000187E0 01                         byte_16E0A:	dc.b 1
000187E1 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
000187E6 01                         byte_16E10:	dc.b 1
000187E7 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
000187EC 01                         byte_16E16:	dc.b 1
000187ED EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
000187F2 01                         byte_16E1C:	dc.b 1
000187F3 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
000187F8 01                         byte_16E22:	dc.b 1
000187F9 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
000187FE 01                         byte_16E28:	dc.b 1
000187FF EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00018804                            		even
00018804                            		even
00018804                            
00018804                            ; ===========================================================================
00018804                            ; ---------------------------------------------------------------------------
00018804                            ; Object 79 - lamppost
00018804                            ; ---------------------------------------------------------------------------
00018804                            
00018804                            Obj79:					; XREF: Obj_Index
00018804 7000                       		moveq	#0,d0
00018806 1028 0024                  		move.b	$24(a0),d0
0001880A 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
0001880E 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00018812 4EF9 0001 01D2             		jmp	MarkObjGone
00018818                            ; ===========================================================================
00018818 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
0001881A 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
0001881C 0000                       		dc.w Obj79_AfterHit-Obj79_Index
0001881E 0000                       		dc.w Obj79_Twirl-Obj79_Index
00018820                            ; ===========================================================================
00018820                            
00018820                            Obj79_Main:				; XREF: Obj79_Index
00018820 5428 0024                  		addq.b	#2,$24(a0)
00018824 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
0001882C 317C 06C0 0002             		move.w	#($D800/$20),2(a0)
00018832 117C 0004 0001             		move.b	#4,1(a0)
00018838 117C 0008 0019             		move.b	#8,$19(a0)
0001883E 117C 0005 0018             		move.b	#5,$18(a0)
00018844 45F8 FC00                  		lea	($FFFFFC00).w,a2
00018848 7000                       		moveq	#0,d0
0001884A 1028 0023                  		move.b	$23(a0),d0
0001884E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018854 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001885A 6600                       		bne.s	Obj79_RedLamp
0001885C 1238 FE30                  		move.b	($FFFFFE30).w,d1
00018860 0201 007F                  		andi.b	#$7F,d1
00018864 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00018868 0202 007F                  		andi.b	#$7F,d2
0001886C B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
0001886E 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00018870                            
00018870                            Obj79_RedLamp:
00018870 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018876 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
0001887C 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00018882 4E75                       		rts	
00018884                            ; ===========================================================================
00018884                            
00018884                            Obj79_BlueLamp:				; XREF: Obj79_Index
00018884 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00018888 6600 0000                  		bne.w	locret_16F90	; if yes, branch
0001888C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00018890 6B00 0000                  		bmi.w	locret_16F90
00018894 1238 FE30                  		move.b	($FFFFFE30).w,d1
00018898 0201 007F                  		andi.b	#$7F,d1
0001889C 1428 0028                  		move.b	$28(a0),d2
000188A0 0202 007F                  		andi.b	#$7F,d2
000188A4 B202                       		cmp.b	d2,d1
000188A6 6500                       		bcs.s	Obj79_HitLamp
000188A8 45F8 FC00                  		lea	($FFFFFC00).w,a2
000188AC 7000                       		moveq	#0,d0
000188AE 1028 0023                  		move.b	$23(a0),d0
000188B2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000188B8 117C 0004 0024             		move.b	#4,$24(a0)
000188BE 117C 0003 001A             		move.b	#3,$1A(a0)
000188C4 6000 0000                  		bra.w	locret_16F90
000188C8                            ; ===========================================================================
000188C8                            
000188C8                            Obj79_HitLamp:
000188C8 3038 D008                  		move.w	($FFFFD008).w,d0
000188CC 9068 0008                  		sub.w	8(a0),d0
000188D0 5040                       		addq.w	#8,d0
000188D2 0C40 0010                  		cmpi.w	#$10,d0
000188D6 6400 0000                  		bcc.w	locret_16F90
000188DA 3038 D00C                  		move.w	($FFFFD00C).w,d0
000188DE 9068 000C                  		sub.w	$C(a0),d0
000188E2 0640 0040                  		addi.w	#$40,d0
000188E6 0C40 0068                  		cmpi.w	#$68,d0
000188EA 6400                       		bcc.s	locret_16F90
000188EC 303C 00A1                  		move.w	#$A1,d0
000188F0 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play lamppost sound
000188F6 5428 0024                  		addq.b	#2,$24(a0)
000188FA 4EB9 0000 E5A6             		jsr	SingleObjLoad
00018900 6600                       		bne.s	loc_16F76
00018902 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00018906 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
0001890C 3368 0008 0030             		move.w	8(a0),$30(a1)
00018912 3368 000C 0032             		move.w	$C(a0),$32(a1)
00018918 0469 0018 0032             		subi.w	#$18,$32(a1)
0001891E 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00018926 337C 06C0 0002             		move.w	#($D800/$20),2(a1)
0001892C 137C 0004 0001             		move.b	#4,1(a1)
00018932 137C 0008 0019             		move.b	#8,$19(a1)
00018938 137C 0004 0018             		move.b	#4,$18(a1)
0001893E 137C 0002 001A             		move.b	#2,$1A(a1)
00018944 337C 0020 0036             		move.w	#$20,$36(a1)
0001894A                            
0001894A                            loc_16F76:
0001894A 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00018950 6100 0000                  		bsr.w	Obj79_StoreInfo
00018954 45F8 FC00                  		lea	($FFFFFC00).w,a2
00018958 7000                       		moveq	#0,d0
0001895A 1028 0023                  		move.b	$23(a0),d0
0001895E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018964                            
00018964                            locret_16F90:
00018964 4E75                       		rts	
00018966                            ; ===========================================================================
00018966                            
00018966                            Obj79_AfterHit:				; XREF: Obj79_Index
00018966 4E75                       		rts	
00018968                            ; ===========================================================================
00018968                            
00018968                            Obj79_Twirl:				; XREF: Obj79_Index
00018968 5368 0036                  		subq.w	#1,$36(a0)
0001896C 6A00                       		bpl.s	loc_16FA0
0001896E 117C 0004 0024             		move.b	#4,$24(a0)
00018974                            
00018974                            loc_16FA0:
00018974 1028 0026                  		move.b	$26(a0),d0
00018978 0428 0010 0026             		subi.b	#$10,$26(a0)
0001897E 0400 0040                  		subi.b	#$40,d0
00018982 4EB9 0000 33D4             		jsr	(CalcSine).l
00018988 C3FC 0C00                  		muls.w	#$C00,d1
0001898C 4841                       		swap	d1
0001898E D268 0030                  		add.w	$30(a0),d1
00018992 3141 0008                  		move.w	d1,8(a0)
00018996 C1FC 0C00                  		muls.w	#$C00,d0
0001899A 4840                       		swap	d0
0001899C D068 0032                  		add.w	$32(a0),d0
000189A0 3140 000C                  		move.w	d0,$C(a0)
000189A4 4E75                       		rts	
000189A6                            ; ===========================================================================
000189A6                            ; ---------------------------------------------------------------------------
000189A6                            ; Subroutine to	store information when you hit a lamppost
000189A6                            ; ---------------------------------------------------------------------------
000189A6                            
000189A6                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
000189A6 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
000189AC 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
000189B2 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
000189B8 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
000189BE 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
000189C4 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
000189CA 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
000189D0 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
000189D6 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
000189DC 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
000189E2 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
000189E8 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
000189EE 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
000189F4 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
000189FA 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00018A00 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00018A06 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00018A0C 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00018A12 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00018A18 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00018A1E 4E75                       		rts	
00018A20                            
00018A20                            ; ---------------------------------------------------------------------------
00018A20                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00018A20                            ; ---------------------------------------------------------------------------
00018A20                            
00018A20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018A20                            
00018A20                            
00018A20                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00018A20 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00018A26 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00018A2C 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00018A32 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00018A38 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00018A3E 4278 FE20                  		clr.w	($FFFFFE20).w
00018A42 4238 FE1B                  		clr.b	($FFFFFE1B).w
00018A46 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00018A4C 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00018A52 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00018A56 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00018A5C 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00018A62 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00018A68 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00018A6E 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00018A74 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00018A7A 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00018A80 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00018A86 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00018A8C 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00018A92 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00018A98 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00018A9E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00018AA4 6600                       		bne.s	loc_170E4
00018AA6 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00018AAC 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00018AB2 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00018AB8                            
00018AB8                            loc_170E4:
00018AB8 4A38 FE30                  		tst.b	($FFFFFE30).w
00018ABC 6A00                       		bpl.s	locret_170F6
00018ABE 3038 FE32                  		move.w	($FFFFFE32).w,d0
00018AC2 0440 00A0                  		subi.w	#$A0,d0
00018AC6 31C0 F728                  		move.w	d0,($FFFFF728).w
00018ACA                            
00018ACA                            locret_170F6:
00018ACA 4E75                       		rts	
00018ACC                            ; End of function Obj79_LoadInfo
00018ACC                            
00018ACC                            ; ===========================================================================
00018ACC                            ; ---------------------------------------------------------------------------
00018ACC                            ; Sprite mappings - lamppost
00018ACC                            ; ---------------------------------------------------------------------------
00018ACC                            Map_obj79:
00018ACC                            	include "_maps\obj79.asm"
00018ACC                            ; ---------------------------------------------------------------------------
00018ACC                            ; Sprite mappings - lamppost
00018ACC                            ; ---------------------------------------------------------------------------
00018ACC 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00018AD0 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00018AD4 06                         byte_17100:	dc.b 6
00018AD5 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00018ADA E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00018ADF F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00018AE4 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00018AE9 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00018AEE D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00018AF3 04                         byte_1711F:	dc.b 4
00018AF4 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00018AF9 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00018AFE F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00018B03 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00018B08 02                         byte_17134:	dc.b 2
00018B09 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00018B0E F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00018B13 06                         byte_1713F:	dc.b 6
00018B14 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00018B19 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00018B1E F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00018B23 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00018B28 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00018B2D D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00018B32                            		even
00018B32                            		even
00018B32                            
00018B32                            ; ===========================================================================
00018B32                            ; ---------------------------------------------------------------------------
00018B32                            ; Object 7D - hidden points at the end of a level
00018B32                            ; ---------------------------------------------------------------------------
00018B32                            
00018B32                            Obj7D:					; XREF: Obj_Index
00018B32 7000                       		moveq	#0,d0
00018B34 1028 0024                  		move.b	$24(a0),d0
00018B38 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00018B3C 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00018B40                            ; ===========================================================================
00018B40 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00018B42 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00018B44                            ; ===========================================================================
00018B44                            
00018B44                            Obj7D_Main:				; XREF: Obj7D_Index
00018B44 7410                       		moveq	#$10,d2
00018B46 3602                       		move.w	d2,d3
00018B48 D643                       		add.w	d3,d3
00018B4A 43F8 D000                  		lea	($FFFFD000).w,a1
00018B4E 3029 0008                  		move.w	8(a1),d0
00018B52 9068 0008                  		sub.w	8(a0),d0
00018B56 D042                       		add.w	d2,d0
00018B58 B043                       		cmp.w	d3,d0
00018B5A 6400                       		bcc.s	Obj7D_ChkDel
00018B5C 3229 000C                  		move.w	$C(a1),d1
00018B60 9268 000C                  		sub.w	$C(a0),d1
00018B64 D242                       		add.w	d2,d1
00018B66 B243                       		cmp.w	d3,d1
00018B68 6400                       		bcc.s	Obj7D_ChkDel
00018B6A 4A78 FE08                  		tst.w	($FFFFFE08).w
00018B6E 6600                       		bne.s	Obj7D_ChkDel
00018B70 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00018B74 6600                       		bne.s	Obj7D_ChkDel
00018B76 5428 0024                  		addq.b	#2,$24(a0)
00018B7A 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00018B82 317C 84B6 0002             		move.w	#$84B6,2(a0)
00018B88 0028 0004 0001             		ori.b	#4,1(a0)
00018B8E 117C 0000 0018             		move.b	#0,$18(a0)
00018B94 117C 0010 0019             		move.b	#$10,$19(a0)
00018B9A 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00018BA0 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00018BA6 303C 00C9                  		move.w	#$C9,d0
00018BAA 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play bonus sound
00018BB0 7000                       		moveq	#0,d0
00018BB2 1028 0028                  		move.b	$28(a0),d0
00018BB6 D040                       		add.w	d0,d0
00018BB8 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00018BBC 4EB9 0000 0000             		jsr	AddPoints
00018BC2                            
00018BC2                            Obj7D_ChkDel:
00018BC2 3028 0008                  		move.w	8(a0),d0
00018BC6 0240 FF80                  		andi.w	#$FF80,d0
00018BCA 3238 F700                  		move.w	($FFFFF700).w,d1
00018BCE 0441 0080                  		subi.w	#$80,d1
00018BD2 0241 FF80                  		andi.w	#$FF80,d1
00018BD6 9041                       		sub.w	d1,d0
00018BD8 0C40 0280                  		cmpi.w	#$280,d0
00018BDC 6200                       		bhi.s	Obj7D_Delete
00018BDE 4E75                       		rts	
00018BE0                            ; ===========================================================================
00018BE0                            
00018BE0                            Obj7D_Delete:
00018BE0 4EF9 0000 E14C             		jmp	DeleteObject
00018BE6                            ; ===========================================================================
00018BE6 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00018BE8 03E8                       		dc.w 1000
00018BEA 0064                       		dc.w 100
00018BEC 000A                       		dc.w 10
00018BEE                            ; ===========================================================================
00018BEE                            
00018BEE                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00018BEE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00018BF2 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00018BF4 3028 0008                  		move.w	8(a0),d0
00018BF8 0240 FF80                  		andi.w	#-$80,d0
00018BFC 3238 F700                  		move.w	($FFFFF700).w,d1
00018C00 0441 0080                  		subi.w	#$80,d1
00018C04 0241 FF80                  		andi.w	#-$80,d1
00018C08 9041                       		sub.w	d1,d0
00018C0A 0C40 0280                  		cmpi.w	#$280,d0
00018C0E 6200                       		bhi.s	Obj7D_Delete2
00018C10 4EF9 0000 E110             		jmp	DisplaySprite
00018C16                            ; ===========================================================================
00018C16                            
00018C16                            Obj7D_Delete2:
00018C16 4EF9 0000 E14C             		jmp	DeleteObject
00018C1C                            ; ===========================================================================
00018C1C                            ; ---------------------------------------------------------------------------
00018C1C                            ; Sprite mappings - hidden points at the end of	a level
00018C1C                            ; ---------------------------------------------------------------------------
00018C1C                            Map_obj7D:
00018C1C                            	include "_maps\obj7D.asm"
00018C1C                            ; ---------------------------------------------------------------------------
00018C1C                            ; Sprite mappings - hidden points at the end of	a level
00018C1C                            ; ---------------------------------------------------------------------------
00018C1C 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00018C20 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00018C24 00                         byte_17250:	dc.b 0
00018C25 01                         byte_17251:	dc.b 1
00018C26 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00018C2B 01                         byte_17257:	dc.b 1
00018C2C F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00018C31 01                         byte_1725D:	dc.b 1
00018C32 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00018C38 00                         		even
00018C38 00                         		even
00018C38                            
00018C38                            ; ===========================================================================
00018C38                            ; ---------------------------------------------------------------------------
00018C38                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00018C38                            ; ---------------------------------------------------------------------------
00018C38                            
00018C38                            Obj8A:					; XREF: Obj_Index
00018C38 7000                       		moveq	#0,d0
00018C3A 1028 0024                  		move.b	$24(a0),d0
00018C3E 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00018C42 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00018C46                            ; ===========================================================================
00018C46 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00018C48 0000                       		dc.w Obj8A_Display-Obj8A_Index
00018C4A                            ; ===========================================================================
00018C4A                            
00018C4A                            Obj8A_Main:				; XREF: Obj8A_Index
00018C4A 5428 0024                  		addq.b	#2,$24(a0)
00018C4E 317C 0120 0008             		move.w	#$120,8(a0)
00018C54 317C 00F0 000A             		move.w	#$F0,$A(a0)
00018C5A 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00018C62 317C 05A0 0002             		move.w	#$5A0,2(a0)
00018C68 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00018C6C 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00018C70 117C 0000 0001             		move.b	#0,1(a0)
00018C76 117C 0000 0018             		move.b	#0,$18(a0)
00018C7C 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00018C82 6600                       		bne.s	Obj8A_Display	; if not, branch
00018C84 317C 00A6 0002             		move.w	#$A6,2(a0)
00018C8A 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00018C90 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00018C94 6700                       		beq.s	Obj8A_Display	; if not, branch
00018C96 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00018C9C 6600                       		bne.s	Obj8A_Display	; if not, branch
00018C9E 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00018CA4 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00018CAA 4EF9 0000 E14C             		jmp	DeleteObject
00018CB0                            ; ===========================================================================
00018CB0                            
00018CB0                            Obj8A_Display:				; XREF: Obj8A_Index
00018CB0 4EF9 0000 E110             		jmp	DisplaySprite
00018CB6                            ; ===========================================================================
00018CB6                            ; ---------------------------------------------------------------------------
00018CB6                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00018CB6                            ; ---------------------------------------------------------------------------
00018CB6                            Map_obj8A:
00018CB6                            	include "_maps\obj8A.asm"
00018CB6                            ; ---------------------------------------------------------------------------
00018CB6                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00018CB6                            ; ---------------------------------------------------------------------------
00018CB6 0000 0000                  		dc.w byte_172F8-Map_obj8A, byte_1733F-Map_obj8A
00018CBA 0000 0000                  		dc.w byte_17390-Map_obj8A, byte_173C3-Map_obj8A
00018CBE 0000 0000                  		dc.w byte_1743C-Map_obj8A, byte_174A1-Map_obj8A
00018CC2 0000 0000                  		dc.w byte_17524-Map_obj8A, byte_17598-Map_obj8A
00018CC6 0000 0000                  		dc.w byte_17634-Map_obj8A, byte_17680-Map_obj8A
00018CCA 0000                       		dc.w byte_176A9-Map_obj8A
00018CCC 0E                         byte_172F8:	dc.b $E			 ; SONIC TEAM STAFF
00018CCD F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
00018CD2 F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
00018CD7 F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
00018CDC F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
00018CE1 F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
00018CE6 F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
00018CEB F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
00018CF0 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00018CF5 F809 0008 08               		dc.b $F8, 9, 0,	8, 8
00018CFA F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
00018CFF F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
00018D04 F805 0004 48               		dc.b $F8, 5, 0,	4, $48
00018D09 F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
00018D0E F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
00018D13 10                         byte_1733F:	dc.b $10		; GAME PLAN CAROL YAS
00018D14 D805 0000 80               		dc.b $D8, 5, 0,	0, $80
00018D19 D805 0004 90               		dc.b $D8, 5, 0,	4, $90
00018D1E D809 0008 A0               		dc.b $D8, 9, 0,	8, $A0
00018D23 D805 000E B4               		dc.b $D8, 5, 0,	$E, $B4
00018D28 D805 0012 D0               		dc.b $D8, 5, 0,	$12, $D0
00018D2D D805 0016 E0               		dc.b $D8, 5, 0,	$16, $E0
00018D32 D805 0004 F0               		dc.b $D8, 5, 0,	4, $F0
00018D37 D805 001A 00               		dc.b $D8, 5, 0,	$1A, 0
00018D3C 0805 001E C8               		dc.b 8,	5, 0, $1E, $C8
00018D41 0805 0004 D8               		dc.b 8,	5, 0, 4, $D8
00018D46 0805 0022 E8               		dc.b 8,	5, 0, $22, $E8
00018D4B 0805 0026 F8               		dc.b 8,	5, 0, $26, $F8
00018D50 0805 0016 08               		dc.b 8,	5, 0, $16, 8
00018D55 0805 002A 20               		dc.b 8,	5, 0, $2A, $20
00018D5A 0805 0004 30               		dc.b 8,	5, 0, 4, $30
00018D5F 0805 002E 44               		dc.b 8,	5, 0, $2E, $44
00018D64 0A                         byte_17390:	dc.b $A			 ; PROGRAM YU 2
00018D65 D805 0012 80               		dc.b $D8, 5, 0,	$12, $80
00018D6A D805 0022 90               		dc.b $D8, 5, 0,	$22, $90
00018D6F D805 0026 A0               		dc.b $D8, 5, 0,	$26, $A0
00018D74 D805 0000 B0               		dc.b $D8, 5, 0,	0, $B0
00018D79 D805 0022 C0               		dc.b $D8, 5, 0,	$22, $C0
00018D7E D805 0004 D0               		dc.b $D8, 5, 0,	4, $D0
00018D83 D809 0008 E0               		dc.b $D8, 9, 0,	8, $E0
00018D88 0805 002A E8               		dc.b 8,	5, 0, $2A, $E8
00018D8D 0805 0032 F8               		dc.b 8,	5, 0, $32, $F8
00018D92 0805 0036 08               		dc.b 8,	5, 0, $36, 8
00018D97 18                         byte_173C3:	dc.b $18		 ; CHARACTER DESIGN BIGISLAND
00018D98 D805 001E 88               		dc.b $D8, 5, 0,	$1E, $88
00018D9D D805 003A 98               		dc.b $D8, 5, 0,	$3A, $98
00018DA2 D805 0004 A8               		dc.b $D8, 5, 0,	4, $A8
00018DA7 D805 0022 B8               		dc.b $D8, 5, 0,	$22, $B8
00018DAC D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
00018DB1 D805 001E D8               		dc.b $D8, 5, 0,	$1E, $D8
00018DB6 D805 003E E8               		dc.b $D8, 5, 0,	$3E, $E8
00018DBB D805 000E F8               		dc.b $D8, 5, 0,	$E, $F8
00018DC0 D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
00018DC5 D805 0042 20               		dc.b $D8, 5, 0,	$42, $20
00018DCA D805 000E 30               		dc.b $D8, 5, 0,	$E, $30
00018DCF D805 002E 40               		dc.b $D8, 5, 0,	$2E, $40
00018DD4 D801 0046 50               		dc.b $D8, 1, 0,	$46, $50
00018DD9 D805 0000 58               		dc.b $D8, 5, 0,	0, $58
00018DDE D805 001A 68               		dc.b $D8, 5, 0,	$1A, $68
00018DE3 0805 0048 C0               		dc.b 8,	5, 0, $48, $C0
00018DE8 0801 0046 D0               		dc.b 8,	1, 0, $46, $D0
00018DED 0805 0000 D8               		dc.b 8,	5, 0, 0, $D8
00018DF2 0801 0046 E8               		dc.b 8,	1, 0, $46, $E8
00018DF7 0805 002E F0               		dc.b 8,	5, 0, $2E, $F0
00018DFC 0805 0016 00               		dc.b 8,	5, 0, $16, 0
00018E01 0805 0004 10               		dc.b 8,	5, 0, 4, $10
00018E06 0805 001A 20               		dc.b 8,	5, 0, $1A, $20
00018E0B 0805 0042 30               		dc.b 8,	5, 0, $42, $30
00018E10 14                         byte_1743C:	dc.b $14		 ; DESIGN JINYA	PHENIX RIE
00018E11 D005 0042 A0               		dc.b $D0, 5, 0,	$42, $A0
00018E16 D005 000E B0               		dc.b $D0, 5, 0,	$E, $B0
00018E1B D005 002E C0               		dc.b $D0, 5, 0,	$2E, $C0
00018E20 D001 0046 D0               		dc.b $D0, 1, 0,	$46, $D0
00018E25 D005 0000 D8               		dc.b $D0, 5, 0,	0, $D8
00018E2A D005 001A E8               		dc.b $D0, 5, 0,	$1A, $E8
00018E2F 0005 004C E8               		dc.b 0,	5, 0, $4C, $E8
00018E34 0001 0046 F8               		dc.b 0,	1, 0, $46, $F8
00018E39 0005 001A 04               		dc.b 0,	5, 0, $1A, 4
00018E3E 0005 002A 14               		dc.b 0,	5, 0, $2A, $14
00018E43 0005 0004 24               		dc.b 0,	5, 0, 4, $24
00018E48 2005 0012 D0               		dc.b $20, 5, 0,	$12, $D0
00018E4D 2005 003A E0               		dc.b $20, 5, 0,	$3A, $E0
00018E52 2005 000E F0               		dc.b $20, 5, 0,	$E, $F0
00018E57 2005 001A 00               		dc.b $20, 5, 0,	$1A, 0
00018E5C 2001 0046 10               		dc.b $20, 1, 0,	$46, $10
00018E61 2005 0050 18               		dc.b $20, 5, 0,	$50, $18
00018E66 2005 0022 30               		dc.b $20, 5, 0,	$22, $30
00018E6B 2001 0046 40               		dc.b $20, 1, 0,	$46, $40
00018E70 2005 000E 48               		dc.b $20, 5, 0,	$E, $48
00018E75 1A                         byte_174A1:	dc.b $1A		 ; SOUND PRODUCE MASATO	NAKAMURA
00018E76 D805 002E 98               		dc.b $D8, 5, 0,	$2E, $98
00018E7B D805 0026 A8               		dc.b $D8, 5, 0,	$26, $A8
00018E80 D805 0032 B8               		dc.b $D8, 5, 0,	$32, $B8
00018E85 D805 001A C8               		dc.b $D8, 5, 0,	$1A, $C8
00018E8A D805 0054 D8               		dc.b $D8, 5, 0,	$54, $D8
00018E8F D805 0012 F8               		dc.b $D8, 5, 0,	$12, $F8
00018E94 D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
00018E99 D805 0026 18               		dc.b $D8, 5, 0,	$26, $18
00018E9E D805 0042 28               		dc.b $D8, 5, 0,	$42, $28
00018EA3 D805 0032 38               		dc.b $D8, 5, 0,	$32, $38
00018EA8 D805 001E 48               		dc.b $D8, 5, 0,	$1E, $48
00018EAD D805 000E 58               		dc.b $D8, 5, 0,	$E, $58
00018EB2 0809 0008 88               		dc.b 8,	9, 0, 8, $88
00018EB7 0805 0004 9C               		dc.b 8,	5, 0, 4, $9C
00018EBC 0805 002E AC               		dc.b 8,	5, 0, $2E, $AC
00018EC1 0805 0004 BC               		dc.b 8,	5, 0, 4, $BC
00018EC6 0805 003E CC               		dc.b 8,	5, 0, $3E, $CC
00018ECB 0805 0026 DC               		dc.b 8,	5, 0, $26, $DC
00018ED0 0805 001A F8               		dc.b 8,	5, 0, $1A, $F8
00018ED5 0805 0004 08               		dc.b 8,	5, 0, 4, 8
00018EDA 0805 0058 18               		dc.b 8,	5, 0, $58, $18
00018EDF 0805 0004 28               		dc.b 8,	5, 0, 4, $28
00018EE4 0809 0008 38               		dc.b 8,	9, 0, 8, $38
00018EE9 0805 0032 4C               		dc.b 8,	5, 0, $32, $4C
00018EEE 0805 0022 5C               		dc.b 8,	5, 0, $22, $5C
00018EF3 0805 0004 6C               		dc.b 8,	5, 0, 4, $6C
00018EF8 17                         byte_17524:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
00018EF9 D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
00018EFE D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
00018F03 D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
00018F08 D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
00018F0D D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
00018F12 D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
00018F17 D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
00018F1C D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
00018F21 D005 0000 28               		dc.b $D0, 5, 0,	0, $28
00018F26 D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
00018F2B D005 0004 48               		dc.b $D0, 5, 0,	4, $48
00018F30 D009 0008 58               		dc.b $D0, 9, 0,	8, $58
00018F35 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
00018F3A 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
00018F3F 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
00018F44 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
00018F49 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
00018F4E 0005 0004 14               		dc.b 0,	5, 0, 4, $14
00018F53 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
00018F58 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
00018F5D 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
00018F62 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
00018F67 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
00018F6C 1F                         byte_17598:	dc.b $1F		 ; SPECIAL THANKS FUJIO	MINEGISHI PAPA
00018F6D D805 002E 80               		dc.b $D8, 5, 0,	$2E, $80
00018F72 D805 0012 90               		dc.b $D8, 5, 0,	$12, $90
00018F77 D805 000E A0               		dc.b $D8, 5, 0,	$E, $A0
00018F7C D805 001E B0               		dc.b $D8, 5, 0,	$1E, $B0
00018F81 D801 0046 C0               		dc.b $D8, 1, 0,	$46, $C0
00018F86 D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
00018F8B D805 0016 D8               		dc.b $D8, 5, 0,	$16, $D8
00018F90 D805 003E F8               		dc.b $D8, 5, 0,	$3E, $F8
00018F95 D805 003A 08               		dc.b $D8, 5, 0,	$3A, 8
00018F9A D805 0004 18               		dc.b $D8, 5, 0,	4, $18
00018F9F D805 001A 28               		dc.b $D8, 5, 0,	$1A, $28
00018FA4 D805 0058 38               		dc.b $D8, 5, 0,	$58, $38
00018FA9 D805 002E 48               		dc.b $D8, 5, 0,	$2E, $48
00018FAE 0005 005C B0               		dc.b 0,	5, 0, $5C, $B0
00018FB3 0005 0032 C0               		dc.b 0,	5, 0, $32, $C0
00018FB8 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
00018FBD 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
00018FC2 0005 0026 E8               		dc.b 0,	5, 0, $26, $E8
00018FC7 0009 0008 00               		dc.b 0,	9, 0, 8, 0
00018FCC 0001 0046 14               		dc.b 0,	1, 0, $46, $14
00018FD1 0005 001A 1C               		dc.b 0,	5, 0, $1A, $1C
00018FD6 0005 000E 2C               		dc.b 0,	5, 0, $E, $2C
00018FDB 0005 0000 3C               		dc.b 0,	5, 0, 0, $3C
00018FE0 0001 0046 4C               		dc.b 0,	1, 0, $46, $4C
00018FE5 0005 002E 54               		dc.b 0,	5, 0, $2E, $54
00018FEA 0005 003A 64               		dc.b 0,	5, 0, $3A, $64
00018FEF 0001 0046 74               		dc.b 0,	1, 0, $46, $74
00018FF4 2005 0012 F8               		dc.b $20, 5, 0,	$12, $F8
00018FF9 2005 0004 08               		dc.b $20, 5, 0,	4, 8
00018FFE 2005 0012 18               		dc.b $20, 5, 0,	$12, $18
00019003 2005 0004 28               		dc.b $20, 5, 0,	4, $28
00019008 0F                         byte_17634:	dc.b $F			 ; PRESENTED BY	SEGA
00019009 F805 0012 80               		dc.b $F8, 5, 0,	$12, $80
0001900E F805 0022 90               		dc.b $F8, 5, 0,	$22, $90
00019013 F805 000E A0               		dc.b $F8, 5, 0,	$E, $A0
00019018 F805 002E B0               		dc.b $F8, 5, 0,	$2E, $B0
0001901D F805 000E C0               		dc.b $F8, 5, 0,	$E, $C0
00019022 F805 001A D0               		dc.b $F8, 5, 0,	$1A, $D0
00019027 F805 003E E0               		dc.b $F8, 5, 0,	$3E, $E0
0001902C F805 000E F0               		dc.b $F8, 5, 0,	$E, $F0
00019031 F805 0042 00               		dc.b $F8, 5, 0,	$42, 0
00019036 F805 0048 18               		dc.b $F8, 5, 0,	$48, $18
0001903B F805 002A 28               		dc.b $F8, 5, 0,	$2A, $28
00019040 F805 002E 40               		dc.b $F8, 5, 0,	$2E, $40
00019045 F805 000E 50               		dc.b $F8, 5, 0,	$E, $50
0001904A F805 0000 60               		dc.b $F8, 5, 0,	0, $60
0001904F F805 0004 70               		dc.b $F8, 5, 0,	4, $70
00019054 08                         byte_17680:	dc.b 8			 ; TRY AGAIN
00019055 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
0001905A 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
0001905F 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
00019064 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
00019069 3005 0000 08               		dc.b $30, 5, 0,	0, 8
0001906E 3005 0004 18               		dc.b $30, 5, 0,	4, $18
00019073 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
00019078 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
0001907D 11                         byte_176A9:	dc.b $11		 ; SONIC TEAM PRESENTS
0001907E E805 002E B4               		dc.b $E8, 5, 0,	$2E, $B4
00019083 E805 0026 C4               		dc.b $E8, 5, 0,	$26, $C4
00019088 E805 001A D4               		dc.b $E8, 5, 0,	$1A, $D4
0001908D E801 0046 E4               		dc.b $E8, 1, 0,	$46, $E4
00019092 E805 001E EC               		dc.b $E8, 5, 0,	$1E, $EC
00019097 E805 003E 04               		dc.b $E8, 5, 0,	$3E, 4
0001909C E805 000E 14               		dc.b $E8, 5, 0,	$E, $14
000190A1 E805 0004 24               		dc.b $E8, 5, 0,	4, $24
000190A6 E809 0008 34               		dc.b $E8, 9, 0,	8, $34
000190AB 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0
000190B0 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0
000190B5 0005 000E E0               		dc.b 0,	5, 0, $E, $E0
000190BA 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0
000190BF 0005 000E 00               		dc.b 0,	5, 0, $E, 0
000190C4 0005 001A 10               		dc.b 0,	5, 0, $1A, $10
000190C9 0005 003E 20               		dc.b 0,	5, 0, $3E, $20
000190CE 0005 002E 30               		dc.b 0,	5, 0, $2E, $30
000190D4 00                         		even
000190D4 00                         		even
000190D4                            
000190D4                            ; ===========================================================================
000190D4                            ; ---------------------------------------------------------------------------
000190D4                            ; Object 3D - Eggman (GHZ)
000190D4                            ; ---------------------------------------------------------------------------
000190D4                            
000190D4                            Obj3D:					; XREF: Obj_Index
000190D4 7000                       		moveq	#0,d0
000190D6 1028 0024                  		move.b	$24(a0),d0
000190DA 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
000190DE 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
000190E2                            ; ===========================================================================
000190E2 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
000190E4 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
000190E6 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
000190E8 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
000190EA                            
000190EA 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
000190EC 0401                       		dc.b 4,	1
000190EE 0607                       		dc.b 6,	7
000190F0                            ; ===========================================================================
000190F0                            
000190F0                            Obj3D_Main:				; XREF: Obj3D_Index
000190F0 45F9 0001 90EA             		lea	(Obj3D_ObjData).l,a2
000190F6 2248                       		movea.l	a0,a1
000190F8 7202                       		moveq	#2,d1
000190FA 6000                       		bra.s	Obj3D_LoadBoss
000190FC                            ; ===========================================================================
000190FC                            
000190FC                            Obj3D_Loop:
000190FC 4EB9 0000 E5BC             		jsr	SingleObjLoad2
00019102 6600                       		bne.s	loc_17772
00019104                            
00019104                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00019104 135A 0024                  		move.b	(a2)+,$24(a1)
00019108 12BC 003D                  		move.b	#$3D,0(a1)
0001910C 3368 0008 0008             		move.w	8(a0),8(a1)
00019112 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019118 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00019120 337C 0400 0002             		move.w	#$400,2(a1)
00019126 137C 0004 0001             		move.b	#4,1(a1)
0001912C 137C 0020 0019             		move.b	#$20,$19(a1)
00019132 137C 0003 0018             		move.b	#3,$18(a1)
00019138 135A 001C                  		move.b	(a2)+,$1C(a1)
0001913C 2348 0034                  		move.l	a0,$34(a1)
00019140 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00019144                            
00019144                            loc_17772:
00019144 3168 0008 0030             		move.w	8(a0),$30(a0)
0001914A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019150 117C 000F 0020             		move.b	#$F,$20(a0)
00019156 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001915C                            
0001915C                            Obj3D_ShipMain:				; XREF: Obj3D_Index
0001915C 7000                       		moveq	#0,d0
0001915E 1028 0025                  		move.b	$25(a0),d0
00019162 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00019166 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
0001916A 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00019170 4EB9 0000 B222             		jsr	AnimateSprite
00019176 1028 0022                  		move.b	$22(a0),d0
0001917A 0200 0003                  		andi.b	#3,d0
0001917E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019184 8128 0001                  		or.b	d0,1(a0)
00019188 4EF9 0000 E110             		jmp	DisplaySprite
0001918E                            ; ===========================================================================
0001918E 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00019190 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
00019192 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
00019194 0000                       		dc.w loc_17954-Obj3D_ShipIndex
00019196 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00019198 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
0001919A 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
0001919C                            ; ===========================================================================
0001919C                            
0001919C                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
0001919C 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
000191A2 6100 0000                  		bsr.w	BossMove
000191A6 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
000191AC 6600                       		bne.s	loc_177E6
000191AE 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
000191B4 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
000191B8                            
000191B8                            loc_177E6:
000191B8 1028 003F                  		move.b	$3F(a0),d0
000191BC 4EB9 0000 33D4             		jsr	(CalcSine).l
000191C2 EC40                       		asr.w	#6,d0
000191C4 D068 0038                  		add.w	$38(a0),d0
000191C8 3140 000C                  		move.w	d0,$C(a0)
000191CC 3168 0030 0008             		move.w	$30(a0),8(a0)
000191D2 5428 003F                  		addq.b	#2,$3F(a0)
000191D6 0C28 0008 0025             		cmpi.b	#8,$25(a0)
000191DC 6400                       		bcc.s	locret_1784A
000191DE 4A28 0022                  		tst.b	$22(a0)
000191E2 6B00                       		bmi.s	loc_1784C
000191E4 4A28 0020                  		tst.b	$20(a0)
000191E8 6600                       		bne.s	locret_1784A
000191EA 4A28 003E                  		tst.b	$3E(a0)
000191EE 6600                       		bne.s	Obj3D_ShipFlash
000191F0 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
000191F6 303C 00AC                  		move.w	#$AC,d0
000191FA 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019200                            
00019200                            Obj3D_ShipFlash:
00019200 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00019204 7000                       		moveq	#0,d0		; move 0 (black) to d0
00019206 4A51                       		tst.w	(a1)
00019208 6600                       		bne.s	loc_1783C
0001920A 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
0001920E                            
0001920E                            loc_1783C:
0001920E 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00019210 5328 003E                  		subq.b	#1,$3E(a0)
00019214 6600                       		bne.s	locret_1784A
00019216 117C 000F 0020             		move.b	#$F,$20(a0)
0001921C                            
0001921C                            locret_1784A:
0001921C 4E75                       		rts	
0001921E                            ; ===========================================================================
0001921E                            
0001921E                            loc_1784C:				; XREF: loc_177E6
0001921E 7064                       		moveq	#100,d0
00019220 6100 0000                  		bsr.w	AddPoints
00019224 117C 0008 0025             		move.b	#8,$25(a0)
0001922A 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00019230 4E75                       		rts	
00019232                            
00019232                            ; ---------------------------------------------------------------------------
00019232                            ; Defeated boss	subroutine
00019232                            ; ---------------------------------------------------------------------------
00019232                            
00019232                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019232                            
00019232                            
00019232                            BossDefeated:
00019232 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00019236 0200 0007                  		andi.b	#7,d0
0001923A 6600                       		bne.s	locret_178A2
0001923C 4EB9 0000 E5A6             		jsr	SingleObjLoad
00019242 6600                       		bne.s	locret_178A2
00019244 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00019248 3368 0008 0008             		move.w	8(a0),8(a1)
0001924E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019254 4EB9 0000 33AE             		jsr	(RandomNumber).l
0001925A 3200                       		move.w	d0,d1
0001925C 7200                       		moveq	#0,d1
0001925E 1200                       		move.b	d0,d1
00019260 E409                       		lsr.b	#2,d1
00019262 0441 0020                  		subi.w	#$20,d1
00019266 D369 0008                  		add.w	d1,8(a1)
0001926A E048                       		lsr.w	#8,d0
0001926C E608                       		lsr.b	#3,d0
0001926E D169 000C                  		add.w	d0,$C(a1)
00019272                            
00019272                            locret_178A2:
00019272 4E75                       		rts	
00019274                            ; End of function BossDefeated
00019274                            
00019274                            ; ---------------------------------------------------------------------------
00019274                            ; Subroutine to	move a boss
00019274                            ; ---------------------------------------------------------------------------
00019274                            
00019274                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019274                            
00019274                            
00019274                            BossMove:
00019274 2428 0030                  		move.l	$30(a0),d2
00019278 2628 0038                  		move.l	$38(a0),d3
0001927C 3028 0010                  		move.w	$10(a0),d0
00019280 48C0                       		ext.l	d0
00019282 E180                       		asl.l	#8,d0
00019284 D480                       		add.l	d0,d2
00019286 3028 0012                  		move.w	$12(a0),d0
0001928A 48C0                       		ext.l	d0
0001928C E180                       		asl.l	#8,d0
0001928E D680                       		add.l	d0,d3
00019290 2142 0030                  		move.l	d2,$30(a0)
00019294 2143 0038                  		move.l	d3,$38(a0)
00019298 4E75                       		rts	
0001929A                            ; End of function BossMove
0001929A                            
0001929A                            ; ===========================================================================
0001929A                            
0001929A                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
0001929A 317C FF00 0010             		move.w	#-$100,$10(a0)
000192A0 317C FFC0 0012             		move.w	#-$40,$12(a0)
000192A6 6100 FFCC                  		bsr.w	BossMove
000192AA 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
000192B0 6600                       		bne.s	loc_17916
000192B2 317C 0000 0010             		move.w	#0,$10(a0)
000192B8 317C 0000 0012             		move.w	#0,$12(a0)
000192BE 5428 0025                  		addq.b	#2,$25(a0)
000192C2 4EB9 0000 E5BC             		jsr	SingleObjLoad2
000192C8 6600                       		bne.s	loc_17910
000192CA 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
000192CE 3368 0030 0008             		move.w	$30(a0),8(a1)
000192D4 3368 0038 000C             		move.w	$38(a0),$C(a1)
000192DA 2348 0034                  		move.l	a0,$34(a1)
000192DE                            
000192DE                            loc_17910:
000192DE 317C 0077 003C             		move.w	#$77,$3C(a0)
000192E4                            
000192E4                            loc_17916:
000192E4 6000 FED2                  		bra.w	loc_177E6
000192E8                            ; ===========================================================================
000192E8                            
000192E8                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
000192E8 5368 003C                  		subq.w	#1,$3C(a0)
000192EC 6A00                       		bpl.s	Obj3D_Reverse
000192EE 5428 0025                  		addq.b	#2,$25(a0)
000192F2 317C 003F 003C             		move.w	#$3F,$3C(a0)
000192F8 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
000192FE 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00019304 6600                       		bne.s	Obj3D_Reverse
00019306 317C 007F 003C             		move.w	#$7F,$3C(a0)
0001930C 317C 0040 0010             		move.w	#$40,$10(a0)
00019312                            
00019312                            Obj3D_Reverse:
00019312 0828 0000 0022             		btst	#0,$22(a0)
00019318 6600                       		bne.s	loc_17950
0001931A 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
0001931E                            
0001931E                            loc_17950:
0001931E 6000 FE98                  		bra.w	loc_177E6
00019322                            ; ===========================================================================
00019322                            
00019322                            loc_17954:				; XREF: Obj3D_ShipIndex
00019322 5368 003C                  		subq.w	#1,$3C(a0)
00019326 6B00                       		bmi.s	loc_17960
00019328 6100 FF4A                  		bsr.w	BossMove
0001932C 6000                       		bra.s	loc_17976
0001932E                            ; ===========================================================================
0001932E                            
0001932E                            loc_17960:
0001932E 0868 0000 0022             		bchg	#0,$22(a0)
00019334 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001933A 5528 0025                  		subq.b	#2,$25(a0)
0001933E 317C 0000 0010             		move.w	#0,$10(a0)
00019344                            
00019344                            loc_17976:
00019344 6000 FE72                  		bra.w	loc_177E6
00019348                            ; ===========================================================================
00019348                            
00019348                            loc_1797A:				; XREF: Obj3D_ShipIndex
00019348 5368 003C                  		subq.w	#1,$3C(a0)
0001934C 6B00                       		bmi.s	loc_17984
0001934E 6000 FEE2                  		bra.w	BossDefeated
00019352                            ; ===========================================================================
00019352                            
00019352                            loc_17984:
00019352 08E8 0000 0022             		bset	#0,$22(a0)
00019358 08A8 0007 0022             		bclr	#7,$22(a0)
0001935E 4268 0010                  		clr.w	$10(a0)
00019362 5428 0025                  		addq.b	#2,$25(a0)
00019366 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001936C 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019370 6600                       		bne.s	locret_179AA
00019372 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019378                            
00019378                            locret_179AA:
00019378 4E75                       		rts	
0001937A                            ; ===========================================================================
0001937A                            
0001937A                            loc_179AC:				; XREF: Obj3D_ShipIndex
0001937A 5268 003C                  		addq.w	#1,$3C(a0)
0001937E 6700                       		beq.s	loc_179BC
00019380 6A00                       		bpl.s	loc_179C2
00019382 0668 0018 0012             		addi.w	#$18,$12(a0)
00019388 6000                       		bra.s	loc_179EE
0001938A                            ; ===========================================================================
0001938A                            
0001938A                            loc_179BC:
0001938A 4268 0012                  		clr.w	$12(a0)
0001938E 6000                       		bra.s	loc_179EE
00019390                            ; ===========================================================================
00019390                            
00019390                            loc_179C2:
00019390 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00019396 6500                       		bcs.s	loc_179DA
00019398 6700                       		beq.s	loc_179E0
0001939A 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
000193A0 6500                       		bcs.s	loc_179EE
000193A2 5428 0025                  		addq.b	#2,$25(a0)
000193A6 6000                       		bra.s	loc_179EE
000193A8                            ; ===========================================================================
000193A8                            
000193A8                            loc_179DA:
000193A8 5168 0012                  		subq.w	#8,$12(a0)
000193AC 6000                       		bra.s	loc_179EE
000193AE                            ; ===========================================================================
000193AE                            
000193AE                            loc_179E0:
000193AE 4268 0012                  		clr.w	$12(a0)
000193B2 303C 0081                  		move.w	#$81,d0
000193B6 4EB9 0000 1470             		jsr	(PlaySound).l	; play GHZ music
000193BC                            
000193BC                            loc_179EE:
000193BC 6100 FEB6                  		bsr.w	BossMove
000193C0 6000 FDF6                  		bra.w	loc_177E6
000193C4                            ; ===========================================================================
000193C4                            
000193C4                            loc_179F6:				; XREF: Obj3D_ShipIndex
000193C4 317C 0400 0010             		move.w	#$400,$10(a0)
000193CA 317C FFC0 0012             		move.w	#-$40,$12(a0)
000193D0 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
000193D6 6700                       		beq.s	loc_17A10
000193D8 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000193DC 6000                       		bra.s	loc_17A16
000193DE                            ; ===========================================================================
000193DE                            
000193DE                            loc_17A10:
000193DE 4A28 0001                  		tst.b	1(a0)
000193E2 6A00                       		bpl.s	Obj3D_ShipDel
000193E4                            
000193E4                            loc_17A16:
000193E4 6100 FE8E                  		bsr.w	BossMove
000193E8 6000 FDCE                  		bra.w	loc_177E6
000193EC                            ; ===========================================================================
000193EC                            
000193EC                            Obj3D_ShipDel:
000193EC 4EF9 0000 E14C             		jmp	DeleteObject
000193F2                            ; ===========================================================================
000193F2                            
000193F2                            Obj3D_FaceMain:				; XREF: Obj3D_Index
000193F2 7000                       		moveq	#0,d0
000193F4 7201                       		moveq	#1,d1
000193F6 2268 0034                  		movea.l	$34(a0),a1
000193FA 1029 0025                  		move.b	$25(a1),d0
000193FE 5900                       		subq.b	#4,d0
00019400 6600                       		bne.s	loc_17A3E
00019402 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00019408 6600                       		bne.s	loc_17A46
0001940A 7204                       		moveq	#4,d1
0001940C                            
0001940C                            loc_17A3E:
0001940C 5D00                       		subq.b	#6,d0
0001940E 6B00                       		bmi.s	loc_17A46
00019410 720A                       		moveq	#$A,d1
00019412 6000                       		bra.s	loc_17A5A
00019414                            ; ===========================================================================
00019414                            
00019414                            loc_17A46:
00019414 4A29 0020                  		tst.b	$20(a1)
00019418 6600                       		bne.s	loc_17A50
0001941A 7205                       		moveq	#5,d1
0001941C 6000                       		bra.s	loc_17A5A
0001941E                            ; ===========================================================================
0001941E                            
0001941E                            loc_17A50:
0001941E 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019424 6500                       		bcs.s	loc_17A5A
00019426 7204                       		moveq	#4,d1
00019428                            
00019428                            loc_17A5A:
00019428 1141 001C                  		move.b	d1,$1C(a0)
0001942C 5500                       		subq.b	#2,d0
0001942E 6600                       		bne.s	Obj3D_FaceDisp
00019430 117C 0006 001C             		move.b	#6,$1C(a0)
00019436 4A28 0001                  		tst.b	1(a0)
0001943A 6A00                       		bpl.s	Obj3D_FaceDel
0001943C                            
0001943C                            Obj3D_FaceDisp:
0001943C 6000                       		bra.s	Obj3D_Display
0001943E                            ; ===========================================================================
0001943E                            
0001943E                            Obj3D_FaceDel:
0001943E 4EF9 0000 E14C             		jmp	DeleteObject
00019444                            ; ===========================================================================
00019444                            
00019444                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00019444 117C 0007 001C             		move.b	#7,$1C(a0)
0001944A 2268 0034                  		movea.l	$34(a0),a1
0001944E 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
00019454 6600                       		bne.s	loc_17A96
00019456 117C 000B 001C             		move.b	#$B,$1C(a0)
0001945C 4A28 0001                  		tst.b	1(a0)
00019460 6A00                       		bpl.s	Obj3D_FlameDel
00019462 6000                       		bra.s	Obj3D_FlameDisp
00019464                            ; ===========================================================================
00019464                            
00019464                            loc_17A96:
00019464 3029 0010                  		move.w	$10(a1),d0
00019468 6700                       		beq.s	Obj3D_FlameDisp
0001946A 117C 0008 001C             		move.b	#8,$1C(a0)
00019470                            
00019470                            Obj3D_FlameDisp:
00019470 6000                       		bra.s	Obj3D_Display
00019472                            ; ===========================================================================
00019472                            
00019472                            Obj3D_FlameDel:
00019472 4EF9 0000 E14C             		jmp	DeleteObject
00019478                            ; ===========================================================================
00019478                            
00019478                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
00019478 2268 0034                  		movea.l	$34(a0),a1
0001947C 3169 0008 0008             		move.w	8(a1),8(a0)
00019482 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019488 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001948E 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00019494 4EB9 0000 B222             		jsr	AnimateSprite
0001949A 1028 0022                  		move.b	$22(a0),d0
0001949E 0200 0003                  		andi.b	#3,d0
000194A2 0228 00FC 0001             		andi.b	#$FC,1(a0)
000194A8 8128 0001                  		or.b	d0,1(a0)
000194AC 4EF9 0000 E110             		jmp	DisplaySprite
000194B2                            ; ===========================================================================
000194B2                            ; ---------------------------------------------------------------------------
000194B2                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
000194B2                            ; ---------------------------------------------------------------------------
000194B2                            
000194B2                            Obj48:					; XREF: Obj_Index
000194B2 7000                       		moveq	#0,d0
000194B4 1028 0024                  		move.b	$24(a0),d0
000194B8 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
000194BC 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
000194C0                            ; ===========================================================================
000194C0 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
000194C2 0000                       		dc.w Obj48_Base-Obj48_Index
000194C4 0000                       		dc.w Obj48_Display2-Obj48_Index
000194C6 0000                       		dc.w loc_17C68-Obj48_Index
000194C8 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
000194CA                            ; ===========================================================================
000194CA                            
000194CA                            Obj48_Main:				; XREF: Obj48_Index
000194CA 5428 0024                  		addq.b	#2,$24(a0)
000194CE 317C 4080 0026             		move.w	#$4080,$26(a0)
000194D4 317C FE00 003E             		move.w	#-$200,$3E(a0)
000194DA 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
000194E2 317C 046C 0002             		move.w	#$46C,2(a0)
000194E8 45E8 0028                  		lea	$28(a0),a2
000194EC 14FC 0000                  		move.b	#0,(a2)+
000194F0 7205                       		moveq	#5,d1
000194F2 2248                       		movea.l	a0,a1
000194F4 6000                       		bra.s	loc_17B60
000194F6                            ; ===========================================================================
000194F6                            
000194F6                            Obj48_MakeLinks:
000194F6 4EB9 0000 E5BC             		jsr	SingleObjLoad2
000194FC 6600                       		bne.s	Obj48_MakeBall
000194FE 3368 0008 0008             		move.w	8(a0),8(a1)
00019504 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001950A 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
0001950E 137C 0006 0024             		move.b	#6,$24(a1)
00019514 237C 0000 86FA 0004        		move.l	#Map_obj15,4(a1)
0001951C 337C 0380 0002             		move.w	#$380,2(a1)
00019522 137C 0001 001A             		move.b	#1,$1A(a1)
00019528 5228 0028                  		addq.b	#1,$28(a0)
0001952C                            
0001952C                            loc_17B60:				; XREF: Obj48_Main
0001952C 3A09                       		move.w	a1,d5
0001952E 0445 D000                  		subi.w	#$D000,d5
00019532 EC4D                       		lsr.w	#6,d5
00019534 0245 007F                  		andi.w	#$7F,d5
00019538 14C5                       		move.b	d5,(a2)+
0001953A 137C 0004 0001             		move.b	#4,1(a1)
00019540 137C 0008 0019             		move.b	#8,$19(a1)
00019546 137C 0006 0018             		move.b	#6,$18(a1)
0001954C 2368 0034 0034             		move.l	$34(a0),$34(a1)
00019552 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00019556                            
00019556                            Obj48_MakeBall:
00019556 137C 0008 0024             		move.b	#8,$24(a1)
0001955C 237C 0000 8C58 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00019564 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
0001956A 137C 0001 001A             		move.b	#1,$1A(a1)
00019570 137C 0005 0018             		move.b	#5,$18(a1)
00019576 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
0001957C 4E75                       		rts	
0001957E                            ; ===========================================================================
0001957E                            
0001957E 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00019584                            
00019584                            ; ===========================================================================
00019584                            
00019584                            Obj48_Base:				; XREF: Obj48_Index
00019584 47F9 0001 957E             		lea	(Obj48_PosData).l,a3
0001958A 45E8 0028                  		lea	$28(a0),a2
0001958E 7C00                       		moveq	#0,d6
00019590 1C1A                       		move.b	(a2)+,d6
00019592                            
00019592                            loc_17BC6:
00019592 7800                       		moveq	#0,d4
00019594 181A                       		move.b	(a2)+,d4
00019596 ED4C                       		lsl.w	#6,d4
00019598 0684 00FF D000             		addi.l	#$FFD000,d4
0001959E 2244                       		movea.l	d4,a1
000195A0 101B                       		move.b	(a3)+,d0
000195A2 B029 003C                  		cmp.b	$3C(a1),d0
000195A6 6700                       		beq.s	loc_17BE0
000195A8 5229 003C                  		addq.b	#1,$3C(a1)
000195AC                            
000195AC                            loc_17BE0:
000195AC 51CE FFE4                  		dbf	d6,loc_17BC6
000195B0                            
000195B0 B029 003C                  		cmp.b	$3C(a1),d0
000195B4 6600                       		bne.s	loc_17BFA
000195B6 2268 0034                  		movea.l	$34(a0),a1
000195BA 0C29 0006 0025             		cmpi.b	#6,$25(a1)
000195C0 6600                       		bne.s	loc_17BFA
000195C2 5428 0024                  		addq.b	#2,$24(a0)
000195C6                            
000195C6                            loc_17BFA:
000195C6 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
000195CC 6700                       		beq.s	Obj48_Display
000195CE 5268 0032                  		addq.w	#1,$32(a0)
000195D2                            
000195D2                            Obj48_Display:
000195D2 6100 0000                  		bsr.w	sub_17C2A
000195D6 1028 0026                  		move.b	$26(a0),d0
000195DA 4EB9 0000 866C             		jsr	(Obj15_Move2).l
000195E0 4EF9 0000 E110             		jmp	DisplaySprite
000195E6                            ; ===========================================================================
000195E6                            
000195E6                            Obj48_Display2:				; XREF: Obj48_Index
000195E6 6100 0000                  		bsr.w	sub_17C2A
000195EA 4EB9 0000 862C             		jsr	(Obj48_Move).l
000195F0 4EF9 0000 E110             		jmp	DisplaySprite
000195F6                            
000195F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000195F6                            
000195F6                            
000195F6                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
000195F6 2268 0034                  		movea.l	$34(a0),a1
000195FA 0628 0020 001B             		addi.b	#$20,$1B(a0)
00019600 6400                       		bcc.s	loc_17C3C
00019602 0868 0000 001A             		bchg	#0,$1A(a0)
00019608                            
00019608                            loc_17C3C:
00019608 3169 0008 003A             		move.w	8(a1),$3A(a0)
0001960E 3029 000C                  		move.w	$C(a1),d0
00019612 D068 0032                  		add.w	$32(a0),d0
00019616 3140 0038                  		move.w	d0,$38(a0)
0001961A 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019620 4A29 0022                  		tst.b	$22(a1)
00019624 6A00                       		bpl.s	locret_17C66
00019626 10BC 003F                  		move.b	#$3F,0(a0)
0001962A 117C 0000 0024             		move.b	#0,$24(a0)
00019630                            
00019630                            locret_17C66:
00019630 4E75                       		rts	
00019632                            ; End of function sub_17C2A
00019632                            
00019632                            ; ===========================================================================
00019632                            
00019632                            loc_17C68:				; XREF: Obj48_Index
00019632 2268 0034                  		movea.l	$34(a0),a1
00019636 4A29 0022                  		tst.b	$22(a1)
0001963A 6A00                       		bpl.s	Obj48_Display3
0001963C 10BC 003F                  		move.b	#$3F,0(a0)
00019640 117C 0000 0024             		move.b	#0,$24(a0)
00019646                            
00019646                            Obj48_Display3:
00019646 4EF9 0000 E110             		jmp	DisplaySprite
0001964C                            ; ===========================================================================
0001964C                            
0001964C                            Obj48_ChkVanish:			; XREF: Obj48_Index
0001964C 7000                       		moveq	#0,d0
0001964E 4A28 001A                  		tst.b	$1A(a0)
00019652 6600                       		bne.s	Obj48_Vanish
00019654 5200                       		addq.b	#1,d0
00019656                            
00019656                            Obj48_Vanish:
00019656 1140 001A                  		move.b	d0,$1A(a0)
0001965A 2268 0034                  		movea.l	$34(a0),a1
0001965E 4A29 0022                  		tst.b	$22(a1)
00019662 6A00                       		bpl.s	Obj48_Display4
00019664 117C 0000 0020             		move.b	#0,$20(a0)
0001966A 6100 FBC6                  		bsr.w	BossDefeated
0001966E 5328 003C                  		subq.b	#1,$3C(a0)
00019672 6A00                       		bpl.s	Obj48_Display4
00019674 10BC 003F                  		move.b	#$3F,(a0)
00019678 117C 0000 0024             		move.b	#0,$24(a0)
0001967E                            
0001967E                            Obj48_Display4:
0001967E 4EF9 0000 E110             		jmp	DisplaySprite
00019684                            ; ===========================================================================
00019684                            Ani_Eggman:
00019684                            	include "_anim\Eggman.asm"
00019684                            ; ---------------------------------------------------------------------------
00019684                            ; Animation script - Eggman (bosses)
00019684                            ; ---------------------------------------------------------------------------
00019684 0000                       		dc.w byte_17CD4-Ani_Eggman
00019686 0000                       		dc.w byte_17CD8-Ani_Eggman
00019688 0000                       		dc.w byte_17CDC-Ani_Eggman
0001968A 0000                       		dc.w byte_17CE0-Ani_Eggman
0001968C 0000                       		dc.w byte_17CE4-Ani_Eggman
0001968E 0000                       		dc.w byte_17CE8-Ani_Eggman
00019690 0000                       		dc.w byte_17CEC-Ani_Eggman
00019692 0000                       		dc.w byte_17CF0-Ani_Eggman
00019694 0000                       		dc.w byte_17CF4-Ani_Eggman
00019696 0000                       		dc.w byte_17CF8-Ani_Eggman
00019698 0000                       		dc.w byte_17CFC-Ani_Eggman
0001969A 0000                       		dc.w byte_17D00-Ani_Eggman
0001969C 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
000196A0 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
000196A4 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
000196A8 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
000196AC 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
000196B0 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
000196B4 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
000196B8 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
000196BC 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
000196C0 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
000196C4 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
000196C8 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
000196D4                            		even
000196D4                            		even
000196D4                            
000196D4                            ; ---------------------------------------------------------------------------
000196D4                            ; Sprite mappings - Eggman (boss levels)
000196D4                            ; ---------------------------------------------------------------------------
000196D4                            Map_Eggman:
000196D4                            	include "_maps\Eggman.asm"
000196D4                            ; ---------------------------------------------------------------------------
000196D4                            ; Sprite mappings - Eggman (boss levels)
000196D4                            ; ---------------------------------------------------------------------------
000196D4 0000 0000                  		dc.w byte_17D26-Map_Eggman, byte_17D45-Map_Eggman
000196D8 0000 0000                  		dc.w byte_17D50-Map_Eggman, byte_17D5B-Map_Eggman
000196DC 0000 0000                  		dc.w byte_17D6B-Map_Eggman, byte_17D7B-Map_Eggman
000196E0 0000 0000                  		dc.w byte_17D8B-Map_Eggman, byte_17D9B-Map_Eggman
000196E4 0000 0000                  		dc.w byte_17DB0-Map_Eggman, byte_17DB6-Map_Eggman
000196E8 0000 0000                  		dc.w byte_17DBC-Map_Eggman, byte_17DBD-Map_Eggman
000196EC 0000                       		dc.w byte_17DC8-Map_Eggman
000196EE 06                         byte_17D26:	dc.b 6
000196EF EC01 000A E4               		dc.b $EC, 1, 0,	$A, $E4
000196F4 EC05 000C 0C               		dc.b $EC, 5, 0,	$C, $C
000196F9 FC0E 2010 E4               		dc.b $FC, $E, $20, $10,	$E4
000196FE FC0E 201C 04               		dc.b $FC, $E, $20, $1C,	4
00019703 140C 2028 EC               		dc.b $14, $C, $20, $28,	$EC
00019708 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C
0001970D 02                         byte_17D45:	dc.b 2
0001970E E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019713 EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC
00019718 02                         byte_17D50:	dc.b 2
00019719 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
0001971E EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00019723 03                         byte_17D5B:	dc.b 3
00019724 E408 003D F4               		dc.b $E4, 8, 0,	$3D, $F4
00019729 EC09 0040 EC               		dc.b $EC, 9, 0,	$40, $EC
0001972E EC05 0046 04               		dc.b $EC, 5, 0,	$46, 4
00019733 03                         byte_17D6B:	dc.b 3
00019734 E408 004A F4               		dc.b $E4, 8, 0,	$4A, $F4
00019739 EC09 004D EC               		dc.b $EC, 9, 0,	$4D, $EC
0001973E EC05 0053 04               		dc.b $EC, 5, 0,	$53, 4
00019743 03                         byte_17D7B:	dc.b 3
00019744 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00019749 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
0001974E EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00019753 03                         byte_17D8B:	dc.b 3
00019754 E404 0064 04               		dc.b $E4, 4, 0,	$64, 4
00019759 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
0001975E EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00019763 04                         byte_17D9B:	dc.b 4
00019764 E409 0066 F4               		dc.b $E4, 9, 0,	$66, $F4
00019769 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
0001976E EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00019773 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00019778 01                         byte_17DB0:	dc.b 1
00019779 0405 002D 22               		dc.b 4,	5, 0, $2D, $22
0001977E 01                         byte_17DB6:	dc.b 1
0001977F 0405 0031 22               		dc.b 4,	5, 0, $31, $22
00019784 00                         byte_17DBC:	dc.b 0
00019785 02                         byte_17DBD:	dc.b 2
00019786 0008 012A 22               		dc.b 0,	8, 1, $2A, $22
0001978B 0808 112A 22               		dc.b 8,	8, $11,	$2A, $22
00019790 02                         byte_17DC8:	dc.b 2
00019791 F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22
00019796 0001 0139 3A               		dc.b 0,	1, 1, $39, $3A
0001979C 00                         		even
0001979C 00                         		even
0001979C                            
0001979C                            ; ---------------------------------------------------------------------------
0001979C                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001979C                            ; ---------------------------------------------------------------------------
0001979C                            Map_BossItems:
0001979C                            	include "_maps\Boss items.asm"
0001979C                            ; ---------------------------------------------------------------------------
0001979C                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001979C                            ; ---------------------------------------------------------------------------
0001979C 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
000197A0 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
000197A4 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
000197A8 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
000197AC 01                         byte_17DE4:	dc.b 1
000197AD F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000197B2 02                         byte_17DEA:	dc.b 2
000197B3 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
000197B8 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000197BD 00                         		dc.b 0
000197BE 01                         byte_17DF6:	dc.b 1
000197BF FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
000197C4 01                         byte_17DFC:	dc.b 1
000197C5 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
000197CA 01                         byte_17E02:	dc.b 1
000197CB 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
000197D0 04                         byte_17E08:	dc.b 4
000197D1 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
000197D6 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
000197DB F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
000197E0 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
000197E5 00                         		dc.b 0
000197E6 02                         byte_17E1E:	dc.b 2
000197E7 0005 0017 00               		dc.b 0,	5, 0, $17, 0
000197EC 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
000197F1 00                         		dc.b 0
000197F2 02                         byte_17E2A:	dc.b 2
000197F3 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
000197F8 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
000197FE 00                         		even
000197FE 00                         		even
000197FE                            
000197FE                            ; ===========================================================================
000197FE                            ; ---------------------------------------------------------------------------
000197FE                            ; Object 77 - Eggman (LZ)
000197FE                            ; ---------------------------------------------------------------------------
000197FE                            
000197FE                            Obj77:					; XREF: Obj_Index
000197FE 7000                       		moveq	#0,d0
00019800 1028 0024                  		move.b	$24(a0),d0
00019804 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
00019808 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
0001980C                            ; ===========================================================================
0001980C 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
0001980E 0000                       		dc.w Obj77_ShipMain-Obj77_Index
00019810 0000                       		dc.w Obj77_FaceMain-Obj77_Index
00019812 0000                       		dc.w Obj77_FlameMain-Obj77_Index
00019814                            
00019814 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
00019816 0401                       		dc.b 4,	1
00019818 0607                       		dc.b 6,	7
0001981A                            ; ===========================================================================
0001981A                            
0001981A                            Obj77_Main:				; XREF: Obj77_Index
0001981A 317C 1E10 0008             		move.w	#$1E10,8(a0)
00019820 317C 05C0 000C             		move.w	#$5C0,$C(a0)
00019826 3168 0008 0030             		move.w	8(a0),$30(a0)
0001982C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019832 117C 000F 0020             		move.b	#$F,$20(a0)
00019838 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001983E 117C 0004 0018             		move.b	#4,$18(a0)
00019844 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
00019848 2248                       		movea.l	a0,a1
0001984A 7202                       		moveq	#2,d1
0001984C 6000                       		bra.s	Obj77_LoadBoss
0001984E                            ; ===========================================================================
0001984E                            
0001984E                            Obj77_Loop:
0001984E 4EB9 0000 E5BC             		jsr	SingleObjLoad2
00019854 6600                       		bne.s	Obj77_ShipMain
00019856 12BC 0077                  		move.b	#$77,0(a1)
0001985A 3368 0008 0008             		move.w	8(a0),8(a1)
00019860 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019866                            
00019866                            Obj77_LoadBoss:				; XREF: Obj77_Main
00019866 08A8 0000 0022             		bclr	#0,$22(a0)
0001986C 4229 0025                  		clr.b	$25(a1)
00019870 135A 0024                  		move.b	(a2)+,$24(a1)
00019874 135A 001C                  		move.b	(a2)+,$1C(a1)
00019878 1368 0018 0018             		move.b	$18(a0),$18(a1)
0001987E 237C 0001 96D4 0004        		move.l	#Map_Eggman,4(a1)
00019886 337C 0400 0002             		move.w	#$400,2(a1)
0001988C 137C 0004 0001             		move.b	#4,1(a1)
00019892 137C 0020 0019             		move.b	#$20,$19(a1)
00019898 2348 0034                  		move.l	a0,$34(a1)
0001989C 51C9 FFB0                  		dbf	d1,Obj77_Loop
000198A0                            
000198A0                            Obj77_ShipMain:
000198A0 43F8 D000                  		lea	($FFFFD000).w,a1
000198A4 7000                       		moveq	#0,d0
000198A6 1028 0025                  		move.b	$25(a0),d0
000198AA 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
000198AE 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
000198B2 43F9 0001 9684             		lea	(Ani_Eggman).l,a1
000198B8 4EB9 0000 B222             		jsr	AnimateSprite
000198BE 7003                       		moveq	#3,d0
000198C0 C028 0022                  		and.b	$22(a0),d0
000198C4 0228 00FC 0001             		andi.b	#$FC,1(a0)
000198CA 8128 0001                  		or.b	d0,1(a0)
000198CE 4EF9 0000 E110             		jmp	DisplaySprite
000198D4                            ; ===========================================================================
000198D4 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
000198D8 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
000198DC 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
000198E0 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
000198E4                            ; ===========================================================================
000198E4                            
000198E4                            loc_17F1E:				; XREF: Obj77_ShipIndex
000198E4 3029 0008                  		move.w	8(a1),d0
000198E8 0C40 1DA0                  		cmpi.w	#$1DA0,d0
000198EC 6500                       		bcs.s	loc_17F38
000198EE 317C FE80 0012             		move.w	#-$180,$12(a0)
000198F4 317C 0060 0010             		move.w	#$60,$10(a0)
000198FA 5428 0025                  		addq.b	#2,$25(a0)
000198FE                            
000198FE                            loc_17F38:
000198FE 6100 F974                  		bsr.w	BossMove
00019902 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019908 3168 0030 0008             		move.w	$30(a0),8(a0)
0001990E                            
0001990E                            loc_17F48:
0001990E 4A28 003D                  		tst.b	$3D(a0)
00019912 6600                       		bne.s	loc_17F8E
00019914 4A28 0022                  		tst.b	$22(a0)
00019918 6B00                       		bmi.s	loc_17F92
0001991A 4A28 0020                  		tst.b	$20(a0)
0001991E 6600                       		bne.s	locret_17F8C
00019920 4A28 003E                  		tst.b	$3E(a0)
00019924 6600                       		bne.s	loc_17F70
00019926 117C 0020 003E             		move.b	#$20,$3E(a0)
0001992C 303C 00AC                  		move.w	#$AC,d0
00019930 4EB9 0000 1476             		jsr	(PlaySound_Special).l
00019936                            
00019936                            loc_17F70:
00019936 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001993A 7000                       		moveq	#0,d0
0001993C 4A51                       		tst.w	(a1)
0001993E 6600                       		bne.s	loc_17F7E
00019940 303C 0EEE                  		move.w	#$EEE,d0
00019944                            
00019944                            loc_17F7E:
00019944 3280                       		move.w	d0,(a1)
00019946 5328 003E                  		subq.b	#1,$3E(a0)
0001994A 6600                       		bne.s	locret_17F8C
0001994C 117C 000F 0020             		move.b	#$F,$20(a0)
00019952                            
00019952                            locret_17F8C:
00019952 4E75                       		rts	
00019954                            ; ===========================================================================
00019954                            
00019954                            loc_17F8E:				; XREF: loc_17F48
00019954 6000 F8DC                  		bra.w	BossDefeated
00019958                            ; ===========================================================================
00019958                            
00019958                            loc_17F92:				; XREF: loc_17F48
00019958 7064                       		moveq	#100,d0
0001995A 6100 0000                  		bsr.w	AddPoints
0001995E 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019964 4E75                       		rts	
00019966                            ; ===========================================================================
00019966                            
00019966                            loc_17FA0:				; XREF: Obj77_ShipIndex
00019966 70FE                       		moveq	#-2,d0
00019968 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
0001996E 6500                       		bcs.s	loc_17FB6
00019970 317C 1E48 0030             		move.w	#$1E48,$30(a0)
00019976 4268 0010                  		clr.w	$10(a0)
0001997A 5240                       		addq.w	#1,d0
0001997C                            
0001997C                            loc_17FB6:
0001997C 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
00019982 6E00                       		bgt.s	loc_17FCA
00019984 317C 0500 0038             		move.w	#$500,$38(a0)
0001998A 4268 0012                  		clr.w	$12(a0)
0001998E 5240                       		addq.w	#1,d0
00019990                            
00019990                            loc_17FCA:
00019990 6600                       		bne.s	loc_17FDC
00019992 317C 0140 0010             		move.w	#$140,$10(a0)
00019998 317C FE00 0012             		move.w	#-$200,$12(a0)
0001999E 5428 0025                  		addq.b	#2,$25(a0)
000199A2                            
000199A2                            loc_17FDC:
000199A2 6000 FF5A                  		bra.w	loc_17F38
000199A6                            ; ===========================================================================
000199A6                            
000199A6                            loc_17FE0:				; XREF: Obj77_ShipIndex
000199A6 70FE                       		moveq	#-2,d0
000199A8 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
000199AE 6500                       		bcs.s	loc_17FF6
000199B0 317C 1E70 0030             		move.w	#$1E70,$30(a0)
000199B6 4268 0010                  		clr.w	$10(a0)
000199BA 5240                       		addq.w	#1,d0
000199BC                            
000199BC                            loc_17FF6:
000199BC 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
000199C2 6E00                       		bgt.s	loc_1800A
000199C4 317C 04C0 0038             		move.w	#$4C0,$38(a0)
000199CA 4268 0012                  		clr.w	$12(a0)
000199CE 5240                       		addq.w	#1,d0
000199D0                            
000199D0                            loc_1800A:
000199D0 6600                       		bne.s	loc_1801A
000199D2 317C FE80 0012             		move.w	#-$180,$12(a0)
000199D8 5428 0025                  		addq.b	#2,$25(a0)
000199DC 4228 003F                  		clr.b	$3F(a0)
000199E0                            
000199E0                            loc_1801A:
000199E0 6000 FF1C                  		bra.w	loc_17F38
000199E4                            ; ===========================================================================
000199E4                            
000199E4                            loc_1801E:				; XREF: Obj77_ShipIndex
000199E4 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
000199EA 6E00                       		bgt.s	loc_1804E
000199EC 317C 0100 0038             		move.w	#$100,$38(a0)
000199F2 317C 0140 0010             		move.w	#$140,$10(a0)
000199F8 317C FF80 0012             		move.w	#-$80,$12(a0)
000199FE 4A28 003D                  		tst.b	$3D(a0)
00019A02 6700                       		beq.s	loc_18046
00019A04 E1E8 0010                  		asl	$10(a0)
00019A08 E1E8 0012                  		asl	$12(a0)
00019A0C                            
00019A0C                            loc_18046:
00019A0C 5428 0025                  		addq.b	#2,$25(a0)
00019A10 6000 FEEC                  		bra.w	loc_17F38
00019A14                            ; ===========================================================================
00019A14                            
00019A14                            loc_1804E:
00019A14 08E8 0000 0022             		bset	#0,$22(a0)
00019A1A 5428 003F                  		addq.b	#2,$3F(a0)
00019A1E 1028 003F                  		move.b	$3F(a0),d0
00019A22 4EB9 0000 33D4             		jsr	(CalcSine).l
00019A28 4A41                       		tst.w	d1
00019A2A 6A00                       		bpl.s	loc_1806C
00019A2C 08A8 0000 0022             		bclr	#0,$22(a0)
00019A32                            
00019A32                            loc_1806C:
00019A32 E840                       		asr.w	#4,d0
00019A34 4840                       		swap	d0
00019A36 4240                       		clr.w	d0
00019A38 D0A8 0030                  		add.l	$30(a0),d0
00019A3C 4840                       		swap	d0
00019A3E 3140 0008                  		move.w	d0,8(a0)
00019A42 3028 0012                  		move.w	$12(a0),d0
00019A46 3238 D00C                  		move.w	($FFFFD00C).w,d1
00019A4A 9268 000C                  		sub.w	$C(a0),d1
00019A4E 6500                       		bcs.s	loc_180A2
00019A50 0441 0048                  		subi.w	#$48,d1
00019A54 6500                       		bcs.s	loc_180A2
00019A56 E240                       		asr.w	#1,d0
00019A58 0441 0028                  		subi.w	#$28,d1
00019A5C 6500                       		bcs.s	loc_180A2
00019A5E E240                       		asr.w	#1,d0
00019A60 0441 0028                  		subi.w	#$28,d1
00019A64 6500                       		bcs.s	loc_180A2
00019A66 7000                       		moveq	#0,d0
00019A68                            
00019A68                            loc_180A2:
00019A68 48C0                       		ext.l	d0
00019A6A E180                       		asl.l	#8,d0
00019A6C 4A28 003D                  		tst.b	$3D(a0)
00019A70 6700                       		beq.s	loc_180AE
00019A72 D080                       		add.l	d0,d0
00019A74                            
00019A74                            loc_180AE:
00019A74 D1A8 0038                  		add.l	d0,$38(a0)
00019A78 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019A7E 6000 FE8E                  		bra.w	loc_17F48
00019A82                            ; ===========================================================================
00019A82                            
00019A82                            loc_180BC:				; XREF: Obj77_ShipIndex
00019A82 70FE                       		moveq	#-2,d0
00019A84 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
00019A8A 6500                       		bcs.s	loc_180D2
00019A8C 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
00019A92 4268 0010                  		clr.w	$10(a0)
00019A96 5240                       		addq.w	#1,d0
00019A98                            
00019A98                            loc_180D2:
00019A98 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
00019A9E 6E00                       		bgt.s	loc_180E6
00019AA0 317C 00C0 0038             		move.w	#$C0,$38(a0)
00019AA6 4268 0012                  		clr.w	$12(a0)
00019AAA 5240                       		addq.w	#1,d0
00019AAC                            
00019AAC                            loc_180E6:
00019AAC 6600                       		bne.s	loc_180F2
00019AAE 5428 0025                  		addq.b	#2,$25(a0)
00019AB2 08A8 0000 0022             		bclr	#0,$22(a0)
00019AB8                            
00019AB8                            loc_180F2:
00019AB8 6000 FE44                  		bra.w	loc_17F38
00019ABC                            ; ===========================================================================
00019ABC                            
00019ABC                            loc_180F6:				; XREF: Obj77_ShipIndex
00019ABC 4A28 003D                  		tst.b	$3D(a0)
00019AC0 6600                       		bne.s	loc_18112
00019AC2 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
00019AC8 6D00                       		blt.s	loc_18126
00019ACA 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
00019AD0 6E00                       		bgt.s	loc_18126
00019AD2 117C 0032 003C             		move.b	#$32,$3C(a0)
00019AD8                            
00019AD8                            loc_18112:
00019AD8 303C 0082                  		move.w	#$82,d0
00019ADC 4EB9 0000 1470             		jsr	(PlaySound).l	; play LZ music
00019AE2 08E8 0000 0022             		bset	#0,$22(a0)
00019AE8 5428 0025                  		addq.b	#2,$25(a0)
00019AEC                            
00019AEC                            loc_18126:
00019AEC 6000 FE10                  		bra.w	loc_17F38
00019AF0                            ; ===========================================================================
00019AF0                            
00019AF0                            loc_1812A:				; XREF: Obj77_ShipIndex
00019AF0 4A28 003D                  		tst.b	$3D(a0)
00019AF4 6600                       		bne.s	loc_18136
00019AF6 5328 003C                  		subq.b	#1,$3C(a0)
00019AFA 6600                       		bne.s	loc_1814E
00019AFC                            
00019AFC                            loc_18136:
00019AFC 4228 003C                  		clr.b	$3C(a0)
00019B00 317C 0400 0010             		move.w	#$400,$10(a0)
00019B06 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019B0C 4228 003D                  		clr.b	$3D(a0)
00019B10 5428 0025                  		addq.b	#2,$25(a0)
00019B14                            
00019B14                            loc_1814E:
00019B14 6000 FDE8                  		bra.w	loc_17F38
00019B18                            ; ===========================================================================
00019B18                            
00019B18                            loc_18152:				; XREF: Obj77_ShipIndex
00019B18 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
00019B1E 6400                       		bcc.s	loc_18160
00019B20 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019B24 6000                       		bra.s	loc_18166
00019B26                            ; ===========================================================================
00019B26                            
00019B26                            loc_18160:
00019B26 4A28 0001                  		tst.b	1(a0)
00019B2A 6A00                       		bpl.s	Obj77_ShipDel
00019B2C                            
00019B2C                            loc_18166:
00019B2C 6000 FDD0                  		bra.w	loc_17F38
00019B30                            ; ===========================================================================
00019B30                            
00019B30                            Obj77_ShipDel:
00019B30 4EF9 0000 E14C             		jmp	DeleteObject
00019B36                            ; ===========================================================================
00019B36                            
00019B36                            Obj77_FaceMain:				; XREF: Obj77_Index
00019B36 2268 0034                  		movea.l	$34(a0),a1
00019B3A 1011                       		move.b	(a1),d0
00019B3C B010                       		cmp.b	(a0),d0
00019B3E 6600                       		bne.s	Obj77_FaceDel
00019B40 7000                       		moveq	#0,d0
00019B42 1029 0025                  		move.b	$25(a1),d0
00019B46 7201                       		moveq	#1,d1
00019B48 4A28 003D                  		tst.b	$3D(a0)
00019B4C 6700                       		beq.s	loc_1818C
00019B4E 720A                       		moveq	#$A,d1
00019B50 6000                       		bra.s	loc_181A0
00019B52                            ; ===========================================================================
00019B52                            
00019B52                            loc_1818C:
00019B52 4A29 0020                  		tst.b	$20(a1)
00019B56 6600                       		bne.s	loc_18196
00019B58 7205                       		moveq	#5,d1
00019B5A 6000                       		bra.s	loc_181A0
00019B5C                            ; ===========================================================================
00019B5C                            
00019B5C                            loc_18196:
00019B5C 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019B62 6500                       		bcs.s	loc_181A0
00019B64 7204                       		moveq	#4,d1
00019B66                            
00019B66                            loc_181A0:
00019B66 1141 001C                  		move.b	d1,$1C(a0)
00019B6A 0C00 000E                  		cmpi.b	#$E,d0
00019B6E 6600                       		bne.s	loc_181B6
00019B70 117C 0006 001C             		move.b	#6,$1C(a0)
00019B76 4A28 0001                  		tst.b	1(a0)
00019B7A 6A00                       		bpl.s	Obj77_FaceDel
00019B7C                            
00019B7C                            loc_181B6:
00019B7C 6000                       		bra.s	Obj77_Display
00019B7E                            ; ===========================================================================
00019B7E                            
00019B7E                            Obj77_FaceDel:
00019B7E 4EF9 0000 E14C             		jmp	DeleteObject
00019B84                            ; ===========================================================================
00019B84                            
00019B84                            Obj77_FlameMain:			; XREF: Obj77_Index
00019B84 117C 0007 001C             		move.b	#7,$1C(a0)
00019B8A 2268 0034                  		movea.l	$34(a0),a1
00019B8E 1011                       		move.b	(a1),d0
00019B90 B010                       		cmp.b	(a0),d0
00019B92 6600                       		bne.s	Obj77_FlameDel
00019B94 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
00019B9A 6600                       		bne.s	loc_181F0
00019B9C 117C 000B 001C             		move.b	#$B,$1C(a0)
00019BA2 4A28 0001                  		tst.b	1(a0)
00019BA6 6A00                       		bpl.s	Obj77_FlameDel
00019BA8 6000                       		bra.s	loc_181F0
00019BAA                            ; ===========================================================================
00019BAA 4A69 0010                  		tst.w	$10(a1)
00019BAE 6700                       		beq.s	loc_181F0
00019BB0 117C 0008 001C             		move.b	#8,$1C(a0)
00019BB6                            
00019BB6                            loc_181F0:
00019BB6 6000                       		bra.s	Obj77_Display
00019BB8                            ; ===========================================================================
00019BB8                            
00019BB8                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
00019BB8 4EF9 0000 E14C             		jmp	DeleteObject
00019BBE                            ; ===========================================================================
00019BBE                            
00019BBE                            Obj77_Display:
00019BBE 43F9 0001 9684             		lea	(Ani_Eggman).l,a1
00019BC4 4EB9 0000 B222             		jsr	AnimateSprite
00019BCA 2268 0034                  		movea.l	$34(a0),a1
00019BCE 3169 0008 0008             		move.w	8(a1),8(a0)
00019BD4 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019BDA 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019BE0 7003                       		moveq	#3,d0
00019BE2 C028 0022                  		and.b	$22(a0),d0
00019BE6 0228 00FC 0001             		andi.b	#-4,1(a0)
00019BEC 8128 0001                  		or.b	d0,1(a0)
00019BF0 4EF9 0000 E110             		jmp	DisplaySprite
00019BF6                            ; ===========================================================================
00019BF6                            ; ---------------------------------------------------------------------------
00019BF6                            ; Object 73 - Eggman (MZ)
00019BF6                            ; ---------------------------------------------------------------------------
00019BF6                            
00019BF6                            Obj73:					; XREF: Obj_Index
00019BF6 7000                       		moveq	#0,d0
00019BF8 1028 0024                  		move.b	$24(a0),d0
00019BFC 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00019C00 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00019C04                            ; ===========================================================================
00019C04 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00019C06 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00019C08 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00019C0A 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00019C0C 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00019C0E                            
00019C0E 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00019C11 0401 04                    		dc.b 4,	1, 4
00019C14 0607 04                    		dc.b 6,	7, 4
00019C17 0800 03                    		dc.b 8,	0, 3
00019C1A                            ; ===========================================================================
00019C1A                            
00019C1A                            Obj73_Main:				; XREF: Obj73_Index
00019C1A 3168 0008 0030             		move.w	8(a0),$30(a0)
00019C20 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019C26 117C 000F 0020             		move.b	#$F,$20(a0)
00019C2C 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019C32 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00019C36 2248                       		movea.l	a0,a1
00019C38 7203                       		moveq	#3,d1
00019C3A 6000                       		bra.s	Obj73_LoadBoss
00019C3C                            ; ===========================================================================
00019C3C                            
00019C3C                            Obj73_Loop:
00019C3C 4EB9 0000 E5BC             		jsr	SingleObjLoad2
00019C42 6600                       		bne.s	Obj73_ShipMain
00019C44 12BC 0073                  		move.b	#$73,0(a1)
00019C48 3368 0008 0008             		move.w	8(a0),8(a1)
00019C4E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019C54                            
00019C54                            Obj73_LoadBoss:				; XREF: Obj73_Main
00019C54 08A8 0000 0022             		bclr	#0,$22(a0)
00019C5A 4229 0025                  		clr.b	$25(a1)
00019C5E 135A 0024                  		move.b	(a2)+,$24(a1)
00019C62 135A 001C                  		move.b	(a2)+,$1C(a1)
00019C66 135A 0018                  		move.b	(a2)+,$18(a1)
00019C6A 237C 0001 96D4 0004        		move.l	#Map_Eggman,4(a1)
00019C72 337C 0400 0002             		move.w	#$400,2(a1)
00019C78 137C 0004 0001             		move.b	#4,1(a1)
00019C7E 137C 0020 0019             		move.b	#$20,$19(a1)
00019C84 2348 0034                  		move.l	a0,$34(a1)
00019C88 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00019C8C                            
00019C8C                            Obj73_ShipMain:
00019C8C 7000                       		moveq	#0,d0
00019C8E 1028 0025                  		move.b	$25(a0),d0
00019C92 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
00019C96 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00019C9A 43F9 0001 9684             		lea	(Ani_Eggman).l,a1
00019CA0 4EB9 0000 B222             		jsr	AnimateSprite
00019CA6 7003                       		moveq	#3,d0
00019CA8 C028 0022                  		and.b	$22(a0),d0
00019CAC 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019CB2 8128 0001                  		or.b	d0,1(a0)
00019CB6 4EF9 0000 E110             		jmp	DisplaySprite
00019CBC                            ; ===========================================================================
00019CBC 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00019CBE 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00019CC0 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00019CC2 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00019CC4 0000                       		dc.w loc_18582-Obj73_ShipIndex
00019CC6                            ; ===========================================================================
00019CC6                            
00019CC6                            loc_18302:				; XREF: Obj73_ShipIndex
00019CC6 1028 003F                  		move.b	$3F(a0),d0
00019CCA 5428 003F                  		addq.b	#2,$3F(a0)
00019CCE 4EB9 0000 33D4             		jsr	(CalcSine).l
00019CD4 E440                       		asr.w	#2,d0
00019CD6 3140 0012                  		move.w	d0,$12(a0)
00019CDA 317C FF00 0010             		move.w	#-$100,$10(a0)
00019CE0 6100 F592                  		bsr.w	BossMove
00019CE4 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00019CEA 6600                       		bne.s	loc_18334
00019CEC 5428 0025                  		addq.b	#2,$25(a0)
00019CF0 4228 0028                  		clr.b	$28(a0)
00019CF4 42A8 0010                  		clr.l	$10(a0)
00019CF8                            
00019CF8                            loc_18334:
00019CF8 4EB9 0000 33AE             		jsr	(RandomNumber).l
00019CFE 1140 0034                  		move.b	d0,$34(a0)
00019D02                            
00019D02                            loc_1833E:
00019D02 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019D08 3168 0030 0008             		move.w	$30(a0),8(a0)
00019D0E 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00019D14 6400                       		bcc.s	locret_18390
00019D16 4A28 0022                  		tst.b	$22(a0)
00019D1A 6B00                       		bmi.s	loc_18392
00019D1C 4A28 0020                  		tst.b	$20(a0)
00019D20 6600                       		bne.s	locret_18390
00019D22 4A28 003E                  		tst.b	$3E(a0)
00019D26 6600                       		bne.s	loc_18374
00019D28 117C 0028 003E             		move.b	#$28,$3E(a0)
00019D2E 303C 00AC                  		move.w	#$AC,d0
00019D32 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019D38                            
00019D38                            loc_18374:
00019D38 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019D3C 7000                       		moveq	#0,d0
00019D3E 4A51                       		tst.w	(a1)
00019D40 6600                       		bne.s	loc_18382
00019D42 303C 0EEE                  		move.w	#$EEE,d0
00019D46                            
00019D46                            loc_18382:
00019D46 3280                       		move.w	d0,(a1)
00019D48 5328 003E                  		subq.b	#1,$3E(a0)
00019D4C 6600                       		bne.s	locret_18390
00019D4E 117C 000F 0020             		move.b	#$F,$20(a0)
00019D54                            
00019D54                            locret_18390:
00019D54 4E75                       		rts	
00019D56                            ; ===========================================================================
00019D56                            
00019D56                            loc_18392:				; XREF: loc_1833E
00019D56 7064                       		moveq	#100,d0
00019D58 6100 0000                  		bsr.w	AddPoints
00019D5C 117C 0004 0025             		move.b	#4,$25(a0)
00019D62 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019D68 4268 0010                  		clr.w	$10(a0)
00019D6C 4E75                       		rts	
00019D6E                            ; ===========================================================================
00019D6E                            
00019D6E                            loc_183AA:				; XREF: Obj73_ShipIndex
00019D6E 7000                       		moveq	#0,d0
00019D70 1028 0028                  		move.b	$28(a0),d0
00019D74 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00019D78 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00019D7C 0228 0006 0028             		andi.b	#6,$28(a0)
00019D82 6000 FF7E                  		bra.w	loc_1833E
00019D86                            ; ===========================================================================
00019D86 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00019D88 0000                       		dc.w Obj73_MakeLava2-off_183C2
00019D8A 0000                       		dc.w loc_183CA-off_183C2
00019D8C 0000                       		dc.w Obj73_MakeLava2-off_183C2
00019D8E                            ; ===========================================================================
00019D8E                            
00019D8E                            loc_183CA:				; XREF: off_183C2
00019D8E 4A68 0010                  		tst.w	$10(a0)
00019D92 6600                       		bne.s	loc_183FE
00019D94 7040                       		moveq	#$40,d0
00019D96 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00019D9C 6700                       		beq.s	loc_183E6
00019D9E 6500                       		bcs.s	loc_183DE
00019DA0 4440                       		neg.w	d0
00019DA2                            
00019DA2                            loc_183DE:
00019DA2 3140 0012                  		move.w	d0,$12(a0)
00019DA6 6000 F4CC                  		bra.w	BossMove
00019DAA                            ; ===========================================================================
00019DAA                            
00019DAA                            loc_183E6:
00019DAA 317C 0200 0010             		move.w	#$200,$10(a0)
00019DB0 317C 0100 0012             		move.w	#$100,$12(a0)
00019DB6 0828 0000 0022             		btst	#0,$22(a0)
00019DBC 6600                       		bne.s	loc_183FE
00019DBE 4468 0010                  		neg.w	$10(a0)
00019DC2                            
00019DC2                            loc_183FE:
00019DC2 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00019DC8 6400                       		bcc.s	Obj73_MakeLava
00019DCA 6100 F4A8                  		bsr.w	BossMove
00019DCE 5968 0012                  		subq.w	#4,$12(a0)
00019DD2                            
00019DD2                            Obj73_MakeLava:
00019DD2 5328 0034                  		subq.b	#1,$34(a0)
00019DD6 6400                       		bcc.s	loc_1845C
00019DD8 4EB9 0000 E5A6             		jsr	SingleObjLoad
00019DDE 6600                       		bne.s	loc_1844A
00019DE0 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00019DE4 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00019DEA 4EB9 0000 33AE             		jsr	(RandomNumber).l
00019DF0 0280 0000 FFFF             		andi.l	#$FFFF,d0
00019DF6 80FC 0050                  		divu.w	#$50,d0
00019DFA 4840                       		swap	d0
00019DFC 0640 1878                  		addi.w	#$1878,d0
00019E00 3340 0008                  		move.w	d0,8(a1)
00019E04 EE09                       		lsr.b	#7,d1
00019E06 337C 00FF 0028             		move.w	#$FF,$28(a1)
00019E0C                            
00019E0C                            loc_1844A:
00019E0C 4EB9 0000 33AE             		jsr	(RandomNumber).l
00019E12 0200 001F                  		andi.b	#$1F,d0
00019E16 0600 0040                  		addi.b	#$40,d0
00019E1A 1140 0034                  		move.b	d0,$34(a0)
00019E1E                            
00019E1E                            loc_1845C:
00019E1E 0828 0000 0022             		btst	#0,$22(a0)
00019E24 6700                       		beq.s	loc_18474
00019E26 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00019E2C 6D00                       		blt.s	locret_1849C
00019E2E 317C 1910 0030             		move.w	#$1910,$30(a0)
00019E34 6000                       		bra.s	loc_18482
00019E36                            ; ===========================================================================
00019E36                            
00019E36                            loc_18474:
00019E36 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00019E3C 6E00                       		bgt.s	locret_1849C
00019E3E 317C 1830 0030             		move.w	#$1830,$30(a0)
00019E44                            
00019E44                            loc_18482:
00019E44 4268 0010                  		clr.w	$10(a0)
00019E48 317C FE80 0012             		move.w	#-$180,$12(a0)
00019E4E 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00019E54 6400                       		bcc.s	loc_18498
00019E56 4468 0012                  		neg.w	$12(a0)
00019E5A                            
00019E5A                            loc_18498:
00019E5A 5428 0028                  		addq.b	#2,$28(a0)
00019E5E                            
00019E5E                            locret_1849C:
00019E5E 4E75                       		rts	
00019E60                            ; ===========================================================================
00019E60                            
00019E60                            Obj73_MakeLava2:			; XREF: off_183C2
00019E60 6100 F412                  		bsr.w	BossMove
00019E64 3028 0038                  		move.w	$38(a0),d0
00019E68 0440 022C                  		subi.w	#$22C,d0
00019E6C 6E00                       		bgt.s	locret_184F4
00019E6E 303C 022C                  		move.w	#$22C,d0
00019E72 4A68 0012                  		tst.w	$12(a0)
00019E76 6700                       		beq.s	loc_184EA
00019E78 4268 0012                  		clr.w	$12(a0)
00019E7C 317C 0050 003C             		move.w	#$50,$3C(a0)
00019E82 0868 0000 0022             		bchg	#0,$22(a0)
00019E88 4EB9 0000 E5A6             		jsr	SingleObjLoad
00019E8E 6600                       		bne.s	loc_184EA
00019E90 3368 0030 0008             		move.w	$30(a0),8(a1)
00019E96 3368 0038 000C             		move.w	$38(a0),$C(a1)
00019E9C 0669 0018 000C             		addi.w	#$18,$C(a1)
00019EA2 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00019EA6 137C 0001 0028             		move.b	#1,$28(a1)
00019EAC                            
00019EAC                            loc_184EA:
00019EAC 5368 003C                  		subq.w	#1,$3C(a0)
00019EB0 6600                       		bne.s	locret_184F4
00019EB2 5428 0028                  		addq.b	#2,$28(a0)
00019EB6                            
00019EB6                            locret_184F4:
00019EB6 4E75                       		rts	
00019EB8                            ; ===========================================================================
00019EB8                            
00019EB8                            loc_184F6:				; XREF: Obj73_ShipIndex
00019EB8 5368 003C                  		subq.w	#1,$3C(a0)
00019EBC 6B00                       		bmi.s	loc_18500
00019EBE 6000 F372                  		bra.w	BossDefeated
00019EC2                            ; ===========================================================================
00019EC2                            
00019EC2                            loc_18500:
00019EC2 08E8 0000 0022             		bset	#0,$22(a0)
00019EC8 08A8 0007 0022             		bclr	#7,$22(a0)
00019ECE 4268 0010                  		clr.w	$10(a0)
00019ED2 5428 0025                  		addq.b	#2,$25(a0)
00019ED6 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00019EDC 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019EE0 6600                       		bne.s	locret_1852A
00019EE2 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019EE8 4268 0012                  		clr.w	$12(a0)
00019EEC                            
00019EEC                            locret_1852A:
00019EEC 4E75                       		rts	
00019EEE                            ; ===========================================================================
00019EEE                            
00019EEE                            loc_1852C:				; XREF: Obj73_ShipIndex
00019EEE 5268 003C                  		addq.w	#1,$3C(a0)
00019EF2 6700                       		beq.s	loc_18544
00019EF4 6A00                       		bpl.s	loc_1854E
00019EF6 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00019EFC 6400                       		bcc.s	loc_18544
00019EFE 0668 0018 0012             		addi.w	#$18,$12(a0)
00019F04 6000                       		bra.s	loc_1857A
00019F06                            ; ===========================================================================
00019F06                            
00019F06                            loc_18544:
00019F06 4268 0012                  		clr.w	$12(a0)
00019F0A 4268 003C                  		clr.w	$3C(a0)
00019F0E 6000                       		bra.s	loc_1857A
00019F10                            ; ===========================================================================
00019F10                            
00019F10                            loc_1854E:
00019F10 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00019F16 6500                       		bcs.s	loc_18566
00019F18 6700                       		beq.s	loc_1856C
00019F1A 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00019F20 6500                       		bcs.s	loc_1857A
00019F22 5428 0025                  		addq.b	#2,$25(a0)
00019F26 6000                       		bra.s	loc_1857A
00019F28                            ; ===========================================================================
00019F28                            
00019F28                            loc_18566:
00019F28 5168 0012                  		subq.w	#8,$12(a0)
00019F2C 6000                       		bra.s	loc_1857A
00019F2E                            ; ===========================================================================
00019F2E                            
00019F2E                            loc_1856C:
00019F2E 4268 0012                  		clr.w	$12(a0)
00019F32 303C 0083                  		move.w	#$83,d0
00019F36 4EB9 0000 1470             		jsr	(PlaySound).l	; play MZ music
00019F3C                            
00019F3C                            loc_1857A:
00019F3C 6100 F336                  		bsr.w	BossMove
00019F40 6000 FDC0                  		bra.w	loc_1833E
00019F44                            ; ===========================================================================
00019F44                            
00019F44                            loc_18582:				; XREF: Obj73_ShipIndex
00019F44 317C 0500 0010             		move.w	#$500,$10(a0)
00019F4A 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019F50 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00019F56 6400                       		bcc.s	loc_1859C
00019F58 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019F5C 6000                       		bra.s	loc_185A2
00019F5E                            ; ===========================================================================
00019F5E                            
00019F5E                            loc_1859C:
00019F5E 4A28 0001                  		tst.b	1(a0)
00019F62 6A00                       		bpl.s	Obj73_ShipDel
00019F64                            
00019F64                            loc_185A2:
00019F64 6100 F30E                  		bsr.w	BossMove
00019F68 6000 FD98                  		bra.w	loc_1833E
00019F6C                            ; ===========================================================================
00019F6C                            
00019F6C                            Obj73_ShipDel:
00019F6C 4EF9 0000 E14C             		jmp	DeleteObject
00019F72                            ; ===========================================================================
00019F72                            
00019F72                            Obj73_FaceMain:				; XREF: Obj73_Index
00019F72 7000                       		moveq	#0,d0
00019F74 7201                       		moveq	#1,d1
00019F76 2268 0034                  		movea.l	$34(a0),a1
00019F7A 1029 0025                  		move.b	$25(a1),d0
00019F7E 5540                       		subq.w	#2,d0
00019F80 6600                       		bne.s	loc_185D2
00019F82 0829 0001 0028             		btst	#1,$28(a1)
00019F88 6700                       		beq.s	loc_185DA
00019F8A 4A69 0012                  		tst.w	$12(a1)
00019F8E 6600                       		bne.s	loc_185DA
00019F90 7204                       		moveq	#4,d1
00019F92 6000                       		bra.s	loc_185EE
00019F94                            ; ===========================================================================
00019F94                            
00019F94                            loc_185D2:
00019F94 5500                       		subq.b	#2,d0
00019F96 6B00                       		bmi.s	loc_185DA
00019F98 720A                       		moveq	#$A,d1
00019F9A 6000                       		bra.s	loc_185EE
00019F9C                            ; ===========================================================================
00019F9C                            
00019F9C                            loc_185DA:
00019F9C 4A29 0020                  		tst.b	$20(a1)
00019FA0 6600                       		bne.s	loc_185E4
00019FA2 7205                       		moveq	#5,d1
00019FA4 6000                       		bra.s	loc_185EE
00019FA6                            ; ===========================================================================
00019FA6                            
00019FA6                            loc_185E4:
00019FA6 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019FAC 6500                       		bcs.s	loc_185EE
00019FAE 7204                       		moveq	#4,d1
00019FB0                            
00019FB0                            loc_185EE:
00019FB0 1141 001C                  		move.b	d1,$1C(a0)
00019FB4 5900                       		subq.b	#4,d0
00019FB6 6600                       		bne.s	loc_18602
00019FB8 117C 0006 001C             		move.b	#6,$1C(a0)
00019FBE 4A28 0001                  		tst.b	1(a0)
00019FC2 6A00                       		bpl.s	Obj73_FaceDel
00019FC4                            
00019FC4                            loc_18602:
00019FC4 6000                       		bra.s	Obj73_Display
00019FC6                            ; ===========================================================================
00019FC6                            
00019FC6                            Obj73_FaceDel:
00019FC6 4EF9 0000 E14C             		jmp	DeleteObject
00019FCC                            ; ===========================================================================
00019FCC                            
00019FCC                            Obj73_FlameMain:			; XREF: Obj73_Index
00019FCC 117C 0007 001C             		move.b	#7,$1C(a0)
00019FD2 2268 0034                  		movea.l	$34(a0),a1
00019FD6 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019FDC 6D00                       		blt.s	loc_1862A
00019FDE 117C 000B 001C             		move.b	#$B,$1C(a0)
00019FE4 4A28 0001                  		tst.b	1(a0)
00019FE8 6A00                       		bpl.s	Obj73_FlameDel
00019FEA 6000                       		bra.s	loc_18636
00019FEC                            ; ===========================================================================
00019FEC                            
00019FEC                            loc_1862A:
00019FEC 4A69 0010                  		tst.w	$10(a1)
00019FF0 6700                       		beq.s	loc_18636
00019FF2 117C 0008 001C             		move.b	#8,$1C(a0)
00019FF8                            
00019FF8                            loc_18636:
00019FF8 6000                       		bra.s	Obj73_Display
00019FFA                            ; ===========================================================================
00019FFA                            
00019FFA                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00019FFA 4EF9 0000 E14C             		jmp	DeleteObject
0001A000                            ; ===========================================================================
0001A000                            
0001A000                            Obj73_Display:
0001A000 43F9 0001 9684             		lea	(Ani_Eggman).l,a1
0001A006 4EB9 0000 B222             		jsr	AnimateSprite
0001A00C                            
0001A00C                            loc_1864A:
0001A00C 2268 0034                  		movea.l	$34(a0),a1
0001A010 3169 0008 0008             		move.w	8(a1),8(a0)
0001A016 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A01C 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A022 7003                       		moveq	#3,d0
0001A024 C028 0022                  		and.b	$22(a0),d0
0001A028 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A02E 8128 0001                  		or.b	d0,1(a0)
0001A032 4EF9 0000 E110             		jmp	DisplaySprite
0001A038                            ; ===========================================================================
0001A038                            
0001A038                            Obj73_TubeMain:				; XREF: Obj73_Index
0001A038 2268 0034                  		movea.l	$34(a0),a1
0001A03C 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001A042 6600                       		bne.s	loc_18688
0001A044 4A28 0001                  		tst.b	1(a0)
0001A048 6A00                       		bpl.s	Obj73_TubeDel
0001A04A                            
0001A04A                            loc_18688:
0001A04A 217C 0001 979C 0004        		move.l	#Map_BossItems,4(a0)
0001A052 317C 246C 0002             		move.w	#$246C,2(a0)
0001A058 117C 0004 001A             		move.b	#4,$1A(a0)
0001A05E 60AC                       		bra.s	loc_1864A
0001A060                            ; ===========================================================================
0001A060                            
0001A060                            Obj73_TubeDel:
0001A060 4EF9 0000 E14C             		jmp	DeleteObject
0001A066                            ; ===========================================================================
0001A066                            ; ---------------------------------------------------------------------------
0001A066                            ; Object 74 - lava that	Eggman drops (MZ)
0001A066                            ; ---------------------------------------------------------------------------
0001A066                            
0001A066                            Obj74:					; XREF: Obj_Index
0001A066 7000                       		moveq	#0,d0
0001A068 1028 0024                  		move.b	$24(a0),d0
0001A06C 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001A070 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001A074 4EF9 0000 E110             		jmp	DisplaySprite
0001A07A                            ; ===========================================================================
0001A07A 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001A07C 0000                       		dc.w Obj74_Action-Obj74_Index
0001A07E 0000                       		dc.w loc_18886-Obj74_Index
0001A080 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001A082                            ; ===========================================================================
0001A082                            
0001A082                            Obj74_Main:				; XREF: Obj74_Index
0001A082 117C 0008 0016             		move.b	#8,$16(a0)
0001A088 117C 0008 0017             		move.b	#8,$17(a0)
0001A08E 217C 0000 BE7A 0004        		move.l	#Map_obj14,4(a0)
0001A096 317C 0345 0002             		move.w	#$345,2(a0)
0001A09C 117C 0004 0001             		move.b	#4,1(a0)
0001A0A2 117C 0005 0018             		move.b	#5,$18(a0)
0001A0A8 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A0AE 117C 0008 0019             		move.b	#8,$19(a0)
0001A0B4 5428 0024                  		addq.b	#2,$24(a0)
0001A0B8 4A28 0028                  		tst.b	$28(a0)
0001A0BC 6600                       		bne.s	loc_1870A
0001A0BE 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A0C4 5428 0024                  		addq.b	#2,$24(a0)
0001A0C8 6000 0000                  		bra.w	loc_18886
0001A0CC                            ; ===========================================================================
0001A0CC                            
0001A0CC                            loc_1870A:
0001A0CC 117C 001E 0029             		move.b	#$1E,$29(a0)
0001A0D2 303C 00AE                  		move.w	#$AE,d0
0001A0D6 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play lava sound
0001A0DC                            
0001A0DC                            Obj74_Action:				; XREF: Obj74_Index
0001A0DC 7000                       		moveq	#0,d0
0001A0DE 1028 0025                  		move.b	$25(a0),d0
0001A0E2 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001A0E6 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001A0EA 4EB9 0000 E0EA             		jsr	SpeedToPos
0001A0F0 43F9 0000 EFDE             		lea	(Ani_obj14).l,a1
0001A0F6 4EB9 0000 B222             		jsr	AnimateSprite
0001A0FC 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
0001A102 6200                       		bhi.s	Obj74_Delete
0001A104 4E75                       		rts	
0001A106                            ; ===========================================================================
0001A106                            
0001A106                            Obj74_Delete:
0001A106 4EF9 0000 E14C             		jmp	DeleteObject
0001A10C                            ; ===========================================================================
0001A10C 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001A10E 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001A110 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001A112 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001A114                            ; ===========================================================================
0001A114                            
0001A114                            Obj74_Drop:				; XREF: Obj74_Index2
0001A114 08E8 0001 0022             		bset	#1,$22(a0)
0001A11A 5328 0029                  		subq.b	#1,$29(a0)
0001A11E 6A00                       		bpl.s	locret_18780
0001A120 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A126 4228 0028                  		clr.b	$28(a0)
0001A12A 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A130 08A8 0001 0022             		bclr	#1,$22(a0)
0001A136 6100 C6BA                  		bsr.w	ObjHitFloor
0001A13A 4A41                       		tst.w	d1
0001A13C 6A00                       		bpl.s	locret_18780
0001A13E 5428 0025                  		addq.b	#2,$25(a0)
0001A142                            
0001A142                            locret_18780:
0001A142 4E75                       		rts	
0001A144                            ; ===========================================================================
0001A144                            
0001A144                            Obj74_MakeFlame:			; XREF: Obj74_Index2
0001A144 5568 000C                  		subq.w	#2,$C(a0)
0001A148 08E8 0007 0002             		bset	#7,2(a0)
0001A14E 317C 00A0 0010             		move.w	#$A0,$10(a0)
0001A154 4268 0012                  		clr.w	$12(a0)
0001A158 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A15E 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A164 117C 0003 0029             		move.b	#3,$29(a0)
0001A16A 4EB9 0000 E5BC             		jsr	SingleObjLoad2
0001A170 6600                       		bne.s	loc_187CA
0001A172 47D1                       		lea	(a1),a3
0001A174 45D0                       		lea	(a0),a2
0001A176 7003                       		moveq	#3,d0
0001A178                            
0001A178                            Obj74_Loop:
0001A178 26DA                       		move.l	(a2)+,(a3)+
0001A17A 26DA                       		move.l	(a2)+,(a3)+
0001A17C 26DA                       		move.l	(a2)+,(a3)+
0001A17E 26DA                       		move.l	(a2)+,(a3)+
0001A180 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001A184                            
0001A184 4469 0010                  		neg.w	$10(a1)
0001A188 5429 0025                  		addq.b	#2,$25(a1)
0001A18C                            
0001A18C                            loc_187CA:
0001A18C 5428 0025                  		addq.b	#2,$25(a0)
0001A190 4E75                       		rts	
0001A192                            
0001A192                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A192                            
0001A192                            
0001A192                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
0001A192 4EB9 0000 E5BC             		jsr	SingleObjLoad2
0001A198 6600                       		bne.s	locret_187EE
0001A19A 3368 0008 0008             		move.w	8(a0),8(a1)
0001A1A0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A1A6 12BC 0074                  		move.b	#$74,(a1)
0001A1AA 337C 0067 0028             		move.w	#$67,$28(a1)
0001A1B0                            
0001A1B0                            locret_187EE:
0001A1B0 4E75                       		rts	
0001A1B2                            ; End of function Obj74_Duplicate2
0001A1B2                            
0001A1B2                            ; ===========================================================================
0001A1B2                            
0001A1B2                            Obj74_Duplicate:			; XREF: Obj74_Index2
0001A1B2 6100 C63E                  		bsr.w	ObjHitFloor
0001A1B6 4A41                       		tst.w	d1
0001A1B8 6A00                       		bpl.s	loc_18826
0001A1BA 3028 0008                  		move.w	8(a0),d0
0001A1BE 0C40 1940                  		cmpi.w	#$1940,d0
0001A1C2 6E00                       		bgt.s	loc_1882C
0001A1C4 3228 0030                  		move.w	$30(a0),d1
0001A1C8 B240                       		cmp.w	d0,d1
0001A1CA 6700                       		beq.s	loc_1881E
0001A1CC 0240 0010                  		andi.w	#$10,d0
0001A1D0 0241 0010                  		andi.w	#$10,d1
0001A1D4 B240                       		cmp.w	d0,d1
0001A1D6 6700                       		beq.s	loc_1881E
0001A1D8 61B8                       		bsr.s	Obj74_Duplicate2
0001A1DA 3168 0008 0032             		move.w	8(a0),$32(a0)
0001A1E0                            
0001A1E0                            loc_1881E:
0001A1E0 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A1E6 4E75                       		rts	
0001A1E8                            ; ===========================================================================
0001A1E8                            
0001A1E8                            loc_18826:
0001A1E8 5428 0025                  		addq.b	#2,$25(a0)
0001A1EC 4E75                       		rts	
0001A1EE                            ; ===========================================================================
0001A1EE                            
0001A1EE                            loc_1882C:
0001A1EE 5428 0024                  		addq.b	#2,$24(a0)
0001A1F2 4E75                       		rts	
0001A1F4                            ; ===========================================================================
0001A1F4                            
0001A1F4                            Obj74_FallEdge:				; XREF: Obj74_Index2
0001A1F4 08A8 0001 0022             		bclr	#1,$22(a0)
0001A1FA 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
0001A200 3028 0008                  		move.w	8(a0),d0
0001A204 9068 0032                  		sub.w	$32(a0),d0
0001A208 6A00                       		bpl.s	loc_1884A
0001A20A 4440                       		neg.w	d0
0001A20C                            
0001A20C                            loc_1884A:
0001A20C 0C40 0012                  		cmpi.w	#$12,d0
0001A210 6600                       		bne.s	loc_18856
0001A212 08A8 0007 0002             		bclr	#7,2(a0)
0001A218                            
0001A218                            loc_18856:
0001A218 6100 C5D8                  		bsr.w	ObjHitFloor
0001A21C 4A41                       		tst.w	d1
0001A21E 6A00                       		bpl.s	locret_1887E
0001A220 5328 0029                  		subq.b	#1,$29(a0)
0001A224 6700                       		beq.s	Obj74_Delete2
0001A226 4268 0012                  		clr.w	$12(a0)
0001A22A 3168 0032 0008             		move.w	$32(a0),8(a0)
0001A230 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A236 08E8 0007 0002             		bset	#7,2(a0)
0001A23C 5528 0025                  		subq.b	#2,$25(a0)
0001A240                            
0001A240                            locret_1887E:
0001A240 4E75                       		rts	
0001A242                            ; ===========================================================================
0001A242                            
0001A242                            Obj74_Delete2:
0001A242 4EF9 0000 E14C             		jmp	DeleteObject
0001A248                            ; ===========================================================================
0001A248                            
0001A248                            loc_18886:				; XREF: Obj74_Index
0001A248 08E8 0007 0002             		bset	#7,2(a0)
0001A24E 5328 0029                  		subq.b	#1,$29(a0)
0001A252 6600                       		bne.s	Obj74_Animate
0001A254 117C 0001 001C             		move.b	#1,$1C(a0)
0001A25A 5968 000C                  		subq.w	#4,$C(a0)
0001A25E 4228 0020                  		clr.b	$20(a0)
0001A262                            
0001A262                            Obj74_Animate:
0001A262 43F9 0000 EFDE             		lea	(Ani_obj14).l,a1
0001A268 4EF9 0000 B222             		jmp	AnimateSprite
0001A26E                            ; ===========================================================================
0001A26E                            
0001A26E                            Obj74_Delete3:				; XREF: Obj74_Index
0001A26E 4EF9 0000 E14C             		jmp	DeleteObject
0001A274                            ; ===========================================================================
0001A274                            
0001A274                            Obj7A_Delete:
0001A274 4EF9 0000 E14C             		jmp	DeleteObject
0001A27A                            ; ===========================================================================
0001A27A                            ; ---------------------------------------------------------------------------
0001A27A                            ; Object 7A - Eggman (SLZ)
0001A27A                            ; ---------------------------------------------------------------------------
0001A27A                            
0001A27A                            Obj7A:					; XREF: Obj_Index
0001A27A 7000                       		moveq	#0,d0
0001A27C 1028 0024                  		move.b	$24(a0),d0
0001A280 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001A284 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001A288                            ; ===========================================================================
0001A288 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001A28A 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001A28C 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001A28E 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001A290 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001A292                            
0001A292 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001A295 0401 04                    		dc.b 4,	1, 4
0001A298 0607 04                    		dc.b 6,	7, 4
0001A29B 0800 03                    		dc.b 8,	0, 3
0001A29E                            ; ===========================================================================
0001A29E                            
0001A29E                            Obj7A_Main:				; XREF: Obj7A_Index
0001A29E 317C 2188 0008             		move.w	#$2188,8(a0)
0001A2A4 317C 0228 000C             		move.w	#$228,$C(a0)
0001A2AA 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A2B0 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A2B6 117C 000F 0020             		move.b	#$F,$20(a0)
0001A2BC 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A2C2 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
0001A2C6 2248                       		movea.l	a0,a1
0001A2C8 7203                       		moveq	#3,d1
0001A2CA 6000                       		bra.s	Obj7A_LoadBoss
0001A2CC                            ; ===========================================================================
0001A2CC                            
0001A2CC                            Obj7A_Loop:
0001A2CC 4EB9 0000 E5BC             		jsr	SingleObjLoad2
0001A2D2 6600                       		bne.s	loc_1895C
0001A2D4 12BC 007A                  		move.b	#$7A,0(a1)
0001A2D8 3368 0008 0008             		move.w	8(a0),8(a1)
0001A2DE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A2E4                            
0001A2E4                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
0001A2E4 08A8 0000 0022             		bclr	#0,$22(a0)
0001A2EA 4229 0025                  		clr.b	$25(a1)
0001A2EE 135A 0024                  		move.b	(a2)+,$24(a1)
0001A2F2 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A2F6 135A 0018                  		move.b	(a2)+,$18(a1)
0001A2FA 237C 0001 96D4 0004        		move.l	#Map_Eggman,4(a1)
0001A302 337C 0400 0002             		move.w	#$400,2(a1)
0001A308 137C 0004 0001             		move.b	#4,1(a1)
0001A30E 137C 0020 0019             		move.b	#$20,$19(a1)
0001A314 2348 0034                  		move.l	a0,$34(a1)
0001A318 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001A31C                            
0001A31C                            loc_1895C:
0001A31C 43F8 D040                  		lea	($FFFFD040).w,a1
0001A320 45E8 002A                  		lea	$2A(a0),a2
0001A324 705E                       		moveq	#$5E,d0
0001A326 723E                       		moveq	#$3E,d1
0001A328                            
0001A328                            loc_18968:
0001A328 B011                       		cmp.b	(a1),d0
0001A32A 6600                       		bne.s	loc_18974
0001A32C 4A29 0028                  		tst.b	$28(a1)
0001A330 6700                       		beq.s	loc_18974
0001A332 34C9                       		move.w	a1,(a2)+
0001A334                            
0001A334                            loc_18974:
0001A334 D2FC 0040                  		adda.w	#$40,a1
0001A338 51C9 FFEE                  		dbf	d1,loc_18968
0001A33C                            
0001A33C                            Obj7A_ShipMain:				; XREF: Obj7A_Index
0001A33C 7000                       		moveq	#0,d0
0001A33E 1028 0025                  		move.b	$25(a0),d0
0001A342 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001A346 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001A34A 43F9 0001 9684             		lea	(Ani_Eggman).l,a1
0001A350 4EB9 0000 B222             		jsr	AnimateSprite
0001A356 7003                       		moveq	#3,d0
0001A358 C028 0022                  		and.b	$22(a0),d0
0001A35C 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A362 8128 0001                  		or.b	d0,1(a0)
0001A366 4EF9 0000 E110             		jmp	DisplaySprite
0001A36C                            ; ===========================================================================
0001A36C 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001A36E 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001A370 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001A372 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001A374 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001A376 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001A378                            ; ===========================================================================
0001A378                            
0001A378                            loc_189B8:				; XREF: Obj7A_ShipIndex
0001A378 317C FF00 0010             		move.w	#-$100,$10(a0)
0001A37E 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001A384 6400                       		bcc.s	loc_189CA
0001A386 5428 0025                  		addq.b	#2,$25(a0)
0001A38A                            
0001A38A                            loc_189CA:
0001A38A 6100 EEE8                  		bsr.w	BossMove
0001A38E 1028 003F                  		move.b	$3F(a0),d0
0001A392 5428 003F                  		addq.b	#2,$3F(a0)
0001A396 4EB9 0000 33D4             		jsr	(CalcSine).l
0001A39C EC40                       		asr.w	#6,d0
0001A39E D068 0038                  		add.w	$38(a0),d0
0001A3A2 3140 000C                  		move.w	d0,$C(a0)
0001A3A6 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A3AC 6000                       		bra.s	loc_189FE
0001A3AE                            ; ===========================================================================
0001A3AE                            
0001A3AE                            loc_189EE:
0001A3AE 6100 EEC4                  		bsr.w	BossMove
0001A3B2 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A3B8 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A3BE                            
0001A3BE                            loc_189FE:
0001A3BE 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001A3C4 6400                       		bcc.s	locret_18A44
0001A3C6 4A28 0022                  		tst.b	$22(a0)
0001A3CA 6B00                       		bmi.s	loc_18A46
0001A3CC 4A28 0020                  		tst.b	$20(a0)
0001A3D0 6600                       		bne.s	locret_18A44
0001A3D2 4A28 003E                  		tst.b	$3E(a0)
0001A3D6 6600                       		bne.s	loc_18A28
0001A3D8 117C 0020 003E             		move.b	#$20,$3E(a0)
0001A3DE 303C 00AC                  		move.w	#$AC,d0
0001A3E2 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A3E8                            
0001A3E8                            loc_18A28:
0001A3E8 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001A3EC 7000                       		moveq	#0,d0
0001A3EE 4A51                       		tst.w	(a1)
0001A3F0 6600                       		bne.s	loc_18A36
0001A3F2 303C 0EEE                  		move.w	#$EEE,d0
0001A3F6                            
0001A3F6                            loc_18A36:
0001A3F6 3280                       		move.w	d0,(a1)
0001A3F8 5328 003E                  		subq.b	#1,$3E(a0)
0001A3FC 6600                       		bne.s	locret_18A44
0001A3FE 117C 000F 0020             		move.b	#$F,$20(a0)
0001A404                            
0001A404                            locret_18A44:
0001A404 4E75                       		rts	
0001A406                            ; ===========================================================================
0001A406                            
0001A406                            loc_18A46:
0001A406 7064                       		moveq	#100,d0
0001A408 6100 0000                  		bsr.w	AddPoints
0001A40C 117C 0006 0025             		move.b	#6,$25(a0)
0001A412 117C 0078 003C             		move.b	#$78,$3C(a0)
0001A418 4268 0010                  		clr.w	$10(a0)
0001A41C 4E75                       		rts	
0001A41E                            ; ===========================================================================
0001A41E                            
0001A41E                            loc_18A5E:				; XREF: Obj7A_ShipIndex
0001A41E 3028 0030                  		move.w	$30(a0),d0
0001A422 317C 0200 0010             		move.w	#$200,$10(a0)
0001A428 0828 0000 0022             		btst	#0,$22(a0)
0001A42E 6600                       		bne.s	loc_18A7C
0001A430 4468 0010                  		neg.w	$10(a0)
0001A434 0C40 2008                  		cmpi.w	#$2008,d0
0001A438 6E00                       		bgt.s	loc_18A88
0001A43A 6000                       		bra.s	loc_18A82
0001A43C                            ; ===========================================================================
0001A43C                            
0001A43C                            loc_18A7C:
0001A43C 0C40 2138                  		cmpi.w	#$2138,d0
0001A440 6D00                       		blt.s	loc_18A88
0001A442                            
0001A442                            loc_18A82:
0001A442 0868 0000 0022             		bchg	#0,$22(a0)
0001A448                            
0001A448                            loc_18A88:
0001A448 3028 0008                  		move.w	8(a0),d0
0001A44C 72FF                       		moveq	#-1,d1
0001A44E 7402                       		moveq	#2,d2
0001A450 45E8 002A                  		lea	$2A(a0),a2
0001A454 7828                       		moveq	#$28,d4
0001A456 4A68 0010                  		tst.w	$10(a0)
0001A45A 6A00                       		bpl.s	loc_18A9E
0001A45C 4444                       		neg.w	d4
0001A45E                            
0001A45E                            loc_18A9E:
0001A45E 321A                       		move.w	(a2)+,d1
0001A460 2641                       		movea.l	d1,a3
0001A462 082B 0003 0022             		btst	#3,$22(a3)
0001A468 6600                       		bne.s	loc_18AB4
0001A46A 362B 0008                  		move.w	8(a3),d3
0001A46E D644                       		add.w	d4,d3
0001A470 9640                       		sub.w	d0,d3
0001A472 6700                       		beq.s	loc_18AC0
0001A474                            
0001A474                            loc_18AB4:
0001A474 51CA FFE8                  		dbf	d2,loc_18A9E
0001A478                            
0001A478 1142 0028                  		move.b	d2,$28(a0)
0001A47C 6000 FF0C                  		bra.w	loc_189CA
0001A480                            ; ===========================================================================
0001A480                            
0001A480                            loc_18AC0:
0001A480 1142 0028                  		move.b	d2,$28(a0)
0001A484 5428 0025                  		addq.b	#2,$25(a0)
0001A488 117C 0028 003C             		move.b	#$28,$3C(a0)
0001A48E 6000 FEFA                  		bra.w	loc_189CA
0001A492                            ; ===========================================================================
0001A492                            
0001A492                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
0001A492 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001A498 6600                       		bne.s	loc_18B36
0001A49A 70FF                       		moveq	#-1,d0
0001A49C 1028 0028                  		move.b	$28(a0),d0
0001A4A0 4880                       		ext.w	d0
0001A4A2 6B00                       		bmi.s	loc_18B40
0001A4A4 5540                       		subq.w	#2,d0
0001A4A6 4440                       		neg.w	d0
0001A4A8 D040                       		add.w	d0,d0
0001A4AA 43E8 002A                  		lea	$2A(a0),a1
0001A4AE 3031 0000                  		move.w	(a1,d0.w),d0
0001A4B2 2440                       		movea.l	d0,a2
0001A4B4 43F8 D040                  		lea	($FFFFD040).w,a1
0001A4B8 723E                       		moveq	#$3E,d1
0001A4BA                            
0001A4BA                            loc_18AFA:
0001A4BA B0A9 003C                  		cmp.l	$3C(a1),d0
0001A4BE 6700                       		beq.s	loc_18B40
0001A4C0 D2FC 0040                  		adda.w	#$40,a1
0001A4C4 51C9 FFF4                  		dbf	d1,loc_18AFA
0001A4C8                            
0001A4C8 2F08                       		move.l	a0,-(sp)
0001A4CA 41D2                       		lea	(a2),a0
0001A4CC 4EB9 0000 E5BC             		jsr	SingleObjLoad2
0001A4D2 205F                       		movea.l	(sp)+,a0
0001A4D4 6600                       		bne.s	loc_18B40
0001A4D6 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
0001A4DA 3368 0008 0008             		move.w	8(a0),8(a1)
0001A4E0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A4E6 0669 0020 000C             		addi.w	#$20,$C(a1)
0001A4EC 136A 0022 0022             		move.b	$22(a2),$22(a1)
0001A4F2 234A 003C                  		move.l	a2,$3C(a1)
0001A4F6                            
0001A4F6                            loc_18B36:
0001A4F6 5328 003C                  		subq.b	#1,$3C(a0)
0001A4FA 6700                       		beq.s	loc_18B40
0001A4FC 6000 FEC0                  		bra.w	loc_189FE
0001A500                            ; ===========================================================================
0001A500                            
0001A500                            loc_18B40:
0001A500 5528 0025                  		subq.b	#2,$25(a0)
0001A504 6000 FE84                  		bra.w	loc_189CA
0001A508                            ; ===========================================================================
0001A508                            
0001A508                            loc_18B48:				; XREF: Obj7A_ShipIndex
0001A508 5328 003C                  		subq.b	#1,$3C(a0)
0001A50C 6B00                       		bmi.s	loc_18B52
0001A50E 6000 ED22                  		bra.w	BossDefeated
0001A512                            ; ===========================================================================
0001A512                            
0001A512                            loc_18B52:
0001A512 5428 0025                  		addq.b	#2,$25(a0)
0001A516 4268 0012                  		clr.w	$12(a0)
0001A51A 08E8 0000 0022             		bset	#0,$22(a0)
0001A520 08A8 0007 0022             		bclr	#7,$22(a0)
0001A526 4268 0010                  		clr.w	$10(a0)
0001A52A 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001A530 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001A534 6600                       		bne.s	loc_18B7C
0001A536 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001A53C                            
0001A53C                            loc_18B7C:
0001A53C 6000 FE80                  		bra.w	loc_189FE
0001A540                            ; ===========================================================================
0001A540                            
0001A540                            loc_18B80:				; XREF: Obj7A_ShipIndex
0001A540 5228 003C                  		addq.b	#1,$3C(a0)
0001A544 6700                       		beq.s	loc_18B90
0001A546 6A00                       		bpl.s	loc_18B96
0001A548 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A54E 6000                       		bra.s	loc_18BC2
0001A550                            ; ===========================================================================
0001A550                            
0001A550                            loc_18B90:
0001A550 4268 0012                  		clr.w	$12(a0)
0001A554 6000                       		bra.s	loc_18BC2
0001A556                            ; ===========================================================================
0001A556                            
0001A556                            loc_18B96:
0001A556 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001A55C 6500                       		bcs.s	loc_18BAE
0001A55E 6700                       		beq.s	loc_18BB4
0001A560 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001A566 6500                       		bcs.s	loc_18BC2
0001A568 5428 0025                  		addq.b	#2,$25(a0)
0001A56C 6000                       		bra.s	loc_18BC2
0001A56E                            ; ===========================================================================
0001A56E                            
0001A56E                            loc_18BAE:
0001A56E 5168 0012                  		subq.w	#8,$12(a0)
0001A572 6000                       		bra.s	loc_18BC2
0001A574                            ; ===========================================================================
0001A574                            
0001A574                            loc_18BB4:
0001A574 4268 0012                  		clr.w	$12(a0)
0001A578 303C 0084                  		move.w	#$84,d0
0001A57C 4EB9 0000 1470             		jsr	(PlaySound).l	; play SLZ music
0001A582                            
0001A582                            loc_18BC2:
0001A582 6000 FE2A                  		bra.w	loc_189EE
0001A586                            ; ===========================================================================
0001A586                            
0001A586                            loc_18BC6:				; XREF: Obj7A_ShipIndex
0001A586 317C 0400 0010             		move.w	#$400,$10(a0)
0001A58C 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A592 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
0001A598 6400                       		bcc.s	loc_18BE0
0001A59A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A59E 6000                       		bra.s	loc_18BE8
0001A5A0                            ; ===========================================================================
0001A5A0                            
0001A5A0                            loc_18BE0:
0001A5A0 4A28 0001                  		tst.b	1(a0)
0001A5A4 6A00 FCCE                  		bpl.w	Obj7A_Delete
0001A5A8                            
0001A5A8                            loc_18BE8:
0001A5A8 6100 ECCA                  		bsr.w	BossMove
0001A5AC 6000 FDDC                  		bra.w	loc_189CA
0001A5B0                            ; ===========================================================================
0001A5B0                            
0001A5B0                            Obj7A_FaceMain:				; XREF: Obj7A_Index
0001A5B0 7000                       		moveq	#0,d0
0001A5B2 7201                       		moveq	#1,d1
0001A5B4 2268 0034                  		movea.l	$34(a0),a1
0001A5B8 1029 0025                  		move.b	$25(a1),d0
0001A5BC 0C00 0006                  		cmpi.b	#6,d0
0001A5C0 6B00                       		bmi.s	loc_18C06
0001A5C2 720A                       		moveq	#$A,d1
0001A5C4 6000                       		bra.s	loc_18C1A
0001A5C6                            ; ===========================================================================
0001A5C6                            
0001A5C6                            loc_18C06:
0001A5C6 4A29 0020                  		tst.b	$20(a1)
0001A5CA 6600                       		bne.s	loc_18C10
0001A5CC 7205                       		moveq	#5,d1
0001A5CE 6000                       		bra.s	loc_18C1A
0001A5D0                            ; ===========================================================================
0001A5D0                            
0001A5D0                            loc_18C10:
0001A5D0 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A5D6 6500                       		bcs.s	loc_18C1A
0001A5D8 7204                       		moveq	#4,d1
0001A5DA                            
0001A5DA                            loc_18C1A:
0001A5DA 1141 001C                  		move.b	d1,$1C(a0)
0001A5DE 0C00 000A                  		cmpi.b	#$A,d0
0001A5E2 6600                       		bne.s	loc_18C32
0001A5E4 117C 0006 001C             		move.b	#6,$1C(a0)
0001A5EA 4A28 0001                  		tst.b	1(a0)
0001A5EE 6A00 FC84                  		bpl.w	Obj7A_Delete
0001A5F2                            
0001A5F2                            loc_18C32:
0001A5F2 6000                       		bra.s	loc_18C6C
0001A5F4                            ; ===========================================================================
0001A5F4                            
0001A5F4                            Obj7A_FlameMain:			; XREF: Obj7A_Index
0001A5F4 117C 0008 001C             		move.b	#8,$1C(a0)
0001A5FA 2268 0034                  		movea.l	$34(a0),a1
0001A5FE 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A604 6600                       		bne.s	loc_18C56
0001A606 4A28 0001                  		tst.b	1(a0)
0001A60A 6A00 FC68                  		bpl.w	Obj7A_Delete
0001A60E 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A614 6000                       		bra.s	loc_18C6C
0001A616                            ; ===========================================================================
0001A616                            
0001A616                            loc_18C56:
0001A616 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001A61C 6E00                       		bgt.s	loc_18C6C
0001A61E 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001A624 6D00                       		blt.s	loc_18C6C
0001A626 117C 0007 001C             		move.b	#7,$1C(a0)
0001A62C                            
0001A62C                            loc_18C6C:
0001A62C 43F9 0001 9684             		lea	(Ani_Eggman).l,a1
0001A632 4EB9 0000 B222             		jsr	AnimateSprite
0001A638                            
0001A638                            loc_18C78:
0001A638 2268 0034                  		movea.l	$34(a0),a1
0001A63C 3169 0008 0008             		move.w	8(a1),8(a0)
0001A642 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A648 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A64E 7003                       		moveq	#3,d0
0001A650 C028 0022                  		and.b	$22(a0),d0
0001A654 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A65A 8128 0001                  		or.b	d0,1(a0)
0001A65E 4EF9 0000 E110             		jmp	DisplaySprite
0001A664                            ; ===========================================================================
0001A664                            
0001A664                            Obj7A_TubeMain:				; XREF: Obj7A_Index
0001A664 2268 0034                  		movea.l	$34(a0),a1
0001A668 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A66E 6600                       		bne.s	loc_18CB8
0001A670 4A28 0001                  		tst.b	1(a0)
0001A674 6A00 FBFE                  		bpl.w	Obj7A_Delete
0001A678                            
0001A678                            loc_18CB8:
0001A678 217C 0001 979C 0004        		move.l	#Map_BossItems,4(a0)
0001A680 317C 246C 0002             		move.w	#$246C,2(a0)
0001A686 117C 0003 001A             		move.b	#3,$1A(a0)
0001A68C 60AA                       		bra.s	loc_18C78
0001A68E                            ; ===========================================================================
0001A68E                            ; ---------------------------------------------------------------------------
0001A68E                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001A68E                            ; ---------------------------------------------------------------------------
0001A68E                            
0001A68E                            Obj7B:					; XREF: Obj_Index
0001A68E 7000                       		moveq	#0,d0
0001A690 1028 0024                  		move.b	$24(a0),d0
0001A694 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001A698 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001A69C 3028 0030                  		move.w	$30(a0),d0
0001A6A0 0240 FF80                  		andi.w	#$FF80,d0
0001A6A4 3238 F700                  		move.w	($FFFFF700).w,d1
0001A6A8 0441 0080                  		subi.w	#$80,d1
0001A6AC 0241 FF80                  		andi.w	#$FF80,d1
0001A6B0 9041                       		sub.w	d1,d0
0001A6B2 6B00 FBC0                  		bmi.w	Obj7A_Delete
0001A6B6 0C40 0280                  		cmpi.w	#$280,d0
0001A6BA 6200 FBB8                  		bhi.w	Obj7A_Delete
0001A6BE 4EF9 0000 E110             		jmp	DisplaySprite
0001A6C4                            ; ===========================================================================
0001A6C4 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001A6C6 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001A6C8 0000                       		dc.w loc_18DC6-Obj7B_Index
0001A6CA 0000                       		dc.w loc_18EAA-Obj7B_Index
0001A6CC 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001A6CE 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001A6D0                            ; ===========================================================================
0001A6D0                            
0001A6D0                            Obj7B_Main:				; XREF: Obj7B_Index
0001A6D0 217C 0001 2510 0004        		move.l	#Map_obj5Ea,4(a0)
0001A6D8 317C 0518 0002             		move.w	#$518,2(a0)
0001A6DE 117C 0001 001A             		move.b	#1,$1A(a0)
0001A6E4 0028 0004 0001             		ori.b	#4,1(a0)
0001A6EA 117C 0004 0018             		move.b	#4,$18(a0)
0001A6F0 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A6F6 117C 000C 0019             		move.b	#$C,$19(a0)
0001A6FC 2268 003C                  		movea.l	$3C(a0),a1
0001A700 3169 0008 0030             		move.w	8(a1),$30(a0)
0001A706 3169 000C 0034             		move.w	$C(a1),$34(a0)
0001A70C 08E8 0000 0022             		bset	#0,$22(a0)
0001A712 3028 0008                  		move.w	8(a0),d0
0001A716 B069 0008                  		cmp.w	8(a1),d0
0001A71A 6E00                       		bgt.s	loc_18D68
0001A71C 08A8 0000 0022             		bclr	#0,$22(a0)
0001A722 117C 0002 003A             		move.b	#2,$3A(a0)
0001A728                            
0001A728                            loc_18D68:
0001A728 5428 0024                  		addq.b	#2,$24(a0)
0001A72C                            
0001A72C                            Obj7B_Fall:				; XREF: Obj7B_Index
0001A72C 4EB9 0000 E0BE             		jsr	ObjectFall
0001A732 2268 003C                  		movea.l	$3C(a0),a1
0001A736 45F9 0000 0000             		lea	(word_19018).l,a2
0001A73C 7000                       		moveq	#0,d0
0001A73E 1029 001A                  		move.b	$1A(a1),d0
0001A742 3228 0008                  		move.w	8(a0),d1
0001A746 9268 0030                  		sub.w	$30(a0),d1
0001A74A 6400                       		bcc.s	loc_18D8E
0001A74C 5440                       		addq.w	#2,d0
0001A74E                            
0001A74E                            loc_18D8E:
0001A74E D040                       		add.w	d0,d0
0001A750 3228 0034                  		move.w	$34(a0),d1
0001A754 D272 0000                  		add.w	(a2,d0.w),d1
0001A758 B268 000C                  		cmp.w	$C(a0),d1
0001A75C 6E00                       		bgt.s	locret_18DC4
0001A75E 2268 003C                  		movea.l	$3C(a0),a1
0001A762 7202                       		moveq	#2,d1
0001A764 0828 0000 0022             		btst	#0,$22(a0)
0001A76A 6700                       		beq.s	loc_18DAE
0001A76C 7200                       		moveq	#0,d1
0001A76E                            
0001A76E                            loc_18DAE:
0001A76E 317C 00F0 0028             		move.w	#$F0,$28(a0)
0001A774 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
0001A77A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001A780 6000 0000                  		bra.w	loc_18FA2
0001A784                            ; ===========================================================================
0001A784                            
0001A784                            locret_18DC4:
0001A784 4E75                       		rts	
0001A786                            ; ===========================================================================
0001A786                            
0001A786                            loc_18DC6:				; XREF: Obj7B_Index
0001A786 2268 003C                  		movea.l	$3C(a0),a1
0001A78A 7000                       		moveq	#0,d0
0001A78C 1028 003A                  		move.b	$3A(a0),d0
0001A790 9029 003A                  		sub.b	$3A(a1),d0
0001A794 6700                       		beq.s	loc_18E2A
0001A796 6400                       		bcc.s	loc_18DDA
0001A798 4400                       		neg.b	d0
0001A79A                            
0001A79A                            loc_18DDA:
0001A79A 323C F7E8                  		move.w	#-$818,d1
0001A79E 343C FEEC                  		move.w	#-$114,d2
0001A7A2 0C00 0001                  		cmpi.b	#1,d0
0001A7A6 6700                       		beq.s	loc_18E00
0001A7A8 323C F6A0                  		move.w	#-$960,d1
0001A7AC 343C FF0C                  		move.w	#-$F4,d2
0001A7B0 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001A7B6 6D00                       		blt.s	loc_18E00
0001A7B8 323C F5E0                  		move.w	#-$A20,d1
0001A7BC 343C FF80                  		move.w	#-$80,d2
0001A7C0                            
0001A7C0                            loc_18E00:
0001A7C0 3141 0012                  		move.w	d1,$12(a0)
0001A7C4 3142 0010                  		move.w	d2,$10(a0)
0001A7C8 3028 0008                  		move.w	8(a0),d0
0001A7CC 9068 0030                  		sub.w	$30(a0),d0
0001A7D0 6400                       		bcc.s	loc_18E16
0001A7D2 4468 0010                  		neg.w	$10(a0)
0001A7D6                            
0001A7D6                            loc_18E16:
0001A7D6 117C 0001 001A             		move.b	#1,$1A(a0)
0001A7DC 317C 0020 0028             		move.w	#$20,$28(a0)
0001A7E2 5428 0024                  		addq.b	#2,$24(a0)
0001A7E6 6000 0000                  		bra.w	loc_18EAA
0001A7EA                            ; ===========================================================================
0001A7EA                            
0001A7EA                            loc_18E2A:				; XREF: loc_18DC6
0001A7EA 45F9 0000 0000             		lea	(word_19018).l,a2
0001A7F0 7000                       		moveq	#0,d0
0001A7F2 1029 001A                  		move.b	$1A(a1),d0
0001A7F6 343C 0028                  		move.w	#$28,d2
0001A7FA 3228 0008                  		move.w	8(a0),d1
0001A7FE 9268 0030                  		sub.w	$30(a0),d1
0001A802 6400                       		bcc.s	loc_18E48
0001A804 4442                       		neg.w	d2
0001A806 5440                       		addq.w	#2,d0
0001A808                            
0001A808                            loc_18E48:
0001A808 D040                       		add.w	d0,d0
0001A80A 3228 0034                  		move.w	$34(a0),d1
0001A80E D272 0000                  		add.w	(a2,d0.w),d1
0001A812 3141 000C                  		move.w	d1,$C(a0)
0001A816 D468 0030                  		add.w	$30(a0),d2
0001A81A 3142 0008                  		move.w	d2,8(a0)
0001A81E 4268 000E                  		clr.w	$E(a0)
0001A822 4268 000A                  		clr.w	$A(a0)
0001A826 5368 0028                  		subq.w	#1,$28(a0)
0001A82A 6600                       		bne.s	loc_18E7A
0001A82C 317C 0020 0028             		move.w	#$20,$28(a0)
0001A832 117C 0008 0024             		move.b	#8,$24(a0)
0001A838 4E75                       		rts	
0001A83A                            ; ===========================================================================
0001A83A                            
0001A83A                            loc_18E7A:
0001A83A 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
0001A840 6600                       		bne.s	loc_18E88
0001A842 117C 0005 001F             		move.b	#5,$1F(a0)
0001A848                            
0001A848                            loc_18E88:
0001A848 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
0001A84E 6600                       		bne.s	loc_18E96
0001A850 117C 0002 001F             		move.b	#2,$1F(a0)
0001A856                            
0001A856                            loc_18E96:
0001A856 5328 001E                  		subq.b	#1,$1E(a0)
0001A85A 6E00                       		bgt.s	locret_18EA8
0001A85C 0868 0000 001A             		bchg	#0,$1A(a0)
0001A862 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001A868                            
0001A868                            locret_18EA8:
0001A868 4E75                       		rts	
0001A86A                            ; ===========================================================================
0001A86A                            
0001A86A                            loc_18EAA:				; XREF: Obj7B_Index
0001A86A 43F8 D040                  		lea	($FFFFD040).w,a1
0001A86E 707A                       		moveq	#$7A,d0
0001A870 7240                       		moveq	#$40,d1
0001A872 743E                       		moveq	#$3E,d2
0001A874                            
0001A874                            loc_18EB4:
0001A874 B011                       		cmp.b	(a1),d0
0001A876 6700                       		beq.s	loc_18EC0
0001A878 D2C1                       		adda.w	d1,a1
0001A87A 51CA FFF8                  		dbf	d2,loc_18EB4
0001A87E                            
0001A87E 6000                       		bra.s	loc_18F38
0001A880                            ; ===========================================================================
0001A880                            
0001A880                            loc_18EC0:
0001A880 3029 0008                  		move.w	8(a1),d0
0001A884 3229 000C                  		move.w	$C(a1),d1
0001A888 3428 0008                  		move.w	8(a0),d2
0001A88C 3628 000C                  		move.w	$C(a0),d3
0001A890 45FA 0000                  		lea	byte_19022(pc),a2
0001A894 47FA 0000                  		lea	byte_19026(pc),a3
0001A898 181A                       		move.b	(a2)+,d4
0001A89A 4884                       		ext.w	d4
0001A89C D044                       		add.w	d4,d0
0001A89E 181B                       		move.b	(a3)+,d4
0001A8A0 4884                       		ext.w	d4
0001A8A2 D444                       		add.w	d4,d2
0001A8A4 B440                       		cmp.w	d0,d2
0001A8A6 6500                       		bcs.s	loc_18F38
0001A8A8 181A                       		move.b	(a2)+,d4
0001A8AA 4884                       		ext.w	d4
0001A8AC D044                       		add.w	d4,d0
0001A8AE 181B                       		move.b	(a3)+,d4
0001A8B0 4884                       		ext.w	d4
0001A8B2 D444                       		add.w	d4,d2
0001A8B4 B042                       		cmp.w	d2,d0
0001A8B6 6500                       		bcs.s	loc_18F38
0001A8B8 181A                       		move.b	(a2)+,d4
0001A8BA 4884                       		ext.w	d4
0001A8BC D244                       		add.w	d4,d1
0001A8BE 181B                       		move.b	(a3)+,d4
0001A8C0 4884                       		ext.w	d4
0001A8C2 D644                       		add.w	d4,d3
0001A8C4 B641                       		cmp.w	d1,d3
0001A8C6 6500                       		bcs.s	loc_18F38
0001A8C8 181A                       		move.b	(a2)+,d4
0001A8CA 4884                       		ext.w	d4
0001A8CC D244                       		add.w	d4,d1
0001A8CE 181B                       		move.b	(a3)+,d4
0001A8D0 4884                       		ext.w	d4
0001A8D2 D644                       		add.w	d4,d3
0001A8D4 B243                       		cmp.w	d3,d1
0001A8D6 6500                       		bcs.s	loc_18F38
0001A8D8 5428 0024                  		addq.b	#2,$24(a0)
0001A8DC 4268 0028                  		clr.w	$28(a0)
0001A8E0 4229 0020                  		clr.b	$20(a1)
0001A8E4 5329 0021                  		subq.b	#1,$21(a1)
0001A8E8 6600                       		bne.s	loc_18F38
0001A8EA 08E9 0007 0022             		bset	#7,$22(a1)
0001A8F0 4268 0010                  		clr.w	$10(a0)
0001A8F4 4268 0012                  		clr.w	$12(a0)
0001A8F8                            
0001A8F8                            loc_18F38:
0001A8F8 4A68 0012                  		tst.w	$12(a0)
0001A8FC 6A00                       		bpl.s	loc_18F5C
0001A8FE 4EB9 0000 E0BE             		jsr	ObjectFall
0001A904 3028 0034                  		move.w	$34(a0),d0
0001A908 0440 002F                  		subi.w	#$2F,d0
0001A90C B068 000C                  		cmp.w	$C(a0),d0
0001A910 6E00                       		bgt.s	loc_18F58
0001A912 4EB9 0000 E0BE             		jsr	ObjectFall
0001A918                            
0001A918                            loc_18F58:
0001A918 6000 FF20                  		bra.w	loc_18E7A
0001A91C                            ; ===========================================================================
0001A91C                            
0001A91C                            loc_18F5C:
0001A91C 4EB9 0000 E0BE             		jsr	ObjectFall
0001A922 2268 003C                  		movea.l	$3C(a0),a1
0001A926 45F9 0000 0000             		lea	(word_19018).l,a2
0001A92C 7000                       		moveq	#0,d0
0001A92E 1029 001A                  		move.b	$1A(a1),d0
0001A932 3228 0008                  		move.w	8(a0),d1
0001A936 9268 0030                  		sub.w	$30(a0),d1
0001A93A 6400                       		bcc.s	loc_18F7E
0001A93C 5440                       		addq.w	#2,d0
0001A93E                            
0001A93E                            loc_18F7E:
0001A93E D040                       		add.w	d0,d0
0001A940 3228 0034                  		move.w	$34(a0),d1
0001A944 D272 0000                  		add.w	(a2,d0.w),d1
0001A948 B268 000C                  		cmp.w	$C(a0),d1
0001A94C 6ECA                       		bgt.s	loc_18F58
0001A94E 2268 003C                  		movea.l	$3C(a0),a1
0001A952 7202                       		moveq	#2,d1
0001A954 4A68 0010                  		tst.w	$10(a0)
0001A958 6B00                       		bmi.s	loc_18F9C
0001A95A 7200                       		moveq	#0,d1
0001A95C                            
0001A95C                            loc_18F9C:
0001A95C 317C 0000 0028             		move.w	#0,$28(a0)
0001A962                            
0001A962                            loc_18FA2:
0001A962 1341 003A                  		move.b	d1,$3A(a1)
0001A966 1141 003A                  		move.b	d1,$3A(a0)
0001A96A B229 001A                  		cmp.b	$1A(a1),d1
0001A96E 6700                       		beq.s	loc_19008
0001A970 08A9 0003 0022             		bclr	#3,$22(a1)
0001A976 6700                       		beq.s	loc_19008
0001A978 4229 0025                  		clr.b	$25(a1)
0001A97C 137C 0002 0024             		move.b	#2,$24(a1)
0001A982 45F8 D000                  		lea	($FFFFD000).w,a2
0001A986 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001A98C 446A 0012                  		neg.w	$12(a2)
0001A990 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0001A996 6600                       		bne.s	loc_18FDC
0001A998 E0EA 0012                  		asr	$12(a2)
0001A99C                            
0001A99C                            loc_18FDC:
0001A99C 08EA 0001 0022             		bset	#1,$22(a2)
0001A9A2 08AA 0003 0022             		bclr	#3,$22(a2)
0001A9A8 422A 003C                  		clr.b	$3C(a2)
0001A9AC 2F08                       		move.l	a0,-(sp)
0001A9AE 41D2                       		lea	(a2),a0
0001A9B0 4EBA 9610                  		jsr	Obj01_ChkRoll
0001A9B4 205F                       		movea.l	(sp)+,a0
0001A9B6 157C 0002 0024             		move.b	#2,$24(a2)
0001A9BC 303C 00CC                  		move.w	#$CC,d0
0001A9C0 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play "spring" sound
0001A9C6                            
0001A9C6                            loc_19008:
0001A9C6 4268 0010                  		clr.w	$10(a0)
0001A9CA 4268 0012                  		clr.w	$12(a0)
0001A9CE 5428 0024                  		addq.b	#2,$24(a0)
0001A9D2 6000 FE66                  		bra.w	loc_18E7A
0001A9D6                            ; ===========================================================================
0001A9D6 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001A9E0                            		even
0001A9E0 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001A9E4                            		even
0001A9E4 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001A9E8                            		even
0001A9E8                            ; ===========================================================================
0001A9E8                            
0001A9E8                            Obj7B_Explode:				; XREF: Obj7B_Index
0001A9E8 10BC 003F                  		move.b	#$3F,(a0)
0001A9EC 4228 0024                  		clr.b	$24(a0)
0001A9F0 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
0001A9F6 6700                       		beq.s	Obj7B_MakeFrag
0001A9F8 4E75                       		rts	
0001A9FA                            ; ===========================================================================
0001A9FA                            
0001A9FA                            Obj7B_MakeFrag:
0001A9FA 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001AA00 7203                       		moveq	#3,d1
0001AA02 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001AA06                            
0001AA06                            Obj7B_Loop:
0001AA06 4EB9 0000 E5A6             		jsr	SingleObjLoad
0001AA0C 6600                       		bne.s	loc_1909A
0001AA0E 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
0001AA12 137C 000A 0024             		move.b	#$A,$24(a1)
0001AA18 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
0001AA20 137C 0003 0018             		move.b	#3,$18(a1)
0001AA26 337C 0518 0002             		move.w	#$518,2(a1)
0001AA2C 3368 0008 0008             		move.w	8(a0),8(a1)
0001AA32 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AA38 335A 0010                  		move.w	(a2)+,$10(a1)
0001AA3C 335A 0012                  		move.w	(a2)+,$12(a1)
0001AA40 137C 0098 0020             		move.b	#$98,$20(a1)
0001AA46 0029 0004 0001             		ori.b	#4,1(a1)
0001AA4C 08E9 0007 0001             		bset	#7,1(a1)
0001AA52 137C 000C 0019             		move.b	#$C,$19(a1)
0001AA58                            
0001AA58                            loc_1909A:
0001AA58 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001AA5C                            
0001AA5C 4E75                       		rts	
0001AA5E                            ; ===========================================================================
0001AA5E FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
0001AA62 FF60 FDC0                  		dc.w $FF60, $FDC0
0001AA66 0100 FCC0                  		dc.w $100, $FCC0
0001AA6A 00A0 FDC0                  		dc.w $A0, $FDC0
0001AA6E                            ; ===========================================================================
0001AA6E                            
0001AA6E                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
0001AA6E 4EB9 0000 E0EA             		jsr	SpeedToPos
0001AA74 3168 0008 0030             		move.w	8(a0),$30(a0)
0001AA7A 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001AA80 0668 0018 0012             		addi.w	#$18,$12(a0)
0001AA86 7004                       		moveq	#4,d0
0001AA88 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001AA8C E448                       		lsr.w	#2,d0
0001AA8E 1140 001A                  		move.b	d0,$1A(a0)
0001AA92 4A28 0001                  		tst.b	1(a0)
0001AA96 6A00 F7DC                  		bpl.w	Obj7A_Delete
0001AA9A 4E75                       		rts	
0001AA9C                            ; ===========================================================================
0001AA9C                            ; ---------------------------------------------------------------------------
0001AA9C                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001AA9C                            ; ---------------------------------------------------------------------------
0001AA9C                            Map_obj7B:
0001AA9C                            	include "_maps\obj7B.asm"
0001AA9C                            ; ---------------------------------------------------------------------------
0001AA9C                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001AA9C                            ; ---------------------------------------------------------------------------
0001AA9C 0000                       		dc.w byte_190E2-Map_obj7B
0001AA9E 0000                       		dc.w byte_190E8-Map_obj7B
0001AAA0 01                         byte_190E2:	dc.b 1
0001AAA1 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001AAA6 01                         byte_190E8:	dc.b 1
0001AAA7 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001AAAC                            		even
0001AAAC                            		even
0001AAAC                            
0001AAAC                            ; ===========================================================================
0001AAAC                            ; ---------------------------------------------------------------------------
0001AAAC                            ; Object 75 - Eggman (SYZ)
0001AAAC                            ; ---------------------------------------------------------------------------
0001AAAC                            
0001AAAC                            Obj75:					; XREF: Obj_Index
0001AAAC 7000                       		moveq	#0,d0
0001AAAE 1028 0024                  		move.b	$24(a0),d0
0001AAB2 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001AAB6 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001AABA                            ; ===========================================================================
0001AABA 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001AABC 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001AABE 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001AAC0 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001AAC2 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001AAC4                            
0001AAC4 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
0001AAC7 0401 05                    		dc.b 4,	1, 5
0001AACA 0607 05                    		dc.b 6,	7, 5
0001AACD 0800 05                    		dc.b 8,	0, 5
0001AAD0                            ; ===========================================================================
0001AAD0                            
0001AAD0                            Obj75_Main:				; XREF: Obj75_Index
0001AAD0 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
0001AAD6 317C 04DA 000C             		move.w	#$4DA,$C(a0)
0001AADC 3168 0008 0030             		move.w	8(a0),$30(a0)
0001AAE2 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001AAE8 117C 000F 0020             		move.b	#$F,$20(a0)
0001AAEE 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001AAF4 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
0001AAF8 2248                       		movea.l	a0,a1
0001AAFA 7203                       		moveq	#3,d1
0001AAFC 6000                       		bra.s	Obj75_LoadBoss
0001AAFE                            ; ===========================================================================
0001AAFE                            
0001AAFE                            Obj75_Loop:
0001AAFE 4EB9 0000 E5BC             		jsr	SingleObjLoad2
0001AB04 6600                       		bne.s	Obj75_ShipMain
0001AB06 12BC 0075                  		move.b	#$75,(a1)
0001AB0A 3368 0008 0008             		move.w	8(a0),8(a1)
0001AB10 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AB16                            
0001AB16                            Obj75_LoadBoss:				; XREF: Obj75_Main
0001AB16 08A8 0000 0022             		bclr	#0,$22(a0)
0001AB1C 4229 0025                  		clr.b	$25(a1)
0001AB20 135A 0024                  		move.b	(a2)+,$24(a1)
0001AB24 135A 001C                  		move.b	(a2)+,$1C(a1)
0001AB28 135A 0018                  		move.b	(a2)+,$18(a1)
0001AB2C 237C 0001 96D4 0004        		move.l	#Map_Eggman,4(a1)
0001AB34 337C 0400 0002             		move.w	#$400,2(a1)
0001AB3A 137C 0004 0001             		move.b	#4,1(a1)
0001AB40 137C 0020 0019             		move.b	#$20,$19(a1)
0001AB46 2348 0034                  		move.l	a0,$34(a1)
0001AB4A 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001AB4E                            
0001AB4E                            Obj75_ShipMain:				; XREF: Obj75_Index
0001AB4E 7000                       		moveq	#0,d0
0001AB50 1028 0025                  		move.b	$25(a0),d0
0001AB54 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001AB58 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001AB5C 43F9 0001 9684             		lea	(Ani_Eggman).l,a1
0001AB62 4EB9 0000 B222             		jsr	AnimateSprite
0001AB68 7003                       		moveq	#3,d0
0001AB6A C028 0022                  		and.b	$22(a0),d0
0001AB6E 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001AB74 8128 0001                  		or.b	d0,1(a0)
0001AB78 4EF9 0000 E110             		jmp	DisplaySprite
0001AB7E                            ; ===========================================================================
0001AB7E 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001AB82 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001AB86 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001AB8A                            ; ===========================================================================
0001AB8A                            
0001AB8A                            loc_191CC:				; XREF: Obj75_ShipIndex
0001AB8A 317C FF00 0010             		move.w	#-$100,$10(a0)
0001AB90 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001AB96 6400                       		bcc.s	loc_191DE
0001AB98 5428 0025                  		addq.b	#2,$25(a0)
0001AB9C                            
0001AB9C                            loc_191DE:
0001AB9C 1028 003F                  		move.b	$3F(a0),d0
0001ABA0 5428 003F                  		addq.b	#2,$3F(a0)
0001ABA4 4EB9 0000 33D4             		jsr	(CalcSine).l
0001ABAA E440                       		asr.w	#2,d0
0001ABAC 3140 0012                  		move.w	d0,$12(a0)
0001ABB0                            
0001ABB0                            loc_191F2:
0001ABB0 6100 E6C2                  		bsr.w	BossMove
0001ABB4 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001ABBA 3168 0030 0008             		move.w	$30(a0),8(a0)
0001ABC0                            
0001ABC0                            loc_19202:
0001ABC0 3028 0008                  		move.w	8(a0),d0
0001ABC4 0440 2C00                  		subi.w	#$2C00,d0
0001ABC8 EA48                       		lsr.w	#5,d0
0001ABCA 1140 0034                  		move.b	d0,$34(a0)
0001ABCE 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001ABD4 6400                       		bcc.s	locret_19256
0001ABD6 4A28 0022                  		tst.b	$22(a0)
0001ABDA 6B00                       		bmi.s	loc_19258
0001ABDC 4A28 0020                  		tst.b	$20(a0)
0001ABE0 6600                       		bne.s	locret_19256
0001ABE2 4A28 003E                  		tst.b	$3E(a0)
0001ABE6 6600                       		bne.s	loc_1923A
0001ABE8 117C 0020 003E             		move.b	#$20,$3E(a0)
0001ABEE 303C 00AC                  		move.w	#$AC,d0
0001ABF2 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001ABF8                            
0001ABF8                            loc_1923A:
0001ABF8 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001ABFC 7000                       		moveq	#0,d0
0001ABFE 4A51                       		tst.w	(a1)
0001AC00 6600                       		bne.s	loc_19248
0001AC02 303C 0EEE                  		move.w	#$EEE,d0
0001AC06                            
0001AC06                            loc_19248:
0001AC06 3280                       		move.w	d0,(a1)
0001AC08 5328 003E                  		subq.b	#1,$3E(a0)
0001AC0C 6600                       		bne.s	locret_19256
0001AC0E 117C 000F 0020             		move.b	#$F,$20(a0)
0001AC14                            
0001AC14                            locret_19256:
0001AC14 4E75                       		rts	
0001AC16                            ; ===========================================================================
0001AC16                            
0001AC16                            loc_19258:				; XREF: loc_19202
0001AC16 7064                       		moveq	#100,d0
0001AC18 6100 0000                  		bsr.w	AddPoints
0001AC1C 117C 0006 0025             		move.b	#6,$25(a0)
0001AC22 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001AC28 4268 0010                  		clr.w	$10(a0)
0001AC2C 4E75                       		rts	
0001AC2E                            ; ===========================================================================
0001AC2E                            
0001AC2E                            loc_19270:				; XREF: Obj75_ShipIndex
0001AC2E 3028 0030                  		move.w	$30(a0),d0
0001AC32 317C 0140 0010             		move.w	#$140,$10(a0)
0001AC38 0828 0000 0022             		btst	#0,$22(a0)
0001AC3E 6600                       		bne.s	loc_1928E
0001AC40 4468 0010                  		neg.w	$10(a0)
0001AC44 0C40 2C08                  		cmpi.w	#$2C08,d0
0001AC48 6E00                       		bgt.s	loc_1929E
0001AC4A 6000                       		bra.s	loc_19294
0001AC4C                            ; ===========================================================================
0001AC4C                            
0001AC4C                            loc_1928E:
0001AC4C 0C40 2D38                  		cmpi.w	#$2D38,d0
0001AC50 6D00                       		blt.s	loc_1929E
0001AC52                            
0001AC52                            loc_19294:
0001AC52 0868 0000 0022             		bchg	#0,$22(a0)
0001AC58 4228 003D                  		clr.b	$3D(a0)
0001AC5C                            
0001AC5C                            loc_1929E:
0001AC5C 0440 2C10                  		subi.w	#$2C10,d0
0001AC60 0240 001F                  		andi.w	#$1F,d0
0001AC64 0440 001F                  		subi.w	#$1F,d0
0001AC68 6A00                       		bpl.s	loc_192AE
0001AC6A 4440                       		neg.w	d0
0001AC6C                            
0001AC6C                            loc_192AE:
0001AC6C 5340                       		subq.w	#1,d0
0001AC6E 6E00                       		bgt.s	loc_192E8
0001AC70 4A28 003D                  		tst.b	$3D(a0)
0001AC74 6600                       		bne.s	loc_192E8
0001AC76 3238 D008                  		move.w	($FFFFD008).w,d1
0001AC7A 0441 2C00                  		subi.w	#$2C00,d1
0001AC7E EA41                       		asr.w	#5,d1
0001AC80 B228 0034                  		cmp.b	$34(a0),d1
0001AC84 6600                       		bne.s	loc_192E8
0001AC86 7000                       		moveq	#0,d0
0001AC88 1028 0034                  		move.b	$34(a0),d0
0001AC8C EB40                       		asl.w	#5,d0
0001AC8E 0640 2C10                  		addi.w	#$2C10,d0
0001AC92 3140 0030                  		move.w	d0,$30(a0)
0001AC96 6100 0000                  		bsr.w	Obj75_FindBlocks
0001AC9A 5428 0025                  		addq.b	#2,$25(a0)
0001AC9E 4268 0028                  		clr.w	$28(a0)
0001ACA2 4268 0010                  		clr.w	$10(a0)
0001ACA6                            
0001ACA6                            loc_192E8:
0001ACA6 6000 FEF4                  		bra.w	loc_191DE
0001ACAA                            ; ===========================================================================
0001ACAA                            
0001ACAA                            loc_192EC:				; XREF: Obj75_ShipIndex
0001ACAA 7000                       		moveq	#0,d0
0001ACAC 1028 0028                  		move.b	$28(a0),d0
0001ACB0 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001ACB4 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001ACB8                            ; ===========================================================================
0001ACB8 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001ACBA 0000                       		dc.w loc_19348-off_192FA
0001ACBC 0000                       		dc.w loc_1938E-off_192FA
0001ACBE 0000                       		dc.w loc_193D0-off_192FA
0001ACC0                            ; ===========================================================================
0001ACC0                            
0001ACC0                            loc_19302:				; XREF: off_192FA
0001ACC0 317C 0180 0012             		move.w	#$180,$12(a0)
0001ACC6 3028 0038                  		move.w	$38(a0),d0
0001ACCA 0C40 0556                  		cmpi.w	#$556,d0
0001ACCE 6500                       		bcs.s	loc_19344
0001ACD0 317C 0556 0038             		move.w	#$556,$38(a0)
0001ACD6 4268 003C                  		clr.w	$3C(a0)
0001ACDA 70FF                       		moveq	#-1,d0
0001ACDC 3028 0036                  		move.w	$36(a0),d0
0001ACE0 6700                       		beq.s	loc_1933C
0001ACE2 2240                       		movea.l	d0,a1
0001ACE4 137C 00FF 0029             		move.b	#-1,$29(a1)
0001ACEA 117C 00FF 0029             		move.b	#-1,$29(a0)
0001ACF0 2348 0034                  		move.l	a0,$34(a1)
0001ACF4 317C 0032 003C             		move.w	#$32,$3C(a0)
0001ACFA                            
0001ACFA                            loc_1933C:
0001ACFA 4268 0012                  		clr.w	$12(a0)
0001ACFE 5428 0028                  		addq.b	#2,$28(a0)
0001AD02                            
0001AD02                            loc_19344:
0001AD02 6000 FEAC                  		bra.w	loc_191F2
0001AD06                            ; ===========================================================================
0001AD06                            
0001AD06                            loc_19348:				; XREF: off_192FA
0001AD06 5368 003C                  		subq.w	#1,$3C(a0)
0001AD0A 6A00                       		bpl.s	loc_19366
0001AD0C 5428 0028                  		addq.b	#2,$28(a0)
0001AD10 317C F800 0012             		move.w	#-$800,$12(a0)
0001AD16 4A68 0036                  		tst.w	$36(a0)
0001AD1A 6600                       		bne.s	loc_19362
0001AD1C E0E8 0012                  		asr	$12(a0)
0001AD20                            
0001AD20                            loc_19362:
0001AD20 7000                       		moveq	#0,d0
0001AD22 6000                       		bra.s	loc_1937C
0001AD24                            ; ===========================================================================
0001AD24                            
0001AD24                            loc_19366:
0001AD24 7000                       		moveq	#0,d0
0001AD26 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001AD2C 6E00                       		bgt.s	loc_1937C
0001AD2E 7002                       		moveq	#2,d0
0001AD30 0828 0001 003D             		btst	#1,$3D(a0)
0001AD36 6700                       		beq.s	loc_1937C
0001AD38 4440                       		neg.w	d0
0001AD3A                            
0001AD3A                            loc_1937C:
0001AD3A D068 0038                  		add.w	$38(a0),d0
0001AD3E 3140 000C                  		move.w	d0,$C(a0)
0001AD42 3168 0030 0008             		move.w	$30(a0),8(a0)
0001AD48 6000 FE76                  		bra.w	loc_19202
0001AD4C                            ; ===========================================================================
0001AD4C                            
0001AD4C                            loc_1938E:				; XREF: off_192FA
0001AD4C 303C 04DA                  		move.w	#$4DA,d0
0001AD50 4A68 0036                  		tst.w	$36(a0)
0001AD54 6700                       		beq.s	loc_1939C
0001AD56 0440 0018                  		subi.w	#$18,d0
0001AD5A                            
0001AD5A                            loc_1939C:
0001AD5A B068 0038                  		cmp.w	$38(a0),d0
0001AD5E 6D00                       		blt.s	loc_193BE
0001AD60 317C 0008 003C             		move.w	#8,$3C(a0)
0001AD66 4A68 0036                  		tst.w	$36(a0)
0001AD6A 6700                       		beq.s	loc_193B4
0001AD6C 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001AD72                            
0001AD72                            loc_193B4:
0001AD72 5428 0028                  		addq.b	#2,$28(a0)
0001AD76 4268 0012                  		clr.w	$12(a0)
0001AD7A 6000                       		bra.s	loc_193CC
0001AD7C                            ; ===========================================================================
0001AD7C                            
0001AD7C                            loc_193BE:
0001AD7C 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
0001AD82 6C00                       		bge.s	loc_193CC
0001AD84 0668 000C 0012             		addi.w	#$C,$12(a0)
0001AD8A                            
0001AD8A                            loc_193CC:
0001AD8A 6000 FE24                  		bra.w	loc_191F2
0001AD8E                            ; ===========================================================================
0001AD8E                            
0001AD8E                            loc_193D0:				; XREF: off_192FA
0001AD8E 5368 003C                  		subq.w	#1,$3C(a0)
0001AD92 6E00                       		bgt.s	loc_19406
0001AD94 6B00                       		bmi.s	loc_193EE
0001AD96 70FF                       		moveq	#-1,d0
0001AD98 3028 0036                  		move.w	$36(a0),d0
0001AD9C 6700                       		beq.s	loc_193E8
0001AD9E 2240                       		movea.l	d0,a1
0001ADA0 137C 000A 0029             		move.b	#$A,$29(a1)
0001ADA6                            
0001ADA6                            loc_193E8:
0001ADA6 4268 0036                  		clr.w	$36(a0)
0001ADAA 6000                       		bra.s	loc_19406
0001ADAC                            ; ===========================================================================
0001ADAC                            
0001ADAC                            loc_193EE:
0001ADAC 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001ADB2 6600                       		bne.s	loc_19406
0001ADB4 4228 0029                  		clr.b	$29(a0)
0001ADB8 5528 0025                  		subq.b	#2,$25(a0)
0001ADBC 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001ADC2 6000                       		bra.s	loc_19446
0001ADC4                            ; ===========================================================================
0001ADC4                            
0001ADC4                            loc_19406:
0001ADC4 7001                       		moveq	#1,d0
0001ADC6 4A68 0036                  		tst.w	$36(a0)
0001ADCA 6700                       		beq.s	loc_19410
0001ADCC 7002                       		moveq	#2,d0
0001ADCE                            
0001ADCE                            loc_19410:
0001ADCE 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001ADD4 6700                       		beq.s	loc_19424
0001ADD6 6D00                       		blt.s	loc_1941C
0001ADD8 4440                       		neg.w	d0
0001ADDA                            
0001ADDA                            loc_1941C:
0001ADDA 4A68 0036                  		tst.w	$36(a0)
0001ADDE D168 0038                  		add.w	d0,$38(a0)
0001ADE2                            
0001ADE2                            loc_19424:
0001ADE2 7000                       		moveq	#0,d0
0001ADE4 4A68 0036                  		tst.w	$36(a0)
0001ADE8 6700                       		beq.s	loc_19438
0001ADEA 7002                       		moveq	#2,d0
0001ADEC 0828 0000 003D             		btst	#0,$3D(a0)
0001ADF2 6700                       		beq.s	loc_19438
0001ADF4 4440                       		neg.w	d0
0001ADF6                            
0001ADF6                            loc_19438:
0001ADF6 D068 0038                  		add.w	$38(a0),d0
0001ADFA 3140 000C                  		move.w	d0,$C(a0)
0001ADFE 3168 0030 0008             		move.w	$30(a0),8(a0)
0001AE04                            
0001AE04                            loc_19446:
0001AE04 6000 FDBA                  		bra.w	loc_19202
0001AE08                            
0001AE08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AE08                            
0001AE08                            
0001AE08                            Obj75_FindBlocks:			; XREF: loc_192AE
0001AE08 4268 0036                  		clr.w	$36(a0)
0001AE0C 43F8 D040                  		lea	($FFFFD040).w,a1
0001AE10 703E                       		moveq	#$3E,d0
0001AE12 7276                       		moveq	#$76,d1
0001AE14 1428 0034                  		move.b	$34(a0),d2
0001AE18                            
0001AE18                            Obj75_FindLoop:
0001AE18 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001AE1A 6600                       		bne.s	loc_1946A	; if not, branch
0001AE1C B429 0028                  		cmp.b	$28(a1),d2
0001AE20 6600                       		bne.s	loc_1946A
0001AE22 3149 0036                  		move.w	a1,$36(a0)
0001AE26 6000                       		bra.s	locret_19472
0001AE28                            ; ===========================================================================
0001AE28                            
0001AE28                            loc_1946A:
0001AE28 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001AE2C 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001AE30                            
0001AE30                            locret_19472:
0001AE30 4E75                       		rts	
0001AE32                            ; End of function Obj75_FindBlocks
0001AE32                            
0001AE32                            ; ===========================================================================
0001AE32                            
0001AE32                            loc_19474:				; XREF: Obj75_ShipIndex
0001AE32 5368 003C                  		subq.w	#1,$3C(a0)
0001AE36 6B00                       		bmi.s	loc_1947E
0001AE38 6000 E3F8                  		bra.w	BossDefeated
0001AE3C                            ; ===========================================================================
0001AE3C                            
0001AE3C                            loc_1947E:
0001AE3C 5428 0025                  		addq.b	#2,$25(a0)
0001AE40 4268 0012                  		clr.w	$12(a0)
0001AE44 08E8 0000 0022             		bset	#0,$22(a0)
0001AE4A 08A8 0007 0022             		bclr	#7,$22(a0)
0001AE50 4268 0010                  		clr.w	$10(a0)
0001AE54 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001AE5A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001AE5E 6600                       		bne.s	loc_194A8
0001AE60 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001AE66                            
0001AE66                            loc_194A8:
0001AE66 6000 FD58                  		bra.w	loc_19202
0001AE6A                            ; ===========================================================================
0001AE6A                            
0001AE6A                            loc_194AC:				; XREF: Obj75_ShipIndex
0001AE6A 5268 003C                  		addq.w	#1,$3C(a0)
0001AE6E 6700                       		beq.s	loc_194BC
0001AE70 6A00                       		bpl.s	loc_194C2
0001AE72 0668 0018 0012             		addi.w	#$18,$12(a0)
0001AE78 6000                       		bra.s	loc_194EE
0001AE7A                            ; ===========================================================================
0001AE7A                            
0001AE7A                            loc_194BC:
0001AE7A 4268 0012                  		clr.w	$12(a0)
0001AE7E 6000                       		bra.s	loc_194EE
0001AE80                            ; ===========================================================================
0001AE80                            
0001AE80                            loc_194C2:
0001AE80 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001AE86 6500                       		bcs.s	loc_194DA
0001AE88 6700                       		beq.s	loc_194E0
0001AE8A 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001AE90 6500                       		bcs.s	loc_194EE
0001AE92 5428 0025                  		addq.b	#2,$25(a0)
0001AE96 6000                       		bra.s	loc_194EE
0001AE98                            ; ===========================================================================
0001AE98                            
0001AE98                            loc_194DA:
0001AE98 5168 0012                  		subq.w	#8,$12(a0)
0001AE9C 6000                       		bra.s	loc_194EE
0001AE9E                            ; ===========================================================================
0001AE9E                            
0001AE9E                            loc_194E0:
0001AE9E 4268 0012                  		clr.w	$12(a0)
0001AEA2 303C 0085                  		move.w	#$85,d0
0001AEA6 4EB9 0000 1470             		jsr	(PlaySound).l	; play SYZ music
0001AEAC                            
0001AEAC                            loc_194EE:
0001AEAC 6000 FD02                  		bra.w	loc_191F2
0001AEB0                            ; ===========================================================================
0001AEB0                            
0001AEB0                            loc_194F2:				; XREF: Obj75_ShipIndex
0001AEB0 317C 0400 0010             		move.w	#$400,$10(a0)
0001AEB6 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001AEBC 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
0001AEC2 6400                       		bcc.s	loc_1950C
0001AEC4 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001AEC8 6000                       		bra.s	loc_19512
0001AECA                            ; ===========================================================================
0001AECA                            
0001AECA                            loc_1950C:
0001AECA 4A28 0001                  		tst.b	1(a0)
0001AECE 6A00                       		bpl.s	Obj75_ShipDelete
0001AED0                            
0001AED0                            loc_19512:
0001AED0 6100 E3A2                  		bsr.w	BossMove
0001AED4 6000 FCC6                  		bra.w	loc_191DE
0001AED8                            ; ===========================================================================
0001AED8                            
0001AED8                            Obj75_ShipDelete:
0001AED8 4EF9 0000 E14C             		jmp	DeleteObject
0001AEDE                            ; ===========================================================================
0001AEDE                            
0001AEDE                            Obj75_FaceMain:				; XREF: Obj75_Index
0001AEDE 7201                       		moveq	#1,d1
0001AEE0 2268 0034                  		movea.l	$34(a0),a1
0001AEE4 7000                       		moveq	#0,d0
0001AEE6 1029 0025                  		move.b	$25(a1),d0
0001AEEA 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001AEEE 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001AEF2 1141 001C                  		move.b	d1,$1C(a0)
0001AEF6 1010                       		move.b	(a0),d0
0001AEF8 B011                       		cmp.b	(a1),d0
0001AEFA 6600                       		bne.s	Obj75_FaceDelete
0001AEFC 6000                       		bra.s	loc_195BE
0001AEFE                            ; ===========================================================================
0001AEFE                            
0001AEFE                            Obj75_FaceDelete:
0001AEFE 4EF9 0000 E14C             		jmp	DeleteObject
0001AF04                            ; ===========================================================================
0001AF04 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001AF08 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001AF0C 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001AF10                            ; ===========================================================================
0001AF10                            
0001AF10                            loc_19552:				; XREF: off_19546
0001AF10 720A                       		moveq	#$A,d1
0001AF12 4E75                       		rts	
0001AF14                            ; ===========================================================================
0001AF14                            
0001AF14                            loc_19556:				; XREF: off_19546
0001AF14 7206                       		moveq	#6,d1
0001AF16 4E75                       		rts	
0001AF18                            ; ===========================================================================
0001AF18                            
0001AF18                            loc_1955A:				; XREF: off_19546
0001AF18 7000                       		moveq	#0,d0
0001AF1A 1029 0028                  		move.b	$28(a1),d0
0001AF1E 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001AF22 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001AF26                            ; ===========================================================================
0001AF26 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001AF2A 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001AF2E                            ; ===========================================================================
0001AF2E                            
0001AF2E                            loc_19570:				; XREF: off_19568
0001AF2E 6000                       		bra.s	loc_19574
0001AF30                            ; ===========================================================================
0001AF30                            
0001AF30                            loc_19572:				; XREF: off_19568
0001AF30 7206                       		moveq	#6,d1
0001AF32                            
0001AF32                            loc_19574:				; XREF: off_19546
0001AF32 4A29 0020                  		tst.b	$20(a1)
0001AF36 6600                       		bne.s	loc_1957E
0001AF38 7205                       		moveq	#5,d1
0001AF3A 4E75                       		rts	
0001AF3C                            ; ===========================================================================
0001AF3C                            
0001AF3C                            loc_1957E:
0001AF3C 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001AF42 6500                       		bcs.s	locret_19588
0001AF44 7204                       		moveq	#4,d1
0001AF46                            
0001AF46                            locret_19588:
0001AF46 4E75                       		rts	
0001AF48                            ; ===========================================================================
0001AF48                            
0001AF48                            Obj75_FlameMain:			; XREF: Obj75_Index
0001AF48 117C 0007 001C             		move.b	#7,$1C(a0)
0001AF4E 2268 0034                  		movea.l	$34(a0),a1
0001AF52 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001AF58 6600                       		bne.s	loc_195AA
0001AF5A 117C 000B 001C             		move.b	#$B,$1C(a0)
0001AF60 4A28 0001                  		tst.b	1(a0)
0001AF64 6A00                       		bpl.s	Obj75_FlameDelete
0001AF66 6000                       		bra.s	loc_195B6
0001AF68                            ; ===========================================================================
0001AF68                            
0001AF68                            loc_195AA:
0001AF68 4A69 0010                  		tst.w	$10(a1)
0001AF6C 6700                       		beq.s	loc_195B6
0001AF6E 117C 0008 001C             		move.b	#8,$1C(a0)
0001AF74                            
0001AF74                            loc_195B6:
0001AF74 6000                       		bra.s	loc_195BE
0001AF76                            ; ===========================================================================
0001AF76                            
0001AF76                            Obj75_FlameDelete:
0001AF76 4EF9 0000 E14C             		jmp	DeleteObject
0001AF7C                            ; ===========================================================================
0001AF7C                            
0001AF7C                            loc_195BE:
0001AF7C 43F9 0001 9684             		lea	(Ani_Eggman).l,a1
0001AF82 4EB9 0000 B222             		jsr	AnimateSprite
0001AF88 2268 0034                  		movea.l	$34(a0),a1
0001AF8C 3169 0008 0008             		move.w	8(a1),8(a0)
0001AF92 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AF98                            
0001AF98                            loc_195DA:
0001AF98 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001AF9E 7003                       		moveq	#3,d0
0001AFA0 C028 0022                  		and.b	$22(a0),d0
0001AFA4 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001AFAA 8128 0001                  		or.b	d0,1(a0)
0001AFAE 4EF9 0000 E110             		jmp	DisplaySprite
0001AFB4                            ; ===========================================================================
0001AFB4                            
0001AFB4                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001AFB4 217C 0001 979C 0004        		move.l	#Map_BossItems,4(a0)
0001AFBC 317C 246C 0002             		move.w	#$246C,2(a0)
0001AFC2 117C 0005 001A             		move.b	#5,$1A(a0)
0001AFC8 2268 0034                  		movea.l	$34(a0),a1
0001AFCC 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001AFD2 6600                       		bne.s	loc_1961C
0001AFD4 4A28 0001                  		tst.b	1(a0)
0001AFD8 6A00                       		bpl.s	Obj75_SpikeDelete
0001AFDA                            
0001AFDA                            loc_1961C:
0001AFDA 3169 0008 0008             		move.w	8(a1),8(a0)
0001AFE0 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AFE6 3028 003C                  		move.w	$3C(a0),d0
0001AFEA 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001AFF0 6600                       		bne.s	loc_19652
0001AFF2 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001AFF8 6700                       		beq.s	loc_1964C
0001AFFA 4A29 0028                  		tst.b	$28(a1)
0001AFFE 6600                       		bne.s	loc_19658
0001B000 0C40 0094                  		cmpi.w	#$94,d0
0001B004 6C00                       		bge.s	loc_19658
0001B006 5E40                       		addq.w	#7,d0
0001B008 6000                       		bra.s	loc_19658
0001B00A                            ; ===========================================================================
0001B00A                            
0001B00A                            loc_1964C:
0001B00A 4A69 003C                  		tst.w	$3C(a1)
0001B00E 6A00                       		bpl.s	loc_19658
0001B010                            
0001B010                            loc_19652:
0001B010 4A40                       		tst.w	d0
0001B012 6F00                       		ble.s	loc_19658
0001B014 5B40                       		subq.w	#5,d0
0001B016                            
0001B016                            loc_19658:
0001B016 3140 003C                  		move.w	d0,$3C(a0)
0001B01A E440                       		asr.w	#2,d0
0001B01C D168 000C                  		add.w	d0,$C(a0)
0001B020 117C 0008 0019             		move.b	#8,$19(a0)
0001B026 117C 000C 0016             		move.b	#$C,$16(a0)
0001B02C 4228 0020                  		clr.b	$20(a0)
0001B030 2268 0034                  		movea.l	$34(a0),a1
0001B034 4A29 0020                  		tst.b	$20(a1)
0001B038 6700                       		beq.s	loc_19688
0001B03A 4A29 0029                  		tst.b	$29(a1)
0001B03E 6600                       		bne.s	loc_19688
0001B040 117C 0084 0020             		move.b	#$84,$20(a0)
0001B046                            
0001B046                            loc_19688:
0001B046 6000 FF50                  		bra.w	loc_195DA
0001B04A                            ; ===========================================================================
0001B04A                            
0001B04A                            Obj75_SpikeDelete:
0001B04A 4EF9 0000 E14C             		jmp	DeleteObject
0001B050                            ; ===========================================================================
0001B050                            ; ---------------------------------------------------------------------------
0001B050                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001B050                            ; ---------------------------------------------------------------------------
0001B050                            
0001B050                            Obj76:					; XREF: Obj_Index
0001B050 7000                       		moveq	#0,d0
0001B052 1028 0024                  		move.b	$24(a0),d0
0001B056 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001B05A 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001B05E                            ; ===========================================================================
0001B05E 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001B060 0000                       		dc.w Obj76_Action-Obj76_Index
0001B062 0000                       		dc.w loc_19762-Obj76_Index
0001B064                            ; ===========================================================================
0001B064                            
0001B064                            Obj76_Main:				; XREF: Obj76_Index
0001B064 7800                       		moveq	#0,d4
0001B066 3A3C 2C10                  		move.w	#$2C10,d5
0001B06A 7C09                       		moveq	#9,d6
0001B06C 43D0                       		lea	(a0),a1
0001B06E 6000                       		bra.s	Obj76_MakeBlock
0001B070                            ; ===========================================================================
0001B070                            
0001B070                            Obj76_Loop:
0001B070 4EB9 0000 E5A6             		jsr	SingleObjLoad
0001B076 6600                       		bne.s	Obj76_ExitLoop
0001B078                            
0001B078                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001B078 12BC 0076                  		move.b	#$76,(a1)
0001B07C 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001B084 337C 4000 0002             		move.w	#$4000,2(a1)
0001B08A 137C 0004 0001             		move.b	#4,1(a1)
0001B090 137C 0010 0019             		move.b	#$10,$19(a1)
0001B096 137C 0010 0016             		move.b	#$10,$16(a1)
0001B09C 137C 0003 0018             		move.b	#3,$18(a1)
0001B0A2 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001B0A6 337C 0582 000C             		move.w	#$582,$C(a1)
0001B0AC 3344 0028                  		move.w	d4,$28(a1)
0001B0B0 0644 0101                  		addi.w	#$101,d4
0001B0B4 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001B0B8 5429 0024                  		addq.b	#2,$24(a1)
0001B0BC 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001B0C0                            
0001B0C0                            Obj76_ExitLoop:
0001B0C0 4E75                       		rts	
0001B0C2                            ; ===========================================================================
0001B0C2                            
0001B0C2                            Obj76_Action:				; XREF: Obj76_Index
0001B0C2 1028 0029                  		move.b	$29(a0),d0
0001B0C6 B028 0028                  		cmp.b	$28(a0),d0
0001B0CA 6700                       		beq.s	Obj76_Solid
0001B0CC 4A00                       		tst.b	d0
0001B0CE 6B00                       		bmi.s	loc_19718
0001B0D0                            
0001B0D0                            loc_19712:
0001B0D0 6100 0000                  		bsr.w	Obj76_Break
0001B0D4 6000                       		bra.s	Obj76_Display
0001B0D6                            ; ===========================================================================
0001B0D6                            
0001B0D6                            loc_19718:
0001B0D6 2268 0034                  		movea.l	$34(a0),a1
0001B0DA 4A29 0021                  		tst.b	$21(a1)
0001B0DE 67F0                       		beq.s	loc_19712
0001B0E0 3169 0008 0008             		move.w	8(a1),8(a0)
0001B0E6 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B0EC 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001B0F2 B2C8                       		cmpa.w	a0,a1
0001B0F4 6500                       		bcs.s	Obj76_Display
0001B0F6 3029 0012                  		move.w	$12(a1),d0
0001B0FA 48C0                       		ext.l	d0
0001B0FC E080                       		asr.l	#8,d0
0001B0FE D168 000C                  		add.w	d0,$C(a0)
0001B102 6000                       		bra.s	Obj76_Display
0001B104                            ; ===========================================================================
0001B104                            
0001B104                            Obj76_Solid:				; XREF: Obj76_Action
0001B104 323C 001B                  		move.w	#$1B,d1
0001B108 343C 0010                  		move.w	#$10,d2
0001B10C 363C 0011                  		move.w	#$11,d3
0001B110 3828 0008                  		move.w	8(a0),d4
0001B114 4EB9 0001 04FA             		jsr	SolidObject
0001B11A                            
0001B11A                            Obj76_Display:				; XREF: Obj76_Action
0001B11A 4EF9 0000 E110             		jmp	DisplaySprite
0001B120                            ; ===========================================================================
0001B120                            
0001B120                            loc_19762:				; XREF: Obj76_Index
0001B120 4A28 0001                  		tst.b	1(a0)
0001B124 6A00                       		bpl.s	Obj76_Delete
0001B126 4EB9 0000 E0BE             		jsr	ObjectFall
0001B12C 4EF9 0000 E110             		jmp	DisplaySprite
0001B132                            ; ===========================================================================
0001B132                            
0001B132                            Obj76_Delete:
0001B132 4EF9 0000 E14C             		jmp	DeleteObject
0001B138                            
0001B138                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B138                            
0001B138                            
0001B138                            Obj76_Break:				; XREF: Obj76_Action
0001B138 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001B13C 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001B140 7801                       		moveq	#1,d4
0001B142 7203                       		moveq	#3,d1
0001B144 7438                       		moveq	#$38,d2
0001B146 5428 0024                  		addq.b	#2,$24(a0)
0001B14A 117C 0008 0019             		move.b	#8,$19(a0)
0001B150 117C 0008 0016             		move.b	#8,$16(a0)
0001B156 43D0                       		lea	(a0),a1
0001B158 6000                       		bra.s	Obj76_MakeFrag
0001B15A                            ; ===========================================================================
0001B15A                            
0001B15A                            Obj76_LoopFrag:
0001B15A 4EB9 0000 E5BC             		jsr	SingleObjLoad2
0001B160 6600                       		bne.s	loc_197D4
0001B162                            
0001B162                            Obj76_MakeFrag:
0001B162 45D0                       		lea	(a0),a2
0001B164 47D1                       		lea	(a1),a3
0001B166 7603                       		moveq	#3,d3
0001B168                            
0001B168                            loc_197AA:
0001B168 26DA                       		move.l	(a2)+,(a3)+
0001B16A 26DA                       		move.l	(a2)+,(a3)+
0001B16C 26DA                       		move.l	(a2)+,(a3)+
0001B16E 26DA                       		move.l	(a2)+,(a3)+
0001B170 51CB FFF6                  		dbf	d3,loc_197AA
0001B174                            
0001B174 335C 0010                  		move.w	(a4)+,$10(a1)
0001B178 335C 0012                  		move.w	(a4)+,$12(a1)
0001B17C 361D                       		move.w	(a5)+,d3
0001B17E D769 0008                  		add.w	d3,8(a1)
0001B182 361D                       		move.w	(a5)+,d3
0001B184 D769 000C                  		add.w	d3,$C(a1)
0001B188 1344 001A                  		move.b	d4,$1A(a1)
0001B18C 5244                       		addq.w	#1,d4
0001B18E 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001B192                            
0001B192                            loc_197D4:
0001B192 303C 00CB                  		move.w	#$CB,d0
0001B196 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play smashing sound
0001B19C                            ; End of function Obj76_Break
0001B19C                            
0001B19C                            ; ===========================================================================
0001B19C FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001B1A0 0180 FE00                  		dc.w $180, $FE00
0001B1A4 FF00 FF00                  		dc.w $FF00, $FF00
0001B1A8 0100 FF00                  		dc.w $100, $FF00
0001B1AC FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001B1B0 0010 0000                  		dc.w $10, 0
0001B1B4 0000 0010                  		dc.w 0,	$10
0001B1B8 0010 0010                  		dc.w $10, $10
0001B1BC                            ; ---------------------------------------------------------------------------
0001B1BC                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001B1BC                            ; ---------------------------------------------------------------------------
0001B1BC                            Map_obj76:
0001B1BC                            	include "_maps\obj76.asm"
0001B1BC                            ; ---------------------------------------------------------------------------
0001B1BC                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001B1BC                            ; ---------------------------------------------------------------------------
0001B1BC 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001B1C0 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001B1C4 0000                       		dc.w byte_19826-Map_obj76
0001B1C6 02                         byte_19808:	dc.b 2
0001B1C7 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001B1CC 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001B1D1 00                         		dc.b 0
0001B1D2 01                         byte_19814:	dc.b 1
0001B1D3 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001B1D8 01                         byte_1981A:	dc.b 1
0001B1D9 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001B1DE 01                         byte_19820:	dc.b 1
0001B1DF F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001B1E4 01                         byte_19826:	dc.b 1
0001B1E5 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001B1EA                            		even
0001B1EA                            		even
0001B1EA                            
0001B1EA                            ; ===========================================================================
0001B1EA                            
0001B1EA                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001B1EA 4EF9 0000 E14C             		jmp	DeleteObject
0001B1F0                            ; ===========================================================================
0001B1F0                            ; ---------------------------------------------------------------------------
0001B1F0                            ; Object 82 - Eggman (SBZ2)
0001B1F0                            ; ---------------------------------------------------------------------------
0001B1F0                            
0001B1F0                            Obj82:					; XREF: Obj_Index
0001B1F0 7000                       		moveq	#0,d0
0001B1F2 1028 0024                  		move.b	$24(a0),d0
0001B1F6 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001B1FA 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001B1FE                            ; ===========================================================================
0001B1FE 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001B200 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001B202 0000                       		dc.w Obj82_Switch-Obj82_Index
0001B204                            
0001B204 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001B207 0400 03                    		dc.b 4,	0, 3
0001B20A                            ; ===========================================================================
0001B20A                            
0001B20A                            Obj82_Main:				; XREF: Obj82_Index
0001B20A 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001B20E 317C 2160 0008             		move.w	#$2160,8(a0)
0001B214 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001B21A 117C 000F 0020             		move.b	#$F,$20(a0)
0001B220 117C 0010 0021             		move.b	#$10,$21(a0)
0001B226 08A8 0000 0022             		bclr	#0,$22(a0)
0001B22C 4228 0025                  		clr.b	$25(a0)
0001B230 115A 0024                  		move.b	(a2)+,$24(a0)
0001B234 115A 001C                  		move.b	(a2)+,$1C(a0)
0001B238 115A 0018                  		move.b	(a2)+,$18(a0)
0001B23C 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001B244 317C 0400 0002             		move.w	#$400,2(a0)
0001B24A 117C 0004 0001             		move.b	#4,1(a0)
0001B250 08E8 0007 0001             		bset	#7,1(a0)
0001B256 117C 0020 0019             		move.b	#$20,$19(a0)
0001B25C 4EB9 0000 E5BC             		jsr	SingleObjLoad2
0001B262 6600                       		bne.s	Obj82_Eggman
0001B264 2348 0034                  		move.l	a0,$34(a1)
0001B268 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001B26C 337C 2130 0008             		move.w	#$2130,8(a1)
0001B272 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001B278 4228 0025                  		clr.b	$25(a0)
0001B27C 135A 0024                  		move.b	(a2)+,$24(a1)
0001B280 135A 001C                  		move.b	(a2)+,$1C(a1)
0001B284 135A 0018                  		move.b	(a2)+,$18(a1)
0001B288 237C 0000 C9AA 0004        		move.l	#Map_obj32,4(a1)
0001B290 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001B296 137C 0004 0001             		move.b	#4,1(a1)
0001B29C 08E9 0007 0001             		bset	#7,1(a1)
0001B2A2 137C 0010 0019             		move.b	#$10,$19(a1)
0001B2A8 137C 0000 001A             		move.b	#0,$1A(a1)
0001B2AE                            
0001B2AE                            Obj82_Eggman:				; XREF: Obj82_Index
0001B2AE 7000                       		moveq	#0,d0
0001B2B0 1028 0025                  		move.b	$25(a0),d0
0001B2B4 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001B2B8 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001B2BC 43FA 0000                  		lea	Ani_obj82(pc),a1
0001B2C0 4EB9 0000 B222             		jsr	AnimateSprite
0001B2C6 4EF9 0000 E110             		jmp	DisplaySprite
0001B2CC                            ; ===========================================================================
0001B2CC 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001B2CE 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001B2D0 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001B2D2 0000                       		dc.w loc_19934-Obj82_EggIndex
0001B2D4                            ; ===========================================================================
0001B2D4                            
0001B2D4                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001B2D4 3028 0008                  		move.w	8(a0),d0
0001B2D8 9078 D008                  		sub.w	($FFFFD008).w,d0
0001B2DC 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001B2E0 6400                       		bcc.s	loc_19934	; if not, branch
0001B2E2 5428 0025                  		addq.b	#2,$25(a0)
0001B2E6 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001B2EC 117C 0001 001C             		move.b	#1,$1C(a0)
0001B2F2                            
0001B2F2                            loc_19934:				; XREF: Obj82_EggIndex
0001B2F2 4EF9 0000 E0EA             		jmp	SpeedToPos
0001B2F8                            ; ===========================================================================
0001B2F8                            
0001B2F8                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001B2F8 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001B2FC 6600                       		bne.s	loc_19954	; if time remains, branch
0001B2FE 5428 0025                  		addq.b	#2,$25(a0)
0001B302 117C 0002 001C             		move.b	#2,$1C(a0)
0001B308 5868 000C                  		addq.w	#4,$C(a0)
0001B30C 317C 000F 003C             		move.w	#15,$3C(a0)
0001B312                            
0001B312                            loc_19954:
0001B312 60DE                       		bra.s	loc_19934
0001B314                            ; ===========================================================================
0001B314                            
0001B314                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001B314 5368 003C                  		subq.w	#1,$3C(a0)
0001B318 6E00                       		bgt.s	loc_199D0
0001B31A 6600                       		bne.s	loc_1996A
0001B31C 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001B322 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001B328                            
0001B328                            loc_1996A:
0001B328 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001B32E 6E00                       		bgt.s	loc_19976
0001B330 4268 0010                  		clr.w	$10(a0)
0001B334                            
0001B334                            loc_19976:
0001B334 0668 0024 0012             		addi.w	#$24,$12(a0)
0001B33A 4A68 0012                  		tst.w	$12(a0)
0001B33E 6B00                       		bmi.s	Obj82_FindBlocks
0001B340 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001B346 6500                       		bcs.s	Obj82_FindBlocks
0001B348 317C 5357 0028             		move.w	#$5357,$28(a0)
0001B34E 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001B354 6500                       		bcs.s	Obj82_FindBlocks
0001B356 317C 059B 000C             		move.w	#$59B,$C(a0)
0001B35C 4268 0012                  		clr.w	$12(a0)
0001B360                            
0001B360                            Obj82_FindBlocks:
0001B360 3028 0010                  		move.w	$10(a0),d0
0001B364 8068 0012                  		or.w	$12(a0),d0
0001B368 6600                       		bne.s	loc_199D0
0001B36A 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001B36E 703E                       		moveq	#$3E,d0
0001B370 7240                       		moveq	#$40,d1
0001B372                            
0001B372                            Obj82_FindLoop:	
0001B372 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001B374 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001B378 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001B37C                            
0001B37C 6600                       		bne.s	loc_199D0
0001B37E 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001B384 5428 0025                  		addq.b	#2,$25(a0)
0001B388 117C 0001 001C             		move.b	#1,$1C(a0)
0001B38E                            
0001B38E                            loc_199D0:
0001B38E 6000 FF62                  		bra.w	loc_19934
0001B392                            ; ===========================================================================
0001B392                            
0001B392                            Obj82_Switch:				; XREF: Obj82_Index
0001B392 7000                       		moveq	#0,d0
0001B394 1028 0025                  		move.b	$25(a0),d0
0001B398 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001B39C 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001B3A0                            ; ===========================================================================
0001B3A0 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001B3A2 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001B3A4                            ; ===========================================================================
0001B3A4                            
0001B3A4                            loc_199E6:				; XREF: Obj82_SwIndex
0001B3A4 2268 0034                  		movea.l	$34(a0),a1
0001B3A8 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001B3AE 6600                       		bne.s	Obj82_SwDisplay
0001B3B0 117C 0001 001A             		move.b	#1,$1A(a0)
0001B3B6 5428 0025                  		addq.b	#2,$25(a0)
0001B3BA                            
0001B3BA                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001B3BA 4EF9 0000 E110             		jmp	DisplaySprite
0001B3C0                            ; ===========================================================================
0001B3C0                            Ani_obj82:
0001B3C0                            	include "_anim\obj82.asm"
0001B3C0                            ; ---------------------------------------------------------------------------
0001B3C0                            ; Animation script - Eggman (SBZ2)
0001B3C0                            ; ---------------------------------------------------------------------------
0001B3C0 0000                       		dc.w byte_19A10-Ani_obj82
0001B3C2 0000                       		dc.w byte_19A14-Ani_obj82
0001B3C4 0000                       		dc.w byte_19A18-Ani_obj82
0001B3C6 0000                       		dc.w byte_19A20-Ani_obj82
0001B3C8 0000                       		dc.w byte_19A24-Ani_obj82
0001B3CA 0000                       		dc.w byte_19A2A-Ani_obj82
0001B3CC 0000                       		dc.w byte_19A30-Ani_obj82
0001B3CE 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001B3D2 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001B3D6 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001B3DE 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001B3E2 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001B3E8 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001B3EE 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001B3F2                            		even
0001B3F2                            		even
0001B3F2                            
0001B3F2                            ; ---------------------------------------------------------------------------
0001B3F2                            ; Sprite mappings - Eggman (SBZ2)
0001B3F2                            ; ---------------------------------------------------------------------------
0001B3F2                            Map_obj82:
0001B3F2                            	include "_maps\obj82.asm"
0001B3F2                            ; ---------------------------------------------------------------------------
0001B3F2                            ; Sprite mappings - Eggman (SBZ2)
0001B3F2                            ; ---------------------------------------------------------------------------
0001B3F2 0000 0000                  		dc.w byte_19A4A-Map_obj82, byte_19A5A-Map_obj82
0001B3F6 0000 0000                  		dc.w byte_19A70-Map_obj82, byte_19A86-Map_obj82
0001B3FA 0000 0000                  		dc.w byte_19A9C-Map_obj82, byte_19AB2-Map_obj82
0001B3FE 0000 0000                  		dc.w byte_19AC8-Map_obj82, byte_19AEC-Map_obj82
0001B402 0000 0000                  		dc.w byte_19B06-Map_obj82, byte_19B26-Map_obj82
0001B406 0000                       		dc.w byte_19B4F-Map_obj82
0001B408 03                         byte_19A4A:	dc.b 3
0001B409 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001B40E E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B413 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B418 04                         byte_19A5A:	dc.b 4
0001B419 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
0001B41E E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B423 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B428 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001B42D 00                         		dc.b 0
0001B42E 04                         byte_19A70:	dc.b 4
0001B42F E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
0001B434 E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
0001B439 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
0001B43E FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
0001B443 00                         		dc.b 0
0001B444 04                         byte_19A86:	dc.b 4
0001B445 F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
0001B44A F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
0001B44F 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
0001B454 EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
0001B459 00                         		dc.b 0
0001B45A 04                         byte_19A9C:	dc.b 4
0001B45B F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001B460 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001B465 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
0001B46A E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B46F 00                         		dc.b 0
0001B470 04                         byte_19AB2:	dc.b 4
0001B471 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001B476 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001B47B E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B480 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B485 00                         		dc.b 0
0001B486 07                         byte_19AC8:	dc.b 7
0001B487 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001B48C E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001B491 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001B496 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001B49B F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001B4A0 F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
0001B4A5 F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
0001B4AA 05                         byte_19AEC:	dc.b 5
0001B4AB F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001B4B0 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001B4B5 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001B4BA 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001B4BF E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B4C4 06                         byte_19B06:	dc.b 6
0001B4C5 EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
0001B4CA EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
0001B4CF 0905 0844 00               		dc.b 9,	5, 8, $44, 0
0001B4D4 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
0001B4D9 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
0001B4DE E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0001B4E3 00                         		dc.b 0
0001B4E4 08                         byte_19B26:	dc.b 8
0001B4E5 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001B4EA E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001B4EF E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B4F4 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B4F9 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
0001B4FE F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
0001B503 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
0001B508 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
0001B50D 03                         byte_19B4F:	dc.b 3
0001B50E EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4
0001B513 F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
0001B518 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
0001B51E 00                         		even
0001B51E 00                         		even
0001B51E                            
0001B51E                            ; ===========================================================================
0001B51E                            ; ---------------------------------------------------------------------------
0001B51E                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001B51E                            ; ---------------------------------------------------------------------------
0001B51E                            
0001B51E                            Obj83:					; XREF: Obj_Index
0001B51E 7000                       		moveq	#0,d0
0001B520 1028 0024                  		move.b	$24(a0),d0
0001B524 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001B528 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001B52C                            ; ===========================================================================
0001B52C 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001B52E 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001B530 0000                       		dc.w loc_19C36-Obj83_Index
0001B532 0000                       		dc.w loc_19C62-Obj83_Index
0001B534 0000                       		dc.w loc_19C72-Obj83_Index
0001B536 0000                       		dc.w loc_19C80-Obj83_Index
0001B538                            ; ===========================================================================
0001B538                            
0001B538                            Obj83_Main:				; XREF: Obj83_Index
0001B538 317C 2080 0008             		move.w	#$2080,8(a0)
0001B53E 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001B544 117C 0080 0019             		move.b	#$80,$19(a0)
0001B54A 117C 0010 0016             		move.b	#$10,$16(a0)
0001B550 117C 0004 0001             		move.b	#4,1(a0)
0001B556 08E8 0007 0001             		bset	#7,1(a0)
0001B55C 7800                       		moveq	#0,d4
0001B55E 3A3C 2010                  		move.w	#$2010,d5
0001B562 7C07                       		moveq	#7,d6
0001B564 45E8 0030                  		lea	$30(a0),a2
0001B568                            
0001B568                            Obj83_MakeBlock:
0001B568 4EB9 0000 E5A6             		jsr	SingleObjLoad
0001B56E 6600                       		bne.s	Obj83_ExitMake
0001B570 34C9                       		move.w	a1,(a2)+
0001B572 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001B576 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001B57E 337C 4518 0002             		move.w	#$4518,2(a1)
0001B584 137C 0004 0001             		move.b	#4,1(a1)
0001B58A 137C 0010 0019             		move.b	#$10,$19(a1)
0001B590 137C 0010 0016             		move.b	#$10,$16(a1)
0001B596 137C 0003 0018             		move.b	#3,$18(a1)
0001B59C 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001B5A0 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001B5A6 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001B5AA 137C 0008 0024             		move.b	#8,$24(a1)
0001B5B0 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001B5B4                            
0001B5B4                            Obj83_ExitMake:
0001B5B4 5428 0024                  		addq.b	#2,$24(a0)
0001B5B8 4E75                       		rts	
0001B5BA                            ; ===========================================================================
0001B5BA                            
0001B5BA                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001B5BA 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001B5C0 6600                       		bne.s	Obj83_Solid	; if not, branch
0001B5C2 4228 001A                  		clr.b	$1A(a0)
0001B5C6 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001B5CA                            
0001B5CA                            Obj83_Solid:
0001B5CA 7000                       		moveq	#0,d0
0001B5CC 1028 001A                  		move.b	$1A(a0),d0
0001B5D0 4400                       		neg.b	d0
0001B5D2 4880                       		ext.w	d0
0001B5D4 5040                       		addq.w	#8,d0
0001B5D6 E940                       		asl.w	#4,d0
0001B5D8 383C 2100                  		move.w	#$2100,d4
0001B5DC 9840                       		sub.w	d0,d4
0001B5DE 1140 0019                  		move.b	d0,$19(a0)
0001B5E2 3144 0008                  		move.w	d4,8(a0)
0001B5E6 720B                       		moveq	#$B,d1
0001B5E8 D240                       		add.w	d0,d1
0001B5EA 7410                       		moveq	#$10,d2
0001B5EC 7611                       		moveq	#$11,d3
0001B5EE 4EF9 0001 04FA             		jmp	SolidObject
0001B5F4                            ; ===========================================================================
0001B5F4                            
0001B5F4                            loc_19C36:				; XREF: Obj83_Index
0001B5F4 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001B5FA 6400                       		bcc.s	Obj83_Solid2
0001B5FC 70FF                       		moveq	#-1,d0
0001B5FE 1028 001A                  		move.b	$1A(a0),d0
0001B602 4880                       		ext.w	d0
0001B604 D040                       		add.w	d0,d0
0001B606 3030 0030                  		move.w	$30(a0,d0.w),d0
0001B60A 2240                       		movea.l	d0,a1
0001B60C 337C 474F 0028             		move.w	#$474F,$28(a1)
0001B612 5228 001A                  		addq.b	#1,$1A(a0)
0001B616 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001B61C 6700                       		beq.s	loc_19C62
0001B61E                            
0001B61E                            Obj83_Solid2:
0001B61E 60AA                       		bra.s	Obj83_Solid
0001B620                            ; ===========================================================================
0001B620                            
0001B620                            loc_19C62:				; XREF: Obj83_Index
0001B620 08A8 0003 0022             		bclr	#3,$22(a0)
0001B626 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B62C 6000 FBBC                  		bra.w	loc_1982C
0001B630                            ; ===========================================================================
0001B630                            
0001B630                            loc_19C72:				; XREF: Obj83_Index
0001B630 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001B636 6700                       		beq.s	Obj83_Break	; if yes, branch
0001B638 4EF9 0000 E110             		jmp	DisplaySprite
0001B63E                            ; ===========================================================================
0001B63E                            
0001B63E                            loc_19C80:				; XREF: Obj83_Index
0001B63E 4A28 0001                  		tst.b	1(a0)
0001B642 6A00 FBA6                  		bpl.w	loc_1982C
0001B646 4EB9 0000 E0BE             		jsr	ObjectFall
0001B64C 4EF9 0000 E110             		jmp	DisplaySprite
0001B652                            ; ===========================================================================
0001B652                            
0001B652                            Obj83_Break:				; XREF: loc_19C72
0001B652 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001B656 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001B65A 7801                       		moveq	#1,d4
0001B65C 7203                       		moveq	#3,d1
0001B65E 7438                       		moveq	#$38,d2
0001B660 5428 0024                  		addq.b	#2,$24(a0)
0001B664 117C 0008 0019             		move.b	#8,$19(a0)
0001B66A 117C 0008 0016             		move.b	#8,$16(a0)
0001B670 43D0                       		lea	(a0),a1
0001B672 6000                       		bra.s	Obj83_MakeFrag
0001B674                            ; ===========================================================================
0001B674                            
0001B674                            Obj83_LoopFrag:
0001B674 4EB9 0000 E5BC             		jsr	SingleObjLoad2
0001B67A 6600                       		bne.s	Obj83_BreakSnd
0001B67C                            
0001B67C                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001B67C 45D0                       		lea	(a0),a2
0001B67E 47D1                       		lea	(a1),a3
0001B680 7603                       		moveq	#3,d3
0001B682                            
0001B682                            loc_19CC4:
0001B682 26DA                       		move.l	(a2)+,(a3)+
0001B684 26DA                       		move.l	(a2)+,(a3)+
0001B686 26DA                       		move.l	(a2)+,(a3)+
0001B688 26DA                       		move.l	(a2)+,(a3)+
0001B68A 51CB FFF6                  		dbf	d3,loc_19CC4
0001B68E                            
0001B68E 335C 0012                  		move.w	(a4)+,$12(a1)
0001B692 361D                       		move.w	(a5)+,d3
0001B694 D769 0008                  		add.w	d3,8(a1)
0001B698 361D                       		move.w	(a5)+,d3
0001B69A D769 000C                  		add.w	d3,$C(a1)
0001B69E 1344 001A                  		move.b	d4,$1A(a1)
0001B6A2 5244                       		addq.w	#1,d4
0001B6A4 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001B6A8                            
0001B6A8                            Obj83_BreakSnd:
0001B6A8 303C 00CB                  		move.w	#$CB,d0
0001B6AC 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play smashing sound
0001B6B2 4EF9 0000 E110             		jmp	DisplaySprite
0001B6B8                            ; ===========================================================================
0001B6B8 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001B6BC 0120 00C0                  		dc.w $120, $C0
0001B6C0 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001B6C4 0010 0000                  		dc.w $10, 0
0001B6C8 0000 0010                  		dc.w 0,	$10
0001B6CC 0010 0010                  		dc.w $10, $10
0001B6D0                            ; ---------------------------------------------------------------------------
0001B6D0                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001B6D0                            ; ---------------------------------------------------------------------------
0001B6D0                            Map_obj83:
0001B6D0                            	include "_maps\obj83.asm"
0001B6D0                            ; ---------------------------------------------------------------------------
0001B6D0                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001B6D0                            ; ---------------------------------------------------------------------------
0001B6D0 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001B6D4 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001B6D8 0000                       		dc.w byte_19D46-Map_obj83
0001B6DA 01                         byte_19D1C:	dc.b 1
0001B6DB F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001B6E0 02                         byte_19D22:	dc.b 2
0001B6E1 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001B6E6 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001B6EB 00                         		dc.b 0
0001B6EC 02                         byte_19D2E:	dc.b 2
0001B6ED F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001B6F2 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001B6F7 00                         		dc.b 0
0001B6F8 02                         byte_19D3A:	dc.b 2
0001B6F9 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001B6FE F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001B703 00                         		dc.b 0
0001B704 02                         byte_19D46:	dc.b 2
0001B705 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001B70A F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001B710 00                         		even
0001B710 00                         		even
0001B710                            
0001B710                            ; ===========================================================================
0001B710                            ; ---------------------------------------------------------------------------
0001B710                            ; Object 85 - Eggman (FZ)
0001B710                            ; ---------------------------------------------------------------------------
0001B710                            
0001B710                            Obj85_Delete:
0001B710 4EF9 0000 E14C             		jmp	DeleteObject
0001B716                            ; ===========================================================================
0001B716                            
0001B716                            Obj85:					; XREF: Obj_Index
0001B716 7000                       		moveq	#0,d0
0001B718 1028 0024                  		move.b	$24(a0),d0
0001B71C 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001B720 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001B724                            ; ===========================================================================
0001B724 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001B726 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001B728 0000                       		dc.w loc_1A38E-Obj85_Index
0001B72A 0000                       		dc.w loc_1A346-Obj85_Index
0001B72C 0000                       		dc.w loc_1A2C6-Obj85_Index
0001B72E 0000                       		dc.w loc_1A3AC-Obj85_Index
0001B730 0000                       		dc.w loc_1A264-Obj85_Index
0001B732                            
0001B732 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001B738 0001 B3F2                  		dc.l Map_obj82		; mappings pointer
0001B73C 25B0 0590 0300             		dc.w $25B0, $590, $300
0001B742 0000 0000                  		dc.l Map_obj84
0001B746 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001B74C 0000 0000                  		dc.l Map_FZBoss
0001B750 26E0 0596 0470             		dc.w $26E0, $596, $470
0001B756 0001 B3F2                  		dc.l Map_obj82
0001B75A 26E0 0596 0400             		dc.w $26E0, $596, $400
0001B760 0001 96D4                  		dc.l Map_Eggman
0001B764 26E0 0596 0400             		dc.w $26E0, $596, $400
0001B76A 0001 96D4                  		dc.l Map_Eggman
0001B76E                            
0001B76E 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001B773 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001B778 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001B77D 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001B782 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001B787 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001B78C                            ; ===========================================================================
0001B78C                            
0001B78C                            Obj85_Main:				; XREF: Obj85_Index
0001B78C 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001B790 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001B794 2248                       		movea.l	a0,a1
0001B796 7205                       		moveq	#5,d1
0001B798 6000                       		bra.s	Obj85_LoadBoss
0001B79A                            ; ===========================================================================
0001B79A                            
0001B79A                            Obj85_Loop:
0001B79A 4EB9 0000 E5BC             		jsr	SingleObjLoad2
0001B7A0 6600                       		bne.s	loc_19E20
0001B7A2                            
0001B7A2                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001B7A2 12BC 0085                  		move.b	#$85,(a1)
0001B7A6 335A 0008                  		move.w	(a2)+,8(a1)
0001B7AA 335A 000C                  		move.w	(a2)+,$C(a1)
0001B7AE 335A 0002                  		move.w	(a2)+,2(a1)
0001B7B2 235A 0004                  		move.l	(a2)+,4(a1)
0001B7B6 135B 0024                  		move.b	(a3)+,$24(a1)
0001B7BA 135B 001C                  		move.b	(a3)+,$1C(a1)
0001B7BE 135B 0018                  		move.b	(a3)+,$18(a1)
0001B7C2 135B 0017                  		move.b	(a3)+,$17(a1)
0001B7C6 135B 0016                  		move.b	(a3)+,$16(a1)
0001B7CA 137C 0004 0001             		move.b	#4,1(a1)
0001B7D0 08E8 0007 0001             		bset	#7,1(a0)
0001B7D6 2348 0034                  		move.l	a0,$34(a1)
0001B7DA 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001B7DE                            
0001B7DE                            loc_19E20:
0001B7DE 45E8 0036                  		lea	$36(a0),a2
0001B7E2 4EB9 0000 E5A6             		jsr	SingleObjLoad
0001B7E8 6600                       		bne.s	loc_19E5A
0001B7EA 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001B7EE 3489                       		move.w	a1,(a2)
0001B7F0 2348 0034                  		move.l	a0,$34(a1)
0001B7F4 45E8 0038                  		lea	$38(a0),a2
0001B7F8 7400                       		moveq	#0,d2
0001B7FA 7203                       		moveq	#3,d1
0001B7FC                            
0001B7FC                            loc_19E3E:
0001B7FC 4EB9 0000 E5BC             		jsr	SingleObjLoad2
0001B802 6600                       		bne.s	loc_19E5A
0001B804 34C9                       		move.w	a1,(a2)+
0001B806 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001B80A 2348 0034                  		move.l	a0,$34(a1)
0001B80E 1342 0028                  		move.b	d2,$28(a1)
0001B812 5442                       		addq.w	#2,d2
0001B814 51C9 FFE6                  		dbf	d1,loc_19E3E
0001B818                            
0001B818                            loc_19E5A:
0001B818 317C 0000 0034             		move.w	#0,$34(a0)
0001B81E 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001B824 317C FFFF 0030             		move.w	#-1,$30(a0)
0001B82A                            
0001B82A                            Obj85_Eggman:				; XREF: Obj85_Index
0001B82A 7000                       		moveq	#0,d0
0001B82C 1028 0034                  		move.b	$34(a0),d0
0001B830 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001B834 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001B838 4EF9 0000 E110             		jmp	DisplaySprite
0001B83E                            ; ===========================================================================
0001B83E 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001B842 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001B846 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001B84A 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001B84E                            ; ===========================================================================
0001B84E                            
0001B84E                            loc_19E90:				; XREF: off_19E80
0001B84E 4AB8 F680                  		tst.l	($FFFFF680).w
0001B852 6600                       		bne.s	loc_19EA2
0001B854 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001B85A 6500                       		bcs.s	loc_19EA2
0001B85C 5428 0034                  		addq.b	#2,$34(a0)
0001B860                            
0001B860                            loc_19EA2:
0001B860 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001B864 4E75                       		rts	
0001B866                            ; ===========================================================================
0001B866                            
0001B866                            loc_19EA8:				; XREF: off_19E80
0001B866 4A68 0030                  		tst.w	$30(a0)
0001B86A 6A00                       		bpl.s	loc_19F10
0001B86C 4268 0030                  		clr.w	$30(a0)
0001B870 4EB9 0000 33AE             		jsr	(RandomNumber).l
0001B876 0240 000C                  		andi.w	#$C,d0
0001B87A 3200                       		move.w	d0,d1
0001B87C 5441                       		addq.w	#2,d1
0001B87E 4A80                       		tst.l	d0
0001B880 6A00                       		bpl.s	loc_19EC6
0001B882 C340                       		exg	d1,d0
0001B884                            
0001B884                            loc_19EC6:
0001B884 43FA 0000                  		lea	word_19FD6(pc),a1
0001B888 3031 0000                  		move.w	(a1,d0.w),d0
0001B88C 3231 1000                  		move.w	(a1,d1.w),d1
0001B890 3140 0030                  		move.w	d0,$30(a0)
0001B894 74FF                       		moveq	#-1,d2
0001B896 3430 0038                  		move.w	$38(a0,d0.w),d2
0001B89A 2242                       		movea.l	d2,a1
0001B89C 137C 00FF 0029             		move.b	#-1,$29(a1)
0001B8A2 337C FFFF 0030             		move.w	#-1,$30(a1)
0001B8A8 3430 1038                  		move.w	$38(a0,d1.w),d2
0001B8AC 2242                       		movea.l	d2,a1
0001B8AE 137C 0001 0029             		move.b	#1,$29(a1)
0001B8B4 337C 0000 0030             		move.w	#0,$30(a1)
0001B8BA 317C 0001 0032             		move.w	#1,$32(a0)
0001B8C0 4228 0035                  		clr.b	$35(a0)
0001B8C4 303C 00B7                  		move.w	#$B7,d0
0001B8C8 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001B8CE                            
0001B8CE                            loc_19F10:
0001B8CE 4A68 0032                  		tst.w	$32(a0)
0001B8D2 6B00 0000                  		bmi.w	loc_19FA6
0001B8D6 08A8 0000 0022             		bclr	#0,$22(a0)
0001B8DC 3038 D008                  		move.w	($FFFFD008).w,d0
0001B8E0 9068 0008                  		sub.w	8(a0),d0
0001B8E4 6500                       		bcs.s	loc_19F2E
0001B8E6 08E8 0000 0022             		bset	#0,$22(a0)
0001B8EC                            
0001B8EC                            loc_19F2E:
0001B8EC 323C 002B                  		move.w	#$2B,d1
0001B8F0 343C 0014                  		move.w	#$14,d2
0001B8F4 363C 0014                  		move.w	#$14,d3
0001B8F8 3828 0008                  		move.w	8(a0),d4
0001B8FC 4EB9 0001 04FA             		jsr	SolidObject
0001B902 4A44                       		tst.w	d4
0001B904 6E00                       		bgt.s	loc_19F50
0001B906                            
0001B906                            loc_19F48:
0001B906 4A28 0035                  		tst.b	$35(a0)
0001B90A 6600                       		bne.s	loc_19F88
0001B90C 6000                       		bra.s	loc_19F96
0001B90E                            ; ===========================================================================
0001B90E                            
0001B90E                            loc_19F50:
0001B90E 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001B912 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001B918 66EC                       		bne.s	loc_19F48
0001B91A 303C 0300                  		move.w	#$300,d0
0001B91E 0828 0000 0022             		btst	#0,$22(a0)
0001B924 6600                       		bne.s	loc_19F6A
0001B926 4440                       		neg.w	d0
0001B928                            
0001B928                            loc_19F6A:
0001B928 31C0 D010                  		move.w	d0,($FFFFD010).w
0001B92C 4A28 0035                  		tst.b	$35(a0)
0001B930 6600                       		bne.s	loc_19F88
0001B932 5328 0021                  		subq.b	#1,$21(a0)
0001B936 117C 0064 0035             		move.b	#$64,$35(a0)
0001B93C 303C 00AC                  		move.w	#$AC,d0
0001B940 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001B946                            
0001B946                            loc_19F88:
0001B946 5328 0035                  		subq.b	#1,$35(a0)
0001B94A 6700                       		beq.s	loc_19F96
0001B94C 117C 0003 001C             		move.b	#3,$1C(a0)
0001B952 6000                       		bra.s	loc_19F9C
0001B954                            ; ===========================================================================
0001B954                            
0001B954                            loc_19F96:
0001B954 117C 0001 001C             		move.b	#1,$1C(a0)
0001B95A                            
0001B95A                            loc_19F9C:
0001B95A 43FA FA64                  		lea	Ani_obj82(pc),a1
0001B95E 4EF9 0000 B222             		jmp	AnimateSprite
0001B964                            ; ===========================================================================
0001B964                            
0001B964                            loc_19FA6:
0001B964 4A28 0021                  		tst.b	$21(a0)
0001B968 6700                       		beq.s	loc_19FBC
0001B96A 5428 0034                  		addq.b	#2,$34(a0)
0001B96E 317C FFFF 0030             		move.w	#-1,$30(a0)
0001B974 4268 0032                  		clr.w	$32(a0)
0001B978 4E75                       		rts	
0001B97A                            ; ===========================================================================
0001B97A                            
0001B97A                            loc_19FBC:
0001B97A 117C 0006 0034             		move.b	#6,$34(a0)
0001B980 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001B986 317C 053C 000C             		move.w	#$53C,$C(a0)
0001B98C 117C 0014 0016             		move.b	#$14,$16(a0)
0001B992 4E75                       		rts	
0001B994                            ; ===========================================================================
0001B994 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001B9A4                            ; ===========================================================================
0001B9A4                            
0001B9A4                            loc_19FE6:				; XREF: off_19E80
0001B9A4 70FF                       		moveq	#-1,d0
0001B9A6 3028 0036                  		move.w	$36(a0),d0
0001B9AA 2240                       		movea.l	d0,a1
0001B9AC 4A68 0030                  		tst.w	$30(a0)
0001B9B0 6A00                       		bpl.s	loc_1A000
0001B9B2 4268 0030                  		clr.w	$30(a0)
0001B9B6 137C 00FF 0029             		move.b	#-1,$29(a1)
0001B9BC 6100                       		bsr.s	loc_1A020
0001B9BE                            
0001B9BE                            loc_1A000:
0001B9BE 700F                       		moveq	#$F,d0
0001B9C0 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001B9C4 6600                       		bne.s	loc_1A00A
0001B9C6 6100                       		bsr.s	loc_1A020
0001B9C8                            
0001B9C8                            loc_1A00A:
0001B9C8 4A68 0032                  		tst.w	$32(a0)
0001B9CC 6700                       		beq.s	locret_1A01E
0001B9CE 5528 0034                  		subq.b	#2,$34(a0)
0001B9D2 317C FFFF 0030             		move.w	#-1,$30(a0)
0001B9D8 4268 0032                  		clr.w	$32(a0)
0001B9DC                            
0001B9DC                            locret_1A01E:
0001B9DC 4E75                       		rts	
0001B9DE                            ; ===========================================================================
0001B9DE                            
0001B9DE                            loc_1A020:
0001B9DE 303C 00B1                  		move.w	#$B1,d0
0001B9E2 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play electricity sound
0001B9E8                            ; ===========================================================================
0001B9E8                            
0001B9E8                            loc_1A02A:				; XREF: off_19E80
0001B9E8 117C 0030 0017             		move.b	#$30,$17(a0)
0001B9EE 08E8 0000 0022             		bset	#0,$22(a0)
0001B9F4 4EB9 0000 E0EA             		jsr	SpeedToPos
0001B9FA 117C 0006 001A             		move.b	#6,$1A(a0)
0001BA00 0668 0010 0012             		addi.w	#$10,$12(a0)
0001BA06 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001BA0C 6500                       		bcs.s	loc_1A070
0001BA0E 317C 059C 000C             		move.w	#$59C,$C(a0)
0001BA14 5428 0034                  		addq.b	#2,$34(a0)
0001BA18 117C 0020 0017             		move.b	#$20,$17(a0)
0001BA1E 317C 0100 0010             		move.w	#$100,$10(a0)
0001BA24 317C FF00 0012             		move.w	#-$100,$12(a0)
0001BA2A 5438 F742                  		addq.b	#2,($FFFFF742).w
0001BA2E                            
0001BA2E                            loc_1A070:
0001BA2E 6000 0000                  		bra.w	loc_1A166
0001BA32                            ; ===========================================================================
0001BA32                            
0001BA32                            loc_1A074:				; XREF: off_19E80
0001BA32 08E8 0000 0022             		bset	#0,$22(a0)
0001BA38 117C 0004 001C             		move.b	#4,$1C(a0)
0001BA3E 4EB9 0000 E0EA             		jsr	SpeedToPos
0001BA44 0668 0010 0012             		addi.w	#$10,$12(a0)
0001BA4A 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001BA50 6500                       		bcs.s	loc_1A09A
0001BA52 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001BA58                            
0001BA58                            loc_1A09A:
0001BA58 317C 0400 0010             		move.w	#$400,$10(a0)
0001BA5E 3028 0008                  		move.w	8(a0),d0
0001BA62 9078 D008                  		sub.w	($FFFFD008).w,d0
0001BA66 6A00                       		bpl.s	loc_1A0B4
0001BA68 317C 0500 0010             		move.w	#$500,$10(a0)
0001BA6E 6000 0000                  		bra.w	loc_1A0F2
0001BA72                            ; ===========================================================================
0001BA72                            
0001BA72                            loc_1A0B4:
0001BA72 0440 0070                  		subi.w	#$70,d0
0001BA76 6500                       		bcs.s	loc_1A0F2
0001BA78 0468 0100 0010             		subi.w	#$100,$10(a0)
0001BA7E 5140                       		subq.w	#8,d0
0001BA80 6500                       		bcs.s	loc_1A0F2
0001BA82 0468 0100 0010             		subi.w	#$100,$10(a0)
0001BA88 5140                       		subq.w	#8,d0
0001BA8A 6500                       		bcs.s	loc_1A0F2
0001BA8C 0468 0080 0010             		subi.w	#$80,$10(a0)
0001BA92 5140                       		subq.w	#8,d0
0001BA94 6500                       		bcs.s	loc_1A0F2
0001BA96 0468 0080 0010             		subi.w	#$80,$10(a0)
0001BA9C 5140                       		subq.w	#8,d0
0001BA9E 6500                       		bcs.s	loc_1A0F2
0001BAA0 0468 0080 0010             		subi.w	#$80,$10(a0)
0001BAA6 0440 0038                  		subi.w	#$38,d0
0001BAAA 6500                       		bcs.s	loc_1A0F2
0001BAAC 4268 0010                  		clr.w	$10(a0)
0001BAB0                            
0001BAB0                            loc_1A0F2:
0001BAB0 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001BAB6 6500                       		bcs.s	loc_1A110
0001BAB8 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001BABE 317C 0240 0010             		move.w	#$240,$10(a0)
0001BAC4 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001BACA 5428 0034                  		addq.b	#2,$34(a0)
0001BACE                            
0001BACE                            loc_1A110:
0001BACE 6000                       		bra.s	loc_1A15C
0001BAD0                            ; ===========================================================================
0001BAD0                            
0001BAD0                            loc_1A112:				; XREF: off_19E80
0001BAD0 4EB9 0000 E0EA             		jsr	SpeedToPos
0001BAD6 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001BADC 6500                       		bcs.s	loc_1A124
0001BADE 4268 0010                  		clr.w	$10(a0)
0001BAE2                            
0001BAE2                            loc_1A124:
0001BAE2 0668 0034 0012             		addi.w	#$34,$12(a0)
0001BAE8 4A68 0012                  		tst.w	$12(a0)
0001BAEC 6B00                       		bmi.s	loc_1A142
0001BAEE 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001BAF4 6500                       		bcs.s	loc_1A142
0001BAF6 317C 0592 000C             		move.w	#$592,$C(a0)
0001BAFC 4268 0012                  		clr.w	$12(a0)
0001BB00                            
0001BB00                            loc_1A142:
0001BB00 3028 0010                  		move.w	$10(a0),d0
0001BB04 8068 0012                  		or.w	$12(a0),d0
0001BB08 6600                       		bne.s	loc_1A15C
0001BB0A 5428 0034                  		addq.b	#2,$34(a0)
0001BB0E 317C FE80 0012             		move.w	#-$180,$12(a0)
0001BB14 117C 0001 0021             		move.b	#1,$21(a0)
0001BB1A                            
0001BB1A                            loc_1A15C:
0001BB1A 43FA F8A4                  		lea	Ani_obj82(pc),a1
0001BB1E 4EB9 0000 B222             		jsr	AnimateSprite
0001BB24                            
0001BB24                            loc_1A166:
0001BB24 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001BB2A 6C00                       		bge.s	loc_1A172
0001BB2C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001BB30                            
0001BB30                            loc_1A172:
0001BB30 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001BB36 6C00                       		bge.s	locret_1A190
0001BB38 323C 001B                  		move.w	#$1B,d1
0001BB3C 343C 0070                  		move.w	#$70,d2
0001BB40 363C 0071                  		move.w	#$71,d3
0001BB44 3828 0008                  		move.w	8(a0),d4
0001BB48 4EF9 0001 04FA             		jmp	SolidObject
0001BB4E                            ; ===========================================================================
0001BB4E                            
0001BB4E                            locret_1A190:
0001BB4E 4E75                       		rts	
0001BB50                            ; ===========================================================================
0001BB50                            
0001BB50                            loc_1A192:				; XREF: off_19E80
0001BB50 217C 0001 96D4 0004        		move.l	#Map_Eggman,4(a0)
0001BB58 317C 0400 0002             		move.w	#$400,2(a0)
0001BB5E 117C 0000 001C             		move.b	#0,$1C(a0)
0001BB64 08E8 0000 0022             		bset	#0,$22(a0)
0001BB6A 4EB9 0000 E0EA             		jsr	SpeedToPos
0001BB70 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001BB76 6400                       		bcc.s	loc_1A1D0
0001BB78 317C 0180 0010             		move.w	#$180,$10(a0)
0001BB7E 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001BB84 117C 000F 0020             		move.b	#$F,$20(a0)
0001BB8A 5428 0034                  		addq.b	#2,$34(a0)
0001BB8E                            
0001BB8E                            loc_1A1D0:
0001BB8E 6000 FF8A                  		bra.w	loc_1A15C
0001BB92                            ; ===========================================================================
0001BB92                            
0001BB92                            loc_1A1D4:				; XREF: off_19E80
0001BB92 08E8 0000 0022             		bset	#0,$22(a0)
0001BB98 4EB9 0000 E0EA             		jsr	SpeedToPos
0001BB9E 4A68 0030                  		tst.w	$30(a0)
0001BBA2 6600                       		bne.s	loc_1A1FC
0001BBA4 4A28 0020                  		tst.b	$20(a0)
0001BBA8 6600                       		bne.s	loc_1A216
0001BBAA 317C 001E 0030             		move.w	#$1E,$30(a0)
0001BBB0 303C 00AC                  		move.w	#$AC,d0
0001BBB4 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001BBBA                            
0001BBBA                            loc_1A1FC:
0001BBBA 5368 0030                  		subq.w	#1,$30(a0)
0001BBBE 6600                       		bne.s	loc_1A216
0001BBC0 4A28 0022                  		tst.b	$22(a0)
0001BBC4 6A00                       		bpl.s	loc_1A210
0001BBC6 317C 0060 0012             		move.w	#$60,$12(a0)
0001BBCC 6000                       		bra.s	loc_1A216
0001BBCE                            ; ===========================================================================
0001BBCE                            
0001BBCE                            loc_1A210:
0001BBCE 117C 000F 0020             		move.b	#$F,$20(a0)
0001BBD4                            
0001BBD4                            loc_1A216:
0001BBD4 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001BBDA 6D00                       		blt.s	loc_1A23A
0001BBDC 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001BBE2 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001BBE8 4278 D014                  		clr.w	($FFFFD014).w
0001BBEC 4A68 0012                  		tst.w	$12(a0)
0001BBF0 6A00                       		bpl.s	loc_1A248
0001BBF2 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001BBF8                            
0001BBF8                            loc_1A23A:
0001BBF8 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001BBFE 6D00                       		blt.s	loc_1A248
0001BC00 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001BC06                            
0001BC06                            loc_1A248:
0001BC06 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001BC0C 6500                       		bcs.s	loc_1A260
0001BC0E 4A28 0001                  		tst.b	1(a0)
0001BC12 6B00                       		bmi.s	loc_1A260
0001BC14 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001BC1A 6000 FAF4                  		bra.w	Obj85_Delete
0001BC1E                            ; ===========================================================================
0001BC1E                            
0001BC1E                            loc_1A260:
0001BC1E 6000 FEFA                  		bra.w	loc_1A15C
0001BC22                            ; ===========================================================================
0001BC22                            
0001BC22                            loc_1A264:				; XREF: Obj85_Index
0001BC22 2268 0034                  		movea.l	$34(a0),a1
0001BC26 1011                       		move.b	(a1),d0
0001BC28 B010                       		cmp.b	(a0),d0
0001BC2A 6600 FAE4                  		bne.w	Obj85_Delete
0001BC2E 117C 0007 001C             		move.b	#7,$1C(a0)
0001BC34 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001BC3A 6C00                       		bge.s	loc_1A280
0001BC3C 6000                       		bra.s	loc_1A2A6
0001BC3E                            ; ===========================================================================
0001BC3E                            
0001BC3E                            loc_1A280:
0001BC3E 4A69 0010                  		tst.w	$10(a1)
0001BC42 6700                       		beq.s	loc_1A28C
0001BC44 117C 000B 001C             		move.b	#$B,$1C(a0)
0001BC4A                            
0001BC4A                            loc_1A28C:
0001BC4A 43FA DA38                  		lea	Ani_Eggman(pc),a1
0001BC4E 4EB9 0000 B222             		jsr	AnimateSprite
0001BC54                            
0001BC54                            loc_1A296:
0001BC54 2268 0034                  		movea.l	$34(a0),a1
0001BC58 3169 0008 0008             		move.w	8(a1),8(a0)
0001BC5E 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001BC64                            
0001BC64                            loc_1A2A6:
0001BC64 2268 0034                  		movea.l	$34(a0),a1
0001BC68 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001BC6E 7003                       		moveq	#3,d0
0001BC70 C028 0022                  		and.b	$22(a0),d0
0001BC74 0228 00FC 0001             		andi.b	#-4,1(a0)
0001BC7A 8128 0001                  		or.b	d0,1(a0)
0001BC7E 4EF9 0000 E110             		jmp	DisplaySprite
0001BC84                            ; ===========================================================================
0001BC84                            
0001BC84                            loc_1A2C6:				; XREF: Obj85_Index
0001BC84 2268 0034                  		movea.l	$34(a0),a1
0001BC88 1011                       		move.b	(a1),d0
0001BC8A B010                       		cmp.b	(a0),d0
0001BC8C 6600 FA82                  		bne.w	Obj85_Delete
0001BC90 0CA9 0001 96D4 0004        		cmpi.l	#Map_Eggman,4(a1)
0001BC98 6700                       		beq.s	loc_1A2E4
0001BC9A 117C 000A 001A             		move.b	#$A,$1A(a0)
0001BCA0 60C2                       		bra.s	loc_1A2A6
0001BCA2                            ; ===========================================================================
0001BCA2                            
0001BCA2                            loc_1A2E4:
0001BCA2 117C 0001 001C             		move.b	#1,$1C(a0)
0001BCA8 4A29 0021                  		tst.b	$21(a1)
0001BCAC 6F00                       		ble.s	loc_1A312
0001BCAE 117C 0006 001C             		move.b	#6,$1C(a0)
0001BCB4 217C 0001 96D4 0004        		move.l	#Map_Eggman,4(a0)
0001BCBC 317C 0400 0002             		move.w	#$400,2(a0)
0001BCC2 43FA D9C0                  		lea	Ani_Eggman(pc),a1
0001BCC6 4EB9 0000 B222             		jsr	AnimateSprite
0001BCCC 6000 FF86                  		bra.w	loc_1A296
0001BCD0                            ; ===========================================================================
0001BCD0                            
0001BCD0                            loc_1A312:
0001BCD0 4A28 0001                  		tst.b	1(a0)
0001BCD4 6A00 FA3A                  		bpl.w	Obj85_Delete
0001BCD8 6100 D558                  		bsr.w	BossDefeated
0001BCDC 117C 0002 0018             		move.b	#2,$18(a0)
0001BCE2 117C 0000 001C             		move.b	#0,$1C(a0)
0001BCE8 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001BCF0 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001BCF6 43FA 0000                  		lea	Ani_obj85(pc),a1
0001BCFA 4EB9 0000 B222             		jsr	AnimateSprite
0001BD00 6000 FF52                  		bra.w	loc_1A296
0001BD04                            ; ===========================================================================
0001BD04                            
0001BD04                            loc_1A346:				; XREF: Obj85_Index
0001BD04 08E8 0000 0022             		bset	#0,$22(a0)
0001BD0A 2268 0034                  		movea.l	$34(a0),a1
0001BD0E 0CA9 0001 96D4 0004        		cmpi.l	#Map_Eggman,4(a1)
0001BD16 6700                       		beq.s	loc_1A35E
0001BD18 6000 FF4A                  		bra.w	loc_1A2A6
0001BD1C                            ; ===========================================================================
0001BD1C                            
0001BD1C                            loc_1A35E:
0001BD1C 3169 0008 0008             		move.w	8(a1),8(a0)
0001BD22 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001BD28 4A28 001E                  		tst.b	$1E(a0)
0001BD2C 6600                       		bne.s	loc_1A376
0001BD2E 117C 0014 001E             		move.b	#$14,$1E(a0)
0001BD34                            
0001BD34                            loc_1A376:
0001BD34 5328 001E                  		subq.b	#1,$1E(a0)
0001BD38 6E00                       		bgt.s	loc_1A38A
0001BD3A 5228 001A                  		addq.b	#1,$1A(a0)
0001BD3E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001BD44 6E00 F9CA                  		bgt.w	Obj85_Delete
0001BD48                            
0001BD48                            loc_1A38A:
0001BD48 6000 FF0A                  		bra.w	loc_1A296
0001BD4C                            ; ===========================================================================
0001BD4C                            
0001BD4C                            loc_1A38E:				; XREF: Obj85_Index
0001BD4C 117C 000B 001A             		move.b	#$B,$1A(a0)
0001BD52 3038 D008                  		move.w	($FFFFD008).w,d0
0001BD56 9068 0008                  		sub.w	8(a0),d0
0001BD5A 6500                       		bcs.s	loc_1A3A6
0001BD5C 4A28 0001                  		tst.b	1(a0)
0001BD60 6A00 F9AE                  		bpl.w	Obj85_Delete
0001BD64                            
0001BD64                            loc_1A3A6:
0001BD64 4EF9 0000 E110             		jmp	DisplaySprite
0001BD6A                            ; ===========================================================================
0001BD6A                            
0001BD6A                            loc_1A3AC:				; XREF: Obj85_Index
0001BD6A 117C 0000 001A             		move.b	#0,$1A(a0)
0001BD70 08E8 0000 0022             		bset	#0,$22(a0)
0001BD76 2268 0034                  		movea.l	$34(a0),a1
0001BD7A 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001BD80 6600                       		bne.s	loc_1A3D0
0001BD82 0CA9 0001 96D4 0004        		cmpi.l	#Map_Eggman,4(a1)
0001BD8A 6700 F984                  		beq.w	Obj85_Delete
0001BD8E                            
0001BD8E                            loc_1A3D0:
0001BD8E 6000 FED4                  		bra.w	loc_1A2A6
0001BD92                            ; ===========================================================================
0001BD92                            Ani_obj85:
0001BD92                            	include "_anim\obj85.asm"
0001BD92                            ; ---------------------------------------------------------------------------
0001BD92                            ; Animation script - Eggman (FZ)
0001BD92                            ; ---------------------------------------------------------------------------
0001BD92 0000                       		dc.w byte_1A3D6-Ani_obj85
0001BD94 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001BD98                            		even
0001BD98                            		even
0001BD98                            
0001BD98                            Map_Eggman2:
0001BD98                            	include "_maps\Eggman2.asm"
0001BD98                            ; ---------------------------------------------------------------------------
0001BD98                            ; Sprite mappings - Eggman (FZ)
0001BD98                            ; ---------------------------------------------------------------------------
0001BD98 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001BD9A 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001BD9C 06                         byte_1A3DE:	dc.b 6
0001BD9D E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001BDA2 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001BDA7 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001BDAC FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001BDB1 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001BDB6 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001BDBB 06                         byte_1A3FD:	dc.b 6
0001BDBC E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001BDC1 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001BDC6 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001BDCB FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001BDD0 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001BDD5 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001BDDA                            		even
0001BDDA                            		even
0001BDDA                            
0001BDDA                            Map_FZBoss:
0001BDDA                            	include "_maps\FZ boss.asm"
0001BDDA                            ; ---------------------------------------------------------------------------
0001BDDA                            ; Sprite mappings - boss (FZ)
0001BDDA                            ; ---------------------------------------------------------------------------
0001BDDA 0000                       		dc.w byte_1A422-Map_FZBoss
0001BDDC 0000                       		dc.w byte_1A42D-Map_FZBoss
0001BDDE 0000                       		dc.w byte_1A43D-Map_FZBoss
0001BDE0 02                         byte_1A422:	dc.b 2
0001BDE1 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001BDE6 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001BDEB 03                         byte_1A42D:	dc.b 3
0001BDEC 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001BDF1 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001BDF6 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001BDFB 02                         byte_1A43D:	dc.b 2
0001BDFC 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001BE01 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001BE06                            		even
0001BE06                            		even
0001BE06                            
0001BE06                            ; ===========================================================================
0001BE06                            
0001BE06                            Obj84_Delete:
0001BE06 4EF9 0000 E14C             		jmp	DeleteObject
0001BE0C                            ; ===========================================================================
0001BE0C                            ; ---------------------------------------------------------------------------
0001BE0C                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001BE0C                            ; ---------------------------------------------------------------------------
0001BE0C                            
0001BE0C                            Obj84:					; XREF: Obj_Index
0001BE0C 7000                       		moveq	#0,d0
0001BE0E 1028 0024                  		move.b	$24(a0),d0
0001BE12 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001BE16 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001BE1A                            ; ===========================================================================
0001BE1A 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001BE1C 0000                       		dc.w loc_1A4CE-Obj84_Index
0001BE1E 0000                       		dc.w loc_1A57E-Obj84_Index
0001BE20                            
0001BE20 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001BE24 2550 0620                  		dc.w $2550, $620
0001BE28 2490 04C0                  		dc.w $2490, $4C0
0001BE2C 2510 04C0                  		dc.w $2510, $4C0
0001BE30                            ; ===========================================================================
0001BE30                            
0001BE30                            Obj84_Main:				; XREF: Obj84_Index
0001BE30 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001BE34 7000                       		moveq	#0,d0
0001BE36 1028 0028                  		move.b	$28(a0),d0
0001BE3A D040                       		add.w	d0,d0
0001BE3C D2C0                       		adda.w	d0,a1
0001BE3E 117C 0004 0001             		move.b	#4,1(a0)
0001BE44 08E8 0007 0001             		bset	#7,1(a0)
0001BE4A 08E8 0004 0001             		bset	#4,1(a0)
0001BE50 317C 0300 0002             		move.w	#$300,2(a0)
0001BE56 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001BE5E 3159 0008                  		move.w	(a1)+,8(a0)
0001BE62 3151 000C                  		move.w	(a1),$C(a0)
0001BE66 3159 0038                  		move.w	(a1)+,$38(a0)
0001BE6A 117C 0020 0016             		move.b	#$20,$16(a0)
0001BE70 117C 0060 0017             		move.b	#$60,$17(a0)
0001BE76 117C 0020 0019             		move.b	#$20,$19(a0)
0001BE7C 117C 0060 0016             		move.b	#$60,$16(a0)
0001BE82 117C 0003 0018             		move.b	#3,$18(a0)
0001BE88 5428 0024                  		addq.b	#2,$24(a0)
0001BE8C                            
0001BE8C                            loc_1A4CE:				; XREF: Obj84_Index
0001BE8C 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001BE92 6F00                       		ble.s	loc_1A4DC
0001BE94 08E8 0001 0001             		bset	#1,1(a0)
0001BE9A                            
0001BE9A                            loc_1A4DC:
0001BE9A 42A8 003C                  		clr.l	$3C(a0)
0001BE9E 4A28 0029                  		tst.b	$29(a0)
0001BEA2 6700                       		beq.s	loc_1A4EA
0001BEA4 5428 0024                  		addq.b	#2,$24(a0)
0001BEA8                            
0001BEA8                            loc_1A4EA:
0001BEA8 2028 003C                  		move.l	$3C(a0),d0
0001BEAC 2228 0038                  		move.l	$38(a0),d1
0001BEB0 D280                       		add.l	d0,d1
0001BEB2 4841                       		swap	d1
0001BEB4 3141 000C                  		move.w	d1,$C(a0)
0001BEB8 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001BEBE 6600                       		bne.s	loc_1A524
0001BEC0 4A68 0030                  		tst.w	$30(a0)
0001BEC4 6A00                       		bpl.s	loc_1A524
0001BEC6 70F6                       		moveq	#-$A,d0
0001BEC8 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001BECE 6F00                       		ble.s	loc_1A514
0001BED0 700E                       		moveq	#$E,d0
0001BED2                            
0001BED2                            loc_1A514:
0001BED2 D240                       		add.w	d0,d1
0001BED4 2268 0034                  		movea.l	$34(a0),a1
0001BED8 3341 000C                  		move.w	d1,$C(a1)
0001BEDC 3368 0008 0008             		move.w	8(a0),8(a1)
0001BEE2                            
0001BEE2                            loc_1A524:
0001BEE2 323C 002B                  		move.w	#$2B,d1
0001BEE6 343C 0060                  		move.w	#$60,d2
0001BEEA 363C 0061                  		move.w	#$61,d3
0001BEEE 3828 0008                  		move.w	8(a0),d4
0001BEF2 4EB9 0001 04FA             		jsr	SolidObject
0001BEF8 7000                       		moveq	#0,d0
0001BEFA 3228 003C                  		move.w	$3C(a0),d1
0001BEFE 6A00                       		bpl.s	loc_1A550
0001BF00 4441                       		neg.w	d1
0001BF02 5141                       		subq.w	#8,d1
0001BF04 6500                       		bcs.s	loc_1A55C
0001BF06 5200                       		addq.b	#1,d0
0001BF08 E841                       		asr.w	#4,d1
0001BF0A D041                       		add.w	d1,d0
0001BF0C 6000                       		bra.s	loc_1A55C
0001BF0E                            ; ===========================================================================
0001BF0E                            
0001BF0E                            loc_1A550:
0001BF0E 0441 0027                  		subi.w	#$27,d1
0001BF12 6500                       		bcs.s	loc_1A55C
0001BF14 5200                       		addq.b	#1,d0
0001BF16 E841                       		asr.w	#4,d1
0001BF18 D041                       		add.w	d1,d0
0001BF1A                            
0001BF1A                            loc_1A55C:
0001BF1A 1140 001A                  		move.b	d0,$1A(a0)
0001BF1E 3038 D008                  		move.w	($FFFFD008).w,d0
0001BF22 9068 0008                  		sub.w	8(a0),d0
0001BF26 6B00                       		bmi.s	loc_1A578
0001BF28 0440 0140                  		subi.w	#$140,d0
0001BF2C 6B00                       		bmi.s	loc_1A578
0001BF2E 4A28 0001                  		tst.b	1(a0)
0001BF32 6A00 FED2                  		bpl.w	Obj84_Delete
0001BF36                            
0001BF36                            loc_1A578:
0001BF36 4EF9 0000 E110             		jmp	DisplaySprite
0001BF3C                            ; ===========================================================================
0001BF3C                            
0001BF3C                            loc_1A57E:				; XREF: Obj84_Index
0001BF3C 7000                       		moveq	#0,d0
0001BF3E 1028 0028                  		move.b	$28(a0),d0
0001BF42 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001BF46 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001BF4A 6000 FF5C                  		bra.w	loc_1A4EA
0001BF4E                            ; ===========================================================================
0001BF4E 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001BF50 0000                       		dc.w loc_1A598-off_1A590
0001BF52 0000                       		dc.w loc_1A604-off_1A590
0001BF54 0000                       		dc.w loc_1A604-off_1A590
0001BF56                            ; ===========================================================================
0001BF56                            
0001BF56                            loc_1A598:				; XREF: off_1A590
0001BF56 4A28 0029                  		tst.b	$29(a0)
0001BF5A 6600                       		bne.s	loc_1A5D4
0001BF5C 2268 0034                  		movea.l	$34(a0),a1
0001BF60 4A29 0021                  		tst.b	$21(a1)
0001BF64 6600                       		bne.s	loc_1A5B4
0001BF66 6100 D2CA                  		bsr.w	BossDefeated
0001BF6A 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001BF72                            
0001BF72                            loc_1A5B4:
0001BF72 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001BF7A 6400                       		bcc.s	locret_1A602
0001BF7C 42A8 003C                  		clr.l	$3C(a0)
0001BF80 2268 0034                  		movea.l	$34(a0),a1
0001BF84 5369 0032                  		subq.w	#1,$32(a1)
0001BF88 4269 0030                  		clr.w	$30(a1)
0001BF8C 5528 0024                  		subq.b	#2,$24(a0)
0001BF90 4E75                       		rts	
0001BF92                            ; ===========================================================================
0001BF92                            
0001BF92                            loc_1A5D4:
0001BF92 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001BF98 6C00                       		bge.s	loc_1A5E4
0001BF9A 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001BFA2                            
0001BFA2                            loc_1A5E4:
0001BFA2 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001BFAA 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001BFB0 6E00                       		bgt.s	locret_1A602
0001BFB2 4268 003E                  		clr.w	$3E(a0)
0001BFB6 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001BFBC 4228 0029                  		clr.b	$29(a0)
0001BFC0                            
0001BFC0                            locret_1A602:
0001BFC0 4E75                       		rts	
0001BFC2                            ; ===========================================================================
0001BFC2                            
0001BFC2                            loc_1A604:				; XREF: off_1A590
0001BFC2 08E8 0001 0001             		bset	#1,1(a0)
0001BFC8 4A28 0029                  		tst.b	$29(a0)
0001BFCC 6600                       		bne.s	loc_1A646
0001BFCE 2268 0034                  		movea.l	$34(a0),a1
0001BFD2 4A29 0021                  		tst.b	$21(a1)
0001BFD6 6600                       		bne.s	loc_1A626
0001BFD8 6100 D258                  		bsr.w	BossDefeated
0001BFDC 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001BFE4                            
0001BFE4                            loc_1A626:
0001BFE4 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001BFEC 6400                       		bcc.s	locret_1A674
0001BFEE 42A8 003C                  		clr.l	$3C(a0)
0001BFF2 2268 0034                  		movea.l	$34(a0),a1
0001BFF6 5369 0032                  		subq.w	#1,$32(a1)
0001BFFA 4269 0030                  		clr.w	$30(a1)
0001BFFE 5528 0024                  		subq.b	#2,$24(a0)
0001C002 4E75                       		rts	
0001C004                            ; ===========================================================================
0001C004                            
0001C004                            loc_1A646:
0001C004 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001C00A 6D00                       		blt.s	loc_1A656
0001C00C 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001C014                            
0001C014                            loc_1A656:
0001C014 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001C01C 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001C022 6D00                       		blt.s	locret_1A674
0001C024 4268 003E                  		clr.w	$3E(a0)
0001C028 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001C02E 4228 0029                  		clr.b	$29(a0)
0001C032                            
0001C032                            locret_1A674:
0001C032 4E75                       		rts	
0001C034                            ; ===========================================================================
0001C034                            ; ---------------------------------------------------------------------------
0001C034                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001C034                            ; ---------------------------------------------------------------------------
0001C034                            Map_obj84:
0001C034                            	include "_maps\obj84.asm"
0001C034                            ; ---------------------------------------------------------------------------
0001C034                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001C034                            ; ---------------------------------------------------------------------------
0001C034 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001C038 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001C03C 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001C040 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001C044 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001C048 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001C04C 06                         byte_1A68E:	dc.b 6
0001C04D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C052 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C057 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C05C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C061 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C066 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C06B 08                         byte_1A6AD:	dc.b 8
0001C06C A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C071 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C076 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C07B B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C080 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C085 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C08A D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C08F D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C094 0A                         byte_1A6D6:	dc.b $A
0001C095 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C09A A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C09F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C0A4 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C0A9 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C0AE B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C0B3 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C0B8 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C0BD F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C0C2 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C0C7 0C                         byte_1A709:	dc.b $C
0001C0C8 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C0CD A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C0D2 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C0D7 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C0DC B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C0E1 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C0E6 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C0EB D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C0F0 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C0F5 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C0FA 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C0FF 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C104 0D                         byte_1A746:	dc.b $D
0001C105 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C10A A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C10F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C114 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C119 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C11E B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C123 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C128 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C12D F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C132 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C137 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C13C 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C141 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001C146 0E                         byte_1A788:	dc.b $E
0001C147 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C14C A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C151 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C156 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C15B B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C160 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C165 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C16A D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C16F F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C174 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C179 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C17E 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C183 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001C188 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001C18D 02                         byte_1A7CF:	dc.b 2
0001C18E F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001C193 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001C198                            		even
0001C198                            		even
0001C198                            
0001C198                            ; ===========================================================================
0001C198                            ; ---------------------------------------------------------------------------
0001C198                            ; Object 86 - energy balls (FZ)
0001C198                            ; ---------------------------------------------------------------------------
0001C198                            
0001C198                            Obj86:					; XREF: Obj_Index
0001C198 7000                       		moveq	#0,d0
0001C19A 1028 0024                  		move.b	$24(a0),d0
0001C19E 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001C1A2 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001C1A6                            ; ===========================================================================
0001C1A6 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001C1A8 0000                       		dc.w Obj86_Generator-Obj86_Index
0001C1AA 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001C1AC 0000                       		dc.w loc_1A962-Obj86_Index
0001C1AE 0000                       		dc.w loc_1A982-Obj86_Index
0001C1B0                            ; ===========================================================================
0001C1B0                            
0001C1B0                            Obj86_Main:				; XREF: Obj86_Index
0001C1B0 317C 2588 0008             		move.w	#$2588,8(a0)
0001C1B6 317C 053C 000C             		move.w	#$53C,$C(a0)
0001C1BC 317C 0300 0002             		move.w	#$300,2(a0)
0001C1C2 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001C1CA 117C 0000 001C             		move.b	#0,$1C(a0)
0001C1D0 117C 0003 0018             		move.b	#3,$18(a0)
0001C1D6 117C 0008 0017             		move.b	#8,$17(a0)
0001C1DC 117C 0008 0016             		move.b	#8,$16(a0)
0001C1E2 117C 0004 0001             		move.b	#4,1(a0)
0001C1E8 08E8 0007 0001             		bset	#7,1(a0)
0001C1EE 5428 0024                  		addq.b	#2,$24(a0)
0001C1F2                            
0001C1F2                            Obj86_Generator:			; XREF: Obj86_Index
0001C1F2 2268 0034                  		movea.l	$34(a0),a1
0001C1F6 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001C1FC 6600                       		bne.s	loc_1A850
0001C1FE 10BC 003F                  		move.b	#$3F,(a0)
0001C202 117C 0000 0024             		move.b	#0,$24(a0)
0001C208 4EF9 0000 E110             		jmp	DisplaySprite
0001C20E                            ; ===========================================================================
0001C20E                            
0001C20E                            loc_1A850:
0001C20E 117C 0000 001C             		move.b	#0,$1C(a0)
0001C214 4A28 0029                  		tst.b	$29(a0)
0001C218 6700                       		beq.s	loc_1A86C
0001C21A 5428 0024                  		addq.b	#2,$24(a0)
0001C21E 117C 0001 001C             		move.b	#1,$1C(a0)
0001C224 117C 003E 0028             		move.b	#$3E,$28(a0)
0001C22A                            
0001C22A                            loc_1A86C:
0001C22A 323C 0013                  		move.w	#$13,d1
0001C22E 343C 0008                  		move.w	#8,d2
0001C232 363C 0011                  		move.w	#$11,d3
0001C236 3828 0008                  		move.w	8(a0),d4
0001C23A 4EB9 0001 04FA             		jsr	SolidObject
0001C240 3038 D008                  		move.w	($FFFFD008).w,d0
0001C244 9068 0008                  		sub.w	8(a0),d0
0001C248 6B00                       		bmi.s	loc_1A89A
0001C24A 0440 0140                  		subi.w	#$140,d0
0001C24E 6B00                       		bmi.s	loc_1A89A
0001C250 4A28 0001                  		tst.b	1(a0)
0001C254 6A00 FBB0                  		bpl.w	Obj84_Delete
0001C258                            
0001C258                            loc_1A89A:
0001C258 43FA 0000                  		lea	Ani_obj86(pc),a1
0001C25C 4EB9 0000 B222             		jsr	AnimateSprite
0001C262 4EF9 0000 E110             		jmp	DisplaySprite
0001C268                            ; ===========================================================================
0001C268                            
0001C268                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001C268 4A28 0029                  		tst.b	$29(a0)
0001C26C 6700 0000                  		beq.w	loc_1A954
0001C270 4228 0029                  		clr.b	$29(a0)
0001C274 D068 0030                  		add.w	$30(a0),d0
0001C278 0240 001E                  		andi.w	#$1E,d0
0001C27C D4C0                       		adda.w	d0,a2
0001C27E 5868 0030                  		addq.w	#4,$30(a0)
0001C282 4268 0032                  		clr.w	$32(a0)
0001C286 7403                       		moveq	#3,d2
0001C288                            
0001C288                            Obj86_Loop:
0001C288 4EB9 0000 E5BC             		jsr	SingleObjLoad2
0001C28E 6600 0000                  		bne.w	loc_1A954
0001C292 12BC 0086                  		move.b	#$86,(a1)
0001C296 3368 0008 0008             		move.w	8(a0),8(a1)
0001C29C 337C 053C 000C             		move.w	#$53C,$C(a1)
0001C2A2 137C 0008 0024             		move.b	#8,$24(a1)
0001C2A8 337C 2300 0002             		move.w	#$2300,2(a1)
0001C2AE 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001C2B6 137C 000C 0016             		move.b	#$C,$16(a1)
0001C2BC 137C 000C 0017             		move.b	#$C,$17(a1)
0001C2C2 137C 0000 0020             		move.b	#0,$20(a1)
0001C2C8 137C 0003 0018             		move.b	#3,$18(a1)
0001C2CE 337C 003E 0028             		move.w	#$3E,$28(a1)
0001C2D4 137C 0004 0001             		move.b	#4,1(a1)
0001C2DA 08E9 0007 0001             		bset	#7,1(a1)
0001C2E0 2348 0034                  		move.l	a0,$34(a1)
0001C2E4 4EB9 0000 33AE             		jsr	(RandomNumber).l
0001C2EA 3228 0032                  		move.w	$32(a0),d1
0001C2EE C3FC FFB1                  		muls.w	#-$4F,d1
0001C2F2 0641 2578                  		addi.w	#$2578,d1
0001C2F6 0240 001F                  		andi.w	#$1F,d0
0001C2FA 0440 0010                  		subi.w	#$10,d0
0001C2FE D041                       		add.w	d1,d0
0001C300 3340 0030                  		move.w	d0,$30(a1)
0001C304 5268 0032                  		addq.w	#1,$32(a0)
0001C308 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001C30E 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001C312                            
0001C312                            loc_1A954:
0001C312 4A68 0032                  		tst.w	$32(a0)
0001C316 6600                       		bne.s	loc_1A95E
0001C318 5428 0024                  		addq.b	#2,$24(a0)
0001C31C                            
0001C31C                            loc_1A95E:
0001C31C 6000 FF0C                  		bra.w	loc_1A86C
0001C320                            ; ===========================================================================
0001C320                            
0001C320                            loc_1A962:				; XREF: Obj86_Index
0001C320 117C 0002 001C             		move.b	#2,$1C(a0)
0001C326 4A68 0038                  		tst.w	$38(a0)
0001C32A 6600                       		bne.s	loc_1A97E
0001C32C 117C 0002 0024             		move.b	#2,$24(a0)
0001C332 2268 0034                  		movea.l	$34(a0),a1
0001C336 337C FFFF 0032             		move.w	#-1,$32(a1)
0001C33C                            
0001C33C                            loc_1A97E:
0001C33C 6000 FEEC                  		bra.w	loc_1A86C
0001C340                            ; ===========================================================================
0001C340                            
0001C340                            loc_1A982:				; XREF: Obj86_Index
0001C340 7000                       		moveq	#0,d0
0001C342 1028 0025                  		move.b	$25(a0),d0
0001C346 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001C34A 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001C34E 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001C352 4EB9 0000 B222             		jsr	AnimateSprite
0001C358 4EF9 0000 E110             		jmp	DisplaySprite
0001C35E                            ; ===========================================================================
0001C35E 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001C360 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001C362 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001C364                            ; ===========================================================================
0001C364                            
0001C364                            loc_1A9A6:				; XREF: Obj86_Index2
0001C364 3028 0030                  		move.w	$30(a0),d0
0001C368 9068 0008                  		sub.w	8(a0),d0
0001C36C E940                       		asl.w	#4,d0
0001C36E 3140 0010                  		move.w	d0,$10(a0)
0001C372 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001C378 5428 0025                  		addq.b	#2,$25(a0)
0001C37C 4E75                       		rts	
0001C37E                            ; ===========================================================================
0001C37E                            
0001C37E                            loc_1A9C0:				; XREF: Obj86_Index2
0001C37E 4A68 0010                  		tst.w	$10(a0)
0001C382 6700                       		beq.s	loc_1A9E6
0001C384 4EB9 0000 E0EA             		jsr	SpeedToPos
0001C38A 3028 0008                  		move.w	8(a0),d0
0001C38E 9068 0030                  		sub.w	$30(a0),d0
0001C392 6400                       		bcc.s	loc_1A9E6
0001C394 4268 0010                  		clr.w	$10(a0)
0001C398 D168 0008                  		add.w	d0,8(a0)
0001C39C 2268 0034                  		movea.l	$34(a0),a1
0001C3A0 5369 0032                  		subq.w	#1,$32(a1)
0001C3A4                            
0001C3A4                            loc_1A9E6:
0001C3A4 117C 0000 001C             		move.b	#0,$1C(a0)
0001C3AA 5368 0028                  		subq.w	#1,$28(a0)
0001C3AE 6600                       		bne.s	locret_1AA1C
0001C3B0 5428 0025                  		addq.b	#2,$25(a0)
0001C3B4 117C 0001 001C             		move.b	#1,$1C(a0)
0001C3BA 117C 009A 0020             		move.b	#$9A,$20(a0)
0001C3C0 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001C3C6 7000                       		moveq	#0,d0
0001C3C8 3038 D008                  		move.w	($FFFFD008).w,d0
0001C3CC 9068 0008                  		sub.w	8(a0),d0
0001C3D0 3140 0010                  		move.w	d0,$10(a0)
0001C3D4 317C 0140 0012             		move.w	#$140,$12(a0)
0001C3DA                            
0001C3DA                            locret_1AA1C:
0001C3DA 4E75                       		rts	
0001C3DC                            ; ===========================================================================
0001C3DC                            
0001C3DC                            loc_1AA1E:				; XREF: Obj86_Index2
0001C3DC 4EB9 0000 E0EA             		jsr	SpeedToPos
0001C3E2 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001C3E8 6400                       		bcc.s	loc_1AA34
0001C3EA 5368 0028                  		subq.w	#1,$28(a0)
0001C3EE 6700                       		beq.s	loc_1AA34
0001C3F0 4E75                       		rts	
0001C3F2                            ; ===========================================================================
0001C3F2                            
0001C3F2                            loc_1AA34:
0001C3F2 2268 0034                  		movea.l	$34(a0),a1
0001C3F6 5369 0038                  		subq.w	#1,$38(a1)
0001C3FA 6000 FA0A                  		bra.w	Obj84_Delete
0001C3FE                            ; ===========================================================================
0001C3FE                            Ani_obj86:
0001C3FE                            	include "_anim\obj86.asm"
0001C3FE                            ; ---------------------------------------------------------------------------
0001C3FE                            ; Animation script - energy ball launcher (FZ)
0001C3FE                            ; ---------------------------------------------------------------------------
0001C3FE 0000                       		dc.w byte_1AA46-Ani_obj86
0001C400 0000                       		dc.w byte_1AA4A-Ani_obj86
0001C402 0000                       		dc.w byte_1AA50-Ani_obj86
0001C404 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001C408 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001C40E 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001C414                            		even
0001C414                            		even
0001C414                            
0001C414                            ; ---------------------------------------------------------------------------
0001C414                            ; Sprite mappings - energy ball	launcher (FZ)
0001C414                            ; ---------------------------------------------------------------------------
0001C414                            Map_obj86:
0001C414                            	include "_maps\obj86.asm"
0001C414                            ; ---------------------------------------------------------------------------
0001C414                            ; Sprite mappings - energy ball	launcher (FZ)
0001C414                            ; ---------------------------------------------------------------------------
0001C414 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001C418 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001C41C 01                         byte_1AA5E:	dc.b 1
0001C41D F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001C422 01                         byte_1AA64:	dc.b 1
0001C423 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001C428 01                         byte_1AA6A:	dc.b 1
0001C429 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001C42E 01                         byte_1AA70:	dc.b 1
0001C42F F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001C434                            		even
0001C434                            		even
0001C434                            
0001C434                            Ani_obj86a:
0001C434                            	include "_anim\obj86a.asm"
0001C434                            ; ---------------------------------------------------------------------------
0001C434                            ; Animation script - energy balls (FZ)
0001C434                            ; ---------------------------------------------------------------------------
0001C434 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001C436 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001C438 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001C447 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001C456 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001C45A 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001C464                            		even
0001C464                            		even
0001C464                            
0001C464                            ; ---------------------------------------------------------------------------
0001C464                            ; Sprite mappings - energy balls (FZ)
0001C464                            ; ---------------------------------------------------------------------------
0001C464                            Map_obj86a:
0001C464                            	include "_maps\obj86a.asm"
0001C464                            ; ---------------------------------------------------------------------------
0001C464                            ; Sprite mappings - energy balls (FZ)
0001C464                            ; ---------------------------------------------------------------------------
0001C464 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001C468 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001C46C 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001C470 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001C474 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001C478 0000                       		dc.w byte_1AB20-Map_obj86a
0001C47A 02                         byte_1AABC:	dc.b 2
0001C47B F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001C480 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001C485 02                         byte_1AAC7:	dc.b 2
0001C486 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001C48B F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001C490 02                         byte_1AAD2:	dc.b 2
0001C491 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001C496 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001C49B 02                         byte_1AADD:	dc.b 2
0001C49C F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001C4A1 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001C4A6 02                         byte_1AAE8:	dc.b 2
0001C4A7 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001C4AC 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001C4B1 02                         byte_1AAF3:	dc.b 2
0001C4B2 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001C4B7 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001C4BC 01                         byte_1AAFE:	dc.b 1
0001C4BD F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001C4C2 01                         byte_1AB04:	dc.b 1
0001C4C3 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001C4C8 02                         byte_1AB0A:	dc.b 2
0001C4C9 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001C4CE 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001C4D3 02                         byte_1AB15:	dc.b 2
0001C4D4 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001C4D9 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001C4DE 00                         byte_1AB20:	dc.b 0
0001C4E0 00                         		even
0001C4E0 00                         		even
0001C4E0                            
0001C4E0                            ; ===========================================================================
0001C4E0                            ; ---------------------------------------------------------------------------
0001C4E0                            ; Object 3E - prison capsule
0001C4E0                            ; ---------------------------------------------------------------------------
0001C4E0                            
0001C4E0                            Obj3E:					; XREF: Obj_Index
0001C4E0 7000                       		moveq	#0,d0
0001C4E2 1028 0024                  		move.b	$24(a0),d0
0001C4E6 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001C4EA 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001C4EE 3028 0008                  		move.w	8(a0),d0
0001C4F2 0240 FF80                  		andi.w	#$FF80,d0
0001C4F6 3238 F700                  		move.w	($FFFFF700).w,d1
0001C4FA 0441 0080                  		subi.w	#$80,d1
0001C4FE 0241 FF80                  		andi.w	#$FF80,d1
0001C502 9041                       		sub.w	d1,d0
0001C504 0C40 0280                  		cmpi.w	#$280,d0
0001C508 6200                       		bhi.s	Obj3E_Delete
0001C50A 4EF9 0000 E110             		jmp	DisplaySprite
0001C510                            ; ===========================================================================
0001C510                            
0001C510                            Obj3E_Delete:
0001C510 4EF9 0000 E14C             		jmp	DeleteObject
0001C516                            ; ===========================================================================
0001C516 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001C518 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001C51A 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001C51C 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001C51E 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001C520 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001C522 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001C524 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001C526                            
0001C526 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001C52A 040C 0501                  		dc.b 4,	$C, 5, 1
0001C52E 0610 0403                  		dc.b 6,	$10, 4,	3
0001C532 0810 0305                  		dc.b 8,	$10, 3,	5
0001C536                            ; ===========================================================================
0001C536                            
0001C536                            Obj3E_Main:				; XREF: Obj3E_Index
0001C536 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001C53E 317C 049D 0002             		move.w	#$49D,2(a0)
0001C544 117C 0004 0001             		move.b	#4,1(a0)
0001C54A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001C550 7000                       		moveq	#0,d0
0001C552 1028 0028                  		move.b	$28(a0),d0
0001C556 E548                       		lsl.w	#2,d0
0001C558 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001C55C 1159 0024                  		move.b	(a1)+,$24(a0)
0001C560 1159 0019                  		move.b	(a1)+,$19(a0)
0001C564 1159 0018                  		move.b	(a1)+,$18(a0)
0001C568 1159 001A                  		move.b	(a1)+,$1A(a0)
0001C56C 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001C570 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001C572 117C 0006 0020             		move.b	#6,$20(a0)
0001C578 117C 0008 0021             		move.b	#8,$21(a0)
0001C57E                            
0001C57E                            Obj3E_Not02:
0001C57E 4E75                       		rts	
0001C580                            ; ===========================================================================
0001C580                            
0001C580                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001C580 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001C586 6700                       		beq.s	Obj3E_ChkOpened
0001C588 323C 002B                  		move.w	#$2B,d1
0001C58C 343C 0018                  		move.w	#$18,d2
0001C590 363C 0018                  		move.w	#$18,d3
0001C594 3828 0008                  		move.w	8(a0),d4
0001C598 4EF9 0001 04FA             		jmp	SolidObject
0001C59E                            ; ===========================================================================
0001C59E                            
0001C59E                            Obj3E_ChkOpened:
0001C59E 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001C5A2 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001C5A4 4228 0025                  		clr.b	$25(a0)
0001C5A8 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001C5AE 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001C5B4                            
0001C5B4                            Obj3E_DoOpen:
0001C5B4 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001C5BA 4E75                       		rts	
0001C5BC                            ; ===========================================================================
0001C5BC                            
0001C5BC                            Obj3E_Switched:				; XREF: Obj3E_Index
0001C5BC 323C 0017                  		move.w	#$17,d1
0001C5C0 343C 0008                  		move.w	#8,d2
0001C5C4 363C 0008                  		move.w	#8,d3
0001C5C8 3828 0008                  		move.w	8(a0),d4
0001C5CC 4EB9 0001 04FA             		jsr	SolidObject
0001C5D2 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001C5D8 4EB9 0000 B222             		jsr	AnimateSprite
0001C5DE 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001C5E4 4A28 0025                  		tst.b	$25(a0)
0001C5E8 6700                       		beq.s	locret_1AC60
0001C5EA 5068 000C                  		addq.w	#8,$C(a0)
0001C5EE 117C 000A 0024             		move.b	#$A,$24(a0)
0001C5F4 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001C5FA 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001C5FE 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001C602 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001C608 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001C60E 4228 0025                  		clr.b	$25(a0)
0001C612 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001C618 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001C61E                            
0001C61E                            locret_1AC60:
0001C61E 4E75                       		rts	
0001C620                            ; ===========================================================================
0001C620                            
0001C620                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001C620 7007                       		moveq	#7,d0
0001C622 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001C626 6600                       		bne.s	loc_1ACA0
0001C628 4EB9 0000 E5A6             		jsr	SingleObjLoad
0001C62E 6600                       		bne.s	loc_1ACA0
0001C630 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001C634 3368 0008 0008             		move.w	8(a0),8(a1)
0001C63A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C640 4EB9 0000 33AE             		jsr	(RandomNumber).l
0001C646 7200                       		moveq	#0,d1
0001C648 1200                       		move.b	d0,d1
0001C64A E409                       		lsr.b	#2,d1
0001C64C 0441 0020                  		subi.w	#$20,d1
0001C650 D369 0008                  		add.w	d1,8(a1)
0001C654 E048                       		lsr.w	#8,d0
0001C656 E608                       		lsr.b	#3,d0
0001C658 D169 000C                  		add.w	d0,$C(a1)
0001C65C                            
0001C65C                            loc_1ACA0:
0001C65C 5368 001E                  		subq.w	#1,$1E(a0)
0001C660 6700                       		beq.s	Obj3E_MakeAnimal
0001C662 4E75                       		rts	
0001C664                            ; ===========================================================================
0001C664                            
0001C664                            Obj3E_MakeAnimal:
0001C664 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001C66A 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001C670 117C 0006 001A             		move.b	#6,$1A(a0)
0001C676 317C 0096 001E             		move.w	#$96,$1E(a0)
0001C67C 0668 0020 000C             		addi.w	#$20,$C(a0)
0001C682 7C07                       		moveq	#7,d6
0001C684 3A3C 009A                  		move.w	#$9A,d5
0001C688 78E4                       		moveq	#-$1C,d4
0001C68A                            
0001C68A                            Obj3E_Loop:
0001C68A 4EB9 0000 E5A6             		jsr	SingleObjLoad
0001C690 6600                       		bne.s	locret_1ACF8
0001C692 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001C696 3368 0008 0008             		move.w	8(a0),8(a1)
0001C69C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C6A2 D969 0008                  		add.w	d4,8(a1)
0001C6A6 5E44                       		addq.w	#7,d4
0001C6A8 3345 0036                  		move.w	d5,$36(a1)
0001C6AC 5145                       		subq.w	#8,d5
0001C6AE 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001C6B2                            
0001C6B2                            locret_1ACF8:
0001C6B2 4E75                       		rts	
0001C6B4                            ; ===========================================================================
0001C6B4                            
0001C6B4                            Obj3E_Animals:				; XREF: Obj3E_Index
0001C6B4 7007                       		moveq	#7,d0
0001C6B6 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001C6BA 6600                       		bne.s	loc_1AD38
0001C6BC 4EB9 0000 E5A6             		jsr	SingleObjLoad
0001C6C2 6600                       		bne.s	loc_1AD38
0001C6C4 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001C6C8 3368 0008 0008             		move.w	8(a0),8(a1)
0001C6CE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C6D4 4EB9 0000 33AE             		jsr	(RandomNumber).l
0001C6DA 0240 001F                  		andi.w	#$1F,d0
0001C6DE 5D40                       		subq.w	#6,d0
0001C6E0 4A41                       		tst.w	d1
0001C6E2 6A00                       		bpl.s	loc_1AD2E
0001C6E4 4440                       		neg.w	d0
0001C6E6                            
0001C6E6                            loc_1AD2E:
0001C6E6 D169 0008                  		add.w	d0,8(a1)
0001C6EA 337C 000C 0036             		move.w	#$C,$36(a1)
0001C6F0                            
0001C6F0                            loc_1AD38:
0001C6F0 5368 001E                  		subq.w	#1,$1E(a0)
0001C6F4 6600                       		bne.s	locret_1AD48
0001C6F6 5428 0024                  		addq.b	#2,$24(a0)
0001C6FA 317C 00B4 001E             		move.w	#180,$1E(a0)
0001C700                            
0001C700                            locret_1AD48:
0001C700 4E75                       		rts	
0001C702                            ; ===========================================================================
0001C702                            
0001C702                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001C702 703E                       		moveq	#$3E,d0
0001C704 7228                       		moveq	#$28,d1
0001C706 7440                       		moveq	#$40,d2
0001C708 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001C70C                            
0001C70C                            Obj3E_FindObj28:
0001C70C B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001C70E 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001C710 D2C2                       		adda.w	d2,a1		; next object RAM
0001C712 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001C716                            
0001C716 4EB9 0000 F7B6             		jsr	GotThroughAct
0001C71C 4EF9 0000 E14C             		jmp	DeleteObject
0001C722                            ; ===========================================================================
0001C722                            
0001C722                            Obj3E_Obj28Found:
0001C722 4E75                       		rts	
0001C724                            ; ===========================================================================
0001C724                            Ani_obj3E:
0001C724                            	include "_anim\obj3E.asm"
0001C724                            ; ---------------------------------------------------------------------------
0001C724                            ; Animation script - prison capsule
0001C724                            ; ---------------------------------------------------------------------------
0001C724 0000                       		dc.w byte_1AD70-Ani_obj3E
0001C726 0000                       		dc.w byte_1AD70-Ani_obj3E
0001C728 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001C72C                            		even
0001C72C                            		even
0001C72C                            
0001C72C                            ; ---------------------------------------------------------------------------
0001C72C                            ; Sprite mappings - prison capsule
0001C72C                            ; ---------------------------------------------------------------------------
0001C72C                            Map_obj3E:
0001C72C                            	include "_maps\obj3E.asm"
0001C72C                            ; ---------------------------------------------------------------------------
0001C72C                            ; Sprite mappings - prison capsule
0001C72C                            ; ---------------------------------------------------------------------------
0001C72C 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001C730 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001C734 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001C738 0000                       		dc.w byte_1ADE2-Map_obj3E
0001C73A 07                         byte_1AD82:	dc.b 7
0001C73B E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001C740 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001C745 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001C74A F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001C74F F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001C754 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001C759 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001C75E 01                         byte_1ADA6:	dc.b 1
0001C75F F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001C764 06                         byte_1ADAC:	dc.b 6
0001C765 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001C76A 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001C76F 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001C774 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001C779 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001C77E 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001C783 01                         byte_1ADCB:	dc.b 1
0001C784 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001C789 02                         byte_1ADD1:	dc.b 2
0001C78A E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001C78F 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001C794 01                         byte_1ADDC:	dc.b 1
0001C795 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001C79A 00                         byte_1ADE2:	dc.b 0
0001C79C 00                         		even
0001C79C 00                         		even
0001C79C                            
0001C79C                            ; ---------------------------------------------------------------------------
0001C79C                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001C79C                            ; ---------------------------------------------------------------------------
0001C79C                            
0001C79C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C79C                            
0001C79C                            
0001C79C                            TouchResponse:				; XREF: Obj01
0001C79C 4E71                       		nop	
0001C79E 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001C7A2 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001C7A6 5142                       		subq.w	#8,d2
0001C7A8 7A00                       		moveq	#0,d5
0001C7AA 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001C7AE 5705                       		subq.b	#3,d5
0001C7B0 9645                       		sub.w	d5,d3
0001C7B2 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001C7B8 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001C7BA 0643 000C                  		addi.w	#$C,d3
0001C7BE 7A0A                       		moveq	#$A,d5
0001C7C0                            
0001C7C0                            Touch_NoDuck:
0001C7C0 383C 0010                  		move.w	#$10,d4
0001C7C4 DA45                       		add.w	d5,d5
0001C7C6 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001C7CA 3C3C 005F                  		move.w	#$5F,d6
0001C7CE                            
0001C7CE                            Touch_Loop:
0001C7CE 4A29 0001                  		tst.b	1(a1)
0001C7D2 6A00                       		bpl.s	Touch_NextObj
0001C7D4 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001C7D8 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001C7DA                            
0001C7DA                            Touch_NextObj:
0001C7DA 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001C7DE 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001C7E2                            
0001C7E2 7000                       		moveq	#0,d0
0001C7E4 4E75                       		rts	
0001C7E6                            ; ===========================================================================
0001C7E6 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001C7E8 0C14                       		dc.b   $C, $14
0001C7EA 140C                       		dc.b  $14,  $C
0001C7EC 0410                       		dc.b	4, $10
0001C7EE 0C12                       		dc.b   $C, $12
0001C7F0 1010                       		dc.b  $10, $10
0001C7F2 0606                       		dc.b	6,   6
0001C7F4 180C                       		dc.b  $18,  $C
0001C7F6 0C10                       		dc.b   $C, $10
0001C7F8 100C                       		dc.b  $10,  $C
0001C7FA 0808                       		dc.b	8,   8
0001C7FC 1410                       		dc.b  $14, $10
0001C7FE 1408                       		dc.b  $14,   8
0001C800 0E0E                       		dc.b   $E,  $E
0001C802 1818                       		dc.b  $18, $18
0001C804 2810                       		dc.b  $28, $10
0001C806 1018                       		dc.b  $10, $18
0001C808 0810                       		dc.b	8, $10
0001C80A 2070                       		dc.b  $20, $70
0001C80C 4020                       		dc.b  $40, $20
0001C80E 8020                       		dc.b  $80, $20
0001C810 2020                       		dc.b  $20, $20
0001C812 0808                       		dc.b	8,   8
0001C814 0404                       		dc.b	4,   4
0001C816 2008                       		dc.b  $20,   8
0001C818 0C0C                       		dc.b   $C,  $C
0001C81A 0804                       		dc.b	8,   4
0001C81C 1804                       		dc.b  $18,   4
0001C81E 2804                       		dc.b  $28,   4
0001C820 0408                       		dc.b	4,   8
0001C822 0418                       		dc.b	4, $18
0001C824 0428                       		dc.b	4, $28
0001C826 0420                       		dc.b	4, $20
0001C828 1818                       		dc.b  $18, $18
0001C82A 0C18                       		dc.b   $C, $18
0001C82C 4808                       		dc.b  $48,   8
0001C82E                            ; ===========================================================================
0001C82E                            
0001C82E                            Touch_Height:				; XREF: TouchResponse
0001C82E 0240 003F                  		andi.w	#$3F,d0
0001C832 D040                       		add.w	d0,d0
0001C834 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001C838 7200                       		moveq	#0,d1
0001C83A 121A                       		move.b	(a2)+,d1
0001C83C 3029 0008                  		move.w	8(a1),d0
0001C840 9041                       		sub.w	d1,d0
0001C842 9042                       		sub.w	d2,d0
0001C844 6400                       		bcc.s	loc_1AE98
0001C846 D241                       		add.w	d1,d1
0001C848 D041                       		add.w	d1,d0
0001C84A 6500                       		bcs.s	Touch_Width
0001C84C 6000 FF8C                  		bra.w	Touch_NextObj
0001C850                            ; ===========================================================================
0001C850                            
0001C850                            loc_1AE98:
0001C850 B044                       		cmp.w	d4,d0
0001C852 6200 FF86                  		bhi.w	Touch_NextObj
0001C856                            
0001C856                            Touch_Width:
0001C856 7200                       		moveq	#0,d1
0001C858 121A                       		move.b	(a2)+,d1
0001C85A 3029 000C                  		move.w	$C(a1),d0
0001C85E 9041                       		sub.w	d1,d0
0001C860 9043                       		sub.w	d3,d0
0001C862 6400                       		bcc.s	loc_1AEB6
0001C864 D241                       		add.w	d1,d1
0001C866 D240                       		add.w	d0,d1
0001C868 6500                       		bcs.s	Touch_ChkValue
0001C86A 6000 FF6E                  		bra.w	Touch_NextObj
0001C86E                            ; ===========================================================================
0001C86E                            
0001C86E                            loc_1AEB6:
0001C86E B045                       		cmp.w	d5,d0
0001C870 6200 FF68                  		bhi.w	Touch_NextObj
0001C874                            
0001C874                            Touch_ChkValue:
0001C874 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001C878 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001C87C 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001C880 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001C884 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001C888 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001C88A 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001C88E                            
0001C88E                            ; touch	response is $40-$7F
0001C88E                            
0001C88E 1029 0020                  		move.b	$20(a1),d0
0001C892 0200 003F                  		andi.b	#$3F,d0
0001C896 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001C89A 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001C89C 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001C8A2 6400 0000                  		bcc.w	locret_1AEF2
0001C8A6 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001C8AA                            
0001C8AA                            locret_1AEF2:
0001C8AA 4E75                       		rts	
0001C8AC                            ; ===========================================================================
0001C8AC                            
0001C8AC                            Touch_Monitor:
0001C8AC 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001C8B0 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001C8B2 3028 000C                  		move.w	$C(a0),d0
0001C8B6 0440 0010                  		subi.w	#$10,d0
0001C8BA B069 000C                  		cmp.w	$C(a1),d0
0001C8BE 6500                       		bcs.s	locret_1AF2E
0001C8C0 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001C8C4 337C FE80 0012             		move.w	#-$180,$12(a1)
0001C8CA 4A29 0025                  		tst.b	$25(a1)
0001C8CE 6600                       		bne.s	locret_1AF2E
0001C8D0 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001C8D4 4E75                       		rts	
0001C8D6                            ; ===========================================================================
0001C8D6                            
0001C8D6                            loc_1AF1E:
0001C8D6 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001C8DC 6600                       		bne.s	locret_1AF2E
0001C8DE 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001C8E2 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001C8E6                            
0001C8E6                            locret_1AF2E:
0001C8E6 4E75                       		rts	
0001C8E8                            ; ===========================================================================
0001C8E8                            
0001C8E8                            Touch_Enemy:				; XREF: Touch_ChkValue
0001C8E8 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001C8EC 6600                       		bne.s	loc_1AF40	; if yes, branch
0001C8EE 0C28 001D 001C             		cmpi.b	#$1D,$1C(a0)	; is Sonic Spin Dashing?
0001C8F4 6700 0000                  		beq.w	loc_1AF40	; if yes, branch
0001C8F8 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001C8FE 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001C902                            
0001C902                            loc_1AF40:
0001C902 4A29 0021                  		tst.b	$21(a1)
0001C906 6700                       		beq.s	Touch_KillEnemy
0001C908 4468 0010                  		neg.w	$10(a0)
0001C90C 4468 0012                  		neg.w	$12(a0)
0001C910 E0E8 0010                  		asr	$10(a0)
0001C914 E0E8 0012                  		asr	$12(a0)
0001C918 137C 0000 0020             		move.b	#0,$20(a1)
0001C91E 5329 0021                  		subq.b	#1,$21(a1)
0001C922 6600                       		bne.s	locret_1AF68
0001C924 08E9 0007 0022             		bset	#7,$22(a1)
0001C92A                            
0001C92A                            locret_1AF68:
0001C92A 4E75                       		rts	
0001C92C                            ; ===========================================================================
0001C92C                            
0001C92C                            Touch_KillEnemy:
0001C92C 08E9 0007 0022             		bset	#7,$22(a1)
0001C932 7000                       		moveq	#0,d0
0001C934 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001C938 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001C93C 0C40 0006                  		cmpi.w	#6,d0
0001C940 6500                       		bcs.s	loc_1AF82
0001C942 7006                       		moveq	#6,d0
0001C944                            
0001C944                            loc_1AF82:
0001C944 3340 003E                  		move.w	d0,$3E(a1)
0001C948 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001C94C 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001C952 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001C954 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001C958 337C 000A 003E             		move.w	#$A,$3E(a1)
0001C95E                            
0001C95E                            loc_1AF9C:
0001C95E 6100 0000                  		bsr.w	AddPoints
0001C962 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001C966 137C 0000 0024             		move.b	#0,$24(a1)
0001C96C 4A68 0012                  		tst.w	$12(a0)
0001C970 6B00                       		bmi.s	loc_1AFC2
0001C972 3028 000C                  		move.w	$C(a0),d0
0001C976 B069 000C                  		cmp.w	$C(a1),d0
0001C97A 6400                       		bcc.s	loc_1AFCA
0001C97C 4468 0012                  		neg.w	$12(a0)
0001C980 4E75                       		rts	
0001C982                            ; ===========================================================================
0001C982                            
0001C982                            loc_1AFC2:
0001C982 0668 0100 0012             		addi.w	#$100,$12(a0)
0001C988 4E75                       		rts	
0001C98A                            ; ===========================================================================
0001C98A                            
0001C98A                            loc_1AFCA:
0001C98A 0468 0100 0012             		subi.w	#$100,$12(a0)
0001C990 4E75                       		rts	
0001C992                            ; ===========================================================================
0001C992 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001C99A                            ; ===========================================================================
0001C99A                            
0001C99A                            loc_1AFDA:				; XREF: Touch_CatKiller
0001C99A 08E9 0007 0022             		bset	#7,$22(a1)
0001C9A0                            
0001C9A0                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001C9A0 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001C9A4 6700                       		beq.s	Touch_Hurt	; if not, branch
0001C9A6                            
0001C9A6                            loc_1AFE6:				; XREF: Touch_Hurt
0001C9A6 70FF                       		moveq	#-1,d0
0001C9A8 4E75                       		rts	
0001C9AA                            ; ===========================================================================
0001C9AA                            
0001C9AA                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001C9AA 4E71                       		nop	
0001C9AC 4A68 0030                  		tst.w	$30(a0)
0001C9B0 66F4                       		bne.s	loc_1AFE6
0001C9B2 2449                       		movea.l	a1,a2
0001C9B4                            
0001C9B4                            ; End of function TouchResponse
0001C9B4                            ; continue straight to HurtSonic
0001C9B4                            
0001C9B4                            ; ---------------------------------------------------------------------------
0001C9B4                            ; Hurting Sonic	subroutine
0001C9B4                            ; ---------------------------------------------------------------------------
0001C9B4                            
0001C9B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C9B4                            
0001C9B4                            
0001C9B4                            HurtSonic:
0001C9B4 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001C9B8 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001C9BA 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001C9BE 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001C9C2 4EB9 0000 E5A6             		jsr	SingleObjLoad
0001C9C8 6600                       		bne.s	Hurt_Shield
0001C9CA 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001C9CE 3368 0008 0008             		move.w	8(a0),8(a1)
0001C9D4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C9DA                            
0001C9DA                            Hurt_Shield:
0001C9DA 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001C9E0 117C 0004 0024             		move.b	#4,$24(a0)
0001C9E6 4EB9 0001 4998             		jsr	Sonic_ResetOnFloor
0001C9EC 08E8 0001 0022             		bset	#1,$22(a0)
0001C9F2 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001C9F8 317C FE00 0010             		move.w	#-$200,$10(a0)
0001C9FE 0828 0006 0022             		btst	#6,$22(a0)
0001CA04 6700                       		beq.s	Hurt_Reverse
0001CA06 317C FE00 0012             		move.w	#-$200,$12(a0)
0001CA0C 317C FF00 0010             		move.w	#-$100,$10(a0)
0001CA12                            
0001CA12                            Hurt_Reverse:
0001CA12 3028 0008                  		move.w	8(a0),d0
0001CA16 B06A 0008                  		cmp.w	8(a2),d0
0001CA1A 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001CA1C 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001CA20                            
0001CA20                            Hurt_ChkSpikes:
0001CA20 117C 0000 0039             		move.b	#0,$39(a0)	; clear Spin Dash flag
0001CA26 317C 0000 0014             		move.w	#0,$14(a0)
0001CA2C 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001CA32 317C 0078 0030             		move.w	#$78,$30(a0)
0001CA38 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001CA3C 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001CA40 6600                       		bne.s	Hurt_Sound	; if not, branch
0001CA42 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001CA46 6600                       		bne.s	Hurt_Sound	; if not, branch
0001CA48 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001CA4C                            
0001CA4C                            Hurt_Sound:
0001CA4C 4EB9 0000 1476             		jsr	(PlaySound_Special).l
0001CA52 70FF                       		moveq	#-1,d0
0001CA54 4E75                       		rts	
0001CA56                            ; ===========================================================================
0001CA56                            
0001CA56                            Hurt_NoRings:
0001CA56 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001CA5A 6600 FF7E                  		bne.w	Hurt_Shield	; if yes, branch
0001CA5E                            ; End of function HurtSonic
0001CA5E                            
0001CA5E                            ; ---------------------------------------------------------------------------
0001CA5E                            ; Subroutine to	kill Sonic
0001CA5E                            ; ---------------------------------------------------------------------------
0001CA5E                            
0001CA5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA5E                            
0001CA5E                            
0001CA5E                            KillSonic:
0001CA5E 4238 FE19                  		clr.b   (Super_Sonic_Flag).w ; Revert Sonic to Normal
0001CA62 31FC 0600 F760             		move.w  #$600,(Sonic_top_speed).w ; Revert speeds
0001CA68 31FC 000C F762             		move.w  #$C,(Sonic_acceleration).w ; ^^^
0001CA6E 31FC 0080 F764             		move.w  #$80,(Sonic_deceleration).w ; ^^^
0001CA74 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001CA78 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001CA7A 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001CA80 117C 0006 0024             		move.b	#6,$24(a0)
0001CA86 4EB9 0001 4998             		jsr	Sonic_ResetOnFloor
0001CA8C 08E8 0001 0022             		bset	#1,$22(a0)
0001CA92 317C F900 0012             		move.w	#-$700,$12(a0)
0001CA98 317C 0000 0010             		move.w	#0,$10(a0)
0001CA9E 317C 0000 0014             		move.w	#0,$14(a0)
0001CAA4 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001CAAA 117C 0016 001C             		move.b	#$16,$1C(a0)
0001CAB0 08E8 0007 0002             		bset	#7,2(a0)
0001CAB6 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001CABA 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001CABE 6600                       		bne.s	Kill_Sound
0001CAC0 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001CAC4                            
0001CAC4                            Kill_Sound:
0001CAC4 4EB9 0000 1476             		jsr	(PlaySound_Special).l
0001CACA                            
0001CACA                            Kill_NoDeath:
0001CACA 70FF                       		moveq	#-1,d0
0001CACC 4E75                       		rts	
0001CACE                            ; End of function KillSonic
0001CACE                            
0001CACE                            
0001CACE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CACE                            
0001CACE                            
0001CACE                            Touch_Special:				; XREF: Touch_ChkValue
0001CACE 1229 0020                  		move.b	$20(a1),d1
0001CAD2 0201 003F                  		andi.b	#$3F,d1
0001CAD6 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001CADA 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001CADC 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001CAE0 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001CAE2 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001CAE6 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001CAE8 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001CAEC 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001CAEE 4E75                       		rts	
0001CAF0                            ; ===========================================================================
0001CAF0                            
0001CAF0                            Touch_CatKiller:			; XREF: Touch_Special
0001CAF0 6000 FEA8                  		bra.w	loc_1AFDA
0001CAF4                            ; ===========================================================================
0001CAF4                            
0001CAF4                            Touch_Yadrin:				; XREF: Touch_Special
0001CAF4 9A40                       		sub.w	d0,d5
0001CAF6 0C45 0008                  		cmpi.w	#8,d5
0001CAFA 6400                       		bcc.s	loc_1B144
0001CAFC 3029 0008                  		move.w	8(a1),d0
0001CB00 5940                       		subq.w	#4,d0
0001CB02 0829 0000 0022             		btst	#0,$22(a1)
0001CB08 6700                       		beq.s	loc_1B130
0001CB0A 0440 0010                  		subi.w	#$10,d0
0001CB0E                            
0001CB0E                            loc_1B130:
0001CB0E 9042                       		sub.w	d2,d0
0001CB10 6400                       		bcc.s	loc_1B13C
0001CB12 0640 0018                  		addi.w	#$18,d0
0001CB16 6500                       		bcs.s	loc_1B140
0001CB18 6000                       		bra.s	loc_1B144
0001CB1A                            ; ===========================================================================
0001CB1A                            
0001CB1A                            loc_1B13C:
0001CB1A B044                       		cmp.w	d4,d0
0001CB1C 6200                       		bhi.s	loc_1B144
0001CB1E                            
0001CB1E                            loc_1B140:
0001CB1E 6000 FE80                  		bra.w	Touch_ChkHurt
0001CB22                            ; ===========================================================================
0001CB22                            
0001CB22                            loc_1B144:
0001CB22 6000 FDC4                  		bra.w	Touch_Enemy
0001CB26                            ; ===========================================================================
0001CB26                            
0001CB26                            Touch_D7orE1:				; XREF: Touch_Special
0001CB26 5229 0021                  		addq.b	#1,$21(a1)
0001CB2A 4E75                       		rts	
0001CB2C                            ; End of function Touch_Special
0001CB2C                            
0001CB2C                            ; ---------------------------------------------------------------------------
0001CB2C                            ; Subroutine to	show the special stage layout
0001CB2C                            ; ---------------------------------------------------------------------------
0001CB2C                            
0001CB2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CB2C                            
0001CB2C                            
0001CB2C                            SS_ShowLayout:				; XREF: SpecialStage
0001CB2C 6100 0000                  		bsr.w	SS_AniWallsRings
0001CB30 6100 0000                  		bsr.w	SS_AniItems
0001CB34 3F05                       		move.w	d5,-(sp)
0001CB36 43F8 8000                  		lea	($FFFF8000).w,a1
0001CB3A 1038 F780                  		move.b	($FFFFF780).w,d0
0001CB3E                            ;		andi.b	#$FC,d0
0001CB3E 4EB9 0000 33D4             		jsr	(CalcSine).l
0001CB44 3800                       		move.w	d0,d4
0001CB46 3A01                       		move.w	d1,d5
0001CB48 C9FC 0018                  		muls.w	#$18,d4
0001CB4C CBFC 0018                  		muls.w	#$18,d5
0001CB50 7400                       		moveq	#0,d2
0001CB52 3438 F700                  		move.w	($FFFFF700).w,d2
0001CB56 84FC 0018                  		divu.w	#$18,d2
0001CB5A 4842                       		swap	d2
0001CB5C 4442                       		neg.w	d2
0001CB5E 0642 FF4C                  		addi.w	#-$B4,d2
0001CB62 7600                       		moveq	#0,d3
0001CB64 3638 F704                  		move.w	($FFFFF704).w,d3
0001CB68 86FC 0018                  		divu.w	#$18,d3
0001CB6C 4843                       		swap	d3
0001CB6E 4443                       		neg.w	d3
0001CB70 0643 FF4C                  		addi.w	#-$B4,d3
0001CB74 3E3C 000F                  		move.w	#$F,d7
0001CB78                            
0001CB78                            loc_1B19E:
0001CB78 48A7 E000                  		movem.w	d0-d2,-(sp)
0001CB7C 48A7 C000                  		movem.w	d0-d1,-(sp)
0001CB80 4440                       		neg.w	d0
0001CB82 C3C2                       		muls.w	d2,d1
0001CB84 C1C3                       		muls.w	d3,d0
0001CB86 2C00                       		move.l	d0,d6
0001CB88 DC81                       		add.l	d1,d6
0001CB8A 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001CB8E C1C2                       		muls.w	d2,d0
0001CB90 C3C3                       		muls.w	d3,d1
0001CB92 D280                       		add.l	d0,d1
0001CB94 2406                       		move.l	d6,d2
0001CB96 3C3C 000F                  		move.w	#$F,d6
0001CB9A                            
0001CB9A                            loc_1B1C0:
0001CB9A 2002                       		move.l	d2,d0
0001CB9C E080                       		asr.l	#8,d0
0001CB9E 32C0                       		move.w	d0,(a1)+
0001CBA0 2001                       		move.l	d1,d0
0001CBA2 E080                       		asr.l	#8,d0
0001CBA4 32C0                       		move.w	d0,(a1)+
0001CBA6 D485                       		add.l	d5,d2
0001CBA8 D284                       		add.l	d4,d1
0001CBAA 51CE FFEE                  		dbf	d6,loc_1B1C0
0001CBAE                            
0001CBAE 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001CBB2 0643 0018                  		addi.w	#$18,d3
0001CBB6 51CF FFC0                  		dbf	d7,loc_1B19E
0001CBBA                            
0001CBBA 3A1F                       		move.w	(sp)+,d5
0001CBBC 41F9 00FF 0000             		lea	($FF0000).l,a0
0001CBC2 7000                       		moveq	#0,d0
0001CBC4 3038 F704                  		move.w	($FFFFF704).w,d0
0001CBC8 80FC 0018                  		divu.w	#$18,d0
0001CBCC C0FC 0080                  		mulu.w	#$80,d0
0001CBD0 D1C0                       		adda.l	d0,a0
0001CBD2 7000                       		moveq	#0,d0
0001CBD4 3038 F700                  		move.w	($FFFFF700).w,d0
0001CBD8 80FC 0018                  		divu.w	#$18,d0
0001CBDC D0C0                       		adda.w	d0,a0
0001CBDE 49F8 8000                  		lea	($FFFF8000).w,a4
0001CBE2 3E3C 000F                  		move.w	#$F,d7
0001CBE6                            
0001CBE6                            loc_1B20C:
0001CBE6 3C3C 000F                  		move.w	#$F,d6
0001CBEA                            
0001CBEA                            loc_1B210:
0001CBEA 7000                       		moveq	#0,d0
0001CBEC 1018                       		move.b	(a0)+,d0
0001CBEE 6700                       		beq.s	loc_1B268
0001CBF0 0C00 004E                  		cmpi.b	#$4E,d0
0001CBF4 6200                       		bhi.s	loc_1B268
0001CBF6 3614                       		move.w	(a4),d3
0001CBF8 0643 0120                  		addi.w	#$120,d3
0001CBFC 0C43 0070                  		cmpi.w	#$70,d3
0001CC00 6500                       		bcs.s	loc_1B268
0001CC02 0C43 01D0                  		cmpi.w	#$1D0,d3
0001CC06 6400                       		bcc.s	loc_1B268
0001CC08 342C 0002                  		move.w	2(a4),d2
0001CC0C 0642 00F0                  		addi.w	#$F0,d2
0001CC10 0C42 0070                  		cmpi.w	#$70,d2
0001CC14 6500                       		bcs.s	loc_1B268
0001CC16 0C42 0170                  		cmpi.w	#$170,d2
0001CC1A 6400                       		bcc.s	loc_1B268
0001CC1C 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001CC22 E748                       		lsl.w	#3,d0
0001CC24 4BF5 0000                  		lea	(a5,d0.w),a5
0001CC28 225D                       		movea.l	(a5)+,a1
0001CC2A 321D                       		move.w	(a5)+,d1
0001CC2C D241                       		add.w	d1,d1
0001CC2E D2F1 1000                  		adda.w	(a1,d1.w),a1
0001CC32 365D                       		movea.w	(a5)+,a3
0001CC34 7200                       		moveq	#0,d1
0001CC36 1219                       		move.b	(a1)+,d1
0001CC38 5301                       		subq.b	#1,d1
0001CC3A 6B00                       		bmi.s	loc_1B268
0001CC3C 4EB9 0000 E270             		jsr	sub_D762
0001CC42                            
0001CC42                            loc_1B268:
0001CC42 584C                       		addq.w	#4,a4
0001CC44 51CE FFA4                  		dbf	d6,loc_1B210
0001CC48                            
0001CC48 41E8 0070                  		lea	$70(a0),a0
0001CC4C 51CF FF98                  		dbf	d7,loc_1B20C
0001CC50                            
0001CC50 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001CC54 0C05 0050                  		cmpi.b	#$50,d5
0001CC58 6700                       		beq.s	loc_1B288
0001CC5A 24BC 0000 0000             		move.l	#0,(a2)
0001CC60 4E75                       		rts	
0001CC62                            ; ===========================================================================
0001CC62                            
0001CC62                            loc_1B288:
0001CC62 157C 0000 FFFB             		move.b	#0,-5(a2)
0001CC68 4E75                       		rts	
0001CC6A                            ; End of function SS_ShowLayout
0001CC6A                            
0001CC6A                            ; ---------------------------------------------------------------------------
0001CC6A                            ; Subroutine to	animate	walls and rings	in the special stage
0001CC6A                            ; ---------------------------------------------------------------------------
0001CC6A                            
0001CC6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC6A                            
0001CC6A                            
0001CC6A                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001CC6A 43F9 00FF 400C             		lea	($FF400C).l,a1
0001CC70 7000                       		moveq	#0,d0
0001CC72 1038 F780                  		move.b	($FFFFF780).w,d0
0001CC76 E408                       		lsr.b	#2,d0
0001CC78 0240 000F                  		andi.w	#$F,d0
0001CC7C 7223                       		moveq	#$23,d1
0001CC7E                            
0001CC7E                            loc_1B2A4:
0001CC7E 3280                       		move.w	d0,(a1)
0001CC80 5049                       		addq.w	#8,a1
0001CC82 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001CC86                            
0001CC86 43F9 00FF 4005             		lea	($FF4005).l,a1
0001CC8C 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001CC90 6A00                       		bpl.s	loc_1B2C8
0001CC92 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001CC98 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001CC9C 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001CCA2                            
0001CCA2                            loc_1B2C8:
0001CCA2 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001CCA8 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001CCAC 6A00                       		bpl.s	loc_1B2E4
0001CCAE 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001CCB4 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001CCB8 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001CCBE                            
0001CCBE                            loc_1B2E4:
0001CCBE 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001CCC2 1340 0138                  		move.b	d0,$138(a1)
0001CCC6 1340 0160                  		move.b	d0,$160(a1)
0001CCCA 1340 0148                  		move.b	d0,$148(a1)
0001CCCE 1340 0150                  		move.b	d0,$150(a1)
0001CCD2 1340 01D8                  		move.b	d0,$1D8(a1)
0001CCD6 1340 01E0                  		move.b	d0,$1E0(a1)
0001CCDA 1340 01E8                  		move.b	d0,$1E8(a1)
0001CCDE 1340 01F0                  		move.b	d0,$1F0(a1)
0001CCE2 1340 01F8                  		move.b	d0,$1F8(a1)
0001CCE6 1340 0200                  		move.b	d0,$200(a1)
0001CCEA 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001CCEE 6A00                       		bpl.s	loc_1B326
0001CCF0 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001CCF6 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001CCFA 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001CD00                            
0001CD00                            loc_1B326:
0001CD00 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001CD04 1340 0168                  		move.b	d0,$168(a1)
0001CD08 1340 0170                  		move.b	d0,$170(a1)
0001CD0C 1340 0178                  		move.b	d0,$178(a1)
0001CD10 1340 0180                  		move.b	d0,$180(a1)
0001CD14 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001CD18 6A00                       		bpl.s	loc_1B350
0001CD1A 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001CD20 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001CD24 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001CD2A                            
0001CD2A                            loc_1B350:
0001CD2A 43F9 00FF 4016             		lea	($FF4016).l,a1
0001CD30 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001CD36 7000                       		moveq	#0,d0
0001CD38 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001CD3C D040                       		add.w	d0,d0
0001CD3E 41F0 0000                  		lea	(a0,d0.w),a0
0001CD42 3290                       		move.w	(a0),(a1)
0001CD44 3368 0002 0008             		move.w	2(a0),8(a1)
0001CD4A 3368 0004 0010             		move.w	4(a0),$10(a1)
0001CD50 3368 0006 0018             		move.w	6(a0),$18(a1)
0001CD56 3368 0008 0020             		move.w	8(a0),$20(a1)
0001CD5C 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001CD62 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001CD68 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001CD6E D0FC 0020                  		adda.w	#$20,a0
0001CD72 D2FC 0048                  		adda.w	#$48,a1
0001CD76 3290                       		move.w	(a0),(a1)
0001CD78 3368 0002 0008             		move.w	2(a0),8(a1)
0001CD7E 3368 0004 0010             		move.w	4(a0),$10(a1)
0001CD84 3368 0006 0018             		move.w	6(a0),$18(a1)
0001CD8A 3368 0008 0020             		move.w	8(a0),$20(a1)
0001CD90 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001CD96 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001CD9C 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001CDA2 D0FC 0020                  		adda.w	#$20,a0
0001CDA6 D2FC 0048                  		adda.w	#$48,a1
0001CDAA 3290                       		move.w	(a0),(a1)
0001CDAC 3368 0002 0008             		move.w	2(a0),8(a1)
0001CDB2 3368 0004 0010             		move.w	4(a0),$10(a1)
0001CDB8 3368 0006 0018             		move.w	6(a0),$18(a1)
0001CDBE 3368 0008 0020             		move.w	8(a0),$20(a1)
0001CDC4 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001CDCA 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001CDD0 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001CDD6 D0FC 0020                  		adda.w	#$20,a0
0001CDDA D2FC 0048                  		adda.w	#$48,a1
0001CDDE 3290                       		move.w	(a0),(a1)
0001CDE0 3368 0002 0008             		move.w	2(a0),8(a1)
0001CDE6 3368 0004 0010             		move.w	4(a0),$10(a1)
0001CDEC 3368 0006 0018             		move.w	6(a0),$18(a1)
0001CDF2 3368 0008 0020             		move.w	8(a0),$20(a1)
0001CDF8 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001CDFE 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001CE04 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001CE0A D0FC 0020                  		adda.w	#$20,a0
0001CE0E D2FC 0048                  		adda.w	#$48,a1
0001CE12 4E75                       		rts	
0001CE14                            ; End of function SS_AniWallsRings
0001CE14                            
0001CE14                            ; ===========================================================================
0001CE14 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001CE24 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001CE34 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001CE44 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001CE54 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001CE64 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001CE74 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001CE84 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001CE94                            ; ---------------------------------------------------------------------------
0001CE94                            ; Subroutine to	remove items when you collect them in the special stage
0001CE94                            ; ---------------------------------------------------------------------------
0001CE94                            
0001CE94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE94                            
0001CE94                            
0001CE94                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001CE94 45F9 00FF 4400             		lea	($FF4400).l,a2
0001CE9A 303C 001F                  		move.w	#$1F,d0
0001CE9E                            
0001CE9E                            loc_1B4C4:
0001CE9E 4A12                       		tst.b	(a2)
0001CEA0 6700                       		beq.s	locret_1B4CE
0001CEA2 504A                       		addq.w	#8,a2
0001CEA4 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001CEA8                            
0001CEA8                            locret_1B4CE:
0001CEA8 4E75                       		rts	
0001CEAA                            ; End of function SS_RemoveCollectedItem
0001CEAA                            
0001CEAA                            ; ---------------------------------------------------------------------------
0001CEAA                            ; Subroutine to	animate	special	stage items when you touch them
0001CEAA                            ; ---------------------------------------------------------------------------
0001CEAA                            
0001CEAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CEAA                            
0001CEAA                            
0001CEAA                            SS_AniItems:				; XREF: SS_ShowLayout
0001CEAA 41F9 00FF 4400             		lea	($FF4400).l,a0
0001CEB0 3E3C 001F                  		move.w	#$1F,d7
0001CEB4                            
0001CEB4                            loc_1B4DA:
0001CEB4 7000                       		moveq	#0,d0
0001CEB6 1010                       		move.b	(a0),d0
0001CEB8 6700                       		beq.s	loc_1B4E8
0001CEBA E548                       		lsl.w	#2,d0
0001CEBC 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001CEC0 4E91                       		jsr	(a1)
0001CEC2                            
0001CEC2                            loc_1B4E8:
0001CEC2 5048                       		addq.w	#8,a0
0001CEC4                            
0001CEC4                            loc_1B4EA:
0001CEC4 51CF FFEE                  		dbf	d7,loc_1B4DA
0001CEC8                            
0001CEC8 4E75                       		rts	
0001CECA                            ; End of function SS_AniItems
0001CECA                            
0001CECA                            ; ===========================================================================
0001CECA 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001CECE 0000 0000                  		dc.l SS_AniBumper
0001CED2 0000 0000                  		dc.l SS_Ani1Up
0001CED6 0000 0000                  		dc.l SS_AniReverse
0001CEDA 0000 0000                  		dc.l SS_AniEmeraldSparks
0001CEDE 0000 0000                  		dc.l SS_AniGlassBlock
0001CEE2                            ; ===========================================================================
0001CEE2                            
0001CEE2                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001CEE2 5328 0002                  		subq.b	#1,2(a0)
0001CEE6 6A00                       		bpl.s	locret_1B530
0001CEE8 117C 0005 0002             		move.b	#5,2(a0)
0001CEEE 7000                       		moveq	#0,d0
0001CEF0 1028 0003                  		move.b	3(a0),d0
0001CEF4 5228 0003                  		addq.b	#1,3(a0)
0001CEF8 2268 0004                  		movea.l	4(a0),a1
0001CEFC 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001CF00 1280                       		move.b	d0,(a1)
0001CF02 6600                       		bne.s	locret_1B530
0001CF04 4290                       		clr.l	(a0)
0001CF06 42A8 0004                  		clr.l	4(a0)
0001CF0A                            
0001CF0A                            locret_1B530:
0001CF0A 4E75                       		rts	
0001CF0C                            ; ===========================================================================
0001CF0C 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001CF12                            ; ===========================================================================
0001CF12                            
0001CF12                            SS_AniBumper:				; XREF: SS_AniIndex
0001CF12 5328 0002                  		subq.b	#1,2(a0)
0001CF16 6A00                       		bpl.s	locret_1B566
0001CF18 117C 0007 0002             		move.b	#7,2(a0)
0001CF1E 7000                       		moveq	#0,d0
0001CF20 1028 0003                  		move.b	3(a0),d0
0001CF24 5228 0003                  		addq.b	#1,3(a0)
0001CF28 2268 0004                  		movea.l	4(a0),a1
0001CF2C 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001CF30 6600                       		bne.s	loc_1B564
0001CF32 4290                       		clr.l	(a0)
0001CF34 42A8 0004                  		clr.l	4(a0)
0001CF38 12BC 0025                  		move.b	#$25,(a1)
0001CF3C 4E75                       		rts	
0001CF3E                            ; ===========================================================================
0001CF3E                            
0001CF3E                            loc_1B564:
0001CF3E 1280                       		move.b	d0,(a1)
0001CF40                            
0001CF40                            locret_1B566:
0001CF40 4E75                       		rts	
0001CF42                            ; ===========================================================================
0001CF42 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001CF48                            ; ===========================================================================
0001CF48                            
0001CF48                            SS_Ani1Up:				; XREF: SS_AniIndex
0001CF48 5328 0002                  		subq.b	#1,2(a0)
0001CF4C 6A00                       		bpl.s	locret_1B596
0001CF4E 117C 0005 0002             		move.b	#5,2(a0)
0001CF54 7000                       		moveq	#0,d0
0001CF56 1028 0003                  		move.b	3(a0),d0
0001CF5A 5228 0003                  		addq.b	#1,3(a0)
0001CF5E 2268 0004                  		movea.l	4(a0),a1
0001CF62 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001CF66 1280                       		move.b	d0,(a1)
0001CF68 6600                       		bne.s	locret_1B596
0001CF6A 4290                       		clr.l	(a0)
0001CF6C 42A8 0004                  		clr.l	4(a0)
0001CF70                            
0001CF70                            locret_1B596:
0001CF70 4E75                       		rts	
0001CF72                            ; ===========================================================================
0001CF72 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001CF78                            ; ===========================================================================
0001CF78                            
0001CF78                            SS_AniReverse:				; XREF: SS_AniIndex
0001CF78 5328 0002                  		subq.b	#1,2(a0)
0001CF7C 6A00                       		bpl.s	locret_1B5CC
0001CF7E 117C 0007 0002             		move.b	#7,2(a0)
0001CF84 7000                       		moveq	#0,d0
0001CF86 1028 0003                  		move.b	3(a0),d0
0001CF8A 5228 0003                  		addq.b	#1,3(a0)
0001CF8E 2268 0004                  		movea.l	4(a0),a1
0001CF92 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001CF96 6600                       		bne.s	loc_1B5CA
0001CF98 4290                       		clr.l	(a0)
0001CF9A 42A8 0004                  		clr.l	4(a0)
0001CF9E 12BC 002B                  		move.b	#$2B,(a1)
0001CFA2 4E75                       		rts	
0001CFA4                            ; ===========================================================================
0001CFA4                            
0001CFA4                            loc_1B5CA:
0001CFA4 1280                       		move.b	d0,(a1)
0001CFA6                            
0001CFA6                            locret_1B5CC:
0001CFA6 4E75                       		rts	
0001CFA8                            ; ===========================================================================
0001CFA8 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001CFAE                            ; ===========================================================================
0001CFAE                            
0001CFAE                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001CFAE 5328 0002                  		subq.b	#1,2(a0)
0001CFB2 6A00                       		bpl.s	locret_1B60C
0001CFB4 117C 0005 0002             		move.b	#5,2(a0)
0001CFBA 7000                       		moveq	#0,d0
0001CFBC 1028 0003                  		move.b	3(a0),d0
0001CFC0 5228 0003                  		addq.b	#1,3(a0)
0001CFC4 2268 0004                  		movea.l	4(a0),a1
0001CFC8 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001CFCC 1280                       		move.b	d0,(a1)
0001CFCE 6600                       		bne.s	locret_1B60C
0001CFD0 4290                       		clr.l	(a0)
0001CFD2 42A8 0004                  		clr.l	4(a0)
0001CFD6 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001CFDC 303C 00A8                  		move.w	#$A8,d0
0001CFE0 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001CFE6                            
0001CFE6                            locret_1B60C:
0001CFE6 4E75                       		rts	
0001CFE8                            ; ===========================================================================
0001CFE8 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001CFEE                            ; ===========================================================================
0001CFEE                            
0001CFEE                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001CFEE 5328 0002                  		subq.b	#1,2(a0)
0001CFF2 6A00                       		bpl.s	locret_1B640
0001CFF4 117C 0001 0002             		move.b	#1,2(a0)
0001CFFA 7000                       		moveq	#0,d0
0001CFFC 1028 0003                  		move.b	3(a0),d0
0001D000 5228 0003                  		addq.b	#1,3(a0)
0001D004 2268 0004                  		movea.l	4(a0),a1
0001D008 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001D00C 1280                       		move.b	d0,(a1)
0001D00E 6600                       		bne.s	locret_1B640
0001D010 12A8 0004                  		move.b	4(a0),(a1)
0001D014 4290                       		clr.l	(a0)
0001D016 42A8 0004                  		clr.l	4(a0)
0001D01A                            
0001D01A                            locret_1B640:
0001D01A 4E75                       		rts	
0001D01C                            ; ===========================================================================
0001D01C 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001D026                            ; ---------------------------------------------------------------------------
0001D026                            ; Special stage	layout pointers
0001D026                            ; ---------------------------------------------------------------------------
0001D026                            SS_LayoutIndex:
0001D026                            	include "_inc\Special stage layout pointers.asm"
0001D026                            ; ---------------------------------------------------------------------------
0001D026                            ; Special stage	layout pointers
0001D026                            ; ---------------------------------------------------------------------------
0001D026 0000 0000                  	dc.l SS_1
0001D02A 0000 0000                  	dc.l SS_2
0001D02E 0000 0000                  	dc.l SS_3
0001D032 0000 0000                  	dc.l SS_4
0001D036 0000 0000                  	dc.l SS_5
0001D03A 0000 0000                  	dc.l SS_6
0001D03E                            	even
0001D03E                            	even
0001D03E                            
0001D03E                            ; ---------------------------------------------------------------------------
0001D03E                            ; Special stage	start locations
0001D03E                            ; ---------------------------------------------------------------------------
0001D03E                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001D056                            		even
0001D056                            
0001D056                            ; ---------------------------------------------------------------------------
0001D056                            ; Subroutine to	load special stage layout
0001D056                            ; ---------------------------------------------------------------------------
0001D056                            
0001D056                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D056                            
0001D056                            
0001D056                            SS_Load:				; XREF: SpecialStage
0001D056 7000                       		moveq	#0,d0
0001D058 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001D05C 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001D060 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001D066 6500                       		bcs.s	SS_ChkEmldNum
0001D068 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001D06E                            
0001D06E                            SS_ChkEmldNum:
0001D06E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001D074 6700                       		beq.s	SS_LoadData	; if yes, branch
0001D076 7200                       		moveq	#0,d1
0001D078 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001D07C 5301                       		subq.b	#1,d1
0001D07E 6500                       		bcs.s	SS_LoadData
0001D080 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001D084                            
0001D084                            SS_ChkEmldLoop:	
0001D084 B033 1000                  		cmp.b	(a3,d1.w),d0
0001D088 6600                       		bne.s	SS_ChkEmldRepeat
0001D08A 60CA                       		bra.s	SS_Load
0001D08C                            ; ===========================================================================
0001D08C                            
0001D08C                            SS_ChkEmldRepeat:
0001D08C 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001D090                            
0001D090                            SS_LoadData:
0001D090 E548                       		lsl.w	#2,d0
0001D092 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001D096 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001D09A 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001D09E 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001D0A2 43F9 00FF 4000             		lea	($FF4000).l,a1
0001D0A8 303C 0000                  		move.w	#0,d0
0001D0AC 4EB9 0000 1888             		jsr	(EniDec).l
0001D0B2 43F9 00FF 0000             		lea	($FF0000).l,a1
0001D0B8 303C 0FFF                  		move.w	#$FFF,d0
0001D0BC                            
0001D0BC                            SS_ClrRAM3:
0001D0BC 4299                       		clr.l	(a1)+
0001D0BE 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001D0C2                            
0001D0C2 43F9 00FF 1020             		lea	($FF1020).l,a1
0001D0C8 41F9 00FF 4000             		lea	($FF4000).l,a0
0001D0CE 723F                       		moveq	#$3F,d1
0001D0D0                            
0001D0D0                            loc_1B6F6:
0001D0D0 743F                       		moveq	#$3F,d2
0001D0D2                            
0001D0D2                            loc_1B6F8:
0001D0D2 12D8                       		move.b	(a0)+,(a1)+
0001D0D4 51CA FFFC                  		dbf	d2,loc_1B6F8
0001D0D8                            
0001D0D8 43E9 0040                  		lea	$40(a1),a1
0001D0DC 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001D0E0                            
0001D0E0 43F9 00FF 4008             		lea	($FF4008).l,a1
0001D0E6 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001D0EC 724D                       		moveq	#$4D,d1
0001D0EE                            
0001D0EE                            loc_1B714:
0001D0EE 22D8                       		move.l	(a0)+,(a1)+
0001D0F0 32FC 0000                  		move.w	#0,(a1)+
0001D0F4 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001D0FA 32D8                       		move.w	(a0)+,(a1)+
0001D0FC 51C9 FFF0                  		dbf	d1,loc_1B714
0001D100                            
0001D100 43F9 00FF 4400             		lea	($FF4400).l,a1
0001D106 323C 003F                  		move.w	#$3F,d1
0001D10A                            
0001D10A                            loc_1B730:
0001D10A                            
0001D10A 4299                       		clr.l	(a1)+
0001D10C 51C9 FFFC                  		dbf	d1,loc_1B730
0001D110                            
0001D110 4E75                       		rts	
0001D112                            ; End of function SS_Load
0001D112                            
0001D112                            ; ===========================================================================
0001D112                            ; ---------------------------------------------------------------------------
0001D112                            ; Special stage	mappings and VRAM pointers
0001D112                            ; ---------------------------------------------------------------------------
0001D112                            SS_MapIndex:
0001D112                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001D112                            ; ---------------------------------------------------------------------------
0001D112                            ; Special stage	mappings and VRAM pointers
0001D112                            ; ---------------------------------------------------------------------------
0001D112 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001D116 0142                       	dc.w $142		; VRAM setting
0001D118 0000 0000                  	dc.l Map_SSWalls
0001D11C 0142                       	dc.w $142
0001D11E 0000 0000                  	dc.l Map_SSWalls
0001D122 0142                       	dc.w $142
0001D124 0000 0000                  	dc.l Map_SSWalls
0001D128 0142                       	dc.w $142
0001D12A 0000 0000                  	dc.l Map_SSWalls
0001D12E 0142                       	dc.w $142
0001D130 0000 0000                  	dc.l Map_SSWalls
0001D134 0142                       	dc.w $142
0001D136 0000 0000                  	dc.l Map_SSWalls
0001D13A 0142                       	dc.w $142
0001D13C 0000 0000                  	dc.l Map_SSWalls
0001D140 0142                       	dc.w $142
0001D142 0000 0000                  	dc.l Map_SSWalls
0001D146 0142                       	dc.w $142
0001D148 0000 0000                  	dc.l Map_SSWalls
0001D14C 2142                       	dc.w $2142
0001D14E 0000 0000                  	dc.l Map_SSWalls
0001D152 2142                       	dc.w $2142
0001D154 0000 0000                  	dc.l Map_SSWalls
0001D158 2142                       	dc.w $2142
0001D15A 0000 0000                  	dc.l Map_SSWalls
0001D15E 2142                       	dc.w $2142
0001D160 0000 0000                  	dc.l Map_SSWalls
0001D164 2142                       	dc.w $2142
0001D166 0000 0000                  	dc.l Map_SSWalls
0001D16A 2142                       	dc.w $2142
0001D16C 0000 0000                  	dc.l Map_SSWalls
0001D170 2142                       	dc.w $2142
0001D172 0000 0000                  	dc.l Map_SSWalls
0001D176 2142                       	dc.w $2142
0001D178 0000 0000                  	dc.l Map_SSWalls
0001D17C 2142                       	dc.w $2142
0001D17E 0000 0000                  	dc.l Map_SSWalls
0001D182 4142                       	dc.w $4142
0001D184 0000 0000                  	dc.l Map_SSWalls
0001D188 4142                       	dc.w $4142
0001D18A 0000 0000                  	dc.l Map_SSWalls
0001D18E 4142                       	dc.w $4142
0001D190 0000 0000                  	dc.l Map_SSWalls
0001D194 4142                       	dc.w $4142
0001D196 0000 0000                  	dc.l Map_SSWalls
0001D19A 4142                       	dc.w $4142
0001D19C 0000 0000                  	dc.l Map_SSWalls
0001D1A0 4142                       	dc.w $4142
0001D1A2 0000 0000                  	dc.l Map_SSWalls
0001D1A6 4142                       	dc.w $4142
0001D1A8 0000 0000                  	dc.l Map_SSWalls
0001D1AC 4142                       	dc.w $4142
0001D1AE 0000 0000                  	dc.l Map_SSWalls
0001D1B2 4142                       	dc.w $4142
0001D1B4 0000 0000                  	dc.l Map_SSWalls
0001D1B8 6142                       	dc.w $6142
0001D1BA 0000 0000                  	dc.l Map_SSWalls
0001D1BE 6142                       	dc.w $6142
0001D1C0 0000 0000                  	dc.l Map_SSWalls
0001D1C4 6142                       	dc.w $6142
0001D1C6 0000 0000                  	dc.l Map_SSWalls
0001D1CA 6142                       	dc.w $6142
0001D1CC 0000 0000                  	dc.l Map_SSWalls
0001D1D0 6142                       	dc.w $6142
0001D1D2 0000 0000                  	dc.l Map_SSWalls
0001D1D6 6142                       	dc.w $6142
0001D1D8 0000 0000                  	dc.l Map_SSWalls
0001D1DC 6142                       	dc.w $6142
0001D1DE 0000 0000                  	dc.l Map_SSWalls
0001D1E2 6142                       	dc.w $6142
0001D1E4 0000 0000                  	dc.l Map_SSWalls
0001D1E8 6142                       	dc.w $6142
0001D1EA 0000 F618                  	dc.l Map_obj47
0001D1EE 023B                       	dc.w $23B
0001D1F0 0000 0000                  	dc.l Map_SS_R
0001D1F4 0570                       	dc.w $570
0001D1F6 0000 0000                  	dc.l Map_SS_R
0001D1FA 0251                       	dc.w $251
0001D1FC 0000 0000                  	dc.l Map_SS_R
0001D200 0370                       	dc.w $370
0001D202 0000 0000                  	dc.l Map_SS_Up
0001D206 0263                       	dc.w $263
0001D208 0000 0000                  	dc.l Map_SS_Down
0001D20C 0263                       	dc.w $263
0001D20E 0000 0000                  	dc.l Map_SS_R
0001D212 22F0                       	dc.w $22F0
0001D214 0000 0000                  	dc.l Map_SS_Glass
0001D218 0470                       	dc.w $470
0001D21A 0000 0000                  	dc.l Map_SS_Glass
0001D21E 05F0                       	dc.w $5F0
0001D220 0000 0000                  	dc.l Map_SS_Glass
0001D224 65F0                       	dc.w $65F0
0001D226 0000 0000                  	dc.l Map_SS_Glass
0001D22A 25F0                       	dc.w $25F0
0001D22C 0000 0000                  	dc.l Map_SS_Glass
0001D230 45F0                       	dc.w $45F0
0001D232 0000 0000                  	dc.l Map_SS_R
0001D236 02F0                       	dc.w $2F0
0001D238 0100 F618                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001D23C 023B                       	dc.w $23B
0001D23E 0200 F618                  	dc.l Map_obj47+$2000000
0001D242 023B                       	dc.w $23B
0001D244 0000 0000                  	dc.l Map_SS_R
0001D248 0797                       	dc.w $797
0001D24A 0000 0000                  	dc.l Map_SS_R
0001D24E 07A0                       	dc.w $7A0
0001D250 0000 0000                  	dc.l Map_SS_R
0001D254 07A9                       	dc.w $7A9
0001D256 0000 0000                  	dc.l Map_SS_R
0001D25A 0797                       	dc.w $797
0001D25C 0000 0000                  	dc.l Map_SS_R
0001D260 07A0                       	dc.w $7A0
0001D262 0000 0000                  	dc.l Map_SS_R
0001D266 07A9                       	dc.w $7A9
0001D268 0000 AA64                  	dc.l Map_obj25
0001D26C 27B2                       	dc.w $27B2
0001D26E 0000 0000                  	dc.l Map_SS_Chaos3
0001D272 0770                       	dc.w $770
0001D274 0000 0000                  	dc.l Map_SS_Chaos3
0001D278 2770                       	dc.w $2770
0001D27A 0000 0000                  	dc.l Map_SS_Chaos3
0001D27E 4770                       	dc.w $4770
0001D280 0000 0000                  	dc.l Map_SS_Chaos3
0001D284 6770                       	dc.w $6770
0001D286 0000 0000                  	dc.l Map_SS_Chaos1
0001D28A 0770                       	dc.w $770
0001D28C 0000 0000                  	dc.l Map_SS_Chaos2
0001D290 0770                       	dc.w $770
0001D292 0000 0000                  	dc.l Map_SS_R
0001D296 04F0                       	dc.w $4F0
0001D298 0400 AA64                  	dc.l Map_obj25+$4000000
0001D29C 27B2                       	dc.w $27B2
0001D29E 0500 AA64                  	dc.l Map_obj25+$5000000
0001D2A2 27B2                       	dc.w $27B2
0001D2A4 0600 AA64                  	dc.l Map_obj25+$6000000
0001D2A8 27B2                       	dc.w $27B2
0001D2AA 0700 AA64                  	dc.l Map_obj25+$7000000
0001D2AE 27B2                       	dc.w $27B2
0001D2B0 0000 0000                  	dc.l Map_SS_Glass
0001D2B4 23F0                       	dc.w $23F0
0001D2B6 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001D2BA 23F0                       	dc.w $23F0
0001D2BC 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001D2C0 23F0                       	dc.w $23F0
0001D2C2 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001D2C6 23F0                       	dc.w $23F0
0001D2C8 0000 0000                  	dc.l Map_SS_R+$2000000
0001D2CC 04F0                       	dc.w $4F0
0001D2CE 0000 0000                  	dc.l Map_SS_Glass
0001D2D2 05F0                       	dc.w $5F0
0001D2D4 0000 0000                  	dc.l Map_SS_Glass
0001D2D8 65F0                       	dc.w $65F0
0001D2DA 0000 0000                  	dc.l Map_SS_Glass
0001D2DE 25F0                       	dc.w $25F0
0001D2E0 0000 0000                  	dc.l Map_SS_Glass
0001D2E4 45F0                       	dc.w $45F0
0001D2E4 45F0                       	dc.w $45F0
0001D2E6                            
0001D2E6                            ; ---------------------------------------------------------------------------
0001D2E6                            ; Sprite mappings - special stage "R" block
0001D2E6                            ; ---------------------------------------------------------------------------
0001D2E6                            Map_SS_R:
0001D2E6                            	include "_maps\SSRblock.asm"
0001D2E6                            ; ---------------------------------------------------------------------------
0001D2E6                            ; Sprite mappings - special stage "R" block
0001D2E6                            ; ---------------------------------------------------------------------------
0001D2E6 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001D2EA 0000                       		dc.w byte_1B91E-Map_SS_R
0001D2EC 01                         byte_1B912:	dc.b 1
0001D2ED F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001D2F2 01                         byte_1B918:	dc.b 1
0001D2F3 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001D2F8 00                         byte_1B91E:	dc.b 0
0001D2FA 00                         		even
0001D2FA 00                         		even
0001D2FA                            
0001D2FA                            ; ---------------------------------------------------------------------------
0001D2FA                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001D2FA                            ; ---------------------------------------------------------------------------
0001D2FA                            Map_SS_Glass:
0001D2FA                            	include "_maps\SSglassblock.asm"
0001D2FA                            ; ---------------------------------------------------------------------------
0001D2FA                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001D2FA                            ; ---------------------------------------------------------------------------
0001D2FA 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001D2FE 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001D302 01                         byte_1B928:	dc.b 1
0001D303 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001D308 01                         byte_1B92E:	dc.b 1
0001D309 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001D30E 01                         byte_1B934:	dc.b 1
0001D30F F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001D314 01                         byte_1B93A:	dc.b 1
0001D315 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001D31A                            		even
0001D31A                            		even
0001D31A                            
0001D31A                            ; ---------------------------------------------------------------------------
0001D31A                            ; Sprite mappings - special stage "UP" block
0001D31A                            ; ---------------------------------------------------------------------------
0001D31A                            Map_SS_Up:
0001D31A                            	include "_maps\SSUPblock.asm"
0001D31A                            ; ---------------------------------------------------------------------------
0001D31A                            ; Sprite mappings - special stage "UP" block
0001D31A                            ; ---------------------------------------------------------------------------
0001D31A 0000                       		dc.w byte_1B944-Map_SS_Up
0001D31C 0000                       		dc.w byte_1B94A-Map_SS_Up
0001D31E 01                         byte_1B944:	dc.b 1
0001D31F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001D324 01                         byte_1B94A:	dc.b 1
0001D325 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001D32A                            		even
0001D32A                            		even
0001D32A                            
0001D32A                            ; ---------------------------------------------------------------------------
0001D32A                            ; Sprite mappings - special stage "DOWN" block
0001D32A                            ; ---------------------------------------------------------------------------
0001D32A                            Map_SS_Down:
0001D32A                            	include "_maps\SSDOWNblock.asm"
0001D32A                            ; ---------------------------------------------------------------------------
0001D32A                            ; Sprite mappings - special stage "DOWN" block
0001D32A                            ; ---------------------------------------------------------------------------
0001D32A 0000                       		dc.w byte_1B954-Map_SS_Down
0001D32C 0000                       		dc.w byte_1B95A-Map_SS_Down
0001D32E 01                         byte_1B954:	dc.b 1
0001D32F F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001D334 01                         byte_1B95A:	dc.b 1
0001D335 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001D33A                            		even
0001D33A                            		even
0001D33A                            
0001D33A                            ; ---------------------------------------------------------------------------
0001D33A                            ; Sprite mappings - special stage chaos	emeralds
0001D33A                            ; ---------------------------------------------------------------------------
0001D33A 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001D33C 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001D33E 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001D340 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001D342 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001D344 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001D346 01                         byte_1B96C:	dc.b 1
0001D347 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001D34C 01                         byte_1B972:	dc.b 1
0001D34D F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001D352 01                         byte_1B978:	dc.b 1
0001D353 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001D358 01                         byte_1B97E:	dc.b 1
0001D359 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001D35E                            		even
0001D35E                            ; ===========================================================================
0001D35E                            ; ---------------------------------------------------------------------------
0001D35E                            ; Object 09 - Sonic (special stage)
0001D35E                            ; ---------------------------------------------------------------------------
0001D35E                            
0001D35E                            Obj09:					; XREF: Obj_Index
0001D35E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001D362 6700                       		beq.s	Obj09_Normal	; if not, branch
0001D364 6100 0000                  		bsr.w	SS_FixCamera
0001D368 6000 0000                  		bra.w	DebugMode
0001D36C                            ; ===========================================================================
0001D36C                            
0001D36C                            Obj09_Normal:
0001D36C 7000                       		moveq	#0,d0
0001D36E 1028 0024                  		move.b	$24(a0),d0
0001D372 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001D376 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001D37A                            ; ===========================================================================
0001D37A 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001D37C 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001D37E 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001D380 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001D382                            ; ===========================================================================
0001D382                            
0001D382                            Obj09_Main:				; XREF: Obj09_Index
0001D382 5428 0024                  		addq.b	#2,$24(a0)
0001D386 117C 000E 0016             		move.b	#$E,$16(a0)
0001D38C 117C 0007 0017             		move.b	#7,$17(a0)
0001D392 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001D39A 317C 0780 0002             		move.w	#$780,2(a0)
0001D3A0 117C 0004 0001             		move.b	#4,1(a0)
0001D3A6 117C 0000 0018             		move.b	#0,$18(a0)
0001D3AC 117C 0002 001C             		move.b	#2,$1C(a0)
0001D3B2 08E8 0002 0022             		bset	#2,$22(a0)
0001D3B8 08E8 0001 0022             		bset	#1,$22(a0)
0001D3BE                            
0001D3BE                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001D3BE 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001D3C2 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001D3C4 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001D3CA 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001D3CC 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001D3D2                            
0001D3D2                            Obj09_NoDebug:
0001D3D2 117C 0000 0030             		move.b	#0,$30(a0)
0001D3D8 7000                       		moveq	#0,d0
0001D3DA 1028 0022                  		move.b	$22(a0),d0
0001D3DE 0240 0002                  		andi.w	#2,d0
0001D3E2 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001D3E6 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001D3EA 4EB9 0001 5108             		jsr	LoadSonicDynPLC
0001D3F0 4EF9 0000 E110             		jmp	DisplaySprite
0001D3F6                            ; ===========================================================================
0001D3F6 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001D3F8 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001D3FA                            ; ===========================================================================
0001D3FA                            
0001D3FA                            Obj09_OnWall:				; XREF: Obj09_Modes
0001D3FA 6100 0000                  		bsr.w	Obj09_Jump
0001D3FE 6100 0000                  		bsr.w	Obj09_Move
0001D402 6100 0000                  		bsr.w	Obj09_Fall
0001D406 6000                       		bra.s	Obj09_Display
0001D408                            ; ===========================================================================
0001D408                            
0001D408                            Obj09_InAir:				; XREF: Obj09_Modes
0001D408 6100 0000                  		bsr.w	nullsub_2
0001D40C 6100 0000                  		bsr.w	Obj09_Move
0001D410 6100 0000                  		bsr.w	Obj09_Fall
0001D414                            
0001D414                            Obj09_Display:				; XREF: Obj09_OnWall
0001D414 6100 0000                  		bsr.w	Obj09_ChkItems
0001D418 6100 0000                  		bsr.w	Obj09_ChkItems2
0001D41C 4EB9 0000 E0EA             		jsr	SpeedToPos
0001D422 6100 0000                  		bsr.w	SS_FixCamera
0001D426 3038 F780                  		move.w	($FFFFF780).w,d0
0001D42A D078 F782                  		add.w	($FFFFF782).w,d0
0001D42E 31C0 F780                  		move.w	d0,($FFFFF780).w
0001D432 4EB9 0001 4BD0             		jsr	Sonic_Animate
0001D438 4E75                       		rts	
0001D43A                            
0001D43A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D43A                            
0001D43A                            
0001D43A                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001D43A 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001D440 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001D442 6100 0000                  		bsr.w	Obj09_MoveLeft
0001D446                            
0001D446                            Obj09_ChkRight:
0001D446 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001D44C 6700                       		beq.s	loc_1BA78	; if not, branch
0001D44E 6100 0000                  		bsr.w	Obj09_MoveRight
0001D452                            
0001D452                            loc_1BA78:
0001D452 1038 F602                  		move.b	($FFFFF602).w,d0
0001D456 0200 000C                  		andi.b	#$C,d0
0001D45A 6600                       		bne.s	loc_1BAA8
0001D45C 3028 0014                  		move.w	$14(a0),d0
0001D460 6700                       		beq.s	loc_1BAA8
0001D462 6B00                       		bmi.s	loc_1BA9A
0001D464 0440 000C                  		subi.w	#$C,d0
0001D468 6400                       		bcc.s	loc_1BA94
0001D46A 303C 0000                  		move.w	#0,d0
0001D46E                            
0001D46E                            loc_1BA94:
0001D46E 3140 0014                  		move.w	d0,$14(a0)
0001D472 6000                       		bra.s	loc_1BAA8
0001D474                            ; ===========================================================================
0001D474                            
0001D474                            loc_1BA9A:
0001D474 0640 000C                  		addi.w	#$C,d0
0001D478 6400                       		bcc.s	loc_1BAA4
0001D47A 303C 0000                  		move.w	#0,d0
0001D47E                            
0001D47E                            loc_1BAA4:
0001D47E 3140 0014                  		move.w	d0,$14(a0)
0001D482                            
0001D482                            loc_1BAA8:
0001D482 1038 F780                  		move.b	($FFFFF780).w,d0
0001D486 0600 0020                  		addi.b	#$20,d0
0001D48A 0200 00C0                  		andi.b	#$C0,d0
0001D48E 4400                       		neg.b	d0
0001D490 4EB9 0000 33D4             		jsr	(CalcSine).l
0001D496 C3E8 0014                  		muls.w	$14(a0),d1
0001D49A D3A8 0008                  		add.l	d1,8(a0)
0001D49E C1E8 0014                  		muls.w	$14(a0),d0
0001D4A2 D1A8 000C                  		add.l	d0,$C(a0)
0001D4A6 48E7 C000                  		movem.l	d0-d1,-(sp)
0001D4AA 2428 000C                  		move.l	$C(a0),d2
0001D4AE 2628 0008                  		move.l	8(a0),d3
0001D4B2 6100 0000                  		bsr.w	sub_1BCE8
0001D4B6 6700                       		beq.s	loc_1BAF2
0001D4B8 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001D4BC 93A8 0008                  		sub.l	d1,8(a0)
0001D4C0 91A8 000C                  		sub.l	d0,$C(a0)
0001D4C4 317C 0000 0014             		move.w	#0,$14(a0)
0001D4CA 4E75                       		rts	
0001D4CC                            ; ===========================================================================
0001D4CC                            
0001D4CC                            loc_1BAF2:
0001D4CC 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001D4D0 4E75                       		rts	
0001D4D2                            ; End of function Obj09_Move
0001D4D2                            
0001D4D2                            
0001D4D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D4D2                            
0001D4D2                            
0001D4D2                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001D4D2 08E8 0000 0022             		bset	#0,$22(a0)
0001D4D8 3028 0014                  		move.w	$14(a0),d0
0001D4DC 6700                       		beq.s	loc_1BB06
0001D4DE 6A00                       		bpl.s	loc_1BB1A
0001D4E0                            
0001D4E0                            loc_1BB06:
0001D4E0 0440 000C                  		subi.w	#$C,d0
0001D4E4 0C40 F800                  		cmpi.w	#-$800,d0
0001D4E8 6E00                       		bgt.s	loc_1BB14
0001D4EA 303C F800                  		move.w	#-$800,d0
0001D4EE                            
0001D4EE                            loc_1BB14:
0001D4EE 3140 0014                  		move.w	d0,$14(a0)
0001D4F2 4E75                       		rts	
0001D4F4                            ; ===========================================================================
0001D4F4                            
0001D4F4                            loc_1BB1A:
0001D4F4 0440 0040                  		subi.w	#$40,d0
0001D4F8 6400                       		bcc.s	loc_1BB22
0001D4FA 4E71                       		nop	
0001D4FC                            
0001D4FC                            loc_1BB22:
0001D4FC 3140 0014                  		move.w	d0,$14(a0)
0001D500 4E75                       		rts	
0001D502                            ; End of function Obj09_MoveLeft
0001D502                            
0001D502                            
0001D502                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D502                            
0001D502                            
0001D502                            Obj09_MoveRight:			; XREF: Obj09_Move
0001D502 08A8 0000 0022             		bclr	#0,$22(a0)
0001D508 3028 0014                  		move.w	$14(a0),d0
0001D50C 6B00                       		bmi.s	loc_1BB48
0001D50E 0640 000C                  		addi.w	#$C,d0
0001D512 0C40 0800                  		cmpi.w	#$800,d0
0001D516 6D00                       		blt.s	loc_1BB42
0001D518 303C 0800                  		move.w	#$800,d0
0001D51C                            
0001D51C                            loc_1BB42:
0001D51C 3140 0014                  		move.w	d0,$14(a0)
0001D520 6000                       		bra.s	locret_1BB54
0001D522                            ; ===========================================================================
0001D522                            
0001D522                            loc_1BB48:
0001D522 0640 0040                  		addi.w	#$40,d0
0001D526 6400                       		bcc.s	loc_1BB50
0001D528 4E71                       		nop	
0001D52A                            
0001D52A                            loc_1BB50:
0001D52A 3140 0014                  		move.w	d0,$14(a0)
0001D52E                            
0001D52E                            locret_1BB54:
0001D52E 4E75                       		rts	
0001D530                            ; End of function Obj09_MoveRight
0001D530                            
0001D530                            
0001D530                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D530                            
0001D530                            
0001D530                            Obj09_Jump:				; XREF: Obj09_OnWall
0001D530 1038 F603                  		move.b	($FFFFF603).w,d0
0001D534 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001D538 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001D53A 1038 F780                  		move.b	($FFFFF780).w,d0
0001D53E 0200 00FC                  		andi.b	#$FC,d0
0001D542 4400                       		neg.b	d0
0001D544 0400 0040                  		subi.b	#$40,d0
0001D548 4EB9 0000 33D4             		jsr	(CalcSine).l
0001D54E C3FC 0680                  		muls.w	#$680,d1
0001D552 E081                       		asr.l	#8,d1
0001D554 3141 0010                  		move.w	d1,$10(a0)
0001D558 C1FC 0680                  		muls.w	#$680,d0
0001D55C E080                       		asr.l	#8,d0
0001D55E 3140 0012                  		move.w	d0,$12(a0)
0001D562 08E8 0001 0022             		bset	#1,$22(a0)
0001D568 303C 00A0                  		move.w	#$A0,d0
0001D56C 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play jumping sound
0001D572                            
0001D572                            Obj09_NoJump:
0001D572 4E75                       		rts	
0001D574                            ; End of function Obj09_Jump
0001D574                            
0001D574                            
0001D574                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D574                            
0001D574                            
0001D574                            nullsub_2:				; XREF: Obj09_InAir
0001D574 4E75                       		rts	
0001D576                            ; End of function nullsub_2
0001D576                            
0001D576                            ; ===========================================================================
0001D576                            ; ---------------------------------------------------------------------------
0001D576                            ; unused subroutine to limit Sonic's upward vertical speed
0001D576                            ; ---------------------------------------------------------------------------
0001D576 323C FC00                  		move.w	#-$400,d1
0001D57A B268 0012                  		cmp.w	$12(a0),d1
0001D57E 6F00                       		ble.s	locret_1BBB4
0001D580 1038 F602                  		move.b	($FFFFF602).w,d0
0001D584 0200 0070                  		andi.b	#$70,d0
0001D588 6600                       		bne.s	locret_1BBB4
0001D58A 3141 0012                  		move.w	d1,$12(a0)
0001D58E                            
0001D58E                            locret_1BBB4:
0001D58E 4E75                       		rts	
0001D590                            ; ---------------------------------------------------------------------------
0001D590                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001D590                            ; ---------------------------------------------------------------------------
0001D590                            
0001D590                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D590                            
0001D590                            
0001D590                            SS_FixCamera:				; XREF: Obj09
0001D590 3428 000C                  		move.w	$C(a0),d2
0001D594 3628 0008                  		move.w	8(a0),d3
0001D598 3038 F700                  		move.w	($FFFFF700).w,d0
0001D59C 0443 00A0                  		subi.w	#$A0,d3
0001D5A0 6500                       		bcs.s	loc_1BBCE
0001D5A2 9043                       		sub.w	d3,d0
0001D5A4 9178 F700                  		sub.w	d0,($FFFFF700).w
0001D5A8                            
0001D5A8                            loc_1BBCE:
0001D5A8 3038 F704                  		move.w	($FFFFF704).w,d0
0001D5AC 0442 0070                  		subi.w	#$70,d2
0001D5B0 6500                       		bcs.s	locret_1BBDE
0001D5B2 9042                       		sub.w	d2,d0
0001D5B4 9178 F704                  		sub.w	d0,($FFFFF704).w
0001D5B8                            
0001D5B8                            locret_1BBDE:
0001D5B8 4E75                       		rts	
0001D5BA                            ; End of function SS_FixCamera
0001D5BA                            
0001D5BA                            ; ===========================================================================
0001D5BA                            
0001D5BA                            Obj09_ExitStage:			; XREF: Obj09_Index
0001D5BA 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001D5C0 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001D5C6 6600                       		bne.s	loc_1BBF4
0001D5C8 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001D5CE                            
0001D5CE                            loc_1BBF4:
0001D5CE 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001D5D4 6D00                       		blt.s	loc_1BC12
0001D5D6 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001D5DC 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001D5E2 5428 0024                  		addq.b	#2,$24(a0)
0001D5E6 317C 003C 0038             		move.w	#$3C,$38(a0)
0001D5EC                            
0001D5EC                            loc_1BC12:
0001D5EC 3038 F780                  		move.w	($FFFFF780).w,d0
0001D5F0 D078 F782                  		add.w	($FFFFF782).w,d0
0001D5F4 31C0 F780                  		move.w	d0,($FFFFF780).w
0001D5F8 4EB9 0001 4BD0             		jsr	Sonic_Animate
0001D5FE 4EB9 0001 5108             		jsr	LoadSonicDynPLC
0001D604 6100 FF8A                  		bsr.w	SS_FixCamera
0001D608 4EF9 0000 E110             		jmp	DisplaySprite
0001D60E                            ; ===========================================================================
0001D60E                            
0001D60E                            Obj09_Exit2:				; XREF: Obj09_Index
0001D60E 5368 0038                  		subq.w	#1,$38(a0)
0001D612 6600                       		bne.s	loc_1BC40
0001D614 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001D61A                            
0001D61A                            loc_1BC40:
0001D61A 4EB9 0001 4BD0             		jsr	Sonic_Animate
0001D620 4EB9 0001 5108             		jsr	LoadSonicDynPLC
0001D626 6100 FF68                  		bsr.w	SS_FixCamera
0001D62A 4EF9 0000 E110             		jmp	DisplaySprite
0001D630                            
0001D630                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D630                            
0001D630                            
0001D630                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001D630 2428 000C                  		move.l	$C(a0),d2
0001D634 2628 0008                  		move.l	8(a0),d3
0001D638 1038 F780                  		move.b	($FFFFF780).w,d0
0001D63C 0200 00FC                  		andi.b	#$FC,d0
0001D640 4EB9 0000 33D4             		jsr	(CalcSine).l
0001D646 3828 0010                  		move.w	$10(a0),d4
0001D64A 48C4                       		ext.l	d4
0001D64C E184                       		asl.l	#8,d4
0001D64E C1FC 002A                  		muls.w	#$2A,d0
0001D652 D084                       		add.l	d4,d0
0001D654 3828 0012                  		move.w	$12(a0),d4
0001D658 48C4                       		ext.l	d4
0001D65A E184                       		asl.l	#8,d4
0001D65C C3FC 002A                  		muls.w	#$2A,d1
0001D660 D284                       		add.l	d4,d1
0001D662 D680                       		add.l	d0,d3
0001D664 6100 0000                  		bsr.w	sub_1BCE8
0001D668 6700                       		beq.s	loc_1BCB0
0001D66A 9680                       		sub.l	d0,d3
0001D66C 7000                       		moveq	#0,d0
0001D66E 3140 0010                  		move.w	d0,$10(a0)
0001D672 08A8 0001 0022             		bclr	#1,$22(a0)
0001D678 D481                       		add.l	d1,d2
0001D67A 6100 0000                  		bsr.w	sub_1BCE8
0001D67E 6700                       		beq.s	loc_1BCC6
0001D680 9481                       		sub.l	d1,d2
0001D682 7200                       		moveq	#0,d1
0001D684 3141 0012                  		move.w	d1,$12(a0)
0001D688 4E75                       		rts	
0001D68A                            ; ===========================================================================
0001D68A                            
0001D68A                            loc_1BCB0:
0001D68A D481                       		add.l	d1,d2
0001D68C 6100 0000                  		bsr.w	sub_1BCE8
0001D690 6700                       		beq.s	loc_1BCD4
0001D692 9481                       		sub.l	d1,d2
0001D694 7200                       		moveq	#0,d1
0001D696 3141 0012                  		move.w	d1,$12(a0)
0001D69A 08A8 0001 0022             		bclr	#1,$22(a0)
0001D6A0                            
0001D6A0                            loc_1BCC6:
0001D6A0 E080                       		asr.l	#8,d0
0001D6A2 E081                       		asr.l	#8,d1
0001D6A4 3140 0010                  		move.w	d0,$10(a0)
0001D6A8 3141 0012                  		move.w	d1,$12(a0)
0001D6AC 4E75                       		rts	
0001D6AE                            ; ===========================================================================
0001D6AE                            
0001D6AE                            loc_1BCD4:
0001D6AE E080                       		asr.l	#8,d0
0001D6B0 E081                       		asr.l	#8,d1
0001D6B2 3140 0010                  		move.w	d0,$10(a0)
0001D6B6 3141 0012                  		move.w	d1,$12(a0)
0001D6BA 08E8 0001 0022             		bset	#1,$22(a0)
0001D6C0 4E75                       		rts	
0001D6C2                            ; End of function Obj09_Fall
0001D6C2                            
0001D6C2                            
0001D6C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D6C2                            
0001D6C2                            
0001D6C2                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001D6C2 43F9 00FF 0000             		lea	($FF0000).l,a1
0001D6C8 7800                       		moveq	#0,d4
0001D6CA 4842                       		swap	d2
0001D6CC 3802                       		move.w	d2,d4
0001D6CE 4842                       		swap	d2
0001D6D0 0644 0044                  		addi.w	#$44,d4
0001D6D4 88FC 0018                  		divu.w	#$18,d4
0001D6D8 C8FC 0080                  		mulu.w	#$80,d4
0001D6DC D3C4                       		adda.l	d4,a1
0001D6DE 7800                       		moveq	#0,d4
0001D6E0 4843                       		swap	d3
0001D6E2 3803                       		move.w	d3,d4
0001D6E4 4843                       		swap	d3
0001D6E6 0644 0014                  		addi.w	#$14,d4
0001D6EA 88FC 0018                  		divu.w	#$18,d4
0001D6EE D2C4                       		adda.w	d4,a1
0001D6F0 7A00                       		moveq	#0,d5
0001D6F2 1819                       		move.b	(a1)+,d4
0001D6F4 6100                       		bsr.s	sub_1BD30
0001D6F6 1819                       		move.b	(a1)+,d4
0001D6F8 6100                       		bsr.s	sub_1BD30
0001D6FA D2FC 007E                  		adda.w	#$7E,a1
0001D6FE 1819                       		move.b	(a1)+,d4
0001D700 6100                       		bsr.s	sub_1BD30
0001D702 1819                       		move.b	(a1)+,d4
0001D704 6100                       		bsr.s	sub_1BD30
0001D706 4A05                       		tst.b	d5
0001D708 4E75                       		rts	
0001D70A                            ; End of function sub_1BCE8
0001D70A                            
0001D70A                            
0001D70A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D70A                            
0001D70A                            
0001D70A                            sub_1BD30:				; XREF: sub_1BCE8
0001D70A 6700                       		beq.s	locret_1BD44
0001D70C 0C04 0028                  		cmpi.b	#$28,d4
0001D710 6700                       		beq.s	locret_1BD44
0001D712 0C04 003A                  		cmpi.b	#$3A,d4
0001D716 6500                       		bcs.s	loc_1BD46
0001D718 0C04 004B                  		cmpi.b	#$4B,d4
0001D71C 6400                       		bcc.s	loc_1BD46
0001D71E                            
0001D71E                            locret_1BD44:
0001D71E 4E75                       		rts	
0001D720                            ; ===========================================================================
0001D720                            
0001D720                            loc_1BD46:
0001D720 1144 0030                  		move.b	d4,$30(a0)
0001D724 2149 0032                  		move.l	a1,$32(a0)
0001D728 7AFF                       		moveq	#-1,d5
0001D72A 4E75                       		rts	
0001D72C                            ; End of function sub_1BD30
0001D72C                            
0001D72C                            
0001D72C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D72C                            
0001D72C                            
0001D72C                            Obj09_ChkItems:				; XREF: Obj09_Display
0001D72C 43F9 00FF 0000             		lea	($FF0000).l,a1
0001D732 7800                       		moveq	#0,d4
0001D734 3828 000C                  		move.w	$C(a0),d4
0001D738 0644 0050                  		addi.w	#$50,d4
0001D73C 88FC 0018                  		divu.w	#$18,d4
0001D740 C8FC 0080                  		mulu.w	#$80,d4
0001D744 D3C4                       		adda.l	d4,a1
0001D746 7800                       		moveq	#0,d4
0001D748 3828 0008                  		move.w	8(a0),d4
0001D74C 0644 0020                  		addi.w	#$20,d4
0001D750 88FC 0018                  		divu.w	#$18,d4
0001D754 D2C4                       		adda.w	d4,a1
0001D756 1811                       		move.b	(a1),d4
0001D758 6600                       		bne.s	Obj09_ChkCont
0001D75A 4A28 003A                  		tst.b	$3A(a0)
0001D75E 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001D762 7800                       		moveq	#0,d4
0001D764 4E75                       		rts	
0001D766                            ; ===========================================================================
0001D766                            
0001D766                            Obj09_ChkCont:
0001D766 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001D76A 6600                       		bne.s	Obj09_Chk1Up
0001D76C 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001D770 6600                       		bne.s	Obj09_GetCont
0001D772 14BC 0001                  		move.b	#1,(a2)
0001D776 2549 0004                  		move.l	a1,4(a2)
0001D77A                            
0001D77A                            Obj09_GetCont:
0001D77A 4EB9 0000 A70A             		jsr	CollectRing
0001D780 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001D786 6500                       		bcs.s	Obj09_NoCont
0001D788 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001D78E 6600                       		bne.s	Obj09_NoCont
0001D790 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001D794 303C 00BF                  		move.w	#$BF,d0
0001D798 4EB9 0000 1470             		jsr	(PlaySound).l	; play extra continue sound
0001D79E                            
0001D79E                            Obj09_NoCont:
0001D79E 7800                       		moveq	#0,d4
0001D7A0 4E75                       		rts	
0001D7A2                            ; ===========================================================================
0001D7A2                            
0001D7A2                            Obj09_Chk1Up:
0001D7A2 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001D7A6 6600                       		bne.s	Obj09_ChkEmer
0001D7A8 6100 F6EA                  		bsr.w	SS_RemoveCollectedItem
0001D7AC 6600                       		bne.s	Obj09_Get1Up
0001D7AE 14BC 0003                  		move.b	#3,(a2)
0001D7B2 2549 0004                  		move.l	a1,4(a2)
0001D7B6                            
0001D7B6                            Obj09_Get1Up:
0001D7B6 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001D7BA 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001D7BE 303C 0088                  		move.w	#$88,d0
0001D7C2 4EB9 0000 1470             		jsr	(PlaySound).l	; play extra life music
0001D7C8 7800                       		moveq	#0,d4
0001D7CA 4E75                       		rts	
0001D7CC                            ; ===========================================================================
0001D7CC                            
0001D7CC                            Obj09_ChkEmer:
0001D7CC 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001D7D0 6500                       		bcs.s	Obj09_ChkGhost
0001D7D2 0C04 0040                  		cmpi.b	#$40,d4
0001D7D6 6200                       		bhi.s	Obj09_ChkGhost
0001D7D8 6100 F6BA                  		bsr.w	SS_RemoveCollectedItem
0001D7DC 6600                       		bne.s	Obj09_GetEmer
0001D7DE 14BC 0005                  		move.b	#5,(a2)
0001D7E2 2549 0004                  		move.l	a1,4(a2)
0001D7E6                            
0001D7E6                            Obj09_GetEmer:
0001D7E6 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001D7EC 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001D7EE 0404 003B                  		subi.b	#$3B,d4
0001D7F2 7000                       		moveq	#0,d0
0001D7F4 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001D7F8 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001D7FC 1584 0000                  		move.b	d4,(a2,d0.w)
0001D800 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001D804                            
0001D804                            Obj09_NoEmer:
0001D804 303C 0093                  		move.w	#$93,d0
0001D808 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play emerald music
0001D80E 7800                       		moveq	#0,d4
0001D810 4E75                       		rts	
0001D812                            ; ===========================================================================
0001D812                            
0001D812                            Obj09_ChkGhost:
0001D812 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001D816 6600                       		bne.s	Obj09_ChkGhostTag
0001D818 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001D81E                            
0001D81E                            Obj09_ChkGhostTag:
0001D81E 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001D822 6600                       		bne.s	Obj09_NoGhost
0001D824 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001D82A 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001D82C 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001D832                            
0001D832                            Obj09_NoGhost:
0001D832 78FF                       		moveq	#-1,d4
0001D834 4E75                       		rts	
0001D836                            ; ===========================================================================
0001D836                            
0001D836                            Obj09_MakeGhostSolid:
0001D836 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001D83C 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001D83E 43F9 00FF 1020             		lea	($FF1020).l,a1
0001D844 723F                       		moveq	#$3F,d1
0001D846                            
0001D846                            Obj09_GhostLoop2:
0001D846 743F                       		moveq	#$3F,d2
0001D848                            
0001D848                            Obj09_GhostLoop:
0001D848 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001D84C 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001D84E 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001D852                            
0001D852                            Obj09_NoReplace:
0001D852 5249                       		addq.w	#1,a1
0001D854 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001D858 43E9 0040                  		lea	$40(a1),a1
0001D85C 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001D860                            
0001D860                            Obj09_GhostNotSolid:
0001D860 4228 003A                  		clr.b	$3A(a0)
0001D864 7800                       		moveq	#0,d4
0001D866 4E75                       		rts	
0001D868                            ; End of function Obj09_ChkItems
0001D868                            
0001D868                            
0001D868                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D868                            
0001D868                            
0001D868                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001D868 1028 0030                  		move.b	$30(a0),d0
0001D86C 6600                       		bne.s	Obj09_ChkBumper
0001D86E 5328 0036                  		subq.b	#1,$36(a0)
0001D872 6A00                       		bpl.s	loc_1BEA0
0001D874 117C 0000 0036             		move.b	#0,$36(a0)
0001D87A                            
0001D87A                            loc_1BEA0:
0001D87A 5328 0037                  		subq.b	#1,$37(a0)
0001D87E 6A00                       		bpl.s	locret_1BEAC
0001D880 117C 0000 0037             		move.b	#0,$37(a0)
0001D886                            
0001D886                            locret_1BEAC:
0001D886 4E75                       		rts	
0001D888                            ; ===========================================================================
0001D888                            
0001D888                            Obj09_ChkBumper:
0001D888 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001D88C 6600                       		bne.s	Obj09_GOAL
0001D88E 2228 0032                  		move.l	$32(a0),d1
0001D892 0481 00FF 0001             		subi.l	#$FF0001,d1
0001D898 3401                       		move.w	d1,d2
0001D89A 0241 007F                  		andi.w	#$7F,d1
0001D89E C2FC 0018                  		mulu.w	#$18,d1
0001D8A2 0441 0014                  		subi.w	#$14,d1
0001D8A6 EE4A                       		lsr.w	#7,d2
0001D8A8 0242 007F                  		andi.w	#$7F,d2
0001D8AC C4FC 0018                  		mulu.w	#$18,d2
0001D8B0 0442 0044                  		subi.w	#$44,d2
0001D8B4 9268 0008                  		sub.w	8(a0),d1
0001D8B8 9468 000C                  		sub.w	$C(a0),d2
0001D8BC 4EB9 0000 36A2             		jsr	(CalcAngle).l
0001D8C2 4EB9 0000 33D4             		jsr	(CalcSine).l
0001D8C8 C3FC F900                  		muls.w	#-$700,d1
0001D8CC E081                       		asr.l	#8,d1
0001D8CE 3141 0010                  		move.w	d1,$10(a0)
0001D8D2 C1FC F900                  		muls.w	#-$700,d0
0001D8D6 E080                       		asr.l	#8,d0
0001D8D8 3140 0012                  		move.w	d0,$12(a0)
0001D8DC 08E8 0001 0022             		bset	#1,$22(a0)
0001D8E2 6100 F5B0                  		bsr.w	SS_RemoveCollectedItem
0001D8E6 6600                       		bne.s	Obj09_BumpSnd
0001D8E8 14BC 0002                  		move.b	#2,(a2)
0001D8EC 2028 0032                  		move.l	$32(a0),d0
0001D8F0 5380                       		subq.l	#1,d0
0001D8F2 2540 0004                  		move.l	d0,4(a2)
0001D8F6                            
0001D8F6                            Obj09_BumpSnd:
0001D8F6 303C 00B4                  		move.w	#$B4,d0
0001D8FA 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play bumper sound
0001D900                            ; ===========================================================================
0001D900                            
0001D900                            Obj09_GOAL:
0001D900 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001D904 6600                       		bne.s	Obj09_UPblock
0001D906 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001D90A 303C 00A8                  		move.w	#$A8,d0		; change item
0001D90E 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001D914 4E75                       		rts	
0001D916                            ; ===========================================================================
0001D916                            
0001D916                            Obj09_UPblock:
0001D916 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001D91A 6600                       		bne.s	Obj09_DOWNblock
0001D91C 4A28 0036                  		tst.b	$36(a0)
0001D920 6600 0000                  		bne.w	Obj09_NoGlass
0001D924 117C 001E 0036             		move.b	#$1E,$36(a0)
0001D92A 0838 0006 F783             		btst	#6,($FFFFF783).w
0001D930 6700                       		beq.s	Obj09_UPsnd
0001D932 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001D936 2268 0032                  		movea.l	$32(a0),a1
0001D93A 5389                       		subq.l	#1,a1
0001D93C 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001D940                            
0001D940                            Obj09_UPsnd:
0001D940 303C 00A9                  		move.w	#$A9,d0
0001D944 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play up/down sound
0001D94A                            ; ===========================================================================
0001D94A                            
0001D94A                            Obj09_DOWNblock:
0001D94A 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001D94E 6600                       		bne.s	Obj09_Rblock
0001D950 4A28 0036                  		tst.b	$36(a0)
0001D954 6600 0000                  		bne.w	Obj09_NoGlass
0001D958 117C 001E 0036             		move.b	#$1E,$36(a0)
0001D95E 0838 0006 F783             		btst	#6,($FFFFF783).w
0001D964 6600                       		bne.s	Obj09_DOWNsnd
0001D966 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001D96A 2268 0032                  		movea.l	$32(a0),a1
0001D96E 5389                       		subq.l	#1,a1
0001D970 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001D974                            
0001D974                            Obj09_DOWNsnd:
0001D974 303C 00A9                  		move.w	#$A9,d0
0001D978 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play up/down sound
0001D97E                            ; ===========================================================================
0001D97E                            
0001D97E                            Obj09_Rblock:
0001D97E 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001D982 6600                       		bne.s	Obj09_ChkGlass
0001D984 4A28 0037                  		tst.b	$37(a0)
0001D988 6600 0000                  		bne.w	Obj09_NoGlass
0001D98C 117C 001E 0037             		move.b	#$1E,$37(a0)
0001D992 6100 F500                  		bsr.w	SS_RemoveCollectedItem
0001D996 6600                       		bne.s	Obj09_RevStage
0001D998 14BC 0004                  		move.b	#4,(a2)
0001D99C 2028 0032                  		move.l	$32(a0),d0
0001D9A0 5380                       		subq.l	#1,d0
0001D9A2 2540 0004                  		move.l	d0,4(a2)
0001D9A6                            
0001D9A6                            Obj09_RevStage:
0001D9A6 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001D9AA 303C 00A9                  		move.w	#$A9,d0
0001D9AE 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play sound
0001D9B4                            ; ===========================================================================
0001D9B4                            
0001D9B4                            Obj09_ChkGlass:
0001D9B4 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001D9B8 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001D9BA 0C00 002E                  		cmpi.b	#$2E,d0
0001D9BE 6700                       		beq.s	Obj09_Glass
0001D9C0 0C00 002F                  		cmpi.b	#$2F,d0
0001D9C4 6700                       		beq.s	Obj09_Glass
0001D9C6 0C00 0030                  		cmpi.b	#$30,d0
0001D9CA 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001D9CC                            
0001D9CC                            Obj09_Glass:
0001D9CC 6100 F4C6                  		bsr.w	SS_RemoveCollectedItem
0001D9D0 6600                       		bne.s	Obj09_GlassSnd
0001D9D2 14BC 0006                  		move.b	#6,(a2)
0001D9D6 2268 0032                  		movea.l	$32(a0),a1
0001D9DA 5389                       		subq.l	#1,a1
0001D9DC 2549 0004                  		move.l	a1,4(a2)
0001D9E0 1011                       		move.b	(a1),d0
0001D9E2 5200                       		addq.b	#1,d0		; change glass type when touched
0001D9E4 0C00 0030                  		cmpi.b	#$30,d0
0001D9E8 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001D9EA 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001D9EC                            
0001D9EC                            Obj09_GlassUpdate:
0001D9EC 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001D9F0                            
0001D9F0                            Obj09_GlassSnd:
0001D9F0 303C 00BA                  		move.w	#$BA,d0
0001D9F4 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play glass block sound
0001D9FA                            ; ===========================================================================
0001D9FA                            
0001D9FA                            Obj09_NoGlass:
0001D9FA 4E75                       		rts	
0001D9FC                            ; End of function Obj09_ChkItems2
0001D9FC                            
0001D9FC                            ; ===========================================================================
0001D9FC                            ; ---------------------------------------------------------------------------
0001D9FC                            ; Object 10 - blank
0001D9FC                            ; ---------------------------------------------------------------------------
0001D9FC                            
0001D9FC                            Obj10:					; XREF: Obj_Index
0001D9FC 4E75                       		rts	
0001D9FE                            ; ---------------------------------------------------------------------------
0001D9FE                            ; Subroutine to	animate	level graphics
0001D9FE                            ; ---------------------------------------------------------------------------
0001D9FE                            
0001D9FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D9FE                            
0001D9FE                            
0001D9FE                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001D9FE 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001DA02 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001DA04 4DF9 00C0 0000             		lea	($C00000).l,a6
0001DA0A 6100 0000                  		bsr.w	AniArt_GiantRing
0001DA0E 7000                       		moveq	#0,d0
0001DA10 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001DA14 D040                       		add.w	d0,d0
0001DA16 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001DA1A 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001DA1E                            ; ===========================================================================
0001DA1E                            
0001DA1E                            AniArt_Pause:
0001DA1E 4E75                       		rts	
0001DA20                            ; End of function AniArt_Load
0001DA20                            
0001DA20                            ; ===========================================================================
0001DA20 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001DA24 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001DA28 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001DA2C 0000                       		dc.w AniArt_Ending-AniArt_Index
0001DA2E                            ; ===========================================================================
0001DA2E                            ; ---------------------------------------------------------------------------
0001DA2E                            ; Animated pattern routine - Green Hill
0001DA2E                            ; ---------------------------------------------------------------------------
0001DA2E                            
0001DA2E                            AniArt_GHZ:				; XREF: AniArt_Index
0001DA2E 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001DA32 6A00                       		bpl.s	loc_1C08A
0001DA34 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001DA3A 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001DA40 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001DA44 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001DA48 0240 0001                  		andi.w	#1,d0
0001DA4C 6700                       		beq.s	loc_1C078
0001DA4E 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001DA52                            
0001DA52                            loc_1C078:
0001DA52 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001DA5C 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001DA60 6000 0000                  		bra.w	LoadTiles
0001DA64                            ; ===========================================================================
0001DA64                            
0001DA64                            loc_1C08A:
0001DA64 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001DA68 6A00                       		bpl.s	loc_1C0C0
0001DA6A 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001DA70 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001DA76 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001DA7A 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001DA7E 0240 0001                  		andi.w	#1,d0
0001DA82 6700                       		beq.s	loc_1C0AE
0001DA84 43E9 0200                  		lea	$200(a1),a1
0001DA88                            
0001DA88                            loc_1C0AE:
0001DA88 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001DA92 323C 000F                  		move.w	#$F,d1
0001DA96 6000 0000                  		bra.w	LoadTiles
0001DA9A                            ; ===========================================================================
0001DA9A                            
0001DA9A                            loc_1C0C0:
0001DA9A 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001DA9E 6A00                       		bpl.s	locret_1C10C
0001DAA0 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001DAA6 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001DAAA 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001DAAE 0240 0003                  		andi.w	#3,d0
0001DAB2 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001DAB6 0800 0000                  		btst	#0,d0
0001DABA 6600                       		bne.s	loc_1C0E8
0001DABC 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001DAC2                            
0001DAC2                            loc_1C0E8:
0001DAC2 EF48                       		lsl.w	#7,d0
0001DAC4 3200                       		move.w	d0,d1
0001DAC6 D040                       		add.w	d0,d0
0001DAC8 D041                       		add.w	d1,d0
0001DACA 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001DAD4 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001DADA 43F1 0000                  		lea	(a1,d0.w),a1
0001DADE 323C 000B                  		move.w	#$B,d1
0001DAE2 6100 0000                  		bsr.w	LoadTiles
0001DAE6                            
0001DAE6                            locret_1C10C:
0001DAE6 4E75                       		rts	
0001DAE8                            ; ===========================================================================
0001DAE8 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001DAEC                            ; ===========================================================================
0001DAEC                            ; ---------------------------------------------------------------------------
0001DAEC                            ; Animated pattern routine - Marble
0001DAEC                            ; ---------------------------------------------------------------------------
0001DAEC                            
0001DAEC                            AniArt_MZ:				; XREF: AniArt_Index
0001DAEC 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001DAF0 6A00                       		bpl.s	loc_1C150
0001DAF2 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001DAF8 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001DAFE 7000                       		moveq	#0,d0
0001DB00 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001DB04 5200                       		addq.b	#1,d0
0001DB06 0C00 0003                  		cmpi.b	#3,d0
0001DB0A 6600                       		bne.s	loc_1C134
0001DB0C 7000                       		moveq	#0,d0
0001DB0E                            
0001DB0E                            loc_1C134:
0001DB0E 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001DB12 C0FC 0100                  		mulu.w	#$100,d0
0001DB16 D2C0                       		adda.w	d0,a1
0001DB18 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001DB22 323C 0007                  		move.w	#7,d1
0001DB26 6100 0000                  		bsr.w	LoadTiles
0001DB2A                            
0001DB2A                            loc_1C150:
0001DB2A 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001DB2E 6A00                       		bpl.s	loc_1C1AE
0001DB30 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001DB36 7000                       		moveq	#0,d0
0001DB38 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001DB3C 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001DB42 EE58                       		ror.w	#7,d0
0001DB44 D8C0                       		adda.w	d0,a4
0001DB46 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001DB50 7600                       		moveq	#0,d3
0001DB52 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001DB56 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001DB5A 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001DB5E 343C 0003                  		move.w	#3,d2
0001DB62                            
0001DB62                            loc_1C188:
0001DB62 3003                       		move.w	d3,d0
0001DB64 D040                       		add.w	d0,d0
0001DB66 0240 001E                  		andi.w	#$1E,d0
0001DB6A 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001DB70 3033 0000                  		move.w	(a3,d0.w),d0
0001DB74 47F3 0000                  		lea	(a3,d0.w),a3
0001DB78 224C                       		movea.l	a4,a1
0001DB7A 323C 001F                  		move.w	#$1F,d1
0001DB7E 4E93                       		jsr	(a3)
0001DB80 5843                       		addq.w	#4,d3
0001DB82 51CA FFDE                  		dbf	d2,loc_1C188
0001DB86 4E75                       		rts	
0001DB88                            ; ===========================================================================
0001DB88                            
0001DB88                            loc_1C1AE:
0001DB88 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001DB8C 6A00 0000                  		bpl.w	locret_1C1EA
0001DB90 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001DB96 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001DB9C 7000                       		moveq	#0,d0
0001DB9E 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001DBA2 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001DBA6 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001DBAC C0FC 00C0                  		mulu.w	#$C0,d0
0001DBB0 D2C0                       		adda.w	d0,a1
0001DBB2 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001DBBC 323C 0005                  		move.w	#5,d1
0001DBC0 6000 0000                  		bra.w	LoadTiles
0001DBC4                            ; ===========================================================================
0001DBC4                            
0001DBC4                            locret_1C1EA:
0001DBC4 4E75                       		rts	
0001DBC6                            ; ===========================================================================
0001DBC6                            ; ---------------------------------------------------------------------------
0001DBC6                            ; Animated pattern routine - Scrap Brain
0001DBC6                            ; ---------------------------------------------------------------------------
0001DBC6                            
0001DBC6                            AniArt_SBZ:				; XREF: AniArt_Index
0001DBC6 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001DBCA 6700                       		beq.s	loc_1C1F8
0001DBCC 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001DBD0 6000                       		bra.s	loc_1C250
0001DBD2                            ; ===========================================================================
0001DBD2                            
0001DBD2                            loc_1C1F8:
0001DBD2 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001DBD6 6A00                       		bpl.s	loc_1C250
0001DBD8 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001DBDE 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001DBE4 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001DBEE 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001DBF2 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001DBF6 0240 0007                  		andi.w	#7,d0
0001DBFA 6700                       		beq.s	loc_1C234
0001DBFC 5340                       		subq.w	#1,d0
0001DBFE C0FC 0180                  		mulu.w	#$180,d0
0001DC02 43F1 0000                  		lea	(a1,d0.w),a1
0001DC06 323C 000B                  		move.w	#$B,d1
0001DC0A 6000 0000                  		bra.w	LoadTiles
0001DC0E                            ; ===========================================================================
0001DC0E                            
0001DC0E                            loc_1C234:
0001DC0E 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001DC14                            
0001DC14                            loc_1C23A:
0001DC14 323C 0005                  		move.w	#5,d1
0001DC18 6100 0000                  		bsr.w	LoadTiles
0001DC1C 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001DC22 323C 0005                  		move.w	#5,d1
0001DC26 6000 0000                  		bra.w	LoadTiles
0001DC2A                            ; ===========================================================================
0001DC2A                            
0001DC2A                            loc_1C250:
0001DC2A 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001DC2E 6700                       		beq.s	loc_1C25C
0001DC30 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001DC34 6000                       		bra.s	locret_1C2A0
0001DC36                            ; ===========================================================================
0001DC36                            
0001DC36                            loc_1C25C:
0001DC36 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001DC3A 6A00                       		bpl.s	locret_1C2A0
0001DC3C 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001DC42 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001DC48 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001DC52 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001DC56 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001DC5A 0240 0007                  		andi.w	#7,d0
0001DC5E 6700                       		beq.s	loc_1C298
0001DC60 5340                       		subq.w	#1,d0
0001DC62 C0FC 0180                  		mulu.w	#$180,d0
0001DC66 43F1 0000                  		lea	(a1,d0.w),a1
0001DC6A 323C 000B                  		move.w	#$B,d1
0001DC6E 6000 0000                  		bra.w	LoadTiles
0001DC72                            ; ===========================================================================
0001DC72                            
0001DC72                            loc_1C298:
0001DC72 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001DC78 609A                       		bra.s	loc_1C23A
0001DC7A                            ; ===========================================================================
0001DC7A                            
0001DC7A                            locret_1C2A0:
0001DC7A 4E75                       		rts	
0001DC7C                            ; ===========================================================================
0001DC7C                            ; ---------------------------------------------------------------------------
0001DC7C                            ; Animated pattern routine - ending sequence
0001DC7C                            ; ---------------------------------------------------------------------------
0001DC7C                            
0001DC7C                            AniArt_Ending:				; XREF: AniArt_Index
0001DC7C 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001DC80 6A00                       		bpl.s	loc_1C2F4
0001DC82 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001DC88 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001DC8E 45F8 9400                  		lea	($FFFF9400).w,a2
0001DC92 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001DC96 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001DC9A 0240 0001                  		andi.w	#1,d0
0001DC9E 6700                       		beq.s	loc_1C2CE
0001DCA0 43E9 0200                  		lea	$200(a1),a1
0001DCA4 45EA 0200                  		lea	$200(a2),a2
0001DCA8                            
0001DCA8                            loc_1C2CE:
0001DCA8 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001DCB2 323C 000F                  		move.w	#$F,d1
0001DCB6 6100 0000                  		bsr.w	LoadTiles
0001DCBA 224A                       		movea.l	a2,a1
0001DCBC 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001DCC6 323C 000F                  		move.w	#$F,d1
0001DCCA 6000 0000                  		bra.w	LoadTiles
0001DCCE                            ; ===========================================================================
0001DCCE                            
0001DCCE                            loc_1C2F4:
0001DCCE 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001DCD2 6A00                       		bpl.s	loc_1C33C
0001DCD4 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001DCDA 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001DCDE 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001DCE2 0240 0007                  		andi.w	#7,d0
0001DCE6 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001DCEA EF48                       		lsl.w	#7,d0
0001DCEC 3200                       		move.w	d0,d1
0001DCEE D040                       		add.w	d0,d0
0001DCF0 D041                       		add.w	d1,d0
0001DCF2 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001DCFC 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001DD02 43F1 0000                  		lea	(a1,d0.w),a1
0001DD06 323C 000B                  		move.w	#$B,d1
0001DD0A 6000 0000                  		bra.w	LoadTiles
0001DD0E                            ; ===========================================================================
0001DD0E 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001DD16                            ; ===========================================================================
0001DD16                            
0001DD16                            loc_1C33C:
0001DD16 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001DD1A 6A00                       		bpl.s	loc_1C37A
0001DD1C 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001DD22 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001DD26 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001DD2A 0240 0003                  		andi.w	#3,d0
0001DD2E 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001DD32 E148                       		lsl.w	#8,d0
0001DD34 D040                       		add.w	d0,d0
0001DD36 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001DD40 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001DD44 43F1 0000                  		lea	(a1,d0.w),a1
0001DD48 323C 000F                  		move.w	#$F,d1
0001DD4C 6000 0000                  		bra.w	LoadTiles
0001DD50                            ; ===========================================================================
0001DD50 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001DD54                            ; ===========================================================================
0001DD54                            
0001DD54                            loc_1C37A:
0001DD54 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001DD58 6A00                       		bpl.s	locret_1C3B4
0001DD5A 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001DD60 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001DD64 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001DD68 0240 0003                  		andi.w	#3,d0
0001DD6C 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001DD70 E148                       		lsl.w	#8,d0
0001DD72 D040                       		add.w	d0,d0
0001DD74 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001DD7E 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001DD82 43F1 0000                  		lea	(a1,d0.w),a1
0001DD86 323C 000F                  		move.w	#$F,d1
0001DD8A 6000 0000                  		bra.w	LoadTiles
0001DD8E                            ; ===========================================================================
0001DD8E                            
0001DD8E                            locret_1C3B4:
0001DD8E 4E75                       		rts	
0001DD90                            ; ===========================================================================
0001DD90                            
0001DD90                            AniArt_none:				; XREF: AniArt_Index
0001DD90 4E75                       		rts	
0001DD92                            
0001DD92                            ; ---------------------------------------------------------------------------
0001DD92                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001DD92                            ; ---------------------------------------------------------------------------
0001DD92                            
0001DD92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD92                            
0001DD92                            
0001DD92                            LoadTiles:
0001DD92 2C99                       		move.l	(a1)+,(a6)
0001DD94 2C99                       		move.l	(a1)+,(a6)
0001DD96 2C99                       		move.l	(a1)+,(a6)
0001DD98 2C99                       		move.l	(a1)+,(a6)
0001DD9A 2C99                       		move.l	(a1)+,(a6)
0001DD9C 2C99                       		move.l	(a1)+,(a6)
0001DD9E 2C99                       		move.l	(a1)+,(a6)
0001DDA0 2C99                       		move.l	(a1)+,(a6)
0001DDA2 51C9 FFEE                  		dbf	d1,LoadTiles
0001DDA6 4E75                       		rts	
0001DDA8                            ; End of function LoadTiles
0001DDA8                            
0001DDA8                            ; ===========================================================================
0001DDA8                            ; ---------------------------------------------------------------------------
0001DDA8                            ; Animated pattern routine - more Marble Zone
0001DDA8                            ; ---------------------------------------------------------------------------
0001DDA8 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001DDAC 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001DDB0 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001DDB4 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001DDB8 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001DDBC 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001DDC0 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001DDC4 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001DDC8                            ; ===========================================================================
0001DDC8                            
0001DDC8                            loc_1C3EE:				; XREF: AniArt_MZextra
0001DDC8 2C91                       		move.l	(a1),(a6)
0001DDCA 43E9 0010                  		lea	$10(a1),a1
0001DDCE 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001DDD2 4E75                       		rts	
0001DDD4                            ; ===========================================================================
0001DDD4                            
0001DDD4                            loc_1C3FA:				; XREF: AniArt_MZextra
0001DDD4 2029 0002                  		move.l	2(a1),d0
0001DDD8 1029 0001                  		move.b	1(a1),d0
0001DDDC E098                       		ror.l	#8,d0
0001DDDE 2C80                       		move.l	d0,(a6)
0001DDE0 43E9 0010                  		lea	$10(a1),a1
0001DDE4 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001DDE8 4E75                       		rts	
0001DDEA                            ; ===========================================================================
0001DDEA                            
0001DDEA                            loc_1C410:				; XREF: AniArt_MZextra
0001DDEA 2CA9 0002                  		move.l	2(a1),(a6)
0001DDEE 43E9 0010                  		lea	$10(a1),a1
0001DDF2 51C9 FFF6                  		dbf	d1,loc_1C410
0001DDF6 4E75                       		rts	
0001DDF8                            ; ===========================================================================
0001DDF8                            
0001DDF8                            loc_1C41E:				; XREF: AniArt_MZextra
0001DDF8 2029 0004                  		move.l	4(a1),d0
0001DDFC 1029 0003                  		move.b	3(a1),d0
0001DE00 E098                       		ror.l	#8,d0
0001DE02 2C80                       		move.l	d0,(a6)
0001DE04 43E9 0010                  		lea	$10(a1),a1
0001DE08 51C9 FFEE                  		dbf	d1,loc_1C41E
0001DE0C 4E75                       		rts	
0001DE0E                            ; ===========================================================================
0001DE0E                            
0001DE0E                            loc_1C434:				; XREF: AniArt_MZextra
0001DE0E 2CA9 0004                  		move.l	4(a1),(a6)
0001DE12 43E9 0010                  		lea	$10(a1),a1
0001DE16 51C9 FFF6                  		dbf	d1,loc_1C434
0001DE1A 4E75                       		rts	
0001DE1C                            ; ===========================================================================
0001DE1C                            
0001DE1C                            loc_1C442:				; XREF: AniArt_MZextra
0001DE1C 2029 0006                  		move.l	6(a1),d0
0001DE20 1029 0005                  		move.b	5(a1),d0
0001DE24 E098                       		ror.l	#8,d0
0001DE26 2C80                       		move.l	d0,(a6)
0001DE28 43E9 0010                  		lea	$10(a1),a1
0001DE2C 51C9 FFEE                  		dbf	d1,loc_1C442
0001DE30 4E75                       		rts	
0001DE32                            ; ===========================================================================
0001DE32                            
0001DE32                            loc_1C458:				; XREF: AniArt_MZextra
0001DE32 2CA9 0006                  		move.l	6(a1),(a6)
0001DE36 43E9 0010                  		lea	$10(a1),a1
0001DE3A 51C9 FFF6                  		dbf	d1,loc_1C458
0001DE3E 4E75                       		rts	
0001DE40                            ; ===========================================================================
0001DE40                            
0001DE40                            loc_1C466:				; XREF: AniArt_MZextra
0001DE40 2029 0008                  		move.l	8(a1),d0
0001DE44 1029 0007                  		move.b	7(a1),d0
0001DE48 E098                       		ror.l	#8,d0
0001DE4A 2C80                       		move.l	d0,(a6)
0001DE4C 43E9 0010                  		lea	$10(a1),a1
0001DE50 51C9 FFEE                  		dbf	d1,loc_1C466
0001DE54 4E75                       		rts	
0001DE56                            ; ===========================================================================
0001DE56                            
0001DE56                            loc_1C47C:				; XREF: AniArt_MZextra
0001DE56 2CA9 0008                  		move.l	8(a1),(a6)
0001DE5A 43E9 0010                  		lea	$10(a1),a1
0001DE5E 51C9 FFF6                  		dbf	d1,loc_1C47C
0001DE62 4E75                       		rts	
0001DE64                            ; ===========================================================================
0001DE64                            
0001DE64                            loc_1C48A:				; XREF: AniArt_MZextra
0001DE64 2029 000A                  		move.l	$A(a1),d0
0001DE68 1029 0009                  		move.b	9(a1),d0
0001DE6C E098                       		ror.l	#8,d0
0001DE6E 2C80                       		move.l	d0,(a6)
0001DE70 43E9 0010                  		lea	$10(a1),a1
0001DE74 51C9 FFEE                  		dbf	d1,loc_1C48A
0001DE78 4E75                       		rts	
0001DE7A                            ; ===========================================================================
0001DE7A                            
0001DE7A                            loc_1C4A0:				; XREF: AniArt_MZextra
0001DE7A 2CA9 000A                  		move.l	$A(a1),(a6)
0001DE7E 43E9 0010                  		lea	$10(a1),a1
0001DE82 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001DE86 4E75                       		rts	
0001DE88                            ; ===========================================================================
0001DE88                            
0001DE88                            loc_1C4AE:				; XREF: AniArt_MZextra
0001DE88 2029 000C                  		move.l	$C(a1),d0
0001DE8C 1029 000B                  		move.b	$B(a1),d0
0001DE90 E098                       		ror.l	#8,d0
0001DE92 2C80                       		move.l	d0,(a6)
0001DE94 43E9 0010                  		lea	$10(a1),a1
0001DE98 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001DE9C 4E75                       		rts	
0001DE9E                            ; ===========================================================================
0001DE9E                            
0001DE9E                            loc_1C4C4:				; XREF: AniArt_MZextra
0001DE9E 2CA9 000C                  		move.l	$C(a1),(a6)
0001DEA2 43E9 0010                  		lea	$10(a1),a1
0001DEA6 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001DEAA 4E75                       		rts	
0001DEAC                            ; ===========================================================================
0001DEAC                            
0001DEAC                            loc_1C4D2:				; XREF: AniArt_MZextra
0001DEAC 2029 000C                  		move.l	$C(a1),d0
0001DEB0 E198                       		rol.l	#8,d0
0001DEB2 1011                       		move.b	0(a1),d0
0001DEB4 2C80                       		move.l	d0,(a6)
0001DEB6 43E9 0010                  		lea	$10(a1),a1
0001DEBA 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001DEBE 4E75                       		rts	
0001DEC0                            ; ===========================================================================
0001DEC0                            
0001DEC0                            loc_1C4E8:				; XREF: AniArt_MZextra
0001DEC0 3CA9 000E                  		move.w	$E(a1),(a6)
0001DEC4 3C91                       		move.w	0(a1),(a6)
0001DEC6 43E9 0010                  		lea	$10(a1),a1
0001DECA 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001DECE 4E75                       		rts	
0001DED0                            ; ===========================================================================
0001DED0                            
0001DED0                            loc_1C4FA:				; XREF: AniArt_MZextra
0001DED0 2011                       		move.l	0(a1),d0
0001DED2 1029 000F                  		move.b	$F(a1),d0
0001DED6 E098                       		ror.l	#8,d0
0001DED8 2C80                       		move.l	d0,(a6)
0001DEDA 43E9 0010                  		lea	$10(a1),a1
0001DEDE 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001DEE2 4E75                       		rts	
0001DEE4                            
0001DEE4                            ; ---------------------------------------------------------------------------
0001DEE4                            ; Animated pattern routine - giant ring
0001DEE4                            ; ---------------------------------------------------------------------------
0001DEE4                            
0001DEE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DEE4                            
0001DEE4                            
0001DEE4                            AniArt_GiantRing:			; XREF: AniArt_Load
0001DEE4 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001DEE8 6600                       		bne.s	loc_1C518
0001DEEA 4E75                       		rts
0001DEEC                            ; ===========================================================================
0001DEEC                            
0001DEEC                            loc_1C518:
0001DEEC 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001DEF2 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001DEF8 7000                       		moveq	#0,d0
0001DEFA 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001DEFE 43F1 0000                  		lea	(a1,d0.w),a1
0001DF02 0640 8000                  		addi.w	#$8000,d0
0001DF06 E588                       		lsl.l	#2,d0
0001DF08 E448                       		lsr.w	#2,d0
0001DF0A 0040 4000                  		ori.w	#$4000,d0
0001DF0E 4840                       		swap	d0
0001DF10 2D40 0004                  		move.l	d0,4(a6)
0001DF14 323C 000D                  		move.w	#$D,d1
0001DF18 6000 FE78                  		bra.w	LoadTiles
0001DF1C                            ; End of function AniArt_GiantRing
0001DF1C                            
0001DF1C                            ; ===========================================================================
0001DF1C                            ; ---------------------------------------------------------------------------
0001DF1C                            ; Object 21 - SCORE, TIME, RINGS
0001DF1C                            ; ---------------------------------------------------------------------------
0001DF1C                            
0001DF1C                            Obj21:					; XREF: Obj_Index
0001DF1C 7000                       		moveq	#0,d0
0001DF1E 1028 0024                  		move.b	$24(a0),d0
0001DF22 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001DF26 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001DF2A                            ; ===========================================================================
0001DF2A 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001DF2C 0000                       		dc.w Obj21_Flash-Obj21_Index
0001DF2E                            ; ===========================================================================
0001DF2E                            
0001DF2E                            Obj21_Main:				; XREF: Obj21_Main
0001DF2E 5428 0024                  		addq.b	#2,$24(a0)
0001DF32 317C 0090 0008             		move.w	#$90,8(a0)
0001DF38 317C 0108 000A             		move.w	#$108,$A(a0)
0001DF3E 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001DF46 317C 06BA 0002                             move.w    #$6BA,2(a0)
0001DF4C 117C 0000 0001             		move.b	#0,1(a0)
0001DF52 117C 0000 0018             		move.b	#0,$18(a0)
0001DF58                            
0001DF58                            Obj21_Flash:				; XREF: Obj21_Main
0001DF58 7000                       		moveq	#0,d0
0001DF5A 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001DF60 6600                       		bne.s	Obj21_Display
0001DF62 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001DF66 6600                       		bne.s	Obj21_Flash2	; if not, branch
0001DF68 5240                       		addq.w	#1,d0		; make ring counter flash red
0001DF6A                            ; ===========================================================================
0001DF6A                            
0001DF6A                            Obj21_Flash2:
0001DF6A 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001DF70 6600                       		bne.s	Obj21_Display	; if not, branch
0001DF72 5440                       		addq.w	#2,d0		; make time counter flash red
0001DF74                            
0001DF74                            Obj21_Display:
0001DF74 1140 001A                  		move.b	d0,$1A(a0)
0001DF78 4EF9 0000 E110             		jmp	DisplaySprite
0001DF7E                            ; ===========================================================================
0001DF7E                            ; ---------------------------------------------------------------------------
0001DF7E                            ; Sprite mappings - SCORE, TIME, RINGS
0001DF7E                            ; ---------------------------------------------------------------------------
0001DF7E                            Map_obj21:
0001DF7E                            	include "_maps\obj21.asm"
0001DF7E                            ; ---------------------------------------------------------------------------
0001DF7E                            ; Sprite mappings - SCORE, TIME, RINGS (CENTISECONDS)
0001DF7E                            ; ---------------------------------------------------------------------------
0001DF7E 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001DF82 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001DF86 0B                         byte_1C5BC:	dc.b $B
0001DF87 800D 8010 00               		dc.b $80, $D, $80, $10, 0	; SCOR
0001DF8C 800D 8028 20               		dc.b $80, $D, $80, $28,	$20	; E nnn
0001DF91 800D 8030 40               		dc.b $80, $D, $80, $30,	$40	; nnnn
0001DF96 900D 8020 00               		dc.b $90, $D, $80, $20,	0	; TIME
0001DF9B 900D 8038 28               		dc.b $90, $D, $80, $38,	$28	; n'nn
0001DFA0 9009 8000 48               			dc.b $90, 9, $80, $0,	$48	; "nn
0001DFA5 A00D 8018 00               		dc.b $A0, $D, $80, $18, 0	; RING
0001DFAA A001 8010 20               		dc.b $A0, 1, $80, $10, $20	; S
0001DFAF A009 8040 30               		dc.b $A0, 9, $80, $40, $30	; rings
0001DFB4 4005 811A 00               		dc.b $40, 5, $81, $1A, 0	; icon
0001DFB9 400D 811E 10               		dc.b $40, $D, $81, $1E, $10	; SONIC x nn
0001DFBE 00                         		dc.b 0
0001DFBF 0B                         byte_1C5F0:	dc.b $B
0001DFC0 800D 8010 00               		dc.b $80, $D, $80, $10, 0	; SCOR
0001DFC5 800D 8028 20               		dc.b $80, $D, $80, $28,	$20	; E nnn
0001DFCA 800D 8030 40               		dc.b $80, $D, $80, $30,	$40	; nnnn
0001DFCF 900D 8020 00               		dc.b $90, $D, $80, $20,	0	; TIME
0001DFD4 900D 8038 28               		dc.b $90, $D, $80, $38,	$28	; n'nn
0001DFD9 9009 8000 48               			dc.b $90, 9, $80, $0,	$48	; "nn
0001DFDE A00D A018 00               		dc.b $A0, $D, $A0, $18, 0	; RING
0001DFE3 A001 A010 20               		dc.b $A0, 1, $A0, $10, $20	; S
0001DFE8 A009 8040 30               		dc.b $A0, 9, $80, $40, $30	; rings
0001DFED 4005 811A 00               		dc.b $40, 5, $81, $1A, 0	; icon
0001DFF2 400D 811E 10               		dc.b $40, $D, $81, $1E, $10	; SONIC x nn
0001DFF7 00                         		dc.b 0
0001DFF8 0B                         byte_1C624:	dc.b $B
0001DFF9 800D 8010 00               		dc.b $80, $D, $80, $10, 0	; SCOR
0001DFFE 800D 8028 20               		dc.b $80, $D, $80, $28,	$20	; E nnn
0001E003 800D 8030 40               		dc.b $80, $D, $80, $30,	$40	; nnnn
0001E008 900D A020 00               		dc.b $90, $D, $A0, $20,	0	; TIME
0001E00D 900D 8038 28               		dc.b $90, $D, $80, $38,	$28	; n'nn
0001E012 9009 8000 48               			dc.b $90, 9, $80, $0,	$48	; "nn
0001E017 A00D 8018 00               		dc.b $A0, $D, $80, $18, 0	; RING
0001E01C A001 8010 20               		dc.b $A0, 1, $80, $10, $20	; S
0001E021 A009 8040 30               		dc.b $A0, 9, $80, $40, $30	; rings
0001E026 4005 811A 00               		dc.b $40, 5, $81, $1A, 0	; icon
0001E02B 400D 811E 10               		dc.b $40, $D, $81, $1E, $10	; SONIC x nn
0001E030 00                         		dc.b 0
0001E031 0B                         byte_1C658:	dc.b $B
0001E032 800D 8010 00               		dc.b $80, $D, $80, $10, 0	; SCOR
0001E037 800D 8028 20               		dc.b $80, $D, $80, $28,	$20	; E nnn
0001E03C 800D 8030 40               		dc.b $80, $D, $80, $30,	$40	; nnnn
0001E041 900D A020 00               		dc.b $90, $D, $A0, $20,	0	; TIME
0001E046 900D 8038 28               		dc.b $90, $D, $80, $38,	$28	; n'nn
0001E04B 9009 8000 48               			dc.b $90, 9, $80, $0,	$48	; "nn
0001E050 A00D A018 00               		dc.b $A0, $D, $A0, $18, 0	; RING
0001E055 A001 A010 20               		dc.b $A0, 1, $A0, $10, $20	; S
0001E05A A009 8040 30               		dc.b $A0, 9, $80, $40, $30	; rings
0001E05F 4005 811A 00               		dc.b $40, 5, $81, $1A, 0	; icon
0001E064 400D 811E 10               		dc.b $40, $D, $81, $1E, $10	; SONIC x nn
0001E06A 00                         		even
0001E06A 00                         		even
0001E06A                            
0001E06A                            ; ---------------------------------------------------------------------------
0001E06A                            ; Add points subroutine
0001E06A                            ; ---------------------------------------------------------------------------
0001E06A                            
0001E06A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E06A                            
0001E06A                            
0001E06A                            AddPoints:
0001E06A 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001E070 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001E074 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001E078 D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001E07A 223C 000F 423F             		move.l	#999999,d1
0001E080 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001E082 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001E086 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001E088 2481                       		move.l	d1,(a2)
0001E08A                            
0001E08A                            loc_1C6AC:
0001E08A 2013                       		move.l	(a3),d0
0001E08C B092                       		cmp.l	(a2),d0
0001E08E 6500 0000                  		bcs.w	locret_1C6B6
0001E092 2480                       		move.l	d0,(a2)
0001E094                            
0001E094                            locret_1C6B6:
0001E094 4E75                       		rts	
0001E096                            ; End of function AddPoints
0001E096                            
0001E096                            ; ---------------------------------------------------------------------------
0001E096                            ; Subroutine to	update the HUD
0001E096                            ; ---------------------------------------------------------------------------
0001E096                            
0001E096                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E096                            
0001E096                            
0001E096                            HudUpdate:
0001E096 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001E09A 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001E09E 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001E0A2 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001E0A4 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001E0A8 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001E0AE 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001E0B2 6100 0000                  		bsr.w	Hud_Score
0001E0B6                            
0001E0B6                            Hud_ChkRings:
0001E0B6 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001E0BA 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001E0BC 6A00                       		bpl.s	loc_1C6E4
0001E0BE 6100 0000                  		bsr.w	Hud_LoadZero
0001E0C2                            
0001E0C2                            loc_1C6E4:
0001E0C2 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001E0C6 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001E0CC 7200                       		moveq	#0,d1
0001E0CE 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001E0D2 6100 0000                  		bsr.w	Hud_Rings
0001E0D6                            
0001E0D6                            Hud_ChkTime:
0001E0D6 4A38 FE1E                          tst.b    ($FFFFFE1E).w    ; does the time    need updating?
0001E0DA 6700 0000                          beq.w    Hud_ChkLives    ; if not, branch    ;Mercury HUD Centiseconds (bsr.s => bsr.w) ported by -paranoimia-
0001E0DE 4A78 F63A                          tst.w    ($FFFFF63A).w    ; is the game paused?
0001E0E2 6600 0000                          bne.w    Hud_ChkLives    ; if yes, branch    ;Mercury HUD Centiseconds (bsr.s => bsr.w) ported by -paranoimia-
0001E0E6 43F8 FE22                          lea    ($FFFFFE22).w,a1
0001E0EA 0C99 0009 3B63                     cmpi.l    #$93B63,(a1)+    ; is the time 9'59"99?
0001E0F0 6700 0000                          beq.w    TimeOver    ; if yes, branch    ;Mercury HUD Centiseconds (bsr.s => bsr.w) ported by -paranoimia-
0001E0F4 1238 FEBF                          move.b    ($FFFFFEBF).w,d1
0001E0F8 5201                               addi.b    #1,d1
0001E0FA 0C01 0003                          cmpi.b    #3,d1
0001E0FE 6600                               bne.s    Cent_Skip
0001E100 123C 0000                          move.b    #0,d1
0001E104                            
0001E104                            Cent_Skip:
0001E104 11C1 FEBF                          move.b    d1,($FFFFFEBF).w
0001E108 0C01 0002                          cmpi.b    #2,d1
0001E10C 6700                               beq.s    Cent_Skip2
0001E10E 5201                               addi.b    #1,d1
0001E110                            
0001E110                            Cent_Skip2:
0001E110 D321                               add.b    d1,-(a1)
0001E112 0C11 0064                          cmpi.b    #100,(a1)
0001E116 6500                               bcs.s    Hud_DoCent
0001E118 12BC 0000                          move.b    #0,(a1)
0001E11C 5221                               addq.b    #1,-(a1)
0001E11E 0C11 003C                          cmpi.b    #60,(a1)
0001E122 6500                               bcs.s    loc_1C734
0001E124 12BC 0000                          move.b    #0,(a1)
0001E128 5221                               addq.b    #1,-(a1)
0001E12A 0C11 0009                          cmpi.b    #9,(a1)
0001E12E 6500                               bcs.s    loc_1C734
0001E130 12BC 0009                          move.b    #9,(a1)
0001E134                            
0001E134                            loc_1C734:
0001E134 203C 5E40 0003                     move.l    #$5E400003,d0
0001E13A 7200                               moveq    #0,d1
0001E13C 1238 FE23                          move.b    ($FFFFFE23).w,d1 ; load    minutes
0001E140 6100 0000                          bsr.w    Hud_Mins
0001E144 203C 5EC0 0003                     move.l    #$5EC00003,d0
0001E14A 7200                               moveq    #0,d1
0001E14C 1238 FE24                          move.b    ($FFFFFE24).w,d1 ; load    seconds
0001E150 6100 0000                          bsr.w    Hud_Secs
0001E154                            
0001E154                            Hud_DoCent:
0001E154 203C 5780 0003                     move.l    #$57800003,d0    ;Mercury Macros ported by -paranoimia-
0001E15A 7200                               moveq    #0,d1
0001E15C 1238 FE25                          move.b    ($FFFFFE25).w,d1 ; load    centiseconds
0001E160 6100 0000                          bsr.w    Hud_Secs
0001E164                            
0001E164                            Hud_ChkLives:
0001E164 4A38 FE1C                          tst.b    ($FFFFFE1C).w    ; does the lives counter need updating?
0001E168 6700                               beq.s    Hud_ChkBonus    ; if not, branch
0001E16A 4238 FE1C                          clr.b    ($FFFFFE1C).w
0001E16E 6100 0000                          bsr.w    Hud_Lives
0001E172                            
0001E172                            Hud_ChkBonus:
0001E172 4A38 F7D6                          tst.b    ($FFFFF7D6).w    ; do time/ring bonus counters need updating?
0001E176 6700                               beq.s    Hud_End        ; if not, branch
0001E178 4238 F7D6                          clr.b    ($FFFFF7D6).w
0001E17C 23FC 6E00 0002 00C0 0004           move.l    #$6E000002,($C00004).l
0001E186 7200                               moveq    #0,d1
0001E188 3238 F7D2                          move.w    ($FFFFF7D2).w,d1 ; load    time bonus
0001E18C 6100 0000                          bsr.w    Hud_TimeRingBonus
0001E190 7200                               moveq    #0,d1
0001E192 3238 F7D4                          move.w    ($FFFFF7D4).w,d1 ; load    ring bonus
0001E196 6100 0000                          bsr.w    Hud_TimeRingBonus
0001E19A                            
0001E19A                            Hud_End:
0001E19A 4E75                               rts
0001E19C                            ; ===========================================================================
0001E19C                            
0001E19C                            TimeOver:				; XREF: Hud_ChkTime
0001E19C 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001E1A0 41F8 D000                  		lea	($FFFFD000).w,a0
0001E1A4 2448                       		movea.l	a0,a2
0001E1A6 6100 E8B6                  		bsr.w	KillSonic
0001E1AA 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001E1B0 4E75                       		rts
0001E1B2                            ; ===========================================================================
0001E1B2                            
0001E1B2                            HudDebug:				; XREF: HudUpdate
0001E1B2 6100 0000                  		bsr.w	HudDb_XY
0001E1B6 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001E1BA 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001E1BC 6A00                       		bpl.s	HudDb_Rings
0001E1BE 6100 0000                  		bsr.w	Hud_LoadZero
0001E1C2                            
0001E1C2                            HudDb_Rings:
0001E1C2 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001E1C6 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001E1CC 7200                       		moveq	#0,d1
0001E1CE 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001E1D2 6100 0000                  		bsr.w	Hud_Rings
0001E1D6                            
0001E1D6                            HudDb_ObjCount:
0001E1D6 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001E1DC 7200                       		moveq	#0,d1
0001E1DE 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001E1E2 6100 0000                  		bsr.w	Hud_Secs
0001E1E6 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001E1EA 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001E1EC 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001E1F0 6100 0000                  		bsr.w	Hud_Lives
0001E1F4                            
0001E1F4                            HudDb_ChkBonus:
0001E1F4 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001E1F8 6700                       		beq.s	HudDb_End	; if not, branch
0001E1FA 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001E1FE 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001E208 7200                       		moveq	#0,d1
0001E20A 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001E20E 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001E212 7200                       		moveq	#0,d1
0001E214 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001E218 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001E21C                            
0001E21C                            HudDb_End:
0001E21C 4E75                       		rts
0001E21E                            ; End of function HudUpdate
0001E21E                            
0001E21E                            ; ---------------------------------------------------------------------------
0001E21E                            ; Subroutine to	load "0" on the	HUD
0001E21E                            ; ---------------------------------------------------------------------------
0001E21E                            
0001E21E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E21E                            
0001E21E                            
0001E21E                            Hud_LoadZero:				; XREF: HudUpdate
0001E21E 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001E228 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001E22C 343C 0002                  		move.w	#2,d2
0001E230 6000                       		bra.s	loc_1C83E
0001E232                            ; End of function Hud_LoadZero
0001E232                            
0001E232                            ; ---------------------------------------------------------------------------
0001E232                            ; Subroutine to    load " on the    HUD        ported by -paranoimia-
0001E232                            ; ---------------------------------------------------------------------------
0001E232                            
0001E232                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0001E232                            
0001E232                            
0001E232                            Hud_LoadMarks:                ; XREF: HUD_Update
0001E232 23FC 5740 0003 00D0 0004           move.l    #$57400003,($D00004).l  ;locVRAM    $D740
0001E23C 45FA 0000                          lea    Hud_TilesMarks(pc),a2
0001E240 343C 0002                          move.w    #2,d2
0001E244 6000                               bra.s    loc_1C83E
0001E246                            ; End of function Hud_LoadMarks
0001E246                            
0001E246                            ; ---------------------------------------------------------------------------
0001E246                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001E246                            ; ---------------------------------------------------------------------------
0001E246                            
0001E246                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E246                            
0001E246                            
0001E246                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001E246 4DF9 00C0 0000             		lea	($C00000).l,a6
0001E24C 6100 0000                  		bsr.w	Hud_Lives
0001E250 61E0                       		bsr.s    Hud_LoadMarks
0001E252 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001E25C 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001E260 343C 000E                  		move.w	#$E,d2
0001E264                            
0001E264                            loc_1C83E:				; XREF: Hud_LoadZero
0001E264 43FA 0000                  		lea	Art_Hud(pc),a1
0001E268                            
0001E268                            loc_1C842:
0001E268 323C 000F                  		move.w	#$F,d1
0001E26C 101A                       		move.b	(a2)+,d0
0001E26E 6B00                       		bmi.s	loc_1C85E
0001E270 4880                       		ext.w	d0
0001E272 EB48                       		lsl.w	#5,d0
0001E274 47F1 0000                  		lea	(a1,d0.w),a3
0001E278                            
0001E278                            loc_1C852:
0001E278 2C9B                       		move.l	(a3)+,(a6)
0001E27A 51C9 FFFC                  		dbf	d1,loc_1C852
0001E27E                            
0001E27E                            loc_1C858:
0001E27E 51CA FFE8                  		dbf	d2,loc_1C842
0001E282                            
0001E282 4E75                       		rts
0001E284                            ; ===========================================================================
0001E284                            
0001E284                            loc_1C85E:
0001E284 2CBC 0000 0000             		move.l	#0,(a6)
0001E28A 51C9 FFF8                  		dbf	d1,loc_1C85E
0001E28E                            
0001E28E 60EE                       		bra.s	loc_1C858
0001E290                            ; End of function Hud_Base
0001E290                            
0001E290                            ; ===========================================================================
0001E290 1A00 0000                  Hud_TilesMarks:    dc.b $1A, 0, 0, 0
0001E294 16FF FFFF FFFF FF00 0018+  Hud_TilesBase:    dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,    0, 0, $18, 0, 0
0001E2A0 FFFF 0000                  Hud_TilesZero:    dc.b $FF, $FF, 0, 0
0001E2A4                            ; ---------------------------------------------------------------------------
0001E2A4                            ; Subroutine to	load debug mode	numbers	patterns
0001E2A4                            ; ---------------------------------------------------------------------------
0001E2A4                            
0001E2A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E2A4                            
0001E2A4                            
0001E2A4                            HudDb_XY:				; XREF: HudDebug
0001E2A4 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001E2AE 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001E2B2 4841                       		swap	d1
0001E2B4 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001E2B8 6100                       		bsr.s	HudDb_XY2
0001E2BA 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001E2BE 4841                       		swap	d1
0001E2C0 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001E2C4                            ; End of function HudDb_XY
0001E2C4                            
0001E2C4                            
0001E2C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E2C4                            
0001E2C4                            
0001E2C4                            HudDb_XY2:
0001E2C4 7C07                       		moveq	#7,d6
0001E2C6 43F9 0000 058C             		lea	(Art_Text).l,a1
0001E2CC                            
0001E2CC                            HudDb_XYLoop:
0001E2CC E959                       		rol.w	#4,d1
0001E2CE 3401                       		move.w	d1,d2
0001E2D0 0242 000F                  		andi.w	#$F,d2
0001E2D4 0C42 000A                  		cmpi.w	#$A,d2
0001E2D8 6500                       		bcs.s	loc_1C8B2
0001E2DA 5E42                       		addq.w	#7,d2
0001E2DC                            
0001E2DC                            loc_1C8B2:
0001E2DC EB4A                       		lsl.w	#5,d2
0001E2DE 47F1 2000                  		lea	(a1,d2.w),a3
0001E2E2 2C9B                       		move.l	(a3)+,(a6)
0001E2E4 2C9B                       		move.l	(a3)+,(a6)
0001E2E6 2C9B                       		move.l	(a3)+,(a6)
0001E2E8 2C9B                       		move.l	(a3)+,(a6)
0001E2EA 2C9B                       		move.l	(a3)+,(a6)
0001E2EC 2C9B                       		move.l	(a3)+,(a6)
0001E2EE 2C9B                       		move.l	(a3)+,(a6)
0001E2F0 2C9B                       		move.l	(a3)+,(a6)
0001E2F2 4841                       		swap	d1
0001E2F4 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001E2F8                            
0001E2F8 4E75                       		rts	
0001E2FA                            ; End of function HudDb_XY2
0001E2FA                            
0001E2FA                            ; ---------------------------------------------------------------------------
0001E2FA                            ; Subroutine to	load rings numbers patterns
0001E2FA                            ; ---------------------------------------------------------------------------
0001E2FA                            
0001E2FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E2FA                            
0001E2FA                            
0001E2FA                            Hud_Rings:				; XREF: HudUpdate
0001E2FA 45F9 0000 0000             		lea	(Hud_100).l,a2
0001E300 7C02                       		moveq	#2,d6
0001E302 6000                       		bra.s	Hud_LoadArt
0001E304                            ; End of function Hud_Rings
0001E304                            
0001E304                            ; ---------------------------------------------------------------------------
0001E304                            ; Subroutine to	load score numbers patterns
0001E304                            ; ---------------------------------------------------------------------------
0001E304                            
0001E304                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E304                            
0001E304                            
0001E304                            Hud_Score:				; XREF: HudUpdate
0001E304 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001E30A 7C05                       		moveq	#5,d6
0001E30C                            
0001E30C                            Hud_LoadArt:
0001E30C 7800                       		moveq	#0,d4
0001E30E 43FA 0000                  		lea	Art_Hud(pc),a1
0001E312                            
0001E312                            Hud_ScoreLoop:
0001E312 7400                       		moveq	#0,d2
0001E314 261A                       		move.l	(a2)+,d3
0001E316                            
0001E316                            loc_1C8EC:
0001E316 9283                       		sub.l	d3,d1
0001E318 6500                       		bcs.s	loc_1C8F4
0001E31A 5242                       		addq.w	#1,d2
0001E31C 60F8                       		bra.s	loc_1C8EC
0001E31E                            ; ===========================================================================
0001E31E                            
0001E31E                            loc_1C8F4:
0001E31E D283                       		add.l	d3,d1
0001E320 4A42                       		tst.w	d2
0001E322 6700                       		beq.s	loc_1C8FE
0001E324 383C 0001                  		move.w	#1,d4
0001E328                            
0001E328                            loc_1C8FE:
0001E328 4A44                       		tst.w	d4
0001E32A 6700                       		beq.s	loc_1C92C
0001E32C ED4A                       		lsl.w	#6,d2
0001E32E 2D40 0004                  		move.l	d0,4(a6)
0001E332 47F1 2000                  		lea	(a1,d2.w),a3
0001E336 2C9B                       		move.l	(a3)+,(a6)
0001E338 2C9B                       		move.l	(a3)+,(a6)
0001E33A 2C9B                       		move.l	(a3)+,(a6)
0001E33C 2C9B                       		move.l	(a3)+,(a6)
0001E33E 2C9B                       		move.l	(a3)+,(a6)
0001E340 2C9B                       		move.l	(a3)+,(a6)
0001E342 2C9B                       		move.l	(a3)+,(a6)
0001E344 2C9B                       		move.l	(a3)+,(a6)
0001E346 2C9B                       		move.l	(a3)+,(a6)
0001E348 2C9B                       		move.l	(a3)+,(a6)
0001E34A 2C9B                       		move.l	(a3)+,(a6)
0001E34C 2C9B                       		move.l	(a3)+,(a6)
0001E34E 2C9B                       		move.l	(a3)+,(a6)
0001E350 2C9B                       		move.l	(a3)+,(a6)
0001E352 2C9B                       		move.l	(a3)+,(a6)
0001E354 2C9B                       		move.l	(a3)+,(a6)
0001E356                            
0001E356                            loc_1C92C:
0001E356 0680 0040 0000             		addi.l	#$400000,d0
0001E35C 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001E360                            
0001E360 4E75                       		rts
0001E362                            ; End of function Hud_Score
0001E362                            
0001E362                            ; ---------------------------------------------------------------------------
0001E362                            ; Subroutine to	load countdown numbers on the continue screen
0001E362                            ; ---------------------------------------------------------------------------
0001E362                            
0001E362                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E362                            
0001E362                            
0001E362                            ContScrCounter:				; XREF: ContinueScreen
0001E362 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001E36C 4DF9 00C0 0000             		lea	($C00000).l,a6
0001E372 45F9 0000 0000             		lea	(Hud_10).l,a2
0001E378 7C01                       		moveq	#1,d6
0001E37A 7800                       		moveq	#0,d4
0001E37C 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001E380                            
0001E380                            ContScr_Loop:
0001E380 7400                       		moveq	#0,d2
0001E382 261A                       		move.l	(a2)+,d3
0001E384                            
0001E384                            loc_1C95A:
0001E384 9283                       		sub.l	d3,d1
0001E386 6500                       		bcs.s	loc_1C962
0001E388 5242                       		addq.w	#1,d2
0001E38A 60F8                       		bra.s	loc_1C95A
0001E38C                            ; ===========================================================================
0001E38C                            
0001E38C                            loc_1C962:
0001E38C D283                       		add.l	d3,d1
0001E38E ED4A                       		lsl.w	#6,d2
0001E390 47F1 2000                  		lea	(a1,d2.w),a3
0001E394 2C9B                       		move.l	(a3)+,(a6)
0001E396 2C9B                       		move.l	(a3)+,(a6)
0001E398 2C9B                       		move.l	(a3)+,(a6)
0001E39A 2C9B                       		move.l	(a3)+,(a6)
0001E39C 2C9B                       		move.l	(a3)+,(a6)
0001E39E 2C9B                       		move.l	(a3)+,(a6)
0001E3A0 2C9B                       		move.l	(a3)+,(a6)
0001E3A2 2C9B                       		move.l	(a3)+,(a6)
0001E3A4 2C9B                       		move.l	(a3)+,(a6)
0001E3A6 2C9B                       		move.l	(a3)+,(a6)
0001E3A8 2C9B                       		move.l	(a3)+,(a6)
0001E3AA 2C9B                       		move.l	(a3)+,(a6)
0001E3AC 2C9B                       		move.l	(a3)+,(a6)
0001E3AE 2C9B                       		move.l	(a3)+,(a6)
0001E3B0 2C9B                       		move.l	(a3)+,(a6)
0001E3B2 2C9B                       		move.l	(a3)+,(a6)
0001E3B4 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001E3B8                            
0001E3B8 4E75                       		rts
0001E3BA                            ; End of function ContScrCounter
0001E3BA                            
0001E3BA                            ; ===========================================================================
0001E3BA                            ; ---------------------------------------------------------------------------
0001E3BA                            ; HUD counter sizes
0001E3BA                            ; ---------------------------------------------------------------------------
0001E3BA 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001E3BE 0000 2710                  Hud_10000:	dc.l 10000
0001E3C2 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001E3C6 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001E3CA 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001E3CE 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001E3D2                            
0001E3D2                            ; ---------------------------------------------------------------------------
0001E3D2                            ; Subroutine to	load time numbers patterns
0001E3D2                            ; ---------------------------------------------------------------------------
0001E3D2                            
0001E3D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E3D2                            
0001E3D2                            
0001E3D2                            Hud_Mins:				; XREF: Hud_ChkTime
0001E3D2 45F9 0001 E3CE             		lea	(Hud_1).l,a2
0001E3D8 7C00                       		moveq	#0,d6
0001E3DA 6000                       		bra.s	loc_1C9BA
0001E3DC                            ; End of function Hud_Mins
0001E3DC                            
0001E3DC                            
0001E3DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E3DC                            
0001E3DC                            
0001E3DC                            Hud_Secs:				; XREF: Hud_ChkTime
0001E3DC 45F9 0001 E3CA             		lea	(Hud_10).l,a2
0001E3E2 7C01                       		moveq	#1,d6
0001E3E4                            
0001E3E4                            loc_1C9BA:
0001E3E4 7800                       		moveq	#0,d4
0001E3E6 43FA 0000                  		lea	Art_Hud(pc),a1
0001E3EA                            
0001E3EA                            Hud_TimeLoop:
0001E3EA 7400                       		moveq	#0,d2
0001E3EC 261A                       		move.l	(a2)+,d3
0001E3EE                            
0001E3EE                            loc_1C9C4:
0001E3EE 9283                       		sub.l	d3,d1
0001E3F0 6500                       		bcs.s	loc_1C9CC
0001E3F2 5242                       		addq.w	#1,d2
0001E3F4 60F8                       		bra.s	loc_1C9C4
0001E3F6                            ; ===========================================================================
0001E3F6                            
0001E3F6                            loc_1C9CC:
0001E3F6 D283                       		add.l	d3,d1
0001E3F8 4A42                       		tst.w	d2
0001E3FA 6700                       		beq.s	loc_1C9D6
0001E3FC 383C 0001                  		move.w	#1,d4
0001E400                            
0001E400                            loc_1C9D6:
0001E400 ED4A                       		lsl.w	#6,d2
0001E402 2D40 0004                  		move.l	d0,4(a6)
0001E406 47F1 2000                  		lea	(a1,d2.w),a3
0001E40A 2C9B                       		move.l	(a3)+,(a6)
0001E40C 2C9B                       		move.l	(a3)+,(a6)
0001E40E 2C9B                       		move.l	(a3)+,(a6)
0001E410 2C9B                       		move.l	(a3)+,(a6)
0001E412 2C9B                       		move.l	(a3)+,(a6)
0001E414 2C9B                       		move.l	(a3)+,(a6)
0001E416 2C9B                       		move.l	(a3)+,(a6)
0001E418 2C9B                       		move.l	(a3)+,(a6)
0001E41A 2C9B                       		move.l	(a3)+,(a6)
0001E41C 2C9B                       		move.l	(a3)+,(a6)
0001E41E 2C9B                       		move.l	(a3)+,(a6)
0001E420 2C9B                       		move.l	(a3)+,(a6)
0001E422 2C9B                       		move.l	(a3)+,(a6)
0001E424 2C9B                       		move.l	(a3)+,(a6)
0001E426 2C9B                       		move.l	(a3)+,(a6)
0001E428 2C9B                       		move.l	(a3)+,(a6)
0001E42A 0680 0040 0000             		addi.l	#$400000,d0
0001E430 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001E434                            
0001E434 4E75                       		rts
0001E436                            ; End of function Hud_Secs
0001E436                            
0001E436                            ; ---------------------------------------------------------------------------
0001E436                            ; Subroutine to	load time/ring bonus numbers patterns
0001E436                            ; ---------------------------------------------------------------------------
0001E436                            
0001E436                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E436                            
0001E436                            
0001E436                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001E436 45F9 0001 E3C2             		lea	(Hud_1000).l,a2
0001E43C 7C03                       		moveq	#3,d6
0001E43E 7800                       		moveq	#0,d4
0001E440 43FA 0000                  		lea	Art_Hud(pc),a1
0001E444                            
0001E444                            Hud_BonusLoop:
0001E444 7400                       		moveq	#0,d2
0001E446 261A                       		move.l	(a2)+,d3
0001E448                            
0001E448                            loc_1CA1E:
0001E448 9283                       		sub.l	d3,d1
0001E44A 6500                       		bcs.s	loc_1CA26
0001E44C 5242                       		addq.w	#1,d2
0001E44E 60F8                       		bra.s	loc_1CA1E
0001E450                            ; ===========================================================================
0001E450                            
0001E450                            loc_1CA26:
0001E450 D283                       		add.l	d3,d1
0001E452 4A42                       		tst.w	d2
0001E454 6700                       		beq.s	loc_1CA30
0001E456 383C 0001                  		move.w	#1,d4
0001E45A                            
0001E45A                            loc_1CA30:
0001E45A 4A44                       		tst.w	d4
0001E45C 6700                       		beq.s	Hud_ClrBonus
0001E45E ED4A                       		lsl.w	#6,d2
0001E460 47F1 2000                  		lea	(a1,d2.w),a3
0001E464 2C9B                       		move.l	(a3)+,(a6)
0001E466 2C9B                       		move.l	(a3)+,(a6)
0001E468 2C9B                       		move.l	(a3)+,(a6)
0001E46A 2C9B                       		move.l	(a3)+,(a6)
0001E46C 2C9B                       		move.l	(a3)+,(a6)
0001E46E 2C9B                       		move.l	(a3)+,(a6)
0001E470 2C9B                       		move.l	(a3)+,(a6)
0001E472 2C9B                       		move.l	(a3)+,(a6)
0001E474 2C9B                       		move.l	(a3)+,(a6)
0001E476 2C9B                       		move.l	(a3)+,(a6)
0001E478 2C9B                       		move.l	(a3)+,(a6)
0001E47A 2C9B                       		move.l	(a3)+,(a6)
0001E47C 2C9B                       		move.l	(a3)+,(a6)
0001E47E 2C9B                       		move.l	(a3)+,(a6)
0001E480 2C9B                       		move.l	(a3)+,(a6)
0001E482 2C9B                       		move.l	(a3)+,(a6)
0001E484                            
0001E484                            loc_1CA5A:
0001E484 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001E488                            
0001E488 4E75                       		rts
0001E48A                            ; ===========================================================================
0001E48A                            
0001E48A                            Hud_ClrBonus:
0001E48A 7A0F                       		moveq	#$F,d5
0001E48C                            
0001E48C                            Hud_ClrBonusLoop:
0001E48C 2CBC 0000 0000             		move.l	#0,(a6)
0001E492 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001E496                            
0001E496 60EC                       		bra.s	loc_1CA5A
0001E498                            ; End of function Hud_TimeRingBonus
0001E498                            
0001E498                            ; ---------------------------------------------------------------------------
0001E498                            ; Subroutine to	load uncompressed lives	counter	patterns
0001E498                            ; ---------------------------------------------------------------------------
0001E498                            
0001E498                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E498                            
0001E498                            
0001E498                            Hud_Lives:				; XREF: Hud_ChkLives
0001E498 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001E49E 7200                       		moveq	#0,d1
0001E4A0 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001E4A4 45F9 0001 E3CA             		lea	(Hud_10).l,a2
0001E4AA 7C01                       		moveq	#1,d6
0001E4AC 7800                       		moveq	#0,d4
0001E4AE 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001E4B2                            
0001E4B2                            Hud_LivesLoop:
0001E4B2 2D40 0004                  		move.l	d0,4(a6)
0001E4B6 7400                       		moveq	#0,d2
0001E4B8 261A                       		move.l	(a2)+,d3
0001E4BA                            
0001E4BA                            loc_1CA90:
0001E4BA 9283                       		sub.l	d3,d1
0001E4BC 6500                       		bcs.s	loc_1CA98
0001E4BE 5242                       		addq.w	#1,d2
0001E4C0 60F8                       		bra.s	loc_1CA90
0001E4C2                            ; ===========================================================================
0001E4C2                            
0001E4C2                            loc_1CA98:
0001E4C2 D283                       		add.l	d3,d1
0001E4C4 4A42                       		tst.w	d2
0001E4C6 6700                       		beq.s	loc_1CAA2
0001E4C8 383C 0001                  		move.w	#1,d4
0001E4CC                            
0001E4CC                            loc_1CAA2:
0001E4CC 4A44                       		tst.w	d4
0001E4CE 6700                       		beq.s	Hud_ClrLives
0001E4D0                            
0001E4D0                            loc_1CAA6:
0001E4D0 EB4A                       		lsl.w	#5,d2
0001E4D2 47F1 2000                  		lea	(a1,d2.w),a3
0001E4D6 2C9B                       		move.l	(a3)+,(a6)
0001E4D8 2C9B                       		move.l	(a3)+,(a6)
0001E4DA 2C9B                       		move.l	(a3)+,(a6)
0001E4DC 2C9B                       		move.l	(a3)+,(a6)
0001E4DE 2C9B                       		move.l	(a3)+,(a6)
0001E4E0 2C9B                       		move.l	(a3)+,(a6)
0001E4E2 2C9B                       		move.l	(a3)+,(a6)
0001E4E4 2C9B                       		move.l	(a3)+,(a6)
0001E4E6                            
0001E4E6                            loc_1CABC:
0001E4E6 0680 0040 0000             		addi.l	#$400000,d0
0001E4EC 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001E4F0                            
0001E4F0 4E75                       		rts
0001E4F2                            ; ===========================================================================
0001E4F2                            
0001E4F2                            Hud_ClrLives:
0001E4F2 4A46                       		tst.w	d6
0001E4F4 67DA                       		beq.s	loc_1CAA6
0001E4F6 7A07                       		moveq	#7,d5
0001E4F8                            
0001E4F8                            Hud_ClrLivesLoop:
0001E4F8 2CBC 0000 0000             		move.l	#0,(a6)
0001E4FE 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001E502 60E2                       		bra.s	loc_1CABC
0001E504                            ; End of function Hud_Lives
0001E504                            
0001E504                            ; ===========================================================================
0001E504                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001E884                            		even
0001E884                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001E9C4                            		even
0001E9C4                            ; ===========================================================================
0001E9C4                            ; ---------------------------------------------------------------------------
0001E9C4                            ; When debug mode is currently in use
0001E9C4                            ; ---------------------------------------------------------------------------
0001E9C4                            
0001E9C4                            DebugMode:				; XREF: Obj01; Obj09
0001E9C4 7000                       		moveq	#0,d0
0001E9C6 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001E9CA 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001E9CE 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001E9D2                            ; ===========================================================================
0001E9D2 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001E9D4 0000                       		dc.w Debug_Skip-Debug_Index
0001E9D6                            ; ===========================================================================
0001E9D6                            
0001E9D6                            Debug_Main:				; XREF: Debug_Index
0001E9D6 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001E9DA 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001E9E0 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001E9E6 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001E9EC 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001E9F2 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001E9F8 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001E9FE 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001EA04 117C 0000 001A             		move.b	#0,$1A(a0)
0001EA0A 117C 0000 001C             		move.b	#0,$1C(a0)
0001EA10 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001EA16 6600                       		bne.s	Debug_Zone	; if not, branch
0001EA18 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001EA1E 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001EA24 7006                       		moveq	#6,d0		; use 6th debug	item list
0001EA26 6000                       		bra.s	Debug_UseList
0001EA28                            ; ===========================================================================
0001EA28                            
0001EA28                            Debug_Zone:
0001EA28 7000                       		moveq	#0,d0
0001EA2A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001EA2E                            
0001EA2E                            Debug_UseList:
0001EA2E 45F9 0000 0000             		lea	(DebugList).l,a2
0001EA34 D040                       		add.w	d0,d0
0001EA36 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001EA3A 3C1A                       		move.w	(a2)+,d6
0001EA3C BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001EA40 6200                       		bhi.s	loc_1CF9E
0001EA42 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001EA48                            
0001EA48                            loc_1CF9E:
0001EA48 6100 0000                  		bsr.w	Debug_ShowItem
0001EA4C 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001EA52 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001EA58                            
0001EA58                            Debug_Skip:				; XREF: Debug_Index
0001EA58 7006                       		moveq	#6,d0
0001EA5A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001EA60 6700                       		beq.s	loc_1CFBE
0001EA62 7000                       		moveq	#0,d0
0001EA64 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001EA68                            
0001EA68                            loc_1CFBE:
0001EA68 45F9 0000 0000             		lea	(DebugList).l,a2
0001EA6E D040                       		add.w	d0,d0
0001EA70 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001EA74 3C1A                       		move.w	(a2)+,d6
0001EA76 6100 0000                  		bsr.w	Debug_Control
0001EA7A 4EF9 0000 E110             		jmp	DisplaySprite
0001EA80                            
0001EA80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EA80                            
0001EA80                            
0001EA80                            Debug_Control:
0001EA80 7800                       		moveq	#0,d4
0001EA82 323C 0001                  		move.w	#1,d1
0001EA86 1838 F605                  		move.b	($FFFFF605).w,d4
0001EA8A 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001EA8E 6600                       		bne.s	loc_1D018	; if yes, branch
0001EA90 1038 F604                  		move.b	($FFFFF604).w,d0
0001EA94 0240 000F                  		andi.w	#$F,d0
0001EA98 6600                       		bne.s	loc_1D000
0001EA9A 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001EAA0 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001EAA6 6000 0000                  		bra.w	Debug_BackItem
0001EAAA                            ; ===========================================================================
0001EAAA                            
0001EAAA                            loc_1D000:
0001EAAA 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001EAAE 6600                       		bne.s	loc_1D01C
0001EAB0 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001EAB6 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001EABA 6600                       		bne.s	loc_1D018
0001EABC 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001EAC2                            
0001EAC2                            loc_1D018:
0001EAC2 1838 F604                  		move.b	($FFFFF604).w,d4
0001EAC6                            
0001EAC6                            loc_1D01C:
0001EAC6 7200                       		moveq	#0,d1
0001EAC8 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001EACC 5241                       		addq.w	#1,d1
0001EACE 4841                       		swap	d1
0001EAD0 E881                       		asr.l	#4,d1
0001EAD2 2428 000C                  		move.l	$C(a0),d2
0001EAD6 2628 0008                  		move.l	8(a0),d3
0001EADA 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001EADE 6700                       		beq.s	loc_1D03C	; if not, branch
0001EAE0 9481                       		sub.l	d1,d2
0001EAE2 6400                       		bcc.s	loc_1D03C
0001EAE4 7400                       		moveq	#0,d2
0001EAE6                            
0001EAE6                            loc_1D03C:
0001EAE6 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001EAEA 6700                       		beq.s	loc_1D052	; if not, branch
0001EAEC D481                       		add.l	d1,d2
0001EAEE 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001EAF4 6500                       		bcs.s	loc_1D052
0001EAF6 243C 07FF 0000             		move.l	#$7FF0000,d2
0001EAFC                            
0001EAFC                            loc_1D052:
0001EAFC 0804 0002                  		btst	#2,d4
0001EB00 6700                       		beq.s	loc_1D05E
0001EB02 9681                       		sub.l	d1,d3
0001EB04 6400                       		bcc.s	loc_1D05E
0001EB06 7600                       		moveq	#0,d3
0001EB08                            
0001EB08                            loc_1D05E:
0001EB08 0804 0003                  		btst	#3,d4
0001EB0C 6700                       		beq.s	loc_1D066
0001EB0E D681                       		add.l	d1,d3
0001EB10                            
0001EB10                            loc_1D066:
0001EB10 2142 000C                  		move.l	d2,$C(a0)
0001EB14 2143 0008                  		move.l	d3,8(a0)
0001EB18                            
0001EB18                            Debug_BackItem:
0001EB18 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001EB1E 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001EB20 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001EB26 6700                       		beq.s	Debug_NextItem	; if not, branch
0001EB28 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001EB2C 6400                       		bcc.s	Debug_NoLoop
0001EB2E DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001EB32 6000                       		bra.s	Debug_NoLoop
0001EB34                            ; ===========================================================================
0001EB34                            
0001EB34                            Debug_NextItem:
0001EB34 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001EB3A 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001EB3C 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001EB40 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001EB44 6200                       		bhi.s	Debug_NoLoop
0001EB46 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001EB4C                            
0001EB4C                            Debug_NoLoop:
0001EB4C 6000 0000                  		bra.w	Debug_ShowItem
0001EB50                            ; ===========================================================================
0001EB50                            
0001EB50                            Debug_MakeItem:
0001EB50 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001EB56 6700                       		beq.s	Debug_Exit	; if not, branch
0001EB58 4EB9 0000 E5A6             		jsr	SingleObjLoad
0001EB5E 6600                       		bne.s	Debug_Exit
0001EB60 3368 0008 0008             		move.w	8(a0),8(a1)
0001EB66 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001EB6C 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001EB70 1368 0001 0001             		move.b	1(a0),1(a1)
0001EB76 1368 0001 0022             		move.b	1(a0),$22(a1)
0001EB7C 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001EB82 7000                       		moveq	#0,d0
0001EB84 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001EB88 E748                       		lsl.w	#3,d0
0001EB8A 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001EB90 4E75                       		rts	
0001EB92                            ; ===========================================================================
0001EB92                            
0001EB92                            Debug_Exit:
0001EB92 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001EB98 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001EB9A 7000                       		moveq	#0,d0
0001EB9C 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001EBA0 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001EBA8 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001EBAE 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001EBB2 3140 000A                  		move.w	d0,$A(a0)
0001EBB6 3140 000E                  		move.w	d0,$E(a0)
0001EBBA 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001EBC0 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001EBC6 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001EBCC 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001EBCE 4278 F780                  		clr.w	($FFFFF780).w
0001EBD2 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001EBD8 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001EBE0 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001EBE6 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001EBEC 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001EBF2 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001EBF8                            
0001EBF8                            Debug_DoNothing:
0001EBF8 4E75                       		rts	
0001EBFA                            ; End of function Debug_Control
0001EBFA                            
0001EBFA                            
0001EBFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EBFA                            
0001EBFA                            
0001EBFA                            Debug_ShowItem:				; XREF: Debug_Main
0001EBFA 7000                       		moveq	#0,d0
0001EBFC 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001EC00 E748                       		lsl.w	#3,d0
0001EC02 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001EC08 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001EC0E 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001EC14 4E75                       		rts	
0001EC16                            ; End of function Debug_ShowItem
0001EC16                            
0001EC16                            ; ===========================================================================
0001EC16                            ; ---------------------------------------------------------------------------
0001EC16                            ; Debug	list pointers
0001EC16                            ; ---------------------------------------------------------------------------
0001EC16                            DebugList:
0001EC16                            	include "_inc\Debug list pointers.asm"
0001EC16                            ; ---------------------------------------------------------------------------
0001EC16                            ; Debug	list pointers
0001EC16                            ; ---------------------------------------------------------------------------
0001EC16 0000                       	dc.w Debug_GHZ-DebugList
0001EC18 0000                       	dc.w Debug_LZ-DebugList
0001EC1A 0000                       	dc.w Debug_MZ-DebugList
0001EC1C 0000                       	dc.w Debug_SLZ-DebugList
0001EC1E 0000                       	dc.w Debug_SYZ-DebugList
0001EC20 0000                       	dc.w Debug_SBZ-DebugList
0001EC22 0000                       	dc.w Debug_Ending-DebugList
0001EC22 0000                       	dc.w Debug_Ending-DebugList
0001EC24                            
0001EC24                            ; ---------------------------------------------------------------------------
0001EC24                            ; Debug	list - Green Hill
0001EC24                            ; ---------------------------------------------------------------------------
0001EC24                            Debug_GHZ:
0001EC24                            	include "_inc\Debug list - GHZ.asm"
0001EC24                            ; ---------------------------------------------------------------------------
0001EC24                            ; Debug	list - Green Hill
0001EC24                            ; ---------------------------------------------------------------------------
0001EC24 0010                       	dc.w $10			; number of items in list
0001EC26 2500 AA64                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001EC2A 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001EC2E 2600 B094                  	dc.l Map_obj26+$26000000
0001EC32 0000 0680                  	dc.b 0,	0, 6, $80
0001EC36 1F00 A1EC                  	dc.l Map_obj1F+$1F000000
0001EC3A 0000 0400                  	dc.b 0,	0, 4, 0
0001EC3E 2200 A4CC                  	dc.l Map_obj22+$22000000
0001EC42 0000 0444                  	dc.b 0,	0, 4, $44
0001EC46 2B00 B6DA                  	dc.l Map_obj2B+$2B000000
0001EC4A 0000 047B                  	dc.b 0,	0, 4, $7B
0001EC4E 3600 DAEA                  	dc.l Map_obj36+$36000000
0001EC52 0000 051B                  	dc.b 0,	0, 5, $1B
0001EC56 1800 8BEA                  	dc.l Map_obj18+$18000000
0001EC5A 0000 4000                  	dc.b 0,	0, $40,	0
0001EC5E 3B00 DC10                  	dc.l Map_obj3B+$3B000000
0001EC62 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001EC66 4001 02C4                  	dc.l Map_obj40+$40000000
0001EC6A 0000 04F0                  	dc.b 0,	0, 4, $F0
0001EC6E 4100 E838                  	dc.l Map_obj41+$41000000
0001EC72 0000 0523                  	dc.b 0,	0, 5, $23
0001EC76 4200 EA5E                  	dc.l Map_obj42+$42000000
0001EC7A 0000 249B                  	dc.b 0,	0, $24,	$9B
0001EC7E 4400 ED6C                  	dc.l Map_obj44+$44000000
0001EC82 0000 434C                  	dc.b 0,	0, $43,	$4C
0001EC86 1900 8C58                  	dc.l Map_obj48+$19000000
0001EC8A 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001EC8E 7901 8ACC                  	dc.l Map_obj79+$79000000
0001EC92 0100 07A0                  	dc.b 1,	0, 7, $A0
0001EC96 4B00 AAA4                  	dc.l Map_obj4B+$4B000000
0001EC9A 0000 2400                  	dc.b 0,	0, $24,	0
0001EC9E 7D01 8C1C                  	dc.l Map_obj7D+$7D000000
0001ECA2 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001ECA6                            	even
0001ECA6                            	even
0001ECA6                            
0001ECA6                            ; ---------------------------------------------------------------------------
0001ECA6                            ; Debug	list - Labyrinth
0001ECA6                            ; ---------------------------------------------------------------------------
0001ECA6                            Debug_LZ:
0001ECA6                            	include "_inc\Debug list - LZ.asm"
0001ECA6                            ; ---------------------------------------------------------------------------
0001ECA6                            ; Debug	list - Labyrinth
0001ECA6                            ; ---------------------------------------------------------------------------
0001ECA6 0019                       	dc.w $19
0001ECA8 2500 AA64                  	dc.l Map_obj25+$25000000
0001ECAC 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001ECB0 2600 B094                  	dc.l Map_obj26+$26000000
0001ECB4 0000 0680                  	dc.b 0,	0, 6, $80
0001ECB8 4100 E838                  	dc.l Map_obj41+$41000000
0001ECBC 0000 0523                  	dc.b 0,	0, 5, $23
0001ECC0 2C00 B780                  	dc.l Map_obj2C+$2C000000
0001ECC4 0800 2486                  	dc.b 8,	0, $24,	$86
0001ECC8 2D00 B96C                  	dc.l Map_obj2D+$2D000000
0001ECCC 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001ECD0 1601 2AB8                  	dc.l Map_obj16+$16000000
0001ECD4 0000 03CC                  	dc.b 0,	0, 3, $CC
0001ECD8 1601 2AB8                  	dc.l Map_obj16+$16000000
0001ECDC 0203 03CC                  	dc.b 2,	3, 3, $CC
0001ECE0 3300 CDEA                  	dc.l Map_obj33+$33000000
0001ECE4 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001ECE8 3200 C9AA                  	dc.l Map_obj32+$32000000
0001ECEC 0000 0513                  	dc.b 0,	0, 5, $13
0001ECF0 3600 DAEA                  	dc.l Map_obj36+$36000000
0001ECF4 0000 051B                  	dc.b 0,	0, 5, $1B
0001ECF8 5201 0BDA                  	dc.l Map_obj52a+$52000000
0001ECFC 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001ED00 6101 2CE0                  	dc.l Map_obj61+$61000000
0001ED04 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001ED08 6101 2CE0                  	dc.l Map_obj61+$61000000
0001ED0C 1301 43E6                  	dc.b $13, 1, $43, $E6
0001ED10 6101 2CE0                  	dc.l Map_obj61+$61000000
0001ED14 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001ED18 6201 2E34                  	dc.l Map_obj62+$62000000
0001ED1C 0000 443E                  	dc.b 0,	0, $44,	$3E
0001ED20 6101 2CE0                  	dc.l Map_obj61+$61000000
0001ED24 2702 43E6                  	dc.b $27, 2, $43, $E6
0001ED28 6101 2CE0                  	dc.l Map_obj61+$61000000
0001ED2C 3003 43E6                  	dc.b $30, 3, $43, $E6
0001ED30 6301 3196                  	dc.l Map_obj63+$63000000
0001ED34 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001ED38 6001 2A02                  	dc.l Map_obj60+$60000000
0001ED3C 0000 0467                  	dc.b 0,	0, 4, $67
0001ED40 6401 34DC                  	dc.l Map_obj64+$64000000
0001ED44 8413 8348                  	dc.b $84, $13, $83, $48
0001ED48 6501 3664                  	dc.l Map_obj65+$65000000
0001ED4C 0202 C259                  	dc.b 2,	2, $C2,	$59
0001ED50 6501 3664                  	dc.l Map_obj65+$65000000
0001ED54 0909 C259                  	dc.b 9,	9, $C2,	$59
0001ED58 0B01 1E52                  	dc.l Map_obj0B+$B000000
0001ED5C 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001ED60 0C01 1F22                  	dc.l Map_obj0C+$C000000
0001ED64 0200 4328                  	dc.b 2,	0, $43,	$28
0001ED68 7901 8ACC                  	dc.l Map_obj79+$79000000
0001ED6C 0100 07A0                  	dc.b 1,	0, 7, $A0
0001ED70                            	even
0001ED70                            	even
0001ED70                            
0001ED70                            ; ---------------------------------------------------------------------------
0001ED70                            ; Debug	list - Marble
0001ED70                            ; ---------------------------------------------------------------------------
0001ED70                            Debug_MZ:
0001ED70                            	include "_inc\Debug list - MZ.asm"
0001ED70                            ; ---------------------------------------------------------------------------
0001ED70                            ; Debug	list - Marble
0001ED70                            ; ---------------------------------------------------------------------------
0001ED70 0012                       	dc.w $12
0001ED72 2500 AA64                  	dc.l Map_obj25+$25000000
0001ED76 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001ED7A 2600 B094                  	dc.l Map_obj26+$26000000
0001ED7E 0000 0680                  	dc.b 0,	0, 6, $80
0001ED82 2200 A4CC                  	dc.l Map_obj22+$22000000
0001ED86 0000 0444                  	dc.b 0,	0, 4, $44
0001ED8A 3600 DAEA                  	dc.l Map_obj36+$36000000
0001ED8E 0000 051B                  	dc.b 0,	0, 5, $1B
0001ED92 4100 E838                  	dc.l Map_obj41+$41000000
0001ED96 0000 0523                  	dc.b 0,	0, 5, $23
0001ED9A 1300 BE7A                  	dc.l Map_obj14+$13000000
0001ED9E 0000 0345                  	dc.b 0,	0, 3, $45
0001EDA2 4600 F41E                  	dc.l Map_obj46+$46000000
0001EDA6 0000 4000                  	dc.b 0,	0, $40,	0
0001EDAA 4C00 FD70                  	dc.l Map_obj4C+$4C000000
0001EDAE 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001EDB2 4E01 0054                  	dc.l Map_obj4E+$4E000000
0001EDB6 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001EDBA 3300 CDEA                  	dc.l Map_obj33+$33000000
0001EDBE 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001EDC2 5001 0452                  	dc.l Map_obj50+$50000000
0001EDC6 0000 247B                  	dc.b 0,	0, $24,	$7B
0001EDCA 5101 090E                  	dc.l Map_obj51+$51000000
0001EDCE 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001EDD2 5201 0B84                  	dc.l Map_obj52+$52000000
0001EDD6 0000 02B8                  	dc.b 0,	0, 2, $B8
0001EDDA 5300 91F0                  	dc.l Map_obj53+$53000000
0001EDDE 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001EDE2 5400 FD36                  	dc.l Map_obj54+$54000000
0001EDE6 0000 8680                  	dc.b 0,	0, $86,	$80
0001EDEA 5501 0D78                  	dc.l Map_obj55+$55000000
0001EDEE 0000 04B8                  	dc.b 0,	0, 4, $B8
0001EDF2 7801 8744                  	dc.l Map_obj78+$78000000
0001EDF6 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001EDFA 7901 8ACC                  	dc.l Map_obj79+$79000000
0001EDFE 0100 07A0                  	dc.b 1,	0, 7, $A0
0001EE02                            	even
0001EE02                            	even
0001EE02                            
0001EE02                            ; ---------------------------------------------------------------------------
0001EE02                            ; Debug	list - Star Light
0001EE02                            ; ---------------------------------------------------------------------------
0001EE02                            Debug_SLZ:
0001EE02                            	include "_inc\Debug list - SLZ.asm"
0001EE02                            ; ---------------------------------------------------------------------------
0001EE02                            ; Debug	list - Star Light
0001EE02                            ; ---------------------------------------------------------------------------
0001EE02 000F                       	dc.w $F
0001EE04 2500 AA64                  	dc.l Map_obj25+$25000000
0001EE08 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001EE0C 2600 B094                  	dc.l Map_obj26+$26000000
0001EE10 0000 0680                  	dc.b 0,	0, 6, $80
0001EE14 5901 187A                  	dc.l Map_obj59+$59000000
0001EE18 0000 4000                  	dc.b 0,	0, $40,	0
0001EE1C 5300 91F0                  	dc.l Map_obj53+$53000000
0001EE20 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001EE24 1800 8C48                  	dc.l Map_obj18b+$18000000
0001EE28 0000 4000                  	dc.b 0,	0, $40,	0
0001EE2C 5A01 19B4                  	dc.l Map_obj5A+$5A000000
0001EE30 0000 4000                  	dc.b 0,	0, $40,	0
0001EE34 5B01 1B6C                  	dc.l Map_obj5B+$5B000000
0001EE38 0000 4000                  	dc.b 0,	0, $40,	0
0001EE3C 5D01 213C                  	dc.l Map_obj5D+$5D000000
0001EE40 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001EE44 5E01 24CE                  	dc.l Map_obj5E+$5E000000
0001EE48 0000 0374                  	dc.b 0,	0, 3, $74
0001EE4C 4100 E838                  	dc.l Map_obj41+$41000000
0001EE50 0000 0523                  	dc.b 0,	0, 5, $23
0001EE54 1300 BE7A                  	dc.l Map_obj14+$13000000
0001EE58 0000 0480                  	dc.b 0,	0, 4, $80
0001EE5C 1C00 9300                  	dc.l Map_obj1C+$1C000000
0001EE60 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001EE64 5F01 274C                  	dc.l Map_obj5F+$5F000000
0001EE68 0000 0400                  	dc.b 0,	0, 4, 0
0001EE6C 6001 2A02                  	dc.l Map_obj60+$60000000
0001EE70 0000 2429                  	dc.b 0,	0, $24,	$29
0001EE74 7901 8ACC                  	dc.l Map_obj79+$79000000
0001EE78 0100 07A0                  	dc.b 1,	0, 7, $A0
0001EE7C                            	even
0001EE7C                            	even
0001EE7C                            
0001EE7C                            ; ---------------------------------------------------------------------------
0001EE7C                            ; Debug	list - Spring Yard
0001EE7C                            ; ---------------------------------------------------------------------------
0001EE7C                            Debug_SYZ:
0001EE7C                            	include "_inc\Debug list - SYZ.asm"
0001EE7C                            ; ---------------------------------------------------------------------------
0001EE7C                            ; Debug	list - Spring Yard
0001EE7C                            ; ---------------------------------------------------------------------------
0001EE7C 000F                       	dc.w $F
0001EE7E 2500 AA64                  	dc.l Map_obj25+$25000000
0001EE82 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001EE86 2600 B094                  	dc.l Map_obj26+$26000000
0001EE8A 0000 0680                  	dc.b 0,	0, 6, $80
0001EE8E 3600 DAEA                  	dc.l Map_obj36+$36000000
0001EE92 0000 051B                  	dc.b 0,	0, 5, $1B
0001EE96 4100 E838                  	dc.l Map_obj41+$41000000
0001EE9A 0000 0523                  	dc.b 0,	0, 5, $23
0001EE9E 4300 ECBE                  	dc.l Map_obj43+$43000000
0001EEA2 0000 04B8                  	dc.b 0,	0, 4, $B8
0001EEA6 1200 F49C                  	dc.l Map_obj12+$12000000
0001EEAA 0000 0000                  	dc.b 0,	0, 0, 0
0001EEAE 4700 F618                  	dc.l Map_obj47+$47000000
0001EEB2 0000 0380                  	dc.b 0,	0, 3, $80
0001EEB6 1F00 A1EC                  	dc.l Map_obj1F+$1F000000
0001EEBA 0000 0400                  	dc.b 0,	0, 4, 0
0001EEBE 2200 A4CC                  	dc.l Map_obj22+$22000000
0001EEC2 0000 0444                  	dc.b 0,	0, 4, $44
0001EEC6 5001 0452                  	dc.l Map_obj50+$50000000
0001EECA 0000 247B                  	dc.b 0,	0, $24,	$7B
0001EECE 1800 8C36                  	dc.l Map_obj18a+$18000000
0001EED2 0000 4000                  	dc.b 0,	0, $40,	0
0001EED6 5601 123A                  	dc.l Map_obj56+$56000000
0001EEDA 0000 4000                  	dc.b 0,	0, $40,	0
0001EEDE 3200 C9AA                  	dc.l Map_obj32+$32000000
0001EEE2 0000 0513                  	dc.b 0,	0, 5, $13
0001EEE6 7801 8744                  	dc.l Map_obj78+$78000000
0001EEEA 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001EEEE 7901 8ACC                  	dc.l Map_obj79+$79000000
0001EEF2 0100 07A0                  	dc.b 1,	0, 7, $A0
0001EEF6                            	even
0001EEF6                            	even
0001EEF6                            
0001EEF6                            ; ---------------------------------------------------------------------------
0001EEF6                            ; Debug	list - Scrap Brain
0001EEF6                            ; ---------------------------------------------------------------------------
0001EEF6                            Debug_SBZ:
0001EEF6                            	include "_inc\Debug list - SBZ.asm"
0001EEF6                            ; ---------------------------------------------------------------------------
0001EEF6                            ; Debug	list - Scrap Brain
0001EEF6                            ; ---------------------------------------------------------------------------
0001EEF6 001D                       	dc.w $1D
0001EEF8 2500 AA64                  	dc.l Map_obj25+$25000000
0001EEFC 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001EF00 2600 B094                  	dc.l Map_obj26+$26000000
0001EF04 0000 0680                  	dc.b 0,	0, 6, $80
0001EF08 5F01 274C                  	dc.l Map_obj5F+$5F000000
0001EF0C 0000 0400                  	dc.b 0,	0, 4, 0
0001EF10 6001 2A02                  	dc.l Map_obj60+$60000000
0001EF14 0000 0429                  	dc.b 0,	0, 4, $29
0001EF18 7801 8744                  	dc.l Map_obj78+$78000000
0001EF1C 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001EF20 1501 15D6                  	dc.l Map_obj15b+$15000000
0001EF24 0702 4391                  	dc.b 7,	2, $43,	$91
0001EF28 6701 7064                  	dc.l Map_obj67+$67000000
0001EF2C E000 C344                  	dc.b $E0, 0, $C3, $44
0001EF30 5201 0B84                  	dc.l Map_obj52+$52000000
0001EF34 2802 22C0                  	dc.b $28, 2, $22, $C0
0001EF38 3200 C9AA                  	dc.l Map_obj32+$32000000
0001EF3C 0000 0513                  	dc.b 0,	0, 5, $13
0001EF40 6901 72BE                  	dc.l Map_obj69+$69000000
0001EF44 0300 4492                  	dc.b 3,	0, $44,	$92
0001EF48 6901 7318                  	dc.l Map_obj69a+$69000000
0001EF4C 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001EF50 6A01 7576                  	dc.l Map_obj6A+$6A000000
0001EF54 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001EF58 5300 91F0                  	dc.l Map_obj53+$53000000
0001EF5C 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001EF60 5201 0B84                  	dc.l Map_obj52+$52000000
0001EF64 3903 4460                  	dc.b $39, 3, $44, $60
0001EF68 6B01 7946                  	dc.l Map_obj6B+$6B000000
0001EF6C 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001EF70 2A00 9496                  	dc.l Map_obj2A+$2A000000
0001EF74 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001EF78 6B01 7946                  	dc.l Map_obj6B+$6B000000
0001EF7C 1301 22C0                  	dc.b $13, 1, $22, $C0
0001EF80 6A01 7576                  	dc.l Map_obj6A+$6A000000
0001EF84 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001EF88 6B01 7946                  	dc.l Map_obj6B+$6B000000
0001EF8C 2401 22C0                  	dc.b $24, 1, $22, $C0
0001EF90 6A01 7576                  	dc.l Map_obj6A+$6A000000
0001EF94 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001EF98 6B01 7946                  	dc.l Map_obj6B+$6B000000
0001EF9C 3401 22C0                  	dc.b $34, 1, $22, $C0
0001EFA0 6C01 7B08                  	dc.l Map_obj6C+$6C000000
0001EFA4 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001EFA8 6D00 F10E                  	dc.l Map_obj6D+$6D000000
0001EFAC 6400 83D9                  	dc.b $64, 0, $83, $D9
0001EFB0 6D00 F10E                  	dc.l Map_obj6D+$6D000000
0001EFB4 640B 83D9                  	dc.b $64, $B, $83, $D9
0001EFB8 6E01 7BBE                  	dc.l Map_obj6E+$6E000000
0001EFBC 0400 047E                  	dc.b 4,	0, 4, $7E
0001EFC0 7001 8004                  	dc.l Map_obj70+$70000000
0001EFC4 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001EFC8 7101 1FE2                  	dc.l Map_obj71+$71000000
0001EFCC 1100 8680                  	dc.b $11, 0, $86, $80
0001EFD0 1E00 9904                  	dc.l Map_obj1E+$1E000000
0001EFD4 0400 2302                  	dc.b 4,	0, $23,	2
0001EFD8 7901 8ACC                  	dc.l Map_obj79+$79000000
0001EFDC 0100 07A0                  	dc.b 1,	0, 7, $A0
0001EFE0                            	even
0001EFE0                            	even
0001EFE0                            
0001EFE0                            ; ---------------------------------------------------------------------------
0001EFE0                            ; Debug	list - ending sequence / special stage
0001EFE0                            ; ---------------------------------------------------------------------------
0001EFE0                            Debug_Ending:
0001EFE0                            	include "_inc\Debug list - Ending and SS.asm"
0001EFE0                            ; ---------------------------------------------------------------------------
0001EFE0                            ; Debug	list - ending sequence / special stage
0001EFE0                            ; ---------------------------------------------------------------------------
0001EFE0 000D                       	dc.w $D
0001EFE2 2500 AA64                  	dc.l Map_obj25+$25000000
0001EFE6 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001EFEA 4700 F618                  	dc.l Map_obj47+$47000000
0001EFEE 0000 0380                  	dc.b 0,	0, 3, $80
0001EFF2 2800 9F1E                  	dc.l Map_obj28a+$28000000
0001EFF6 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001EFFA 2800 9F1E                  	dc.l Map_obj28a+$28000000
0001EFFE 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001F002 2800 9F1E                  	dc.l Map_obj28a+$28000000
0001F006 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001F00A 2800 9F06                  	dc.l Map_obj28+$28000000
0001F00E 0D00 0553                  	dc.b $D, 0, 5, $53
0001F012 2800 9F06                  	dc.l Map_obj28+$28000000
0001F016 0E00 0553                  	dc.b $E, 0, 5, $53
0001F01A 2800 9F06                  	dc.l Map_obj28+$28000000
0001F01E 0F00 0573                  	dc.b $F, 0, 5, $73
0001F022 2800 9F06                  	dc.l Map_obj28+$28000000
0001F026 1000 0573                  	dc.b $10, 0, 5,	$73
0001F02A 2800 9F1E                  	dc.l Map_obj28a+$28000000
0001F02E 1100 0585                  	dc.b $11, 0, 5,	$85
0001F032 2800 9F36                  	dc.l Map_obj28b+$28000000
0001F036 1200 0593                  	dc.b $12, 0, 5,	$93
0001F03A 2800 9F1E                  	dc.l Map_obj28a+$28000000
0001F03E 1300 0565                  	dc.b $13, 0, 5,	$65
0001F042 2800 9F36                  	dc.l Map_obj28b+$28000000
0001F046 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001F04A                            	even
0001F04A                            	even
0001F04A                            
0001F04A                            ; ---------------------------------------------------------------------------
0001F04A                            ; Main level load blocks
0001F04A                            ; ---------------------------------------------------------------------------
0001F04A                            MainLoadBlocks:
0001F04A                            	include "_inc\Main level load blocks.asm"
0001F04A                            ; ---------------------------------------------------------------------------
0001F04A                            ; Main level load blocks
0001F04A                            ;
0001F04A                            ; ===FORMAT===
0001F04A                            ; level	patterns + (1st	PLC num	* 10^6)
0001F04A                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001F04A                            ; 256x256 mappings
0001F04A                            ; blank, music (unused), pal index (unused), pal index
0001F04A                            ; ---------------------------------------------------------------------------
0001F04A 0000 0000                  	dc.l Nem_GHZ+$4000000
0001F04E 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001F052 0000 0000                  	dc.l Blk256_GHZ
0001F056 0081 0404                  	dc.b 0,	$81, 4,	4
0001F05A 0000 0000                  	dc.l Nem_LZ+$6000000
0001F05E 0000 0000                  	dc.l Blk16_LZ+$7000000
0001F062 0000 0000                  	dc.l Blk256_LZ
0001F066 0082 0505                  	dc.b 0,	$82, 5,	5
0001F06A 0000 0000                  	dc.l Nem_MZ+$8000000
0001F06E 0000 0000                  	dc.l Blk16_MZ+$9000000
0001F072 0000 0000                  	dc.l Blk256_MZ
0001F076 0083 0606                  	dc.b 0,	$83, 6,	6
0001F07A 0000 0000                  	dc.l Nem_SLZ+$A000000
0001F07E 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001F082 0000 0000                  	dc.l Blk256_SLZ
0001F086 0084 0707                  	dc.b 0,	$84, 7,	7
0001F08A 0000 0000                  	dc.l Nem_SYZ+$C000000
0001F08E 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001F092 0000 0000                  	dc.l Blk256_SYZ
0001F096 0085 0808                  	dc.b 0,	$85, 8,	8
0001F09A 0000 0000                  	dc.l Nem_SBZ+$E000000
0001F09E 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001F0A2 0000 0000                  	dc.l Blk256_SBZ
0001F0A6 0086 0909                  	dc.b 0,	$86, 9,	9
0001F0AA 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001F0AE 0000 0000                  	dc.l Blk16_GHZ
0001F0B2 0000 0000                  	dc.l Blk256_GHZ
0001F0B6 0086 1313                  	dc.b 0,	$86, $13, $13
0001F0BA                            	even
0001F0BA                            	even
0001F0BA                            
0001F0BA                            ; ---------------------------------------------------------------------------
0001F0BA                            ; Pattern load cues
0001F0BA                            ; ---------------------------------------------------------------------------
0001F0BA                            ArtLoadCues:
0001F0BA                            	include "_inc\Pattern load cues.asm"
0001F0BA                            ; ---------------------------------------------------------------------------
0001F0BA                            ; Pattern load cues - index
0001F0BA                            ; ---------------------------------------------------------------------------
0001F0BA 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001F0BE 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001F0C2 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001F0C6 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001F0CA 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001F0CE 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001F0D2 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001F0D6 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001F0DA 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001F0DE 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001F0E2 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001F0E6 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001F0EA 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001F0EE 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001F0F2 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001F0F6 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001F0FA                            ; ---------------------------------------------------------------------------
0001F0FA                            ; Pattern load cues - standard block 1
0001F0FA                            ; ---------------------------------------------------------------------------
0001F0FA 0004                       PLC_Main:	dc.w 4
0001F0FC 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001F100 D800                       		dc.w $D800
0001F102 0000 0000                  		dc.l Nem_Hud		; HUD
0001F106 D940                       		dc.w $D940
0001F108 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001F10C FA80                       		dc.w $FA80
0001F10E 0000 0000                  		dc.l Nem_Ring		; rings
0001F112 F640                       		dc.w $F640
0001F114 0000 0000                  		dc.l Nem_Points		; points from enemy
0001F118 F2E0                       		dc.w $F2E0
0001F11A                            ; ---------------------------------------------------------------------------
0001F11A                            ; Pattern load cues - standard block 2
0001F11A                            ; ---------------------------------------------------------------------------
0001F11A 0002                       PLC_Main2:	dc.w 2
0001F11C 0000 0000                  		dc.l Nem_Monitors	; monitors
0001F120 D000                       		dc.w $D000
0001F122 0000 0000                  		dc.l Nem_Shield		; shield
0001F126 A820                       		dc.w $A820
0001F128 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001F12C AB80                       		dc.w $AB80
0001F12E                            ; ---------------------------------------------------------------------------
0001F12E                            ; Pattern load cues - explosion
0001F12E                            ; ---------------------------------------------------------------------------
0001F12E 0000                       PLC_Explode:	dc.w 0
0001F130 0000 0000                  		dc.l Nem_Explode	; explosion
0001F134 B400                       		dc.w $B400
0001F136                            ; ---------------------------------------------------------------------------
0001F136                            ; Pattern load cues - game/time	over
0001F136                            ; ---------------------------------------------------------------------------
0001F136 0000                       PLC_GameOver:	dc.w 0
0001F138 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001F13C ABC0                       		dc.w $ABC0
0001F13E                            ; ---------------------------------------------------------------------------
0001F13E                            ; Pattern load cues - Green Hill
0001F13E                            ; ---------------------------------------------------------------------------
0001F13E 000A                       PLC_GHZ:	dc.w $A
0001F140 0000 0000                  		dc.l Nem_GHZ	; GHZ main patterns
0001F144 0000                       		dc.w 0
0001F146 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001F14A 6B00                       		dc.w $6B00
0001F14C 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001F150 7A00                       		dc.w $7A00
0001F152 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001F156 8000                       		dc.w $8000
0001F158 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001F15C 8880                       		dc.w $8880
0001F15E 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001F162 8F60                       		dc.w $8F60
0001F164 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001F168 9360                       		dc.w $9360
0001F16A 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001F16E 9E00                       		dc.w $9E00
0001F170 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F174 A360                       		dc.w $A360
0001F176 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F17A A460                       		dc.w $A460
0001F17C 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F180 A660                       		dc.w $A660
0001F182 0000 0000                  		dc.l ArtNem_DignlSprng	; diagonal spring
0001F186 A860                       		dc.W $A860
0001F188 0005                       PLC_GHZ2:	dc.w 5
0001F18A 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001F18E 7000                       		dc.w $7000
0001F190 0000 0000                  		dc.l Nem_Bridge		; bridge
0001F194 71C0                       		dc.w $71C0
0001F196 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001F19A 7300                       		dc.w $7300
0001F19C 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001F1A0 7540                       		dc.w $7540
0001F1A2 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001F1A6 A1E0                       		dc.w $A1E0
0001F1A8 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001F1AC 6980                       		dc.w $6980
0001F1AE                            ; ---------------------------------------------------------------------------
0001F1AE                            ; Pattern load cues - Labyrinth
0001F1AE                            ; ---------------------------------------------------------------------------
0001F1AE 000B                       PLC_LZ:		dc.w $B
0001F1B0 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001F1B4 0000                       		dc.w 0
0001F1B6 0000 0000                  		dc.l Nem_LzBlock1	; block
0001F1BA 3C00                       		dc.w $3C00
0001F1BC 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001F1C0 3E00                       		dc.w $3E00
0001F1C2 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001F1C6 4B20                       		dc.w $4B20
0001F1C8 0000 0000                  		dc.l Nem_Water		; water	surface
0001F1CC 6000                       		dc.w $6000
0001F1CE 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001F1D2 6200                       		dc.w $6200
0001F1D4 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001F1D8 6500                       		dc.w $6500
0001F1DA 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001F1DE 6900                       		dc.w $6900
0001F1E0 0000 0000                  		dc.l Nem_LzBlock3	; block
0001F1E4 7780                       		dc.w $7780
0001F1E6 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001F1EA 7880                       		dc.w $7880
0001F1EC 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001F1F0 7980                       		dc.w $7980
0001F1F2 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001F1F6 94C0                       		dc.w $94C0
0001F1F8 000C                       PLC_LZ2:	dc.w $C
0001F1FA 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001F1FE 7BC0                       		dc.w $7BC0
0001F200 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001F204 7CC0                       		dc.w $7CC0
0001F206 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001F20A 7EC0                       		dc.w $7EC0
0001F20C 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001F210 5D20                       		dc.w $5D20
0001F212 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001F216 8800                       		dc.w $8800
0001F218 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001F21C 89E0                       		dc.w $89E0
0001F21E 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001F222 8CE0                       		dc.w $8CE0
0001F224 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001F228 90C0                       		dc.w $90C0
0001F22A 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001F22E A1E0                       		dc.w $A1E0
0001F230 0000 0000                  		dc.l Nem_Cork		; cork block
0001F234 A000                       		dc.w $A000
0001F236 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F23A A360                       		dc.w $A360
0001F23C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F240 A460                       		dc.w $A460
0001F242 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F246 A660                       		dc.w $A660
0001F248 0000 0000                  		dc.l ArtNem_DignlSprng	; diagonal spring
0001F24C A860                       		dc.W $A860
0001F24E                            ; ---------------------------------------------------------------------------
0001F24E                            ; Pattern load cues - Marble
0001F24E                            ; ---------------------------------------------------------------------------
0001F24E 0009                       PLC_MZ:		dc.w 9
0001F250 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001F254 0000                       		dc.w 0
0001F256 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001F25A 6000                       		dc.w $6000
0001F25C 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001F260 68A0                       		dc.w $68A0
0001F262 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001F266 7000                       		dc.w $7000
0001F268 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001F26C 71C0                       		dc.w $71C0
0001F26E 0000 0000                  		dc.l Nem_Lava		; lava
0001F272 7500                       		dc.w $7500
0001F274 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001F278 8880                       		dc.w $8880
0001F27A 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001F27E 8F60                       		dc.w $8F60
0001F280 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001F284 9700                       		dc.w $9700
0001F286 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001F28A 9FE0                       		dc.w $9FE0
0001F28C 0004                       PLC_MZ2:	dc.w 4
0001F28E 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001F292 A260                       		dc.w $A260
0001F294 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F298 A360                       		dc.w $A360
0001F29A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F29E A460                       		dc.w $A460
0001F2A0 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F2A4 A660                       		dc.w $A660
0001F2A6 0000 0000                  		dc.l ArtNem_DignlSprng	; diagonal spring
0001F2AA A860                       		dc.W $A860
0001F2AC 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001F2B0 5700                       		dc.w $5700
0001F2B2                            ; ---------------------------------------------------------------------------
0001F2B2                            ; Pattern load cues - Star Light
0001F2B2                            ; ---------------------------------------------------------------------------
0001F2B2 0008                       PLC_SLZ:	dc.w 8
0001F2B4 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001F2B8 0000                       		dc.w 0
0001F2BA 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001F2BE 8000                       		dc.w $8000
0001F2C0 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001F2C4 8520                       		dc.w $8520
0001F2C6 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001F2CA 9000                       		dc.w $9000
0001F2CC 0000 0000                  		dc.l Nem_SlzBlock	; block
0001F2D0 9C00                       		dc.w $9C00
0001F2D2 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001F2D6 A260                       		dc.w $A260
0001F2D8 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F2DC A360                       		dc.w $A360
0001F2DE 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F2E2 A460                       		dc.w $A460
0001F2E4 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F2E8 A660                       		dc.w $A660
0001F2EA 0000 0000                  		dc.l ArtNem_DignlSprng	; diagonal spring
0001F2EE A860                       		dc.W $A860
0001F2F0 0005                       PLC_SLZ2:	dc.w 5
0001F2F2 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001F2F6 6E80                       		dc.w $6E80
0001F2F8 0000 0000                  		dc.l Nem_Fan		; fan
0001F2FC 7400                       		dc.w $7400
0001F2FE 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001F302 7980                       		dc.w $7980
0001F304 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001F308 7B80                       		dc.w $7B80
0001F30A 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001F30E 9B00                       		dc.w $9B00
0001F310 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001F314 9E00                       		dc.w $9E00
0001F316                            ; ---------------------------------------------------------------------------
0001F316                            ; Pattern load cues - Spring Yard
0001F316                            ; ---------------------------------------------------------------------------
0001F316 0004                       PLC_SYZ:	dc.w 4
0001F318 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001F31C 0000                       		dc.w 0
0001F31E 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001F322 8000                       		dc.w $8000
0001F324 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001F328 8880                       		dc.w $8880
0001F32A 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001F32E 8F60                       		dc.w $8F60
0001F330 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001F334 9700                       		dc.w $9700
0001F336 0007                       PLC_SYZ2:	dc.w 7
0001F338 0000 0000                  		dc.l Nem_Bumper		; bumper
0001F33C 7000                       		dc.w $7000
0001F33E 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001F342 72C0                       		dc.w $72C0
0001F344 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001F348 7740                       		dc.w $7740
0001F34A 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001F34E 9FE0                       		dc.w $9FE0
0001F350 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001F354 A1E0                       		dc.w $A1E0
0001F356 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F35A A360                       		dc.w $A360
0001F35C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F360 A460                       		dc.w $A460
0001F362 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F366 A660                       		dc.w $A660
0001F368 0000 0000                  		dc.l ArtNem_DignlSprng	; diagonal spring
0001F36C A860                       		dc.W $A860
0001F36E                            ; ---------------------------------------------------------------------------
0001F36E                            ; Pattern load cues - Scrap Brain
0001F36E                            ; ---------------------------------------------------------------------------
0001F36E 000B                       PLC_SBZ:	dc.w $B
0001F370 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001F374 0000                       		dc.w 0
0001F376 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001F37A 5800                       		dc.w $5800
0001F37C 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001F380 5D00                       		dc.w $5D00
0001F382 0000 0000                  		dc.l Nem_Girder		; girder
0001F386 5E00                       		dc.w $5E00
0001F388 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001F38C 6040                       		dc.w $6040
0001F38E 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001F392 6880                       		dc.w $6880
0001F394 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001F398 6900                       		dc.w $6900
0001F39A 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001F39E 7220                       		dc.w $7220
0001F3A0 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001F3A4 76A0                       		dc.w $76A0
0001F3A6 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001F3AA 7B20                       		dc.w $7B20
0001F3AC 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001F3B0 7EA0                       		dc.w $7EA0
0001F3B2 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001F3B6 9860                       		dc.w $9860
0001F3B8 000C                       PLC_SBZ2:	dc.w $C
0001F3BA 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001F3BE 5600                       		dc.w $5600
0001F3C0 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001F3C4 8000                       		dc.w $8000
0001F3C6 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001F3CA 8520                       		dc.w $8520
0001F3CC 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001F3D0 8C00                       		dc.w $8C00
0001F3D2 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001F3D6 8DE0                       		dc.w $8DE0
0001F3D8 0000 0000                  		dc.l Nem_Electric	; electric orb
0001F3DC 8FC0                       		dc.w $8FC0
0001F3DE 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001F3E2 9240                       		dc.w $9240
0001F3E4 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001F3E8 7F20                       		dc.w $7F20
0001F3EA 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001F3EE 9BE0                       		dc.w $9BE0
0001F3F0 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001F3F4 A1E0                       		dc.w $A1E0
0001F3F6 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F3FA A360                       		dc.w $A360
0001F3FC 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F400 A460                       		dc.w $A460
0001F402 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F406 A660                       		dc.w $A660
0001F408 0000 0000                  		dc.l ArtNem_DignlSprng	; diagonal spring
0001F40C A860                       		dc.W $A860
0001F40E                            ; ---------------------------------------------------------------------------
0001F40E                            ; Pattern load cues - title card
0001F40E                            ; ---------------------------------------------------------------------------
0001F40E 0000                       PLC_TitleCard:	dc.w 0
0001F410 0000 0000                  		dc.l Nem_TitleCard
0001F414 B000                       		dc.w $B000
0001F416                            ; ---------------------------------------------------------------------------
0001F416                            ; Pattern load cues - act 3 boss
0001F416                            ; ---------------------------------------------------------------------------
0001F416 0005                       PLC_Boss:	dc.w 5
0001F418 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001F41C 8000                       		dc.w $8000
0001F41E 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001F422 8D80                       		dc.w $8D80
0001F424 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001F428 93A0                       		dc.w $93A0
0001F42A 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001F42E A300                       		dc.w $A300
0001F430 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001F434 A300                       		dc.w $A300
0001F436 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001F43A A540                       		dc.w $A540
0001F43C                            ; ---------------------------------------------------------------------------
0001F43C                            ; Pattern load cues - act 1/2 signpost
0001F43C                            ; ---------------------------------------------------------------------------
0001F43C 0002                       PLC_Signpost:	dc.w 2
0001F43E 0000 0000                  		dc.l Nem_SignPost	; signpost
0001F442 D000                       		dc.w $D000
0001F444 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001F448 96C0                       		dc.w $96C0
0001F44A 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001F44E 8C40                       		dc.w $8C40
0001F450                            ; ---------------------------------------------------------------------------
0001F450                            ; Pattern load cues - beta special stage warp effect
0001F450                            ; ---------------------------------------------------------------------------
0001F450 0000                       PLC_Warp:	dc.w 0
0001F452 0000 0000                  		dc.l Nem_Warp
0001F456 A820                       		dc.w $A820
0001F458                            ; ---------------------------------------------------------------------------
0001F458                            ; Pattern load cues - special stage
0001F458                            ; ---------------------------------------------------------------------------
0001F458 0010                       PLC_SpeStage:	dc.w $10
0001F45A 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001F45E 0000                       		dc.w 0
0001F460 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001F464 0A20                       		dc.w $A20
0001F466 0000 0000                  		dc.l Nem_SSWalls	; walls
0001F46A 2840                       		dc.w $2840
0001F46C 0000 0000                  		dc.l Nem_Bumper		; bumper
0001F470 4760                       		dc.w $4760
0001F472 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001F476 4A20                       		dc.w $4A20
0001F478 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001F47C 4C60                       		dc.w $4C60
0001F47E 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001F482 5E00                       		dc.w $5E00
0001F484 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001F488 6E00                       		dc.w $6E00
0001F48A 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001F48E 7E00                       		dc.w $7E00
0001F490 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001F494 8E00                       		dc.w $8E00
0001F496 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001F49A 9E00                       		dc.w $9E00
0001F49C 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001F4A0 AE00                       		dc.w $AE00
0001F4A2 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001F4A6 BE00                       		dc.w $BE00
0001F4A8 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001F4AC EE00                       		dc.w $EE00
0001F4AE 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001F4B2 F2E0                       		dc.w $F2E0
0001F4B4 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001F4B8 F400                       		dc.w $F400
0001F4BA 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001F4BE F520                       		dc.w $F520
0001F4C0 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001F4C4 F2E0                       		dc.w $F2E0
0001F4C6 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001F4CA F400                       		dc.w $F400
0001F4CC 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001F4D0 F520                       		dc.w $F520
0001F4D2                            ; ---------------------------------------------------------------------------
0001F4D2                            ; Pattern load cues - GHZ animals
0001F4D2                            ; ---------------------------------------------------------------------------
0001F4D2 0001                       PLC_GHZAnimals:	dc.w 1
0001F4D4 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001F4D8 B000                       		dc.w $B000
0001F4DA 0000 0000                  		dc.l Nem_Flicky		; flicky
0001F4DE B240                       		dc.w $B240
0001F4E0                            ; ---------------------------------------------------------------------------
0001F4E0                            ; Pattern load cues - LZ animals
0001F4E0                            ; ---------------------------------------------------------------------------
0001F4E0 0001                       PLC_LZAnimals:	dc.w 1
0001F4E2 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001F4E6 B000                       		dc.w $B000
0001F4E8 0000 0000                  		dc.l Nem_Seal		; seal
0001F4EC B240                       		dc.w $B240
0001F4EE                            ; ---------------------------------------------------------------------------
0001F4EE                            ; Pattern load cues - MZ animals
0001F4EE                            ; ---------------------------------------------------------------------------
0001F4EE 0001                       PLC_MZAnimals:	dc.w 1
0001F4F0 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001F4F4 B000                       		dc.w $B000
0001F4F6 0000 0000                  		dc.l Nem_Seal		; seal
0001F4FA B240                       		dc.w $B240
0001F4FC                            ; ---------------------------------------------------------------------------
0001F4FC                            ; Pattern load cues - SLZ animals
0001F4FC                            ; ---------------------------------------------------------------------------
0001F4FC 0001                       PLC_SLZAnimals:	dc.w 1
0001F4FE 0000 0000                  		dc.l Nem_Pig		; pig
0001F502 B000                       		dc.w $B000
0001F504 0000 0000                  		dc.l Nem_Flicky		; flicky
0001F508 B240                       		dc.w $B240
0001F50A                            ; ---------------------------------------------------------------------------
0001F50A                            ; Pattern load cues - SYZ animals
0001F50A                            ; ---------------------------------------------------------------------------
0001F50A 0001                       PLC_SYZAnimals:	dc.w 1
0001F50C 0000 0000                  		dc.l Nem_Pig		; pig
0001F510 B000                       		dc.w $B000
0001F512 0000 0000                  		dc.l Nem_Chicken	; chicken
0001F516 B240                       		dc.w $B240
0001F518                            ; ---------------------------------------------------------------------------
0001F518                            ; Pattern load cues - SBZ animals
0001F518                            ; ---------------------------------------------------------------------------
0001F518 0001                       PLC_SBZAnimals:	dc.w 1
0001F51A 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001F51E B000                       		dc.w $B000
0001F520 0000 0000                  		dc.l Nem_Chicken	; chicken
0001F524 B240                       		dc.w $B240
0001F526                            ; ---------------------------------------------------------------------------
0001F526                            ; Pattern load cues - special stage results screen
0001F526                            ; ---------------------------------------------------------------------------
0001F526 0001                       PLC_SpeStResult:dc.w 1
0001F528 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001F52C A820                       		dc.w $A820
0001F52E 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001F532 AA20                       		dc.w $AA20
0001F534                            ; ---------------------------------------------------------------------------
0001F534                            ; Pattern load cues - ending sequence
0001F534                            ; ---------------------------------------------------------------------------
0001F534 000E                       PLC_Ending:	dc.w $E
0001F536 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001F53A 0000                       		dc.w 0
0001F53C 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001F540 39A0                       		dc.w $39A0
0001F542 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001F546 6B00                       		dc.w $6B00
0001F548 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001F54C 7400                       		dc.w $7400
0001F54E 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001F552 78A0                       		dc.w $78A0
0001F554 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001F558 7C20                       		dc.w $7C20
0001F55A 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001F55E A480                       		dc.w $A480
0001F560 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001F564 AA60                       		dc.w $AA60
0001F566 0000 0000                  		dc.l Nem_Chicken	; chicken
0001F56A ACA0                       		dc.w $ACA0
0001F56C 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001F570 AE60                       		dc.w $AE60
0001F572 0000 0000                  		dc.l Nem_Seal		; seal
0001F576 B0A0                       		dc.w $B0A0
0001F578 0000 0000                  		dc.l Nem_Pig		; pig
0001F57C B260                       		dc.w $B260
0001F57E 0000 0000                  		dc.l Nem_Flicky		; flicky
0001F582 B4A0                       		dc.w $B4A0
0001F584 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001F588 B660                       		dc.w $B660
0001F58A 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001F58E B8A0                       		dc.w $B8A0
0001F590                            ; ---------------------------------------------------------------------------
0001F590                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001F590                            ; ---------------------------------------------------------------------------
0001F590 0002                       PLC_TryAgain:	dc.w 2
0001F592 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001F596 78A0                       		dc.w $78A0
0001F598 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001F59C 7C20                       		dc.w $7C20
0001F59E 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001F5A2 B400                       		dc.w $B400
0001F5A4                            ; ---------------------------------------------------------------------------
0001F5A4                            ; Pattern load cues - Eggman on SBZ 2
0001F5A4                            ; ---------------------------------------------------------------------------
0001F5A4 0002                       PLC_EggmanSBZ2:	dc.w 2
0001F5A6 0000 0000                  		dc.l Nem_SbzBlock	; block
0001F5AA A300                       		dc.w $A300
0001F5AC 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001F5B0 8000                       		dc.w $8000
0001F5B2 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001F5B6 9400                       		dc.w $9400
0001F5B8                            ; ---------------------------------------------------------------------------
0001F5B8                            ; Pattern load cues - final boss
0001F5B8                            ; ---------------------------------------------------------------------------
0001F5B8 0004                       PLC_FZBoss:	dc.w 4
0001F5BA 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001F5BE 7400                       		dc.w $7400
0001F5C0 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001F5C4 6000                       		dc.w $6000
0001F5C6 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001F5CA 8000                       		dc.w $8000
0001F5CC 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001F5D0 8E00                       		dc.w $8E00
0001F5D2 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001F5D6 A540                       		dc.w $A540
0001F5D8                            		even
0001F5D8                            		even
0001F5D8                            
0001F5D8                            		incbin	misc\padding.bin
0001F6C6                            		even
0001F6C6                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001FB28                            		even
0001FB28                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001FC20                            		even
0001FC20                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001FD34                            		even
0001FD34                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
00020D40                            		even
00020D40                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
0002270E                            		even
0002270E                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00022742                            		even
00022742                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00022800                            		even
00022800                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00022CA8                            		even
00022CA8                            Kos_Menu_art:   incbin  artkos/menuslctr.bin
00022DE4                            		 even
00022DE4                            Map_MenuS4: 	include  "_maps/menuslctr.asm"
00022DE4                            ; ================================================================================
00022DE4                            ; Sprite Mappings - generated by Flex 2 Sun Jan 09 2022 00:50:45 GMT-0600 (Central Standard Time)
00022DE4                            ; ================================================================================
00022DE4                            
00022DE4                            DATAQM9VZSSBLEK:
00022DE4 0000                       	dc.w DATAQM9VZSSBLEK_0-DATAQM9VZSSBLEK
00022DE6 01                         DATAQM9VZSSBLEK_0: dc.b $1
00022DE7 F805 0014 F8               	dc.b $F8, $5, $0, $14, $F8
00022DEC                            	even
00022DEC                            	even
00022DEC                            ; ---------------------------------------------------------------------------
00022DEC                            ; Sprite mappings - Sonic
00022DEC                            ; ---------------------------------------------------------------------------
00022DEC                            Map_Sonic:
00022DEC                            	include "_maps\Sonic.asm"
00022DEC                            ; --------------------------------------------------------------------------------
00022DEC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00022DEC                            ; --------------------------------------------------------------------------------
00022DEC                            
00022DEC                            SME_N6hqJ:	
00022DEC 0000 0000                  		dc.w SME_N6hqJ_1AC-SME_N6hqJ, SME_N6hqJ_1AD-SME_N6hqJ	
00022DF0 0000 0000                  		dc.w SME_N6hqJ_1C2-SME_N6hqJ, SME_N6hqJ_1CD-SME_N6hqJ	
00022DF4 0000 0000                  		dc.w SME_N6hqJ_1E2-SME_N6hqJ, SME_N6hqJ_1F7-SME_N6hqJ	
00022DF8 0000 0000                  		dc.w SME_N6hqJ_211-SME_N6hqJ, SME_N6hqJ_221-SME_N6hqJ	
00022DFC 0000 0000                  		dc.w SME_N6hqJ_22C-SME_N6hqJ, SME_N6hqJ_237-SME_N6hqJ	
00022E00 0000 0000                  		dc.w SME_N6hqJ_242-SME_N6hqJ, SME_N6hqJ_24D-SME_N6hqJ	
00022E04 0000 0000                  		dc.w SME_N6hqJ_262-SME_N6hqJ, SME_N6hqJ_277-SME_N6hqJ	
00022E08 0000 0000                  		dc.w SME_N6hqJ_287-SME_N6hqJ, SME_N6hqJ_29C-SME_N6hqJ	
00022E0C 0000 0000                  		dc.w SME_N6hqJ_2AC-SME_N6hqJ, SME_N6hqJ_2B7-SME_N6hqJ	
00022E10 0000 0000                  		dc.w SME_N6hqJ_2C7-SME_N6hqJ, SME_N6hqJ_2DC-SME_N6hqJ	
00022E14 0000 0000                  		dc.w SME_N6hqJ_2EC-SME_N6hqJ, SME_N6hqJ_2F7-SME_N6hqJ	
00022E18 0000 0000                  		dc.w SME_N6hqJ_30C-SME_N6hqJ, SME_N6hqJ_326-SME_N6hqJ	
00022E1C 0000 0000                  		dc.w SME_N6hqJ_33B-SME_N6hqJ, SME_N6hqJ_350-SME_N6hqJ	
00022E20 0000 0000                  		dc.w SME_N6hqJ_36A-SME_N6hqJ, SME_N6hqJ_384-SME_N6hqJ	
00022E24 0000 0000                  		dc.w SME_N6hqJ_399-SME_N6hqJ, SME_N6hqJ_3B3-SME_N6hqJ	
00022E28 0000 0000                  		dc.w SME_N6hqJ_3C3-SME_N6hqJ, SME_N6hqJ_3D3-SME_N6hqJ	
00022E2C 0000 0000                  		dc.w SME_N6hqJ_3E3-SME_N6hqJ, SME_N6hqJ_3EE-SME_N6hqJ	
00022E30 0000 0000                  		dc.w SME_N6hqJ_3FE-SME_N6hqJ, SME_N6hqJ_40E-SME_N6hqJ	
00022E34 0000 0000                  		dc.w SME_N6hqJ_41E-SME_N6hqJ, SME_N6hqJ_429-SME_N6hqJ	
00022E38 0000 0000                  		dc.w SME_N6hqJ_43E-SME_N6hqJ, SME_N6hqJ_458-SME_N6hqJ	
00022E3C 0000 0000                  		dc.w SME_N6hqJ_46D-SME_N6hqJ, SME_N6hqJ_482-SME_N6hqJ	
00022E40 0000 0000                  		dc.w SME_N6hqJ_497-SME_N6hqJ, SME_N6hqJ_4B1-SME_N6hqJ	
00022E44 0000 0000                  		dc.w SME_N6hqJ_4C6-SME_N6hqJ, SME_N6hqJ_4DB-SME_N6hqJ	
00022E48 0000 0000                  		dc.w SME_N6hqJ_4E6-SME_N6hqJ, SME_N6hqJ_4F1-SME_N6hqJ	
00022E4C 0000 0000                  		dc.w SME_N6hqJ_4FC-SME_N6hqJ, SME_N6hqJ_507-SME_N6hqJ	
00022E50 0000 0000                  		dc.w SME_N6hqJ_51C-SME_N6hqJ, SME_N6hqJ_52C-SME_N6hqJ	
00022E54 0000 0000                  		dc.w SME_N6hqJ_541-SME_N6hqJ, SME_N6hqJ_551-SME_N6hqJ	
00022E58 0000 0000                  		dc.w SME_N6hqJ_55C-SME_N6hqJ, SME_N6hqJ_567-SME_N6hqJ	
00022E5C 0000 0000                  		dc.w SME_N6hqJ_572-SME_N6hqJ, SME_N6hqJ_57D-SME_N6hqJ	
00022E60 0000 0000                  		dc.w SME_N6hqJ_58D-SME_N6hqJ, SME_N6hqJ_598-SME_N6hqJ	
00022E64 0000 0000                  		dc.w SME_N6hqJ_5A8-SME_N6hqJ, SME_N6hqJ_5B3-SME_N6hqJ	
00022E68 0000 0000                  		dc.w SME_N6hqJ_5B9-SME_N6hqJ, SME_N6hqJ_5BF-SME_N6hqJ	
00022E6C 0000 0000                  		dc.w SME_N6hqJ_5C5-SME_N6hqJ, SME_N6hqJ_5CB-SME_N6hqJ	
00022E70 0000 0000                  		dc.w SME_N6hqJ_5D1-SME_N6hqJ, SME_N6hqJ_5D7-SME_N6hqJ	
00022E74 0000 0000                  		dc.w SME_N6hqJ_5DD-SME_N6hqJ, SME_N6hqJ_5E3-SME_N6hqJ	
00022E78 0000 0000                  		dc.w SME_N6hqJ_5E9-SME_N6hqJ, SME_N6hqJ_5EF-SME_N6hqJ	
00022E7C 0000 0000                  		dc.w SME_N6hqJ_5F5-SME_N6hqJ, SME_N6hqJ_605-SME_N6hqJ	
00022E80 0000 0000                  		dc.w SME_N6hqJ_615-SME_N6hqJ, SME_N6hqJ_625-SME_N6hqJ	
00022E84 0000 0000                  		dc.w SME_N6hqJ_635-SME_N6hqJ, SME_N6hqJ_63B-SME_N6hqJ	
00022E88 0000 0000                  		dc.w SME_N6hqJ_641-SME_N6hqJ, SME_N6hqJ_64C-SME_N6hqJ	
00022E8C 0000 0000                  		dc.w SME_N6hqJ_657-SME_N6hqJ, SME_N6hqJ_667-SME_N6hqJ	
00022E90 0000 0000                  		dc.w SME_N6hqJ_677-SME_N6hqJ, SME_N6hqJ_682-SME_N6hqJ	
00022E94 0000 0000                  		dc.w SME_N6hqJ_68D-SME_N6hqJ, SME_N6hqJ_69D-SME_N6hqJ	
00022E98 0000 0000                  		dc.w SME_N6hqJ_6B2-SME_N6hqJ, SME_N6hqJ_6C2-SME_N6hqJ	
00022E9C 0000 0000                  		dc.w SME_N6hqJ_6D2-SME_N6hqJ, SME_N6hqJ_6E2-SME_N6hqJ	
00022EA0 0000 0000                  		dc.w SME_N6hqJ_6F2-SME_N6hqJ, SME_N6hqJ_702-SME_N6hqJ	
00022EA4 0000 0000                  		dc.w SME_N6hqJ_70D-SME_N6hqJ, SME_N6hqJ_722-SME_N6hqJ	
00022EA8 0000 0000                  		dc.w SME_N6hqJ_737-SME_N6hqJ, SME_N6hqJ_747-SME_N6hqJ	
00022EAC 0000 0000                  		dc.w SME_N6hqJ_757-SME_N6hqJ, SME_N6hqJ_767-SME_N6hqJ	
00022EB0 0000 0000                  		dc.w SME_N6hqJ_772-SME_N6hqJ, SME_N6hqJ_778-SME_N6hqJ	
00022EB4 0000 0000                  		dc.w SME_N6hqJ_783-SME_N6hqJ, SME_N6hqJ_793-SME_N6hqJ	
00022EB8 0000 0000                  		dc.w SME_N6hqJ_7A3-SME_N6hqJ, SME_N6hqJ_7B3-SME_N6hqJ	
00022EBC 0000 0000                  		dc.w SME_N6hqJ_7BE-SME_N6hqJ, SME_N6hqJ_7C9-SME_N6hqJ	
00022EC0 0000 0000                  		dc.w SME_N6hqJ_7D9-SME_N6hqJ, SME_N6hqJ_7E4-SME_N6hqJ	
00022EC4 0000 0000                  		dc.w SME_N6hqJ_7F4-SME_N6hqJ, SME_N6hqJ_804-SME_N6hqJ	
00022EC8 0000 0000                  		dc.w SME_N6hqJ_80A-SME_N6hqJ, SME_N6hqJ_81A-SME_N6hqJ	
00022ECC 0000 0000                  		dc.w SME_N6hqJ_82A-SME_N6hqJ, SME_N6hqJ_844-SME_N6hqJ	
00022ED0 0000 0000                  		dc.w SME_N6hqJ_85E-SME_N6hqJ, SME_N6hqJ_869-SME_N6hqJ	
00022ED4 0000 0000                  		dc.w SME_N6hqJ_874-SME_N6hqJ, SME_N6hqJ_87F-SME_N6hqJ	
00022ED8 0000 0000                  		dc.w SME_N6hqJ_88F-SME_N6hqJ, SME_N6hqJ_8A4-SME_N6hqJ	
00022EDC 0000 0000                  		dc.w SME_N6hqJ_8B4-SME_N6hqJ, SME_N6hqJ_8BF-SME_N6hqJ	
00022EE0 0000 0000                  		dc.w SME_N6hqJ_8CF-SME_N6hqJ, SME_N6hqJ_8E4-SME_N6hqJ	
00022EE4 0000 0000                  		dc.w SME_N6hqJ_8F4-SME_N6hqJ, SME_N6hqJ_8FF-SME_N6hqJ	
00022EE8 0000 0000                  		dc.w SME_N6hqJ_914-SME_N6hqJ, SME_N6hqJ_92E-SME_N6hqJ	
00022EEC 0000 0000                  		dc.w SME_N6hqJ_948-SME_N6hqJ, SME_N6hqJ_962-SME_N6hqJ	
00022EF0 0000 0000                  		dc.w SME_N6hqJ_981-SME_N6hqJ, SME_N6hqJ_9A0-SME_N6hqJ	
00022EF4 0000 0000                  		dc.w SME_N6hqJ_9BA-SME_N6hqJ, SME_N6hqJ_9D4-SME_N6hqJ	
00022EF8 0000 0000                  		dc.w SME_N6hqJ_9E4-SME_N6hqJ, SME_N6hqJ_9F4-SME_N6hqJ	
00022EFC 0000 0000                  		dc.w SME_N6hqJ_A04-SME_N6hqJ, SME_N6hqJ_A0F-SME_N6hqJ	
00022F00 0000 0000                  		dc.w SME_N6hqJ_A1F-SME_N6hqJ, SME_N6hqJ_A2F-SME_N6hqJ	
00022F04 0000 0000                  		dc.w SME_N6hqJ_A3F-SME_N6hqJ, SME_N6hqJ_A4A-SME_N6hqJ	
00022F08 0000 0000                  		dc.w SME_N6hqJ_A5F-SME_N6hqJ, SME_N6hqJ_A79-SME_N6hqJ	
00022F0C 0000 0000                  		dc.w SME_N6hqJ_A8E-SME_N6hqJ, SME_N6hqJ_AA3-SME_N6hqJ	
00022F10 0000 0000                  		dc.w SME_N6hqJ_AB8-SME_N6hqJ, SME_N6hqJ_AD2-SME_N6hqJ	
00022F14 0000 0000                  		dc.w SME_N6hqJ_AE7-SME_N6hqJ, SME_N6hqJ_AFC-SME_N6hqJ	
00022F18 0000 0000                  		dc.w SME_N6hqJ_B0C-SME_N6hqJ, SME_N6hqJ_B21-SME_N6hqJ	
00022F1C 0000 0000                  		dc.w SME_N6hqJ_B31-SME_N6hqJ, SME_N6hqJ_B3C-SME_N6hqJ	
00022F20 0000 0000                  		dc.w SME_N6hqJ_B4C-SME_N6hqJ, SME_N6hqJ_B61-SME_N6hqJ	
00022F24 0000 0000                  		dc.w SME_N6hqJ_B71-SME_N6hqJ, SME_N6hqJ_B7C-SME_N6hqJ	
00022F28 0000 0000                  		dc.w SME_N6hqJ_B96-SME_N6hqJ, SME_N6hqJ_BB5-SME_N6hqJ	
00022F2C 0000 0000                  		dc.w SME_N6hqJ_BCF-SME_N6hqJ, SME_N6hqJ_BE9-SME_N6hqJ	
00022F30 0000 0000                  		dc.w SME_N6hqJ_C08-SME_N6hqJ, SME_N6hqJ_C27-SME_N6hqJ	
00022F34 0000 0000                  		dc.w SME_N6hqJ_C41-SME_N6hqJ, SME_N6hqJ_C60-SME_N6hqJ	
00022F38 0000 0000                  		dc.w SME_N6hqJ_C70-SME_N6hqJ, SME_N6hqJ_C80-SME_N6hqJ	
00022F3C 0000 0000                  		dc.w SME_N6hqJ_C90-SME_N6hqJ, SME_N6hqJ_C9B-SME_N6hqJ	
00022F40 0000 0000                  		dc.w SME_N6hqJ_CAB-SME_N6hqJ, SME_N6hqJ_CBB-SME_N6hqJ	
00022F44 0000 0000                  		dc.w SME_N6hqJ_CCB-SME_N6hqJ, SME_N6hqJ_CD6-SME_N6hqJ	
00022F48 0000 0000                  		dc.w SME_N6hqJ_CEB-SME_N6hqJ, SME_N6hqJ_D05-SME_N6hqJ	
00022F4C 0000 0000                  		dc.w SME_N6hqJ_D1F-SME_N6hqJ, SME_N6hqJ_D34-SME_N6hqJ	
00022F50 0000 0000                  		dc.w SME_N6hqJ_D49-SME_N6hqJ, SME_N6hqJ_D63-SME_N6hqJ	
00022F54 0000 0000                  		dc.w SME_N6hqJ_D7D-SME_N6hqJ, SME_N6hqJ_D97-SME_N6hqJ	
00022F58 0000 0000                  		dc.w SME_N6hqJ_DAC-SME_N6hqJ, SME_N6hqJ_DC1-SME_N6hqJ	
00022F5C 0000 0000                  		dc.w SME_N6hqJ_DD6-SME_N6hqJ, SME_N6hqJ_DF0-SME_N6hqJ	
00022F60 0000 0000                  		dc.w SME_N6hqJ_E05-SME_N6hqJ, SME_N6hqJ_E1A-SME_N6hqJ	
00022F64 0000 0000                  		dc.w SME_N6hqJ_E2F-SME_N6hqJ, SME_N6hqJ_E49-SME_N6hqJ	
00022F68 0000 0000                  		dc.w SME_N6hqJ_E5E-SME_N6hqJ, SME_N6hqJ_E73-SME_N6hqJ	
00022F6C 0000 0000                  		dc.w SME_N6hqJ_E88-SME_N6hqJ, SME_N6hqJ_E9D-SME_N6hqJ	
00022F70 0000 0000                  		dc.w SME_N6hqJ_EA8-SME_N6hqJ, SME_N6hqJ_EB8-SME_N6hqJ	
00022F74 0000 0000                  		dc.w SME_N6hqJ_EC8-SME_N6hqJ, SME_N6hqJ_ED8-SME_N6hqJ	
00022F78 0000 0000                  		dc.w SME_N6hqJ_EE8-SME_N6hqJ, SME_N6hqJ_EF8-SME_N6hqJ	
00022F7C 0000 0000                  		dc.w SME_N6hqJ_F08-SME_N6hqJ, SME_N6hqJ_F18-SME_N6hqJ	
00022F80 0000 0000                  		dc.w SME_N6hqJ_F28-SME_N6hqJ, SME_N6hqJ_F38-SME_N6hqJ	
00022F84 0000 0000                  		dc.w SME_N6hqJ_F52-SME_N6hqJ, SME_N6hqJ_F67-SME_N6hqJ	
00022F88 0000 0000                  		dc.w SME_N6hqJ_F7C-SME_N6hqJ, SME_N6hqJ_F91-SME_N6hqJ	
00022F8C 0000 0000                  		dc.w SME_N6hqJ_FA1-SME_N6hqJ, SME_N6hqJ_FB1-SME_N6hqJ	
00022F90 0000 0000                  		dc.w SME_N6hqJ_FC1-SME_N6hqJ, SME_N6hqJ_FD6-SME_N6hqJ	
00022F94 0000 0000                  		dc.w SME_N6hqJ_FEB-SME_N6hqJ, SME_N6hqJ_1000-SME_N6hqJ	
00022F98 00                         SME_N6hqJ_1AC:	dc.b 0	
00022F99 04                         SME_N6hqJ_1AD:	dc.b 4	
00022F9A E405 0000 F8               		dc.b $E4, 5, 0, 0, $F8	
00022F9F EC03 0004 F0               		dc.b $EC, 3, 0, 4, $F0	
00022FA4 F409 0008 F8               		dc.b $F4, 9, 0, 8, $F8	
00022FA9 0409 000E F8               		dc.b 4, 9, 0, $E, $F8	
00022FAE 02                         SME_N6hqJ_1C2:	dc.b 2	
00022FAF EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00022FB4 0C09 000C F8               		dc.b $C, 9, 0, $C, $F8	
00022FB9 04                         SME_N6hqJ_1CD:	dc.b 4	
00022FBA EC03 0000 F0               		dc.b $EC, 3, 0, 0, $F0	
00022FBF EC05 0004 F8               		dc.b $EC, 5, 0, 4, $F8	
00022FC4 FC05 0008 F8               		dc.b $FC, 5, 0, 8, $F8	
00022FC9 0C09 000C F8               		dc.b $C, 9, 0, $C, $F8	
00022FCE 04                         SME_N6hqJ_1E2:	dc.b 4	
00022FCF EC03 0000 F0               		dc.b $EC, 3, 0, 0, $F0	
00022FD4 EC05 0004 F8               		dc.b $EC, 5, 0, 4, $F8	
00022FD9 FC05 0008 F8               		dc.b $FC, 5, 0, 8, $F8	
00022FDE 0C09 000C F8               		dc.b $C, 9, 0, $C, $F8	
00022FE3 05                         SME_N6hqJ_1F7:	dc.b 5	
00022FE4 EC03 0000 F0               		dc.b $EC, 3, 0, 0, $F0	
00022FE9 EC05 0004 F8               		dc.b $EC, 5, 0, 4, $F8	
00022FEE FC05 0008 F8               		dc.b $FC, 5, 0, 8, $F8	
00022FF3 0C01 000C F8               		dc.b $C, 1, 0, $C, $F8	
00022FF8 0C05 000E 00               		dc.b $C, 5, 0, $E, 0	
00022FFD 03                         SME_N6hqJ_211:	dc.b 3	
00022FFE EC03 0000 F0               		dc.b $EC, 3, 0, 0, $F0	
00023003 EC07 0004 F8               		dc.b $EC, 7, 0, 4, $F8	
00023008 0C09 000C F8               		dc.b $C, 9, 0, $C, $F8	
0002300D 02                         SME_N6hqJ_221:	dc.b 2	
0002300E F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00023013 0401 000C 08               		dc.b 4, 1, 0, $C, 8	
00023018 02                         SME_N6hqJ_22C:	dc.b 2	
00023019 F40B 0000 E8               		dc.b $F4, $B, 0, 0, $E8	
0002301E 0405 000C 00               		dc.b 4, 5, 0, $C, 0	
00023023 02                         SME_N6hqJ_237:	dc.b 2	
00023024 F40B 0000 E8               		dc.b $F4, $B, 0, 0, $E8	
00023029 0405 000C 00               		dc.b 4, 5, 0, $C, 0	
0002302E 02                         SME_N6hqJ_242:	dc.b 2	
0002302F E40B 0000 F0               		dc.b $E4, $B, 0, 0, $F0	
00023034 040D 000C F0               		dc.b 4, $D, 0, $C, $F0	
00023039 04                         SME_N6hqJ_24D:	dc.b 4	
0002303A E405 0000 F8               		dc.b $E4, 5, 0, 0, $F8	
0002303F EC03 0004 F0               		dc.b $EC, 3, 0, 4, $F0	
00023044 F409 0008 F8               		dc.b $F4, 9, 0, 8, $F8	
00023049 0409 000E F8               		dc.b 4, 9, 0, $E, $F8	
0002304E 04                         SME_N6hqJ_262:	dc.b 4	
0002304F EC03 0000 F0               		dc.b $EC, 3, 0, 0, $F0	
00023054 E405 0004 F8               		dc.b $E4, 5, 0, 4, $F8	
00023059 F405 0008 F8               		dc.b $F4, 5, 0, 8, $F8	
0002305E 0409 000C F8               		dc.b 4, 9, 0, $C, $F8	
00023063 03                         SME_N6hqJ_277:	dc.b 3	
00023064 EB0D 0000 EE               		dc.b $EB, $D, 0, 0, $EE	
00023069 0301 0008 EC               		dc.b 3, 1, 0, 8, $EC	
0002306E FB0F 000A F4               		dc.b $FB, $F, 0, $A, $F4	
00023073 04                         SME_N6hqJ_287:	dc.b 4	
00023074 EC0D 0000 EE               		dc.b $EC, $D, 0, 0, $EE	
00023079 0401 0008 EC               		dc.b 4, 1, 0, 8, $EC	
0002307E FC0B 000A F4               		dc.b $FC, $B, 0, $A, $F4	
00023083 0401 0016 0C               		dc.b 4, 1, 0, $16, $C	
00023088 03                         SME_N6hqJ_29C:	dc.b 3	
00023089 ED0D 0000 ED               		dc.b $ED, $D, 0, 0, $ED	
0002308E FD09 0008 F4               		dc.b $FD, 9, 0, 8, $F4	
00023093 0D05 000E F7               		dc.b $D, 5, 0, $E, $F7	
00023098 02                         SME_N6hqJ_2AC:	dc.b 2	
00023099 EC09 0000 F4               		dc.b $EC, 9, 0, 0, $F4	
0002309E FC0F 0006 EE               		dc.b $FC, $F, 0, 6, $EE	
000230A3 03                         SME_N6hqJ_2B7:	dc.b 3	
000230A4 EB09 0000 F4               		dc.b $EB, 9, 0, 0, $F4	
000230A9 FB0F 0006 EE               		dc.b $FB, $F, 0, 6, $EE	
000230AE FB01 0016 0E               		dc.b $FB, 1, 0, $16, $E	
000230B3 04                         SME_N6hqJ_2C7:	dc.b 4	
000230B4 EC09 0000 F4               		dc.b $EC, 9, 0, 0, $F4	
000230B9 0401 0006 EC               		dc.b 4, 1, 0, 6, $EC	
000230BE FC0B 0008 F4               		dc.b $FC, $B, 0, 8, $F4	
000230C3 0401 0014 0C               		dc.b 4, 1, 0, $14, $C	
000230C8 03                         SME_N6hqJ_2DC:	dc.b 3	
000230C9 ED0D 0000 ED               		dc.b $ED, $D, 0, 0, $ED	
000230CE FD09 0008 F4               		dc.b $FD, 9, 0, 8, $F4	
000230D3 0D05 000E F7               		dc.b $D, 5, 0, $E, $F7	
000230D8 02                         SME_N6hqJ_2EC:	dc.b 2	
000230D9 EC0D 0000 EE               		dc.b $EC, $D, 0, 0, $EE	
000230DE FC0B 0008 F3               		dc.b $FC, $B, 0, 8, $F3	
000230E3 04                         SME_N6hqJ_2F7:	dc.b 4	
000230E4 EB09 0000 EA               		dc.b $EB, 9, 0, 0, $EA	
000230E9 FB09 0006 EA               		dc.b $FB, 9, 0, 6, $EA	
000230EE F305 000C 02               		dc.b $F3, 5, 0, $C, 2	
000230F3 0B01 0010 FA               		dc.b $B, 1, 0, $10, $FA	
000230F8 05                         SME_N6hqJ_30C:	dc.b 5	
000230F9 EC09 0000 EB               		dc.b $EC, 9, 0, 0, $EB	
000230FE EC01 0006 03               		dc.b $EC, 1, 0, 6, 3	
00023103 FC0D 0008 EB               		dc.b $FC, $D, 0, 8, $EB	
00023108 FC05 0010 0B               		dc.b $FC, 5, 0, $10, $B	
0002310D 0C01 0014 FB               		dc.b $C, 1, 0, $14, $FB	
00023112 04                         SME_N6hqJ_326:	dc.b 4	
00023113 ED07 0000 EC               		dc.b $ED, 7, 0, 0, $EC	
00023118 ED03 0008 FC               		dc.b $ED, 3, 0, 8, $FC	
0002311D F501 000C 04               		dc.b $F5, 1, 0, $C, 4	
00023122 0505 000E 04               		dc.b 5, 5, 0, $E, 4	
00023127 04                         SME_N6hqJ_33B:	dc.b 4	
00023128 EC09 0000 EB               		dc.b $EC, 9, 0, 0, $EB	
0002312D EC01 0006 03               		dc.b $EC, 1, 0, 6, 3	
00023132 FC05 0008 EB               		dc.b $FC, 5, 0, 8, $EB	
00023137 FC0B 000C FB               		dc.b $FC, $B, 0, $C, $FB	
0002313C 05                         SME_N6hqJ_350:	dc.b 5	
0002313D EB09 0000 EA               		dc.b $EB, 9, 0, 0, $EA	
00023142 EB01 0006 02               		dc.b $EB, 1, 0, 6, 2	
00023147 FB0D 0008 EA               		dc.b $FB, $D, 0, 8, $EA	
0002314C F301 0010 0A               		dc.b $F3, 1, 0, $10, $A	
00023151 0B05 0012 F2               		dc.b $B, 5, 0, $12, $F2	
00023156 05                         SME_N6hqJ_36A:	dc.b 5	
00023157 EC09 0000 EB               		dc.b $EC, 9, 0, 0, $EB	
0002315C EC01 0006 03               		dc.b $EC, 1, 0, 6, 3	
00023161 FC0D 0008 EB               		dc.b $FC, $D, 0, 8, $EB	
00023166 FA05 0010 0B               		dc.b $FA, 5, 0, $10, $B	
0002316B 0C01 0014 FB               		dc.b $C, 1, 0, $14, $FB	
00023170 04                         SME_N6hqJ_384:	dc.b 4	
00023171 ED07 0000 EC               		dc.b $ED, 7, 0, 0, $EC	
00023176 ED03 0008 FC               		dc.b $ED, 3, 0, 8, $FC	
0002317B F501 000C 04               		dc.b $F5, 1, 0, $C, 4	
00023180 0505 000E 04               		dc.b 5, 5, 0, $E, 4	
00023185 05                         SME_N6hqJ_399:	dc.b 5	
00023186 EC09 0000 EB               		dc.b $EC, 9, 0, 0, $EB	
0002318B FC09 0006 EB               		dc.b $FC, 9, 0, 6, $EB	
00023190 F401 000C 03               		dc.b $F4, 1, 0, $C, 3	
00023195 0C01 000E FB               		dc.b $C, 1, 0, $E, $FB	
0002319A 0405 0010 03               		dc.b 4, 5, 0, $10, 3	
0002319F 03                         SME_N6hqJ_3B3:	dc.b 3	
000231A0 F207 0000 EB               		dc.b $F2, 7, 0, 0, $EB	
000231A5 EC0B 0008 FB               		dc.b $EC, $B, 0, 8, $FB	
000231AA 0C05 0014 03               		dc.b $C, 5, 0, $14, 3	
000231AF 03                         SME_N6hqJ_3C3:	dc.b 3	
000231B0 F207 0000 EC               		dc.b $F2, 7, 0, 0, $EC	
000231B5 EC0B 0008 FC               		dc.b $EC, $B, 0, 8, $FC	
000231BA 0C05 0014 04               		dc.b $C, 5, 0, $14, 4	
000231BF 03                         SME_N6hqJ_3D3:	dc.b 3	
000231C0 F307 0000 ED               		dc.b $F3, 7, 0, 0, $ED	
000231C5 F403 0008 FD               		dc.b $F4, 3, 0, 8, $FD	
000231CA F905 000C 05               		dc.b $F9, 5, 0, $C, 5	
000231CF 02                         SME_N6hqJ_3E3:	dc.b 2	
000231D0 F407 0000 EC               		dc.b $F4, 7, 0, 0, $EC	
000231D5 F20B 0008 FC               		dc.b $F2, $B, 0, 8, $FC	
000231DA 03                         SME_N6hqJ_3EE:	dc.b 3	
000231DB F407 0000 EB               		dc.b $F4, 7, 0, 0, $EB	
000231E0 E305 0008 FB               		dc.b $E3, 5, 0, 8, $FB	
000231E5 F30B 000C FB               		dc.b $F3, $B, 0, $C, $FB	
000231EA 03                         SME_N6hqJ_3FE:	dc.b 3	
000231EB F407 0000 EC               		dc.b $F4, 7, 0, 0, $EC	
000231F0 EC0B 0008 FC               		dc.b $EC, $B, 0, 8, $FC	
000231F5 0C05 0014 04               		dc.b $C, 5, 0, $14, 4	
000231FA 03                         SME_N6hqJ_40E:	dc.b 3	
000231FB F307 0000 ED               		dc.b $F3, 7, 0, 0, $ED	
00023200 F403 0008 FD               		dc.b $F4, 3, 0, 8, $FD	
00023205 F905 000C 05               		dc.b $F9, 5, 0, $C, 5	
0002320A 02                         SME_N6hqJ_41E:	dc.b 2	
0002320B F207 0000 EC               		dc.b $F2, 7, 0, 0, $EC	
00023210 F40B 0008 FC               		dc.b $F4, $B, 0, 8, $FC	
00023215 04                         SME_N6hqJ_429:	dc.b 4	
00023216 EE05 0000 F3               		dc.b $EE, 5, 0, 0, $F3	
0002321B FE07 0004 EB               		dc.b $FE, 7, 0, 4, $EB	
00023220 FE0D 000C FB               		dc.b $FE, $D, 0, $C, $FB	
00023225 0E01 0014 FB               		dc.b $E, 1, 0, $14, $FB	
0002322A 05                         SME_N6hqJ_43E:	dc.b 5	
0002322B DD05 0000 FC               		dc.b $DD, 5, 0, 0, $FC	
00023230 ED09 0004 F4               		dc.b $ED, 9, 0, 4, $F4	
00023235 FD07 000A EC               		dc.b $FD, 7, 0, $A, $EC	
0002323A FD0D 0012 FC               		dc.b $FD, $D, 0, $12, $FC	
0002323F 0D01 001A FC               		dc.b $D, 1, 0, $1A, $FC	
00023244 04                         SME_N6hqJ_458:	dc.b 4	
00023245 EC0D 0000 F5               		dc.b $EC, $D, 0, 0, $F5	
0002324A FC07 0008 ED               		dc.b $FC, 7, 0, 8, $ED	
0002324F FC05 0010 FD               		dc.b $FC, 5, 0, $10, $FD	
00023254 0C01 0014 FD               		dc.b $C, 1, 0, $14, $FD	
00023259 04                         SME_N6hqJ_46D:	dc.b 4	
0002325A ED0D 0000 F4               		dc.b $ED, $D, 0, 0, $F4	
0002325F FD07 0008 EC               		dc.b $FD, 7, 0, 8, $EC	
00023264 FD09 0010 FC               		dc.b $FD, 9, 0, $10, $FC	
00023269 0D01 0016 FC               		dc.b $D, 1, 0, $16, $FC	
0002326E 04                         SME_N6hqJ_482:	dc.b 4	
0002326F EE09 0000 F3               		dc.b $EE, 9, 0, 0, $F3	
00023274 FE07 0006 EB               		dc.b $FE, 7, 0, 6, $EB	
00023279 FE0D 000E FB               		dc.b $FE, $D, 0, $E, $FB	
0002327E 0E01 0016 FB               		dc.b $E, 1, 0, $16, $FB	
00023283 05                         SME_N6hqJ_497:	dc.b 5	
00023284 DD05 0000 FA               		dc.b $DD, 5, 0, 0, $FA	
00023289 ED09 0004 F4               		dc.b $ED, 9, 0, 4, $F4	
0002328E FD07 000A EC               		dc.b $FD, 7, 0, $A, $EC	
00023293 FD0D 0012 FC               		dc.b $FD, $D, 0, $12, $FC	
00023298 0D01 001A FC               		dc.b $D, 1, 0, $1A, $FC	
0002329D 04                         SME_N6hqJ_4B1:	dc.b 4	
0002329E EC0D 0000 F5               		dc.b $EC, $D, 0, 0, $F5	
000232A3 FC07 0008 ED               		dc.b $FC, 7, 0, 8, $ED	
000232A8 FC05 0010 FD               		dc.b $FC, 5, 0, $10, $FD	
000232AD 0C01 0014 FD               		dc.b $C, 1, 0, $14, $FD	
000232B2 04                         SME_N6hqJ_4C6:	dc.b 4	
000232B3 ED0D 0000 F4               		dc.b $ED, $D, 0, 0, $F4	
000232B8 FD07 0008 EC               		dc.b $FD, 7, 0, 8, $EC	
000232BD FD09 0010 FC               		dc.b $FD, 9, 0, $10, $FC	
000232C2 0D01 0016 FC               		dc.b $D, 1, 0, $16, $FC	
000232C7 02                         SME_N6hqJ_4DB:	dc.b 2	
000232C8 EE09 0000 F8               		dc.b $EE, 9, 0, 0, $F8	
000232CD FE0F 0006 F0               		dc.b $FE, $F, 0, 6, $F0	
000232D2 02                         SME_N6hqJ_4E6:	dc.b 2	
000232D3 EE09 0000 F8               		dc.b $EE, 9, 0, 0, $F8	
000232D8 FE0F 0006 F0               		dc.b $FE, $F, 0, 6, $F0	
000232DD 02                         SME_N6hqJ_4F1:	dc.b 2	
000232DE EE09 0000 F8               		dc.b $EE, 9, 0, 0, $F8	
000232E3 FE0F 0006 F0               		dc.b $FE, $F, 0, 6, $F0	
000232E8 02                         SME_N6hqJ_4FC:	dc.b 2	
000232E9 EE09 0000 F8               		dc.b $EE, 9, 0, 0, $F8	
000232EE FE0F 0006 F0               		dc.b $FE, $F, 0, 6, $F0	
000232F3 04                         SME_N6hqJ_507:	dc.b 4	
000232F4 EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
000232F9 EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
000232FE FC0D 0008 F4               		dc.b $FC, $D, 0, 8, $F4	
00023303 0C09 0010 FA               		dc.b $C, 9, 0, $10, $FA	
00023308 03                         SME_N6hqJ_51C:	dc.b 3	
00023309 EC0D 0000 ED               		dc.b $EC, $D, 0, 0, $ED	
0002330E FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
00023313 0C09 0010 F8               		dc.b $C, 9, 0, $10, $F8	
00023318 04                         SME_N6hqJ_52C:	dc.b 4	
00023319 EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
0002331E EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
00023323 FC0D 0008 F4               		dc.b $FC, $D, 0, 8, $F4	
00023328 0C09 0010 FD               		dc.b $C, 9, 0, $10, $FD	
0002332D 03                         SME_N6hqJ_541:	dc.b 3	
0002332E EC0D 0000 ED               		dc.b $EC, $D, 0, 0, $ED	
00023333 FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
00023338 0C09 0010 F8               		dc.b $C, 9, 0, $10, $F8	
0002333D 02                         SME_N6hqJ_551:	dc.b 2	
0002333E F007 0000 EE               		dc.b $F0, 7, 0, 0, $EE	
00023343 F00B 0008 FE               		dc.b $F0, $B, 0, 8, $FE	
00023348 02                         SME_N6hqJ_55C:	dc.b 2	
00023349 F007 0000 EE               		dc.b $F0, 7, 0, 0, $EE	
0002334E F00B 0008 FE               		dc.b $F0, $B, 0, 8, $FE	
00023353 02                         SME_N6hqJ_567:	dc.b 2	
00023354 F007 0000 EE               		dc.b $F0, 7, 0, 0, $EE	
00023359 F00B 0008 FE               		dc.b $F0, $B, 0, 8, $FE	
0002335E 02                         SME_N6hqJ_572:	dc.b 2	
0002335F F007 0000 EE               		dc.b $F0, 7, 0, 0, $EE	
00023364 F00B 0008 FE               		dc.b $F0, $B, 0, 8, $FE	
00023369 03                         SME_N6hqJ_57D:	dc.b 3	
0002336A E901 0000 F4               		dc.b $E9, 1, 0, 0, $F4	
0002336F F907 0002 EC               		dc.b $F9, 7, 0, 2, $EC	
00023374 EC0B 000A FC               		dc.b $EC, $B, 0, $A, $FC	
00023379 02                         SME_N6hqJ_58D:	dc.b 2	
0002337A F307 0000 EC               		dc.b $F3, 7, 0, 0, $EC	
0002337F EB0B 0008 FC               		dc.b $EB, $B, 0, 8, $FC	
00023384 03                         SME_N6hqJ_598:	dc.b 3	
00023385 E901 0000 F4               		dc.b $E9, 1, 0, 0, $F4	
0002338A F907 0002 EC               		dc.b $F9, 7, 0, 2, $EC	
0002338F EC0B 000A FC               		dc.b $EC, $B, 0, $A, $FC	
00023394 02                         SME_N6hqJ_5A8:	dc.b 2	
00023395 F307 0000 EC               		dc.b $F3, 7, 0, 0, $EC	
0002339A EB0B 0008 FC               		dc.b $EB, $B, 0, 8, $FC	
0002339F 01                         SME_N6hqJ_5B3:	dc.b 1	
000233A0 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000233A5 01                         SME_N6hqJ_5B9:	dc.b 1	
000233A6 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000233AB 01                         SME_N6hqJ_5BF:	dc.b 1	
000233AC F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000233B1 01                         SME_N6hqJ_5C5:	dc.b 1	
000233B2 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000233B7 01                         SME_N6hqJ_5CB:	dc.b 1	
000233B8 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000233BD 01                         SME_N6hqJ_5D1:	dc.b 1	
000233BE F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
000233C3 01                         SME_N6hqJ_5D7:	dc.b 1	
000233C4 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
000233C9 01                         SME_N6hqJ_5DD:	dc.b 1	
000233CA F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
000233CF 01                         SME_N6hqJ_5E3:	dc.b 1	
000233D0 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
000233D5 01                         SME_N6hqJ_5E9:	dc.b 1	
000233D6 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
000233DB 01                         SME_N6hqJ_5EF:	dc.b 1	
000233DC F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
000233E1 03                         SME_N6hqJ_5F5:	dc.b 3	
000233E2 E509 0000 F3               		dc.b $E5, 9, 0, 0, $F3	
000233E7 F509 0006 F3               		dc.b $F5, 9, 0, 6, $F3	
000233EC 050D 000C EB               		dc.b 5, $D, 0, $C, $EB	
000233F1 03                         SME_N6hqJ_605:	dc.b 3	
000233F2 E409 0000 F3               		dc.b $E4, 9, 0, 0, $F3	
000233F7 F409 0006 F3               		dc.b $F4, 9, 0, 6, $F3	
000233FC 0409 000C F3               		dc.b 4, 9, 0, $C, $F3	
00023401 03                         SME_N6hqJ_615:	dc.b 3	
00023402 E509 0000 F3               		dc.b $E5, 9, 0, 0, $F3	
00023407 F509 0006 F3               		dc.b $F5, 9, 0, 6, $F3	
0002340C 050D 000C EB               		dc.b 5, $D, 0, $C, $EB	
00023411 03                         SME_N6hqJ_625:	dc.b 3	
00023412 E509 0000 F3               		dc.b $E5, 9, 0, 0, $F3	
00023417 F509 0006 F3               		dc.b $F5, 9, 0, 6, $F3	
0002341C 0509 000C F3               		dc.b 5, 9, 0, $C, $F3	
00023421 01                         SME_N6hqJ_635:	dc.b 1	
00023422 F40B 0000 F6               		dc.b $F4, $B, 0, 0, $F6	
00023427 01                         SME_N6hqJ_63B:	dc.b 1	
00023428 F40F 0000 F2               		dc.b $F4, $F, 0, 0, $F2	
0002342D 02                         SME_N6hqJ_641:	dc.b 2	
0002342E F801 0000 EC               		dc.b $F8, 1, 0, 0, $EC	
00023433 F00F 0002 F4               		dc.b $F0, $F, 0, 2, $F4	
00023438 02                         SME_N6hqJ_64C:	dc.b 2	
00023439 F003 0000 EC               		dc.b $F0, 3, 0, 0, $EC	
0002343E F00F 0004 F4               		dc.b $F0, $F, 0, 4, $F4	
00023443 03                         SME_N6hqJ_657:	dc.b 3	
00023444 E80F 0000 E8               		dc.b $E8, $F, 0, 0, $E8	
00023449 E801 0010 08               		dc.b $E8, 1, 0, $10, 8	
0002344E F805 0012 08               		dc.b $F8, 5, 0, $12, 8	
00023453 03                         SME_N6hqJ_667:	dc.b 3	
00023454 E80F 0000 E8               		dc.b $E8, $F, 0, 0, $E8	
00023459 E801 0010 08               		dc.b $E8, 1, 0, $10, 8	
0002345E F805 0012 08               		dc.b $F8, 5, 0, $12, 8	
00023463 02                         SME_N6hqJ_677:	dc.b 2	
00023464 E80B 0000 F4               		dc.b $E8, $B, 0, 0, $F4	
00023469 0809 000C F4               		dc.b 8, 9, 0, $C, $F4	
0002346E 02                         SME_N6hqJ_682:	dc.b 2	
0002346F E80B 0000 F4               		dc.b $E8, $B, 0, 0, $F4	
00023474 0809 000C F4               		dc.b 8, 9, 0, $C, $F4	
00023479 03                         SME_N6hqJ_68D:	dc.b 3	
0002347A FC05 0000 EC               		dc.b $FC, 5, 0, 0, $EC	
0002347F F40B 0004 FC               		dc.b $F4, $B, 0, 4, $FC	
00023484 F401 0010 14               		dc.b $F4, 1, 0, $10, $14	
00023489 04                         SME_N6hqJ_69D:	dc.b 4	
0002348A F401 0000 E8               		dc.b $F4, 1, 0, 0, $E8	
0002348F F407 0002 F0               		dc.b $F4, 7, 0, 2, $F0	
00023494 F407 0802 00               		dc.b $F4, 7, 8, 2, 0	
00023499 F401 0800 10               		dc.b $F4, 1, 8, 0, $10	
0002349E 03                         SME_N6hqJ_6B2:	dc.b 3	
0002349F FC05 0800 04               		dc.b $FC, 5, 8, 0, 4	
000234A4 F40B 0804 EC               		dc.b $F4, $B, 8, 4, $EC	
000234A9 F401 0810 E4               		dc.b $F4, 1, 8, $10, $E4	
000234AE 03                         SME_N6hqJ_6C2:	dc.b 3	
000234AF F401 0000 E4               		dc.b $F4, 1, 0, 0, $E4	
000234B4 F40B 0002 EC               		dc.b $F4, $B, 0, 2, $EC	
000234B9 FC01 000E 04               		dc.b $FC, 1, 0, $E, 4	
000234BE 03                         SME_N6hqJ_6D2:	dc.b 3	
000234BF F401 0800 14               		dc.b $F4, 1, 8, 0, $14	
000234C4 F40B 0802 FC               		dc.b $F4, $B, 8, 2, $FC	
000234C9 FC01 080E F4               		dc.b $FC, 1, 8, $E, $F4	
000234CE 03                         SME_N6hqJ_6E2:	dc.b 3	
000234CF FC05 0000 EC               		dc.b $FC, 5, 0, 0, $EC	
000234D4 F40B 0004 FC               		dc.b $F4, $B, 0, 4, $FC	
000234D9 F401 0010 14               		dc.b $F4, 1, 0, $10, $14	
000234DE 03                         SME_N6hqJ_6F2:	dc.b 3	
000234DF E409 0000 F4               		dc.b $E4, 9, 0, 0, $F4	
000234E4 F40F 0006 EC               		dc.b $F4, $F, 0, 6, $EC	
000234E9 0401 0016 0C               		dc.b 4, 1, 0, $16, $C	
000234EE 02                         SME_N6hqJ_702:	dc.b 2	
000234EF E80B 0000 F4               		dc.b $E8, $B, 0, 0, $F4	
000234F4 0805 000C FC               		dc.b 8, 5, 0, $C, $FC	
000234F9 04                         SME_N6hqJ_70D:	dc.b 4	
000234FA EA01 0000 E8               		dc.b $EA, 1, 0, 0, $E8	
000234FF EA0B 0002 F0               		dc.b $EA, $B, 0, 2, $F0	
00023504 EA01 000E 08               		dc.b $EA, 1, 0, $E, 8	
00023509 0A0D 0010 F0               		dc.b $A, $D, 0, $10, $F0	
0002350E 04                         SME_N6hqJ_722:	dc.b 4	
0002350F EA01 0000 E8               		dc.b $EA, 1, 0, 0, $E8	
00023514 EA0B 0002 F0               		dc.b $EA, $B, 0, 2, $F0	
00023519 EA01 000E 08               		dc.b $EA, 1, 0, $E, 8	
0002351E 0A0D 0010 F0               		dc.b $A, $D, 0, $10, $F0	
00023523 03                         SME_N6hqJ_737:	dc.b 3	
00023524 EA0D 0000 E8               		dc.b $EA, $D, 0, 0, $E8	
00023529 EA01 0008 08               		dc.b $EA, 1, 0, 8, 8	
0002352E FA0B 000A F0               		dc.b $FA, $B, 0, $A, $F0	
00023533 03                         SME_N6hqJ_747:	dc.b 3	
00023534 E409 0000 F0               		dc.b $E4, 9, 0, 0, $F0	
00023539 F40B 0006 F0               		dc.b $F4, $B, 0, 6, $F0	
0002353E F401 0012 08               		dc.b $F4, 1, 0, $12, 8	
00023543 03                         SME_N6hqJ_757:	dc.b 3	
00023544 E50B 0000 F0               		dc.b $E5, $B, 0, 0, $F0	
00023549 F401 000C 08               		dc.b $F4, 1, 0, $C, 8	
0002354E 0505 000E F8               		dc.b 5, 5, 0, $E, $F8	
00023553 02                         SME_N6hqJ_767:	dc.b 2	
00023554 EC0B 0000 F1               		dc.b $EC, $B, 0, 0, $F1	
00023559 FC01 000C 09               		dc.b $FC, 1, 0, $C, 9	
0002355E 01                         SME_N6hqJ_772:	dc.b 1	
0002355F EE0F 0000 F0               		dc.b $EE, $F, 0, 0, $F0	
00023564 02                         SME_N6hqJ_778:	dc.b 2	
00023565 F20B 0000 F0               		dc.b $F2, $B, 0, 0, $F0	
0002356A FA01 000C 08               		dc.b $FA, 1, 0, $C, 8	
0002356F 03                         SME_N6hqJ_783:	dc.b 3	
00023570 E401 0000 00               		dc.b $E4, 1, 0, 0, 0	
00023575 F40B 0002 F0               		dc.b $F4, $B, 0, 2, $F0	
0002357A F401 000E 08               		dc.b $F4, 1, 0, $E, 8	
0002357F 03                         SME_N6hqJ_793:	dc.b 3	
00023580 E509 0000 F0               		dc.b $E5, 9, 0, 0, $F0	
00023585 F50B 0006 F0               		dc.b $F5, $B, 0, 6, $F0	
0002358A ED03 0012 08               		dc.b $ED, 3, 0, $12, 8	
0002358F 03                         SME_N6hqJ_7A3:	dc.b 3	
00023590 E405 0000 F8               		dc.b $E4, 5, 0, 0, $F8	
00023595 F40B 0004 F0               		dc.b $F4, $B, 0, 4, $F0	
0002359A F401 0010 08               		dc.b $F4, 1, 0, $10, 8	
0002359F 02                         SME_N6hqJ_7B3:	dc.b 2	
000235A0 ED0B 0000 F0               		dc.b $ED, $B, 0, 0, $F0	
000235A5 F501 000C 08               		dc.b $F5, 1, 0, $C, 8	
000235AA 02                         SME_N6hqJ_7BE:	dc.b 2	
000235AB F401 0000 F0               		dc.b $F4, 1, 0, 0, $F0	
000235B0 F10B 0002 F8               		dc.b $F1, $B, 0, 2, $F8	
000235B5 03                         SME_N6hqJ_7C9:	dc.b 3	
000235B6 E405 0000 F1               		dc.b $E4, 5, 0, 0, $F1	
000235BB F40B 0004 F0               		dc.b $F4, $B, 0, 4, $F0	
000235C0 F401 0010 08               		dc.b $F4, 1, 0, $10, 8	
000235C5 02                         SME_N6hqJ_7D9:	dc.b 2	
000235C6 E105 0000 F0               		dc.b $E1, 5, 0, 0, $F0	
000235CB F10F 0004 F0               		dc.b $F1, $F, 0, 4, $F0	
000235D0 03                         SME_N6hqJ_7E4:	dc.b 3	
000235D1 E807 0000 F0               		dc.b $E8, 7, 0, 0, $F0	
000235D6 E003 0008 00               		dc.b $E0, 3, 0, 8, 0	
000235DB 0009 000C 00               		dc.b 0, 9, 0, $C, 0	
000235E0 03                         SME_N6hqJ_7F4:	dc.b 3	
000235E1 E807 0000 F0               		dc.b $E8, 7, 0, 0, $F0	
000235E6 E003 0008 00               		dc.b $E0, 3, 0, 8, 0	
000235EB 0009 000C 00               		dc.b 0, 9, 0, $C, 0	
000235F0 01                         SME_N6hqJ_804:	dc.b 1	
000235F1 F00B 0000 F5               		dc.b $F0, $B, 0, 0, $F5	
000235F6 03                         SME_N6hqJ_80A:	dc.b 3	
000235F7 E60B 0000 F0               		dc.b $E6, $B, 0, 0, $F0	
000235FC EE01 000C 08               		dc.b $EE, 1, 0, $C, 8	
00023601 0609 000E F0               		dc.b 6, 9, 0, $E, $F0	
00023606 03                         SME_N6hqJ_81A:	dc.b 3	
00023607 E40A 0000 F0               		dc.b $E4, $A, 0, 0, $F0	
0002360C FC00 0009 08               		dc.b $FC, 0, 0, 9, 8	
00023611 FC0A 000A F0               		dc.b $FC, $A, 0, $A, $F0	
00023616 05                         SME_N6hqJ_82A:	dc.b 5	
00023617 E408 0000 F0               		dc.b $E4, 8, 0, 0, $F0	
0002361C EC01 0003 F0               		dc.b $EC, 1, 0, 3, $F0	
00023621 EC05 0005 F8               		dc.b $EC, 5, 0, 5, $F8	
00023626 FC0A 0009 F0               		dc.b $FC, $A, 0, 9, $F0	
0002362B FD00 0012 08               		dc.b $FD, 0, 0, $12, 8	
00023630 05                         SME_N6hqJ_844:	dc.b 5	
00023631 E408 0000 F0               		dc.b $E4, 8, 0, 0, $F0	
00023636 EC01 0003 F0               		dc.b $EC, 1, 0, 3, $F0	
0002363B EC05 0005 F8               		dc.b $EC, 5, 0, 5, $F8	
00023640 FC0A 0009 F0               		dc.b $FC, $A, 0, 9, $F0	
00023645 FD00 0012 08               		dc.b $FD, 0, 0, $12, 8	
0002364A 02                         SME_N6hqJ_85E:	dc.b 2	
0002364B E70A 0000 F1               		dc.b $E7, $A, 0, 0, $F1	
00023650 FF0A 0009 F3               		dc.b $FF, $A, 0, 9, $F3	
00023655 02                         SME_N6hqJ_869:	dc.b 2	
00023656 E70A 0000 F1               		dc.b $E7, $A, 0, 0, $F1	
0002365B FF0A 0009 F3               		dc.b $FF, $A, 0, 9, $F3	
00023660 02                         SME_N6hqJ_874:	dc.b 2	
00023661 E70A 0000 F1               		dc.b $E7, $A, 0, 0, $F1	
00023666 FF0A 0009 F3               		dc.b $FF, $A, 0, 9, $F3	
0002366B 03                         SME_N6hqJ_87F:	dc.b 3	
0002366C E30E 0000 EE               		dc.b $E3, $E, 0, 0, $EE	
00023671 0301 000C EC               		dc.b 3, 1, 0, $C, $EC	
00023676 FB0F 000E F4               		dc.b $FB, $F, 0, $E, $F4	
0002367B 04                         SME_N6hqJ_88F:	dc.b 4	
0002367C E40E 0000 EE               		dc.b $E4, $E, 0, 0, $EE	
00023681 0401 000C EC               		dc.b 4, 1, 0, $C, $EC	
00023686 FC0B 000E F4               		dc.b $FC, $B, 0, $E, $F4	
0002368B 0401 001A 0C               		dc.b 4, 1, 0, $1A, $C	
00023690 03                         SME_N6hqJ_8A4:	dc.b 3	
00023691 E50E 0000 ED               		dc.b $E5, $E, 0, 0, $ED	
00023696 FD09 000C F4               		dc.b $FD, 9, 0, $C, $F4	
0002369B 0D05 0012 F7               		dc.b $D, 5, 0, $12, $F7	
000236A0 02                         SME_N6hqJ_8B4:	dc.b 2	
000236A1 E40A 0000 F4               		dc.b $E4, $A, 0, 0, $F4	
000236A6 FC0F 0009 EE               		dc.b $FC, $F, 0, 9, $EE	
000236AB 03                         SME_N6hqJ_8BF:	dc.b 3	
000236AC E30A 0000 F4               		dc.b $E3, $A, 0, 0, $F4	
000236B1 FB0F 0009 EE               		dc.b $FB, $F, 0, 9, $EE	
000236B6 FB01 0019 0E               		dc.b $FB, 1, 0, $19, $E	
000236BB 04                         SME_N6hqJ_8CF:	dc.b 4	
000236BC E40A 0000 F4               		dc.b $E4, $A, 0, 0, $F4	
000236C1 0401 0009 EC               		dc.b 4, 1, 0, 9, $EC	
000236C6 FC0B 000B F4               		dc.b $FC, $B, 0, $B, $F4	
000236CB 0401 0017 0C               		dc.b 4, 1, 0, $17, $C	
000236D0 03                         SME_N6hqJ_8E4:	dc.b 3	
000236D1 E50E 0000 ED               		dc.b $E5, $E, 0, 0, $ED	
000236D6 FD09 000C F4               		dc.b $FD, 9, 0, $C, $F4	
000236DB 0D05 0012 F7               		dc.b $D, 5, 0, $12, $F7	
000236E0 02                         SME_N6hqJ_8F4:	dc.b 2	
000236E1 E40E 0000 EE               		dc.b $E4, $E, 0, 0, $EE	
000236E6 FC0B 000C F3               		dc.b $FC, $B, 0, $C, $F3	
000236EB 04                         SME_N6hqJ_8FF:	dc.b 4	
000236EC EB0D 0000 E2               		dc.b $EB, $D, 0, 0, $E2	
000236F1 F305 0008 02               		dc.b $F3, 5, 0, 8, 2	
000236F6 FB09 000C EA               		dc.b $FB, 9, 0, $C, $EA	
000236FB 0B01 0012 FA               		dc.b $B, 1, 0, $12, $FA	
00023700 05                         SME_N6hqJ_914:	dc.b 5	
00023701 EC0D 0000 E3               		dc.b $EC, $D, 0, 0, $E3	
00023706 EC01 0008 03               		dc.b $EC, 1, 0, 8, 3	
0002370B FC0D 000A EB               		dc.b $FC, $D, 0, $A, $EB	
00023710 FC05 0012 0B               		dc.b $FC, 5, 0, $12, $B	
00023715 0C01 0016 FB               		dc.b $C, 1, 0, $16, $FB	
0002371A 05                         SME_N6hqJ_92E:	dc.b 5	
0002371B ED0A 0000 E4               		dc.b $ED, $A, 0, 0, $E4	
00023720 ED03 0009 FC               		dc.b $ED, 3, 0, 9, $FC	
00023725 0500 000D F4               		dc.b 5, 0, 0, $D, $F4	
0002372A F501 000E 04               		dc.b $F5, 1, 0, $E, 4	
0002372F 0505 0010 04               		dc.b 5, 5, 0, $10, 4	
00023734 05                         SME_N6hqJ_948:	dc.b 5	
00023735 E400 0000 F1               		dc.b $E4, 0, 0, 0, $F1	
0002373A EC0D 0001 E3               		dc.b $EC, $D, 0, 1, $E3	
0002373F EC01 0009 03               		dc.b $EC, 1, 0, 9, 3	
00023744 FC05 000B EB               		dc.b $FC, 5, 0, $B, $EB	
00023749 FC0B 000F FB               		dc.b $FC, $B, 0, $F, $FB	
0002374E 06                         SME_N6hqJ_962:	dc.b 6	
0002374F E300 0000 F0               		dc.b $E3, 0, 0, 0, $F0	
00023754 EB0D 0001 E2               		dc.b $EB, $D, 0, 1, $E2	
00023759 EB01 0009 02               		dc.b $EB, 1, 0, 9, 2	
0002375E F301 000B 0A               		dc.b $F3, 1, 0, $B, $A	
00023763 FB0D 000D EA               		dc.b $FB, $D, 0, $D, $EA	
00023768 0B05 0015 F2               		dc.b $B, 5, 0, $15, $F2	
0002376D 06                         SME_N6hqJ_981:	dc.b 6	
0002376E E400 0000 F1               		dc.b $E4, 0, 0, 0, $F1	
00023773 EC0D 0001 E3               		dc.b $EC, $D, 0, 1, $E3	
00023778 EC01 0009 03               		dc.b $EC, 1, 0, 9, 3	
0002377D FC0D 000B EB               		dc.b $FC, $D, 0, $B, $EB	
00023782 FA05 0013 0B               		dc.b $FA, 5, 0, $13, $B	
00023787 0C01 0017 FB               		dc.b $C, 1, 0, $17, $FB	
0002378C 05                         SME_N6hqJ_9A0:	dc.b 5	
0002378D ED0A 0000 E4               		dc.b $ED, $A, 0, 0, $E4	
00023792 ED03 0009 FC               		dc.b $ED, 3, 0, 9, $FC	
00023797 0500 000D F4               		dc.b 5, 0, 0, $D, $F4	
0002379C F501 000E 04               		dc.b $F5, 1, 0, $E, 4	
000237A1 0505 0010 04               		dc.b 5, 5, 0, $10, 4	
000237A6 05                         SME_N6hqJ_9BA:	dc.b 5	
000237A7 EC0D 0000 E3               		dc.b $EC, $D, 0, 0, $E3	
000237AC F401 0008 03               		dc.b $F4, 1, 0, 8, 3	
000237B1 FC09 000A EB               		dc.b $FC, 9, 0, $A, $EB	
000237B6 0C00 0010 FB               		dc.b $C, 0, 0, $10, $FB	
000237BB 0405 0011 03               		dc.b 4, 5, 0, $11, 3	
000237C0 03                         SME_N6hqJ_9D4:	dc.b 3	
000237C1 F20B 0000 E3               		dc.b $F2, $B, 0, 0, $E3	
000237C6 EC0B 000C FB               		dc.b $EC, $B, 0, $C, $FB	
000237CB 0C05 0018 03               		dc.b $C, 5, 0, $18, 3	
000237D0 03                         SME_N6hqJ_9E4:	dc.b 3	
000237D1 F20B 0000 E4               		dc.b $F2, $B, 0, 0, $E4	
000237D6 EC0B 000C FC               		dc.b $EC, $B, 0, $C, $FC	
000237DB 0C05 0018 04               		dc.b $C, 5, 0, $18, 4	
000237E0 03                         SME_N6hqJ_9F4:	dc.b 3	
000237E1 F30B 0000 E5               		dc.b $F3, $B, 0, 0, $E5	
000237E6 F403 000C FD               		dc.b $F4, 3, 0, $C, $FD	
000237EB F905 0010 05               		dc.b $F9, 5, 0, $10, 5	
000237F0 02                         SME_N6hqJ_A04:	dc.b 2	
000237F1 F40A 0000 E4               		dc.b $F4, $A, 0, 0, $E4	
000237F6 F20B 0009 FC               		dc.b $F2, $B, 0, 9, $FC	
000237FB 03                         SME_N6hqJ_A0F:	dc.b 3	
000237FC F40A 0000 E3               		dc.b $F4, $A, 0, 0, $E3	
00023801 E305 0009 FB               		dc.b $E3, 5, 0, 9, $FB	
00023806 F30B 000D FB               		dc.b $F3, $B, 0, $D, $FB	
0002380B 03                         SME_N6hqJ_A1F:	dc.b 3	
0002380C F40A 0000 E4               		dc.b $F4, $A, 0, 0, $E4	
00023811 EC0B 0009 FC               		dc.b $EC, $B, 0, 9, $FC	
00023816 0C05 0015 04               		dc.b $C, 5, 0, $15, 4	
0002381B 03                         SME_N6hqJ_A2F:	dc.b 3	
0002381C F30B 0000 E5               		dc.b $F3, $B, 0, 0, $E5	
00023821 F403 000C FD               		dc.b $F4, 3, 0, $C, $FD	
00023826 F905 0010 05               		dc.b $F9, 5, 0, $10, 5	
0002382B 02                         SME_N6hqJ_A3F:	dc.b 2	
0002382C F40B 0000 E4               		dc.b $F4, $B, 0, 0, $E4	
00023831 F20B 000C FC               		dc.b $F2, $B, 0, $C, $FC	
00023836 04                         SME_N6hqJ_A4A:	dc.b 4	
00023837 EE05 0000 F3               		dc.b $EE, 5, 0, 0, $F3	
0002383C FE07 0004 EB               		dc.b $FE, 7, 0, 4, $EB	
00023841 FE0D 000C FB               		dc.b $FE, $D, 0, $C, $FB	
00023846 0E00 0014 FB               		dc.b $E, 0, 0, $14, $FB	
0002384B 05                         SME_N6hqJ_A5F:	dc.b 5	
0002384C DD05 0000 FC               		dc.b $DD, 5, 0, 0, $FC	
00023851 ED09 0004 F4               		dc.b $ED, 9, 0, 4, $F4	
00023856 FD07 000A EC               		dc.b $FD, 7, 0, $A, $EC	
0002385B FD0D 0012 FC               		dc.b $FD, $D, 0, $12, $FC	
00023860 0D00 001A FC               		dc.b $D, 0, 0, $1A, $FC	
00023865 04                         SME_N6hqJ_A79:	dc.b 4	
00023866 EC0D 0000 F5               		dc.b $EC, $D, 0, 0, $F5	
0002386B FC07 0008 ED               		dc.b $FC, 7, 0, 8, $ED	
00023870 FC05 0010 FD               		dc.b $FC, 5, 0, $10, $FD	
00023875 0C01 0014 FD               		dc.b $C, 1, 0, $14, $FD	
0002387A 04                         SME_N6hqJ_A8E:	dc.b 4	
0002387B ED0D 0000 F4               		dc.b $ED, $D, 0, 0, $F4	
00023880 FD0B 0008 E4               		dc.b $FD, $B, 0, 8, $E4	
00023885 FD09 0014 FC               		dc.b $FD, 9, 0, $14, $FC	
0002388A 0D00 001A FC               		dc.b $D, 0, 0, $1A, $FC	
0002388F 04                         SME_N6hqJ_AA3:	dc.b 4	
00023890 EE09 0000 F3               		dc.b $EE, 9, 0, 0, $F3	
00023895 FE0B 0006 E3               		dc.b $FE, $B, 0, 6, $E3	
0002389A FE0D 0012 FB               		dc.b $FE, $D, 0, $12, $FB	
0002389F 0E00 001A FB               		dc.b $E, 0, 0, $1A, $FB	
000238A4 05                         SME_N6hqJ_AB8:	dc.b 5	
000238A5 DD05 0000 FA               		dc.b $DD, 5, 0, 0, $FA	
000238AA ED09 0004 F4               		dc.b $ED, 9, 0, 4, $F4	
000238AF FD0B 000A E4               		dc.b $FD, $B, 0, $A, $E4	
000238B4 FD0D 0016 FC               		dc.b $FD, $D, 0, $16, $FC	
000238B9 0D00 001E FC               		dc.b $D, 0, 0, $1E, $FC	
000238BE 04                         SME_N6hqJ_AD2:	dc.b 4	
000238BF EC0D 0000 F5               		dc.b $EC, $D, 0, 0, $F5	
000238C4 FC07 0008 ED               		dc.b $FC, 7, 0, 8, $ED	
000238C9 FC05 0010 FD               		dc.b $FC, 5, 0, $10, $FD	
000238CE 0C01 0014 FD               		dc.b $C, 1, 0, $14, $FD	
000238D3 04                         SME_N6hqJ_AE7:	dc.b 4	
000238D4 ED0D 0000 F4               		dc.b $ED, $D, 0, 0, $F4	
000238D9 FD07 0008 EC               		dc.b $FD, 7, 0, 8, $EC	
000238DE FD09 0010 FC               		dc.b $FD, 9, 0, $10, $FC	
000238E3 0D00 0016 FC               		dc.b $D, 0, 0, $16, $FC	
000238E8 03                         SME_N6hqJ_AFC:	dc.b 3	
000238E9 E30E 0000 EE               		dc.b $E3, $E, 0, 0, $EE	
000238EE 0301 000C EC               		dc.b 3, 1, 0, $C, $EC	
000238F3 FB0F 000E F4               		dc.b $FB, $F, 0, $E, $F4	
000238F8 04                         SME_N6hqJ_B0C:	dc.b 4	
000238F9 E40E 0000 EE               		dc.b $E4, $E, 0, 0, $EE	
000238FE 0401 000C EC               		dc.b 4, 1, 0, $C, $EC	
00023903 FC0B 000E F4               		dc.b $FC, $B, 0, $E, $F4	
00023908 0401 001A 0C               		dc.b 4, 1, 0, $1A, $C	
0002390D 03                         SME_N6hqJ_B21:	dc.b 3	
0002390E E50E 0000 ED               		dc.b $E5, $E, 0, 0, $ED	
00023913 FD09 000C F4               		dc.b $FD, 9, 0, $C, $F4	
00023918 0D05 0012 F7               		dc.b $D, 5, 0, $12, $F7	
0002391D 02                         SME_N6hqJ_B31:	dc.b 2	
0002391E E40A 0000 F4               		dc.b $E4, $A, 0, 0, $F4	
00023923 FC0F 0009 EE               		dc.b $FC, $F, 0, 9, $EE	
00023928 03                         SME_N6hqJ_B3C:	dc.b 3	
00023929 E30A 0000 F4               		dc.b $E3, $A, 0, 0, $F4	
0002392E FB0F 0009 EE               		dc.b $FB, $F, 0, 9, $EE	
00023933 FB01 0019 0E               		dc.b $FB, 1, 0, $19, $E	
00023938 04                         SME_N6hqJ_B4C:	dc.b 4	
00023939 E40A 0000 F4               		dc.b $E4, $A, 0, 0, $F4	
0002393E 0401 0009 EC               		dc.b 4, 1, 0, 9, $EC	
00023943 FC0B 000B F4               		dc.b $FC, $B, 0, $B, $F4	
00023948 0401 0017 0C               		dc.b 4, 1, 0, $17, $C	
0002394D 03                         SME_N6hqJ_B61:	dc.b 3	
0002394E E50E 0000 ED               		dc.b $E5, $E, 0, 0, $ED	
00023953 FD09 000C F4               		dc.b $FD, 9, 0, $C, $F4	
00023958 0D05 0012 F7               		dc.b $D, 5, 0, $12, $F7	
0002395D 02                         SME_N6hqJ_B71:	dc.b 2	
0002395E E40E 0000 EE               		dc.b $E4, $E, 0, 0, $EE	
00023963 FC0B 000C F3               		dc.b $FC, $B, 0, $C, $F3	
00023968 05                         SME_N6hqJ_B7C:	dc.b 5	
00023969 E304 0000 EA               		dc.b $E3, 4, 0, 0, $EA	
0002396E EB0D 0002 E2               		dc.b $EB, $D, 0, 2, $E2	
00023973 FB09 000A EA               		dc.b $FB, 9, 0, $A, $EA	
00023978 F305 0010 02               		dc.b $F3, 5, 0, $10, 2	
0002397D 0B01 0014 FA               		dc.b $B, 1, 0, $14, $FA	
00023982 06                         SME_N6hqJ_B96:	dc.b 6	
00023983 E404 0000 EB               		dc.b $E4, 4, 0, 0, $EB	
00023988 EC0D 0002 E3               		dc.b $EC, $D, 0, 2, $E3	
0002398D EC01 000A 03               		dc.b $EC, 1, 0, $A, 3	
00023992 FC0D 000C EB               		dc.b $FC, $D, 0, $C, $EB	
00023997 FC05 0014 0B               		dc.b $FC, 5, 0, $14, $B	
0002399C 0C01 0018 FB               		dc.b $C, 1, 0, $18, $FB	
000239A1 05                         SME_N6hqJ_BB5:	dc.b 5	
000239A2 EB09 0000 E4               		dc.b $EB, 9, 0, 0, $E4	
000239A7 FB05 0006 EC               		dc.b $FB, 5, 0, 6, $EC	
000239AC ED03 000A FC               		dc.b $ED, 3, 0, $A, $FC	
000239B1 F501 000E 04               		dc.b $F5, 1, 0, $E, 4	
000239B6 0505 0010 04               		dc.b 5, 5, 0, $10, 4	
000239BB 05                         SME_N6hqJ_BCF:	dc.b 5	
000239BC E404 0000 EB               		dc.b $E4, 4, 0, 0, $EB	
000239C1 EC0D 0002 E3               		dc.b $EC, $D, 0, 2, $E3	
000239C6 EC01 000A 03               		dc.b $EC, 1, 0, $A, 3	
000239CB FC05 000C EB               		dc.b $FC, 5, 0, $C, $EB	
000239D0 FC0B 0010 FB               		dc.b $FC, $B, 0, $10, $FB	
000239D5 06                         SME_N6hqJ_BE9:	dc.b 6	
000239D6 E304 0000 EA               		dc.b $E3, 4, 0, 0, $EA	
000239DB EB0D 0002 E2               		dc.b $EB, $D, 0, 2, $E2	
000239E0 EB01 000A 02               		dc.b $EB, 1, 0, $A, 2	
000239E5 F301 000C 0A               		dc.b $F3, 1, 0, $C, $A	
000239EA FB0D 000E EA               		dc.b $FB, $D, 0, $E, $EA	
000239EF 0B05 0016 F2               		dc.b $B, 5, 0, $16, $F2	
000239F4 06                         SME_N6hqJ_C08:	dc.b 6	
000239F5 E404 0000 EB               		dc.b $E4, 4, 0, 0, $EB	
000239FA EC0D 0002 E3               		dc.b $EC, $D, 0, 2, $E3	
000239FF EC01 000A 03               		dc.b $EC, 1, 0, $A, 3	
00023A04 FC0D 000C EB               		dc.b $FC, $D, 0, $C, $EB	
00023A09 FA05 0014 0B               		dc.b $FA, 5, 0, $14, $B	
00023A0E 0C01 0018 FB               		dc.b $C, 1, 0, $18, $FB	
00023A13 05                         SME_N6hqJ_C27:	dc.b 5	
00023A14 EB09 0000 E4               		dc.b $EB, 9, 0, 0, $E4	
00023A19 FB05 0006 EC               		dc.b $FB, 5, 0, 6, $EC	
00023A1E ED03 000A FC               		dc.b $ED, 3, 0, $A, $FC	
00023A23 F501 000E 04               		dc.b $F5, 1, 0, $E, 4	
00023A28 0505 0010 04               		dc.b 5, 5, 0, $10, 4	
00023A2D 06                         SME_N6hqJ_C41:	dc.b 6	
00023A2E E404 0000 EB               		dc.b $E4, 4, 0, 0, $EB	
00023A33 EC0D 0002 E3               		dc.b $EC, $D, 0, 2, $E3	
00023A38 FC09 000A EB               		dc.b $FC, 9, 0, $A, $EB	
00023A3D F401 0010 03               		dc.b $F4, 1, 0, $10, 3	
00023A42 0405 0012 03               		dc.b 4, 5, 0, $12, 3	
00023A47 0C01 0016 FB               		dc.b $C, 1, 0, $16, $FB	
00023A4C 03                         SME_N6hqJ_C60:	dc.b 3	
00023A4D F20B 0000 E3               		dc.b $F2, $B, 0, 0, $E3	
00023A52 EC0B 000C FB               		dc.b $EC, $B, 0, $C, $FB	
00023A57 0C05 0018 03               		dc.b $C, 5, 0, $18, 3	
00023A5C 03                         SME_N6hqJ_C70:	dc.b 3	
00023A5D F20B 0000 E4               		dc.b $F2, $B, 0, 0, $E4	
00023A62 EC0B 000C FC               		dc.b $EC, $B, 0, $C, $FC	
00023A67 0C05 0018 04               		dc.b $C, 5, 0, $18, 4	
00023A6C 03                         SME_N6hqJ_C80:	dc.b 3	
00023A6D F30B 0000 E5               		dc.b $F3, $B, 0, 0, $E5	
00023A72 F403 000C FD               		dc.b $F4, 3, 0, $C, $FD	
00023A77 F905 0010 05               		dc.b $F9, 5, 0, $10, 5	
00023A7C 02                         SME_N6hqJ_C90:	dc.b 2	
00023A7D F40A 0000 E4               		dc.b $F4, $A, 0, 0, $E4	
00023A82 F20B 0009 FC               		dc.b $F2, $B, 0, 9, $FC	
00023A87 03                         SME_N6hqJ_C9B:	dc.b 3	
00023A88 F40A 0000 E3               		dc.b $F4, $A, 0, 0, $E3	
00023A8D E305 0009 FB               		dc.b $E3, 5, 0, 9, $FB	
00023A92 F30B 000D FB               		dc.b $F3, $B, 0, $D, $FB	
00023A97 03                         SME_N6hqJ_CAB:	dc.b 3	
00023A98 F40A 0000 E4               		dc.b $F4, $A, 0, 0, $E4	
00023A9D EC0B 0009 FC               		dc.b $EC, $B, 0, 9, $FC	
00023AA2 0C05 0015 04               		dc.b $C, 5, 0, $15, 4	
00023AA7 03                         SME_N6hqJ_CBB:	dc.b 3	
00023AA8 F30B 0000 E5               		dc.b $F3, $B, 0, 0, $E5	
00023AAD F403 000C FD               		dc.b $F4, 3, 0, $C, $FD	
00023AB2 F905 0010 05               		dc.b $F9, 5, 0, $10, 5	
00023AB7 02                         SME_N6hqJ_CCB:	dc.b 2	
00023AB8 F20B 0000 E4               		dc.b $F2, $B, 0, 0, $E4	
00023ABD F40B 000C FC               		dc.b $F4, $B, 0, $C, $FC	
00023AC2 04                         SME_N6hqJ_CD6:	dc.b 4	
00023AC3 EE05 0000 F3               		dc.b $EE, 5, 0, 0, $F3	
00023AC8 FE0B 0004 E3               		dc.b $FE, $B, 0, 4, $E3	
00023ACD FE0D 0010 FB               		dc.b $FE, $D, 0, $10, $FB	
00023AD2 0E00 0018 FB               		dc.b $E, 0, 0, $18, $FB	
00023AD7 05                         SME_N6hqJ_CEB:	dc.b 5	
00023AD8 DD05 0000 FC               		dc.b $DD, 5, 0, 0, $FC	
00023ADD ED09 0004 F4               		dc.b $ED, 9, 0, 4, $F4	
00023AE2 FD0B 000A E4               		dc.b $FD, $B, 0, $A, $E4	
00023AE7 FD0D 0016 FC               		dc.b $FD, $D, 0, $16, $FC	
00023AEC 0D00 001E FC               		dc.b $D, 0, 0, $1E, $FC	
00023AF1 05                         SME_N6hqJ_D05:	dc.b 5	
00023AF2 EC0D 0000 F5               		dc.b $EC, $D, 0, 0, $F5	
00023AF7 0401 0008 E5               		dc.b 4, 1, 0, 8, $E5	
00023AFC FC07 000A ED               		dc.b $FC, 7, 0, $A, $ED	
00023B01 FC05 0012 FD               		dc.b $FC, 5, 0, $12, $FD	
00023B06 0C00 0016 FD               		dc.b $C, 0, 0, $16, $FD	
00023B0B 04                         SME_N6hqJ_D1F:	dc.b 4	
00023B0C ED0D 0000 F4               		dc.b $ED, $D, 0, 0, $F4	
00023B11 FD0B 0008 E4               		dc.b $FD, $B, 0, 8, $E4	
00023B16 FD09 0014 FC               		dc.b $FD, 9, 0, $14, $FC	
00023B1B 0D00 001A FC               		dc.b $D, 0, 0, $1A, $FC	
00023B20 04                         SME_N6hqJ_D34:	dc.b 4	
00023B21 EE09 0000 F3               		dc.b $EE, 9, 0, 0, $F3	
00023B26 FE0B 0006 E3               		dc.b $FE, $B, 0, 6, $E3	
00023B2B FE0D 0012 FB               		dc.b $FE, $D, 0, $12, $FB	
00023B30 0E00 001A FB               		dc.b $E, 0, 0, $1A, $FB	
00023B35 05                         SME_N6hqJ_D49:	dc.b 5	
00023B36 DD05 0000 FA               		dc.b $DD, 5, 0, 0, $FA	
00023B3B ED09 0004 F4               		dc.b $ED, 9, 0, 4, $F4	
00023B40 FD0B 000A E4               		dc.b $FD, $B, 0, $A, $E4	
00023B45 FD0D 0016 FC               		dc.b $FD, $D, 0, $16, $FC	
00023B4A 0D00 001E FC               		dc.b $D, 0, 0, $1E, $FC	
00023B4F 05                         SME_N6hqJ_D63:	dc.b 5	
00023B50 EC0D 0000 F5               		dc.b $EC, $D, 0, 0, $F5	
00023B55 0401 0008 E5               		dc.b 4, 1, 0, 8, $E5	
00023B5A FC07 000A ED               		dc.b $FC, 7, 0, $A, $ED	
00023B5F FC05 0012 FD               		dc.b $FC, 5, 0, $12, $FD	
00023B64 0C00 0016 FD               		dc.b $C, 0, 0, $16, $FD	
00023B69 05                         SME_N6hqJ_D7D:	dc.b 5	
00023B6A ED0D 0000 F4               		dc.b $ED, $D, 0, 0, $F4	
00023B6F 0501 0008 E4               		dc.b 5, 1, 0, 8, $E4	
00023B74 FD07 000A EC               		dc.b $FD, 7, 0, $A, $EC	
00023B79 FD09 0012 FC               		dc.b $FD, 9, 0, $12, $FC	
00023B7E 0D00 0018 FC               		dc.b $D, 0, 0, $18, $FC	
00023B83 04                         SME_N6hqJ_D97:	dc.b 4	
00023B84 F008 0000 FC               		dc.b $F0, 8, 0, 0, $FC	
00023B89 F800 0003 FC               		dc.b $F8, 0, 0, 3, $FC	
00023B8E F805 0004 04               		dc.b $F8, 5, 0, 4, 4	
00023B93 0009 0008 EC               		dc.b 0, 9, 0, 8, $EC	
00023B98 04                         SME_N6hqJ_DAC:	dc.b 4	
00023B99 E604 0000 FA               		dc.b $E6, 4, 0, 0, $FA	
00023B9E EE0B 0002 F2               		dc.b $EE, $B, 0, 2, $F2	
00023BA3 EE02 000E 0A               		dc.b $EE, 2, 0, $E, $A	
00023BA8 0E04 0011 FA               		dc.b $E, 4, 0, $11, $FA	
00023BAD 04                         SME_N6hqJ_DC1:	dc.b 4	
00023BAE EC02 0000 F0               		dc.b $EC, 2, 0, 0, $F0	
00023BB3 EC05 0003 F8               		dc.b $EC, 5, 0, 3, $F8	
00023BB8 FC08 0007 F8               		dc.b $FC, 8, 0, 7, $F8	
00023BBD 0405 000A 00               		dc.b 4, 5, 0, $A, 0	
00023BC2 05                         SME_N6hqJ_DD6:	dc.b 5	
00023BC3 EE08 0000 EE               		dc.b $EE, 8, 0, 0, $EE	
00023BC8 F60D 0003 E6               		dc.b $F6, $D, 0, 3, $E6	
00023BCD F605 000B 06               		dc.b $F6, 5, 0, $B, 6	
00023BD2 0604 000F EE               		dc.b 6, 4, 0, $F, $EE	
00023BD7 0600 0011 06               		dc.b 6, 0, 0, $11, 6	
00023BDC 04                         SME_N6hqJ_DF0:	dc.b 4	
00023BDD E809 0000 FC               		dc.b $E8, 9, 0, 0, $FC	
00023BE2 F800 0006 FC               		dc.b $F8, 0, 0, 6, $FC	
00023BE7 F805 0007 04               		dc.b $F8, 5, 0, 7, 4	
00023BEC 0009 000B EC               		dc.b 0, 9, 0, $B, $EC	
00023BF1 04                         SME_N6hqJ_E05:	dc.b 4	
00023BF2 E604 0000 FA               		dc.b $E6, 4, 0, 0, $FA	
00023BF7 EE0B 0002 F2               		dc.b $EE, $B, 0, 2, $F2	
00023BFC EE02 000E 0A               		dc.b $EE, 2, 0, $E, $A	
00023C01 0E00 0011 FA               		dc.b $E, 0, 0, $11, $FA	
00023C06 04                         SME_N6hqJ_E1A:	dc.b 4	
00023C07 EC06 0000 E8               		dc.b $EC, 6, 0, 0, $E8	
00023C0C EC05 0006 F8               		dc.b $EC, 5, 0, 6, $F8	
00023C11 FC00 000A F8               		dc.b $FC, 0, 0, $A, $F8	
00023C16 FC06 000B 00               		dc.b $FC, 6, 0, $B, 0	
00023C1B 05                         SME_N6hqJ_E2F:	dc.b 5	
00023C1C EE08 0000 EE               		dc.b $EE, 8, 0, 0, $EE	
00023C21 F60D 0003 E6               		dc.b $F6, $D, 0, 3, $E6	
00023C26 F605 000B 06               		dc.b $F6, 5, 0, $B, 6	
00023C2B 0604 000F EE               		dc.b 6, 4, 0, $F, $EE	
00023C30 0600 0011 06               		dc.b 6, 0, 0, $11, 6	
00023C35 04                         SME_N6hqJ_E49:	dc.b 4	
00023C36 E509 0000 EE               		dc.b $E5, 9, 0, 0, $EE	
00023C3B F505 0006 EB               		dc.b $F5, 5, 0, 6, $EB	
00023C40 F505 000A FB               		dc.b $F5, 5, 0, $A, $FB	
00023C45 050D 000E EB               		dc.b 5, $D, 0, $E, $EB	
00023C4A 04                         SME_N6hqJ_E5E:	dc.b 4	
00023C4B E409 0000 EE               		dc.b $E4, 9, 0, 0, $EE	
00023C50 F405 0006 EB               		dc.b $F4, 5, 0, 6, $EB	
00023C55 F405 000A FB               		dc.b $F4, 5, 0, $A, $FB	
00023C5A 040D 000E EB               		dc.b 4, $D, 0, $E, $EB	
00023C5F 04                         SME_N6hqJ_E73:	dc.b 4	
00023C60 E509 0000 EE               		dc.b $E5, 9, 0, 0, $EE	
00023C65 F505 0006 EB               		dc.b $F5, 5, 0, 6, $EB	
00023C6A F505 000A FB               		dc.b $F5, 5, 0, $A, $FB	
00023C6F 050D 000E EB               		dc.b 5, $D, 0, $E, $EB	
00023C74 04                         SME_N6hqJ_E88:	dc.b 4	
00023C75 E409 0000 EE               		dc.b $E4, 9, 0, 0, $EE	
00023C7A F405 0006 EB               		dc.b $F4, 5, 0, 6, $EB	
00023C7F F405 000A FB               		dc.b $F4, 5, 0, $A, $FB	
00023C84 040D 000E EB               		dc.b 4, $D, 0, $E, $EB	
00023C89 02                         SME_N6hqJ_E9D:	dc.b 2	
00023C8A FC02 0000 F0               		dc.b $FC, 2, 0, 0, $F0	
00023C8F F40B 0003 F8               		dc.b $F4, $B, 0, 3, $F8	
00023C94 03                         SME_N6hqJ_EA8:	dc.b 3	
00023C95 E40A 0000 EC               		dc.b $E4, $A, 0, 0, $EC	
00023C9A FC08 0009 EC               		dc.b $FC, 8, 0, 9, $EC	
00023C9F 0405 000C F1               		dc.b 4, 5, 0, $C, $F1	
00023CA4 03                         SME_N6hqJ_EB8:	dc.b 3	
00023CA5 E40A 0000 EC               		dc.b $E4, $A, 0, 0, $EC	
00023CAA FC08 0009 EC               		dc.b $FC, 8, 0, 9, $EC	
00023CAF 0405 000C F1               		dc.b 4, 5, 0, $C, $F1	
00023CB4 03                         SME_N6hqJ_EC8:	dc.b 3	
00023CB5 E40A 0000 EC               		dc.b $E4, $A, 0, 0, $EC	
00023CBA FC08 0009 EC               		dc.b $FC, 8, 0, 9, $EC	
00023CBF 0405 000C F1               		dc.b 4, 5, 0, $C, $F1	
00023CC4 03                         SME_N6hqJ_ED8:	dc.b 3	
00023CC5 E50A 0000 ED               		dc.b $E5, $A, 0, 0, $ED	
00023CCA FD08 0009 ED               		dc.b $FD, 8, 0, 9, $ED	
00023CCF 0505 000C F1               		dc.b 5, 5, 0, $C, $F1	
00023CD4 03                         SME_N6hqJ_EE8:	dc.b 3	
00023CD5 E50A 0000 ED               		dc.b $E5, $A, 0, 0, $ED	
00023CDA FD08 0009 ED               		dc.b $FD, 8, 0, 9, $ED	
00023CDF 0505 000C F1               		dc.b 5, 5, 0, $C, $F1	
00023CE4 03                         SME_N6hqJ_EF8:	dc.b 3	
00023CE5 E50A 0000 ED               		dc.b $E5, $A, 0, 0, $ED	
00023CEA FD08 0009 ED               		dc.b $FD, 8, 0, 9, $ED	
00023CEF 0505 000C F1               		dc.b 5, 5, 0, $C, $F1	
00023CF4 03                         SME_N6hqJ_F08:	dc.b 3	
00023CF5 EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00023CFA EC03 000C 08               		dc.b $EC, 3, 0, $C, 8	
00023CFF 0C05 0010 F1               		dc.b $C, 5, 0, $10, $F1	
00023D04 03                         SME_N6hqJ_F18:	dc.b 3	
00023D05 EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00023D0A EC03 000C 08               		dc.b $EC, 3, 0, $C, 8	
00023D0F 0C05 0010 F1               		dc.b $C, 5, 0, $10, $F1	
00023D14 03                         SME_N6hqJ_F28:	dc.b 3	
00023D15 EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00023D1A EC03 000C 08               		dc.b $EC, 3, 0, $C, 8	
00023D1F 0C05 0010 F1               		dc.b $C, 5, 0, $10, $F1	
00023D24 05                         SME_N6hqJ_F38:	dc.b 5	
00023D25 EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00023D2A EC01 000C 08               		dc.b $EC, 1, 0, $C, 8	
00023D2F EC01 000E 10               		dc.b $EC, 1, 0, $E, $10	
00023D34 FC01 0010 08               		dc.b $FC, 1, 0, $10, 8	
00023D39 0C05 0012 F1               		dc.b $C, 5, 0, $12, $F1	
00023D3E 04                         SME_N6hqJ_F52:	dc.b 4	
00023D3F EC07 0000 EB               		dc.b $EC, 7, 0, 0, $EB	
00023D44 EC09 0008 FB               		dc.b $EC, 9, 0, 8, $FB	
00023D49 FC05 000E FB               		dc.b $FC, 5, 0, $E, $FB	
00023D4E 0C09 0012 EE               		dc.b $C, 9, 0, $12, $EE	
00023D53 04                         SME_N6hqJ_F67:	dc.b 4	
00023D54 EC07 0000 EC               		dc.b $EC, 7, 0, 0, $EC	
00023D59 EC09 0008 FC               		dc.b $EC, 9, 0, 8, $FC	
00023D5E FC05 000E FC               		dc.b $FC, 5, 0, $E, $FC	
00023D63 0C09 0012 EF               		dc.b $C, 9, 0, $12, $EF	
00023D68 04                         SME_N6hqJ_F7C:	dc.b 4	
00023D69 EC07 0000 EC               		dc.b $EC, 7, 0, 0, $EC	
00023D6E EC09 0008 FC               		dc.b $EC, 9, 0, 8, $FC	
00023D73 FC09 000E FC               		dc.b $FC, 9, 0, $E, $FC	
00023D78 0C09 0014 F0               		dc.b $C, 9, 0, $14, $F0	
00023D7D 03                         SME_N6hqJ_F91:	dc.b 3	
00023D7E F403 0000 E8               		dc.b $F4, 3, 0, 0, $E8	
00023D83 EC0B 0004 F0               		dc.b $EC, $B, 0, 4, $F0	
00023D88 0C05 0010 F0               		dc.b $C, 5, 0, $10, $F0	
00023D8D 03                         SME_N6hqJ_FA1:	dc.b 3	
00023D8E F403 0800 0C               		dc.b $F4, 3, 8, 0, $C	
00023D93 EC0B 0804 F4               		dc.b $EC, $B, 8, 4, $F4	
00023D98 0C05 0810 FC               		dc.b $C, 5, 8, $10, $FC	
00023D9D 03                         SME_N6hqJ_FB1:	dc.b 3	
00023D9E F403 0800 0C               		dc.b $F4, 3, 8, 0, $C	
00023DA3 EC0B 0804 F4               		dc.b $EC, $B, 8, 4, $F4	
00023DA8 0C05 0810 FC               		dc.b $C, 5, 8, $10, $FC	
00023DAD 04                         SME_N6hqJ_FC1:	dc.b 4	
00023DAE EC0D 0000 ED               		dc.b $EC, $D, 0, 0, $ED	
00023DB3 FC0D 0008 EF               		dc.b $FC, $D, 0, 8, $EF	
00023DB8 FC01 0010 0F               		dc.b $FC, 1, 0, $10, $F	
00023DBD 0C05 0012 01               		dc.b $C, 5, 0, $12, 1	
00023DC2 04                         SME_N6hqJ_FD6:	dc.b 4	
00023DC3 EC0D 0000 EE               		dc.b $EC, $D, 0, 0, $EE	
00023DC8 FC0D 0008 EF               		dc.b $FC, $D, 0, 8, $EF	
00023DCD FC01 0010 0F               		dc.b $FC, 1, 0, $10, $F	
00023DD2 0C05 0012 01               		dc.b $C, 5, 0, $12, 1	
00023DD7 04                         SME_N6hqJ_FEB:	dc.b 4	
00023DD8 EC0D 0000 EF               		dc.b $EC, $D, 0, 0, $EF	
00023DDD FC0D 0008 EF               		dc.b $FC, $D, 0, 8, $EF	
00023DE2 FC01 0010 0F               		dc.b $FC, 1, 0, $10, $F	
00023DE7 0C05 0012 01               		dc.b $C, 5, 0, $12, 1	
00023DEC 02                         SME_N6hqJ_1000:	dc.b 2	
00023DED EC09 0000 F4               		dc.b $EC, 9, 0, 0, $F4	
00023DF2 FC0B 0006 F7               		dc.b $FC, $B, 0, 6, $F7	
00023DF8 00                         		even
00023DF8 00                         		even
00023DF8                            
00023DF8                            ; ---------------------------------------------------------------------------
00023DF8                            ; Uncompressed graphics	loading	array for Sonic
00023DF8                            ; ---------------------------------------------------------------------------
00023DF8                            SonicDynPLC:
00023DF8                            	include "_inc\Sonic dynamic pattern load cues.asm"
00023DF8                            ; --------------------------------------------------------------------------------
00023DF8                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00023DF8                            
00023DF8                            SME_QQU6s:	
00023DF8 0000 0000                  		dc.w SME_QQU6s_1AC-SME_QQU6s, SME_QQU6s_1AD-SME_QQU6s	
00023DFC 0000 0000                  		dc.w SME_QQU6s_1B6-SME_QQU6s, SME_QQU6s_1BB-SME_QQU6s	
00023E00 0000 0000                  		dc.w SME_QQU6s_1C4-SME_QQU6s, SME_QQU6s_1CD-SME_QQU6s	
00023E04 0000 0000                  		dc.w SME_QQU6s_1D8-SME_QQU6s, SME_QQU6s_1DF-SME_QQU6s	
00023E08 0000 0000                  		dc.w SME_QQU6s_1E4-SME_QQU6s, SME_QQU6s_1E9-SME_QQU6s	
00023E0C 0000 0000                  		dc.w SME_QQU6s_1EE-SME_QQU6s, SME_QQU6s_1F3-SME_QQU6s	
00023E10 0000 0000                  		dc.w SME_QQU6s_1FC-SME_QQU6s, SME_QQU6s_205-SME_QQU6s	
00023E14 0000 0000                  		dc.w SME_QQU6s_20C-SME_QQU6s, SME_QQU6s_215-SME_QQU6s	
00023E18 0000 0000                  		dc.w SME_QQU6s_21C-SME_QQU6s, SME_QQU6s_221-SME_QQU6s	
00023E1C 0000 0000                  		dc.w SME_QQU6s_228-SME_QQU6s, SME_QQU6s_231-SME_QQU6s	
00023E20 0000 0000                  		dc.w SME_QQU6s_238-SME_QQU6s, SME_QQU6s_23D-SME_QQU6s	
00023E24 0000 0000                  		dc.w SME_QQU6s_246-SME_QQU6s, SME_QQU6s_251-SME_QQU6s	
00023E28 0000 0000                  		dc.w SME_QQU6s_25A-SME_QQU6s, SME_QQU6s_263-SME_QQU6s	
00023E2C 0000 0000                  		dc.w SME_QQU6s_26E-SME_QQU6s, SME_QQU6s_279-SME_QQU6s	
00023E30 0000 0000                  		dc.w SME_QQU6s_282-SME_QQU6s, SME_QQU6s_28D-SME_QQU6s	
00023E34 0000 0000                  		dc.w SME_QQU6s_294-SME_QQU6s, SME_QQU6s_29B-SME_QQU6s	
00023E38 0000 0000                  		dc.w SME_QQU6s_2A2-SME_QQU6s, SME_QQU6s_2A7-SME_QQU6s	
00023E3C 0000 0000                  		dc.w SME_QQU6s_2AE-SME_QQU6s, SME_QQU6s_2B5-SME_QQU6s	
00023E40 0000 0000                  		dc.w SME_QQU6s_2BC-SME_QQU6s, SME_QQU6s_2C1-SME_QQU6s	
00023E44 0000 0000                  		dc.w SME_QQU6s_2CA-SME_QQU6s, SME_QQU6s_2D5-SME_QQU6s	
00023E48 0000 0000                  		dc.w SME_QQU6s_2DE-SME_QQU6s, SME_QQU6s_2E7-SME_QQU6s	
00023E4C 0000 0000                  		dc.w SME_QQU6s_2F0-SME_QQU6s, SME_QQU6s_2FB-SME_QQU6s	
00023E50 0000 0000                  		dc.w SME_QQU6s_304-SME_QQU6s, SME_QQU6s_30D-SME_QQU6s	
00023E54 0000 0000                  		dc.w SME_QQU6s_312-SME_QQU6s, SME_QQU6s_317-SME_QQU6s	
00023E58 0000 0000                  		dc.w SME_QQU6s_31C-SME_QQU6s, SME_QQU6s_321-SME_QQU6s	
00023E5C 0000 0000                  		dc.w SME_QQU6s_32A-SME_QQU6s, SME_QQU6s_331-SME_QQU6s	
00023E60 0000 0000                  		dc.w SME_QQU6s_33A-SME_QQU6s, SME_QQU6s_341-SME_QQU6s	
00023E64 0000 0000                  		dc.w SME_QQU6s_346-SME_QQU6s, SME_QQU6s_34B-SME_QQU6s	
00023E68 0000 0000                  		dc.w SME_QQU6s_350-SME_QQU6s, SME_QQU6s_355-SME_QQU6s	
00023E6C 0000 0000                  		dc.w SME_QQU6s_35C-SME_QQU6s, SME_QQU6s_361-SME_QQU6s	
00023E70 0000 0000                  		dc.w SME_QQU6s_368-SME_QQU6s, SME_QQU6s_36D-SME_QQU6s	
00023E74 0000 0000                  		dc.w SME_QQU6s_370-SME_QQU6s, SME_QQU6s_373-SME_QQU6s	
00023E78 0000 0000                  		dc.w SME_QQU6s_376-SME_QQU6s, SME_QQU6s_379-SME_QQU6s	
00023E7C 0000 0000                  		dc.w SME_QQU6s_37C-SME_QQU6s, SME_QQU6s_37F-SME_QQU6s	
00023E80 0000 0000                  		dc.w SME_QQU6s_382-SME_QQU6s, SME_QQU6s_385-SME_QQU6s	
00023E84 0000 0000                  		dc.w SME_QQU6s_388-SME_QQU6s, SME_QQU6s_38B-SME_QQU6s	
00023E88 0000 0000                  		dc.w SME_QQU6s_38E-SME_QQU6s, SME_QQU6s_395-SME_QQU6s	
00023E8C 0000 0000                  		dc.w SME_QQU6s_39C-SME_QQU6s, SME_QQU6s_3A3-SME_QQU6s	
00023E90 0000 0000                  		dc.w SME_QQU6s_3AA-SME_QQU6s, SME_QQU6s_3AD-SME_QQU6s	
00023E94 0000 0000                  		dc.w SME_QQU6s_3B0-SME_QQU6s, SME_QQU6s_3B5-SME_QQU6s	
00023E98 0000 0000                  		dc.w SME_QQU6s_3BA-SME_QQU6s, SME_QQU6s_3C1-SME_QQU6s	
00023E9C 0000 0000                  		dc.w SME_QQU6s_3C8-SME_QQU6s, SME_QQU6s_3CD-SME_QQU6s	
00023EA0 0000 0000                  		dc.w SME_QQU6s_3D2-SME_QQU6s, SME_QQU6s_3D9-SME_QQU6s	
00023EA4 0000 0000                  		dc.w SME_QQU6s_3DE-SME_QQU6s, SME_QQU6s_3E5-SME_QQU6s	
00023EA8 0000 0000                  		dc.w SME_QQU6s_3EC-SME_QQU6s, SME_QQU6s_3F3-SME_QQU6s	
00023EAC 0000 0000                  		dc.w SME_QQU6s_3FA-SME_QQU6s, SME_QQU6s_401-SME_QQU6s	
00023EB0 0000 0000                  		dc.w SME_QQU6s_406-SME_QQU6s, SME_QQU6s_40F-SME_QQU6s	
00023EB4 0000 0000                  		dc.w SME_QQU6s_418-SME_QQU6s, SME_QQU6s_41F-SME_QQU6s	
00023EB8 0000 0000                  		dc.w SME_QQU6s_426-SME_QQU6s, SME_QQU6s_42D-SME_QQU6s	
00023EBC 0000 0000                  		dc.w SME_QQU6s_432-SME_QQU6s, SME_QQU6s_435-SME_QQU6s	
00023EC0 0000 0000                  		dc.w SME_QQU6s_43A-SME_QQU6s, SME_QQU6s_441-SME_QQU6s	
00023EC4 0000 0000                  		dc.w SME_QQU6s_448-SME_QQU6s, SME_QQU6s_44F-SME_QQU6s	
00023EC8 0000 0000                  		dc.w SME_QQU6s_454-SME_QQU6s, SME_QQU6s_459-SME_QQU6s	
00023ECC 0000 0000                  		dc.w SME_QQU6s_460-SME_QQU6s, SME_QQU6s_465-SME_QQU6s	
00023ED0 0000 0000                  		dc.w SME_QQU6s_46C-SME_QQU6s, SME_QQU6s_473-SME_QQU6s	
00023ED4 0000 0000                  		dc.w SME_QQU6s_476-SME_QQU6s, SME_QQU6s_47D-SME_QQU6s	
00023ED8 0000 0000                  		dc.w SME_QQU6s_484-SME_QQU6s, SME_QQU6s_48F-SME_QQU6s	
00023EDC 0000 0000                  		dc.w SME_QQU6s_49A-SME_QQU6s, SME_QQU6s_49F-SME_QQU6s	
00023EE0 0000 0000                  		dc.w SME_QQU6s_4A4-SME_QQU6s, SME_QQU6s_4A9-SME_QQU6s	
00023EE4 0000 0000                  		dc.w SME_QQU6s_4B0-SME_QQU6s, SME_QQU6s_4B9-SME_QQU6s	
00023EE8 0000 0000                  		dc.w SME_QQU6s_4C0-SME_QQU6s, SME_QQU6s_4C5-SME_QQU6s	
00023EEC 0000 0000                  		dc.w SME_QQU6s_4CC-SME_QQU6s, SME_QQU6s_4D5-SME_QQU6s	
00023EF0 0000 0000                  		dc.w SME_QQU6s_4DC-SME_QQU6s, SME_QQU6s_4E1-SME_QQU6s	
00023EF4 0000 0000                  		dc.w SME_QQU6s_4EA-SME_QQU6s, SME_QQU6s_4F5-SME_QQU6s	
00023EF8 0000 0000                  		dc.w SME_QQU6s_500-SME_QQU6s, SME_QQU6s_50B-SME_QQU6s	
00023EFC 0000 0000                  		dc.w SME_QQU6s_518-SME_QQU6s, SME_QQU6s_525-SME_QQU6s	
00023F00 0000 0000                  		dc.w SME_QQU6s_530-SME_QQU6s, SME_QQU6s_53B-SME_QQU6s	
00023F04 0000 0000                  		dc.w SME_QQU6s_542-SME_QQU6s, SME_QQU6s_549-SME_QQU6s	
00023F08 0000 0000                  		dc.w SME_QQU6s_550-SME_QQU6s, SME_QQU6s_555-SME_QQU6s	
00023F0C 0000 0000                  		dc.w SME_QQU6s_55C-SME_QQU6s, SME_QQU6s_563-SME_QQU6s	
00023F10 0000 0000                  		dc.w SME_QQU6s_56A-SME_QQU6s, SME_QQU6s_56F-SME_QQU6s	
00023F14 0000 0000                  		dc.w SME_QQU6s_578-SME_QQU6s, SME_QQU6s_583-SME_QQU6s	
00023F18 0000 0000                  		dc.w SME_QQU6s_58C-SME_QQU6s, SME_QQU6s_595-SME_QQU6s	
00023F1C 0000 0000                  		dc.w SME_QQU6s_59E-SME_QQU6s, SME_QQU6s_5A9-SME_QQU6s	
00023F20 0000 0000                  		dc.w SME_QQU6s_5B2-SME_QQU6s, SME_QQU6s_5BB-SME_QQU6s	
00023F24 0000 0000                  		dc.w SME_QQU6s_5C2-SME_QQU6s, SME_QQU6s_5CB-SME_QQU6s	
00023F28 0000 0000                  		dc.w SME_QQU6s_5D2-SME_QQU6s, SME_QQU6s_5D7-SME_QQU6s	
00023F2C 0000 0000                  		dc.w SME_QQU6s_5DE-SME_QQU6s, SME_QQU6s_5E7-SME_QQU6s	
00023F30 0000 0000                  		dc.w SME_QQU6s_5EE-SME_QQU6s, SME_QQU6s_5F3-SME_QQU6s	
00023F34 0000 0000                  		dc.w SME_QQU6s_5FE-SME_QQU6s, SME_QQU6s_60B-SME_QQU6s	
00023F38 0000 0000                  		dc.w SME_QQU6s_616-SME_QQU6s, SME_QQU6s_621-SME_QQU6s	
00023F3C 0000 0000                  		dc.w SME_QQU6s_62E-SME_QQU6s, SME_QQU6s_63B-SME_QQU6s	
00023F40 0000 0000                  		dc.w SME_QQU6s_646-SME_QQU6s, SME_QQU6s_653-SME_QQU6s	
00023F44 0000 0000                  		dc.w SME_QQU6s_65A-SME_QQU6s, SME_QQU6s_661-SME_QQU6s	
00023F48 0000 0000                  		dc.w SME_QQU6s_668-SME_QQU6s, SME_QQU6s_66D-SME_QQU6s	
00023F4C 0000 0000                  		dc.w SME_QQU6s_674-SME_QQU6s, SME_QQU6s_67B-SME_QQU6s	
00023F50 0000 0000                  		dc.w SME_QQU6s_682-SME_QQU6s, SME_QQU6s_687-SME_QQU6s	
00023F54 0000 0000                  		dc.w SME_QQU6s_690-SME_QQU6s, SME_QQU6s_69B-SME_QQU6s	
00023F58 0000 0000                  		dc.w SME_QQU6s_6A6-SME_QQU6s, SME_QQU6s_6AF-SME_QQU6s	
00023F5C 0000 0000                  		dc.w SME_QQU6s_6B8-SME_QQU6s, SME_QQU6s_6C3-SME_QQU6s	
00023F60 0000 0000                  		dc.w SME_QQU6s_6CE-SME_QQU6s, SME_QQU6s_6D9-SME_QQU6s	
00023F64 0000 0000                  		dc.w SME_QQU6s_6E2-SME_QQU6s, SME_QQU6s_6EB-SME_QQU6s	
00023F68 0000 0000                  		dc.w SME_QQU6s_6F4-SME_QQU6s, SME_QQU6s_6FF-SME_QQU6s	
00023F6C 0000 0000                  		dc.w SME_QQU6s_708-SME_QQU6s, SME_QQU6s_711-SME_QQU6s	
00023F70 0000 0000                  		dc.w SME_QQU6s_71A-SME_QQU6s, SME_QQU6s_725-SME_QQU6s	
00023F74 0000 0000                  		dc.w SME_QQU6s_72E-SME_QQU6s, SME_QQU6s_737-SME_QQU6s	
00023F78 0000 0000                  		dc.w SME_QQU6s_740-SME_QQU6s, SME_QQU6s_749-SME_QQU6s	
00023F7C 0000 0000                  		dc.w SME_QQU6s_74E-SME_QQU6s, SME_QQU6s_755-SME_QQU6s	
00023F80 0000 0000                  		dc.w SME_QQU6s_75C-SME_QQU6s, SME_QQU6s_763-SME_QQU6s	
00023F84 0000 0000                  		dc.w SME_QQU6s_76A-SME_QQU6s, SME_QQU6s_771-SME_QQU6s	
00023F88 0000 0000                  		dc.w SME_QQU6s_778-SME_QQU6s, SME_QQU6s_77F-SME_QQU6s	
00023F8C 0000 0000                  		dc.w SME_QQU6s_786-SME_QQU6s, SME_QQU6s_78D-SME_QQU6s	
00023F90 0000 0000                  		dc.w SME_QQU6s_798-SME_QQU6s, SME_QQU6s_7A1-SME_QQU6s	
00023F94 0000 0000                  		dc.w SME_QQU6s_7AA-SME_QQU6s, SME_QQU6s_7B3-SME_QQU6s	
00023F98 0000 0000                  		dc.w SME_QQU6s_7BA-SME_QQU6s, SME_QQU6s_7C1-SME_QQU6s	
00023F9C 0000 0000                  		dc.w SME_QQU6s_7C8-SME_QQU6s, SME_QQU6s_7D1-SME_QQU6s	
00023FA0 0000 0000                  		dc.w SME_QQU6s_7DA-SME_QQU6s, SME_QQU6s_7E3-SME_QQU6s	
00023FA4 00                         SME_QQU6s_1AC:	dc.b 0	
00023FA5 0430 0030 0450 0850 0E     SME_QQU6s_1AD:	dc.b 4, $30, 0, $30, 4, $50, 8, $50, $E	
00023FAE 02B0 1450 20               SME_QQU6s_1B6:	dc.b 2, $B0, $14, $50, $20	
00023FB3 0430 2630 2A30 2E50 32     SME_QQU6s_1BB:	dc.b 4, $30, $26, $30, $2A, $30, $2E, $50, $32	
00023FBC 0430 2630 3830 2E50 32     SME_QQU6s_1C4:	dc.b 4, $30, $26, $30, $38, $30, $2E, $50, $32	
00023FC5 0530 2630 3830 2E10 3230+  SME_QQU6s_1CD:	dc.b 5, $30, $26, $30, $38, $30, $2E, $10, $32, $30, $3C	
00023FD0 0330 2670 4050 32          SME_QQU6s_1D8:	dc.b 3, $30, $26, $70, $40, $50, $32	
00023FD7 02B0 4810 54               SME_QQU6s_1DF:	dc.b 2, $B0, $48, $10, $54	
00023FDC 02B0 5630 62               SME_QQU6s_1E4:	dc.b 2, $B0, $56, $30, $62	
00023FE1 02B0 5630 66               SME_QQU6s_1E9:	dc.b 2, $B0, $56, $30, $66	
00023FE6 02B0 6A70 76               SME_QQU6s_1EE:	dc.b 2, $B0, $6A, $70, $76	
00023FEB 0430 7E30 8250 8650 0E     SME_QQU6s_1F3:	dc.b 4, $30, $7E, $30, $82, $50, $86, $50, $E	
00023FF4 0430 8C30 9030 9450 0E     SME_QQU6s_1FC:	dc.b 4, $30, $8C, $30, $90, $30, $94, $50, $E	
00023FFD 0370 9810 A0F0 A2          SME_QQU6s_205:	dc.b 3, $70, $98, $10, $A0, $F0, $A2	
00024004 0470 9810 B2B0 B410 C0     SME_QQU6s_20C:	dc.b 4, $70, $98, $10, $B2, $B0, $B4, $10, $C0	
0002400D 0370 C250 CA30 D0          SME_QQU6s_215:	dc.b 3, $70, $C2, $50, $CA, $30, $D0	
00024014 0250 D4F0 DA               SME_QQU6s_21C:	dc.b 2, $50, $D4, $F0, $DA	
00024019 0350 D4F0 EA10 FA          SME_QQU6s_221:	dc.b 3, $50, $D4, $F0, $EA, $10, $FA	
00024020 0450 D410 FCB0 FE11 0A     SME_QQU6s_228:	dc.b 4, $50, $D4, $10, $FC, $B0, $FE, $11, $A	
00024029 0370 C251 0C31 12          SME_QQU6s_231:	dc.b 3, $70, $C2, $51, $C, $31, $12	
00024030 0270 98B1 16               SME_QQU6s_238:	dc.b 2, $70, $98, $B1, $16	
00024035 0451 2251 2831 2E11 32     SME_QQU6s_23D:	dc.b 4, $51, $22, $51, $28, $31, $2E, $11, $32	
0002403E 0551 2211 3471 3631 3E11+  SME_QQU6s_246:	dc.b 5, $51, $22, $11, $34, $71, $36, $31, $3E, $11, $42	
00024049 0471 4431 4C11 5031 52     SME_QQU6s_251:	dc.b 4, $71, $44, $31, $4C, $11, $50, $31, $52	
00024052 0451 5611 5C31 5EB1 62     SME_QQU6s_25A:	dc.b 4, $51, $56, $11, $5C, $31, $5E, $B1, $62	
0002405B 0551 5611 6E71 7011 7831+  SME_QQU6s_263:	dc.b 5, $51, $56, $11, $6E, $71, $70, $11, $78, $31, $7A	
00024066 0551 5611 7E71 8031 8811+  SME_QQU6s_26E:	dc.b 5, $51, $56, $11, $7E, $71, $80, $31, $88, $11, $8C	
00024071 0471 4431 8E11 9231 94     SME_QQU6s_279:	dc.b 4, $71, $44, $31, $8E, $11, $92, $31, $94	
0002407A 0551 2251 9811 9E11 A031+  SME_QQU6s_282:	dc.b 5, $51, $22, $51, $98, $11, $9E, $11, $A0, $31, $A2	
00024085 0371 A6B1 AE31 BA          SME_QQU6s_28D:	dc.b 3, $71, $A6, $B1, $AE, $31, $BA	
0002408C 0371 A6B1 BE31 CA          SME_QQU6s_294:	dc.b 3, $71, $A6, $B1, $BE, $31, $CA	
00024093 0371 CE31 D631 DA          SME_QQU6s_29B:	dc.b 3, $71, $CE, $31, $D6, $31, $DA	
0002409A 0271 DEB1 E6               SME_QQU6s_2A2:	dc.b 2, $71, $DE, $B1, $E6	
0002409F 0371 DE31 F2B1 F6          SME_QQU6s_2A7:	dc.b 3, $71, $DE, $31, $F2, $B1, $F6	
000240A6 0371 DEB2 0232 0E          SME_QQU6s_2AE:	dc.b 3, $71, $DE, $B2, 2, $32, $E	
000240AD 0371 CE32 1232 16          SME_QQU6s_2B5:	dc.b 3, $71, $CE, $32, $12, $32, $16	
000240B4 0271 A6B2 1A               SME_QQU6s_2BC:	dc.b 2, $71, $A6, $B2, $1A	
000240B9 0432 2672 2A72 3212 3A     SME_QQU6s_2C1:	dc.b 4, $32, $26, $72, $2A, $72, $32, $12, $3A	
000240C2 0532 3C52 4072 2A72 4612+  SME_QQU6s_2CA:	dc.b 5, $32, $3C, $52, $40, $72, $2A, $72, $46, $12, $3A	
000240CD 0472 4E72 5632 5E12 62     SME_QQU6s_2D5:	dc.b 4, $72, $4E, $72, $56, $32, $5E, $12, $62	
000240D6 0472 6472 6C52 7412 7A     SME_QQU6s_2DE:	dc.b 4, $72, $64, $72, $6C, $52, $74, $12, $7A	
000240DF 0452 7C72 6C72 8212 7A     SME_QQU6s_2E7:	dc.b 4, $52, $7C, $72, $6C, $72, $82, $12, $7A	
000240E8 0532 8A52 8E72 6C72 9412+  SME_QQU6s_2F0:	dc.b 5, $32, $8A, $52, $8E, $72, $6C, $72, $94, $12, $7A	
000240F3 0472 9C72 5632 A412 62     SME_QQU6s_2FB:	dc.b 4, $72, $9C, $72, $56, $32, $A4, $12, $62	
000240FC 0472 A872 2A52 B012 3A     SME_QQU6s_304:	dc.b 4, $72, $A8, $72, $2A, $52, $B0, $12, $3A	
00024105 0252 B6F2 BC               SME_QQU6s_30D:	dc.b 2, $52, $B6, $F2, $BC	
0002410A 0252 CCF2 D2               SME_QQU6s_312:	dc.b 2, $52, $CC, $F2, $D2	
0002410F 0252 B6F2 E2               SME_QQU6s_317:	dc.b 2, $52, $B6, $F2, $E2	
00024114 0252 CCF2 F2               SME_QQU6s_31C:	dc.b 2, $52, $CC, $F2, $F2	
00024119 0453 0213 0873 0A53 12     SME_QQU6s_321:	dc.b 4, $53, 2, $13, 8, $73, $A, $53, $12	
00024122 0373 1873 2053 28          SME_QQU6s_32A:	dc.b 3, $73, $18, $73, $20, $53, $28	
00024129 0453 0213 2E73 3053 38     SME_QQU6s_331:	dc.b 4, $53, 2, $13, $2E, $73, $30, $53, $38	
00024132 0373 1873 3E53 46          SME_QQU6s_33A:	dc.b 3, $73, $18, $73, $3E, $53, $46	
00024139 0273 4CB3 54               SME_QQU6s_341:	dc.b 2, $73, $4C, $B3, $54	
0002413E 0273 60B3 68               SME_QQU6s_346:	dc.b 2, $73, $60, $B3, $68	
00024143 0273 4CB3 74               SME_QQU6s_34B:	dc.b 2, $73, $4C, $B3, $74	
00024148 0273 60B3 80               SME_QQU6s_350:	dc.b 2, $73, $60, $B3, $80	
0002414D 0313 8C73 8EB3 96          SME_QQU6s_355:	dc.b 3, $13, $8C, $73, $8E, $B3, $96	
00024154 0273 A2B3 AA               SME_QQU6s_35C:	dc.b 2, $73, $A2, $B3, $AA	
00024159 0313 B673 8EB3 C0          SME_QQU6s_361:	dc.b 3, $13, $B6, $73, $8E, $B3, $C0	
00024160 0273 A2B3 CC               SME_QQU6s_368:	dc.b 2, $73, $A2, $B3, $CC	
00024165 01F4 00                    SME_QQU6s_36D:	dc.b 1, $F4, 0	
00024168 01F4 10                    SME_QQU6s_370:	dc.b 1, $F4, $10	
0002416B 01F4 20                    SME_QQU6s_373:	dc.b 1, $F4, $20	
0002416E 01F4 30                    SME_QQU6s_376:	dc.b 1, $F4, $30	
00024171 01F4 40                    SME_QQU6s_379:	dc.b 1, $F4, $40	
00024174 01F4 50                    SME_QQU6s_37C:	dc.b 1, $F4, $50	
00024177 01F4 60                    SME_QQU6s_37F:	dc.b 1, $F4, $60	
0002417A 01F4 70                    SME_QQU6s_382:	dc.b 1, $F4, $70	
0002417D 01F4 80                    SME_QQU6s_385:	dc.b 1, $F4, $80	
00024180 01F4 90                    SME_QQU6s_388:	dc.b 1, $F4, $90	
00024183 01F4 A0                    SME_QQU6s_38B:	dc.b 1, $F4, $A0	
00024186 0353 D853 DE73 E4          SME_QQU6s_38E:	dc.b 3, $53, $D8, $53, $DE, $73, $E4	
0002418D 0353 D853 EC53 F2          SME_QQU6s_395:	dc.b 3, $53, $D8, $53, $EC, $53, $F2	
00024194 0353 D853 DE73 B8          SME_QQU6s_39C:	dc.b 3, $53, $D8, $53, $DE, $73, $B8	
0002419B 0353 D853 EC54 B0          SME_QQU6s_3A3:	dc.b 3, $53, $D8, $53, $EC, $54, $B0	
000241A2 01B4 B6                    SME_QQU6s_3AA:	dc.b 1, $B4, $B6	
000241A5 01F4 C2                    SME_QQU6s_3AD:	dc.b 1, $F4, $C2	
000241A8 0214 D2F4 D4               SME_QQU6s_3B0:	dc.b 2, $14, $D2, $F4, $D4	
000241AD 0234 E4F4 E8               SME_QQU6s_3B5:	dc.b 2, $34, $E4, $F4, $E8	
000241B2 03F4 F815 0835 0A          SME_QQU6s_3BA:	dc.b 3, $F4, $F8, $15, 8, $35, $A	
000241B9 03F5 0E15 1E35 20          SME_QQU6s_3C1:	dc.b 3, $F5, $E, $15, $1E, $35, $20	
000241C0 02B5 2455 30               SME_QQU6s_3C8:	dc.b 2, $B5, $24, $55, $30	
000241C5 02B5 3655 42               SME_QQU6s_3CD:	dc.b 2, $B5, $36, $55, $42	
000241CA 0335 48B5 4C15 58          SME_QQU6s_3D2:	dc.b 3, $35, $48, $B5, $4C, $15, $58	
000241D1 0215 5A75 5C               SME_QQU6s_3D9:	dc.b 2, $15, $5A, $75, $5C	
000241D6 0335 48B5 4C15 58          SME_QQU6s_3DE:	dc.b 3, $35, $48, $B5, $4C, $15, $58	
000241DD 0315 64B5 6615 72          SME_QQU6s_3E5:	dc.b 3, $15, $64, $B5, $66, $15, $72	
000241E4 0315 64B5 6615 72          SME_QQU6s_3EC:	dc.b 3, $15, $64, $B5, $66, $15, $72	
000241EB 0335 74B5 7815 84          SME_QQU6s_3F3:	dc.b 3, $35, $74, $B5, $78, $15, $84	
000241F2 0355 86F5 8C15 9C          SME_QQU6s_3FA:	dc.b 3, $55, $86, $F5, $8C, $15, $9C	
000241F9 02B5 9E35 AA               SME_QQU6s_401:	dc.b 2, $B5, $9E, $35, $AA	
000241FE 0415 AEB5 B015 BC75 BE     SME_QQU6s_406:	dc.b 4, $15, $AE, $B5, $B0, $15, $BC, $75, $BE	
00024207 0415 AEB5 C615 BC75 BE     SME_QQU6s_40F:	dc.b 4, $15, $AE, $B5, $C6, $15, $BC, $75, $BE	
00024210 0375 D215 DAB5 DC          SME_QQU6s_418:	dc.b 3, $75, $D2, $15, $DA, $B5, $DC	
00024217 0355 E8B5 EE15 FA          SME_QQU6s_41F:	dc.b 3, $55, $E8, $B5, $EE, $15, $FA	
0002421E 03B5 FC16 0836 0A          SME_QQU6s_426:	dc.b 3, $B5, $FC, $16, 8, $36, $A	
00024225 02B6 0E16 1A               SME_QQU6s_42D:	dc.b 2, $B6, $E, $16, $1A	
0002422A 01F6 1C                    SME_QQU6s_432:	dc.b 1, $F6, $1C	
0002422D 02B6 2C16 38               SME_QQU6s_435:	dc.b 2, $B6, $2C, $16, $38	
00024232 0316 3AB6 3C16 48          SME_QQU6s_43A:	dc.b 3, $16, $3A, $B6, $3C, $16, $48	
00024239 0356 4AB6 5036 5C          SME_QQU6s_441:	dc.b 3, $56, $4A, $B6, $50, $36, $5C	
00024240 0336 60B6 6416 70          SME_QQU6s_448:	dc.b 3, $36, $60, $B6, $64, $16, $70	
00024247 02B6 7216 7E               SME_QQU6s_44F:	dc.b 2, $B6, $72, $16, $7E	
0002424C 0216 80B6 82               SME_QQU6s_454:	dc.b 2, $16, $80, $B6, $82	
00024251 0336 8EB6 9216 9E          SME_QQU6s_459:	dc.b 3, $36, $8E, $B6, $92, $16, $9E	
00024258 0236 A0F6 A4               SME_QQU6s_460:	dc.b 2, $36, $A0, $F6, $A4	
0002425D 0376 B436 BC56 C0          SME_QQU6s_465:	dc.b 3, $76, $B4, $36, $BC, $56, $C0	
00024264 0376 C636 BC56 CE          SME_QQU6s_46C:	dc.b 3, $76, $C6, $36, $BC, $56, $CE	
0002426B 01B7 D6                    SME_QQU6s_473:	dc.b 1, $B7, $D6	
0002426E 03B7 E217 EE57 F0          SME_QQU6s_476:	dc.b 3, $B7, $E2, $17, $EE, $57, $F0	
00024275 0387 F60A 1888 00          SME_QQU6s_47D:	dc.b 3, $87, $F6, $A, $18, $88, 0	
0002427C 0528 0918 0C38 0E88 1208+  SME_QQU6s_484:	dc.b 5, $28, 9, $18, $C, $38, $E, $88, $12, 8, $1B	
00024287 0528 1C18 1F38 0E88 1208+  SME_QQU6s_48F:	dc.b 5, $28, $1C, $18, $1F, $38, $E, $88, $12, 8, $1B	
00024292 0288 2188 2A               SME_QQU6s_49A:	dc.b 2, $88, $21, $88, $2A	
00024297 0288 3388 2A               SME_QQU6s_49F:	dc.b 2, $88, $33, $88, $2A	
0002429C 0288 3C88 2A               SME_QQU6s_4A4:	dc.b 2, $88, $3C, $88, $2A	
000242A1 03B6 D410 A0F0 A2          SME_QQU6s_4A9:	dc.b 3, $B6, $D4, $10, $A0, $F0, $A2	
000242A8 04B6 D410 B2B0 B410 C0     SME_QQU6s_4B0:	dc.b 4, $B6, $D4, $10, $B2, $B0, $B4, $10, $C0	
000242B1 03B6 E050 CA30 D0          SME_QQU6s_4B9:	dc.b 3, $B6, $E0, $50, $CA, $30, $D0	
000242B8 0286 ECF0 DA               SME_QQU6s_4C0:	dc.b 2, $86, $EC, $F0, $DA	
000242BD 0386 ECF0 EA10 FA          SME_QQU6s_4C5:	dc.b 3, $86, $EC, $F0, $EA, $10, $FA	
000242C4 0486 EC10 FCB0 FE11 0A     SME_QQU6s_4CC:	dc.b 4, $86, $EC, $10, $FC, $B0, $FE, $11, $A	
000242CD 03B6 E051 0C31 12          SME_QQU6s_4D5:	dc.b 3, $B6, $E0, $51, $C, $31, $12	
000242D4 02B6 D4B1 16               SME_QQU6s_4DC:	dc.b 2, $B6, $D4, $B1, $16	
000242D9 0476 F531 2E51 2811 32     SME_QQU6s_4E1:	dc.b 4, $76, $F5, $31, $2E, $51, $28, $11, $32	
000242E2 0576 F511 3471 3631 3E11+  SME_QQU6s_4EA:	dc.b 5, $76, $F5, $11, $34, $71, $36, $31, $3E, $11, $42	
000242ED 0586 FD31 4C07 0611 5031+  SME_QQU6s_4F5:	dc.b 5, $86, $FD, $31, $4C, 7, 6, $11, $50, $31, $52	
000242F8 0507 0777 0811 5C31 5EB1+  SME_QQU6s_500:	dc.b 5, 7, 7, $77, 8, $11, $5C, $31, $5E, $B1, $62	
00024303 0607 0777 0811 6E11 7871+  SME_QQU6s_50B:	dc.b 6, 7, 7, $77, 8, $11, $6E, $11, $78, $71, $70, $31, $7A	
00024310 0607 0777 0811 7E71 8031+  SME_QQU6s_518:	dc.b 6, 7, 7, $77, 8, $11, $7E, $71, $80, $31, $88, $11, $8C	
0002431D 0586 FD31 8E07 0611 9231+  SME_QQU6s_525:	dc.b 5, $86, $FD, $31, $8E, 7, 6, $11, $92, $31, $94	
00024328 0576 F511 9E51 9801 A031+  SME_QQU6s_530:	dc.b 5, $76, $F5, $11, $9E, $51, $98, 1, $A0, $31, $A2	
00024333 03B7 10B1 AE31 BA          SME_QQU6s_53B:	dc.b 3, $B7, $10, $B1, $AE, $31, $BA	
0002433A 03B7 10B1 BE31 CA          SME_QQU6s_542:	dc.b 3, $B7, $10, $B1, $BE, $31, $CA	
00024341 03B7 1C31 D631 DA          SME_QQU6s_549:	dc.b 3, $B7, $1C, $31, $D6, $31, $DA	
00024348 0287 28B1 E6               SME_QQU6s_550:	dc.b 2, $87, $28, $B1, $E6	
0002434D 0387 2831 F2B1 F6          SME_QQU6s_555:	dc.b 3, $87, $28, $31, $F2, $B1, $F6	
00024354 0387 28B2 0232 0E          SME_QQU6s_55C:	dc.b 3, $87, $28, $B2, 2, $32, $E	
0002435B 03B7 1C32 1232 16          SME_QQU6s_563:	dc.b 3, $B7, $1C, $32, $12, $32, $16	
00024362 02B7 10B2 1A               SME_QQU6s_56A:	dc.b 2, $B7, $10, $B2, $1A	
00024367 0432 2677 3172 3207 39     SME_QQU6s_56F:	dc.b 4, $32, $26, $77, $31, $72, $32, 7, $39	
00024370 0532 3C52 4077 3172 4607+  SME_QQU6s_578:	dc.b 5, $32, $3C, $52, $40, $77, $31, $72, $46, 7, $39	
0002437B 0472 4E77 3A32 5E17 42     SME_QQU6s_583:	dc.b 4, $72, $4E, $77, $3A, $32, $5E, $17, $42	
00024384 0472 64B7 4452 7407 50     SME_QQU6s_58C:	dc.b 4, $72, $64, $B7, $44, $52, $74, 7, $50	
0002438D 0452 7CB7 4472 8207 50     SME_QQU6s_595:	dc.b 4, $52, $7C, $B7, $44, $72, $82, 7, $50	
00024396 0532 8A52 8EB7 4472 9407+  SME_QQU6s_59E:	dc.b 5, $32, $8A, $52, $8E, $B7, $44, $72, $94, 7, $50	
000243A1 0472 9C77 3A32 A417 42     SME_QQU6s_5A9:	dc.b 4, $72, $9C, $77, $3A, $32, $A4, $17, $42	
000243AA 0472 A877 3152 B007 39     SME_QQU6s_5B2:	dc.b 4, $72, $A8, $77, $31, $52, $B0, 7, $39	
000243B3 03B7 5110 A0F0 A2          SME_QQU6s_5BB:	dc.b 3, $B7, $51, $10, $A0, $F0, $A2	
000243BA 04B7 5110 B2B0 B410 C0     SME_QQU6s_5C2:	dc.b 4, $B7, $51, $10, $B2, $B0, $B4, $10, $C0	
000243C3 03B7 5D50 CA30 D0          SME_QQU6s_5CB:	dc.b 3, $B7, $5D, $50, $CA, $30, $D0	
000243CA 0287 69F0 DA               SME_QQU6s_5D2:	dc.b 2, $87, $69, $F0, $DA	
000243CF 0387 69F0 EA10 FA          SME_QQU6s_5D7:	dc.b 3, $87, $69, $F0, $EA, $10, $FA	
000243D6 0487 6910 FCB0 FE11 0A     SME_QQU6s_5DE:	dc.b 4, $87, $69, $10, $FC, $B0, $FE, $11, $A	
000243DF 03B7 5D51 0C31 12          SME_QQU6s_5E7:	dc.b 3, $B7, $5D, $51, $C, $31, $12	
000243E6 02B7 51B1 16               SME_QQU6s_5EE:	dc.b 2, $B7, $51, $B1, $16	
000243EB 0517 7277 7451 2831 2E11+  SME_QQU6s_5F3:	dc.b 5, $17, $72, $77, $74, $51, $28, $31, $2E, $11, $32	
000243F6 0617 7277 7411 3471 3631+  SME_QQU6s_5FE:	dc.b 6, $17, $72, $77, $74, $11, $34, $71, $36, $31, $3E, $11, $42	
00024403 0557 7C37 8231 4C11 5031+  SME_QQU6s_60B:	dc.b 5, $57, $7C, $37, $82, $31, $4C, $11, $50, $31, $52	
0002440E 0517 8677 8811 5C31 5EB1+  SME_QQU6s_616:	dc.b 5, $17, $86, $77, $88, $11, $5C, $31, $5E, $B1, $62	
00024419 0617 8677 8811 6E11 7871+  SME_QQU6s_621:	dc.b 6, $17, $86, $77, $88, $11, $6E, $11, $78, $71, $70, $31, $7A	
00024426 0617 8677 8811 7E71 8031+  SME_QQU6s_62E:	dc.b 6, $17, $86, $77, $88, $11, $7E, $71, $80, $31, $88, $11, $8C	
00024433 0557 7C37 8231 8E11 9231+  SME_QQU6s_63B:	dc.b 5, $57, $7C, $37, $82, $31, $8E, $11, $92, $31, $94	
0002443E 0617 7277 7451 9811 9E31+  SME_QQU6s_646:	dc.b 6, $17, $72, $77, $74, $51, $98, $11, $9E, $31, $A2, $11, $A0	
0002444B 03B7 90B1 AE31 BA          SME_QQU6s_653:	dc.b 3, $B7, $90, $B1, $AE, $31, $BA	
00024452 03B7 90B1 BE31 CA          SME_QQU6s_65A:	dc.b 3, $B7, $90, $B1, $BE, $31, $CA	
00024459 03B7 9C31 D631 DA          SME_QQU6s_661:	dc.b 3, $B7, $9C, $31, $D6, $31, $DA	
00024460 0287 A8B1 E6               SME_QQU6s_668:	dc.b 2, $87, $A8, $B1, $E6	
00024465 0387 A831 F2B1 F6          SME_QQU6s_66D:	dc.b 3, $87, $A8, $31, $F2, $B1, $F6	
0002446C 0387 A8B2 0232 0E          SME_QQU6s_674:	dc.b 3, $87, $A8, $B2, 2, $32, $E	
00024473 03B7 9C32 1232 16          SME_QQU6s_67B:	dc.b 3, $B7, $9C, $32, $12, $32, $16	
0002447A 02B7 90B2 1A               SME_QQU6s_682:	dc.b 2, $B7, $90, $B2, $1A	
0002447F 0432 26B7 B172 3207 BD     SME_QQU6s_687:	dc.b 4, $32, $26, $B7, $B1, $72, $32, 7, $BD	
00024488 0532 3C52 40B7 B172 4607+  SME_QQU6s_690:	dc.b 5, $32, $3C, $52, $40, $B7, $B1, $72, $46, 7, $BD	
00024493 0572 4E17 BE77 C032 5E07+  SME_QQU6s_69B:	dc.b 5, $72, $4E, $17, $BE, $77, $C0, $32, $5E, 7, $C8	
0002449E 0472 64B7 C952 7407 D5     SME_QQU6s_6A6:	dc.b 4, $72, $64, $B7, $C9, $52, $74, 7, $D5	
000244A7 0452 7CB7 C972 8207 D5     SME_QQU6s_6AF:	dc.b 4, $52, $7C, $B7, $C9, $72, $82, 7, $D5	
000244B0 0532 8A52 8EB7 C972 9407+  SME_QQU6s_6B8:	dc.b 5, $32, $8A, $52, $8E, $B7, $C9, $72, $94, 7, $D5	
000244BB 0572 9C17 BE77 C032 A407+  SME_QQU6s_6C3:	dc.b 5, $72, $9C, $17, $BE, $77, $C0, $32, $A4, 7, $C8	
000244C6 0572 A817 B277 B552 B007+  SME_QQU6s_6CE:	dc.b 5, $72, $A8, $17, $B2, $77, $B5, $52, $B0, 7, $BD	
000244D1 0428 4508 4838 4958 4D     SME_QQU6s_6D9:	dc.b 4, $28, $45, 8, $48, $38, $49, $58, $4D	
000244DA 0418 53B8 5528 6118 64     SME_QQU6s_6E2:	dc.b 4, $18, $53, $B8, $55, $28, $61, $18, $64	
000244E3 0428 6638 6928 6D38 70     SME_QQU6s_6EB:	dc.b 4, $28, $66, $38, $69, $28, $6D, $38, $70	
000244EC 0528 7478 7738 7F18 8308+  SME_QQU6s_6F4:	dc.b 5, $28, $74, $78, $77, $38, $7F, $18, $83, 8, $85	
000244F7 0458 8608 8C38 4958 8D     SME_QQU6s_6FF:	dc.b 4, $58, $86, 8, $8C, $38, $49, $58, $8D	
00024500 0418 93B8 9528 6108 A1     SME_QQU6s_708:	dc.b 4, $18, $93, $B8, $95, $28, $61, 8, $A1	
00024509 0458 A238 6908 A858 A9     SME_QQU6s_711:	dc.b 4, $58, $A2, $38, $69, 8, $A8, $58, $A9	
00024512 0528 7478 AF38 B718 BB08+  SME_QQU6s_71A:	dc.b 5, $28, $74, $78, $AF, $38, $B7, $18, $BB, 8, $85	
0002451D 0458 BD38 C338 C778 CB     SME_QQU6s_725:	dc.b 4, $58, $BD, $38, $C3, $38, $C7, $78, $CB	
00024526 0458 D338 D938 C778 DD     SME_QQU6s_72E:	dc.b 4, $58, $D3, $38, $D9, $38, $C7, $78, $DD	
0002452F 0458 BD38 C338 C778 E5     SME_QQU6s_737:	dc.b 4, $58, $BD, $38, $C3, $38, $C7, $78, $E5	
00024538 0458 D338 D938 C778 ED     SME_QQU6s_740:	dc.b 4, $58, $D3, $38, $D9, $38, $C7, $78, $ED	
00024541 0228 F5B8 F8               SME_QQU6s_749:	dc.b 2, $28, $F5, $B8, $F8	
00024546 0389 0429 0D39 10          SME_QQU6s_74E:	dc.b 3, $89, 4, $29, $D, $39, $10	
0002454D 0388 3329 0D39 10          SME_QQU6s_755:	dc.b 3, $88, $33, $29, $D, $39, $10	
00024554 0388 3C29 0D39 10          SME_QQU6s_75C:	dc.b 3, $88, $3C, $29, $D, $39, $10	
0002455B 0389 0429 0D39 14          SME_QQU6s_763:	dc.b 3, $89, 4, $29, $D, $39, $14	
00024562 0388 3329 0D39 14          SME_QQU6s_76A:	dc.b 3, $88, $33, $29, $D, $39, $14	
00024569 0388 3C29 0D39 14          SME_QQU6s_771:	dc.b 3, $88, $3C, $29, $D, $39, $14	
00024570 03B9 1839 2439 28          SME_QQU6s_778:	dc.b 3, $B9, $18, $39, $24, $39, $28	
00024577 03B9 2C39 3839 28          SME_QQU6s_77F:	dc.b 3, $B9, $2C, $39, $38, $39, $28	
0002457E 03B9 3C39 4839 28          SME_QQU6s_786:	dc.b 3, $B9, $3C, $39, $48, $39, $28	
00024585 05B9 4C19 2419 5819 3A39+  SME_QQU6s_78D:	dc.b 5, $B9, $4C, $19, $24, $19, $58, $19, $3A, $39, $28	
00024590 0479 5A59 6239 6859 6C     SME_QQU6s_798:	dc.b 4, $79, $5A, $59, $62, $39, $68, $59, $6C	
00024599 0479 7259 6239 7A59 7E     SME_QQU6s_7A1:	dc.b 4, $79, $72, $59, $62, $39, $7A, $59, $7E	
000245A2 0479 8459 6259 8C59 92     SME_QQU6s_7AA:	dc.b 4, $79, $84, $59, $62, $59, $8C, $59, $92	
000245AB 0339 98B9 9C39 A8          SME_QQU6s_7B3:	dc.b 3, $39, $98, $B9, $9C, $39, $A8	
000245B2 0339 ACB9 B039 BC          SME_QQU6s_7BA:	dc.b 3, $39, $AC, $B9, $B0, $39, $BC	
000245B9 0339 C0B9 C439 BC          SME_QQU6s_7C1:	dc.b 3, $39, $C0, $B9, $C4, $39, $BC	
000245C0 0479 D079 D819 E039 E2     SME_QQU6s_7C8:	dc.b 4, $79, $D0, $79, $D8, $19, $E0, $39, $E2	
000245C9 0479 E679 EE19 E039 E2     SME_QQU6s_7D1:	dc.b 4, $79, $E6, $79, $EE, $19, $E0, $39, $E2	
000245D2 0479 F679 FE19 E039 E2     SME_QQU6s_7DA:	dc.b 4, $79, $F6, $79, $FE, $19, $E0, $39, $E2	
000245DB 025A 06BA 0C               SME_QQU6s_7E3:	dc.b 2, $5A, 6, $BA, $C	
000245E0                            		even
000245E0                            		even
000245E0                            
000245E0                            ; ---------------------------------------------------------------------------
000245E0                            ; Uncompressed graphics	- Sonic
000245E0                            ; ---------------------------------------------------------------------------
000245E0                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
00038900                            		even
00038900                            Art_Dust:	incbin	artunc\spindust.bin
0003A240                            		even
0003A240                            ; ---------------------------------------------------------------------------
0003A240                            ; Compressed graphics - various
0003A240                            ; ---------------------------------------------------------------------------
0003A240                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0003A344                            		even
0003A344                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0003A37E                            		even
0003A37E                            Nem_Shield:	incbin	artnem\shield.bin	; shield
0003A514                            		even
0003A514                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
0003A65C                            		even
0003A65C                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0003A766                            		even
0003A766                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
0003A7B8                            		even
0003A7B8                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0003AA00                            		even
0003AA00                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0003AB86                            		even
0003AB86                            ; ---------------------------------------------------------------------------
0003AB86                            ; Sprite mappings - walls of the special stage
0003AB86                            ; ---------------------------------------------------------------------------
0003AB86                            Map_SSWalls:
0003AB86                            	include "_maps\SSwalls.asm"
0003AB86                            ; ---------------------------------------------------------------------------
0003AB86                            ; Sprite mappings - walls of the special stage
0003AB86                            ; ---------------------------------------------------------------------------
0003AB86 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
0003AB8A 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
0003AB8E 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
0003AB92 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
0003AB96 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
0003AB9A 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
0003AB9E 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
0003ABA2 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
0003ABA6 01                         byte_2C584:	dc.b 1
0003ABA7 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0003ABAC 01                         byte_2C58A:	dc.b 1
0003ABAD F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0003ABB2 01                         byte_2C590:	dc.b 1
0003ABB3 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0003ABB8 01                         byte_2C596:	dc.b 1
0003ABB9 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0003ABBE 01                         byte_2C59C:	dc.b 1
0003ABBF F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0003ABC4 01                         byte_2C5A2:	dc.b 1
0003ABC5 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0003ABCA 01                         byte_2C5A8:	dc.b 1
0003ABCB F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0003ABD0 01                         byte_2C5AE:	dc.b 1
0003ABD1 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0003ABD6 01                         byte_2C5B4:	dc.b 1
0003ABD7 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0003ABDC 01                         byte_2C5BA:	dc.b 1
0003ABDD F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0003ABE2 01                         byte_2C5C0:	dc.b 1
0003ABE3 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0003ABE8 01                         byte_2C5C6:	dc.b 1
0003ABE9 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0003ABEE 01                         byte_2C5CC:	dc.b 1
0003ABEF F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0003ABF4 01                         byte_2C5D2:	dc.b 1
0003ABF5 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0003ABFA 01                         byte_2C5D8:	dc.b 1
0003ABFB F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0003AC00 01                         byte_2C5DE:	dc.b 1
0003AC01 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0003AC06                            		even
0003AC06                            		even
0003AC06                            ; ---------------------------------------------------------------------------
0003AC06                            ; Compressed graphics - special stage
0003AC06                            ; ---------------------------------------------------------------------------
0003AC06                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
0003B53E                            		even
0003B53E                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
0003B672                            		even
0003B672                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
0003C302                            		even
0003C302                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
0003C602                            		even
0003C602                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
0003CAF6                            		even
0003CAF6                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
0003CBE4                            		even
0003CBE4                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
0003CCB4                            		even
0003CCB4                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
0003CDAA                            		even
0003CDAA                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
0003CE08                            		even
0003CE08                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
0003CE9A                            		even
0003CE9A                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
0003CF5C                            		even
0003CF5C                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
0003D02A                            		even
0003D02A                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
0003D0F6                            		even
0003D0F6                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
0003D1BE                            		even
0003D1BE                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
0003D288                            		even
0003D288                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
0003D358                            		even
0003D358                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
0003D54C                            		even
0003D54C                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
0003D6B4                            		even
0003D6B4                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
0003D764                            		even
0003D764                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
0003D83E                            		even
0003D83E                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
0003D8C2                            		even
0003D8C2                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
0003DA40                            		even
0003DA40                            ; ---------------------------------------------------------------------------
0003DA40                            ; Compressed graphics - GHZ stuff
0003DA40                            ; ---------------------------------------------------------------------------
0003DA40                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
0003DA8A                            		even
0003DA8A                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
0003DBA4                            		even
0003DBA4                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
0003DC90                            		even
0003DC90                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
0003DCD8                            		even
0003DCD8                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
0003DE76                            		even
0003DE76                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
0003DEF2                            		even
0003DEF2                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
0003E106                            		even
0003E106                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
0003E232                            		even
0003E232                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
0003E360                            		even
0003E360                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
0003E3FE                            		even
0003E3FE                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
0003E45E                            		even
0003E45E                            ; ---------------------------------------------------------------------------
0003E45E                            ; Compressed graphics - LZ stuff
0003E45E                            ; ---------------------------------------------------------------------------
0003E45E                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
0003E582                            		even
0003E582                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
0003ED76                            		even
0003ED76                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
0003EEF6                            		even
0003EEF6                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
0003F060                            		even
0003F060                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
0003F6B6                            		even
0003F6B6                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
0003F76C                            		even
0003F76C                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
0003F80E                            		even
0003F80E                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
0003F96A                            		even
0003F96A                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
0003F9CE                            		even
0003F9CE                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
0003FB20                            		even
0003FB20                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
00040002                            		even
00040002                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00040172                            		even
00040172                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
0004042A                            		even
0004042A                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00040562                            		even
00040562                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
0004068C                            		even
0004068C                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
0004079C                            		even
0004079C                            ; ---------------------------------------------------------------------------
0004079C                            ; Compressed graphics - MZ stuff
0004079C                            ; ---------------------------------------------------------------------------
0004079C                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00040A2A                            		even
00040A2A                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00040AE8                            		even
00040AE8                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00040BA0                            		even
00040BA0                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00040BF4                            		even
00040BF4                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00040ED2                            		even
00040ED2                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
000417E8                            		even
000417E8                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
0004194C                            		even
0004194C                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
000419D4                            		even
000419D4                            ; ---------------------------------------------------------------------------
000419D4                            ; Compressed graphics - SLZ stuff
000419D4                            ; ---------------------------------------------------------------------------
000419D4                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00041C10                            		even
00041C10                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00041D56                            		even
00041D56                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00041F9A                            		even
00041F9A                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00041FFC                            		even
00041FFC                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
000420DE                            		even
000420DE                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
000422C0                            		even
000422C0                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
000423CC                            		even
000423CC                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00042470                            		even
00042470                            ; ---------------------------------------------------------------------------
00042470                            ; Compressed graphics - SYZ stuff
00042470                            ; ---------------------------------------------------------------------------
00042470                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
000425DA                            		even
000425DA                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
0004263C                            		even
0004263C                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
0004271E                            		even
0004271E                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
000429AC                            		even
000429AC                            ; ---------------------------------------------------------------------------
000429AC                            ; Compressed graphics - SBZ stuff
000429AC                            ; ---------------------------------------------------------------------------
000429AC                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
00042A00                            		even
00042A00                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00042C9C                            		even
00042C9C                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00042EA0                            		even
00042EA0                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
0004303E                            		even
0004303E                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
0004336E                            		even
0004336E                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
0004354C                            		even
0004354C                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
000435A4                            		even
000435A4                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
00043724                            		even
00043724                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
00043822                            		even
00043822                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
000439AE                            		even
000439AE                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
000439FE                            		even
000439FE                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
00043A56                            		even
00043A56                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
00043B52                            		even
00043B52                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
00043C68                            		even
00043C68                            ; ---------------------------------------------------------------------------
00043C68                            ; Compressed graphics - enemies
00043C68                            ; ---------------------------------------------------------------------------
00043C68                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
00044028                            		even
00044028                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
00044516                            		even
00044516                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
000448BC                            		even
000448BC                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
00044AA4                            		even
00044AA4                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0004518E                            		even
0004518E                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
000453F6                            		even
000453F6                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
00045680                            		even
00045680                            Nem_Roller:	incbin	artnem\roller.bin	; roller
00045BA4                            		even
00045BA4                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
00045E2E                            		even
00045E2E                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0004644C                            		even
0004644C                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
00046834                            		even
00046834                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
00046B30                            		even
00046B30                            Nem_Splats:	incbin	artnem\splats.bin	; splats
00046D78                            		even
00046D78                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
00047010                            		even
00047010                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
000471EE                            		even
000471EE                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0004737C                            		even
0004737C                            ; ---------------------------------------------------------------------------
0004737C                            ; Compressed graphics - various
0004737C                            ; ---------------------------------------------------------------------------
0004737C                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0004798A                            		even
0004798A                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
00047A80                            		even
00047A80                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
00047B86                            		even
00047B86                            Nem_Ring:	incbin	artnem\rings.bin	; rings
00047C7A                            		even
00047C7A                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
000480EC 00                         		even
000480EC                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
00048752                            		even
00048752                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
00048802                            		even
00048802                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
00048994                            		even
00048994                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
00048A96                            		even
00048A96                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
00048B72                            		even
00048B72                            ArtNem_DignlSprng:	incbin	"artnem\Diagonal spring.bin" ; diagonal spring
00048D46 00                         		even
00048D46                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
000491C2                            		even
000491C2                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
00049282                            		even
00049282                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
000493F6                            		even
000493F6                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
000496F8                            		even
000496F8                            ; ---------------------------------------------------------------------------
000496F8                            ; Compressed graphics - continue screen
000496F8                            ; ---------------------------------------------------------------------------
000496F8                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
000499A8                            		even
000499A8                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
00049BE2                            		even
00049BE2                            ; ---------------------------------------------------------------------------
00049BE2                            ; Compressed graphics - animals
00049BE2                            ; ---------------------------------------------------------------------------
00049BE2                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
00049D3A                            		even
00049D3A                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
00049E96                            		even
00049E96                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0004A012                            		even
0004A012                            Nem_Seal:	incbin	artnem\seal.bin		; seal
0004A12E                            		even
0004A12E                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0004A264                            		even
0004A264                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0004A39E                            		even
0004A39E                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0004A4FA                            		even
0004A4FA                            ; ---------------------------------------------------------------------------
0004A4FA                            ; Compressed graphics - primary patterns and block mappings
0004A4FA                            ; ---------------------------------------------------------------------------
0004A4FA                            Blk16_GHZ:	incbin	map16\ghz.bin
0004AE0E                            		even
0004AE0E                            Nem_GHZ:	incbin	artnem\8x8ghz.bin	; GHZ primary patterns
0004C420                            		even
0004C420                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; Title Screen and Ending only
0004DA80                            		even
0004DA80                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; Title Screen and Ending only
0004EE28                            		even
0004EE28                            Blk256_GHZ:	incbin	map256\ghz.bin
00050EE2                            		even
00050EE2                            Blk16_TS:	incbin	map16\ts.bin
00050FE4                            		even
00050FE4                            Nem_TS_1st:	incbin	artnem\8x8ts1.bin; GHZ primary patterns
00051C3A                            		even
00051C3A                            Blk256_TS:	incbin	map256\ts.bin
00052188                            		even
00052188                            Blk16_LZ:	incbin	map16\lz.bin
000524B2                            		even
000524B2                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00053FFA                            		even
00053FFA                            Blk256_LZ:	incbin	map256\lz.bin
000567EA                            		even
000567EA                            Blk16_MZ:	incbin	map16\mz.bin
00056FF4                            		even
00056FF4                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
00059838                            		even
00059838                            Blk256_MZ:	incbin	map256\mz.bin
0005AFF8                            		even
0005AFF8                            Blk16_SLZ:	incbin	map16\slz.bin
0005B7DC                            		even
0005B7DC                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
0005F330                            		even
0005F330                            Blk256_SLZ:	incbin	map256\slz.bin
00061760                            		even
00061760                            Blk16_SYZ:	incbin	map16\syz.bin
000620CE                            		even
000620CE                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
000657FA                            		even
000657FA                            Blk256_SYZ:	incbin	map256\syz.bin
00067BAA                            		even
00067BAA                            Blk16_SBZ:	incbin	map16\sbz.bin
00068A44                            		even
00068A44                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0006B1F0                            		even
0006B1F0                            Blk256_SBZ:	incbin	map256\sbz.bin
0006DC40                            		even
0006DC40                            ; ---------------------------------------------------------------------------
0006DC40                            ; Compressed graphics - bosses and ending sequence
0006DC40                            ; ---------------------------------------------------------------------------
0006DC40                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
0006E4A4                            		even
0006E4A4                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
0006E78E                            		even
0006E78E                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0006F012                            		even
0006F012                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
0006F83E                            		even
0006F83E                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
0006FFA6                            		even
0006FFA6                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
00070526                            		even
00070526                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
00070646                            		even
00070646                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
00070844                            		even
00070844                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
00071A22                            		even
00071A22                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
00072366                            		even
00072366                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
0007273C                            		even
0007273C                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
00072CCC                            		even
00072CCC                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
00072F54                            		even
00072F54                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
00073552                            		even
00073552                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
000737DA                            		even
000737DA                            		incbin	misc\padding2.bin
000738DE                            		even
000738DE                            MenuslctrART:	incbin	"artkos\Menuslctr.bin"	; art for that soncc 4 menu selecting thingy 
00073A1A                            		even
00073A1A                            ;The Menu Selector uses the third palette line for the Title Screen.
00073A1A                            ;Load it into Flex2, and select the title palette.
00073A1A                            ;Change the palette lines to 3, and slide it to 0 in the palettes tab. 
00073A1A                            ;The rest is is right here.
00073A1A                            ; - Chron Delta
00073A1A                            MenuslctrMappings:	incbin	"_maps\Menuslctr.asm"	; mappings for that soncc 4 menu selecting thingy
00073BA0                            		even		
00073BA0                            ; ---------------------------------------------------------------------------
00073BA0                            ; Collision data
00073BA0                            ; ---------------------------------------------------------------------------
00073BA0                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
00073CA0                            		even
00073CA0                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00074CA0                            		even
00074CA0                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00075CA0                            		even
00075CA0                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
00075E58 00                         		even
00075E58                            Col_LZ:		incbin	collide\lz.bin		; LZ index
00075F20                            		even
00075F20                            Col_MZ:		incbin	collide\mz.bin		; MZ index
000760B0                            		even
000760B0                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
000762A4                            		even
000762A4                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
00076498                            		even
00076498                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
000766F0                            		even
000766F0                            ; ---------------------------------------------------------------------------
000766F0                            ; Special layouts
000766F0                            ; ---------------------------------------------------------------------------
000766F0                            SS_1:		incbin	sslayout\1.bin
0007696A                            		even
0007696A                            SS_2:		incbin	sslayout\2.bin
00076D7C                            		even
00076D7C                            SS_3:		incbin	sslayout\3.bin
000770D8                            		even
000770D8                            SS_4:		incbin	sslayout\4.bin
000775B2                            		even
000775B2                            SS_5:		incbin	sslayout\5.bin
00077A84                            		even
00077A84                            SS_6:		incbin	sslayout\6.bin
00077D94                            		even
00077D94                            ; ---------------------------------------------------------------------------
00077D94                            ; Animated uncompressed graphics
00077D94                            ; ---------------------------------------------------------------------------
00077D94                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
00077F94                            		even
00077F94                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
00078394                            		even
00078394                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
00078814                            		even
00078814                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
00078B14                            		even
00078B14                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
00079114                            		even
00079114                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
00079414                            		even
00079414                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
00079E94                            		even
00079E94                            
00079E94                            ; ---------------------------------------------------------------------------
00079E94                            ; Level	layout index
00079E94                            ; ---------------------------------------------------------------------------
00079E94 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
00079E9A 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
00079EA0 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
00079EA6 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
00079EAC 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
00079EB2 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
00079EB8 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
00079EBE 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
00079EC4 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
00079ECA 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
00079ED0 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
00079ED6 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
00079EDC 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00079EE2 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00079EE8 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00079EEE 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
00079EF4 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
00079EFA 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
00079F00 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
00079F06 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
00079F0C 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
00079F12 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
00079F18 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
00079F1E 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
00079F24 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00079F2A 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00079F30 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00079F36 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00079F3C                            
00079F3C                            Level_GHZ1:	incbin	levels\ghz1.bin
0007A02E                            		even
0007A02E 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0007A032                            Level_GHZ2:	incbin	levels\ghz2.bin
0007A0FA                            		even
0007A0FA 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0007A0FE                            Level_GHZ3:	incbin	levels\ghz3.bin
0007A220                            		even
0007A220                            Level_GHZbg:	incbin	levels\ghzbg.bin
0007A242                            		even
0007A242 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0007A246 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0007A24A                            
0007A24A                            Level_LZ1:	incbin	levels\lz1.bin
0007A34C                            		even
0007A34C                            Level_LZbg:	incbin	levels\lzbg.bin
0007A44E                            		even
0007A44E 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0007A452                            Level_LZ2:	incbin	levels\lz2.bin
0007A4EC                            		even
0007A4EC 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0007A4F0                            Level_LZ3:	incbin	levels\lz3.bin
0007A60A                            		even
0007A60A 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0007A60E                            Level_SBZ3:	incbin	levels\sbz3.bin
0007A6C8                            		even
0007A6C8 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0007A6CC                            
0007A6CC                            Level_MZ1:	incbin	levels\mz1.bin
0007A76A                            		even
0007A76A                            Level_MZ1bg:	incbin	levels\mz1bg.bin
0007A7E4                            		even
0007A7E4                            Level_MZ2:	incbin	levels\mz2.bin
0007A888                            		even
0007A888                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0007A91A                            		even
0007A91A 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0007A91E                            Level_MZ3:	incbin	levels\mz3.bin
0007AA00                            		even
0007AA00                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0007AAA4                            		even
0007AAA4 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0007AAA8 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0007AAAC                            
0007AAAC                            Level_SLZ1:	incbin	levels\slz1.bin
0007ABBE                            		even
0007ABBE                            Level_SLZbg:	incbin	levels\slzbg.bin
0007AC38                            		even
0007AC38                            Level_SLZ2:	incbin	levels\slz2.bin
0007AD28                            		even
0007AD28                            Level_SLZ3:	incbin	levels\slz3.bin
0007AE42                            		even
0007AE42 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0007AE46                            
0007AE46                            Level_SYZ1:	incbin	levels\syz1.bin
0007AF02                            		even
0007AF02                            Level_SYZbg:	incbin	levels\syzbg.bin
0007AF3C                            		even
0007AF3C 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0007AF40                            Level_SYZ2:	incbin	levels\syz2.bin
0007B044                            		even
0007B044 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0007B048                            Level_SYZ3:	incbin	levels\syz3.bin
0007B1A2                            		even
0007B1A2 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0007B1A6 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0007B1AA                            
0007B1AA                            Level_SBZ1:	incbin	levels\sbz1.bin
0007B2CC                            		even
0007B2CC                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0007B30A                            		even
0007B30A                            Level_SBZ2:	incbin	levels\sbz2.bin
0007B44C                            		even
0007B44C                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0007B5B6                            		even
0007B5B6 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0007B5BA 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0007B5BE                            Level_End:	incbin	levels\ending.bin
0007B5EE 00                         		even
0007B5EE 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0007B5F2                            
0007B5F2                            ; ---------------------------------------------------------------------------
0007B5F2                            ; Animated uncompressed giant ring graphics
0007B5F2                            ; ---------------------------------------------------------------------------
0007B5F2                            Art_BigRing:	incbin	artunc\bigring.bin
0007C232                            		even
0007C232                            
0007C232                            		incbin	misc\padding3.bin
0007C2CE                            		even
0007C2CE                            
0007C2CE                            ; ---------------------------------------------------------------------------
0007C2CE                            ; Sprite locations index
0007C2CE                            ; ---------------------------------------------------------------------------
0007C2CE 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C2D2 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C2D6 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C2DA 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C2DE 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C2E2 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C2E6 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C2EA 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C2EE 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C2F2 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C2F6 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C2FA 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C2FE 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C302 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C306 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C30A 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C30E 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C312 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C316 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C31A 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C31E 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C322 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C326 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C32A 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C32E 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C332 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C336 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C33A 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C33E 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0007C342 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0007C346 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0007C34A 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0007C34E 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0007C352 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0007C356 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0007C35A 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0007C35E FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0007C364                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0007C86E                            		even
0007C86E                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0007CE2C                            		even
0007CE2C                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0007D4E6                            		even
0007D4E6                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0007D954                            		even
0007D954                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0007DC96                            		even
0007DC96                            ObjPos_LZ3:	incbin	objpos\lz3.bin
0007E278                            		even
0007E278                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
0007E710                            		even
0007E710                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
0007E742                            		even
0007E742                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
0007E774                            		even
0007E774                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
0007E7A6                            		even
0007E7A6                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
0007E7D8                            		even
0007E7D8                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
0007E822                            		even
0007E822                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
0007E860                            		even
0007E860                            ObjPos_MZ1:	incbin	objpos\mz1.bin
0007EBCC                            		even
0007EBCC                            ObjPos_MZ2:	incbin	objpos\mz2.bin
0007F076                            		even
0007F076                            ObjPos_MZ3:	incbin	objpos\mz3.bin
0007F5EC                            		even
0007F5EC                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
0007FB2C                            		even
0007FB2C                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
0007FF94                            		even
0007FF94                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
00080576                            		even
00080576                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
00080A02                            		even
00080A02                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
00080F6C                            		even
00080F6C                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
00081572                            		even
00081572                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
00081CB0                            		even
00081CB0                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
0008238E                            		even
0008238E                            ObjPos_FZ:	incbin	objpos\fz.bin
000823A0                            		even
000823A0                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
000823D2                            		even
000823D2                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
00082404                            		even
00082404                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
00082436                            		even
00082436                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
00082468                            		even
00082468                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
0008249A                            		even
0008249A                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
000824D2                            		even
000824D2                            ObjPos_End:	incbin	objpos\ending.bin
0008262E                            		even
0008262E FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00082634                            ; ---------------------------------------------------------------------------
00082634                            		incbin	misc\padding4.bin
00082C5E                            		even
00082C5E                            
00082C5E 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
00082C62 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
00082C66 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
00082C6A 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
00082C6E 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
00082C72 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
00082C76                            ; ---------------------------------------------------------------------------
00082C76                            ; PSG instruments used in music
00082C76                            ; ---------------------------------------------------------------------------
00082C76 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
00082C82 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00082C8E 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
00082C9A                            PSG1:		incbin	sound\psg1.bin
00082CB1                            PSG2:		incbin	sound\psg2.bin
00082CB8                            PSG3:		incbin	sound\psg3.bin
00082CC9                            PSG4:		incbin	sound\psg4.bin
00082CD4                            PSG6:		incbin	sound\psg6.bin
00082CE3                            PSG5:		incbin	sound\psg5.bin
00082D0D                            PSG7:		incbin	sound\psg7.bin
00082D29                            PSG8:		incbin	sound\psg8.bin
00082D51                            PSG9:		incbin	sound\psg9.bin
00082D62                            
00082D62 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
00082D6A                            ; ---------------------------------------------------------------------------
00082D6A                            ; Music	Pointers
00082D6A                            ; ---------------------------------------------------------------------------
00082D6A 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
00082D72 0000 0000 0000 0000        		dc.l Music83, Music84
00082D7A 0000 0000 0000 0000        		dc.l Music85, Music86
00082D82 0000 0000 0000 0000        		dc.l Music87, Music88
00082D8A 0000 0000 0000 0000        		dc.l Music89, Music8A
00082D92 0000 0000 0000 0000        		dc.l Music8B, Music8C
00082D9A 0000 0000 0000 0000        		dc.l Music8D, Music8E
00082DA2 0000 0000 0000 0000        		dc.l Music8F, Music90
00082DAA 0000 0000 0000 0000        		dc.l Music91, Music92
00082DB2 0000 0000 0000 0000        		dc.l Music93, Music94
00082DBA 0000 0000 0000 0000        		dc.l Music95, Music96
00082DC2 0000 0000 0000 0000        		dc.l Music97, Music98
00082DCA 0000 0000 0000 0000        		dc.l Music99, Music9A
00082DD2 0000 0000 0000 0000        		dc.l Music9B, Music9C
00082DDA 0000 0000 0000 0000        		dc.l Music9D, Music9E
00082DE2 0000 0000                  		dc.l Music9F
00082DE6                            ; ---------------------------------------------------------------------------
00082DE6                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
00082DE6                            ; ---------------------------------------------------------------------------
00082DE6 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
00082DF6 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
00082E06 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
00082E16 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
00082E26 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
00082E36 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
00082E46 9090 9090                  		dc.b $90, $90, $90, $90
00082E4A                            
00082E4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00082E4A                            
00082E4A                            YM_Access_WaitRead:
00082E4A 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop off (allow it to continue)
00082E52                            		rept	$10					; EXT: delay for a long enough time to allow the...
00082E52                            		nop						; EXT: '' ...68k pointer to be saved correctly.
00082E52 4E71 4E71 4E71 4E71 4E71+  		endr						; EXT: ''
00082E72                            
00082E72                            sub_71B4C:
00082E72 4DF9 00FF F000             		lea	($FFF000).l,a6
00082E78                            
00082E78 41F9 00A0 02EF             		lea	($A00000+YM_Access).l,a0		; EXT: load access address in Z80
00082E7E 203C 00A0 0000             		move.l	#$A00000,d0				; EXT: prepare Z80 RAM address in d0 (i.e. start of Cue list address)
00082E84 33FC 0100 00A1 1100 0839+  		StopZ80						; EXT: request Z80 stop on
00082E96 4A18                       		tst.b	(a0)+					; EXT: is the Z80 accessing the 68k pointer?
00082E98 66B0                       		bne.s	YM_Access_WaitRead			; EXT: if so, branch and wait for it to finish...
00082E9A 1218                       		move.b	(a0)+,d1				; EXT: load lower byte of pointer
00082E9C 1018                       		move.b	(a0)+,d0				; EXT: load upper byte of pointer
00082E9E 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop off
00082EA6 E148                       		lsl.w	#$08,d0					; EXT: shift upper byte up
00082EA8 1001                       		move.b	d1,d0					; EXT: put lower byte with it
00082EAA 2D40 0010                  		move.l	d0,$10(a6)				; EXT: store the cue address
00082EAE                            
00082EAE 422E 000E                  		clr.b	$E(a6)
00082EB2 4A2E 0003                  		tst.b	3(a6)		; is music paused?
00082EB6 6600 0000                  		bne.w	loc_71E50	; if yes, branch
00082EBA 532E 0001                  		subq.b	#1,1(a6)
00082EBE 6600                       		bne.s	loc_71B9E
00082EC0 4EBA 0000                  		jsr	sub_7260C(pc)
00082EC4                            
00082EC4                            loc_71B9E:
00082EC4 102E 0004                  		move.b	4(a6),d0
00082EC8 6700                       		beq.s	loc_71BA8
00082ECA 4EBA 0000                  		jsr	sub_72504(pc)
00082ECE                            
00082ECE                            loc_71BA8:
00082ECE 4A2E 0024                  		tst.b	$24(a6)
00082ED2 6700                       		beq.s	loc_71BB2
00082ED4 4EBA 0000                  		jsr	sub_7267C(pc)
00082ED8                            
00082ED8                            loc_71BB2:
00082ED8 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
00082EDC 6700                       		beq.s	loc_71BBC	; if not, branch
00082EDE 4EBA 0000                  		jsr	Sound_Play(pc)
00082EE2                            
00082EE2                            loc_71BBC:
00082EE2 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00082EE8 6700                       		beq.s	loc_71BC8
00082EEA 4EBA 0000                  		jsr	Sound_ChkValue(pc)
00082EEE                            
00082EEE                            loc_71BC8:
00082EEE 4BEE 0010                  		lea	$40-$30(a6),a5			; MJ: making correction for flow below
00082EF2 7E01                       		moveq	#2-1,d7				; MJ: set number of PCM channels to run
00082EF4 1D7C 007F 0008             		move.b	#$80-1,$08(a6)			; MJ: reset as PCM channel
00082EFA                            
00082EFA                            SD_NextPCM:
00082EFA 522E 0008                  		addq.b	#$01,$08(a6)			; MJ: advance PCM channel ID
00082EFE 4BED 0030                  		lea	$30(a5),a5			; MJ: advance to next channel
00082F02 4A15                       		tst.b	(a5)
00082F04 6A00                       		bpl.s	loc_71BD4
00082F06 4EBA 0000                  		jsr	sub_71C4E(pc)
00082F0A                            
00082F0A                            loc_71BD4:
00082F0A 51CF FFEE                  		dbf	d7,SD_NextPCM			; MJ: repeat for number of PCM channels available
00082F0E 422E 0008                  		clr.b	8(a6)
00082F12 7E05                       		moveq	#5,d7
00082F14                            
00082F14                            loc_71BDA:
00082F14 DAFC 0030                  		adda.w	#$30,a5
00082F18 4A15                       		tst.b	(a5)
00082F1A 6A00                       		bpl.s	loc_71BE6
00082F1C 4EBA 0000                  		jsr	sub_71CCA(pc)
00082F20                            
00082F20                            loc_71BE6:
00082F20 51CF FFF2                  		dbf	d7,loc_71BDA
00082F24                            
00082F24 7E02                       		moveq	#2,d7
00082F26                            
00082F26                            loc_71BEC:
00082F26 DAFC 0030                  		adda.w	#$30,a5
00082F2A 4A15                       		tst.b	(a5)
00082F2C 6A00                       		bpl.s	loc_71BF8
00082F2E 4EBA 0000                  		jsr	sub_72850(pc)
00082F32                            
00082F32                            loc_71BF8:
00082F32 51CF FFF2                  		dbf	d7,loc_71BEC
00082F36                            
00082F36 1D7C 0080 000E             		move.b	#$80,$E(a6)
00082F3C 7E02                       		moveq	#2,d7
00082F3E                            
00082F3E                            loc_71C04:
00082F3E DAFC 0030                  		adda.w	#$30,a5
00082F42 4A15                       		tst.b	(a5)
00082F44 6A00                       		bpl.s	loc_71C10
00082F46 4EBA 0000                  		jsr	sub_71CCA(pc)
00082F4A                            
00082F4A                            loc_71C10:
00082F4A 51CF FFF2                  		dbf	d7,loc_71C04
00082F4E                            
00082F4E 7E02                       		moveq	#2,d7
00082F50                            
00082F50                            loc_71C16:
00082F50 DAFC 0030                  		adda.w	#$30,a5
00082F54 4A15                       		tst.b	(a5)
00082F56 6A00                       		bpl.s	loc_71C22
00082F58 4EBA 0000                  		jsr	sub_72850(pc)
00082F5C                            
00082F5C                            loc_71C22:
00082F5C 51CF FFF2                  		dbf	d7,loc_71C16
00082F60 1D7C 0040 000E             		move.b	#$40,$E(a6)
00082F66 DAFC 0030                  		adda.w	#$30,a5
00082F6A 4A15                       		tst.b	(a5)
00082F6C 6A00                       		bpl.s	loc_71C38
00082F6E 4EBA 0000                  		jsr	sub_71CCA(pc)
00082F72                            
00082F72                            loc_71C38:
00082F72 DAFC 0030                  		adda.w	#$30,a5
00082F76 4A15                       		tst.b	(a5)
00082F78 6A00                       		bpl.s	loc_71C44
00082F7A 4EBA 0000                  		jsr	sub_72850(pc)
00082F7E                            
00082F7E                            loc_71C44:
00082F7E 6000                       		bra.s	YM_Access_TestWrite			; EXT: jump into the access loop
00082F80                            
00082F80                            YM_Access_WaitWrite:
00082F80 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop off (allow it to continue)
00082F88                            		rept	$10					; EXT: delay for a long enough time to let the Z80...
00082F88                            		nop						; EXT: '' ...finish writing the 68k pointer, so it doesn't...
00082F88 4E71 4E71 4E71 4E71 4E71+  		endr						; EXT: '' ...clash with 68k's pointer writing.
00082FA8                            
00082FA8                            YM_Access_TestWrite:
00082FA8 41F9 00A0 02EF             		lea	($A00000+YM_Access).l,a0		; EXT: load access address in Z80
00082FAE 43EE 0013                  		lea	$13(a6),a1				; EXT: load the 68k's pointer finish location
00082FB2 33FC 0100 00A1 1100 0839+  		StopZ80						; EXT: request Z80 stop on
00082FC4 4A18                       		tst.b	(a0)+					; EXT: is the Z80 accessing the 68k pointer?
00082FC6 66B8                       		bne.s	YM_Access_WaitWrite			; EXT: if so, branch and wait for it to finish...
00082FC8 10D1                       		move.b	(a1),(a0)+				; EXT: save lower byte of pointer
00082FCA 10A1                       		move.b	-(a1),(a0)				; EXT: save upper byte of pointer
00082FCC 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop off
00082FD4                            
00082FD4 4E75                       		rts	
00082FD6                            
00082FD6                            ; End of function sub_71B4C
00082FD6                            
00082FD6                            
00082FD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00082FD6                            
00082FD6                            
00082FD6                            sub_71C4E:				; XREF: sub_71B4C
00082FD6 532D 000E                  		subq.b	#1,$E(a5)
00082FDA 6600 0000                  		bne.w	locret_71CAA
00082FDE 286D 0004                  		movea.l	4(a5),a4
00082FE2                            
00082FE2                            loc_71C5E:
00082FE2 7A00                       		moveq	#0,d5
00082FE4 1A1C                       		move.b	(a4)+,d5
00082FE6 0C05 00E0                  		cmpi.b	#-$20,d5
00082FEA 6500                       		bcs.s	loc_71C6E
00082FEC 4EBA 0000                  		jsr	sub_72A5A(pc)
00082FF0 60F0                       		bra.s	loc_71C5E
00082FF2                            ; ===========================================================================
00082FF2                            
00082FF2                            loc_71C6E:
00082FF2 4A05                       		tst.b	d5
00082FF4 6A00                       		bpl.s	loc_71C84
00082FF6 1B45 0010                  		move.b	d5,$10(a5)
00082FFA 1A1C                       		move.b	(a4)+,d5
00082FFC 6A00                       		bpl.s	loc_71C84
00082FFE 534C                       		subq.w	#1,a4
00083000 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00083006 6000                       		bra.s	loc_71C88
00083008                            ; ===========================================================================
00083008                            
00083008                            loc_71C84:
00083008 4EBA 0000                  		jsr	sub_71D40(pc)
0008300C                            
0008300C                            loc_71C88:
0008300C 2B4C 0004                  		move.l	a4,4(a5)
00083010 0815 0002                  		btst	#2,(a5)
00083014 6600                       		bne.s	locret_71CAA
00083016 7000                       		moveq	#0,d0
00083018 102D 0010                  		move.b	$10(a5),d0
0008301C 0400 0080                  		subi.b	#$80,d0					; MJ: minus 80
00083020 D040                       		add.w	d0,d0					; MJ: multiply by 4 (long-word size)
00083022 D040                       		add.w	d0,d0					; MJ: ''
00083024 48E7 00C0                  		movem.l	a0/a1,-(sp)				; MJ: store register data
00083028 41F9 0000 0000             		lea	(SampleList).l,a0			; MJ: load sample list
0008302E 2070 0000                  		move.l	(a0,d0.w),a0				; MJ: load correct sample z80 pointer address
00083032                            
00083032 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)				; MJ: is this PCM 1?
00083038 6600                       		bne.s	WritePCM2				; MJ: if not, branch for PCM 2 writing
0008303A                            
0008303A                            	; --- Writing to PCM 1 ---
0008303A                            
0008303A 33FC 0100 00A1 1100 0839+  		StopZ80
0008304C 43F9 00A0 02E6             		lea	($A00000+PCM1_Sample).l,a1			; MJ: load PCM 1 slot address
00083052 12D8                       		move.b	(a0)+,(a1)+					; MJ: set address of sample
00083054 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00083056 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00083058 13FC 0064 00A0 0047        		move.b	#(CUPCM1_NewSample&$FF),($A00000+CU_Stack).l	; MJ: set routine to run
00083060 13FC 0002 00A0 0048        		move.b	#(CUPCM1_NewSample>>$08),($A00000+CU_Stack+1).l	; MJ: ''
00083068 13FC 00C9 00A0 01D2        		move.b	#%11001001,($A00000+CUPCM1_RET).l		; MJ: change "NOP" to "RET"
00083070 33FC 0000 00A1 1100        		StartZ80
00083078                            
00083078 4CDF 0300                  		movem.l	(sp)+,a0/a1				; MJ: restore register data
0008307C                            
0008307C                            locret_71CAA:
0008307C 4E75                       		rts						; MJ: return
0008307E                            
0008307E                            	; --- Writing to PCM 2 ---
0008307E                            
0008307E                            WritePCM2:
0008307E 33FC 0100 00A1 1100 0839+  		StopZ80
00083090 43F9 00A0 02E9             		lea	($A00000+PCM2_Sample).l,a1			; MJ: load PCM 2 slot address
00083096 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00083098 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
0008309A 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
0008309C 13FC 0028 00A0 01D3        		move.b	#%00101000,($A00000+CUPCM2_RET).l		; change "JR NZ" to "JR Z"
000830A4 33FC 0000 00A1 1100        		StartZ80
000830AC                            
000830AC 4CDF 0300                  		movem.l	(sp)+,a0/a1				; MJ: restore register data
000830B0 4E75                       		rts						; MJ: return
000830B2                            
000830B2                            ; ===========================================================================
000830B2                            
000830B2                            sub_71CCA:				; XREF: sub_71B4C
000830B2 532D 000E                  		subq.b	#1,$E(a5)
000830B6 6600                       		bne.s	loc_71CE0
000830B8 0895 0004                  		bclr	#4,(a5)
000830BC 4EBA 0000                  		jsr	sub_71CEC(pc)
000830C0 4EBA 0000                  		jsr	sub_71E18(pc)
000830C4 6000 0000                  		bra.w	loc_726E2
000830C8                            ; ===========================================================================
000830C8                            
000830C8                            loc_71CE0:
000830C8 4EBA 0000                  		jsr	sub_71D9E(pc)
000830CC 4EBA 0000                  		jsr	sub_71DC6(pc)
000830D0 6000 0000                  		bra.w	loc_71E24
000830D4                            ; End of function sub_71CCA
000830D4                            
000830D4                            
000830D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000830D4                            
000830D4                            
000830D4                            sub_71CEC:				; XREF: sub_71CCA
000830D4 286D 0004                  		movea.l	4(a5),a4
000830D8 0895 0001                  		bclr	#1,(a5)
000830DC                            
000830DC                            loc_71CF4:
000830DC 7A00                       		moveq	#0,d5
000830DE 1A1C                       		move.b	(a4)+,d5
000830E0 0C05 00E0                  		cmpi.b	#-$20,d5
000830E4 6500                       		bcs.s	loc_71D04
000830E6 4EBA 0000                  		jsr	sub_72A5A(pc)
000830EA 60F0                       		bra.s	loc_71CF4
000830EC                            ; ===========================================================================
000830EC                            
000830EC                            loc_71D04:
000830EC 4EBA 0000                  		jsr	sub_726FE(pc)
000830F0 4A05                       		tst.b	d5
000830F2 6A00                       		bpl.s	loc_71D1A
000830F4 4EBA 0000                  		jsr	sub_71D22(pc)
000830F8 1A1C                       		move.b	(a4)+,d5
000830FA 6A00                       		bpl.s	loc_71D1A
000830FC 534C                       		subq.w	#1,a4
000830FE 6000 0000                  		bra.w	sub_71D60
00083102                            ; ===========================================================================
00083102                            
00083102                            loc_71D1A:
00083102 4EBA 0000                  		jsr	sub_71D40(pc)
00083106 6000 0000                  		bra.w	sub_71D60
0008310A                            ; End of function sub_71CEC
0008310A                            
0008310A                            
0008310A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008310A                            
0008310A                            
0008310A                            sub_71D22:				; XREF: sub_71CEC
0008310A 0405 0080                  		subi.b	#$80,d5
0008310E 6700                       		beq.s	loc_71D58
00083110 DA2D 0008                  		add.b	8(a5),d5
00083114 0245 007F                  		andi.w	#$7F,d5
00083118 E34D                       		lsl.w	#1,d5
0008311A 41FA 0000                  		lea	word_72790(pc),a0
0008311E 3C30 5000                  		move.w	(a0,d5.w),d6
00083122 3B46 0010                  		move.w	d6,$10(a5)
00083126 4E75                       		rts	
00083128                            ; End of function sub_71D22
00083128                            
00083128                            
00083128                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083128                            
00083128                            
00083128                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00083128 1005                       		move.b	d5,d0
0008312A 122D 0002                  		move.b	2(a5),d1
0008312E                            
0008312E                            loc_71D46:
0008312E 5301                       		subq.b	#1,d1
00083130 6700                       		beq.s	loc_71D4E
00083132 D005                       		add.b	d5,d0
00083134 60F8                       		bra.s	loc_71D46
00083136                            ; ===========================================================================
00083136                            
00083136                            loc_71D4E:
00083136 1B40 000F                  		move.b	d0,$F(a5)
0008313A 1B40 000E                  		move.b	d0,$E(a5)
0008313E 4E75                       		rts	
00083140                            ; End of function sub_71D40
00083140                            
00083140                            ; ===========================================================================
00083140                            
00083140                            loc_71D58:				; XREF: sub_71D22
00083140 08D5 0001                  		bset	#1,(a5)
00083144 426D 0010                  		clr.w	$10(a5)
00083148                            
00083148                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083148                            
00083148                            
00083148                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
00083148 2B4C 0004                  		move.l	a4,4(a5)
0008314C 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00083152 0815 0004                  		btst	#4,(a5)
00083156 6600                       		bne.s	locret_71D9C
00083158 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
0008315E 422D 000C                  		clr.b	$C(a5)
00083162 0815 0003                  		btst	#3,(a5)
00083166 6700                       		beq.s	locret_71D9C
00083168 206D 0014                  		movea.l	$14(a5),a0
0008316C 1B58 0018                  		move.b	(a0)+,$18(a5)
00083170 1B58 0019                  		move.b	(a0)+,$19(a5)
00083174 1B58 001A                  		move.b	(a0)+,$1A(a5)
00083178 1018                       		move.b	(a0)+,d0
0008317A E208                       		lsr.b	#1,d0
0008317C 1B40 001B                  		move.b	d0,$1B(a5)
00083180 426D 001C                  		clr.w	$1C(a5)
00083184                            
00083184                            locret_71D9C:
00083184 4E75                       		rts	
00083186                            ; End of function sub_71D60
00083186                            
00083186                            
00083186                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083186                            
00083186                            
00083186                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
00083186 4A2D 0012                  		tst.b	$12(a5)
0008318A 6700                       		beq.s	locret_71DC4
0008318C 532D 0012                  		subq.b	#1,$12(a5)
00083190 6600                       		bne.s	locret_71DC4
00083192 08D5 0001                  		bset	#1,(a5)
00083196 4A2D 0001                  		tst.b	1(a5)
0008319A 6B00 0000                  		bmi.w	loc_71DBE
0008319E 4EBA 0000                  		jsr	sub_726FE(pc)
000831A2 584F                       		addq.w	#4,sp
000831A4 4E75                       		rts	
000831A6                            ; ===========================================================================
000831A6                            
000831A6                            loc_71DBE:
000831A6 4EBA 0000                  		jsr	sub_729A0(pc)
000831AA 584F                       		addq.w	#4,sp
000831AC                            
000831AC                            locret_71DC4:
000831AC 4E75                       		rts	
000831AE                            ; End of function sub_71D9E
000831AE                            
000831AE                            
000831AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000831AE                            
000831AE                            
000831AE                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
000831AE 584F                       		addq.w	#4,sp
000831B0 0815 0003                  		btst	#3,(a5)
000831B4 6700                       		beq.s	locret_71E16
000831B6 4A2D 0018                  		tst.b	$18(a5)
000831BA 6700                       		beq.s	loc_71DDA
000831BC 532D 0018                  		subq.b	#1,$18(a5)
000831C0 4E75                       		rts	
000831C2                            ; ===========================================================================
000831C2                            
000831C2                            loc_71DDA:
000831C2 532D 0019                  		subq.b	#1,$19(a5)
000831C6 6700                       		beq.s	loc_71DE2
000831C8 4E75                       		rts	
000831CA                            ; ===========================================================================
000831CA                            
000831CA                            loc_71DE2:
000831CA 206D 0014                  		movea.l	$14(a5),a0
000831CE 1B68 0001 0019             		move.b	1(a0),$19(a5)
000831D4 4A2D 001B                  		tst.b	$1B(a5)
000831D8 6600                       		bne.s	loc_71DFE
000831DA 1B68 0003 001B             		move.b	3(a0),$1B(a5)
000831E0 442D 001A                  		neg.b	$1A(a5)
000831E4 4E75                       		rts	
000831E6                            ; ===========================================================================
000831E6                            
000831E6                            loc_71DFE:
000831E6 532D 001B                  		subq.b	#1,$1B(a5)
000831EA 1C2D 001A                  		move.b	$1A(a5),d6
000831EE 4886                       		ext.w	d6
000831F0 DC6D 001C                  		add.w	$1C(a5),d6
000831F4 3B46 001C                  		move.w	d6,$1C(a5)
000831F8 DC6D 0010                  		add.w	$10(a5),d6
000831FC 594F                       		subq.w	#4,sp
000831FE                            
000831FE                            locret_71E16:
000831FE 4E75                       		rts	
00083200                            ; End of function sub_71DC6
00083200                            
00083200                            
00083200                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083200                            
00083200                            
00083200                            sub_71E18:				; XREF: sub_71CCA
00083200 0815 0001                  		btst	#1,(a5)
00083204 6600                       		bne.s	locret_71E48
00083206 3C2D 0010                  		move.w	$10(a5),d6
0008320A 6700                       		beq.s	loc_71E4A
0008320C                            
0008320C                            loc_71E24:				; XREF: sub_71CCA
0008320C 102D 001E                  		move.b	$1E(a5),d0
00083210 4880                       		ext.w	d0
00083212 DC40                       		add.w	d0,d6
00083214 0815 0002                  		btst	#2,(a5)
00083218 6600                       		bne.s	locret_71E48
0008321A 3206                       		move.w	d6,d1
0008321C E049                       		lsr.w	#8,d1
0008321E 103C 00A4                  		move.b	#-$5C,d0
00083222 4EBA 0000                  		jsr	sub_72722(pc)
00083226 1206                       		move.b	d6,d1
00083228 103C 00A0                  		move.b	#-$60,d0
0008322C 4EBA 0000                  		jsr	sub_72722(pc)
00083230                            
00083230                            locret_71E48:
00083230 4E75                       		rts	
00083232                            ; ===========================================================================
00083232                            
00083232                            loc_71E4A:
00083232 08D5 0001                  		bset	#1,(a5)
00083236 4E75                       		rts	
00083238                            ; End of function sub_71E18
00083238                            
00083238                            ; ===========================================================================
00083238                            
00083238                            loc_71E50:				; XREF: sub_71B4C
00083238 6B00                       		bmi.s	loc_71E94
0008323A 0C2E 0002 0003             		cmpi.b	#2,3(a6)
00083240 6700 0000                  		beq.w	loc_71EFE
00083244 1D7C 0002 0003             		move.b	#2,3(a6)
0008324A 7602                       		moveq	#2,d3
0008324C 103C 00B4                  		move.b	#-$4C,d0
00083250 7200                       		moveq	#0,d1
00083252                            
00083252                            loc_71E6A:
00083252 4EBA 0000                  		jsr	sub_7272E(pc)
00083256 4EBA 0000                  		jsr	sub_72764(pc)
0008325A 5200                       		addq.b	#1,d0
0008325C 51CB FFF4                  		dbf	d3,loc_71E6A
00083260                            
00083260 7602                       		moveq	#2,d3
00083262 7028                       		moveq	#$28,d0
00083264                            
00083264                            loc_71E7C:
00083264 1203                       		move.b	d3,d1
00083266 4EBA 0000                  		jsr	sub_7272E(pc)
0008326A 5801                       		addq.b	#4,d1
0008326C 4EBA 0000                  		jsr	sub_7272E(pc)
00083270 51CB FFF2                  		dbf	d3,loc_71E7C
00083274                            
00083274 4EBA 0000                  		jsr	sub_729B6(pc)
00083278 6000 FD04                  		bra.w	loc_71C44
0008327C                            ; ===========================================================================
0008327C                            
0008327C                            loc_71E94:				; XREF: loc_71E50
0008327C 422E 0003                  		clr.b	3(a6)
00083280 7630                       		moveq	#$30,d3
00083282 4BEE 0040                  		lea	$40(a6),a5
00083286 7807                       		moveq	#7,d4					; MJ: number of YM2612 based channels
00083288                            
00083288                            loc_71EA0:
00083288 0815 0007                  		btst	#7,(a5)
0008328C 6700                       		beq.s	loc_71EB8
0008328E 0815 0002                  		btst	#2,(a5)
00083292 6600                       		bne.s	loc_71EB8
00083294 103C 00B4                  		move.b	#-$4C,d0
00083298 122D 000A                  		move.b	$A(a5),d1
0008329C 4EBA 0000                  		jsr	sub_72722(pc)
000832A0                            
000832A0                            loc_71EB8:
000832A0 DAC3                       		adda.w	d3,a5
000832A2 51CC FFE4                  		dbf	d4,loc_71EA0
000832A6                            
000832A6 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
000832AA 7802                       		moveq	#2,d4
000832AC                            
000832AC                            loc_71EC4:
000832AC 0815 0007                  		btst	#7,(a5)
000832B0 6700                       		beq.s	loc_71EDC
000832B2 0815 0002                  		btst	#2,(a5)
000832B6 6600                       		bne.s	loc_71EDC
000832B8 103C 00B4                  		move.b	#-$4C,d0
000832BC 122D 000A                  		move.b	$A(a5),d1
000832C0 4EBA 0000                  		jsr	sub_72722(pc)
000832C4                            
000832C4                            loc_71EDC:
000832C4 DAC3                       		adda.w	d3,a5
000832C6 51CC FFE4                  		dbf	d4,loc_71EC4
000832CA                            
000832CA 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000832CE 0815 0007                  		btst	#7,(a5)
000832D2 6700                       		beq.s	loc_71EFE
000832D4 0815 0002                  		btst	#2,(a5)
000832D8 6600                       		bne.s	loc_71EFE
000832DA 103C 00B4                  		move.b	#-$4C,d0
000832DE 122D 000A                  		move.b	$A(a5),d1
000832E2 4EBA 0000                  		jsr	sub_72722(pc)
000832E6                            
000832E6                            loc_71EFE:
000832E6 6000 FC96                  		bra.w	loc_71C44
000832EA                            
000832EA                            ; ---------------------------------------------------------------------------
000832EA                            ; Subroutine to	play a sound or	music track
000832EA                            ; ---------------------------------------------------------------------------
000832EA                            
000832EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000832EA                            
000832EA                            
000832EA                            Sound_Play:				; XREF: sub_71B4C
000832EA 2079 0008 2C5E             		movea.l	(Go_SoundTypes).l,a0
000832F0 43EE 000A                  		lea	$A(a6),a1	; load music track number
000832F4 1616                       		move.b	0(a6),d3
000832F6 7802                       		moveq	#2,d4
000832F8                            
000832F8                            loc_71F12:
000832F8 1011                       		move.b	(a1),d0		; move track number to d0
000832FA 1200                       		move.b	d0,d1
000832FC 4219                       		clr.b	(a1)+
000832FE 0400 0081                  		subi.b	#$81,d0
00083302 6500                       		bcs.s	loc_71F3E
00083304 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0008330A 6700                       		beq.s	loc_71F2C
0008330C 1D41 000A                  		move.b	d1,$A(a6)
00083310 6000                       		bra.s	loc_71F3E
00083312                            ; ===========================================================================
00083312                            
00083312                            loc_71F2C:
00083312 0240 007F                  		andi.w	#$7F,d0
00083316 1430 0000                  		move.b	(a0,d0.w),d2
0008331A B403                       		cmp.b	d3,d2
0008331C 6500                       		bcs.s	loc_71F3E
0008331E 1602                       		move.b	d2,d3
00083320 1D41 0009                  		move.b	d1,9(a6)	; set music flag
00083324                            
00083324                            loc_71F3E:
00083324 51CC FFD2                  		dbf	d4,loc_71F12
00083328                            
00083328 4A03                       		tst.b	d3
0008332A 6B00                       		bmi.s	locret_71F4A
0008332C 1C83                       		move.b	d3,0(a6)
0008332E                            
0008332E                            locret_71F4A:
0008332E 4E75                       		rts	
00083330                            ; End of function Sound_Play
00083330                            
00083330                            
00083330                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083330                            
00083330                            
00083330                            Sound_ChkValue:				; XREF: sub_71B4C
00083330 7E00                       		moveq	#0,d7
00083332 1E2E 0009                  		move.b	9(a6),d7
00083336 6700 0000                  		beq.w	Sound_E4
0008333A 6A00                       		bpl.s	locret_71F8C
0008333C 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
00083342 0C07 009F                  		cmpi.b	#$9F,d7
00083346 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
0008334A 0C07 00A0                  		cmpi.b	#$A0,d7
0008334E 6500 0000                  		bcs.w	locret_71F8C
00083352 0C07 00CF                  		cmpi.b	#$CF,d7
00083356 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
0008335A 0C07 00D0                  		cmpi.b	#$D0,d7
0008335E 6500 0000                  		bcs.w	locret_71F8C
00083362 0C07 00D1                  		cmpi.b	#$D1,d7
00083366 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
0008336A 0C07 00DF                  		cmpi.b	#$DF,d7
0008336E 6500 0000                  		blo.w	Sound_D1toDF	; sound	$D1-$DF
00083372 0C07 00E4                  		cmpi.b	#$E4,d7
00083376 6300                       		bls.s	Sound_E0toE4	; sound	$E0-$E4
00083378                            
00083378                            locret_71F8C:
00083378 4E75                       		rts	
0008337A                            ; ===========================================================================
0008337A                            
0008337A                            Sound_E0toE4:				; XREF: Sound_ChkValue
0008337A 0407 00E0                  		subi.b	#$E0,d7
0008337E E54F                       		lsl.w	#2,d7
00083380 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
00083384                            ; ===========================================================================
00083384                            
00083384                            Sound_ExIndex:
00083384 6000 0000                  		bra.w	Sound_E0
00083388                            ; ===========================================================================
00083388 6000 0000                  		bra.w	Sound_E1
0008338C                            ; ===========================================================================
0008338C 6000 0000                  		bra.w	Sound_E2
00083390                            ; ===========================================================================
00083390 6000 0000                  		bra.w	Sound_E3
00083394                            ; ===========================================================================
00083394 6000 0000                  		bra.w	Sound_E4
00083398                            ; ===========================================================================
00083398                            ; ---------------------------------------------------------------------------
00083398                            ; Play "Say-gaa" PCM sound
00083398                            ; ---------------------------------------------------------------------------
00083398                            
00083398                            Sound_E1:
00083398 33FC 0100 00A1 1100 0839+  		StopZ80						; MJ: request Z80 stop "ON"
000833AA 45F9 0000 0000             		lea	(SegaPCM).l,a2				; MJ: load sample address
000833B0 47F9 00A0 4000             		lea	($A04000).l,a3				; MJ: load YM2612 port
000833B6 16FC 002A                  		move.b	#$2A,(a3)+				; MJ: set YM2612 address to the PCM data port
000833BA 283C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM)-$01,d4		; MJ: prepare size
000833C0 3604                       		move.w	d4,d3					; MJ: get lower word size
000833C2 4844                       		swap	d4					; MJ: get upper word size
000833C4                            
000833C4                            PlayPCM_Loop:
000833C4 169A                       		move.b	(a2)+,(a3)				; MJ: save sample data to port
000833C6 702B                       		moveq	#$2B,d0					; MJ: set delay time
000833C8 51C8 FFFE                  		dbf	d0,*					; MJ: delay...
000833CC 51CB FFF6                  		dbf	d3,PlayPCM_Loop				; MJ: repeat til done
000833D0 51CC FFF2                  		dbf	d4,PlayPCM_Loop				; MJ: ''
000833D4 16BC 0080                  		move.b	#$80,(a3)				; MJ: save mute data to port
000833D8 584F                       		addq.w	#$04,sp					; MJ: skip return address
000833DA 534B                       		subq.w	#$01,a3					; MJ: move back to address port
000833DC 4A13                       		tst.b	(a3)					; MJ: is the YM2612 busy?
000833DE 6BFC                       		bmi.s	*-$02					; MJ: if so, branch and recheck
000833E0 16BC 002A                  		move.b	#$2A,(a3)				; MJ: write address (set it back to DAC port for the Z80)
000833E4 33FC 0000 00A1 1100        		StartZ80					; MJ: request Z80 stop "OFF"
000833EC 4E75                       		rts						; MJ: return
000833EE                            
000833EE                            ; ===========================================================================
000833EE                            ; ---------------------------------------------------------------------------
000833EE                            ; Play music track $81-$9F
000833EE                            ; ---------------------------------------------------------------------------
000833EE                            
000833EE                            Sound_81to9F:				; XREF: Sound_ChkValue
000833EE                            
000833EE                            
000833EE 33FC 0100 00A1 1100 0839+  		StopZ80
00083400 41F9 0000 0000             		lea	(StopSample).l,a0				; MJ: load stop sample address
00083406 43F9 00A0 02E6             		lea	($A00000+PCM1_Sample).l,a1			; MJ: load PCM 1 slot address
0008340C 12D8                       		move.b	(a0)+,(a1)+					; MJ: set address of sample
0008340E 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00083410 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00083412 13FC 0064 00A0 0047        		move.b	#(CUPCM1_NewSample&$FF),($A00000+CU_Stack).l	; MJ: set routine to run
0008341A 13FC 0002 00A0 0048        		move.b	#(CUPCM1_NewSample>>$08),($A00000+CU_Stack+1).l	; MJ: ''
00083422 13FC 00C9 00A0 01D2        		move.b	#%11001001,($A00000+CUPCM1_RET).l		; MJ: change "NOP" to "RET"
0008342A 41F9 0000 0000             		lea	(StopSample).l,a0				; MJ: load stop sample address
00083430 43F9 00A0 02E9             		lea	($A00000+PCM2_Sample).l,a1			; MJ: load PCM 2 slot address
00083436 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00083438 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
0008343A 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
0008343C 13FC 0028 00A0 01D3        		move.b	#%00101000,($A00000+CUPCM2_RET).l		; MJ: change "JR NZ" to "JR Z"
00083444 33FC 0000 00A1 1100        		StartZ80
0008344C                            
0008344C                            
0008344C                            
0008344C 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
00083450 6600                       		bne.s	loc_72024	; if not, branch
00083452 4A2E 0027                  		tst.b	$27(a6)
00083456 6600 0000                  		bne.w	loc_721B6
0008345A 4BEE 0040                  		lea	$40(a6),a5
0008345E 700A                       		moveq	#10,d0					; MJ: number of channels in total
00083460                            
00083460                            loc_71FE6:
00083460 0895 0002                  		bclr	#2,(a5)
00083464 DAFC 0030                  		adda.w	#$30,a5
00083468 51C8 FFF6                  		dbf	d0,loc_71FE6
0008346C                            
0008346C 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
00083470 7005                       		moveq	#5,d0
00083472                            
00083472                            loc_71FF8:
00083472 0895 0007                  		bclr	#7,(a5)
00083476 DAFC 0030                  		adda.w	#$30,a5
0008347A 51C8 FFF6                  		dbf	d0,loc_71FF8
0008347E 4216                       		clr.b	0(a6)
00083480 204E                       		movea.l	a6,a0
00083482 43EE 03D0                  		lea	$3D0(a6),a1				; MJ: new SFX location
00083486 303C 0087                  		move.w	#$87,d0
0008348A                            
0008348A                            loc_72012:
0008348A 22D8                       		move.l	(a0)+,(a1)+
0008348C 51C8 FFFC                  		dbf	d0,loc_72012
00083490                            
00083490 1D7C 0080 0027             		move.b	#$80,$27(a6)
00083496 4216                       		clr.b	0(a6)
00083498 6000                       		bra.s	loc_7202C
0008349A                            ; ===========================================================================
0008349A                            
0008349A                            loc_72024:
0008349A 422E 0027                  		clr.b	$27(a6)
0008349E 422E 0026                  		clr.b	$26(a6)
000834A2                            
000834A2                            loc_7202C:
000834A2 4EBA 0000                  		jsr	sub_725CA(pc)
000834A6 2879 0008 2C6E             		movea.l	(off_719A0).l,a4
000834AC 0407 0081                  		subi.b	#$81,d7
000834B0 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
000834B6 2879 0008 2C66             		movea.l	(Go_MusicIndex).l,a4
000834BC E54F                       		lsl.w	#2,d7
000834BE 2874 7000                  		movea.l	(a4,d7.w),a4
000834C2 7000                       		moveq	#0,d0
000834C4 3014                       		move.w	(a4),d0
000834C6 D08C                       		add.l	a4,d0
000834C8 2D40 0018                  		move.l	d0,$18(a6)
000834CC 102C 0005                  		move.b	5(a4),d0
000834D0 1D40 0028                  		move.b	d0,$28(a6)
000834D4 4A2E 002A                  		tst.b	$2A(a6)
000834D8 6700                       		beq.s	loc_72068
000834DA 102E 0029                  		move.b	$29(a6),d0
000834DE                            
000834DE                            loc_72068:
000834DE 1D40 0002                  		move.b	d0,2(a6)
000834E2 1D40 0001                  		move.b	d0,1(a6)
000834E6 7200                       		moveq	#0,d1
000834E8 264C                       		movea.l	a4,a3
000834EA 5C4C                       		addq.w	#6,a4
000834EC 7E00                       		moveq	#0,d7
000834EE 1E2B 0002                  		move.b	2(a3),d7
000834F2 6700 0000                  		beq.w	loc_72114
000834F6 5307                       		subq.b	#1,d7
000834F8 123C 00C0                  		move.b	#-$40,d1
000834FC 182B 0004                  		move.b	4(a3),d4
00083500 7C30                       		moveq	#$30,d6
00083502 1A3C 0001                  		move.b	#1,d5
00083506 43EE 0040                  		lea	$40(a6),a1
0008350A 45FA 0000                  		lea	byte_721BA(pc),a2
0008350E                            
0008350E                            loc_72098:
0008350E 08D1 0007                  		bset	#7,(a1)
00083512 135A 0001                  		move.b	(a2)+,1(a1)
00083516 1344 0002                  		move.b	d4,2(a1)
0008351A 1346 000D                  		move.b	d6,$D(a1)
0008351E 1341 000A                  		move.b	d1,$A(a1)
00083522 1345 000E                  		move.b	d5,$E(a1)
00083526 7000                       		moveq	#0,d0
00083528 3340 0010                  		move.w	d0,$10(a1)				; MJ: clear FM's frequency (ensures no frequency writing)
0008352C 301C                       		move.w	(a4)+,d0
0008352E D08B                       		add.l	a3,d0
00083530 2340 0004                  		move.l	d0,4(a1)
00083534 335C 0008                  		move.w	(a4)+,8(a1)
00083538 D2C6                       		adda.w	d6,a1
0008353A 51CF FFD2                  		dbf	d7,loc_72098
0008353E 702B                       		moveq	#$2B,d0					; MJ: set YM2612 address to DAC/FM6 switch
00083540 123C 0080                  		move.b	#%10000000,d1				; MJ: set to turn DAC on
00083544 0C2B 0008 0002             		cmpi.b	#8,2(a3)				; MJ: changed to 8 (8 = 6FM channels, no DAC)
0008354A 6600                       		bne.s	loc_720D8
0008354C                            	;	moveq	#$2B,d0					; MJ: removed...
0008354C 7200                       		moveq	#0,d1
0008354E 4EBA 0000                  		jsr	sub_7272E(pc)
00083552 6000 0000                  		bra.w	loc_72114
00083556                            ; ===========================================================================
00083556                            
00083556                            loc_720D8:
00083556 4EBA 0000                  		jsr	sub_7272E(pc)				; MJ: added... (turn DAC on)
0008355A 7028                       		moveq	#$28,d0
0008355C 7206                       		moveq	#6,d1
0008355E 4EBA 0000                  		jsr	sub_7272E(pc)
00083562 103C 0042                  		move.b	#$42,d0
00083566 727F                       		moveq	#$7F,d1
00083568 4EBA 0000                  		jsr	sub_72764(pc)
0008356C 103C 004A                  		move.b	#$4A,d0
00083570 727F                       		moveq	#$7F,d1
00083572 4EBA 0000                  		jsr	sub_72764(pc)
00083576 103C 0046                  		move.b	#$46,d0
0008357A 727F                       		moveq	#$7F,d1
0008357C 4EBA 0000                  		jsr	sub_72764(pc)
00083580 103C 004E                  		move.b	#$4E,d0
00083584 727F                       		moveq	#$7F,d1
00083586 4EBA 0000                  		jsr	sub_72764(pc)
0008358A 103C 00B6                  		move.b	#-$4A,d0
0008358E 123C 00C0                  		move.b	#-$40,d1
00083592 4EBA 0000                  		jsr	sub_72764(pc)
00083596                            
00083596                            loc_72114:
00083596 7A02                       		moveq	#$02,d5					; EXT: set PSG to delay for 1 extra frame (This is to match the PSG with the FM/DAC which is delayed a frame by the Z80)
00083598 7E00                       		moveq	#0,d7
0008359A 1E2B 0003                  		move.b	3(a3),d7
0008359E 6700                       		beq.s	loc_72154
000835A0 5307                       		subq.b	#1,d7
000835A2 43EE 01C0                  		lea	$1C0(a6),a1				; MJ: new BGM/SFX location
000835A6 45FA 0000                  		lea	byte_721C2(pc),a2
000835AA                            
000835AA                            loc_72126:
000835AA 08D1 0007                  		bset	#7,(a1)
000835AE 135A 0001                  		move.b	(a2)+,1(a1)
000835B2 1344 0002                  		move.b	d4,2(a1)
000835B6 1346 000D                  		move.b	d6,$D(a1)
000835BA 1345 000E                  		move.b	d5,$E(a1)
000835BE 337C FFFF 0010             		move.w	#$FFFF,$10(a1)				; MJ: clear PSG's frequency (ensures no frequency writing)
000835C4 137C 0001 0012             		move.b	#$01,$12(a1)				; MJ: set key release rate to 1
000835CA 7000                       		moveq	#0,d0
000835CC 301C                       		move.w	(a4)+,d0
000835CE D08B                       		add.l	a3,d0
000835D0 2340 0004                  		move.l	d0,4(a1)
000835D4 335C 0008                  		move.w	(a4)+,8(a1)
000835D8 101C                       		move.b	(a4)+,d0
000835DA 135C 000B                  		move.b	(a4)+,$B(a1)
000835DE D2C6                       		adda.w	d6,a1
000835E0 51CF FFC8                  		dbf	d7,loc_72126
000835E4                            
000835E4                            loc_72154:
000835E4 43EE 0250                  		lea	$250(a6),a1				; MJ: new SFX location
000835E8 7E05                       		moveq	#5,d7
000835EA                            
000835EA                            loc_7215A:
000835EA 4A11                       		tst.b	(a1)
000835EC 6A00 0000                  		bpl.w	loc_7217C
000835F0 7000                       		moveq	#0,d0
000835F2 1029 0001                  		move.b	1(a1),d0
000835F6 6B00                       		bmi.s	loc_7216E
000835F8 5500                       		subq.b	#2,d0
000835FA E508                       		lsl.b	#2,d0
000835FC 6000                       		bra.s	loc_72170
000835FE                            ; ===========================================================================
000835FE                            
000835FE                            loc_7216E:
000835FE E608                       		lsr.b	#3,d0
00083600                            
00083600                            loc_72170:
00083600 41FA 0000                  		lea	dword_722CC(pc),a0
00083604 2070 0000                  		movea.l	(a0,d0.w),a0
00083608 08D0 0002                  		bset	#2,(a0)
0008360C                            
0008360C                            loc_7217C:
0008360C D2C6                       		adda.w	d6,a1
0008360E 51CF FFDA                  		dbf	d7,loc_7215A
00083612                            
00083612 4A6E 0370                  		tst.w	$370(a6)				; MJ: new SFX location
00083616 6A00                       		bpl.s	loc_7218E
00083618 08EE 0002 0130             		bset	#2,$130(a6)				; MJ: new BGM location
0008361E                            
0008361E                            loc_7218E:
0008361E 4A6E 03A0                  		tst.w	$3A0(a6)				; MJ: new SFX location
00083622 6A00                       		bpl.s	loc_7219A
00083624 08EE 0002 0220             		bset	#2,$220(a6)				; MJ: new BGM location
0008362A                            
0008362A                            
0008362A                            loc_7219A:
0008362A 4BEE 00A0                  		lea	$A0(a6),a5				; MJ: new FM location
0008362E 7805                       		moveq	#5,d4
00083630                            
00083630                            loc_721A0:
00083630 4EBA 0000                  		jsr	sub_726FE(pc)
00083634 DAC6                       		adda.w	d6,a5
00083636 51CC FFF8                  		dbf	d4,loc_721A0
0008363A 7802                       		moveq	#2,d4
0008363C                            
0008363C                            loc_721AC:
0008363C 4EBA 0000                  		jsr	sub_729A0(pc)
00083640 DAC6                       		adda.w	d6,a5
00083642 51CC FFF8                  		dbf	d4,loc_721AC
00083646                            
00083646                            loc_721B6:
00083646 584F                       		addq.w	#4,sp
00083648 4E75                       		rts	
0008364A                            ; ===========================================================================
0008364A 0606 0001 0204 0506 00     byte_721BA:	dc.b 6,	6, 0, 1, 2, 4, 5, 6, 0			; MJ: extra 6 (for PCM 2)
00083654 00                         		even
00083654 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
00083658                            		even
00083658                            ; ===========================================================================
00083658                            ; ---------------------------------------------------------------------------
00083658                            ; Play normal sound effect
00083658                            ; ---------------------------------------------------------------------------
00083658                            
00083658                            Sound_D1toDF:
00083658 4A2E 0027                  		tst.b	$27(a6)
0008365C 6600 0000                  		bne.w	loc_722C6
00083660 4A2E 0004                  		tst.b	4(a6)
00083664 6600 0000                  		bne.w	loc_722C6
00083668 4A2E 0024                  		tst.b	$24(a6)
0008366C 6600 0000                  		bne.w	loc_722C6
00083670 4238 C900                  		clr.b	($FFFFC900).w
00083674 0C07 00D1                  		cmp.b	#$D1,d7		; is this the Spin Dash sound?
00083678 6600                       		bne.s	@cont3	; if not, branch
0008367A 3F00                       		move.w	d0,-(sp)
0008367C 1038 C902                  		move.b	($FFFFC902).w,d0	; store extra frequency
00083680 4A38 C901                  		tst.b	($FFFFC901).w	; is the Spin Dash timer active?
00083684 6600                       		bne.s	@cont1		; if it is, branch
00083686 103C 00FF                  		move.b	#-1,d0		; otherwise, reset frequency (becomes 0 on next line)
0008368A                            		
0008368A                            @cont1:
0008368A 5200                       		addq.b	#1,d0
0008368C 0C00 000C                  		cmp.b	#$C,d0		; has the limit been reached?
00083690 6400                       		bcc.s	@cont2		; if it has, branch
00083692 11C0 C902                  		move.b	d0,($FFFFC902).w	; otherwise, set new frequency
00083696                            		
00083696                            @cont2:
00083696 11FC 0001 C900             		move.b	#1,($FFFFC900).w	; set flag
0008369C 11FC 003C C901             		move.b	#60,($FFFFC901).w	; set timer
000836A2 301F                       		move.w	(sp)+,d0
000836A4                            		
000836A4                            @cont3:
000836A4 2079 0008 2C6A             		movea.l	(Go_SoundIndex).l,a0
000836AA 0407 00A1                  		sub.b	#$A1,d7
000836AE 6000 0000                  		bra	SoundEffects_Common
000836B2                            
000836B2                            Sound_A0toCF:				; XREF: Sound_ChkValue
000836B2 4A2E 0027                  		tst.b	$27(a6)
000836B6 6600 0000                  		bne.w	loc_722C6
000836BA 4A2E 0004                  		tst.b	4(a6)
000836BE 6600 0000                  		bne.w	loc_722C6
000836C2 4A2E 0024                  		tst.b	$24(a6)
000836C6 6600 0000                  		bne.w	loc_722C6
000836CA 4238 C900                  		clr.b	($FFFFC900).w		
000836CE 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
000836D2 6600                       		bne.s	Sound_notB5	; if not, branch
000836D4 4A2E 002B                  		tst.b	$2B(a6)
000836D8 6600                       		bne.s	loc_721EE
000836DA 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
000836DE                            
000836DE                            loc_721EE:
000836DE 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
000836E4                            
000836E4                            Sound_notB5:
000836E4 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
000836E8 6600                       		bne.s	Sound_notA7	; if not, branch
000836EA 4A2E 002C                  		tst.b	$2C(a6)
000836EE 6600 0000                  		bne.w	locret_722C4
000836F2 1D7C 0080 002C             		move.b	#$80,$2C(a6)
000836F8                            
000836F8                            Sound_notA7:
000836F8 2079 0008 2C6A             		movea.l	(Go_SoundIndex).l,a0
000836FE 0407 00A0                  		subi.b	#$A0,d7
00083702                            SoundEffects_Common:
00083702 E54F                       		lsl.w	#2,d7
00083704 2670 7000                  		movea.l	(a0,d7.w),a3
00083708 224B                       		movea.l	a3,a1
0008370A 7200                       		moveq	#0,d1
0008370C 3219                       		move.w	(a1)+,d1
0008370E D28B                       		add.l	a3,d1
00083710 1A19                       		move.b	(a1)+,d5
00083712 1E19                       		move.b	(a1)+,d7
00083714 5307                       		subq.b	#1,d7
00083716 7C30                       		moveq	#$30,d6
00083718                            
00083718                            loc_72228:
00083718 7600                       		moveq	#0,d3
0008371A 1629 0001                  		move.b	1(a1),d3
0008371E 7402                       		moveq	#$02,d2					; EXT: set PSG to delay for 1 extra frame (This is to match the PSG with the FM/DAC which is delayed a frame by the Z80)
00083720 1803                       		move.b	d3,d4
00083722 6B00                       		bmi.s	loc_72244
00083724 143C 0001                  		move.b	#$01,d2					; EXT: set DAC/FM to delay for 0 frames like normal (these have an auto delay of 1 frame in the Z80)
00083728 5543                       		subq.w	#2,d3
0008372A E54B                       		lsl.w	#2,d3
0008372C 4BFA 0000                  		lea	dword_722CC(pc),a5
00083730 2A75 3000                  		movea.l	(a5,d3.w),a5
00083734 08D5 0002                  		bset	#2,(a5)
00083738 6000                       		bra.s	loc_7226E
0008373A                            		
0008373A                            ; ===========================================================================
0008373A                            
0008373A                            loc_72244:
0008373A E64B                       		lsr.w	#3,d3
0008373C 4BFA 0000                  		lea	dword_722CC(pc),a5
00083740 2A75 3000                  		movea.l	(a5,d3.w),a5
00083744 08D5 0002                  		bset	#2,(a5)
00083748 0C04 00C0                  		cmpi.b	#$C0,d4
0008374C 6600                       		bne.s	loc_7226E
0008374E 1004                       		move.b	d4,d0
00083750 0000 001F                  		ori.b	#$1F,d0
00083754 13C0 00C0 0011             		move.b	d0,($C00011).l
0008375A 0840 0005                  		bchg	#5,d0
0008375E 13C0 00C0 0011             		move.b	d0,($C00011).l
00083764                            
00083764                            loc_7226E:
00083764 4BFA 0000                  		lea	dword_722EC(pc),a5
00083768 2A75 3000                  		movea.l	(a5,d3.w),a5
0008376C 244D                       		movea.l	a5,a2
0008376E 700B                       		moveq	#$B,d0
00083770                            
00083770                            loc_72276:
00083770 429A                       		clr.l	(a2)+
00083772 51C8 FFFC                  		dbf	d0,loc_72276
00083776                            
00083776 3A99                       		move.w	(a1)+,(a5)
00083778 1B45 0002                  		move.b	d5,2(a5)
0008377C 7000                       		moveq	#0,d0
0008377E 3019                       		move.w	(a1)+,d0
00083780 D08B                       		add.l	a3,d0
00083782 2B40 0004                  		move.l	d0,4(a5)
00083786 3B59 0008                  		move.w	(a1)+,8(a5)
0008378A 4A38 C900                  		tst.b	($FFFFC900).w	; is the Spin Dash sound playing?
0008378E 6700                       		beq.s	@cont		; if not, branch
00083790 3F00                       		move.w	d0,-(sp)
00083792 1038 C902                  		move.b	($FFFFC902).w,d0
00083796 D12D 0008                  		add.b	d0,8(a5)
0008379A 301F                       		move.w	(sp)+,d0
0008379C                            		
0008379C                            @cont:
0008379C 1B42 000E                  		move.b	d2,$E(a5)				; EXT: moving d2 contents (1 for FM/4 for PSG)
000837A0 1B46 000D                  		move.b	d6,$D(a5)
000837A4 4A04                       		tst.b	d4
000837A6 6B00                       		bmi.s	loc_722A8
000837A8 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000837AE 2B41 0020                  		move.l	d1,$20(a5)
000837B2                            
000837B2                            loc_722A8:
000837B2 51CF FF64                  		dbf	d7,loc_72228
000837B6                            
000837B6 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
000837BA 6A00                       		bpl.s	loc_722B8
000837BC 08EE 0002 0370             		bset	#2,$370(a6)				; MJ: new SFX location
000837C2                            
000837C2                            loc_722B8:
000837C2 4A2E 0340                  		tst.b	$340(a6)				; MJ: new SFX location
000837C6 6A00                       		bpl.s	locret_722C4
000837C8 08EE 0002 03A0             		bset	#2,$3A0(a6)				; MJ: new SFX location
000837CE                            
000837CE                            locret_722C4:
000837CE 4E75                       		rts	
000837D0                            ; ===========================================================================
000837D0                            
000837D0                            loc_722C6:
000837D0 4216                       		clr.b	0(a6)
000837D2 4E75                       		rts	
000837D4                            ; ===========================================================================
000837D4 00FF F100                  dword_722CC:	dc.l $FFF0D0+$30				; MJ: new locations (see all +$30)
000837D8 0000 0000                  		dc.l 0
000837DC 00FF F130                  		dc.l $FFF100+$30
000837E0 00FF F160                  		dc.l $FFF130+$30
000837E4 00FF F1C0                  		dc.l $FFF190+$30
000837E8 00FF F1F0                  		dc.l $FFF1C0+$30
000837EC 00FF F220                  		dc.l $FFF1F0+$30
000837F0 00FF F220                  		dc.l $FFF1F0+$30
000837F4 00FF F250                  dword_722EC:	dc.l $FFF220+$30
000837F8 0000 0000                  		dc.l 0
000837FC 00FF F280                  		dc.l $FFF250+$30
00083800 00FF F2B0                  		dc.l $FFF280+$30
00083804 00FF F2E0                  		dc.l $FFF2B0+$30
00083808 00FF F310                  		dc.l $FFF2E0+$30
0008380C 00FF F340                  		dc.l $FFF310+$30
00083810 00FF F340                  		dc.l $FFF310+$30
00083814                            ; ===========================================================================
00083814                            ; ---------------------------------------------------------------------------
00083814                            ; Play GHZ waterfall sound
00083814                            ; ---------------------------------------------------------------------------
00083814                            
00083814                            Sound_D0toDF:				; XREF: Sound_ChkValue
00083814 4A2E 0027                  		tst.b	$27(a6)
00083818 6600 0000                  		bne.w	locret_723C6
0008381C 4A2E 0004                  		tst.b	4(a6)
00083820 6600 0000                  		bne.w	locret_723C6
00083824 4A2E 0024                  		tst.b	$24(a6)
00083828 6600 0000                  		bne.w	locret_723C6
0008382C 2079 0008 2C62             		movea.l	(Go_SoundD0).l,a0
00083832 0407 00D0                  		subi.b	#$D0,d7
00083836 E54F                       		lsl.w	#2,d7
00083838 2670 7000                  		movea.l	(a0,d7.w),a3
0008383C 224B                       		movea.l	a3,a1
0008383E 7000                       		moveq	#0,d0
00083840 3019                       		move.w	(a1)+,d0
00083842 D08B                       		add.l	a3,d0
00083844 2D40 0020                  		move.l	d0,$20(a6)
00083848 1A19                       		move.b	(a1)+,d5
0008384A 1E19                       		move.b	(a1)+,d7
0008384C 5307                       		subq.b	#1,d7
0008384E 7C30                       		moveq	#$30,d6
00083850                            
00083850                            loc_72348:
00083850 1829 0001                  		move.b	1(a1),d4
00083854 6B00                       		bmi.s	loc_7235A
00083856 08EE 0002 0130             		bset	#2,$130(a6)				; MJ: new BGM location
0008385C 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
00083860 6000                       		bra.s	loc_72364
00083862                            ; ===========================================================================
00083862                            
00083862                            loc_7235A:
00083862 08EE 0002 0220             		bset	#2,$220(a6)				; MJ: new BGM location
00083868 4BEE 03A0                  		lea	$3A0(a6),a5				; MJ: new SFX location
0008386C                            
0008386C                            loc_72364:
0008386C 244D                       		movea.l	a5,a2
0008386E 700B                       		moveq	#$B,d0
00083870                            
00083870                            loc_72368:
00083870 429A                       		clr.l	(a2)+
00083872 51C8 FFFC                  		dbf	d0,loc_72368
00083876                            
00083876 3A99                       		move.w	(a1)+,(a5)
00083878 1B45 0002                  		move.b	d5,2(a5)
0008387C 7000                       		moveq	#0,d0
0008387E 3019                       		move.w	(a1)+,d0
00083880 D08B                       		add.l	a3,d0
00083882 2B40 0004                  		move.l	d0,4(a5)
00083886 3B59 0008                  		move.w	(a1)+,8(a5)
0008388A 1B7C 0001 000E             		move.b	#1,$E(a5)
00083890 1B46 000D                  		move.b	d6,$D(a5)
00083894 4A04                       		tst.b	d4
00083896 6B00                       		bmi.s	loc_72396
00083898 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0008389E                            
0008389E                            loc_72396:
0008389E 51CF FFB0                  		dbf	d7,loc_72348
000838A2                            
000838A2 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
000838A6 6A00                       		bpl.s	loc_723A6
000838A8 08EE 0002 0370             		bset	#2,$370(a6)				; MJ: new SFX location
000838AE                            
000838AE                            loc_723A6:
000838AE 4A2E 0340                  		tst.b	$340(a6)				; MJ: new SFX location
000838B2 6A00                       		bpl.s	locret_723C6
000838B4 08EE 0002 03A0             		bset	#2,$3A0(a6)				; MJ: new SFX location
000838BA 0004 001F                  		ori.b	#$1F,d4
000838BE 13C4 00C0 0011             		move.b	d4,($C00011).l
000838C4 0844 0005                  		bchg	#5,d4
000838C8 13C4 00C0 0011             		move.b	d4,($C00011).l
000838CE                            
000838CE                            locret_723C6:
000838CE 4E75                       		rts	
000838D0                            ; End of function Sound_ChkValue
000838D0                            
000838D0                            ; ===========================================================================
000838D0 00FF F130                  		dc.l $FFF100+$30				; MJ: new channel locations (see +$30)
000838D4 00FF F220                  		dc.l $FFF1F0+$30
000838D8 00FF F280                  		dc.l $FFF250+$30
000838DC 00FF F340                  		dc.l $FFF310+$30
000838E0 00FF F370                  		dc.l $FFF340+$30
000838E4 00FF F3A0                  		dc.l $FFF370+$30
000838E8                            
000838E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000838E8                            
000838E8                            
000838E8                            Snd_FadeOut1:				; XREF: Sound_E0
000838E8 4216                       		clr.b	0(a6)
000838EA 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
000838EE 7E05                       		moveq	#5,d7
000838F0                            
000838F0                            loc_723EA:
000838F0 4A15                       		tst.b	(a5)
000838F2 6A00 0000                  		bpl.w	loc_72472
000838F6 0895 0007                  		bclr	#7,(a5)
000838FA 7600                       		moveq	#0,d3
000838FC 162D 0001                  		move.b	1(a5),d3
00083900 6B00                       		bmi.s	loc_7243C
00083902 4EBA 0000                  		jsr	sub_726FE(pc)
00083906 0C03 0004                  		cmpi.b	#4,d3
0008390A 6600                       		bne.s	loc_72416
0008390C 4A2E 0370                  		tst.b	$370(a6)				; MJ: new SFX location
00083910 6A00                       		bpl.s	loc_72416
00083912 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
00083916 226E 0020                  		movea.l	$20(a6),a1
0008391A 6000                       		bra.s	loc_72428
0008391C                            ; ===========================================================================
0008391C                            
0008391C                            loc_72416:
0008391C 5503                       		subq.b	#2,d3
0008391E E50B                       		lsl.b	#2,d3
00083920 41FA FEB2                  		lea	dword_722CC(pc),a0
00083924 264D                       		movea.l	a5,a3
00083926 2A70 3000                  		movea.l	(a0,d3.w),a5
0008392A 226E 0018                  		movea.l	$18(a6),a1
0008392E                            
0008392E                            loc_72428:
0008392E 0895 0002                  		bclr	#2,(a5)
00083932 08D5 0001                  		bset	#1,(a5)
00083936 102D 000B                  		move.b	$B(a5),d0
0008393A 4EBA 0000                  		jsr	sub_72C4E(pc)
0008393E 2A4B                       		movea.l	a3,a5
00083940 6000                       		bra.s	loc_72472
00083942                            ; ===========================================================================
00083942                            
00083942                            loc_7243C:
00083942 4EBA 0000                  		jsr	sub_729A0(pc)
00083946 41EE 03A0                  		lea	$3A0(a6),a0				; MJ: new SFX location
0008394A 0C03 00E0                  		cmpi.b	#$E0,d3
0008394E 6700                       		beq.s	loc_7245A
00083950 0C03 00C0                  		cmpi.b	#$C0,d3
00083954 6700                       		beq.s	loc_7245A
00083956 E60B                       		lsr.b	#3,d3
00083958 41FA FE7A                  		lea	dword_722CC(pc),a0
0008395C 2070 3000                  		movea.l	(a0,d3.w),a0
00083960                            
00083960                            loc_7245A:
00083960 0890 0002                  		bclr	#2,(a0)
00083964 08D0 0001                  		bset	#1,(a0)
00083968 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0008396E 6600                       		bne.s	loc_72472
00083970 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00083978                            
00083978                            loc_72472:
00083978 DAFC 0030                  		adda.w	#$30,a5
0008397C 51CF FF72                  		dbf	d7,loc_723EA
00083980                            
00083980 4E75                       		rts	
00083982                            ; End of function Snd_FadeOut1
00083982                            
00083982                            
00083982                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083982                            
00083982                            
00083982                            Snd_FadeOut2:				; XREF: Sound_E0
00083982 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
00083986 4A15                       		tst.b	(a5)
00083988 6A00                       		bpl.s	loc_724AE
0008398A 0895 0007                  		bclr	#7,(a5)
0008398E 0815 0002                  		btst	#2,(a5)
00083992 6600                       		bne.s	loc_724AE
00083994 4EBA 0000                  		jsr	loc_7270A(pc)
00083998 4BEE 0130                  		lea	$130(a6),a5				; MJ: new BGM location
0008399C 0895 0002                  		bclr	#2,(a5)
000839A0 08D5 0001                  		bset	#1,(a5)
000839A4 4A15                       		tst.b	(a5)
000839A6 6A00                       		bpl.s	loc_724AE
000839A8 226E 0018                  		movea.l	$18(a6),a1
000839AC 102D 000B                  		move.b	$B(a5),d0
000839B0 4EBA 0000                  		jsr	sub_72C4E(pc)
000839B4                            
000839B4                            loc_724AE:
000839B4 4BEE 03A0                  		lea	$3A0(a6),a5				; MJ: new SFX location
000839B8 4A15                       		tst.b	(a5)
000839BA 6A00                       		bpl.s	locret_724E4
000839BC 0895 0007                  		bclr	#7,(a5)
000839C0 0815 0002                  		btst	#2,(a5)
000839C4 6600                       		bne.s	locret_724E4
000839C6 4EBA 0000                  		jsr	loc_729A6(pc)
000839CA 4BEE 0220                  		lea	$220(a6),a5				; MJ: new BGM location
000839CE 0895 0002                  		bclr	#2,(a5)
000839D2 08D5 0001                  		bset	#1,(a5)
000839D6 4A15                       		tst.b	(a5)
000839D8 6A00                       		bpl.s	locret_724E4
000839DA 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
000839E0 6600                       		bne.s	locret_724E4
000839E2 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
000839EA                            
000839EA                            locret_724E4:
000839EA 4E75                       		rts	
000839EC                            ; End of function Snd_FadeOut2
000839EC                            
000839EC                            ; ===========================================================================
000839EC                            ; ---------------------------------------------------------------------------
000839EC                            ; Fade out music
000839EC                            ; ---------------------------------------------------------------------------
000839EC                            
000839EC                            Sound_E0:				; XREF: Sound_ExIndex
000839EC 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
000839F0 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
000839F4 1D7C 0003 0006             		move.b	#3,6(a6)
000839FA 1D7C 0028 0004             		move.b	#$28,4(a6)
00083A00 422E 0040                  		clr.b	$40(a6)
00083A04 422E 0070                  		clr.b	$70(a6)					; MJ: stop PCM 2 as well
00083A08 422E 002A                  		clr.b	$2A(a6)
00083A0C 4E75                       		rts	
00083A0E                            
00083A0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083A0E                            
00083A0E                            
00083A0E                            sub_72504:				; XREF: sub_71B4C
00083A0E 102E 0006                  		move.b	6(a6),d0
00083A12 6700                       		beq.s	loc_72510
00083A14 532E 0006                  		subq.b	#1,6(a6)
00083A18 4E75                       		rts	
00083A1A                            ; ===========================================================================
00083A1A                            
00083A1A                            loc_72510:
00083A1A 532E 0004                  		subq.b	#1,4(a6)
00083A1E 6700 0000                  		beq.w	Sound_E4
00083A22 1D7C 0003 0006             		move.b	#3,6(a6)
00083A28 4BEE 00A0                  		lea	$A0(a6),a5				; MJ: new FM location
00083A2C 7E05                       		moveq	#5,d7
00083A2E                            
00083A2E                            loc_72524:
00083A2E 4A15                       		tst.b	(a5)
00083A30 6A00                       		bpl.s	loc_72538
00083A32 522D 0009                  		addq.b	#1,9(a5)
00083A36 6A00                       		bpl.s	loc_72534
00083A38 0895 0007                  		bclr	#7,(a5)
00083A3C 6000                       		bra.s	loc_72538
00083A3E                            ; ===========================================================================
00083A3E                            
00083A3E                            loc_72534:
00083A3E 4EBA 0000                  		jsr	sub_72CB4(pc)
00083A42                            
00083A42                            loc_72538:
00083A42 DAFC 0030                  		adda.w	#$30,a5
00083A46 51CF FFE6                  		dbf	d7,loc_72524
00083A4A                            
00083A4A 7E02                       		moveq	#2,d7
00083A4C                            
00083A4C                            loc_72542:
00083A4C 4A15                       		tst.b	(a5)
00083A4E 6A00                       		bpl.s	loc_72560
00083A50 522D 0009                  		addq.b	#1,9(a5)
00083A54 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
00083A5A 6500                       		bcs.s	loc_72558
00083A5C 0895 0007                  		bclr	#7,(a5)
00083A60 6000                       		bra.s	loc_72560
00083A62                            ; ===========================================================================
00083A62                            
00083A62                            loc_72558:
00083A62 1C2D 0009                  		move.b	9(a5),d6
00083A66 4EBA 0000                  		jsr	sub_7296A(pc)
00083A6A                            
00083A6A                            loc_72560:
00083A6A DAFC 0030                  		adda.w	#$30,a5
00083A6E 51CF FFDC                  		dbf	d7,loc_72542
00083A72                            
00083A72 4E75                       		rts	
00083A74                            ; End of function sub_72504
00083A74                            
00083A74                            
00083A74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083A74                            
00083A74                            
00083A74                            sub_7256A:				; XREF: Sound_E4; sub_725CA
00083A74 7602                       		moveq	#2,d3
00083A76 7028                       		moveq	#$28,d0
00083A78                            
00083A78                            loc_7256E:
00083A78 1203                       		move.b	d3,d1
00083A7A 4EBA 0000                  		jsr	sub_7272E(pc)
00083A7E 5801                       		addq.b	#4,d1
00083A80 4EBA 0000                  		jsr	sub_7272E(pc)
00083A84 51CB FFF2                  		dbf	d3,loc_7256E
00083A88                            
00083A88 7040                       		moveq	#$40,d0
00083A8A 727F                       		moveq	#$7F,d1
00083A8C 7802                       		moveq	#2,d4
00083A8E                            
00083A8E                            loc_72584:
00083A8E 7603                       		moveq	#3,d3
00083A90                            
00083A90                            loc_72586:
00083A90 4EBA 0000                  		jsr	sub_7272E(pc)
00083A94 4EBA 0000                  		jsr	sub_72764(pc)
00083A98 5840                       		addq.w	#4,d0
00083A9A 51CB FFF4                  		dbf	d3,loc_72586
00083A9E                            
00083A9E 0400 000F                  		subi.b	#$F,d0
00083AA2 51CC FFEA                  		dbf	d4,loc_72584
00083AA6                            
00083AA6 4E75                       		rts	
00083AA8                            ; End of function sub_7256A
00083AA8                            
00083AA8                            ; ===========================================================================
00083AA8                            ; ---------------------------------------------------------------------------
00083AA8                            ; Stop music
00083AA8                            ; ---------------------------------------------------------------------------
00083AA8                            
00083AA8                            Sound_E4:
00083AA8 33FC 0100 00A1 1100 0839+  		StopZ80
00083ABA 41F9 0000 0000             		lea	(StopSample).l,a0				; EXT: load stop sample address
00083AC0 43F9 00A0 02E6             		lea	($A00000+PCM1_Sample).l,a1			; EXT: load PCM 1 slot address
00083AC6 12D8                       		move.b	(a0)+,(a1)+					; EXT: set address of sample
00083AC8 12D8                       		move.b	(a0)+,(a1)+					; EXT: ''
00083ACA 12D8                       		move.b	(a0)+,(a1)+					; EXT: ''
00083ACC 13FC 0064 00A0 0047        		move.b	#(CUPCM1_NewSample&$FF),($A00000+CU_Stack).l	; EXT: set routine to run
00083AD4 13FC 0002 00A0 0048        		move.b	#(CUPCM1_NewSample>>$08),($A00000+CU_Stack+1).l	; EXT: ''
00083ADC 13FC 00C9 00A0 01D2        		move.b	#%11001001,($A00000+CUPCM1_RET).l		; EXT: change "NOP" to "RET"
00083AE4 41F9 0000 0000             		lea	(StopSample).l,a0				; EXT: load stop sample address
00083AEA 43F9 00A0 02E9             		lea	($A00000+PCM2_Sample).l,a1			; EXT: load PCM 2 slot address
00083AF0 12D8                       		move.b	(a0)+,(a1)+					; EXT: ''
00083AF2 12D8                       		move.b	(a0)+,(a1)+					; EXT: ''
00083AF4 12D8                       		move.b	(a0)+,(a1)+					; EXT: ''
00083AF6 13FC 0028 00A0 01D3        		move.b	#%00101000,($A00000+CUPCM2_RET).l		; EXT: change "JR NZ" to "JR Z"
00083AFE 33FC 0000 00A1 1100        		StartZ80
00083B06                            
00083B06 702B                       		moveq	#$2B,d0
00083B08 123C 0080                  		move.b	#$80,d1
00083B0C 4EBA 0000                  		jsr	sub_7272E(pc)
00083B10 7027                       		moveq	#$27,d0
00083B12 7200                       		moveq	#0,d1
00083B14 4EBA 0000                  		jsr	sub_7272E(pc)
00083B18 204E                       		movea.l	a6,a0
00083B1A 2C2E 0010                  		move.l	$10(a6),d6					; EXT: store YM Cue list pointer
00083B1E 303C 00EF                  		move.w	#$EF,d0						; MJ: new size of data to clear
00083B22                            
00083B22                            loc_725B6:
00083B22 4298                       		clr.l	(a0)+
00083B24 51C8 FFFC                  		dbf	d0,loc_725B6
00083B28                            
00083B28 2D46 0010                  		move.l	d6,$10(a6)					; EXT: restore YM Cue list pointer
00083B2C 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
00083B32 4EBA FF40                  		jsr	sub_7256A(pc)
00083B36 6000 0000                  		bra.w	sub_729B6
00083B3A                            
00083B3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083B3A                            
00083B3A                            
00083B3A                            sub_725CA:				; XREF: Sound_ChkValue
00083B3A 204E                       		movea.l	a6,a0
00083B3C 1216                       		move.b	0(a6),d1
00083B3E 142E 0027                  		move.b	$27(a6),d2
00083B42 162E 002A                  		move.b	$2A(a6),d3
00083B46 182E 0026                  		move.b	$26(a6),d4
00083B4A 3A2E 000A                  		move.w	$A(a6),d5
00083B4E 2C2E 0010                  		move.l	$10(a6),d6					; EXT: store YM Cue list pointer
00083B52 303C 0093                  		move.w	#$93,d0						; MJ: new size
00083B56                            
00083B56                            loc_725E4:
00083B56 4298                       		clr.l	(a0)+
00083B58 51C8 FFFC                  		dbf	d0,loc_725E4
00083B5C                            
00083B5C 1C81                       		move.b	d1,0(a6)
00083B5E 1D42 0027                  		move.b	d2,$27(a6)
00083B62 1D43 002A                  		move.b	d3,$2A(a6)
00083B66 1D44 0026                  		move.b	d4,$26(a6)
00083B6A 3D45 000A                  		move.w	d5,$A(a6)
00083B6E 2D46 0010                  		move.l	d6,$10(a6)					; EXT: restore YM Cue list pointer
00083B72 1D7C 0080 0009             		move.b	#$80,9(a6)
00083B78 4EBA FEFA                  		jsr	sub_7256A(pc)
00083B7C 6000 0000                  		bra.w	sub_729B6
00083B80                            ; End of function sub_725CA
00083B80                            
00083B80                            
00083B80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083B80                            
00083B80                            
00083B80                            sub_7260C:				; XREF: sub_71B4C
00083B80 1D6E 0002 0001             		move.b	2(a6),1(a6)
00083B86 41EE 004E                  		lea	$4E(a6),a0
00083B8A 7030                       		moveq	#$30,d0
00083B8C 720A                       		moveq	#10,d1				; MJ: new number of channels
00083B8E                            
00083B8E                            loc_7261A:
00083B8E 5210                       		addq.b	#1,(a0)
00083B90 D0C0                       		adda.w	d0,a0
00083B92 51C9 FFFA                  		dbf	d1,loc_7261A
00083B96                            
00083B96 4E75                       		rts	
00083B98                            ; End of function sub_7260C
00083B98                            
00083B98                            ; ===========================================================================
00083B98                            ; ---------------------------------------------------------------------------
00083B98                            ; Speed	up music
00083B98                            ; ---------------------------------------------------------------------------
00083B98                            
00083B98                            Sound_E2:				; XREF: Sound_ExIndex
00083B98 4A2E 0027                  		tst.b	$27(a6)
00083B9C 6600                       		bne.s	loc_7263E
00083B9E 1D6E 0029 0002             		move.b	$29(a6),2(a6)
00083BA4 1D6E 0029 0001             		move.b	$29(a6),1(a6)
00083BAA 1D7C 0080 002A             		move.b	#$80,$2A(a6)
00083BB0 4E75                       		rts	
00083BB2                            ; ===========================================================================
00083BB2                            
00083BB2                            loc_7263E:
00083BB2 1D6E 03F9 03D2             		move.b	$3F9(a6),$3D2(a6)			; MJ: new location
00083BB8 1D6E 03F9 03D1             		move.b	$3F9(a6),$3D1(a6)			; MJ: new location
00083BBE 1D7C 0080 03FA             		move.b	#$80,$3FA(a6)
00083BC4 4E75                       		rts	
00083BC6                            ; ===========================================================================
00083BC6                            ; ---------------------------------------------------------------------------
00083BC6                            ; Change music back to normal speed
00083BC6                            ; ---------------------------------------------------------------------------
00083BC6                            
00083BC6                            Sound_E3:				; XREF: Sound_ExIndex
00083BC6 4A2E 0027                  		tst.b	$27(a6)
00083BCA 6600                       		bne.s	loc_7266A
00083BCC 1D6E 0028 0002             		move.b	$28(a6),2(a6)
00083BD2 1D6E 0028 0001             		move.b	$28(a6),1(a6)
00083BD8 422E 002A                  		clr.b	$2A(a6)
00083BDC 4E75                       		rts	
00083BDE                            ; ===========================================================================
00083BDE                            
00083BDE                            loc_7266A:
00083BDE 1D6E 03F8 03D2             		move.b	$3F8(a6),$3D2(a6)
00083BE4 1D6E 03F8 03D1             		move.b	$3F8(a6),$3D1(a6)
00083BEA 422E 03FA                  		clr.b	$3FA(a6)
00083BEE 4E75                       		rts	
00083BF0                            
00083BF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083BF0                            
00083BF0                            
00083BF0                            sub_7267C:				; XREF: sub_71B4C
00083BF0 4A2E 0025                  		tst.b	$25(a6)
00083BF4 6700                       		beq.s	loc_72688
00083BF6 532E 0025                  		subq.b	#1,$25(a6)
00083BFA 4E75                       		rts	
00083BFC                            ; ===========================================================================
00083BFC                            
00083BFC                            loc_72688:
00083BFC 4A2E 0026                  		tst.b	$26(a6)
00083C00 6700                       		beq.s	loc_726D6
00083C02 532E 0026                  		subq.b	#1,$26(a6)
00083C06 1D7C 0002 0025             		move.b	#2,$25(a6)
00083C0C 4BEE 00A0                  		lea	$A0(a6),a5				; MJ: new SFX location
00083C10 7E05                       		moveq	#5,d7
00083C12                            
00083C12                            loc_7269E:
00083C12 4A15                       		tst.b	(a5)
00083C14 6A00                       		bpl.s	loc_726AA
00083C16 532D 0009                  		subq.b	#1,9(a5)
00083C1A 4EBA 0000                  		jsr	sub_72CB4(pc)
00083C1E                            
00083C1E                            loc_726AA:
00083C1E DAFC 0030                  		adda.w	#$30,a5
00083C22 51CF FFEE                  		dbf	d7,loc_7269E
00083C26 7E02                       		moveq	#2,d7
00083C28                            
00083C28                            loc_726B4:
00083C28 4A15                       		tst.b	(a5)
00083C2A 6A00                       		bpl.s	loc_726CC
00083C2C 532D 0009                  		subq.b	#1,9(a5)
00083C30 1C2D 0009                  		move.b	9(a5),d6
00083C34 0C06 0010                  		cmpi.b	#$10,d6
00083C38 6500                       		bcs.s	loc_726C8
00083C3A 7C0F                       		moveq	#$F,d6
00083C3C                            
00083C3C                            loc_726C8:
00083C3C 4EBA 0000                  		jsr	sub_7296A(pc)
00083C40                            
00083C40                            loc_726CC:
00083C40 DAFC 0030                  		adda.w	#$30,a5
00083C44 51CF FFE2                  		dbf	d7,loc_726B4
00083C48 4E75                       		rts	
00083C4A                            ; ===========================================================================
00083C4A                            
00083C4A                            loc_726D6:
00083C4A 08AE 0002 0040             		bclr	#2,$40(a6)
00083C50 08AE 0002 0070             		bclr	#2,$70(a6)				; MJ: do PCM 2 as well...
00083C56 422E 0024                  		clr.b	$24(a6)
00083C5A 4E75                       		rts	
00083C5C                            ; End of function sub_7267C
00083C5C                            
00083C5C                            ; ===========================================================================
00083C5C                            
00083C5C                            loc_726E2:				; XREF: sub_71CCA
00083C5C 0815 0001                  		btst	#1,(a5)
00083C60 6600                       		bne.s	locret_726FC
00083C62 0815 0002                  		btst	#2,(a5)
00083C66 6600                       		bne.s	locret_726FC
00083C68 7028                       		moveq	#$28,d0
00083C6A 122D 0001                  		move.b	1(a5),d1
00083C6E 0001 00F0                  		ori.b	#-$10,d1
00083C72 6000 0000                  		bra.w	sub_7272E
00083C76                            ; ===========================================================================
00083C76                            
00083C76                            locret_726FC:
00083C76 4E75                       		rts	
00083C78                            
00083C78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083C78                            
00083C78                            
00083C78                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
00083C78 0815 0004                  		btst	#4,(a5)
00083C7C 6600                       		bne.s	locret_72714
00083C7E 0815 0002                  		btst	#2,(a5)
00083C82 6600                       		bne.s	locret_72714
00083C84                            
00083C84                            loc_7270A:				; XREF: Snd_FadeOut2
00083C84 7028                       		moveq	#$28,d0
00083C86 122D 0001                  		move.b	1(a5),d1
00083C8A 6000 0000                  		bra.w	sub_7272E
00083C8E                            ; ===========================================================================
00083C8E                            
00083C8E                            locret_72714:
00083C8E 4E75                       		rts	
00083C90                            ; End of function sub_726FE
00083C90                            
00083C90                            ; ===========================================================================
00083C90                            
00083C90                            loc_72716:				; XREF: sub_72A5A
00083C90 0815 0002                  		btst	#2,(a5)
00083C94 6600                       		bne.s	locret_72720
00083C96 6000 0000                  		bra.w	sub_72722
00083C9A                            ; ===========================================================================
00083C9A                            
00083C9A                            locret_72720:
00083C9A 4E75                       		rts
00083C9C                            
00083C9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083C9C                            
00083C9C                            
00083C9C                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
00083C9C 082D 0002 0001             		btst	#2,1(a5)
00083CA2 6600                       		bne.s	loc_7275A
00083CA4 D02D 0001                  		add.b	1(a5),d0
00083CA8                            ; End of function sub_72722
00083CA8                            
00083CA8                            
00083CA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083CA8                            
00083CA8                            sub_7272E:
00083CA8 48E7 2080                  		movem.l	d2/a0,-(sp)				; EXT: store register data
00083CAC 206E 0010                  		movea.l	$10(a6),a0				; EXT: load Cue pointer
00083CB0 5248                       		addq.w	#$01,a0					; EXT: skip $40
00083CB2 143C 0000                  		move.b	#$00,d2					; EXT: prepare d2 for YM2612 port address ($4000 - $4001)
00083CB6 33FC 0100 00A1 1100 0839+  		StopZ80						; EXT: request Z80 stop "ON"
00083CC8 10C2                       		move.b	d2,(a0)+				; EXT: write YM2612 port address
00083CCA 10C1                       		move.b	d1,(a0)+				; EXT: write YM2612 data
00083CCC 10C0                       		move.b	d0,(a0)+				; EXT: write YM2612 address
00083CCE 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop "OFF"
00083CD6 3408                       		move.w	a0,d2					; EXT: load Cue pointer
00083CD8 0242 0FFF                  		andi.w	#$0FFF,d2				; EXT: wrap it
00083CDC 0042 1000                  		ori.w	#$1000,d2				; EXT: ''
00083CE0 3D42 0012                  		move.w	d2,$12(a6)				; EXT: update it
00083CE4 4CDF 0104                  		movem.l	(sp)+,d2/a0				; EXT: restore register data
00083CE8 4E75                       		rts						; EXT: return
00083CEA                            
00083CEA                            ; ===========================================================================
00083CEA                            
00083CEA                            loc_7275A:				; XREF: sub_72722
00083CEA 142D 0001                  		move.b	1(a5),d2
00083CEE 0882 0002                  		bclr	#2,d2
00083CF2 D002                       		add.b	d2,d0
00083CF4                            
00083CF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083CF4                            
00083CF4                            
00083CF4                            sub_72764:
00083CF4 48E7 2080                  		movem.l	d2/a0,-(sp)				; EXT: store register data
00083CF8 206E 0010                  		movea.l	$10(a6),a0				; EXT: load Cue pointer
00083CFC 5248                       		addq.w	#$01,a0					; EXT: skip $40
00083CFE 143C 0002                  		move.b	#$02,d2					; EXT: prepare d2 for YM2612 port address ($4002 - $4003)
00083D02 33FC 0100 00A1 1100 0839+  		StopZ80						; EXT: request Z80 stop "ON"
00083D14 10C2                       		move.b	d2,(a0)+				; EXT: write YM2612 port address
00083D16 10C1                       		move.b	d1,(a0)+				; EXT: write YM2612 data
00083D18 10C0                       		move.b	d0,(a0)+				; EXT: write YM2612 address
00083D1A 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop "OFF"
00083D22 3408                       		move.w	a0,d2					; EXT: load Cue pointer
00083D24 0242 0FFF                  		andi.w	#$0FFF,d2				; EXT: wrap it
00083D28 0042 1000                  		ori.w	#$1000,d2				; EXT: ''
00083D2C 3D42 0012                  		move.w	d2,$12(a6)				; EXT: update it
00083D30 4CDF 0104                  		movem.l	(sp)+,d2/a0				; EXT: restore register data
00083D34 4E75                       		rts						; EXT: return
00083D36                            
00083D36                            ; ===========================================================================
00083D36 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
00083D48 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
00083D5A 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
00083D6A 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
00083D7A 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
00083D8A 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
00083D9A 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
00083DAA 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
00083DBA 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
00083DCA 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
00083DDA 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
00083DEA 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
00083DF6                            
00083DF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083DF6                            
00083DF6                            
00083DF6                            sub_72850:				; XREF: sub_71B4C
00083DF6 532D 000E                  		subq.b	#1,$E(a5)
00083DFA 6600                       		bne.s	loc_72866
00083DFC 0895 0004                  		bclr	#4,(a5)
00083E00 4EBA 0000                  		jsr	sub_72878(pc)
00083E04 4EBA 0000                  		jsr	sub_728DC(pc)
00083E08 6000 0000                  		bra.w	loc_7292E
00083E0C                            ; ===========================================================================
00083E0C                            
00083E0C                            loc_72866:
00083E0C 4EBA F378                  		jsr	sub_71D9E(pc)
00083E10 4EBA 0000                  		jsr	sub_72926(pc)
00083E14 4EBA F398                  		jsr	sub_71DC6(pc)
00083E18 4EBA 0000                  		jsr	sub_728E2(pc)
00083E1C 4E75                       		rts	
00083E1E                            ; End of function sub_72850
00083E1E                            
00083E1E                            
00083E1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083E1E                            
00083E1E                            
00083E1E                            sub_72878:				; XREF: sub_72850
00083E1E 0895 0001                  		bclr	#1,(a5)
00083E22 286D 0004                  		movea.l	4(a5),a4
00083E26                            
00083E26                            loc_72880:
00083E26 7A00                       		moveq	#0,d5
00083E28 1A1C                       		move.b	(a4)+,d5
00083E2A 0C05 00E0                  		cmpi.b	#$E0,d5
00083E2E 6500                       		bcs.s	loc_72890
00083E30 4EBA 0000                  		jsr	sub_72A5A(pc)
00083E34 60F0                       		bra.s	loc_72880
00083E36                            ; ===========================================================================
00083E36                            
00083E36                            loc_72890:
00083E36 4A05                       		tst.b	d5
00083E38 6A00                       		bpl.s	loc_728A4
00083E3A 4EBA 0000                  		jsr	sub_728AC(pc)
00083E3E 1A1C                       		move.b	(a4)+,d5
00083E40 4A05                       		tst.b	d5
00083E42 6A00                       		bpl.s	loc_728A4
00083E44 534C                       		subq.w	#1,a4
00083E46 6000 F300                  		bra.w	sub_71D60
00083E4A                            ; ===========================================================================
00083E4A                            
00083E4A                            loc_728A4:
00083E4A 4EBA F2DC                  		jsr	sub_71D40(pc)
00083E4E 6000 F2F8                  		bra.w	sub_71D60
00083E52                            ; End of function sub_72878
00083E52                            
00083E52                            
00083E52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083E52                            
00083E52                            
00083E52                            sub_728AC:				; XREF: sub_72878
00083E52 0405 0081                  		subi.b	#$81,d5
00083E56 6500                       		bcs.s	loc_728CA
00083E58 DA2D 0008                  		add.b	8(a5),d5
00083E5C 0245 007F                  		andi.w	#$7F,d5
00083E60 E34D                       		lsl.w	#1,d5
00083E62 41FA 0000                  		lea	word_729CE(pc),a0
00083E66 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
00083E6C 6000 F2DA                  		bra.w	sub_71D60
00083E70                            ; ===========================================================================
00083E70                            
00083E70                            loc_728CA:
00083E70 08D5 0001                  		bset	#1,(a5)
00083E74 3B7C FFFF 0010             		move.w	#-1,$10(a5)
00083E7A 4EBA F2CC                  		jsr	sub_71D60(pc)
00083E7E 6000 0000                  		bra.w	sub_729A0
00083E82                            ; End of function sub_728AC
00083E82                            
00083E82                            
00083E82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083E82                            
00083E82                            
00083E82                            sub_728DC:				; XREF: sub_72850
00083E82 3C2D 0010                  		move.w	$10(a5),d6
00083E86 6B00                       		bmi.s	loc_72920
00083E88                            ; End of function sub_728DC
00083E88                            
00083E88                            
00083E88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083E88                            
00083E88                            
00083E88                            sub_728E2:				; XREF: sub_72850
00083E88 102D 001E                  		move.b	$1E(a5),d0
00083E8C 4880                       		ext.w	d0
00083E8E DC40                       		add.w	d0,d6
00083E90 0815 0002                  		btst	#2,(a5)
00083E94 6600                       		bne.s	locret_7291E
00083E96 0815 0001                  		btst	#1,(a5)
00083E9A 6600                       		bne.s	locret_7291E
00083E9C 102D 0001                  		move.b	1(a5),d0
00083EA0 0C00 00E0                  		cmpi.b	#$E0,d0
00083EA4 6600                       		bne.s	loc_72904
00083EA6 103C 00C0                  		move.b	#$C0,d0
00083EAA                            
00083EAA                            loc_72904:
00083EAA 3206                       		move.w	d6,d1
00083EAC 0201 000F                  		andi.b	#$F,d1
00083EB0 8001                       		or.b	d1,d0
00083EB2 E84E                       		lsr.w	#4,d6
00083EB4 0206 003F                  		andi.b	#$3F,d6
00083EB8 13C0 00C0 0011             		move.b	d0,($C00011).l
00083EBE 13C6 00C0 0011             		move.b	d6,($C00011).l
00083EC4                            
00083EC4                            locret_7291E:
00083EC4 4E75                       		rts	
00083EC6                            ; End of function sub_728E2
00083EC6                            
00083EC6                            ; ===========================================================================
00083EC6                            
00083EC6                            loc_72920:				; XREF: sub_728DC
00083EC6 08D5 0001                  		bset	#1,(a5)
00083ECA 4E75                       		rts	
00083ECC                            
00083ECC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083ECC                            
00083ECC                            
00083ECC                            sub_72926:				; XREF: sub_72850
00083ECC 4A2D 000B                  		tst.b	$B(a5)
00083ED0 6700 0000                  		beq.w	locret_7298A
00083ED4                            
00083ED4                            loc_7292E:				; XREF: sub_72850
00083ED4 1C2D 0009                  		move.b	9(a5),d6
00083ED8 7000                       		moveq	#0,d0
00083EDA 102D 000B                  		move.b	$B(a5),d0
00083EDE 6700                       		beq.s	sub_7296A
00083EE0 2079 0008 2C72             		movea.l	(Go_PSGIndex).l,a0
00083EE6 5340                       		subq.w	#1,d0
00083EE8 E548                       		lsl.w	#2,d0
00083EEA 2070 0000                  		movea.l	(a0,d0.w),a0
00083EEE 102D 000C                  		move.b	$C(a5),d0
00083EF2 1030 0000                  		move.b	(a0,d0.w),d0
00083EF6 522D 000C                  		addq.b	#1,$C(a5)
00083EFA 0800 0007                  		btst	#7,d0
00083EFE 6700                       		beq.s	loc_72960
00083F00 0C00 0080                  		cmpi.b	#$80,d0
00083F04 6700                       		beq.s	loc_7299A
00083F06                            
00083F06                            loc_72960:
00083F06 DC40                       		add.w	d0,d6
00083F08 0C06 0010                  		cmpi.b	#$10,d6
00083F0C 6500                       		bcs.s	sub_7296A
00083F0E 7C0F                       		moveq	#$F,d6
00083F10                            ; End of function sub_72926
00083F10                            
00083F10                            
00083F10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083F10                            
00083F10                            
00083F10                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
00083F10 0815 0001                  		btst	#1,(a5)
00083F14 6600                       		bne.s	locret_7298A
00083F16 0815 0002                  		btst	#2,(a5)
00083F1A 6600                       		bne.s	locret_7298A
00083F1C 0815 0004                  		btst	#4,(a5)
00083F20 6600                       		bne.s	loc_7298C
00083F22                            
00083F22                            loc_7297C:
00083F22 8C2D 0001                  		or.b	1(a5),d6
00083F26 0606 0010                  		addi.b	#$10,d6
00083F2A 13C6 00C0 0011             		move.b	d6,($C00011).l
00083F30                            
00083F30                            locret_7298A:
00083F30 4E75                       		rts	
00083F32                            ; ===========================================================================
00083F32                            
00083F32                            loc_7298C:
00083F32 4A2D 0013                  		tst.b	$13(a5)
00083F36 67EA                       		beq.s	loc_7297C
00083F38 4A2D 0012                  		tst.b	$12(a5)
00083F3C 66E4                       		bne.s	loc_7297C
00083F3E 4E75                       		rts	
00083F40                            ; End of function sub_7296A
00083F40                            
00083F40                            ; ===========================================================================
00083F40                            
00083F40                            loc_7299A:				; XREF: sub_72926
00083F40 532D 000C                  		subq.b	#1,$C(a5)
00083F44 4E75                       		rts	
00083F46                            
00083F46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083F46                            
00083F46                            
00083F46                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
00083F46 0815 0002                  		btst	#2,(a5)
00083F4A 6600                       		bne.s	locret_729B4
00083F4C                            
00083F4C                            loc_729A6:				; XREF: Snd_FadeOut2
00083F4C 102D 0001                  		move.b	1(a5),d0
00083F50 0000 001F                  		ori.b	#$1F,d0
00083F54 13C0 00C0 0011             		move.b	d0,($C00011).l
00083F5A                            
00083F5A                            locret_729B4:
00083F5A 4E75                       		rts	
00083F5C                            ; End of function sub_729A0
00083F5C                            
00083F5C                            
00083F5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083F5C                            
00083F5C                            
00083F5C                            sub_729B6:				; XREF: loc_71E7C
00083F5C 41F9 00C0 0011             		lea	($C00011).l,a0
00083F62 10BC 009F                  		move.b	#$9F,(a0)
00083F66 10BC 00BF                  		move.b	#$BF,(a0)
00083F6A 10BC 00DF                  		move.b	#$DF,(a0)
00083F6E 10BC 00FF                  		move.b	#$FF,(a0)
00083F72 4E75                       		rts	
00083F74                            ; End of function sub_729B6
00083F74                            
00083F74                            ; ===========================================================================
00083F74 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
00083F86 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
00083F98 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
00083FAC 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
00083FC0 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
00083FD4 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
00083FE8 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
00083FFC 0011 0000                  		dc.w $11, 0
00084000                            
00084000                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084000                            
00084000                            
00084000                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00084000 0445 00E0                  		subi.w	#$E0,d5
00084004 E54D                       		lsl.w	#2,d5
00084006 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
0008400A                            ; End of function sub_72A5A
0008400A                            
0008400A                            ; ===========================================================================
0008400A                            
0008400A                            loc_72A64:
0008400A 6000 0000                  		bra.w	loc_72ACC
0008400E                            ; ===========================================================================
0008400E 6000 0000                  		bra.w	loc_72AEC
00084012                            ; ===========================================================================
00084012 6000 0000                  		bra.w	loc_72AF2
00084016                            ; ===========================================================================
00084016 6000 0000                  		bra.w	loc_72AF8
0008401A                            ; ===========================================================================
0008401A 6000 0000                  		bra.w	loc_72B14
0008401E                            ; ===========================================================================
0008401E 6000 0000                  		bra.w	loc_72B9E
00084022                            ; ===========================================================================
00084022 6000 0000                  		bra.w	loc_72BA4
00084026                            ; ===========================================================================
00084026 6000 0000                  		bra.w	loc_72BAE
0008402A                            ; ===========================================================================
0008402A 6000 0000                  		bra.w	loc_72BB4
0008402E                            ; ===========================================================================
0008402E 6000 0000                  		bra.w	loc_72BBE
00084032                            ; ===========================================================================
00084032 6000 0000                  		bra.w	loc_72BC6
00084036                            ; ===========================================================================
00084036 6000 0000                  		bra.w	loc_72BD0
0008403A                            ; ===========================================================================
0008403A 6000 0000                  		bra.w	loc_72BE6
0008403E                            ; ===========================================================================
0008403E 6000 0000                  		bra.w	loc_72BEE
00084042                            ; ===========================================================================
00084042 6000 0000                  		bra.w	loc_72BF4
00084046                            ; ===========================================================================
00084046 6000 0000                  		bra.w	loc_72C26
0008404A                            ; ===========================================================================
0008404A 6000 0000                  		bra.w	loc_72D30
0008404E                            ; ===========================================================================
0008404E 6000 0000                  		bra.w	loc_72D52
00084052                            ; ===========================================================================
00084052 6000 0000                  		bra.w	loc_72D58
00084056                            ; ===========================================================================
00084056 6000 0000                  		bra.w	loc_72E06
0008405A                            ; ===========================================================================
0008405A 6000 0000                  		bra.w	loc_72E20
0008405E                            ; ===========================================================================
0008405E 6000 0000                  		bra.w	loc_72E26
00084062                            ; ===========================================================================
00084062 6000 0000                  		bra.w	loc_72E2C
00084066                            ; ===========================================================================
00084066 6000 0000                  		bra.w	loc_72E38
0008406A                            ; ===========================================================================
0008406A 6000 0000                  		bra.w	loc_72E52
0008406E                            ; ===========================================================================
0008406E 6000 0000                  		bra.w	loc_72E64
00084072                            ; ===========================================================================
00084072                            
00084072                            loc_72ACC:				; XREF: loc_72A64
00084072 121C                       		move.b	(a4)+,d1
00084074 4A2D 0001                  		tst.b	1(a5)
00084078 6B00                       		bmi.s	locret_72AEA
0008407A 102D 000A                  		move.b	$A(a5),d0
0008407E 0200 0037                  		andi.b	#$37,d0
00084082 8200                       		or.b	d0,d1
00084084 1B41 000A                  		move.b	d1,$A(a5)
00084088 103C 00B4                  		move.b	#$B4,d0
0008408C 6000 FC02                  		bra.w	loc_72716
00084090                            ; ===========================================================================
00084090                            
00084090                            locret_72AEA:
00084090 4E75                       		rts	
00084092                            ; ===========================================================================
00084092                            
00084092                            loc_72AEC:				; XREF: loc_72A64
00084092 1B5C 001E                  		move.b	(a4)+,$1E(a5)
00084096 4E75                       		rts	
00084098                            ; ===========================================================================
00084098                            
00084098                            loc_72AF2:				; XREF: loc_72A64
00084098 1D5C 0007                  		move.b	(a4)+,7(a6)
0008409C 4E75                       		rts	
0008409E                            ; ===========================================================================
0008409E                            
0008409E                            loc_72AF8:				; XREF: loc_72A64
0008409E 7000                       		moveq	#0,d0
000840A0 102D 000D                  		move.b	$D(a5),d0
000840A4 2875 0000                  		movea.l	(a5,d0.w),a4
000840A8 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
000840B0 544C                       		addq.w	#2,a4
000840B2 5800                       		addq.b	#4,d0
000840B4 1B40 000D                  		move.b	d0,$D(a5)
000840B8 4E75                       		rts	
000840BA                            ; ===========================================================================
000840BA                            
000840BA                            loc_72B14:				; XREF: loc_72A64
000840BA 204E                       		movea.l	a6,a0
000840BC 43EE 03D0                  		lea	$3D0(a6),a1				; MJ: new SFX location
000840C0 303C 0093                  		move.w	#$93,d0					; MJ: new size to store
000840C4                            
000840C4                            loc_72B1E:
000840C4 20D9                       		move.l	(a1)+,(a0)+
000840C6 51C8 FFFC                  		dbf	d0,loc_72B1E
000840CA                            
000840CA 08EE 0002 0040             		bset	#2,$40(a6)
000840D0 08EE 0002 0070             		bset	#2,$70(a6)				; MJ: enable PCM 2
000840D6 264D                       		movea.l	a5,a3
000840D8 1C3C 0028                  		move.b	#$28,d6
000840DC 9C2E 0026                  		sub.b	$26(a6),d6
000840E0 7E05                       		moveq	#5,d7
000840E2 4BEE 00A0                  		lea	$A0(a6),a5				; MJ: new FM location
000840E6                            
000840E6                            loc_72B3A:
000840E6 0815 0007                  		btst	#7,(a5)
000840EA 6700                       		beq.s	loc_72B5C
000840EC 08D5 0001                  		bset	#1,(a5)
000840F0 DD2D 0009                  		add.b	d6,9(a5)
000840F4 0815 0002                  		btst	#2,(a5)
000840F8 6600                       		bne.s	loc_72B5C
000840FA 7000                       		moveq	#0,d0
000840FC 102D 000B                  		move.b	$B(a5),d0
00084100 226E 0018                  		movea.l	$18(a6),a1
00084104 4EBA 0000                  		jsr	sub_72C4E(pc)
00084108                            
00084108                            loc_72B5C:
00084108 DAFC 0030                  		adda.w	#$30,a5
0008410C 51CF FFD8                  		dbf	d7,loc_72B3A
00084110                            
00084110 7E02                       		moveq	#2,d7
00084112                            
00084112                            loc_72B66:
00084112 0815 0007                  		btst	#7,(a5)
00084116 6700                       		beq.s	loc_72B78
00084118 08D5 0001                  		bset	#1,(a5)
0008411C 4EBA FE28                  		jsr	sub_729A0(pc)
00084120 DD2D 0009                  		add.b	d6,9(a5)
00084124                            
00084124                            loc_72B78:
00084124 DAFC 0030                  		adda.w	#$30,a5
00084128 51CF FFE8                  		dbf	d7,loc_72B66
0008412C 2A4B                       		movea.l	a3,a5
0008412E 1D7C 0080 0024             		move.b	#$80,$24(a6)
00084134 1D7C 0028 0026             		move.b	#$28,$26(a6)
0008413A 422E 0027                  		clr.b	$27(a6)
0008413E 504F                       		addq.w	#8,sp
00084140 4E75                       		rts	
00084142                            ; ===========================================================================
00084142                            
00084142                            loc_72B9E:				; XREF: loc_72A64
00084142 1B5C 0002                  		move.b	(a4)+,2(a5)
00084146 4E75                       		rts	
00084148                            ; ===========================================================================
00084148                            
00084148                            loc_72BA4:				; XREF: loc_72A64
00084148 101C                       		move.b	(a4)+,d0
0008414A D12D 0009                  		add.b	d0,9(a5)
0008414E 6000 0000                  		bra.w	sub_72CB4
00084152                            ; ===========================================================================
00084152                            
00084152                            loc_72BAE:				; XREF: loc_72A64
00084152 08D5 0004                  		bset	#4,(a5)
00084156 4E75                       		rts	
00084158                            ; ===========================================================================
00084158                            
00084158                            loc_72BB4:				; XREF: loc_72A64
00084158 1B54 0012                  		move.b	(a4),$12(a5)
0008415C 1B5C 0013                  		move.b	(a4)+,$13(a5)
00084160 4E75                       		rts	
00084162                            ; ===========================================================================
00084162                            
00084162                            loc_72BBE:				; XREF: loc_72A64
00084162 101C                       		move.b	(a4)+,d0
00084164 D12D 0008                  		add.b	d0,8(a5)
00084168 4E75                       		rts	
0008416A                            ; ===========================================================================
0008416A                            
0008416A                            loc_72BC6:				; XREF: loc_72A64
0008416A 1D54 0002                  		move.b	(a4),2(a6)
0008416E 1D5C 0001                  		move.b	(a4)+,1(a6)
00084172 4E75                       		rts	
00084174                            ; ===========================================================================
00084174                            
00084174                            loc_72BD0:				; XREF: loc_72A64
00084174 41EE 0040                  		lea	$40(a6),a0
00084178 101C                       		move.b	(a4)+,d0
0008417A 7230                       		moveq	#$30,d1
0008417C 740A                       		moveq	#10,d2				; MJ: extra channel
0008417E                            
0008417E                            loc_72BDA:
0008417E 1140 0002                  		move.b	d0,2(a0)
00084182 D0C1                       		adda.w	d1,a0
00084184 51CA FFF8                  		dbf	d2,loc_72BDA
00084188                            
00084188 4E75                       		rts	
0008418A                            ; ===========================================================================
0008418A                            
0008418A                            loc_72BE6:				; XREF: loc_72A64
0008418A 101C                       		move.b	(a4)+,d0
0008418C D12D 0009                  		add.b	d0,9(a5)
00084190 4E75                       		rts	
00084192                            ; ===========================================================================
00084192                            
00084192                            loc_72BEE:				; XREF: loc_72A64
00084192 422E 002C                  		clr.b	$2C(a6)
00084196 4E75                       		rts	
00084198                            ; ===========================================================================
00084198                            
00084198                            loc_72BF4:				; XREF: loc_72A64
00084198 0895 0007                  		bclr	#7,(a5)
0008419C 0895 0004                  		bclr	#4,(a5)
000841A0 4EBA FAD6                  		jsr	sub_726FE(pc)
000841A4 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
000841A8 6B00                       		bmi.s	loc_72C22
000841AA 264D                       		movea.l	a5,a3
000841AC 4BEE 0130                  		lea	$130(a6),a5				; MJ: new BGM location
000841B0 226E 0018                  		movea.l	$18(a6),a1
000841B4 0895 0002                  		bclr	#2,(a5)
000841B8 08D5 0001                  		bset	#1,(a5)
000841BC 102D 000B                  		move.b	$B(a5),d0
000841C0 4EBA 0000                  		jsr	sub_72C4E(pc)
000841C4 2A4B                       		movea.l	a3,a5
000841C6                            
000841C6                            loc_72C22:
000841C6 504F                       		addq.w	#8,sp
000841C8 4E75                       		rts	
000841CA                            ; ===========================================================================
000841CA                            
000841CA                            loc_72C26:				; XREF: loc_72A64
000841CA 7000                       		moveq	#0,d0
000841CC 101C                       		move.b	(a4)+,d0
000841CE 1B40 000B                  		move.b	d0,$B(a5)
000841D2 0815 0002                  		btst	#2,(a5)
000841D6 6600 0000                  		bne.w	locret_72CAA
000841DA 226E 0018                  		movea.l	$18(a6),a1
000841DE 4A2E 000E                  		tst.b	$E(a6)
000841E2 6700                       		beq.s	sub_72C4E
000841E4 226D 0020                  		movea.l	$20(a5),a1
000841E8 4A2E 000E                  		tst.b	$E(a6)
000841EC 6B00                       		bmi.s	sub_72C4E
000841EE 226E 0020                  		movea.l	$20(a6),a1
000841F2                            
000841F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000841F2                            
000841F2                            
000841F2                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
000841F2 5340                       		subq.w	#1,d0
000841F4 6B00                       		bmi.s	loc_72C5C
000841F6 323C 0019                  		move.w	#$19,d1
000841FA                            
000841FA                            loc_72C56:
000841FA D2C1                       		adda.w	d1,a1
000841FC 51C8 FFFC                  		dbf	d0,loc_72C56
00084200                            
00084200                            loc_72C5C:
00084200 1219                       		move.b	(a1)+,d1
00084202 1B41 001F                  		move.b	d1,$1F(a5)
00084206 1801                       		move.b	d1,d4
00084208 103C 00B0                  		move.b	#$B0,d0
0008420C 4EBA FA8E                  		jsr	sub_72722(pc)
00084210 45FA 0000                  		lea	byte_72D18(pc),a2
00084214 7613                       		moveq	#$13,d3
00084216                            
00084216                            loc_72C72:
00084216 101A                       		move.b	(a2)+,d0
00084218 1219                       		move.b	(a1)+,d1
0008421A 4EBA FA80                  		jsr	sub_72722(pc)
0008421E 51CB FFF6                  		dbf	d3,loc_72C72
00084222 7A03                       		moveq	#3,d5
00084224 0244 0007                  		andi.w	#7,d4
00084228 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
0008422C 162D 0009                  		move.b	9(a5),d3
00084230                            
00084230                            loc_72C8C:
00084230 101A                       		move.b	(a2)+,d0
00084232 1219                       		move.b	(a1)+,d1
00084234 E20C                       		lsr.b	#1,d4
00084236 6400                       		bcc.s	loc_72C96
00084238 D203                       		add.b	d3,d1
0008423A                            
0008423A                            loc_72C96:
0008423A 4EBA FA60                  		jsr	sub_72722(pc)
0008423E 51CD FFF0                  		dbf	d5,loc_72C8C
00084242 103C 00B4                  		move.b	#$B4,d0
00084246 122D 000A                  		move.b	$A(a5),d1
0008424A 4EBA FA50                  		jsr	sub_72722(pc)
0008424E                            
0008424E                            locret_72CAA:
0008424E 4E75                       		rts	
00084250                            ; End of function sub_72C4E
00084250                            
00084250                            ; ===========================================================================
00084250 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00084258                            
00084258                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084258                            
00084258                            
00084258                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
00084258 0815 0002                  		btst	#2,(a5)
0008425C 6600                       		bne.s	locret_72D16
0008425E 7000                       		moveq	#0,d0
00084260 102D 000B                  		move.b	$B(a5),d0
00084264 226E 0018                  		movea.l	$18(a6),a1
00084268 4A2E 000E                  		tst.b	$E(a6)
0008426C 6700                       		beq.s	loc_72CD8
0008426E 226E 0020                  		movea.l	$20(a6),a1
00084272 4A2E 000E                  		tst.b	$E(a6)
00084276 6B00                       		bmi.s	loc_72CD8
00084278 226E 0020                  		movea.l	$20(a6),a1
0008427C                            
0008427C                            loc_72CD8:
0008427C 5340                       		subq.w	#1,d0
0008427E 6B00                       		bmi.s	loc_72CE6
00084280 323C 0019                  		move.w	#$19,d1
00084284                            
00084284                            loc_72CE0:
00084284 D2C1                       		adda.w	d1,a1
00084286 51C8 FFFC                  		dbf	d0,loc_72CE0
0008428A                            
0008428A                            loc_72CE6:
0008428A D2FC 0015                  		adda.w	#$15,a1
0008428E 45FA 0000                  		lea	byte_72D2C(pc),a2
00084292 102D 001F                  		move.b	$1F(a5),d0
00084296 0240 0007                  		andi.w	#7,d0
0008429A 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
0008429E 162D 0009                  		move.b	9(a5),d3
000842A2 6B00                       		bmi.s	locret_72D16
000842A4 7A03                       		moveq	#3,d5
000842A6                            
000842A6                            loc_72D02:
000842A6 101A                       		move.b	(a2)+,d0
000842A8 1219                       		move.b	(a1)+,d1
000842AA E20C                       		lsr.b	#1,d4
000842AC 6400                       		bcc.s	loc_72D12
000842AE D203                       		add.b	d3,d1
000842B0 6500                       		bcs.s	loc_72D12
000842B2 4EBA F9E8                  		jsr	sub_72722(pc)
000842B6                            
000842B6                            loc_72D12:
000842B6 51CD FFEE                  		dbf	d5,loc_72D02
000842BA                            
000842BA                            locret_72D16:
000842BA 4E75                       		rts	
000842BC                            ; End of function sub_72CB4
000842BC                            
000842BC                            ; ===========================================================================
000842BC 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
000842C6 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
000842D0 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
000842D4                            ; ===========================================================================
000842D4                            
000842D4                            loc_72D30:				; XREF: loc_72A64
000842D4 08D5 0003                  		bset	#3,(a5)
000842D8 2B4C 0014                  		move.l	a4,$14(a5)
000842DC 1B5C 0018                  		move.b	(a4)+,$18(a5)
000842E0 1B5C 0019                  		move.b	(a4)+,$19(a5)
000842E4 1B5C 001A                  		move.b	(a4)+,$1A(a5)
000842E8 101C                       		move.b	(a4)+,d0
000842EA E208                       		lsr.b	#1,d0
000842EC 1B40 001B                  		move.b	d0,$1B(a5)
000842F0 426D 001C                  		clr.w	$1C(a5)
000842F4 4E75                       		rts	
000842F6                            ; ===========================================================================
000842F6                            
000842F6                            loc_72D52:				; XREF: loc_72A64
000842F6 08D5 0003                  		bset	#3,(a5)
000842FA 4E75                       		rts	
000842FC                            ; ===========================================================================
000842FC                            
000842FC                            loc_72D58:				; XREF: loc_72A64
000842FC 0895 0007                  		bclr	#7,(a5)
00084300 0895 0004                  		bclr	#4,(a5)
00084304 4A2D 0001                  		tst.b	1(a5)
00084308 6B00                       		bmi.s	loc_72D74
0008430A 4A2E 0008                  		tst.b	8(a6)
0008430E 6B00 0000                  		bmi.w	loc_72E02
00084312 4EBA F964                  		jsr	sub_726FE(pc)
00084316 6000                       		bra.s	loc_72D78
00084318                            ; ===========================================================================
00084318                            
00084318                            loc_72D74:
00084318 4EBA FC2C                  		jsr	sub_729A0(pc)
0008431C                            
0008431C                            loc_72D78:
0008431C 4A2E 000E                  		tst.b	$E(a6)
00084320 6A00 0000                  		bpl.w	loc_72E02
00084324 4216                       		clr.b	0(a6)
00084326 7000                       		moveq	#0,d0
00084328 102D 0001                  		move.b	1(a5),d0
0008432C 6B00                       		bmi.s	loc_72DCC
0008432E 41FA F4A4                  		lea	dword_722CC(pc),a0
00084332 264D                       		movea.l	a5,a3
00084334 0C00 0004                  		cmpi.b	#4,d0
00084338 6600                       		bne.s	loc_72DA8
0008433A 4A2E 0370                  		tst.b	$370(a6)				; MJ: new SFX location
0008433E 6A00                       		bpl.s	loc_72DA8
00084340 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
00084344 226E 0020                  		movea.l	$20(a6),a1
00084348 6000                       		bra.s	loc_72DB8
0008434A                            ; ===========================================================================
0008434A                            
0008434A                            loc_72DA8:
0008434A 5500                       		subq.b	#2,d0
0008434C E508                       		lsl.b	#2,d0
0008434E 2A70 0000                  		movea.l	(a0,d0.w),a5
00084352 4A15                       		tst.b	(a5)
00084354 6A00                       		bpl.s	loc_72DC8
00084356 226E 0018                  		movea.l	$18(a6),a1
0008435A                            
0008435A                            loc_72DB8:
0008435A 0895 0002                  		bclr	#2,(a5)
0008435E 08D5 0001                  		bset	#1,(a5)
00084362 102D 000B                  		move.b	$B(a5),d0
00084366 4EBA FE8A                  		jsr	sub_72C4E(pc)
0008436A                            
0008436A                            loc_72DC8:
0008436A 2A4B                       		movea.l	a3,a5
0008436C 6000                       		bra.s	loc_72E02
0008436E                            ; ===========================================================================
0008436E                            
0008436E                            loc_72DCC:
0008436E 41EE 03A0                  		lea	$3A0(a6),a0				; MJ: new SFX location
00084372 4A10                       		tst.b	(a0)
00084374 6A00                       		bpl.s	loc_72DE0
00084376 0C00 00E0                  		cmpi.b	#$E0,d0
0008437A 6700                       		beq.s	loc_72DEA
0008437C 0C00 00C0                  		cmpi.b	#$C0,d0
00084380 6700                       		beq.s	loc_72DEA
00084382                            
00084382                            loc_72DE0:
00084382 41FA F450                  		lea	dword_722CC(pc),a0
00084386 E608                       		lsr.b	#3,d0
00084388 2070 0000                  		movea.l	(a0,d0.w),a0
0008438C                            
0008438C                            loc_72DEA:
0008438C 0890 0002                  		bclr	#2,(a0)
00084390 08D0 0001                  		bset	#1,(a0)
00084394 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0008439A 6600                       		bne.s	loc_72E02
0008439C 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000843A4                            
000843A4                            loc_72E02:
000843A4 584F                       		addq.w	#4,sp					; MJ: changed to 4 (go back, but not out of sound driver)
000843A6 4A2E 0008                  		tst.b	$08(a6)					; MJ: is this a PCM channel?
000843AA 6600                       		bne.s	FlagF2_NoWaitFrame			; MJ: if so, branch
000843AC 584F                       		addq.w	#4,sp					; MJ: go back outside the sound driver like normal
000843AE                            
000843AE                            FlagF2_NoWaitFrame:
000843AE 4E75                       		rts	
000843B0                            ; ===========================================================================
000843B0                            
000843B0                            loc_72E06:				; XREF: loc_72A64
000843B0 1B7C 00E0 0001             		move.b	#$E0,1(a5)
000843B6 1B5C 001F                  		move.b	(a4)+,$1F(a5)
000843BA 0815 0002                  		btst	#2,(a5)
000843BE 6600                       		bne.s	locret_72E1E 
000843C0 102C FFFF                  		move.b	-1(a4),d0				; MJ: reload F3 setting to d0
000843C4 13C0 00C0 0011             		move.b	d0,($C00011).l				; MJ: save F3 setting (should be EX (PSG 4) related)
000843CA 0200 0003                  		andi.b	#%00000011,d0				; MJ: get only frequency mode bits
000843CE 0C00 0003                  		cmpi.b	#%00000011,d0				; MJ: has it been set to use PSG 3's frequency?
000843D2 6600                       		bne.s	locret_72E1E				; MJ: if not, branch
000843D4 13FC 00DF 00C0 0011        		move.b	#%11011111,($C00011).l			; MJ: mute PSG 3's volume
000843DC                            
000843DC                            locret_72E1E:
000843DC 4E75                       		rts	
000843DE                            ; ===========================================================================
000843DE                            
000843DE                            loc_72E20:				; XREF: loc_72A64
000843DE 0895 0003                  		bclr	#3,(a5)
000843E2 4E75                       		rts	
000843E4                            ; ===========================================================================
000843E4                            
000843E4                            loc_72E26:				; XREF: loc_72A64
000843E4 1B5C 000B                  		move.b	(a4)+,$B(a5)
000843E8 4E75                       		rts	
000843EA                            ; ===========================================================================
000843EA                            
000843EA                            loc_72E2C:				; XREF: loc_72A64
000843EA 101C                       		move.b	(a4)+,d0
000843EC E148                       		lsl.w	#8,d0
000843EE 101C                       		move.b	(a4)+,d0
000843F0 D8C0                       		adda.w	d0,a4
000843F2 534C                       		subq.w	#1,a4
000843F4 4E75                       		rts	
000843F6                            ; ===========================================================================
000843F6                            
000843F6                            loc_72E38:				; XREF: loc_72A64
000843F6 7000                       		moveq	#0,d0
000843F8 101C                       		move.b	(a4)+,d0
000843FA 121C                       		move.b	(a4)+,d1
000843FC 4A35 0024                  		tst.b	$24(a5,d0.w)
00084400 6600                       		bne.s	loc_72E48
00084402 1B81 0024                  		move.b	d1,$24(a5,d0.w)
00084406                            
00084406                            loc_72E48:
00084406 5335 0024                  		subq.b	#1,$24(a5,d0.w)
0008440A 66DE                       		bne.s	loc_72E2C
0008440C 544C                       		addq.w	#2,a4
0008440E 4E75                       		rts	
00084410                            ; ===========================================================================
00084410                            
00084410                            loc_72E52:				; XREF: loc_72A64
00084410 7000                       		moveq	#0,d0
00084412 102D 000D                  		move.b	$D(a5),d0
00084416 5900                       		subq.b	#4,d0
00084418 2B8C 0000                  		move.l	a4,(a5,d0.w)
0008441C 1B40 000D                  		move.b	d0,$D(a5)
00084420 60C8                       		bra.s	loc_72E2C
00084422                            ; ===========================================================================
00084422                            
00084422                            loc_72E64:				; XREF: loc_72A64
00084422 103C 0088                  		move.b	#$88,d0
00084426 123C 000F                  		move.b	#$F,d1
0008442A 4EBA F87C                  		jsr	sub_7272E(pc)
0008442E 103C 008C                  		move.b	#$8C,d0
00084432 123C 000F                  		move.b	#$F,d1
00084436 6000 F870                  		bra.w	sub_7272E
0008443A                            ; ===========================================================================
0008443A                            Z80ROM:		incbin	"Dual PCM\Z80.bin"
0008643A                            Z80ROM_End:	even
0008643A                            Music81:	incbin	sound\music81.bin
00087808 00                         		even
00087808                            Music82:	incbin	sound\music82.bin
0008D332                            		even
0008D332                            Music83:	incbin	sound\music83.bin
0008E7FA 00                         		even
0008E7FA                            Music84:	incbin	sound\music84.bin
0008FECA 00                         		even
0008FECA                            Music85:	incbin	sound\music85.bin
00090DF6                            		even
00090DF6                            Music86:	incbin	sound\music86.bin
00094018 00                         		even
00094018                            Music87:	incbin	sound\music87.bin
00094204 00                         		even
00094204                            Music88:	incbin	sound\music88.bin
000942F8 00                         		even
000942F8                            Music89:	incbin	sound\music89.bin
0009567C 00                         		even
0009567C                            Music8A:	incbin	sound\music8A.bin
000A7DBC 00                         		even
000A7DBC                            Music8B:	incbin	sound\music8B.bin
000A8E9C 00                         		even
000A8E9C                            Music8C:	incbin	sound\music8C.bin
000ABCD2 00                         		even
000ABCD2                            Music8D:	incbin	sound\music8D.bin
000ACC64 00                         		even
000ACC64                            Music8E:	incbin	sound\music8E.bin
000ACF76 00                         		even
000ACF76                            Music8F:	incbin	sound\music8F.bin
000AD0CC 00                         		even
000AD0CC                            Music90:	incbin	sound\music90.bin
000AD230 00                         		even
000AD230                            Music91:	incbin	sound\music91.bin
000BAA2C 00                         		even
000BAA2C                            Music92:	incbin	sound\music92.bin
000BAB5C 00                         		even
000BAB5C                            Music93:	incbin	sound\music93.bin
000BAC30 00                         		even
000BAC30                            Music94:	incbin	sound\music94.bin
000BC8CA                            		even
000BC8CA                            Music95:	incbin	sound\music95.bin
000BF672 00                         		even
000BF672                            Music96:	incbin	sound\music96.bin
000C0D62 00                         		even
000C0D62                            Music97:	incbin	sound\music97.bin
000C717C 00                         		even
000C717C                            Music98:	incbin	sound\music98.bin
000CAF3E 00                         		even
000CAF3E                            Music99:	incbin	sound\music92.bin
000CB06E 00                         		even
000CB06E                            Music9A:	incbin	sound\music9A.bin
000CD03C                            		even
000CD03C                            Music9B:	incbin	sound\music9B.bin
000D33EE                            		even
000D33EE                            Music9C:	incbin	sound\music9C.bin
000D5844                            		even
000D5844                            Music9D:	incbin	sound\music9D.bin
000D89D6                            		even
000D89D6                            Music9E:	incbin	sound\music9E.bin
000DF586 00                         		even
000DF586                            Music9F:	incbin	sound\music9F.bin
000E66A6 00                         		even
000E66A6                            ; ---------------------------------------------------------------------------
000E66A6                            ; Sound	effect pointers
000E66A6                            ; ---------------------------------------------------------------------------
000E66A6 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000E66B2 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000E66BE 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000E66CA 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000E66D6 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000E66E2 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000E66EE 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000E66FA 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000E6706 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000E6712 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000E671E 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000E672A 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000E6736 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000E6742 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000E674E 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000E675A 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000E6766 0000 0000                  		dc.l SoundD1
000E676A                            
000E676A 0000 0000                  SoundD0Index:	dc.l SoundD0
000E676E                            SoundA0:	incbin	sound\soundA0.bin
000E6784                            		even
000E6784                            SoundA1:	incbin	sound\soundA1.bin
000E67AE                            		even
000E67AE                            SoundA2:	incbin	sound\soundA2.bin
000E67CE                            		even
000E67CE                            SoundA3:	incbin	sound\soundA3.bin
000E6800                            		even
000E6800                            SoundA4:	incbin	sound\soundA4.bin
000E6836                            		even
000E6836                            SoundA5:	incbin	sound\soundA5.bin
000E6862                            		even
000E6862                            SoundA6:	incbin	sound\soundA6.bin
000E6892                            		even
000E6892                            SoundA7:	incbin	sound\soundA7.bin
000E68C2                            		even
000E68C2                            SoundA8:	incbin	sound\soundA8.bin
000E68F6                            		even
000E68F6                            SoundA9:	incbin	sound\soundA9.bin
000E6908                            		even
000E6908                            SoundAA:	incbin	sound\soundAA.bin
000E694A                            		even
000E694A                            SoundAB:	incbin	sound\soundAB.bin
000E696A                            		even
000E696A                            SoundAC:	incbin	sound\soundAC.bin
000E699E                            		even
000E699E                            SoundAD:	incbin	sound\soundAD.bin
000E69D4                            		even
000E69D4                            SoundAE:	incbin	sound\soundAE.bin
000E6A1E                            		even
000E6A1E                            SoundAF:	incbin	sound\soundAF.bin
000E6A4C                            		even
000E6A4C                            SoundB0:	incbin	sound\soundB0.bin
000E6A7E                            		even
000E6A7E                            SoundB1:	incbin	sound\soundB1.bin
000E6AAA                            		even
000E6AAA                            SoundB2:	incbin	sound\soundB2.bin
000E6AFA                            		even
000E6AFA                            SoundB3:	incbin	sound\soundB3.bin
000E6B44                            		even
000E6B44                            SoundB4:	incbin	sound\soundB4.bin
000E6BA0                            		even
000E6BA0                            SoundB5:	incbin	sound\soundB5.bin
000E6BCE                            		even
000E6BCE                            SoundB6:	incbin	sound\soundB6.bin
000E6BEC                            		even
000E6BEC                            SoundB7:	incbin	sound\soundB7.bin
000E6C28                            		even
000E6C28                            SoundB8:	incbin	sound\soundB8.bin
000E6C46                            		even
000E6C46                            SoundB9:	incbin	sound\soundB9.bin
000E6CAA                            		even
000E6CAA                            SoundBA:	incbin	sound\soundBA.bin
000E6CD2                            		even
000E6CD2                            SoundBB:	incbin	sound\soundBB.bin
000E6CFE                            		even
000E6CFE                            SoundBC:	incbin	sound\soundBC.bin
000E6D40                            		even
000E6D40                            SoundBD:	incbin	sound\soundBD.bin
000E6D94                            		even
000E6D94                            SoundBE:	incbin	sound\soundBE.bin
000E6DCE                            		even
000E6DCE                            SoundBF:	incbin	sound\soundBF.bin
000E6E40                            		even
000E6E40                            SoundC0:	incbin	sound\soundC0.bin
000E6E6E                            		even
000E6E6E                            SoundC1:	incbin	sound\soundC1.bin
000E6EA8                            		even
000E6EA8                            SoundC2:	incbin	sound\soundC2.bin
000E6ED2                            		even
000E6ED2                            SoundC3:	incbin	sound\soundC3.bin
000E6F4C                            		even
000E6F4C                            SoundC4:	incbin	sound\soundC4.bin
000E6F74                            		even
000E6F74                            SoundC5:	incbin	sound\soundC5.bin
000E6FDC                            		even
000E6FDC                            SoundC6:	incbin	sound\soundC6.bin
000E701E                            		even
000E701E                            SoundC7:	incbin	sound\soundC7.bin
000E704C                            		even
000E704C                            SoundC8:	incbin	sound\soundC8.bin
000E705E                            		even
000E705E                            SoundC9:	incbin	sound\soundC9.bin
000E708C                            		even
000E708C                            SoundCA:	incbin	sound\soundCA.bin
000E70BA                            		even
000E70BA                            SoundCB:	incbin	sound\soundCB.bin
000E7106                            		even
000E7106                            SoundCC:	incbin	sound\soundCC.bin
000E7140                            		even
000E7140                            SoundCD:	incbin	sound\soundCD.bin
000E714E                            		even
000E714E                            SoundCE:	incbin	sound\soundCE.bin
000E717C                            		even
000E717C                            SoundCF:	incbin	sound\soundCF.bin
000E71B4                            		even
000E71B4                            SoundD0:	incbin	sound\soundD0.bin
000E71EE                            		even
000E71EE                            SoundD1:	incbin	sound\soundD1.bin
000E722A                            		even			
000E722A                            SegaPCM:	incbin	sound\segapcm.wav,$3A
000F88B0 00                         SegaPCM_End:	even
000F88B0                            
000F88B0                            ; ===========================================================================
000F88B0                            ; ---------------------------------------------------------------------------
000F88B0                            ; Sample 68k PCM list
000F88B0                            ; ---------------------------------------------------------------------------
000F88B0                            
000F88B0 0000 0000                  SampleList:		dc.l	StopSample			; 80 (THIS IS A REST NOTE, DO NOT EDIT...)
000F88B4 0000 0000                  			dc.l	Sonic1Kick			; 81
000F88B8 0000 0000                  			dc.l	Sonic1Snare			; 82
000F88BC 0000 0000                  			dc.l	Sonic1TimpaniLow		; 83
000F88C0 0000 0000                  			dc.l	ChaotixCrash			; 84
000F88C4 0000 0000                   			dc.l	ChaotixSplash			; 85
000F88C8 0000 0000                  			dc.l	ChaotixTom1			; 86
000F88CC 0000 0000                  			dc.l	ChaotixTom2			; 87
000F88D0 0000 0000                  			dc.l	Sonic1TimpaniHigh		; 88
000F88D4 0000 0000                  			dc.l	Sonic1TimpaniMid		; 89
000F88D8 0000 0000                  			dc.l	Sonic1TimpaniLow		; 8A
000F88DC 0000 0000                  			dc.l	Sonic1TimpaniLower		; 8B
000F88E0 0000 0000                  			dc.l	Sonic3CleanSnare		; 8C
000F88E4 0000 0000                  			dc.l	KSTHi		; 8D
000F88E8 0000 0000                  			dc.l	KSTLo		; 8E
000F88EC 0000 0000                  			dc.l	MainCrash		; 8F
000F88F0 0000 0000                  			dc.l	RideCymbal		; 90
000F88F4 0000 0000                  			dc.l	Sonic1SnareSonic3Kick		; 91
000F88F8 0000 0000                  			dc.l	Sonic3Kick		; 92
000F88FC 0000 0000                  			dc.l	Tom1		; 93
000F8900 0000 0000                  			dc.l	Tom2		; 94
000F8904 0000 0000                  			dc.l	Tom3		; 95
000F8908 0000 0000                  			dc.l	Tom4		; 96
000F890C 0000 0000                  			dc.l	Sonic2Clap		; 97
000F8910 0000 0000                  			dc.l	Sonic1SnareSonic2Clap		; 98
000F8914 0000 0000                  			dc.l	S1STom1		; 99	
000F8918 0000 0000                  			dc.l	S1STom2		; 9A			
000F891C 0000 0000                  			dc.l	S1STom3		; 9B
000F8920 0000 0000                  			dc.l	S1STom4		; 9C			
000F8924 0000 0000                  			dc.l	S1SLLZK		; 9D
000F8928 0000 0000                  			dc.l	LLZK		; 9E			
000F892C 0000 0000                  			dc.l	Bongo1		; 9F
000F8930 0000 0000                  			dc.l	Bongo2		; A0
000F8934 0000 0000                  			dc.l	S1SnareCrash	;A1
000F8938 0000 0000                  			dc.l	S1SnareKick	;A2
000F893C 0000 0000                  			dc.l	MainCrashWoo	;A3
000F8940 0000 0000                  			dc.l	Woo		;A4
000F8944 0000 0000                  			dc.l	GoS1Snare	;A5
000F8948 0000 0000                  			dc.l	CmonRoll	;A6
000F894C 0000 0000                  			dc.l	ReverseCymbal	;A7
000F8950 0000 0000                  			dc.l	Cutscene1	;A8
000F8954 0000 0000                  			dc.l	Cutscene2	;A9
000F8958 0000 0000                  			dc.l	Snare3	;AA
000F895C 0000 0000                  			dc.l	Snare3Crash	;AB
000F8960 0000 0000                  			dc.l	EGGStation	;AC
000F8964                            ; ---------------------------------------------------------------------------
000F8964                            ; Sample z80 pointers
000F8964                            ; ---------------------------------------------------------------------------
000F8964                            
000F8964 0000 00                    StopSample:		dcz80	SWF_StopSample
000F8967 0000 00                    Sonic1Kick:		dcz80	SWF_S1Kick
000F896A 0000 00                    Sonic1Snare:		dcz80	SWF_S1Snare
000F896D 0000 00                    Sonic1TimpaniHigh:	dcz80	SWF_S1TimpaniHigh
000F8970 0000 00                    Sonic1TimpaniMid:	dcz80	SWF_S1TimpaniMid
000F8973 0000 00                    Sonic1TimpaniLow:	dcz80	SWF_S1TimpaniLow
000F8976 0000 00                    Sonic1TimpaniLower:	dcz80	SWF_S1TimpaniLower
000F8979 0000 00                    ChaotixCrash:	dcz80	SWF_ChaotixCrash
000F897C 0000 00                    ChaotixSplash:	dcz80	SWF_ChaotixSplash
000F897F 0000 00                    ChaotixTom1:	dcz80	SWF_ChaotixTom1
000F8982 0000 00                    ChaotixTom2:	dcz80	SWF_ChaotixTom2
000F8985 0000 00                    Sonic3CleanSnare:	dcz80	SWF_Sonic3CleanSnare
000F8988 0000 00                    KSTHi:	dcz80	SWF_KSTHi
000F898B 0000 00                    KSTLo:	dcz80	SWF_KSTLo
000F898E 0000 00                    MainCrash:	dcz80	SWF_MainCrash
000F8991 0000 00                    RideCymbal:	dcz80	SWF_RideCymbal
000F8994 0000 00                    Sonic1SnareSonic3Kick:	dcz80	SWF_Sonic1SnareSonic3Kick
000F8997 0000 00                    Sonic3Kick:	dcz80	SWF_Sonic3Kick
000F899A 0000 00                    Tom1:	dcz80	SWF_Tom1
000F899D 0000 00                    Tom2:	dcz80	SWF_Tom2
000F89A0 0000 00                    Tom3:	dcz80	SWF_Tom3
000F89A3 0000 00                    Tom4:	dcz80	SWF_Tom4
000F89A6 0000 00                    Sonic2Clap:	dcz80	SWF_Sonic2Clap
000F89A9 0000 00                    Sonic1SnareSonic2Clap:	dcz80	SWF_Sonic1SnareSonic2Clap
000F89AC 0000 00                    S1STom1:	dcz80	SWF_S1STom1
000F89AF 0000 00                    S1STom2:	dcz80	SWF_S1STom2
000F89B2 0000 00                    S1STom3:	dcz80	SWF_S1STom3
000F89B5 0000 00                    S1STom4:	dcz80	SWF_S1STom4
000F89B8 0000 00                    LLZK:	dcz80	SWF_LLZK
000F89BB 0000 00                    S1SLLZK:	dcz80	SWF_S1SLLZK
000F89BE 0000 00                    Bongo1:	dcz80	SWF_Bongo1
000F89C1 0000 00                    Bongo2:	dcz80	SWF_Bongo2
000F89C4 0000 00                    S1SnareCrash: dcz80 SWF_S1SnareCrash
000F89C7 0000 00                    S1SnareKick: dcz80 SWF_S1SnareKick
000F89CA 0000 00                    MainCrashWoo: dcz80 SWF_MainCrashWoo
000F89CD 0000 00                    Woo: dcz80 SWF_Woo
000F89D0 0000 00                    GoS1Snare: dcz80 SWF_GoS1Snare
000F89D3 0000 00                    CmonRoll: dcz80 SWF_CmonRoll
000F89D6 0000 00                    ReverseCymbal: dcz80 SWF_ReverseCymbal
000F89D9 0000 00                    Cutscene1: dcz80 SWF_Cutscene1
000F89DC 0000 00                    Cutscene2: dcz80 SWF_Cutscene2
000F89DF 0000 00                    Snare3: dcz80 SWF_Snare3
000F89E2 0000 00                    Snare3Crash: dcz80 SWF_Snare3Crash
000F89E5 0000 00                    EGGStation: dcz80 SWF_EGGStation
000F89E8                            ; ---------------------------------------------------------------------------
000F89E8                            ; Sample file includes
000F89E8                            ; ---------------------------------------------------------------------------
000F89E8 0000 0000 0000 0000 0000+  			align	$20,$FF
000F8A00                            SWF_StopSample:		dcb.b	$7FFF,$00
001009FF 80                         			dc.b	$80
00100A00                            ; ---------------------------------------------------------------------------
00100A00                            SWF_S1Kick:		incbin	"Dual PCM\Samples\incswf\Sonic 1 Kick.swf"
00101B20                            SWF_S1Snare:		incbin	"Dual PCM\Samples\incswf\Sonic 1 Snare.swf"
00102860                            SWF_S1TimpaniHigh:	incbin	"Dual PCM\Samples\incswf\Sonic 1 Timpani High.swf"
00106F00                            SWF_S1TimpaniMid:	incbin	"Dual PCM\Samples\incswf\Sonic 1 Timpani Mid.swf"
0010BE40                            SWF_S1TimpaniLow:	incbin	"Dual PCM\Samples\incswf\Sonic 1 Timpani Low.swf"
00111C80                            SWF_S1TimpaniLower:	incbin	"Dual PCM\Samples\incswf\Sonic 1 Timpani Lower.swf"
00118060                            SWF_ChaotixCrash:	incbin	"Dual PCM\Samples\incswf\Knuckles Chaotix Crash Cymbal.swf"
0011F860                            SWF_ChaotixSplash:	incbin	"Dual PCM\Samples\incswf\Knuckles Chaotix Splash Cymbal.swf"
00121F00                            SWF_ChaotixTom1:	incbin	"Dual PCM\Samples\incswf\Knuckles Chaotix Tom 1.swf"
00128F40                            SWF_ChaotixTom2:	incbin	"Dual PCM\Samples\incswf\Knuckles Chaotix Tom 2.swf"
0012A0A0                            SWF_Sonic3CleanSnare:	incbin	"Dual PCM\Samples\incswf\Sonic 3 Cleaner Snare.swf"
0012AF80                            SWF_KSTHi:	incbin	"Dual PCM\Samples\incswf\KSTHi.swf"
0012F620                            SWF_KSTLo:	incbin	"Dual PCM\Samples\incswf\KSTLo.swf"
00135460                            SWF_MainCrash:	incbin	"Dual PCM\Samples\incswf\MainCrash.swf"
0013A3A0                            SWF_RideCymbal:	incbin	"Dual PCM\Samples\incswf\RideCymbal.swf"
0013C200                            SWF_Sonic1SnareSonic3Kick:	incbin	"Dual PCM\Samples\incswf\Sonic 1 Snare and Sonic 3 Kick.swf"
0013CF20                            SWF_Sonic3Kick:	incbin	"Dual PCM\Samples\incswf\Sonic 3 Kick.swf"
0013D540                            SWF_Tom1:	incbin	"Dual PCM\Samples\incswf\Tom1.swf"
0013E420                            SWF_Tom2:	incbin	"Dual PCM\Samples\incswf\Tom2.swf"
0013F600                            SWF_Tom3:	incbin	"Dual PCM\Samples\incswf\Tom3.swf"
00140BE0                            SWF_Tom4:	incbin	"Dual PCM\Samples\incswf\Tom4.swf"
00142B80                            SWF_Sonic2Clap:	incbin	"Dual PCM\Samples\incswf\Sonic 2 Clap.swf"
001438A0                            SWF_Sonic1SnareSonic2Clap:	incbin	"Dual PCM\Samples\incswf\Sonic 1 Snare and Sonic 2 Clap.swf"
001445E0                            SWF_S1STom1:	incbin	"Dual PCM\Samples\incswf\S1STom1.swf"
001454C0                            SWF_S1STom2:	incbin	"Dual PCM\Samples\incswf\S1STom2.swf"
001466A0                            SWF_S1STom3:	incbin	"Dual PCM\Samples\incswf\S1STom3.swf"
00147C80                            SWF_S1STom4:	incbin	"Dual PCM\Samples\incswf\S1STom4.swf"
00149C20                            SWF_LLZK:	incbin	"Dual PCM\Samples\incswf\LLZK.swf"
0014B6A0                            SWF_S1SLLZK:	incbin	"Dual PCM\Samples\incswf\S1SLLZK.swf"
0014D120                            SWF_Bongo1:	incbin	"Dual PCM\Samples\incswf\Bongo1.swf"
0014DAC0                            SWF_Bongo2:	incbin	"Dual PCM\Samples\incswf\Bongo2.swf"
0014E800                            SWF_S1SnareCrash:	incbin	"Dual PCM\Samples\incswf\S1Snare and MainCrash.swf"
00153720                            SWF_S1SnareKick:	incbin	"Dual PCM\Samples\incswf\S1SnareKick.swf"
00154840                            SWF_MainCrashWoo:	incbin	"Dual PCM\Samples\incswf\MainCrashWoo.swf"
00159760                            SWF_Woo:	incbin	"Dual PCM\Samples\incswf\Woo.swf"
0015ACA0                            SWF_GoS1Snare:	incbin	"Dual PCM\Samples\incswf\GoS1Snare.swf"
0015C0A0                            SWF_CmonRoll:	incbin	"Dual PCM\Samples\incswf\CmonRoll.swf"
0015EDE0                            SWF_ReverseCymbal:	incbin	"Dual PCM\Samples\incswf\Reverse cymbal.swf"
00162660                            SWF_Cutscene1:	incbin	"Dual PCM\Samples\incswf\Cutscene1.swf"
00167580                            SWF_Cutscene2:	incbin	"Dual PCM\Samples\incswf\Cutscene2.swf"
0016C4A0                            SWF_Snare3:	incbin	"Dual PCM\Samples\incswf\Snare3.swf"
0016D9A0                            SWF_Snare3Crash:	incbin	"Dual PCM\Samples\incswf\Snare3Crash.swf"
001728C0                            SWF_EGGStation:	incbin	"Dual PCM\Samples\incswf\EGGStation.swf"
001777E0                            ; ===============================================================
001777E0                            ; ---------------------------------------------------------------
001777E0                            ; Error handling module
001777E0                            ; ---------------------------------------------------------------
001777E0                             
001777E0 4EBA 0000                  BusError:   jsr ErrorHandler(pc)
001777E4 4255 5320 4552 524F 5200           dc.b    "BUS ERROR",0           ; text
001777EE 01                                 dc.b    1               ; extended stack frame
001777F0 00                                 even
001777F0                             
001777F0 4EBA 0000                  AddressError:   jsr ErrorHandler(pc)
001777F4 4144 4452 4553 5320 4552+          dc.b    "ADDRESS ERROR",0       ; text
00177802 01                                 dc.b    1               ; extended stack frame
00177804 00                                 even
00177804                             
00177804 4EBA 0000                  IllegalInstr:   jsr ErrorHandler(pc)
00177808 494C 4C45 4741 4C20 494E+          dc.b    "ILLEGAL INSTRUCTION",0     ; text
0017781C 00                                 dc.b    0               ; extended stack frame
0017781E 00                                 even
0017781E                             
0017781E 4EBA 0000                  ZeroDivide: jsr ErrorHandler(pc)
00177822 5A45 524F 2044 4956 4944+          dc.b    "ZERO DIVIDE",0         ; text
0017782E 00                                 dc.b    0               ; extended stack frame
00177830 00                                 even
00177830                             
00177830 4EBA 0000                  ChkInstr:   jsr ErrorHandler(pc)
00177834 4348 4B20 494E 5354 5255+          dc.b    "CHK INSTRUCTION",0         ; text
00177844 00                                 dc.b    0               ; extended stack frame
00177846 00                                 even
00177846                             
00177846 4EBA 0000                  TrapvInstr: jsr ErrorHandler(pc)
0017784A 5452 4150 5620 494E 5354+          dc.b    "TRAPV INSTRUCTION",0       ; text
0017785C 00                                 dc.b    0               ; extended stack frame
0017785E 00                                 even
0017785E                             
0017785E 4EBA 0000                  PrivilegeViol:  jsr ErrorHandler(pc)
00177862 5052 4956 494C 4547 4520+          dc.b    "PRIVILEGE VIOLATION",0     ; text
00177876 00                                 dc.b    0               ; extended stack frame
00177878 00                                 even
00177878                             
00177878 4EBA 0000                  Trace:      jsr ErrorHandler(pc)
0017787C 5452 4143 4500                     dc.b    "TRACE",0           ; text
00177882 00                                 dc.b    0               ; extended stack frame
00177884 00                                 even
00177884                             
00177884 4EBA 0000                  Line1010Emu:    jsr ErrorHandler(pc)
00177888 4C49 4E45 2031 3031 3020+          dc.b    "LINE 1010 EMULATOR",0      ; text
0017789B 00                                 dc.b    0               ; extended stack frame
0017789C                                    even
0017789C                             
0017789C 4EBA 0000                  Line1111Emu:    jsr ErrorHandler(pc)
001778A0 4C49 4E45 2031 3131 3120+          dc.b    "LINE 1111 EMULATOR",0      ; text
001778B3 00                                 dc.b    0               ; extended stack frame
001778B4                                    even
001778B4                             
001778B4 4EBA 0000                  ErrorExcept:    jsr ErrorHandler(pc)
001778B8 4552 524F 5220 4558 4345+          dc.b    "ERROR EXCEPTION",0         ; text
001778C8 00                                 dc.b    0               ; extended stack frame
001778CA 00                                 even
001778CA                             
001778CA                            ErrorHandler:   incbin  "ErrorHandler.bin"
001780AE                            
001780AE                            	include	"s2_menu.asm"	; Sonic 2 level select
001780AE                            ;===============================================================================
001780AE                            ; Menu do Sonic 2 No Sonic 1 reprogramado por Esrael L. G. Neto
001780AE                            ; [ In�cio ]
001780AE                            ;
001780AE                            ; O c�digo deste menu foi desenvolvido para funcionar com
001780AE                            ; o disassembly do Sonic 1 feito por -> drx (www.hacking-cult.org)
001780AE                            ; 
001780AE                            ; Se estiver usando um disassembly diferente modifique os jumps no final do 
001780AE                            ; c�digo para que aponte para as rotinas equivalentes.
001780AE                            ; 
001780AE                            ; Para pode utilizar este menu basta fazer a seguinte modifica��o no c�digo 
001780AE                            ; original:
001780AE                            ; Localize o label  -> loc_3242 adicione -> jmp     Level_Select_Menu
001780AE                            ; O c�digo deve ficar como abaixo
001780AE                            ;               ......................
001780AE                            ; loc_3242:
001780AE                            ;		tst.b	($FFFFFFE0).w
001780AE                            ;		beq.w	PlayLevel	
001780AE                            ;		btst	#6,($FFFFF604).w 
001780AE                            ;		beq.w	PlayLevel	  		
001780AE                            ;		jmp     Level_Select_Menu ; <- Carrega o Menu do Sonic 2	
001780AE                            ;		moveq	#2,d0		
001780AE                            ;		bsr.w	PalLoad		 
001780AE                            ;               ...............
001780AE                            ;
001780AE                            ; N�o esque�a de incluir este asm em seu c�digo com a diretiva include:
001780AE                            ;               include 's2_menu.asm'
001780AE                            ;===============================================================================  
001780AE =FFFFFFE1                  Slow_Motion_Flag      equ $FFFFFFE1
001780AE =FFFFFFE2                  Debug_Mode_Flag       equ $FFFFFFE2
001780AE                            
001780AE =00000083                  Level_Select_Menu_snd   = $0083
001780AE =00000093                  Emerald_Snd             = $0093
001780AE =000000B5                  Ring_Snd                = $00B5
001780AE =000000E0                  Volume_Down             = $00E0
001780AE =000000E4                  Stop_Sound              = $00E4
001780AE                            ;-------------------------------------------------------------------------------
001780AE                            Level_Select_Menu:
001780AE 103C 00E4                                  move.b  #Stop_Sound, D0
001780B2 6100 0000                                  bsr     Menu_Play_Music
001780B6 6100 0000                                  bsr     Menu_Pal_FadeFrom
001780BA 46FC 2700                                  move    #$2700, SR
001780BE 3038 F60C                                  move.w  ($FFFFF60C).w, D0
001780C2 0200 00BF                                  andi.b  #$BF, D0
001780C6 33C0 00C0 0004                             move.w  D0, ($00C00004)
001780CC 6100 0000                                  bsr     Menu_ClearScreen
001780D0 4DF9 00C0 0004                             lea     ($00C00004), A6
001780D6 3CBC 8004                                  move.w  #$8004, (A6)
001780DA 3CBC 8230                                  move.w  #$8230, (A6)
001780DE 3CBC 8407                                  move.w  #$8407, (A6)
001780E2 3CBC 8230                                  move.w  #$8230, (A6)
001780E6 3CBC 8700                                  move.w  #$8700, (A6)
001780EA 3CBC 8C81                                  move.w  #$8C81, (A6)
001780EE 3CBC 9001                                  move.w  #$9001, (A6)
001780F2 43F8 AC00                                  lea     ($FFFFAC00).w, A1
001780F6 7000                                       moveq   #$00, D0
001780F8 323C 00FF                                  move.w  #$00FF, D1
001780FC                            Offset_0x026ACA:
001780FC 22C0                                       move.l  D0, (A1)+
001780FE 51C9 FFFC                                  dbra    D1, Offset_0x026ACA
00178102 43F8 B000                                  lea     ($FFFFB000).w, A1
00178106 7000                                       moveq   #$00, D0
00178108 323C 07FF                                  move.w  #$07FF, D1
0017810C                            Offset_0x026ADA:
0017810C 22C0                                       move.l  D0, (A1)+
0017810E 51C9 FFFC                                  dbra    D1, Offset_0x026ADA
00178112 4278 DC00                                  clr.w   ($FFFFDC00).w
00178116 21FC FFFF DC00 DCFC                        move.l  #$FFFFDC00, ($FFFFDCFC).w
0017811E 23FC 4200 0000 00C0 0004                   move.l  #$42000000, ($00C00004)
00178128 41F9 0000 0000                             lea     (Menu_Font), A0
0017812E 6100 0000                                  bsr     Menu_NemesisDec
00178132 23FC 5200 0000 00C0 0004                   move.l  #$52000000, ($00C00004)
0017813C 41F9 0000 0000                             lea     (Level_Icons), A0
00178142 4EB9 0000 0000                             jsr     Menu_NemesisDec
00178148                            ;-------------------------------------------------------------------------------                
00178148                            ; Carrega o Mapeamento do Fundo Sonic/Miles               
00178148                            ;-------------------------------------------------------------------------------
00178148 43F9 FFFF 0000                             lea     ($FFFF0000), A1
0017814E 41F9 0000 0000                             lea     (Menu_Mappings), A0
00178154 303C 6000                                  move.w  #$6000, D0
00178158 6100 0000                                  bsr     Menu_EnigmaDec
0017815C 43F9 FFFF 0000                             lea     ($FFFF0000), A1
00178162 203C 6000 0003                             move.l  #$60000003, D0
00178168 7227                                       moveq   #$27, D1
0017816A 741B                                       moveq   #$1B, D2
0017816C 6100 0000                                  bsr     Menu_ShowVDPGraphics
00178170                            ;-------------------------------------------------------------------------------                
00178170                            ; Carrega o Texto do Menu de Seleзгo de Fases               
00178170                            ;-------------------------------------------------------------------------------
00178170 47F9 FFFF 0000             		lea		($FFFF0000),a3
00178176 323C 045F                  		move.w	#$045F,d1
0017817A                            
0017817A                            Offset_0x026B4E:
0017817A 36FC 0000                  		move.w	#$0000,(a3)+
0017817E 51C9 FFFA                  		dbra	d1,Offset_0x026B4E
00178182 47F9 FFFF 0000             		lea		($FFFF0000),a3
00178188 43F9 0000 0000             		lea		(Menu_Level_Select_Text),a1
0017818E 4BF9 0000 0000             		lea		(Menu_Text_Positions),a5
00178194 7000                       		moveq	#$00,d0
00178196 323C 0009                  		move.w	#$0009,d1	; Quantidade de textos a ser carregada e posiзгo do Sound Test
0017819A                            
0017819A                            Menu_Loop_Load_Text:
0017819A 361D                       		move.w	(a5)+,d3
0017819C 45F3 3000                  		lea		$00(a3,d3),a2
001781A0 7400                       		moveq	#$00,d2
001781A2 1419                       		move.b	(a1)+,d2
001781A4 3602                       		move.w	d2,d3
001781A6                            
001781A6                            Offset_0x026B7A:
001781A6 1019                       		move.b	(a1)+,d0
001781A8 34C0                       		move.w	d0,(a2)+
001781AA 51CA FFFA                  		dbra	d2,Offset_0x026B7A
001781AE 343C 000D                  		move.w	#$000D,d2
001781B2 9443                       		sub.w	d3,d2
001781B4 6500                       		bcs.s	Offset_0x026B92
001781B6                            
001781B6                            Offset_0x026B8A:
001781B6 34FC 0000                  		move.w	#$0000,(a2)+
001781BA 51CA FFFA                  		dbra	d2,Offset_0x026B8A
001781BE                            
001781BE                            Offset_0x026B92:
001781BE 34BC 0011                  		move.w	#$0011,(a2) 	 	 	 ; Load "1"
001781C2 45EA 0050                  		lea		$0050(a2),a2
001781C6 34BC 0012                  		move.w	#$0012,(a2) 	 	 	 ; Load "2"
001781CA 45EA 0050                  		lea		$0050(a2),a2
001781CE 34BC 0013                  		move.w	#$0013,(a2) 	 	 	 ; Load "3"
001781D2 51C9 FFC6                  		dbra	d1,Menu_Loop_Load_Text
001781D6                            ;-------------------------------------------------------------------------------
001781D6 720E                       		moveq	#$0E,d1
001781D8 45EA FBA0                  		lea		$FFFFFBA0(a2),a2
001781DC                            
001781DC                            Menu_Clear_Act_x:						; Limpa os nъmeros dos acts nгo usados e carrega o "*" do Sound Test
001781DC 34BC 0000                  		move.w	#$0000,(a2)				; Load " "
001781E0 45EA 0050                  		lea		$0050(a2),a2
001781E4 51C9 FFF6                  		dbra	d1,Menu_Clear_Act_x
001781E8                            ;		lea     $FF10(a2), a2
001781E8                            ;		move.w  #$001A, (a2)          ; Load "*"
001781E8                            ;-------------------------------------------------------------------------------
001781E8                            ; Carrega o Mapeamento das Asas onde s�o mostrados os �cones
001781E8                            ;------------------------------------------------------------------------------- 
001781E8 41F9 0000 0000                             lea     (Wings_Mappings), A0
001781EE 43F9 FFFF 0670                             lea     ($FFFF0670), A1
001781F4 323C 0006                                  move     #$06, D1
001781F8                            Menu_Loop_Next_Line:
001781F8 303C 0009                                  move     #$09, D0
001781FC                            Menu_Loop_Load_Wings:
001781FC 32D8                                       move.w   (A0)+, (A1)+
001781FE 51C8 FFFC                                  dbra     D0, Menu_Loop_Load_Wings
00178202 D2FC 003C                                  add.w    #$3C, A1
00178206 51C9 FFF0                                  dbra     D1, Menu_Loop_Next_Line
0017820A                            ;-------------------------------------------------------------------------------                
0017820A                            ; Carrega o Mapeamento dos �cones               
0017820A                            ;-------------------------------------------------------------------------------                                    
0017820A 43F9 FFFF 08C0                             lea     ($FFFF08C0), A1
00178210 41F9 0000 0000                             lea     (Icons_Mappings), A0
00178216 303C 0090                                  move.w  #$0090, D0
0017821A 6100 0000                                  bsr     Menu_EnigmaDec
0017821E 43F9 FFFF 0000                             lea     ($FFFF0000), A1
00178224 203C 4000 0003                             move.l  #$40000003, D0
0017822A 7227                                       moveq   #$27, D1
0017822C 741B                                       moveq   #$1B, D2
0017822E 6100 0000                                  bsr     Menu_ShowVDPGraphics
00178232                            ;-------------------------------------------------------------------------------                
00178232 7600                                       moveq   #$00, D3
00178234 6100 0000                                  bsr     Offset_0x027040
00178238 4278 FF70                                  clr.w   ($FFFFFF70).w
0017823C 4278 FE40                                  clr.w   ($FFFFFE40).w
00178240 4238 F711                                  clr.b   ($FFFFF711).w
00178244 4278 F7F0                                  clr.w   ($FFFFF7F0).w
00178248                            ;------------------------------------------------------------------------------- 
00178248 31FC 0000 F7B8                             move.w  #$0000, ($FFFFF7B8).w  ; Inicializa os quadros das anima��es do menu
0017824E 31FC 0000 F7DA                             move.w  #$0000, ($FFFFF7DA).w  ; Inicializa o contador das anima��es do menu 
00178254 4EB9 0000 0000                             jsr     Dynamic_Menu           ; Chama a rotina de anima��o
0017825A                            ;-------------------------------------------------------------------------------
0017825A                            
0017825A 7014                                       moveq   #$14, D0
0017825C 6100 0000                                  bsr     Menu_PalLoad1
00178260 43F8 FB40                                  lea     ($FFFFFB40).w, A1
00178264 45F8 FBC0                                  lea     ($FFFFFBC0).w, A2
00178268 7207                                       moveq   #$07, D1
0017826A                            Offset_0x026C26:
0017826A 24D1                                       move.l  (A1), (A2)+
0017826C 4299                                       clr.l   (A1)+
0017826E 51C9 FFFA                                  dbra    D1, Offset_0x026C26
00178272 103C 0083                                  move.b  #Level_Select_Menu_snd, D0
00178276 6100 0000                                  bsr     Menu_Play_Music
0017827A 7000                                       moveq   #$00, D0
0017827C 4EB9 0000 0000                             jsr     Menu_LoadPLC2
00178282 31FC 0707 F614                             move.w  #$0707, ($FFFFF614).w
00178288 4278 FFDC                                  clr.w   ($FFFFFFDC).w
0017828C 42B8 EE00                                  clr.l   ($FFFFEE00).w
00178290 42B8 EE04                                  clr.l   ($FFFFEE04).w
00178294 4278 FF0C                                  clr.w   ($FFFFFF0C).w
00178298 4278 FF0E                                  clr.w   ($FFFFFF0E).w
0017829C 11FC 0018 F62A                             move.b  #$18, ($FFFFF62A).w
001782A2 6100 0000                                  bsr     Menu_DelayProgram
001782A6 3038 F60C                                  move.w  ($FFFFF60C).w, D0
001782AA 0000 0040                                  ori.b   #$40, D0
001782AE 33C0 00C0 0004                             move.w  D0, ($00C00004)
001782B4 6100 0000                                  bsr     Menu_Pal_FadeTo
001782B8                            Menu_Main_Loop:
001782B8 11FC 0018 F62A                             move.b  #$18, ($FFFFF62A).w
001782BE 6100 0000                                  bsr     Menu_DelayProgram
001782C2 46FC 2700                                  move    #$2700, SR
001782C6 7600                                       moveq   #$00, D3
001782C8 6100 0000                                  bsr     Offset_0x026ED8
001782CC 6100 0000                                  bsr     Offset_0x026DEC
001782D0 363C 6000                                  move.w  #$6000, D3
001782D4 6100 0000                                  bsr     Offset_0x027048
001782D8 46FC 2300                                  move    #$2300, SR
001782DC 4EB9 0000 0000                             jsr     Dynamic_Menu
001782E2 6100 0000                                  bsr     Menu_RunPLC
001782E6 0838 0004 F604                             btst    #$04, ($FFFFF604).w
001782EC 6700                                       beq.s   Offset_0x026CC6
001782EE 31FC 0001 FFD8                             move.w  #$0001, ($FFFFFFD8).w
001782F4                            Offset_0x026CC6:
001782F4 1038 F605                                  move.b  ($FFFFF605).w, D0
001782F8 8038 F607                                  or.b    ($FFFFF607).w, D0
001782FC 0200 0080                                  andi.b  #$80, D0
00178300 6600                                       bne.s   Offset_0x026CD8
00178302 60B4                                       bra     Menu_Main_Loop
00178304                            Offset_0x026CD8:
00178304 3038 FF82                                  move.w  ($FFFFFF82).w, D0
00178308 D040                                       add.w   D0, D0
0017830A 303B 0000                                  move.w  Menu_Level_Select_Array(PC, D0), D0
0017830E 6B00 0000                                  bmi     Menu_Game_Reset
00178312 0C40 0600                                  cmpi.w  #$0600, D0
00178316 6700 0000                                  beq     Menu_Ending_Sequence
0017831A 0C40 5555                                  cmpi.w  #$5555, D0
0017831E 6798                                       beq     Menu_Main_Loop
00178320 0C40 4000                                  cmpi.w  #$4000, D0
00178324 6600 0000                                  bne     Menu_Load_Level
00178328 11FC 0010 F600                             move.b  #$10, ($FFFFF600).w
0017832E 4278 FE10                                  clr.w   ($FFFFFE10).w
00178332 11FC 0003 FE12                             move.b  #$03, ($FFFFFE12).w
00178338 11FC 0003 FEC6                             move.b  #$03, ($FFFFFEC6).w
0017833E 7000                                       moveq   #$00, D0
00178340 31C0 FE20                                  move.w  D0, ($FFFFFE20).w
00178344 21C0 FE22                                  move.l  D0, ($FFFFFE22).w
00178348 21C0 FE26                                  move.l  D0, ($FFFFFE26).w
0017834C 31C0 FED0                                  move.w  D0, ($FFFFFED0).w
00178350 21C0 FED2                                  move.l  D0, ($FFFFFED2).w
00178354 21C0 FED6                                  move.l  D0, ($FFFFFED6).w
00178358 21FC 0000 1388 FFC0                        move.l  #$00001388, ($FFFFFFC0).w
00178360 21FC 0000 1388 FFC4                        move.l  #$00001388, ($FFFFFFC4).w
00178368 31F8 FF72 FF70                             move.w  ($FFFFFF72).w, ($FFFFFF70).w
0017836E 4E75                                       rts
00178370                            Menu_Game_Reset:
00178370 11FC 0000 F600                             move.b  #$0000, ($FFFFF600).w
00178376 4E75                                       rts
00178378                            Menu_Ending_Sequence:
00178378 11FC 0018 F600                             move.b	#$0018,($FFFFF600).w
0017837E 31FC 0600 FE10             		move.w	#$0600,($FFFFFE10).w
00178384 4E75                       		rts
00178386                            Menu_Level_Select_Array:
00178386 0000 0001 0002                             dc.w    $0000, $0001, $0002	;GHZ
0017838C 0200 0201 0202                             dc.w    $0200, $0201, $0202	;MZ
00178392 0400 0401 0402                             dc.w    $0400, $0401, $0402	;SYZ				
00178398 0100 0101 0102                             dc.w    $0100, $0101, $0102 ;LZ
0017839E 0300 0301 0302                             dc.w    $0300, $0301, $0302	;SLZ
001783A4 0500 0501 0103                             dc.w    $0500, $0501, $0103	;SBZ
001783AA 0502 4000 0600                             dc.w    $0502, $4000, $0600	
001783B0 FFFF                                       dc.w    $FFFF
001783B2                            Menu_Load_Level:
001783B2 0240 3FFF                                  andi.w  #$3FFF, D0
001783B6 31C0 FE10                                  move.w  D0, ($FFFFFE10).w
001783BA 11FC 000C F600                             move.b  #$0C, ($FFFFF600).w
001783C0 11FC 0003 FE12                             move.b  #$03, ($FFFFFE12).w
001783C6 11FC 0003 FEC6                             move.b  #$03, ($FFFFFEC6).w
001783CC 7000                                       moveq   #$00, D0
001783CE 31C0 FE20                                  move.w  D0, ($FFFFFE20).w
001783D2 21C0 FE22                                  move.l  D0, ($FFFFFE22).w
001783D6 21C0 FE26                                  move.l  D0, ($FFFFFE26).w
001783DA 31C0 FED0                                  move.w  D0, ($FFFFFED0).w
001783DE 21C0 FED2                                  move.l  D0, ($FFFFFED2).w
001783E2 21C0 FED6                                  move.l  D0, ($FFFFFED6).w
001783E6 4E71                                       nop
001783E8 4E71                                       nop
001783EA 21FC 0000 1388 FFC0                        move.l  #$00001388, ($FFFFFFC0).w
001783F2 21FC 0000 1388 FFC4                        move.l  #$00001388, ($FFFFFFC4).w
001783FA 103C 00E0                                  move.b  #Volume_Down, D0
001783FE 6100 0000                                  bsr     Menu_Play_Music     
00178402 7000                                       moveq   #$00, D0
00178404 31C0 FF8A                                  move.w  D0, ($FFFFFF8A).w
00178408 31C0 FFDC                                  move.w  D0, ($FFFFFFDC).w
0017840C 4E75                                       rts
0017840E                            Offset_0x026DEC:
0017840E 1238 F605                                  move.b  ($FFFFF605).w, D1
00178412 0201 0003                                  andi.b  #$03, D1
00178416 6600                                       bne.s   Offset_0x026DFC
00178418 5378 FF80                                  subq.w  #$01, ($FFFFFF80).w
0017841C 6A00                                       bpl.s   Offset_0x026E32
0017841E                            Offset_0x026DFC:
0017841E 31FC 000B FF80                             move.w  #$000B, ($FFFFFF80).w
00178424 1238 F604                                  move.b  ($FFFFF604).w, D1
00178428 0201 0003                                  andi.b  #$03, D1
0017842C 6700                                       beq.s   Offset_0x026E32
0017842E 3038 FF82                                  move.w  ($FFFFFF82).w, D0
00178432 0801 0000                                  btst    #$00, D1
00178436 6700                                       beq.s   Offset_0x026E1C
00178438 5340                                       subq.w  #$01, D0
0017843A 6400                                       bcc.s   Offset_0x026E1C
0017843C 7015                                       moveq   #$15, D0     ; �ltimo item ap�s apertar para cima
0017843E                            Offset_0x026E1C:
0017843E 0801 0001                                  btst    #$01, D1
00178442 6700                                       beq.s   Offset_0x026E2C
00178444 5240                                       addq.w  #$01, D0
00178446 0C40 0016                                  cmpi.w  #$0016, D0   ; Verifica qual o �ltimo item da lista
0017844A 6500                                       bcs.s   Offset_0x026E2C
0017844C 7000                                       moveq   #$00, D0
0017844E                            Offset_0x026E2C:
0017844E 31C0 FF82                                  move.w  D0, ($FFFFFF82).w
00178452 4E75                                       rts
00178454                            Offset_0x026E32:
00178454 0C78 0015 FF82                             cmpi.w  #$0015, ($FFFFFF82).w ; se o item for igual muda as fun��es de esquerda e direita 
0017845A 6600                                       bne.s   Offset_0x026E9C
0017845C 3038 FF84                                  move.w  ($FFFFFF84).w, D0
00178460 1238 F605                                  move.b  ($FFFFF605).w, D1
00178464 0801 0002                                  btst    #$02, D1
00178468 6700                                       beq.s   Offset_0x026E4E
0017846A 5300                                       subq.b  #$01, D0
0017846C 6400                                       bcc.s   Offset_0x026E4E
0017846E 707F                                       moveq   #$7F, D0
00178470                            Offset_0x026E4E:
00178470 0801 0003                                  btst    #$03, D1
00178474 6700                                       beq.s   Offset_0x026E5E
00178476 5200                                       addq.b  #$01, D0
00178478 0C40 0080                                  cmpi.w  #$0080, D0
0017847C 6500                                       bcs.s   Offset_0x026E5E
0017847E 7000                                       moveq   #$00, D0
00178480                            Offset_0x026E5E:
00178480 0801 0006                                  btst    #$06, D1
00178484 6700                                       beq.s   Offset_0x026E6C
00178486 0600 0010                                  addi.b  #$10, D0
0017848A 0200 007F                                  andi.b  #$7F, D0
0017848E                            Offset_0x026E6C:
0017848E 31C0 FF84                                  move.w  D0, ($FFFFFF84).w
00178492 0241 0030                                  andi.w  #$0030, D1
00178496 6700                                       beq.s   Offset_0x026E9A
00178498 3038 FF84                                  move.w  ($FFFFFF84).w, D0
0017849C 0640 0080                                  addi.w  #$0080, D0
001784A0 6100 0000                                  bsr     Menu_Play_Music 
001784A4 41F9 0000 0000                             lea     (Code_Debug_Mode), A0   
001784AA 45F9 0000 0000                             lea     (Code_All_Emeralds), A2 
001784B0 43F8 FF0A                                  lea     ($FFFFFF0A).w, A1
001784B4 7401                                       moveq   #$01, D2
001784B6 6100 0000                                  bsr     Menu_Code_Test 
001784BA                            Offset_0x026E9A:
001784BA 4E75                                       rts
001784BC                            Offset_0x026E9C:
001784BC 1238 F605                                  move.b  ($FFFFF605).w, D1
001784C0 0201 000C                                  andi.b  #$0C, D1
001784C4 6700                                       beq.s   Offset_0x026EB2
001784C6 3038 FF82                                  move.w  ($FFFFFF82).w, D0
001784CA 103B 0000                                  move.b  Menu_Left_Right_Select(PC, D0), D0
001784CE 31C0 FF82                                  move.w  D0, ($FFFFFF82).w
001784D2                            Offset_0x026EB2:
001784D2 4E75                                       rts
001784D4                            Menu_Left_Right_Select:                   
001784D4 0F10 1112 1212 1313 1314+                  dc.b    $0F, $10, $11, $12, $12, $12, $13, $13, $13, $14, $14, $14, $15, $15, $15
001784E3 0001 0203 0609 0C                          dc.b    $00, $01, $02, $03, $06, $09, $0C
001784EA                            Offset_0x026ED8:
001784EA 49F9 FFFF 0000                             lea     ($FFFF0000), A4
001784F0 4BF9 0000 0000                             lea     (Menu_Text_Highlight), A5
001784F6 4DF9 00C0 0000                             lea     ($00C00000), A6
001784FC 7000                                       moveq   #$00, D0
001784FE 3038 FF82                                  move.w  ($FFFFFF82).w, D0
00178502 E548                                       lsl.w   #$02, D0
00178504 47F5 0000                                  lea     $00(A5, D0), A3
00178508 7000                                       moveq   #$00, D0
0017850A 1013                                       move.b  (A3), D0
0017850C C0FC 0050                                  mulu.w  #$0050, D0
00178510 7200                                       moveq   #$00, D1
00178512 122B 0001                                  move.b  $0001(A3), D1
00178516 D041                                       add.w   D1, D0
00178518 43F4 0000                                  lea     $00(A4, D0), A1
0017851C 7200                                       moveq   #$00, D1
0017851E 1213                                       move.b  (A3), D1
00178520 EF49                                       lsl.w   #$07, D1
00178522 D22B 0001                                  add.b   $0001(A3), D1
00178526 0641 C000                                  addi.w  #$C000, D1
0017852A E589                                       lsl.l   #$02, D1
0017852C E449                                       lsr.w   #$02, D1
0017852E 0041 4000                                  ori.w   #$4000, D1
00178532 4841                                       swap.w  D1
00178534 2D41 0004                                  move.l  D1, $0004(A6)
00178538 740E                                       moveq   #$0E, D2    ; Quantidade de letras a selecionar (Highlight)
0017853A                            Offset_0x026F28:                
0017853A 3019                                       move.w  (A1)+, D0
0017853C D043                                       add.w   D3, D0
0017853E 3C80                                       move.w  D0, (A6)
00178540 51CA FFF8                                  dbra    D2, Offset_0x026F28
00178544 544B                                       addq.w  #$02, A3
00178546 7000                                       moveq   #$00, D0
00178548 1013                                       move.b  (A3), D0
0017854A 6700                                       beq.s   Offset_0x026F6C
0017854C C0FC 0050                                  mulu.w  #$0050, D0
00178550 7200                                       moveq   #$00, D1
00178552 122B 0001                                  move.b  $0001(A3), D1
00178556 D041                                       add.w   D1, D0
00178558 43F4 0000                                  lea     $00(A4, D0), A1
0017855C 7200                                       moveq   #$00, D1
0017855E 1213                                       move.b  (A3), D1
00178560 EF49                                       lsl.w   #$07, D1
00178562 D22B 0001                                  add.b   $0001(A3), D1
00178566 0641 C000                                  addi.w  #$C000, D1
0017856A E589                                       lsl.l   #$02, D1
0017856C E449                                       lsr.w   #$02, D1
0017856E 0041 4000                                  ori.w   #$4000, D1
00178572 4841                                       swap.w  D1
00178574 2D41 0004                                  move.l  D1, $0004(A6)
00178578 3019                                       move.w  (A1)+, D0
0017857A D043                                       add.w   D3, D0
0017857C 3C80                                       move.w  D0, (A6)
0017857E                            Offset_0x026F6C:
0017857E 0C78 0015 FF82                             cmpi.w  #$0015, ($FFFFFF82).w  ; Se for igual seleciona o n�mero do Sound Test
00178584 6600                                       bne.s   Offset_0x026F78
00178586 6100 0000                                  bsr     Offset_0x026F7A
0017858A                            Offset_0x026F78:
0017858A 4E75                                       rts
0017858C                            Offset_0x026F7A:
0017858C 23FC 49C6 0003 00C0 0004                   move.l  #$49C60003, ($00C00004) ; Posi��o dos n�meros do Sound Test
00178596 3038 FF84                                  move.w  ($FFFFFF84).w, D0
0017859A 1400                                       move.b  D0, D2
0017859C E808                                       lsr.b   #$04, D0
0017859E 6100                                       bsr.s   Offset_0x026F90
001785A0 1002                                       move.b  D2, D0
001785A2                            Offset_0x026F90:
001785A2 0240 000F                                  andi.w  #$000F, D0
001785A6 0C00 000A                                  cmpi.b  #$0A, D0
001785AA 6500                                       bcs.s   Offset_0x026F9E
001785AC 5800                                       addi.b  #$04, D0
001785AE                            Offset_0x026F9E:
001785AE 0600 0010                                  addi.b  #$10, D0
001785B2 D043                                       add.w   D3, D0
001785B4 3C80                                       move.w  D0, (A6)
001785B6 4E75                                       rts
001785B8                            ;-------------------------------------------------------------------------------                
001785B8                            Menu_Code_Test: 
001785B8 3038 FF0C                                  move.w  ($FFFFFF0C).w, D0
001785BC D0C0                                       adda.w  D0, A0
001785BE 3038 FF84                                  move.w  ($FFFFFF84).w, D0
001785C2 B010                                       cmp.b   (A0), D0
001785C4 6600                                       bne.s   Menu_Reset_Debug_Mode_Code_Counter
001785C6 5278 FF0C                                  addq.w  #$01, ($FFFFFF0C).w
001785CA 4A28 0001                                  tst.b   $0001(A0)
001785CE 6A00                                       bpl.s   Menu_All_Emeralds_Code_Test 
001785D0 32BC 0101                                  move.w  #$0101, (A1)
001785D4 6000 0000                                  bra     Menu_Set_Debug_Flag 
001785D8                            Menu_Reset_Debug_Mode_Code_Counter: 
001785D8 31FC 0000 FF0C                             move.w  #$0000, ($FFFFFF0C).w
001785DE                            Menu_All_Emeralds_Code_Test: 
001785DE 3038 FF0E                                  move.w  ($FFFFFF0E).w, D0
001785E2 D4C0                                       adda.w  D0, A2
001785E4 3038 FF84                                  move.w  ($FFFFFF84).w, D0
001785E8 B012                                       cmp.b   (A2), D0
001785EA 6600                                       bne.s   Menu_Reset_All_Emerald_Code_Counter 
001785EC 5278 FF0E                                  addq.w  #$01, ($FFFFFF0E).w
001785F0 4A2A 0001                                  tst.b   $0001(A2)
001785F4 6A00                                       bpl.s   Menu_Code_Not_0xFF 
001785F6 4A42                                       tst.w   D2
001785F8 6600                                       bne.s   Menu_Set_All_Emeralds 
001785FA                            Menu_Set_Debug_Flag: 
001785FA 11FC 0001 FFE1                             move.b  #$01, (Slow_Motion_Flag).w
00178600 11FC 0001 FFE2                             move.b  #$01, (Debug_Mode_Flag).w
00178606 103C 00B5                                  move.b  #Ring_Snd, D0
0017860A 6100 0000                                  bsr     Menu_Play_Music 
0017860E 6000                                       bra.s   Menu_Reset_All_Emerald_Code_Counter 
00178610                            Menu_Set_All_Emeralds: 
00178610 31FC 0006 FE56                             move.w  #$0006, ($FFFFFE56).w
00178616 103C 0093                                  move.b  #Emerald_Snd, D0
0017861A 6100 0000                                  bsr     Menu_Play_Music 
0017861E                            Menu_Reset_All_Emerald_Code_Counter: 
0017861E 31FC 0000 FF0E                             move.w  #$0000, ($FFFFFF0E).w
00178624                            Menu_Code_Not_0xFF: 
00178624 4E75                                       rts               
00178626                            Code_Debug_Mode: 
00178626 0109 0902 0101 0204 FF                     dc.b    $01, $09, $09, $02, $01, $01, $02, $04, $FF
0017862F                            Code_All_Emeralds: 
0017862F 0401 0206 FF                               dc.b    $04, $01, $02, $06, $FF
00178634                            ;-------------------------------------------------------------------------------                 
00178634                            Offset_0x027040:
00178634 6100 FF56                                  bsr     Offset_0x026F7A
00178638 6000 0000                                  bra     Offset_0x027050
0017863C                            Offset_0x027048:
0017863C 6100 FEAC                                  bsr     Offset_0x026ED8
00178640 6000 0000                                  bra     Offset_0x027050
00178644                            Offset_0x027050:
00178644 3038 FF82                                  move.w  ($FFFFFF82).w, D0
00178648 47F9 0000 0000                             lea     (Menu_Icon_List), A3
0017864E 47F3 0000                                  lea     $00(A3, D0), A3
00178652 43F9 FFFF 08C0                             lea     ($FFFF08C0), A1
00178658 7000                                       moveq   #$00, D0
0017865A 1013                                       move.b  (A3), D0
0017865C E748                                       lsl.w   #$03, D0
0017865E 3200                                       move.w  D0, D1
00178660 D040                                       add.w   D0, D0
00178662 D041                                       add.w   D1, D0
00178664 43F1 0000                                  lea     $00(A1, D0), A1
00178668 203C 4B36 0003                             move.l  #$4B360003, D0        ; Posi��o Horizontal dos �cones
0017866E 7203                                       moveq   #$03, D1
00178670 7402                                       moveq   #$02, D2
00178672 6100 0000                                  bsr     Menu_ShowVDPGraphics 
00178676 43F9 0000 0000                             lea     (Icon_Palettes), A1  
0017867C 7000                                       moveq   #$00, D0
0017867E 1013                                       move.b  (A3), D0
00178680 EB48                                       lsl.w   #$05, D0
00178682 43F1 0000                                  lea     $00(A1, D0), A1
00178686 45F8 FB40                                  lea     ($FFFFFB40).w, A2
0017868A 7207                                       moveq   #$07, D1
0017868C                            Offset_0x027098:                
0017868C 24D9                                       move.l  (A1)+, (A2)+
0017868E 51C9 FFFC                                  dbra    D1, Offset_0x027098
00178692 4E75                                       rts
00178694                            ;-------------------------------------------------------------------------------                            
00178694                            Dynamic_Menu:                           
00178694 5338 F7DA                                  subq.b  #$01, ($FFFFF7DA).w          ; Decrementa em 1 o Tempo
00178698 6A00                                       bpl.s   Exit_Dinamic_Menu            ; Se for maior ou igual a 0 sai da fun��o
0017869A 11FC 0007 F7DA                             move.b  #$07, ($FFFFF7DA).w          ; Inicializa o tempo de dura��o de cada frame
001786A0 1038 F7B8                                  move.b  ($FFFFF7B8).w, D0            ; Carrega o Id do Frame Atual em D0
001786A4 5238 F7B8                                  addq.b  #$01, ($FFFFF7B8).w          ; Carrega o pr�ximo frame em $FFFFFFB8
001786A8 0240 001F                                  andi.w  #$001F, D0
001786AC 103B 0000                                  move.b  Sonic_Miles_Frame_Select(PC, D0), D0  ; Carrega o Id do frame em D0
001786B0                                          ; muls.w  #$0140, D0                   ; Multiplica o Id pelo tamanho em bytes de cada frame
001786B0 ED48                                       lsl.w   #$06, D0
001786B2 4DF9 00C0 0000                             lea     ($00C00000), A6
001786B8 2D7C 4020 0000 0004                        move.l  #$40200000, $0004(A6)
001786C0 43F9 0000 0000                             lea     (Sonic_Miles_Spr), A1
001786C6 43F1 0000                                  lea     $00(A1, D0), A1
001786CA 303C 0009                                  move.w  #$0009, D0                   ; Tiles-1 a serem carregados por vez 
001786CE                            Menu_Loop_Load_Tiles:
001786CE 2C99                                       move.l  (A1)+, (A6)
001786D0 2C99                                       move.l  (A1)+, (A6)     
001786D2 2C99                                       move.l  (A1)+, (A6)     
001786D4 2C99                                       move.l  (A1)+, (A6)     
001786D6 2C99                                       move.l  (A1)+, (A6)     
001786D8 2C99                                       move.l  (A1)+, (A6)
001786DA 2C99                                       move.l  (A1)+, (A6)
001786DC 2C99                                       move.l  (A1)+, (A6)
001786DE 51C8 FFEE                                  dbra    D0, Menu_Loop_Load_Tiles
001786E2                            Exit_Dinamic_Menu:                
001786E2 4E75                                       rts              
001786E4                            Sonic_Miles_Frame_Select:     
001786E4 0000 0000 0000 0000 0000+                  dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
001786F2 050A                                       dc.b    $05, $0A
001786F4 0F0F 0F0F 0F0F 0F0F 0F0F+                  dc.b    $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F
00178702 0A05                                       dc.b    $0A, $05   
00178704                                            ; 0 = 0000000000  ; 1 = 0101000000  ; 2 = 1010000000 ; 3 = 1111000000
00178704                            ;------------------------------------------------------------------------------                  
00178704 =00000000                  __ = $00
00178704 =0000001E                  _A = $1E
00178704 =0000001F                  _B = $1F
00178704 =00000020                  _C = $20
00178704 =00000021                  _D = $21
00178704 =00000022                  _E = $22    
00178704 =00000023                  _F = $23
00178704 =00000024                  _G = $24
00178704 =00000025                  _H = $25
00178704 =00000026                  _I = $26
00178704 =00000027                  _J = $27
00178704 =00000028                  _K = $28
00178704 =00000029                  _L = $29
00178704 =0000002A                  _M = $2A
00178704 =0000002B                  _N = $2B
00178704 =0000002C                  _O = $2C
00178704 =0000002D                  _P = $2D
00178704 =0000002E                  _Q = $2E
00178704 =0000002F                  _R = $2F
00178704 =00000030                  _S = $30
00178704 =00000031                  _T = $31
00178704 =00000032                  _U = $32
00178704 =00000033                  _V = $33
00178704 =00000034                  _W = $34
00178704 =00000035                  _X = $35
00178704 =00000036                  _Y = $36
00178704 =00000037                  _Z = $37
00178704 =0000001A                  _st = $1A
00178704                            ;-------------------------------------------------------------------------------  
00178704                            Icon_Palettes: 
00178704 0000 0000 0048 006A 008E+                  dc.w    $0000, $0000, $0048, $006A, $008E, $00CE, $0EEE, $00E0
00178714 00A4 0082 0062 0000 0E86+                  dc.w    $00A4, $0082, $0062, $0000, $0E86, $0026, $0E42, $0C00
00178724 0000 0000 0420 0820 0C00+                  dc.w    $0000, $0000, $0420, $0820, $0C00, $0E60, $0A00, $0000
00178734 0E00 0000 0000 0000 0444+                  dc.w    $0E00, $0000, $0000, $0000, $0444, $0666, $0AAA, $0EEE
00178744 0000 0204 0026 0248 046A+                  dc.w    $0000, $0204, $0026, $0248, $046A, $048C, $06CE, $0002
00178754 0000 0220 0040 0060 0080+                  dc.w    $0000, $0220, $0040, $0060, $0080, $02A0, $06E0, $0A0C
00178764 0000 0000 0A00 0660 0C80+                  dc.w    $0000, $0000, $0A00, $0660, $0C80, $0EC0, $006A, $0008
00178774 028A 00AE 004C 006E 0060+                  dc.w    $028A, $00AE, $004C, $006E, $0060, $0066, $00C0, $00CA
00178784 0000 0000 0CE2 0000 0480+                  dc.w    $0000, $0000, $0CE2, $0000, $0480, $0240, $0EEE, $04AC
00178794 006A 0026 0842 0620 0400+                  dc.w    $006A, $0026, $0842, $0620, $0400, $0000, $0000, $0000
001787A4 0000 0000 0EEE 0ECA 0E86+                  dc.w    $0000, $0000, $0EEE, $0ECA, $0E86, $0E64, $0E42, $06AE
001787B4 048A 0268 0246 0024 0888+                  dc.w    $048A, $0268, $0246, $0024, $0888, $0444, $000E, $0008
001787C4 0000 0000 0A26 0C48 0E8C+                  dc.w    $0000, $0000, $0A26, $0C48, $0E8C, $00CE, $00C4, $0080
001787D4 0C00 0000 0EEE 0EEA 0EC8+                  dc.w    $0C00, $0000, $0EEE, $0EEA, $0EC8, $006E, $004A, $0028
001787E4 0000 0000 0048 006A 008E+                  dc.w    $0000, $0000, $0048, $006A, $008E, $00CE, $0EEE, $00E0
001787F4 00A4 0082 0062 0808 0A4A+                  dc.w    $00A4, $0082, $0062, $0808, $0A4A, $0026, $0626, $0404
00178804 0000 0000 0EEE 0ECA 0E86+                  dc.w    $0000, $0000, $0EEE, $0ECA, $0E86, $0E64, $0E42, $06AE
00178814 048A 0268 0246 0024 0888+                  dc.w    $048A, $0268, $0246, $0024, $0888, $0444, $000E, $0008
00178824 0000 0000 0048 006A 008E+                  dc.w    $0000, $0000, $0048, $006A, $008E, $00CE, $0EEE, $00E0
00178834 00A4 0082 0062 0400 0E86+                  dc.w    $00A4, $0082, $0062, $0400, $0E86, $006E, $0E42, $0C00
00178844 0000 0000 0CE2 08C0 0480+                  dc.w    $0000, $0000, $0CE2, $08C0, $0480, $0240, $0EEE, $02AC
00178854 006A 0026 0AA6 0000 060A+                  dc.w    $006A, $0026, $0AA6, $0000, $060A, $0408, $0204, $0000
00178864 0000 0000 0C06 0C0A 0C6E+                  dc.w    $0000, $0000, $0C06, $0C0A, $0C6E, $0068, $008A, $0000
00178874 02CE 00EC 00AE 006E 0EEE+                  dc.w    $02CE, $00EC, $00AE, $006E, $0EEE, $0000, $000E, $00C4
00178884 0000 0000 0EEE 0AAA 0000+                  dc.w    $0000, $0000, $0EEE, $0AAA, $0000, $0666, $0444, $0E40
00178894 0C00 0800 00CE 028E 000E+                  dc.w    $0C00, $0800, $00CE, $028E, $000E, $0084, $0062, $0020
001788A4 0000 0000 0004 0044 0084+                  dc.w    $0000, $0000, $0004, $0044, $0084, $0088, $00A8, $00AC
001788B4 006C 002C 0028 0006 0666+                  dc.w    $006C, $002C, $0028, $0006, $0666, $0888, $0CCC, $0EEE
001788C4 0000 0000 06CE 04AC 028A+                  dc.w    $0000, $0000, $06CE, $04AC, $028A, $0068, $0046, $00E8
001788D4 00C4 0080 0040 0EEE 0C00+                  dc.w    $00C4, $0080, $0040, $0EEE, $0C00, $0EC0, $0860, $0000
001788E4 0000 0000 0E64 0E86 0EA8+                  dc.w    $0000, $0000, $0E64, $0E86, $0EA8, $0ECA, $0EEE, $0000
001788F4 00AE 006E 0E22 00E0 0000+                  dc.w    $00AE, $006E, $0E22, $00E0, $0000, $0000, $0000, $0000
00178904 0000 0E20 004E 006E 0048+                  dc.w    $0000, $0E20, $004E, $006E, $0048, $008C, $00CE, $08EE
00178914 0800 0400 0000 0EE8 0E80+                  dc.w    $0800, $0400, $0000, $0EE8, $0E80, $0E60, $0000, $0000
00178924 0000 0000 0A22 0C42 0000+                  dc.w    $0000, $0000, $0A22, $0C42, $0000, $0E66, $0EEE, $0AAA
00178934 0888 0444 08AE 046A 000E+                  dc.w    $0888, $0444, $08AE, $046A, $000E, $0000, $00EE, $0000
00178944 0000 0000 0A22 0C42 0000+                  dc.w    $0000, $0000, $0A22, $0C42, $0000, $0E66, $0EEE, $0AAA
00178954 0888 0444 08AE 046A 000E+                  dc.w    $0888, $0444, $08AE, $046A, $000E, $0000, $00EE, $0000
00178964                            ;-------------------------------------------------------------------------------  
00178964                            Menu_Icon_List: 
00178964 0000 000E 0E0E 0606 060B+                  dc.b    $00, $00, $00, $0E, $0E, $0E, $06, $06, $06, $0B, $0B, $0B, $0D, $0D, $0D, $09
00178974 0909 0410 0F11                             dc.b    $09, $09, $04, $10, $0F, $11
0017897A                            ;-------------------------------------------------------------------------------                 
0017897A                            Menu_Text_Highlight:                  
0017897A 0306 0324 0306 0424 0306+                  dc.w    $0306, $0324, $0306, $0424, $0306, $0524, $0706, $0724
0017898A 0706 0824 0706 0924 0B06+                  dc.w    $0706, $0824, $0706, $0924, $0B06, $0B24, $0B06, $0C24
0017899A 0B06 0D24 0F06 0F24 0F06+                  dc.w    $0B06, $0D24, $0F06, $0F24, $0F06, $1024, $0F06, $1124
001789AA 1306 1324 1306 1424 1306+                  dc.w    $1306, $1324, $1306, $1424, $1306, $1524, $032C, $034A
001789BA 032C 044A 032C 054A 072C+                  dc.w    $032C, $044A, $032C, $054A, $072C, $0000, $0B2C, $0000
001789CA 0F2C 0000 132C 134A                        dc.w    $0F2C, $0000, $132C, $134A
001789D2                            ;-------------------------------------------------------------------------------                
001789D2                            Menu_Text_Positions:                   
001789D2 00F6 0236 0376 04B6 05F6+                  dc.w    $00F6, $0236, $0376, $04B6, $05F6, $011C, $025C, $039C
001789E2 04DC 061C                                  dc.w    $04DC, $061C
001789E6                            ;-------------------------------------------------------------------------------                          
001789E6                            Menu_Level_Select_Text: 
001789E6 0E30 2D29 1E30 2500 2526+                  dc.b    $0E, _S, _P, _L, _A, _S, _H, __, _H, _I, _L, _L, __, __, __, __
001789F6 0E2A 222B 3200 0000 0000+                  dc.b    $0E, _M, _E, _N, _U, __, __, __, __, __, __, __, __, __, __, __
00178A06 0E20 1E30 262B 2C00 3031+                  dc.b    $0E, _C, _A, _S, _I, _N, _O, __, _S, _T, _R, _E, _E, _T, __, __
00178A16 0E29 2C30 3100 291E 1F36+                  dc.b    $0E, _L, _O, _S, _T, __, _L, _A, _B, _Y, _R, _I, _N, _T, _H, __
00178A26 0E34 2C2F 2921 002A 1E2D+                  dc.b    $0E, _W, _O, _R, _L, _D, __, _M, _A, _P, __, __, __, __, __, __
00178A36 0E2A 1E21 0024 221E 2F00+                  dc.b    $0E, _M, _A, _D, __, _G, _E, _A, _R, __, __, __, __, __, __, __
00178A46 0E22 2424 0030 311E 3126+                  dc.b    $0E, _E, _G, _G, __, _S, _T, _A, _T, _I, _O, _N, __, __, __, __   
00178A56 0E30 2D22 2026 1E29 0030+                  dc.b    $0E, _S, _P, _E, _C, _I, _A, _L, __, _S, _T, _A, _G, _E, __, __
00178A66 0E22 2B21 262B 2400 3022+                  dc.b    $0E, _E, _N, _D, _I, _N, _G, __, _S, _E, _Q, _U, _E, _N, _C, _E
00178A76 0E30 2C32 2B21 0031 2230+                  dc.b    $0E, _S, _O, _U, _N, _D, __, _T, _E, _S, _T, __, __, _st,__, __
00178A86                            ;-------------------------------------------------------------------------------
00178A86                            Wings_Mappings: 
00178A86 6000 6000 6000 604D 604E+                  dc.w    $6000, $6000, $6000, $604D, $604E, $684E, $684D, $6000, $6000, $6000   
00178A9A                            ;Wings_Line_1:                 
00178A9A 604F 6050 6051 6052 6053+                  dc.w    $604F, $6050, $6051, $6052, $6053, $6853, $6852, $6851, $6850, $684F
00178AAE                            ;Wings_Line_2:
00178AAE 6054 6055 6056 6057 6057+                  dc.w    $6054, $6055, $6056, $6057, $6057, $6057, $6057, $6856, $6855, $6854
00178AC2                            ;Wings_Line_3:
00178AC2 6058 6059 605A 6057 6057+                  dc.w    $6058, $6059, $605A, $6057, $6057, $6057, $6057, $685A, $6859, $6858
00178AD6                            ;Wings_Line_4:
00178AD6 605B 605C 605D 6057 6057+                  dc.w    $605B, $605C, $605D, $6057, $6057, $6057, $6057, $685D, $685C, $685B
00178AEA                            ;Wings_Line_5:
00178AEA 6000 605E 605F 6060 6061+                  dc.w    $6000, $605E, $605F, $6060, $6061, $6062, $6063, $6064, $685E, $6000
00178AFE                            ;Wings_Line_6:
00178AFE 6000 6000 6065 6066 6067+                  dc.w    $6000, $6000, $6065, $6066, $6067, $6867, $6866, $6865, $6000, $6000 
00178B12                            ;-------------------------------------------------------------------------------    
00178B12                            Menu_Palette:
00178B12                                            incbin  'data\menu\menu.pal'            
00178B92                            Menu_ClearScreen:
00178B92 4EF8 1380                                  jmp     ClearScreen
00178B96                            Menu_ShowVDPGraphics:                
00178B96 4EF8 14FA                                  jmp     ShowVDPGraphics                
00178B9A                            Menu_NemesisDec: 
00178B9A 4EF8 15AA                                  jmp     NemDec  
00178B9E                            Menu_LoadPLC2:      
00178B9E 4EF8 171C                                  jmp     LoadPLC2
00178BA2                            Menu_RunPLC:                    
00178BA2 4EF8 1756                                  jmp     RunPLC_RAM                           
00178BA6                            Menu_EnigmaDec
00178BA6 4EF8 1888                                  jmp     EniDec
00178BAA                            Menu_Pal_FadeTo:
00178BAA 4EF8 20CA                                  jmp     Pal_FadeTo
00178BAE                            Menu_Pal_FadeFrom:
00178BAE 4EF8 2180                                  jmp     Pal_FadeFrom     
00178BB2                            Menu_Play_Music:
00178BB2 4EF8 1470                                  jmp     PlaySound  
00178BB6                            Menu_PalLoad1:
00178BB6 4EF8 242E                                  jmp     PalLoad1
00178BBA                            Menu_DelayProgram:
00178BBA 4EF8 33A2                                  jmp     DelayProgram
00178BBE                            ;-------------------------------------------------------------------------------
00178BBE                            Menu_Font:
00178BBE                                            incbin  'data\menu\menufont.nem' 
00179132                            Level_Icons:
00179132                                            incbin  'data\menu\levelico.nem'   
0017A42E                            Menu_Mappings:
0017A42E                                            incbin  'data\menu\menubg.eni'
0017A5DA                            Icons_Mappings:
0017A5DA                                            incbin  'data\menu\iconsmap.eni'
0017A5F0                            Sonic_Miles_Spr:                                         
0017A5F0                                            incbin  'data\menu\soncmils.dat'   
0017AAF0                            ;===============================================================================
0017AAF0                            ; Menu do Sonic 2 No Sonic 1 reprogramado por Esrael L. G. Neto
0017AAF0                            ; [ Fim ]
0017AAF0                            ;===============================================================================
0017AAF0                            ;===============================================================================
0017AAF0                            ; end of 'ROM'
0017AAF0                            EndOfRom:
0017AAF0                            
0017AAF0                            
