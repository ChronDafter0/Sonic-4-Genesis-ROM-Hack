00000000                            ; /=========================================================================\
00000000                            ; �	This file is generated by The Interactive Disassembler (IDA)	    �
00000000                            ; �	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    �
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            		include	"Equz80.asm"
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; ListEqu.exe generated from "Dual PCM\Z80.lst"
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00000E80                  E_BuffStart = $E80 ; Start of the buffer (ALWAYS keep it multiples of 20)
00000000 =00000FFF                  E_BuffFinish = $FFF ; End of the buffer (keep in multiples of 100 - 1, e.g. 0FFF, 0EFF, 0DFF, 0CFF, etc)
00000000 =00000020                  E_BuffSize = $20 ; Number of bytes to buffer ahead of time (keep at POT) (part of it is done manually, so just changing this value won't do it all).
00000000 =00001000                  E_CueStart = $1000 ; Start of the cue, (ALWAYS keep in multiples of 10)
00000000 =00002000                  E_CueFinish = $2000 ; End of the cue (keep in multiples of 10)
00000000 =00000300                  E_CueSize = $300 ; Number of bytes for the 68k to cue ahead (keep in multiples of 100)
00000000 =00000000                  M_Flush = $0 
00000000 =00000000                  Start = $0 
00000000 =00000008                  Switch_PCM = $8 
00000000 =0000000E                  SD_NextBit = $E 
00000000 =0000001F                  CUPCM1_Switch = $1F 
00000000 =0000002D                  CUPCM1_SwStack = $2D 
00000000 =00000031                  CUPCM2_Switch = $31 
00000000 =0000003F                  CUPCM2_SwStack = $3F 
00000000 =00000047                  CU_Stack = $47 
00000000 =00000049                  InitRout = $49 
00000000 =000000E0                  CUPCM1_Reset = $E0 
00000000 =000000F8                  CUPCM1_Mute = $F8 
00000000 =0000011B                  CatchUp_Exx = $11B 
00000000 =0000011C                  CatchUp = $11C 
00000000 =0000011C                  CUPCM1_Switch0 = $11C 
00000000 =0000011D                  CUPCM1_Switch1 = $11D 
00000000 =0000011E                  CUPCM1_Switch2 = $11E 
00000000 =0000011F                  CUPCM1_Switch3 = $11F 
00000000 =00000120                  CUPCM1_Switch4 = $120 
00000000 =00000121                  CUPCM1_Switch5 = $121 
00000000 =00000122                  CUPCM1_Switch6 = $122 
00000000 =00000123                  CUPCM1_Switch7 = $123 
00000000 =00000124                  CUPCM1_Switch8 = $124 
00000000 =00000132                  CUPCM1_Load = $132 
00000000 =0000015B                  CUPCM1_ResRet = $15B 
00000000 =0000015E                  CUPCM1_MuteRet = $15E 
00000000 =0000015F                  CUPCM2_Switch0 = $15F 
00000000 =00000160                  CUPCM2_Switch1 = $160 
00000000 =00000161                  CUPCM2_Switch2 = $161 
00000000 =00000162                  CUPCM2_Switch3 = $162 
00000000 =00000163                  CUPCM2_Switch4 = $163 
00000000 =00000164                  CUPCM2_Switch5 = $164 
00000000 =00000165                  CUPCM2_Switch6 = $165 
00000000 =00000166                  CUPCM2_Switch7 = $166 
00000000 =00000167                  CUPCM2_Switch8 = $167 
00000000 =00000173                  CUPCM2_Load = $173 
00000000 =000001B8                  CUPCM2_ResRet = $1B8 
00000000 =000001BB                  CUPCM2_MuteRet = $1BB 
00000000 =000001BE                  CU_ResBufINRet = $1BE 
00000000 =000001C3                  CU_ResBufOTRet = $1C3 
00000000 =000001D2                  CUPCM1_RET = $1D2 
00000000 =000001D3                  CUPCM2_RET = $1D3 
00000000 =000001D6                  Flush = $1D6 
00000000 =000001D9                  FL_Return = $1D9 
00000000 =000001DD                  BM_ResBufOTRet = $1DD 
00000000 =000001DD                  FL_FlushSwitch = $1DD 
00000000 =000001E0                  CUPCM2_Mute = $1E0 
00000000 =00000202                  CUPCM2_Reset = $202 
00000000 =0000021A                  CU_ResetBufferIN = $21A 
00000000 =00000227                  CU_ResetBufferOUT = $227 
00000000 =00000234                  BM_ResetBufferOUT = $234 
00000000 =00000241                  CUPCM2_NewSample = $241 
00000000 =00000264                  CUPCM1_NewSample = $264 
00000000 =00000287                  FL_Loop = $287 
00000000 =0000028D                  BM_NextByte = $28D 
00000000 =000002BE                  Valid = $2BE 
00000000 =000002D7                  OutRange = $2D7 
00000000 =000002E0                  PCM1_SampCur = $2E0 
00000000 =000002E2                  PCM1_BankCur = $2E2 
00000000 =000002E3                  PCM2_SampCur = $2E3 
00000000 =000002E5                  PCM2_BankCur = $2E5 
00000000 =000002E6                  PCM1_Sample = $2E6 
00000000 =000002E8                  PCM1_Bank = $2E8 
00000000 =000002E9                  PCM2_Sample = $2E9 
00000000 =000002EB                  PCM2_Bank = $2EB 
00000000 =000002EC                  MuteSample = $2EC 
00000000 =000002EF                  YM_Access = $2EF 
00000000 =000002F0                  YM_Point68k = $2F0 
00000000 =000002F2                  YM_PointZ80 = $2F2 
00000000 =00001000                  YM_List = $1000 
00000000                            
00000000                            ; ===========================================================================
00000000                            ; ===========================================================================
00000000                            		include	"Macros.asm"
00000000 =FFFFD000                  v_objspace:	equ $FFFFD000	; object variable space ($40 bytes per object) ($2000 bytes)
00000000 =FFFFD000                  v_player:	equ v_objspace	; object variable space for Sonic ($40 bytes)
00000000 =FFFFF700                  v_screenposx:	equ $FFFFF700
00000000 =FFFFFC00                  v_objstate:	equ $FFFFFC00
00000000                            
00000000                            ; Object variables
00000000 =00000001                  obRender:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  obGfx:		equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  obMap:		equ 4	; mappings address (4 bytes)
00000000 =00000008                  obX:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000A                  obScreenY:	equ $A	; y-axis position for screen-fixed items (2 bytes)
00000000 =0000000C                  obY:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  obVelX:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  obVelY:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000014                  obInertia:	equ $14	; potential speed (2 bytes)
00000000 =00000016                  obHeight:	equ $16	; height/2
00000000 =00000017                  obWidth:	equ $17	; width/2
00000000 =00000018                  obPriority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000019                  obActWid:	equ $19	; action width
00000000 =0000001A                  obFrame:	equ $1A	; current frame displayed
00000000 =0000001B                  obAniFrame:	equ $1B	; current frame in animation script
00000000 =0000001C                  obAnim:		equ $1C	; current animation
00000000 =0000001D                  obNextAni:	equ $1D	; next animation
00000000 =0000001E                  obTimeFrame:	equ $1E	; time to next frame
00000000 =0000001F                  obDelayAni:	equ $1F	; time to delay animation
00000000 =00000020                  obColType:	equ $20	; collision response type
00000000 =00000021                  obColProp:	equ $21	; collision extra property
00000000 =00000022                  obStatus:	equ $22	; orientation or mode
00000000 =00000023                  obRespawnNo:	equ $23	; respawn list index number
00000000 =00000024                  obRoutine:	equ $24	; routine number
00000000 =00000025                  ob2ndRout:	equ $25	; secondary routine number
00000000 =00000026                  obAngle:	equ $26	; angle
00000000 =00000028                  obSubtype:	equ $28	; object subtype
00000000 =00000025                  obSolid:	equ ob2ndRout ; solid status flag
00000000                            out_of_range:	macro exit,pos
00000000                            		if (narg=2)
00000000                            		move.w	pos,d0		; get object position (if specified as not obX)
00000000                            		else
00000000                            		move.w	obX(a0),d0	; get object position
00000000                            		endc
00000000                            		andi.w	#$FF80,d0	; round down to nearest $80
00000000                            		move.w	(v_screenposx).w,d1 ; get screen position
00000000                            		subi.w	#128,d1
00000000                            		andi.w	#$FF80,d1
00000000                            		sub.w	d1,d0		; approx distance between object and screen
00000000                            		cmpi.w	#128+320+192,d0
00000000                            		bhi.\0	exit
00000000                            		endm
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Macros
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            	; --- Alignment ---
00000000                            
00000000                            align		macro	Size,Value
00000000                            		dcb.b	Size-(*%Size),Value
00000000                            		endm
00000000                            
00000000                            	; --- Stop Z80 ---
00000000                            
00000000                            StopZ80		macro
00000000                            		move.w	#$0100,($A11100).l			; request Z80 stop (ON)
00000000                            		btst.b	#$00,($A11100).l			; has the Z80 stopped yet?
00000000                            		bne.s	*-$08					; if not, branch
00000000                            		endm
00000000                            
00000000                            	; --- Start Z80 ---
00000000                            
00000000                            StartZ80	macro
00000000                            		move.w	#$0000,($A11100).l			; request Z80 stop (OFF)
00000000                            		endm
00000000                            
00000000                            	; --- Turning DMA mode on ---
00000000                            
00000000                            Z80DMA_ON	macro
00000000                            		StopZ80
00000000                            		move.b	#(Flush&$FF),($A00000+FL_FlushSwitch+1).l	; change the "jp" instruction address to "Flush" routine loop
00000000                            		StartZ80
00000000                            		move.w	#$0180,d7				; set delay time (give z80 time to get out of the "CatchUp" routine...
00000000                            		nop						; ...and into the "Flush" routine, so the 68k doesn't start DMA before...
00000000                            		nop						; ...the z80 has a chance to stop reading from the window
00000000                            		dbf	d7,*-$04				; loop back and perform the nops again...
00000000                            		endm
00000000                            
00000000                            	; --- Turning DMA mode off ---
00000000                            
00000000                            Z80DMA_OFF	macro
00000000                            		StopZ80
00000000                            		move.b	#(CatchUp&$FF),($A00000+FL_FlushSwitch+1).l	; change the "jp" instruction address to "CatchUp" routine loop
00000000                            		StartZ80
00000000                            		endm
00000000                            
00000000                            
00000000                            	; --- Storing 68k address for Z80 as dc ---
00000000                            
00000000                            dcz80		macro	Sample
00000000                            		dc.b	(Sample&$FF)
00000000                            		dc.b	(((Sample>>$08)&$7F)|$80)
00000000                            		dc.b	((Sample&$7F8000)>>$0F)
00000000                            		endm
00000000                            
00000000                            ; =============
00000000                            ;Sonic 2 Macros
00000000                            ; =============
00000000                            
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
00000000                            ; Equates section - Names for variables.
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; size variables - you'll get an informational error if you need to change these...
00000000                            ; they are all in units of bytes
00000000 =00002F00                  Size_of_DAC_samples =		$2F00
00000000 =00006174                  Size_of_SEGA_sound =		$6174
00000000 =00000F64                  Size_of_Snd_driver_guess =	$F64 ; approximate post-compressed size of the Z80 sound driver
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Object Status Table offsets (for everything between Object_RAM and Primary_Collision)
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; universally followed object conventions:
00000000 =00000001                  render_flags =		  1 ; bitfield ; bit 7 = onscreen flag, bit 0 = x mirror, bit 1 = y mirror, bit 2 = coordinate system
00000000 =00000002                  art_tile =		  2 ; and 3 ; start of sprite's art
00000000 =00000004                  mappings =		  4 ; and 5 and 6 and 7
00000000 =00000008                  x_pos =			  8 ; and 9 ... some objects use $A and $B as well when extra precision is required (see ObjectMove) ... for screen-space objects this is called x_pixel instead
00000000 =0000000C                  y_pos =			 $C ; and $D ... some objects use $E and $F as well when extra precision is required ... screen-space objects use y_pixel instead
00000000 =00000018                  priority =		$18 ; 0 = front
00000000 =00000019                  width_pixels =		$19
00000000 =0000001A                  mapping_frame =		$1A
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions followed by most objects:
00000000 =00000010                  x_vel =			$10 ; and $11 ; horizontal velocity
00000000 =00000012                  y_vel =			$12 ; and $13 ; vertical velocity
00000000 =00000016                  y_radius =		$16 ; collision width / 2
00000000 =00000017                  x_radius =		$17 ; collision height / 2
00000000 =0000001B                  anim_frame =		$1B
00000000 =0000001C                  anim =			$1C
00000000 =0000001D                  next_anim =		$1D
00000000 =0000001E                  anim_frame_duration =	$1E
00000000 =00000022                  status =		$22 ; note: exact meaning depends on the object... for sonic/tails: bit 0: leftfacing. bit 1: inair. bit 2: spinning. bit 3: onobject. bit 4: rolljumping. bit 5: pushing. bit 6: underwater.
00000000 =00000024                  routine =		$24
00000000 =00000025                  routine_secondary =	$25
00000000 =00000026                  angle =			$26 ; angle about the z=0 axis (360 degrees = 256)
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions followed by many objects but NOT sonic/tails:
00000000 =00000020                  collision_flags =	$20
00000000 =00000021                  collision_property =	$21
00000000 =00000023                  respawn_index =		$23
00000000 =00000028                  subtype =		$28
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions specific to sonic/tails (Obj01, Obj02, and ObjDB):
00000000                            ; note: $1F, $20, and $21 are unused and available
00000000 =00000014                  inertia =		$14 ; and $15 ; directionless representation of speed... not updated in the air
00000000 =00000027                  flip_angle =		$27 ; angle about the x=0 axis (360 degrees = 256) (twist/tumble)
00000000 =00000028                  air_left =		$28
00000000 =00000029                  flip_turned =		$29 ; 0 for normal, 1 to invert flipping (it's a 180 degree rotation about the axis of Sonic's spine, so he stays in the same position but looks turned around)
00000000 =0000002A                  obj_control =		$2A ; 0 for normal, 1 for hanging or for resting on a flipper, $81 for going through CNZ/OOZ/MTZ tubes or stopped in CNZ cages or stoppers or flying if Tails
00000000 =0000002B                  status_secondary =	$2B
00000000 =0000002C                  flips_remaining =	$2C ; number of flip revolutions remaining
00000000 =0000002D                  flip_speed =		$2D ; number of flip revolutions per frame / 256
00000000 =0000002E                  move_lock =		$2E ; and $2F ; horizontal control lock, counts down to 0
00000000 =00000030                  invulnerable_time =	$30 ; and $31 ; time remaining until you stop blinking
00000000 =00000032                  invincibility_time =	$32 ; and $33 ; remaining
00000000 =00000034                  speedshoes_time =	$34 ; and $35 ; remaining
00000000 =00000036                  next_tilt =		$36 ; angle on ground in front of sprite
00000000 =00000037                  tilt =			$37 ; angle on ground
00000000 =00000038                  stick_to_convex =	$38 ; 0 for normal, 1 to make Sonic stick to convex surfaces like the rotating discs in Sonic 1 and 3 (unused in Sonic 2 but fully functional)
00000000 =00000039                  spindash_flag =		$39 ; 0 for normal, 1 for charging a spindash or forced rolling
00000000 =0000003A                  spindash_counter =	$3A ; and $3B
00000000 =0000003C                  jumping =		$3C
00000000 =0000003D                  interact =		$3D ; RAM address of the last object Sonic stood on, minus $FFFFB000 and divided by $40
00000000 =0000003E                  layer =			$3E ; collision plane, track switching...
00000000 =0000003F                  layer_plus =		$3F ; always same as layer+1 ?? used for collision somehow
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions followed by several objects but NOT sonic/tails:
00000000 =0000000A                  y_pixel =		2+x_pos ; and 3+x_pos ; y coordinate for objects using screen-space coordinate system
00000000 =00000008                  x_pixel =		x_pos ; and 1+x_pos ; x coordinate for objects using screen-space coordinate system
00000000 =0000003E                  parent =		$3E ; and $3F ; address of object that owns or spawned this one, if applicable
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; unknown or inconsistently used offsets that are not applicable to sonic/tails:
00000000                            ; (provided because rearrangement of the above values sometimes requires making space in here too)
00000000 =0000000A                  objoff_A =		2+x_pos ; note: x_pos can be 4 bytes, but sometimes the last 2 bytes of x_pos are used for other unrelated things
00000000 =0000000B                  objoff_B =		3+x_pos
00000000 =0000000E                  objoff_E =		2+y_pos
00000000 =0000000F                  objoff_F =		3+y_pos
00000000 =00000014                  objoff_14 =		$14
00000000 =00000015                  objoff_15 =		$15
00000000 =0000001F                  objoff_1F =		$1F
00000000 =00000027                  objoff_27 =		$27
00000000 =00000028                  objoff_28 =		$28 ; overlaps subtype, but a few objects use it for other things anyway
00000000 =00000029                  objoff_29 =		$29
00000000 =0000002A                  objoff_2A =		$2A
00000000 =0000002B                  objoff_2B =		$2B
00000000 =0000002C                  objoff_2C =		$2C
00000000 =0000002D                  objoff_2D =		$2D
00000000 =0000002E                  objoff_2E =		$2E
00000000 =0000002F                  objoff_2F =		$2F
00000000 =00000030                  objoff_30 =		$30
00000000 =00000031                  objoff_31 =		$31
00000000 =00000032                  objoff_32 =		$32
00000000 =00000033                  objoff_33 =		$33
00000000 =00000034                  objoff_34 =		$34
00000000 =00000035                  objoff_35 =		$35
00000000 =00000036                  objoff_36 =		$36
00000000 =00000037                  objoff_37 =		$37
00000000 =00000038                  objoff_38 =		$38
00000000 =00000039                  objoff_39 =		$39
00000000 =0000003A                  objoff_3A =		$3A
00000000 =0000003B                  objoff_3B =		$3B
00000000 =0000003C                  objoff_3C =		$3C
00000000 =0000003D                  objoff_3D =		$3D
00000000 =0000003E                  objoff_3E =		$3E
00000000 =0000003F                  objoff_3F =		$3F
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; property of all objects:
00000000 =00000040                  next_object =		$40 ; the size of an object
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; RAM variables
00000000 =FFFF0000                  RAM_Start =			$FFFF0000
00000000 =FFFF0000                  Metablock_Table =		$FFFF0000
00000000 =FFFF8000                  Level_Layout =			$FFFF8000
00000000 =FFFF9000                  Block_Table =			$FFFF9000
00000000 =FFFFAA00                  Decomp_Buffer =			$FFFFAA00
00000000 =FFFFAC00                  Sprite_Table_Input = 		$FFFFAC00 ; in custom format before being converted and stored in Sprite_Table/Sprite_Table_2
00000000 =FFFFB000                  Object_RAM =			$FFFFB000 ; through $FFFFD5FF
00000000 =FFFFB000                  MainCharacter =			$FFFFB000 ; first object (usually Sonic except in a Tails Alone game)
00000000 =FFFFB040                  Sidekick =			$FFFFB040 ; second object (Tails in a Sonic and Tails game)
00000000 =FFFFD000                  Tails_Tails =			$FFFFD000 ; address of the Tail's Tails object
00000000 =FFFFD100                  Sonic_Dust =			$FFFFD100
00000000 =FFFFD140                  Tails_Dust =			$FFFFD140
00000000                            
00000000 =FFFFD000                  PNT_Buffer =			$FFFFD000 ; in special stage
00000000 =FFFFD600                  Primary_Collision =		$FFFFD600
00000000 =FFFFD700                  Horiz_Scroll_Buf_2 =		$FFFFD700 ; in special stage
00000000 =FFFFD900                  Secondary_Collision =		$FFFFD900
00000000 =FFFFDC00                  VDP_Command_Buffer =		$FFFFDC00 ; stores VDP commands to issue the next time ProcessDMAQueue is called
00000000 =FFFFDCFC                  VDP_Command_Buffer_Slot =	$FFFFDCFC ; stores the address of the next open slot for a queued VDP command
00000000 =FFFFDD00                  Sprite_Table_2 =		$FFFFDD00 ; Sprite attribute table buffer for the bottom split screen in 2-player mode
00000000 =FFFFE000                  Horiz_Scroll_Buf =		$FFFFE000
00000000 =FFFFE400                  Sonic_Stat_Record_Buf =		$FFFFE400
00000000 =FFFFE500                  Sonic_Pos_Record_Buf =		$FFFFE500
00000000 =FFFFE600                  Tails_Pos_Record_Buf =		$FFFFE600
00000000 =FFFFE800                  Ring_Positions =		$FFFFE800
00000000 =FFFFEE00                  Camera_RAM =			$FFFFEE00
00000000 =FFFFEE00                  Camera_X_pos =			$FFFFEE00
00000000 =FFFFEE04                  Camera_Y_pos =			$FFFFEE04
00000000 =FFFFEEC6                  Camera_Max_Y_pos =		$FFFFEEC6
00000000 =FFFFEEC8                  Camera_Min_X_pos =		$FFFFEEC8
00000000 =FFFFEECA                  Camera_Max_X_pos =		$FFFFEECA
00000000 =FFFFEECC                  Camera_Min_Y_pos =		$FFFFEECC
00000000 =FFFFEECE                  Camera_Max_Y_pos_now =		$FFFFEECE ; was "Camera_max_scroll_spd"...
00000000 =FFFFEED2                  Sonic_Pos_Record_Index =	$FFFFEED2 ; into Sonic_Pos_Record_Buf and Sonic_Stat_Record_Buf
00000000 =FFFFEED6                  Tails_Pos_Record_Index =	$FFFFEED6 ; into Tails_Pos_Record_Buf
00000000 =FFFFEED8                  Camera_Y_pos_bias =		$FFFFEED8 ; added to y position for lookup/lookdown, $60 is center
00000000 =FFFFEEDA                  Camera_Y_pos_bias_2P =		$FFFFEEDA ; for Tails
00000000 =FFFFEEDF                  Dynamic_Resize_Routine =	$FFFFEEDF
00000000 =FFFFEEF8                  Tails_Min_X_pos =		$FFFFEEF8
00000000 =FFFFEEFA                  Tails_Max_X_pos =		$FFFFEEFA
00000000 =FFFFEEFE                  Tails_Max_Y_pos =		$FFFFEEFE
00000000                            
00000000 =FFFFF000                  Underwater_palette_2 = 		$FFFFF000 ; not sure what it's used for but it's only used when there's water
00000000 =FFFFF080                  Underwater_palette = 		$FFFFF080 ; main palette for underwater parts of the screen
00000000 =FFFFF0E0                  Underwater_palette_line4 = 	$FFFFF0E0
00000000                            
00000000 =FFFFF600                  Game_Mode =			$FFFFF600 ; 1 byte ; see GameModesArray (master level trigger, Mstr_Lvl_Trigger)
00000000 =FFFFF602                  Ctrl_1_Logical =		$FFFFF602 ; 2 bytes
00000000 =FFFFF602                  Ctrl_1_Held_Logical =		$FFFFF602 ; 1 byte
00000000 =FFFFF603                  Ctrl_1_Press_Logical =		$FFFFF603 ; 1 byte
00000000 =FFFFF604                  Ctrl_1 =			$FFFFF604 ; 2 bytes
00000000 =FFFFF604                  Ctrl_1_Held =			$FFFFF604 ; 1 byte ; (pressed and held were switched around before)
00000000 =FFFFF605                  Ctrl_1_Press =			$FFFFF605 ; 1 byte
00000000 =FFFFF606                  Ctrl_2 =			$FFFFF606 ; 2 bytes
00000000 =FFFFF606                  Ctrl_2_Held =			$FFFFF606 ; 1 byte
00000000 =FFFFF607                  Ctrl_2_Press =			$FFFFF607 ; 1 byte
00000000 =FFFFF614                  Demo_Time_left =		$FFFFF614 ; 2 bytes
00000000                            
00000000 =FFFFF616                  Vscroll_Factor =		$FFFFF616
00000000 =FFFFF624                  Hint_counter_reserve =		$FFFFF624 ; Must contain a VDP command word, preferably a write to register $0A. Executed every V-INT.
00000000 =FFFFF62A                  Delay_Time =			$FFFFF62A ; number of frames to delay the game
00000000 =FFFFF636                  RNG_seed =			$FFFFF636 ; used for random number generation
00000000 =FFFFF63A                  Game_paused =			$FFFFF63A
00000000 =FFFFF640                  DMA_data_thunk =		$FFFFF640 ; Used as a RAM holder for the final DMA command word. Data will NOT be preserved across V-INTs, so consider this space reserved.
00000000                            
00000000 =FFFFF646                  Water_Level_1 =			$FFFFF646
00000000 =FFFFF648                  Water_Level_2 =			$FFFFF648
00000000 =FFFFF64A                  Water_Level_3 =			$FFFFF64A
00000000 =FFFFF64D                  Water_routine =			$FFFFF64D
00000000 =FFFFF64E                  Water_move =			$FFFFF64E
00000000 =FFFFF64C                  Water_on =			$FFFFF64C ; is set based on Water_flag
00000000 =FFFFF650                  New_Water_Level =		$FFFFF650
00000000 =FFFFF652                  Water_change_speed =		$FFFFF652
00000000 =FFFFF65E                  Palette_frame_count =		$FFFFF65E
00000000                            
00000000 =FFFFF66A                  Ctrl_2_Logical =		$FFFFF66A ; 2 bytes
00000000 =FFFFF66A                  Ctrl_2_Held_Logical =		$FFFFF66A ; 1 byte
00000000 =FFFFF66B                  Ctrl_2_Press_Logical =		$FFFFF66B ; 1 byte
00000000 =FFFFF66C                  Sonic_Look_delay_counter = 	$FFFFF66C ; 2 bytes
00000000 =FFFFF66E                  Tails_Look_delay_counter = 	$FFFFF66E ; 2 bytes
00000000 =FFFFF670                  Super_Sonic_frame_count =	$FFFFF670
00000000 =FFFFF680                  Plc_Buffer =			$FFFFF680 ; Pattern load queue
00000000                            
00000000 =FFFFF700                  Misc_Variables =		$FFFFF700
00000000                            
00000000                            ; extra variables for the second player (CPU) in 1-player mode
00000000 =FFFFF702                  Tails_control_counter =		$FFFFF702 ; how long until the CPU takes control
00000000 =FFFFF704                  Tails_respawn_counter =		$FFFFF704
00000000 =FFFFF708                  Tails_CPU_routine =		$FFFFF708
00000000 =FFFFF70A                  Tails_CPU_target_x =		$FFFFF70A
00000000 =FFFFF70C                  Tails_CPU_target_y =		$FFFFF70C
00000000 =FFFFF70E                  Tails_interact_ID =		$FFFFF70E ; object ID of last object stood on
00000000                            
00000000 =FFFFF711                  Level_started_flag =		$FFFFF711
00000000 =FFFFF71A                  CNZ_Bumper_routine =		$FFFFF71A
00000000 =FFFFF72C                  Dirty_flag =			$FFFFF72C ; if whole screen needs to redraw
00000000 =FFFFF730                  Water_flag =			$FFFFF730 ; if the level has water or oil
00000000                            
00000000 =FFFFF760                  Sonic_top_speed =		$FFFFF760
00000000 =FFFFF762                  Sonic_acceleration =		$FFFFF762
00000000 =FFFFF764                  Sonic_deceleration =		$FFFFF764
00000000 =FFFFF76C                  Obj_placement_routine =		$FFFFF76C
00000000 =FFFFF770                  Obj_load_addr_0 =		$FFFFF770
00000000 =FFFFF774                  Obj_load_addr_1 =		$FFFFF774
00000000 =FFFFF778                  Obj_load_addr_2 =		$FFFFF778
00000000 =FFFFF77C                  Obj_load_addr_3 =		$FFFFF77C
00000000 =FFFFF790                  Demo_button_index =		$FFFFF790 ; index into button press demo data, for player 1
00000000 =FFFFF792                  Demo_press_counter =		$FFFFF792 ; frames remaining until next button press, for player 1
00000000 =FFFFF732                  Demo_button_index_2P =		$FFFFF732 ; index into button press demo data, for player 2
00000000 =FFFFF734                  Demo_press_counter_2P =		$FFFFF734 ; frames remaining until next button press, for player 2
00000000 =FFFFF796                  Collision_addr =		$FFFFF796
00000000 =FFFFF7AA                  Current_Boss_ID =		$FFFFF7AA
00000000 =FFFFF7CC                  Control_Locked =		$FFFFF7CC
00000000 =FFFFF7D0                  Chain_Bonus_counter =		$FFFFF7D0 ; counts up when you destroy things that give points, resets when you touch the ground
00000000 =FFFFF7D2                  Bonus_Countdown_1 =		$FFFFF7D2 ; level results time bonus or special stage sonic ring bonus
00000000 =FFFFF7D4                  Bonus_Countdown_2 =		$FFFFF7D4 ; level results ring bonus or special stage tails ring bonus
00000000 =FFFFF7D6                  Update_Bonus_score =		$FFFFF7D6
00000000 =FFFFF7DA                  Camera_X_pos_coarse =		$FFFFF7DA ; (Camera_X_pos - 128) / 256
00000000                            
00000000 =FFFFF800                  Sprite_Table =			$FFFFF800 ; Sprite attribute table buffer
00000000                            
00000000 =FFFFFB00                  Normal_palette =		$FFFFFB00
00000000 =FFFFFB20                  Normal_palette_line2 =		$FFFFFB20
00000000 =FFFFFB40                  Normal_palette_line3 =		$FFFFFB40
00000000 =FFFFFB60                  Normal_palette_line4 =		$FFFFFB60
00000000 =FFFFFB80                  Second_palette =		$FFFFFB80
00000000 =FFFFFBA0                  Second_palette_line2 =		$FFFFFBA0
00000000 =FFFFFBC0                  Second_palette_line3 =		$FFFFFBC0
00000000 =FFFFFBE0                  Second_palette_line4 =		$FFFFFBE0
00000000                            
00000000 =FFFFFC00                  Object_Respawn_Table =		$FFFFFC00
00000000 =FFFFFE00                  System_Stack =			$FFFFFE00
00000000 =FFFFFE02                  Level_Inactive_flag = 		$FFFFFE02 ; (2 bytes)
00000000 =FFFFFE04                  Timer_frames =			$FFFFFE04 ; (2 bytes)
00000000 =FFFFFE06                  Debug_object =			$FFFFFE06
00000000 =FFFFFE08                  Debug_placement_mode =		$FFFFFE08
00000000 =FFFFFE10                  Current_ZoneAndAct =		$FFFFFE10 ; 2 bytes
00000000 =FFFFFE10                  Current_Zone =			$FFFFFE10 ; 1 byte
00000000 =FFFFFE11                  Current_Act =			$FFFFFE11 ; 1 byte
00000000 =FFFFFE12                  Life_count =			$FFFFFE12
00000000 =FFFFFE16                  Current_Special_Stage =		$FFFFFE16
00000000 =FFFFFE18                  Continue_count =		$FFFFFE18
00000000 =FFFFFE19                  Super_Sonic_flag =		$FFFFFE19
00000000 =FFFFFE1A                  Time_Over_flag =		$FFFFFE1A
00000000 =FFFFFE1B                  Extra_life_flags =		$FFFFFE1B
00000000                            
00000000                            ; If set, the respective HUD element will be updated.
00000000 =FFFFFE1C                  Update_HUD_lives =		$FFFFFE1C
00000000 =FFFFFE1D                  Update_HUD_rings =		$FFFFFE1D
00000000 =FFFFFE1E                  Update_HUD_timer =		$FFFFFE1E
00000000 =FFFFFE1F                  Update_HUD_score =		$FFFFFE1F
00000000                            
00000000 =FFFFFE20                  Ring_count =			$FFFFFE20 ; 2 bytes
00000000 =FFFFFE22                  Timer =				$FFFFFE22 ; 4 bytes
00000000 =FFFFFE22                  Timer_minute_word =		$FFFFFE22 ; 2 bytes
00000000 =FFFFFE23                  Timer_minute =			$FFFFFE23 ; 1 byte
00000000 =FFFFFE24                  Timer_second =			$FFFFFE24 ; 1 byte
00000000 =FFFFFE25                  Timer_centisecond =		$FFFFFE25 ; 1 byte
00000000 =FFFFFE26                  Score =				$FFFFFE26 ; 4 bytes
00000000 =FFFFFE30                  Last_star_pole_hit =		$FFFFFE30 ; 1 byte -- max activated starpole ID in this act
00000000                            
00000000 =FFFFFE31                  Saved_Last_star_pole_hit =	$FFFFFE31
00000000 =FFFFFE32                  Saved_x_pos =			$FFFFFE32
00000000 =FFFFFE34                  Saved_y_pos =			$FFFFFE34
00000000 =FFFFFE36                  Saved_Ring_count =		$FFFFFE36
00000000 =FFFFFE38                  Saved_Timer =			$FFFFFE38
00000000 =FFFFFE3C                  Saved_art_tile =		$FFFFFE3C
00000000 =FFFFFE3E                  Saved_layer =			$FFFFFE3E
00000000 =FFFFFE40                  Saved_Camera_X_pos =		$FFFFFE40
00000000 =FFFFFE42                  Saved_Camera_Y_pos =		$FFFFFE42
00000000 =FFFFFE50                  Saved_Water_Level =		$FFFFFE50
00000000 =FFFFFE52                  Saved_Water_routine =		$FFFFFE52
00000000 =FFFFFE53                  Saved_Water_move =		$FFFFFE53
00000000 =FFFFFE54                  Saved_Extra_life_flags =	$FFFFFE54
00000000 =FFFFFE55                  Saved_Extra_life_flags_2P =	$FFFFFE55
00000000 =FFFFFE56                  Saved_Camera_Max_Y_pos =	$FFFFFE56
00000000 =FFFFFE58                  Saved_Dynamic_Resize_Routine =	$FFFFFE58
00000000                            
00000000 =FFFFFEA0                  Logspike_anim_counter =		$FFFFFEA0
00000000 =FFFFFEA1                  Logspike_anim_frame =		$FFFFFEA1
00000000 =FFFFFEA2                  Rings_anim_counter =		$FFFFFEA2
00000000 =FFFFFEA3                  Rings_anim_frame =		$FFFFFEA3
00000000 =FFFFFEA4                  Unknown_anim_counter =		$FFFFFEA4 ; I think this was $FFFFFEC4 in the alpha
00000000 =FFFFFEA5                  Unknown_anim_frame =		$FFFFFEA5
00000000 =FFFFFEA6                  Ring_spill_anim_counter =	$FFFFFEA6 ; scattered rings
00000000 =FFFFFEA7                  Ring_spill_anim_frame =		$FFFFFEA7
00000000 =FFFFFEA8                  Ring_spill_anim_accum =		$FFFFFEA8
00000000                            
00000000                            ; values for the second player (some of these only apply to 2-player games)
00000000 =FFFFFEC0                  Tails_top_speed =		$FFFFFEC0 ; Tails_max_vel
00000000 =FFFFFEC2                  Tails_acceleration =		$FFFFFEC2
00000000 =FFFFFEC4                  Tails_deceleration =		$FFFFFEC4
00000000 =FFFFFEC6                  Life_count_2P =			$FFFFFEC6
00000000 =FFFFFEC7                  Extra_life_flags_2P =		$FFFFFEC7
00000000 =FFFFFEC8                  Update_HUD_lives_2P =		$FFFFFEC8
00000000 =FFFFFEC9                  Update_HUD_rings_2P =		$FFFFFEC9
00000000 =FFFFFECA                  Update_HUD_timer_2P =		$FFFFFECA
00000000 =FFFFFECB                  Update_HUD_score_2P =		$FFFFFECB ; mostly unused
00000000 =FFFFFECC                  Time_Over_flag_2P =		$FFFFFECC
00000000 =FFFFFED0                  Ring_count_2P =			$FFFFFED0
00000000 =FFFFFED2                  Timer_2P =			$FFFFFED2 ; 4 bytes
00000000 =FFFFFED2                  Timer_minute_word_2P =		$FFFFFED2 ; 2 bytes
00000000 =FFFFFED3                  Timer_minute_2P =		$FFFFFED3 ; 1 byte
00000000 =FFFFFED4                  Timer_second_2P =		$FFFFFED4 ; 1 byte
00000000 =FFFFFED5                  Timer_centisecond_2P =		$FFFFFED5 ; 1 byte
00000000 =FFFFFED6                  Score_2P =			$FFFFFED6
00000000 =FFFFFEE0                  Last_star_pole_hit_2P =		$FFFFFEE0
00000000                            
00000000 =FFFFFEE1                  Saved_Last_star_pole_hit_2P =	$FFFFFEE1
00000000 =FFFFFEE2                  Saved_x_pos_2P =		$FFFFFEE2
00000000 =FFFFFEE4                  Saved_y_pos_2P =		$FFFFFEE4
00000000 =FFFFFEE6                  Saved_Ring_count_2P =		$FFFFFEE6
00000000 =FFFFFEE8                  Saved_Timer_2P =		$FFFFFEE8
00000000 =FFFFFEEC                  Saved_art_tile_2P =		$FFFFFEEC
00000000 =FFFFFEEE                  Saved_layer_2P =		$FFFFFEEE
00000000                            
00000000 =FFFFFEF8                  Loser_Time_Left =		$FFFFFEF8
00000000 =FFFFFF10                  Results_Screen_2P =		$FFFFFF10 ; 0 = act, 1 = zone, 2 = game, 3 = SS, 4 = SS all
00000000 =FFFFFF20                  Results_Data_2P =		$FFFFFF20 ; $18 bytes
00000000 =FFFFFF20                  EHZ_Results_2P =		$FFFFFF20 ; 6 bytes
00000000 =FFFFFF26                  MCZ_Results_2P =		$FFFFFF26 ; 6 bytes
00000000 =FFFFFF2C                  CNZ_Results_2P =		$FFFFFF2C ; 6 bytes
00000000 =FFFFFF32                  SS_Results_2P =			$FFFFFF32 ; 6 bytes
00000000 =FFFFFF38                  SS_Total_Won =			$FFFFFF38 ; 2 bytes (player 1 then player 2)
00000000 =FFFFFF40                  Perfect_rings_left =		$FFFFFF40
00000000 =FFFFFF70                  Player_mode =			$FFFFFF70 ; 0 = Sonic and Tails, 1 = Sonic, 2 = Tails
00000000 =FFFFFF72                  Player_option =			$FFFFFF72 ; 0 = Sonic and Tails, 1 = Sonic, 2 = Tails
00000000                            
00000000 =FFFFFF74                  Two_player_items =		$FFFFFF74
00000000 =FFFFFF82                  Level_select_zone =		$FFFFFF82
00000000 =FFFFFF84                  Sound_test_sound =		$FFFFFF84
00000000 =FFFFFF86                  Title_screen_option =		$FFFFFF86
00000000 =FFFFFF88                  Current_Zone_2P =		$FFFFFF88
00000000 =FFFFFF89                  Current_Act_2P =		$FFFFFF89
00000000 =FFFFFF8A                  Two_player_mode_copy =		$FFFFFF8A
00000000 =FFFFFF8C                  Options_menu_box =		$FFFFFF8C
00000000 =FFFFFF90                  Level_Music =			$FFFFFF90
00000000 =FFFFFF98                  Game_Over_2P =			$FFFFFF98
00000000 =FFFFFFB0                  Got_Emerald =			$FFFFFFB0
00000000 =FFFFFFB1                  Emerald_count =			$FFFFFFB1
00000000 =FFFFFFB2                  Got_Emeralds_array =		$FFFFFFB2 ; 7 bytes
00000000 =FFFFFFC0                  Next_Extra_life_score =		$FFFFFFC0
00000000 =FFFFFFC4                  Next_Extra_life_score_2P =	$FFFFFFC4
00000000 =FFFFFFC8                  Level_Has_Signpost =		$FFFFFFC8 ; 1 byte ; 1 = signpost, 0 = boss or nothing
00000000 =FFFFFFD0                  Level_select_flag =		$FFFFFFD0
00000000 =FFFFFFD4                  Correct_cheat_entries =		$FFFFFFD4
00000000 =FFFFFFD6                  Correct_cheat_entries_2 =	$FFFFFFD6 ; for 14 continues or 7 emeralds codes
00000000 =FFFFFFD8                  Two_player_mode =		$FFFFFFD8 ; flag (0 for main game)
00000000                            
00000000                            ; Values in these variables are passed to the sound driver during V-INT.
00000000                            ; They use a playlist index, not a sound test index.
00000000 =FFFFFFE0                  Music_to_play =			$FFFFFFE0
00000000 =FFFFFFE1                  SFX_to_play =			$FFFFFFE1 ; normal
00000000 =FFFFFFE2                  SFX_to_play_2 =			$FFFFFFE2 ; alternating stereo
00000000 =FFFFFFE4                  Music_to_play_2 =		$FFFFFFE4 ; alternate (higher priority?) slot
00000000                            
00000000 =FFFFFFF0                  Demo_mode_flag =		$FFFFFFF0 ; 1 if a demo is playing (2 bytes)
00000000 =FFFFFFF2                  Demo_number =			$FFFFFFF2 ; which demo will play next (2 bytes)
00000000 =FFFFFFF8                  Graphics_Flags =		$FFFFFFF8 ; misc. bitfield
00000000 =FFFFFFFC                  Checksum_fourcc =		$FFFFFFFC ; (4 bytes)
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; VDP addressses
00000000 =00C00000                  VDP_data_port =			$C00000 ; (8=r/w, 16=r/w)
00000000 =00C00004                  VDP_control_port =		$C00004 ; (8=r/w, 16=r/w)
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Z80 addresses
00000000 =00A00000                  Z80_RAM =			$A00000 ; start of Z80 RAM
00000000 =00A02000                  Z80_RAM_End =			$A02000 ; end of non-reserved Z80 RAM
00000000 =00A10001                  Z80_Version =			$A10001
00000000 =00A10002                  Z80_Port_1_Data =		$A10002
00000000 =00A10008                  Z80_Port_1_Control =		$A10008
00000000 =00A1000A                  Z80_Port_2_Control =		$A1000A
00000000 =00A1000C                  Z80_Expansion_Control =		$A1000C
00000000 =00A11100                  Z80_Bus_Request =		$A11100
00000000 =00A11200                  Z80_Reset =			$A11200
00000000                            
00000000 =00A14000                  Security_Addr =			$A14000	
00000000 =00A14000                  Security_Addr =			$A14000	
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:    dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+          dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+          dc.l PrivilegeViol, Trace, Line1010Emu, Line1111Emu
00000030 0000 0000 0000 0000 0000+          dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+          dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+          dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+          dc.l ErrorExcept, ErrorTrap, ErrorTrap, ErrorTrap
00000070 0000 0000 0000 0000 0000+          dc.l PalToCRAM,    ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
00000100                            
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2953 4547 4120 3139+  Date:		dc.b '(C)SEGA 1991.APR' ; Release date
00000120 534F 4E49 4320 5448 4520+  Title_Local:	dc.b 'SONIC THE               HEDGEHOG 4 EPISODE I    ' ; Domestic name
00000150 534F 4E49 4320 5448 4520+  Title_Int:	dc.b 'SONIC THE               HEDGEHOG 4 EPISODE I    ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            jmp_DisplaySprite:
00000300 4EF9 0000 0000             	jmp DisplaySprite
00000306                            
00000306                            GameProgram:
00000306 4A79 00C0 0004             		tst.w	($C00004).l
0000030C 0839 0006 00A1 000D        		btst	#6,($A1000D).l
00000314 6700                       		beq.s	CheckSumCheck
00000316 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
0000031E 6700 0000                  		beq.w	GameInit	; if yes, branch
00000322                            
00000322                            CheckSumCheck:
00000322 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000328 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
0000032E 2011                       		move.l	(a1),d0
00000330 7200                       		moveq	#0,d1
00000332                            
00000332                            loc_32C:
00000332 D258                       		add.w	(a0)+,d1
00000334 B088                       		cmp.l	a0,d0
00000336 64FA                       		bcc.s	loc_32C
00000338 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
0000033E                            	;	cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033E                            	;	bne.w	CheckSumError	; if they don't match, branch
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            
00000348                            loc_348:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,loc_348
0000034E 1039 00A1 0001             		move.b	($A10001).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            
00000370                            GameClrRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000376 6100 0000                  		bsr.w	VDPSetupGame
0000037A 6100 0000                  		bsr.w	SoundDriverLoad
0000037E 6100 0000                  		bsr.w	JoypadInit
00000382 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000388                            
00000388                            MainGameLoop:
00000388 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000038C 0240 001C                  		andi.w	#$1C,d0
00000390 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000394 60F2                       		bra.s	MainGameLoop
00000396                            ; ===========================================================================
00000396                            ; ---------------------------------------------------------------------------
00000396                            ; Main game mode array
00000396                            ; ---------------------------------------------------------------------------
00000396                            
00000396                            GameModeArray:
00000396 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000039A                            ; ===========================================================================
0000039A 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000039E                            ; ===========================================================================
0000039E 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A2                            ; ===========================================================================
000003A2 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003A6                            ; ===========================================================================
000003A6 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003AA                            ; ===========================================================================
000003AA 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003AE                            ; ===========================================================================
000003AE 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003B2                            ; ===========================================================================
000003B2 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003B6                            ; ===========================================================================
000003B6 4E75                       		rts
000003B8                            ; ===========================================================================
000003B8                            
000003B8                            CheckSumError:
000003B8 6100 0000                  		bsr.w	VDPSetupGame
000003BC 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003C6 7E3F                       		moveq	#$3F,d7
000003C8                            
000003C8                            CheckSum_Red:
000003C8 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003D0 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003D4                            
000003D4                            CheckSum_Loop:
000003D4 60FE                       		bra.s	CheckSum_Loop
000003D6                            ; ===========================================================================
000003D6                            
000003D6                            loc_43A:
000003D6 46FC 2700                  		move	#$2700,sr
000003DA 544F                       		addq.w	#2,sp
000003DC 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
000003E0 544F                       		addq.w	#2,sp
000003E2 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
000003E8 6100 0000                  		bsr.w	ShowErrorMsg
000003EC 202F 0002                  		move.l	2(sp),d0
000003F0 6100 0000                  		bsr.w	sub_5BA
000003F4 2038 FC40                  		move.l	($FFFFFC40).w,d0
000003F8 6100 0000                  		bsr.w	sub_5BA
000003FC 6000                       		bra.s	loc_478
000003FE                            ; ===========================================================================
000003FE                            
000003FE                            loc_462:
000003FE 46FC 2700                  		move	#$2700,sr
00000402 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000408 6100 0000                  		bsr.w	ShowErrorMsg
0000040C 202F 0002                  		move.l	2(sp),d0
00000410 6100 0000                  		bsr.w	sub_5BA
00000414                            
00000414                            loc_478:
00000414 6100 0000                  		bsr.w	ErrorWaitForC
00000418 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
0000041E 46FC 2300                  		move	#$2300,sr
00000422 4E73                       		rte	
00000424                            
00000424                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000424                            
00000424                            
00000424                            ShowErrorMsg:				; XREF: loc_43A; loc_462
00000424 4DF9 00C0 0000             		lea	($C00000).l,a6
0000042A 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
00000434 41F9 0000 0000             		lea	(Art_Text).l,a0
0000043A 323C 027F                  		move.w	#$27F,d1
0000043E                            
0000043E                            Error_LoadGfx:
0000043E 3C98                       		move.w	(a0)+,(a6)
00000440 51C9 FFFC                  		dbf	d1,Error_LoadGfx
00000444 7000                       		moveq	#0,d0		; clear	d0
00000446 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
0000044A 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
0000044E 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
00000452 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
0000045C 7212                       		moveq	#$12,d1		; number of characters
0000045E                            
0000045E                            Error_LoopChars:
0000045E 7000                       		moveq	#0,d0
00000460 1018                       		move.b	(a0)+,d0
00000462 0640 0790                  		addi.w	#$790,d0
00000466 3C80                       		move.w	d0,(a6)
00000468 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
0000046C 4E75                       		rts	
0000046E                            ; End of function ShowErrorMsg
0000046E                            
0000046E                            ; ===========================================================================
0000046E 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
00000472 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
00000476 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
0000047A 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
0000047E 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
00000482 0000                       		dc.w asc_5A6-ErrorText
00000484 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
00000497 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
000004AA 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
000004BD 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
000004D0 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
000004E3 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
000004F6 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
00000509 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
0000051C 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
0000052F 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
00000542 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
00000556 00                         		even
00000556                            
00000556                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000556                            
00000556                            
00000556                            sub_5BA:				; XREF: loc_43A; loc_462
00000556 3CBC 07CA                  		move.w	#$7CA,(a6)
0000055A 7407                       		moveq	#7,d2
0000055C                            
0000055C                            loc_5C0:
0000055C E998                       		rol.l	#4,d0
0000055E 6100                       		bsr.s	sub_5CA
00000560 51CA FFFA                  		dbf	d2,loc_5C0
00000564 4E75                       		rts	
00000566                            ; End of function sub_5BA
00000566                            
00000566                            
00000566                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000566                            
00000566                            
00000566                            sub_5CA:				; XREF: sub_5BA
00000566 3200                       		move.w	d0,d1
00000568 0241 000F                  		andi.w	#$F,d1
0000056C 0C41 000A                  		cmpi.w	#$A,d1
00000570 6500                       		bcs.s	loc_5D8
00000572 5E41                       		addq.w	#7,d1
00000574                            
00000574                            loc_5D8:
00000574 0641 07C0                  		addi.w	#$7C0,d1
00000578 3C81                       		move.w	d1,(a6)
0000057A 4E75                       		rts	
0000057C                            ; End of function sub_5CA
0000057C                            
0000057C                            
0000057C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000057C                            
0000057C                            
0000057C                            ErrorWaitForC:				; XREF: loc_478
0000057C 6100 0000                  		bsr.w	ReadJoypads
00000580 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
00000586 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
0000058A 4E75                       		rts	
0000058C                            ; End of function ErrorWaitForC
0000058C                            
0000058C                            ; ===========================================================================
0000058C                            
0000058C                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000AAC                            		even
00000AAC                            
00000AAC                            ; ===========================================================================
00000AAC                            
00000AAC                            loc_B10:				; XREF: Vectors
00000AAC 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000AB0 4A38 F62A                  		tst.b	($FFFFF62A).w
00000AB4 6700                       		beq.s	loc_B88
00000AB6 3039 00C0 0004             		move.w	($C00004).l,d0
00000ABC 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000AC6 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000ACE 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000AD4 6700                       		beq.s	loc_B42
00000AD6 303C 0700                  		move.w	#$700,d0
00000ADA                            
00000ADA                            loc_B3E:
00000ADA 51C8 FFFE                  		dbf	d0,loc_B3E
00000ADE                            
00000ADE                            loc_B42:
00000ADE 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000AE2 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000AE8 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000AEE 0240 003E                  		andi.w	#$3E,d0
00000AF2 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000AF6 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000AFA                            
00000AFA                            loc_B5E:				; XREF: loc_B88
00000AFA 4EB9 0000 0000             		jsr	sub_71B4C
00000B00                            
00000B00                            loc_B64:				; XREF: loc_D50
00000B00 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000B04 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B08 4E73                       		rte
00000B0A                            ; ===========================================================================
00000B0A 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000B0E 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000B12 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000B16 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000B1A 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000B1E 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000B22 0000                       		dc.w loc_E72-off_B6E
00000B24                            ; ===========================================================================
00000B24                            
00000B24                            loc_B88:				; XREF: loc_B10; off_B6E
00000B24 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000B2A 6700                       		beq.s	loc_B9A
00000B2C 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000B32 6600 FFC6                  		bne.w	loc_B5E
00000B36                            
00000B36                            loc_B9A:
00000B36 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000B3C 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000B40 3039 00C0 0004             		move.w	($C00004).l,d0
00000B46 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000B4C 6700                       		beq.s	loc_BBA
00000B4E 303C 0700                  		move.w	#$700,d0
00000B52                            
00000B52                            loc_BB6:
00000B52 51C8 FFFE                  		dbf	d0,loc_BB6
00000B56                            
00000B56                            loc_BBA:
00000B56 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000B5C 33FC 0100 00A1 1100 0839+  	Z80DMA_ON
00000B8A 4A38 F64E                  		tst.b	($FFFFF64E).w
00000B8E 6600                       		bne.s	loc_BFE
00000B90 4BF9 00C0 0004             		lea	($C00004).l,a5
00000B96 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000B9C 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000BA2 3ABC 977F                  		move.w	#$977F,(a5)
00000BA6 3ABC C000                  		move.w	#$C000,(a5)
00000BAA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BB0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BB4 6000                       		bra.s	loc_C22
00000BB6                            ; ===========================================================================
00000BB6                            
00000BB6                            loc_BFE:				; XREF: loc_BC8
00000BB6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BBC 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000BC2 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000BC8 3ABC 977F                  		move.w	#$977F,(a5)
00000BCC 3ABC C000                  		move.w	#$C000,(a5)
00000BD0 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BD6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BDA                            
00000BDA                            loc_C22:				; XREF: loc_BC8
00000BDA 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000BDE 33FC 0100 00A1 1100 0839+  	Z80DMA_OFF
00000C00 6000 FEF8                  		bra.w	loc_B5E
00000C04                            ; ===========================================================================
00000C04                            
00000C04                            loc_C32:				; XREF: off_B6E
00000C04 6100 0000                  		bsr.w	sub_106E
00000C08                            
00000C08                            loc_C36:				; XREF: off_B6E
00000C08 4A78 F614                  		tst.w	($FFFFF614).w
00000C0C 6700 0000                  		beq.w	locret_C42
00000C10 5378 F614                  		subq.w	#1,($FFFFF614).w
00000C14                            
00000C14                            locret_C42:
00000C14 4E75                       		rts
00000C16                            ; ===========================================================================
00000C16                            
00000C16                            loc_C44:				; XREF: off_B6E
00000C16 6100 0000                  		bsr.w	sub_106E
00000C1A 6100 0000                  		bsr.w	sub_6886
00000C1E 6100 0000                  		bsr.w	sub_1642
00000C22 4A78 F614                  		tst.w	($FFFFF614).w
00000C26 6700 0000                  		beq.w	locret_C5C
00000C2A 5378 F614                  		subq.w	#1,($FFFFF614).w
00000C2E                            
00000C2E                            locret_C5C:
00000C2E 4E75                       		rts
00000C30                            ; ===========================================================================
00000C30                            
00000C30                            loc_C5E:				; XREF: off_B6E
00000C30 6100 0000                  		bsr.w	sub_106E
00000C34 4E75                       		rts
00000C36                            
00000C36                            Return:
00000C36 6100 0000                  		bsr.w	ReadJoypads
00000C3A 4E75                       		rts
00000C3C                            ; ===========================================================================
00000C3C                            
00000C3C                            loc_C64:				; XREF: off_B6E
00000C3C 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000C42 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000C46                            
00000C46                            loc_C6E:				; XREF: off_B6E
00000C46 33FC 0100 00A1 1100 0839+  	Z80DMA_ON
00000C74 6100 0000                  		bsr.w	ReadJoypads
00000C78 4A38 F64E                  		tst.b	($FFFFF64E).w
00000C7C 6600                       		bne.s	loc_CB0
00000C7E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C84 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C8A 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000C90 3ABC 977F                  		move.w	#$977F,(a5)
00000C94 3ABC C000                  		move.w	#$C000,(a5)
00000C98 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C9E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CA2 6000                       		bra.s	loc_CD4
00000CA4                            ; ===========================================================================
00000CA4                            
00000CA4                            loc_CB0:				; XREF: loc_C76
00000CA4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CAA 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000CB0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000CB6 3ABC 977F                  		move.w	#$977F,(a5)
00000CBA 3ABC C000                  		move.w	#$C000,(a5)
00000CBE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000CC4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CC8                            
00000CC8                            loc_CD4:				; XREF: loc_C76
00000CC8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000CCC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CD2 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000CD8 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000CDE 3ABC 977F                  		move.w	#$977F,(a5)
00000CE2 3ABC 7C00                  		move.w	#$7C00,(a5)
00000CE6 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000CEC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CF0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CF6 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000CFC 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000D02 3ABC 977F                  		move.w	#$977F,(a5)
00000D06 3ABC 7800                  		move.w	#$7800,(a5)
00000D0A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D10 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D14 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000D1A                            
00000D1A                            loc_D50:
00000D1A 33FC 0100 00A1 1100 0839+  	Z80DMA_OFF
00000D3C 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000D42 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000D48 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000D4E 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000D54 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000D5A 6400                       		bcc.s	Demo_Time
00000D5C 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000D62 588F                       		addq.l	#4,sp
00000D64 6000 FD9A                  		bra.w	loc_B64
00000D68                            
00000D68                            ; ---------------------------------------------------------------------------
00000D68                            ; Subroutine to	run a demo for an amount of time
00000D68                            ; ---------------------------------------------------------------------------
00000D68                            
00000D68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000D68                            
00000D68                            
00000D68                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000D68 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000D6C 4EB9 0000 0000             		jsr	AniArt_Load
00000D72 4EB9 0000 0000             		jsr	HudUpdate
00000D78 6100 0000                  		bsr.w	sub_165E
00000D7C 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000D80 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000D84 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000D88                            
00000D88                            Demo_TimeEnd:
00000D88 4E75                       		rts
00000D8A                            ; End of function Demo_Time
00000D8A                            
00000D8A                            ; ===========================================================================
00000D8A                            
00000D8A                            loc_DA6:				; XREF: off_B6E
00000D8A 6100 0000                  		bsr.w	ReadJoypads
00000D8E 33FC 0100 00A1 1100 0839+  	Z80DMA_ON
00000DBC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DC2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000DC8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000DCE 3ABC 977F                  		move.w	#$977F,(a5)
00000DD2 3ABC C000                  		move.w	#$C000,(a5)
00000DD6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DDC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DE0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DE6 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000DEC 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000DF2 3ABC 977F                  		move.w	#$977F,(a5)
00000DF6 3ABC 7800                  		move.w	#$7800,(a5)
00000DFA 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E00 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E04 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E0A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000E10 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000E16 3ABC 977F                  		move.w	#$977F,(a5)
00000E1A 3ABC 7C00                  		move.w	#$7C00,(a5)
00000E1E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E24 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E28 6100 0000                  		bsr.w	PalCycle_SS
00000E2C 4A38 F767                  		tst.b	($FFFFF767).w
00000E30 6700                       		beq.s	loc_E64
00000E32 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E38 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000E3E 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000E44 3ABC 977F                  		move.w	#$977F,(a5)
00000E48 3ABC 7000                  		move.w	#$7000,(a5)
00000E4C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E52 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E56 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000E5C                            
00000E5C                            loc_E64:
00000E5C 33FC 0100 00A1 1100 0839+  	Z80DMA_OFF
00000E7E 4A78 F614                  		tst.w	($FFFFF614).w
00000E82 6700 0000                  		beq.w	locret_E70
00000E86 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E8A                            
00000E8A                            locret_E70:
00000E8A 4E75                       		rts	
00000E8C                            ; ===========================================================================
00000E8C                            
00000E8C                            loc_E72:				; XREF: off_B6E
00000E8C 6100 0000                  		bsr.w	ReadJoypads
00000E90 33FC 0100 00A1 1100 0839+  	Z80DMA_ON
00000EBE 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EC2 6600                       		bne.s	loc_EB4
00000EC4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000ECA 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000ED0 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000ED6 3ABC 977F                  		move.w	#$977F,(a5)
00000EDA 3ABC C000                  		move.w	#$C000,(a5)
00000EDE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EE4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EE8 6000                       		bra.s	loc_ED8
00000EEA                            ; ===========================================================================
00000EEA                            
00000EEA                            loc_EB4:				; XREF: loc_E7A
00000EEA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EF0 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EF6 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EFC 3ABC 977F                  		move.w	#$977F,(a5)
00000F00 3ABC C000                  		move.w	#$C000,(a5)
00000F04 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000F0A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F0E                            
00000F0E                            loc_ED8:				; XREF: loc_E7A
00000F0E 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000F12 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F18 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F1E 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F24                            
00000F24                            loc_EEE:
00000F24 3ABC 977F                  		move.w	#$977F,(a5)
00000F28 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F2C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F32 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F36 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F3C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F42 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F48 3ABC 977F                  		move.w	#$977F,(a5)
00000F4C 3ABC 7800                  		move.w	#$7800,(a5)
00000F50 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F56 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F5A 4A38 F767                  		tst.b	($FFFFF767).w
00000F5E 6700                       		beq.s	loc_F54
00000F60 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F66 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F6C 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F72 3ABC 977F                  		move.w	#$977F,(a5)
00000F76 3ABC 7000                  		move.w	#$7000,(a5)
00000F7A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F80 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F84 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F8A                            
00000F8A                            loc_F54:
00000F8A 33FC 0100 00A1 1100 0839+  	Z80DMA_OFF
00000FAC 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000FB2 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000FB8 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000FBE 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000FC4 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000FC8 4EB9 0000 0000             		jsr	AniArt_Load
00000FCE 4EB9 0000 0000             		jsr	HudUpdate
00000FD4 6100 0000                  		bsr.w	sub_1642
00000FD8 4E75                       		rts	
00000FDA                            ; ===========================================================================
00000FDA                            
00000FDA                            loc_F8A:				; XREF: off_B6E
00000FDA 6100 0000                  		bsr.w	sub_106E
00000FDE 5238 F628                  		addq.b	#1,($FFFFF628).w
00000FE2 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00000FE8 4E75                       		rts	
00000FEA                            ; ===========================================================================
00000FEA                            
00000FEA                            loc_F9A:				; XREF: off_B6E
00000FEA 6100 0000                  		bsr.w	sub_106E
00000FEE 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000FF2 6000 0000                  		bra.w	sub_1642
00000FF6                            ; ===========================================================================
00000FF6                            
00000FF6                            loc_FA6:				; XREF: off_B6E
00000FF6 6100 0000                  		bsr.w	ReadJoypads
00000FFA 33FC 0100 00A1 1100 0839+  	Z80DMA_ON
00001028 4BF9 00C0 0004             		lea	($C00004).l,a5
0000102E 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001034 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
0000103A 3ABC 977F                  		move.w	#$977F,(a5)
0000103E 3ABC C000                  		move.w	#$C000,(a5)
00001042 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001048 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000104C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001052 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001058 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
0000105E 3ABC 977F                  		move.w	#$977F,(a5)
00001062 3ABC 7800                  		move.w	#$7800,(a5)
00001066 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000106C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001070 4BF9 00C0 0004             		lea	($C00004).l,a5
00001076 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
0000107C 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001082 3ABC 977F                  		move.w	#$977F,(a5)
00001086 3ABC 7C00                  		move.w	#$7C00,(a5)
0000108A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001090 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001094 4A38 F767                  		tst.b	($FFFFF767).w
00001098 6700                       		beq.s	loc_1060
0000109A 4BF9 00C0 0004             		lea	($C00004).l,a5
000010A0 2ABC 9401 9370             		move.l	#$94019370,(a5)
000010A6 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
000010AC 3ABC 977F                  		move.w	#$977F,(a5)
000010B0 3ABC 7000                  		move.w	#$7000,(a5)
000010B4 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000010BA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010BE 11FC 0000 F767             		move.b	#0,($FFFFF767).w
000010C4                            
000010C4                            loc_1060:
000010C4 33FC 0100 00A1 1100 0839+  	Z80DMA_OFF
000010E6 4A78 F614                  		tst.w	($FFFFF614).w
000010EA 6700 0000                  		beq.w	locret_106C
000010EE 5378 F614                  		subq.w	#1,($FFFFF614).w
000010F2                            
000010F2                            locret_106C:
000010F2 4E75                       		rts	
000010F4                            
000010F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010F4                            
000010F4                            
000010F4                            sub_106E:				; XREF: loc_C32; et al
000010F4 6100 0000                  		bsr.w	ReadJoypads
000010F8 33FC 0100 00A1 1100 0839+  	Z80DMA_ON
00001126 4A38 F64E                  		tst.b	($FFFFF64E).w
0000112A 6600                       		bne.s	loc_10B0
0000112C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001132 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001138 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
0000113E 3ABC 977F                  		move.w	#$977F,(a5)
00001142 3ABC C000                  		move.w	#$C000,(a5)
00001146 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
0000114C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001150                            
00001150                            PAL1_LOAD:
00001150 6000                       		bra.s	loc_10D4
00001152                            ; ===========================================================================
00001152                            
00001152                            loc_10B0:
00001152 4BF9 00C0 0004             		lea	($C00004).l,a5
00001158 2ABC 9400 9340             		move.l	#$94009340,(a5)
0000115E 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00001164 3ABC 977F                  		move.w	#$977F,(a5)
00001168 3ABC C000                  		move.w	#$C000,(a5)
0000116C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001172 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001176                            loc_10D4:
00001176 4BF9 00C0 0004             		lea	($C00004).l,a5
0000117C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001182 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001188 3ABC 977F                  		move.w	#$977F,(a5)
0000118C 3ABC 7800                  		move.w	#$7800,(a5)
00001190 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001196 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000119A 4BF9 00C0 0004             		lea	($C00004).l,a5
000011A0 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
000011A6 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
000011AC 3ABC 977F                  		move.w	#$977F,(a5)
000011B0 3ABC 7C00                  		move.w	#$7C00,(a5)
000011B4 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000011BA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000011BE 33FC 0100 00A1 1100 0839+  	Z80DMA_OFF
000011E0 4E75                       		rts	
000011E2                            ; End of function sub_106E
000011E2                            
000011E2                            ; ---------------------------------------------------------------------------
000011E2                            ; Subroutine to	move pallets from the RAM to CRAM
000011E2                            ; ---------------------------------------------------------------------------
000011E2                            
000011E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011E2                            
000011E2                            
000011E2                            PalToCRAM:
000011E2 46FC 2700                  		move	#$2700,sr
000011E6 4A78 F644                  		tst.w	($FFFFF644).w
000011EA 6700                       		beq.s	locret_119C
000011EC 31FC 0000 F644             		move.w	#0,($FFFFF644).w
000011F2 48E7 00C0                  		movem.l	a0-a1,-(sp)
000011F6 43F9 00C0 0000             		lea	($C00000).l,a1
000011FC 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001200 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001208 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
0000120A 2298                       		move.l	(a0)+,(a1)
0000120C 2298                       		move.l	(a0)+,(a1)
0000120E 2298                       		move.l	(a0)+,(a1)
00001210 2298                       		move.l	(a0)+,(a1)
00001212 2298                       		move.l	(a0)+,(a1)
00001214 2298                       		move.l	(a0)+,(a1)
00001216 2298                       		move.l	(a0)+,(a1)
00001218 2298                       		move.l	(a0)+,(a1)
0000121A 2298                       		move.l	(a0)+,(a1)
0000121C 2298                       		move.l	(a0)+,(a1)
0000121E 2298                       		move.l	(a0)+,(a1)
00001220 2298                       		move.l	(a0)+,(a1)
00001222 2298                       		move.l	(a0)+,(a1)
00001224 2298                       		move.l	(a0)+,(a1)
00001226 2298                       		move.l	(a0)+,(a1)
00001228 2298                       		move.l	(a0)+,(a1)
0000122A 2298                       		move.l	(a0)+,(a1)
0000122C 2298                       		move.l	(a0)+,(a1)
0000122E 2298                       		move.l	(a0)+,(a1)
00001230 2298                       		move.l	(a0)+,(a1)
00001232 2298                       		move.l	(a0)+,(a1)
00001234 2298                       		move.l	(a0)+,(a1)
00001236 2298                       		move.l	(a0)+,(a1)
00001238 2298                       		move.l	(a0)+,(a1)
0000123A 2298                       		move.l	(a0)+,(a1)
0000123C 2298                       		move.l	(a0)+,(a1)
0000123E 2298                       		move.l	(a0)+,(a1)
00001240 2298                       		move.l	(a0)+,(a1)
00001242 2298                       		move.l	(a0)+,(a1)
00001244 2298                       		move.l	(a0)+,(a1)
00001246 2298                       		move.l	(a0)+,(a1)
00001248 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
0000124E 4CDF 0300                  		movem.l	(sp)+,a0-a1
00001252 4A38 F64F                  		tst.b	($FFFFF64F).w
00001256 6600                       		bne.s	loc_119E
00001258                            
00001258                            locret_119C:
00001258 4E73                       		rte	
0000125A                            ; ===========================================================================
0000125A                            
0000125A                            loc_119E:				; XREF: PalToCRAM
0000125A 4238 F64F                  		clr.b	($FFFFF64F).w
0000125E 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00001262 6100 FB04                  		bsr.w	Demo_Time
00001266 4EB9 0000 0000             		jsr	sub_71B4C
0000126C 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00001270 4E73                       		rte	
00001272                            ; End of function PalToCRAM
00001272                            
00001272                            ; ---------------------------------------------------------------------------
00001272                            ; Subroutine to	initialise joypads
00001272                            ; ---------------------------------------------------------------------------
00001272                            
00001272                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001272                            
00001272                            
00001272                            JoypadInit:				; XREF: GameClrRAM
00001272 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000127A                            
0000127A                            Joypad_WaitZ80:
0000127A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
00001282 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
00001284 7040                       		moveq	#$40,d0
00001286 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
0000128C 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00001292 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00001298 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000012A0 4E75                       		rts	
000012A2                            ; End of function JoypadInit
000012A2                            
000012A2                            ; ---------------------------------------------------------------------------
000012A2                            ; Subroutine to	read joypad input, and send it to the RAM
000012A2                            ; ---------------------------------------------------------------------------
000012A2                            
000012A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012A2                            
000012A2                            
000012A2                            ReadJoypads:
000012A2 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
000012A6 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000012AC 6100                       		bsr.s	Joypad_Read	; do the first joypad
000012AE 5449                       		addq.w	#2,a1		; do the second	joypad
000012B0                            
000012B0                            Joypad_Read:
000012B0 12BC 0000                  		move.b	#0,(a1)
000012B4 4E71                       		nop	
000012B6 4E71                       		nop	
000012B8 1011                       		move.b	(a1),d0
000012BA E508                       		lsl.b	#2,d0
000012BC 0200 00C0                  		andi.b	#$C0,d0
000012C0 12BC 0040                  		move.b	#$40,(a1)
000012C4 4E71                       		nop	
000012C6 4E71                       		nop	
000012C8 1211                       		move.b	(a1),d1
000012CA 0201 003F                  		andi.b	#$3F,d1
000012CE 8001                       		or.b	d1,d0
000012D0 4600                       		not.b	d0
000012D2 1210                       		move.b	(a0),d1
000012D4 B101                       		eor.b	d0,d1
000012D6 10C0                       		move.b	d0,(a0)+
000012D8 C200                       		and.b	d0,d1
000012DA 10C1                       		move.b	d1,(a0)+
000012DC 4E75                       		rts	
000012DE                            ; End of function ReadJoypads
000012DE                            
000012DE                            
000012DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012DE                            
000012DE                            
000012DE                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
000012DE 41F9 00C0 0004             		lea	($C00004).l,a0
000012E4 43F9 00C0 0000             		lea	($C00000).l,a1
000012EA 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
000012F0 7E12                       		moveq	#$12,d7
000012F2                            
000012F2                            VDP_Loop:
000012F2 309A                       		move.w	(a2)+,(a0)
000012F4 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
000012F8                            
000012F8 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
000012FE 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001302 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001308 7000                       		moveq	#0,d0
0000130A 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001314 3E3C 003F                  		move.w	#$3F,d7
00001318                            
00001318                            VDP_ClrCRAM:
00001318 3280                       		move.w	d0,(a1)
0000131A 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
0000131E                            
0000131E 42B8 F616                  		clr.l	($FFFFF616).w
00001322 42B8 F61A                  		clr.l	($FFFFF61A).w
00001326 2F01                       		move.l	d1,-(sp)
00001328 4BF9 00C0 0004             		lea	($C00004).l,a5
0000132E 3ABC 8F01                  		move.w	#$8F01,(a5)
00001332 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
00001338 3ABC 9780                  		move.w	#$9780,(a5)
0000133C 2ABC 4000 0080             		move.l	#$40000080,(a5)
00001342 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
0000134A                            
0000134A                            loc_128E:
0000134A 3215                       		move.w	(a5),d1
0000134C 0801 0001                  		btst	#1,d1
00001350 66F8                       		bne.s	loc_128E
00001352                            
00001352 3ABC 8F02                  		move.w	#$8F02,(a5)
00001356 221F                       		move.l	(sp)+,d1
00001358 4E75                       		rts	
0000135A                            ; End of function VDPSetupGame
0000135A                            
0000135A                            ; ===========================================================================
0000135A 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
00001362 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
0000136A 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
00001372 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
0000137A 9001 9100 9200             		dc.w $9001, $9100, $9200
00001380                            
00001380                            ; ---------------------------------------------------------------------------
00001380                            ; Subroutine to	clear the screen
00001380                            ; ---------------------------------------------------------------------------
00001380                            
00001380                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001380                            
00001380                            
00001380                            ClearScreen:
00001380 4BF9 00C0 0004             		lea	($C00004).l,a5
00001386 3ABC 8F01                  		move.w	#$8F01,(a5)
0000138A 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001390 3ABC 9780                  		move.w	#$9780,(a5)
00001394 2ABC 4000 0083             		move.l	#$40000083,(a5)
0000139A 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000013A2                            
000013A2                            loc_12E6:
000013A2 3215                       		move.w	(a5),d1
000013A4 0801 0001                  		btst	#1,d1
000013A8 66F8                       		bne.s	loc_12E6
000013AA                            
000013AA 3ABC 8F02                  		move.w	#$8F02,(a5)
000013AE 4BF9 00C0 0004             		lea	($C00004).l,a5
000013B4 3ABC 8F01                  		move.w	#$8F01,(a5)
000013B8 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000013BE 3ABC 9780                  		move.w	#$9780,(a5)
000013C2 2ABC 6000 0083             		move.l	#$60000083,(a5)
000013C8 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000013D0                            
000013D0                            loc_1314:
000013D0 3215                       		move.w	(a5),d1
000013D2 0801 0001                  		btst	#1,d1
000013D6 66F8                       		bne.s	loc_1314
000013D8                            
000013D8 3ABC 8F02                  		move.w	#$8F02,(a5)
000013DC 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
000013E4 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
000013EC 43F8 F800                  		lea	($FFFFF800).w,a1
000013F0 7000                       		moveq	#0,d0
000013F2 323C 00A0                  		move.w	#$A0,d1
000013F6                            
000013F6                            loc_133A:
000013F6 22C0                       		move.l	d0,(a1)+
000013F8 51C9 FFFC                  		dbf	d1,loc_133A
000013FC                            
000013FC 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001400 7000                       		moveq	#0,d0
00001402 323C 0100                  		move.w	#$100,d1
00001406                            
00001406                            loc_134A:
00001406 22C0                       		move.l	d0,(a1)+
00001408 51C9 FFFC                  		dbf	d1,loc_134A
0000140C 4E75                       		rts	
0000140E                            ; End of function ClearScreen
0000140E                            
0000140E                            ; ---------------------------------------------------------------------------
0000140E                            ; Subroutine to	load the sound driver
0000140E                            ; ---------------------------------------------------------------------------
0000140E                            
0000140E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000140E                            
0000140E                            
0000140E                            SoundDriverLoad:
0000140E 41F9 0000 0000             		lea	(Z80ROM).l,a0				; load Z80 ROM data
00001414 43F9 00A0 0000             		lea	($A00000).l,a1				; load Z80 RAM space address
0000141A 323C 0000                  		move.w	#(Z80ROM_End-Z80ROM)-$01,d1		; set repeat times
0000141E 33FC 0100 00A1 1100        		move.w	#$0100,($A11100).l			; request Z80 stop (ON)
00001426 33FC 0100 00A1 1200        		move.w	#$0100,($A11200).l			; request Z80 reset (OFF)
0000142E 0839 0000 00A1 1100        		btst.b	#$00,($A11100).l			; has the Z80 stopped yet?
00001436 66F6                       		bne.s	*-$08					; if not, branch
00001438                            
00001438                            SM_LoadZ80:
00001438 12D8                       		move.b	(a0)+,(a1)+				; dump Z80 data to Z80 space
0000143A 51C9 FFFC                  		dbf	d1,SM_LoadZ80				; repeat til done
0000143E 41F9 0000 0000             		lea	(StopSample).l,a0			; load stop/mute sample address
00001444 43F9 00A0 02EC             		lea	($A00000+MuteSample).l,a1		; load Z80 RAM space where the pointer is to be stored
0000144A 12D8                       		move.b	(a0)+,(a1)+				; copy pointer over into Z80
0000144C 12D8                       		move.b	(a0)+,(a1)+				; ''
0000144E 12D8                       		move.b	(a0)+,(a1)+				; ''
00001450 33FC 0000 00A1 1200        		move.w	#$0000,($A11200).l			; request Z80 reset (ON)
00001458 727F                       		moveq	#$7F,d1					; set repeat times
0000145A 51C9 FFFE                  		dbf	d1,*					; there's no way of checking for reset, so a manual delay is necessary
0000145E 33FC 0000 00A1 1100        		move.w	#$0000,($A11100).l			; request Z80 stop (OFF)
00001466 33FC 0100 00A1 1200        		move.w	#$0100,($A11200).l			; request Z80 reset (OFF)
0000146E 4E75                       		rts						; return
00001470                            
00001470                            ; ---------------------------------------------------------------------------
00001470                            ; Subroutine to	play a sound or	music track
00001470                            ; ---------------------------------------------------------------------------
00001470                            
00001470                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001470                            
00001470                            
00001470                            PlaySound:
00001470 11C0 F00A                  		move.b	d0,($FFFFF00A).w
00001474 4E75                       		rts	
00001476                            ; End of function PlaySound
00001476                            
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; Subroutine to	play a special sound/music (E0-E4)
00001476                            ;
00001476                            ; E0 - Fade out
00001476                            ; E1 - Sega
00001476                            ; E2 - Speed up
00001476                            ; E3 - Normal speed
00001476                            ; E4 - Stop
00001476                            ; ---------------------------------------------------------------------------
00001476                            
00001476                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001476                            
00001476                            
00001476                            PlaySound_Special:
00001476 11C0 F00B                  		move.b	d0,($FFFFF00B).w
0000147A 4E75                       		rts	
0000147C                            ; End of function PlaySound_Special
0000147C                            
0000147C                            ; ===========================================================================
0000147C                            ; ---------------------------------------------------------------------------
0000147C                            ; Unused sound/music subroutine
0000147C                            ; ---------------------------------------------------------------------------
0000147C                            
0000147C                            PlaySound_Unk:
0000147C 11C0 F00C                  		move.b	d0,($FFFFF00C).w
00001480 4E75                       		rts	
00001482                            
00001482                            ; ---------------------------------------------------------------------------
00001482                            ; Subroutine to	pause the game
00001482                            ; ---------------------------------------------------------------------------
00001482                            
00001482                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001482                            
00001482                            
00001482                            PauseGame:				; XREF: Level_MainLoop; et al
00001482 4E71                       		nop	
00001484 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
00001488 6700                       		beq.s	Unpause		; if not, branch
0000148A 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
0000148E 6600                       		bne.s	loc_13BE	; if yes, branch
00001490 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001496 6700                       		beq.s	Pause_DoNothing	; if not, branch
00001498                            
00001498                            loc_13BE:
00001498 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
0000149E 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000014A4                            
000014A4                            loc_13CA:
000014A4 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000014AA 6100 0000                  		bsr.w	DelayProgram
000014AE 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000014B2 6700                       		beq.s	Pause_ChkStart	; if not, branch
000014B4 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
000014BA 6700                       		beq.s	Pause_ChkBC	; if not, branch
000014BC 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
000014C2 4E71                       		nop	
000014C4 6000                       		bra.s	loc_1404
000014C6                            ; ===========================================================================
000014C6                            
000014C6                            Pause_ChkBC:				; XREF: PauseGame
000014C6 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
000014CC 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000014CE 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
000014D4 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000014D6                            
000014D6                            Pause_ChkStart:				; XREF: PauseGame
000014D6 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000014DC 67C6                       		beq.s	loc_13CA	; if not, branch
000014DE                            
000014DE                            loc_1404:				; XREF: PauseGame
000014DE 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
000014E4                            
000014E4                            Unpause:				; XREF: PauseGame
000014E4 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
000014EA                            
000014EA                            Pause_DoNothing:			; XREF: PauseGame
000014EA 4E75                       		rts	
000014EC                            ; ===========================================================================
000014EC                            
000014EC                            Pause_SlowMo:				; XREF: PauseGame
000014EC 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
000014F2 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
000014F8 4E75                       		rts	
000014FA                            ; End of function PauseGame
000014FA                            
000014FA                            ; ---------------------------------------------------------------------------
000014FA                            ; Subroutine to	display	patterns via the VDP
000014FA                            ; ---------------------------------------------------------------------------
000014FA                            
000014FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014FA                            
000014FA                            
000014FA                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
000014FA 4DF9 00C0 0000             		lea	($C00000).l,a6
00001500 283C 0080 0000             		move.l	#$800000,d4
00001506                            
00001506                            loc_142C:
00001506 2D40 0004                  		move.l	d0,4(a6)
0000150A 3601                       		move.w	d1,d3
0000150C                            
0000150C                            loc_1432:
0000150C 3C99                       		move.w	(a1)+,(a6)
0000150E 51CB FFFC                  		dbf	d3,loc_1432
00001512 D084                       		add.l	d4,d0
00001514 51CA FFF0                  		dbf	d2,loc_142C
00001518 4E75                       		rts	
0000151A                            ; End of function ShowVDPGraphics
0000151A                            
0000151A                            ; ---------------------------------------------------------------------------
0000151A                            ; Subroutine for queueing VDP commands (seems to only queue transfers to VRAM),
0000151A                            ; to be issued the next time ProcessDMAQueue is called.
0000151A                            ; Can be called a maximum of 18 times before the buffer needs to be cleared
0000151A                            ; by issuing the commands (this subroutine DOES check for overflow)
0000151A                            ; ---------------------------------------------------------------------------
0000151A                            ; In case you wish to use this queue system outside of the spin dash, this is the
0000151A                            ; registers in which it expects data in:
0000151A                            ; d1.l: Address to data (In 68k address space)
0000151A                            ; d2.w: Destination in VRAM
0000151A                            ; d3.w: Length of data
0000151A                            ; ---------------------------------------------------------------------------
0000151A                            
0000151A                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000151A                            
0000151A                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand: Add_To_DMA_Queue:
0000151A                            QueueDMATransfer:
0000151A 2278 C8FC                  		movea.l	($FFFFC8FC).w,a1
0000151E B2FC C8FC                  		cmpa.w	#$C8FC,a1
00001522 6700                       		beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
00001524                            
00001524                            		; piece together some VDP commands and store them for later...
00001524 303C 9300                  		move.w	#$9300,d0 ; command to specify DMA transfer length & $00FF
00001528 1003                       		move.b	d3,d0
0000152A 32C0                       		move.w	d0,(a1)+ ; store command
0000152C                            
0000152C 303C 9400                  		move.w	#$9400,d0 ; command to specify DMA transfer length & $FF00
00001530 E04B                       		lsr.w	#8,d3
00001532 1003                       		move.b	d3,d0
00001534 32C0                       		move.w	d0,(a1)+ ; store command
00001536                            
00001536 303C 9500                  		move.w	#$9500,d0 ; command to specify source address & $0001FE
0000153A E289                       		lsr.l	#1,d1
0000153C 1001                       		move.b	d1,d0
0000153E 32C0                       		move.w	d0,(a1)+ ; store command
00001540                            
00001540 303C 9600                  		move.w	#$9600,d0 ; command to specify source address & $01FE00
00001544 E089                       		lsr.l	#8,d1
00001546 1001                       		move.b	d1,d0
00001548 32C0                       		move.w	d0,(a1)+ ; store command
0000154A                            
0000154A 303C 9700                  		move.w	#$9700,d0 ; command to specify source address & $FE0000
0000154E E089                       		lsr.l	#8,d1
00001550 1001                       		move.b	d1,d0
00001552 32C0                       		move.w	d0,(a1)+ ; store command
00001554                            
00001554 0282 0000 FFFF             		andi.l	#$FFFF,d2 ; command to specify destination address and begin DMA
0000155A E58A                       		lsl.l	#2,d2
0000155C E44A                       		lsr.w	#2,d2
0000155E 4842                       		swap	d2
00001560 0082 4000 0080             		ori.l	#$40000080,d2 ; set bits to specify VRAM transfer
00001566 22C2                       		move.l	d2,(a1)+ ; store command
00001568                            
00001568 21C9 C8FC                  		move.l	a1,($FFFFC8FC).w ; set the next free slot address
0000156C B2FC C8FC                  		cmpa.w	#$C8FC,a1
00001570 6700                       		beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
00001572 32BC 0000                  		move.w	#0,(a1) ; put a stop token at the end of the used part of the buffer
00001576                            ; return_14AA:
00001576                            QueueDMATransfer_Done:
00001576 4E75                       		rts
00001578                            ; End of function QueueDMATransfer
00001578                            
00001578                            
00001578                            ; ---------------------------------------------------------------------------
00001578                            ; Subroutine for issuing all VDP commands that were queued
00001578                            ; (by earlier calls to QueueDMATransfer)
00001578                            ; Resets the queue when it's done
00001578                            ; ---------------------------------------------------------------------------
00001578                            
00001578                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001578                            
00001578                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA: Process_DMA_Queue:
00001578                            ProcessDMAQueue:
00001578 4BF9 00C0 0004             		lea	($C00004).l,a5
0000157E 43F8 C800                  		lea	($FFFFC800).w,a1
00001582                            ; loc_14B6:
00001582                            ProcessDMAQueue_Loop:
00001582 3019                       		move.w	(a1)+,d0
00001584 6700                       		beq.s	ProcessDMAQueue_Done ; branch if we reached a stop token
00001586                            		; issue a set of VDP commands...
00001586 3A80                       		move.w	d0,(a5)		; transfer length
00001588 3A99                       		move.w	(a1)+,(a5)	; transfer length
0000158A 3A99                       		move.w	(a1)+,(a5)	; source address
0000158C 3A99                       		move.w	(a1)+,(a5)	; source address
0000158E 3A99                       		move.w	(a1)+,(a5)	; source address
00001590 3A99                       		move.w	(a1)+,(a5)	; destination
00001592 3A99                       		move.w	(a1)+,(a5)	; destination
00001594 B2FC C8FC                  		cmpa.w	#$C8FC,a1
00001598 66E8                       		bne.s	ProcessDMAQueue_Loop ; loop if we haven't reached the end of the buffer
0000159A                            ; loc_14CE:
0000159A                            ProcessDMAQueue_Done:
0000159A 31FC 0000 C800             		move.w	#0,($FFFFC800).w
000015A0 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
000015A8 4E75                       		rts
000015AA                            ; End of function ProcessDMAQueue
000015AA                            
000015AA                            ; ---------------------------------------------------------------------------
000015AA                            ; Nemesis decompression	algorithm
000015AA                            ; ---------------------------------------------------------------------------
000015AA                            
000015AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015AA                            
000015AA                            
000015AA                            NemDec:
000015AA 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
000015AE 47F9 0000 0000             		lea	(loc_1502).l,a3
000015B4 49F9 00C0 0000             		lea	($C00000).l,a4
000015BA 6000                       		bra.s	loc_145C
000015BC                            ; ===========================================================================
000015BC 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
000015C0 47F9 0000 0000             		lea	(loc_1518).l,a3
000015C6                            
000015C6                            loc_145C:				; XREF: NemDec
000015C6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000015CA 3418                       		move.w	(a0)+,d2
000015CC E34A                       		lsl.w	#1,d2
000015CE 6400                       		bcc.s	loc_146A
000015D0 D6FC 000A                  		adda.w	#$A,a3
000015D4                            
000015D4                            loc_146A:
000015D4 E54A                       		lsl.w	#2,d2
000015D6 3A42                       		movea.w	d2,a5
000015D8 7608                       		moveq	#8,d3
000015DA 7400                       		moveq	#0,d2
000015DC 7800                       		moveq	#0,d4
000015DE 6100 0000                  		bsr.w	NemDec4
000015E2 1A18                       		move.b	(a0)+,d5
000015E4 E145                       		asl.w	#8,d5
000015E6 1A18                       		move.b	(a0)+,d5
000015E8 3C3C 0010                  		move.w	#$10,d6
000015EC 6100                       		bsr.s	NemDec2
000015EE 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000015F2 4E75                       		rts	
000015F4                            ; End of function NemDec
000015F4                            
000015F4                            
000015F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015F4                            
000015F4                            
000015F4                            NemDec2:				; XREF: NemDec
000015F4 3E06                       		move.w	d6,d7
000015F6 5147                       		subq.w	#8,d7
000015F8 3205                       		move.w	d5,d1
000015FA EE69                       		lsr.w	d7,d1
000015FC 0C01 00FC                  		cmpi.b	#-4,d1
00001600 6400                       		bcc.s	loc_14D6
00001602 0241 00FF                  		andi.w	#$FF,d1
00001606 D241                       		add.w	d1,d1
00001608 1031 1000                  		move.b	(a1,d1.w),d0
0000160C 4880                       		ext.w	d0
0000160E 9C40                       		sub.w	d0,d6
00001610 0C46 0009                  		cmpi.w	#9,d6
00001614 6400                       		bcc.s	loc_14B2
00001616 5046                       		addq.w	#8,d6
00001618 E145                       		asl.w	#8,d5
0000161A 1A18                       		move.b	(a0)+,d5
0000161C                            
0000161C                            loc_14B2:
0000161C 1231 1001                  		move.b	1(a1,d1.w),d1
00001620 3001                       		move.w	d1,d0
00001622 0241 000F                  		andi.w	#$F,d1
00001626 0240 00F0                  		andi.w	#$F0,d0
0000162A                            
0000162A                            loc_14C0:				; XREF: NemDec3
0000162A E848                       		lsr.w	#4,d0
0000162C                            
0000162C                            loc_14C2:				; XREF: NemDec3
0000162C E98C                       		lsl.l	#4,d4
0000162E 8801                       		or.b	d1,d4
00001630 5343                       		subq.w	#1,d3
00001632 6600                       		bne.s	loc_14D0
00001634 4ED3                       		jmp	(a3)
00001636                            ; End of function NemDec2
00001636                            
00001636                            
00001636                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001636                            
00001636                            
00001636                            NemDec3:				; XREF: loc_1502
00001636 7800                       		moveq	#0,d4
00001638 7608                       		moveq	#8,d3
0000163A                            
0000163A                            loc_14D0:				; XREF: NemDec2
0000163A 51C8 FFF0                  		dbf	d0,loc_14C2
0000163E 60B4                       		bra.s	NemDec2
00001640                            ; ===========================================================================
00001640                            
00001640                            loc_14D6:				; XREF: NemDec2
00001640 5D46                       		subq.w	#6,d6
00001642 0C46 0009                  		cmpi.w	#9,d6
00001646 6400                       		bcc.s	loc_14E4
00001648 5046                       		addq.w	#8,d6
0000164A E145                       		asl.w	#8,d5
0000164C 1A18                       		move.b	(a0)+,d5
0000164E                            
0000164E                            loc_14E4:				; XREF: NemDec3
0000164E 5F46                       		subq.w	#7,d6
00001650 3205                       		move.w	d5,d1
00001652 EC69                       		lsr.w	d6,d1
00001654 3001                       		move.w	d1,d0
00001656 0241 000F                  		andi.w	#$F,d1
0000165A 0240 0070                  		andi.w	#$70,d0
0000165E 0C46 0009                  		cmpi.w	#9,d6
00001662 64C6                       		bcc.s	loc_14C0
00001664 5046                       		addq.w	#8,d6
00001666 E145                       		asl.w	#8,d5
00001668 1A18                       		move.b	(a0)+,d5
0000166A 60BE                       		bra.s	loc_14C0
0000166C                            ; End of function NemDec3
0000166C                            
0000166C                            ; ===========================================================================
0000166C                            
0000166C                            loc_1502:				; XREF: NemDec
0000166C 2884                       		move.l	d4,(a4)
0000166E 534D                       		subq.w	#1,a5
00001670 380D                       		move.w	a5,d4
00001672 66C2                       		bne.s	NemDec3
00001674 4E75                       		rts	
00001676                            ; ===========================================================================
00001676 B982                       		eor.l	d4,d2
00001678 2882                       		move.l	d2,(a4)
0000167A 534D                       		subq.w	#1,a5
0000167C 380D                       		move.w	a5,d4
0000167E 66B6                       		bne.s	NemDec3
00001680 4E75                       		rts	
00001682                            ; ===========================================================================
00001682                            
00001682                            loc_1518:				; XREF: NemDec
00001682 28C4                       		move.l	d4,(a4)+
00001684 534D                       		subq.w	#1,a5
00001686 380D                       		move.w	a5,d4
00001688 66AC                       		bne.s	NemDec3
0000168A 4E75                       		rts	
0000168C                            ; ===========================================================================
0000168C B982                       		eor.l	d4,d2
0000168E 28C2                       		move.l	d2,(a4)+
00001690 534D                       		subq.w	#1,a5
00001692 380D                       		move.w	a5,d4
00001694 66A0                       		bne.s	NemDec3
00001696 4E75                       		rts	
00001698                            
00001698                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001698                            
00001698                            
00001698                            NemDec4:				; XREF: NemDec
00001698 1018                       		move.b	(a0)+,d0
0000169A                            
0000169A                            loc_1530:
0000169A 0C00 00FF                  		cmpi.b	#-1,d0
0000169E 6600                       		bne.s	loc_1538
000016A0 4E75                       		rts	
000016A2                            ; ===========================================================================
000016A2                            
000016A2                            loc_1538:				; XREF: NemDec4
000016A2 3E00                       		move.w	d0,d7
000016A4                            
000016A4                            loc_153A:
000016A4 1018                       		move.b	(a0)+,d0
000016A6 0C00 0080                  		cmpi.b	#$80,d0
000016AA 64EE                       		bcc.s	loc_1530
000016AC 1200                       		move.b	d0,d1
000016AE 0247 000F                  		andi.w	#$F,d7
000016B2 0241 0070                  		andi.w	#$70,d1
000016B6 8E41                       		or.w	d1,d7
000016B8 0240 000F                  		andi.w	#$F,d0
000016BC 1200                       		move.b	d0,d1
000016BE E149                       		lsl.w	#8,d1
000016C0 8E41                       		or.w	d1,d7
000016C2 7208                       		moveq	#8,d1
000016C4 9240                       		sub.w	d0,d1
000016C6 6600                       		bne.s	loc_1568
000016C8 1018                       		move.b	(a0)+,d0
000016CA D040                       		add.w	d0,d0
000016CC 3387 0000                  		move.w	d7,(a1,d0.w)
000016D0 60D2                       		bra.s	loc_153A
000016D2                            ; ===========================================================================
000016D2                            
000016D2                            loc_1568:				; XREF: NemDec4
000016D2 1018                       		move.b	(a0)+,d0
000016D4 E368                       		lsl.w	d1,d0
000016D6 D040                       		add.w	d0,d0
000016D8 7A01                       		moveq	#1,d5
000016DA E36D                       		lsl.w	d1,d5
000016DC 5345                       		subq.w	#1,d5
000016DE                            
000016DE                            loc_1574:
000016DE 3387 0000                  		move.w	d7,(a1,d0.w)
000016E2 5440                       		addq.w	#2,d0
000016E4 51CD FFF8                  		dbf	d5,loc_1574
000016E8 60BA                       		bra.s	loc_153A
000016EA                            ; End of function NemDec4
000016EA                            
000016EA                            ; ---------------------------------------------------------------------------
000016EA                            ; Subroutine to	load pattern load cues
000016EA                            ; ---------------------------------------------------------------------------
000016EA                            
000016EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016EA                            
000016EA                            
000016EA                            LoadPLC:
000016EA 48E7 0060                  		movem.l	a1-a2,-(sp)
000016EE 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000016F4 D040                       		add.w	d0,d0
000016F6 3031 0000                  		move.w	(a1,d0.w),d0
000016FA 43F1 0000                  		lea	(a1,d0.w),a1
000016FE 45F8 F680                  		lea	($FFFFF680).w,a2
00001702                            
00001702                            loc_1598:
00001702 4A92                       		tst.l	(a2)
00001704 6700                       		beq.s	loc_15A0
00001706 5C4A                       		addq.w	#6,a2
00001708 60F8                       		bra.s	loc_1598
0000170A                            ; ===========================================================================
0000170A                            
0000170A                            loc_15A0:				; XREF: LoadPLC
0000170A 3019                       		move.w	(a1)+,d0
0000170C 6B00                       		bmi.s	loc_15AC
0000170E                            
0000170E                            loc_15A4:
0000170E 24D9                       		move.l	(a1)+,(a2)+
00001710 34D9                       		move.w	(a1)+,(a2)+
00001712 51C8 FFFA                  		dbf	d0,loc_15A4
00001716                            
00001716                            loc_15AC:
00001716 4CDF 0600                  		movem.l	(sp)+,a1-a2
0000171A 4E75                       		rts	
0000171C                            ; End of function LoadPLC
0000171C                            
0000171C                            
0000171C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000171C                            
0000171C                            
0000171C                            LoadPLC2:
0000171C 48E7 0060                  		movem.l	a1-a2,-(sp)
00001720 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001726 D040                       		add.w	d0,d0
00001728 3031 0000                  		move.w	(a1,d0.w),d0
0000172C 43F1 0000                  		lea	(a1,d0.w),a1
00001730 6100                       		bsr.s	ClearPLC
00001732 45F8 F680                  		lea	($FFFFF680).w,a2
00001736 3019                       		move.w	(a1)+,d0
00001738 6B00                       		bmi.s	loc_15D8
0000173A                            
0000173A                            loc_15D0:
0000173A 24D9                       		move.l	(a1)+,(a2)+
0000173C 34D9                       		move.w	(a1)+,(a2)+
0000173E 51C8 FFFA                  		dbf	d0,loc_15D0
00001742                            
00001742                            loc_15D8:
00001742 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001746 4E75                       		rts	
00001748                            ; End of function LoadPLC2
00001748                            
00001748                            ; ---------------------------------------------------------------------------
00001748                            ; Subroutine to	clear the pattern load cues
00001748                            ; ---------------------------------------------------------------------------
00001748                            
00001748                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001748                            
00001748                            
00001748                            ClearPLC:				; XREF: LoadPLC2
00001748 45F8 F680                  		lea	($FFFFF680).w,a2
0000174C 701F                       		moveq	#$1F,d0
0000174E                            
0000174E                            ClearPLC_Loop:
0000174E 429A                       		clr.l	(a2)+
00001750 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
00001754 4E75                       		rts	
00001756                            ; End of function ClearPLC
00001756                            
00001756                            ; ---------------------------------------------------------------------------
00001756                            ; Subroutine to	use graphics listed in a pattern load cue
00001756                            ; ---------------------------------------------------------------------------
00001756                            
00001756                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001756                            
00001756                            
00001756                            RunPLC_RAM:				; XREF: Pal_FadeTo
00001756 4AB8 F680                  		tst.l	($FFFFF680).w
0000175A 6700                       		beq.s	locret_1640
0000175C 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001760 6600                       		bne.s	locret_1640
00001762 2078 F680                  		movea.l	($FFFFF680).w,a0
00001766 47F9 0000 166C             		lea	(loc_1502).l,a3
0000176C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001770 3418                       		move.w	(a0)+,d2
00001772 6A00                       		bpl.s	loc_160E
00001774 D6FC 000A                  		adda.w	#$A,a3
00001778                            
00001778                            loc_160E:
00001778 0242 7FFF                  		andi.w	#$7FFF,d2
0000177C 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001780 6100 FF16                  		bsr.w	NemDec4
00001784 1A18                       		move.b	(a0)+,d5
00001786 E145                       		asl.w	#8,d5
00001788 1A18                       		move.b	(a0)+,d5
0000178A 7C10                       		moveq	#$10,d6
0000178C 7000                       		moveq	#0,d0
0000178E 21C8 F680                  		move.l	a0,($FFFFF680).w
00001792 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001796 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
0000179A 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
0000179E 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
000017A2 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000017A6 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000017AA                            
000017AA                            locret_1640:
000017AA 4E75                       		rts	
000017AC                            ; End of function RunPLC_RAM
000017AC                            
000017AC                            
000017AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017AC                            
000017AC                            
000017AC                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
000017AC 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000017B0 6700 0000                  		beq.w	locret_16DA
000017B4 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
000017BA 7000                       		moveq	#0,d0
000017BC 3038 F684                  		move.w	($FFFFF684).w,d0
000017C0 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
000017C6 6000                       		bra.s	loc_1676
000017C8                            ; End of function sub_1642
000017C8                            
000017C8                            
000017C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017C8                            
000017C8                            
000017C8                            sub_165E:				; XREF: Demo_Time
000017C8 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000017CC 6700                       		beq.s	locret_16DA
000017CE 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
000017D4 7000                       		moveq	#0,d0
000017D6 3038 F684                  		move.w	($FFFFF684).w,d0
000017DA 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
000017E0                            
000017E0                            loc_1676:				; XREF: sub_1642
000017E0 49F9 00C0 0004             		lea	($C00004).l,a4
000017E6 E588                       		lsl.l	#2,d0
000017E8 E448                       		lsr.w	#2,d0
000017EA 0040 4000                  		ori.w	#$4000,d0
000017EE 4840                       		swap	d0
000017F0 2880                       		move.l	d0,(a4)
000017F2 594C                       		subq.w	#4,a4
000017F4 2078 F680                  		movea.l	($FFFFF680).w,a0
000017F8 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000017FC 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001800 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00001804 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
00001808 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
0000180C 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
00001810 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001814                            
00001814                            loc_16AA:				; XREF: sub_165E
00001814 3A7C 0008                  		movea.w	#8,a5
00001818 6100 FE1C                  		bsr.w	NemDec3
0000181C 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
00001820 6700                       		beq.s	loc_16DC
00001822 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
00001826 66EC                       		bne.s	loc_16AA
00001828 21C8 F680                  		move.l	a0,($FFFFF680).w
0000182C 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001830 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001834 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00001838 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
0000183C 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001840 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001844                            
00001844                            locret_16DA:				; XREF: sub_1642
00001844 4E75                       		rts	
00001846                            ; ===========================================================================
00001846                            
00001846                            loc_16DC:				; XREF: sub_165E
00001846 41F8 F680                  		lea	($FFFFF680).w,a0
0000184A 7015                       		moveq	#$15,d0
0000184C                            
0000184C                            loc_16E2:				; XREF: sub_165E
0000184C 20E8 0006                  		move.l	6(a0),(a0)+
00001850 51C8 FFFA                  		dbf	d0,loc_16E2
00001854 4E75                       		rts	
00001856                            ; End of function sub_165E
00001856                            
00001856                            ; ---------------------------------------------------------------------------
00001856                            ; Subroutine to	execute	the pattern load cue
00001856                            ; ---------------------------------------------------------------------------
00001856                            
00001856                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001856                            
00001856                            
00001856                            RunPLC_ROM:
00001856 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
0000185C D040                       		add.w	d0,d0
0000185E 3031 0000                  		move.w	(a1,d0.w),d0
00001862 43F1 0000                  		lea	(a1,d0.w),a1
00001866 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00001868                            
00001868                            RunPLC_Loop:
00001868 2059                       		movea.l	(a1)+,a0	; get art pointer
0000186A 7000                       		moveq	#0,d0
0000186C 3019                       		move.w	(a1)+,d0	; get VRAM address
0000186E E588                       		lsl.l	#2,d0		; divide address by $20
00001870 E448                       		lsr.w	#2,d0
00001872 0040 4000                  		ori.w	#$4000,d0
00001876 4840                       		swap	d0
00001878 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
0000187E 6100 FD2A                  		bsr.w	NemDec		; decompress
00001882 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
00001886 4E75                       		rts	
00001888                            ; End of function RunPLC_ROM
00001888                            
00001888                            ; ---------------------------------------------------------------------------
00001888                            ; Enigma decompression algorithm
00001888                            ; ---------------------------------------------------------------------------
00001888                            
00001888                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001888                            
00001888                            
00001888                            EniDec:
00001888 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
0000188C 3640                       		movea.w	d0,a3
0000188E 1018                       		move.b	(a0)+,d0
00001890 4880                       		ext.w	d0
00001892 3A40                       		movea.w	d0,a5
00001894 1818                       		move.b	(a0)+,d4
00001896 E70C                       		lsl.b	#3,d4
00001898 3458                       		movea.w	(a0)+,a2
0000189A D4CB                       		adda.w	a3,a2
0000189C 3858                       		movea.w	(a0)+,a4
0000189E D8CB                       		adda.w	a3,a4
000018A0 1A18                       		move.b	(a0)+,d5
000018A2 E145                       		asl.w	#8,d5
000018A4 1A18                       		move.b	(a0)+,d5
000018A6 7C10                       		moveq	#$10,d6
000018A8                            
000018A8                            loc_173E:				; XREF: loc_1768
000018A8 7007                       		moveq	#7,d0
000018AA 3E06                       		move.w	d6,d7
000018AC 9E40                       		sub.w	d0,d7
000018AE 3205                       		move.w	d5,d1
000018B0 EE69                       		lsr.w	d7,d1
000018B2 0241 007F                  		andi.w	#$7F,d1
000018B6 3401                       		move.w	d1,d2
000018B8 0C41 0040                  		cmpi.w	#$40,d1
000018BC 6400                       		bcc.s	loc_1758
000018BE 7006                       		moveq	#6,d0
000018C0 E24A                       		lsr.w	#1,d2
000018C2                            
000018C2                            loc_1758:
000018C2 6100 0000                  		bsr.w	sub_188C
000018C6 0242 000F                  		andi.w	#$F,d2
000018CA E849                       		lsr.w	#4,d1
000018CC D241                       		add.w	d1,d1
000018CE 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
000018D2                            ; End of function EniDec
000018D2                            
000018D2                            ; ===========================================================================
000018D2                            
000018D2                            loc_1768:				; XREF: loc_17B4
000018D2 32CA                       		move.w	a2,(a1)+
000018D4 524A                       		addq.w	#1,a2
000018D6 51CA FFFA                  		dbf	d2,loc_1768
000018DA 60CC                       		bra.s	loc_173E
000018DC                            ; ===========================================================================
000018DC                            
000018DC                            loc_1772:				; XREF: loc_17B4
000018DC 32CC                       		move.w	a4,(a1)+
000018DE 51CA FFFC                  		dbf	d2,loc_1772
000018E2 60C4                       		bra.s	loc_173E
000018E4                            ; ===========================================================================
000018E4                            
000018E4                            loc_177A:				; XREF: loc_17B4
000018E4 6100 0000                  		bsr.w	loc_17DC
000018E8                            
000018E8                            loc_177E:
000018E8 32C1                       		move.w	d1,(a1)+
000018EA 51CA FFFC                  		dbf	d2,loc_177E
000018EE 60B8                       		bra.s	loc_173E
000018F0                            ; ===========================================================================
000018F0                            
000018F0                            loc_1786:				; XREF: loc_17B4
000018F0 6100 0000                  		bsr.w	loc_17DC
000018F4                            
000018F4                            loc_178A:
000018F4 32C1                       		move.w	d1,(a1)+
000018F6 5241                       		addq.w	#1,d1
000018F8 51CA FFFA                  		dbf	d2,loc_178A
000018FC 60AA                       		bra.s	loc_173E
000018FE                            ; ===========================================================================
000018FE                            
000018FE                            loc_1794:				; XREF: loc_17B4
000018FE 6100 0000                  		bsr.w	loc_17DC
00001902                            
00001902                            loc_1798:
00001902 32C1                       		move.w	d1,(a1)+
00001904 5341                       		subq.w	#1,d1
00001906 51CA FFFA                  		dbf	d2,loc_1798
0000190A 609C                       		bra.s	loc_173E
0000190C                            ; ===========================================================================
0000190C                            
0000190C                            loc_17A2:				; XREF: loc_17B4
0000190C 0C42 000F                  		cmpi.w	#$F,d2
00001910 6700                       		beq.s	loc_17C4
00001912                            
00001912                            loc_17A8:
00001912 6100 0000                  		bsr.w	loc_17DC
00001916 32C1                       		move.w	d1,(a1)+
00001918 51CA FFF8                  		dbf	d2,loc_17A8
0000191C 608A                       		bra.s	loc_173E
0000191E                            ; ===========================================================================
0000191E                            
0000191E                            loc_17B4:				; XREF: EniDec
0000191E 60B2                       		bra.s	loc_1768
00001920                            ; ===========================================================================
00001920 60B0                       		bra.s	loc_1768
00001922                            ; ===========================================================================
00001922 60B8                       		bra.s	loc_1772
00001924                            ; ===========================================================================
00001924 60B6                       		bra.s	loc_1772
00001926                            ; ===========================================================================
00001926 60BC                       		bra.s	loc_177A
00001928                            ; ===========================================================================
00001928 60C6                       		bra.s	loc_1786
0000192A                            ; ===========================================================================
0000192A 60D2                       		bra.s	loc_1794
0000192C                            ; ===========================================================================
0000192C 60DE                       		bra.s	loc_17A2
0000192E                            ; ===========================================================================
0000192E                            
0000192E                            loc_17C4:				; XREF: loc_17A2
0000192E 5348                       		subq.w	#1,a0
00001930 0C46 0010                  		cmpi.w	#$10,d6
00001934 6600                       		bne.s	loc_17CE
00001936 5348                       		subq.w	#1,a0
00001938                            
00001938                            loc_17CE:
00001938 3008                       		move.w	a0,d0
0000193A E248                       		lsr.w	#1,d0
0000193C 6400                       		bcc.s	loc_17D6
0000193E 5248                       		addq.w	#1,a0
00001940                            
00001940                            loc_17D6:
00001940 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
00001944 4E75                       		rts	
00001946                            ; ===========================================================================
00001946                            
00001946                            loc_17DC:				; XREF: loc_17A2
00001946 360B                       		move.w	a3,d3
00001948 1204                       		move.b	d4,d1
0000194A D201                       		add.b	d1,d1
0000194C 6400                       		bcc.s	loc_17EE
0000194E 5346                       		subq.w	#1,d6
00001950 0D05                       		btst	d6,d5
00001952 6700                       		beq.s	loc_17EE
00001954 0043 8000                  		ori.w	#-$8000,d3
00001958                            
00001958                            loc_17EE:
00001958 D201                       		add.b	d1,d1
0000195A 6400                       		bcc.s	loc_17FC
0000195C 5346                       		subq.w	#1,d6
0000195E 0D05                       		btst	d6,d5
00001960 6700                       		beq.s	loc_17FC
00001962 0643 4000                  		addi.w	#$4000,d3
00001966                            
00001966                            loc_17FC:
00001966 D201                       		add.b	d1,d1
00001968 6400                       		bcc.s	loc_180A
0000196A 5346                       		subq.w	#1,d6
0000196C 0D05                       		btst	d6,d5
0000196E 6700                       		beq.s	loc_180A
00001970 0643 2000                  		addi.w	#$2000,d3
00001974                            
00001974                            loc_180A:
00001974 D201                       		add.b	d1,d1
00001976 6400                       		bcc.s	loc_1818
00001978 5346                       		subq.w	#1,d6
0000197A 0D05                       		btst	d6,d5
0000197C 6700                       		beq.s	loc_1818
0000197E 0043 1000                  		ori.w	#$1000,d3
00001982                            
00001982                            loc_1818:
00001982 D201                       		add.b	d1,d1
00001984 6400                       		bcc.s	loc_1826
00001986 5346                       		subq.w	#1,d6
00001988 0D05                       		btst	d6,d5
0000198A 6700                       		beq.s	loc_1826
0000198C 0043 0800                  		ori.w	#$800,d3
00001990                            
00001990                            loc_1826:
00001990 3205                       		move.w	d5,d1
00001992 3E06                       		move.w	d6,d7
00001994 9E4D                       		sub.w	a5,d7
00001996 6400                       		bcc.s	loc_1856
00001998 3C07                       		move.w	d7,d6
0000199A 0646 0010                  		addi.w	#$10,d6
0000199E 4447                       		neg.w	d7
000019A0 EF69                       		lsl.w	d7,d1
000019A2 1A10                       		move.b	(a0),d5
000019A4 EF3D                       		rol.b	d7,d5
000019A6 DE47                       		add.w	d7,d7
000019A8 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
000019AC D245                       		add.w	d5,d1
000019AE                            
000019AE                            loc_1844:				; XREF: loc_1868
000019AE 300D                       		move.w	a5,d0
000019B0 D040                       		add.w	d0,d0
000019B2 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
000019B6 D243                       		add.w	d3,d1
000019B8 1A18                       		move.b	(a0)+,d5
000019BA E14D                       		lsl.w	#8,d5
000019BC 1A18                       		move.b	(a0)+,d5
000019BE 4E75                       		rts	
000019C0                            ; ===========================================================================
000019C0                            
000019C0                            loc_1856:				; XREF: loc_1826
000019C0 6700                       		beq.s	loc_1868
000019C2 EE69                       		lsr.w	d7,d1
000019C4 300D                       		move.w	a5,d0
000019C6 D040                       		add.w	d0,d0
000019C8 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
000019CC D243                       		add.w	d3,d1
000019CE 300D                       		move.w	a5,d0
000019D0 6000                       		bra.s	sub_188C
000019D2                            ; ===========================================================================
000019D2                            
000019D2                            loc_1868:				; XREF: loc_1856
000019D2 7C10                       		moveq	#$10,d6
000019D4                            
000019D4                            loc_186A:
000019D4 60D8                       		bra.s	loc_1844
000019D6                            ; ===========================================================================
000019D6 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
000019EC 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
000019F6                            
000019F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000019F6                            
000019F6                            
000019F6                            sub_188C:				; XREF: EniDec
000019F6 9C40                       		sub.w	d0,d6
000019F8 0C46 0009                  		cmpi.w	#9,d6
000019FC 6400                       		bcc.s	locret_189A
000019FE 5046                       		addq.w	#8,d6
00001A00 E145                       		asl.w	#8,d5
00001A02 1A18                       		move.b	(a0)+,d5
00001A04                            
00001A04                            locret_189A:
00001A04 4E75                       		rts	
00001A06                            ; End of function sub_188C
00001A06                            
00001A06                            ; ---------------------------------------------------------------------------
00001A06                            ; Kosinski decompression algorithm
00001A06                            ; ---------------------------------------------------------------------------
00001A06                            
00001A06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A06                            
00001A06                            
00001A06                            KosDec:
00001A06                            
00001A06 =FFFFFFFE                  var_2		= -2
00001A06 =FFFFFFFF                  var_1		= -1
00001A06                            
00001A06 558F                       		subq.l	#2,sp
00001A08 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001A0C 1E98                       		move.b	(a0)+,(sp)
00001A0E 3A17                       		move.w	(sp),d5
00001A10 780F                       		moveq	#$F,d4
00001A12                            
00001A12                            loc_18A8:
00001A12 E24D                       		lsr.w	#1,d5
00001A14 40C6                       		move	sr,d6
00001A16 51CC 0000                  		dbf	d4,loc_18BA
00001A1A 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001A1E 1E98                       		move.b	(a0)+,(sp)
00001A20 3A17                       		move.w	(sp),d5
00001A22 780F                       		moveq	#$F,d4
00001A24                            
00001A24                            loc_18BA:
00001A24 44C6                       		move	d6,ccr
00001A26 6400                       		bcc.s	loc_18C2
00001A28 12D8                       		move.b	(a0)+,(a1)+
00001A2A 60E6                       		bra.s	loc_18A8
00001A2C                            ; ===========================================================================
00001A2C                            
00001A2C                            loc_18C2:				; XREF: KosDec
00001A2C 7600                       		moveq	#0,d3
00001A2E E24D                       		lsr.w	#1,d5
00001A30 40C6                       		move	sr,d6
00001A32 51CC 0000                  		dbf	d4,loc_18D6
00001A36 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001A3A 1E98                       		move.b	(a0)+,(sp)
00001A3C 3A17                       		move.w	(sp),d5
00001A3E 780F                       		moveq	#$F,d4
00001A40                            
00001A40                            loc_18D6:
00001A40 44C6                       		move	d6,ccr
00001A42 6500                       		bcs.s	loc_1906
00001A44 E24D                       		lsr.w	#1,d5
00001A46 51CC 0000                  		dbf	d4,loc_18EA
00001A4A 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001A4E 1E98                       		move.b	(a0)+,(sp)
00001A50 3A17                       		move.w	(sp),d5
00001A52 780F                       		moveq	#$F,d4
00001A54                            
00001A54                            loc_18EA:
00001A54 E353                       		roxl.w	#1,d3
00001A56 E24D                       		lsr.w	#1,d5
00001A58 51CC 0000                  		dbf	d4,loc_18FC
00001A5C 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001A60 1E98                       		move.b	(a0)+,(sp)
00001A62 3A17                       		move.w	(sp),d5
00001A64 780F                       		moveq	#$F,d4
00001A66                            
00001A66                            loc_18FC:
00001A66 E353                       		roxl.w	#1,d3
00001A68 5243                       		addq.w	#1,d3
00001A6A 74FF                       		moveq	#-1,d2
00001A6C 1418                       		move.b	(a0)+,d2
00001A6E 6000                       		bra.s	loc_191C
00001A70                            ; ===========================================================================
00001A70                            
00001A70                            loc_1906:				; XREF: loc_18C2
00001A70 1018                       		move.b	(a0)+,d0
00001A72 1218                       		move.b	(a0)+,d1
00001A74 74FF                       		moveq	#-1,d2
00001A76 1401                       		move.b	d1,d2
00001A78 EB4A                       		lsl.w	#5,d2
00001A7A 1400                       		move.b	d0,d2
00001A7C 0241 0007                  		andi.w	#7,d1
00001A80 6700                       		beq.s	loc_1928
00001A82 1601                       		move.b	d1,d3
00001A84 5243                       		addq.w	#1,d3
00001A86                            
00001A86                            loc_191C:
00001A86 1031 2000                  		move.b	(a1,d2.w),d0
00001A8A 12C0                       		move.b	d0,(a1)+
00001A8C 51CB FFF8                  		dbf	d3,loc_191C
00001A90 6080                       		bra.s	loc_18A8
00001A92                            ; ===========================================================================
00001A92                            
00001A92                            loc_1928:				; XREF: loc_1906
00001A92 1218                       		move.b	(a0)+,d1
00001A94 6700                       		beq.s	loc_1938
00001A96 0C01 0001                  		cmpi.b	#1,d1
00001A9A 6700 FF76                  		beq.w	loc_18A8
00001A9E 1601                       		move.b	d1,d3
00001AA0 60E4                       		bra.s	loc_191C
00001AA2                            ; ===========================================================================
00001AA2                            
00001AA2                            loc_1938:				; XREF: loc_1928
00001AA2 548F                       		addq.l	#2,sp
00001AA4 4E75                       		rts	
00001AA6                            ; End of function KosDec
00001AA6                            
00001AA6                            ; ---------------------------------------------------------------------------
00001AA6                            ; Pallet cycling routine loading subroutine
00001AA6                            ; ---------------------------------------------------------------------------
00001AA6                            
00001AA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AA6                            
00001AA6                            
00001AA6                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001AA6 4EB9 0000 0000                 	jsr    PalCycle_SuperSonic
00001AAC 7400                       		moveq	#0,d2
00001AAE 7000                       		moveq	#0,d0
00001AB0 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001AB4 D040                       		add.w	d0,d0		; multiply by 2
00001AB6 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001ABA 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001ABE                            ; End of function PalCycle_Load
00001ABE                            
00001ABE                            ; ===========================================================================
00001ABE                            ; ---------------------------------------------------------------------------
00001ABE                            ; Pallet cycling routines
00001ABE                            ; ---------------------------------------------------------------------------
00001ABE 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001AC0 0000                       		dc.w PalCycle_LZ-PalCycle
00001AC2 0000                       		dc.w PalCycle_MZ-PalCycle
00001AC4 0000                       		dc.w PalCycle_SLZ-PalCycle
00001AC6 0000                       		dc.w PalCycle_SYZ-PalCycle
00001AC8 0000                       		dc.w PalCycle_SBZ-PalCycle
00001ACA 0000                       		dc.w PalCycle_GHZ-PalCycle
00001ACC                            
00001ACC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ACC                            
00001ACC                            
00001ACC                            PalCycle_Title:				; XREF: TitleScreen
00001ACC 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001AD2 6000                       		bra.s	loc_196A
00001AD4                            ; ===========================================================================
00001AD4                            
00001AD4                            PalCycle_GHZ:				; XREF: PalCycle
00001AD4 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001ADA                            
00001ADA                            loc_196A:				; XREF: PalCycle_Title
00001ADA 5378 F634                  		subq.w	#1,($FFFFF634).w
00001ADE 6A00                       		bpl.s	locret_1990
00001AE0 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001AE6 3038 F632                  		move.w	($FFFFF632).w,d0
00001AEA 5278 F632                  		addq.w	#1,($FFFFF632).w
00001AEE 0240 0003                  		andi.w	#3,d0
00001AF2 E748                       		lsl.w	#3,d0
00001AF4 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001AF8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001AFC 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B00                            
00001B00                            locret_1990:
00001B00 4E75                       		rts	
00001B02                            ; End of function PalCycle_Title
00001B02                            
00001B02                            
00001B02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B02                            
00001B02                            
00001B02                            PalCycle_LZ:				; XREF: PalCycle
00001B02 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B06 6A00                       		bpl.s	loc_19D8
00001B08 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001B0E 3038 F632                  		move.w	($FFFFF632).w,d0
00001B12 5278 F632                  		addq.w	#1,($FFFFF632).w
00001B16 0240 0003                  		andi.w	#3,d0
00001B1A E748                       		lsl.w	#3,d0
00001B1C 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001B22 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001B28 6600                       		bne.s	loc_19C0
00001B2A 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001B30                            
00001B30                            loc_19C0:
00001B30 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001B34 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B38 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B3C 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001B40 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B44 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B48                            
00001B48                            loc_19D8:
00001B48 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001B4C 0240 0007                  		andi.w	#7,d0
00001B50 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001B54 6700                       		beq.s	locret_1A3A
00001B56 7201                       		moveq	#1,d1
00001B58 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001B5C 6700                       		beq.s	loc_19F0
00001B5E 4441                       		neg.w	d1
00001B60                            
00001B60                            loc_19F0:
00001B60 3038 F650                  		move.w	($FFFFF650).w,d0
00001B64 0240 0003                  		andi.w	#3,d0
00001B68 D041                       		add.w	d1,d0
00001B6A 0C40 0003                  		cmpi.w	#3,d0
00001B6E 6500                       		bcs.s	loc_1A0A
00001B70 3200                       		move.w	d0,d1
00001B72 7000                       		moveq	#0,d0
00001B74 4A41                       		tst.w	d1
00001B76 6A00                       		bpl.s	loc_1A0A
00001B78 7002                       		moveq	#2,d0
00001B7A                            
00001B7A                            loc_1A0A:
00001B7A 31C0 F650                  		move.w	d0,($FFFFF650).w
00001B7E D040                       		add.w	d0,d0
00001B80 3200                       		move.w	d0,d1
00001B82 D040                       		add.w	d0,d0
00001B84 D041                       		add.w	d1,d0
00001B86 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001B8C 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001B90 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B94 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001B98 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001B9E 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001BA2 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BA6 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001BAA                            
00001BAA                            locret_1A3A:
00001BAA 4E75                       		rts	
00001BAC                            ; End of function PalCycle_LZ
00001BAC                            
00001BAC                            ; ===========================================================================
00001BAC 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001BB4                            ; ===========================================================================
00001BB4                            
00001BB4                            PalCycle_MZ:				; XREF: PalCycle
00001BB4 4E75                       		rts	
00001BB6                            
00001BB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BB6                            
00001BB6                            
00001BB6                            PalCycle_SLZ:				; XREF: PalCycle
00001BB6 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BBA 6A00                       		bpl.s	locret_1A80
00001BBC 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001BC2 3038 F632                  		move.w	($FFFFF632).w,d0
00001BC6 5240                       		addq.w	#1,d0
00001BC8 0C40 0006                  		cmpi.w	#6,d0
00001BCC 6500                       		bcs.s	loc_1A60
00001BCE 7000                       		moveq	#0,d0
00001BD0                            
00001BD0                            loc_1A60:
00001BD0 31C0 F632                  		move.w	d0,($FFFFF632).w
00001BD4 3200                       		move.w	d0,d1
00001BD6 D241                       		add.w	d1,d1
00001BD8 D041                       		add.w	d1,d0
00001BDA D040                       		add.w	d0,d0
00001BDC 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001BE2 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BE6 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001BEA 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001BF0                            
00001BF0                            locret_1A80:
00001BF0 4E75                       		rts	
00001BF2                            ; End of function PalCycle_SLZ
00001BF2                            
00001BF2                            
00001BF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BF2                            
00001BF2                            
00001BF2                            PalCycle_SYZ:				; XREF: PalCycle
00001BF2 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BF6 6A00                       		bpl.s	locret_1AC6
00001BF8 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001BFE 3038 F632                  		move.w	($FFFFF632).w,d0
00001C02 5278 F632                  		addq.w	#1,($FFFFF632).w
00001C06 0240 0003                  		andi.w	#3,d0
00001C0A E548                       		lsl.w	#2,d0
00001C0C 3200                       		move.w	d0,d1
00001C0E D040                       		add.w	d0,d0
00001C10 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001C16 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001C1A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C1E 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C22 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001C28 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C2C 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001C30 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001C36                            
00001C36                            locret_1AC6:
00001C36 4E75                       		rts	
00001C38                            ; End of function PalCycle_SYZ
00001C38                            
00001C38                            
00001C38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C38                            
00001C38                            
00001C38                            PalCycle_SBZ:				; XREF: PalCycle
00001C38 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001C3E 4A38 FE11                  		tst.b	($FFFFFE11).w
00001C42 6700                       		beq.s	loc_1ADA
00001C44 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001C4A                            
00001C4A                            loc_1ADA:
00001C4A 43F8 F650                  		lea	($FFFFF650).w,a1
00001C4E 321A                       		move.w	(a2)+,d1
00001C50                            
00001C50                            loc_1AE0:
00001C50 5311                       		subq.b	#1,(a1)
00001C52 6B00                       		bmi.s	loc_1AEA
00001C54 5489                       		addq.l	#2,a1
00001C56 5C8A                       		addq.l	#6,a2
00001C58 6000                       		bra.s	loc_1B06
00001C5A                            ; ===========================================================================
00001C5A                            
00001C5A                            loc_1AEA:				; XREF: PalCycle_SBZ
00001C5A 12DA                       		move.b	(a2)+,(a1)+
00001C5C 1011                       		move.b	(a1),d0
00001C5E 5200                       		addq.b	#1,d0
00001C60 B01A                       		cmp.b	(a2)+,d0
00001C62 6500                       		bcs.s	loc_1AF6
00001C64 7000                       		moveq	#0,d0
00001C66                            
00001C66                            loc_1AF6:
00001C66 12C0                       		move.b	d0,(a1)+
00001C68 0240 000F                  		andi.w	#$F,d0
00001C6C D040                       		add.w	d0,d0
00001C6E 305A                       		movea.w	(a2)+,a0
00001C70 365A                       		movea.w	(a2)+,a3
00001C72 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001C76                            
00001C76                            loc_1B06:				; XREF: PalCycle_SBZ
00001C76 51C9 FFD8                  		dbf	d1,loc_1AE0
00001C7A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C7E 6A00                       		bpl.s	locret_1B64
00001C80 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001C86 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001C8C 4A38 FE11                  		tst.b	($FFFFFE11).w
00001C90 6700                       		beq.s	loc_1B2E
00001C92 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001C98 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001C9E                            
00001C9E                            loc_1B2E:
00001C9E 72FF                       		moveq	#-1,d1
00001CA0 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001CA4 6700                       		beq.s	loc_1B38
00001CA6 4441                       		neg.w	d1
00001CA8                            
00001CA8                            loc_1B38:
00001CA8 3038 F632                  		move.w	($FFFFF632).w,d0
00001CAC 0240 0003                  		andi.w	#3,d0
00001CB0 D041                       		add.w	d1,d0
00001CB2 0C40 0003                  		cmpi.w	#3,d0
00001CB6 6500                       		bcs.s	loc_1B52
00001CB8 3200                       		move.w	d0,d1
00001CBA 7000                       		moveq	#0,d0
00001CBC 4A41                       		tst.w	d1
00001CBE 6A00                       		bpl.s	loc_1B52
00001CC0 7002                       		moveq	#2,d0
00001CC2                            
00001CC2                            loc_1B52:
00001CC2 31C0 F632                  		move.w	d0,($FFFFF632).w
00001CC6 D040                       		add.w	d0,d0
00001CC8 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001CCC 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001CD0 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001CD4                            
00001CD4                            locret_1B64:
00001CD4 4E75                       		rts	
00001CD6                            ; End of function PalCycle_SBZ
00001CD6                            
00001CD6 =FFFFFFC4                  Palette_frame equ   $FFFFFFC4   ; < free RAM word (make sure its even or youll get errors!!!!)
00001CD6 =FFFFF65F                  Super_Sonic_palette equ $FFFFF65F    ; < free RAM byte
00001CD6 =FFFFF65C                  Palette_timer equ $FFFFF65C  ; < free RAM byte
00001CD6                            
00001CD6                            PalCycle_SuperSonic:
00001CD6 1038 F65F                          move.b    ($FFFFF65F).w,d0
00001CDA 6700                               beq.s    return_2186
00001CDC 6B00 0000                          bmi.w    loc_21E6
00001CE0 5300                               subq.b    #1,d0
00001CE2 6600                               bne.s    loc_2188
00001CE4 5338 F65E                          subq.b    #1,($FFFFF65E).w
00001CE8 6A00                               bpl.s    return_2186
00001CEA 11FC 0003 F65E                     move.b    #3,($FFFFF65E).w
00001CF0 41F9 0000 0000                     lea    (Pal_2246).l,a0
00001CF6 3038 F65C                          move.w    ($FFFFF65C).w,d0
00001CFA 5C78 F65C                          addq.w    #6,($FFFFF65C).w ; was 8
00001CFE 0C78 0030 F65C                     cmpi.w    #$30,($FFFFF65C).w
00001D04 6500                               bcs.s    PalCycleSS_1
00001D06 11FC 00FF F65F                     move.b    #-1,($FFFFF65F).w
00001D0C 11FC 0000 F7F2                     move.b    #0,($FFFFF7C8+$2A).w
00001D12                            
00001D12                            PalCycleSS_1:
00001D12 43F8 FB04                          lea    ($FFFFFB04).w,a1 ; 04
00001D16 22F0 0000                          move.l    (a0,d0.w),(a1)+ ; there was +
00001D1A 22B0 0004                          move.l    4(a0,d0.w),(a1)
00001D1E                            
00001D1E                            return_2186:
00001D1E 4E75                               rts
00001D20                            ; ===========================================================================
00001D20                            
00001D20                            loc_2188:
00001D20 5338 F65E                          subq.b    #1,($FFFFF65E).w
00001D24 6AF8                               bpl.s    return_2186
00001D26 11FC 0003 F65E                     move.b    #3,($FFFFF65E).w
00001D2C 41F9 0000 0000                     lea    (Pal_2246).l,a0
00001D32 3038 F65C                          move.w    ($FFFFF65C).w,d0
00001D36 5D78 F65C                          subq.w    #$6,($FFFFF65C).w ; it was 8
00001D3A 6400                               bcc.s     loc_21B0
00001D3C 11FC 0000 F65C                     move.b    #0,($FFFFF65C).w
00001D42 11FC 0000 F65F                     move.b    #0,($FFFFF65F).w
00001D48 4278 FB02                          clr.w 	  ($FFFFFB02).w
00001D4C 4278 FB04                          clr.w 	  ($FFFFFB04).w
00001D50 4E75                               rts
00001D52                            
00001D52                            loc_21B0:
00001D52 43F8 FB04                          lea    ($FFFFFB04).w,a1
00001D56 22F0 0000                          move.l    (a0,d0.w),(a1)+ ; there was +
00001D5A 22B0 0004                          move.l    4(a0,d0.w),(a1)
00001D5E 0C38 0001 FE10                     cmpi.b    #$1,($FFFFFE10).w
00001D64 6700                               beq.s    PalCycleSS_2
00001D66 4E75                               rts
00001D68                            ; ===========================================================================
00001D68                            
00001D68                            PalCycleSS_2:
00001D68 43F8 F084                          lea    ($FFFFF084).w,a1
00001D6C 22F0 0000                          move.l    (a0,d0.w),(a1)+
00001D70 22B0 0004                          move.l    4(a0,d0.w),(a1)
00001D74 4E75                               rts
00001D76                            ; ===========================================================================
00001D76                            
00001D76                            loc_21E6:
00001D76 5338 F65E                          subq.b    #1,($FFFFF65E).w
00001D7A 6AA2                               bpl.s    return_2186
00001D7C 11FC 0007 F65E                     move.b    #7,($FFFFF65E).w
00001D82 41F9 0000 0000                     lea    (Pal_2246).l,a0
00001D88 3038 F65C                          move.w    ($FFFFF65C).w,d0
00001D8C 5078 F65C                          addq.w    #8,($FFFFF65C).w ; it was 8
00001D90 0C78 0078 F65C                     cmpi.w    #$78,($FFFFF65C).w
00001D96 6500                               bcs.s    PalCycleSS_3
00001D98 31FC 0030 F65C                     move.w    #$30,($FFFFF65C).w
00001D9E                            
00001D9E                            PalCycleSS_3:
00001D9E 43F8 FB04                          lea    ($FFFFFB04).w,a1
00001DA2 22F0 0000                          move.l    (a0,d0.w),(a1)+ ; there was +
00001DA6 22B0 0004                          move.l    4(a0,d0.w),(a1)
00001DAA                            ;		cmpi.b  #$02,($FFFFFFBB).w ; is it Shadow?
00001DAA                            ;		beq.s   PalCycle_SSEnd ; if not, branch
00001DAA                            ;        lea    ($FFFFFB02).w,a1 ; it was 04
00001DAA                            ;        move.w    (a0,d0.w),(a1) ; there was +
00001DAA                            ;        move.w    4(a0,d0.w),(a1)
00001DAA 0C38 0001 FE10                     cmpi.b    #$1,($FFFFFE10).w
00001DB0 6700                               beq.s    PalCycleSS_4
00001DB2 4E75                               rts
00001DB4                            ; ===========================================================================
00001DB4                            PalCycleSS_4:
00001DB4 43F8 F084                          lea    ($FFFFF084).w,a1
00001DB8 22F0 0000                          move.l    (a0,d0.w),(a1)+
00001DBC 22B0 0004                          move.l    4(a0,d0.w),(a1)
00001DC0 4E75                               rts
00001DC2                            
00001DC2                            PalCycle_SSEnd:
00001DC2 4E75                       		rts
00001DC4                            ; End of function PalCycle_SuperSonic
00001DC4                            
00001DC4                            ; ===========================================================================
00001DC4                            ;----------------------------------------------------------------------------
00001DC4                            ;Palette for transformation to Super Sonic
00001DC4                            ;----------------------------------------------------------------------------
00001DC4                            Pal_2246:
00001DC4                            	incbin  "pallet/SuperSonic.bin"
00001E44                                even
00001E44                            ;----------------------------------------------------------------------------
00001E44                            ;Palette for transformation to Super Sonic while underwater in CPZ
00001E44                            ;----------------------------------------------------------------------------
00001E44                            ; Pal_22C6:
00001E44                            CyclingPal_CPZUWTransformation:
00001E44                            	incbin  "pallet/CPZWater SS transformation.bin"
00001E64                                even
00001E64                            ;----------------------------------------------------------------------------
00001E64                            ;Palette for transformation to Super Sonic while underwater in ARZ
00001E64                            ;----------------------------------------------------------------------------
00001E64                            ; Pal_2346:
00001E64                            CyclingPal_ARZUWTransformation:
00001E64                                incbin  "pallet/ARZWater SS transformation.bin"
00001E84                                even
00001E84                            
00001E84                            ; ===========================================================================
00001E84                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001EA4                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001EC4                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001EE4                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001EF6                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001F08                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001F70                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001F94                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001FB4                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001FC4                            
00001FC4                            Pal_SBZCycList:
00001FC4                            	include "_inc\SBZ pallet script 1.asm"
00001FC4                            ; ---------------------------------------------------------------------------
00001FC4                            ; Scrap Brain Zone 1 pallet cycling script
00001FC4                            ; ---------------------------------------------------------------------------
00001FC4 0008                       	dc.w 8			; number of entries - 1
00001FC6 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001FC8 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001FCA FB50                       	dc.w $FB50		; RAM address
00001FCC 0D08                       	dc.b $D, 8
00001FCE 0000                       	dc.w Pal_SBZCyc2
00001FD0 FB52                       	dc.w $FB52
00001FD2 0E08                       	dc.b $E, 8
00001FD4 0000                       	dc.w Pal_SBZCyc3
00001FD6 FB6E                       	dc.w $FB6E
00001FD8 0B08                       	dc.b $B, 8
00001FDA 0000                       	dc.w Pal_SBZCyc5
00001FDC FB70                       	dc.w $FB70
00001FDE 0708                       	dc.b 7,	8
00001FE0 0000                       	dc.w Pal_SBZCyc6
00001FE2 FB72                       	dc.w $FB72
00001FE4 1C10                       	dc.b $1C, $10
00001FE6 0000                       	dc.w Pal_SBZCyc7
00001FE8 FB7E                       	dc.w $FB7E
00001FEA 0303                       	dc.b 3,	3
00001FEC 0000                       	dc.w Pal_SBZCyc8
00001FEE FB78                       	dc.w $FB78
00001FF0 0303                       	dc.b 3,	3
00001FF2 0000                       	dc.w Pal_SBZCyc8+2
00001FF4 FB7A                       	dc.w $FB7A
00001FF6 0303                       	dc.b 3,	3
00001FF8 0000                       	dc.w Pal_SBZCyc8+4
00001FFA FB7C                       	dc.w $FB7C
00001FFC                            	even
00001FFC                            	even
00001FFC                            
00001FFC                            Pal_SBZCycList2:
00001FFC                            	include "_inc\SBZ pallet script 2.asm"
00001FFC                            ; ---------------------------------------------------------------------------
00001FFC                            ; Scrap Brain Zone 2 pallet cycling script
00001FFC                            ; ---------------------------------------------------------------------------
00001FFC 0006                       	dc.w 6
00001FFE 0708                       	dc.b 7,	8
00002000 0000                       	dc.w Pal_SBZCyc1
00002002 FB50                       	dc.w $FB50
00002004 0D08                       	dc.b $D, 8
00002006 0000                       	dc.w Pal_SBZCyc2
00002008 FB52                       	dc.w $FB52
0000200A 0908                       	dc.b 9,	8
0000200C 0000                       	dc.w Pal_SBZCyc9
0000200E FB70                       	dc.w $FB70
00002010 0708                       	dc.b 7,	8
00002012 0000                       	dc.w Pal_SBZCyc6
00002014 FB72                       	dc.w $FB72
00002016 0303                       	dc.b 3,	3
00002018 0000                       	dc.w Pal_SBZCyc8
0000201A FB78                       	dc.w $FB78
0000201C 0303                       	dc.b 3,	3
0000201E 0000                       	dc.w Pal_SBZCyc8+2
00002020 FB7A                       	dc.w $FB7A
00002022 0303                       	dc.b 3,	3
00002024 0000                       	dc.w Pal_SBZCyc8+4
00002026 FB7C                       	dc.w $FB7C
00002028                            	even
00002028                            	even
00002028                            
00002028                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00002038                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00002048                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00002058                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00002064                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00002074                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00002084                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
000020A4                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
000020AE                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
000020BE                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
000020CA                            ; ---------------------------------------------------------------------------
000020CA                            ; Subroutine to	fade out and fade in
000020CA                            ; ---------------------------------------------------------------------------
000020CA                            
000020CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020CA                            
000020CA                            
000020CA                            Pal_FadeTo:
000020CA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020D0                            
000020D0                            Pal_FadeTo2:
000020D0 7000                       		moveq	#0,d0
000020D2 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020D6 1038 F626                  		move.b	($FFFFF626).w,d0
000020DA D0C0                       		adda.w	d0,a0
000020DC 7200                       		moveq	#0,d1
000020DE 1038 F627                  		move.b	($FFFFF627).w,d0
000020E2                            
000020E2                            Pal_ToBlack:
000020E2 30C1                       		move.w	d1,(a0)+
000020E4 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
000020E8 780E                       		moveq	#$0E,d4					; MJ: prepare maximum colour check
000020EA 7C00                       		moveq	#$00,d6					; MJ: clear d6
000020EC                            
000020EC                            loc_1DCE:
000020EC 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000020F2 6100 0000                  		bsr.w	DelayProgram
000020F6 0846 0000                  		bchg	#$00,d6					; MJ: change delay counter
000020FA 67F0                       		beq	loc_1DCE				; MJ: if null, delay a frame
000020FC 6100                       		bsr.s	Pal_FadeIn
000020FE 6100 F656                  		bsr.w	RunPLC_RAM
00002102 5504                       		subq.b	#$02,d4					; MJ: decrease colour check
00002104 66E6                       		bne	loc_1DCE				; MJ: if it has not reached null, branch
00002106 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w			; MJ: wait for V-blank again (so colours transfer)
0000210C 6000 0000                  		bra	DelayProgram				; MJ: ''
00002110                            
00002110                            ; End of function Pal_FadeTo
00002110                            
00002110                            ; ---------------------------------------------------------------------------
00002110                            ; Pallet fade-in subroutine
00002110                            ; ---------------------------------------------------------------------------
00002110                            
00002110                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002110                            
00002110                            
00002110                            Pal_FadeIn:				; XREF: Pal_FadeTo
00002110 7000                       		moveq	#0,d0
00002112 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002116 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000211A 1038 F626                  		move.b	($FFFFF626).w,d0
0000211E D0C0                       		adda.w	d0,a0
00002120 D2C0                       		adda.w	d0,a1
00002122 1038 F627                  		move.b	($FFFFF627).w,d0
00002126                            
00002126                            loc_1DFA:
00002126 6100                       		bsr.s	Pal_AddColor
00002128 51C8 FFFC                  		dbf	d0,loc_1DFA
0000212C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002132 6600                       		bne.s	locret_1E24
00002134 7000                       		moveq	#0,d0
00002136 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000213A 43F8 FA00                  		lea	($FFFFFA00).w,a1
0000213E 1038 F626                  		move.b	($FFFFF626).w,d0
00002142 D0C0                       		adda.w	d0,a0
00002144 D2C0                       		adda.w	d0,a1
00002146 1038 F627                  		move.b	($FFFFF627).w,d0
0000214A                            
0000214A                            loc_1E1E:
0000214A 6100                       		bsr.s	Pal_AddColor
0000214C 51C8 FFFC                  		dbf	d0,loc_1E1E
00002150                            
00002150                            locret_1E24:
00002150 4E75                       		rts	
00002152                            ; End of function Pal_FadeIn
00002152                            
00002152                            
00002152                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002152                            
00002152                            
00002152                            Pal_AddColor:				; XREF: Pal_FadeIn
00002152 1A11                       		move.b	(a1),d5					; MJ: load blue
00002154 3219                       		move.w	(a1)+,d1				; MJ: load green and red
00002156 1401                       		move.b	d1,d2					; MJ: load red
00002158 E809                       		lsr.b	#$04,d1					; MJ: get only green
0000215A 0202 000E                  		andi.b	#$0E,d2					; MJ: get only red
0000215E 3610                       		move.w	(a0),d3					; MJ: load current colour in buffer
00002160 B805                       		cmp.b	d5,d4					; MJ: is it time for blue to fade?
00002162 6200 0000                  		bhi	FCI_NoBlue				; MJ: if not, branch
00002166 0643 0200                  		addi.w	#$0200,d3				; MJ: increase blue
0000216A                            
0000216A                            FCI_NoBlue:
0000216A B801                       		cmp.b	d1,d4					; MJ: is it time for green to fade?
0000216C 6200 0000                  		bhi	FCI_NoGreen				; MJ: if not, branch
00002170 0603 0020                  		addi.b	#$20,d3					; MJ: increase green
00002174                            
00002174                            FCI_NoGreen:
00002174 B802                       		cmp.b	d2,d4					; MJ: is it time for red to fade?
00002176 6200 0000                  		bhi	FCI_NoRed				; MJ: if not, branch
0000217A 5403                       		addq.b	#$02,d3					; MJ: increase red
0000217C                            
0000217C                            FCI_NoRed:
0000217C 30C3                       		move.w	d3,(a0)+				; MJ: save colour
0000217E 4E75                       		rts						; MJ: return
00002180                            
00002180                            ; End of function Pal_AddColor
00002180                            
00002180                            
00002180                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002180                            
00002180                            
00002180                            Pal_FadeFrom:
00002180 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002186 7807                       		moveq	#$07,d4					; MJ: set repeat times
00002188 7C00                       		moveq	#$00,d6					; MJ: clear d6
0000218A                            
0000218A                            loc_1E5C:
0000218A 6100 F5CA                  		bsr.w	RunPLC_RAM
0000218E 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002194 6100 0000                  		bsr.w	DelayProgram
00002198 0846 0000                  		bchg	#$00,d6					; MJ: change delay counter
0000219C 67EC                       		beq	loc_1E5C				; MJ: if null, delay a frame
0000219E 6100                       		bsr.s	Pal_FadeOut
000021A0 51CC FFE8                  		dbf	d4,loc_1E5C
000021A4 4E75                       		rts	
000021A6                            ; End of function Pal_FadeFrom
000021A6                            
000021A6                            ; ---------------------------------------------------------------------------
000021A6                            ; Pallet fade-out subroutine
000021A6                            ; ---------------------------------------------------------------------------
000021A6                            
000021A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021A6                            
000021A6                            
000021A6                            Pal_FadeOut:				; XREF: Pal_FadeFrom
000021A6 7000                       		moveq	#0,d0
000021A8 41F8 FB00                  		lea	($FFFFFB00).w,a0
000021AC 1038 F626                  		move.b	($FFFFF626).w,d0
000021B0 D0C0                       		adda.w	d0,a0
000021B2 1038 F627                  		move.b	($FFFFF627).w,d0
000021B6                            
000021B6                            loc_1E82:
000021B6 6100                       		bsr.s	Pal_DecColor
000021B8 51C8 FFFC                  		dbf	d0,loc_1E82
000021BC                            
000021BC 7000                       		moveq	#0,d0
000021BE 41F8 FA80                  		lea	($FFFFFA80).w,a0
000021C2 1038 F626                  		move.b	($FFFFF626).w,d0
000021C6 D0C0                       		adda.w	d0,a0
000021C8 1038 F627                  		move.b	($FFFFF627).w,d0
000021CC                            
000021CC                            loc_1E98:
000021CC 6100                       		bsr.s	Pal_DecColor
000021CE 51C8 FFFC                  		dbf	d0,loc_1E98
000021D2 4E75                       		rts	
000021D4                            ; End of function Pal_FadeOut
000021D4                            
000021D4                            
000021D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021D4                            
000021D4                            
000021D4                            Pal_DecColor:				; XREF: Pal_FadeOut
000021D4 3A10                       		move.w	(a0),d5					; MJ: load colour
000021D6 3205                       		move.w	d5,d1					; MJ: copy to d1
000021D8 1401                       		move.b	d1,d2					; MJ: load green and red
000021DA 1601                       		move.b	d1,d3					; MJ: load red
000021DC 0241 0E00                  		andi.w	#$0E00,d1				; MJ: get only blue
000021E0 6700 0000                  		beq	FCO_NoBlue				; MJ: if blue is finished, branch
000021E4 0445 0200                  		subi.w	#$0200,d5				; MJ: decrease blue
000021E8                            
000021E8                            FCO_NoBlue:
000021E8 0242 00E0                  		andi.w	#$00E0,d2				; MJ: get only green (needs to be word)
000021EC 6700 0000                  		beq	FCO_NoGreen				; MJ: if green is finished, branch
000021F0 0405 0020                  		subi.b	#$20,d5					; MJ: decrease green
000021F4                            
000021F4                            FCO_NoGreen:
000021F4 0203 000E                  		andi.b	#$0E,d3					; MJ: get only red
000021F8 6700 0000                  		beq	FCO_NoRed				; MJ: if red is finished, branch
000021FC 5505                       		subq.b	#$02,d5					; MJ: decrease red
000021FE                            
000021FE                            FCO_NoRed:
000021FE 30C5                       		move.w	d5,(a0)+				; MJ: save new colour
00002200 4E75                       		rts						; MJ: return
00002202                            
00002202                            ; End of function Pal_DecColor
00002202                            
00002202                            ; ---------------------------------------------------------------------------
00002202                            ; Subroutine to	fill the pallet	with white (special stage)
00002202                            ; ---------------------------------------------------------------------------
00002202                            
00002202                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002202                            
00002202                            
00002202                            Pal_MakeWhite:				; XREF: SpecialStage
00002202 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002208 7000                       		moveq	#0,d0
0000220A 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000220E 1038 F626                  		move.b	($FFFFF626).w,d0
00002212 D0C0                       		adda.w	d0,a0
00002214 323C 0EEE                  		move.w	#$EEE,d1
00002218 1038 F627                  		move.b	($FFFFF627).w,d0
0000221C                            
0000221C                            PalWhite_Loop:
0000221C 30C1                       		move.w	d1,(a0)+
0000221E 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00002222 383C 0015                  		move.w	#$15,d4
00002226                            
00002226                            loc_1EF4:
00002226 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000222C 6100 0000                  		bsr.w	DelayProgram
00002230 6100                       		bsr.s	Pal_WhiteToBlack
00002232 6100 F522                  		bsr.w	RunPLC_RAM
00002236 51CC FFEE                  		dbf	d4,loc_1EF4
0000223A 4E75                       		rts	
0000223C                            ; End of function Pal_MakeWhite
0000223C                            
0000223C                            
0000223C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000223C                            
0000223C                            
0000223C                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
0000223C 7000                       		moveq	#0,d0
0000223E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002242 43F8 FB80                  		lea	($FFFFFB80).w,a1
00002246 1038 F626                  		move.b	($FFFFF626).w,d0
0000224A D0C0                       		adda.w	d0,a0
0000224C D2C0                       		adda.w	d0,a1
0000224E 1038 F627                  		move.b	($FFFFF627).w,d0
00002252                            
00002252                            loc_1F20:
00002252 6100                       		bsr.s	Pal_DecColor2
00002254 51C8 FFFC                  		dbf	d0,loc_1F20
00002258                            
00002258 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000225E 6600                       		bne.s	locret_1F4A
00002260 7000                       		moveq	#0,d0
00002262 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002266 43F8 FA00                  		lea	($FFFFFA00).w,a1
0000226A 1038 F626                  		move.b	($FFFFF626).w,d0
0000226E D0C0                       		adda.w	d0,a0
00002270 D2C0                       		adda.w	d0,a1
00002272 1038 F627                  		move.b	($FFFFF627).w,d0
00002276                            
00002276                            loc_1F44:
00002276 6100                       		bsr.s	Pal_DecColor2
00002278 51C8 FFFC                  		dbf	d0,loc_1F44
0000227C                            
0000227C                            locret_1F4A:
0000227C 4E75                       		rts	
0000227E                            ; End of function Pal_WhiteToBlack
0000227E                            
0000227E                            
0000227E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000227E                            
0000227E                            
0000227E                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
0000227E 3419                       		move.w	(a1)+,d2
00002280 3610                       		move.w	(a0),d3
00002282 B642                       		cmp.w	d2,d3
00002284 6700                       		beq.s	loc_1F78
00002286 3203                       		move.w	d3,d1
00002288 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
0000228C 6500                       		bcs.s	loc_1F64
0000228E B242                       		cmp.w	d2,d1
00002290 6500                       		bcs.s	loc_1F64
00002292 30C1                       		move.w	d1,(a0)+
00002294 4E75                       		rts	
00002296                            ; ===========================================================================
00002296                            
00002296                            loc_1F64:				; XREF: Pal_DecColor2
00002296 3203                       		move.w	d3,d1
00002298 0441 0020                  		subi.w	#$20,d1		; decrease green value
0000229C 6500                       		bcs.s	loc_1F74
0000229E B242                       		cmp.w	d2,d1
000022A0 6500                       		bcs.s	loc_1F74
000022A2 30C1                       		move.w	d1,(a0)+
000022A4 4E75                       		rts	
000022A6                            ; ===========================================================================
000022A6                            
000022A6                            loc_1F74:				; XREF: loc_1F64
000022A6 5558                       		subq.w	#2,(a0)+	; decrease red value
000022A8 4E75                       		rts	
000022AA                            ; ===========================================================================
000022AA                            
000022AA                            loc_1F78:				; XREF: Pal_DecColor2
000022AA 5448                       		addq.w	#2,a0
000022AC 4E75                       		rts	
000022AE                            ; End of function Pal_DecColor2
000022AE                            
000022AE                            ; ---------------------------------------------------------------------------
000022AE                            ; Subroutine to	make a white flash when	you enter a special stage
000022AE                            ; ---------------------------------------------------------------------------
000022AE                            
000022AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022AE                            
000022AE                            
000022AE                            Pal_MakeFlash:				; XREF: SpecialStage
000022AE 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000022B4 383C 0015                  		move.w	#$15,d4
000022B8                            
000022B8                            loc_1F86:
000022B8 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000022BE 6100 0000                  		bsr.w	DelayProgram
000022C2 6100                       		bsr.s	Pal_ToWhite
000022C4 6100 F490                  		bsr.w	RunPLC_RAM
000022C8 51CC FFEE                  		dbf	d4,loc_1F86
000022CC 4E75                       		rts	
000022CE                            ; End of function Pal_MakeFlash
000022CE                            
000022CE                            
000022CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022CE                            
000022CE                            
000022CE                            Pal_ToWhite:				; XREF: Pal_MakeFlash
000022CE 7000                       		moveq	#0,d0
000022D0 41F8 FB00                  		lea	($FFFFFB00).w,a0
000022D4 1038 F626                  		move.b	($FFFFF626).w,d0
000022D8 D0C0                       		adda.w	d0,a0
000022DA 1038 F627                  		move.b	($FFFFF627).w,d0
000022DE                            
000022DE                            loc_1FAC:
000022DE 6100                       		bsr.s	Pal_AddColor2
000022E0 51C8 FFFC                  		dbf	d0,loc_1FAC
000022E4 7000                       		moveq	#0,d0
000022E6 41F8 FA80                  		lea	($FFFFFA80).w,a0
000022EA 1038 F626                  		move.b	($FFFFF626).w,d0
000022EE D0C0                       		adda.w	d0,a0
000022F0 1038 F627                  		move.b	($FFFFF627).w,d0
000022F4                            
000022F4                            loc_1FC2:
000022F4 6100                       		bsr.s	Pal_AddColor2
000022F6 51C8 FFFC                  		dbf	d0,loc_1FC2
000022FA 4E75                       		rts	
000022FC                            ; End of function Pal_ToWhite
000022FC                            
000022FC                            
000022FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022FC                            
000022FC                            
000022FC                            Pal_AddColor2:				; XREF: Pal_ToWhite
000022FC 3410                       		move.w	(a0),d2
000022FE 0C42 0EEE                  		cmpi.w	#$EEE,d2
00002302 6700                       		beq.s	loc_2006
00002304 3202                       		move.w	d2,d1
00002306 0241 000E                  		andi.w	#$E,d1
0000230A 0C41 000E                  		cmpi.w	#$E,d1
0000230E 6700                       		beq.s	loc_1FE2
00002310 5458                       		addq.w	#2,(a0)+	; increase red value
00002312 4E75                       		rts	
00002314                            ; ===========================================================================
00002314                            
00002314                            loc_1FE2:				; XREF: Pal_AddColor2
00002314 3202                       		move.w	d2,d1
00002316 0241 00E0                  		andi.w	#$E0,d1
0000231A 0C41 00E0                  		cmpi.w	#$E0,d1
0000231E 6700                       		beq.s	loc_1FF4
00002320 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00002324 4E75                       		rts	
00002326                            ; ===========================================================================
00002326                            
00002326                            loc_1FF4:				; XREF: loc_1FE2
00002326 3202                       		move.w	d2,d1
00002328 0241 0E00                  		andi.w	#$E00,d1
0000232C 0C41 0E00                  		cmpi.w	#$E00,d1
00002330 6700                       		beq.s	loc_2006
00002332 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002336 4E75                       		rts	
00002338                            ; ===========================================================================
00002338                            
00002338                            loc_2006:				; XREF: Pal_AddColor2
00002338 5448                       		addq.w	#2,a0
0000233A 4E75                       		rts	
0000233C                            ; End of function Pal_AddColor2
0000233C                            
0000233C                            ; ---------------------------------------------------------------------------
0000233C                            ; Pallet cycling routine - Sega	logo
0000233C                            ; ---------------------------------------------------------------------------
0000233C                            
0000233C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000233C                            
0000233C                            
0000233C                            PalCycle_Sega:				; XREF: SegaScreen
0000233C 4A38 F635                  		tst.b	($FFFFF635).w
00002340 6600                       		bne.s	loc_206A
00002342 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002346 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000234C 7205                       		moveq	#5,d1
0000234E 3038 F632                  		move.w	($FFFFF632).w,d0
00002352                            
00002352                            loc_2020:
00002352 6A00                       		bpl.s	loc_202A
00002354 5448                       		addq.w	#2,a0
00002356 5341                       		subq.w	#1,d1
00002358 5440                       		addq.w	#2,d0
0000235A 60F6                       		bra.s	loc_2020
0000235C                            ; ===========================================================================
0000235C                            
0000235C                            loc_202A:				; XREF: PalCycle_Sega
0000235C 3400                       		move.w	d0,d2
0000235E 0242 001E                  		andi.w	#$1E,d2
00002362 6600                       		bne.s	loc_2034
00002364 5440                       		addq.w	#2,d0
00002366                            
00002366                            loc_2034:
00002366 0C40 0060                  		cmpi.w	#$60,d0
0000236A 6400                       		bcc.s	loc_203E
0000236C 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002370                            
00002370                            loc_203E:
00002370 5440                       		addq.w	#2,d0
00002372 51C9 FFE8                  		dbf	d1,loc_202A
00002376 3038 F632                  		move.w	($FFFFF632).w,d0
0000237A 5440                       		addq.w	#2,d0
0000237C 3400                       		move.w	d0,d2
0000237E 0242 001E                  		andi.w	#$1E,d2
00002382 6600                       		bne.s	loc_2054
00002384 5440                       		addq.w	#2,d0
00002386                            
00002386                            loc_2054:
00002386 0C40 0064                  		cmpi.w	#$64,d0
0000238A 6D00                       		blt.s	loc_2062
0000238C 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002392 70F4                       		moveq	#-$C,d0
00002394                            
00002394                            loc_2062:
00002394 31C0 F632                  		move.w	d0,($FFFFF632).w
00002398 7001                       		moveq	#1,d0
0000239A 4E75                       		rts	
0000239C                            ; ===========================================================================
0000239C                            
0000239C                            loc_206A:				; XREF: loc_202A
0000239C 5338 F634                  		subq.b	#1,($FFFFF634).w
000023A0 6A00                       		bpl.s	loc_20BC
000023A2 11FC 0004 F634             		move.b	#4,($FFFFF634).w
000023A8 3038 F632                  		move.w	($FFFFF632).w,d0
000023AC 0640 000C                  		addi.w	#$C,d0
000023B0 0C40 0030                  		cmpi.w	#$30,d0
000023B4 6500                       		bcs.s	loc_2088
000023B6 7000                       		moveq	#0,d0
000023B8 4E75                       		rts	
000023BA                            ; ===========================================================================
000023BA                            
000023BA                            loc_2088:				; XREF: loc_206A
000023BA 31C0 F632                  		move.w	d0,($FFFFF632).w
000023BE 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
000023C4 41F0 0000                  		lea	(a0,d0.w),a0
000023C8 43F8 FB04                  		lea	($FFFFFB04).w,a1
000023CC 22D8                       		move.l	(a0)+,(a1)+
000023CE 22D8                       		move.l	(a0)+,(a1)+
000023D0 3298                       		move.w	(a0)+,(a1)
000023D2 43F8 FB20                  		lea	($FFFFFB20).w,a1
000023D6 7000                       		moveq	#0,d0
000023D8 722C                       		moveq	#$2C,d1
000023DA                            
000023DA                            loc_20A8:
000023DA 3400                       		move.w	d0,d2
000023DC 0242 001E                  		andi.w	#$1E,d2
000023E0 6600                       		bne.s	loc_20B2
000023E2 5440                       		addq.w	#2,d0
000023E4                            
000023E4                            loc_20B2:
000023E4 3390 0000                  		move.w	(a0),(a1,d0.w)
000023E8 5440                       		addq.w	#2,d0
000023EA 51C9 FFEE                  		dbf	d1,loc_20A8
000023EE                            
000023EE                            loc_20BC:
000023EE 7001                       		moveq	#1,d0
000023F0 4E75                       		rts	
000023F2                            ; End of function PalCycle_Sega
000023F2                            
000023F2                            ; ===========================================================================
000023F2                            
000023F2                            Pal_Sega1:	incbin	pallet\sega1.bin
000023FE                            Pal_Sega2:	incbin	pallet\sega2.bin
0000242E                            
0000242E                            ; ---------------------------------------------------------------------------
0000242E                            ; Subroutines to load pallets
0000242E                            ; ---------------------------------------------------------------------------
0000242E                            
0000242E                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000242E                            
0000242E                            PalLoad1:
0000242E 1238 FE11                  		move.b ($FFFFFE11),d1
00002432 43F9 0000 0000             		lea (PalPointers).l,a1
00002438 0C01 0000                  		cmp.b #0,d1
0000243C 6700 0000                  		beq.w PalLoad1_Continue
00002440 43F9 0000 0000             		lea (PalPointers2).l,a1
00002446 0C01 0001                  		cmp.b #1,d1
0000244A 6700 0000                  		beq.w PalLoad1_Continue
0000244E 43F9 0000 0000             		lea (PalPointers3).l,a1
00002454                            
00002454                            PalLoad1_Continue:
00002454 E748                       		lsl.w #3,d0
00002456 D2C0                       		adda.w d0,a1
00002458 2459                       		movea.l (a1)+,a2
0000245A 3659                       		movea.w (a1)+,a3
0000245C D6FC 0080                  		adda.w #$80,a3
00002460 3E19                       		move.w (a1)+,d7
00002462                            
00002462                            loc_2110:
00002462 26DA                       		move.l (a2)+,(a3)+
00002464 51CF FFFC                  		dbf d7,loc_2110
00002468 4E75                       		rts
0000246A                             ; End of function PalLoad1
0000246A                            
0000246A                            
0000246A                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000246A                            
0000246A                            PalLoad2:
0000246A 1238 FE11                  		move.b ($FFFFFE11),d1
0000246E 43F9 0000 0000             		lea (PalPointers).l,a1
00002474 0C01 0000                  		cmp.b #0,d1
00002478 6700 0000                  		beq.w PalLoad2_Continue
0000247C 43F9 0000 0000             		lea (PalPointers2).l,a1
00002482 0C01 0001                  		cmp.b #1,d1
00002486 6700 0000                  		beq.w PalLoad2_Continue
0000248A 43F9 0000 0000             		lea (PalPointers3).l,a1
00002490                            
00002490                            
00002490                            PalLoad2_Continue:
00002490 E748                       		lsl.w #3,d0
00002492 D2C0                       		adda.w d0,a1
00002494 2459                       		movea.l (a1)+,a2
00002496 3659                       		movea.w (a1)+,a3
00002498 3E19                       		move.w (a1)+,d7
0000249A                            
0000249A                            loc_2128:
0000249A 26DA                       		move.l (a2)+,(a3)+
0000249C 51CF FFFC                  		dbf d7,loc_2128
000024A0 4E75                       		rts
000024A2                            ; End of function PalLoad2
000024A2                            
000024A2                            
000024A2                            ; ---------------------------------------------------------------------------
000024A2                            ; Underwater pallet loading subroutine
000024A2                            ; ---------------------------------------------------------------------------
000024A2                            
000024A2                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000024A2                            
000024A2                            PalLoad3_Water:
000024A2 1238 FE11                  		move.b ($FFFFFE11),d1
000024A6 43F9 0000 0000             		lea (PalPointers).l,a1
000024AC 0C01 0000                  		cmp.b #0,d1
000024B0 6700 0000                  		beq.w PalLoad3_Continue
000024B4 43F9 0000 0000             		lea (PalPointers2).l,a1
000024BA 0C01 0001                  		cmp.b #1,d1
000024BE 6700 0000                  		beq.w PalLoad3_Continue
000024C2 43F9 0000 0000             		lea (PalPointers3).l,a1
000024C8                            
000024C8                            PalLoad3_Continue:
000024C8 E748                       		lsl.w #3,d0
000024CA D2C0                       		adda.w d0,a1
000024CC 2459                       		movea.l (a1)+,a2
000024CE 3659                       		movea.w (a1)+,a3
000024D0 96FC 0080                  		suba.w #$80,a3
000024D4 3E19                       		move.w (a1)+,d7
000024D6                            
000024D6                            loc_2144:
000024D6 26DA                       		move.l (a2)+,(a3)+
000024D8 51CF FFFC                  		dbf d7,loc_2144
000024DC 4E75                       		rts
000024DE                            ; End of function PalLoad3_Water
000024DE                            
000024DE                            
000024DE                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000024DE                            
000024DE                            
000024DE                            PalLoad4_Water:
000024DE 1238 FE11                  		move.b ($FFFFFE11),d1
000024E2 43F9 0000 0000             		lea (PalPointers).l,a1
000024E8 0C01 0000                  		cmp.b #0,d1
000024EC 6700 0000                  		beq.w PalLoad4_Continue
000024F0 43F9 0000 0000             		lea (PalPointers2).l,a1
000024F6 0C01 0001                  		cmp.b #1,d1
000024FA 6700 0000                  		beq.w PalLoad4_Continue
000024FE 43F9 0000 0000             		lea (PalPointers3).l,a1
00002504                            
00002504                            PalLoad4_Continue:
00002504 E748                       		lsl.w #3,d0
00002506 D2C0                       		adda.w d0,a1
00002508 2459                       		movea.l (a1)+,a2
0000250A 3659                       		movea.w (a1)+,a3
0000250C 96FC 0100                  		suba.w #$100,a3
00002510 3E19                       		move.w (a1)+,d7
00002512                            loc_2160:
00002512 26DA                       		move.l (a2)+,(a3)+
00002514 51CF FFFC                  		dbf d7,loc_2160
00002518 4E75                       		rts
0000251A                             ; End of function PalLoad4_Water
0000251A                            
0000251A                            ; ===========================================================================
0000251A                            ; ---------------------------------------------------------------------------
0000251A                            ; Pallet pointers
0000251A                            ; ---------------------------------------------------------------------------
0000251A                            PalPointers:
0000251A                            	include "_inc\Pallet pointers.asm"
0000251A                            ; ---------------------------------------------------------------------------
0000251A                            ; Pallet pointers
0000251A                            ; ---------------------------------------------------------------------------
0000251A 0000 0000                  	dc.l Pal_SegaBG		; pallet address
0000251E FB00                       	dc.w $FB00		; RAM address
00002520 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002522 0000 0000                  	dc.l Pal_Title
00002526 FB00                       	dc.w $FB00
00002528 001F                       	dc.w $1F
0000252A 0000 0000                  	dc.l Pal_LevelSel
0000252E FB00                       	dc.w $FB00
00002530 001F                       	dc.w $1F
00002532 0000 0000                  	dc.l Pal_Sonic
00002536 FB00                       	dc.w $FB00
00002538 0007                       	dc.w 7
0000253A 0000 0000                  	dc.l Pal_GHZ
0000253E FB20                       	dc.w $FB20
00002540 0017                       	dc.w $17
00002542 0000 0000                  	dc.l Pal_LZ
00002546 FB20                       	dc.w $FB20
00002548 0017                       	dc.w $17
0000254A 0000 0000                  	dc.l Pal_MZ
0000254E FB20                       	dc.w $FB20
00002550 0017                       	dc.w $17
00002552 0000 0000                  	dc.l Pal_SLZ
00002556 FB20                       	dc.w $FB20
00002558 0017                       	dc.w $17
0000255A 0000 0000                  	dc.l Pal_SYZ
0000255E FB20                       	dc.w $FB20
00002560 0017                       	dc.w $17
00002562 0000 0000                  	dc.l Pal_SBZ1
00002566 FB20                       	dc.w $FB20
00002568 0017                       	dc.w $17
0000256A 0000 0000                  	dc.l Pal_Special
0000256E FB00                       	dc.w $FB00
00002570 001F                       	dc.w $1F
00002572 0000 0000                  	dc.l Pal_LZWater
00002576 FB00                       	dc.w $FB00
00002578 001F                       	dc.w $1F
0000257A 0000 0000                  	dc.l Pal_SBZ3
0000257E FB20                       	dc.w $FB20
00002580 0017                       	dc.w $17
00002582 0000 0000                  	dc.l Pal_SBZ3Water
00002586 FB00                       	dc.w $FB00
00002588 001F                       	dc.w $1F
0000258A 0000 0000                  	dc.l Pal_SBZ2
0000258E FB20                       	dc.w $FB20
00002590 0017                       	dc.w $17
00002592 0000 0000                  	dc.l Pal_LZSonWater
00002596 FB00                       	dc.w $FB00
00002598 0007                       	dc.w 7
0000259A 0000 0000                  	dc.l Pal_SBZ3SonWat
0000259E FB00                       	dc.w $FB00
000025A0 0007                       	dc.w 7
000025A2 0000 0000                  	dc.l Pal_SpeResult
000025A6 FB00                       	dc.w $FB00
000025A8 001F                       	dc.w $1F
000025AA 0000 0000                  	dc.l Pal_SpeContinue
000025AE FB00                       	dc.w $FB00
000025B0 000F                       	dc.w $F
000025B2 0000 0000                  	dc.l Pal_Ending
000025B6 FB00                       	dc.w $FB00
000025B8 001F                       	dc.w $1F
000025BA 0000 0000                  	dc.l Menu_Palette; pallet address
000025BE FB00                       	dc.w $FB00	; RAM address
000025C0 001F                       	dc.w $1F	; (pallet length / 2) - 1	
000025C0 001F                       	dc.w $1F	; (pallet length / 2) - 1	
000025C2                            PalPointers2:
000025C2                            		include "_inc\Pallet pointers2.asm"
000025C2                            	
000025C2                            ; ---------------------------------------------------------------------------
000025C2                            ; Pallet pointers 2
000025C2                            ; ---------------------------------------------------------------------------
000025C2 0000 0000                  	dc.l Pal_SegaBG		; pallet address
000025C6 FB00                       	dc.w $FB00		; RAM address
000025C8 001F                       	dc.w $1F		; (pallet length / 2) - 1
000025CA 0000 0000                  	dc.l Pal_Title
000025CE FB00                       	dc.w $FB00
000025D0 001F                       	dc.w $1F
000025D2 0000 0000                  	dc.l Pal_LevelSel
000025D6 FB00                       	dc.w $FB00
000025D8 001F                       	dc.w $1F
000025DA 0000 0000                  	dc.l Pal_Sonic
000025DE FB00                       	dc.w $FB00
000025E0 0007                       	dc.w 7
000025E2 0000 0000                  	dc.l Pal_GHZ2
000025E6 FB20                       	dc.w $FB20
000025E8 0017                       	dc.w $17
000025EA 0000 0000                  	dc.l Pal_LZ2
000025EE FB20                       	dc.w $FB20
000025F0 0017                       	dc.w $17
000025F2 0000 0000                  	dc.l Pal_MZ2
000025F6 FB20                       	dc.w $FB20
000025F8 0017                       	dc.w $17
000025FA 0000 0000                  	dc.l Pal_SLZ2
000025FE FB20                       	dc.w $FB20
00002600 0017                       	dc.w $17
00002602 0000 0000                  	dc.l Pal_SYZ2
00002606 FB20                       	dc.w $FB20
00002608 0017                       	dc.w $17
0000260A 0000 0000                  	dc.l Pal_SBZ1
0000260E FB20                       	dc.w $FB20
00002610 0017                       	dc.w $17
00002612 0000 0000                  	dc.l Pal_Special
00002616 FB00                       	dc.w $FB00
00002618 001F                       	dc.w $1F
0000261A 0000 0000                  	dc.l Pal_LZWater2
0000261E FB00                       	dc.w $FB00
00002620 001F                       	dc.w $1F
00002622 0000 0000                  	dc.l Pal_SBZ3
00002626 FB20                       	dc.w $FB20
00002628 0017                       	dc.w $17
0000262A 0000 0000                  	dc.l Pal_SBZ3Water
0000262E FB00                       	dc.w $FB00
00002630 001F                       	dc.w $1F
00002632 0000 0000                  	dc.l Pal_SBZ2
00002636 FB20                       	dc.w $FB20
00002638 0017                       	dc.w $17
0000263A 0000 0000                  	dc.l Pal_LZSonWater2
0000263E FB00                       	dc.w $FB00
00002640 0007                       	dc.w 7
00002642 0000 0000                  	dc.l Pal_SBZ3SonWat
00002646 FB00                       	dc.w $FB00
00002648 0007                       	dc.w 7
0000264A 0000 0000                  	dc.l Pal_SpeResult
0000264E FB00                       	dc.w $FB00
00002650 001F                       	dc.w $1F
00002652 0000 0000                  	dc.l Pal_SpeContinue
00002656 FB00                       	dc.w $FB00
00002658 000F                       	dc.w $F
0000265A 0000 0000                  	dc.l Pal_Ending
0000265E FB00                       	dc.w $FB00
00002660 001F                       	dc.w $1F
00002660 001F                       	dc.w $1F
00002662                            PalPointers3:
00002662                            		include "_inc\Pallet pointers3.asm"
00002662                            	
00002662                            ; ---------------------------------------------------------------------------
00002662                            ; Pallet pointers 3
00002662                            ; ---------------------------------------------------------------------------
00002662 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002666 FB00                       	dc.w $FB00		; RAM address
00002668 001F                       	dc.w $1F		; (pallet length / 2) - 1
0000266A 0000 0000                  	dc.l Pal_Title
0000266E FB00                       	dc.w $FB00
00002670 001F                       	dc.w $1F
00002672 0000 0000                  	dc.l Pal_LevelSel
00002676 FB00                       	dc.w $FB00
00002678 001F                       	dc.w $1F
0000267A 0000 0000                  	dc.l Pal_Sonic
0000267E FB00                       	dc.w $FB00
00002680 0007                       	dc.w 7
00002682 0000 0000                  	dc.l Pal_GHZ3
00002686 FB20                       	dc.w $FB20
00002688 0017                       	dc.w $17
0000268A 0000 0000                  	dc.l Pal_LZ3
0000268E FB20                       	dc.w $FB20
00002690 0017                       	dc.w $17
00002692 0000 0000                  	dc.l Pal_MZ3
00002696 FB20                       	dc.w $FB20
00002698 0017                       	dc.w $17
0000269A 0000 0000                  	dc.l Pal_SLZ3
0000269E FB20                       	dc.w $FB20
000026A0 0017                       	dc.w $17
000026A2 0000 0000                  	dc.l Pal_SYZ3
000026A6 FB20                       	dc.w $FB20
000026A8 0017                       	dc.w $17
000026AA 0000 0000                  	dc.l Pal_SBZ1
000026AE FB20                       	dc.w $FB20
000026B0 0017                       	dc.w $17
000026B2 0000 0000                  	dc.l Pal_Special
000026B6 FB00                       	dc.w $FB00
000026B8 001F                       	dc.w $1F
000026BA 0000 0000                  	dc.l Pal_LZWater3
000026BE FB00                       	dc.w $FB00
000026C0 001F                       	dc.w $1F
000026C2 0000 0000                  	dc.l Pal_SBZ3
000026C6 FB20                       	dc.w $FB20
000026C8 0017                       	dc.w $17
000026CA 0000 0000                  	dc.l Pal_SBZ3Water
000026CE FB00                       	dc.w $FB00
000026D0 001F                       	dc.w $1F
000026D2 0000 0000                  	dc.l Pal_SBZ2
000026D6 FB20                       	dc.w $FB20
000026D8 0017                       	dc.w $17
000026DA 0000 0000                  	dc.l Pal_LZSonWater3
000026DE FB00                       	dc.w $FB00
000026E0 0007                       	dc.w 7
000026E2 0000 0000                  	dc.l Pal_SBZ3SonWat
000026E6 FB00                       	dc.w $FB00
000026E8 0007                       	dc.w 7
000026EA 0000 0000                  	dc.l Pal_SpeResult
000026EE FB00                       	dc.w $FB00
000026F0 001F                       	dc.w $1F
000026F2 0000 0000                  	dc.l Pal_SpeContinue
000026F6 FB00                       	dc.w $FB00
000026F8 000F                       	dc.w $F
000026FA 0000 0000                  	dc.l Pal_Ending
000026FE FB00                       	dc.w $FB00
00002700 001F                       	dc.w $1F
00002700 001F                       	dc.w $1F
00002702                            ; ---------------------------------------------------------------------------
00002702                            ; Pallet data
00002702                            ; ---------------------------------------------------------------------------
00002702                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
00002782                            Pal_Title:	incbin	pallet\title.bin
00002802                            Pal_LevelSel:	incbin	pallet\levelsel.bin
00002882                            Pal_Sonic:	incbin	pallet\sonic.bin
000028A2                            Pal_GHZ:	incbin	pallet\ghz.bin
00002902                            Pal_GHZ2: incbin pallet\ghz2.bin
00002962                            Pal_GHZ3: incbin pallet\ghz3.bin
000029C2                            Pal_LZ:		incbin	pallet\lz.bin
00002A22                            Pal_LZ2: incbin pallet\lz2.bin
00002A82                            Pal_LZ3: incbin pallet\lz3.bin
00002AE2                            Pal_LZWater: incbin pallet\lz_uw.bin; LZ underwater pallets
00002B62                            Pal_LZWater2: incbin pallet\lz_uw2.bin; LZ underwater pallets
00002BE2                            Pal_LZWater3: incbin pallet\lz_uw3.bin; LZ underwater pallets
00002C62                            Pal_MZ:		incbin	pallet\mz.bin
00002CC2                            Pal_MZ2: incbin pallet\mz2.bin
00002D22                            Pal_MZ3: incbin pallet\mz3.bin
00002D82                            Pal_SLZ:	incbin	pallet\slz.bin
00002DE2                            Pal_SLZ2: incbin pallet\slz2.bin
00002E42                            Pal_SLZ3: incbin pallet\slz3.bin
00002EA2                            Pal_SYZ:	incbin	pallet\syz.bin
00002F02                            Pal_SYZ2: incbin pallet\syz2.bin
00002F62                            Pal_SYZ3: incbin pallet\syz3.bin
00002FC2                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00003022                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
00003082                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00003102                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
00003162                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
000031E2                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00003202                            Pal_LZSonWater2:	incbin	pallet\son_lzuw2.bin	; Sonic (underwater in LZ) pallet
00003222                            Pal_LZSonWater3:	incbin	pallet\son_lzuw3.bin	; Sonic (underwater in LZ) pallet
00003242                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00003262                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
000032E2                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00003322                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
000033A2                            
000033A2                            ; ---------------------------------------------------------------------------
000033A2                            ; Subroutine to	delay the program by ($FFFFF62A) frames
000033A2                            ; ---------------------------------------------------------------------------
000033A2                            
000033A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000033A2                            
000033A2                            
000033A2                            DelayProgram:				; XREF: PauseGame
000033A2 46FC 2300                  		move	#$2300,sr
000033A6                            
000033A6                            loc_29AC:
000033A6 4A38 F62A                  		tst.b	($FFFFF62A).w
000033AA 66FA                       		bne.s	loc_29AC
000033AC 4E75                       		rts	
000033AE                            ; End of function DelayProgram
000033AE                            
000033AE                            ; ---------------------------------------------------------------------------
000033AE                            ; Subroutine to	generate a pseudo-random number	in d0
000033AE                            ; ---------------------------------------------------------------------------
000033AE                            
000033AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000033AE                            
000033AE                            
000033AE                            RandomNumber:
000033AE 2238 F636                  		move.l	($FFFFF636).w,d1
000033B2 6600                       		bne.s	loc_29C0
000033B4 223C 2A6D 365A             		move.l	#$2A6D365A,d1
000033BA                            
000033BA                            loc_29C0:
000033BA 2001                       		move.l	d1,d0
000033BC E581                       		asl.l	#2,d1
000033BE D280                       		add.l	d0,d1
000033C0 E781                       		asl.l	#3,d1
000033C2 D280                       		add.l	d0,d1
000033C4 3001                       		move.w	d1,d0
000033C6 4841                       		swap	d1
000033C8 D041                       		add.w	d1,d0
000033CA 3200                       		move.w	d0,d1
000033CC 4841                       		swap	d1
000033CE 21C1 F636                  		move.l	d1,($FFFFF636).w
000033D2 4E75                       		rts	
000033D4                            ; End of function RandomNumber
000033D4                            
000033D4                            
000033D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000033D4                            
000033D4                            
000033D4                            CalcSine:				; XREF: SS_BGAnimate; et al
000033D4 0240 00FF                  		andi.w	#$FF,d0
000033D8 D040                       		add.w	d0,d0
000033DA 0640 0080                  		addi.w	#$80,d0
000033DE 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
000033E2 0440 0080                  		subi.w	#$80,d0
000033E6 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
000033EA 4E75                       		rts	
000033EC                            ; End of function CalcSine
000033EC                            
000033EC                            ; ===========================================================================
000033EC                            
000033EC                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360� sine wave
0000366C                            
0000366C                            ; ===========================================================================
0000366C 48E7 6000                  		movem.l	d1-d2,-(sp)
00003670 3200                       		move.w	d0,d1
00003672 4841                       		swap	d1
00003674 7000                       		moveq	#0,d0
00003676 3200                       		move.w	d0,d1
00003678 7407                       		moveq	#7,d2
0000367A                            
0000367A                            loc_2C80:
0000367A E599                       		rol.l	#2,d1
0000367C D040                       		add.w	d0,d0
0000367E 5240                       		addq.w	#1,d0
00003680 9240                       		sub.w	d0,d1
00003682 6400                       		bcc.s	loc_2C9A
00003684 D240                       		add.w	d0,d1
00003686 5340                       		subq.w	#1,d0
00003688 51CA FFF0                  		dbf	d2,loc_2C80
0000368C E248                       		lsr.w	#1,d0
0000368E 4CDF 0006                  		movem.l	(sp)+,d1-d2
00003692 4E75                       		rts	
00003694                            ; ===========================================================================
00003694                            
00003694                            loc_2C9A:
00003694 5240                       		addq.w	#1,d0
00003696 51CA FFE2                  		dbf	d2,loc_2C80
0000369A E248                       		lsr.w	#1,d0
0000369C 4CDF 0006                  		movem.l	(sp)+,d1-d2
000036A0 4E75                       		rts	
000036A2                            
000036A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000036A2                            
000036A2                            
000036A2                            CalcAngle:
000036A2 48E7 1800                  		movem.l	d3-d4,-(sp)
000036A6 7600                       		moveq	#0,d3
000036A8 7800                       		moveq	#0,d4
000036AA 3601                       		move.w	d1,d3
000036AC 3802                       		move.w	d2,d4
000036AE 8843                       		or.w	d3,d4
000036B0 6700                       		beq.s	loc_2D04
000036B2 3802                       		move.w	d2,d4
000036B4 4A43                       		tst.w	d3
000036B6 6A00 0000                  		bpl.w	loc_2CC2
000036BA 4443                       		neg.w	d3
000036BC                            
000036BC                            loc_2CC2:
000036BC 4A44                       		tst.w	d4
000036BE 6A00 0000                  		bpl.w	loc_2CCA
000036C2 4444                       		neg.w	d4
000036C4                            
000036C4                            loc_2CCA:
000036C4 B843                       		cmp.w	d3,d4
000036C6 6400 0000                  		bcc.w	loc_2CDC
000036CA E18C                       		lsl.l	#8,d4
000036CC 88C3                       		divu.w	d3,d4
000036CE 7000                       		moveq	#0,d0
000036D0 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
000036D4 6000                       		bra.s	loc_2CE6
000036D6                            ; ===========================================================================
000036D6                            
000036D6                            loc_2CDC:				; XREF: CalcAngle
000036D6 E18B                       		lsl.l	#8,d3
000036D8 86C4                       		divu.w	d4,d3
000036DA 7040                       		moveq	#$40,d0
000036DC 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
000036E0                            
000036E0                            loc_2CE6:
000036E0 4A41                       		tst.w	d1
000036E2 6A00 0000                  		bpl.w	loc_2CF2
000036E6 4440                       		neg.w	d0
000036E8 0640 0080                  		addi.w	#$80,d0
000036EC                            
000036EC                            loc_2CF2:
000036EC 4A42                       		tst.w	d2
000036EE 6A00 0000                  		bpl.w	loc_2CFE
000036F2 4440                       		neg.w	d0
000036F4 0640 0100                  		addi.w	#$100,d0
000036F8                            
000036F8                            loc_2CFE:
000036F8 4CDF 0018                  		movem.l	(sp)+,d3-d4
000036FC 4E75                       		rts	
000036FE                            ; ===========================================================================
000036FE                            
000036FE                            loc_2D04:				; XREF: CalcAngle
000036FE 303C 0040                  		move.w	#$40,d0
00003702 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003706 4E75                       		rts	
00003708                            ; End of function CalcAngle
00003708                            
00003708                            ; ===========================================================================
00003708                            
00003708                            Angle_Data:	incbin	misc\angles.bin
0000380A                            
0000380A                            ; ===========================================================================
0000380A                            
0000380A                            ; ---------------------------------------------------------------------------
0000380A                            ; Sega screen
0000380A                            ; ---------------------------------------------------------------------------
0000380A                            
0000380A                            SegaScreen:				; XREF: GameModeArray
0000380A 103C 00E4                  		move.b	#$E4,d0
0000380E 6100 DC66                  		bsr.w	PlaySound_Special ; stop music
00003812 6100 DF34                  		bsr.w	ClearPLC
00003816 6100 EA96                  		bsr.w	Pal_MakeFlash
0000381A 4DF9 00C0 0004             		lea	($C00004).l,a6
00003820 3CBC 8004                  		move.w	#$8004,(a6)
00003824 3CBC 8230                  		move.w	#$8230,(a6)
00003828 3CBC 8407                  		move.w	#$8407,(a6)
0000382C 3CBC 8700                  		move.w	#$8700,(a6)
00003830 3CBC 8B00                  		move.w	#$8B00,(a6)
00003834 4238 F64E                  		clr.b	($FFFFF64E).w
00003838 46FC 2700                  		move	#$2700,sr
0000383C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003840 0200 00BF                  		andi.b	#$BF,d0
00003844 33C0 00C0 0004             		move.w	d0,($C00004).l
0000384A 6100 DB34                  		bsr.w	ClearScreen
0000384E 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003858 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
0000385E 6100 DD4A                  		bsr.w	NemDec
00003862 43F9 00FF 0000             		lea	($FF0000).l,a1
00003868 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
0000386E 303C 0000                  		move.w	#0,d0
00003872 6100 E014                  		bsr.w	EniDec
00003876 43F9 00FF 0000             		lea	($FF0000).l,a1
0000387C 203C 6510 0003             		move.l	#$65100003,d0
00003882 7217                       		moveq	#$17,d1
00003884 7407                       		moveq	#7,d2
00003886 6100 DC72                  		bsr.w	ShowVDPGraphics
0000388A 43F9 00FF 0180             		lea	($FF0180).l,a1
00003890 203C 4000 0003             		move.l	#$40000003,d0
00003896 7227                       		moveq	#$27,d1
00003898 741B                       		moveq	#$1B,d2
0000389A 6100 DC5E                  		bsr.w	ShowVDPGraphics
0000389E 7000                       		moveq	#0,d0
000038A0 6100 EBC8                  		bsr.w	PalLoad2	; load Sega logo pallet
000038A4 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
000038AA 31FC 0000 F634             		move.w	#0,($FFFFF634).w
000038B0 31FC 0000 F662             		move.w	#0,($FFFFF662).w
000038B6 31FC 0000 F660             		move.w	#0,($FFFFF660).w
000038BC 3038 F60C                  		move.w	($FFFFF60C).w,d0
000038C0 0000 0040                  		ori.b	#$40,d0
000038C4 33C0 00C0 0004             		move.w	d0,($C00004).l
000038CA                            
000038CA                            Sega_WaitPallet:
000038CA 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000038D0 6100 FAD0                  		bsr.w	DelayProgram
000038D4 6100 EA66                  		bsr.w	PalCycle_Sega
000038D8 66F0                       		bne.s	Sega_WaitPallet
000038DA                            
000038DA 103C 00E1                  		move.b	#$E1,d0
000038DE 6100 DB96                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
000038E2 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
000038E8 6100 FAB8                  		bsr.w	DelayProgram
000038EC 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000038F2                            
000038F2                            Sega_WaitEnd:
000038F2 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000038F8 6100 FAA8                  		bsr.w	DelayProgram
000038FC 4A78 F614                  		tst.w	($FFFFF614).w
00003900 6700                       		beq.s	Sega_GotoTitle
00003902 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003908 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
0000390A                            
0000390A                            Sega_GotoTitle:
0000390A 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00003910 4E75                       		rts	
00003912                            ; ===========================================================================
00003912                            
00003912                            ; ---------------------------------------------------------------------------
00003912                            ; Title	screen
00003912                            ; ---------------------------------------------------------------------------
00003912                            
00003912                            TitleScreen:				; XREF: GameModeArray
00003912 103C 00E4                  		move.b	#$E4,d0
00003916 6100 DB5E                  		bsr.w	PlaySound_Special ; stop music
0000391A 6100 DE2C                  		bsr.w	ClearPLC
0000391E 6100 E860                  		bsr.w	Pal_FadeFrom
00003922 46FC 2700                  		move	#$2700,sr
00003926 6100 DAE6                  		bsr.w	SoundDriverLoad
0000392A 4DF9 00C0 0004             		lea	($C00004).l,a6
00003930 3CBC 8004                  		move.w	#$8004,(a6)
00003934 3CBC 8230                  		move.w	#$8230,(a6)
00003938 3CBC 8407                  		move.w	#$8407,(a6)
0000393C 3CBC 9001                  		move.w	#$9001,(a6)
00003940 3CBC 9200                  		move.w	#$9200,(a6)
00003944 3CBC 8B03                  		move.w	#$8B03,(a6)
00003948 3CBC 8720                  		move.w	#$8720,(a6)
0000394C 4238 F64E                  		clr.b	($FFFFF64E).w
00003950 6100 DA2E                  		bsr.w	ClearScreen
00003954 43F8 D000                  		lea	($FFFFD000).w,a1
00003958 7000                       		moveq	#0,d0
0000395A 323C 07FF                  		move.w	#$7FF,d1
0000395E                            
0000395E                            Title_ClrObjRam:
0000395E 22C0                       		move.l	d0,(a1)+
00003960 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
00003964                            
00003964 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000396E 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00003974 6100 DC34                  		bsr.w	NemDec
00003978 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00003982 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00003988 6100 DC20                  		bsr.w	NemDec
0000398C 43F9 00FF 0000             		lea	($FF0000).l,a1
00003992 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00003998 303C 0000                  		move.w	#0,d0
0000399C 6100 DEEA                  		bsr.w	EniDec
000039A0 43F9 00FF 0000             		lea	($FF0000).l,a1
000039A6 203C 4000 0003             		move.l	#$40000003,d0
000039AC 7227                       		moveq	#$27,d1
000039AE 741B                       		moveq	#$1B,d2
000039B0 6100 DB48                  		bsr.w	ShowVDPGraphics
000039B4 43F8 FB80                  		lea	($FFFFFB80).w,a1
000039B8 7000                       		moveq	#0,d0
000039BA 323C 001F                  		move.w	#$1F,d1
000039BE                            
000039BE                            Title_ClrPallet:
000039BE 22C0                       		move.l	d0,(a1)+
000039C0 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
000039C4                            
000039C4 7003                       		moveq	#3,d0		; load Sonic's pallet
000039C6 6100 EA66                  		bsr.w	PalLoad1
000039CA 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
000039D0 4EB9 0000 0000             		jsr	ObjectsLoad
000039D6 4EB9 0000 0000             		jsr	BuildSprites
000039DC 6100 E6EC                  		bsr.w	Pal_FadeTo
000039E0 46FC 2700                  		move	#$2700,sr
000039E4 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
000039EE 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
000039F4 6100 DBB4                  		bsr.w	NemDec
000039F8 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00003A02 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00003A08 6100 DBA0                  		bsr.w	NemDec
00003A0C 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00003A16 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
00003A1C 6100 DB8C                  		bsr.w	NemDec
00003A20 4DF9 00C0 0000             		lea	($C00000).l,a6
00003A26 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
00003A2E 4BF9 0000 058C             		lea	(Art_Text).l,a5
00003A34 323C 028F                  		move.w	#$28F,d1
00003A38                            
00003A38                            Title_LoadText:
00003A38 3C9D                       		move.w	(a5)+,(a6)
00003A3A                            
00003A3A 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00003A3E 41F9 0000 0000                             lea	(Kos_Menu_art).l,a0	; load that art
00003A44 2279 00FF 0000             		move.l	($FF0000).l,a1	; don't wanna corrupt level loading in any way!!
00003A4A 4EB8 1A06                  		jsr	KosDec		; decompress that fucker
00003A4E 3609                       		move.w	a1,d3
00003A50 E24B                       		lsr.w	#1,d3
00003A52                            
00003A52 4DF9 00C0 0000             		lea	($C00000).l,a6 ; lea to video ram
00003A58 2D7C 60C0 0000 0004        		move.l	#$60C00000,4(a6)  ; its location on V ram
00003A60 2A7C 00FF 0000             		move.l	#$FF0000,a5 ; dump decompression to Video ram
00003A66 323C 010E                  		move.w	#$1B*10,d1	; Tile limit: $10 bytes/tile
00003A6A                            
00003A6A                            LoadMenuSelectThing:
00003A6A 3C9D                       		move.w	(a5)+,(a6)
00003A6C 51C9 FFFC                  		dbf	d1,LoadMenuSelectThing
00003A70                                           ; move.w	#$1B*10,d3
00003A70                                           ; divu.w  #$10,d3 ; devide this
00003A70                            
00003A70                                          ;  add.w
00003A70 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00003A76 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003A7C 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00003A82 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
00003A88 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
00003A8E 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00003A94 6100 0000                  		bsr.w	LevelSizeLoad
00003A98 6100 0000                  		bsr.w	DeformBgLayer
00003A9C 43F8 B000                  		lea	($FFFFB000).w,a1
00003AA0 41F9 0000 0000             		lea	(Blk16_TS).l,a0 ; load TS 16x16 mappings
00003AA6 303C 0000                  		move.w	#0,d0
00003AAA 6100 DDDC                  		bsr.w	EniDec
00003AAE 41F9 0000 0000             		lea	(Blk256_TS).l,a0 ; load TS 256x256 mappings
00003AB4 43F9 00FF 0000             		lea	($FF0000).l,a1
00003ABA 6100 DF4A                  		bsr.w	KosDec
00003ABE 6100 0000                  		bsr.w	LevelLayoutLoad
00003AC2 6100 E6BC                  		bsr.w	Pal_FadeFrom
00003AC6 46FC 2700                  		move	#$2700,sr
00003ACA 6100 D8B4                  		bsr.w	ClearScreen
00003ACE 4BF9 00C0 0004             		lea	($C00004).l,a5
00003AD4 4DF9 00C0 0000             		lea	($C00000).l,a6
00003ADA 47F8 F708                  		lea	($FFFFF708).w,a3
00003ADE 49F8 A440                  		lea	($FFFFA440).w,a4
00003AE2 343C 6000                  		move.w	#$6000,d2
00003AE6 6100 0000                  		bsr.w	LoadTilesFromStart2
00003AEA 43F9 00FF 0000             		lea	($FF0000).l,a1
00003AF0 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003AF6 303C 0000                  		move.w	#0,d0
00003AFA 6100 DD8C                  		bsr.w	EniDec
00003AFE 43F9 00FF 0000             		lea	($FF0000).l,a1
00003B04 203C 4208 0003             		move.l	#$42080003,d0
00003B0A 7221                       		moveq	#$21,d1
00003B0C 7415                       		moveq	#$15,d2
00003B0E 6100 D9EA                  		bsr.w	ShowVDPGraphics
00003B12 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003B1C 41F9 0000 0000             		lea	(Nem_TS_1st).l,a0 ; load TS patterns
00003B22 6100 DA86                  		bsr.w	NemDec
00003B26 7001                       		moveq	#1,d0		; load title screen pallet
00003B28 6100 E904                  		bsr.w	PalLoad1
00003B2C 103C 008A                  		move.b	#$8A,d0		; play title screen music
00003B30 6100 D944                  		bsr.w	PlaySound_Special
00003B34 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00003B3A 31FC 0578 F614             		move.w	#$578,($FFFFF614).w ; run title	screen for 578 frames
00003B40 43F8 D080                  		lea	($FFFFD080).w,a1
00003B44 7000                       		moveq	#0,d0
00003B46 323C 000F                  		move.w	#$F,d1	; ($40 / 4) - 1
00003B4A                            
00003B4A                            Title_ClrObjRam2:
00003B4A 22C0                       		move.l	d0,(a1)+
00003B4C 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00003B50                            
00003B50 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
00003B56 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00003B5C 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
00003B62 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00003B68 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00003B6E 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003B74 4EB9 0000 0000             		jsr	ObjectsLoad
00003B7A 6100 0000                  		bsr.w	DeformBgLayer
00003B7E 4EB9 0000 0000             		jsr	BuildSprites
00003B84 7000                       		moveq	#0,d0
00003B86 6100 DB94                  		bsr.w	LoadPLC2
00003B8A 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003B90 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
00003B96 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003B9A 0000 0040                  		ori.b	#$40,d0
00003B9E 33C0 00C0 0004             		move.w	d0,($C00004).l
00003BA4 6100 E524                  		bsr.w	Pal_FadeTo
00003BA8                            
00003BA8                            loc_317C:
00003BA8 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003BAE 6100 F7F2                  		bsr.w	DelayProgram
00003BB2 4EB9 0000 0000             		jsr	ObjectsLoad
00003BB8 6100 0000                  		bsr.w	DeformBgLayer
00003BBC 4EB9 0000 0000             		jsr	BuildSprites
00003BC2 6100 DF08                  		bsr.w	PalCycle_Title
00003BC6 6100 DB8E                  		bsr.w	RunPLC_RAM
00003BCA 3038 D008                  		move.w	($FFFFD008).w,d0
00003BCE 5440                       		addq.w	#2,d0
00003BD0 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00003BD4 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
00003BD8 6500                       		bcs.s	Title_ChkRegion	; if not, branch
00003BDA 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003BE0 4E75                       		rts
00003BE2                            ; ===========================================================================
00003BE2                            
00003BE2                            Title_ChkRegion:
00003BE2 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003BE6 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00003BE8 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
00003BEE 6000                       		bra.s	Title_EnterCheat
00003BF0                            ; ===========================================================================
00003BF0                            
00003BF0                            Title_RegionJ:				; XREF: Title_ChkRegion
00003BF0 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003BF6                            
00003BF6                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003BF6 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00003BFA D0C0                       		adda.w	d0,a0
00003BFC 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
00003C00 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003C04 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003C06 6600                       		bne.s	loc_3210	; if not, branch
00003C08 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00003C0C 4A00                       		tst.b	d0
00003C0E 6600                       		bne.s	Title_CountC
00003C10 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00003C14 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
00003C18 E249                       		lsr.w	#1,d1
00003C1A 0241 0003                  		andi.w	#3,d1
00003C1E 6700                       		beq.s	Title_PlayRing
00003C20 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00003C24 6A00                       		bpl.s	Title_PlayRing
00003C26 7201                       		moveq	#1,d1
00003C28 1181 1001                  		move.b	d1,1(a0,d1.w)
00003C2C                            
00003C2C                            Title_PlayRing:
00003C2C 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00003C32 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003C36 6100 D83E                  		bsr.w	PlaySound_Special
00003C3A 6000                       		bra.s	Title_CountC
00003C3C                            ; ===========================================================================
00003C3C                            
00003C3C                            loc_3210:				; XREF: Title_EnterCheat
00003C3C 4A00                       		tst.b	d0
00003C3E 6700                       		beq.s	Title_CountC
00003C40 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
00003C46 6700                       		beq.s	Title_CountC
00003C48 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003C4E                            
00003C4E                            Title_CountC:
00003C4E 1038 F605                  		move.b	($FFFFF605).w,d0
00003C52 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
00003C56 6700                       		beq.s	loc_3230	; if not, branch
00003C58 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003C5C                            
00003C5C                            loc_3230:
00003C5C 4A78 F614                  		tst.w	($FFFFF614).w
00003C60 6700 0000                  		beq.w	Demo
00003C64 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00003C6A 6700 FF3C                  		beq.w	loc_317C	; if not, branch
00003C6E                            
00003C6E                            Title_ChkLevSel:
00003C6E 4A38 FFE0                  		tst.b	($FFFFFFE0).w		; check	if level select	code is	on
00003C72 6700 0000                  		beq.w	PlayLevel		; if not, play level
00003C76                            	;	btst	#6,($FFFFF604).w ; check if A is pressed
00003C76                            	;	beq.w	PlayLevel		; if not, play level
00003C76 4EF9 0000 0000             		jmp	Level_Select_Menu	; if yes, goto Sonic 2 level select
00003C7C 7002                       		moveq	#2,d0
00003C7E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00003C82 7000                       		moveq	#0,d0
00003C84 323C 00DF                  		move.w	#$DF,d1
00003C88                            
00003C88                            Title_ClrScroll:
00003C88 22C0                       		move.l	d0,(a1)+
00003C8A 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00003C8E                            
00003C8E 21C0 F616                  		move.l	d0,($FFFFF616).w
00003C92 46FC 2700                  		move	#$2700,sr
00003C96 4DF9 00C0 0000             		lea	($C00000).l,a6
00003C9C 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003CA6 323C 03FF                  		move.w	#$3FF,d1
00003CAA                            
00003CAA                            Title_ClrVram:
00003CAA 2C80                       		move.l	d0,(a6)
00003CAC 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
00003CB0                            
00003CB0 6100 0000                  		bsr.w	LevSelTextLoad
00003CB4                            
00003CB4                            ; ---------------------------------------------------------------------------
00003CB4                            ; Level	Select
00003CB4                            ; ---------------------------------------------------------------------------
00003CB4                            
00003CB4                            LevelSelect:
00003CB4 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003CBA 6100 F6E6                  		bsr.w	DelayProgram
00003CBE 6100 0000                  		bsr.w	LevSelControls
00003CC2 6100 DA92                  		bsr.w	RunPLC_RAM
00003CC6 4AB8 F680                  		tst.l	($FFFFF680).w
00003CCA 66E8                       		bne.s	LevelSelect
00003CCC 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00003CD2 67E0                       		beq.s	LevelSelect	; if not, branch
00003CD4 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003CD8 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
00003CDC 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00003CDE 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003CE2 0640 0080                  		addi.w	#$80,d0
00003CE6 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is Japanese Credits cheat on?
00003CEA 6700                       		beq.s	LevSel_NoCheat	; if not, branch
00003CEC 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
00003CF0 6700                       		beq.s	LevSel_Ending	; if yes, branch
00003CF2 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
00003CF6 6700                       		beq.s	LevSel_Credits	; if yes, branch
00003CF8                            
00003CF8                            LevSel_NoCheat:
00003CF8 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $80-$94 being played?
00003CFC 6500                       		bcs.s	LevSel_PlaySnd	; if yes, branch
00003CFE 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
00003D02 65B0                       		bcs.s	LevelSelect	; if yes, branch
00003D04                            
00003D04                            LevSel_PlaySnd:
00003D04 6100 D770                  		bsr.w	PlaySound_Special
00003D08 60AA                       		bra.s	LevelSelect
00003D0A                            ; ===========================================================================
00003D0A                            
00003D0A                            LevSel_Ending:				; XREF: LevelSelect
00003D0A 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00003D10 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
00003D16 4E75                       		rts	
00003D18                            ; ===========================================================================
00003D18                            
00003D18                            LevSel_Credits:				; XREF: LevelSelect
00003D18 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00003D1E 103C 0091                  		move.b	#$91,d0
00003D22 6100 D752                  		bsr.w	PlaySound_Special ; play credits music
00003D26 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00003D2C 4E75                       		rts	
00003D2E                            ; ===========================================================================
00003D2E                            
00003D2E                            LevSel_Level_SS:			; XREF: LevelSelect
00003D2E D040                       		add.w	d0,d0
00003D30 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00003D34 6B00 FF7E                  		bmi.w	LevelSelect
00003D38 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
00003D3C 6600                       		bne.s	LevSel_Level	; if not, branch
00003D3E 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003D44 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00003D48 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003D4E 7000                       		moveq	#0,d0
00003D50 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003D54 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003D58 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003D5C 4E75                       		rts	
00003D5E                            ; ===========================================================================
00003D5E                            
00003D5E                            LevSel_Level:				; XREF: LevSel_Level_SS
00003D5E 0240 3FFF                  		andi.w	#$3FFF,d0
00003D62 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00003D66                            
00003D66                            PlayLevel:				; XREF: ROM:00003246j ...
00003D66 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00003D6C 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003D72 7000                       		moveq	#0,d0
00003D74 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003D78 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003D7C 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003D80 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00003D84 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00003D88 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00003D8C 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
00003D90 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003D94 103C 00E0                  		move.b	#$E0,d0
00003D98 6100 D6DC                  		bsr.w	PlaySound_Special ; fade out music
00003D9C 4E75                       		rts	
00003D9E                            ; ===========================================================================
00003D9E                            ; ---------------------------------------------------------------------------
00003D9E                            ; Level	select - level pointers
00003D9E                            ; ---------------------------------------------------------------------------
00003D9E                            LSelectPointers:
00003D9E                            		incbin	misc\ls_point.bin
00003DC8                            		even
00003DC8                            ; ---------------------------------------------------------------------------
00003DC8                            ; Level	select codes
00003DC8                            ; ---------------------------------------------------------------------------
00003DC8                            LevelSelectCode_J:
00003DC8                            		incbin	misc\ls_jcode.bin
00003DCE                            		even
00003DCE                            
00003DCE                            LevelSelectCode_US:
00003DCE                            		incbin	misc\ls_ucode.bin
00003DD4                            		even
00003DD4                            ; ===========================================================================
00003DD4                            
00003DD4                            ; ---------------------------------------------------------------------------
00003DD4                            ; Demo mode
00003DD4                            ; ---------------------------------------------------------------------------
00003DD4                            
00003DD4                            Demo:					; XREF: TitleScreen
00003DD4 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003DDA                            
00003DDA                            loc_33B6:				; XREF: loc_33E4
00003DDA 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003DE0 6100 F5C0                  		bsr.w	DelayProgram
00003DE4 6100 0000                  		bsr.w	DeformBgLayer
00003DE8 6100 DCBC                  		bsr.w	PalCycle_Load
00003DEC 6100 D968                  		bsr.w	RunPLC_RAM
00003DF0 3038 D008                  		move.w	($FFFFD008).w,d0
00003DF4 5440                       		addq.w	#2,d0
00003DF6 31C0 D008                  		move.w	d0,($FFFFD008).w
00003DFA 0C40 1C00                  		cmpi.w	#$1C00,d0
00003DFE 6500                       		bcs.s	loc_33E4
00003E00 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00003E06 4E75                       		rts	
00003E08                            ; ===========================================================================
00003E08                            
00003E08                            loc_33E4:				; XREF: Demo
00003E08 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003E0E 6600 FE5E                  		bne.w	Title_ChkLevSel	; if yes, branch
00003E12 4A78 F614                  		tst.w	($FFFFF614).w
00003E16 6600 FFC2                  		bne.w	loc_33B6
00003E1A 103C 00E0                  		move.b	#$E0,d0
00003E1E 6100 D656                  		bsr.w	PlaySound_Special ; fade out music
00003E22 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00003E26 0240 0007                  		andi.w	#7,d0
00003E2A D040                       		add.w	d0,d0
00003E2C 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00003E30 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00003E34 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00003E38 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00003E3E 6500                       		bcs.s	loc_3422	; if yes, branch
00003E40 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00003E46                            
00003E46                            loc_3422:
00003E46 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00003E4C 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00003E52 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00003E56 6600                       		bne.s	Demo_Level	; if not, branch
00003E58 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003E5E 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00003E62 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00003E66                            
00003E66                            Demo_Level:
00003E66 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003E6C 7000                       		moveq	#0,d0
00003E6E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003E72 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003E76 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003E7A 4E75                       		rts	
00003E7C                            ; ===========================================================================
00003E7C                            ; ---------------------------------------------------------------------------
00003E7C                            ; Levels used in demos
00003E7C                            ; ---------------------------------------------------------------------------
00003E7C                            Demo_Levels:	incbin	misc\dm_ord1.bin
00003E84                            		even
00003E84                            
00003E84                            ; ---------------------------------------------------------------------------
00003E84                            ; Subroutine to	change what you're selecting in the level select
00003E84                            ; ---------------------------------------------------------------------------
00003E84                            
00003E84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003E84                            
00003E84                            
00003E84                            LevSelControls:				; XREF: LevelSelect
00003E84 1238 F605                  		move.b	($FFFFF605).w,d1
00003E88 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003E8C 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00003E8E 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003E92 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00003E94                            
00003E94                            LevSel_UpDown:
00003E94 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003E9A 1238 F604                  		move.b	($FFFFF604).w,d1
00003E9E 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00003EA2 6700                       		beq.s	LevSel_SndTest	; if not, branch
00003EA4 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003EA8 0801 0000                  		btst	#0,d1		; is up	pressed?
00003EAC 6700                       		beq.s	LevSel_Down	; if not, branch
00003EAE 5340                       		subq.w	#1,d0		; move up 1 selection
00003EB0 6400                       		bcc.s	LevSel_Down
00003EB2 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00003EB4                            
00003EB4                            LevSel_Down:
00003EB4 0801 0001                  		btst	#1,d1		; is down pressed?
00003EB8 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003EBA 5240                       		addq.w	#1,d0		; move down 1 selection
00003EBC 0C40 0015                  		cmpi.w	#$15,d0
00003EC0 6500                       		bcs.s	LevSel_Refresh
00003EC2 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
00003EC4                            
00003EC4                            LevSel_Refresh:
00003EC4 31C0 FF82                  		move.w	d0,($FFFFFF82).w ; set new selection
00003EC8 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00003ECC 4E75                       		rts	
00003ECE                            ; ===========================================================================
00003ECE                            
00003ECE                            LevSel_SndTest:				; XREF: LevSelControls
00003ECE 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
00003ED4 6600                       		bne.s	LevSel_NoMove	; if not, branch
00003ED6 1238 F605                  		move.b	($FFFFF605).w,d1
00003EDA 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
00003EDE 6700                       		beq.s	LevSel_NoMove	; if not, branch
00003EE0 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003EE4 0801 0002                  		btst	#2,d1		; is left pressed?
00003EE8 6700                       		beq.s	LevSel_Right	; if not, branch
00003EEA 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
00003EEC 6400                       		bcc.s	LevSel_Right
00003EEE 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
00003EF0                            
00003EF0                            LevSel_Right:
00003EF0 0801 0003                  		btst	#3,d1		; is right pressed?
00003EF4 6700                       		beq.s	LevSel_Refresh2	; if not, branch
00003EF6 5240                       		addq.w	#1,d0		; add 1	to sound test
00003EF8 0C40 0050                  		cmpi.w	#$50,d0
00003EFC 6500                       		bcs.s	LevSel_Refresh2
00003EFE 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
00003F00                            
00003F00                            LevSel_Refresh2:
00003F00 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
00003F04 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00003F08                            
00003F08                            LevSel_NoMove:
00003F08 4E75                       		rts	
00003F0A                            ; End of function LevSelControls
00003F0A                            
00003F0A                            ; ---------------------------------------------------------------------------
00003F0A                            ; Subroutine to load level select text
00003F0A                            ; ---------------------------------------------------------------------------
00003F0A                            
00003F0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003F0A                            
00003F0A                            
00003F0A                            LevSelTextLoad:				; XREF: TitleScreen
00003F0A 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003F10 4DF9 00C0 0000             		lea	($C00000).l,a6
00003F16 283C 6210 0003             		move.l	#$62100003,d4	; screen position (text)
00003F1C 363C E680                  		move.w	#$E680,d3	; VRAM setting
00003F20 7214                       		moveq	#$14,d1		; number of lines of text
00003F22                            
00003F22                            loc_34FE:				; XREF: LevSelTextLoad+26j
00003F22 2D44 0004                  		move.l	d4,4(a6)
00003F26 6100 0000                  		bsr.w	LevSel_ChgLine
00003F2A 0684 0080 0000             		addi.l	#$800000,d4
00003F30 51C9 FFF0                  		dbf	d1,loc_34FE
00003F34 7000                       		moveq	#0,d0
00003F36 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003F3A 3200                       		move.w	d0,d1
00003F3C 283C 6210 0003             		move.l	#$62100003,d4
00003F42 EF48                       		lsl.w	#7,d0
00003F44 4840                       		swap	d0
00003F46 D880                       		add.l	d0,d4
00003F48 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003F4E E749                       		lsl.w	#3,d1
00003F50 3001                       		move.w	d1,d0
00003F52 D241                       		add.w	d1,d1
00003F54 D240                       		add.w	d0,d1
00003F56 D2C1                       		adda.w	d1,a1
00003F58 363C C680                  		move.w	#$C680,d3
00003F5C 2D44 0004                  		move.l	d4,4(a6)
00003F60 6100 0000                  		bsr.w	LevSel_ChgLine
00003F64 363C E680                  		move.w	#$E680,d3
00003F68 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
00003F6E 6600                       		bne.s	loc_3550
00003F70 363C C680                  		move.w	#$C680,d3
00003F74                            
00003F74                            loc_3550:
00003F74 23FC 6C30 0003 00C0 0004   		move.l	#$6C300003,($C00004).l ; screen	position (sound	test)
00003F7E 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003F82 0640 0080                  		addi.w	#$80,d0
00003F86 1400                       		move.b	d0,d2
00003F88 E808                       		lsr.b	#4,d0
00003F8A 6100 0000                  		bsr.w	LevSel_ChgSnd
00003F8E 1002                       		move.b	d2,d0
00003F90 6100 0000                  		bsr.w	LevSel_ChgSnd
00003F94 4E75                       		rts	
00003F96                            ; End of function LevSelTextLoad
00003F96                            
00003F96                            
00003F96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003F96                            
00003F96                            
00003F96                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00003F96 0240 000F                  		andi.w	#$F,d0
00003F9A 0C00 000A                  		cmpi.b	#$A,d0
00003F9E 6500                       		bcs.s	loc_3580
00003FA0 5E00                       		addi.b	#7,d0
00003FA2                            
00003FA2                            loc_3580:
00003FA2 D043                       		add.w	d3,d0
00003FA4 3C80                       		move.w	d0,(a6)
00003FA6 4E75                       		rts	
00003FA8                            ; End of function LevSel_ChgSnd
00003FA8                            
00003FA8                            
00003FA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003FA8                            
00003FA8                            
00003FA8                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003FA8 7417                       		moveq	#$17,d2		; number of characters per line
00003FAA                            
00003FAA                            loc_3588:
00003FAA 7000                       		moveq	#0,d0
00003FAC 1019                       		move.b	(a1)+,d0
00003FAE 6A00                       		bpl.s	loc_3598
00003FB0 3CBC 0000                  		move.w	#0,(a6)
00003FB4 51CA FFF4                  		dbf	d2,loc_3588
00003FB8 4E75                       		rts	
00003FBA                            ; ===========================================================================
00003FBA                            
00003FBA                            loc_3598:				; XREF: LevSel_ChgLine
00003FBA D043                       		add.w	d3,d0
00003FBC 3C80                       		move.w	d0,(a6)
00003FBE 51CA FFEA                  		dbf	d2,loc_3588
00003FC2 4E75                       		rts	
00003FC4                            ; End of function LevSel_ChgLine
00003FC4                            
00003FC4                            ; ===========================================================================
00003FC4                            ; ---------------------------------------------------------------------------
00003FC4                            ; Level	select menu text
00003FC4                            ; ---------------------------------------------------------------------------
00003FC4                            LevelMenuText:	incbin	misc\menutext.bin
000041BC                            		even
000041BC                            ; ---------------------------------------------------------------------------
000041BC                            ; Music	playlist
000041BC                            ; ---------------------------------------------------------------------------
000041BC                            MusicList1:	incbin	misc\muslist1.bin
000041C2                            		even
000041C2                            MusicList2:	incbin	misc\muslist2.bin
000041C8                            		even
000041C8                            MusicList3:	incbin	misc\muslist3.bin
000041CE                            		even
000041CE                            MusicList4:	incbin	misc\muslist4.bin
000041D4                            		even
000041D4                            ; ===========================================================================
000041D4                            
000041D4                            ; ---------------------------------------------------------------------------
000041D4                            ; Level
000041D4                            ; ---------------------------------------------------------------------------
000041D4                            
000041D4                            Level:					; XREF: GameModeArray
000041D4 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
000041DA 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000041DE 6B00                       		bmi.s	loc_37B6
000041E0 103C 00E0                  		move.b	#$E0,d0
000041E4 6100 D290                  		bsr.w	PlaySound_Special ; fade out music
000041E8                            
000041E8                            loc_37B6:
000041E8 6100 D55E                  		bsr.w	ClearPLC
000041EC 6100 DF92                  		bsr.w	Pal_FadeFrom
000041F0 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000041F4 6B00                       		bmi.s	Level_ClrRam
000041F6 46FC 2700                  		move	#$2700,sr
000041FA 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004204 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000420A 6100 D39E                  		bsr.w	NemDec
0000420E 46FC 2300                  		move	#$2300,sr
00004212 7000                       		moveq	#0,d0
00004214 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004218 E948                       		lsl.w	#4,d0
0000421A 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00004220 45F2 0000                  		lea	(a2,d0.w),a2
00004224 7000                       		moveq	#0,d0
00004226 1012                       		move.b	(a2),d0
00004228 6700                       		beq.s	loc_37FC
0000422A 6100 D4BE                  		bsr.w	LoadPLC		; load level patterns
0000422E                            
0000422E                            loc_37FC:
0000422E 7001                       		moveq	#1,d0
00004230 6100 D4B8                  		bsr.w	LoadPLC		; load standard	patterns
00004234                            
00004234                            Level_ClrRam:
00004234 43F8 D000                  		lea	($FFFFD000).w,a1
00004238 7000                       		moveq	#0,d0
0000423A 323C 07FF                  		move.w	#$7FF,d1
0000423E                            
0000423E                            Level_ClrObjRam:
0000423E 22C0                       		move.l	d0,(a1)+
00004240 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00004244                            
00004244 43F8 F628                  		lea	($FFFFF628).w,a1
00004248 7000                       		moveq	#0,d0
0000424A 323C 0015                  		move.w	#$15,d1
0000424E                            
0000424E                            Level_ClrVars:
0000424E 22C0                       		move.l	d0,(a1)+
00004250 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00004254                            
00004254 43F8 F700                  		lea	($FFFFF700).w,a1
00004258 7000                       		moveq	#0,d0
0000425A 323C 003F                  		move.w	#$3F,d1
0000425E                            
0000425E                            Level_ClrVars2:
0000425E 22C0                       		move.l	d0,(a1)+
00004260 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00004264                            
00004264 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004268 7000                       		moveq	#0,d0
0000426A 323C 0047                  		move.w	#$47,d1
0000426E                            
0000426E                            Level_ClrVars3:
0000426E 22C0                       		move.l	d0,(a1)+
00004270 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00004274                            
00004274 46FC 2700                  		move	#$2700,sr
00004278 6100 D106                  		bsr.w	ClearScreen
0000427C 4DF9 00C0 0004             		lea	($C00004).l,a6
00004282 3CBC 8B03                  		move.w	#$8B03,(a6)
00004286 3CBC 8230                  		move.w	#$8230,(a6)
0000428A 3CBC 8407                  		move.w	#$8407,(a6)
0000428E 3CBC 857C                  		move.w	#$857C,(a6)
00004292 3CBC 9001                  		move.w	#$9001,(a6)
00004296 3CBC 8004                  		move.w	#$8004,(a6)
0000429A 3CBC 8720                  		move.w	#$8720,(a6)
0000429E 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
000042A4 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
000042A8 4278 C800                  		clr.w	($FFFFC800).w
000042AC 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
000042B4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000042BA 6600                       		bne.s	Level_LoadPal	; if not, branch
000042BC 3CBC 8014                  		move.w	#$8014,(a6)
000042C0 7000                       		moveq	#0,d0
000042C2 1038 FE11                  		move.b	($FFFFFE11).w,d0
000042C6 D040                       		add.w	d0,d0
000042C8 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
000042CE 3031 0000                  		move.w	(a1,d0.w),d0
000042D2 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
000042D6 31C0 F648                  		move.w	d0,($FFFFF648).w
000042DA 31C0 F64A                  		move.w	d0,($FFFFF64A).w
000042DE 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
000042E2 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
000042E6 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
000042EC                            
000042EC                            Level_LoadPal:
000042EC 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000042F2 46FC 2300                  		move	#$2300,sr
000042F6 7003                       		moveq	#3,d0
000042F8 6100 E170                  		bsr.w	PalLoad2	; load Sonic's pallet line
000042FC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00004302 6600                       		bne.s	Level_GetBgm	; if not, branch
00004304 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
00004306 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
0000430C 6600                       		bne.s	Level_WaterPal	; if not, branch
0000430E 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
00004310                            
00004310                            Level_WaterPal:
00004310 6100 E190                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00004314 4A38 FE30                  		tst.b	($FFFFFE30).w
00004318 6700                       		beq.s	Level_GetBgm
0000431A 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00004320                            
00004320                            ; NineKode begins here - How to play different songs on different acts
00004320                             
00004320                            Level_GetBgm:
00004320 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004324 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00004328 7000                       		moveq	#0,d0
0000432A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000432E                             
0000432E 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00004334 6600                       		bne.s	Level_GetBgm2	; if not, branch
00004336 43F9 0000 41BC             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
0000433C 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
0000433E                             
0000433E                            Level_GetBgm2:
0000433E 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00004344 6600                       		bne.s	Level_GetBgm3	; if not, branch
00004346 43F9 0000 41C2             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
0000434C 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
0000434E                             
0000434E                            Level_GetBgm3:
0000434E 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00004354 6600                       		bne.s	Level_GetBgm4	; if not, branch
00004356 43F9 0000 41C8             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
0000435C 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
0000435E                             
0000435E                            Level_GetBgm4:
0000435E 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00004364 6600                       		bne.s	Level_PlayBgm	; if not, branch
00004366 43F9 0000 41CE             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
0000436C                             
0000436C                            Level_PlayBgm:
0000436C 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00004370 6100 D0FE                  		bsr.w	PlaySound	; play music
00004374 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
0000437A                             
0000437A                            ; NineKode ends here
0000437A                            
0000437A                            Level_TtlCard:
0000437A 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004380 6100 F020                  		bsr.w	DelayProgram
00004384 4EB9 0000 0000             		jsr	ObjectsLoad
0000438A 4EB9 0000 0000             		jsr	BuildSprites
00004390 6100 D3C4                  		bsr.w	RunPLC_RAM
00004394 3038 D108                  		move.w	($FFFFD108).w,d0
00004398 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
0000439C 66DC                       		bne.s	Level_TtlCard	; if not, branch
0000439E 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
000043A2 66D6                       		bne.s	Level_TtlCard	; if yes, branch
000043A4 4EB9 0000 0000             		jsr	Hud_Base
000043AA                            
000043AA                            loc_3946:
000043AA 7003                       		moveq	#3,d0
000043AC 6100 E080                  		bsr.w	PalLoad1	; load Sonic's pallet line
000043B0 6100 0000                  		bsr.w	LevelSizeLoad
000043B4 6100 0000                  		bsr.w	DeformBgLayer
000043B8 08F8 0002 F754             		bset	#2,($FFFFF754).w
000043BE 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
000043C2 6100 0000                  		bsr.w	LoadTilesFromStart
000043C6 4EB9 0000 0000             		jsr	FloorLog_Unk
000043CC 6100 0000                  		bsr.w	ColIndexLoad
000043D0 6100 0000                  		bsr.w	LZWaterEffects
000043D4 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000043DA 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000043DE 6B00                       		bmi.s	Level_ChkDebug
000043E0 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
000043E6                            
000043E6                            Level_ChkDebug:
000043E6 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
000043EA 6700                       		beq.s	Level_ChkWater	; if not, branch
000043EC 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
000043F2 6700                       		beq.s	Level_ChkWater	; if not, branch
000043F4 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000043FA                            
000043FA                            Level_ChkWater:
000043FA 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00004400 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00004406 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0000440C 6600                       		bne.s	Level_LoadObj	; if not, branch
0000440E 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00004414 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
0000441A 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00004420 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00004426                            
00004426                            Level_LoadObj:
00004426 4EB9 0000 0000             		jsr	ObjPosLoad
0000442C 4EB9 0000 0000             		jsr	ObjectsLoad
00004432 4EB9 0000 0000             		jsr	BuildSprites
00004438 7000                       		moveq	#0,d0
0000443A 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
0000443E 6600                       		bne.s	loc_39E8	; if yes, branch
00004440 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004444 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004448 11C0 FEBF                          move.b  d0,($FFFFFEBF).w ; value used to increment centiseconds
0000444C 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00004450                            
00004450                            loc_39E8:
00004450 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00004454 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00004458 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
0000445C 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00004460 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00004464 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00004468 31C0 FE02                  		move.w	d0,($FFFFFE02).w
0000446C 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00004470 6100 0000                  		bsr.w	OscillateNumInit
00004474 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
0000447A 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00004480 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004486 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
0000448C 7000                       		moveq	#0,d0
0000448E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004492 E548                       		lsl.w	#2,d0
00004494 2271 0000                  		movea.l	(a1,d0.w),a1
00004498 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000449C 6A00                       		bpl.s	Level_Demo	; if yes, branch
0000449E 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
000044A4 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000044A8 5340                       		subq.w	#1,d0
000044AA E548                       		lsl.w	#2,d0
000044AC 2271 0000                  		movea.l	(a1,d0.w),a1
000044B0                            
000044B0                            Level_Demo:
000044B0 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
000044B6 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
000044BA 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000044C0 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000044C4 6A00                       		bpl.s	Level_ChkWaterPal
000044C6 31FC 021C F614             		move.w	#540,($FFFFF614).w
000044CC 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
000044D2 6600                       		bne.s	Level_ChkWaterPal
000044D4 31FC 01FE F614             		move.w	#510,($FFFFF614).w
000044DA                            
000044DA                            Level_ChkWaterPal:
000044DA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
000044E0 6600                       		bne.s	Level_Delay	; if not, branch
000044E2 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
000044E4 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
000044EA 6600                       		bne.s	Level_WaterPal2	; if not, branch
000044EC 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
000044EE                            
000044EE                            Level_WaterPal2:
000044EE 6100 DFEE                  		bsr.w	PalLoad4_Water
000044F2                            
000044F2                            Level_Delay:
000044F2 323C 0003                  		move.w	#3,d1
000044F6                            
000044F6                            Level_DelayLoop:
000044F6 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
000044FC 6100 EEA4                  		bsr.w	DelayProgram
00004500 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00004504                            
00004504 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
0000450A 6100 DBC4                  		bsr.w	Pal_FadeTo2
0000450E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004512 6B00                       		bmi.s	Level_ClrCardArt
00004514 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00004518 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
0000451C 5838 D124                  		addq.b	#4,($FFFFD124).w
00004520 5838 D164                  		addq.b	#4,($FFFFD164).w
00004524 6000                       		bra.s	Level_StartGame
00004526                            ; ===========================================================================
00004526                            
00004526                            Level_ClrCardArt:
00004526 7002                       		moveq	#2,d0
00004528 4EB9 0000 16EA             		jsr	(LoadPLC).l	; load explosion patterns
0000452E 7000                       		moveq	#0,d0
00004530 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004534 0640 0015                  		addi.w	#$15,d0
00004538 4EB9 0000 16EA             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
0000453E                            
0000453E                            Level_StartGame:
0000453E 11FC 0001 FE1E                     move.b    #1,($FFFFFE1E).w ; update time counter
00004544 08B8 0007 F600                     bclr    #7,($FFFFF600).w ; subtract 80 from screen mode
0000454A                            
0000454A                            ; ---------------------------------------------------------------------------
0000454A                            ; Main level loop (when	all title card and loading sequences are finished)
0000454A                            ; ---------------------------------------------------------------------------
0000454A                            
0000454A                            Level_MainLoop:
0000454A 6100 CF36                  		bsr.w	PauseGame
0000454E 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004554 6100 EE4C                  		bsr.w	DelayProgram
00004558 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
0000455C 6100 0000                  		bsr.w	MoveSonicInDemo
00004560 6100 0000                  		bsr.w	LZWaterEffects
00004564 4EB9 0000 0000             		jsr	ObjectsLoad
0000456A 4A78 FE08                  		tst.w	($FFFFFE08).w
0000456E 6600                       		bne.s	loc_3B10
00004570 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004576 6400                       		bcc.s	loc_3B14
00004578                            
00004578                            loc_3B10:
00004578 6100 0000                  		bsr.w	DeformBgLayer
0000457C                            
0000457C                            loc_3B14:
0000457C 4EB9 0000 0000             		jsr	BuildSprites
00004582 4EB9 0000 0000             		jsr	ObjPosLoad
00004588 6100 D51C                  		bsr.w	PalCycle_Load
0000458C 6100 D1C8                  		bsr.w	RunPLC_RAM
00004590 6100 0000                  		bsr.w	OscillateNumDo
00004594 6100 0000                  		bsr.w	ChangeRingFrame
00004598 6100 0000                  		bsr.w	SignpostArtLoad
0000459C 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000045A2 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
000045A4 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
000045A8 6600 FC2A                  		bne.w	Level		; if yes, branch
000045AC 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
000045B2 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
000045B6 4E75                       		rts	
000045B8                            ; ===========================================================================
000045B8                            
000045B8                            Level_ChkDemo:				; XREF: Level_MainLoop
000045B8 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000045BC 6600                       		bne.s	Level_EndDemo	; if yes, branch
000045BE 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
000045C2 6700                       		beq.s	Level_EndDemo	; if not, branch
000045C4 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000045CA 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
000045CE 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000045D4 4E75                       		rts	
000045D6                            ; ===========================================================================
000045D6                            
000045D6                            Level_EndDemo:				; XREF: Level_ChkDemo
000045D6 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
000045DC 6600                       		bne.s	loc_3B88	; if not, branch
000045DE 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000045E4 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000045E8 6A00                       		bpl.s	loc_3B88	; if yes, branch
000045EA 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
000045F0                            
000045F0                            loc_3B88:
000045F0 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
000045F6 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000045FC 4278 F794                  		clr.w	($FFFFF794).w
00004600                            
00004600                            loc_3B98:
00004600 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004606 6100 ED9A                  		bsr.w	DelayProgram
0000460A 6100 0000                  		bsr.w	MoveSonicInDemo
0000460E 4EB9 0000 0000             		jsr	ObjectsLoad
00004614 4EB9 0000 0000             		jsr	BuildSprites
0000461A 4EB9 0000 0000             		jsr	ObjPosLoad
00004620 5378 F794                  		subq.w	#1,($FFFFF794).w
00004624 6A00                       		bpl.s	loc_3BC8
00004626 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000462C 6100 DB78                  		bsr.w	Pal_FadeOut
00004630                            
00004630                            loc_3BC8:
00004630 4A78 F614                  		tst.w	($FFFFF614).w
00004634 66CA                       		bne.s	loc_3B98
00004636 4E75                       		rts	
00004638                            ; ===========================================================================
00004638                            ; ---------------------------------------------------------------------------
00004638                            ; Subroutine to	do special water effects in Labyrinth Zone
00004638                            ; ---------------------------------------------------------------------------
00004638                            
00004638                            LZWaterEffects:				; XREF: Level
00004638 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0000463E 6600                       		bne.s	locret_3C28	; if not, branch
00004640 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004646 6400                       		bcc.s	LZMoveWater
00004648 6100 0000                  		bsr.w	LZWindTunnels
0000464C 6100 0000                  		bsr.w	LZWaterSlides
00004650 6100 0000                  		bsr.w	LZDynamicWater
00004654                            
00004654                            LZMoveWater:
00004654 4238 F64E                  		clr.b	($FFFFF64E).w
00004658 7000                       		moveq	#0,d0
0000465A 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000465E E248                       		lsr.w	#1,d0
00004660 D078 F648                  		add.w	($FFFFF648).w,d0
00004664 31C0 F646                  		move.w	d0,($FFFFF646).w
00004668 3038 F646                  		move.w	($FFFFF646).w,d0
0000466C 9078 F704                  		sub.w	($FFFFF704).w,d0
00004670 6400                       		bcc.s	loc_3C1A
00004672 4A40                       		tst.w	d0
00004674 6A00                       		bpl.s	loc_3C1A
00004676 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
0000467C 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00004682                            
00004682                            loc_3C1A:
00004682 0C40 00DF                  		cmpi.w	#$DF,d0
00004686 6500                       		bcs.s	loc_3C24
00004688 303C 00DF                  		move.w	#$DF,d0
0000468C                            
0000468C                            loc_3C24:
0000468C 11C0 F625                  		move.b	d0,($FFFFF625).w
00004690                            
00004690                            locret_3C28:
00004690 4E75                       		rts	
00004692                            ; ===========================================================================
00004692                            ; ---------------------------------------------------------------------------
00004692                            ; Labyrinth default water heights
00004692                            ; ---------------------------------------------------------------------------
00004692                            WaterHeight:	incbin	misc\lz_heigh.bin
0000469A                            		even
0000469A                            
0000469A                            ; ===========================================================================
0000469A                            
0000469A                            ; ---------------------------------------------------------------------------
0000469A                            ; Labyrinth dynamic water routines
0000469A                            ; ---------------------------------------------------------------------------
0000469A                            
0000469A                            LZDynamicWater:				; XREF: LZWaterEffects
0000469A 7000                       		moveq	#0,d0
0000469C 1038 FE11                  		move.b	($FFFFFE11).w,d0
000046A0 D040                       		add.w	d0,d0
000046A2 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
000046A6 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
000046AA 7200                       		moveq	#0,d1
000046AC 1238 F64C                  		move.b	($FFFFF64C).w,d1
000046B0 3038 F64A                  		move.w	($FFFFF64A).w,d0
000046B4 9078 F648                  		sub.w	($FFFFF648).w,d0
000046B8 6700                       		beq.s	locret_3C5A
000046BA 6400                       		bcc.s	loc_3C56
000046BC 4441                       		neg.w	d1
000046BE                            
000046BE                            loc_3C56:
000046BE D378 F648                  		add.w	d1,($FFFFF648).w
000046C2                            
000046C2                            locret_3C5A:
000046C2 4E75                       		rts	
000046C4                            ; ===========================================================================
000046C4 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
000046C6 0000                       		dc.w DynWater_LZ2-DynWater_Index
000046C8 0000                       		dc.w DynWater_LZ3-DynWater_Index
000046CA 0000                       		dc.w DynWater_SBZ3-DynWater_Index
000046CC                            ; ===========================================================================
000046CC                            
000046CC                            DynWater_LZ1:				; XREF: DynWater_Index
000046CC 3038 F700                  		move.w	($FFFFF700).w,d0
000046D0 1438 F64D                  		move.b	($FFFFF64D).w,d2
000046D4 6600                       		bne.s	loc_3CD0
000046D6 323C 00B8                  		move.w	#$B8,d1
000046DA 0C40 0600                  		cmpi.w	#$600,d0
000046DE 6500                       		bcs.s	loc_3CB4
000046E0 323C 0108                  		move.w	#$108,d1
000046E4 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
000046EA 6500                       		bcs.s	loc_3CBA
000046EC 0C40 0C00                  		cmpi.w	#$C00,d0
000046F0 6500                       		bcs.s	loc_3CB4
000046F2 323C 0318                  		move.w	#$318,d1
000046F6 0C40 1080                  		cmpi.w	#$1080,d0
000046FA 6500                       		bcs.s	loc_3CB4
000046FC 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00004702 323C 05C8                  		move.w	#$5C8,d1
00004706 0C40 1380                  		cmpi.w	#$1380,d0
0000470A 6500                       		bcs.s	loc_3CB4
0000470C 323C 03A8                  		move.w	#$3A8,d1
00004710 B278 F648                  		cmp.w	($FFFFF648).w,d1
00004714 6600                       		bne.s	loc_3CB4
00004716 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
0000471C                            
0000471C                            loc_3CB4:
0000471C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004720 4E75                       		rts	
00004722                            ; ===========================================================================
00004722                            
00004722                            loc_3CBA:				; XREF: DynWater_LZ1
00004722 0C40 0C80                  		cmpi.w	#$C80,d0
00004726 65F4                       		bcs.s	loc_3CB4
00004728 323C 00E8                  		move.w	#$E8,d1
0000472C 0C40 1500                  		cmpi.w	#$1500,d0
00004730 65EA                       		bcs.s	loc_3CB4
00004732 323C 0108                  		move.w	#$108,d1
00004736 60E4                       		bra.s	loc_3CB4
00004738                            ; ===========================================================================
00004738                            
00004738                            loc_3CD0:				; XREF: DynWater_LZ1
00004738 5302                       		subq.b	#1,d2
0000473A 6600                       		bne.s	locret_3CF4
0000473C 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00004742 6400                       		bcc.s	locret_3CF4
00004744 323C 03A8                  		move.w	#$3A8,d1
00004748 0C40 1300                  		cmpi.w	#$1300,d0
0000474C 6500                       		bcs.s	loc_3CF0
0000474E 323C 0108                  		move.w	#$108,d1
00004752 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004758                            
00004758                            loc_3CF0:
00004758 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000475C                            
0000475C                            locret_3CF4:
0000475C 4E75                       		rts	
0000475E                            ; ===========================================================================
0000475E                            
0000475E                            DynWater_LZ2:				; XREF: DynWater_Index
0000475E 3038 F700                  		move.w	($FFFFF700).w,d0
00004762 323C 0328                  		move.w	#$328,d1
00004766 0C40 0500                  		cmpi.w	#$500,d0
0000476A 6500                       		bcs.s	loc_3D12
0000476C 323C 03C8                  		move.w	#$3C8,d1
00004770 0C40 0B00                  		cmpi.w	#$B00,d0
00004774 6500                       		bcs.s	loc_3D12
00004776 323C 0428                  		move.w	#$428,d1
0000477A                            
0000477A                            loc_3D12:
0000477A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000477E 4E75                       		rts	
00004780                            ; ===========================================================================
00004780                            
00004780                            DynWater_LZ3:				; XREF: DynWater_Index
00004780 3038 F700                  		move.w	($FFFFF700).w,d0
00004784 1438 F64D                  		move.b	($FFFFF64D).w,d2
00004788 6600                       		bne.s	loc_3D5E
0000478A 323C 0900                  		move.w	#$900,d1
0000478E 0C40 0600                  		cmpi.w	#$600,d0
00004792 6500                       		bcs.s	loc_3D54
00004794 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
0000479A 6500                       		bcs.s	loc_3D54
0000479C 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000047A2 6400                       		bcc.s	loc_3D54
000047A4 323C 04C8                  		move.w	#$4C8,d1
000047A8 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
000047AE 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
000047B4 303C 00B7                  		move.w	#$B7,d0
000047B8 6100 CCBC                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
000047BC                            
000047BC                            loc_3D54:
000047BC 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000047C0 31C1 F648                  		move.w	d1,($FFFFF648).w
000047C4 4E75                       		rts	
000047C6                            ; ===========================================================================
000047C6                            
000047C6                            loc_3D5E:				; XREF: DynWater_LZ3
000047C6 5302                       		subq.b	#1,d2
000047C8 6600                       		bne.s	loc_3DA8
000047CA 323C 04C8                  		move.w	#$4C8,d1
000047CE 0C40 0770                  		cmpi.w	#$770,d0
000047D2 6500                       		bcs.s	loc_3DA2
000047D4 323C 0308                  		move.w	#$308,d1
000047D8 0C40 1400                  		cmpi.w	#$1400,d0
000047DC 6500                       		bcs.s	loc_3DA2
000047DE 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
000047E4 6700                       		beq.s	loc_3D8E
000047E6 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000047EC 6400                       		bcc.s	loc_3D8E
000047EE 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
000047F4 6400                       		bcc.s	loc_3DA2
000047F6                            
000047F6                            loc_3D8E:
000047F6 323C 0508                  		move.w	#$508,d1
000047FA 31C1 F648                  		move.w	d1,($FFFFF648).w
000047FE 0C40 1770                  		cmpi.w	#$1770,d0
00004802 6500                       		bcs.s	loc_3DA2
00004804 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
0000480A                            
0000480A                            loc_3DA2:
0000480A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000480E 4E75                       		rts	
00004810                            ; ===========================================================================
00004810                            
00004810                            loc_3DA8:
00004810 5302                       		subq.b	#1,d2
00004812 6600                       		bne.s	loc_3DD2
00004814 323C 0508                  		move.w	#$508,d1
00004818 0C40 1860                  		cmpi.w	#$1860,d0
0000481C 6500                       		bcs.s	loc_3DCC
0000481E 323C 0188                  		move.w	#$188,d1
00004822 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004826 6400                       		bcc.s	loc_3DC6
00004828 B278 F648                  		cmp.w	($FFFFF648).w,d1
0000482C 6600                       		bne.s	loc_3DCC
0000482E                            
0000482E                            loc_3DC6:
0000482E 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00004834                            
00004834                            loc_3DCC:
00004834 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004838 4E75                       		rts	
0000483A                            ; ===========================================================================
0000483A                            
0000483A                            loc_3DD2:
0000483A 5302                       		subq.b	#1,d2
0000483C 6600                       		bne.s	loc_3E0E
0000483E 323C 0188                  		move.w	#$188,d1
00004842 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004846 6500                       		bcs.s	loc_3E04
00004848 323C 0900                  		move.w	#$900,d1
0000484C 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004850 6500                       		bcs.s	loc_3E04
00004852 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00004858 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
0000485E 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00004864 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
0000486A 4E75                       		rts	
0000486C                            ; ===========================================================================
0000486C                            
0000486C                            loc_3E04:
0000486C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004870 31C1 F648                  		move.w	d1,($FFFFF648).w
00004874 4E75                       		rts	
00004876                            ; ===========================================================================
00004876                            
00004876                            loc_3E0E:
00004876 0C40 1E00                  		cmpi.w	#$1E00,d0
0000487A 6500                       		bcs.s	locret_3E1A
0000487C 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00004882                            
00004882                            locret_3E1A:
00004882 4E75                       		rts	
00004884                            ; ===========================================================================
00004884                            
00004884                            DynWater_SBZ3:				; XREF: DynWater_Index
00004884 323C 0228                  		move.w	#$228,d1
00004888 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
0000488E 6500                       		bcs.s	loc_3E2C
00004890 323C 04C8                  		move.w	#$4C8,d1
00004894                            
00004894                            loc_3E2C:
00004894 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004898 4E75                       		rts
0000489A                            
0000489A                            ; ---------------------------------------------------------------------------
0000489A                            ; Labyrinth Zone "wind tunnels"	subroutine
0000489A                            ; ---------------------------------------------------------------------------
0000489A                            
0000489A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000489A                            
0000489A                            
0000489A                            LZWindTunnels:				; XREF: LZWaterEffects
0000489A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0000489E 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
000048A2 45F9 0000 0000             		lea	(LZWind_Data).l,a2
000048A8 7000                       		moveq	#0,d0
000048AA 1038 FE11                  		move.b	($FFFFFE11).w,d0
000048AE E748                       		lsl.w	#3,d0
000048B0 D4C0                       		adda.w	d0,a2
000048B2 7200                       		moveq	#0,d1
000048B4 4A38 FE11                  		tst.b	($FFFFFE11).w
000048B8 6600                       		bne.s	loc_3E56
000048BA 7201                       		moveq	#1,d1
000048BC 514A                       		subq.w	#8,a2
000048BE                            
000048BE                            loc_3E56:
000048BE 43F8 D000                  		lea	($FFFFD000).w,a1
000048C2                            
000048C2                            LZWind_Loop:
000048C2 3029 0008                  		move.w	8(a1),d0
000048C6 B052                       		cmp.w	(a2),d0
000048C8 6500 0000                  		bcs.w	loc_3EF4
000048CC B06A 0004                  		cmp.w	4(a2),d0
000048D0 6400 0000                  		bcc.w	loc_3EF4
000048D4 3429 000C                  		move.w	$C(a1),d2
000048D8 B46A 0002                  		cmp.w	2(a2),d2
000048DC 6500                       		bcs.s	loc_3EF4
000048DE B46A 0006                  		cmp.w	6(a2),d2
000048E2 6400                       		bcc.s	loc_3EF4
000048E4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000048E8 0200 003F                  		andi.b	#$3F,d0
000048EC 6600                       		bne.s	loc_3E90
000048EE 303C 00D0                  		move.w	#$D0,d0
000048F2 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play rushing water sound
000048F8                            
000048F8                            loc_3E90:
000048F8 4A38 F7C9                  		tst.b	($FFFFF7C9).w
000048FC 6600 0000                  		bne.w	locret_3F0A
00004900 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00004906 6400                       		bcc.s	loc_3F06
00004908 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
0000490E 0440 0080                  		subi.w	#$80,d0
00004912 B052                       		cmp.w	(a2),d0
00004914 6400                       		bcc.s	LZWind_Move
00004916 7002                       		moveq	#2,d0
00004918 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
0000491E 6600                       		bne.s	loc_3EBA
00004920 4440                       		neg.w	d0
00004922                            
00004922                            loc_3EBA:
00004922 D169 000C                  		add.w	d0,$C(a1)
00004926                            
00004926                            LZWind_Move:
00004926 5869 0008                  		addq.w	#4,8(a1)
0000492A 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00004930 337C 0000 0012             		move.w	#0,$12(a1)
00004936 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
0000493C 08E9 0001 0022             		bset	#1,$22(a1)
00004942 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00004948 6700                       		beq.s	LZWind_MoveDown	; if not, branch
0000494A 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
0000494E                            
0000494E                            LZWind_MoveDown:
0000494E 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00004954 6700                       		beq.s	locret_3EF2	; if not, branch
00004956 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
0000495A                            
0000495A                            locret_3EF2:
0000495A 4E75                       		rts	
0000495C                            ; ===========================================================================
0000495C                            
0000495C                            loc_3EF4:				; XREF: LZWindTunnels
0000495C 504A                       		addq.w	#8,a2
0000495E 51C9 FF62                  		dbf	d1,LZWind_Loop
00004962 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00004966 6700                       		beq.s	locret_3F0A
00004968 137C 0000 001C             		move.b	#0,$1C(a1)
0000496E                            
0000496E                            loc_3F06:
0000496E 4238 F7C7                  		clr.b	($FFFFF7C7).w
00004972                            
00004972                            locret_3F0A:
00004972 4E75                       		rts	
00004974                            ; End of function LZWindTunnels
00004974                            
00004974                            ; ===========================================================================
00004974 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
0000497C 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
0000498E 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
0000499C                            					; XREF: LZWindTunnels
0000499C                            		even
0000499C                            
0000499C                            ; ---------------------------------------------------------------------------
0000499C                            ; Labyrinth Zone water slide subroutine
0000499C                            ; ---------------------------------------------------------------------------
0000499C                            
0000499C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000499C                            
0000499C                            
0000499C                            LZWaterSlides:				; XREF: LZWaterEffects
0000499C 43F8 D000                  		lea	($FFFFD000).w,a1
000049A0 0829 0001 0022             		btst	#1,$22(a1)
000049A6 6600                       		bne.s	loc_3F6A
000049A8 3029 000C                  		move.w	$C(a1),d0
000049AC E248                       		lsr.w	#1,d0
000049AE 0240 0380                  		andi.w	#$380,d0
000049B2 1229 0008                  		move.b	8(a1),d1
000049B6 0241 007F                  		andi.w	#$7F,d1
000049BA D041                       		add.w	d1,d0
000049BC 45F8 A400                  		lea	($FFFFA400).w,a2
000049C0 1032 0000                  		move.b	(a2,d0.w),d0
000049C4 45FA 0000                  		lea	byte_3FCF(pc),a2
000049C8 7206                       		moveq	#6,d1
000049CA                            
000049CA                            loc_3F62:
000049CA B022                       		cmp.b	-(a2),d0
000049CC 57C9 FFFC                  		dbeq	d1,loc_3F62
000049D0 6700                       		beq.s	LZSlide_Move
000049D2                            
000049D2                            loc_3F6A:
000049D2 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000049D6 6700                       		beq.s	locret_3F7A
000049D8 337C 0005 003E             		move.w	#5,$3E(a1)
000049DE 4238 F7CA                  		clr.b	($FFFFF7CA).w
000049E2                            
000049E2                            locret_3F7A:
000049E2 4E75                       		rts	
000049E4                            ; ===========================================================================
000049E4                            
000049E4                            LZSlide_Move:				; XREF: LZWaterSlides
000049E4 0C41 0003                  		cmpi.w	#3,d1
000049E8 6400                       		bcc.s	loc_3F84
000049EA 4E71                       		nop	
000049EC                            
000049EC                            loc_3F84:
000049EC 08A9 0000 0022             		bclr	#0,$22(a1)
000049F2 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
000049F6 1340 0014                  		move.b	d0,$14(a1)
000049FA 6A00                       		bpl.s	loc_3F9A
000049FC 08E9 0000 0022             		bset	#0,$22(a1)
00004A02                            
00004A02                            loc_3F9A:
00004A02 4229 0015                  		clr.b	$15(a1)
00004A06 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
00004A0C 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
00004A12 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004A16 0200 001F                  		andi.b	#$1F,d0
00004A1A 6600                       		bne.s	locret_3FBE
00004A1C 303C 00D0                  		move.w	#$D0,d0
00004A20 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play water sound
00004A26                            
00004A26                            locret_3FBE:
00004A26 4E75                       		rts	
00004A28                            ; End of function LZWaterSlides
00004A28                            
00004A28                            ; ===========================================================================
00004A28 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00004A37 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00004A38                            		even
00004A38                            
00004A38                            ; ---------------------------------------------------------------------------
00004A38                            ; Subroutine to	move Sonic in demo mode
00004A38                            ; ---------------------------------------------------------------------------
00004A38                            
00004A38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004A38                            
00004A38                            
00004A38                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00004A38 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004A3C 6600                       		bne.s	MoveDemo_On	; if yes, branch
00004A3E 4E75                       		rts	
00004A40                            ; ===========================================================================
00004A40                            
00004A40                            ; This is an unused subroutine for recording a demo
00004A40                            
00004A40                            MoveDemo_Record:
00004A40 43F9 0008 0000             		lea	($80000).l,a1
00004A46 3038 F790                  		move.w	($FFFFF790).w,d0
00004A4A D2C0                       		adda.w	d0,a1
00004A4C 1038 F604                  		move.b	($FFFFF604).w,d0
00004A50 B011                       		cmp.b	(a1),d0
00004A52 6600                       		bne.s	loc_3FFA
00004A54 5229 0001                  		addq.b	#1,1(a1)
00004A58 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004A5E 6700                       		beq.s	loc_3FFA
00004A60 4E75                       		rts	
00004A62                            ; ===========================================================================
00004A62                            
00004A62                            loc_3FFA:				; XREF: MoveDemo_Record
00004A62 1340 0002                  		move.b	d0,2(a1)
00004A66 137C 0000 0003             		move.b	#0,3(a1)
00004A6C 5478 F790                  		addq.w	#2,($FFFFF790).w
00004A70 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
00004A76 4E75                       		rts	
00004A78                            ; ===========================================================================
00004A78                            
00004A78                            MoveDemo_On:				; XREF: MoveSonicInDemo
00004A78 4A38 F604                  		tst.b	($FFFFF604).w
00004A7C 6A00                       		bpl.s	loc_4022
00004A7E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004A82 6B00                       		bmi.s	loc_4022
00004A84 11FC 0004 F600             		move.b	#4,($FFFFF600).w
00004A8A                            
00004A8A                            loc_4022:
00004A8A 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004A90 7000                       		moveq	#0,d0
00004A92 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004A96 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004A9C 6600                       		bne.s	loc_4038
00004A9E 7006                       		moveq	#6,d0
00004AA0                            
00004AA0                            loc_4038:
00004AA0 E548                       		lsl.w	#2,d0
00004AA2 2271 0000                  		movea.l	(a1,d0.w),a1
00004AA6 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004AAA 6A00                       		bpl.s	loc_4056
00004AAC 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00004AB2 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00004AB6 5340                       		subq.w	#1,d0
00004AB8 E548                       		lsl.w	#2,d0
00004ABA 2271 0000                  		movea.l	(a1,d0.w),a1
00004ABE                            
00004ABE                            loc_4056:
00004ABE 3038 F790                  		move.w	($FFFFF790).w,d0
00004AC2 D2C0                       		adda.w	d0,a1
00004AC4 1011                       		move.b	(a1),d0
00004AC6 41F8 F604                  		lea	($FFFFF604).w,a0
00004ACA 1200                       		move.b	d0,d1
00004ACC 1410                       		move.b	(a0),d2
00004ACE B500                       		eor.b	d2,d0
00004AD0 10C1                       		move.b	d1,(a0)+
00004AD2 C001                       		and.b	d1,d0
00004AD4 10C0                       		move.b	d0,(a0)+
00004AD6 5338 F792                  		subq.b	#1,($FFFFF792).w
00004ADA 6400                       		bcc.s	locret_407E
00004ADC 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
00004AE2 5478 F790                  		addq.w	#2,($FFFFF790).w
00004AE6                            
00004AE6                            locret_407E:
00004AE6 4E75                       		rts	
00004AE8                            ; End of function MoveSonicInDemo
00004AE8                            
00004AE8                            ; ===========================================================================
00004AE8                            ; ---------------------------------------------------------------------------
00004AE8                            ; Demo sequence	pointers
00004AE8                            ; ---------------------------------------------------------------------------
00004AE8                            Demo_Index:
00004AE8                            	include "_inc\Demo pointers for intro.asm"
00004AE8                            ; ---------------------------------------------------------------------------
00004AE8                            ; Demo sequence	pointers
00004AE8                            ; ---------------------------------------------------------------------------
00004AE8 0000 0000                  	dc.l Demo_GHZ
00004AEC 0000 0000                  	dc.l Demo_GHZ
00004AF0 0000 0000                  	dc.l Demo_MZ
00004AF4 0000 0000                  	dc.l Demo_MZ
00004AF8 0000 0000                  	dc.l Demo_SYZ
00004AFC 0000 0000                  	dc.l Demo_SYZ
00004B00 0000 0000                  	dc.l Demo_SS
00004B04 0000 0000                  	dc.l Demo_SS
00004B04 0000 0000                  	dc.l Demo_SS
00004B08                            
00004B08                            Demo_EndIndex:
00004B08                            	include "_inc\Demo pointers for ending.asm"
00004B08                            ; ---------------------------------------------------------------------------
00004B08                            ; Demo (ending) sequence pointers
00004B08                            ; ---------------------------------------------------------------------------
00004B08 0000 0000                  	dc.l Demo_EndGHZ1
00004B0C 0000 0000                  	dc.l Demo_EndMZ
00004B10 0000 0000                  	dc.l Demo_EndSYZ
00004B14 0000 0000                  	dc.l Demo_EndLZ
00004B18 0000 0000                  	dc.l Demo_EndSLZ
00004B1C 0000 0000                  	dc.l Demo_EndSBZ1
00004B20 0000 0000                  	dc.l Demo_EndSBZ2
00004B24 0000 0000                  	dc.l Demo_EndGHZ2
00004B24 0000 0000                  	dc.l Demo_EndGHZ2
00004B28                            
00004B28 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00004B38 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00004B48 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004B58                            		even
00004B58                            
00004B58                            ; ---------------------------------------------------------------------------
00004B58                            ; Collision index loading subroutine
00004B58                            ; ---------------------------------------------------------------------------
00004B58                            
00004B58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004B58                            
00004B58                            
00004B58                            ColIndexLoad:				; XREF: Level
00004B58 7000                       		moveq	#0,d0
00004B5A 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004B5E E548                       		lsl.w	#2,d0
00004B60 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
00004B66 4E75                       		rts	
00004B68                            ; End of function ColIndexLoad
00004B68                            
00004B68                            ; ===========================================================================
00004B68                            ; ---------------------------------------------------------------------------
00004B68                            ; Collision index pointers
00004B68                            ; ---------------------------------------------------------------------------
00004B68                            ColPointers:
00004B68                            	include "_inc\Collision index pointers.asm"
00004B68                            ; ---------------------------------------------------------------------------
00004B68                            ; Collision index pointers
00004B68                            ; ---------------------------------------------------------------------------
00004B68 0000 0000                  	dc.l Col_GHZ
00004B6C 0000 0000                  	dc.l Col_LZ
00004B70 0000 0000                  	dc.l Col_MZ
00004B74 0000 0000                  	dc.l Col_SLZ
00004B78 0000 0000                  	dc.l Col_SYZ
00004B7C 0000 0000                  	dc.l Col_SBZ
00004B7C 0000 0000                  	dc.l Col_SBZ
00004B80                            
00004B80                            ; ---------------------------------------------------------------------------
00004B80                            ; Oscillating number subroutine
00004B80                            ; ---------------------------------------------------------------------------
00004B80                            
00004B80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004B80                            
00004B80                            
00004B80                            OscillateNumInit:			; XREF: Level
00004B80 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004B84 45F9 0000 0000             		lea	(Osc_Data).l,a2
00004B8A 7220                       		moveq	#$20,d1
00004B8C                            
00004B8C                            Osc_Loop:
00004B8C 32DA                       		move.w	(a2)+,(a1)+
00004B8E 51C9 FFFC                  		dbf	d1,Osc_Loop
00004B92 4E75                       		rts	
00004B94                            ; End of function OscillateNumInit
00004B94                            
00004B94                            ; ===========================================================================
00004B94 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00004B98 0000 0080                  		dc.w 0,	$80
00004B9C 0000 0080                  		dc.w 0,	$80
00004BA0 0000 0080                  		dc.w 0,	$80
00004BA4 0000 0080                  		dc.w 0,	$80
00004BA8 0000 0080                  		dc.w 0,	$80
00004BAC 0000 0080                  		dc.w 0,	$80
00004BB0 0000 0080                  		dc.w 0,	$80
00004BB4 0000 0080                  		dc.w 0,	$80
00004BB8 0000 50F0                  		dc.w 0,	$50F0
00004BBC 011E 2080                  		dc.w $11E, $2080
00004BC0 00B4 3080                  		dc.w $B4, $3080
00004BC4 010E 5080                  		dc.w $10E, $5080
00004BC8 01C2 7080                  		dc.w $1C2, $7080
00004BCC 0276 0080                  		dc.w $276, $80
00004BD0 0000 0080                  		dc.w 0,	$80
00004BD4 0000                       		dc.w 0
00004BD6                            		even
00004BD6                            
00004BD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004BD6                            
00004BD6                            
00004BD6                            OscillateNumDo:				; XREF: Level
00004BD6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004BDC 6400                       		bcc.s	locret_41C4
00004BDE 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004BE2 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00004BE8 3619                       		move.w	(a1)+,d3
00004BEA 720F                       		moveq	#$F,d1
00004BEC                            
00004BEC                            loc_4184:
00004BEC 341A                       		move.w	(a2)+,d2
00004BEE 381A                       		move.w	(a2)+,d4
00004BF0 0303                       		btst	d1,d3
00004BF2 6600                       		bne.s	loc_41A4
00004BF4 3029 0002                  		move.w	2(a1),d0
00004BF8 D042                       		add.w	d2,d0
00004BFA 3340 0002                  		move.w	d0,2(a1)
00004BFE D151                       		add.w	d0,0(a1)
00004C00 B811                       		cmp.b	0(a1),d4
00004C02 6200                       		bhi.s	loc_41BA
00004C04 03C3                       		bset	d1,d3
00004C06 6000                       		bra.s	loc_41BA
00004C08                            ; ===========================================================================
00004C08                            
00004C08                            loc_41A4:				; XREF: OscillateNumDo
00004C08 3029 0002                  		move.w	2(a1),d0
00004C0C 9042                       		sub.w	d2,d0
00004C0E 3340 0002                  		move.w	d0,2(a1)
00004C12 D151                       		add.w	d0,0(a1)
00004C14 B811                       		cmp.b	0(a1),d4
00004C16 6300                       		bls.s	loc_41BA
00004C18 0383                       		bclr	d1,d3
00004C1A                            
00004C1A                            loc_41BA:
00004C1A 5849                       		addq.w	#4,a1
00004C1C 51C9 FFCE                  		dbf	d1,loc_4184
00004C20 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00004C24                            
00004C24                            locret_41C4:
00004C24 4E75                       		rts	
00004C26                            ; End of function OscillateNumDo
00004C26                            
00004C26                            ; ===========================================================================
00004C26 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
00004C2A 0002 0018                  		dc.w 2,	$18
00004C2E 0002 0020                  		dc.w 2,	$20
00004C32 0002 0030                  		dc.w 2,	$30
00004C36 0004 0020                  		dc.w 4,	$20
00004C3A 0008 0008                  		dc.w 8,	8
00004C3E 0008 0040                  		dc.w 8,	$40
00004C42 0004 0040                  		dc.w 4,	$40
00004C46 0002 0050                  		dc.w 2,	$50
00004C4A 0002 0050                  		dc.w 2,	$50
00004C4E 0002 0020                  		dc.w 2,	$20
00004C52 0003 0030                  		dc.w 3,	$30
00004C56 0005 0050                  		dc.w 5,	$50
00004C5A 0007 0070                  		dc.w 7,	$70
00004C5E 0002 0010                  		dc.w 2,	$10
00004C62 0002 0010                  		dc.w 2,	$10
00004C66                            		even
00004C66                            
00004C66                            ; ---------------------------------------------------------------------------
00004C66                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00004C66                            ; ---------------------------------------------------------------------------
00004C66                            
00004C66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004C66                            
00004C66                            
00004C66                            ChangeRingFrame:			; XREF: Level
00004C66 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004C6A 6A00                       		bpl.s	loc_421C
00004C6C 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00004C72 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00004C76 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004C7C                            
00004C7C                            loc_421C:
00004C7C 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00004C80 6A00                       		bpl.s	loc_4232
00004C82 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00004C88 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004C8C 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00004C92                            
00004C92                            loc_4232:
00004C92 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00004C96 6A00                       		bpl.s	loc_4250
00004C98 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004C9E 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00004CA2 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00004CA8 6500                       		bcs.s	loc_4250
00004CAA 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00004CB0                            
00004CB0                            loc_4250:
00004CB0 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00004CB4 6700                       		beq.s	locret_4272
00004CB6 7000                       		moveq	#0,d0
00004CB8 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00004CBC D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00004CC0 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
00004CC4 EF58                       		rol.w	#7,d0
00004CC6 0240 0003                  		andi.w	#3,d0
00004CCA 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00004CCE 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
00004CD2                            
00004CD2                            locret_4272:
00004CD2 4E75                       		rts	
00004CD4                            ; End of function ChangeRingFrame
00004CD4                            
00004CD4                            ; ---------------------------------------------------------------------------
00004CD4                            ; End-of-act signpost pattern loading subroutine
00004CD4                            ; ---------------------------------------------------------------------------
00004CD4                            
00004CD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004CD4                            
00004CD4                            
00004CD4                            SignpostArtLoad:			; XREF: Level
00004CD4 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004CD8 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00004CDC 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
00004CE2 6700                       		beq.s	Signpost_Exit	; if yes, branch
00004CE4 3038 F700                  		move.w	($FFFFF700).w,d0
00004CE8 3238 F72A                  		move.w	($FFFFF72A).w,d1
00004CEC 0441 0100                  		subi.w	#$100,d1
00004CF0 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00004CF2 6D00                       		blt.s	Signpost_Exit	; if not, branch
00004CF4 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00004CF8 6700                       		beq.s	Signpost_Exit
00004CFA B278 F728                  		cmp.w	($FFFFF728).w,d1
00004CFE 6700                       		beq.s	Signpost_Exit
00004D00 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
00004D04 7012                       		moveq	#$12,d0
00004D06 6000 CA14                  		bra.w	LoadPLC2	; load signpost	patterns
00004D0A                            ; ===========================================================================
00004D0A                            
00004D0A                            Signpost_Exit:
00004D0A 4E75                       		rts	
00004D0C                            ; End of function SignpostArtLoad
00004D0C                            
00004D0C                            ; ===========================================================================
00004D0C                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004D8C                            Demo_MZ:	incbin	demodata\i_mz.bin
00004EBC                            Demo_SYZ:	incbin	demodata\i_syz.bin
00004F3C                            Demo_SS:	incbin	demodata\i_ss.bin
0000503C                            ; ===========================================================================
0000503C                            
0000503C                            ; ---------------------------------------------------------------------------
0000503C                            ; Special Stage
0000503C                            ; ---------------------------------------------------------------------------
0000503C                            
0000503C                            SpecialStage:				; XREF: GameModeArray
0000503C 303C 00CA                  		move.w	#$CA,d0
00005040 6100 C434                  		bsr.w	PlaySound_Special ; play special stage entry sound
00005044 6100 D268                  		bsr.w	Pal_MakeFlash
00005048 46FC 2700                  		move	#$2700,sr
0000504C 4DF9 00C0 0004             		lea	($C00004).l,a6
00005052 3CBC 8B03                  		move.w	#$8B03,(a6)
00005056 3CBC 8004                  		move.w	#$8004,(a6)
0000505A 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00005060 3CBC 9011                  		move.w	#$9011,(a6)
00005064 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005068 0200 00BF                  		andi.b	#$BF,d0
0000506C 33C0 00C0 0004             		move.w	d0,($C00004).l
00005072 6100 C30C                  		bsr.w	ClearScreen
00005076 46FC 2300                  		move	#$2300,sr
0000507A 4BF9 00C0 0004             		lea	($C00004).l,a5
00005080 3ABC 8F01                  		move.w	#$8F01,(a5)
00005084 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
0000508A 3ABC 9780                  		move.w	#$9780,(a5)
0000508E 2ABC 5000 0081             		move.l	#$50000081,(a5)
00005094 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000509C                            
0000509C                            loc_463C:
0000509C 3215                       		move.w	(a5),d1
0000509E 0801 0001                  		btst	#1,d1
000050A2 66F8                       		bne.s	loc_463C
000050A4 3ABC 8F02                  		move.w	#$8F02,(a5)
000050A8 6100 0000                  		bsr.w	SS_BGLoad
000050AC 7014                       		moveq	#$14,d0
000050AE 6100 C7A6                  		bsr.w	RunPLC_ROM	; load special stage patterns
000050B2 43F8 D000                  		lea	($FFFFD000).w,a1
000050B6 7000                       		moveq	#0,d0
000050B8 323C 07FF                  		move.w	#$7FF,d1
000050BC                            
000050BC                            SS_ClrObjRam:
000050BC 22C0                       		move.l	d0,(a1)+
000050BE 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
000050C2                            
000050C2 43F8 F700                  		lea	($FFFFF700).w,a1
000050C6 7000                       		moveq	#0,d0
000050C8 323C 003F                  		move.w	#$3F,d1
000050CC                            
000050CC                            SS_ClrRam:
000050CC 22C0                       		move.l	d0,(a1)+
000050CE 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
000050D2                            
000050D2 43F8 FE60                  		lea	($FFFFFE60).w,a1
000050D6 7000                       		moveq	#0,d0
000050D8 323C 0027                  		move.w	#$27,d1
000050DC                            
000050DC                            SS_ClrRam2:
000050DC 22C0                       		move.l	d0,(a1)+
000050DE 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
000050E2                            
000050E2 43F8 AA00                  		lea	($FFFFAA00).w,a1
000050E6 7000                       		moveq	#0,d0
000050E8 323C 007F                  		move.w	#$7F,d1
000050EC                            
000050EC                            SS_ClrNemRam:
000050EC 22C0                       		move.l	d0,(a1)+
000050EE 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
000050F2                            
000050F2 4238 F64E                  		clr.b	($FFFFF64E).w
000050F6 4278 FE02                  		clr.w	($FFFFFE02).w
000050FA 700A                       		moveq	#$A,d0
000050FC 6100 D330                  		bsr.w	PalLoad1	; load special stage pallet
00005100 4EB9 0000 0000             		jsr	SS_Load
00005106 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
0000510E 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00005116 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
0000511C 6100 0000                  		bsr.w	PalCycle_SS
00005120 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00005124 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
0000512A 303C 0089                  		move.w	#$89,d0
0000512E 6100 C340                  		bsr.w	PlaySound	; play special stage BG	music
00005132 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00005138 43F9 0000 4AE8             		lea	(Demo_Index).l,a1
0000513E 7006                       		moveq	#6,d0
00005140 E548                       		lsl.w	#2,d0
00005142 2271 0000                  		movea.l	(a1,d0.w),a1
00005146 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
0000514C 5338 F792                  		subq.b	#1,($FFFFF792).w
00005150 4278 FE20                  		clr.w	($FFFFFE20).w
00005154 4238 FE1B                  		clr.b	($FFFFFE1B).w
00005158 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
0000515E 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00005164 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00005168 6700                       		beq.s	SS_NoDebug	; if not, branch
0000516A 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00005170 6700                       		beq.s	SS_NoDebug	; if not, branch
00005172 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005178                            
00005178                            SS_NoDebug:
00005178 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000517C 0000 0040                  		ori.b	#$40,d0
00005180 33C0 00C0 0004             		move.w	d0,($C00004).l
00005186 6100 D07A                  		bsr.w	Pal_MakeWhite
0000518A                            
0000518A                            ; ---------------------------------------------------------------------------
0000518A                            ; Main Special Stage loop
0000518A                            ; ---------------------------------------------------------------------------
0000518A                            
0000518A                            SS_MainLoop:
0000518A 6100 C2F6                  		bsr.w	PauseGame
0000518E 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00005194 6100 E20C                  		bsr.w	DelayProgram
00005198 6100 F89E                  		bsr.w	MoveSonicInDemo
0000519C 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
000051A2 4EB9 0000 0000             		jsr	ObjectsLoad
000051A8 4EB9 0000 0000             		jsr	BuildSprites
000051AE 4EB9 0000 0000             		jsr	SS_ShowLayout
000051B4 6100 0000                  		bsr.w	SS_BGAnimate
000051B8 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000051BC 6700                       		beq.s	SS_ChkEnd	; if not, branch
000051BE 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
000051C2 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
000051C6                            
000051C6                            SS_ChkEnd:
000051C6 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
000051CC 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
000051D0                            
000051D0 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000051D4 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
000051D8 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000051DE 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
000051E4 6500                       		bcs.s	SS_End		; if not, branch
000051E6 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
000051EA                            
000051EA                            SS_End:
000051EA 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
000051F0 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000051F6 4278 F794                  		clr.w	($FFFFF794).w
000051FA                            
000051FA                            SS_EndLoop:
000051FA 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00005200 6100 E1A0                  		bsr.w	DelayProgram
00005204 6100 F832                  		bsr.w	MoveSonicInDemo
00005208 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
0000520E 4EB9 0000 0000             		jsr	ObjectsLoad
00005214 4EB9 0000 0000             		jsr	BuildSprites
0000521A 4EB9 0000 0000             		jsr	SS_ShowLayout
00005220 6100 0000                  		bsr.w	SS_BGAnimate
00005224 5378 F794                  		subq.w	#1,($FFFFF794).w
00005228 6A00                       		bpl.s	loc_47D4
0000522A 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005230 6100 D09C                  		bsr.w	Pal_ToWhite
00005234                            
00005234                            loc_47D4:
00005234 4A78 F614                  		tst.w	($FFFFF614).w
00005238 66C0                       		bne.s	SS_EndLoop
0000523A                            
0000523A 46FC 2700                  		move	#$2700,sr
0000523E 4DF9 00C0 0004             		lea	($C00004).l,a6
00005244 3CBC 8230                  		move.w	#$8230,(a6)
00005248 3CBC 8407                  		move.w	#$8407,(a6)
0000524C 3CBC 9001                  		move.w	#$9001,(a6)
00005250 6100 C12E                  		bsr.w	ClearScreen
00005254 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
0000525E 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005264 6100 C344                  		bsr.w	NemDec
00005268 4EB9 0000 0000             		jsr	Hud_Base
0000526E 4278 C800                  		clr.w	($FFFFC800).w
00005272 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
0000527A 46FC 2300                  		move	#$2300,sr
0000527E 7011                       		moveq	#$11,d0
00005280 6100 D1E8                  		bsr.w	PalLoad2	; load results screen pallet
00005284 7000                       		moveq	#0,d0
00005286 6100 C494                  		bsr.w	LoadPLC2
0000528A 701B                       		moveq	#$1B,d0
0000528C 6100 C45C                  		bsr.w	LoadPLC		; load results screen patterns
00005290 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00005296 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
0000529C 3038 FE20                  		move.w	($FFFFFE20).w,d0
000052A0 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
000052A4 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
000052A8 303C 008E                  		move.w	#$8E,d0
000052AC 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play end-of-level music
000052B2 43F8 D000                  		lea	($FFFFD000).w,a1
000052B6 7000                       		moveq	#0,d0
000052B8 323C 07FF                  		move.w	#$7FF,d1
000052BC                            
000052BC                            SS_EndClrObjRam:
000052BC 22C0                       		move.l	d0,(a1)+
000052BE 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
000052C2                            
000052C2 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
000052C8                            
000052C8                            SS_NormalExit:
000052C8 6100 C1B8                  		bsr.w	PauseGame
000052CC 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
000052D2 6100 E0CE                  		bsr.w	DelayProgram
000052D6 4EB9 0000 0000             		jsr	ObjectsLoad
000052DC 4EB9 0000 0000             		jsr	BuildSprites
000052E2 6100 C472                  		bsr.w	RunPLC_RAM
000052E6 4A78 FE02                  		tst.w	($FFFFFE02).w
000052EA 67DC                       		beq.s	SS_NormalExit
000052EC 4AB8 F680                  		tst.l	($FFFFF680).w
000052F0 66D6                       		bne.s	SS_NormalExit
000052F2 303C 00CA                  		move.w	#$CA,d0
000052F6 6100 C17E                  		bsr.w	PlaySound_Special ; play special stage exit sound
000052FA 6100 CFB2                  		bsr.w	Pal_MakeFlash
000052FE 4E75                       		rts	
00005300                            ; ===========================================================================
00005300                            
00005300                            SS_ToSegaScreen:
00005300 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00005306 4E75                       		rts
00005308                            
00005308                            ; ---------------------------------------------------------------------------
00005308                            ; Special stage	background loading subroutine
00005308                            ; ---------------------------------------------------------------------------
00005308                            
00005308                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005308                            
00005308                            
00005308                            SS_BGLoad:				; XREF: SpecialStage
00005308 43F9 00FF 0000             		lea	($FF0000).l,a1
0000530E 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00005314 303C 4051                  		move.w	#$4051,d0
00005318 6100 C56E                  		bsr.w	EniDec
0000531C 263C 5000 0001             		move.l	#$50000001,d3
00005322 45F9 00FF 0080             		lea	($FF0080).l,a2
00005328 7E06                       		moveq	#6,d7
0000532A                            
0000532A                            loc_48BE:
0000532A 2003                       		move.l	d3,d0
0000532C 7C03                       		moveq	#3,d6
0000532E 7800                       		moveq	#0,d4
00005330 0C47 0003                  		cmpi.w	#3,d7
00005334 6400                       		bcc.s	loc_48CC
00005336 7801                       		moveq	#1,d4
00005338                            
00005338                            loc_48CC:
00005338 7A07                       		moveq	#7,d5
0000533A                            
0000533A                            loc_48CE:
0000533A 224A                       		movea.l	a2,a1
0000533C 0A04 0001                  		eori.b	#1,d4
00005340 6600                       		bne.s	loc_48E2
00005342 0C47 0006                  		cmpi.w	#6,d7
00005346 6600                       		bne.s	loc_48F2
00005348 43F9 00FF 0000             		lea	($FF0000).l,a1
0000534E                            
0000534E                            loc_48E2:
0000534E 48E7 F800                  		movem.l	d0-d4,-(sp)
00005352 7207                       		moveq	#7,d1
00005354 7407                       		moveq	#7,d2
00005356 6100 C1A2                  		bsr.w	ShowVDPGraphics
0000535A 4CDF 001F                  		movem.l	(sp)+,d0-d4
0000535E                            
0000535E                            loc_48F2:
0000535E 0680 0010 0000             		addi.l	#$100000,d0
00005364 51CD FFD4                  		dbf	d5,loc_48CE
00005368 0680 0380 0000             		addi.l	#$3800000,d0
0000536E 0A04 0001                  		eori.b	#1,d4
00005372 51CE FFC4                  		dbf	d6,loc_48CC
00005376 0683 1000 0000             		addi.l	#$10000000,d3
0000537C 6A00                       		bpl.s	loc_491C
0000537E 4843                       		swap	d3
00005380 0683 0000 C000             		addi.l	#$C000,d3
00005386 4843                       		swap	d3
00005388                            
00005388                            loc_491C:
00005388 D4FC 0080                  		adda.w	#$80,a2
0000538C 51CF FF9C                  		dbf	d7,loc_48BE
00005390 43F9 00FF 0000             		lea	($FF0000).l,a1
00005396 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
0000539C 303C 4000                  		move.w	#$4000,d0
000053A0 6100 C4E6                  		bsr.w	EniDec
000053A4 43F9 00FF 0000             		lea	($FF0000).l,a1
000053AA 203C 4000 0003             		move.l	#$40000003,d0
000053B0 723F                       		moveq	#$3F,d1
000053B2 741F                       		moveq	#$1F,d2
000053B4 6100 C144                  		bsr.w	ShowVDPGraphics
000053B8 43F9 00FF 0000             		lea	($FF0000).l,a1
000053BE 203C 5000 0003             		move.l	#$50000003,d0
000053C4 723F                       		moveq	#$3F,d1
000053C6 743F                       		moveq	#$3F,d2
000053C8 6100 C130                  		bsr.w	ShowVDPGraphics
000053CC 4E75                       		rts	
000053CE                            ; End of function SS_BGLoad
000053CE                            
000053CE                            ; ---------------------------------------------------------------------------
000053CE                            ; Pallet cycling routine - special stage
000053CE                            ; ---------------------------------------------------------------------------
000053CE                            
000053CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000053CE                            
000053CE                            
000053CE                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
000053CE 4A78 F63A                  		tst.w	($FFFFF63A).w
000053D2 6600                       		bne.s	locret_49E6
000053D4 5378 F79C                  		subq.w	#1,($FFFFF79C).w
000053D8 6A00                       		bpl.s	locret_49E6
000053DA 4DF9 00C0 0004             		lea	($C00004).l,a6
000053E0 3038 F79A                  		move.w	($FFFFF79A).w,d0
000053E4 5278 F79A                  		addq.w	#1,($FFFFF79A).w
000053E8 0240 001F                  		andi.w	#$1F,d0
000053EC E548                       		lsl.w	#2,d0
000053EE 41F9 0000 0000             		lea	(byte_4A3C).l,a0
000053F4 D0C0                       		adda.w	d0,a0
000053F6 1018                       		move.b	(a0)+,d0
000053F8 6A00                       		bpl.s	loc_4992
000053FA 303C 01FF                  		move.w	#$1FF,d0
000053FE                            
000053FE                            loc_4992:
000053FE 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00005402 7000                       		moveq	#0,d0
00005404 1018                       		move.b	(a0)+,d0
00005406 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
0000540A 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00005410 43F1 0000                  		lea	(a1,d0.w),a1
00005414 303C 8200                  		move.w	#-$7E00,d0
00005418 1019                       		move.b	(a1)+,d0
0000541A 3C80                       		move.w	d0,(a6)
0000541C 11D1 F616                  		move.b	(a1),($FFFFF616).w
00005420 303C 8400                  		move.w	#-$7C00,d0
00005424 1018                       		move.b	(a0)+,d0
00005426 3C80                       		move.w	d0,(a6)
00005428 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00005432 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
0000543A 7000                       		moveq	#0,d0
0000543C 1018                       		move.b	(a0)+,d0
0000543E 6B00                       		bmi.s	loc_49E8
00005440 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00005446 D2C0                       		adda.w	d0,a1
00005448 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
0000544C 24D9                       		move.l	(a1)+,(a2)+
0000544E 24D9                       		move.l	(a1)+,(a2)+
00005450 24D9                       		move.l	(a1)+,(a2)+
00005452                            
00005452                            locret_49E6:
00005452 4E75                       		rts	
00005454                            ; ===========================================================================
00005454                            
00005454                            loc_49E8:				; XREF: PalCycle_SS
00005454 3238 F79E                  		move.w	($FFFFF79E).w,d1
00005458 0C40 008A                  		cmpi.w	#$8A,d0
0000545C 6500                       		bcs.s	loc_49F4
0000545E 5241                       		addq.w	#1,d1
00005460                            
00005460                            loc_49F4:
00005460 C2FC 002A                  		mulu.w	#$2A,d1
00005464 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
0000546A D2C1                       		adda.w	d1,a1
0000546C 0240 007F                  		andi.w	#$7F,d0
00005470 0880 0000                  		bclr	#0,d0
00005474 6700                       		beq.s	loc_4A18
00005476 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
0000547A 24D1                       		move.l	(a1),(a2)+
0000547C 24E9 0004                  		move.l	4(a1),(a2)+
00005480 24E9 0008                  		move.l	8(a1),(a2)+
00005484                            
00005484                            loc_4A18:
00005484 D2FC 000C                  		adda.w	#$C,a1
00005488 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
0000548C 0C40 000A                  		cmpi.w	#$A,d0
00005490 6500                       		bcs.s	loc_4A2E
00005492 0440 000A                  		subi.w	#$A,d0
00005496 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
0000549A                            
0000549A                            loc_4A2E:
0000549A 3200                       		move.w	d0,d1
0000549C D040                       		add.w	d0,d0
0000549E D041                       		add.w	d1,d0
000054A0 D2C0                       		adda.w	d0,a1
000054A2 24D9                       		move.l	(a1)+,(a2)+
000054A4 34D9                       		move.w	(a1)+,(a2)+
000054A6 4E75                       		rts	
000054A8                            ; End of function PalCycle_SS
000054A8                            
000054A8                            ; ===========================================================================
000054A8 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
000054B8                            					; XREF: PalCycle_SS
000054B8 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
000054C8 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
000054D8 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
000054E8 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
000054F8 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00005508 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00005518 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00005528                            		even
00005528 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00005536                            					; XREF: PalCycle_SS
00005536                            		even
00005536                            
00005536                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
0000557E                            		even
0000557E                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00005650                            		even
00005650                            
00005650                            ; ---------------------------------------------------------------------------
00005650                            ; Subroutine to	make the special stage background animated
00005650                            ; ---------------------------------------------------------------------------
00005650                            
00005650                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005650                            
00005650                            
00005650                            SS_BGAnimate:				; XREF: SpecialStage
00005650 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005654 6600                       		bne.s	loc_4BF6
00005656 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
0000565C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005662                            
00005662                            loc_4BF6:
00005662 0C40 0008                  		cmpi.w	#8,d0
00005666 6400                       		bcc.s	loc_4C4E
00005668 0C40 0006                  		cmpi.w	#6,d0
0000566C 6600                       		bne.s	loc_4C10
0000566E 5278 F718                  		addq.w	#1,($FFFFF718).w
00005672 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00005676 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000567C                            
0000567C                            loc_4C10:
0000567C 7000                       		moveq	#0,d0
0000567E 3038 F708                  		move.w	($FFFFF708).w,d0
00005682 4440                       		neg.w	d0
00005684 4840                       		swap	d0
00005686 43F9 0000 0000             		lea	(byte_4CCC).l,a1
0000568C 47F8 AA00                  		lea	($FFFFAA00).w,a3
00005690 7609                       		moveq	#9,d3
00005692                            
00005692                            loc_4C26:
00005692 302B 0002                  		move.w	2(a3),d0
00005696 6100 DD3C                  		bsr.w	CalcSine
0000569A 7400                       		moveq	#0,d2
0000569C 1419                       		move.b	(a1)+,d2
0000569E C1C2                       		muls.w	d2,d0
000056A0 E080                       		asr.l	#8,d0
000056A2 36C0                       		move.w	d0,(a3)+
000056A4 1419                       		move.b	(a1)+,d2
000056A6 4882                       		ext.w	d2
000056A8 D55B                       		add.w	d2,(a3)+
000056AA 51CB FFE6                  		dbf	d3,loc_4C26
000056AE 47F8 AA00                  		lea	($FFFFAA00).w,a3
000056B2 45F9 0000 0000             		lea	(byte_4CB8).l,a2
000056B8 6000                       		bra.s	loc_4C7E
000056BA                            ; ===========================================================================
000056BA                            
000056BA                            loc_4C4E:				; XREF: SS_BGAnimate
000056BA 0C40 000C                  		cmpi.w	#$C,d0
000056BE 6600                       		bne.s	loc_4C74
000056C0 5378 F718                  		subq.w	#1,($FFFFF718).w
000056C4 47F8 AB00                  		lea	($FFFFAB00).w,a3
000056C8 243C 0001 8000             		move.l	#$18000,d2
000056CE 7206                       		moveq	#6,d1
000056D0                            
000056D0                            loc_4C64:
000056D0 2013                       		move.l	(a3),d0
000056D2 9082                       		sub.l	d2,d0
000056D4 26C0                       		move.l	d0,(a3)+
000056D6 0482 0000 2000             		subi.l	#$2000,d2
000056DC 51C9 FFF2                  		dbf	d1,loc_4C64
000056E0                            
000056E0                            loc_4C74:
000056E0 47F8 AB00                  		lea	($FFFFAB00).w,a3
000056E4 45F9 0000 0000             		lea	(byte_4CC4).l,a2
000056EA                            
000056EA                            loc_4C7E:
000056EA 43F8 CC00                  		lea	($FFFFCC00).w,a1
000056EE 3038 F718                  		move.w	($FFFFF718).w,d0
000056F2 4440                       		neg.w	d0
000056F4 4840                       		swap	d0
000056F6 7600                       		moveq	#0,d3
000056F8 161A                       		move.b	(a2)+,d3
000056FA 3438 F70C                  		move.w	($FFFFF70C).w,d2
000056FE 4442                       		neg.w	d2
00005700 0242 00FF                  		andi.w	#$FF,d2
00005704 E54A                       		lsl.w	#2,d2
00005706                            
00005706                            loc_4C9A:
00005706 301B                       		move.w	(a3)+,d0
00005708 544B                       		addq.w	#2,a3
0000570A 7200                       		moveq	#0,d1
0000570C 121A                       		move.b	(a2)+,d1
0000570E 5341                       		subq.w	#1,d1
00005710                            
00005710                            loc_4CA4:
00005710 2380 2000                  		move.l	d0,(a1,d2.w)
00005714 5842                       		addq.w	#4,d2
00005716 0242 03FC                  		andi.w	#$3FC,d2
0000571A 51C9 FFF4                  		dbf	d1,loc_4CA4
0000571E 51CB FFE6                  		dbf	d3,loc_4C9A
00005722 4E75                       		rts	
00005724                            ; End of function SS_BGAnimate
00005724                            
00005724                            ; ===========================================================================
00005724 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005730                            		even
00005730 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005738                            		even
00005738 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
0000574C                            		even
0000574C                            					; XREF: SS_BGAnimate
0000574C                            ; ===========================================================================
0000574C                            
0000574C                            ; ---------------------------------------------------------------------------
0000574C                            ; Continue screen
0000574C                            ; ---------------------------------------------------------------------------
0000574C                            
0000574C                            ContinueScreen:				; XREF: GameModeArray
0000574C 6100 CA32                  		bsr.w	Pal_FadeFrom
00005750 46FC 2700                  		move	#$2700,sr
00005754 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005758 0200 00BF                  		andi.b	#$BF,d0
0000575C 33C0 00C0 0004             		move.w	d0,($C00004).l
00005762 4DF9 00C0 0004             		lea	($C00004).l,a6
00005768 3CBC 8004                  		move.w	#$8004,(a6)
0000576C 3CBC 8700                  		move.w	#$8700,(a6)
00005770 6100 BC0E                  		bsr.w	ClearScreen
00005774 43F8 D000                  		lea	($FFFFD000).w,a1
00005778 7000                       		moveq	#0,d0
0000577A 323C 07FF                  		move.w	#$7FF,d1
0000577E                            
0000577E                            Cont_ClrObjRam:
0000577E 22C0                       		move.l	d0,(a1)+
00005780 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005784                            
00005784 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
0000578E 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005794 6100 BE14                  		bsr.w	NemDec
00005798 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
000057A2 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
000057A8 6100 BE00                  		bsr.w	NemDec
000057AC 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
000057B6 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
000057BC 6100 BDEC                  		bsr.w	NemDec
000057C0 720A                       		moveq	#10,d1
000057C2 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
000057C8 7012                       		moveq	#$12,d0
000057CA 6100 CC62                  		bsr.w	PalLoad1	; load continue	screen pallet
000057CE 103C 0090                  		move.b	#$90,d0
000057D2 6100 BC9C                  		bsr.w	PlaySound	; play continue	music
000057D6 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
000057DC 42B8 F700                  		clr.l	($FFFFF700).w
000057E0 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
000057E8 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
000057EE 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
000057F4 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
000057FA 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00005800 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00005806 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
0000580C 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00005812 4EB9 0000 0000             		jsr	ObjectsLoad
00005818 4EB9 0000 0000             		jsr	BuildSprites
0000581E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005822 0000 0040                  		ori.b	#$40,d0
00005826 33C0 00C0 0004             		move.w	d0,($C00004).l
0000582C 6100 C89C                  		bsr.w	Pal_FadeTo
00005830                            
00005830                            ; ---------------------------------------------------------------------------
00005830                            ; Continue screen main loop
00005830                            ; ---------------------------------------------------------------------------
00005830                            
00005830                            Cont_MainLoop:
00005830 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00005836 6100 DB6A                  		bsr.w	DelayProgram
0000583A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005840 6400                       		bcc.s	loc_4DF2
00005842 46FC 2700                  		move	#$2700,sr
00005846 3238 F614                  		move.w	($FFFFF614).w,d1
0000584A 82FC 003C                  		divu.w	#$3C,d1
0000584E 0281 0000 000F             		andi.l	#$F,d1
00005854 4EB9 0000 0000             		jsr	ContScrCounter
0000585A 46FC 2300                  		move	#$2300,sr
0000585E                            
0000585E                            loc_4DF2:
0000585E 4EB9 0000 0000             		jsr	ObjectsLoad
00005864 4EB9 0000 0000             		jsr	BuildSprites
0000586A 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00005870 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00005872 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005878 64B6                       		bcc.s	Cont_MainLoop
0000587A 4A78 F614                  		tst.w	($FFFFF614).w
0000587E 6600 FFB0                  		bne.w	Cont_MainLoop
00005882 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005888 4E75                       		rts	
0000588A                            ; ===========================================================================
0000588A                            
0000588A                            Cont_GotoLevel:				; XREF: Cont_MainLoop
0000588A 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00005890 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00005896 7000                       		moveq	#0,d0
00005898 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000589C 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000058A0 11C0 FEBF                          move.b    d0,($FFFFFEBF).w ; value used to increment centiseconds
000058A4 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000058A8 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
000058AC 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
000058B0 4E75                       		rts	
000058B2                            ; ===========================================================================
000058B2                            
000058B2                            ; ---------------------------------------------------------------------------
000058B2                            ; Object 80 - Continue screen elements
000058B2                            ; ---------------------------------------------------------------------------
000058B2                            
000058B2                            Obj80:					; XREF: Obj_Index
000058B2 7000                       		moveq	#0,d0
000058B4 1028 0024                  		move.b	$24(a0),d0
000058B8 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
000058BC 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
000058C0                            ; ===========================================================================
000058C0 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
000058C2 0000                       		dc.w Obj80_Display-Obj80_Index
000058C4 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
000058C6 0000                       		dc.w Obj80_ChkType-Obj80_Index
000058C8                            ; ===========================================================================
000058C8                            
000058C8                            Obj80_Main:				; XREF: Obj80_Index
000058C8 5428 0024                  		addq.b	#2,$24(a0)
000058CC 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000058D4 317C 8500 0002             		move.w	#$8500,2(a0)
000058DA 117C 0000 0001             		move.b	#0,1(a0)
000058E0 117C 003C 0019             		move.b	#$3C,$19(a0)
000058E6 317C 0120 0008             		move.w	#$120,8(a0)
000058EC 317C 00C0 000A             		move.w	#$C0,$A(a0)
000058F2 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
000058F8                            
000058F8                            Obj80_Display:				; XREF: Obj80_Index
000058F8 4EF9 0000 0000             		jmp	DisplaySprite
000058FE                            ; ===========================================================================
000058FE                            Obj80_MiniSonicPos:
000058FE 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00005910 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
0000591C                            ; ===========================================================================
0000591C                            
0000591C                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
0000591C 2248                       		movea.l	a0,a1
0000591E 45F9 0000 58FE             		lea	(Obj80_MiniSonicPos).l,a2
00005924 7200                       		moveq	#0,d1
00005926 1238 FE18                  		move.b	($FFFFFE18).w,d1
0000592A 5501                       		subq.b	#2,d1
0000592C 6400                       		bcc.s	loc_4EC4
0000592E 4EF9 0000 0000             		jmp	DeleteObject
00005934                            ; ===========================================================================
00005934                            
00005934                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00005934 7601                       		moveq	#1,d3
00005936 0C01 000E                  		cmpi.b	#$E,d1
0000593A 6500                       		bcs.s	loc_4ED0
0000593C 7600                       		moveq	#0,d3
0000593E 720E                       		moveq	#$E,d1
00005940                            
00005940                            loc_4ED0:
00005940 1401                       		move.b	d1,d2
00005942 0202 0001                  		andi.b	#1,d2
00005946                            
00005946                            Obj80_MiniSonLoop:
00005946 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
0000594A 335A 0008                  		move.w	(a2)+,8(a1)
0000594E 4A02                       		tst.b	d2
00005950 6700                       		beq.s	loc_4EEA
00005952 0469 000A 0008             		subi.w	#$A,8(a1)
00005958                            
00005958                            loc_4EEA:
00005958 337C 00D0 000A             		move.w	#$D0,$A(a1)
0000595E 137C 0006 001A             		move.b	#6,$1A(a1)
00005964 137C 0006 0024             		move.b	#6,$24(a1)
0000596A 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00005972 337C 8551 0002             		move.w	#$8551,2(a1)
00005978 137C 0000 0001             		move.b	#0,1(a1)
0000597E 43E9 0040                  		lea	$40(a1),a1
00005982 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
00005986 43E9 FFC0                  		lea	-$40(a1),a1
0000598A 1343 0028                  		move.b	d3,$28(a1)
0000598E                            
0000598E                            Obj80_ChkType:				; XREF: Obj80_Index
0000598E 4A28 0028                  		tst.b	$28(a0)
00005992 6700                       		beq.s	loc_4F40
00005994 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000599A 6500                       		bcs.s	loc_4F40
0000599C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000059A0 0200 0001                  		andi.b	#1,d0
000059A4 6600                       		bne.s	loc_4F40
000059A6 4A78 D010                  		tst.w	($FFFFD010).w
000059AA 6600                       		bne.s	Obj80_Delete
000059AC 4E75                       		rts	
000059AE                            ; ===========================================================================
000059AE                            
000059AE                            loc_4F40:				; XREF: Obj80_ChkType
000059AE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000059B2 0200 000F                  		andi.b	#$F,d0
000059B6 6600                       		bne.s	Obj80_Display2
000059B8 0868 0000 001A             		bchg	#0,$1A(a0)
000059BE                            
000059BE                            Obj80_Display2:
000059BE 4EF9 0000 0000             		jmp	DisplaySprite
000059C4                            ; ===========================================================================
000059C4                            
000059C4                            Obj80_Delete:				; XREF: Obj80_ChkType
000059C4 4EF9 0000 0000             		jmp	DeleteObject
000059CA                            ; ===========================================================================
000059CA                            
000059CA                            ; ---------------------------------------------------------------------------
000059CA                            ; Object 81 - Sonic on the continue screen
000059CA                            ; ---------------------------------------------------------------------------
000059CA                            
000059CA                            Obj81:					; XREF: Obj_Index
000059CA 7000                       		moveq	#0,d0
000059CC 1028 0024                  		move.b	$24(a0),d0
000059D0 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
000059D4 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
000059D8 4EF9 0000 0000             		jmp	DisplaySprite
000059DE                            ; ===========================================================================
000059DE 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
000059E0 0000                       		dc.w Obj81_ChkLand-Obj81_Index
000059E2 0000                       		dc.w Obj81_Animate-Obj81_Index
000059E4 0000                       		dc.w Obj81_Run-Obj81_Index
000059E6                            ; ===========================================================================
000059E6                            
000059E6                            Obj81_Main:				; XREF: Obj81_Index
000059E6 5428 0024                  		addq.b	#2,$24(a0)
000059EA 317C 00A0 0008             		move.w	#$A0,8(a0)
000059F0 317C 00C0 000C             		move.w	#$C0,$C(a0)
000059F6 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000059FE 317C 0780 0002             		move.w	#$780,2(a0)
00005A04 117C 0004 0001             		move.b	#4,1(a0)
00005A0A 117C 0002 0018             		move.b	#2,$18(a0)
00005A10 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
00005A16 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
00005A1C                            
00005A1C                            Obj81_ChkLand:				; XREF: Obj81_Index
00005A1C 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00005A22 6600                       		bne.s	Obj81_ShowFall	; if not, branch
00005A24 5428 0024                  		addq.b	#2,$24(a0)
00005A28 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00005A2C 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005A34 317C 8500 0002             		move.w	#$8500,2(a0)
00005A3A 117C 0000 001C             		move.b	#0,$1C(a0)
00005A40 6000                       		bra.s	Obj81_Animate
00005A42                            ; ===========================================================================
00005A42                            
00005A42                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005A42 4EB9 0000 0000             		jsr	SpeedToPos
00005A48 4EB9 0000 0000             		jsr	Sonic_Animate
00005A4E 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005A54                            ; ===========================================================================
00005A54                            
00005A54                            Obj81_Animate:				; XREF: Obj81_Index
00005A54 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
00005A58 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00005A5A 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00005A60 4EF9 0000 0000             		jmp	AnimateSprite
00005A66                            ; ===========================================================================
00005A66                            
00005A66                            Obj81_GetUp:				; XREF: Obj81_Animate
00005A66 5428 0024                  		addq.b	#2,$24(a0)
00005A6A 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005A72 317C 0780 0002             		move.w	#$780,2(a0)
00005A78 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005A7E 4268 0014                  		clr.w	$14(a0)
00005A82 5168 000C                  		subq.w	#8,$C(a0)
00005A86 103C 00E0                  		move.b	#$E0,d0
00005A8A 6100 B9EA                  		bsr.w	PlaySound_Special ; fade out music
00005A8E                            
00005A8E                            Obj81_Run:				; XREF: Obj81_Index
00005A8E 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
00005A94 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
00005A96 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005A9C 6000                       		bra.s	Obj81_ShowRun
00005A9E                            ; ===========================================================================
00005A9E                            
00005A9E                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005A9E 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
00005AA4                            
00005AA4                            Obj81_ShowRun:				; XREF: Obj81_Run
00005AA4 4EB9 0000 0000             		jsr	SpeedToPos
00005AAA 4EB9 0000 0000             		jsr	Sonic_Animate
00005AB0 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005AB6                            ; ===========================================================================
00005AB6                            Ani_obj81:
00005AB6                            	include "_anim\obj81.asm"
00005AB6                            ; ---------------------------------------------------------------------------
00005AB6                            ; Animation script - Sonic on the continue screen
00005AB6                            ; ---------------------------------------------------------------------------
00005AB6 0000                       		dc.w byte_504A-Ani_obj81
00005AB8 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
00005AC4 00                         		even
00005AC4 00                         		even
00005AC4                            
00005AC4                            ; ---------------------------------------------------------------------------
00005AC4                            ; Sprite mappings - Continue screen
00005AC4                            ; ---------------------------------------------------------------------------
00005AC4                            Map_obj80:
00005AC4                            	include "_maps\obj80.asm"
00005AC4                            ; ---------------------------------------------------------------------------
00005AC4                            ; Sprite mappings - Continue screen
00005AC4                            ; ---------------------------------------------------------------------------
00005AC4 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
00005AC8 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
00005ACC 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00005AD0 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
00005AD4 0B                         byte_5066:	dc.b $B
00005AD5 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00005ADA F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00005ADF F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
00005AE4 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00005AE9 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00005AEE F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00005AF3 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
00005AF8 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00005AFD 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
00005B02 3805 2021 08               		dc.b $38, 5, $20, $21, 8
00005B07 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00005B0C 03                         byte_509E:	dc.b 3
00005B0D 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
00005B12 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005B17 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005B1C 03                         byte_50AE:	dc.b 3
00005B1D 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
00005B22 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005B27 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005B2C 03                         byte_50BE:	dc.b 3
00005B2D 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005B32 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005B37 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005B3C 02                         byte_50CE:	dc.b 2
00005B3D 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005B42 6009 2800 00               		dc.b $60, 9, $28, 0, 0
00005B47 01                         byte_50D9:	dc.b 1
00005B48 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00005B4D 01                         byte_50DF:	dc.b 1
00005B4E 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00005B54 00                         		even
00005B54 00                         		even
00005B54                            
00005B54                            ; ===========================================================================
00005B54                            ; ---------------------------------------------------------------------------
00005B54                            ; Ending sequence in Green Hill	Zone
00005B54                            ; ---------------------------------------------------------------------------
00005B54                            
00005B54                            EndingSequence:				; XREF: GameModeArray
00005B54 103C 00E4                  		move.b	#$E4,d0
00005B58 6100 B91C                  		bsr.w	PlaySound_Special ; stop music
00005B5C 6100 C622                  		bsr.w	Pal_FadeFrom
00005B60 43F8 D000                  		lea	($FFFFD000).w,a1
00005B64 7000                       		moveq	#0,d0
00005B66 323C 07FF                  		move.w	#$7FF,d1
00005B6A                            
00005B6A                            End_ClrObjRam:
00005B6A 22C0                       		move.l	d0,(a1)+
00005B6C 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00005B70                            
00005B70 43F8 F628                  		lea	($FFFFF628).w,a1
00005B74 7000                       		moveq	#0,d0
00005B76 323C 0015                  		move.w	#$15,d1
00005B7A                            
00005B7A                            End_ClrRam:
00005B7A 22C0                       		move.l	d0,(a1)+
00005B7C 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005B80                            
00005B80 43F8 F700                  		lea	($FFFFF700).w,a1
00005B84 7000                       		moveq	#0,d0
00005B86 323C 003F                  		move.w	#$3F,d1
00005B8A                            
00005B8A                            End_ClrRam2:
00005B8A 22C0                       		move.l	d0,(a1)+
00005B8C 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005B90                            
00005B90 43F8 FE60                  		lea	($FFFFFE60).w,a1
00005B94 7000                       		moveq	#0,d0
00005B96 323C 0047                  		move.w	#$47,d1
00005B9A                            
00005B9A                            End_ClrRam3:
00005B9A 22C0                       		move.l	d0,(a1)+
00005B9C 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005BA0                            
00005BA0 46FC 2700                  		move	#$2700,sr
00005BA4 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005BA8 0200 00BF                  		andi.b	#$BF,d0
00005BAC 33C0 00C0 0004             		move.w	d0,($C00004).l
00005BB2 6100 B7CC                  		bsr.w	ClearScreen
00005BB6 4DF9 00C0 0004             		lea	($C00004).l,a6
00005BBC 3CBC 8B03                  		move.w	#$8B03,(a6)
00005BC0 3CBC 8230                  		move.w	#$8230,(a6)
00005BC4 3CBC 8407                  		move.w	#$8407,(a6)
00005BC8 3CBC 857C                  		move.w	#$857C,(a6)
00005BCC 3CBC 9001                  		move.w	#$9001,(a6)
00005BD0 3CBC 8004                  		move.w	#$8004,(a6)
00005BD4 3CBC 8720                  		move.w	#$8720,(a6)
00005BD8 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00005BDE 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00005BE2 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00005BE8 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00005BEE 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005BF4 6700                       		beq.s	End_LoadData	; if yes, branch
00005BF6 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
00005BFC                            
00005BFC                            End_LoadData:
00005BFC 701C                       		moveq	#$1C,d0
00005BFE 6100 BC56                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
00005C02 4EB9 0000 0000             		jsr	Hud_Base
00005C08 6100 0000                  		bsr.w	LevelSizeLoad
00005C0C 6100 0000                  		bsr.w	DeformBgLayer
00005C10 08F8 0002 F754             		bset	#2,($FFFFF754).w
00005C16 6100 0000                  		bsr.w	MainLoadBlockLoad
00005C1A 6100 0000                  		bsr.w	LoadTilesFromStart
00005C1E 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
00005C26 46FC 2300                  		move	#$2300,sr
00005C2A 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005C30 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00005C34 6100 BDD0                  		bsr.w	KosDec
00005C38 7003                       		moveq	#3,d0
00005C3A 6100 C7F2                  		bsr.w	PalLoad1	; load Sonic's pallet
00005C3E 303C 008B                  		move.w	#$8B,d0
00005C42 6100 B82C                  		bsr.w	PlaySound	; play ending sequence music
00005C46 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00005C4C 6700                       		beq.s	End_LoadSonic	; if not, branch
00005C4E 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005C54                            
00005C54                            End_LoadSonic:
00005C54 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00005C5A 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00005C60 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00005C66 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00005C6C 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00005C72 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00005C78 4EB9 0000 0000             		jsr	ObjPosLoad
00005C7E 4EB9 0000 0000             		jsr	ObjectsLoad
00005C84 4EB9 0000 0000             		jsr	BuildSprites
00005C8A 7000                       		moveq	#0,d0
00005C8C 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00005C90 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00005C94 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
00005C98 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005C9C 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00005CA0 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00005CA4 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00005CA8 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005CAC 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005CB0 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005CB4 6100 EECA                  		bsr.w	OscillateNumInit
00005CB8 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005CBE 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00005CC4 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00005CCA 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00005CD0 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005CD6 6100 D6CA                  		bsr.w	DelayProgram
00005CDA 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005CDE 0000 0040                  		ori.b	#$40,d0
00005CE2 33C0 00C0 0004             		move.w	d0,($C00004).l
00005CE8 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005CEE 6100 C3DA                  		bsr.w	Pal_FadeTo
00005CF2                            
00005CF2                            ; ---------------------------------------------------------------------------
00005CF2                            ; Main ending sequence loop
00005CF2                            ; ---------------------------------------------------------------------------
00005CF2                            
00005CF2                            End_MainLoop:
00005CF2 6100 B78E                  		bsr.w	PauseGame
00005CF6 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005CFC 6100 D6A4                  		bsr.w	DelayProgram
00005D00 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005D04 6100 0000                  		bsr.w	End_MoveSonic
00005D08 4EB9 0000 0000             		jsr	ObjectsLoad
00005D0E 6100 0000                  		bsr.w	DeformBgLayer
00005D12 4EB9 0000 0000             		jsr	BuildSprites
00005D18 4EB9 0000 0000             		jsr	ObjPosLoad
00005D1E 6100 BD86                  		bsr.w	PalCycle_Load
00005D22 6100 EEB2                  		bsr.w	OscillateNumDo
00005D26 6100 EF3E                  		bsr.w	ChangeRingFrame
00005D2A 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00005D30 6700                       		beq.s	loc_52DA	; if yes, branch
00005D32 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
00005D38 103C 0091                  		move.b	#$91,d0
00005D3C 6100 B738                  		bsr.w	PlaySound_Special ; play credits music
00005D40 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
00005D46 4E75                       		rts	
00005D48                            ; ===========================================================================
00005D48                            
00005D48                            loc_52DA:
00005D48 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00005D4C 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
00005D50                            
00005D50 4278 FE02                  		clr.w	($FFFFFE02).w
00005D54 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005D5A 4278 F794                  		clr.w	($FFFFF794).w
00005D5E                            
00005D5E                            End_AllEmlds:				; XREF: loc_5334
00005D5E 6100 B722                  		bsr.w	PauseGame
00005D62 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005D68 6100 D638                  		bsr.w	DelayProgram
00005D6C 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005D70 6100 0000                  		bsr.w	End_MoveSonic
00005D74 4EB9 0000 0000             		jsr	ObjectsLoad
00005D7A 6100 0000                  		bsr.w	DeformBgLayer
00005D7E 4EB9 0000 0000             		jsr	BuildSprites
00005D84 4EB9 0000 0000             		jsr	ObjPosLoad
00005D8A 6100 EE4A                  		bsr.w	OscillateNumDo
00005D8E 6100 EED6                  		bsr.w	ChangeRingFrame
00005D92 5378 F794                  		subq.w	#1,($FFFFF794).w
00005D96 6A00                       		bpl.s	loc_5334
00005D98 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005D9E 6100 C52E                  		bsr.w	Pal_ToWhite
00005DA2                            
00005DA2                            loc_5334:
00005DA2 4A78 FE02                  		tst.w	($FFFFFE02).w
00005DA6 6700 FFB6                  		beq.w	End_AllEmlds
00005DAA 4278 FE02                  		clr.w	($FFFFFE02).w
00005DAE 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00005DB4 4BF9 00C0 0004             		lea	($C00004).l,a5
00005DBA 4DF9 00C0 0000             		lea	($C00000).l,a6
00005DC0 47F8 F700                  		lea	($FFFFF700).w,a3
00005DC4 49F8 A400                  		lea	($FFFFA400).w,a4
00005DC8 343C 4000                  		move.w	#$4000,d2
00005DCC 6100 0000                  		bsr.w	LoadTilesFromStart2
00005DD0 7013                       		moveq	#$13,d0
00005DD2 6100 C65A                  		bsr.w	PalLoad1	; load ending pallet
00005DD6 6100 C42A                  		bsr.w	Pal_MakeWhite
00005DDA 6000 FF16                  		bra.w	End_MainLoop
00005DDE                            
00005DDE                            ; ---------------------------------------------------------------------------
00005DDE                            ; Subroutine controlling Sonic on the ending sequence
00005DDE                            ; ---------------------------------------------------------------------------
00005DDE                            
00005DDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005DDE                            
00005DDE                            
00005DDE                            End_MoveSonic:				; XREF: End_MainLoop
00005DDE 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
00005DE2 6600                       		bne.s	End_MoveSonic2
00005DE4 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
00005DEA 6400                       		bcc.s	End_MoveSonExit	; if not, branch
00005DEC 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005DF0 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
00005DF6 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
00005DFC 4E75                       		rts	
00005DFE                            ; ===========================================================================
00005DFE                            
00005DFE                            End_MoveSonic2:				; XREF: End_MoveSonic
00005DFE 5500                       		subq.b	#2,d0
00005E00 6600                       		bne.s	End_MoveSonic3
00005E02 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
00005E08 6500                       		bcs.s	End_MoveSonExit	; if not, branch
00005E0A 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005E0E 7000                       		moveq	#0,d0
00005E10 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
00005E14 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
00005E18 31C0 D014                  		move.w	d0,($FFFFD014).w
00005E1C 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
00005E22 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
00005E28 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00005E2E 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00005E34 4E75                       		rts	
00005E36                            ; ===========================================================================
00005E36                            
00005E36                            End_MoveSonic3:				; XREF: End_MoveSonic
00005E36 5500                       		subq.b	#2,d0
00005E38 6600                       		bne.s	End_MoveSonExit
00005E3A 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005E3E 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00005E44 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00005E4A 4278 D024                  		clr.w	($FFFFD024).w
00005E4E                            
00005E4E                            End_MoveSonExit:
00005E4E 4E75                       		rts	
00005E50                            ; End of function End_MoveSonic
00005E50                            
00005E50                            ; ===========================================================================
00005E50                            ; ---------------------------------------------------------------------------
00005E50                            ; Object 87 - Sonic on ending sequence
00005E50                            ; ---------------------------------------------------------------------------
00005E50                            
00005E50                            Obj87:					; XREF: Obj_Index
00005E50 7000                       		moveq	#0,d0
00005E52 1028 0025                  		move.b	$25(a0),d0
00005E56 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00005E5A 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005E5E 4EF9 0000 0000             		jmp	DisplaySprite
00005E64                            ; ===========================================================================
00005E64 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00005E68 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005E6C 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00005E70 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00005E74 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00005E78                            ; ===========================================================================
00005E78                            
00005E78                            Obj87_Main:				; XREF: Obj87_Index
00005E78 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005E7E 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005E80 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00005E86 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005E8C 4E75                       		rts	
00005E8E                            ; ===========================================================================
00005E8E                            
00005E8E                            Obj87_Main2:				; XREF: Obj87_Main
00005E8E 5428 0025                  		addq.b	#2,$25(a0)
00005E92 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005E9A 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005EA0 117C 0004 0001             		move.b	#4,1(a0)
00005EA6 4228 0022                  		clr.b	$22(a0)
00005EAA 117C 0002 0018             		move.b	#2,$18(a0)
00005EB0 117C 0000 001A             		move.b	#0,$1A(a0)
00005EB6 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005EBC                            
00005EBC                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005EBC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005EC0 6600                       		bne.s	Obj87_Wait
00005EC2 5428 0025                  		addq.b	#2,$25(a0)
00005EC6 317C 0001 001C             		move.w	#1,$1C(a0)
00005ECC 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00005ED2                            
00005ED2                            Obj87_Wait:
00005ED2 4E75                       		rts	
00005ED4                            ; ===========================================================================
00005ED4                            
00005ED4                            Obj87_LookUp:				; XREF: Obj87_Index
00005ED4 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005EDC 6600                       		bne.s	locret_5480
00005EDE 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00005EE4 317C 005A 0030             		move.w	#$5A,$30(a0)
00005EEA 5428 0025                  		addq.b	#2,$25(a0)
00005EEE                            
00005EEE                            locret_5480:
00005EEE 4E75                       		rts	
00005EF0                            ; ===========================================================================
00005EF0                            
00005EF0                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00005EF0 5368 0030                  		subq.w	#1,$30(a0)
00005EF4 6600                       		bne.s	Obj87_Wait2
00005EF6 43F8 D400                  		lea	($FFFFD400).w,a1
00005EFA 323C 00FF                  		move.w	#$FF,d1
00005EFE                            
00005EFE                            Obj87_ClrLoop:
00005EFE 4299                       		clr.l	(a1)+
00005F00 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00005F04 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00005F0A 5428 0025                  		addq.b	#2,$25(a0)
00005F0E 117C 0001 001C             		move.b	#1,$1C(a0)
00005F14 317C 003C 0030             		move.w	#$3C,$30(a0)
00005F1A                            
00005F1A                            Obj87_Wait2:
00005F1A 4E75                       		rts	
00005F1C                            ; ===========================================================================
00005F1C                            
00005F1C                            Obj87_MakeLogo:				; XREF: Obj87_Index
00005F1C 5368 0030                  		subq.w	#1,$30(a0)
00005F20 6600                       		bne.s	Obj87_Wait3
00005F22 5428 0025                  		addq.b	#2,$25(a0)
00005F26 317C 00B4 0030             		move.w	#$B4,$30(a0)
00005F2C 117C 0002 001C             		move.b	#2,$1C(a0)
00005F32 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005F38                            
00005F38                            Obj87_Wait3:
00005F38 4E75                       		rts	
00005F3A                            ; ===========================================================================
00005F3A                            
00005F3A                            Obj87_Animate:				; XREF: Obj87_Index
00005F3A 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00005F40 4EF9 0000 0000             		jmp	AnimateSprite
00005F46                            ; ===========================================================================
00005F46                            
00005F46                            Obj87_Leap:				; XREF: Obj87_Index
00005F46 5368 0030                  		subq.w	#1,$30(a0)
00005F4A 6600                       		bne.s	Obj87_Wait4
00005F4C 5428 0025                  		addq.b	#2,$25(a0)
00005F50 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005F58 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005F5E 117C 0004 0001             		move.b	#4,1(a0)
00005F64 4228 0022                  		clr.b	$22(a0)
00005F68 117C 0002 0018             		move.b	#2,$18(a0)
00005F6E 117C 0005 001A             		move.b	#5,$1A(a0)
00005F74 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005F7A 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005F80 60B8                       		bra.s	Obj87_Animate
00005F82                            ; ===========================================================================
00005F82                            
00005F82                            Obj87_Wait4:				; XREF: Obj87_Leap
00005F82 4E75                       		rts	
00005F84                            ; ===========================================================================
00005F84                            Ani_obj87:
00005F84                            	include "_anim\obj87.asm"
00005F84                            ; ---------------------------------------------------------------------------
00005F84                            ; Animation script - Sonic on the ending sequence
00005F84                            ; ---------------------------------------------------------------------------
00005F84 0000                       		dc.w byte_551C-Ani_obj87
00005F86 0000                       		dc.w byte_552A-Ani_obj87
00005F88 0000                       		dc.w byte_5534-Ani_obj87
00005F8A 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00005F98 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005FA2 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005FAA                            		even
00005FAA                            		even
00005FAA                            
00005FAA                            ; ===========================================================================
00005FAA                            ; ---------------------------------------------------------------------------
00005FAA                            ; Object 88 - chaos emeralds on	the ending sequence
00005FAA                            ; ---------------------------------------------------------------------------
00005FAA                            
00005FAA                            Obj88:					; XREF: Obj_Index
00005FAA 7000                       		moveq	#0,d0
00005FAC 1028 0024                  		move.b	$24(a0),d0
00005FB0 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005FB4 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005FB8 4EF9 0000 0000             		jmp	DisplaySprite
00005FBE                            ; ===========================================================================
00005FBE 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005FC0 0000                       		dc.w Obj88_Move-Obj88_Index
00005FC2                            ; ===========================================================================
00005FC2                            
00005FC2                            Obj88_Main:				; XREF: Obj88_Index
00005FC2 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005FC8 6700                       		beq.s	Obj88_Main2
00005FCA 588F                       		addq.l	#4,sp
00005FCC 4E75                       		rts	
00005FCE                            ; ===========================================================================
00005FCE                            
00005FCE                            Obj88_Main2:				; XREF: Obj88_Main
00005FCE 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00005FD4 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005FDA 2248                       		movea.l	a0,a1
00005FDC 7600                       		moveq	#0,d3
00005FDE 7401                       		moveq	#1,d2
00005FE0 7205                       		moveq	#5,d1
00005FE2                            
00005FE2                            Obj88_MainLoop:
00005FE2 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00005FE6 5429 0024                  		addq.b	#2,$24(a1)
00005FEA 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00005FF2 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005FF8 137C 0004 0001             		move.b	#4,1(a1)
00005FFE 137C 0001 0018             		move.b	#1,$18(a1)
00006004 3368 0008 0038             		move.w	8(a0),$38(a1)
0000600A 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00006010 1342 001C                  		move.b	d2,$1C(a1)
00006014 1342 001A                  		move.b	d2,$1A(a1)
00006018 5202                       		addq.b	#1,d2
0000601A 1343 0026                  		move.b	d3,$26(a1)
0000601E 0603 002A                  		addi.b	#$2A,d3
00006022 43E9 0040                  		lea	$40(a1),a1
00006026 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
0000602A                            
0000602A                            Obj88_Move:				; XREF: Obj88_Index
0000602A 3028 003E                  		move.w	$3E(a0),d0
0000602E D168 0026                  		add.w	d0,$26(a0)
00006032 1028 0026                  		move.b	$26(a0),d0
00006036 4EB9 0000 33D4             		jsr	(CalcSine).l
0000603C 7800                       		moveq	#0,d4
0000603E 1828 003C                  		move.b	$3C(a0),d4
00006042 C3C4                       		muls.w	d4,d1
00006044 E081                       		asr.l	#8,d1
00006046 C1C4                       		muls.w	d4,d0
00006048 E080                       		asr.l	#8,d0
0000604A D268 0038                  		add.w	$38(a0),d1
0000604E D068 003A                  		add.w	$3A(a0),d0
00006052 3141 0008                  		move.w	d1,8(a0)
00006056 3140 000C                  		move.w	d0,$C(a0)
0000605A 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00006060 6700                       		beq.s	loc_55FA
00006062 0668 0020 003C             		addi.w	#$20,$3C(a0)
00006068                            
00006068                            loc_55FA:
00006068 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
0000606E 6700                       		beq.s	loc_5608
00006070 0668 0020 003E             		addi.w	#$20,$3E(a0)
00006076                            
00006076                            loc_5608:
00006076 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
0000607C 6700                       		beq.s	locret_5614
0000607E 5368 003A                  		subq.w	#1,$3A(a0)
00006082                            
00006082                            locret_5614:
00006082 4E75                       		rts	
00006084                            ; ===========================================================================
00006084                            ; ---------------------------------------------------------------------------
00006084                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00006084                            ; ---------------------------------------------------------------------------
00006084                            
00006084                            Obj89:					; XREF: Obj_Index
00006084 7000                       		moveq	#0,d0
00006086 1028 0024                  		move.b	$24(a0),d0
0000608A 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
0000608E 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00006092                            ; ===========================================================================
00006092 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00006094 0000                       		dc.w Obj89_Move-Obj89_Index
00006096 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00006098                            ; ===========================================================================
00006098                            
00006098                            Obj89_Main:				; XREF: Obj89_Index
00006098 5428 0024                  		addq.b	#2,$24(a0)
0000609C 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
000060A2 317C 00D8 000A             		move.w	#$D8,$A(a0)
000060A8 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
000060B0 317C 05C5 0002             		move.w	#$5C5,2(a0)
000060B6 117C 0000 0001             		move.b	#0,1(a0)
000060BC 117C 0000 0018             		move.b	#0,$18(a0)
000060C2                            
000060C2                            Obj89_Move:				; XREF: Obj89_Index
000060C2 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
000060C8 6700                       		beq.s	Obj89_Delay	; if yes, branch
000060CA 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
000060D0 6000 A22E                  		bra.w	jmp_DisplaySprite
000060D4                            ; ===========================================================================
000060D4                            
000060D4                            Obj89_Delay:				; XREF: Obj89_Move
000060D4 5428 0024                  		addq.b	#2,$24(a0)
000060D8 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
000060DE                            
000060DE                            Obj89_GotoCredits:			; XREF: Obj89_Index
000060DE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
000060E2 6A00                       		bpl.s	Obj89_Display
000060E4 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
000060EA                            
000060EA                            Obj89_Display:
000060EA 6000 A214                  		bra.w	jmp_DisplaySprite
000060EE                            ; ===========================================================================
000060EE                            ; ---------------------------------------------------------------------------
000060EE                            ; Sprite mappings - Sonic on the ending	sequence
000060EE                            ; ---------------------------------------------------------------------------
000060EE                            Map_obj87:
000060EE                            	include "_maps\obj87.asm"
000060EE                            ; ---------------------------------------------------------------------------
000060EE                            ; Sprite mappings - Sonic on the ending	sequence
000060EE                            ; ---------------------------------------------------------------------------
000060EE 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
000060F2 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
000060F6 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
000060FA 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
000060FE 02                         byte_5690:	dc.b 2
000060FF EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00006104 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00006109 03                         byte_569B:	dc.b 3
0000610A FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
0000610F EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00006114 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00006119 02                         byte_56AB:	dc.b 2
0000611A EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
0000611F FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00006124 02                         byte_56B6:	dc.b 2
00006125 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
0000612A FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
0000612F 02                         byte_56C1:	dc.b 2
00006130 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00006135 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
0000613A 03                         byte_56CC:	dc.b 3
0000613B EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00006140 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00006145 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
0000614A 07                         byte_56DC:	dc.b 7
0000614B B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00006150 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00006155 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
0000615A CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
0000615F DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00006164 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00006169 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
0000616E 18                         byte_5700:	dc.b $18
0000616F 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00006174 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00006179 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
0000617E 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00006183 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00006188 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
0000618D 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00006192 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00006197 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
0000619C B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
000061A1 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
000061A6 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
000061AB C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
000061B0 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
000061B5 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
000061BA D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
000061BF D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
000061C4 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
000061C9 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
000061CE E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
000061D3 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
000061D8 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
000061DD F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
000061E2 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
000061E8 00                         		even
000061E8 00                         		even
000061E8                            
000061E8                            ; ---------------------------------------------------------------------------
000061E8                            ; Sprite mappings - chaos emeralds on the ending sequence
000061E8                            ; ---------------------------------------------------------------------------
000061E8                            Map_obj88:
000061E8                            	include "_maps\obj88.asm"
000061E8                            ; ---------------------------------------------------------------------------
000061E8                            ; Sprite mappings - chaos emeralds on the ending sequence
000061E8                            ; ---------------------------------------------------------------------------
000061E8 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
000061EC 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
000061F0 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
000061F4 0000                       		dc.w byte_57AC-Map_obj88
000061F6 01                         byte_5788:	dc.b 1
000061F7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000061FC 01                         byte_578E:	dc.b 1
000061FD F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00006202 01                         byte_5794:	dc.b 1
00006203 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00006208 01                         byte_579A:	dc.b 1
00006209 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
0000620E 01                         byte_57A0:	dc.b 1
0000620F F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00006214 01                         byte_57A6:	dc.b 1
00006215 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0000621A 01                         byte_57AC:	dc.b 1
0000621B F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00006220                            		even
00006220                            		even
00006220                            
00006220                            ; ---------------------------------------------------------------------------
00006220                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00006220                            ; ---------------------------------------------------------------------------
00006220                            Map_obj89:
00006220                            	include "_maps\obj89.asm"
00006220                            ; ---------------------------------------------------------------------------
00006220                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00006220                            ; ---------------------------------------------------------------------------
00006220 0000                       		dc.w byte_57B4-Map_obj89
00006222 03                         byte_57B4:	dc.b 3
00006223 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00006228 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000622D F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00006232                            		even
00006232                            		even
00006232                            
00006232                            ; ===========================================================================
00006232                            ; ---------------------------------------------------------------------------
00006232                            ; Credits ending sequence
00006232                            ; ---------------------------------------------------------------------------
00006232                            
00006232                            Credits:				; XREF: GameModeArray
00006232 6100 B514                  		bsr.w	ClearPLC
00006236 6100 BF48                  		bsr.w	Pal_FadeFrom
0000623A 4DF9 00C0 0004             		lea	($C00004).l,a6
00006240 3CBC 8004                  		move.w	#$8004,(a6)
00006244 3CBC 8230                  		move.w	#$8230,(a6)
00006248 3CBC 8407                  		move.w	#$8407,(a6)
0000624C 3CBC 9001                  		move.w	#$9001,(a6)
00006250 3CBC 9200                  		move.w	#$9200,(a6)
00006254 3CBC 8B03                  		move.w	#$8B03,(a6)
00006258 3CBC 8720                  		move.w	#$8720,(a6)
0000625C 4238 F64E                  		clr.b	($FFFFF64E).w
00006260 6100 B11E                  		bsr.w	ClearScreen
00006264 43F8 D000                  		lea	($FFFFD000).w,a1
00006268 7000                       		moveq	#0,d0
0000626A 323C 07FF                  		move.w	#$7FF,d1
0000626E                            
0000626E                            Cred_ClrObjRam:
0000626E 22C0                       		move.l	d0,(a1)+
00006270 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00006274                            
00006274 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
0000627E 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00006284 6100 B324                  		bsr.w	NemDec
00006288 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000628C 7000                       		moveq	#0,d0
0000628E 323C 001F                  		move.w	#$1F,d1
00006292                            
00006292                            Cred_ClrPallet:
00006292 22C0                       		move.l	d0,(a1)+
00006294 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00006298                            
00006298 7003                       		moveq	#3,d0
0000629A 6100 C192                  		bsr.w	PalLoad1	; load Sonic's pallet
0000629E 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
000062A4 4EB9 0000 0000             		jsr	ObjectsLoad
000062AA 4EB9 0000 0000             		jsr	BuildSprites
000062B0 6100 0000                  		bsr.w	EndingDemoLoad
000062B4 7000                       		moveq	#0,d0
000062B6 1038 FE10                  		move.b	($FFFFFE10).w,d0
000062BA E948                       		lsl.w	#4,d0
000062BC 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
000062C2 45F2 0000                  		lea	(a2,d0.w),a2
000062C6 7000                       		moveq	#0,d0
000062C8 1012                       		move.b	(a2),d0
000062CA 6700                       		beq.s	loc_5862
000062CC 6100 B41C                  		bsr.w	LoadPLC		; load level patterns
000062D0                            
000062D0                            loc_5862:
000062D0 7001                       		moveq	#1,d0
000062D2 6100 B416                  		bsr.w	LoadPLC		; load standard	level patterns
000062D6 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
000062DC 6100 BDEC                  		bsr.w	Pal_FadeTo
000062E0                            
000062E0                            Cred_WaitLoop:
000062E0 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000062E6 6100 D0BA                  		bsr.w	DelayProgram
000062EA 6100 B46A                  		bsr.w	RunPLC_RAM
000062EE 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
000062F2 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
000062F4 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
000062F8 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
000062FA 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00006300 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00006304 4E75                       		rts	
00006306                            
00006306                            ; ---------------------------------------------------------------------------
00006306                            ; Ending sequence demo loading subroutine
00006306                            ; ---------------------------------------------------------------------------
00006306                            
00006306                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006306                            
00006306                            
00006306                            EndingDemoLoad:				; XREF: Credits
00006306 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000630A 0240 000F                  		andi.w	#$F,d0
0000630E D040                       		add.w	d0,d0
00006310 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00006314 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00006318 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
0000631C 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00006322 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00006324 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
0000632A 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00006330 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00006336 7000                       		moveq	#0,d0
00006338 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000633C 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00006340 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00006344 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00006348 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
0000634E 6600                       		bne.s	EndDemo_Exit	; if not, branch
00006350 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00006356 45F8 FE30                  		lea	($FFFFFE30).w,a2
0000635A 303C 0008                  		move.w	#8,d0
0000635E                            
0000635E                            EndDemo_LampLoad:
0000635E 24D9                       		move.l	(a1)+,(a2)+
00006360 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00006364                            
00006364                            EndDemo_Exit:
00006364 4E75                       		rts	
00006366                            ; End of function EndingDemoLoad
00006366                            
00006366                            ; ===========================================================================
00006366                            ; ---------------------------------------------------------------------------
00006366                            ; Levels used in the end sequence demos
00006366                            ; ---------------------------------------------------------------------------
00006366                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00006376                            
00006376                            ; ---------------------------------------------------------------------------
00006376                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00006376                            ; ---------------------------------------------------------------------------
00006376                            EndDemo_LampVar:
00006376 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00006378 0A00 062C 000D             		dc.w $A00, $62C, $D
0000637E 0000 0000                  		dc.l 0
00006382 0000                       		dc.b 0,	0
00006384 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00006398 0101                       		dc.b 1,	1
0000639A                            ; ===========================================================================
0000639A                            ; ---------------------------------------------------------------------------
0000639A                            ; "TRY AGAIN" and "END"	screens
0000639A                            ; ---------------------------------------------------------------------------
0000639A                            
0000639A                            TryAgainEnd:				; XREF: Credits
0000639A 6100 B3AC                  		bsr.w	ClearPLC
0000639E 6100 BDE0                  		bsr.w	Pal_FadeFrom
000063A2 4DF9 00C0 0004             		lea	($C00004).l,a6
000063A8 3CBC 8004                  		move.w	#$8004,(a6)
000063AC 3CBC 8230                  		move.w	#$8230,(a6)
000063B0 3CBC 8407                  		move.w	#$8407,(a6)
000063B4 3CBC 9001                  		move.w	#$9001,(a6)
000063B8 3CBC 9200                  		move.w	#$9200,(a6)
000063BC 3CBC 8B03                  		move.w	#$8B03,(a6)
000063C0 3CBC 8720                  		move.w	#$8720,(a6)
000063C4 4238 F64E                  		clr.b	($FFFFF64E).w
000063C8 6100 AFB6                  		bsr.w	ClearScreen
000063CC 43F8 D000                  		lea	($FFFFD000).w,a1
000063D0 7000                       		moveq	#0,d0
000063D2 323C 07FF                  		move.w	#$7FF,d1
000063D6                            
000063D6                            TryAg_ClrObjRam:
000063D6 22C0                       		move.l	d0,(a1)+
000063D8 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
000063DC                            
000063DC 701D                       		moveq	#$1D,d0
000063DE 6100 B476                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
000063E2 43F8 FB80                  		lea	($FFFFFB80).w,a1
000063E6 7000                       		moveq	#0,d0
000063E8 323C 001F                  		move.w	#$1F,d1
000063EC                            
000063EC                            TryAg_ClrPallet:
000063EC 22C0                       		move.l	d0,(a1)+
000063EE 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
000063F2                            
000063F2 7013                       		moveq	#$13,d0
000063F4 6100 C038                  		bsr.w	PalLoad1	; load ending pallet
000063F8 4278 FBC0                  		clr.w	($FFFFFBC0).w
000063FC 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00006402 4EB9 0000 0000             		jsr	ObjectsLoad
00006408 4EB9 0000 0000             		jsr	BuildSprites
0000640E 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00006414 6100 BCB4                  		bsr.w	Pal_FadeTo
00006418                            
00006418                            ; ---------------------------------------------------------------------------
00006418                            ; "TRY AGAIN" and "END"	screen main loop
00006418                            ; ---------------------------------------------------------------------------
00006418                            TryAg_MainLoop:
00006418 6100 B068                  		bsr.w	PauseGame
0000641C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00006422 6100 CF7E                  		bsr.w	DelayProgram
00006426 4EB9 0000 0000             		jsr	ObjectsLoad
0000642C 4EB9 0000 0000             		jsr	BuildSprites
00006432 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00006438 6600                       		bne.s	TryAg_Exit	; if yes, branch
0000643A 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
0000643E 6700                       		beq.s	TryAg_Exit	; if yes, branch
00006440 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00006446 67D0                       		beq.s	TryAg_MainLoop
00006448                            
00006448                            TryAg_Exit:
00006448 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000644E 4E75                       		rts	
00006450                            
00006450                            ; ===========================================================================
00006450                            ; ---------------------------------------------------------------------------
00006450                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00006450                            ; ---------------------------------------------------------------------------
00006450                            
00006450                            Obj8B:					; XREF: Obj_Index
00006450 7000                       		moveq	#0,d0
00006452 1028 0024                  		move.b	$24(a0),d0
00006456 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
0000645A 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
0000645E 4EF9 0000 0000             		jmp	DisplaySprite
00006464                            ; ===========================================================================
00006464 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00006466 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00006468 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
0000646A 0000                       		dc.w loc_5A8E-Obj8B_Index
0000646C                            ; ===========================================================================
0000646C                            
0000646C                            Obj8B_Main:				; XREF: Obj8B_Index
0000646C 5428 0024                  		addq.b	#2,$24(a0)
00006470 317C 0120 0008             		move.w	#$120,8(a0)
00006476 317C 00F4 000A             		move.w	#$F4,$A(a0)
0000647C 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00006484 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000648A 117C 0000 0001             		move.b	#0,1(a0)
00006490 117C 0002 0018             		move.b	#2,$18(a0)
00006496 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
0000649C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000064A2 6700                       		beq.s	Obj8B_Animate	; if yes, branch
000064A4 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
000064AA 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
000064B0 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
000064B6 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
000064BC                            
000064BC                            Obj8B_Animate:				; XREF: Obj8B_Index
000064BC 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
000064C2 4EF9 0000 0000             		jmp	AnimateSprite
000064C8                            ; ===========================================================================
000064C8                            
000064C8                            Obj8B_Juggle:				; XREF: Obj8B_Index
000064C8 5428 0024                  		addq.b	#2,$24(a0)
000064CC 7002                       		moveq	#2,d0
000064CE 0828 0000 001C             		btst	#0,$1C(a0)
000064D4 6700                       		beq.s	loc_5A6A
000064D6 4440                       		neg.w	d0
000064D8                            
000064D8                            loc_5A6A:
000064D8 43F8 D800                  		lea	($FFFFD800).w,a1
000064DC 7205                       		moveq	#5,d1
000064DE                            
000064DE                            loc_5A70:
000064DE 1340 003E                  		move.b	d0,$3E(a1)
000064E2 3400                       		move.w	d0,d2
000064E4 E742                       		asl.w	#3,d2
000064E6 D529 0026                  		add.b	d2,$26(a1)
000064EA 43E9 0040                  		lea	$40(a1),a1
000064EE 51C9 FFEE                  		dbf	d1,loc_5A70
000064F2 5228 001A                  		addq.b	#1,$1A(a0)
000064F6 317C 0070 0030             		move.w	#112,$30(a0)
000064FC                            
000064FC                            loc_5A8E:				; XREF: Obj8B_Index
000064FC 5368 0030                  		subq.w	#1,$30(a0)
00006500 6A00                       		bpl.s	locret_5AA0
00006502 0868 0000 001C             		bchg	#0,$1C(a0)
00006508 117C 0002 0024             		move.b	#2,$24(a0)
0000650E                            
0000650E                            locret_5AA0:
0000650E 4E75                       		rts	
00006510                            ; ===========================================================================
00006510                            Ani_obj8B:
00006510                            	include "_anim\obj8B.asm"
00006510                            ; ---------------------------------------------------------------------------
00006510                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00006510                            ; ---------------------------------------------------------------------------
00006510 0000                       		dc.w byte_5AA8-Ani_obj8B
00006512 0000                       		dc.w byte_5AAC-Ani_obj8B
00006514 0000                       		dc.w byte_5AB0-Ani_obj8B
00006516 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
0000651A 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
0000651E 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00006530                            		even
00006530                            		even
00006530                            
00006530                            ; ===========================================================================
00006530                            ; ---------------------------------------------------------------------------
00006530                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00006530                            ; ---------------------------------------------------------------------------
00006530                            
00006530                            Obj8C:					; XREF: Obj_Index
00006530 7000                       		moveq	#0,d0
00006532 1028 0024                  		move.b	$24(a0),d0
00006536 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
0000653A 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
0000653E 4EF9 0000 0000             		jmp	DisplaySprite
00006544                            ; ===========================================================================
00006544 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00006546 0000                       		dc.w Obj8C_Move-Obj8C_Index
00006548                            ; ===========================================================================
00006548                            
00006548                            Obj8C_Main:				; XREF: Obj8C_Index
00006548 2248                       		movea.l	a0,a1
0000654A 7400                       		moveq	#0,d2
0000654C 7600                       		moveq	#0,d3
0000654E 7205                       		moveq	#5,d1
00006550 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00006554                            
00006554                            Obj8C_MakeEms:				; XREF: loc_5B42
00006554 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00006558 5429 0024                  		addq.b	#2,$24(a1)
0000655C 237C 0000 61E8 0004        		move.l	#Map_obj88,4(a1)
00006564 337C 03C5 0002             		move.w	#$3C5,2(a1)
0000656A 137C 0000 0001             		move.b	#0,1(a1)
00006570 137C 0001 0018             		move.b	#1,$18(a1)
00006576 337C 0104 0008             		move.w	#$104,8(a1)
0000657C 337C 0120 0038             		move.w	#$120,$38(a1)
00006582 337C 00EC 000A             		move.w	#$EC,$A(a1)
00006588 3369 000A 003A             		move.w	$A(a1),$3A(a1)
0000658E 137C 001C 003C             		move.b	#$1C,$3C(a1)
00006594 47F8 FE58                  		lea	($FFFFFE58).w,a3
00006598                            
00006598                            Obj8C_ChkEms:
00006598 7000                       		moveq	#0,d0
0000659A 1038 FE57                  		move.b	($FFFFFE57).w,d0
0000659E 5340                       		subq.w	#1,d0
000065A0 6500                       		bcs.s	loc_5B42
000065A2                            
000065A2                            Obj8C_ChkEmLoop:
000065A2 B433 0000                  		cmp.b	(a3,d0.w),d2
000065A6 6600                       		bne.s	loc_5B3E
000065A8 5202                       		addq.b	#1,d2
000065AA 60EC                       		bra.s	Obj8C_ChkEms
000065AC                            ; ===========================================================================
000065AC                            
000065AC                            loc_5B3E:
000065AC 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
000065B0                            
000065B0                            loc_5B42:
000065B0 1342 001A                  		move.b	d2,$1A(a1)
000065B4 5229 001A                  		addq.b	#1,$1A(a1)
000065B8 5202                       		addq.b	#1,d2
000065BA 137C 0080 0026             		move.b	#$80,$26(a1)
000065C0 1343 001E                  		move.b	d3,$1E(a1)
000065C4 1343 001F                  		move.b	d3,$1F(a1)
000065C8 0643 000A                  		addi.w	#$A,d3
000065CC 43E9 0040                  		lea	$40(a1),a1
000065D0 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
000065D4                            
000065D4                            Obj8C_Move:				; XREF: Obj8C_Index
000065D4 4A68 003E                  		tst.w	$3E(a0)
000065D8 6700                       		beq.s	locret_5BBA
000065DA 4A28 001E                  		tst.b	$1E(a0)
000065DE 6700                       		beq.s	loc_5B78
000065E0 5328 001E                  		subq.b	#1,$1E(a0)
000065E4 6600                       		bne.s	loc_5B80
000065E6                            
000065E6                            loc_5B78:
000065E6 3028 003E                  		move.w	$3E(a0),d0
000065EA D168 0026                  		add.w	d0,$26(a0)
000065EE                            
000065EE                            loc_5B80:
000065EE 1028 0026                  		move.b	$26(a0),d0
000065F2 6700                       		beq.s	loc_5B8C
000065F4 0C00 0080                  		cmpi.b	#$80,d0
000065F8 6600                       		bne.s	loc_5B96
000065FA                            
000065FA                            loc_5B8C:
000065FA 4268 003E                  		clr.w	$3E(a0)
000065FE 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00006604                            
00006604                            loc_5B96:
00006604 4EB9 0000 33D4             		jsr	(CalcSine).l
0000660A 7800                       		moveq	#0,d4
0000660C 1828 003C                  		move.b	$3C(a0),d4
00006610 C3C4                       		muls.w	d4,d1
00006612 E081                       		asr.l	#8,d1
00006614 C1C4                       		muls.w	d4,d0
00006616 E080                       		asr.l	#8,d0
00006618 D268 0038                  		add.w	$38(a0),d1
0000661C D068 003A                  		add.w	$3A(a0),d0
00006620 3141 0008                  		move.w	d1,8(a0)
00006624 3140 000A                  		move.w	d0,$A(a0)
00006628                            
00006628                            locret_5BBA:
00006628 4E75                       		rts	
0000662A                            ; ===========================================================================
0000662A                            ; ---------------------------------------------------------------------------
0000662A                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
0000662A                            ; ---------------------------------------------------------------------------
0000662A                            Map_obj8B:
0000662A                            	include "_maps\obj8B.asm"
0000662A                            ; ---------------------------------------------------------------------------
0000662A                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
0000662A                            ; ---------------------------------------------------------------------------
0000662A 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
0000662E 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00006632 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00006636 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
0000663A 08                         byte_5BCC:	dc.b 8
0000663B E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006640 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006645 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
0000664A F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
0000664F 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006654 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006659 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000665E 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006663 08                         byte_5BF5:	dc.b 8
00006664 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006669 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
0000666E E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006673 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006678 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
0000667D 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006682 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006687 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000668C 08                         byte_5C1E:	dc.b 8
0000668D E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006692 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00006697 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
0000669C F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
000066A1 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
000066A6 0106 0823 00               		dc.b 1,	6, 8, $23, 0
000066AB 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000066B0 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000066B5 08                         byte_5C47:	dc.b 8
000066B6 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
000066BB F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
000066C0 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
000066C5 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
000066CA 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
000066CF 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
000066D4 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000066D9 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000066DE 0C                         byte_5C70:	dc.b $C
000066DF ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
000066E4 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
000066E9 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
000066EE 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
000066F3 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
000066F8 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
000066FD 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00006702 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00006707 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
0000670C 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00006711 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006716 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
0000671B 0A                         byte_5CAD:	dc.b $A
0000671C D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00006721 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006726 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
0000672B D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006730 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006735 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
0000673A 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
0000673F 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006744 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006749 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
0000674E 0A                         byte_5CE0:	dc.b $A
0000674F C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006754 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006759 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
0000675E C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006763 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006768 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
0000676D 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006772 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006777 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
0000677C 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006781 0C                         byte_5D13:	dc.b $C
00006782 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006787 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
0000678C 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006791 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006796 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
0000679B FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
000067A0 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
000067A5 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
000067AA 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
000067AF 180C 0087 00               		dc.b $18, $C, 0, $87, 0
000067B4 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000067B9 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000067BE                            		even
000067BE                            		even
000067BE                            
000067BE                            ; ---------------------------------------------------------------------------
000067BE                            ; Ending sequence demos
000067BE                            ; ---------------------------------------------------------------------------
000067BE                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
000067EC                            		even
000067EC                            Demo_EndMZ:	incbin	demodata\e_mz.bin
0000682C                            		even
0000682C                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
0000685C                            		even
0000685C                            Demo_EndLZ:	incbin	demodata\e_lz.bin
0000688C                            		even
0000688C                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
000068AC                            		even
000068AC                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
000068CC                            		even
000068CC                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
000068FC                            		even
000068FC                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
0000692C                            		even
0000692C                            
0000692C                            ; ---------------------------------------------------------------------------
0000692C                            ; Subroutine to	load level boundaries and start	locations
0000692C                            ; ---------------------------------------------------------------------------
0000692C                            
0000692C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000692C                            
0000692C                            
0000692C                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
0000692C 7000                       		moveq	#0,d0
0000692E 11C0 F740                  		move.b	d0,($FFFFF740).w
00006932 11C0 F741                  		move.b	d0,($FFFFF741).w
00006936 11C0 F746                  		move.b	d0,($FFFFF746).w
0000693A 11C0 F748                  		move.b	d0,($FFFFF748).w
0000693E 11C0 F742                  		move.b	d0,($FFFFF742).w
00006942 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006946 ED08                       		lsl.b	#6,d0
00006948 E848                       		lsr.w	#4,d0
0000694A 3200                       		move.w	d0,d1
0000694C D040                       		add.w	d0,d0
0000694E D041                       		add.w	d1,d0
00006950 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006954 3018                       		move.w	(a0)+,d0
00006956 31C0 F730                  		move.w	d0,($FFFFF730).w
0000695A 2018                       		move.l	(a0)+,d0
0000695C 21C0 F728                  		move.l	d0,($FFFFF728).w
00006960 21C0 F720                  		move.l	d0,($FFFFF720).w
00006964 2018                       		move.l	(a0)+,d0
00006966 21C0 F72C                  		move.l	d0,($FFFFF72C).w
0000696A 21C0 F724                  		move.l	d0,($FFFFF724).w
0000696E 3038 F728                  		move.w	($FFFFF728).w,d0
00006972 0640 0240                  		addi.w	#$240,d0
00006976 31C0 F732                  		move.w	d0,($FFFFF732).w
0000697A 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006980 3018                       		move.w	(a0)+,d0
00006982 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00006986 6000 0000                  		bra.w	LevSz_ChkLamp
0000698A                            ; ===========================================================================
0000698A                            ; ---------------------------------------------------------------------------
0000698A                            ; Level size array and ending start location array
0000698A                            ; ---------------------------------------------------------------------------
0000698A                            LevelSizeArray:	incbin	misc\lvl_size.bin
00006ADA                            		even
00006ADA                            
00006ADA                            EndingStLocArray:
00006ADA                            		incbin	misc\sloc_end.bin
00006AFA                            		even
00006AFA                            
00006AFA                            ; ===========================================================================
00006AFA                            
00006AFA                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
00006AFA 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
00006AFE 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006B00 4EB9 0000 0000             		jsr	Obj79_LoadInfo
00006B06 3238 D008                  		move.w	($FFFFD008).w,d1
00006B0A 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006B0E 6000                       		bra.s	loc_60D0
00006B10                            ; ===========================================================================
00006B10                            
00006B10                            LevSz_StartLoc:				; XREF: LevelSizeLoad
00006B10 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006B14 ED08                       		lsl.b	#6,d0
00006B16 E848                       		lsr.w	#4,d0
00006B18 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006B1C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006B20 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00006B22 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00006B26 5340                       		subq.w	#1,d0
00006B28 E548                       		lsl.w	#2,d0
00006B2A 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006B2E                            
00006B2E                            LevSz_SonicPos:
00006B2E 7200                       		moveq	#0,d1
00006B30 3219                       		move.w	(a1)+,d1
00006B32 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
00006B36 7000                       		moveq	#0,d0
00006B38 3011                       		move.w	(a1),d0
00006B3A 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00006B3E                            
00006B3E                            loc_60D0:				; XREF: LevSz_ChkLamp
00006B3E 4278 F7A8                  		clr.w	($FFFFF7A8).w		; reset Sonic's position tracking index
00006B42 45F8 CB00                  		lea	($FFFFCB00).w,a2	; load the tracking array into a2
00006B46 743F                       		moveq	#63,d2				; begin a 64-step loop
00006B48                            @looppoint:
00006B48 34C1                       		move.w	d1,(a2)+			; fill in X
00006B4A 34C0                       		move.w	d0,(a2)+			; fill in Y
00006B4C 51CA FFFA                  		dbf	d2,@looppoint		; loop
00006B50 0441 00A0                  		subi.w	#$A0,d1
00006B54 6400                       		bcc.s	loc_60D8
00006B56 7200                       		moveq	#0,d1
00006B58                            
00006B58                            loc_60D8:
00006B58 3438 F72A                  		move.w	($FFFFF72A).w,d2
00006B5C B242                       		cmp.w	d2,d1
00006B5E 6500                       		bcs.s	loc_60E2
00006B60 3202                       		move.w	d2,d1
00006B62                            
00006B62                            loc_60E2:
00006B62 31C1 F700                  		move.w	d1,($FFFFF700).w
00006B66 0440 0060                  		subi.w	#$60,d0
00006B6A 6400                       		bcc.s	loc_60EE
00006B6C 7000                       		moveq	#0,d0
00006B6E                            
00006B6E                            loc_60EE:
00006B6E B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006B72 6D00                       		blt.s	loc_60F8
00006B74 3038 F72E                  		move.w	($FFFFF72E).w,d0
00006B78                            
00006B78                            loc_60F8:
00006B78 31C0 F704                  		move.w	d0,($FFFFF704).w
00006B7C 6100 0000                  		bsr.w	BgScrollSpeed
00006B80 7000                       		moveq	#0,d0
00006B82 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006B86 E508                       		lsl.b	#2,d0
00006B88 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00006B8E 6000 0000                  		bra.w	LevSz_Unk
00006B92                            ; ===========================================================================
00006B92                            ; ---------------------------------------------------------------------------
00006B92                            ; Sonic	start location array
00006B92                            ; ---------------------------------------------------------------------------
00006B92                            StartLocArray:	incbin	misc\sloc_lev.bin
00006C02                            		even
00006C02                            
00006C02                            ; ---------------------------------------------------------------------------
00006C02                            ; Which	256x256	tiles contain loops or roll-tunnels
00006C02                            ; ---------------------------------------------------------------------------
00006C02                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00006C02                            ; loop,	loop, tunnel, tunnel
00006C02                            ; ---------------------------------------------------------------------------
00006C02                            LoopTileNums:	incbin	misc\loopnums.bin
00006C1E                            		even
00006C1E                            
00006C1E                            ; ===========================================================================
00006C1E                            
00006C1E                            LevSz_Unk:				; XREF: LevelSizeLoad
00006C1E 7000                       		moveq	#0,d0
00006C20 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006C24 E748                       		lsl.w	#3,d0
00006C26 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
00006C2A 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
00006C2E 24D9                       		move.l	(a1)+,(a2)+
00006C30 24D9                       		move.l	(a1)+,(a2)+
00006C32 4E75                       		rts	
00006C34                            ; End of function LevelSizeLoad
00006C34                            
00006C34                            ; ===========================================================================
00006C34 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00006C3C 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006C44 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006C4C 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006C54 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006C5C 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006C64 0070 0100 0100 0100        		dc.l $700100, $1000100
00006C6C                            
00006C6C                            ; ---------------------------------------------------------------------------
00006C6C                            ; Subroutine to	set scroll speed of some backgrounds
00006C6C                            ; ---------------------------------------------------------------------------
00006C6C                            
00006C6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C6C                            
00006C6C                            
00006C6C                            BgScrollSpeed:				; XREF: LevelSizeLoad
00006C6C 4A38 FE30                  		tst.b	($FFFFFE30).w
00006C70 6600                       		bne.s	loc_6206
00006C72 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006C76 31C0 F714                  		move.w	d0,($FFFFF714).w
00006C7A 31C1 F708                  		move.w	d1,($FFFFF708).w
00006C7E 31C1 F710                  		move.w	d1,($FFFFF710).w
00006C82 31C1 F718                  		move.w	d1,($FFFFF718).w
00006C86                            
00006C86                            loc_6206:
00006C86 7400                       		moveq	#0,d2
00006C88 1438 FE10                  		move.b	($FFFFFE10).w,d2
00006C8C D442                       		add.w	d2,d2
00006C8E 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00006C92 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00006C96                            ; End of function BgScrollSpeed
00006C96                            
00006C96                            ; ===========================================================================
00006C96 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006C9A 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00006C9E 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00006CA2 0000                       		dc.w BgScroll_End-BgScroll_Index
00006CA4                            ; ===========================================================================
00006CA4                            
00006CA4                            BgScroll_GHZ:				; XREF: BgScroll_Index
00006CA4 6000 0000                  		bra.w	Deform_GHZ
00006CA8                            ; ===========================================================================
00006CA8                            
00006CA8                            BgScroll_LZ:				; XREF: BgScroll_Index
00006CA8 E280                       		asr.l	#1,d0
00006CAA 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006CAE 4E75                       		rts	
00006CB0                            ; ===========================================================================
00006CB0                            
00006CB0                            BgScroll_MZ:				; XREF: BgScroll_Index
00006CB0 4E75                       		rts	
00006CB2                            ; ===========================================================================
00006CB2                            
00006CB2                            BgScroll_SLZ:				; XREF: BgScroll_Index
00006CB2 E280                       		asr.l	#1,d0
00006CB4 0640 00C0                  		addi.w	#$C0,d0
00006CB8 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006CBC 4E75                       		rts	
00006CBE                            ; ===========================================================================
00006CBE                            
00006CBE                            BgScroll_SYZ:				; XREF: BgScroll_Index
00006CBE E980                       		asl.l	#4,d0
00006CC0 2400                       		move.l	d0,d2
00006CC2 E380                       		asl.l	#1,d0
00006CC4 D082                       		add.l	d2,d0
00006CC6 E080                       		asr.l	#8,d0
00006CC8 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006CCC 31C0 F714                  		move.w	d0,($FFFFF714).w
00006CD0 4E75                       		rts	
00006CD2                            ; ===========================================================================
00006CD2                            
00006CD2                            BgScroll_SBZ:				; XREF: BgScroll_Index
00006CD2 E980                       		asl.l	#4,d0
00006CD4 E380                       		asl.l	#1,d0
00006CD6 E080                       		asr.l	#8,d0
00006CD8 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006CDC 4E75                       		rts	
00006CDE                            ; ===========================================================================
00006CDE                            
00006CDE                            BgScroll_End:				; XREF: BgScroll_Index
00006CDE 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006CE4 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006CEA 4E75                       		rts	
00006CEC                            ; ===========================================================================
00006CEC 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
00006CF2 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006CF8 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
00006CFE 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006D04 4E75                       		rts
00006D06                            
00006D06                            ; ---------------------------------------------------------------------------
00006D06                            ; Background layer deformation subroutines
00006D06                            ; ---------------------------------------------------------------------------
00006D06                            
00006D06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D06                            
00006D06                            
00006D06                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00006D06 4A38 F744                  		tst.b	($FFFFF744).w
00006D0A 6700                       		beq.s	loc_628E
00006D0C 4E75                       		rts	
00006D0E                            ; ===========================================================================
00006D0E                            
00006D0E                            loc_628E:
00006D0E 4278 F754                  		clr.w	($FFFFF754).w
00006D12 4278 F756                  		clr.w	($FFFFF756).w
00006D16 4278 F758                  		clr.w	($FFFFF758).w
00006D1A 4278 F75A                  		clr.w	($FFFFF75A).w
00006D1E 6100 0000                  		bsr.w	ScrollHoriz
00006D22 6100 0000                  		bsr.w	ScrollVertical
00006D26 6100 0000                  		bsr.w	DynScrResizeLoad
00006D2A 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
00006D30 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
00006D36 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00006D3C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006D42 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
00006D48 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00006D4E 7000                       		moveq	#0,d0
00006D50 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006D54 D040                       		add.w	d0,d0
00006D56 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00006D5A 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00006D5E                            ; End of function DeformBgLayer
00006D5E                            
00006D5E                            ; ===========================================================================
00006D5E                            ; ---------------------------------------------------------------------------
00006D5E                            ; Offset index for background layer deformation	code
00006D5E                            ; ---------------------------------------------------------------------------
00006D5E 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00006D62 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00006D66 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00006D6A 0000                       		dc.w Deform_GHZ-Deform_Index
00006D6C                            ; ---------------------------------------------------------------------------
00006D6C                            ; Green	Hill Zone background layer deformation code
00006D6C                            ; ---------------------------------------------------------------------------
00006D6C                            
00006D6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D6C                            
00006D6C                            
00006D6C                            Deform_GHZ:				; XREF: Deform_Index
00006D6C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006D70 48C4                       		ext.l	d4
00006D72 EB84                       		asl.l	#5,d4
00006D74 2204                       		move.l	d4,d1
00006D76 E384                       		asl.l	#1,d4
00006D78 D881                       		add.l	d1,d4
00006D7A 7A00                       		moveq	#0,d5
00006D7C 6100 0000                  		bsr.w	ScrollBlock1
00006D80 6100 0000                  		bsr.w	ScrollBlock4
00006D84 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006D88 3038 F704                  		move.w	($FFFFF704).w,d0
00006D8C 0240 07FF                  		andi.w	#$7FF,d0
00006D90 EA48                       		lsr.w	#5,d0
00006D92 4440                       		neg.w	d0
00006D94 0640 0026                  		addi.w	#$26,d0
00006D98 31C0 F714                  		move.w	d0,($FFFFF714).w
00006D9C 3800                       		move.w	d0,d4
00006D9E 6100 0000                  		bsr.w	ScrollBlock3
00006DA2 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006DA8 323C 006F                  		move.w	#$6F,d1
00006DAC 9244                       		sub.w	d4,d1
00006DAE 3038 F700                  		move.w	($FFFFF700).w,d0
00006DB2 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00006DB8 6600                       		bne.s	loc_633C
00006DBA 7000                       		moveq	#0,d0
00006DBC                            
00006DBC                            loc_633C:
00006DBC 4440                       		neg.w	d0
00006DBE 4840                       		swap	d0
00006DC0 3038 F708                  		move.w	($FFFFF708).w,d0
00006DC4 4440                       		neg.w	d0
00006DC6                            
00006DC6                            loc_6346:
00006DC6 22C0                       		move.l	d0,(a1)+
00006DC8 51C9 FFFC                  		dbf	d1,loc_6346
00006DCC 323C 0027                  		move.w	#$27,d1
00006DD0 3038 F710                  		move.w	($FFFFF710).w,d0
00006DD4 4440                       		neg.w	d0
00006DD6                            
00006DD6                            loc_6356:
00006DD6 22C0                       		move.l	d0,(a1)+
00006DD8 51C9 FFFC                  		dbf	d1,loc_6356
00006DDC 3038 F710                  		move.w	($FFFFF710).w,d0
00006DE0 0640 0000                  		addi.w	#0,d0
00006DE4 3438 F700                  		move.w	($FFFFF700).w,d2
00006DE8 0642 FE00                  		addi.w	#-$200,d2
00006DEC 9440                       		sub.w	d0,d2
00006DEE 48C2                       		ext.l	d2
00006DF0 E182                       		asl.l	#8,d2
00006DF2 85FC 0068                  		divs.w	#$68,d2
00006DF6 48C2                       		ext.l	d2
00006DF8 E182                       		asl.l	#8,d2
00006DFA 7600                       		moveq	#0,d3
00006DFC 3600                       		move.w	d0,d3
00006DFE 323C 0047                  		move.w	#$47,d1
00006E02 D244                       		add.w	d4,d1
00006E04                            
00006E04                            loc_6384:
00006E04 3003                       		move.w	d3,d0
00006E06 4440                       		neg.w	d0
00006E08 22C0                       		move.l	d0,(a1)+
00006E0A 4843                       		swap	d3
00006E0C D682                       		add.l	d2,d3
00006E0E 4843                       		swap	d3
00006E10 51C9 FFF2                  		dbf	d1,loc_6384
00006E14 4E75                       		rts	
00006E16                            ; End of function Deform_GHZ
00006E16                            
00006E16                            ; ---------------------------------------------------------------------------
00006E16                            ; Labyrinth Zone background layer deformation code
00006E16                            ; ---------------------------------------------------------------------------
00006E16                            
00006E16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E16                            
00006E16                            
00006E16                            Deform_LZ:				; XREF: Deform_Index
00006E16 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006E1A 48C4                       		ext.l	d4
00006E1C EF84                       		asl.l	#7,d4
00006E1E 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006E22 48C5                       		ext.l	d5
00006E24 EF85                       		asl.l	#7,d5
00006E26 6100 0000                  		bsr.w	ScrollBlock1
00006E2A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006E30 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006E34 323C 00DF                  		move.w	#$DF,d1
00006E38 3038 F700                  		move.w	($FFFFF700).w,d0
00006E3C 4440                       		neg.w	d0
00006E3E 4840                       		swap	d0
00006E40 3038 F708                  		move.w	($FFFFF708).w,d0
00006E44 4440                       		neg.w	d0
00006E46                            
00006E46                            loc_63C6:
00006E46 22C0                       		move.l	d0,(a1)+
00006E48 51C9 FFFC                  		dbf	d1,loc_63C6
00006E4C 3038 F646                  		move.w	($FFFFF646).w,d0
00006E50 9078 F704                  		sub.w	($FFFFF704).w,d0
00006E54 4E75                       		rts	
00006E56                            ; End of function Deform_LZ
00006E56                            
00006E56                            ; ---------------------------------------------------------------------------
00006E56                            ; Marble Zone background layer deformation code
00006E56                            ; ---------------------------------------------------------------------------
00006E56                            
00006E56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E56                            
00006E56                            
00006E56                            Deform_MZ:				; XREF: Deform_Index
00006E56 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006E5A 48C4                       		ext.l	d4
00006E5C ED84                       		asl.l	#6,d4
00006E5E 2204                       		move.l	d4,d1
00006E60 E384                       		asl.l	#1,d4
00006E62 D881                       		add.l	d1,d4
00006E64 7A00                       		moveq	#0,d5
00006E66 6100 0000                  		bsr.w	ScrollBlock1
00006E6A 303C 0200                  		move.w	#$200,d0
00006E6E 3238 F704                  		move.w	($FFFFF704).w,d1
00006E72 0441 01C8                  		subi.w	#$1C8,d1
00006E76 6500                       		bcs.s	loc_6402
00006E78 3401                       		move.w	d1,d2
00006E7A D241                       		add.w	d1,d1
00006E7C D242                       		add.w	d2,d1
00006E7E E441                       		asr.w	#2,d1
00006E80 D041                       		add.w	d1,d0
00006E82                            
00006E82                            loc_6402:
00006E82 31C0 F714                  		move.w	d0,($FFFFF714).w
00006E86 6100 0000                  		bsr.w	ScrollBlock3
00006E8A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006E90 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006E94 323C 00DF                  		move.w	#$DF,d1
00006E98 3038 F700                  		move.w	($FFFFF700).w,d0
00006E9C 4440                       		neg.w	d0
00006E9E 4840                       		swap	d0
00006EA0 3038 F708                  		move.w	($FFFFF708).w,d0
00006EA4 4440                       		neg.w	d0
00006EA6                            
00006EA6                            loc_6426:
00006EA6 22C0                       		move.l	d0,(a1)+
00006EA8 51C9 FFFC                  		dbf	d1,loc_6426
00006EAC 4E75                       		rts	
00006EAE                            ; End of function Deform_MZ
00006EAE                            
00006EAE                            ; ---------------------------------------------------------------------------
00006EAE                            ; Star Light Zone background layer deformation code
00006EAE                            ; ---------------------------------------------------------------------------
00006EAE                            
00006EAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EAE                            
00006EAE                            
00006EAE                            Deform_SLZ:				; XREF: Deform_Index
00006EAE 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006EB2 48C4                       		ext.l	d4
00006EB4 EF84                       		asl.l	#7,d4
00006EB6 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006EBA 48C5                       		ext.l	d5
00006EBC EF85                       		asl.l	#7,d5
00006EBE 6100 0000                  		bsr.w	ScrollBlock2
00006EC2 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006EC8 6100 0000                  		bsr.w	Deform_SLZ_2
00006ECC 45F8 A800                  		lea	($FFFFA800).w,a2
00006ED0 3038 F70C                  		move.w	($FFFFF70C).w,d0
00006ED4 3400                       		move.w	d0,d2
00006ED6 0440 00C0                  		subi.w	#$C0,d0
00006EDA 0240 03F0                  		andi.w	#$3F0,d0
00006EDE E648                       		lsr.w	#3,d0
00006EE0 45F2 0000                  		lea	(a2,d0.w),a2
00006EE4 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006EE8 323C 000E                  		move.w	#$E,d1
00006EEC 3038 F700                  		move.w	($FFFFF700).w,d0
00006EF0 4440                       		neg.w	d0
00006EF2 4840                       		swap	d0
00006EF4 0242 000F                  		andi.w	#$F,d2
00006EF8 D442                       		add.w	d2,d2
00006EFA 301A                       		move.w	(a2)+,d0
00006EFC 4EFB 2000                  		jmp	loc_6482(pc,d2.w)
00006F00                            ; ===========================================================================
00006F00                            
00006F00                            loc_6480:				; XREF: Deform_SLZ
00006F00 301A                       		move.w	(a2)+,d0
00006F02                            
00006F02                            loc_6482:
00006F02 22C0                       		move.l	d0,(a1)+
00006F04 22C0                       		move.l	d0,(a1)+
00006F06 22C0                       		move.l	d0,(a1)+
00006F08 22C0                       		move.l	d0,(a1)+
00006F0A 22C0                       		move.l	d0,(a1)+
00006F0C 22C0                       		move.l	d0,(a1)+
00006F0E 22C0                       		move.l	d0,(a1)+
00006F10 22C0                       		move.l	d0,(a1)+
00006F12 22C0                       		move.l	d0,(a1)+
00006F14 22C0                       		move.l	d0,(a1)+
00006F16 22C0                       		move.l	d0,(a1)+
00006F18 22C0                       		move.l	d0,(a1)+
00006F1A 22C0                       		move.l	d0,(a1)+
00006F1C 22C0                       		move.l	d0,(a1)+
00006F1E 22C0                       		move.l	d0,(a1)+
00006F20 22C0                       		move.l	d0,(a1)+
00006F22 51C9 FFDC                  		dbf	d1,loc_6480
00006F26 4E75                       		rts	
00006F28                            ; End of function Deform_SLZ
00006F28                            
00006F28                            
00006F28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F28                            
00006F28                            
00006F28                            Deform_SLZ_2:				; XREF: Deform_SLZ
00006F28 43F8 A800                  		lea	($FFFFA800).w,a1
00006F2C 3438 F700                  		move.w	($FFFFF700).w,d2
00006F30 4442                       		neg.w	d2
00006F32 3002                       		move.w	d2,d0
00006F34 E640                       		asr.w	#3,d0
00006F36 9042                       		sub.w	d2,d0
00006F38 48C0                       		ext.l	d0
00006F3A E980                       		asl.l	#4,d0
00006F3C 81FC 001C                  		divs.w	#$1C,d0
00006F40 48C0                       		ext.l	d0
00006F42 E980                       		asl.l	#4,d0
00006F44 E180                       		asl.l	#8,d0
00006F46 7600                       		moveq	#0,d3
00006F48 3602                       		move.w	d2,d3
00006F4A 323C 001B                  		move.w	#$1B,d1
00006F4E                            
00006F4E                            loc_64CE:
00006F4E 32C3                       		move.w	d3,(a1)+
00006F50 4843                       		swap	d3
00006F52 D680                       		add.l	d0,d3
00006F54 4843                       		swap	d3
00006F56 51C9 FFF6                  		dbf	d1,loc_64CE
00006F5A 3002                       		move.w	d2,d0
00006F5C E640                       		asr.w	#3,d0
00006F5E 323C 0004                  		move.w	#4,d1
00006F62                            
00006F62                            loc_64E2:
00006F62 32C0                       		move.w	d0,(a1)+
00006F64 51C9 FFFC                  		dbf	d1,loc_64E2
00006F68 3002                       		move.w	d2,d0
00006F6A E440                       		asr.w	#2,d0
00006F6C 323C 0004                  		move.w	#4,d1
00006F70                            
00006F70                            loc_64F0:
00006F70 32C0                       		move.w	d0,(a1)+
00006F72 51C9 FFFC                  		dbf	d1,loc_64F0
00006F76 3002                       		move.w	d2,d0
00006F78 E240                       		asr.w	#1,d0
00006F7A 323C 001D                  		move.w	#$1D,d1
00006F7E                            
00006F7E                            loc_64FE:
00006F7E 32C0                       		move.w	d0,(a1)+
00006F80 51C9 FFFC                  		dbf	d1,loc_64FE
00006F84 4E75                       		rts	
00006F86                            ; End of function Deform_SLZ_2
00006F86                            
00006F86                            ; ---------------------------------------------------------------------------
00006F86                            ; Spring Yard Zone background layer deformation	code
00006F86                            ; ---------------------------------------------------------------------------
00006F86                            
00006F86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F86                            
00006F86                            
00006F86                            Deform_SYZ:				; XREF: Deform_Index
00006F86 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006F8A 48C4                       		ext.l	d4
00006F8C ED84                       		asl.l	#6,d4
00006F8E 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006F92 48C5                       		ext.l	d5
00006F94 E985                       		asl.l	#4,d5
00006F96 2205                       		move.l	d5,d1
00006F98 E385                       		asl.l	#1,d5
00006F9A DA81                       		add.l	d1,d5
00006F9C 6100 0000                  		bsr.w	ScrollBlock1
00006FA0 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006FA6 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006FAA 323C 00DF                  		move.w	#$DF,d1
00006FAE 3038 F700                  		move.w	($FFFFF700).w,d0
00006FB2 4440                       		neg.w	d0
00006FB4 4840                       		swap	d0
00006FB6 3038 F708                  		move.w	($FFFFF708).w,d0
00006FBA 4440                       		neg.w	d0
00006FBC                            
00006FBC                            loc_653C:
00006FBC 22C0                       		move.l	d0,(a1)+
00006FBE 51C9 FFFC                  		dbf	d1,loc_653C
00006FC2 4E75                       		rts	
00006FC4                            ; End of function Deform_SYZ
00006FC4                            
00006FC4                            ; ---------------------------------------------------------------------------
00006FC4                            ; Scrap	Brain Zone background layer deformation	code
00006FC4                            ; ---------------------------------------------------------------------------
00006FC4                            
00006FC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FC4                            
00006FC4                            
00006FC4                            Deform_SBZ:				; XREF: Deform_Index
00006FC4 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006FC8 48C4                       		ext.l	d4
00006FCA ED84                       		asl.l	#6,d4
00006FCC 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006FD0 48C5                       		ext.l	d5
00006FD2 E985                       		asl.l	#4,d5
00006FD4 E385                       		asl.l	#1,d5
00006FD6 6100 0000                  		bsr.w	ScrollBlock1
00006FDA 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006FE0 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006FE4 323C 00DF                  		move.w	#$DF,d1
00006FE8 3038 F700                  		move.w	($FFFFF700).w,d0
00006FEC 4440                       		neg.w	d0
00006FEE 4840                       		swap	d0
00006FF0 3038 F708                  		move.w	($FFFFF708).w,d0
00006FF4 4440                       		neg.w	d0
00006FF6                            
00006FF6                            loc_6576:
00006FF6 22C0                       		move.l	d0,(a1)+
00006FF8 51C9 FFFC                  		dbf	d1,loc_6576
00006FFC 4E75                       		rts	
00006FFE                            ; End of function Deform_SBZ
00006FFE                            
00006FFE                            ; ---------------------------------------------------------------------------
00006FFE                            ; Subroutine to	scroll the level horizontally as Sonic moves
00006FFE                            ; ---------------------------------------------------------------------------
00006FFE                            
00006FFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FFE                            
00006FFE                            
00006FFE                            ScrollHoriz:				; XREF: DeformBgLayer
00006FFE 3838 F700                  		move.w	($FFFFF700).w,d4
00007002 6100                       		bsr.s	ScrollHoriz2
00007004 3038 F700                  		move.w	($FFFFF700).w,d0
00007008 0240 0010                  		andi.w	#$10,d0
0000700C 1238 F74A                  		move.b	($FFFFF74A).w,d1
00007010 B300                       		eor.b	d1,d0
00007012 6600                       		bne.s	locret_65B0
00007014 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
0000701A 3038 F700                  		move.w	($FFFFF700).w,d0
0000701E 9044                       		sub.w	d4,d0
00007020 6A00                       		bpl.s	loc_65AA
00007022 08F8 0002 F754             		bset	#2,($FFFFF754).w
00007028 4E75                       		rts	
0000702A                            ; ===========================================================================
0000702A                            
0000702A                            loc_65AA:
0000702A 08F8 0003 F754             		bset	#3,($FFFFF754).w
00007030                            
00007030                            locret_65B0:
00007030 4E75                       		rts	
00007032                            ; End of function ScrollHoriz
00007032                            
00007032                            
00007032                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007032                            
00007032                            
00007032                            ScrollHoriz2:				; XREF: ScrollHoriz
00007032 3238 C904                  		move.w	($FFFFC904).w,d1
00007036 6700                       		beq.s	@cont1
00007038 0441 0100                  		sub.w	#$100,d1
0000703C 31C1 C904                  		move.w	d1,($FFFFC904).w
00007040 7200                       		moveq	#0,d1
00007042 1238 C904                  		move.b	($FFFFC904).w,d1
00007046 E509                       		lsl.b	#2,d1
00007048 5801                       		addq.b	#4,d1
0000704A 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
0000704E 9001                       		sub.b	d1,d0
00007050 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007054 3031 0000                  		move.w	(a1,d0.w),d0
00007058 0240 3FFF                  		and.w	#$3FFF,d0
0000705C 6000                       		bra.s	@cont2
0000705E                            		
0000705E                            @cont1:
0000705E 3038 D008                  		move.w	($FFFFD008).w,d0
00007062                            		
00007062                            @cont2:
00007062 9078 F700                  		sub.w	($FFFFF700).w,d0
00007066 0440 0090                  		subi.w	#$90,d0
0000706A 6500                       		bcs.s	loc_65F6
0000706C 0440 0010                  		subi.w	#$10,d0
00007070 6400                       		bcc.s	loc_65CC
00007072 4278 F73A                  		clr.w	($FFFFF73A).w
00007076 4E75                       		rts	
00007078                            ; ===========================================================================
00007078                            
00007078                            loc_65CC:
00007078 0C40 0010                  		cmpi.w	#$10,d0
0000707C 6500                       		bcs.s	loc_65D6
0000707E 303C 0010                  		move.w	#$10,d0
00007082                            
00007082                            loc_65D6:
00007082 D078 F700                  		add.w	($FFFFF700).w,d0
00007086 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
0000708A 6D00                       		blt.s	loc_65E4
0000708C 3038 F72A                  		move.w	($FFFFF72A).w,d0
00007090                            
00007090                            loc_65E4:
00007090 3200                       		move.w	d0,d1
00007092 9278 F700                  		sub.w	($FFFFF700).w,d1
00007096 E141                       		asl.w	#8,d1
00007098 31C0 F700                  		move.w	d0,($FFFFF700).w
0000709C 31C1 F73A                  		move.w	d1,($FFFFF73A).w
000070A0 4E75                       		rts	
000070A2                            ; ===========================================================================
000070A2                            
000070A2                            loc_65F6:				; XREF: ScrollHoriz2
000070A2 0C40 FFF0                  		cmpi.w	#-$10,d0
000070A6 6E00                       		bgt.s	@cont
000070A8 303C FFF0                  		move.w	#-$10,d0	
000070AC                            		
000070AC                            @cont:
000070AC D078 F700                  		add.w	($FFFFF700).w,d0
000070B0 B078 F728                  		cmp.w	($FFFFF728).w,d0
000070B4 6EDA                       		bgt.s	loc_65E4
000070B6 3038 F728                  		move.w	($FFFFF728).w,d0
000070BA 60D4                       		bra.s	loc_65E4
000070BC                            ; End of function ScrollHoriz2
000070BC                            
000070BC                            ; ===========================================================================
000070BC 4A40                       		tst.w	d0
000070BE 6A00                       		bpl.s	loc_6610
000070C0 303C FFFE                  		move.w	#-2,d0
000070C4 60DC                       		bra.s	loc_65F6
000070C6                            ; ===========================================================================
000070C6                            
000070C6                            loc_6610:
000070C6 303C 0002                  		move.w	#2,d0
000070CA 60AC                       		bra.s	loc_65CC
000070CC                            
000070CC                            ; ---------------------------------------------------------------------------
000070CC                            ; Subroutine to	scroll the level vertically as Sonic moves
000070CC                            ; ---------------------------------------------------------------------------
000070CC                            
000070CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070CC                            
000070CC                            
000070CC                            ScrollVertical:				; XREF: DeformBgLayer
000070CC 7200                       		moveq	#0,d1
000070CE 3038 D00C                  		move.w	($FFFFD00C).w,d0
000070D2 9078 F704                  		sub.w	($FFFFF704).w,d0
000070D6 0838 0002 D022             		btst	#2,($FFFFD022).w
000070DC 6700                       		beq.s	loc_662A
000070DE 5B40                       		subq.w	#5,d0
000070E0                            
000070E0                            loc_662A:
000070E0 0838 0001 D022             		btst	#1,($FFFFD022).w
000070E6 6700                       		beq.s	loc_664A
000070E8 0640 0020                  		addi.w	#$20,d0
000070EC 9078 F73E                  		sub.w	($FFFFF73E).w,d0
000070F0 6500                       		bcs.s	loc_6696
000070F2 0440 0040                  		subi.w	#$40,d0
000070F6 6400                       		bcc.s	loc_6696
000070F8 4A38 F75C                  		tst.b	($FFFFF75C).w
000070FC 6600                       		bne.s	loc_66A8
000070FE 6000                       		bra.s	loc_6656
00007100                            ; ===========================================================================
00007100                            
00007100                            loc_664A:
00007100 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00007104 6600                       		bne.s	loc_665C
00007106 4A38 F75C                  		tst.b	($FFFFF75C).w
0000710A 6600                       		bne.s	loc_66A8
0000710C                            
0000710C                            loc_6656:
0000710C 4278 F73C                  		clr.w	($FFFFF73C).w
00007110 4E75                       		rts	
00007112                            ; ===========================================================================
00007112                            
00007112                            loc_665C:
00007112 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00007118 6600                       		bne.s	loc_6684
0000711A 3238 D014                  		move.w	($FFFFD014).w,d1
0000711E 6A00                       		bpl.s	loc_666C
00007120 4441                       		neg.w	d1
00007122                            
00007122                            loc_666C:
00007122 0C41 0800                  		cmpi.w	#$800,d1
00007126 6400                       		bcc.s	loc_6696
00007128 323C 0600                  		move.w	#$600,d1
0000712C 0C40 0006                  		cmpi.w	#6,d0
00007130 6E00                       		bgt.s	loc_66F6
00007132 0C40 FFFA                  		cmpi.w	#-6,d0
00007136 6D00                       		blt.s	loc_66C0
00007138 6000                       		bra.s	loc_66AE
0000713A                            ; ===========================================================================
0000713A                            
0000713A                            loc_6684:
0000713A 323C 0200                  		move.w	#$200,d1
0000713E 0C40 0002                  		cmpi.w	#2,d0
00007142 6E00                       		bgt.s	loc_66F6
00007144 0C40 FFFE                  		cmpi.w	#-2,d0
00007148 6D00                       		blt.s	loc_66C0
0000714A 6000                       		bra.s	loc_66AE
0000714C                            ; ===========================================================================
0000714C                            
0000714C                            loc_6696:
0000714C 323C 1000                  		move.w	#$1000,d1
00007150 0C40 0010                  		cmpi.w	#$10,d0
00007154 6E00                       		bgt.s	loc_66F6
00007156 0C40 FFF0                  		cmpi.w	#-$10,d0
0000715A 6D00                       		blt.s	loc_66C0
0000715C 6000                       		bra.s	loc_66AE
0000715E                            ; ===========================================================================
0000715E                            
0000715E                            loc_66A8:
0000715E 7000                       		moveq	#0,d0
00007160 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00007164                            
00007164                            loc_66AE:
00007164 7200                       		moveq	#0,d1
00007166 3200                       		move.w	d0,d1
00007168 D278 F704                  		add.w	($FFFFF704).w,d1
0000716C 4A40                       		tst.w	d0
0000716E 6A00 0000                  		bpl.w	loc_6700
00007172 6000 0000                  		bra.w	loc_66CC
00007176                            ; ===========================================================================
00007176                            
00007176                            loc_66C0:
00007176 4441                       		neg.w	d1
00007178 48C1                       		ext.l	d1
0000717A E181                       		asl.l	#8,d1
0000717C D2B8 F704                  		add.l	($FFFFF704).w,d1
00007180 4841                       		swap	d1
00007182                            
00007182                            loc_66CC:
00007182 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00007186 6E00                       		bgt.s	loc_6724
00007188 0C41 FF00                  		cmpi.w	#-$100,d1
0000718C 6E00                       		bgt.s	loc_66F0
0000718E 0241 07FF                  		andi.w	#$7FF,d1
00007192 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00007198 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0000719E 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
000071A4 6000                       		bra.s	loc_6724
000071A6                            ; ===========================================================================
000071A6                            
000071A6                            loc_66F0:
000071A6 3238 F72C                  		move.w	($FFFFF72C).w,d1
000071AA 6000                       		bra.s	loc_6724
000071AC                            ; ===========================================================================
000071AC                            
000071AC                            loc_66F6:
000071AC 48C1                       		ext.l	d1
000071AE E181                       		asl.l	#8,d1
000071B0 D2B8 F704                  		add.l	($FFFFF704).w,d1
000071B4 4841                       		swap	d1
000071B6                            
000071B6                            loc_6700:
000071B6 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
000071BA 6D00                       		blt.s	loc_6724
000071BC 0441 0800                  		subi.w	#$800,d1
000071C0 6500                       		bcs.s	loc_6720
000071C2 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
000071C8 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
000071CE 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
000071D4 6000                       		bra.s	loc_6724
000071D6                            ; ===========================================================================
000071D6                            
000071D6                            loc_6720:
000071D6 3238 F72E                  		move.w	($FFFFF72E).w,d1
000071DA                            
000071DA                            loc_6724:
000071DA 3838 F704                  		move.w	($FFFFF704).w,d4
000071DE 4841                       		swap	d1
000071E0 2601                       		move.l	d1,d3
000071E2 96B8 F704                  		sub.l	($FFFFF704).w,d3
000071E6 E09B                       		ror.l	#8,d3
000071E8 31C3 F73C                  		move.w	d3,($FFFFF73C).w
000071EC 21C1 F704                  		move.l	d1,($FFFFF704).w
000071F0 3038 F704                  		move.w	($FFFFF704).w,d0
000071F4 0240 0010                  		andi.w	#$10,d0
000071F8 1238 F74B                  		move.b	($FFFFF74B).w,d1
000071FC B300                       		eor.b	d1,d0
000071FE 6600                       		bne.s	locret_6766
00007200 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00007206 3038 F704                  		move.w	($FFFFF704).w,d0
0000720A 9044                       		sub.w	d4,d0
0000720C 6A00                       		bpl.s	loc_6760
0000720E 08F8 0000 F754             		bset	#0,($FFFFF754).w
00007214 4E75                       		rts	
00007216                            ; ===========================================================================
00007216                            
00007216                            loc_6760:
00007216 08F8 0001 F754             		bset	#1,($FFFFF754).w
0000721C                            
0000721C                            locret_6766:
0000721C 4E75                       		rts	
0000721E                            ; End of function ScrollVertical
0000721E                            
0000721E                            
0000721E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000721E                            
0000721E                            
0000721E                            ScrollBlock1:				; XREF: Deform_GHZ; et al
0000721E 2438 F708                  		move.l	($FFFFF708).w,d2
00007222 2002                       		move.l	d2,d0
00007224 D084                       		add.l	d4,d0
00007226 21C0 F708                  		move.l	d0,($FFFFF708).w
0000722A 2200                       		move.l	d0,d1
0000722C 4841                       		swap	d1
0000722E 0241 0010                  		andi.w	#$10,d1
00007232 1638 F74C                  		move.b	($FFFFF74C).w,d3
00007236 B701                       		eor.b	d3,d1
00007238 6600                       		bne.s	loc_679C
0000723A 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00007240 9082                       		sub.l	d2,d0
00007242 6A00                       		bpl.s	loc_6796
00007244 08F8 0002 F756             		bset	#2,($FFFFF756).w
0000724A 6000                       		bra.s	loc_679C
0000724C                            ; ===========================================================================
0000724C                            
0000724C                            loc_6796:
0000724C 08F8 0003 F756             		bset	#3,($FFFFF756).w
00007252                            
00007252                            loc_679C:
00007252 2638 F70C                  		move.l	($FFFFF70C).w,d3
00007256 2003                       		move.l	d3,d0
00007258 D085                       		add.l	d5,d0
0000725A 21C0 F70C                  		move.l	d0,($FFFFF70C).w
0000725E 2200                       		move.l	d0,d1
00007260 4841                       		swap	d1
00007262 0241 0010                  		andi.w	#$10,d1
00007266 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000726A B501                       		eor.b	d2,d1
0000726C 6600                       		bne.s	locret_67D0
0000726E 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00007274 9083                       		sub.l	d3,d0
00007276 6A00                       		bpl.s	loc_67CA
00007278 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000727E 4E75                       		rts	
00007280                            ; ===========================================================================
00007280                            
00007280                            loc_67CA:
00007280 08F8 0001 F756             		bset	#1,($FFFFF756).w
00007286                            
00007286                            locret_67D0:
00007286 4E75                       		rts	
00007288                            ; End of function ScrollBlock1
00007288                            
00007288                            
00007288                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007288                            
00007288                            
00007288                            ScrollBlock2:				; XREF: Deform_SLZ
00007288 2438 F708                  		move.l	($FFFFF708).w,d2
0000728C 2002                       		move.l	d2,d0
0000728E D084                       		add.l	d4,d0
00007290 21C0 F708                  		move.l	d0,($FFFFF708).w
00007294 2638 F70C                  		move.l	($FFFFF70C).w,d3
00007298 2003                       		move.l	d3,d0
0000729A D085                       		add.l	d5,d0
0000729C 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000072A0 2200                       		move.l	d0,d1
000072A2 4841                       		swap	d1
000072A4 0241 0010                  		andi.w	#$10,d1
000072A8 1438 F74D                  		move.b	($FFFFF74D).w,d2
000072AC B501                       		eor.b	d2,d1
000072AE 6600                       		bne.s	locret_6812
000072B0 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000072B6 9083                       		sub.l	d3,d0
000072B8 6A00                       		bpl.s	loc_680C
000072BA 08F8 0000 F756             		bset	#0,($FFFFF756).w
000072C0 4E75                       		rts	
000072C2                            ; ===========================================================================
000072C2                            
000072C2                            loc_680C:
000072C2 08F8 0001 F756             		bset	#1,($FFFFF756).w
000072C8                            
000072C8                            locret_6812:
000072C8 4E75                       		rts	
000072CA                            ; End of function ScrollBlock2
000072CA                            
000072CA                            
000072CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072CA                            
000072CA                            
000072CA                            ScrollBlock3:				; XREF: Deform_GHZ; et al
000072CA 3638 F70C                  		move.w	($FFFFF70C).w,d3
000072CE 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000072D2 3200                       		move.w	d0,d1
000072D4 0241 0010                  		andi.w	#$10,d1
000072D8 1438 F74D                  		move.b	($FFFFF74D).w,d2
000072DC B501                       		eor.b	d2,d1
000072DE 6600                       		bne.s	locret_6842
000072E0 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000072E6 9043                       		sub.w	d3,d0
000072E8 6A00                       		bpl.s	loc_683C
000072EA 08F8 0000 F756             		bset	#0,($FFFFF756).w
000072F0 4E75                       		rts	
000072F2                            ; ===========================================================================
000072F2                            
000072F2                            loc_683C:
000072F2 08F8 0001 F756             		bset	#1,($FFFFF756).w
000072F8                            
000072F8                            locret_6842:
000072F8 4E75                       		rts	
000072FA                            ; End of function ScrollBlock3
000072FA                            
000072FA                            
000072FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072FA                            
000072FA                            
000072FA                            ScrollBlock4:				; XREF: Deform_GHZ
000072FA 3438 F710                  		move.w	($FFFFF710).w,d2
000072FE 3638 F714                  		move.w	($FFFFF714).w,d3
00007302 3038 F73A                  		move.w	($FFFFF73A).w,d0
00007306 48C0                       		ext.l	d0
00007308 EF80                       		asl.l	#7,d0
0000730A D1B8 F710                  		add.l	d0,($FFFFF710).w
0000730E 3038 F710                  		move.w	($FFFFF710).w,d0
00007312 0240 0010                  		andi.w	#$10,d0
00007316 1238 F74E                  		move.b	($FFFFF74E).w,d1
0000731A B300                       		eor.b	d1,d0
0000731C 6600                       		bne.s	locret_6884
0000731E 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00007324 3038 F710                  		move.w	($FFFFF710).w,d0
00007328 9042                       		sub.w	d2,d0
0000732A 6A00                       		bpl.s	loc_687E
0000732C 08F8 0002 F758             		bset	#2,($FFFFF758).w
00007332 6000                       		bra.s	locret_6884
00007334                            ; ===========================================================================
00007334                            
00007334                            loc_687E:
00007334 08F8 0003 F758             		bset	#3,($FFFFF758).w
0000733A                            
0000733A                            locret_6884:
0000733A 4E75                       		rts	
0000733C                            ; End of function ScrollBlock4
0000733C                            
0000733C                            
0000733C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000733C                            
0000733C                            
0000733C                            sub_6886:				; XREF: loc_C44
0000733C 4BF9 00C0 0004             		lea	($C00004).l,a5
00007342 4DF9 00C0 0000             		lea	($C00000).l,a6
00007348 45F8 F756                  		lea	($FFFFF756).w,a2
0000734C 47F8 F708                  		lea	($FFFFF708).w,a3
00007350 49F8 A440                  		lea	($FFFFA440).w,a4
00007354 343C 6000                  		move.w	#$6000,d2
00007358 6100 0000                  		bsr.w	sub_6954
0000735C 45F8 F758                  		lea	($FFFFF758).w,a2
00007360 47F8 F710                  		lea	($FFFFF710).w,a3
00007364 6000 0000                  		bra.w	sub_69F4
00007368                            ; End of function sub_6886
00007368                            
00007368                            ; ---------------------------------------------------------------------------
00007368                            ; Subroutine to	display	correct	tiles as you move
00007368                            ; ---------------------------------------------------------------------------
00007368                            
00007368                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007368                            
00007368                            
00007368                            LoadTilesAsYouMove:			; XREF: Demo_Time
00007368 4BF9 00C0 0004             		lea	($C00004).l,a5
0000736E 4DF9 00C0 0000             		lea	($C00000).l,a6
00007374 45F8 FF32                  		lea	($FFFFFF32).w,a2
00007378 47F8 FF18                  		lea	($FFFFFF18).w,a3
0000737C 49F8 A440                  		lea	($FFFFA440).w,a4
00007380 343C 6000                  		move.w	#$6000,d2
00007384 6100 0000                  		bsr.w	sub_6954
00007388 45F8 FF34                  		lea	($FFFFFF34).w,a2
0000738C 47F8 FF20                  		lea	($FFFFFF20).w,a3
00007390 6100 0000                  		bsr.w	sub_69F4
00007394 45F8 FF30                  		lea	($FFFFFF30).w,a2
00007398 47F8 FF10                  		lea	($FFFFFF10).w,a3
0000739C 49F8 A400                  		lea	($FFFFA400).w,a4
000073A0 343C 4000                  		move.w	#$4000,d2
000073A4 4A12                       		tst.b	(a2)
000073A6 6700                       		beq.s	locret_6952
000073A8 0892 0000                  		bclr	#0,(a2)
000073AC 6700                       		beq.s	loc_6908
000073AE 78F0                       		moveq	#-$10,d4
000073B0 7AF0                       		moveq	#-$10,d5
000073B2 6100 0000                  		bsr.w	sub_6C20
000073B6 78F0                       		moveq	#-$10,d4
000073B8 7AF0                       		moveq	#-$10,d5
000073BA 6100 0000                  		bsr.w	sub_6AD8
000073BE                            
000073BE                            loc_6908:
000073BE 0892 0001                  		bclr	#1,(a2)
000073C2 6700                       		beq.s	loc_6922
000073C4 383C 00E0                  		move.w	#$E0,d4
000073C8 7AF0                       		moveq	#-$10,d5
000073CA 6100 0000                  		bsr.w	sub_6C20
000073CE 383C 00E0                  		move.w	#$E0,d4
000073D2 7AF0                       		moveq	#-$10,d5
000073D4 6100 0000                  		bsr.w	sub_6AD8
000073D8                            
000073D8                            loc_6922:
000073D8 0892 0002                  		bclr	#2,(a2)
000073DC 6700                       		beq.s	loc_6938
000073DE 78F0                       		moveq	#-$10,d4
000073E0 7AF0                       		moveq	#-$10,d5
000073E2 6100 0000                  		bsr.w	sub_6C20
000073E6 78F0                       		moveq	#-$10,d4
000073E8 7AF0                       		moveq	#-$10,d5
000073EA 6100 0000                  		bsr.w	sub_6B04
000073EE                            
000073EE                            loc_6938:
000073EE 0892 0003                  		bclr	#3,(a2)
000073F2 6700                       		beq.s	locret_6952
000073F4 78F0                       		moveq	#-$10,d4
000073F6 3A3C 0140                  		move.w	#$140,d5
000073FA 6100 0000                  		bsr.w	sub_6C20
000073FE 78F0                       		moveq	#-$10,d4
00007400 3A3C 0140                  		move.w	#$140,d5
00007404 6100 0000                  		bsr.w	sub_6B04
00007408                            
00007408                            locret_6952:
00007408 4E75                       		rts	
0000740A                            ; End of function LoadTilesAsYouMove
0000740A                            
0000740A                            
0000740A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000740A                            
0000740A                            
0000740A                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
0000740A 4A12                       		tst.b	(a2)
0000740C 6700 0000                  		beq.w	locret_69F2
00007410 0892 0000                  		bclr	#0,(a2)
00007414 6700                       		beq.s	loc_6972
00007416 78F0                       		moveq	#-$10,d4
00007418 7AF0                       		moveq	#-$10,d5
0000741A 6100 0000                  		bsr.w	sub_6C20
0000741E 78F0                       		moveq	#-$10,d4
00007420 7AF0                       		moveq	#-$10,d5
00007422 7C1F                       		moveq	#$1F,d6
00007424 6100 0000                  		bsr.w	sub_6ADA
00007428                            
00007428                            loc_6972:
00007428 0892 0001                  		bclr	#1,(a2)
0000742C 6700                       		beq.s	loc_698E
0000742E 383C 00E0                  		move.w	#$E0,d4
00007432 7AF0                       		moveq	#-$10,d5
00007434 6100 0000                  		bsr.w	sub_6C20
00007438 383C 00E0                  		move.w	#$E0,d4
0000743C 7AF0                       		moveq	#-$10,d5
0000743E 7C1F                       		moveq	#$1F,d6
00007440 6100 0000                  		bsr.w	sub_6ADA
00007444                            
00007444                            loc_698E:
00007444 0892 0002                  		bclr	#2,(a2)
00007448 6700                       		beq.s	loc_69BE
0000744A 78F0                       		moveq	#-$10,d4
0000744C 7AF0                       		moveq	#-$10,d5
0000744E 6100 0000                  		bsr.w	sub_6C20
00007452 78F0                       		moveq	#-$10,d4
00007454 7AF0                       		moveq	#-$10,d5
00007456 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000745A 322B 0004                  		move.w	4(a3),d1
0000745E 0241 FFF0                  		andi.w	#-$10,d1
00007462 9C41                       		sub.w	d1,d6
00007464 6D00                       		blt.s	loc_69BE
00007466 E84E                       		lsr.w	#4,d6
00007468 0C46 000F                  		cmpi.w	#$F,d6
0000746C 6500                       		bcs.s	loc_69BA
0000746E 7C0F                       		moveq	#$F,d6
00007470                            
00007470                            loc_69BA:
00007470 6100 0000                  		bsr.w	sub_6B06
00007474                            
00007474                            loc_69BE:
00007474 0892 0003                  		bclr	#3,(a2)
00007478 6700                       		beq.s	locret_69F2
0000747A 78F0                       		moveq	#-$10,d4
0000747C 3A3C 0140                  		move.w	#$140,d5
00007480 6100 0000                  		bsr.w	sub_6C20
00007484 78F0                       		moveq	#-$10,d4
00007486 3A3C 0140                  		move.w	#$140,d5
0000748A 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000748E 322B 0004                  		move.w	4(a3),d1
00007492 0241 FFF0                  		andi.w	#-$10,d1
00007496 9C41                       		sub.w	d1,d6
00007498 6D00                       		blt.s	locret_69F2
0000749A E84E                       		lsr.w	#4,d6
0000749C 0C46 000F                  		cmpi.w	#$F,d6
000074A0 6500                       		bcs.s	loc_69EE
000074A2 7C0F                       		moveq	#$F,d6
000074A4                            
000074A4                            loc_69EE:
000074A4 6100 0000                  		bsr.w	sub_6B06
000074A8                            
000074A8                            locret_69F2:
000074A8 4E75                       		rts	
000074AA                            ; End of function sub_6954
000074AA                            
000074AA                            
000074AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000074AA                            
000074AA                            
000074AA                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
000074AA 4A12                       		tst.b	(a2)
000074AC 6700 0000                  		beq.w	locret_6A80
000074B0 0892 0002                  		bclr	#2,(a2)
000074B4 6700                       		beq.s	loc_6A3E
000074B6 0C53 0010                  		cmpi.w	#$10,(a3)
000074BA 6500                       		bcs.s	loc_6A3E
000074BC 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
000074C0 322B 0004                  		move.w	4(a3),d1
000074C4 0241 FFF0                  		andi.w	#-$10,d1
000074C8 9841                       		sub.w	d1,d4
000074CA 3F04                       		move.w	d4,-(sp)
000074CC 7AF0                       		moveq	#-$10,d5
000074CE 6100 0000                  		bsr.w	sub_6C20
000074D2 381F                       		move.w	(sp)+,d4
000074D4 7AF0                       		moveq	#-$10,d5
000074D6 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000074DA 322B 0004                  		move.w	4(a3),d1
000074DE 0241 FFF0                  		andi.w	#-$10,d1
000074E2 9C41                       		sub.w	d1,d6
000074E4 6D00                       		blt.s	loc_6A3E
000074E6 E84E                       		lsr.w	#4,d6
000074E8 0446 000E                  		subi.w	#$E,d6
000074EC 6400                       		bcc.s	loc_6A3E
000074EE 4446                       		neg.w	d6
000074F0 6100 0000                  		bsr.w	sub_6B06
000074F4                            
000074F4                            loc_6A3E:
000074F4 0892 0003                  		bclr	#3,(a2)
000074F8 6700                       		beq.s	locret_6A80
000074FA 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
000074FE 322B 0004                  		move.w	4(a3),d1
00007502 0241 FFF0                  		andi.w	#-$10,d1
00007506 9841                       		sub.w	d1,d4
00007508 3F04                       		move.w	d4,-(sp)
0000750A 3A3C 0140                  		move.w	#$140,d5
0000750E 6100 0000                  		bsr.w	sub_6C20
00007512 381F                       		move.w	(sp)+,d4
00007514 3A3C 0140                  		move.w	#$140,d5
00007518 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000751C 322B 0004                  		move.w	4(a3),d1
00007520 0241 FFF0                  		andi.w	#-$10,d1
00007524 9C41                       		sub.w	d1,d6
00007526 6D00                       		blt.s	locret_6A80
00007528 E84E                       		lsr.w	#4,d6
0000752A 0446 000E                  		subi.w	#$E,d6
0000752E 6400                       		bcc.s	locret_6A80
00007530 4446                       		neg.w	d6
00007532 6100 0000                  		bsr.w	sub_6B06
00007536                            
00007536                            locret_6A80:
00007536 4E75                       		rts	
00007538                            ; End of function sub_69F4
00007538                            
00007538                            ; ===========================================================================
00007538 4A12                       		tst.b	(a2)
0000753A 6700                       		beq.s	locret_6AD6
0000753C 0892 0002                  		bclr	#2,(a2)
00007540 6700                       		beq.s	loc_6AAC
00007542 383C 00D0                  		move.w	#$D0,d4
00007546 322B 0004                  		move.w	4(a3),d1
0000754A 0241 FFF0                  		andi.w	#-$10,d1
0000754E 9841                       		sub.w	d1,d4
00007550 3F04                       		move.w	d4,-(sp)
00007552 7AF0                       		moveq	#-$10,d5
00007554 6100 0000                  		bsr.w	sub_6C3C
00007558 381F                       		move.w	(sp)+,d4
0000755A 7AF0                       		moveq	#-$10,d5
0000755C 7C02                       		moveq	#2,d6
0000755E 6100 0000                  		bsr.w	sub_6B06
00007562                            
00007562                            loc_6AAC:
00007562 0892 0003                  		bclr	#3,(a2)
00007566 6700                       		beq.s	locret_6AD6
00007568 383C 00D0                  		move.w	#$D0,d4
0000756C 322B 0004                  		move.w	4(a3),d1
00007570 0241 FFF0                  		andi.w	#-$10,d1
00007574 9841                       		sub.w	d1,d4
00007576 3F04                       		move.w	d4,-(sp)
00007578 3A3C 0140                  		move.w	#$140,d5
0000757C 6100 0000                  		bsr.w	sub_6C3C
00007580 381F                       		move.w	(sp)+,d4
00007582 3A3C 0140                  		move.w	#$140,d5
00007586 7C02                       		moveq	#2,d6
00007588 6100 0000                  		bsr.w	sub_6B06
0000758C                            
0000758C                            locret_6AD6:
0000758C 4E75                       		rts	
0000758E                            
0000758E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000758E                            
0000758E                            
0000758E                            sub_6AD8:				; XREF: LoadTilesAsYouMove
0000758E 7C15                       		moveq	#$15,d6
00007590                            ; End of function sub_6AD8
00007590                            
00007590                            
00007590                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007590                            
00007590                            
00007590                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00007590 2E3C 0080 0000             		move.l	#$800000,d7
00007596 2200                       		move.l	d0,d1
00007598                            
00007598                            loc_6AE2:
00007598 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000759C 6100 0000                  		bsr.w	sub_6BD6
000075A0 2001                       		move.l	d1,d0
000075A2 6100 0000                  		bsr.w	sub_6B32
000075A6 5801                       		addq.b	#4,d1
000075A8 0201 007F                  		andi.b	#$7F,d1
000075AC 4CDF 0030                  		movem.l	(sp)+,d4-d5
000075B0 0645 0010                  		addi.w	#$10,d5
000075B4 51CE FFE2                  		dbf	d6,loc_6AE2
000075B8 4E75                       		rts	
000075BA                            ; End of function sub_6ADA
000075BA                            
000075BA                            
000075BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000075BA                            
000075BA                            
000075BA                            sub_6B04:				; XREF: LoadTilesAsYouMove
000075BA 7C0F                       		moveq	#$F,d6
000075BC                            ; End of function sub_6B04
000075BC                            
000075BC                            
000075BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000075BC                            
000075BC                            
000075BC                            sub_6B06:				; XREF: sub_6954
000075BC 2E3C 0080 0000             		move.l	#$800000,d7
000075C2 2200                       		move.l	d0,d1
000075C4                            
000075C4                            loc_6B0E:
000075C4 48E7 0C00                  		movem.l	d4-d5,-(sp)
000075C8 6100 0000                  		bsr.w	sub_6BD6
000075CC 2001                       		move.l	d1,d0
000075CE 6100 0000                  		bsr.w	sub_6B32
000075D2 0641 0100                  		addi.w	#$100,d1
000075D6 0241 0FFF                  		andi.w	#$FFF,d1
000075DA 4CDF 0030                  		movem.l	(sp)+,d4-d5
000075DE 0644 0010                  		addi.w	#$10,d4
000075E2 51CE FFE0                  		dbf	d6,loc_6B0E
000075E6 4E75                       		rts	
000075E8                            ; End of function sub_6B06
000075E8                            
000075E8                            
000075E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000075E8                            
000075E8                            
000075E8                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
000075E8 8042                       		or.w	d2,d0
000075EA 4840                       		swap	d0
000075EC 0810 0004                  		btst	#4,(a0)
000075F0 6600                       		bne.s	loc_6B6E
000075F2 0810 0003                  		btst	#3,(a0)
000075F6 6600                       		bne.s	loc_6B4E
000075F8 2A80                       		move.l	d0,(a5)
000075FA 2C99                       		move.l	(a1)+,(a6)
000075FC D087                       		add.l	d7,d0
000075FE 2A80                       		move.l	d0,(a5)
00007600 2C99                       		move.l	(a1)+,(a6)
00007602 4E75                       		rts	
00007604                            ; ===========================================================================
00007604                            
00007604                            loc_6B4E:
00007604 2A80                       		move.l	d0,(a5)
00007606 2819                       		move.l	(a1)+,d4
00007608 0A84 0800 0800             		eori.l	#$8000800,d4
0000760E 4844                       		swap	d4
00007610 2C84                       		move.l	d4,(a6)
00007612 D087                       		add.l	d7,d0
00007614 2A80                       		move.l	d0,(a5)
00007616 2819                       		move.l	(a1)+,d4
00007618 0A84 0800 0800             		eori.l	#$8000800,d4
0000761E 4844                       		swap	d4
00007620 2C84                       		move.l	d4,(a6)
00007622 4E75                       		rts	
00007624                            ; ===========================================================================
00007624                            
00007624                            loc_6B6E:
00007624 0810 0003                  		btst	#3,(a0)
00007628 6600                       		bne.s	loc_6B90
0000762A 2A80                       		move.l	d0,(a5)
0000762C 2A19                       		move.l	(a1)+,d5
0000762E 2819                       		move.l	(a1)+,d4
00007630 0A84 1000 1000             		eori.l	#$10001000,d4
00007636 2C84                       		move.l	d4,(a6)
00007638 D087                       		add.l	d7,d0
0000763A 2A80                       		move.l	d0,(a5)
0000763C 0A85 1000 1000             		eori.l	#$10001000,d5
00007642 2C85                       		move.l	d5,(a6)
00007644 4E75                       		rts	
00007646                            ; ===========================================================================
00007646                            
00007646                            loc_6B90:
00007646 2A80                       		move.l	d0,(a5)
00007648 2A19                       		move.l	(a1)+,d5
0000764A 2819                       		move.l	(a1)+,d4
0000764C 0A84 1800 1800             		eori.l	#$18001800,d4
00007652 4844                       		swap	d4
00007654 2C84                       		move.l	d4,(a6)
00007656 D087                       		add.l	d7,d0
00007658 2A80                       		move.l	d0,(a5)
0000765A 0A85 1800 1800             		eori.l	#$18001800,d5
00007660 4845                       		swap	d5
00007662 2C85                       		move.l	d5,(a6)
00007664 4E75                       		rts	
00007666                            ; End of function sub_6B32
00007666                            
00007666                            ; ===========================================================================
00007666 4E75                       		rts	
00007668                            ; ===========================================================================
00007668 2A80                       		move.l	d0,(a5)
0000766A 3A3C 2000                  		move.w	#$2000,d5
0000766E 3819                       		move.w	(a1)+,d4
00007670 D845                       		add.w	d5,d4
00007672 3C84                       		move.w	d4,(a6)
00007674 3819                       		move.w	(a1)+,d4
00007676 D845                       		add.w	d5,d4
00007678 3C84                       		move.w	d4,(a6)
0000767A D087                       		add.l	d7,d0
0000767C 2A80                       		move.l	d0,(a5)
0000767E 3819                       		move.w	(a1)+,d4
00007680 D845                       		add.w	d5,d4
00007682 3C84                       		move.w	d4,(a6)
00007684 3819                       		move.w	(a1)+,d4
00007686 D845                       		add.w	d5,d4
00007688 3C84                       		move.w	d4,(a6)
0000768A 4E75                       		rts	
0000768C                            
0000768C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000768C                            
0000768C                            
0000768C                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
0000768C 43F8 B000                  		lea	($FFFFB000).w,a1
00007690 D86B 0004                  		add.w	4(a3),d4
00007694 DA53                       		add.w	(a3),d5
00007696 3604                       		move.w	d4,d3
00007698 E24B                       		lsr.w	#1,d3
0000769A 0243 0380                  		andi.w	#$380,d3
0000769E E64D                       		lsr.w	#3,d5
000076A0 3005                       		move.w	d5,d0
000076A2 EA48                       		lsr.w	#5,d0
000076A4 0240 007F                  		andi.w	#$7F,d0
000076A8 D043                       		add.w	d3,d0
000076AA 76FF                       		moveq	#-1,d3
000076AC 1634 0000                  		move.b	(a4,d0.w),d3
000076B0 6700                       		beq.s	locret_6C1E
000076B2 5303                       		subq.b	#1,d3
000076B4 0243 007F                  		andi.w	#$7F,d3
000076B8 EE5B                       		ror.w	#7,d3
000076BA D844                       		add.w	d4,d4
000076BC 0244 01E0                  		andi.w	#$1E0,d4
000076C0 0245 001E                  		andi.w	#$1E,d5
000076C4 D644                       		add.w	d4,d3
000076C6 D645                       		add.w	d5,d3
000076C8 2043                       		movea.l	d3,a0
000076CA 3610                       		move.w	(a0),d3
000076CC 0243 03FF                  		andi.w	#$3FF,d3
000076D0 E74B                       		lsl.w	#3,d3
000076D2 D2C3                       		adda.w	d3,a1
000076D4                            
000076D4                            locret_6C1E:
000076D4 4E75                       		rts	
000076D6                            ; End of function sub_6BD6
000076D6                            
000076D6                            
000076D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076D6                            
000076D6                            
000076D6                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
000076D6 D86B 0004                  		add.w	4(a3),d4
000076DA DA53                       		add.w	(a3),d5
000076DC 0244 00F0                  		andi.w	#$F0,d4
000076E0 0245 01F0                  		andi.w	#$1F0,d5
000076E4 E94C                       		lsl.w	#4,d4
000076E6 E44D                       		lsr.w	#2,d5
000076E8 D845                       		add.w	d5,d4
000076EA 7003                       		moveq	#3,d0
000076EC 4840                       		swap	d0
000076EE 3004                       		move.w	d4,d0
000076F0 4E75                       		rts	
000076F2                            ; End of function sub_6C20
000076F2                            
000076F2                            
000076F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076F2                            ; not used
000076F2                            
000076F2                            
000076F2                            sub_6C3C:
000076F2 D86B 0004                  		add.w	4(a3),d4
000076F6 DA53                       		add.w	(a3),d5
000076F8 0244 00F0                  		andi.w	#$F0,d4
000076FC 0245 01F0                  		andi.w	#$1F0,d5
00007700 E94C                       		lsl.w	#4,d4
00007702 E44D                       		lsr.w	#2,d5
00007704 D845                       		add.w	d5,d4
00007706 7002                       		moveq	#2,d0
00007708 4840                       		swap	d0
0000770A 3004                       		move.w	d4,d0
0000770C 4E75                       		rts	
0000770E                            ; End of function sub_6C3C
0000770E                            
0000770E                            ; ---------------------------------------------------------------------------
0000770E                            ; Subroutine to	load tiles as soon as the level	appears
0000770E                            ; ---------------------------------------------------------------------------
0000770E                            
0000770E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000770E                            
0000770E                            
0000770E                            LoadTilesFromStart:			; XREF: Level; EndingSequence
0000770E 4BF9 00C0 0004             		lea	($C00004).l,a5
00007714 4DF9 00C0 0000             		lea	($C00000).l,a6
0000771A 47F8 F700                  		lea	($FFFFF700).w,a3
0000771E 49F8 A400                  		lea	($FFFFA400).w,a4
00007722 343C 4000                  		move.w	#$4000,d2
00007726 6100                       		bsr.s	LoadTilesFromStart2
00007728 47F8 F708                  		lea	($FFFFF708).w,a3
0000772C 49F8 A440                  		lea	($FFFFA440).w,a4
00007730 343C 6000                  		move.w	#$6000,d2
00007734                            ; End of function LoadTilesFromStart
00007734                            
00007734                            
00007734                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007734                            
00007734                            
00007734                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
00007734 78F0                       		moveq	#-$10,d4
00007736 7C0F                       		moveq	#$F,d6
00007738                            
00007738                            loc_6C82:
00007738 48E7 0E00                  		movem.l	d4-d6,-(sp)
0000773C 7A00                       		moveq	#0,d5
0000773E 3204                       		move.w	d4,d1
00007740 6100 FF94                  		bsr.w	sub_6C20
00007744 3801                       		move.w	d1,d4
00007746 7A00                       		moveq	#0,d5
00007748 7C1F                       		moveq	#$1F,d6
0000774A 6100 FE44                  		bsr.w	sub_6ADA
0000774E 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007752 0644 0010                  		addi.w	#$10,d4
00007756 51CE FFE0                  		dbf	d6,loc_6C82
0000775A 4E75                       		rts	
0000775C                            ; End of function LoadTilesFromStart2
0000775C                            
0000775C                            ; ---------------------------------------------------------------------------
0000775C                            ; Main Load Block loading subroutine
0000775C                            ; ---------------------------------------------------------------------------
0000775C                            
0000775C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000775C                            
0000775C                            
0000775C                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
0000775C 7000                       		moveq	#0,d0
0000775E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007762 E948                       		lsl.w	#4,d0
00007764 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
0000776A 45F2 0000                  		lea	(a2,d0.w),a2
0000776E 2F0A                       		move.l	a2,-(sp)
00007770 588A                       		addq.l	#4,a2
00007772 205A                       		movea.l	(a2)+,a0
00007774 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00007778 303C 0000                  		move.w	#0,d0
0000777C 6100 A10A                  		bsr.w	EniDec
00007780 205A                       		movea.l	(a2)+,a0
00007782 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00007788 6100 A27C                  		bsr.w	KosDec
0000778C 6100 0000                  		bsr.w	LevelLayoutLoad
00007790 301A                       		move.w	(a2)+,d0
00007792 3012                       		move.w	(a2),d0
00007794 0240 00FF                  		andi.w	#$FF,d0
00007798 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
0000779E 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
000077A0 700C                       		moveq	#$C,d0		; use SB3 pallet
000077A2                            
000077A2                            MLB_ChkSBZPal:
000077A2 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
000077A8 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
000077AA 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
000077B0 6600                       		bne.s	MLB_NormalPal	; if not, branch
000077B2                            
000077B2                            MLB_UsePal0E:
000077B2 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
000077B4                            
000077B4                            MLB_NormalPal:
000077B4 6100 AC78                  		bsr.w	PalLoad1	; load pallet (based on	d0)
000077B8 245F                       		movea.l	(sp)+,a2
000077BA 584A                       		addq.w	#4,a2
000077BC 7000                       		moveq	#0,d0
000077BE 1012                       		move.b	(a2),d0
000077C0 6700                       		beq.s	locret_6D10
000077C2 6100 9F26                  		bsr.w	LoadPLC		; load pattern load cues
000077C6                            
000077C6                            locret_6D10:
000077C6 4E75                       		rts	
000077C8                            ; End of function MainLoadBlockLoad
000077C8                            
000077C8                            ; ---------------------------------------------------------------------------
000077C8                            ; Level	layout loading subroutine
000077C8                            ; ---------------------------------------------------------------------------
000077C8                            
000077C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000077C8                            
000077C8                            
000077C8                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
000077C8 47F8 A400                  		lea	($FFFFA400).w,a3
000077CC 323C 01FF                  		move.w	#$1FF,d1
000077D0 7000                       		moveq	#0,d0
000077D2                            
000077D2                            LevLoad_ClrRam:
000077D2 26C0                       		move.l	d0,(a3)+
000077D4 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
000077D8                            
000077D8 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
000077DC 7200                       		moveq	#0,d1
000077DE 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
000077E2 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
000077E6 7202                       		moveq	#2,d1
000077E8                            ; End of function LevelLayoutLoad
000077E8                            
000077E8                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
000077E8                            
000077E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000077E8                            
000077E8                            
000077E8                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
000077E8 3038 FE10                  		move.w	($FFFFFE10).w,d0
000077EC ED08                       		lsl.b	#6,d0
000077EE EA48                       		lsr.w	#5,d0
000077F0 3400                       		move.w	d0,d2
000077F2 D040                       		add.w	d0,d0
000077F4 D042                       		add.w	d2,d0
000077F6 D041                       		add.w	d1,d0
000077F8 43F9 0000 0000             		lea	(Level_Index).l,a1
000077FE 3031 0000                  		move.w	(a1,d0.w),d0
00007802 43F1 0000                  		lea	(a1,d0.w),a1
00007806 7200                       		moveq	#0,d1
00007808 3401                       		move.w	d1,d2
0000780A 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
0000780C 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
0000780E                            
0000780E                            LevLoad_NumRows:
0000780E 3001                       		move.w	d1,d0
00007810 204B                       		movea.l	a3,a0
00007812                            
00007812                            LevLoad_Row:
00007812 10D9                       		move.b	(a1)+,(a0)+
00007814 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00007818 47EB 0080                  		lea	$80(a3),a3	; do next row
0000781C 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00007820 4E75                       		rts	
00007822                            ; End of function LevelLayoutLoad2
00007822                            
00007822                            ; ---------------------------------------------------------------------------
00007822                            ; Dynamic screen resize	loading	subroutine
00007822                            ; ---------------------------------------------------------------------------
00007822                            
00007822                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007822                            
00007822                            
00007822                            DynScrResizeLoad:			; XREF: DeformBgLayer
00007822 7000                       		moveq	#0,d0
00007824 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007828 D040                       		add.w	d0,d0
0000782A 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
0000782E 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00007832 7202                       		moveq	#2,d1
00007834 3038 F726                  		move.w	($FFFFF726).w,d0
00007838 9078 F72E                  		sub.w	($FFFFF72E).w,d0
0000783C 6700                       		beq.s	locret_6DAA
0000783E 6400                       		bcc.s	loc_6DAC
00007840 4441                       		neg.w	d1
00007842 3038 F704                  		move.w	($FFFFF704).w,d0
00007846 B078 F726                  		cmp.w	($FFFFF726).w,d0
0000784A 6300                       		bls.s	loc_6DA0
0000784C 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00007850 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00007856                            
00007856                            loc_6DA0:
00007856 D378 F72E                  		add.w	d1,($FFFFF72E).w
0000785A 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007860                            
00007860                            locret_6DAA:
00007860 4E75                       		rts	
00007862                            ; ===========================================================================
00007862                            
00007862                            loc_6DAC:				; XREF: DynScrResizeLoad
00007862 3038 F704                  		move.w	($FFFFF704).w,d0
00007866 5040                       		addq.w	#8,d0
00007868 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
0000786C 6500                       		bcs.s	loc_6DC4
0000786E 0838 0001 D022             		btst	#1,($FFFFD022).w
00007874 6700                       		beq.s	loc_6DC4
00007876 D241                       		add.w	d1,d1
00007878 D241                       		add.w	d1,d1
0000787A                            
0000787A                            loc_6DC4:
0000787A D378 F72E                  		add.w	d1,($FFFFF72E).w
0000787E 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007884 4E75                       		rts	
00007886                            ; End of function DynScrResizeLoad
00007886                            
00007886                            ; ===========================================================================
00007886                            ; ---------------------------------------------------------------------------
00007886                            ; Offset index for dynamic screen resizing
00007886                            ; ---------------------------------------------------------------------------
00007886 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
0000788A 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
0000788E 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00007892 0000                       		dc.w Resize_Ending-Resize_Index
00007894                            ; ===========================================================================
00007894                            ; ---------------------------------------------------------------------------
00007894                            ; Green	Hill Zone dynamic screen resizing
00007894                            ; ---------------------------------------------------------------------------
00007894                            
00007894                            Resize_GHZ:				; XREF: Resize_Index
00007894 7000                       		moveq	#0,d0
00007896 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000789A D040                       		add.w	d0,d0
0000789C 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
000078A0 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
000078A4                            ; ===========================================================================
000078A4 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
000078A6 0000                       		dc.w Resize_GHZ2-Resize_GHZx
000078A8 0000                       		dc.w Resize_GHZ3-Resize_GHZx
000078AA                            ; ===========================================================================
000078AA                            
000078AA                            Resize_GHZ1:
000078AA 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
000078B0 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
000078B6 6500                       		bcs.s	locret_6E08	; if not, branch
000078B8 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
000078BE                            
000078BE                            locret_6E08:
000078BE 4E75                       		rts	
000078C0                            ; ===========================================================================
000078C0                            
000078C0                            Resize_GHZ2:
000078C0 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000078C6 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
000078CC 6500                       		bcs.s	locret_6E3A
000078CE 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000078D4 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
000078DA 6500                       		bcs.s	locret_6E3A
000078DC 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
000078E2 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
000078E8 6500                       		bcs.s	locret_6E3A
000078EA 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000078F0                            
000078F0                            locret_6E3A:
000078F0 4E75                       		rts	
000078F2                            ; ===========================================================================
000078F2                            
000078F2                            Resize_GHZ3:
000078F2 7000                       		moveq	#0,d0
000078F4 1038 F742                  		move.b	($FFFFF742).w,d0
000078F8 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
000078FC 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00007900                            ; ===========================================================================
00007900 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00007902 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00007904 0000                       		dc.w Resize_GHZ3end-off_6E4A
00007906                            ; ===========================================================================
00007906                            
00007906                            Resize_GHZ3main:
00007906 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000790C 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00007912 6500                       		bcs.s	locret_6E96
00007914 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
0000791A 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007920 6500                       		bcs.s	locret_6E96
00007922 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00007928 6500                       		bcs.s	loc_6E98
0000792A 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007930 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00007936 6400                       		bcc.s	loc_6E8E
00007938 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
0000793E 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00007944                            
00007944                            loc_6E8E:
00007944 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000794A 6400                       		bcc.s	loc_6E98
0000794C                            
0000794C                            locret_6E96:
0000794C 4E75                       		rts	
0000794E                            ; ===========================================================================
0000794E                            
0000794E                            loc_6E98:
0000794E 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007954 5438 F742                  		addq.b	#2,($FFFFF742).w
00007958 4E75                       		rts	
0000795A                            ; ===========================================================================
0000795A                            
0000795A                            Resize_GHZ3boss:
0000795A 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007960 6400                       		bcc.s	loc_6EB0
00007962 5538 F742                  		subq.b	#2,($FFFFF742).w
00007966                            
00007966                            loc_6EB0:
00007966 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
0000796C 6500                       		bcs.s	locret_6EE8
0000796E 6100 0000                  		bsr.w	SingleObjLoad
00007972 6600                       		bne.s	loc_6ED0
00007974 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00007978 337C 2A60 0008             		move.w	#$2A60,8(a1)
0000797E 337C 0280 000C             		move.w	#$280,$C(a1)
00007984                            
00007984                            loc_6ED0:
00007984 303C 008C                  		move.w	#$8C,d0
00007988 6100 9AE6                  		bsr.w	PlaySound	; play boss music
0000798C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007992 5438 F742                  		addq.b	#2,($FFFFF742).w
00007996 7011                       		moveq	#$11,d0
00007998 6000 9D50                  		bra.w	LoadPLC		; load boss patterns
0000799C                            ; ===========================================================================
0000799C                            
0000799C                            locret_6EE8:
0000799C 4E75                       		rts	
0000799E                            ; ===========================================================================
0000799E                            
0000799E                            Resize_GHZ3end:
0000799E 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000079A4 4E75                       		rts	
000079A6                            ; ===========================================================================
000079A6                            ; ---------------------------------------------------------------------------
000079A6                            ; Labyrinth Zone dynamic screen	resizing
000079A6                            ; ---------------------------------------------------------------------------
000079A6                            
000079A6                            Resize_LZ:				; XREF: Resize_Index
000079A6 7000                       		moveq	#0,d0
000079A8 1038 FE11                  		move.b	($FFFFFE11).w,d0
000079AC D040                       		add.w	d0,d0
000079AE 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
000079B2 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
000079B6                            ; ===========================================================================
000079B6 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
000079B8 0000                       		dc.w Resize_LZ12-Resize_LZx
000079BA 0000                       		dc.w Resize_LZ3-Resize_LZx
000079BC 0000                       		dc.w Resize_SBZ3-Resize_LZx
000079BE                            ; ===========================================================================
000079BE                            
000079BE                            Resize_LZ12:
000079BE 4E75                       		rts	
000079C0                            ; ===========================================================================
000079C0                            
000079C0                            Resize_LZ3:
000079C0 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
000079C4 6700                       		beq.s	loc_6F28	; if not, branch
000079C6 43F8 A506                  		lea	($FFFFA506).w,a1
000079CA 0C11 0007                  		cmpi.b	#7,(a1)
000079CE 6700                       		beq.s	loc_6F28
000079D0 12BC 0007                  		move.b	#7,(a1)		; modify level layout
000079D4 303C 00B7                  		move.w	#$B7,d0
000079D8 6100 9A9C                  		bsr.w	PlaySound_Special ; play rumbling sound
000079DC                            
000079DC                            loc_6F28:
000079DC 4A38 F742                  		tst.b	($FFFFF742).w
000079E0 6600                       		bne.s	locret_6F64
000079E2 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
000079E8 6500                       		bcs.s	locret_6F62
000079EA 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
000079F0 6400                       		bcc.s	locret_6F62
000079F2 6100 0000                  		bsr.w	SingleObjLoad
000079F6 6600                       		bne.s	loc_6F4A
000079F8 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
000079FC                            
000079FC                            loc_6F4A:
000079FC 303C 008C                  		move.w	#$8C,d0
00007A00 6100 9A6E                  		bsr.w	PlaySound	; play boss music
00007A04 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007A0A 5438 F742                  		addq.b	#2,($FFFFF742).w
00007A0E 7011                       		moveq	#$11,d0
00007A10 6000 9CD8                  		bra.w	LoadPLC		; load boss patterns
00007A14                            ; ===========================================================================
00007A14                            
00007A14                            locret_6F62:
00007A14 4E75                       		rts	
00007A16                            ; ===========================================================================
00007A16                            
00007A16                            locret_6F64:
00007A16 4E75                       		rts	
00007A18                            ; ===========================================================================
00007A18                            
00007A18                            Resize_SBZ3:
00007A18 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007A1E 6500                       		bcs.s	locret_6F8C
00007A20 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00007A26 6400                       		bcc.s	locret_6F8C	; if not, branch
00007A28 4238 FE30                  		clr.b	($FFFFFE30).w
00007A2C 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
00007A32 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00007A38 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00007A3E                            
00007A3E                            locret_6F8C:
00007A3E 4E75                       		rts	
00007A40                            ; ===========================================================================
00007A40                            ; ---------------------------------------------------------------------------
00007A40                            ; Marble Zone dynamic screen resizing
00007A40                            ; ---------------------------------------------------------------------------
00007A40                            
00007A40                            Resize_MZ:				; XREF: Resize_Index
00007A40 7000                       		moveq	#0,d0
00007A42 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007A46 D040                       		add.w	d0,d0
00007A48 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00007A4C 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
00007A50                            ; ===========================================================================
00007A50 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
00007A52 0000                       		dc.w Resize_MZ2-Resize_MZx
00007A54 0000                       		dc.w Resize_MZ3-Resize_MZx
00007A56                            ; ===========================================================================
00007A56                            
00007A56                            Resize_MZ1:
00007A56 7000                       		moveq	#0,d0
00007A58 1038 F742                  		move.b	($FFFFF742).w,d0
00007A5C 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00007A60 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
00007A64                            ; ===========================================================================
00007A64 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
00007A66 0000                       		dc.w loc_6FEA-off_6FB2
00007A68 0000                       		dc.w loc_702E-off_6FB2
00007A6A 0000                       		dc.w loc_7050-off_6FB2
00007A6C                            ; ===========================================================================
00007A6C                            
00007A6C                            loc_6FBA:
00007A6C 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
00007A72 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
00007A78 6500                       		bcs.s	locret_6FE8
00007A7A 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00007A80 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007A86 6500                       		bcs.s	locret_6FE8
00007A88 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007A8E 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007A94 6500                       		bcs.s	locret_6FE8
00007A96 5438 F742                  		addq.b	#2,($FFFFF742).w
00007A9A                            
00007A9A                            locret_6FE8:
00007A9A 4E75                       		rts	
00007A9C                            ; ===========================================================================
00007A9C                            
00007A9C                            loc_6FEA:
00007A9C 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007AA2 6400                       		bcc.s	loc_6FF8
00007AA4 5538 F742                  		subq.b	#2,($FFFFF742).w
00007AA8 4E75                       		rts	
00007AAA                            ; ===========================================================================
00007AAA                            
00007AAA                            loc_6FF8:
00007AAA 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007AB0 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00007AB6 6400                       		bcc.s	locret_702C
00007AB8 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00007ABE 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007AC4 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007ACA 6400                       		bcc.s	locret_702C
00007ACC 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007AD2 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007AD8 6500                       		bcs.s	locret_702C
00007ADA 5438 F742                  		addq.b	#2,($FFFFF742).w
00007ADE                            
00007ADE                            locret_702C:
00007ADE 4E75                       		rts	
00007AE0                            ; ===========================================================================
00007AE0                            
00007AE0                            loc_702E:
00007AE0 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007AE6 6400                       		bcc.s	loc_703C
00007AE8 5538 F742                  		subq.b	#2,($FFFFF742).w
00007AEC 4E75                       		rts	
00007AEE                            ; ===========================================================================
00007AEE                            
00007AEE                            loc_703C:
00007AEE 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00007AF4 6500                       		bcs.s	locret_704E
00007AF6 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00007AFC 5438 F742                  		addq.b	#2,($FFFFF742).w
00007B00                            
00007B00                            locret_704E:
00007B00 4E75                       		rts	
00007B02                            ; ===========================================================================
00007B02                            
00007B02                            loc_7050:
00007B02 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00007B08 6500                       		bcs.s	locret_7072
00007B0A 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007B10 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007B16 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00007B1C 6500                       		bcs.s	locret_7072
00007B1E 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007B24                            
00007B24                            locret_7072:
00007B24 4E75                       		rts	
00007B26                            ; ===========================================================================
00007B26                            
00007B26                            Resize_MZ2:
00007B26 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007B2C 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007B32 6500                       		bcs.s	locret_7088
00007B34 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007B3A                            
00007B3A                            locret_7088:
00007B3A 4E75                       		rts	
00007B3C                            ; ===========================================================================
00007B3C                            
00007B3C                            Resize_MZ3:
00007B3C 7000                       		moveq	#0,d0
00007B3E 1038 F742                  		move.b	($FFFFF742).w,d0
00007B42 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00007B46 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00007B4A                            ; ===========================================================================
00007B4A 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00007B4C 0000                       		dc.w Resize_MZ3end-off_7098
00007B4E                            ; ===========================================================================
00007B4E                            
00007B4E                            Resize_MZ3boss:
00007B4E 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007B54 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00007B5A 6500                       		bcs.s	locret_70E8
00007B5C 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007B62 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
00007B68 6500                       		bcs.s	locret_70E8
00007B6A 6100 0000                  		bsr.w	SingleObjLoad
00007B6E 6600                       		bne.s	loc_70D0
00007B70 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
00007B74 337C 19F0 0008             		move.w	#$19F0,8(a1)
00007B7A 337C 022C 000C             		move.w	#$22C,$C(a1)
00007B80                            
00007B80                            loc_70D0:
00007B80 303C 008C                  		move.w	#$8C,d0
00007B84 6100 98EA                  		bsr.w	PlaySound	; play boss music
00007B88 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007B8E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007B92 7011                       		moveq	#$11,d0
00007B94 6000 9B54                  		bra.w	LoadPLC		; load boss patterns
00007B98                            ; ===========================================================================
00007B98                            
00007B98                            locret_70E8:
00007B98 4E75                       		rts	
00007B9A                            ; ===========================================================================
00007B9A                            
00007B9A                            Resize_MZ3end:
00007B9A 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007BA0 4E75                       		rts	
00007BA2                            ; ===========================================================================
00007BA2                            ; ---------------------------------------------------------------------------
00007BA2                            ; Star Light Zone dynamic screen resizing
00007BA2                            ; ---------------------------------------------------------------------------
00007BA2                            
00007BA2                            Resize_SLZ:				; XREF: Resize_Index
00007BA2 7000                       		moveq	#0,d0
00007BA4 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007BA8 D040                       		add.w	d0,d0
00007BAA 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00007BAE 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
00007BB2                            ; ===========================================================================
00007BB2 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
00007BB4 0000                       		dc.w Resize_SLZ12-Resize_SLZx
00007BB6 0000                       		dc.w Resize_SLZ3-Resize_SLZx
00007BB8                            ; ===========================================================================
00007BB8                            
00007BB8                            Resize_SLZ12:
00007BB8 4E75                       		rts	
00007BBA                            ; ===========================================================================
00007BBA                            
00007BBA                            Resize_SLZ3:
00007BBA 7000                       		moveq	#0,d0
00007BBC 1038 F742                  		move.b	($FFFFF742).w,d0
00007BC0 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00007BC4 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00007BC8                            ; ===========================================================================
00007BC8 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00007BCA 0000                       		dc.w Resize_SLZ3boss-off_7118
00007BCC 0000                       		dc.w Resize_SLZ3end-off_7118
00007BCE                            ; ===========================================================================
00007BCE                            
00007BCE                            Resize_SLZ3main:
00007BCE 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
00007BD4 6500                       		bcs.s	locret_7130
00007BD6 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007BDC 5438 F742                  		addq.b	#2,($FFFFF742).w
00007BE0                            
00007BE0                            locret_7130:
00007BE0 4E75                       		rts	
00007BE2                            ; ===========================================================================
00007BE2                            
00007BE2                            Resize_SLZ3boss:
00007BE2 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007BE8 6500                       		bcs.s	locret_715C
00007BEA 6100 0000                  		bsr.w	SingleObjLoad
00007BEE 6600                       		bne.s	loc_7144
00007BF0 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00007BF4                            
00007BF4                            loc_7144:
00007BF4 303C 008C                  		move.w	#$8C,d0
00007BF8 6100 9876                  		bsr.w	PlaySound	; play boss music
00007BFC 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007C02 5438 F742                  		addq.b	#2,($FFFFF742).w
00007C06 7011                       		moveq	#$11,d0
00007C08 6000 9AE0                  		bra.w	LoadPLC		; load boss patterns
00007C0C                            ; ===========================================================================
00007C0C                            
00007C0C                            locret_715C:
00007C0C 4E75                       		rts	
00007C0E                            ; ===========================================================================
00007C0E                            
00007C0E                            Resize_SLZ3end:
00007C0E 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007C14 4E75                       		rts
00007C16 4E75                       		rts
00007C18                            ; ===========================================================================
00007C18                            ; ---------------------------------------------------------------------------
00007C18                            ; Spring Yard Zone dynamic screen resizing
00007C18                            ; ---------------------------------------------------------------------------
00007C18                            
00007C18                            Resize_SYZ:				; XREF: Resize_Index
00007C18 7000                       		moveq	#0,d0
00007C1A 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007C1E D040                       		add.w	d0,d0
00007C20 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00007C24 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00007C28                            ; ===========================================================================
00007C28 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
00007C2A 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00007C2C 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00007C2E                            ; ===========================================================================
00007C2E                            
00007C2E                            Resize_SYZ1:
00007C2E 4E75                       		rts	
00007C30                            ; ===========================================================================
00007C30                            
00007C30                            Resize_SYZ2:
00007C30 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007C36 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00007C3C 6500                       		bcs.s	locret_71A2
00007C3E 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
00007C44 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
00007C4A 6500                       		bcs.s	locret_71A2
00007C4C 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007C52                            
00007C52                            locret_71A2:
00007C52 4E75                       		rts	
00007C54                            ; ===========================================================================
00007C54                            
00007C54                            Resize_SYZ3:
00007C54 7000                       		moveq	#0,d0
00007C56 1038 F742                  		move.b	($FFFFF742).w,d0
00007C5A 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00007C5E 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00007C62                            ; ===========================================================================
00007C62 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
00007C64 0000                       		dc.w Resize_SYZ3boss-off_71B2
00007C66 0000                       		dc.w Resize_SYZ3end-off_71B2
00007C68                            ; ===========================================================================
00007C68                            
00007C68                            Resize_SYZ3main:
00007C68 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00007C6E 6500                       		bcs.s	locret_71CE
00007C70 6100 0000                  		bsr.w	SingleObjLoad
00007C74 6600                       		bne.s	locret_71CE
00007C76 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
00007C7A 5438 F742                  		addq.b	#2,($FFFFF742).w
00007C7E                            
00007C7E                            locret_71CE:
00007C7E 4E75                       		rts	
00007C80                            ; ===========================================================================
00007C80                            
00007C80                            Resize_SYZ3boss:
00007C80 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
00007C86 6500                       		bcs.s	locret_7200
00007C88 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00007C8E 6100 0000                  		bsr.w	SingleObjLoad
00007C92 6600                       		bne.s	loc_71EC
00007C94 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
00007C98 5438 F742                  		addq.b	#2,($FFFFF742).w
00007C9C                            
00007C9C                            loc_71EC:
00007C9C 303C 008C                  		move.w	#$8C,d0
00007CA0 6100 97CE                  		bsr.w	PlaySound	; play boss music
00007CA4 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007CAA 7011                       		moveq	#$11,d0
00007CAC 6000 9A3C                  		bra.w	LoadPLC		; load boss patterns
00007CB0                            ; ===========================================================================
00007CB0                            
00007CB0                            locret_7200:
00007CB0 4E75                       		rts	
00007CB2                            ; ===========================================================================
00007CB2                            
00007CB2                            Resize_SYZ3end:
00007CB2 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007CB8 4E75                       		rts	
00007CBA                            ; ===========================================================================
00007CBA                            ; ---------------------------------------------------------------------------
00007CBA                            ; Scrap	Brain Zone dynamic screen resizing
00007CBA                            ; ---------------------------------------------------------------------------
00007CBA                            
00007CBA                            Resize_SBZ:				; XREF: Resize_Index
00007CBA 7000                       		moveq	#0,d0
00007CBC 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007CC0 D040                       		add.w	d0,d0
00007CC2 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00007CC6 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00007CCA                            ; ===========================================================================
00007CCA 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00007CCC 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00007CCE 0000                       		dc.w Resize_FZ-Resize_SBZx
00007CD0                            ; ===========================================================================
00007CD0                            
00007CD0                            Resize_SBZ1:
00007CD0 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007CD6 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00007CDC 6500                       		bcs.s	locret_7242
00007CDE 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00007CE4 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007CEA 6500                       		bcs.s	locret_7242
00007CEC 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00007CF2                            
00007CF2                            locret_7242:
00007CF2 4E75                       		rts	
00007CF4                            ; ===========================================================================
00007CF4                            
00007CF4                            Resize_SBZ2:
00007CF4 7000                       		moveq	#0,d0
00007CF6 1038 F742                  		move.b	($FFFFF742).w,d0
00007CFA 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00007CFE 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00007D02                            ; ===========================================================================
00007D02 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00007D04 0000                       		dc.w Resize_SBZ2boss-off_7252
00007D06 0000                       		dc.w Resize_SBZ2boss2-off_7252
00007D08 0000                       		dc.w Resize_SBZ2end-off_7252
00007D0A                            ; ===========================================================================
00007D0A                            
00007D0A                            Resize_SBZ2main:
00007D0A 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00007D10 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00007D16 6500                       		bcs.s	locret_727A
00007D18 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00007D1E 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00007D24 6500                       		bcs.s	locret_727A
00007D26 5438 F742                  		addq.b	#2,($FFFFF742).w
00007D2A                            
00007D2A                            locret_727A:
00007D2A 4E75                       		rts	
00007D2C                            ; ===========================================================================
00007D2C                            
00007D2C                            Resize_SBZ2boss:
00007D2C 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
00007D32 6500                       		bcs.s	locret_7298
00007D34 6100 0000                  		bsr.w	SingleObjLoad
00007D38 6600                       		bne.s	locret_7298
00007D3A 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00007D3E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007D42 701E                       		moveq	#$1E,d0
00007D44 6000 99A4                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
00007D48                            ; ===========================================================================
00007D48                            
00007D48                            locret_7298:
00007D48 4E75                       		rts	
00007D4A                            ; ===========================================================================
00007D4A                            
00007D4A                            Resize_SBZ2boss2:
00007D4A 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
00007D50 6500                       		bcs.s	loc_72B6
00007D52 6100 0000                  		bsr.w	SingleObjLoad
00007D56 6600                       		bne.s	loc_72B0
00007D58 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00007D5C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007D60                            
00007D60                            loc_72B0:
00007D60 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007D66                            
00007D66                            loc_72B6:
00007D66 6000                       		bra.s	loc_72C2
00007D68                            ; ===========================================================================
00007D68                            
00007D68                            Resize_SBZ2end:
00007D68 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00007D6E 6500                       		bcs.s	loc_72C2
00007D70 4E75                       		rts	
00007D72                            ; ===========================================================================
00007D72                            
00007D72                            loc_72C2:
00007D72 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007D78 4E75                       		rts	
00007D7A                            ; ===========================================================================
00007D7A                            
00007D7A                            Resize_FZ:
00007D7A 7000                       		moveq	#0,d0
00007D7C 1038 F742                  		move.b	($FFFFF742).w,d0
00007D80 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00007D84 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00007D88                            ; ===========================================================================
00007D88 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00007D8C 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00007D90 0000                       		dc.w Resize_FZend2-off_72D8
00007D92                            ; ===========================================================================
00007D92                            
00007D92                            Resize_FZmain:
00007D92 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
00007D98 6500                       		bcs.s	loc_72F4
00007D9A 5438 F742                  		addq.b	#2,($FFFFF742).w
00007D9E 701F                       		moveq	#$1F,d0
00007DA0 6100 9948                  		bsr.w	LoadPLC		; load FZ boss patterns
00007DA4                            
00007DA4                            loc_72F4:
00007DA4 60CC                       		bra.s	loc_72C2
00007DA6                            ; ===========================================================================
00007DA6                            
00007DA6                            Resize_FZboss:
00007DA6 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00007DAC 6500                       		bcs.s	loc_7312
00007DAE 6100 0000                  		bsr.w	SingleObjLoad
00007DB2 6600                       		bne.s	loc_7312
00007DB4 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
00007DB8 5438 F742                  		addq.b	#2,($FFFFF742).w
00007DBC 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007DC2                            
00007DC2                            loc_7312:
00007DC2 60AE                       		bra.s	loc_72C2
00007DC4                            ; ===========================================================================
00007DC4                            
00007DC4                            Resize_FZend:
00007DC4 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00007DCA 6500                       		bcs.s	loc_7320
00007DCC 5438 F742                  		addq.b	#2,($FFFFF742).w
00007DD0                            
00007DD0                            loc_7320:
00007DD0 60A0                       		bra.s	loc_72C2
00007DD2                            ; ===========================================================================
00007DD2                            
00007DD2                            locret_7322:
00007DD2 4E75                       		rts	
00007DD4                            ; ===========================================================================
00007DD4                            
00007DD4                            Resize_FZend2:
00007DD4 609C                       		bra.s	loc_72C2
00007DD6                            ; ===========================================================================
00007DD6                            ; ---------------------------------------------------------------------------
00007DD6                            ; Ending sequence dynamic screen resizing (empty)
00007DD6                            ; ---------------------------------------------------------------------------
00007DD6                            
00007DD6                            Resize_Ending:				; XREF: Resize_Index
00007DD6 4E75                       		rts	
00007DD8                            ; ===========================================================================
00007DD8                            ; ---------------------------------------------------------------------------
00007DD8                            ; Object 11 - GHZ bridge
00007DD8                            ; ---------------------------------------------------------------------------
00007DD8                            
00007DD8                            Obj11:					; XREF: Obj_Index
00007DD8 7000                       		moveq	#0,d0
00007DDA 1028 0024                  		move.b	$24(a0),d0
00007DDE 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00007DE2 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00007DE6                            ; ===========================================================================
00007DE6 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007DEA 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007DEE 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00007DF2                            ; ===========================================================================
00007DF2                            
00007DF2                            Obj11_Main:				; XREF: Obj11_Index
00007DF2 5428 0024                  		addq.b	#2,$24(a0)
00007DF6 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00007DFE 317C 438E 0002             		move.w	#$438E,2(a0)
00007E04 117C 0004 0001             		move.b	#4,1(a0)
00007E0A 117C 0003 0018             		move.b	#3,$18(a0)
00007E10 117C 0080 0019             		move.b	#$80,$19(a0)
00007E16 3428 000C                  		move.w	$C(a0),d2
00007E1A 3628 0008                  		move.w	8(a0),d3
00007E1E 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00007E20 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00007E24 7200                       		moveq	#0,d1
00007E26 1212                       		move.b	(a2),d1		; copy a2 to d1
00007E28 14FC 0000                  		move.b	#0,(a2)+
00007E2C 3001                       		move.w	d1,d0
00007E2E E248                       		lsr.w	#1,d0
00007E30 E948                       		lsl.w	#4,d0
00007E32 9640                       		sub.w	d0,d3
00007E34 5501                       		subq.b	#2,d1
00007E36 6500                       		bcs.s	Obj11_Action
00007E38                            
00007E38                            Obj11_MakeBdg:
00007E38 6100 0000                  		bsr.w	SingleObjLoad
00007E3C 6600                       		bne.s	Obj11_Action
00007E3E 5228 0028                  		addq.b	#1,$28(a0)
00007E42 B668 0008                  		cmp.w	8(a0),d3
00007E46 6600                       		bne.s	loc_73B8
00007E48 0643 0010                  		addi.w	#$10,d3
00007E4C 3142 000C                  		move.w	d2,$C(a0)
00007E50 3142 003C                  		move.w	d2,$3C(a0)
00007E54 3A08                       		move.w	a0,d5
00007E56 0445 D000                  		subi.w	#-$3000,d5
00007E5A EC4D                       		lsr.w	#6,d5
00007E5C 0245 007F                  		andi.w	#$7F,d5
00007E60 14C5                       		move.b	d5,(a2)+
00007E62 5228 0028                  		addq.b	#1,$28(a0)
00007E66                            
00007E66                            loc_73B8:				; XREF: ROM:00007398j
00007E66 3A09                       		move.w	a1,d5
00007E68 0445 D000                  		subi.w	#-$3000,d5
00007E6C EC4D                       		lsr.w	#6,d5
00007E6E 0245 007F                  		andi.w	#$7F,d5
00007E72 14C5                       		move.b	d5,(a2)+
00007E74 137C 000A 0024             		move.b	#$A,$24(a1)
00007E7A 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00007E7C 3342 000C                  		move.w	d2,$C(a1)
00007E80 3342 003C                  		move.w	d2,$3C(a1)
00007E84 3343 0008                  		move.w	d3,8(a1)
00007E88 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007E90 337C 438E 0002             		move.w	#$438E,2(a1)
00007E96 137C 0004 0001             		move.b	#4,1(a1)
00007E9C 137C 0003 0018             		move.b	#3,$18(a1)
00007EA2 137C 0008 0019             		move.b	#8,$19(a1)
00007EA8 0643 0010                  		addi.w	#$10,d3
00007EAC 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007EB0                            
00007EB0                            Obj11_Action:				; XREF: Obj11_Index
00007EB0 6100                       		bsr.s	Obj11_Solid
00007EB2 4A28 003E                  		tst.b	$3E(a0)
00007EB6 6700                       		beq.s	Obj11_Display
00007EB8 5928 003E                  		subq.b	#4,$3E(a0)
00007EBC 6100 0000                  		bsr.w	Obj11_Bend
00007EC0                            
00007EC0                            Obj11_Display:
00007EC0 6100 0000                  		bsr.w	DisplaySprite
00007EC4 6000 0000                  		bra.w	Obj11_ChkDel
00007EC8                            
00007EC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007EC8                            
00007EC8                            
00007EC8                            Obj11_Solid:				; XREF: Obj11_Action
00007EC8 7200                       		moveq	#0,d1
00007ECA 1228 0028                  		move.b	$28(a0),d1
00007ECE E749                       		lsl.w	#3,d1
00007ED0 3401                       		move.w	d1,d2
00007ED2 5041                       		addq.w	#8,d1
00007ED4 D442                       		add.w	d2,d2
00007ED6 43F8 D000                  		lea	($FFFFD000).w,a1
00007EDA 4A69 0012                  		tst.w	$12(a1)
00007EDE 6B00 0000                  		bmi.w	locret_751E
00007EE2 3029 0008                  		move.w	8(a1),d0
00007EE6 9068 0008                  		sub.w	8(a0),d0
00007EEA D041                       		add.w	d1,d0
00007EEC 6B00 0000                  		bmi.w	locret_751E
00007EF0 B042                       		cmp.w	d2,d0
00007EF2 6400 0000                  		bcc.w	locret_751E
00007EF6 6000                       		bra.s	Platform2
00007EF8                            ; End of function Obj11_Solid
00007EF8                            
00007EF8                            ; ---------------------------------------------------------------------------
00007EF8                            ; Platform subroutine
00007EF8                            ; ---------------------------------------------------------------------------
00007EF8                            
00007EF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007EF8                            
00007EF8                            
00007EF8                            PlatformObject:
00007EF8 43F8 D000                  		lea	($FFFFD000).w,a1
00007EFC 4A69 0012                  		tst.w	$12(a1)
00007F00 6B00 0000                  		bmi.w	locret_751E
00007F04 3029 0008                  		move.w	8(a1),d0
00007F08 9068 0008                  		sub.w	8(a0),d0
00007F0C D041                       		add.w	d1,d0
00007F0E 6B00 0000                  		bmi.w	locret_751E
00007F12 D241                       		add.w	d1,d1
00007F14 B041                       		cmp.w	d1,d0
00007F16 6400 0000                  		bcc.w	locret_751E
00007F1A                            
00007F1A                            Platform2:
00007F1A 3028 000C                  		move.w	$C(a0),d0
00007F1E 5140                       		subq.w	#8,d0
00007F20                            
00007F20                            Platform3:
00007F20 3429 000C                  		move.w	$C(a1),d2
00007F24 1229 0016                  		move.b	$16(a1),d1
00007F28 4881                       		ext.w	d1
00007F2A D242                       		add.w	d2,d1
00007F2C 5841                       		addq.w	#4,d1
00007F2E 9041                       		sub.w	d1,d0
00007F30 6200 0000                  		bhi.w	locret_751E
00007F34 0C40 FFF0                  		cmpi.w	#-$10,d0
00007F38 6500 0000                  		bcs.w	locret_751E
00007F3C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007F40 6B00 0000                  		bmi.w	locret_751E
00007F44 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00007F4A 6400 0000                  		bcc.w	locret_751E
00007F4E D440                       		add.w	d0,d2
00007F50 5642                       		addq.w	#3,d2
00007F52 3342 000C                  		move.w	d2,$C(a1)
00007F56 5428 0024                  		addq.b	#2,$24(a0)
00007F5A                            
00007F5A                            loc_74AE:
00007F5A 0829 0003 0022             		btst	#3,$22(a1)
00007F60 6700                       		beq.s	loc_74DC
00007F62 7000                       		moveq	#0,d0
00007F64 1029 003D                  		move.b	$3D(a1),d0
00007F68 ED48                       		lsl.w	#6,d0
00007F6A 0680 00FF D000             		addi.l	#$FFD000,d0
00007F70 2440                       		movea.l	d0,a2
00007F72 08AA 0003 0022             		bclr	#3,$22(a2)
00007F78 422A 0025                  		clr.b	$25(a2)
00007F7C 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007F82 6600                       		bne.s	loc_74DC
00007F84 552A 0024                  		subq.b	#2,$24(a2)
00007F88                            
00007F88                            loc_74DC:
00007F88 3008                       		move.w	a0,d0
00007F8A 0440 D000                  		subi.w	#-$3000,d0
00007F8E EC48                       		lsr.w	#6,d0
00007F90 0240 007F                  		andi.w	#$7F,d0
00007F94 1340 003D                  		move.b	d0,$3D(a1)
00007F98 137C 0000 0026             		move.b	#0,$26(a1)
00007F9E 337C 0000 0012             		move.w	#0,$12(a1)
00007FA4 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007FAA 0829 0001 0022             		btst	#1,$22(a1)
00007FB0 6700                       		beq.s	loc_7512
00007FB2 2F08                       		move.l	a0,-(sp)
00007FB4 2049                       		movea.l	a1,a0
00007FB6 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007FBC 205F                       		movea.l	(sp)+,a0
00007FBE                            
00007FBE                            loc_7512:
00007FBE 08E9 0003 0022             		bset	#3,$22(a1)
00007FC4 08E8 0003 0022             		bset	#3,$22(a0)
00007FCA                            
00007FCA                            locret_751E:
00007FCA 4E75                       		rts	
00007FCC                            ; End of function PlatformObject
00007FCC                            
00007FCC                            ; ---------------------------------------------------------------------------
00007FCC                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007FCC                            ; ---------------------------------------------------------------------------
00007FCC                            
00007FCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FCC                            
00007FCC                            
00007FCC                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007FCC 43F8 D000                  		lea	($FFFFD000).w,a1
00007FD0 4A69 0012                  		tst.w	$12(a1)
00007FD4 6B00 FFF4                  		bmi.w	locret_751E
00007FD8 3029 0008                  		move.w	8(a1),d0
00007FDC 9068 0008                  		sub.w	8(a0),d0
00007FE0 D041                       		add.w	d1,d0
00007FE2 6BE6                       		bmi.s	locret_751E
00007FE4 D241                       		add.w	d1,d1
00007FE6 B041                       		cmp.w	d1,d0
00007FE8 64E0                       		bcc.s	locret_751E
00007FEA 0828 0000 0001             		btst	#0,1(a0)
00007FF0 6700                       		beq.s	loc_754A
00007FF2 4640                       		not.w	d0
00007FF4 D041                       		add.w	d1,d0
00007FF6                            
00007FF6                            loc_754A:
00007FF6 E248                       		lsr.w	#1,d0
00007FF8 7600                       		moveq	#0,d3
00007FFA 1632 0000                  		move.b	(a2,d0.w),d3
00007FFE 3028 000C                  		move.w	$C(a0),d0
00008002 9043                       		sub.w	d3,d0
00008004 6000 FF1A                  		bra.w	Platform3
00008008                            ; End of function SlopeObject
00008008                            
00008008                            
00008008                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008008                            
00008008                            
00008008                            Obj15_Solid:				; XREF: Obj15_SetSolid
00008008 43F8 D000                  		lea	($FFFFD000).w,a1
0000800C 4A69 0012                  		tst.w	$12(a1)
00008010 6B00 FFB8                  		bmi.w	locret_751E
00008014 3029 0008                  		move.w	8(a1),d0
00008018 9068 0008                  		sub.w	8(a0),d0
0000801C D041                       		add.w	d1,d0
0000801E 6B00 FFAA                  		bmi.w	locret_751E
00008022 D241                       		add.w	d1,d1
00008024 B041                       		cmp.w	d1,d0
00008026 6400 FFA2                  		bcc.w	locret_751E
0000802A 3028 000C                  		move.w	$C(a0),d0
0000802E 9043                       		sub.w	d3,d0
00008030 6000 FEEE                  		bra.w	Platform3
00008034                            ; End of function Obj15_Solid
00008034                            
00008034                            ; ===========================================================================
00008034                            
00008034                            Obj11_Action2:				; XREF: Obj11_Index
00008034 6100                       		bsr.s	Obj11_WalkOff
00008036 6100 0000                  		bsr.w	DisplaySprite
0000803A 6000 0000                  		bra.w	Obj11_ChkDel
0000803E                            
0000803E                            ; ---------------------------------------------------------------------------
0000803E                            ; Subroutine allowing Sonic to walk off a bridge
0000803E                            ; ---------------------------------------------------------------------------
0000803E                            
0000803E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000803E                            
0000803E                            
0000803E                            Obj11_WalkOff:				; XREF: Obj11_Action2
0000803E 7200                       		moveq	#0,d1
00008040 1228 0028                  		move.b	$28(a0),d1
00008044 E749                       		lsl.w	#3,d1
00008046 3401                       		move.w	d1,d2
00008048 5041                       		addq.w	#8,d1
0000804A 6100                       		bsr.s	ExitPlatform2
0000804C 6400                       		bcc.s	locret_75BE
0000804E E848                       		lsr.w	#4,d0
00008050 1140 003F                  		move.b	d0,$3F(a0)
00008054 1028 003E                  		move.b	$3E(a0),d0
00008058 0C00 0040                  		cmpi.b	#$40,d0
0000805C 6700                       		beq.s	loc_75B6
0000805E 5828 003E                  		addq.b	#4,$3E(a0)
00008062                            
00008062                            loc_75B6:
00008062 6100 0000                  		bsr.w	Obj11_Bend
00008066 6100 0000                  		bsr.w	Obj11_MoveSonic
0000806A                            
0000806A                            locret_75BE:
0000806A 4E75                       		rts	
0000806C                            ; End of function Obj11_WalkOff
0000806C                            
0000806C                            ; ---------------------------------------------------------------------------
0000806C                            ; Subroutine allowing Sonic to walk or jump off	a platform
0000806C                            ; ---------------------------------------------------------------------------
0000806C                            
0000806C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000806C                            
0000806C                            
0000806C                            ExitPlatform:
0000806C 3401                       		move.w	d1,d2
0000806E                            
0000806E                            ExitPlatform2:
0000806E D442                       		add.w	d2,d2
00008070 43F8 D000                  		lea	($FFFFD000).w,a1
00008074 0829 0001 0022             		btst	#1,$22(a1)
0000807A 6600                       		bne.s	loc_75E0
0000807C 3029 0008                  		move.w	8(a1),d0
00008080 9068 0008                  		sub.w	8(a0),d0
00008084 D041                       		add.w	d1,d0
00008086 6B00                       		bmi.s	loc_75E0
00008088 B042                       		cmp.w	d2,d0
0000808A 6500                       		bcs.s	locret_75F2
0000808C                            
0000808C                            loc_75E0:
0000808C 08A9 0003 0022             		bclr	#3,$22(a1)
00008092 117C 0002 0024             		move.b	#2,$24(a0)
00008098 08A8 0003 0022             		bclr	#3,$22(a0)
0000809E                            
0000809E                            locret_75F2:
0000809E 4E75                       		rts	
000080A0                            ; End of function ExitPlatform
000080A0                            
000080A0                            
000080A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000080A0                            
000080A0                            
000080A0                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
000080A0 7000                       		moveq	#0,d0
000080A2 1028 003F                  		move.b	$3F(a0),d0
000080A6 1030 0029                  		move.b	$29(a0,d0.w),d0
000080AA ED48                       		lsl.w	#6,d0
000080AC 0680 00FF D000             		addi.l	#$FFD000,d0
000080B2 2440                       		movea.l	d0,a2
000080B4 43F8 D000                  		lea	($FFFFD000).w,a1
000080B8 302A 000C                  		move.w	$C(a2),d0
000080BC 5140                       		subq.w	#8,d0
000080BE 7200                       		moveq	#0,d1
000080C0 1229 0016                  		move.b	$16(a1),d1
000080C4 9041                       		sub.w	d1,d0
000080C6 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
000080CA 4E75                       		rts	
000080CC                            ; End of function Obj11_MoveSonic
000080CC                            
000080CC                            
000080CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000080CC                            
000080CC                            
000080CC                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
000080CC 1028 003E                  		move.b	$3E(a0),d0
000080D0 6100 B302                  		bsr.w	CalcSine
000080D4 3800                       		move.w	d0,d4
000080D6 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
000080DC 7000                       		moveq	#0,d0
000080DE 1028 0028                  		move.b	$28(a0),d0
000080E2 E948                       		lsl.w	#4,d0
000080E4 7600                       		moveq	#0,d3
000080E6 1628 003F                  		move.b	$3F(a0),d3
000080EA 3403                       		move.w	d3,d2
000080EC D640                       		add.w	d0,d3
000080EE 7A00                       		moveq	#0,d5
000080F0 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
000080F6 1A35 3000                  		move.b	(a5,d3.w),d5
000080FA 0243 000F                  		andi.w	#$F,d3
000080FE E94B                       		lsl.w	#4,d3
00008100 47F4 3000                  		lea	(a4,d3.w),a3
00008104 45E8 0029                  		lea	$29(a0),a2
00008108                            
00008108                            loc_765C:
00008108 7000                       		moveq	#0,d0
0000810A 101A                       		move.b	(a2)+,d0
0000810C ED48                       		lsl.w	#6,d0
0000810E 0680 00FF D000             		addi.l	#$FFD000,d0
00008114 2240                       		movea.l	d0,a1
00008116 7000                       		moveq	#0,d0
00008118 101B                       		move.b	(a3)+,d0
0000811A 5240                       		addq.w	#1,d0
0000811C C0C5                       		mulu.w	d5,d0
0000811E C0C4                       		mulu.w	d4,d0
00008120 4840                       		swap	d0
00008122 D069 003C                  		add.w	$3C(a1),d0
00008126 3340 000C                  		move.w	d0,$C(a1)
0000812A 51CA FFDC                  		dbf	d2,loc_765C
0000812E 7000                       		moveq	#0,d0
00008130 1028 0028                  		move.b	$28(a0),d0
00008134 7600                       		moveq	#0,d3
00008136 1628 003F                  		move.b	$3F(a0),d3
0000813A 5203                       		addq.b	#1,d3
0000813C 9600                       		sub.b	d0,d3
0000813E 4403                       		neg.b	d3
00008140 6B00                       		bmi.s	locret_76CA
00008142 3403                       		move.w	d3,d2
00008144 E94B                       		lsl.w	#4,d3
00008146 47F4 3000                  		lea	(a4,d3.w),a3
0000814A D6C2                       		adda.w	d2,a3
0000814C 5342                       		subq.w	#1,d2
0000814E 6500                       		bcs.s	locret_76CA
00008150                            
00008150                            loc_76A4:
00008150 7000                       		moveq	#0,d0
00008152 101A                       		move.b	(a2)+,d0
00008154 ED48                       		lsl.w	#6,d0
00008156 0680 00FF D000             		addi.l	#$FFD000,d0
0000815C 2240                       		movea.l	d0,a1
0000815E 7000                       		moveq	#0,d0
00008160 1023                       		move.b	-(a3),d0
00008162 5240                       		addq.w	#1,d0
00008164 C0C5                       		mulu.w	d5,d0
00008166 C0C4                       		mulu.w	d4,d0
00008168 4840                       		swap	d0
0000816A D069 003C                  		add.w	$3C(a1),d0
0000816E 3340 000C                  		move.w	d0,$C(a1)
00008172 51CA FFDC                  		dbf	d2,loc_76A4
00008176                            
00008176                            locret_76CA:
00008176 4E75                       		rts	
00008178                            ; End of function Obj11_Bend
00008178                            
00008178                            ; ===========================================================================
00008178                            ; ---------------------------------------------------------------------------
00008178                            ; GHZ bridge-bending data
00008178                            ; (Defines how the bridge bends	when Sonic walks across	it)
00008178                            ; ---------------------------------------------------------------------------
00008178                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00008288                            		even
00008288                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00008388                            		even
00008388                            
00008388                            ; ===========================================================================
00008388                            
00008388                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00008388 3028 0008                  		move.w	8(a0),d0
0000838C 0240 FF80                  		andi.w	#$FF80,d0
00008390 3238 F700                  		move.w	($FFFFF700).w,d1
00008394 0441 0080                  		subi.w	#$80,d1
00008398 0241 FF80                  		andi.w	#$FF80,d1
0000839C 9041                       		sub.w	d1,d0
0000839E 0C40 0280                  		cmpi.w	#$280,d0
000083A2 6200 0000                  		bhi.w	Obj11_DelAll
000083A6 4E75                       		rts	
000083A8                            ; ===========================================================================
000083A8                            
000083A8                            Obj11_DelAll:				; XREF: Obj11_ChkDel
000083A8 7400                       		moveq	#0,d2
000083AA 45E8 0028                  		lea	$28(a0),a2	; load bridge length
000083AE 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
000083B0 5302                       		subq.b	#1,d2		; subtract 1
000083B2 6500                       		bcs.s	Obj11_Delete
000083B4                            
000083B4                            Obj11_DelLoop:
000083B4 7000                       		moveq	#0,d0
000083B6 101A                       		move.b	(a2)+,d0
000083B8 ED48                       		lsl.w	#6,d0
000083BA 0680 00FF D000             		addi.l	#$FFD000,d0
000083C0 2240                       		movea.l	d0,a1
000083C2 B048                       		cmp.w	a0,d0
000083C4 6700                       		beq.s	loc_791E
000083C6 6100 0000                  		bsr.w	DeleteObject2
000083CA                            
000083CA                            loc_791E:
000083CA 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
000083CE                            
000083CE                            Obj11_Delete:
000083CE 6100 0000                  		bsr.w	DeleteObject
000083D2 4E75                       		rts	
000083D4                            ; ===========================================================================
000083D4                            
000083D4                            Obj11_Delete2:				; XREF: Obj11_Index
000083D4 6100 0000                  		bsr.w	DeleteObject
000083D8 4E75                       		rts	
000083DA                            ; ===========================================================================
000083DA                            
000083DA                            Obj11_Display2:				; XREF: Obj11_Index
000083DA 6100 0000                  		bsr.w	DisplaySprite
000083DE 4E75                       		rts	
000083E0                            ; ===========================================================================
000083E0                            ; ---------------------------------------------------------------------------
000083E0                            ; Sprite mappings - GHZ	bridge
000083E0                            ; ---------------------------------------------------------------------------
000083E0                            Map_obj11:
000083E0                            	include "_maps\obj11.asm"
000083E0                            ; ---------------------------------------------------------------------------
000083E0                            ; Sprite mappings - GHZ	bridge
000083E0                            ; ---------------------------------------------------------------------------
000083E0 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
000083E4 0000                       		dc.w byte_794B-Map_obj11
000083E6 01                         byte_793A:	dc.b 1
000083E7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000083EC 02                         byte_7940:	dc.b 2
000083ED F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
000083F2 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
000083F7 01                         byte_794B:	dc.b 1
000083F8 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
000083FE 00                         		even
000083FE 00                         		even
000083FE                            
000083FE                            ; ===========================================================================
000083FE                            ; ---------------------------------------------------------------------------
000083FE                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
000083FE                            ;	    - spiked ball on a chain (SBZ)
000083FE                            ; ---------------------------------------------------------------------------
000083FE                            
000083FE                            Obj15:					; XREF: Obj_Index
000083FE 7000                       		moveq	#0,d0
00008400 1028 0024                  		move.b	$24(a0),d0
00008404 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00008408 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
0000840C                            ; ===========================================================================
0000840C 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00008410 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00008414 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00008418 0000                       		dc.w Obj15_Action-Obj15_Index
0000841A                            ; ===========================================================================
0000841A                            
0000841A                            Obj15_Main:				; XREF: Obj15_Index
0000841A 5428 0024                  		addq.b	#2,$24(a0)
0000841E 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00008426 317C 4380 0002             		move.w	#$4380,2(a0)
0000842C 117C 0004 0001             		move.b	#4,1(a0)
00008432 117C 0003 0018             		move.b	#3,$18(a0)
00008438 117C 0018 0019             		move.b	#$18,$19(a0)
0000843E 117C 0008 0016             		move.b	#8,$16(a0)
00008444 3168 000C 0038             		move.w	$C(a0),$38(a0)
0000844A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00008450 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008456 6600                       		bne.s	Obj15_NotSLZ
00008458 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00008460 317C 43DC 0002             		move.w	#$43DC,2(a0)
00008466 117C 0020 0019             		move.b	#$20,$19(a0)
0000846C 117C 0010 0016             		move.b	#$10,$16(a0)
00008472 117C 0099 0020             		move.b	#$99,$20(a0)
00008478                            
00008478                            Obj15_NotSLZ:
00008478 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000847E 6600                       		bne.s	Obj15_SetLength
00008480 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00008488 317C 0391 0002             		move.w	#$391,2(a0)
0000848E 117C 0018 0019             		move.b	#$18,$19(a0)
00008494 117C 0018 0016             		move.b	#$18,$16(a0)
0000849A 117C 0086 0020             		move.b	#$86,$20(a0)
000084A0 117C 000C 0024             		move.b	#$C,$24(a0)
000084A6                            
000084A6                            Obj15_SetLength:
000084A6 1810                       		move.b	0(a0),d4
000084A8 7200                       		moveq	#0,d1
000084AA 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
000084AE 1212                       		move.b	(a2),d1		; move a2 to d1
000084B0 3F01                       		move.w	d1,-(sp)
000084B2 0241 000F                  		andi.w	#$F,d1
000084B6 14FC 0000                  		move.b	#0,(a2)+
000084BA 3601                       		move.w	d1,d3
000084BC E94B                       		lsl.w	#4,d3
000084BE 5003                       		addq.b	#8,d3
000084C0 1143 003C                  		move.b	d3,$3C(a0)
000084C4 5103                       		subq.b	#8,d3
000084C6 4A28 001A                  		tst.b	$1A(a0)
000084CA 6700                       		beq.s	Obj15_MakeChain
000084CC 5003                       		addq.b	#8,d3
000084CE 5341                       		subq.w	#1,d1
000084D0                            
000084D0                            Obj15_MakeChain:
000084D0 6100 0000                  		bsr.w	SingleObjLoad
000084D4 6600                       		bne.s	loc_7A92
000084D6 5228 0028                  		addq.b	#1,$28(a0)
000084DA 3A09                       		move.w	a1,d5
000084DC 0445 D000                  		subi.w	#-$3000,d5
000084E0 EC4D                       		lsr.w	#6,d5
000084E2 0245 007F                  		andi.w	#$7F,d5
000084E6 14C5                       		move.b	d5,(a2)+
000084E8 137C 000A 0024             		move.b	#$A,$24(a1)
000084EE 1284                       		move.b	d4,0(a1)	; load swinging	object
000084F0 2368 0004 0004             		move.l	4(a0),4(a1)
000084F6 3368 0002 0002             		move.w	2(a0),2(a1)
000084FC 08A9 0006 0002             		bclr	#6,2(a1)
00008502 137C 0004 0001             		move.b	#4,1(a1)
00008508 137C 0004 0018             		move.b	#4,$18(a1)
0000850E 137C 0008 0019             		move.b	#8,$19(a1)
00008514 137C 0001 001A             		move.b	#1,$1A(a1)
0000851A 1343 003C                  		move.b	d3,$3C(a1)
0000851E 0403 0010                  		subi.b	#$10,d3
00008522 6400                       		bcc.s	loc_7A8E
00008524 137C 0002 001A             		move.b	#2,$1A(a1)
0000852A 137C 0003 0018             		move.b	#3,$18(a1)
00008530 08E9 0006 0002             		bset	#6,2(a1)
00008536                            
00008536                            loc_7A8E:
00008536 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
0000853A                            
0000853A                            loc_7A92:
0000853A 3A08                       		move.w	a0,d5
0000853C 0445 D000                  		subi.w	#-$3000,d5
00008540 EC4D                       		lsr.w	#6,d5
00008542 0245 007F                  		andi.w	#$7F,d5
00008546 14C5                       		move.b	d5,(a2)+
00008548 317C 4080 0026             		move.w	#$4080,$26(a0)
0000854E 317C FE00 003E             		move.w	#-$200,$3E(a0)
00008554 321F                       		move.w	(sp)+,d1
00008556 0801 0004                  		btst	#4,d1		; is object type $8X ?
0000855A 6700                       		beq.s	loc_7AD4	; if not, branch
0000855C 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00008564 317C 43AA 0002             		move.w	#$43AA,2(a0)
0000856A 117C 0001 001A             		move.b	#1,$1A(a0)
00008570 117C 0002 0018             		move.b	#2,$18(a0)
00008576 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
0000857C                            
0000857C                            loc_7AD4:
0000857C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00008582 6700                       		beq.s	Obj15_Action	; if yes, branch
00008584                            
00008584                            Obj15_SetSolid:				; XREF: Obj15_Index
00008584 7200                       		moveq	#0,d1
00008586 1228 0019                  		move.b	$19(a0),d1
0000858A 7600                       		moveq	#0,d3
0000858C 1628 0016                  		move.b	$16(a0),d3
00008590 6100 FA76                  		bsr.w	Obj15_Solid
00008594                            
00008594                            Obj15_Action:				; XREF: Obj15_Index
00008594 6100 0000                  		bsr.w	Obj15_Move
00008598 6100 0000                  		bsr.w	DisplaySprite
0000859C 6000 0000                  		bra.w	Obj15_ChkDel
000085A0                            ; ===========================================================================
000085A0                            
000085A0                            Obj15_Action2:				; XREF: Obj15_Index
000085A0 7200                       		moveq	#0,d1
000085A2 1228 0019                  		move.b	$19(a0),d1
000085A6 6100 FAC4                  		bsr.w	ExitPlatform
000085AA 3F28 0008                  		move.w	8(a0),-(sp)
000085AE 6100 0000                  		bsr.w	Obj15_Move
000085B2 341F                       		move.w	(sp)+,d2
000085B4 7600                       		moveq	#0,d3
000085B6 1628 0016                  		move.b	$16(a0),d3
000085BA 5203                       		addq.b	#1,d3
000085BC 6100 0000                  		bsr.w	MvSonicOnPtfm
000085C0 6100 0000                  		bsr.w	DisplaySprite
000085C4 6000 0000                  		bra.w	Obj15_ChkDel
000085C8                            
000085C8 4E75                       		rts
000085CA                            
000085CA                            ; ---------------------------------------------------------------------------
000085CA                            ; Subroutine to	change Sonic's position with a platform
000085CA                            ; ---------------------------------------------------------------------------
000085CA                            
000085CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085CA                            
000085CA                            
000085CA                            MvSonicOnPtfm:
000085CA 43F8 D000                  		lea	($FFFFD000).w,a1
000085CE 3028 000C                  		move.w	$C(a0),d0
000085D2 9043                       		sub.w	d3,d0
000085D4 6000                       		bra.s	MvSonic2
000085D6                            ; End of function MvSonicOnPtfm
000085D6                            
000085D6                            ; ---------------------------------------------------------------------------
000085D6                            ; Subroutine to	change Sonic's position with a platform
000085D6                            ; ---------------------------------------------------------------------------
000085D6                            
000085D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085D6                            
000085D6                            
000085D6                            MvSonicOnPtfm2:
000085D6 43F8 D000                  		lea	($FFFFD000).w,a1
000085DA 3028 000C                  		move.w	$C(a0),d0
000085DE 0440 0009                  		subi.w	#9,d0
000085E2                            
000085E2                            MvSonic2:
000085E2 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000085E6 6B00                       		bmi.s	locret_7B62
000085E8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000085EE 6400                       		bcc.s	locret_7B62
000085F0 4A78 FE08                  		tst.w	($FFFFFE08).w
000085F4 6600                       		bne.s	locret_7B62
000085F6 7200                       		moveq	#0,d1
000085F8 1229 0016                  		move.b	$16(a1),d1
000085FC 9041                       		sub.w	d1,d0
000085FE 3340 000C                  		move.w	d0,$C(a1)
00008602 9468 0008                  		sub.w	8(a0),d2
00008606 9569 0008                  		sub.w	d2,8(a1)
0000860A                            
0000860A                            locret_7B62:
0000860A 4E75                       		rts	
0000860C                            ; End of function MvSonicOnPtfm2
0000860C                            
0000860C                            
0000860C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000860C                            
0000860C                            
0000860C                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
0000860C 1038 FE78                  		move.b	($FFFFFE78).w,d0
00008610 323C 0080                  		move.w	#$80,d1
00008614 0828 0000 0022             		btst	#0,$22(a0)
0000861A 6700                       		beq.s	loc_7B78
0000861C 4440                       		neg.w	d0
0000861E D041                       		add.w	d1,d0
00008620                            
00008620                            loc_7B78:
00008620 6000                       		bra.s	Obj15_Move2
00008622                            ; End of function Obj15_Move
00008622                            
00008622                            
00008622                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008622                            
00008622                            
00008622                            Obj48_Move:				; XREF: Obj48_Display2
00008622 4A28 003D                  		tst.b	$3D(a0)
00008626 6600                       		bne.s	loc_7B9C
00008628 3028 003E                  		move.w	$3E(a0),d0
0000862C 5040                       		addq.w	#8,d0
0000862E 3140 003E                  		move.w	d0,$3E(a0)
00008632 D168 0026                  		add.w	d0,$26(a0)
00008636 0C40 0200                  		cmpi.w	#$200,d0
0000863A 6600                       		bne.s	loc_7BB6
0000863C 117C 0001 003D             		move.b	#1,$3D(a0)
00008642 6000                       		bra.s	loc_7BB6
00008644                            ; ===========================================================================
00008644                            
00008644                            loc_7B9C:
00008644 3028 003E                  		move.w	$3E(a0),d0
00008648 5140                       		subq.w	#8,d0
0000864A 3140 003E                  		move.w	d0,$3E(a0)
0000864E D168 0026                  		add.w	d0,$26(a0)
00008652 0C40 FE00                  		cmpi.w	#-$200,d0
00008656 6600                       		bne.s	loc_7BB6
00008658 117C 0000 003D             		move.b	#0,$3D(a0)
0000865E                            
0000865E                            loc_7BB6:
0000865E 1028 0026                  		move.b	$26(a0),d0
00008662                            ; End of function Obj48_Move
00008662                            
00008662                            
00008662                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008662                            
00008662                            
00008662                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00008662 6100 AD70                  		bsr.w	CalcSine
00008666 3428 0038                  		move.w	$38(a0),d2
0000866A 3628 003A                  		move.w	$3A(a0),d3
0000866E 45E8 0028                  		lea	$28(a0),a2
00008672 7C00                       		moveq	#0,d6
00008674 1C1A                       		move.b	(a2)+,d6
00008676                            
00008676                            loc_7BCE:
00008676 7800                       		moveq	#0,d4
00008678 181A                       		move.b	(a2)+,d4
0000867A ED4C                       		lsl.w	#6,d4
0000867C 0684 00FF D000             		addi.l	#$FFD000,d4
00008682 2244                       		movea.l	d4,a1
00008684 7800                       		moveq	#0,d4
00008686 1829 003C                  		move.b	$3C(a1),d4
0000868A 2A04                       		move.l	d4,d5
0000868C C9C0                       		muls.w	d0,d4
0000868E E084                       		asr.l	#8,d4
00008690 CBC1                       		muls.w	d1,d5
00008692 E085                       		asr.l	#8,d5
00008694 D842                       		add.w	d2,d4
00008696 DA43                       		add.w	d3,d5
00008698 3344 000C                  		move.w	d4,$C(a1)
0000869C 3345 0008                  		move.w	d5,8(a1)
000086A0 51CE FFD4                  		dbf	d6,loc_7BCE
000086A4 4E75                       		rts	
000086A6                            ; End of function Obj15_Move2
000086A6                            
000086A6                            ; ===========================================================================
000086A6                            
000086A6                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
000086A6 3028 003A                  		move.w	$3A(a0),d0
000086AA 0240 FF80                  		andi.w	#$FF80,d0
000086AE 3238 F700                  		move.w	($FFFFF700).w,d1
000086B2 0441 0080                  		subi.w	#$80,d1
000086B6 0241 FF80                  		andi.w	#$FF80,d1
000086BA 9041                       		sub.w	d1,d0
000086BC 0C40 0280                  		cmpi.w	#$280,d0
000086C0 6200 0000                  		bhi.w	Obj15_DelAll
000086C4 4E75                       		rts	
000086C6                            ; ===========================================================================
000086C6                            
000086C6                            Obj15_DelAll:				; XREF: Obj15_ChkDel
000086C6 7400                       		moveq	#0,d2
000086C8 45E8 0028                  		lea	$28(a0),a2
000086CC 141A                       		move.b	(a2)+,d2
000086CE                            
000086CE                            Obj15_DelLoop:
000086CE 7000                       		moveq	#0,d0
000086D0 101A                       		move.b	(a2)+,d0
000086D2 ED48                       		lsl.w	#6,d0
000086D4 0680 00FF D000             		addi.l	#$FFD000,d0
000086DA 2240                       		movea.l	d0,a1
000086DC 6100 0000                  		bsr.w	DeleteObject2
000086E0 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
000086E4 4E75                       		rts	
000086E6                            ; ===========================================================================
000086E6                            
000086E6                            Obj15_Delete:				; XREF: Obj15_Index
000086E6 6100 0000                  		bsr.w	DeleteObject
000086EA 4E75                       		rts	
000086EC                            ; ===========================================================================
000086EC                            
000086EC                            Obj15_Display:				; XREF: Obj15_Index
000086EC 6000 0000                  		bra.w	DisplaySprite
000086F0                            ; ===========================================================================
000086F0                            ; ---------------------------------------------------------------------------
000086F0                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000086F0                            ; ---------------------------------------------------------------------------
000086F0                            Map_obj15:
000086F0                            	include "_maps\obj15ghz.asm"
000086F0                            ; ---------------------------------------------------------------------------
000086F0                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000086F0                            ; ---------------------------------------------------------------------------
000086F0 0000                       		dc.w byte_7C4E-Map_obj15
000086F2 0000                       		dc.w byte_7C59-Map_obj15
000086F4 0000                       		dc.w byte_7C5F-Map_obj15
000086F6 02                         byte_7C4E:	dc.b 2
000086F7 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
000086FC F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00008701 01                         byte_7C59:	dc.b 1
00008702 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008707 01                         byte_7C5F:	dc.b 1
00008708 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000870E 00                         		even
0000870E 00                         		even
0000870E                            
0000870E                            ; ---------------------------------------------------------------------------
0000870E                            ; Sprite mappings - SLZ	swinging platforms
0000870E                            ; ---------------------------------------------------------------------------
0000870E                            Map_obj15a:
0000870E                            	include "_maps\obj15slz.asm"
0000870E                            ; ---------------------------------------------------------------------------
0000870E                            ; Sprite mappings - SLZ	swinging platforms
0000870E                            ; ---------------------------------------------------------------------------
0000870E 0000                       		dc.w byte_7C6C-Map_obj15a
00008710 0000                       		dc.w byte_7C95-Map_obj15a
00008712 0000                       		dc.w byte_7C9B-Map_obj15a
00008714 08                         byte_7C6C:	dc.b 8
00008715 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000871A F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000871F F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00008724 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00008729 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
0000872E 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00008733 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00008738 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
0000873D 01                         byte_7C95:	dc.b 1
0000873E F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00008743 01                         byte_7C9B:	dc.b 1
00008744 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
0000874A 00                         		even
0000874A 00                         		even
0000874A                            
0000874A                            ; ===========================================================================
0000874A                            ; ---------------------------------------------------------------------------
0000874A                            ; Object 17 - helix of spikes on a pole	(GHZ)
0000874A                            ; ---------------------------------------------------------------------------
0000874A                            
0000874A                            Obj17:					; XREF: Obj_Index
0000874A 7000                       		moveq	#0,d0
0000874C 1028 0024                  		move.b	$24(a0),d0
00008750 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00008754 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00008758                            ; ===========================================================================
00008758 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
0000875A 0000                       		dc.w Obj17_Action-Obj17_Index
0000875C 0000                       		dc.w Obj17_Action-Obj17_Index
0000875E 0000                       		dc.w Obj17_Delete-Obj17_Index
00008760 0000                       		dc.w Obj17_Display-Obj17_Index
00008762                            ; ===========================================================================
00008762                            
00008762                            Obj17_Main:				; XREF: Obj17_Index
00008762 5428 0024                  		addq.b	#2,$24(a0)
00008766 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
0000876E 317C 4398 0002             		move.w	#$4398,2(a0)
00008774 117C 0007 0022             		move.b	#7,$22(a0)
0000877A 117C 0004 0001             		move.b	#4,1(a0)
00008780 117C 0003 0018             		move.b	#3,$18(a0)
00008786 117C 0008 0019             		move.b	#8,$19(a0)
0000878C 3428 000C                  		move.w	$C(a0),d2
00008790 3628 0008                  		move.w	8(a0),d3
00008794 1810                       		move.b	0(a0),d4
00008796 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
0000879A 7200                       		moveq	#0,d1
0000879C 1212                       		move.b	(a2),d1		; move a2 to d1
0000879E 14FC 0000                  		move.b	#0,(a2)+
000087A2 3001                       		move.w	d1,d0
000087A4 E248                       		lsr.w	#1,d0
000087A6 E948                       		lsl.w	#4,d0
000087A8 9640                       		sub.w	d0,d3
000087AA 5501                       		subq.b	#2,d1
000087AC 6500                       		bcs.s	Obj17_Action
000087AE 7C00                       		moveq	#0,d6
000087B0                            
000087B0                            Obj17_MakeHelix:
000087B0 6100 0000                  		bsr.w	SingleObjLoad
000087B4 6600                       		bne.s	Obj17_Action
000087B6 5228 0028                  		addq.b	#1,$28(a0)
000087BA 3A09                       		move.w	a1,d5
000087BC 0445 D000                  		subi.w	#$D000,d5
000087C0 EC4D                       		lsr.w	#6,d5
000087C2 0245 007F                  		andi.w	#$7F,d5
000087C6 14C5                       		move.b	d5,(a2)+
000087C8 137C 0008 0024             		move.b	#8,$24(a1)
000087CE 1284                       		move.b	d4,0(a1)
000087D0 3342 000C                  		move.w	d2,$C(a1)
000087D4 3343 0008                  		move.w	d3,8(a1)
000087D8 2368 0004 0004             		move.l	4(a0),4(a1)
000087DE 337C 4398 0002             		move.w	#$4398,2(a1)
000087E4 137C 0004 0001             		move.b	#4,1(a1)
000087EA 137C 0003 0018             		move.b	#3,$18(a1)
000087F0 137C 0008 0019             		move.b	#8,$19(a1)
000087F6 1346 003E                  		move.b	d6,$3E(a1)
000087FA 5206                       		addq.b	#1,d6
000087FC 0206 0007                  		andi.b	#7,d6
00008800 0643 0010                  		addi.w	#$10,d3
00008804 B668 0008                  		cmp.w	8(a0),d3
00008808 6600                       		bne.s	loc_7D78
0000880A 1146 003E                  		move.b	d6,$3E(a0)
0000880E 5206                       		addq.b	#1,d6
00008810 0206 0007                  		andi.b	#7,d6
00008814 0643 0010                  		addi.w	#$10,d3
00008818 5228 0028                  		addq.b	#1,$28(a0)
0000881C                            
0000881C                            loc_7D78:
0000881C 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00008820                            
00008820                            Obj17_Action:				; XREF: Obj17_Index
00008820 6100 0000                  		bsr.w	Obj17_RotateSpikes
00008824 6100 0000                  		bsr.w	DisplaySprite
00008828 6000 0000                  		bra.w	Obj17_ChkDel
0000882C                            
0000882C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000882C                            
0000882C                            
0000882C                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
0000882C 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00008830 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00008836 D028 003E                  		add.b	$3E(a0),d0
0000883A 0200 0007                  		andi.b	#7,d0
0000883E 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00008842 6600                       		bne.s	locret_7DA6
00008844 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
0000884A                            
0000884A                            locret_7DA6:
0000884A 4E75                       		rts	
0000884C                            ; End of function Obj17_RotateSpikes
0000884C                            
0000884C                            ; ===========================================================================
0000884C                            
0000884C                            Obj17_ChkDel:				; XREF: Obj17_Action
0000884C 3028 0008                  		move.w	8(a0),d0
00008850 0240 FF80                  		andi.w	#$FF80,d0
00008854 3238 F700                  		move.w	($FFFFF700).w,d1
00008858 0441 0080                  		subi.w	#$80,d1
0000885C 0241 FF80                  		andi.w	#$FF80,d1
00008860 9041                       		sub.w	d1,d0
00008862 0C40 0280                  		cmpi.w	#$280,d0
00008866 6200 0000                  		bhi.w	Obj17_DelAll
0000886A 4E75                       		rts	
0000886C                            ; ===========================================================================
0000886C                            
0000886C                            Obj17_DelAll:				; XREF: Obj17_ChkDel
0000886C 7400                       		moveq	#0,d2
0000886E 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008872 141A                       		move.b	(a2)+,d2	; move a2 to d2
00008874 5502                       		subq.b	#2,d2
00008876 6500                       		bcs.s	Obj17_Delete
00008878                            
00008878                            Obj17_DelLoop:
00008878 7000                       		moveq	#0,d0
0000887A 101A                       		move.b	(a2)+,d0
0000887C ED48                       		lsl.w	#6,d0
0000887E 0680 00FF D000             		addi.l	#$FFD000,d0
00008884 2240                       		movea.l	d0,a1
00008886 6100 0000                  		bsr.w	DeleteObject2	; delete object
0000888A 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
0000888E                            
0000888E                            Obj17_Delete:				; XREF: Obj17_Index
0000888E 6100 0000                  		bsr.w	DeleteObject
00008892 4E75                       		rts	
00008894                            ; ===========================================================================
00008894                            
00008894                            Obj17_Display:				; XREF: Obj17_Index
00008894 6100 FF96                  		bsr.w	Obj17_RotateSpikes
00008898 6000 0000                  		bra.w	DisplaySprite
0000889C                            ; ===========================================================================
0000889C                            ; ---------------------------------------------------------------------------
0000889C                            ; Sprite mappings - helix of spikes on a pole (GHZ)
0000889C                            ; ---------------------------------------------------------------------------
0000889C                            Map_obj17:
0000889C                            	include "_maps\obj17.asm"
0000889C                            ; ---------------------------------------------------------------------------
0000889C                            ; Sprite mappings - helix of spikes on a pole (GHZ)
0000889C                            ; ---------------------------------------------------------------------------
0000889C 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
000088A0 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
000088A4 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
000088A8 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
000088AC 01                         byte_7E08:	dc.b 1
000088AD F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
000088B2 01                         byte_7E0E:	dc.b 1
000088B3 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
000088B8 01                         byte_7E14:	dc.b 1
000088B9 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
000088BE 01                         byte_7E1A:	dc.b 1
000088BF FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
000088C4 01                         byte_7E20:	dc.b 1
000088C5 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
000088CA 01                         byte_7E26:	dc.b 1
000088CB 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
000088D0 01                         byte_7E2C:	dc.b 1
000088D1 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
000088D6                            		even
000088D6                            		even
000088D6                            
000088D6                            ; ===========================================================================
000088D6                            ; ---------------------------------------------------------------------------
000088D6                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
000088D6                            ; ---------------------------------------------------------------------------
000088D6                            
000088D6                            Obj18:					; XREF: Obj_Index
000088D6 7000                       		moveq	#0,d0
000088D8 1028 0024                  		move.b	$24(a0),d0
000088DC 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
000088E0 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
000088E4                            ; ===========================================================================
000088E4 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
000088E6 0000                       		dc.w Obj18_Solid-Obj18_Index
000088E8 0000                       		dc.w Obj18_Action2-Obj18_Index
000088EA 0000                       		dc.w Obj18_Delete-Obj18_Index
000088EC 0000                       		dc.w Obj18_Action-Obj18_Index
000088EE                            ; ===========================================================================
000088EE                            
000088EE                            Obj18_Main:				; XREF: Obj18_Index
000088EE 5428 0024                  		addq.b	#2,$24(a0)
000088F2 317C 4000 0002             		move.w	#$4000,2(a0)
000088F8 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00008900 117C 0020 0019             		move.b	#$20,$19(a0)
00008906 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
0000890C 6600                       		bne.s	Obj18_NotSYZ
0000890E 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00008916 117C 0020 0019             		move.b	#$20,$19(a0)
0000891C                            
0000891C                            Obj18_NotSYZ:
0000891C 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008922 6600                       		bne.s	Obj18_NotSLZ
00008924 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
0000892C 117C 0020 0019             		move.b	#$20,$19(a0)
00008932 317C 4000 0002             		move.w	#$4000,2(a0)
00008938 117C 0003 0028             		move.b	#3,$28(a0)
0000893E                            
0000893E                            Obj18_NotSLZ:
0000893E 117C 0004 0001             		move.b	#4,1(a0)
00008944 117C 0004 0018             		move.b	#4,$18(a0)
0000894A 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00008950 3168 000C 0034             		move.w	$C(a0),$34(a0)
00008956 3168 0008 0032             		move.w	8(a0),$32(a0)
0000895C 317C 0080 0026             		move.w	#$80,$26(a0)
00008962 7200                       		moveq	#0,d1
00008964 1028 0028                  		move.b	$28(a0),d0
00008968 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
0000896C 6600                       		bne.s	Obj18_SetFrame	; if not, branch
0000896E 5201                       		addq.b	#1,d1		; use frame #1
00008970 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00008976                            
00008976                            Obj18_SetFrame:
00008976 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
0000897A                            
0000897A                            Obj18_Solid:				; XREF: Obj18_Index
0000897A 4A28 0038                  		tst.b	$38(a0)
0000897E 6700                       		beq.s	loc_7EE0
00008980 5928 0038                  		subq.b	#4,$38(a0)
00008984                            
00008984                            loc_7EE0:
00008984 7200                       		moveq	#0,d1
00008986 1228 0019                  		move.b	$19(a0),d1
0000898A 6100 F56C                  		bsr.w	PlatformObject
0000898E                            
0000898E                            Obj18_Action:				; XREF: Obj18_Index
0000898E 6100 0000                  		bsr.w	Obj18_Move
00008992 6100 0000                  		bsr.w	Obj18_Nudge
00008996 6100 0000                  		bsr.w	DisplaySprite
0000899A 6000 0000                  		bra.w	Obj18_ChkDel
0000899E                            ; ===========================================================================
0000899E                            
0000899E                            Obj18_Action2:				; XREF: Obj18_Index
0000899E 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
000089A4 6700                       		beq.s	loc_7F06
000089A6 5828 0038                  		addq.b	#4,$38(a0)
000089AA                            
000089AA                            loc_7F06:
000089AA 7200                       		moveq	#0,d1
000089AC 1228 0019                  		move.b	$19(a0),d1
000089B0 6100 F6BA                  		bsr.w	ExitPlatform
000089B4 3F28 0008                  		move.w	8(a0),-(sp)
000089B8 6100 0000                  		bsr.w	Obj18_Move
000089BC 6100 0000                  		bsr.w	Obj18_Nudge
000089C0 341F                       		move.w	(sp)+,d2
000089C2 6100 FC12                  		bsr.w	MvSonicOnPtfm2
000089C6 6100 0000                  		bsr.w	DisplaySprite
000089CA 6000 0000                  		bra.w	Obj18_ChkDel
000089CE                            
000089CE 4E75                       		rts
000089D0                            
000089D0                            ; ---------------------------------------------------------------------------
000089D0                            ; Subroutine to	move platform slightly when you	stand on it
000089D0                            ; ---------------------------------------------------------------------------
000089D0                            
000089D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089D0                            
000089D0                            
000089D0                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
000089D0 1028 0038                  		move.b	$38(a0),d0
000089D4 6100 A9FE                  		bsr.w	CalcSine
000089D8 323C 0400                  		move.w	#$400,d1
000089DC C1C1                       		muls.w	d1,d0
000089DE 4840                       		swap	d0
000089E0 D068 002C                  		add.w	$2C(a0),d0
000089E4 3140 000C                  		move.w	d0,$C(a0)
000089E8 4E75                       		rts	
000089EA                            ; End of function Obj18_Nudge
000089EA                            
000089EA                            ; ---------------------------------------------------------------------------
000089EA                            ; Subroutine to	move platforms
000089EA                            ; ---------------------------------------------------------------------------
000089EA                            
000089EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089EA                            
000089EA                            
000089EA                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
000089EA 7000                       		moveq	#0,d0
000089EC 1028 0028                  		move.b	$28(a0),d0
000089F0 0240 000F                  		andi.w	#$F,d0
000089F4 D040                       		add.w	d0,d0
000089F6 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
000089FA 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
000089FE                            ; End of function Obj18_Move
000089FE                            
000089FE                            ; ===========================================================================
000089FE 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
00008A02 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
00008A06 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
00008A0A 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
00008A0E 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
00008A12 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
00008A16 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
00008A18                            ; ===========================================================================
00008A18                            
00008A18                            Obj18_Type00:
00008A18 4E75                       		rts			; platform 00 doesn't move
00008A1A                            ; ===========================================================================
00008A1A                            
00008A1A                            Obj18_Type05:
00008A1A 3028 0032                  		move.w	$32(a0),d0
00008A1E 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008A22 4401                       		neg.b	d1		; reverse platform-motion
00008A24 0601 0040                  		addi.b	#$40,d1
00008A28 6000                       		bra.s	Obj18_01_Move
00008A2A                            ; ===========================================================================
00008A2A                            
00008A2A                            Obj18_Type01:
00008A2A 3028 0032                  		move.w	$32(a0),d0
00008A2E 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008A32 0401 0040                  		subi.b	#$40,d1
00008A36                            
00008A36                            Obj18_01_Move:
00008A36 4881                       		ext.w	d1
00008A38 D041                       		add.w	d1,d0
00008A3A 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
00008A3E 6000 0000                  		bra.w	Obj18_ChgMotion
00008A42                            ; ===========================================================================
00008A42                            
00008A42                            Obj18_Type0C:
00008A42 3028 0034                  		move.w	$34(a0),d0
00008A46 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008A4A 4401                       		neg.b	d1		; reverse platform-motion
00008A4C 0601 0030                  		addi.b	#$30,d1
00008A50 6000                       		bra.s	Obj18_02_Move
00008A52                            ; ===========================================================================
00008A52                            
00008A52                            Obj18_Type0B:
00008A52 3028 0034                  		move.w	$34(a0),d0
00008A56 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008A5A 0401 0030                  		subi.b	#$30,d1
00008A5E 6000                       		bra.s	Obj18_02_Move
00008A60                            ; ===========================================================================
00008A60                            
00008A60                            Obj18_Type06:
00008A60 3028 0034                  		move.w	$34(a0),d0
00008A64 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008A68 4401                       		neg.b	d1		; reverse platform-motion
00008A6A 0601 0040                  		addi.b	#$40,d1
00008A6E 6000                       		bra.s	Obj18_02_Move
00008A70                            ; ===========================================================================
00008A70                            
00008A70                            Obj18_Type02:
00008A70 3028 0034                  		move.w	$34(a0),d0
00008A74 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008A78 0401 0040                  		subi.b	#$40,d1
00008A7C                            
00008A7C                            Obj18_02_Move:
00008A7C 4881                       		ext.w	d1
00008A7E D041                       		add.w	d1,d0
00008A80 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008A84 6000 0000                  		bra.w	Obj18_ChgMotion
00008A88                            ; ===========================================================================
00008A88                            
00008A88                            Obj18_Type03:
00008A88 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008A8C 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00008A8E 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
00008A94 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
00008A96 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00008A9C                            
00008A9C                            Obj18_03_NoMove:
00008A9C 4E75                       		rts	
00008A9E                            ; ===========================================================================
00008A9E                            
00008A9E                            Obj18_03_Wait:
00008A9E 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00008AA2 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
00008AA4 317C 0020 003A             		move.w	#32,$3A(a0)
00008AAA 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00008AAE 4E75                       		rts	
00008AB0                            ; ===========================================================================
00008AB0                            
00008AB0                            Obj18_Type04:
00008AB0 4A68 003A                  		tst.w	$3A(a0)
00008AB4 6700                       		beq.s	loc_8048
00008AB6 5368 003A                  		subq.w	#1,$3A(a0)
00008ABA 6600                       		bne.s	loc_8048
00008ABC 0828 0003 0022             		btst	#3,$22(a0)
00008AC2 6700                       		beq.s	loc_8042
00008AC4 08E9 0001 0022             		bset	#1,$22(a1)
00008ACA 08A9 0003 0022             		bclr	#3,$22(a1)
00008AD0 137C 0002 0024             		move.b	#2,$24(a1)
00008AD6 08A8 0003 0022             		bclr	#3,$22(a0)
00008ADC 4228 0025                  		clr.b	$25(a0)
00008AE0 3368 0012 0012             		move.w	$12(a0),$12(a1)
00008AE6                            
00008AE6                            loc_8042:
00008AE6 117C 0008 0024             		move.b	#8,$24(a0)
00008AEC                            
00008AEC                            loc_8048:
00008AEC 2628 002C                  		move.l	$2C(a0),d3
00008AF0 3028 0012                  		move.w	$12(a0),d0
00008AF4 48C0                       		ext.l	d0
00008AF6 E180                       		asl.l	#8,d0
00008AF8 D680                       		add.l	d0,d3
00008AFA 2143 002C                  		move.l	d3,$2C(a0)
00008AFE 0668 0038 0012             		addi.w	#$38,$12(a0)
00008B04 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008B08 0640 00E0                  		addi.w	#$E0,d0
00008B0C B068 002C                  		cmp.w	$2C(a0),d0
00008B10 6400                       		bcc.s	locret_8074
00008B12 117C 0006 0024             		move.b	#6,$24(a0)
00008B18                            
00008B18                            locret_8074:
00008B18 4E75                       		rts	
00008B1A                            ; ===========================================================================
00008B1A                            
00008B1A                            Obj18_Type07:
00008B1A 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008B1E 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
00008B20 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00008B24 7000                       		moveq	#0,d0
00008B26 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
00008B2A E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00008B2C 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00008B30 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
00008B32 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00008B38                            
00008B38                            Obj18_07_NoMove:
00008B38 4E75                       		rts	
00008B3A                            ; ===========================================================================
00008B3A                            
00008B3A                            Obj18_07_Wait:
00008B3A 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00008B3E 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
00008B40 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
00008B44 4E75                       		rts	
00008B46                            ; ===========================================================================
00008B46                            
00008B46                            Obj18_Type08:
00008B46 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00008B4A 3028 0034                  		move.w	$34(a0),d0
00008B4E 0440 0200                  		subi.w	#$200,d0
00008B52 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00008B56 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
00008B58 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00008B5C                            
00008B5C                            Obj18_08_NoStop:
00008B5C 4E75                       		rts	
00008B5E                            ; ===========================================================================
00008B5E                            
00008B5E                            Obj18_Type0A:
00008B5E 3028 0034                  		move.w	$34(a0),d0
00008B62 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008B66 0401 0040                  		subi.b	#$40,d1
00008B6A 4881                       		ext.w	d1
00008B6C E241                       		asr.w	#1,d1
00008B6E D041                       		add.w	d1,d0
00008B70 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008B74                            
00008B74                            Obj18_ChgMotion:
00008B74 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00008B7A 4E75                       		rts	
00008B7C                            ; ===========================================================================
00008B7C                            
00008B7C                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00008B7C 3028 0032                  		move.w	$32(a0),d0
00008B80 0240 FF80                  		andi.w	#$FF80,d0
00008B84 3238 F700                  		move.w	($FFFFF700).w,d1
00008B88 0441 0080                  		subi.w	#$80,d1
00008B8C 0241 FF80                  		andi.w	#$FF80,d1
00008B90 9041                       		sub.w	d1,d0
00008B92 0C40 0280                  		cmpi.w	#$280,d0
00008B96 6200                       		bhi.s	Obj18_Delete
00008B98 4E75                       		rts	
00008B9A                            ; ===========================================================================
00008B9A                            
00008B9A                            Obj18_Delete:				; XREF: Obj18_Index
00008B9A 6000 0000                  		bra.w	DeleteObject
00008B9E                            ; ===========================================================================
00008B9E                            ; ---------------------------------------------------------------------------
00008B9E                            ; Sprite mappings - unused
00008B9E                            ; ---------------------------------------------------------------------------
00008B9E                            Map_obj18x:
00008B9E                            	include "_maps\obj18x.asm"
00008B9E                            ; ---------------------------------------------------------------------------
00008B9E                            ; Sprite mappings - unused
00008B9E                            ; ---------------------------------------------------------------------------
00008B9E 0000                       		dc.w byte_80FE-Map_obj18x
00008BA0 0000                       		dc.w byte_8109-Map_obj18x
00008BA2 02                         byte_80FE:	dc.b 2
00008BA3 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00008BA8 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00008BAD 0A                         byte_8109:	dc.b $A
00008BAE F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00008BB3 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00008BB8 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00008BBD 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00008BC2 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00008BC7 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00008BCC 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00008BD1 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00008BD6 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00008BDB 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00008BE0                            		even
00008BE0                            		even
00008BE0                            
00008BE0                            ; ---------------------------------------------------------------------------
00008BE0                            ; Sprite mappings - GHZ	platforms
00008BE0                            ; ---------------------------------------------------------------------------
00008BE0                            Map_obj18:
00008BE0                            	include "_maps\obj18ghz.asm"
00008BE0                            ; ---------------------------------------------------------------------------
00008BE0                            ; Sprite mappings - GHZ	platforms
00008BE0                            ; ---------------------------------------------------------------------------
00008BE0 0000                       		dc.w byte_8140-Map_obj18
00008BE2 0000                       		dc.w byte_8155-Map_obj18
00008BE4 04                         byte_8140:	dc.b 4
00008BE5 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00008BEA F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00008BEF F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00008BF4 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00008BF9 0A                         byte_8155:	dc.b $A
00008BFA F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00008BFF 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00008C04 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00008C09 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00008C0E 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00008C13 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00008C18 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00008C1D 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00008C22 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00008C27 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00008C2C                            		even
00008C2C                            		even
00008C2C                            
00008C2C                            ; ---------------------------------------------------------------------------
00008C2C                            ; Sprite mappings - SYZ	platforms
00008C2C                            ; ---------------------------------------------------------------------------
00008C2C                            Map_obj18a:
00008C2C                            	include "_maps\obj18syz.asm"
00008C2C                            ; ---------------------------------------------------------------------------
00008C2C                            ; Sprite mappings - SYZ	platforms
00008C2C                            ; ---------------------------------------------------------------------------
00008C2C 0000                       		dc.w byte_818A-Map_obj18a
00008C2E 03                         byte_818A:	dc.b 3
00008C2F F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00008C34 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00008C39 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00008C3E                            		even
00008C3E                            		even
00008C3E                            
00008C3E                            ; ---------------------------------------------------------------------------
00008C3E                            ; Sprite mappings - SLZ	platforms
00008C3E                            ; ---------------------------------------------------------------------------
00008C3E                            Map_obj18b:
00008C3E                            	include "_maps\obj18slz.asm"
00008C3E                            ; ---------------------------------------------------------------------------
00008C3E                            ; Sprite mappings - SLZ	platforms
00008C3E                            ; ---------------------------------------------------------------------------
00008C3E 0000                       		dc.w byte_819C-Map_obj18b
00008C40 02                         byte_819C:	dc.b 2
00008C41 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00008C46 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00008C4C 00                         		even
00008C4C 00                         		even
00008C4C                            
00008C4C                            ; ===========================================================================
00008C4C                            ; ---------------------------------------------------------------------------
00008C4C                            ; Object 19 - blank
00008C4C                            ; ---------------------------------------------------------------------------
00008C4C                            
00008C4C                            Obj19:					; XREF: Obj_Index
00008C4C 4E75                       		rts	
00008C4E                            ; ===========================================================================
00008C4E                            ; ---------------------------------------------------------------------------
00008C4E                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008C4E                            ; ---------------------------------------------------------------------------
00008C4E                            Map_obj48:
00008C4E                            	include "_maps\obj48.asm"
00008C4E                            ; ---------------------------------------------------------------------------
00008C4E                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008C4E                            ; ---------------------------------------------------------------------------
00008C4E 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
00008C52 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
00008C56 06                         byte_81B2:	dc.b 6
00008C57 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00008C5C F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00008C61 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00008C66 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00008C6B 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00008C70 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00008C75 04                         byte_81D1:	dc.b 4
00008C76 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00008C7B E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00008C80 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00008C85 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00008C8A 04                         byte_81E6:	dc.b 4
00008C8B E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00008C90 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00008C95 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00008C9A 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00008C9F 04                         byte_81FB:	dc.b 4
00008CA0 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00008CA5 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00008CAA 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00008CAF 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00008CB4                            		even
00008CB4                            		even
00008CB4                            
00008CB4                            ; ===========================================================================
00008CB4                            ; ---------------------------------------------------------------------------
00008CB4                            ; Object 1A - GHZ collapsing ledge
00008CB4                            ; ---------------------------------------------------------------------------
00008CB4                            
00008CB4                            Obj1A:					; XREF: Obj_Index
00008CB4 7000                       		moveq	#0,d0
00008CB6 1028 0024                  		move.b	$24(a0),d0
00008CBA 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00008CBE 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00008CC2                            ; ===========================================================================
00008CC2 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
00008CC6 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00008CCA 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00008CCE                            ; ===========================================================================
00008CCE                            
00008CCE                            Obj1A_Main:				; XREF: Obj1A_Index
00008CCE 5428 0024                  		addq.b	#2,$24(a0)
00008CD2 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008CDA 317C 4000 0002             		move.w	#$4000,2(a0)
00008CE0 0028 0004 0001             		ori.b	#4,1(a0)
00008CE6 117C 0004 0018             		move.b	#4,$18(a0)
00008CEC 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00008CF2 117C 0064 0019             		move.b	#$64,$19(a0)
00008CF8 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00008CFE 117C 0038 0016             		move.b	#$38,$16(a0)
00008D04 08E8 0004 0001             		bset	#4,1(a0)
00008D0A                            
00008D0A                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00008D0A 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00008D0E 6700                       		beq.s	Obj1A_Slope	; if not, branch
00008D10 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00008D14 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00008D18 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008D1C                            
00008D1C                            Obj1A_Slope:
00008D1C 323C 0030                  		move.w	#$30,d1
00008D20 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008D26 6100 F2A4                  		bsr.w	SlopeObject
00008D2A 6000 0000                  		bra.w	MarkObjGone
00008D2E                            ; ===========================================================================
00008D2E                            
00008D2E                            Obj1A_Touch:				; XREF: Obj1A_Index
00008D2E 4A28 0038                  		tst.b	$38(a0)
00008D32 6700 0000                  		beq.w	loc_847A
00008D36 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008D3C 5328 0038                  		subq.b	#1,$38(a0)
00008D40                            
00008D40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D40                            
00008D40                            
00008D40                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00008D40 323C 0030                  		move.w	#$30,d1
00008D44 6100 F326                  		bsr.w	ExitPlatform
00008D48 323C 0030                  		move.w	#$30,d1
00008D4C 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008D52 3428 0008                  		move.w	8(a0),d2
00008D56 6100 0000                  		bsr.w	SlopeObject2
00008D5A 6000 0000                  		bra.w	MarkObjGone
00008D5E                            ; End of function Obj1A_WalkOff
00008D5E                            
00008D5E                            ; ===========================================================================
00008D5E                            
00008D5E                            Obj1A_Display:				; XREF: Obj1A_Index
00008D5E 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008D62 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00008D64 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008D68 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00008D6C 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008D70 6000 0000                  		bra.w	DisplaySprite
00008D74                            ; ===========================================================================
00008D74                            
00008D74                            loc_82D0:				; XREF: Obj1A_Display
00008D74 5328 0038                  		subq.b	#1,$38(a0)
00008D78 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00008D7C 43F8 D000                  		lea	($FFFFD000).w,a1
00008D80 0829 0003 0022             		btst	#3,$22(a1)
00008D86 6700                       		beq.s	loc_82FC
00008D88 4A28 0038                  		tst.b	$38(a0)
00008D8C 6600                       		bne.s	locret_8308
00008D8E 08A9 0003 0022             		bclr	#3,$22(a1)
00008D94 08A9 0005 0022             		bclr	#5,$22(a1)
00008D9A 137C 0001 001D             		move.b	#1,$1D(a1)
00008DA0                            
00008DA0                            loc_82FC:
00008DA0 117C 0000 003A             		move.b	#0,$3A(a0)
00008DA6 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00008DAC                            
00008DAC                            locret_8308:
00008DAC 4E75                       		rts	
00008DAE                            ; ===========================================================================
00008DAE                            
00008DAE                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00008DAE 6100 0000                  		bsr.w	ObjectFall
00008DB2 6100 0000                  		bsr.w	DisplaySprite
00008DB6 4A28 0001                  		tst.b	1(a0)
00008DBA 6A00                       		bpl.s	Obj1A_Delete
00008DBC 4E75                       		rts	
00008DBE                            ; ===========================================================================
00008DBE                            
00008DBE                            Obj1A_Delete:				; XREF: Obj1A_Index
00008DBE 6100 0000                  		bsr.w	DeleteObject
00008DC2 4E75                       		rts	
00008DC4                            ; ===========================================================================
00008DC4                            ; ---------------------------------------------------------------------------
00008DC4                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00008DC4                            ; ---------------------------------------------------------------------------
00008DC4                            
00008DC4                            Obj53:					; XREF: Obj_Index
00008DC4 7000                       		moveq	#0,d0
00008DC6 1028 0024                  		move.b	$24(a0),d0
00008DCA 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008DCE 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00008DD2                            ; ===========================================================================
00008DD2 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00008DD6 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008DDA 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008DDE                            ; ===========================================================================
00008DDE                            
00008DDE                            Obj53_Main:				; XREF: Obj53_Index
00008DDE 5428 0024                  		addq.b	#2,$24(a0)
00008DE2 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008DEA 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008DF0 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008DF6 6600                       		bne.s	Obj53_NotSLZ
00008DF8 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008DFE 5428 001A                  		addq.b	#2,$1A(a0)
00008E02                            
00008E02                            Obj53_NotSLZ:
00008E02 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008E08 6600                       		bne.s	Obj53_NotSBZ
00008E0A 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00008E10                            
00008E10                            Obj53_NotSBZ:
00008E10 0028 0004 0001             		ori.b	#4,1(a0)
00008E16 117C 0004 0018             		move.b	#4,$18(a0)
00008E1C 117C 0007 0038             		move.b	#7,$38(a0)
00008E22 117C 0044 0019             		move.b	#$44,$19(a0)
00008E28                            
00008E28                            Obj53_ChkTouch:				; XREF: Obj53_Index
00008E28 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008E2C 6700                       		beq.s	Obj53_Solid	; if not, branch
00008E2E 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008E32 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00008E36 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008E3A                            
00008E3A                            Obj53_Solid:
00008E3A 323C 0020                  		move.w	#$20,d1
00008E3E 6100 F0B8                  		bsr.w	PlatformObject
00008E42 4A28 0028                  		tst.b	$28(a0)
00008E46 6A00                       		bpl.s	Obj53_MarkAsGone
00008E48 0829 0003 0022             		btst	#3,$22(a1)
00008E4E 6700                       		beq.s	Obj53_MarkAsGone
00008E50 08A8 0000 0001             		bclr	#0,1(a0)
00008E56 3029 0008                  		move.w	8(a1),d0
00008E5A 9068 0008                  		sub.w	8(a0),d0
00008E5E 6400                       		bcc.s	Obj53_MarkAsGone
00008E60 08E8 0000 0001             		bset	#0,1(a0)
00008E66                            
00008E66                            Obj53_MarkAsGone:
00008E66 6000 0000                  		bra.w	MarkObjGone
00008E6A                            ; ===========================================================================
00008E6A                            
00008E6A                            Obj53_Touch:				; XREF: Obj53_Index
00008E6A 4A28 0038                  		tst.b	$38(a0)
00008E6E 6700 0000                  		beq.w	loc_8458
00008E72 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008E78 5328 0038                  		subq.b	#1,$38(a0)
00008E7C                            
00008E7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008E7C                            
00008E7C                            
00008E7C                            Obj53_WalkOff:				; XREF: Obj53_Index
00008E7C 323C 0020                  		move.w	#$20,d1
00008E80 6100 F1EA                  		bsr.w	ExitPlatform
00008E84 3428 0008                  		move.w	8(a0),d2
00008E88 6100 F74C                  		bsr.w	MvSonicOnPtfm2
00008E8C 6000 0000                  		bra.w	MarkObjGone
00008E90                            ; End of function Obj53_WalkOff
00008E90                            
00008E90                            ; ===========================================================================
00008E90                            
00008E90                            Obj53_Display:				; XREF: Obj53_Index
00008E90 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008E94 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00008E96 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008E9A 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008E9E 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008EA2 6000 0000                  		bra.w	DisplaySprite
00008EA6                            ; ===========================================================================
00008EA6                            
00008EA6                            loc_8402:
00008EA6 5328 0038                  		subq.b	#1,$38(a0)
00008EAA 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008EAE 43F8 D000                  		lea	($FFFFD000).w,a1
00008EB2 0829 0003 0022             		btst	#3,$22(a1)
00008EB8 6700                       		beq.s	loc_842E
00008EBA 4A28 0038                  		tst.b	$38(a0)
00008EBE 6600                       		bne.s	locret_843A
00008EC0 08A9 0003 0022             		bclr	#3,$22(a1)
00008EC6 08A9 0005 0022             		bclr	#5,$22(a1)
00008ECC 137C 0001 001D             		move.b	#1,$1D(a1)
00008ED2                            
00008ED2                            loc_842E:
00008ED2 117C 0000 003A             		move.b	#0,$3A(a0)
00008ED8 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008EDE                            
00008EDE                            locret_843A:
00008EDE 4E75                       		rts	
00008EE0                            ; ===========================================================================
00008EE0                            
00008EE0                            Obj53_TimeZero:				; XREF: Obj53_Display
00008EE0 6100 0000                  		bsr.w	ObjectFall
00008EE4 6100 0000                  		bsr.w	DisplaySprite
00008EE8 4A28 0001                  		tst.b	1(a0)
00008EEC 6A00                       		bpl.s	Obj53_Delete
00008EEE 4E75                       		rts	
00008EF0                            ; ===========================================================================
00008EF0                            
00008EF0                            Obj53_Delete:				; XREF: Obj53_Index
00008EF0 6100 0000                  		bsr.w	DeleteObject
00008EF4 4E75                       		rts	
00008EF6                            ; ===========================================================================
00008EF6                            
00008EF6                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008EF6 117C 0000 003A             		move.b	#0,$3A(a0)
00008EFC                            
00008EFC                            loc_8458:				; XREF: Obj53_Touch
00008EFC 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00008F02 0828 0000 0028             		btst	#0,$28(a0)
00008F08 6700                       		beq.s	loc_846C
00008F0A 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008F10                            
00008F10                            loc_846C:
00008F10 7207                       		moveq	#7,d1
00008F12 5228 001A                  		addq.b	#1,$1A(a0)
00008F16 6000                       		bra.s	loc_8486
00008F18                            ; ===========================================================================
00008F18                            
00008F18                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008F18 117C 0000 003A             		move.b	#0,$3A(a0)
00008F1E                            
00008F1E                            loc_847A:				; XREF: Obj1A_Touch
00008F1E 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00008F24 7218                       		moveq	#$18,d1
00008F26 5428 001A                  		addq.b	#2,$1A(a0)
00008F2A                            
00008F2A                            loc_8486:				; XREF: Obj53_Collapse
00008F2A 7000                       		moveq	#0,d0
00008F2C 1028 001A                  		move.b	$1A(a0),d0
00008F30 D040                       		add.w	d0,d0
00008F32 2668 0004                  		movea.l	4(a0),a3
00008F36 D6F3 0000                  		adda.w	(a3,d0.w),a3
00008F3A 524B                       		addq.w	#1,a3
00008F3C 08E8 0005 0001             		bset	#5,1(a0)
00008F42 1810                       		move.b	0(a0),d4
00008F44 1A28 0001                  		move.b	1(a0),d5
00008F48 2248                       		movea.l	a0,a1
00008F4A 6000                       		bra.s	loc_84B2
00008F4C                            ; ===========================================================================
00008F4C                            
00008F4C                            loc_84AA:
00008F4C 6100 0000                  		bsr.w	SingleObjLoad
00008F50 6600                       		bne.s	loc_84F2
00008F52 5A4B                       		addq.w	#5,a3
00008F54                            
00008F54                            loc_84B2:
00008F54 137C 0006 0024             		move.b	#6,$24(a1)
00008F5A 1284                       		move.b	d4,0(a1)
00008F5C 234B 0004                  		move.l	a3,4(a1)
00008F60 1345 0001                  		move.b	d5,1(a1)
00008F64 3368 0008 0008             		move.w	8(a0),8(a1)
00008F6A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008F70 3368 0002 0002             		move.w	2(a0),2(a1)
00008F76 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008F7C 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008F82 135C 0038                  		move.b	(a4)+,$38(a1)
00008F86 B3C8                       		cmpa.l	a0,a1
00008F88 6400                       		bcc.s	loc_84EE
00008F8A 6100 0000                  		bsr.w	DisplaySprite2
00008F8E                            
00008F8E                            loc_84EE:
00008F8E 51C9 FFBC                  		dbf	d1,loc_84AA
00008F92                            
00008F92                            loc_84F2:
00008F92 6100 0000                  		bsr.w	DisplaySprite
00008F96 303C 00B9                  		move.w	#$B9,d0
00008F9A 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008FA0                            ; ===========================================================================
00008FA0                            ; ---------------------------------------------------------------------------
00008FA0                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008FA0                            ; ---------------------------------------------------------------------------
00008FA0 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008FB0 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008FBA 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008FC2 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008FCA                            
00008FCA                            ; ---------------------------------------------------------------------------
00008FCA                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008FCA                            ; ---------------------------------------------------------------------------
00008FCA                            
00008FCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008FCA                            
00008FCA                            
00008FCA                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008FCA 43F8 D000                  		lea	($FFFFD000).w,a1
00008FCE 0829 0003 0022             		btst	#3,$22(a1)
00008FD4 6700                       		beq.s	locret_856E
00008FD6 3029 0008                  		move.w	8(a1),d0
00008FDA 9068 0008                  		sub.w	8(a0),d0
00008FDE D041                       		add.w	d1,d0
00008FE0 E248                       		lsr.w	#1,d0
00008FE2 0828 0000 0001             		btst	#0,1(a0)
00008FE8 6700                       		beq.s	loc_854E
00008FEA 4640                       		not.w	d0
00008FEC D041                       		add.w	d1,d0
00008FEE                            
00008FEE                            loc_854E:
00008FEE 7200                       		moveq	#0,d1
00008FF0 1232 0000                  		move.b	(a2,d0.w),d1
00008FF4 3028 000C                  		move.w	$C(a0),d0
00008FF8 9041                       		sub.w	d1,d0
00008FFA 7200                       		moveq	#0,d1
00008FFC 1229 0016                  		move.b	$16(a1),d1
00009000 9041                       		sub.w	d1,d0
00009002 3340 000C                  		move.w	d0,$C(a1)
00009006 9468 0008                  		sub.w	8(a0),d2
0000900A 9569 0008                  		sub.w	d2,8(a1)
0000900E                            
0000900E                            locret_856E:
0000900E 4E75                       		rts	
00009010                            ; End of function SlopeObject2
00009010                            
00009010                            ; ===========================================================================
00009010                            ; ---------------------------------------------------------------------------
00009010                            ; Collision data for GHZ collapsing ledge
00009010                            ; ---------------------------------------------------------------------------
00009010                            Obj1A_SlopeData:
00009010                            		incbin	misc\ghzledge.bin
00009040                            		even
00009040                            
00009040                            ; ---------------------------------------------------------------------------
00009040                            ; Sprite mappings - GHZ	collapsing ledge
00009040                            ; ---------------------------------------------------------------------------
00009040                            Map_obj1A:
00009040                            	include "_maps\obj1A.asm"
00009040                            ; ---------------------------------------------------------------------------
00009040                            ; Sprite mappings - GHZ	collapsing ledge
00009040                            ; ---------------------------------------------------------------------------
00009040 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00009044 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00009048 10                         byte_85A8:	dc.b $10
00009049 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
0000904E D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009053 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009058 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000905D D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009062 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009067 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000906C F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009071 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009076 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000907B 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009080 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009085 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000908A 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000908F 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009094 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009099 10                         byte_85F9:	dc.b $10
0000909A C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
0000909F D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
000090A4 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
000090A9 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
000090AE D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000090B3 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
000090B8 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
000090BD F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
000090C2 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000090C7 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
000090CC 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
000090D1 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000090D6 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
000090DB 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
000090E0 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
000090E5 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000090EA 19                         byte_864A:	dc.b $19
000090EB C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
000090F0 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
000090F5 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
000090FA D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
000090FF E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009104 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009109 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000910E E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00009113 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009118 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000911D F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009122 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00009127 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000912C F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009131 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00009136 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000913B 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00009140 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00009145 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000914A 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000914F 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00009154 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009159 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000915E 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00009163 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009168 19                         byte_86C8:	dc.b $19
00009169 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
0000916E C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00009173 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009178 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000917D E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009182 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00009187 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000918C E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00009191 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009196 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000919B F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
000091A0 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
000091A5 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
000091AA F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
000091AF F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000091B4 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
000091B9 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
000091BE 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
000091C3 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000091C8 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
000091CD 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
000091D2 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
000091D7 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
000091DC 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
000091E1 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000091E6                            		even
000091E6                            		even
000091E6                            
000091E6                            ; ---------------------------------------------------------------------------
000091E6                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
000091E6                            ; ---------------------------------------------------------------------------
000091E6                            Map_obj53:
000091E6                            	include "_maps\obj53.asm"
000091E6                            ; ---------------------------------------------------------------------------
000091E6                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
000091E6                            ; ---------------------------------------------------------------------------
000091E6 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
000091EA 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
000091EE 04                         byte_874E:	dc.b 4
000091EF F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
000091F4 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
000091F9 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
000091FE 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00009203 08                         byte_8763:	dc.b 8
00009204 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00009209 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0000920E F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00009213 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00009218 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
0000921D 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00009222 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00009227 0805 0000 10               		dc.b 8,	5, 0, 0, $10
0000922C 04                         byte_878C:	dc.b 4
0000922D F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00009232 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00009237 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000923C 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00009241 08                         byte_87A1:	dc.b 8
00009242 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00009247 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
0000924C F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00009251 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00009256 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
0000925B 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00009260 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00009265 0805 000C 10               		dc.b 8,	5, 0, $C, $10
0000926A                            		even
0000926A                            		even
0000926A                            
0000926A                            ; ===========================================================================
0000926A                            ; ---------------------------------------------------------------------------
0000926A                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
0000926A                            ; ---------------------------------------------------------------------------
0000926A                            
0000926A                            Obj1C:					; XREF: Obj_Index
0000926A 7000                       		moveq	#0,d0
0000926C 1028 0024                  		move.b	$24(a0),d0
00009270 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00009274 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00009278                            ; ===========================================================================
00009278 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
0000927A 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
0000927C                            ; ===========================================================================
0000927C                            
0000927C                            Obj1C_Main:				; XREF: Obj1C_Index
0000927C 5428 0024                  		addq.b	#2,$24(a0)
00009280 7000                       		moveq	#0,d0
00009282 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00009286 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000928A 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
0000928E 2159 0004                  		move.l	(a1)+,4(a0)
00009292 3159 0002                  		move.w	(a1)+,2(a0)
00009296 0028 0004 0001             		ori.b	#4,1(a0)
0000929C 1159 001A                  		move.b	(a1)+,$1A(a0)
000092A0 1159 0019                  		move.b	(a1)+,$19(a0)
000092A4 1159 0018                  		move.b	(a1)+,$18(a0)
000092A8 1159 0020                  		move.b	(a1)+,$20(a0)
000092AC                            
000092AC                            Obj1C_ChkDel:				; XREF: Obj1C_Index
000092AC 3028 0008                  		move.w	8(a0),d0
000092B0 0240 FF80                  		andi.w	#$FF80,d0
000092B4 3238 F700                  		move.w	($FFFFF700).w,d1
000092B8 0441 0080                  		subi.w	#$80,d1
000092BC 0241 FF80                  		andi.w	#$FF80,d1
000092C0 9041                       		sub.w	d1,d0
000092C2 0C40 0280                  		cmpi.w	#$280,d0
000092C6 6200 0000                  		bhi.w	DeleteObject
000092CA 6000 0000                  		bra.w	DisplaySprite
000092CE                            ; ===========================================================================
000092CE                            ; ---------------------------------------------------------------------------
000092CE                            ; Variables for	object $1C are stored in an array
000092CE                            ; ---------------------------------------------------------------------------
000092CE 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
000092D2 44D8                       		dc.w $44D8		; VRAM setting
000092D4 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
000092D8 0000 0000                  		dc.l Map_obj1C
000092DC 44D8                       		dc.w $44D8
000092DE 0008 0200                  		dc.b 0,	8, 2, 0
000092E2 0000 0000                  		dc.l Map_obj1C
000092E6 44D8                       		dc.w $44D8
000092E8 0008 0200                  		dc.b 0,	8, 2, 0
000092EC 0000 83E0                  		dc.l Map_obj11
000092F0 438E                       		dc.w $438E
000092F2 0110 0100                  		dc.b 1,	$10, 1,	0
000092F6                            ; ---------------------------------------------------------------------------
000092F6                            ; Sprite mappings - SLZ	lava thrower
000092F6                            ; ---------------------------------------------------------------------------
000092F6                            Map_obj1C:
000092F6                            	include "_maps\obj1C.asm"
000092F6                            ; ---------------------------------------------------------------------------
000092F6                            ; Sprite mappings - SLZ	lava thrower
000092F6                            ; ---------------------------------------------------------------------------
000092F6 0000                       		dc.w byte_8858-Map_obj1C
000092F8 01                         byte_8858:	dc.b 1
000092F9 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000092FE                            		even
000092FE                            		even
000092FE                            
000092FE                            ; ===========================================================================
000092FE                            ; ---------------------------------------------------------------------------
000092FE                            ; Object 1D - switch that activates when Sonic touches it
000092FE                            ; (this	is not used anywhere in	the game)
000092FE                            ; ---------------------------------------------------------------------------
000092FE                            
000092FE                            Obj1D:					; XREF: Obj_Index
000092FE 7000                       		moveq	#0,d0
00009300 1028 0024                  		move.b	$24(a0),d0
00009304 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00009308 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
0000930C                            ; ===========================================================================
0000930C 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
0000930E 0000                       		dc.w Obj1D_Action-Obj1D_Index
00009310 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00009312                            ; ===========================================================================
00009312                            
00009312                            Obj1D_Main:				; XREF: Obj1D_Index
00009312 5428 0024                  		addq.b	#2,$24(a0)
00009316 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
0000931E 317C 4000 0002             		move.w	#$4000,2(a0)
00009324 117C 0004 0001             		move.b	#4,1(a0)
0000932A 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00009330 117C 0010 0019             		move.b	#$10,$19(a0)
00009336 117C 0005 0018             		move.b	#5,$18(a0)
0000933C                            
0000933C                            Obj1D_Action:				; XREF: Obj1D_Index
0000933C 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00009342 323C 0010                  		move.w	#$10,d1
00009346 6100 0000                  		bsr.w	Obj1D_ChkTouch
0000934A 6700                       		beq.s	Obj1D_ChkDel
0000934C 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00009350 7001                       		moveq	#1,d0
00009352 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00009356                            
00009356                            Obj1D_ChkDel:
00009356 6100 0000                  		bsr.w	DisplaySprite
0000935A 3028 0008                  		move.w	8(a0),d0
0000935E 0240 FF80                  		andi.w	#$FF80,d0
00009362 3238 F700                  		move.w	($FFFFF700).w,d1
00009366 0441 0080                  		subi.w	#$80,d1
0000936A 0241 FF80                  		andi.w	#$FF80,d1
0000936E 9041                       		sub.w	d1,d0
00009370 0C40 0280                  		cmpi.w	#$280,d0
00009374 6200 0000                  		bhi.w	Obj1D_Delete
00009378 4E75                       		rts	
0000937A                            ; ===========================================================================
0000937A                            
0000937A                            Obj1D_Delete:				; XREF: Obj1D_Index
0000937A 6100 0000                  		bsr.w	DeleteObject
0000937E 4E75                       		rts	
00009380                            ; ---------------------------------------------------------------------------
00009380                            ; Subroutine to	check if Sonic touches the object
00009380                            ; ---------------------------------------------------------------------------
00009380                            
00009380                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009380                            
00009380                            
00009380                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00009380 43F8 D000                  		lea	($FFFFD000).w,a1
00009384 3029 0008                  		move.w	8(a1),d0
00009388 9068 0008                  		sub.w	8(a0),d0
0000938C D041                       		add.w	d1,d0
0000938E 6B00                       		bmi.s	loc_8918
00009390 D241                       		add.w	d1,d1
00009392 B041                       		cmp.w	d1,d0
00009394 6400                       		bcc.s	loc_8918
00009396 3429 000C                  		move.w	$C(a1),d2
0000939A 1229 0016                  		move.b	$16(a1),d1
0000939E 4881                       		ext.w	d1
000093A0 D242                       		add.w	d2,d1
000093A2 3028 000C                  		move.w	$C(a0),d0
000093A6 0440 0010                  		subi.w	#$10,d0
000093AA 9041                       		sub.w	d1,d0
000093AC 6200                       		bhi.s	loc_8918
000093AE 0C40 FFF0                  		cmpi.w	#-$10,d0
000093B2 6500                       		bcs.s	loc_8918
000093B4 70FF                       		moveq	#-1,d0
000093B6 4E75                       		rts	
000093B8                            ; ===========================================================================
000093B8                            
000093B8                            loc_8918:
000093B8 7000                       		moveq	#0,d0
000093BA 4E75                       		rts	
000093BC                            ; End of function Obj1D_ChkTouch
000093BC                            
000093BC                            ; ===========================================================================
000093BC                            ; ---------------------------------------------------------------------------
000093BC                            ; Sprite mappings - object 1D
000093BC                            ; ---------------------------------------------------------------------------
000093BC                            Map_obj1D:
000093BC                            	include "_maps\obj1D.asm"
000093BC                            ; ---------------------------------------------------------------------------
000093BC                            ; Sprite mappings - object 1D
000093BC                            ; ---------------------------------------------------------------------------
000093BC 0000                       		dc.w byte_891E-Map_obj1D
000093BE 04                         byte_891E:	dc.b 4
000093BF E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
000093C4 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
000093C9 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
000093CE 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
000093D4 00                         		even
000093D4 00                         		even
000093D4                            
000093D4                            ; ===========================================================================
000093D4                            ; ---------------------------------------------------------------------------
000093D4                            ; Object 2A - doors (SBZ)
000093D4                            ; ---------------------------------------------------------------------------
000093D4                            
000093D4                            Obj2A:					; XREF: Obj_Index
000093D4 7000                       		moveq	#0,d0
000093D6 1028 0024                  		move.b	$24(a0),d0
000093DA 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
000093DE 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
000093E2                            ; ===========================================================================
000093E2 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
000093E4 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
000093E6                            ; ===========================================================================
000093E6                            
000093E6                            Obj2A_Main:				; XREF: Obj2A_Index
000093E6 5428 0024                  		addq.b	#2,$24(a0)
000093EA 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
000093F2 317C 42E8 0002             		move.w	#$42E8,2(a0)
000093F8 0028 0004 0001             		ori.b	#4,1(a0)
000093FE 117C 0008 0019             		move.b	#8,$19(a0)
00009404 117C 0004 0018             		move.b	#4,$18(a0)
0000940A                            
0000940A                            Obj2A_OpenShut:				; XREF: Obj2A_Index
0000940A 323C 0040                  		move.w	#$40,d1
0000940E 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00009412 3038 D008                  		move.w	($FFFFD008).w,d0
00009416 D041                       		add.w	d1,d0
00009418 B068 0008                  		cmp.w	8(a0),d0
0000941C 6500                       		bcs.s	Obj2A_Animate
0000941E 9041                       		sub.w	d1,d0
00009420 9041                       		sub.w	d1,d0
00009422 B068 0008                  		cmp.w	8(a0),d0
00009426 6400                       		bcc.s	Obj2A_Animate
00009428 D041                       		add.w	d1,d0
0000942A B068 0008                  		cmp.w	8(a0),d0
0000942E 6400                       		bcc.s	loc_899A
00009430 0828 0000 0022             		btst	#0,$22(a0)
00009436 6600                       		bne.s	Obj2A_Animate
00009438 6000                       		bra.s	Obj2A_Open
0000943A                            ; ===========================================================================
0000943A                            
0000943A                            loc_899A:				; XREF: Obj2A_OpenShut
0000943A 0828 0000 0022             		btst	#0,$22(a0)
00009440 6700                       		beq.s	Obj2A_Animate
00009442                            
00009442                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00009442 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00009448                            
00009448                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00009448 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
0000944E 6100 0000                  		bsr.w	AnimateSprite
00009452 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00009456 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00009458 323C 0011                  		move.w	#$11,d1
0000945C 343C 0020                  		move.w	#$20,d2
00009460 3602                       		move.w	d2,d3
00009462 5243                       		addq.w	#1,d3
00009464 3828 0008                  		move.w	8(a0),d4
00009468 6100 0000                  		bsr.w	SolidObject
0000946C                            
0000946C                            Obj2A_MarkAsUsed:
0000946C 6000 0000                  		bra.w	MarkObjGone
00009470                            ; ===========================================================================
00009470                            Ani_obj2A:
00009470                            	include "_anim\obj2A.asm"
00009470                            ; ---------------------------------------------------------------------------
00009470                            ; Animation script - doors (SBZ)
00009470                            ; ---------------------------------------------------------------------------
00009470 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00009472 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00009474 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00009480 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
0000948C                            		even
0000948C                            		even
0000948C                            
0000948C                            ; ---------------------------------------------------------------------------
0000948C                            ; Sprite mappings - doors (SBZ)
0000948C                            ; ---------------------------------------------------------------------------
0000948C                            Map_obj2A:
0000948C                            	include "_maps\obj2A.asm"
0000948C                            ; ---------------------------------------------------------------------------
0000948C                            ; Sprite mappings - doors (SBZ)
0000948C                            ; ---------------------------------------------------------------------------
0000948C 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00009490 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00009494 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00009498 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
0000949C 0000                       		dc.w byte_8A56-Map_obj2A
0000949E 02                         byte_89FE:	dc.b 2
0000949F E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
000094A4 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
000094A9 02                         byte_8A09:	dc.b 2
000094AA DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
000094AF 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
000094B4 02                         byte_8A14:	dc.b 2
000094B5 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
000094BA 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
000094BF 02                         byte_8A1F:	dc.b 2
000094C0 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
000094C5 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
000094CA 02                         byte_8A2A:	dc.b 2
000094CB D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
000094D0 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
000094D5 02                         byte_8A35:	dc.b 2
000094D6 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
000094DB 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
000094E0 02                         byte_8A40:	dc.b 2
000094E1 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
000094E6 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
000094EB 02                         byte_8A4B:	dc.b 2
000094EC C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
000094F1 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
000094F6 02                         byte_8A56:	dc.b 2
000094F7 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
000094FC 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00009502 00                         		even
00009502 00                         		even
00009502                            
00009502                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009502                            
00009502                            
00009502                            Obj44_SolidWall:			; XREF: Obj44_Solid
00009502 6100 0000                  		bsr.w	Obj44_SolidWall2
00009506 6700                       		beq.s	loc_8AA8
00009508 6B00 0000                  		bmi.w	loc_8AC4
0000950C 4A40                       		tst.w	d0
0000950E 6700 0000                  		beq.w	loc_8A92
00009512 6B00                       		bmi.s	loc_8A7C
00009514 4A69 0010                  		tst.w	$10(a1)
00009518 6B00                       		bmi.s	loc_8A92
0000951A 6000                       		bra.s	loc_8A82
0000951C                            ; ===========================================================================
0000951C                            
0000951C                            loc_8A7C:
0000951C 4A69 0010                  		tst.w	$10(a1)
00009520 6A00                       		bpl.s	loc_8A92
00009522                            
00009522                            loc_8A82:
00009522 9169 0008                  		sub.w	d0,8(a1)
00009526 337C 0000 0014             		move.w	#0,$14(a1)
0000952C 337C 0000 0010             		move.w	#0,$10(a1)
00009532                            
00009532                            loc_8A92:
00009532 0829 0001 0022             		btst	#1,$22(a1)
00009538 6600                       		bne.s	loc_8AB6
0000953A 08E9 0005 0022             		bset	#5,$22(a1)
00009540 08E8 0005 0022             		bset	#5,$22(a0)
00009546 4E75                       		rts	
00009548                            ; ===========================================================================
00009548                            
00009548                            loc_8AA8:
00009548 0828 0005 0022             		btst	#5,$22(a0)
0000954E 6700                       		beq.s	locret_8AC2
00009550 337C 0001 001C             		move.w	#1,$1C(a1)
00009556                            
00009556                            loc_8AB6:
00009556 08A8 0005 0022             		bclr	#5,$22(a0)
0000955C 08A9 0005 0022             		bclr	#5,$22(a1)
00009562                            
00009562                            locret_8AC2:
00009562 4E75                       		rts	
00009564                            ; ===========================================================================
00009564                            
00009564                            loc_8AC4:
00009564 4A69 0012                  		tst.w	$12(a1)
00009568 6A00                       		bpl.s	locret_8AD8
0000956A 4A43                       		tst.w	d3
0000956C 6A00                       		bpl.s	locret_8AD8
0000956E 9769 000C                  		sub.w	d3,$C(a1)
00009572 337C 0000 0012             		move.w	#0,$12(a1)
00009578                            
00009578                            locret_8AD8:
00009578 4E75                       		rts	
0000957A                            ; End of function Obj44_SolidWall
0000957A                            
0000957A                            
0000957A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000957A                            
0000957A                            
0000957A                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
0000957A 43F8 D000                  		lea	($FFFFD000).w,a1
0000957E 3029 0008                  		move.w	8(a1),d0
00009582 9068 0008                  		sub.w	8(a0),d0
00009586 D041                       		add.w	d1,d0
00009588 6B00                       		bmi.s	loc_8B48
0000958A 3601                       		move.w	d1,d3
0000958C D643                       		add.w	d3,d3
0000958E B043                       		cmp.w	d3,d0
00009590 6200                       		bhi.s	loc_8B48
00009592 1629 0016                  		move.b	$16(a1),d3
00009596 4883                       		ext.w	d3
00009598 D443                       		add.w	d3,d2
0000959A 3629 000C                  		move.w	$C(a1),d3
0000959E 9668 000C                  		sub.w	$C(a0),d3
000095A2 D642                       		add.w	d2,d3
000095A4 6B00                       		bmi.s	loc_8B48
000095A6 3802                       		move.w	d2,d4
000095A8 D844                       		add.w	d4,d4
000095AA B644                       		cmp.w	d4,d3
000095AC 6400                       		bcc.s	loc_8B48
000095AE 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000095B2 6B00                       		bmi.s	loc_8B48
000095B4 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000095BA 6400                       		bcc.s	loc_8B48
000095BC 4A78 FE08                  		tst.w	($FFFFFE08).w
000095C0 6600                       		bne.s	loc_8B48
000095C2 3A00                       		move.w	d0,d5
000095C4 B240                       		cmp.w	d0,d1
000095C6 6400                       		bcc.s	loc_8B30
000095C8 D241                       		add.w	d1,d1
000095CA 9041                       		sub.w	d1,d0
000095CC 3A00                       		move.w	d0,d5
000095CE 4445                       		neg.w	d5
000095D0                            
000095D0                            loc_8B30:
000095D0 3203                       		move.w	d3,d1
000095D2 B443                       		cmp.w	d3,d2
000095D4 6400                       		bcc.s	loc_8B3C
000095D6 9644                       		sub.w	d4,d3
000095D8 3203                       		move.w	d3,d1
000095DA 4441                       		neg.w	d1
000095DC                            
000095DC                            loc_8B3C:
000095DC BA41                       		cmp.w	d1,d5
000095DE 6200                       		bhi.s	loc_8B44
000095E0 7801                       		moveq	#1,d4
000095E2 4E75                       		rts	
000095E4                            ; ===========================================================================
000095E4                            
000095E4                            loc_8B44:
000095E4 78FF                       		moveq	#-1,d4
000095E6 4E75                       		rts	
000095E8                            ; ===========================================================================
000095E8                            
000095E8                            loc_8B48:
000095E8 7800                       		moveq	#0,d4
000095EA 4E75                       		rts	
000095EC                            ; End of function Obj44_SolidWall2
000095EC                            
000095EC                            ; ===========================================================================
000095EC                            ; ---------------------------------------------------------------------------
000095EC                            ; Object 1E - Ball Hog enemy (SBZ)
000095EC                            ; ---------------------------------------------------------------------------
000095EC                            
000095EC                            Obj1E:					; XREF: Obj_Index
000095EC 7000                       		moveq	#0,d0
000095EE 1028 0024                  		move.b	$24(a0),d0
000095F2 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
000095F6 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
000095FA                            ; ===========================================================================
000095FA 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
000095FC 0000                       		dc.w Obj1E_Action-Obj1E_Index
000095FE                            ; ===========================================================================
000095FE                            
000095FE                            Obj1E_Main:				; XREF: Obj1E_Index
000095FE 117C 0013 0016             		move.b	#$13,$16(a0)
00009604 117C 0008 0017             		move.b	#8,$17(a0)
0000960A 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009612 317C 2302 0002             		move.w	#$2302,2(a0)
00009618 117C 0004 0001             		move.b	#4,1(a0)
0000961E 117C 0004 0018             		move.b	#4,$18(a0)
00009624 117C 0005 0020             		move.b	#5,$20(a0)
0000962A 117C 000C 0019             		move.b	#$C,$19(a0)
00009630 6100 0000                  		bsr.w	ObjectFall
00009634 4EB9 0000 0000             		jsr	ObjHitFloor
0000963A 4A41                       		tst.w	d1
0000963C 6A00                       		bpl.s	locret_8BAC
0000963E D368 000C                  		add.w	d1,$C(a0)
00009642 317C 0000 0012             		move.w	#0,$12(a0)
00009648 5428 0024                  		addq.b	#2,$24(a0)
0000964C                            
0000964C                            locret_8BAC:
0000964C 4E75                       		rts	
0000964E                            ; ===========================================================================
0000964E                            
0000964E                            Obj1E_Action:				; XREF: Obj1E_Index
0000964E 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00009654 6100 0000                  		bsr.w	AnimateSprite
00009658 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
0000965E 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00009660 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00009664 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00009666 6000                       		bra.s	Obj1E_MarkAsGone
00009668                            ; ===========================================================================
00009668                            
00009668                            Obj1E_SetBall:				; XREF: Obj1E_Action
00009668 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
0000966C                            
0000966C                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
0000966C 6000 0000                  		bra.w	MarkObjGone
00009670                            ; ===========================================================================
00009670                            
00009670                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00009670 117C 0001 0032             		move.b	#1,$32(a0)
00009676 6100 0000                  		bsr.w	SingleObjLoad
0000967A 6600                       		bne.s	loc_8C1A
0000967C 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00009680 3368 0008 0008             		move.w	8(a0),8(a1)
00009686 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000968C 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00009692 337C 0000 0012             		move.w	#0,$12(a1)
00009698 70FC                       		moveq	#-4,d0
0000969A 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
000096A0 6700                       		beq.s	loc_8C0A	; if not, branch
000096A2 4440                       		neg.w	d0
000096A4 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
000096A8                            
000096A8                            loc_8C0A:
000096A8 D169 0008                  		add.w	d0,8(a1)
000096AC 0669 000C 000C             		addi.w	#$C,$C(a1)
000096B2 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
000096B8                            
000096B8                            loc_8C1A:
000096B8 60B2                       		bra.s	Obj1E_MarkAsGone
000096BA                            ; ===========================================================================
000096BA                            ; ---------------------------------------------------------------------------
000096BA                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
000096BA                            ; ---------------------------------------------------------------------------
000096BA                            
000096BA                            Obj20:					; XREF: Obj_Index
000096BA 7000                       		moveq	#0,d0
000096BC 1028 0024                  		move.b	$24(a0),d0
000096C0 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
000096C4 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
000096C8                            ; ===========================================================================
000096C8 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
000096CA 0000                       		dc.w Obj20_Bounce-Obj20_Index
000096CC                            ; ===========================================================================
000096CC                            
000096CC                            Obj20_Main:				; XREF: Obj20_Index
000096CC 5428 0024                  		addq.b	#2,$24(a0)
000096D0 117C 0007 0016             		move.b	#7,$16(a0)
000096D6 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
000096DE 317C 2302 0002             		move.w	#$2302,2(a0)
000096E4 117C 0004 0001             		move.b	#4,1(a0)
000096EA 117C 0003 0018             		move.b	#3,$18(a0)
000096F0 117C 0087 0020             		move.b	#$87,$20(a0)
000096F6 117C 0008 0019             		move.b	#8,$19(a0)
000096FC 7000                       		moveq	#0,d0
000096FE 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009702 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
00009706 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
0000970A 117C 0004 001A             		move.b	#4,$1A(a0)
00009710                            
00009710                            Obj20_Bounce:				; XREF: Obj20_Index
00009710 4EB9 0000 0000             		jsr	ObjectFall
00009716 4A68 0012                  		tst.w	$12(a0)
0000971A 6B00                       		bmi.s	Obj20_ChkExplode
0000971C 4EB9 0000 0000             		jsr	ObjHitFloor
00009722 4A41                       		tst.w	d1
00009724 6A00                       		bpl.s	Obj20_ChkExplode
00009726 D368 000C                  		add.w	d1,$C(a0)
0000972A 317C FD00 0012             		move.w	#-$300,$12(a0)
00009730 4A03                       		tst.b	d3
00009732 6700                       		beq.s	Obj20_ChkExplode
00009734 6B00                       		bmi.s	loc_8CA4
00009736 4A68 0010                  		tst.w	$10(a0)
0000973A 6A00                       		bpl.s	Obj20_ChkExplode
0000973C 4468 0010                  		neg.w	$10(a0)
00009740 6000                       		bra.s	Obj20_ChkExplode
00009742                            ; ===========================================================================
00009742                            
00009742                            loc_8CA4:				; XREF: Obj20_Bounce
00009742 4A68 0010                  		tst.w	$10(a0)
00009746 6B00                       		bmi.s	Obj20_ChkExplode
00009748 4468 0010                  		neg.w	$10(a0)
0000974C                            
0000974C                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
0000974C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
00009750 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
00009752 10BC 0024                  		move.b	#$24,0(a0)
00009756 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
0000975A 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00009760 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00009764                            ; ===========================================================================
00009764                            
00009764                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00009764 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009768 6A00                       		bpl.s	Obj20_Display
0000976A 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00009770 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00009776                            
00009776                            Obj20_Display:
00009776 6100 0000                  		bsr.w	DisplaySprite
0000977A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000977E 0640 00E0                  		addi.w	#$E0,d0
00009782 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
00009786 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000978A 4E75                       		rts	
0000978C                            ; ===========================================================================
0000978C                            ; ---------------------------------------------------------------------------
0000978C                            ; Object 24 - explosion	from a destroyed monitor
0000978C                            ; ---------------------------------------------------------------------------
0000978C                            
0000978C                            Obj24:					; XREF: Obj_Index
0000978C 7000                       		moveq	#0,d0
0000978E 1028 0024                  		move.b	$24(a0),d0
00009792 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
00009796 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
0000979A                            ; ===========================================================================
0000979A 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
0000979C 0000                       		dc.w Obj24_Animate-Obj24_Index
0000979E                            ; ===========================================================================
0000979E                            
0000979E                            Obj24_Main:				; XREF: Obj24_Index
0000979E 5428 0024                  		addq.b	#2,$24(a0)
000097A2 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
000097AA 317C 041C 0002             		move.w	#$41C,2(a0)
000097B0 117C 0004 0001             		move.b	#4,1(a0)
000097B6 117C 0001 0018             		move.b	#1,$18(a0)
000097BC 117C 0000 0020             		move.b	#0,$20(a0)
000097C2 117C 000C 0019             		move.b	#$C,$19(a0)
000097C8 117C 0009 001E             		move.b	#9,$1E(a0)
000097CE 117C 0000 001A             		move.b	#0,$1A(a0)
000097D4 303C 00A5                  		move.w	#$A5,d0
000097D8 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play explosion sound
000097DE                            
000097DE                            Obj24_Animate:				; XREF: Obj24_Index
000097DE 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000097E2 6A00                       		bpl.s	Obj24_Display
000097E4 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
000097EA 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
000097EE 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
000097F4 6700 0000                  		beq.w	DeleteObject	; if yes, branch
000097F8                            
000097F8                            Obj24_Display:
000097F8 6000 0000                  		bra.w	DisplaySprite
000097FC                            ; ===========================================================================
000097FC                            ; ---------------------------------------------------------------------------
000097FC                            ; Object 27 - explosion	from a destroyed enemy
000097FC                            ; ---------------------------------------------------------------------------
000097FC                            
000097FC                            Obj27:					; XREF: Obj_Index
000097FC 7000                       		moveq	#0,d0
000097FE 1028 0024                  		move.b	$24(a0),d0
00009802 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
00009806 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
0000980A                            ; ===========================================================================
0000980A 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
0000980C 0000                       		dc.w Obj27_Main-Obj27_Index
0000980E 0000                       		dc.w Obj27_Animate-Obj27_Index
00009810                            ; ===========================================================================
00009810                            
00009810                            Obj27_LoadAnimal:			; XREF: Obj27_Index
00009810 5428 0024                  		addq.b	#2,$24(a0)
00009814 6100 0000                  		bsr.w	SingleObjLoad
00009818 6600                       		bne.s	Obj27_Main
0000981A 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0000981E 3368 0008 0008             		move.w	8(a0),8(a1)
00009824 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000982A 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
00009830                            
00009830                            Obj27_Main:				; XREF: Obj27_Index
00009830 5428 0024                  		addq.b	#2,$24(a0)
00009834 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
0000983C 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009842 117C 0004 0001             		move.b	#4,1(a0)
00009848 117C 0001 0018             		move.b	#1,$18(a0)
0000984E 117C 0000 0020             		move.b	#0,$20(a0)
00009854 117C 000C 0019             		move.b	#$C,$19(a0)
0000985A 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009860 117C 0000 001A             		move.b	#0,$1A(a0)
00009866 303C 00C1                  		move.w	#$C1,d0
0000986A 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00009870                            
00009870                            Obj27_Animate:				; XREF: Obj27_Index
00009870 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009874 6A00                       		bpl.s	Obj27_Display
00009876 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000987C 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009880 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
00009886 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000988A                            
0000988A                            Obj27_Display:
0000988A 6000 0000                  		bra.w	DisplaySprite
0000988E                            ; ===========================================================================
0000988E                            ; ---------------------------------------------------------------------------
0000988E                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000988E                            ; ---------------------------------------------------------------------------
0000988E                            
0000988E                            Obj3F:					; XREF: Obj_Index
0000988E 7000                       		moveq	#0,d0
00009890 1028 0024                  		move.b	$24(a0),d0
00009894 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
00009898 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
0000989C                            ; ===========================================================================
0000989C 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
0000989E FFD4                       		dc.w Obj27_Animate-Obj3F_Index
000098A0                            ; ===========================================================================
000098A0                            
000098A0                            Obj3F_Main:				; XREF: Obj3F_Index
000098A0 5428 0024                  		addq.b	#2,$24(a0)
000098A4 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
000098AC 317C 05A0 0002             		move.w	#$5A0,2(a0)
000098B2 117C 0004 0001             		move.b	#4,1(a0)
000098B8 117C 0001 0018             		move.b	#1,$18(a0)
000098BE 117C 0000 0020             		move.b	#0,$20(a0)
000098C4 117C 000C 0019             		move.b	#$C,$19(a0)
000098CA 117C 0007 001E             		move.b	#7,$1E(a0)
000098D0 117C 0000 001A             		move.b	#0,$1A(a0)
000098D6 303C 00C4                  		move.w	#$C4,d0
000098DA 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
000098E0                            ; ===========================================================================
000098E0                            Ani_obj1E:
000098E0                            	include "_anim\obj1E.asm"
000098E0                            ; ---------------------------------------------------------------------------
000098E0                            ; Animation script - doors (SBZ)
000098E0                            ; ---------------------------------------------------------------------------
000098E0 0000                       		dc.w byte_8E4A-Ani_obj1E
000098E2 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
000098FA 00                         		even
000098FA 00                         		even
000098FA                            
000098FA                            ; ---------------------------------------------------------------------------
000098FA                            ; Sprite mappings - Ball Hog enemy (SBZ)
000098FA                            ; ---------------------------------------------------------------------------
000098FA                            Map_obj1E:
000098FA                            	include "_maps\obj1E.asm"
000098FA                            ; ---------------------------------------------------------------------------
000098FA                            ; Sprite mappings - Ball Hog enemy (SBZ)
000098FA                            ; ---------------------------------------------------------------------------
000098FA 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
000098FE 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
00009902 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
00009906 02                         byte_8E6E:	dc.b 2
00009907 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000990C FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
00009911 02                         byte_8E79:	dc.b 2
00009912 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00009917 FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
0000991C 02                         byte_8E84:	dc.b 2
0000991D F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
00009922 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
00009927 02                         byte_8E8F:	dc.b 2
00009928 E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
0000992D F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
00009932 01                         byte_8E9A:	dc.b 1
00009933 F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
00009938 01                         byte_8EA0:	dc.b 1
00009939 F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
0000993E                            		even
0000993E                            		even
0000993E                            
0000993E                            ; ---------------------------------------------------------------------------
0000993E                            ; Sprite mappings - explosion
0000993E                            ; ---------------------------------------------------------------------------
0000993E                            Map_obj24:
0000993E                            	include "_maps\obj24.asm"
0000993E                            ; ---------------------------------------------------------------------------
0000993E                            ; Sprite mappings - explosion
0000993E                            ; ---------------------------------------------------------------------------
0000993E 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00009942 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
00009946 01                         byte_8EAE:	dc.b 1
00009947 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000994C 01                         byte_8EB4:	dc.b 1
0000994D F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00009952 01                         byte_8EBA:	dc.b 1
00009953 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00009958 01                         byte_8EC0:	dc.b 1
00009959 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000995E                            		even
0000995E                            		even
0000995E                            
0000995E                            ; ---------------------------------------------------------------------------
0000995E                            ; Sprite mappings - explosion
0000995E                            ; ---------------------------------------------------------------------------
0000995E 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
00009962 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
00009966 0000                       		dc.w byte_8EF7-Map_obj27
00009968 01                         byte_8ED0:	dc.b 1
00009969 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000996E 01                         byte_8ED6:	dc.b 1
0000996F F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
00009974 01                         byte_8EDC:	dc.b 1
00009975 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000997A 04                         byte_8EE2:	dc.b 4
0000997B EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00009980 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
00009985 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000998A FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000998F 04                         byte_8EF7:	dc.b 4
00009990 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
00009995 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000999A 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000999F FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
000099A4                            		even
000099A4                            ; ---------------------------------------------------------------------------
000099A4                            ; Sprite mappings - explosion from when	a boss is destroyed
000099A4                            ; ---------------------------------------------------------------------------
000099A4 FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
000099A6 0000                       		dc.w byte_8F16-Map_obj3F
000099A8 0000                       		dc.w byte_8F1C-Map_obj3F
000099AA FFD6                       		dc.w byte_8EE2-Map_obj3F
000099AC FFEB                       		dc.w byte_8EF7-Map_obj3F
000099AE 01                         byte_8F16:	dc.b 1
000099AF F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
000099B4 01                         byte_8F1C:	dc.b 1
000099B5 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
000099BA                            		even
000099BA                            ; ===========================================================================
000099BA                            ; ---------------------------------------------------------------------------
000099BA                            ; Object 28 - animals
000099BA                            ; ---------------------------------------------------------------------------
000099BA                            
000099BA                            Obj28:					; XREF: Obj_Index
000099BA 7000                       		moveq	#0,d0
000099BC 1028 0024                  		move.b	$24(a0),d0
000099C0 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
000099C4 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
000099C8                            ; ===========================================================================
000099C8 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
000099CC 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000099D0 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
000099D4 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000099D8 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
000099DC 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
000099E0 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
000099E4 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000099E8 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000099EC 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
000099F0 0000                       		dc.w loc_92D6-Obj28_Index
000099F2                            
000099F2 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
000099FE                            
000099FE FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
00009A02 0000 0000                  		dc.l Map_obj28
00009A06 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00009A0A 0000 0000                  		dc.l Map_obj28a		; mappings address
00009A0E FE80 FD00                  		dc.w $FE80, $FD00
00009A12 0000 0000                  		dc.l Map_obj28
00009A16 FEC0 FE80                  		dc.w $FEC0, $FE80
00009A1A 0000 0000                  		dc.l Map_obj28a
00009A1E FE40 FD00                  		dc.w $FE40, $FD00
00009A22 0000 0000                  		dc.l Map_obj28b
00009A26 FD00 FC00                  		dc.w $FD00, $FC00
00009A2A 0000 0000                  		dc.l Map_obj28a
00009A2E FD80 FC80                  		dc.w $FD80, $FC80
00009A32 0000 0000                  		dc.l Map_obj28b
00009A36                            
00009A36 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
00009A46 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
00009A56 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
00009A62                            
00009A62 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
00009A76 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00009A8A 0000 0000                  		dc.l Map_obj28b
00009A8E                            
00009A8E 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
00009AA0 0565 05B3                  		dc.w $565, $5B3
00009AA4                            ; ===========================================================================
00009AA4                            
00009AA4                            Obj28_Ending:				; XREF: Obj28_Index
00009AA4 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
00009AA8 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
00009AAC 7000                       		moveq	#0,d0
00009AAE 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009AB2 D040                       		add.w	d0,d0		; multiply d0 by 2
00009AB4 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
00009AB8 0440 0014                  		subi.w	#$14,d0
00009ABC 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
00009AC2 D040                       		add.w	d0,d0
00009AC4 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
00009ACA 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
00009ACE 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
00009AD4 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
00009ADA 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
00009AE0 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
00009AE6 117C 000C 0016             		move.b	#$C,$16(a0)
00009AEC 117C 0004 0001             		move.b	#4,1(a0)
00009AF2 08E8 0000 0001             		bset	#0,1(a0)
00009AF8 117C 0006 0018             		move.b	#6,$18(a0)
00009AFE 117C 0008 0019             		move.b	#8,$19(a0)
00009B04 117C 0007 001E             		move.b	#7,$1E(a0)
00009B0A 6000 0000                  		bra.w	DisplaySprite
00009B0E                            ; ===========================================================================
00009B0E                            
00009B0E                            Obj28_FromEnemy:			; XREF: Obj28_Ending
00009B0E 5428 0024                  		addq.b	#2,$24(a0)
00009B12 6100 989A                  		bsr.w	RandomNumber
00009B16 0240 0001                  		andi.w	#1,d0
00009B1A 7200                       		moveq	#0,d1
00009B1C 1238 FE10                  		move.b	($FFFFFE10).w,d1
00009B20 D241                       		add.w	d1,d1
00009B22 D240                       		add.w	d0,d1
00009B24 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
00009B28 1031 1000                  		move.b	(a1,d1.w),d0
00009B2C 1140 0030                  		move.b	d0,$30(a0)
00009B30 E748                       		lsl.w	#3,d0
00009B32 43FA FECA                  		lea	Obj28_Variables(pc),a1
00009B36 D2C0                       		adda.w	d0,a1
00009B38 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
00009B3C 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
00009B40 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
00009B44 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
00009B4A 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
00009B50 6700                       		beq.s	loc_90C0	; if yes, branch
00009B52 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
00009B58                            
00009B58                            loc_90C0:
00009B58 117C 000C 0016             		move.b	#$C,$16(a0)
00009B5E 117C 0004 0001             		move.b	#4,1(a0)
00009B64 08E8 0000 0001             		bset	#0,1(a0)
00009B6A 117C 0006 0018             		move.b	#6,$18(a0)
00009B70 117C 0008 0019             		move.b	#8,$19(a0)
00009B76 117C 0007 001E             		move.b	#7,$1E(a0)
00009B7C 117C 0002 001A             		move.b	#2,$1A(a0)
00009B82 317C FC00 0012             		move.w	#-$400,$12(a0)
00009B88 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009B8C 6600                       		bne.s	loc_911C
00009B8E 6100 0000                  		bsr.w	SingleObjLoad
00009B92 6600                       		bne.s	Obj28_Display
00009B94 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00009B98 3368 0008 0008             		move.w	8(a0),8(a1)
00009B9E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009BA4 3028 003E                  		move.w	$3E(a0),d0
00009BA8 E248                       		lsr.w	#1,d0
00009BAA 1340 001A                  		move.b	d0,$1A(a1)
00009BAE                            
00009BAE                            Obj28_Display:
00009BAE 6000 0000                  		bra.w	DisplaySprite
00009BB2                            ; ===========================================================================
00009BB2                            
00009BB2                            loc_911C:
00009BB2 117C 0012 0024             		move.b	#$12,$24(a0)
00009BB8 4268 0010                  		clr.w	$10(a0)
00009BBC 6000 0000                  		bra.w	DisplaySprite
00009BC0                            ; ===========================================================================
00009BC0                            
00009BC0                            loc_912A:				; XREF: Obj28_Index
00009BC0 4A28 0001                  		tst.b	1(a0)
00009BC4 6A00 0000                  		bpl.w	DeleteObject
00009BC8 6100 0000                  		bsr.w	ObjectFall
00009BCC 4A68 0012                  		tst.w	$12(a0)
00009BD0 6B00                       		bmi.s	loc_9180
00009BD2 4EB9 0000 0000             		jsr	ObjHitFloor
00009BD8 4A41                       		tst.w	d1
00009BDA 6A00                       		bpl.s	loc_9180
00009BDC D368 000C                  		add.w	d1,$C(a0)
00009BE0 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009BE6 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009BEC 117C 0001 001A             		move.b	#1,$1A(a0)
00009BF2 1028 0030                  		move.b	$30(a0),d0
00009BF6 D000                       		add.b	d0,d0
00009BF8 5800                       		addq.b	#4,d0
00009BFA 1140 0024                  		move.b	d0,$24(a0)
00009BFE 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009C02 6700                       		beq.s	loc_9180
00009C04 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009C0A 6700                       		beq.s	loc_9180
00009C0C 4468 0010                  		neg.w	$10(a0)
00009C10 0868 0000 0001             		bchg	#0,1(a0)
00009C16                            
00009C16                            loc_9180:
00009C16 6000 0000                  		bra.w	DisplaySprite
00009C1A                            ; ===========================================================================
00009C1A                            
00009C1A                            loc_9184:				; XREF: Obj28_Index
00009C1A 6100 0000                  		bsr.w	ObjectFall
00009C1E 117C 0001 001A             		move.b	#1,$1A(a0)
00009C24 4A68 0012                  		tst.w	$12(a0)
00009C28 6B00                       		bmi.s	loc_91AE
00009C2A 117C 0000 001A             		move.b	#0,$1A(a0)
00009C30 4EB9 0000 0000             		jsr	ObjHitFloor
00009C36 4A41                       		tst.w	d1
00009C38 6A00                       		bpl.s	loc_91AE
00009C3A D368 000C                  		add.w	d1,$C(a0)
00009C3E 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009C44                            
00009C44                            loc_91AE:
00009C44 4A28 0028                  		tst.b	$28(a0)
00009C48 6600                       		bne.s	loc_9224
00009C4A 4A28 0001                  		tst.b	1(a0)
00009C4E 6A00 0000                  		bpl.w	DeleteObject
00009C52 6000 0000                  		bra.w	DisplaySprite
00009C56                            ; ===========================================================================
00009C56                            
00009C56                            loc_91C0:				; XREF: Obj28_Index
00009C56 6100 0000                  		bsr.w	SpeedToPos
00009C5A 0668 0018 0012             		addi.w	#$18,$12(a0)
00009C60 4A68 0012                  		tst.w	$12(a0)
00009C64 6B00                       		bmi.s	loc_91FC
00009C66 4EB9 0000 0000             		jsr	ObjHitFloor
00009C6C 4A41                       		tst.w	d1
00009C6E 6A00                       		bpl.s	loc_91FC
00009C70 D368 000C                  		add.w	d1,$C(a0)
00009C74 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009C7A 4A28 0028                  		tst.b	$28(a0)
00009C7E 6700                       		beq.s	loc_91FC
00009C80 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
00009C86 6700                       		beq.s	loc_91FC
00009C88 4468 0010                  		neg.w	$10(a0)
00009C8C 0868 0000 0001             		bchg	#0,1(a0)
00009C92                            
00009C92                            loc_91FC:
00009C92 5328 001E                  		subq.b	#1,$1E(a0)
00009C96 6A00                       		bpl.s	loc_9212
00009C98 117C 0001 001E             		move.b	#1,$1E(a0)
00009C9E 5228 001A                  		addq.b	#1,$1A(a0)
00009CA2 0228 0001 001A             		andi.b	#1,$1A(a0)
00009CA8                            
00009CA8                            loc_9212:
00009CA8 4A28 0028                  		tst.b	$28(a0)
00009CAC 6600                       		bne.s	loc_9224
00009CAE 4A28 0001                  		tst.b	1(a0)
00009CB2 6A00 0000                  		bpl.w	DeleteObject
00009CB6 6000 0000                  		bra.w	DisplaySprite
00009CBA                            ; ===========================================================================
00009CBA                            
00009CBA                            loc_9224:				; XREF: Obj28_Index
00009CBA 3028 0008                  		move.w	8(a0),d0
00009CBE 9078 D008                  		sub.w	($FFFFD008).w,d0
00009CC2 6500                       		bcs.s	loc_923C
00009CC4 0440 0180                  		subi.w	#$180,d0
00009CC8 6A00                       		bpl.s	loc_923C
00009CCA 4A28 0001                  		tst.b	1(a0)
00009CCE 6A00 0000                  		bpl.w	DeleteObject
00009CD2                            
00009CD2                            loc_923C:
00009CD2 6000 0000                  		bra.w	DisplaySprite
00009CD6                            ; ===========================================================================
00009CD6                            
00009CD6                            loc_9240:				; XREF: Obj28_Index
00009CD6 4A28 0001                  		tst.b	1(a0)
00009CDA 6A00 0000                  		bpl.w	DeleteObject
00009CDE 5368 0036                  		subq.w	#1,$36(a0)
00009CE2 6600 0000                  		bne.w	loc_925C
00009CE6 117C 0002 0024             		move.b	#2,$24(a0)
00009CEC 117C 0003 0018             		move.b	#3,$18(a0)
00009CF2                            
00009CF2                            loc_925C:
00009CF2 6000 0000                  		bra.w	DisplaySprite
00009CF6                            ; ===========================================================================
00009CF6                            
00009CF6                            loc_9260:				; XREF: Obj28_Index
00009CF6 6100 0000                  		bsr.w	sub_9404
00009CFA 6400                       		bcc.s	loc_927C
00009CFC 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009D02 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009D08 117C 000E 0024             		move.b	#$E,$24(a0)
00009D0E 6000 FF46                  		bra.w	loc_91C0
00009D12                            ; ===========================================================================
00009D12                            
00009D12                            loc_927C:
00009D12 6000 FFA6                  		bra.w	loc_9224
00009D16                            ; ===========================================================================
00009D16                            
00009D16                            loc_9280:				; XREF: Obj28_Index
00009D16 6100 0000                  		bsr.w	sub_9404
00009D1A 6A00                       		bpl.s	loc_92B6
00009D1C 4268 0010                  		clr.w	$10(a0)
00009D20 4268 0032                  		clr.w	$32(a0)
00009D24 6100 0000                  		bsr.w	SpeedToPos
00009D28 0668 0018 0012             		addi.w	#$18,$12(a0)
00009D2E 6100 0000                  		bsr.w	loc_93C4
00009D32 6100 0000                  		bsr.w	loc_93EC
00009D36 5328 001E                  		subq.b	#1,$1E(a0)
00009D3A 6A00                       		bpl.s	loc_92B6
00009D3C 117C 0001 001E             		move.b	#1,$1E(a0)
00009D42 5228 001A                  		addq.b	#1,$1A(a0)
00009D46 0228 0001 001A             		andi.b	#1,$1A(a0)
00009D4C                            
00009D4C                            loc_92B6:
00009D4C 6000 FF6C                  		bra.w	loc_9224
00009D50                            ; ===========================================================================
00009D50                            
00009D50                            loc_92BA:				; XREF: Obj28_Index
00009D50 6100 0000                  		bsr.w	sub_9404
00009D54 6A00                       		bpl.s	loc_9310
00009D56 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009D5C 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009D62 117C 0004 0024             		move.b	#4,$24(a0)
00009D68 6000 FEB0                  		bra.w	loc_9184
00009D6C                            ; ===========================================================================
00009D6C                            
00009D6C                            loc_92D6:				; XREF: Obj28_Index
00009D6C 6100 0000                  		bsr.w	ObjectFall
00009D70 117C 0001 001A             		move.b	#1,$1A(a0)
00009D76 4A68 0012                  		tst.w	$12(a0)
00009D7A 6B00                       		bmi.s	loc_9310
00009D7C 117C 0000 001A             		move.b	#0,$1A(a0)
00009D82 4EB9 0000 0000             		jsr	ObjHitFloor
00009D88 4A41                       		tst.w	d1
00009D8A 6A00                       		bpl.s	loc_9310
00009D8C 4628 0029                  		not.b	$29(a0)
00009D90 6600                       		bne.s	loc_9306
00009D92 4468 0010                  		neg.w	$10(a0)
00009D96 0868 0000 0001             		bchg	#0,1(a0)
00009D9C                            
00009D9C                            loc_9306:
00009D9C D368 000C                  		add.w	d1,$C(a0)
00009DA0 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009DA6                            
00009DA6                            loc_9310:
00009DA6 6000 FF12                  		bra.w	loc_9224
00009DAA                            ; ===========================================================================
00009DAA                            
00009DAA                            loc_9314:				; XREF: Obj28_Index
00009DAA 6100 0000                  		bsr.w	sub_9404
00009DAE 6A00                       		bpl.s	loc_932E
00009DB0 4268 0010                  		clr.w	$10(a0)
00009DB4 4268 0032                  		clr.w	$32(a0)
00009DB8 6100 0000                  		bsr.w	ObjectFall
00009DBC 6100 0000                  		bsr.w	loc_93C4
00009DC0 6100 0000                  		bsr.w	loc_93EC
00009DC4                            
00009DC4                            loc_932E:
00009DC4 6000 FEF4                  		bra.w	loc_9224
00009DC8                            ; ===========================================================================
00009DC8                            
00009DC8                            loc_9332:				; XREF: Obj28_Index
00009DC8 6100 0000                  		bsr.w	sub_9404
00009DCC 6A00                       		bpl.s	loc_936C
00009DCE 6100 0000                  		bsr.w	ObjectFall
00009DD2 117C 0001 001A             		move.b	#1,$1A(a0)
00009DD8 4A68 0012                  		tst.w	$12(a0)
00009DDC 6B00                       		bmi.s	loc_936C
00009DDE 117C 0000 001A             		move.b	#0,$1A(a0)
00009DE4 4EB9 0000 0000             		jsr	ObjHitFloor
00009DEA 4A41                       		tst.w	d1
00009DEC 6A00                       		bpl.s	loc_936C
00009DEE 4468 0010                  		neg.w	$10(a0)
00009DF2 0868 0000 0001             		bchg	#0,1(a0)
00009DF8 D368 000C                  		add.w	d1,$C(a0)
00009DFC 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009E02                            
00009E02                            loc_936C:
00009E02 6000 FEB6                  		bra.w	loc_9224
00009E06                            ; ===========================================================================
00009E06                            
00009E06                            loc_9370:				; XREF: Obj28_Index
00009E06 6100 0000                  		bsr.w	sub_9404
00009E0A 6A00                       		bpl.s	loc_93C0
00009E0C 6100 0000                  		bsr.w	SpeedToPos
00009E10 0668 0018 0012             		addi.w	#$18,$12(a0)
00009E16 4A68 0012                  		tst.w	$12(a0)
00009E1A 6B00                       		bmi.s	loc_93AA
00009E1C 4EB9 0000 0000             		jsr	ObjHitFloor
00009E22 4A41                       		tst.w	d1
00009E24 6A00                       		bpl.s	loc_93AA
00009E26 4628 0029                  		not.b	$29(a0)
00009E2A 6600                       		bne.s	loc_93A0
00009E2C 4468 0010                  		neg.w	$10(a0)
00009E30 0868 0000 0001             		bchg	#0,1(a0)
00009E36                            
00009E36                            loc_93A0:
00009E36 D368 000C                  		add.w	d1,$C(a0)
00009E3A 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009E40                            
00009E40                            loc_93AA:
00009E40 5328 001E                  		subq.b	#1,$1E(a0)
00009E44 6A00                       		bpl.s	loc_93C0
00009E46 117C 0001 001E             		move.b	#1,$1E(a0)
00009E4C 5228 001A                  		addq.b	#1,$1A(a0)
00009E50 0228 0001 001A             		andi.b	#1,$1A(a0)
00009E56                            
00009E56                            loc_93C0:
00009E56 6000 FE62                  		bra.w	loc_9224
00009E5A                            ; ===========================================================================
00009E5A                            
00009E5A                            loc_93C4:
00009E5A 117C 0001 001A             		move.b	#1,$1A(a0)
00009E60 4A68 0012                  		tst.w	$12(a0)
00009E64 6B00                       		bmi.s	locret_93EA
00009E66 117C 0000 001A             		move.b	#0,$1A(a0)
00009E6C 4EB9 0000 0000             		jsr	ObjHitFloor
00009E72 4A41                       		tst.w	d1
00009E74 6A00                       		bpl.s	locret_93EA
00009E76 D368 000C                  		add.w	d1,$C(a0)
00009E7A 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009E80                            
00009E80                            locret_93EA:
00009E80 4E75                       		rts	
00009E82                            ; ===========================================================================
00009E82                            
00009E82                            loc_93EC:
00009E82 08E8 0000 0001             		bset	#0,1(a0)
00009E88 3028 0008                  		move.w	8(a0),d0
00009E8C 9078 D008                  		sub.w	($FFFFD008).w,d0
00009E90 6400                       		bcc.s	locret_9402
00009E92 08A8 0000 0001             		bclr	#0,1(a0)
00009E98                            
00009E98                            locret_9402:
00009E98 4E75                       		rts	
00009E9A                            
00009E9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009E9A                            
00009E9A                            
00009E9A                            sub_9404:
00009E9A 3038 D008                  		move.w	($FFFFD008).w,d0
00009E9E 9068 0008                  		sub.w	8(a0),d0
00009EA2 0440 00B8                  		subi.w	#$B8,d0
00009EA6 4E75                       		rts	
00009EA8                            ; End of function sub_9404
00009EA8                            
00009EA8                            ; ===========================================================================
00009EA8                            ; ---------------------------------------------------------------------------
00009EA8                            ; Object 29 - points that appear when you destroy something
00009EA8                            ; ---------------------------------------------------------------------------
00009EA8                            
00009EA8                            Obj29:					; XREF: Obj_Index
00009EA8 7000                       		moveq	#0,d0
00009EAA 1028 0024                  		move.b	$24(a0),d0
00009EAE 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00009EB2 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009EB6 6000 0000                  		bra.w	DisplaySprite
00009EBA                            ; ===========================================================================
00009EBA 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009EBC 0000                       		dc.w Obj29_Slower-Obj29_Index
00009EBE                            ; ===========================================================================
00009EBE                            
00009EBE                            Obj29_Main:				; XREF: Obj29_Index
00009EBE 5428 0024                  		addq.b	#2,$24(a0)
00009EC2 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009ECA 317C 2797 0002             		move.w	#$2797,2(a0)
00009ED0 117C 0004 0001             		move.b	#4,1(a0)
00009ED6 117C 0001 0018             		move.b	#1,$18(a0)
00009EDC 117C 0008 0019             		move.b	#8,$19(a0)
00009EE2 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009EE8                            
00009EE8                            Obj29_Slower:				; XREF: Obj29_Index
00009EE8 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009EEC 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009EF0 6100 0000                  		bsr.w	SpeedToPos
00009EF4 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009EFA 4E75                       		rts	
00009EFC                            ; ===========================================================================
00009EFC                            ; ---------------------------------------------------------------------------
00009EFC                            ; Sprite mappings - animals
00009EFC                            ; ---------------------------------------------------------------------------
00009EFC                            Map_obj28:
00009EFC                            	include "_maps\obj28.asm"
00009EFC                            ; ---------------------------------------------------------------------------
00009EFC                            ; Sprite mappings - animals
00009EFC                            ; ---------------------------------------------------------------------------
00009EFC 0000                       		dc.w byte_9472-Map_obj28
00009EFE 0000                       		dc.w byte_9478-Map_obj28
00009F00 0000                       		dc.w byte_946C-Map_obj28
00009F02 01                         byte_946C:	dc.b 1
00009F03 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009F08 01                         byte_9472:	dc.b 1
00009F09 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009F0E 01                         byte_9478:	dc.b 1
00009F0F F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009F14                            		even
00009F14                            		even
00009F14                            
00009F14                            Map_obj28a:
00009F14                            	include "_maps\obj28a.asm"
00009F14                            ; ---------------------------------------------------------------------------
00009F14                            ; Sprite mappings - animals
00009F14                            ; ---------------------------------------------------------------------------
00009F14 0000                       		dc.w byte_948A-Map_obj28a
00009F16 0000                       		dc.w byte_9490-Map_obj28a
00009F18 0000                       		dc.w byte_9484-Map_obj28a
00009F1A 01                         byte_9484:	dc.b 1
00009F1B F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009F20 01                         byte_948A:	dc.b 1
00009F21 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009F26 01                         byte_9490:	dc.b 1
00009F27 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009F2C                            		even
00009F2C                            		even
00009F2C                            
00009F2C                            Map_obj28b:
00009F2C                            	include "_maps\obj28b.asm"
00009F2C                            ; ---------------------------------------------------------------------------
00009F2C                            ; Sprite mappings - animals
00009F2C                            ; ---------------------------------------------------------------------------
00009F2C 0000                       		dc.w byte_94A2-Map_obj28b
00009F2E 0000                       		dc.w byte_94A8-Map_obj28b
00009F30 0000                       		dc.w byte_949C-Map_obj28b
00009F32 01                         byte_949C:	dc.b 1
00009F33 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009F38 01                         byte_94A2:	dc.b 1
00009F39 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009F3E 01                         byte_94A8:	dc.b 1
00009F3F FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009F44                            		even
00009F44                            		even
00009F44                            
00009F44                            ; ---------------------------------------------------------------------------
00009F44                            ; Sprite mappings - points that	appear when you	destroy	something
00009F44                            ; ---------------------------------------------------------------------------
00009F44                            Map_obj29:
00009F44                            	include "_maps\obj29.asm"
00009F44                            ; ---------------------------------------------------------------------------
00009F44                            ; Sprite mappings - points that	appear when you	destroy	something
00009F44                            ; ---------------------------------------------------------------------------
00009F44 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00009F48 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009F4C 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009F50 0000                       		dc.w byte_94E5-Map_obj29
00009F52 01                         byte_94BC:	dc.b 1
00009F53 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
00009F58 01                         byte_94C2:	dc.b 1
00009F59 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009F5E 01                         byte_94C8:	dc.b 1
00009F5F FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
00009F64 01                         byte_94CE:	dc.b 1
00009F65 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009F6A 01                         byte_94D4:	dc.b 1
00009F6B FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009F70 02                         byte_94DA:	dc.b 2
00009F71 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
00009F76 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009F7B 02                         byte_94E5:	dc.b 2
00009F7C FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009F81 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
00009F86                            		even
00009F86                            		even
00009F86                            
00009F86                            ; ===========================================================================
00009F86                            ; ---------------------------------------------------------------------------
00009F86                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
00009F86                            ; ---------------------------------------------------------------------------
00009F86                            
00009F86                            Obj1F:					; XREF: Obj_Index
00009F86 7000                       		moveq	#0,d0
00009F88 1028 0024                  		move.b	$24(a0),d0
00009F8C 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009F90 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
00009F94                            ; ===========================================================================
00009F94 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
00009F96 0000                       		dc.w Obj1F_Action-Obj1F_Index
00009F98 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009F9A 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009F9C 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009F9E                            ; ===========================================================================
00009F9E                            
00009F9E                            Obj1F_Main:				; XREF: Obj1F_Index
00009F9E 117C 0010 0016             		move.b	#$10,$16(a0)
00009FA4 117C 0008 0017             		move.b	#8,$17(a0)
00009FAA 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009FB2 317C 0400 0002             		move.w	#$400,2(a0)
00009FB8 117C 0004 0001             		move.b	#4,1(a0)
00009FBE 117C 0003 0018             		move.b	#3,$18(a0)
00009FC4 117C 0006 0020             		move.b	#6,$20(a0)
00009FCA 117C 0015 0019             		move.b	#$15,$19(a0)
00009FD0 6100 0000                  		bsr.w	ObjectFall
00009FD4 4EB9 0000 0000             		jsr	ObjHitFloor
00009FDA 4A41                       		tst.w	d1
00009FDC 6A00                       		bpl.s	locret_955A
00009FDE D368 000C                  		add.w	d1,$C(a0)
00009FE2 1143 0026                  		move.b	d3,$26(a0)
00009FE6 317C 0000 0012             		move.w	#0,$12(a0)
00009FEC 5428 0024                  		addq.b	#2,$24(a0)
00009FF0                            
00009FF0                            locret_955A:
00009FF0 4E75                       		rts	
00009FF2                            ; ===========================================================================
00009FF2                            
00009FF2                            Obj1F_Action:				; XREF: Obj1F_Index
00009FF2 7000                       		moveq	#0,d0
00009FF4 1028 0025                  		move.b	$25(a0),d0
00009FF8 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009FFC 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
0000A000 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000A006 6100 0000                  		bsr.w	AnimateSprite
0000A00A 6000 0000                  		bra.w	MarkObjGone
0000A00E                            ; ===========================================================================
0000A00E 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
0000A010 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
0000A012                            ; ===========================================================================
0000A012                            
0000A012                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
0000A012 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0000A016 6A00                       		bpl.s	locret_95B6
0000A018 4A28 0001                  		tst.b	1(a0)
0000A01C 6A00                       		bpl.s	Obj1F_Move
0000A01E 0868 0001 0032             		bchg	#1,$32(a0)
0000A024 6600                       		bne.s	Obj1F_MakeFire
0000A026                            
0000A026                            Obj1F_Move:
0000A026 5428 0025                  		addq.b	#2,$25(a0)
0000A02A 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
0000A030 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
0000A036 6100 0000                  		bsr.w	Obj1F_SetAni
0000A03A 5600                       		addq.b	#3,d0
0000A03C 1140 001C                  		move.b	d0,$1C(a0)
0000A040 0868 0000 0022             		bchg	#0,$22(a0)
0000A046 6600                       		bne.s	locret_95B6
0000A048 4468 0010                  		neg.w	$10(a0)		; change direction
0000A04C                            
0000A04C                            locret_95B6:
0000A04C 4E75                       		rts	
0000A04E                            ; ===========================================================================
0000A04E                            
0000A04E                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
0000A04E 317C 003B 0030             		move.w	#$3B,$30(a0)
0000A054 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
0000A05A 6100 0000                  		bsr.w	SingleObjLoad
0000A05E 6600                       		bne.s	Obj1F_MakeFire2
0000A060 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
0000A064 137C 0006 0024             		move.b	#6,$24(a1)
0000A06A 3368 0008 0008             		move.w	8(a0),8(a1)
0000A070 0469 0010 0008             		subi.w	#$10,8(a1)
0000A076 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A07C 337C FF00 0010             		move.w	#-$100,$10(a1)
0000A082                            
0000A082                            Obj1F_MakeFire2:
0000A082 6100 0000                  		bsr.w	SingleObjLoad
0000A086 6600                       		bne.s	locret_9618
0000A088 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
0000A08C 137C 0006 0024             		move.b	#6,$24(a1)
0000A092 3368 0008 0008             		move.w	8(a0),8(a1)
0000A098 0669 0010 0008             		addi.w	#$10,8(a1)
0000A09E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A0A4 337C 0100 0010             		move.w	#$100,$10(a1)
0000A0AA                            
0000A0AA                            locret_9618:
0000A0AA 4E75                       		rts	
0000A0AC                            ; ===========================================================================
0000A0AC                            
0000A0AC                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
0000A0AC 5368 0030                  		subq.w	#1,$30(a0)
0000A0B0 6B00                       		bmi.s	loc_966E
0000A0B2 6100 0000                  		bsr.w	SpeedToPos
0000A0B6 0868 0000 0032             		bchg	#0,$32(a0)
0000A0BC 6600                       		bne.s	loc_9654
0000A0BE 3628 0008                  		move.w	8(a0),d3
0000A0C2 0643 0010                  		addi.w	#$10,d3
0000A0C6 0828 0000 0022             		btst	#0,$22(a0)
0000A0CC 6700                       		beq.s	loc_9640
0000A0CE 0443 0020                  		subi.w	#$20,d3
0000A0D2                            
0000A0D2                            loc_9640:
0000A0D2 4EB9 0000 0000             		jsr	ObjHitFloor2
0000A0D8 0C41 FFF8                  		cmpi.w	#-8,d1
0000A0DC 6D00                       		blt.s	loc_966E
0000A0DE 0C41 000C                  		cmpi.w	#$C,d1
0000A0E2 6C00                       		bge.s	loc_966E
0000A0E4 4E75                       		rts	
0000A0E6                            ; ===========================================================================
0000A0E6                            
0000A0E6                            loc_9654:				; XREF: Obj1F_WalkOnFloor
0000A0E6 4EB9 0000 0000             		jsr	ObjHitFloor
0000A0EC D368 000C                  		add.w	d1,$C(a0)
0000A0F0 1143 0026                  		move.b	d3,$26(a0)
0000A0F4 6100 0000                  		bsr.w	Obj1F_SetAni
0000A0F8 5600                       		addq.b	#3,d0
0000A0FA 1140 001C                  		move.b	d0,$1C(a0)
0000A0FE 4E75                       		rts	
0000A100                            ; ===========================================================================
0000A100                            
0000A100                            loc_966E:				; XREF: Obj1F_WalkOnFloor
0000A100 5528 0025                  		subq.b	#2,$25(a0)
0000A104 317C 003B 0030             		move.w	#59,$30(a0)
0000A10A 317C 0000 0010             		move.w	#0,$10(a0)
0000A110 6100 0000                  		bsr.w	Obj1F_SetAni
0000A114 1140 001C                  		move.b	d0,$1C(a0)
0000A118 4E75                       		rts	
0000A11A                            ; ---------------------------------------------------------------------------
0000A11A                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000A11A                            ; ---------------------------------------------------------------------------
0000A11A                            
0000A11A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A11A                            
0000A11A                            
0000A11A                            Obj1F_SetAni:				; XREF: loc_966E
0000A11A 7000                       		moveq	#0,d0
0000A11C 1628 0026                  		move.b	$26(a0),d3
0000A120 6B00                       		bmi.s	loc_96A4
0000A122 0C03 0006                  		cmpi.b	#6,d3
0000A126 6500                       		bcs.s	locret_96A2
0000A128 7001                       		moveq	#1,d0
0000A12A 0828 0000 0022             		btst	#0,$22(a0)
0000A130 6600                       		bne.s	locret_96A2
0000A132 7002                       		moveq	#2,d0
0000A134                            
0000A134                            locret_96A2:
0000A134 4E75                       		rts	
0000A136                            ; ===========================================================================
0000A136                            
0000A136                            loc_96A4:				; XREF: Obj1F_SetAni
0000A136 0C03 00FA                  		cmpi.b	#-6,d3
0000A13A 6200                       		bhi.s	locret_96B6
0000A13C 7002                       		moveq	#2,d0
0000A13E 0828 0000 0022             		btst	#0,$22(a0)
0000A144 6600                       		bne.s	locret_96B6
0000A146 7001                       		moveq	#1,d0
0000A148                            
0000A148                            locret_96B6:
0000A148 4E75                       		rts	
0000A14A                            ; End of function Obj1F_SetAni
0000A14A                            
0000A14A                            ; ===========================================================================
0000A14A                            
0000A14A                            Obj1F_Delete:				; XREF: Obj1F_Index
0000A14A 6100 0000                  		bsr.w	DeleteObject
0000A14E 4E75                       		rts	
0000A150                            ; ===========================================================================
0000A150                            ; ---------------------------------------------------------------------------
0000A150                            ; Sub-object - missile that the	Crabmeat throws
0000A150                            ; ---------------------------------------------------------------------------
0000A150                            
0000A150                            Obj1F_BallMain:				; XREF: Obj1F_Index
0000A150 5428 0024                  		addq.b	#2,$24(a0)
0000A154 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000A15C 317C 0400 0002             		move.w	#$400,2(a0)
0000A162 117C 0004 0001             		move.b	#4,1(a0)
0000A168 117C 0003 0018             		move.b	#3,$18(a0)
0000A16E 117C 0087 0020             		move.b	#$87,$20(a0)
0000A174 117C 0008 0019             		move.b	#8,$19(a0)
0000A17A 317C FC00 0012             		move.w	#-$400,$12(a0)
0000A180 117C 0007 001C             		move.b	#7,$1C(a0)
0000A186                            
0000A186                            Obj1F_BallMove:				; XREF: Obj1F_Index
0000A186 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000A18C 6100 0000                  		bsr.w	AnimateSprite
0000A190 6100 0000                  		bsr.w	ObjectFall
0000A194 6100 0000                  		bsr.w	DisplaySprite
0000A198 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A19C 0640 00E0                  		addi.w	#$E0,d0
0000A1A0 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A1A4 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
0000A1A6 4E75                       		rts	
0000A1A8                            ; ===========================================================================
0000A1A8                            
0000A1A8                            Obj1F_Delete2:
0000A1A8 6000 0000                  		bra.w	DeleteObject
0000A1AC                            ; ===========================================================================
0000A1AC                            Ani_obj1F:
0000A1AC                            	include "_anim\obj1F.asm"
0000A1AC                            ; ---------------------------------------------------------------------------
0000A1AC                            ; Animation script - Crabmeat enemy
0000A1AC                            ; ---------------------------------------------------------------------------
0000A1AC 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
0000A1B2 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
0000A1B8 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
0000A1BC 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
0000A1C0 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
0000A1C4 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
0000A1C8 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
0000A1CE 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
0000A1D4 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
0000A1DA 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
0000A1DE 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
0000A1E2                            		even
0000A1E2                            		even
0000A1E2                            
0000A1E2                            ; ---------------------------------------------------------------------------
0000A1E2                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000A1E2                            ; ---------------------------------------------------------------------------
0000A1E2                            Map_obj1F:
0000A1E2                            	include "_maps\obj1F.asm"
0000A1E2                            ; ---------------------------------------------------------------------------
0000A1E2                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000A1E2                            ; ---------------------------------------------------------------------------
0000A1E2 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
0000A1E6 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
0000A1EA 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
0000A1EE 0000                       		dc.w byte_97D7-Map_obj1F
0000A1F0 04                         byte_975E:	dc.b 4
0000A1F1 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
0000A1F6 F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000A1FB 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000A200 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000A205 04                         byte_9773:	dc.b 4
0000A206 F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
0000A20B F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000A210 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000A215 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000A21A 04                         byte_9788:	dc.b 4
0000A21B EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
0000A220 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000A225 FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000A22A FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000A22F 04                         byte_979D:	dc.b 4
0000A230 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
0000A235 EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000A23A FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000A23F FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000A244 06                         byte_97B2:	dc.b 6
0000A245 F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
0000A24A F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000A24F F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000A254 F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000A259 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000A25E 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000A263 01                         byte_97D1:	dc.b 1
0000A264 F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
0000A269 01                         byte_97D7:	dc.b 1
0000A26A F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
0000A270 00                         		even
0000A270 00                         		even
0000A270                            
0000A270                            ; ===========================================================================
0000A270                            ; ---------------------------------------------------------------------------
0000A270                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000A270                            ; ---------------------------------------------------------------------------
0000A270                            
0000A270                            Obj22:					; XREF: Obj_Index
0000A270 7000                       		moveq	#0,d0
0000A272 1028 0024                  		move.b	$24(a0),d0
0000A276 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0000A27A 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0000A27E                            ; ===========================================================================
0000A27E 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
0000A280 0000                       		dc.w Obj22_Action-Obj22_Index
0000A282 0000                       		dc.w Obj22_Delete-Obj22_Index
0000A284                            ; ===========================================================================
0000A284                            
0000A284                            Obj22_Main:				; XREF: Obj22_Index
0000A284 5428 0024                  		addq.b	#2,$24(a0)
0000A288 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
0000A290 317C 0444 0002             		move.w	#$444,2(a0)
0000A296 117C 0004 0001             		move.b	#4,1(a0)
0000A29C 117C 0003 0018             		move.b	#3,$18(a0)
0000A2A2 117C 0008 0020             		move.b	#8,$20(a0)
0000A2A8 117C 0018 0019             		move.b	#$18,$19(a0)
0000A2AE                            
0000A2AE                            Obj22_Action:				; XREF: Obj22_Index
0000A2AE 7000                       		moveq	#0,d0
0000A2B0 1028 0025                  		move.b	$25(a0),d0
0000A2B4 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000A2B8 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000A2BC 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000A2C2 6100 0000                  		bsr.w	AnimateSprite
0000A2C6 6000 0000                  		bra.w	MarkObjGone
0000A2CA                            ; ===========================================================================
0000A2CA 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000A2CC 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000A2CE                            ; ===========================================================================
0000A2CE                            
0000A2CE                            Obj22_Move:				; XREF: Obj22_Index2
0000A2CE 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A2D2 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000A2D4 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000A2DA 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000A2DC 5428 0025                  		addq.b	#2,$25(a0)
0000A2E0 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000A2E6 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000A2EC 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000A2F2 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A2F8 6600                       		bne.s	locret_986C	; if not, branch
0000A2FA 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000A2FE                            
0000A2FE                            locret_986C:
0000A2FE 4E75                       		rts	
0000A300                            ; ===========================================================================
0000A300                            
0000A300                            Obj22_Fire:				; XREF: Obj22_Move
0000A300 6100 0000                  		bsr.w	SingleObjLoad
0000A304 6600                       		bne.s	locret_98D0
0000A306 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000A30A 3368 0008 0008             		move.w	8(a0),8(a1)
0000A310 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A316 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000A31C 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000A322 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000A328 303C 0018                  		move.w	#$18,d0
0000A32C 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A332 6600                       		bne.s	loc_98AA	; if not, branch
0000A334 4440                       		neg.w	d0
0000A336 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000A33A                            
0000A33A                            loc_98AA:
0000A33A D169 0008                  		add.w	d0,8(a1)
0000A33E 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000A344 337C 000E 0032             		move.w	#$E,$32(a1)
0000A34A 2348 003C                  		move.l	a0,$3C(a1)
0000A34E 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000A354 317C 003B 0032             		move.w	#$3B,$32(a0)
0000A35A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000A360                            
0000A360                            locret_98D0:
0000A360 4E75                       		rts	
0000A362                            ; ===========================================================================
0000A362                            
0000A362                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000A362 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A366 6B00                       		bmi.s	Obj22_ChgDir
0000A368 6100 0000                  		bsr.w	SpeedToPos
0000A36C 4A28 0034                  		tst.b	$34(a0)
0000A370 6600                       		bne.s	locret_992A
0000A372 3038 D008                  		move.w	($FFFFD008).w,d0
0000A376 9068 0008                  		sub.w	8(a0),d0
0000A37A 6A00                       		bpl.s	Obj22_SetNrSonic
0000A37C 4440                       		neg.w	d0
0000A37E                            
0000A37E                            Obj22_SetNrSonic:
0000A37E 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000A382 6400                       		bcc.s	locret_992A	; if not, branch
0000A384 4A28 0001                  		tst.b	1(a0)
0000A388 6A00                       		bpl.s	locret_992A
0000A38A 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000A390 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000A396 6000                       		bra.s	Obj22_Stop
0000A398                            ; ===========================================================================
0000A398                            
0000A398                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000A398 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000A39E 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000A3A4 317C 003B 0032             		move.w	#59,$32(a0)
0000A3AA                            
0000A3AA                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000A3AA 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000A3AE 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000A3B4 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000A3BA                            
0000A3BA                            locret_992A:
0000A3BA 4E75                       		rts	
0000A3BC                            ; ===========================================================================
0000A3BC                            
0000A3BC                            Obj22_Delete:				; XREF: Obj22_Index
0000A3BC 6100 0000                  		bsr.w	DeleteObject
0000A3C0 4E75                       		rts	
0000A3C2                            ; ===========================================================================
0000A3C2                            ; ---------------------------------------------------------------------------
0000A3C2                            ; Object 23 - missile that Buzz	Bomber throws
0000A3C2                            ; ---------------------------------------------------------------------------
0000A3C2                            
0000A3C2                            Obj23:					; XREF: Obj_Index
0000A3C2 7000                       		moveq	#0,d0
0000A3C4 1028 0024                  		move.b	$24(a0),d0
0000A3C8 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000A3CC 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000A3D0                            ; ===========================================================================
0000A3D0 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000A3D2 0000                       		dc.w Obj23_Animate-Obj23_Index
0000A3D4 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000A3D6 0000                       		dc.w Obj23_Delete-Obj23_Index
0000A3D8 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000A3DA                            ; ===========================================================================
0000A3DA                            
0000A3DA                            Obj23_Main:				; XREF: Obj23_Index
0000A3DA 5368 0032                  		subq.w	#1,$32(a0)
0000A3DE 6A00                       		bpl.s	Obj23_ChkCancel
0000A3E0 5428 0024                  		addq.b	#2,$24(a0)
0000A3E4 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000A3EC 317C 2444 0002             		move.w	#$2444,2(a0)
0000A3F2 117C 0004 0001             		move.b	#4,1(a0)
0000A3F8 117C 0003 0018             		move.b	#3,$18(a0)
0000A3FE 117C 0008 0019             		move.b	#8,$19(a0)
0000A404 0228 0003 0022             		andi.b	#3,$22(a0)
0000A40A 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000A40E 6700                       		beq.s	Obj23_Animate	; if not, branch
0000A410 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000A416 117C 0087 0020             		move.b	#$87,$20(a0)
0000A41C 117C 0001 001C             		move.b	#1,$1C(a0)
0000A422 6000                       		bra.s	Obj23_Animate2
0000A424                            ; ===========================================================================
0000A424                            
0000A424                            Obj23_Animate:				; XREF: Obj23_Index
0000A424 6100                       		bsr.s	Obj23_ChkCancel
0000A426 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A42C 6100 0000                  		bsr.w	AnimateSprite
0000A430 6000 0000                  		bra.w	DisplaySprite
0000A434                            ; ---------------------------------------------------------------------------
0000A434                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000A434                            ; destroyed, and if it has, then cancel	the missile
0000A434                            ; ---------------------------------------------------------------------------
0000A434                            
0000A434                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A434                            
0000A434                            
0000A434                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000A434 2268 003C                  		movea.l	$3C(a0),a1
0000A438 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000A43C 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000A43E 4E75                       		rts	
0000A440                            ; End of function Obj23_ChkCancel
0000A440                            
0000A440                            ; ===========================================================================
0000A440                            
0000A440                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000A440 0828 0007 0022             		btst	#7,$22(a0)
0000A446 6600                       		bne.s	Obj23_Explode
0000A448 117C 0087 0020             		move.b	#$87,$20(a0)
0000A44E 117C 0001 001C             		move.b	#1,$1C(a0)
0000A454 6100 0000                  		bsr.w	SpeedToPos
0000A458 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A45E 6100 0000                  		bsr.w	AnimateSprite
0000A462 6100 0000                  		bsr.w	DisplaySprite
0000A466 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A46A 0640 00E0                  		addi.w	#$E0,d0
0000A46E B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A472 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000A474 4E75                       		rts	
0000A476                            ; ===========================================================================
0000A476                            
0000A476                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000A476 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000A47A 117C 0000 0024             		move.b	#0,$24(a0)
0000A480 6000 F30A                  		bra.w	Obj24
0000A484                            ; ===========================================================================
0000A484                            
0000A484                            Obj23_Delete:				; XREF: Obj23_Index
0000A484 6100 0000                  		bsr.w	DeleteObject
0000A488 4E75                       		rts	
0000A48A                            ; ===========================================================================
0000A48A                            
0000A48A                            Obj23_FromNewt:				; XREF: Obj23_Index
0000A48A 4A28 0001                  		tst.b	1(a0)
0000A48E 6AF4                       		bpl.s	Obj23_Delete
0000A490 6100 0000                  		bsr.w	SpeedToPos
0000A494                            
0000A494                            Obj23_Animate2:				; XREF: Obj23_Main
0000A494 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A49A 6100 0000                  		bsr.w	AnimateSprite
0000A49E 6100 0000                  		bsr.w	DisplaySprite
0000A4A2 4E75                       		rts	
0000A4A4                            ; ===========================================================================
0000A4A4                            Ani_obj22:
0000A4A4                            	include "_anim\obj22.asm"
0000A4A4                            ; ---------------------------------------------------------------------------
0000A4A4                            ; Animation script - Buzz Bomber enemy
0000A4A4                            ; ---------------------------------------------------------------------------
0000A4A4 0000                       		dc.w byte_9A1E-Ani_obj22
0000A4A6 0000                       		dc.w byte_9A22-Ani_obj22
0000A4A8 0000                       		dc.w byte_9A26-Ani_obj22
0000A4AA 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000A4AE 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000A4B2 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000A4B6                            		even
0000A4B6                            		even
0000A4B6                            
0000A4B6                            Ani_obj23:
0000A4B6                            	include "_anim\obj23.asm"
0000A4B6                            ; ---------------------------------------------------------------------------
0000A4B6                            ; Animation script - missile that Buzz Bomber throws
0000A4B6                            ; ---------------------------------------------------------------------------
0000A4B6 0000                       		dc.w byte_9A2E-Ani_obj23
0000A4B8 0000                       		dc.w byte_9A32-Ani_obj23
0000A4BA 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000A4BE 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000A4C2                            		even
0000A4C2                            		even
0000A4C2                            
0000A4C2                            ; ---------------------------------------------------------------------------
0000A4C2                            ; Sprite mappings - Buzz Bomber	enemy
0000A4C2                            ; ---------------------------------------------------------------------------
0000A4C2                            Map_obj22:
0000A4C2                            	include "_maps\obj22.asm"
0000A4C2                            ; ---------------------------------------------------------------------------
0000A4C2                            ; Sprite mappings - Buzz Bomber	enemy
0000A4C2                            ; ---------------------------------------------------------------------------
0000A4C2 0000 0000                  		dc.w byte_9A42-Map_obj22, byte_9A61-Map_obj22
0000A4C6 0000 0000                  		dc.w byte_9A80-Map_obj22, byte_9AA4-Map_obj22
0000A4CA 0000 0000                  		dc.w byte_9AC8-Map_obj22, byte_9AE7-Map_obj22
0000A4CE 06                         byte_9A42:	dc.b 6
0000A4CF F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000A4D4 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000A4D9 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000A4DE 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000A4E3 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000A4E8 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000A4ED 06                         byte_9A61:	dc.b 6
0000A4EE F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000A4F3 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000A4F8 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000A4FD 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000A502 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000A507 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000A50C 07                         byte_9A80:	dc.b 7
0000A50D 0400 0030 0C               		dc.b 4,	0, 0, $30, $C
0000A512 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000A517 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000A51C 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000A521 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000A526 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000A52B F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000A530 07                         byte_9AA4:	dc.b 7
0000A531 0404 0031 0C               		dc.b 4,	4, 0, $31, $C
0000A536 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000A53B F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000A540 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000A545 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000A54A F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000A54F F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000A554 06                         byte_9AC8:	dc.b 6
0000A555 F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000A55A 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000A55F 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000A564 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000A569 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000A56E F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000A573 04                         byte_9AE7:	dc.b 4
0000A574 F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000A579 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000A57E 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000A583 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000A588 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000A58D F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000A592                            		even
0000A592                            		even
0000A592                            
0000A592                            ; ---------------------------------------------------------------------------
0000A592                            ; Sprite mappings - missile that Buzz Bomber throws
0000A592                            ; ---------------------------------------------------------------------------
0000A592                            Map_obj23:
0000A592                            	include "_maps\obj23.asm"
0000A592                            ; ---------------------------------------------------------------------------
0000A592                            ; Sprite mappings - missile that Buzz Bomber throws
0000A592                            ; ---------------------------------------------------------------------------
0000A592 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000A596 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000A59A 01                         byte_9B0E:	dc.b 1
0000A59B F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000A5A0 01                         byte_9B14:	dc.b 1
0000A5A1 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000A5A6 01                         byte_9B1A:	dc.b 1
0000A5A7 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000A5AC 01                         byte_9B20:	dc.b 1
0000A5AD F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000A5B2                            		even
0000A5B2                            		even
0000A5B2                            
0000A5B2                            ; ===========================================================================
0000A5B2                            ; ---------------------------------------------------------------------------
0000A5B2                            ; Object 25 - rings
0000A5B2                            ; ---------------------------------------------------------------------------
0000A5B2                            
0000A5B2                            Obj25:					; XREF: Obj_Index
0000A5B2 7000                       		moveq	#0,d0
0000A5B4 1028 0024                  		move.b	$24(a0),d0
0000A5B8 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000A5BC 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000A5C0                            ; ===========================================================================
0000A5C0 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000A5C2 0000                       		dc.w Obj25_Animate-Obj25_Index
0000A5C4 0000                       		dc.w Obj25_Collect-Obj25_Index
0000A5C6 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000A5C8 0000                       		dc.w Obj25_Delete-Obj25_Index
0000A5CA                            ; ---------------------------------------------------------------------------
0000A5CA                            ; Distances between rings (format: horizontal, vertical)
0000A5CA                            ; ---------------------------------------------------------------------------
0000A5CA 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000A5CC 1800                       		dc.b $18, 0		; horizontal normal
0000A5CE 2000                       		dc.b $20, 0		; horizontal wide
0000A5D0 0010                       		dc.b 0,	$10		; vertical tight
0000A5D2 0018                       		dc.b 0,	$18		; vertical normal
0000A5D4 0020                       		dc.b 0,	$20		; vertical wide
0000A5D6 1010                       		dc.b $10, $10		; diagonal
0000A5D8 1818                       		dc.b $18, $18
0000A5DA 2020                       		dc.b $20, $20
0000A5DC F010                       		dc.b $F0, $10
0000A5DE E818                       		dc.b $E8, $18
0000A5E0 E020                       		dc.b $E0, $20
0000A5E2 1008                       		dc.b $10, 8
0000A5E4 1810                       		dc.b $18, $10
0000A5E6 F008                       		dc.b $F0, 8
0000A5E8 E810                       		dc.b $E8, $10
0000A5EA                            ; ===========================================================================
0000A5EA                            
0000A5EA                            Obj25_Main:				; XREF: Obj25_Index
0000A5EA 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A5EE 7000                       		moveq	#0,d0
0000A5F0 1028 0023                  		move.b	$23(a0),d0
0000A5F4 45F2 0002                  		lea	2(a2,d0.w),a2
0000A5F8 1812                       		move.b	(a2),d4
0000A5FA 1228 0028                  		move.b	$28(a0),d1
0000A5FE 1001                       		move.b	d1,d0
0000A600 0241 0007                  		andi.w	#7,d1
0000A604 0C41 0007                  		cmpi.w	#7,d1
0000A608 6600                       		bne.s	loc_9B80
0000A60A 7206                       		moveq	#6,d1
0000A60C                            
0000A60C                            loc_9B80:
0000A60C 4841                       		swap	d1
0000A60E 323C 0000                  		move.w	#0,d1
0000A612 E808                       		lsr.b	#4,d0
0000A614 D040                       		add.w	d0,d0
0000A616 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A61A 4885                       		ext.w	d5
0000A61C 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A620 4886                       		ext.w	d6
0000A622 2248                       		movea.l	a0,a1
0000A624 3428 0008                  		move.w	8(a0),d2
0000A628 3628 000C                  		move.w	$C(a0),d3
0000A62C E20C                       		lsr.b	#1,d4
0000A62E 6500                       		bcs.s	loc_9C02
0000A630 0892 0007                  		bclr	#7,(a2)
0000A634 6000                       		bra.s	loc_9BBA
0000A636                            ; ===========================================================================
0000A636                            
0000A636                            Obj25_MakeRings:
0000A636 4841                       		swap	d1
0000A638 E20C                       		lsr.b	#1,d4
0000A63A 6500                       		bcs.s	loc_9C02
0000A63C 0892 0007                  		bclr	#7,(a2)
0000A640 6100 0000                  		bsr.w	SingleObjLoad
0000A644 6600                       		bne.s	loc_9C0E
0000A646                            
0000A646                            loc_9BBA:				; XREF: Obj25_Main
0000A646 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A64A 5429 0024                  		addq.b	#2,$24(a1)
0000A64E 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A652 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A658 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A65C 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A664 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A66A 137C 0004 0001             		move.b	#4,1(a1)
0000A670 137C 0002 0018             		move.b	#2,$18(a1)
0000A676 137C 0047 0020             		move.b	#$47,$20(a1)
0000A67C 137C 0008 0019             		move.b	#8,$19(a1)
0000A682 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A688 1341 0034                  		move.b	d1,$34(a1)
0000A68C                            
0000A68C                            loc_9C02:
0000A68C 5241                       		addq.w	#1,d1
0000A68E D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A690 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A692 4841                       		swap	d1
0000A694 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A698                            
0000A698                            loc_9C0E:
0000A698 0812 0000                  		btst	#0,(a2)
0000A69C 6600 0000                  		bne.w	DeleteObject
0000A6A0                            
0000A6A0                            Obj25_Animate:				; XREF: Obj25_Index
0000A6A0 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A6A6 6100 0000                  		bsr.w	DisplaySprite
0000A6AA 3028 0032                  		move.w	$32(a0),d0
0000A6AE 0240 FF80                  		andi.w	#$FF80,d0
0000A6B2 3238 F700                  		move.w	($FFFFF700).w,d1
0000A6B6 0441 0080                  		subi.w	#$80,d1
0000A6BA 0241 FF80                  		andi.w	#$FF80,d1
0000A6BE 9041                       		sub.w	d1,d0
0000A6C0 0C40 0280                  		cmpi.w	#$280,d0
0000A6C4 6200                       		bhi.s	Obj25_Delete
0000A6C6 4E75                       		rts	
0000A6C8                            ; ===========================================================================
0000A6C8                            
0000A6C8                            Obj25_Collect:				; XREF: Obj25_Index
0000A6C8 5428 0024                  		addq.b	#2,$24(a0)
0000A6CC 117C 0000 0020             		move.b	#0,$20(a0)
0000A6D2 117C 0001 0018             		move.b	#1,$18(a0)
0000A6D8 6100 0000                  		bsr.w	CollectRing
0000A6DC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A6E0 7000                       		moveq	#0,d0
0000A6E2 1028 0023                  		move.b	$23(a0),d0
0000A6E6 1228 0034                  		move.b	$34(a0),d1
0000A6EA 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A6EE                            
0000A6EE                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A6EE 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A6F4 6100 0000                  		bsr.w	AnimateSprite
0000A6F8 6000 0000                  		bra.w	DisplaySprite
0000A6FC                            ; ===========================================================================
0000A6FC                            
0000A6FC                            Obj25_Delete:				; XREF: Obj25_Index
0000A6FC 6000 0000                  		bra.w	DeleteObject
0000A700                            
0000A700                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A700                            
0000A700                            
0000A700                            CollectRing:				; XREF: Obj25_Collect
0000A700 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A704 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A70A 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A70E 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A714 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A716 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A71C 6700                       		beq.s	loc_9CA4
0000A71E 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A724 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A726 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A72C 6600                       		bne.s	Obj25_PlaySnd
0000A72E                            
0000A72E                            loc_9CA4:
0000A72E 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A732 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A736 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A73A                            
0000A73A                            Obj25_PlaySnd:
0000A73A 4EF9 0000 1476             		jmp	(PlaySound_Special).l
0000A740                            ; End of function CollectRing
0000A740                            
0000A740                            ; ===========================================================================
0000A740                            ; ---------------------------------------------------------------------------
0000A740                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A740                            ; ---------------------------------------------------------------------------
0000A740                            
0000A740                            Obj37:					; XREF: Obj_Index
0000A740 7000                       		moveq	#0,d0
0000A742 1028 0024                  		move.b	$24(a0),d0
0000A746 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A74A 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A74E                            ; ===========================================================================
0000A74E 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A750 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A752 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A754 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A756 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A758                            ; ===========================================================================
0000A758                            
0000A758                            Obj37_CountRings:			; XREF: Obj37_Index
0000A758 2248                       		movea.l	a0,a1
0000A75A 7A00                       		moveq	#0,d5
0000A75C 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A760 7020                       		moveq	#32,d0
0000A762 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A764 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A766 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A768                            
0000A768                            loc_9CDE:
0000A768 5345                       		subq.w	#1,d5
0000A76A 383C 0288                  		move.w	#$288,d4
0000A76E 6000                       		bra.s	Obj37_MakeRings
0000A770                            ; ===========================================================================
0000A770                            
0000A770                            Obj37_Loop:
0000A770 6100 0000                  		bsr.w	SingleObjLoad
0000A774 6600 0000                  		bne.w	Obj37_ResetCounter
0000A778                            
0000A778                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A778 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A77C 5429 0024                  		addq.b	#2,$24(a1)
0000A780 137C 0008 0016             		move.b	#8,$16(a1)
0000A786 137C 0008 0017             		move.b	#8,$17(a1)
0000A78C 3368 0008 0008             		move.w	8(a0),8(a1)
0000A792 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A798 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A7A0 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A7A6 137C 0004 0001             		move.b	#4,1(a1)
0000A7AC 137C 0003 0018             		move.b	#3,$18(a1)
0000A7B2 137C 0047 0020             		move.b	#$47,$20(a1)
0000A7B8 137C 0008 0019             		move.b	#8,$19(a1)
0000A7BE 4A44                       		tst.w	d4
0000A7C0 6B00                       		bmi.s	loc_9D62
0000A7C2 3004                       		move.w	d4,d0
0000A7C4 6100 8C0E                  		bsr.w	CalcSine
0000A7C8 3404                       		move.w	d4,d2
0000A7CA E04A                       		lsr.w	#8,d2
0000A7CC 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000A7D0 6700                       		beq.s	@skiphalvingvel		; If not, branch and skip underwater checks
0000A7D2 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000A7D6 BC68 000C                  		cmp.w	$C(a0),d6		; Is the ring object underneath the water level?
0000A7DA 6E00                       		bgt.s	@skiphalvingvel		; If not, branch and skip underwater commands
0000A7DC E240                       		asr.w	d0			; Half d0. Makes the ring's x_vel bounce to the left/right slower
0000A7DE E241                       		asr.w	d1			; Half d1. Makes the ring's y_vel bounce up/down slower
0000A7E0                            
0000A7E0                            @skiphalvingvel:		
0000A7E0 E560                       		asl.w	d2,d0
0000A7E2 E561                       		asl.w	d2,d1
0000A7E4 3400                       		move.w	d0,d2
0000A7E6 3601                       		move.w	d1,d3
0000A7E8 0604 0010                  		addi.b	#$10,d4
0000A7EC 6400                       		bcc.s	loc_9D62
0000A7EE 0444 0080                  		subi.w	#$80,d4
0000A7F2 6400                       		bcc.s	loc_9D62
0000A7F4 383C 0288                  		move.w	#$288,d4
0000A7F8                            
0000A7F8                            loc_9D62:
0000A7F8 3342 0010                  		move.w	d2,$10(a1)
0000A7FC 3343 0012                  		move.w	d3,$12(a1)
0000A800 4442                       		neg.w	d2
0000A802 4444                       		neg.w	d4
0000A804 51CD FF6A                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A808                            
0000A808                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A808 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A80E 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A814 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A81A 70FF                       		moveq	#-1,d0			; Move #-1 to d0
0000A81C 1140 001F                  		move.b	d0,$1F(a0)	; Move d0 to new timer
0000A820 11C0 FEC6                  		move.b	d0,($FFFFFEC6).w	; Move d0 to old timer (for animated purposes)
0000A824 303C 00C6                  		move.w	#$C6,d0
0000A828 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A82E                            
0000A82E                            Obj37_Bounce:				; XREF: Obj37_Index
0000A82E 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A834 6100 0000                  		bsr.w	SpeedToPos
0000A838 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A83E 6B00                       		bmi.s	Obj37_ChkDel
0000A840 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000A844 6700                       		beq.s	@skipbounceslow		; If not, branch and skip underwater checks
0000A846 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000A84A BC68 000C                  		cmp.w	$C(a0),d6		; Is the ring object underneath the water level?
0000A84E 6E00                       		bgt.s	@skipbounceslow		; If not, branch and skip underwater commands
0000A850 0468 000E 0012             		subi.w	#$E,$12(a0)		; Reduce gravity by $E ($18-$E=$A), giving the underwater effect
0000A856                            
0000A856                            @skipbounceslow:
0000A856 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A85A D007                       		add.b	d7,d0
0000A85C 0200 0003                  		andi.b	#3,d0
0000A860 6600                       		bne.s	Obj37_ChkDel
0000A862 4EB9 0000 0000             		jsr	ObjHitFloor
0000A868 4A41                       		tst.w	d1
0000A86A 6A00                       		bpl.s	Obj37_ChkDel
0000A86C D368 000C                  		add.w	d1,$C(a0)
0000A870 3028 0012                  		move.w	$12(a0),d0
0000A874 E440                       		asr.w	#2,d0
0000A876 9168 0012                  		sub.w	d0,$12(a0)
0000A87A 4468 0012                  		neg.w	$12(a0)
0000A87E                            
0000A87E                            Obj37_ChkDel:
0000A87E 5328 001F                  		subq.b  #1,$1F(a0)  ; Subtract 1   ; RHS Ring Timer fix
0000A882 6700 0000                                  beq.w   DeleteObject       ; If 0, delete ; RHS Ring Timer fix
0000A886 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A88A 0640 00E0                  		addi.w	#$E0,d0
0000A88E B068 000C                  		cmp.w	$C(a0),d0	   ; has object moved below level boundary?
0000A892 6500                       		bcs.s	Obj37_Delete	   ; if yes, branch	
0000A894                            ;Mercury Lost Rings Flash
0000A894 0828 0000 001F             		btst	#0, $1F(a0) ; Test the first bit of the timer, so rings flash every other frame.
0000A89A 6700 0000                  		beq.w	DisplaySprite      ; If the bit is 0, the ring will appear.
0000A89E 0C28 0050 001F             		cmpi.b	#80,$1F(a0) ; Rings will flash during last 80 steps of their life.
0000A8A4 6200 0000                  		bhi.w	DisplaySprite      ; If the timer is higher than 80, obviously the rings will STAY visible.
0000A8A8 4E75                       		rts
0000A8AA                            ;end Lost Rings Flash
0000A8AA                            ; ===========================================================================
0000A8AA                            
0000A8AA                            Obj37_Collect:				; XREF: Obj37_Index
0000A8AA 5428 0024                  		addq.b	#2,$24(a0)
0000A8AE 117C 0000 0020             		move.b	#0,$20(a0)
0000A8B4 117C 0001 0018             		move.b	#1,$18(a0)
0000A8BA 6100 FE44                  		bsr.w	CollectRing
0000A8BE                            
0000A8BE                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A8BE 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A8C4 6100 0000                  		bsr.w	AnimateSprite
0000A8C8 6000 0000                  		bra.w	DisplaySprite
0000A8CC                            ; ===========================================================================
0000A8CC                            
0000A8CC                            Obj37_Delete:				; XREF: Obj37_Index
0000A8CC 6000 0000                  		bra.w	DeleteObject
0000A8D0                            ; ===========================================================================
0000A8D0                            ; ---------------------------------------------------------------------------
0000A8D0                            ; Object 4B - giant ring for entry to special stage
0000A8D0                            ; ---------------------------------------------------------------------------
0000A8D0                            
0000A8D0                            Obj4B:					; XREF: Obj_Index
0000A8D0 7000                       		moveq	#0,d0
0000A8D2 1028 0024                  		move.b	$24(a0),d0
0000A8D6 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A8DA 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A8DE                            ; ===========================================================================
0000A8DE 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A8E0 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A8E2 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A8E4 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A8E6                            ; ===========================================================================
0000A8E6                            
0000A8E6                            Obj4B_Main:				; XREF: Obj4B_Index
0000A8E6 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A8EE 317C 2400 0002             		move.w	#$2400,2(a0)
0000A8F4 0028 0004 0001             		ori.b	#4,1(a0)
0000A8FA 117C 0040 0019             		move.b	#$40,$19(a0)
0000A900 4A28 0001                  		tst.b	1(a0)
0000A904 6A00                       		bpl.s	Obj4B_Animate
0000A906 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A90C 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A910 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A916 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A918 4E75                       		rts	
0000A91A                            ; ===========================================================================
0000A91A                            
0000A91A                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A91A 5428 0024                  		addq.b	#2,$24(a0)
0000A91E 117C 0002 0018             		move.b	#2,$18(a0)
0000A924 117C 0052 0020             		move.b	#$52,$20(a0)
0000A92A 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A930                            
0000A930                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A930 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A936 3028 0008                  		move.w	8(a0),d0
0000A93A 0240 FF80                  		andi.w	#$FF80,d0
0000A93E 3238 F700                  		move.w	($FFFFF700).w,d1
0000A942 0441 0080                  		subi.w	#$80,d1
0000A946 0241 FF80                  		andi.w	#$FF80,d1
0000A94A 9041                       		sub.w	d1,d0
0000A94C 0C40 0280                  		cmpi.w	#$280,d0
0000A950 6200 0000                  		bhi.w	DeleteObject
0000A954 6000 0000                  		bra.w	DisplaySprite
0000A958                            ; ===========================================================================
0000A958                            
0000A958                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A958 5528 0024                  		subq.b	#2,$24(a0)
0000A95C 117C 0000 0020             		move.b	#0,$20(a0)
0000A962 6100 0000                  		bsr.w	SingleObjLoad
0000A966 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A96A 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A96E 3368 0008 0008             		move.w	8(a0),8(a1)
0000A974 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A97A 2348 003C                  		move.l	a0,$3C(a1)
0000A97E 3038 D008                  		move.w	($FFFFD008).w,d0
0000A982 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A986 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A988 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A98E                            
0000A98E                            Obj4B_PlaySnd:
0000A98E 303C 00C3                  		move.w	#$C3,d0
0000A992 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A998 6096                       		bra.s	Obj4B_Animate
0000A99A                            ; ===========================================================================
0000A99A                            
0000A99A                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A99A 6000 0000                  		bra.w	DeleteObject
0000A99E                            ; ===========================================================================
0000A99E                            ; ---------------------------------------------------------------------------
0000A99E                            ; Object 7C - flash effect when	you collect the	giant ring
0000A99E                            ; ---------------------------------------------------------------------------
0000A99E                            
0000A99E                            Obj7C:					; XREF: Obj_Index
0000A99E 7000                       		moveq	#0,d0
0000A9A0 1028 0024                  		move.b	$24(a0),d0
0000A9A4 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A9A8 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A9AC                            ; ===========================================================================
0000A9AC 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A9AE 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A9B0 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A9B2                            ; ===========================================================================
0000A9B2                            
0000A9B2                            Obj7C_Main:				; XREF: Obj7C_Index
0000A9B2 5428 0024                  		addq.b	#2,$24(a0)
0000A9B6 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A9BE 317C 2462 0002             		move.w	#$2462,2(a0)
0000A9C4 0028 0004 0001             		ori.b	#4,1(a0)
0000A9CA 117C 0000 0018             		move.b	#0,$18(a0)
0000A9D0 117C 0020 0019             		move.b	#$20,$19(a0)
0000A9D6 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A9DC                            
0000A9DC                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A9DC 6100                       		bsr.s	Obj7C_Collect
0000A9DE 3028 0008                  		move.w	8(a0),d0
0000A9E2 0240 FF80                  		andi.w	#$FF80,d0
0000A9E6 3238 F700                  		move.w	($FFFFF700).w,d1
0000A9EA 0441 0080                  		subi.w	#$80,d1
0000A9EE 0241 FF80                  		andi.w	#$FF80,d1
0000A9F2 9041                       		sub.w	d1,d0
0000A9F4 0C40 0280                  		cmpi.w	#$280,d0
0000A9F8 6200 0000                  		bhi.w	DeleteObject
0000A9FC 6000 0000                  		bra.w	DisplaySprite
0000AA00                            
0000AA00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AA00                            
0000AA00                            
0000AA00                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000AA00 5328 001E                  		subq.b	#1,$1E(a0)
0000AA04 6A00                       		bpl.s	locret_9F76
0000AA06 117C 0001 001E             		move.b	#1,$1E(a0)
0000AA0C 5228 001A                  		addq.b	#1,$1A(a0)
0000AA10 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000AA16 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000AA18 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000AA1E 6600                       		bne.s	locret_9F76	; if not, branch
0000AA20 2268 003C                  		movea.l	$3C(a0),a1
0000AA24 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000AA2A 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000AA30 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000AA36 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000AA3A 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000AA3E                            
0000AA3E                            locret_9F76:
0000AA3E 4E75                       		rts	
0000AA40                            ; ===========================================================================
0000AA40                            
0000AA40                            Obj7C_End:				; XREF: Obj7C_Collect
0000AA40 5428 0024                  		addq.b	#2,$24(a0)
0000AA44 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000AA4A 588F                       		addq.l	#4,sp
0000AA4C 4E75                       		rts	
0000AA4E                            ; End of function Obj7C_Collect
0000AA4E                            
0000AA4E                            ; ===========================================================================
0000AA4E                            
0000AA4E                            Obj7C_Delete:				; XREF: Obj7C_Index
0000AA4E 6000 0000                  		bra.w	DeleteObject
0000AA52                            ; ===========================================================================
0000AA52                            Ani_obj25:
0000AA52                            	include "_anim\obj25.asm"
0000AA52                            ; ---------------------------------------------------------------------------
0000AA52                            ; Animation script - ring
0000AA52                            ; ---------------------------------------------------------------------------
0000AA52 0000                       		dc.w byte_9F8C-Ani_obj25
0000AA54 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000AA5A                            		even
0000AA5A                            		even
0000AA5A                            
0000AA5A                            ; ---------------------------------------------------------------------------
0000AA5A                            ; Sprite mappings - rings
0000AA5A                            ; ---------------------------------------------------------------------------
0000AA5A                            Map_obj25:
0000AA5A                            	include "_maps\obj25.asm"
0000AA5A                            ; ---------------------------------------------------------------------------
0000AA5A                            ; Sprite mappings - rings
0000AA5A                            ; ---------------------------------------------------------------------------
0000AA5A 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000AA5E 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000AA62 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000AA66 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000AA6A 01                         byte_9FA2:	dc.b 1
0000AA6B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000AA70 01                         byte_9FA8:	dc.b 1
0000AA71 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000AA76 01                         byte_9FAE:	dc.b 1
0000AA77 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000AA7C 01                         byte_9FB4:	dc.b 1
0000AA7D F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000AA82 01                         byte_9FBA:	dc.b 1
0000AA83 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000AA88 01                         byte_9FC0:	dc.b 1
0000AA89 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000AA8E 01                         byte_9FC6:	dc.b 1
0000AA8F F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000AA94 01                         byte_9FCC:	dc.b 1
0000AA95 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000AA9A                            		even
0000AA9A                            		even
0000AA9A                            
0000AA9A                            ; ---------------------------------------------------------------------------
0000AA9A                            ; Sprite mappings - giant ring
0000AA9A                            ; ---------------------------------------------------------------------------
0000AA9A                            Map_obj4B:
0000AA9A                            	include "_maps\obj4B.asm"
0000AA9A                            ; ---------------------------------------------------------------------------
0000AA9A                            ; Sprite mappings - giant ring
0000AA9A                            ; ---------------------------------------------------------------------------
0000AA9A 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000AA9E 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000AAA2 0A                         byte_9FDA:	dc.b $A
0000AAA3 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000AAA8 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000AAAD E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000AAB2 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000AAB7 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000AABC F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000AAC1 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000AAC6 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000AACB 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000AAD0 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000AAD5 08                         byte_A00D:	dc.b 8
0000AAD6 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000AADB E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000AAE0 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000AAE5 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000AAEA F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000AAEF 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000AAF4 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000AAF9 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000AAFE 04                         byte_A036:	dc.b 4
0000AAFF E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000AB04 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000AB09 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000AB0E 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000AB13 08                         byte_A04B:	dc.b 8
0000AB14 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000AB19 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000AB1E E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000AB23 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000AB28 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000AB2D 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000AB32 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000AB37 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000AB3C                            		even
0000AB3C                            		even
0000AB3C                            
0000AB3C                            ; ---------------------------------------------------------------------------
0000AB3C                            ; Sprite mappings - flash effect when you collect the giant ring
0000AB3C                            ; ---------------------------------------------------------------------------
0000AB3C                            Map_obj7C:
0000AB3C                            	include "_maps\obj7C.asm"
0000AB3C                            ; ---------------------------------------------------------------------------
0000AB3C                            ; Sprite mappings - flash effect when you collect the giant ring
0000AB3C                            ; ---------------------------------------------------------------------------
0000AB3C 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000AB40 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000AB44 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000AB48 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000AB4C 02                         byte_A084:	dc.b 2
0000AB4D E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000AB52 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000AB57 04                         byte_A08F:	dc.b 4
0000AB58 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000AB5D E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000AB62 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000AB67 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000AB6C 04                         byte_A0A4:	dc.b 4
0000AB6D E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000AB72 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000AB77 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000AB7C 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000AB81 04                         byte_A0B9:	dc.b 4
0000AB82 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000AB87 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000AB8C 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000AB91 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000AB96 04                         byte_A0CE:	dc.b 4
0000AB97 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000AB9C E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000ABA1 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000ABA6 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000ABAB 04                         byte_A0E3:	dc.b 4
0000ABAC E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000ABB1 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000ABB6 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000ABBB 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000ABC0 02                         byte_A0F8:	dc.b 2
0000ABC1 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000ABC6 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000ABCB 04                         byte_A103:	dc.b 4
0000ABCC E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000ABD1 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000ABD6 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000ABDB 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000ABE0                            		even
0000ABE0                            		even
0000ABE0                            
0000ABE0                            ; ===========================================================================
0000ABE0                            ; ---------------------------------------------------------------------------
0000ABE0                            ; Object 26 - monitors
0000ABE0                            ; ---------------------------------------------------------------------------
0000ABE0                            
0000ABE0                            Obj26:					; XREF: Obj_Index
0000ABE0 7000                       		moveq	#0,d0
0000ABE2 1028 0024                  		move.b	$24(a0),d0
0000ABE6 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000ABEA 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000ABEE                            ; ===========================================================================
0000ABEE 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000ABF0 0000                       		dc.w Obj26_Solid-Obj26_Index
0000ABF2 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000ABF4 0000                       		dc.w Obj26_Animate-Obj26_Index
0000ABF6 0000                       		dc.w Obj26_Display-Obj26_Index
0000ABF8                            ; ===========================================================================
0000ABF8                            
0000ABF8                            Obj26_Main:				; XREF: Obj26_Index
0000ABF8 5428 0024                  		addq.b	#2,$24(a0)
0000ABFC 117C 000E 0016             		move.b	#$E,$16(a0)
0000AC02 117C 000E 0017             		move.b	#$E,$17(a0)
0000AC08 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000AC10 317C 0680 0002             		move.w	#$680,2(a0)
0000AC16 117C 0004 0001             		move.b	#4,1(a0)
0000AC1C 117C 0003 0018             		move.b	#3,$18(a0)
0000AC22 117C 000F 0019             		move.b	#$F,$19(a0)
0000AC28 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000AC2C 7000                       		moveq	#0,d0
0000AC2E 1028 0023                  		move.b	$23(a0),d0
0000AC32 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000AC38 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000AC3E 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000AC40 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000AC46 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000AC4C 4E75                       		rts	
0000AC4E                            ; ===========================================================================
0000AC4E                            
0000AC4E                            Obj26_NotBroken:			; XREF: Obj26_Main
0000AC4E 117C 0046 0020             		move.b	#$46,$20(a0)
0000AC54 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000AC5A                            
0000AC5A                            Obj26_Solid:				; XREF: Obj26_Index
0000AC5A 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000AC5E 6700                       		beq.s	loc_A1EC	; if not, branch
0000AC60 5500                       		subq.b	#2,d0
0000AC62 6600                       		bne.s	Obj26_Fall
0000AC64 7200                       		moveq	#0,d1
0000AC66 1228 0019                  		move.b	$19(a0),d1
0000AC6A 0641 000B                  		addi.w	#$B,d1
0000AC6E 6100 D3FC                  		bsr.w	ExitPlatform
0000AC72 0829 0003 0022             		btst	#3,$22(a1)
0000AC78 6600 0000                  		bne.w	loc_A1BC
0000AC7C 4228 0025                  		clr.b	$25(a0)
0000AC80 6000 0000                  		bra.w	Obj26_Animate
0000AC84                            ; ===========================================================================
0000AC84                            
0000AC84                            loc_A1BC:				; XREF: Obj26_Solid
0000AC84 363C 0010                  		move.w	#$10,d3
0000AC88 3428 0008                  		move.w	8(a0),d2
0000AC8C 6100 D93C                  		bsr.w	MvSonicOnPtfm
0000AC90 6000 0000                  		bra.w	Obj26_Animate
0000AC94                            ; ===========================================================================
0000AC94                            
0000AC94                            Obj26_Fall:				; XREF: Obj26_Solid
0000AC94 6100 0000                  		bsr.w	ObjectFall
0000AC98 4EB9 0000 0000             		jsr	ObjHitFloor
0000AC9E 4A41                       		tst.w	d1
0000ACA0 6A00 0000                  		bpl.w	Obj26_Animate
0000ACA4 D368 000C                  		add.w	d1,$C(a0)
0000ACA8 4268 0012                  		clr.w	$12(a0)
0000ACAC 4228 0025                  		clr.b	$25(a0)
0000ACB0 6000 0000                  		bra.w	Obj26_Animate
0000ACB4                            ; ===========================================================================
0000ACB4                            
0000ACB4                            loc_A1EC:				; XREF: Obj26_Solid
0000ACB4 323C 001A                  		move.w	#$1A,d1
0000ACB8 343C 000F                  		move.w	#$F,d2
0000ACBC 6100 0000                  		bsr.w	Obj26_SolidSides
0000ACC0 6700 0000                  		beq.w	loc_A25C
0000ACC4 4A69 0012                  		tst.w	$12(a1)
0000ACC8 6B00                       		bmi.s	loc_A20A
0000ACCA 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000ACD0 6700                       		beq.s	loc_A25C	; if yes, branch
0000ACD2 0C29 001F 001C             		cmpi.b	#$1F,$1C(a1)	; is Sonic spin-dashing?
0000ACD8 6700                       		beq.s	loc_A25C	; if yes, branch
0000ACDA                            
0000ACDA                            loc_A20A:
0000ACDA 4A41                       		tst.w	d1
0000ACDC 6A00                       		bpl.s	loc_A220
0000ACDE 9769 000C                  		sub.w	d3,$C(a1)
0000ACE2 6100 D276                  		bsr.w	loc_74AE
0000ACE6 117C 0002 0025             		move.b	#2,$25(a0)
0000ACEC 6000 0000                  		bra.w	Obj26_Animate
0000ACF0                            ; ===========================================================================
0000ACF0                            
0000ACF0                            loc_A220:
0000ACF0 4A40                       		tst.w	d0
0000ACF2 6700 0000                  		beq.w	loc_A246
0000ACF6 6B00                       		bmi.s	loc_A230
0000ACF8 4A69 0010                  		tst.w	$10(a1)
0000ACFC 6B00                       		bmi.s	loc_A246
0000ACFE 6000                       		bra.s	loc_A236
0000AD00                            ; ===========================================================================
0000AD00                            
0000AD00                            loc_A230:
0000AD00 4A69 0010                  		tst.w	$10(a1)
0000AD04 6A00                       		bpl.s	loc_A246
0000AD06                            
0000AD06                            loc_A236:
0000AD06 9169 0008                  		sub.w	d0,8(a1)
0000AD0A 337C 0000 0014             		move.w	#0,$14(a1)
0000AD10 337C 0000 0010             		move.w	#0,$10(a1)
0000AD16                            
0000AD16                            loc_A246:
0000AD16 0829 0001 0022             		btst	#1,$22(a1)
0000AD1C 6600                       		bne.s	loc_A26A
0000AD1E 08E9 0005 0022             		bset	#5,$22(a1)
0000AD24 08E8 0005 0022             		bset	#5,$22(a0)
0000AD2A 6000                       		bra.s	Obj26_Animate
0000AD2C                            ; ===========================================================================
0000AD2C                            
0000AD2C                            loc_A25C:
0000AD2C 0828 0005 0022             		btst	#5,$22(a0)
0000AD32 6700                       		beq.s	Obj26_Animate
0000AD34 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
0000AD3A 6700                       		beq.s	loc_A26A
0000AD3C 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
0000AD42 6700                       		beq.s	loc_A26A
0000AD44 337C 0001 001C             		move.w	#1,$1C(a1)
0000AD4A                            
0000AD4A                            loc_A26A:
0000AD4A 08A8 0005 0022             		bclr	#5,$22(a0)
0000AD50 08A9 0005 0022             		bclr	#5,$22(a1)
0000AD56                            
0000AD56                            Obj26_Animate:				; XREF: Obj26_Index
0000AD56 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000AD5C 6100 0000                  		bsr.w	AnimateSprite
0000AD60                            
0000AD60                            Obj26_Display:				; XREF: Obj26_Index
0000AD60 6100 0000                  		bsr.w	DisplaySprite
0000AD64 3028 0008                  		move.w	8(a0),d0
0000AD68 0240 FF80                  		andi.w	#$FF80,d0
0000AD6C 3238 F700                  		move.w	($FFFFF700).w,d1
0000AD70 0441 0080                  		subi.w	#$80,d1
0000AD74 0241 FF80                  		andi.w	#$FF80,d1
0000AD78 9041                       		sub.w	d1,d0
0000AD7A 0C40 0280                  		cmpi.w	#$280,d0
0000AD7E 6200 0000                  		bhi.w	DeleteObject
0000AD82 4E75                       		rts	
0000AD84                            ; ===========================================================================
0000AD84                            
0000AD84                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000AD84 5428 0024                  		addq.b	#2,$24(a0)
0000AD88 117C 0000 0020             		move.b	#0,$20(a0)
0000AD8E 6100 0000                  		bsr.w	SingleObjLoad
0000AD92 6600                       		bne.s	Obj26_Explode
0000AD94 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000AD98 3368 0008 0008             		move.w	8(a0),8(a1)
0000AD9E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000ADA4 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000ADAA                            
0000ADAA                            Obj26_Explode:
0000ADAA 6100 0000                  		bsr.w	SingleObjLoad
0000ADAE 6600                       		bne.s	Obj26_SetBroken
0000ADB0 12BC 0027                  		move.b	#$27,0(a1)	; load explosion object
0000ADB4 5429 0024                  		addq.b	#2,$24(a1)
0000ADB8 3368 0008 0008             		move.w	8(a0),8(a1)
0000ADBE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000ADC4                            
0000ADC4                            Obj26_SetBroken:
0000ADC4 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000ADC8 7000                       		moveq	#0,d0
0000ADCA 1028 0023                  		move.b	$23(a0),d0
0000ADCE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000ADD4 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000ADDA 6000 0000                  		bra.w	DisplaySprite
0000ADDE                            ; ===========================================================================
0000ADDE                            ; ---------------------------------------------------------------------------
0000ADDE                            ; Object 2E - contents of monitors
0000ADDE                            ; ---------------------------------------------------------------------------
0000ADDE                            
0000ADDE                            Obj2E:					; XREF: Obj_Index
0000ADDE 7000                       		moveq	#0,d0
0000ADE0 1028 0024                  		move.b	$24(a0),d0
0000ADE4 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000ADE8 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000ADEC 6000 0000                  		bra.w	DisplaySprite
0000ADF0                            ; ===========================================================================
0000ADF0 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000ADF2 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000ADF4 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000ADF6                            ; ===========================================================================
0000ADF6                            
0000ADF6                            Obj2E_Main:				; XREF: Obj2E_Index
0000ADF6 5428 0024                  		addq.b	#2,$24(a0)
0000ADFA 317C 0680 0002             		move.w	#$680,2(a0)
0000AE00 117C 0024 0001             		move.b	#$24,1(a0)
0000AE06 117C 0003 0018             		move.b	#3,$18(a0)
0000AE0C 117C 0008 0019             		move.b	#8,$19(a0)
0000AE12 317C FD00 0012             		move.w	#-$300,$12(a0)
0000AE18 7000                       		moveq	#0,d0
0000AE1A 1028 001C                  		move.b	$1C(a0),d0
0000AE1E 5400                       		addq.b	#2,d0
0000AE20 1140 001A                  		move.b	d0,$1A(a0)
0000AE24 227C 0000 0000             		movea.l	#Map_obj26,a1
0000AE2A D000                       		add.b	d0,d0
0000AE2C D2F1 0000                  		adda.w	(a1,d0.w),a1
0000AE30 5249                       		addq.w	#1,a1
0000AE32 2149 0004                  		move.l	a1,4(a0)
0000AE36                            
0000AE36                            Obj2E_Move:				; XREF: Obj2E_Index
0000AE36 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000AE3A 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000AE3E 6100 0000                  		bsr.w	SpeedToPos
0000AE42 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000AE48 4E75                       		rts	
0000AE4A                            ; ===========================================================================
0000AE4A                            
0000AE4A                            Obj2E_ChkEggman:    ; XREF: Obj2E_Move
0000AE4A 5428 0024                          addq.b    #2,$24(a0)
0000AE4E 317C 001D 001E                     move.w    #29,$1E(a0)
0000AE54 1028 001C                          move.b    $1C(a0),d0
0000AE58 0C00 0001                          cmpi.b    #1,d0; does monitor contain Eggman?
0000AE5C 6600                               bne.s    Obj2E_ChkSonic ; if not, go and check for the next monitor type (1-up icon)
0000AE5E 2248                               move.l    a0,a1 ; move a0 to a1, because Touch_ChkHurt wants the damaging object to be in a1
0000AE60 2F08                               move.l    a0,-(sp) ; push a0 on the stack, and decrement stack pointer
0000AE62 41F8 D000                          lea    ($FFFFD000).w,a0 ; put Sonic's ram address in a0, because Touch_ChkHurt wants the damaged object to be in a0
0000AE66 4EB9 0000 0000                     jsr    Sonic_CheckGoSuper ; run the Touch_ChkHurt routine
0000AE6C 205F                               move.l    (sp)+,a0 ; pop the previous value of a0 from the stack, and increment stack pointer
0000AE6E 4E75                               rts ; The Eggman monitor now does something!
0000AE70                            
0000AE70                            ; ===========================================================================
0000AE70                            
0000AE70                            Obj2E_ChkSonic:
0000AE70 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000AE74 6600                       		bne.s	Obj2E_ChkShoes
0000AE76                            
0000AE76                            ExtraLife:
0000AE76 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000AE7A 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000AE7E 303C 0088                  		move.w	#$88,d0
0000AE82 4EF9 0000 1470             		jmp	(PlaySound).l	; play extra life music
0000AE88                            ; ===========================================================================
0000AE88                            
0000AE88                            Obj2E_ChkShoes:
0000AE88 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000AE8C 6600                       		bne.s	Obj2E_ChkShield
0000AE8E 0C38 0001 FE19             		cmpi.b #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
0000AE94 6700 0000                                  beq Obj2E_NoMusic		
0000AE98 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000AE9E 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000AEA4 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000AEAA 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000AEB0 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000AEB6 303C 009E                  		move.w	#$9E,d0
0000AEBA 4EF9 0000 1470             		jmp	(PlaySound).l	; Speed	up the music
0000AEC0                            ; ===========================================================================
0000AEC0                            
0000AEC0                            Obj2E_ChkShield:
0000AEC0 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000AEC4 6600                       		bne.s	Obj2E_ChkInvinc
0000AEC6 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000AECC 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000AED2 303C 00AF                  		move.w	#$AF,d0
0000AED6 4EF9 0000 1470             		jmp	(PlaySound).l	; play shield sound
0000AEDC                            ; ===========================================================================
0000AEDC                            
0000AEDC                            Obj2E_ChkInvinc:
0000AEDC 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000AEE0 6600                       		bne.s	Obj2E_ChkRings
0000AEE2 0C38 0001 FE19             		cmpi.b #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
0000AEE8 6700 0000                                  beq Obj2E_NoMusic		
0000AEEC 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000AEF2 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000AEF8 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000AEFE 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000AF04 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000AF0A 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000AF10 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000AF16 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000AF1C 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000AF22 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000AF28 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000AF2C 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000AF2E 303C 0087                  		move.w	#$87,d0
0000AF32 4EF9 0000 1470             		jmp	(PlaySound).l	; play invincibility music
0000AF38                            ; ===========================================================================
0000AF38                            
0000AF38                            Obj2E_NoMusic:
0000AF38 4E75                       		rts	
0000AF3A                            ; ===========================================================================
0000AF3A                            
0000AF3A                            Obj2E_ChkRings:
0000AF3A 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000AF3E 6600                       		bne.s	Obj2E_ChkS
0000AF40 0678 004A FE20             		addi.w	#$4A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000AF46 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000AF4C 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000AF52 6500                       		bcs.s	Obj2E_RingSound
0000AF54 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000AF5A 6700 FF1A                  		beq.w	ExtraLife
0000AF5E 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000AF64 6500                       		bcs.s	Obj2E_RingSound
0000AF66 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000AF6C 6700 FF08                  		beq.w	ExtraLife
0000AF70                            
0000AF70                            Obj2E_RingSound:
0000AF70 303C 00B5                  		move.w	#$B5,d0
0000AF74 4EF9 0000 1470             		jmp	(PlaySound).l	; play ring sound
0000AF7A                            ; ===========================================================================
0000AF7A                            
0000AF7A                            Obj2E_ChkS:
0000AF7A 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000AF7E 6600                       		bne.s	Obj2E_ChkEnd
0000AF80 4E71                       		nop	
0000AF82                            
0000AF82                            Obj2E_ChkEnd:
0000AF82 4E75                       		rts			; 'S' and goggles monitors do nothing
0000AF84                            ; ===========================================================================
0000AF84                            
0000AF84                            Obj2E_Delete:				; XREF: Obj2E_Index
0000AF84 5368 001E                  		subq.w	#1,$1E(a0)
0000AF88 6B00 0000                  		bmi.w	DeleteObject
0000AF8C 4E75                       		rts	
0000AF8E                            ; ---------------------------------------------------------------------------
0000AF8E                            ; Subroutine to	make the sides of a monitor solid
0000AF8E                            ; ---------------------------------------------------------------------------
0000AF8E                            
0000AF8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AF8E                            
0000AF8E                            
0000AF8E                            Obj26_SolidSides:			; XREF: loc_A1EC
0000AF8E 43F8 D000                  		lea	($FFFFD000).w,a1
0000AF92 3029 0008                  		move.w	8(a1),d0
0000AF96 9068 0008                  		sub.w	8(a0),d0
0000AF9A D041                       		add.w	d1,d0
0000AF9C 6B00                       		bmi.s	loc_A4E6
0000AF9E 3601                       		move.w	d1,d3
0000AFA0 D643                       		add.w	d3,d3
0000AFA2 B043                       		cmp.w	d3,d0
0000AFA4 6200                       		bhi.s	loc_A4E6
0000AFA6 1629 0016                  		move.b	$16(a1),d3
0000AFAA 4883                       		ext.w	d3
0000AFAC D443                       		add.w	d3,d2
0000AFAE 3629 000C                  		move.w	$C(a1),d3
0000AFB2 9668 000C                  		sub.w	$C(a0),d3
0000AFB6 D642                       		add.w	d2,d3
0000AFB8 6B00                       		bmi.s	loc_A4E6
0000AFBA D442                       		add.w	d2,d2
0000AFBC B642                       		cmp.w	d2,d3
0000AFBE 6400                       		bcc.s	loc_A4E6
0000AFC0 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000AFC4 6B00                       		bmi.s	loc_A4E6
0000AFC6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000AFCC 6400                       		bcc.s	loc_A4E6
0000AFCE 4A78 FE08                  		tst.w	($FFFFFE08).w
0000AFD2 6600                       		bne.s	loc_A4E6
0000AFD4 B240                       		cmp.w	d0,d1
0000AFD6 6400                       		bcc.s	loc_A4DC
0000AFD8 D241                       		add.w	d1,d1
0000AFDA 9041                       		sub.w	d1,d0
0000AFDC                            
0000AFDC                            loc_A4DC:
0000AFDC 0C43 0010                  		cmpi.w	#$10,d3
0000AFE0 6500                       		bcs.s	loc_A4EA
0000AFE2                            
0000AFE2                            loc_A4E2:
0000AFE2 7201                       		moveq	#1,d1
0000AFE4 4E75                       		rts	
0000AFE6                            ; ===========================================================================
0000AFE6                            
0000AFE6                            loc_A4E6:
0000AFE6 7200                       		moveq	#0,d1
0000AFE8 4E75                       		rts	
0000AFEA                            ; ===========================================================================
0000AFEA                            
0000AFEA                            loc_A4EA:
0000AFEA 7200                       		moveq	#0,d1
0000AFEC 1228 0019                  		move.b	$19(a0),d1
0000AFF0 5841                       		addq.w	#4,d1
0000AFF2 3401                       		move.w	d1,d2
0000AFF4 D442                       		add.w	d2,d2
0000AFF6 D269 0008                  		add.w	8(a1),d1
0000AFFA 9268 0008                  		sub.w	8(a0),d1
0000AFFE 6BE2                       		bmi.s	loc_A4E2
0000B000 B242                       		cmp.w	d2,d1
0000B002 64DE                       		bcc.s	loc_A4E2
0000B004 72FF                       		moveq	#-1,d1
0000B006 4E75                       		rts	
0000B008                            ; End of function Obj26_SolidSides
0000B008                            
0000B008                            ; ===========================================================================
0000B008                            Ani_obj26:
0000B008                            	include "_anim\obj26.asm"
0000B008                            ; ---------------------------------------------------------------------------
0000B008                            ; Animation script - monitors
0000B008                            ; ---------------------------------------------------------------------------
0000B008 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000B00E 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000B014 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000B01A 0000                       		dc.w byte_A582-Ani_obj26
0000B01C 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000B022 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000B02E 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000B03A 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000B046 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000B052 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000B05E 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000B06A 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000B076 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000B082 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000B08A                            		even
0000B08A                            		even
0000B08A                            
0000B08A                            ; ---------------------------------------------------------------------------
0000B08A                            ; Sprite mappings - monitors
0000B08A                            ; ---------------------------------------------------------------------------
0000B08A                            Map_obj26:
0000B08A                            	include "_maps\obj26.asm"
0000B08A                            ; ---------------------------------------------------------------------------
0000B08A                            ; Sprite mappings - monitors (Optimized) Ported by -paranoimia-
0000B08A                            ; ---------------------------------------------------------------------------
0000B08A 0000 0000                  		dc.w byte_A5A2-Map_obj26, byte_A5A8-Map_obj26
0000B08E 0000 0000                  		dc.w byte_A5B3-Map_obj26, byte_A5BE-Map_obj26
0000B092 0000 0000                  		dc.w byte_A5C9-Map_obj26, byte_A5D4-Map_obj26
0000B096 0000 0000                  		dc.w byte_A5DF-Map_obj26, byte_A5EA-Map_obj26
0000B09A 0000 0000                  		dc.w byte_A5F5-Map_obj26, byte_A600-Map_obj26
0000B09E 0000 0000                  		dc.w byte_A60B-Map_obj26, byte_A616-Map_obj26
0000B0A2 01                         byte_A5A2:	dc.b 1			; static monitor
0000B0A3 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0A8 02                         byte_A5A8:	dc.b 2			; static monitor
0000B0A9 F505 0010 F8               		dc.b $F5, 5, 0,	$10, $F8
0000B0AE EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0B3 02                         byte_A5B3:	dc.b 2			; static monitor
0000B0B4 F505 0014 F8               		dc.b $F5, 5, 0,	$14, $F8
0000B0B9 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0BE 02                         byte_A5BE:	dc.b 2			; Eggman monitor
0000B0BF F505 0018 F8               		dc.b $F5, 5, 0,	$18, $F8
0000B0C4 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0C9 02                         byte_A5C9:	dc.b 2			; Sonic	monitor
0000B0CA F505 001C F8               		dc.b $F5, 5, 0,	$1C, $F8
0000B0CF EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0D4 02                         byte_A5D4:	dc.b 2			; speed	shoes monitor
0000B0D5 F505 0024 F8               		dc.b $F5, 5, 0,	$24, $F8
0000B0DA EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0DF 02                         byte_A5DF:	dc.b 2			; shield monitor
0000B0E0 F505 0028 F8               		dc.b $F5, 5, 0,	$28, $F8
0000B0E5 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0EA 02                         byte_A5EA:	dc.b 2			; invincibility	monitor
0000B0EB F505 002C F8               		dc.b $F5, 5, 0,	$2C, $F8
0000B0F0 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0F5 02                         byte_A5F5:	dc.b 2			; 10 rings monitor
0000B0F6 F505 0020 F8               		dc.b $F5, 5, 0,	$20, $F8
0000B0FB EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B100 02                         byte_A600:	dc.b 2			; 'S' monitor
0000B101 F505 003C F8               		dc.b $F5, 5, 0,	$3C, $F8
0000B106 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B10B 02                         byte_A60B:	dc.b 2			; goggles monitor
0000B10C F505 0038 F8               		dc.b $F5, 5, 0,	$38, $F8
0000B111 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B116 01                         byte_A616:	dc.b 1			; broken monitor
0000B117 FF0D 0030 F0               		dc.b $FF, $D, 0, $30, $F0
0000B11C                            		even
0000B11C                            		even
0000B11C                            
0000B11C                            ; ===========================================================================
0000B11C                            ; ---------------------------------------------------------------------------
0000B11C                            ; Object 0E - Sonic on the title screen
0000B11C                            ; ---------------------------------------------------------------------------
0000B11C                            
0000B11C                            Obj0E:					; XREF: Obj_Index
0000B11C 7000                       		moveq	#0,d0
0000B11E 1028 0024                  		move.b	$24(a0),d0
0000B122 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000B126 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000B12A                            ; ===========================================================================
0000B12A 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000B12C 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000B12E 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000B130 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000B132                            ; ===========================================================================
0000B132                            
0000B132                            Obj0E_Main:				; XREF: Obj0E_Index
0000B132 5428 0024                  		addq.b	#2,$24(a0)
0000B136 317C 00F8 0008             		move.w	#$F8,8(a0)
0000B13C 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000B142 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000B14A 317C 2300 0002             		move.w	#$2300,2(a0)
0000B150 117C 0001 0018             		move.b	#1,$18(a0)
0000B156 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000B15C 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B162 6100 0000                  		bsr.w	AnimateSprite
0000B166                            
0000B166                            Obj0E_Delay:				; XREF: Obj0E_Index
0000B166 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000B16A 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000B16C 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000B170 6000 0000                  		bra.w	DisplaySprite
0000B174                            ; ===========================================================================
0000B174                            
0000B174                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000B174 4E75                       		rts	
0000B176                            ; ===========================================================================
0000B176                            
0000B176                            Obj0E_Move:				; XREF: Obj0E_Index
0000B176 5168 000A                  		subq.w	#8,$A(a0)
0000B17A 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000B180 6600                       		bne.s	Obj0E_Display
0000B182 5428 0024                  		addq.b	#2,$24(a0)
0000B186                            
0000B186                            Obj0E_Display:
0000B186 6000 0000                  		bra.w	DisplaySprite
0000B18A                            ; ===========================================================================
0000B18A 4E75                       		rts	
0000B18C                            ; ===========================================================================
0000B18C                            
0000B18C                            Obj0E_Animate:				; XREF: Obj0E_Index
0000B18C 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B192 6100 0000                  		bsr.w	AnimateSprite
0000B196 6000 0000                  		bra.w	DisplaySprite
0000B19A                            ; ===========================================================================
0000B19A 4E75                       		rts	
0000B19C                            ; ===========================================================================
0000B19C                            ; ---------------------------------------------------------------------------
0000B19C                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000B19C                            ; ---------------------------------------------------------------------------
0000B19C                            
0000B19C                            Obj0F:					; XREF: Obj_Index
0000B19C 7000                       		moveq	#0,d0
0000B19E 1028 0024                  		move.b	$24(a0),d0
0000B1A2 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000B1A6 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000B1AA 6000 0000                  		bra.w	DisplaySprite
0000B1AE                            ; ===========================================================================
0000B1AE 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000B1B0 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000B1B2 0000                       		dc.w locret_A6F8-Obj0F_Index
0000B1B4                            ; ===========================================================================
0000B1B4                            
0000B1B4                            Obj0F_Main:				; XREF: Obj0F_Index
0000B1B4 5428 0024                  		addq.b	#2,$24(a0)
0000B1B8 317C 00D8 0008             		move.w	#$D8,8(a0)
0000B1BE 317C 0130 000A             		move.w	#$130,$A(a0)
0000B1C4 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000B1CC 317C 0200 0002             		move.w	#$200,2(a0)
0000B1D2 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000B1D8 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000B1DA 5428 0024                  		addq.b	#2,$24(a0)
0000B1DE 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000B1E4 6600                       		bne.s	locret_A6F8	; if not, branch
0000B1E6 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000B1EC 317C 0178 0008             		move.w	#$178,8(a0)
0000B1F2 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000B1F8                            
0000B1F8                            locret_A6F8:				; XREF: Obj0F_Index
0000B1F8 4E75                       		rts	
0000B1FA                            ; ===========================================================================
0000B1FA                            
0000B1FA                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000B1FA 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000B200 6000 0000                  		bra.w	AnimateSprite
0000B204                            ; ===========================================================================
0000B204                            Ani_obj0E:
0000B204                            	include "_anim\obj0E.asm"
0000B204                            ; ---------------------------------------------------------------------------
0000B204                            ; Animation script - Sonic on the title screen
0000B204                            ; ---------------------------------------------------------------------------
0000B204 0000                       		dc.w byte_A706-Ani_obj0E
0000B206 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000B212                            		even
0000B212                            		even
0000B212                            
0000B212                            Ani_obj0F:
0000B212                            	include "_anim\obj0F.asm"
0000B212                            ; ---------------------------------------------------------------------------
0000B212                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000B212                            ; ---------------------------------------------------------------------------
0000B212 0000                       		dc.w byte_A714-Ani_obj0F
0000B214 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000B218                            		even
0000B218                            		even
0000B218                            
0000B218                            ; ---------------------------------------------------------------------------
0000B218                            ; Subroutine to	animate	a sprite using an animation script
0000B218                            ; ---------------------------------------------------------------------------
0000B218                            
0000B218                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B218                            
0000B218                            
0000B218                            AnimateSprite:
0000B218 7000                       		moveq	#0,d0
0000B21A 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000B21E B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000B222 6700                       		beq.s	Anim_Run	; if not, branch
0000B224 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000B228 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B22E 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000B234                            
0000B234                            Anim_Run:
0000B234 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000B238 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000B23A D040                       		add.w	d0,d0
0000B23C D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000B240 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000B244 7200                       		moveq	#0,d1
0000B246 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000B24A 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000B24E 0C00 00FA                  		cmp.b	#$FA,d0					; MJ: is it a flag from FA to FF?
0000B252 6400 0000                  		bhs	Anim_End_FF				; MJ: if so, branch to flag routines
0000B256                            
0000B256                            Anim_Next:
0000B256 1200                       		move.b	d0,d1
0000B258 0200 001F                  		andi.b	#$1F,d0
0000B25C 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000B260 1028 0022                  		move.b	$22(a0),d0
0000B264 E719                       		rol.b	#3,d1
0000B266 B101                       		eor.b	d0,d1
0000B268 0201 0003                  		andi.b	#3,d1
0000B26C 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000B272 8328 0001                  		or.b	d1,1(a0)
0000B276 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000B27A                            
0000B27A                            Anim_Wait:
0000B27A 4E75                       		rts	
0000B27C                            ; ===========================================================================
0000B27C                            
0000B27C                            Anim_End_FF:
0000B27C 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000B27E 6600                       		bne.s	Anim_End_FE	; if not, branch
0000B280 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000B286 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000B28A 60CA                       		bra.s	Anim_Next
0000B28C                            ; ===========================================================================
0000B28C                            
0000B28C                            Anim_End_FE:
0000B28C 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000B28E 6600                       		bne.s	Anim_End_FD	; if not, branch
0000B290 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000B294 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000B298 9200                       		sub.b	d0,d1
0000B29A 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000B29E 60B6                       		bra.s	Anim_Next
0000B2A0                            ; ===========================================================================
0000B2A0                            
0000B2A0                            Anim_End_FD:
0000B2A0 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000B2A2 6600                       		bne.s	Anim_End_FC	; if not, branch
0000B2A4 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000B2AA                            
0000B2AA                            Anim_End_FC:
0000B2AA 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000B2AC 6600                       		bne.s	Anim_End_FB	; if not, branch
0000B2AE 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000B2B2                            
0000B2B2                            Anim_End_FB:
0000B2B2 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000B2B4 6600                       		bne.s	Anim_End_FA	; if not, branch
0000B2B6 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B2BC 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000B2C0                            
0000B2C0                            Anim_End_FA:
0000B2C0 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000B2C2 6600                       		bne.s	Anim_End	; if not, branch
0000B2C4 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000B2C8                            
0000B2C8                            Anim_End:
0000B2C8 4E75                       		rts	
0000B2CA                            ; End of function AnimateSprite
0000B2CA                            
0000B2CA                            ; ===========================================================================
0000B2CA                            ; ---------------------------------------------------------------------------
0000B2CA                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B2CA                            ; ---------------------------------------------------------------------------
0000B2CA                            Map_obj0F:
0000B2CA                            	include "_maps\obj0F.asm"
0000B2CA                            ; ---------------------------------------------------------------------------
0000B2CA                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B2CA                            ; ---------------------------------------------------------------------------
0000B2CA 0000                       		dc.w byte_A7CD-Map_obj0F
0000B2CC 0000                       		dc.w byte_A7CC-Map_obj0F
0000B2CE 0000                       		dc.w byte_A7EB-Map_obj0F
0000B2D0 0000                       		dc.w byte_A882-Map_obj0F
0000B2D2 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000B2D3 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000B2D8 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000B2DD 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000B2E2 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000B2E7 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000B2EC 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000B2F1 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000B2F2 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B2F7 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B2FC B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B301 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B306 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B30B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B310 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B315 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B31A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B31F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B324 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B329 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B32E D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B333 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B338 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B33D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B342 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B347 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B34C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B351 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B356 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B35B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B360 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B365 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B36A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B36F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B374 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B379 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B37E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B383 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B388 01                         byte_A882:	dc.b 1			; "TM"
0000B389 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000B38E                            		even
0000B38E                            		even
0000B38E                            
0000B38E                            ; ---------------------------------------------------------------------------
0000B38E                            ; Sprite mappings - Sonic on the title screen
0000B38E                            ; ---------------------------------------------------------------------------
0000B38E                            Map_obj0E:
0000B38E                            	include "_maps\obj0E.asm"
0000B38E                            ; ---------------------------------------------------------------------------
0000B38E                            ; Sprite mappings - Sonic on the title screen
0000B38E                            ; ---------------------------------------------------------------------------
0000B38E 0000                       		dc.w byte_A898-Map_obj0E
0000B390 0000                       		dc.w byte_A8CB-Map_obj0E
0000B392 0000                       		dc.w byte_A917-Map_obj0E
0000B394 0000                       		dc.w byte_A96D-Map_obj0E
0000B396 0000                       		dc.w byte_A9AF-Map_obj0E
0000B398 0000                       		dc.w byte_A9E7-Map_obj0E
0000B39A 0000                       		dc.w byte_AA47-Map_obj0E
0000B39C 0000                       		dc.w byte_AAB1-Map_obj0E
0000B39E 0A                         byte_A898:	dc.b $A
0000B39F 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000B3A4 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000B3A9 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000B3AE 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000B3B3 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000B3B8 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000B3BD 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000B3C2 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000B3C7 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000B3CC 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000B3D1 0F                         byte_A8CB:	dc.b $F
0000B3D2 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000B3D7 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000B3DC 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000B3E1 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000B3E6 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000B3EB 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000B3F0 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000B3F5 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000B3FA 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000B3FF 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000B404 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000B409 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000B40E 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000B413 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000B418 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000B41D 11                         byte_A917:	dc.b $11
0000B41E 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000B423 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000B428 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000B42D 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000B432 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000B437 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000B43C 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000B441 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000B446 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000B44B 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000B450 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000B455 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000B45A 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000B45F 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000B464 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000B469 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000B46E 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000B473 0D                         byte_A96D:	dc.b $D
0000B474 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000B479 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000B47E 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000B483 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000B488 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000B48D 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000B492 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000B497 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000B49C 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000B4A1 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000B4A6 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000B4AB 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000B4B0 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000B4B5 0B                         byte_A9AF:	dc.b $B
0000B4B6 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000B4BB 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000B4C0 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000B4C5 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000B4CA 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000B4CF 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000B4D4 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000B4D9 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000B4DE 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000B4E3 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000B4E8 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000B4ED 13                         byte_A9E7:	dc.b $13
0000B4EE 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000B4F3 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000B4F8 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000B4FD 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000B502 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000B507 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000B50C 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000B511 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000B516 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000B51B 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000B520 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000B525 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000B52A 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000B52F 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000B534 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000B539 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000B53E 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000B543 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000B548 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000B54D 15                         byte_AA47:	dc.b $15
0000B54E 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000B553 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000B558 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000B55D 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000B562 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000B567 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000B56C 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000B571 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000B576 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000B57B 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000B580 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000B585 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000B58A 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000B58F 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000B594 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000B599 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000B59E 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000B5A3 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000B5A8 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000B5AD 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000B5B2 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000B5B7 16                         byte_AAB1:	dc.b $16
0000B5B8 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000B5BD 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000B5C2 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000B5C7 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000B5CC 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000B5D1 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000B5D6 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000B5DB 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000B5E0 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000B5E5 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000B5EA 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000B5EF 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000B5F4 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000B5F9 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000B5FE 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000B603 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000B608 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000B60D 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000B612 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000B617 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000B61C 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000B621 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000B626                            		even
0000B626                            		even
0000B626                            
0000B626                            ; ===========================================================================
0000B626                            ; ---------------------------------------------------------------------------
0000B626                            ; Object 2B - Chopper enemy (GHZ)
0000B626                            ; ---------------------------------------------------------------------------
0000B626                            
0000B626                            Obj2B:					; XREF: Obj_Index
0000B626 7000                       		moveq	#0,d0
0000B628 1028 0024                  		move.b	$24(a0),d0
0000B62C 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B630 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B634 6000 0000                  		bra.w	MarkObjGone
0000B638                            ; ===========================================================================
0000B638 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B63A 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B63C                            ; ===========================================================================
0000B63C                            
0000B63C                            Obj2B_Main:				; XREF: Obj2B_Index
0000B63C 5428 0024                  		addq.b	#2,$24(a0)
0000B640 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B648 317C 047B 0002             		move.w	#$47B,2(a0)
0000B64E 117C 0004 0001             		move.b	#4,1(a0)
0000B654 117C 0004 0018             		move.b	#4,$18(a0)
0000B65A 117C 0009 0020             		move.b	#9,$20(a0)
0000B660 117C 0010 0019             		move.b	#$10,$19(a0)
0000B666 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B66C 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B672                            
0000B672                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B672 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B678 6100 FB9E                  		bsr.w	AnimateSprite
0000B67C 6100 0000                  		bsr.w	SpeedToPos
0000B680 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B686 3028 0030                  		move.w	$30(a0),d0
0000B68A B068 000C                  		cmp.w	$C(a0),d0
0000B68E 6400                       		bcc.s	Obj2B_ChgAni
0000B690 3140 000C                  		move.w	d0,$C(a0)
0000B694 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B69A                            
0000B69A                            Obj2B_ChgAni:
0000B69A 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B6A0 0440 00C0                  		subi.w	#$C0,d0
0000B6A4 B068 000C                  		cmp.w	$C(a0),d0
0000B6A8 6400                       		bcc.s	locret_ABB6
0000B6AA 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B6B0 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B6B4 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B6B6 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B6BC                            
0000B6BC                            locret_ABB6:
0000B6BC 4E75                       		rts	
0000B6BE                            ; ===========================================================================
0000B6BE                            Ani_obj2B:
0000B6BE                            	include "_anim\obj2B.asm"
0000B6BE                            ; ---------------------------------------------------------------------------
0000B6BE                            ; Animation script - Chopper enemy
0000B6BE                            ; ---------------------------------------------------------------------------
0000B6BE 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B6C0 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B6C2 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B6C4 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B6C8 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B6CC 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B6D0 00                         		even
0000B6D0 00                         		even
0000B6D0                            
0000B6D0                            ; ---------------------------------------------------------------------------
0000B6D0                            ; Sprite mappings - Chopper enemy (GHZ)
0000B6D0                            ; ---------------------------------------------------------------------------
0000B6D0                            Map_obj2B:
0000B6D0                            	include "_maps\obj2B.asm"
0000B6D0                            ; ---------------------------------------------------------------------------
0000B6D0                            ; Sprite mappings - Chopper enemy (GHZ)
0000B6D0                            ; ---------------------------------------------------------------------------
0000B6D0 0000                       		dc.w byte_ABCE-Map_obj2B
0000B6D2 0000                       		dc.w byte_ABD4-Map_obj2B
0000B6D4 01                         byte_ABCE:	dc.b 1
0000B6D5 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000B6DA 01                         byte_ABD4:	dc.b 1
0000B6DB F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000B6E0                            		even
0000B6E0                            		even
0000B6E0                            
0000B6E0                            ; ===========================================================================
0000B6E0                            ; ---------------------------------------------------------------------------
0000B6E0                            ; Object 2C - Jaws enemy (LZ)
0000B6E0                            ; ---------------------------------------------------------------------------
0000B6E0                            
0000B6E0                            Obj2C:					; XREF: Obj_Index
0000B6E0 7000                       		moveq	#0,d0
0000B6E2 1028 0024                  		move.b	$24(a0),d0
0000B6E6 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B6EA 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B6EE                            ; ===========================================================================
0000B6EE 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B6F0 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B6F2                            ; ===========================================================================
0000B6F2                            
0000B6F2                            Obj2C_Main:				; XREF: Obj2C_Index
0000B6F2 5428 0024                  		addq.b	#2,$24(a0)
0000B6F6 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B6FE 317C 2486 0002             		move.w	#$2486,2(a0)
0000B704 0028 0004 0001             		ori.b	#4,1(a0)
0000B70A 117C 000A 0020             		move.b	#$A,$20(a0)
0000B710 117C 0004 0018             		move.b	#4,$18(a0)
0000B716 117C 0010 0019             		move.b	#$10,$19(a0)
0000B71C 7000                       		moveq	#0,d0
0000B71E 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B722 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B724 5340                       		subq.w	#1,d0
0000B726 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B72A 3140 0032                  		move.w	d0,$32(a0)
0000B72E 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B734 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B73A 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B73C 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B740                            
0000B740                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B740 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B744 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B746 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B74C 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B750 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B756 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B75C                            
0000B75C                            Obj2C_Animate:
0000B75C 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B762 6100 FAB4                  		bsr.w	AnimateSprite
0000B766 6100 0000                  		bsr.w	SpeedToPos
0000B76A 6000 0000                  		bra.w	MarkObjGone
0000B76E                            ; ===========================================================================
0000B76E                            Ani_obj2C:
0000B76E                            	include "_anim\obj2C.asm"
0000B76E                            ; ---------------------------------------------------------------------------
0000B76E                            ; Animation script - Jaws enemy
0000B76E                            ; ---------------------------------------------------------------------------
0000B76E 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B770 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B776                            		even
0000B776                            		even
0000B776                            
0000B776                            ; ---------------------------------------------------------------------------
0000B776                            ; Sprite mappings - Jaws enemy (LZ)
0000B776                            ; ---------------------------------------------------------------------------
0000B776                            Map_obj2C:
0000B776                            	include "_maps\obj2C.asm"
0000B776                            ; ---------------------------------------------------------------------------
0000B776                            ; Sprite mappings - Jaws enemy (LZ)
0000B776                            ; ---------------------------------------------------------------------------
0000B776 0000                       		dc.w byte_AC78-Map_obj2C
0000B778 0000                       		dc.w byte_AC83-Map_obj2C
0000B77A 0000                       		dc.w byte_AC8E-Map_obj2C
0000B77C 0000                       		dc.w byte_AC99-Map_obj2C
0000B77E 02                         byte_AC78:	dc.b 2
0000B77F F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B784 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B789 02                         byte_AC83:	dc.b 2
0000B78A F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B78F F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B794 02                         byte_AC8E:	dc.b 2
0000B795 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B79A F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B79F 02                         byte_AC99:	dc.b 2
0000B7A0 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B7A5 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B7AA                            		even
0000B7AA                            		even
0000B7AA                            
0000B7AA                            ; ===========================================================================
0000B7AA                            ; ---------------------------------------------------------------------------
0000B7AA                            ; Object 2D - Burrobot enemy (LZ)
0000B7AA                            ; ---------------------------------------------------------------------------
0000B7AA                            
0000B7AA                            Obj2D:					; XREF: Obj_Index
0000B7AA 7000                       		moveq	#0,d0
0000B7AC 1028 0024                  		move.b	$24(a0),d0
0000B7B0 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B7B4 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B7B8                            ; ===========================================================================
0000B7B8 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B7BA 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B7BC                            ; ===========================================================================
0000B7BC                            
0000B7BC                            Obj2D_Main:				; XREF: Obj2D_Index
0000B7BC 5428 0024                  		addq.b	#2,$24(a0)
0000B7C0 117C 0013 0016             		move.b	#$13,$16(a0)
0000B7C6 117C 0008 0017             		move.b	#8,$17(a0)
0000B7CC 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B7D4 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B7DA 0028 0004 0001             		ori.b	#4,1(a0)
0000B7E0 117C 0004 0018             		move.b	#4,$18(a0)
0000B7E6 117C 0005 0020             		move.b	#5,$20(a0)
0000B7EC 117C 000C 0019             		move.b	#$C,$19(a0)
0000B7F2 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B7F6 117C 0002 001C             		move.b	#2,$1C(a0)
0000B7FC                            
0000B7FC                            Obj2D_Action:				; XREF: Obj2D_Index
0000B7FC 7000                       		moveq	#0,d0
0000B7FE 1028 0025                  		move.b	$25(a0),d0
0000B802 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B806 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B80A 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B810 6100 FA06                  		bsr.w	AnimateSprite
0000B814 6000 0000                  		bra.w	MarkObjGone
0000B818                            ; ===========================================================================
0000B818 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B81A 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B81C 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B81E 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B820                            ; ===========================================================================
0000B820                            
0000B820                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B820 5368 0030                  		subq.w	#1,$30(a0)
0000B824 6A00                       		bpl.s	locret_AD42
0000B826 5428 0025                  		addq.b	#2,$25(a0)
0000B82A 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B830 317C 0080 0010             		move.w	#$80,$10(a0)
0000B836 117C 0001 001C             		move.b	#1,$1C(a0)
0000B83C 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B842 6700                       		beq.s	locret_AD42
0000B844 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B848                            
0000B848                            locret_AD42:
0000B848 4E75                       		rts	
0000B84A                            ; ===========================================================================
0000B84A                            
0000B84A                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B84A 5368 0030                  		subq.w	#1,$30(a0)
0000B84E 6B00                       		bmi.s	loc_AD84
0000B850 6100 0000                  		bsr.w	SpeedToPos
0000B854 0868 0000 0032             		bchg	#0,$32(a0)
0000B85A 6600                       		bne.s	loc_AD78
0000B85C 3628 0008                  		move.w	8(a0),d3
0000B860 0643 000C                  		addi.w	#$C,d3
0000B864 0828 0000 0022             		btst	#0,$22(a0)
0000B86A 6600                       		bne.s	loc_AD6A
0000B86C 0443 0018                  		subi.w	#$18,d3
0000B870                            
0000B870                            loc_AD6A:
0000B870 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B876 0C41 000C                  		cmpi.w	#$C,d1
0000B87A 6C00                       		bge.s	loc_AD84
0000B87C 4E75                       		rts	
0000B87E                            ; ===========================================================================
0000B87E                            
0000B87E                            loc_AD78:				; XREF: Obj2D_Move
0000B87E 4EB9 0000 0000             		jsr	ObjHitFloor
0000B884 D368 000C                  		add.w	d1,$C(a0)
0000B888 4E75                       		rts	
0000B88A                            ; ===========================================================================
0000B88A                            
0000B88A                            loc_AD84:				; XREF: Obj2D_Move
0000B88A 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B890 6700                       		beq.s	loc_ADA4
0000B892 5528 0025                  		subq.b	#2,$25(a0)
0000B896 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B89C 317C 0000 0010             		move.w	#0,$10(a0)
0000B8A2 117C 0000 001C             		move.b	#0,$1C(a0)
0000B8A8 4E75                       		rts	
0000B8AA                            ; ===========================================================================
0000B8AA                            
0000B8AA                            loc_ADA4:
0000B8AA 5428 0025                  		addq.b	#2,$25(a0)
0000B8AE 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B8B4 117C 0002 001C             		move.b	#2,$1C(a0)
0000B8BA 4E75                       		rts	
0000B8BC                            ; ===========================================================================
0000B8BC                            
0000B8BC                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B8BC 6100 0000                  		bsr.w	SpeedToPos
0000B8C0 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B8C6 6B00                       		bmi.s	locret_ADF0
0000B8C8 117C 0003 001C             		move.b	#3,$1C(a0)
0000B8CE 4EB9 0000 0000             		jsr	ObjHitFloor
0000B8D4 4A41                       		tst.w	d1
0000B8D6 6A00                       		bpl.s	locret_ADF0
0000B8D8 D368 000C                  		add.w	d1,$C(a0)
0000B8DC 317C 0000 0012             		move.w	#0,$12(a0)
0000B8E2 117C 0001 001C             		move.b	#1,$1C(a0)
0000B8E8 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B8EE 5528 0025                  		subq.b	#2,$25(a0)
0000B8F2 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B8F6                            
0000B8F6                            locret_ADF0:
0000B8F6 4E75                       		rts	
0000B8F8                            ; ===========================================================================
0000B8F8                            
0000B8F8                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B8F8 343C 0060                  		move.w	#$60,d2
0000B8FC 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B900 6400                       		bcc.s	locret_AE20
0000B902 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B906 9068 000C                  		sub.w	$C(a0),d0
0000B90A 6400                       		bcc.s	locret_AE20
0000B90C 0C40 FF80                  		cmpi.w	#-$80,d0
0000B910 6500                       		bcs.s	locret_AE20
0000B912 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B916 6600                       		bne.s	locret_AE20
0000B918 5528 0025                  		subq.b	#2,$25(a0)
0000B91C 3141 0010                  		move.w	d1,$10(a0)
0000B920 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B926                            
0000B926                            locret_AE20:
0000B926 4E75                       		rts	
0000B928                            
0000B928                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B928                            
0000B928                            
0000B928                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B928 323C 0080                  		move.w	#$80,d1
0000B92C 08E8 0000 0022             		bset	#0,$22(a0)
0000B932 3038 D008                  		move.w	($FFFFD008).w,d0
0000B936 9068 0008                  		sub.w	8(a0),d0
0000B93A 6400                       		bcc.s	loc_AE40
0000B93C 4440                       		neg.w	d0
0000B93E 4441                       		neg.w	d1
0000B940 08A8 0000 0022             		bclr	#0,$22(a0)
0000B946                            
0000B946                            loc_AE40:
0000B946 B042                       		cmp.w	d2,d0
0000B948 4E75                       		rts	
0000B94A                            ; End of function Obj2D_ChkSonic2
0000B94A                            
0000B94A                            ; ===========================================================================
0000B94A                            Ani_obj2D:
0000B94A                            	include "_anim\obj2D.asm"
0000B94A                            ; ---------------------------------------------------------------------------
0000B94A                            ; Animation script - Burrobot enemy
0000B94A                            ; ---------------------------------------------------------------------------
0000B94A 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B94C 0000                       		dc.w byte_AE50-Ani_obj2D
0000B94E 0000                       		dc.w byte_AE54-Ani_obj2D
0000B950 0000                       		dc.w byte_AE58-Ani_obj2D
0000B952 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0000B956 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
0000B95A 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000B95E 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B962 00                         		even
0000B962 00                         		even
0000B962                            
0000B962                            ; ---------------------------------------------------------------------------
0000B962                            ; Sprite mappings - Burrobot enemy (LZ)
0000B962                            ; ---------------------------------------------------------------------------
0000B962                            Map_obj2D:
0000B962                            	include "_maps\obj2D.asm"
0000B962                            ; ---------------------------------------------------------------------------
0000B962                            ; Sprite mappings - Burrobot enemy (LZ)
0000B962                            ; ---------------------------------------------------------------------------
0000B962 0000                       		dc.w byte_AE6A-Map_obj2D
0000B964 0000                       		dc.w byte_AE75-Map_obj2D
0000B966 0000                       		dc.w byte_AE80-Map_obj2D
0000B968 0000                       		dc.w byte_AE8B-Map_obj2D
0000B96A 0000                       		dc.w byte_AE96-Map_obj2D
0000B96C 0000                       		dc.w byte_AEA1-Map_obj2D
0000B96E 0000                       		dc.w byte_AEAC-Map_obj2D
0000B970 02                         byte_AE6A:	dc.b 2
0000B971 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
0000B976 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000B97B 02                         byte_AE75:	dc.b 2
0000B97C EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000B981 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000B986 02                         byte_AE80:	dc.b 2
0000B987 E80A 001E F4               		dc.b $E8, $A, 0, $1E, $F4
0000B98C 000A 0027 F4               		dc.b 0,	$A, 0, $27, $F4
0000B991 02                         byte_AE8B:	dc.b 2
0000B992 E80A 0030 F4               		dc.b $E8, $A, 0, $30, $F4
0000B997 000A 0039 F4               		dc.b 0,	$A, 0, $39, $F4
0000B99C 02                         byte_AE96:	dc.b 2
0000B99D E80A 000F F0               		dc.b $E8, $A, 0, $F, $F0
0000B9A2 000A 0042 F4               		dc.b 0,	$A, 0, $42, $F4
0000B9A7 02                         byte_AEA1:	dc.b 2
0000B9A8 F406 004B E8               		dc.b $F4, 6, 0,	$4B, $E8
0000B9AD F40A 0051 F8               		dc.b $F4, $A, 0, $51, $F8
0000B9B2 02                         byte_AEAC:	dc.b 2
0000B9B3 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000B9B8 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000B9BE 00                         		even
0000B9BE 00                         		even
0000B9BE                            
0000B9BE                            ; ===========================================================================
0000B9BE                            ; ---------------------------------------------------------------------------
0000B9BE                            ; Object 2F - large moving platforms (MZ)
0000B9BE                            ; ---------------------------------------------------------------------------
0000B9BE                            
0000B9BE                            Obj2F:					; XREF: Obj_Index
0000B9BE 7000                       		moveq	#0,d0
0000B9C0 1028 0024                  		move.b	$24(a0),d0
0000B9C4 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B9C8 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B9CC                            ; ===========================================================================
0000B9CC 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B9CE 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B9D0                            
0000B9D0 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B9D2 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B9D4 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B9D6 0140                       		dc.b 1,	$40
0000B9D8 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B9DA 0220                       		dc.b 2,	$20
0000B9DC                            ; ===========================================================================
0000B9DC                            
0000B9DC                            Obj2F_Main:				; XREF: Obj2F_Index
0000B9DC 5428 0024                  		addq.b	#2,$24(a0)
0000B9E0 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B9E8 317C C000 0002             		move.w	#$C000,2(a0)
0000B9EE 117C 0004 0001             		move.b	#4,1(a0)
0000B9F4 117C 0005 0018             		move.b	#5,$18(a0)
0000B9FA 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000BA00 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000BA06 7000                       		moveq	#0,d0
0000BA08 1028 0028                  		move.b	$28(a0),d0
0000BA0C E448                       		lsr.w	#2,d0
0000BA0E 0240 001C                  		andi.w	#$1C,d0
0000BA12 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000BA16 3019                       		move.w	(a1)+,d0
0000BA18 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000BA1C 214A 0030                  		move.l	a2,$30(a0)
0000BA20 1159 001A                  		move.b	(a1)+,$1A(a0)
0000BA24 1151 0019                  		move.b	(a1),$19(a0)
0000BA28 0228 000F 0028             		andi.b	#$F,$28(a0)
0000BA2E 117C 0040 0016             		move.b	#$40,$16(a0)
0000BA34 08E8 0004 0001             		bset	#4,1(a0)
0000BA3A                            
0000BA3A                            Obj2F_Action:				; XREF: Obj2F_Index
0000BA3A 6100 0000                  		bsr.w	Obj2F_Types
0000BA3E 4A28 0025                  		tst.b	$25(a0)
0000BA42 6700                       		beq.s	Obj2F_Solid
0000BA44 7200                       		moveq	#0,d1
0000BA46 1228 0019                  		move.b	$19(a0),d1
0000BA4A 0641 000B                  		addi.w	#$B,d1
0000BA4E 6100 C61C                  		bsr.w	ExitPlatform
0000BA52 0829 0003 0022             		btst	#3,$22(a1)
0000BA58 6600 0000                  		bne.w	Obj2F_Slope
0000BA5C 4228 0025                  		clr.b	$25(a0)
0000BA60 6000                       		bra.s	Obj2F_Display
0000BA62                            ; ===========================================================================
0000BA62                            
0000BA62                            Obj2F_Slope:				; XREF: Obj2F_Action
0000BA62 7200                       		moveq	#0,d1
0000BA64 1228 0019                  		move.b	$19(a0),d1
0000BA68 0641 000B                  		addi.w	#$B,d1
0000BA6C 2468 0030                  		movea.l	$30(a0),a2
0000BA70 3428 0008                  		move.w	8(a0),d2
0000BA74 6100 D554                  		bsr.w	SlopeObject2
0000BA78 6000                       		bra.s	Obj2F_Display
0000BA7A                            ; ===========================================================================
0000BA7A                            
0000BA7A                            Obj2F_Solid:				; XREF: Obj2F_Action
0000BA7A 7200                       		moveq	#0,d1
0000BA7C 1228 0019                  		move.b	$19(a0),d1
0000BA80 0641 000B                  		addi.w	#$B,d1
0000BA84 343C 0020                  		move.w	#$20,d2
0000BA88 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000BA8E 6600                       		bne.s	loc_AF8E
0000BA90 343C 0030                  		move.w	#$30,d2
0000BA94                            
0000BA94                            loc_AF8E:
0000BA94 2468 0030                  		movea.l	$30(a0),a2
0000BA98 6100 0000                  		bsr.w	SolidObject2F
0000BA9C                            
0000BA9C                            Obj2F_Display:				; XREF: Obj2F_Action
0000BA9C 6100 0000                  		bsr.w	DisplaySprite
0000BAA0 6000 0000                  		bra.w	Obj2F_ChkDel
0000BAA4                            
0000BAA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BAA4                            
0000BAA4                            
0000BAA4                            Obj2F_Types:				; XREF: Obj2F_Action
0000BAA4 7000                       		moveq	#0,d0
0000BAA6 1028 0028                  		move.b	$28(a0),d0
0000BAAA 0240 0007                  		andi.w	#7,d0
0000BAAE D040                       		add.w	d0,d0
0000BAB0 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000BAB4 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000BAB8                            ; End of function Obj2F_Types
0000BAB8                            
0000BAB8                            ; ===========================================================================
0000BAB8 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000BABA 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000BABC 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000BABE 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000BAC0 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000BAC2 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000BAC4                            ; ===========================================================================
0000BAC4                            
0000BAC4                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000BAC4 4E75                       		rts			; type 00 platform doesn't move
0000BAC6                            ; ===========================================================================
0000BAC6                            
0000BAC6                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000BAC6 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000BACA 323C 0020                  		move.w	#$20,d1
0000BACE 6000                       		bra.s	Obj2F_Move
0000BAD0                            ; ===========================================================================
0000BAD0                            
0000BAD0                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000BAD0 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000BAD4 323C 0030                  		move.w	#$30,d1
0000BAD8 6000                       		bra.s	Obj2F_Move
0000BADA                            ; ===========================================================================
0000BADA                            
0000BADA                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000BADA 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000BADE 323C 0040                  		move.w	#$40,d1
0000BAE2 6000                       		bra.s	Obj2F_Move
0000BAE4                            ; ===========================================================================
0000BAE4                            
0000BAE4                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000BAE4 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000BAE8 323C 0060                  		move.w	#$60,d1
0000BAEC                            
0000BAEC                            Obj2F_Move:
0000BAEC 0828 0003 0028             		btst	#3,$28(a0)
0000BAF2 6700                       		beq.s	loc_AFF2
0000BAF4 4440                       		neg.w	d0
0000BAF6 D041                       		add.w	d1,d0
0000BAF8                            
0000BAF8                            loc_AFF2:
0000BAF8 3228 002C                  		move.w	$2C(a0),d1
0000BAFC 9240                       		sub.w	d0,d1
0000BAFE 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000BB02 4E75                       		rts	
0000BB04                            ; ===========================================================================
0000BB04                            
0000BB04                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000BB04 1028 0034                  		move.b	$34(a0),d0
0000BB08 4A28 0025                  		tst.b	$25(a0)
0000BB0C 6600                       		bne.s	loc_B010
0000BB0E 5500                       		subq.b	#2,d0
0000BB10 6400                       		bcc.s	loc_B01C
0000BB12 7000                       		moveq	#0,d0
0000BB14 6000                       		bra.s	loc_B01C
0000BB16                            ; ===========================================================================
0000BB16                            
0000BB16                            loc_B010:
0000BB16 5800                       		addq.b	#4,d0
0000BB18 0C00 0040                  		cmpi.b	#$40,d0
0000BB1C 6500                       		bcs.s	loc_B01C
0000BB1E 103C 0040                  		move.b	#$40,d0
0000BB22                            
0000BB22                            loc_B01C:
0000BB22 1140 0034                  		move.b	d0,$34(a0)
0000BB26 4EB9 0000 33D4             		jsr	(CalcSine).l
0000BB2C E848                       		lsr.w	#4,d0
0000BB2E 3200                       		move.w	d0,d1
0000BB30 D068 002C                  		add.w	$2C(a0),d0
0000BB34 3140 000C                  		move.w	d0,$C(a0)
0000BB38 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000BB3E 6600                       		bne.s	loc_B07A
0000BB40 4A28 0035                  		tst.b	$35(a0)
0000BB44 6600                       		bne.s	loc_B07A
0000BB46 117C 0001 0035             		move.b	#1,$35(a0)
0000BB4C 6100 0000                  		bsr.w	SingleObjLoad2
0000BB50 6600                       		bne.s	loc_B07A
0000BB52 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000BB56 3368 0008 0008             		move.w	8(a0),8(a1)
0000BB5C 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000BB62 5069 002C                  		addq.w	#8,$2C(a1)
0000BB66 5769 002C                  		subq.w	#3,$2C(a1)
0000BB6A 0469 0040 0008             		subi.w	#$40,8(a1)
0000BB70 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000BB76 2348 0038                  		move.l	a0,$38(a1)
0000BB7A 2448                       		movea.l	a0,a2
0000BB7C 6100                       		bsr.s	sub_B09C
0000BB7E                            
0000BB7E                            loc_B07A:
0000BB7E 7400                       		moveq	#0,d2
0000BB80 45E8 0036                  		lea	$36(a0),a2
0000BB84 141A                       		move.b	(a2)+,d2
0000BB86 5302                       		subq.b	#1,d2
0000BB88 6500                       		bcs.s	locret_B09A
0000BB8A                            
0000BB8A                            loc_B086:
0000BB8A 7000                       		moveq	#0,d0
0000BB8C 101A                       		move.b	(a2)+,d0
0000BB8E ED48                       		lsl.w	#6,d0
0000BB90 0640 D000                  		addi.w	#-$3000,d0
0000BB94 3240                       		movea.w	d0,a1
0000BB96 3341 003C                  		move.w	d1,$3C(a1)
0000BB9A 51CA FFEE                  		dbf	d2,loc_B086
0000BB9E                            
0000BB9E                            locret_B09A:
0000BB9E 4E75                       		rts	
0000BBA0                            
0000BBA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BBA0                            
0000BBA0                            
0000BBA0                            sub_B09C:
0000BBA0 45EA 0036                  		lea	$36(a2),a2
0000BBA4 7000                       		moveq	#0,d0
0000BBA6 1012                       		move.b	(a2),d0
0000BBA8 5212                       		addq.b	#1,(a2)
0000BBAA 45F2 0001                  		lea	1(a2,d0.w),a2
0000BBAE 3009                       		move.w	a1,d0
0000BBB0 0440 D000                  		subi.w	#-$3000,d0
0000BBB4 EC48                       		lsr.w	#6,d0
0000BBB6 0240 007F                  		andi.w	#$7F,d0
0000BBBA 1480                       		move.b	d0,(a2)
0000BBBC 4E75                       		rts	
0000BBBE                            ; End of function sub_B09C
0000BBBE                            
0000BBBE                            ; ===========================================================================
0000BBBE                            
0000BBBE                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000BBBE 4A28 0035                  		tst.b	$35(a0)
0000BBC2 6700                       		beq.s	loc_B0C6
0000BBC4 4A28 0001                  		tst.b	1(a0)
0000BBC8 6A00                       		bpl.s	Obj2F_DelFlames
0000BBCA                            
0000BBCA                            loc_B0C6:
0000BBCA 3028 002A                  		move.w	$2A(a0),d0
0000BBCE 0240 FF80                  		andi.w	#$FF80,d0
0000BBD2 3238 F700                  		move.w	($FFFFF700).w,d1
0000BBD6 0441 0080                  		subi.w	#$80,d1
0000BBDA 0241 FF80                  		andi.w	#$FF80,d1
0000BBDE 9041                       		sub.w	d1,d0
0000BBE0 0C40 0280                  		cmpi.w	#$280,d0
0000BBE4 6200 0000                  		bhi.w	DeleteObject
0000BBE8 4E75                       		rts	
0000BBEA                            ; ===========================================================================
0000BBEA                            
0000BBEA                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000BBEA 7400                       		moveq	#0,d2
0000BBEC                            
0000BBEC                            loc_B0E8:
0000BBEC 45E8 0036                  		lea	$36(a0),a2
0000BBF0 1412                       		move.b	(a2),d2
0000BBF2 421A                       		clr.b	(a2)+
0000BBF4 5302                       		subq.b	#1,d2
0000BBF6 6500                       		bcs.s	locret_B116
0000BBF8                            
0000BBF8                            loc_B0F4:
0000BBF8 7000                       		moveq	#0,d0
0000BBFA 1012                       		move.b	(a2),d0
0000BBFC 421A                       		clr.b	(a2)+
0000BBFE ED48                       		lsl.w	#6,d0
0000BC00 0640 D000                  		addi.w	#-$3000,d0
0000BC04 3240                       		movea.w	d0,a1
0000BC06 6100 0000                  		bsr.w	DeleteObject2
0000BC0A 51CA FFEC                  		dbf	d2,loc_B0F4
0000BC0E 117C 0000 0035             		move.b	#0,$35(a0)
0000BC14 117C 0000 0034             		move.b	#0,$34(a0)
0000BC1A                            
0000BC1A                            locret_B116:
0000BC1A 4E75                       		rts	
0000BC1C                            ; ===========================================================================
0000BC1C                            ; ---------------------------------------------------------------------------
0000BC1C                            ; Collision data for large moving platforms (MZ)
0000BC1C                            ; ---------------------------------------------------------------------------
0000BC1C                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000BC68                            		even
0000BC68                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000BC94                            		even
0000BC94                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000BCE0                            		even
0000BCE0                            ; ===========================================================================
0000BCE0                            ; ---------------------------------------------------------------------------
0000BCE0                            ; Object 35 - fireball that sits on the	floor (MZ)
0000BCE0                            ; (appears when	you walk on sinking platforms)
0000BCE0                            ; ---------------------------------------------------------------------------
0000BCE0                            
0000BCE0                            Obj35:					; XREF: Obj_Index
0000BCE0 7000                       		moveq	#0,d0
0000BCE2 1028 0024                  		move.b	$24(a0),d0
0000BCE6 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000BCEA 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000BCEE                            ; ===========================================================================
0000BCEE 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000BCF0 0000                       		dc.w loc_B238-Obj35_Index
0000BCF2 0000                       		dc.w Obj35_Move-Obj35_Index
0000BCF4                            ; ===========================================================================
0000BCF4                            
0000BCF4                            Obj35_Main:				; XREF: Obj35_Index
0000BCF4 5428 0024                  		addq.b	#2,$24(a0)
0000BCF8 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000BD00 317C 0345 0002             		move.w	#$345,2(a0)
0000BD06 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000BD0C 117C 0004 0001             		move.b	#4,1(a0)
0000BD12 117C 0001 0018             		move.b	#1,$18(a0)
0000BD18 117C 008B 0020             		move.b	#$8B,$20(a0)
0000BD1E 117C 0008 0019             		move.b	#8,$19(a0)
0000BD24 303C 00C8                  		move.w	#$C8,d0
0000BD28 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play flame sound
0000BD2E 4A28 0028                  		tst.b	$28(a0)
0000BD32 6700                       		beq.s	loc_B238
0000BD34 5428 0024                  		addq.b	#2,$24(a0)
0000BD38 6000 0000                  		bra.w	Obj35_Move
0000BD3C                            ; ===========================================================================
0000BD3C                            
0000BD3C                            loc_B238:				; XREF: Obj35_Index
0000BD3C 2268 0030                  		movea.l	$30(a0),a1
0000BD40 3228 0008                  		move.w	8(a0),d1
0000BD44 9268 002A                  		sub.w	$2A(a0),d1
0000BD48 0641 000C                  		addi.w	#$C,d1
0000BD4C 3001                       		move.w	d1,d0
0000BD4E E248                       		lsr.w	#1,d0
0000BD50 1031 0000                  		move.b	(a1,d0.w),d0
0000BD54 4440                       		neg.w	d0
0000BD56 D068 002C                  		add.w	$2C(a0),d0
0000BD5A 3400                       		move.w	d0,d2
0000BD5C D068 003C                  		add.w	$3C(a0),d0
0000BD60 3140 000C                  		move.w	d0,$C(a0)
0000BD64 0C41 0084                  		cmpi.w	#$84,d1
0000BD68 6400                       		bcc.s	loc_B2B0
0000BD6A 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000BD72 0C41 0080                  		cmpi.w	#$80,d1
0000BD76 6400                       		bcc.s	loc_B2B0
0000BD78 2028 0008                  		move.l	8(a0),d0
0000BD7C 0680 0008 0000             		addi.l	#$80000,d0
0000BD82 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000BD88 6600                       		bne.s	loc_B2B0
0000BD8A 6100 0000                  		bsr.w	SingleObjLoad2
0000BD8E 6600                       		bne.s	loc_B2B0
0000BD90 12BC 0035                  		move.b	#$35,0(a1)
0000BD94 3368 0008 0008             		move.w	8(a0),8(a1)
0000BD9A 3342 002C                  		move.w	d2,$2C(a1)
0000BD9E 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000BDA4 137C 0001 0028             		move.b	#1,$28(a1)
0000BDAA 2468 0038                  		movea.l	$38(a0),a2
0000BDAE 6100 FDF0                  		bsr.w	sub_B09C
0000BDB2                            
0000BDB2                            loc_B2B0:
0000BDB2 6000                       		bra.s	Obj35_Animate
0000BDB4                            ; ===========================================================================
0000BDB4                            
0000BDB4                            Obj35_Move:				; XREF: Obj35_Index
0000BDB4 3028 002C                  		move.w	$2C(a0),d0
0000BDB8 D068 003C                  		add.w	$3C(a0),d0
0000BDBC 3140 000C                  		move.w	d0,$C(a0)
0000BDC0                            
0000BDC0                            Obj35_Animate:				; XREF: loc_B238
0000BDC0 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000BDC6 6100 F450                  		bsr.w	AnimateSprite
0000BDCA 6000 0000                  		bra.w	DisplaySprite
0000BDCE                            ; ===========================================================================
0000BDCE                            Ani_obj35:
0000BDCE                            	include "_anim\obj35.asm"
0000BDCE                            ; ---------------------------------------------------------------------------
0000BDCE                            ; Animation script - fireball that sits on the	floor (MZ)
0000BDCE                            ; ---------------------------------------------------------------------------
0000BDCE 0000                       		dc.w byte_B2CE-Ani_obj35
0000BDD0 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000BDD6                            		even
0000BDD6                            		even
0000BDD6                            
0000BDD6                            ; ---------------------------------------------------------------------------
0000BDD6                            ; Sprite mappings - large moving platforms (MZ)
0000BDD6                            ; ---------------------------------------------------------------------------
0000BDD6                            Map_obj2F:
0000BDD6                            	include "_maps\obj2F.asm"
0000BDD6                            ; ---------------------------------------------------------------------------
0000BDD6                            ; Sprite mappings - large moving platforms (MZ)
0000BDD6                            ; ---------------------------------------------------------------------------
0000BDD6 0000                       		dc.w byte_B2DA-Map_obj2F
0000BDD8 0000                       		dc.w byte_B31C-Map_obj2F
0000BDDA 0000                       		dc.w byte_B34F-Map_obj2F
0000BDDC 0D                         byte_B2DA:	dc.b $D
0000BDDD D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000BDE2 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000BDE7 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BDEC D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000BDF1 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000BDF6 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BDFB D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000BE00 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000BE05 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000BE0A F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BE0F 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000BE14 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000BE19 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000BE1E 0A                         byte_B31C:	dc.b $A
0000BE1F D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000BE24 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000BE29 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BE2E C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000BE33 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000BE38 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BE3D C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000BE42 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000BE47 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000BE4C E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000BE51 06                         byte_B34F:	dc.b 6
0000BE52 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000BE57 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BE5C 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000BE61 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000BE66 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BE6B 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000BE70                            		even
0000BE70                            		even
0000BE70                            
0000BE70                            ; ---------------------------------------------------------------------------
0000BE70                            ; Sprite mappings - lava balls (MZ, SLZ)
0000BE70                            ; ---------------------------------------------------------------------------
0000BE70                            Map_obj14:
0000BE70                            	include "_maps\obj14.asm"
0000BE70                            ; ---------------------------------------------------------------------------
0000BE70                            ; Sprite mappings - lava balls (MZ, SLZ)
0000BE70                            ; ---------------------------------------------------------------------------
0000BE70 0000                       		dc.w byte_B37A-Map_obj14
0000BE72 0000                       		dc.w byte_B380-Map_obj14
0000BE74 0000                       		dc.w byte_B386-Map_obj14
0000BE76 0000                       		dc.w byte_B38C-Map_obj14
0000BE78 0000                       		dc.w byte_B392-Map_obj14
0000BE7A 0000                       		dc.w byte_B398-Map_obj14
0000BE7C 01                         byte_B37A:	dc.b 1
0000BE7D E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000BE82 01                         byte_B380:	dc.b 1
0000BE83 E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000BE88 01                         byte_B386:	dc.b 1
0000BE89 F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000BE8E 01                         byte_B38C:	dc.b 1
0000BE8F F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000BE94 01                         byte_B392:	dc.b 1
0000BE95 F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000BE9A 01                         byte_B398:	dc.b 1
0000BE9B F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000BEA0                            		even
0000BEA0                            		even
0000BEA0                            
0000BEA0                            ; ===========================================================================
0000BEA0                            ; ---------------------------------------------------------------------------
0000BEA0                            ; Object 30 - large green glassy blocks	(MZ)
0000BEA0                            ; ---------------------------------------------------------------------------
0000BEA0                            
0000BEA0                            Obj30:					; XREF: Obj_Index
0000BEA0 7000                       		moveq	#0,d0
0000BEA2 1028 0024                  		move.b	$24(a0),d0
0000BEA6 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000BEAA 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000BEAE 3028 0008                  		move.w	8(a0),d0
0000BEB2 0240 FF80                  		andi.w	#$FF80,d0
0000BEB6 3238 F700                  		move.w	($FFFFF700).w,d1
0000BEBA 0441 0080                  		subi.w	#$80,d1
0000BEBE 0241 FF80                  		andi.w	#$FF80,d1
0000BEC2 9041                       		sub.w	d1,d0
0000BEC4 0C40 0280                  		cmpi.w	#$280,d0
0000BEC8 6200 0000                  		bhi.w	Obj30_Delete
0000BECC 6000 0000                  		bra.w	DisplaySprite
0000BED0                            ; ===========================================================================
0000BED0                            
0000BED0                            Obj30_Delete:
0000BED0 6000 0000                  		bra.w	DeleteObject
0000BED4                            ; ===========================================================================
0000BED4 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000BED6 0000                       		dc.w Obj30_Block012-Obj30_Index
0000BED8 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000BEDA 0000                       		dc.w Obj30_Block34-Obj30_Index
0000BEDC 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000BEDE                            
0000BEDE 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000BEE1 0400 01                    		dc.b 4,	0, 1
0000BEE4 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000BEE7 0800 01                    		dc.b 8,	0, 1
0000BEEA                            ; ===========================================================================
0000BEEA                            
0000BEEA                            Obj30_Main:				; XREF: Obj30_Index
0000BEEA 45F9 0000 BEDE             		lea	(Obj30_Vars1).l,a2
0000BEF0 7201                       		moveq	#1,d1
0000BEF2 117C 0048 0016             		move.b	#$48,$16(a0)
0000BEF8 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000BEFE 6500                       		bcs.s	loc_B40C	; if yes, branch
0000BF00 45F9 0000 BEE4             		lea	(Obj30_Vars2).l,a2
0000BF06 7201                       		moveq	#1,d1
0000BF08 117C 0038 0016             		move.b	#$38,$16(a0)
0000BF0E                            
0000BF0E                            loc_B40C:
0000BF0E 2248                       		movea.l	a0,a1
0000BF10 6000                       		bra.s	Obj30_Load	; load main object
0000BF12                            ; ===========================================================================
0000BF12                            
0000BF12                            Obj30_Loop:
0000BF12 6100 0000                  		bsr.w	SingleObjLoad2
0000BF16 6600                       		bne.s	loc_B480
0000BF18                            
0000BF18                            Obj30_Load:				; XREF: Obj30_Main
0000BF18 135A 0024                  		move.b	(a2)+,$24(a1)
0000BF1C 12BC 0030                  		move.b	#$30,0(a1)
0000BF20 3368 0008 0008             		move.w	8(a0),8(a1)
0000BF26 101A                       		move.b	(a2)+,d0
0000BF28 4880                       		ext.w	d0
0000BF2A D068 000C                  		add.w	$C(a0),d0
0000BF2E 3340 000C                  		move.w	d0,$C(a1)
0000BF32 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000BF3A 337C C38E 0002             		move.w	#$C38E,2(a1)
0000BF40 137C 0004 0001             		move.b	#4,1(a1)
0000BF46 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BF4C 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BF52 137C 0020 0019             		move.b	#$20,$19(a1)
0000BF58 137C 0004 0018             		move.b	#4,$18(a1)
0000BF5E 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BF62 2348 003C                  		move.l	a0,$3C(a1)
0000BF66 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000BF6A                            
0000BF6A 137C 0010 0019             		move.b	#$10,$19(a1)
0000BF70 137C 0003 0018             		move.b	#3,$18(a1)
0000BF76 5029 0028                  		addq.b	#8,$28(a1)
0000BF7A 0229 000F 0028             		andi.b	#$F,$28(a1)
0000BF80                            
0000BF80                            loc_B480:
0000BF80 317C 0090 0032             		move.w	#$90,$32(a0)
0000BF86 08E8 0004 0001             		bset	#4,1(a0)
0000BF8C                            
0000BF8C                            Obj30_Block012:				; XREF: Obj30_Index
0000BF8C 6100 0000                  		bsr.w	Obj30_Types
0000BF90 323C 002B                  		move.w	#$2B,d1
0000BF94 343C 0048                  		move.w	#$48,d2
0000BF98 363C 0049                  		move.w	#$49,d3
0000BF9C 3828 0008                  		move.w	8(a0),d4
0000BFA0 6000 0000                  		bra.w	SolidObject
0000BFA4                            ; ===========================================================================
0000BFA4                            
0000BFA4                            Obj30_Reflect012:			; XREF: Obj30_Index
0000BFA4 2268 003C                  		movea.l	$3C(a0),a1
0000BFA8 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BFAE 6000 0000                  		bra.w	Obj30_Types
0000BFB2                            ; ===========================================================================
0000BFB2                            
0000BFB2                            Obj30_Block34:				; XREF: Obj30_Index
0000BFB2 6100 0000                  		bsr.w	Obj30_Types
0000BFB6 323C 002B                  		move.w	#$2B,d1
0000BFBA 343C 0038                  		move.w	#$38,d2
0000BFBE 363C 0039                  		move.w	#$39,d3
0000BFC2 3828 0008                  		move.w	8(a0),d4
0000BFC6 6000 0000                  		bra.w	SolidObject
0000BFCA                            ; ===========================================================================
0000BFCA                            
0000BFCA                            Obj30_Reflect34:			; XREF: Obj30_Index
0000BFCA 2268 003C                  		movea.l	$3C(a0),a1
0000BFCE 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BFD4 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000BFDA 6000 0002                  		bra.w	*+4
0000BFDE                            
0000BFDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BFDE                            
0000BFDE                            
0000BFDE                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000BFDE 7000                       		moveq	#0,d0
0000BFE0 1028 0028                  		move.b	$28(a0),d0
0000BFE4 0240 0007                  		andi.w	#7,d0
0000BFE8 D040                       		add.w	d0,d0
0000BFEA 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000BFEE 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000BFF2                            ; End of function Obj30_Types
0000BFF2                            
0000BFF2                            ; ===========================================================================
0000BFF2 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000BFF4 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000BFF6 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000BFF8 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000BFFA 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000BFFC                            ; ===========================================================================
0000BFFC                            
0000BFFC                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000BFFC 4E75                       		rts	
0000BFFE                            ; ===========================================================================
0000BFFE                            
0000BFFE                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000BFFE 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C002 323C 0040                  		move.w	#$40,d1
0000C006 6000                       		bra.s	loc_B514
0000C008                            ; ===========================================================================
0000C008                            
0000C008                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000C008 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C00C 323C 0040                  		move.w	#$40,d1
0000C010 4440                       		neg.w	d0
0000C012 D041                       		add.w	d1,d0
0000C014                            
0000C014                            loc_B514:				; XREF: Obj30_Type01
0000C014 0828 0003 0028             		btst	#3,$28(a0)
0000C01A 6700                       		beq.s	loc_B526
0000C01C 4440                       		neg.w	d0
0000C01E D041                       		add.w	d1,d0
0000C020 E208                       		lsr.b	#1,d0
0000C022 0640 0020                  		addi.w	#$20,d0
0000C026                            
0000C026                            loc_B526:
0000C026 6000 0000                  		bra.w	loc_B5EE
0000C02A                            ; ===========================================================================
0000C02A                            
0000C02A                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000C02A 0828 0003 0028             		btst	#3,$28(a0)
0000C030 6700                       		beq.s	loc_B53E
0000C032 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C036 0440 0010                  		subi.w	#$10,d0
0000C03A 6000 0000                  		bra.w	loc_B5EE
0000C03E                            ; ===========================================================================
0000C03E                            
0000C03E                            loc_B53E:
0000C03E 0828 0003 0022             		btst	#3,$22(a0)
0000C044 6600                       		bne.s	loc_B54E
0000C046 08A8 0000 0034             		bclr	#0,$34(a0)
0000C04C 6000                       		bra.s	loc_B582
0000C04E                            ; ===========================================================================
0000C04E                            
0000C04E                            loc_B54E:
0000C04E 4A28 0034                  		tst.b	$34(a0)
0000C052 6600                       		bne.s	loc_B582
0000C054 117C 0001 0034             		move.b	#1,$34(a0)
0000C05A 08E8 0000 0035             		bset	#0,$35(a0)
0000C060 6700                       		beq.s	loc_B582
0000C062 08E8 0007 0034             		bset	#7,$34(a0)
0000C068 317C 0010 0036             		move.w	#$10,$36(a0)
0000C06E 117C 000A 0038             		move.b	#$A,$38(a0)
0000C074 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000C07A 6600                       		bne.s	loc_B582
0000C07C 317C 0040 0036             		move.w	#$40,$36(a0)
0000C082                            
0000C082                            loc_B582:
0000C082 4A28 0034                  		tst.b	$34(a0)
0000C086 6A00                       		bpl.s	loc_B5AA
0000C088 4A28 0038                  		tst.b	$38(a0)
0000C08C 6700                       		beq.s	loc_B594
0000C08E 5328 0038                  		subq.b	#1,$38(a0)
0000C092 6600                       		bne.s	loc_B5AA
0000C094                            
0000C094                            loc_B594:
0000C094 4A68 0032                  		tst.w	$32(a0)
0000C098 6700                       		beq.s	loc_B5A4
0000C09A 5368 0032                  		subq.w	#1,$32(a0)
0000C09E 5368 0036                  		subq.w	#1,$36(a0)
0000C0A2 6600                       		bne.s	loc_B5AA
0000C0A4                            
0000C0A4                            loc_B5A4:
0000C0A4 08A8 0007 0034             		bclr	#7,$34(a0)
0000C0AA                            
0000C0AA                            loc_B5AA:
0000C0AA 3028 0032                  		move.w	$32(a0),d0
0000C0AE 6000                       		bra.s	loc_B5EE
0000C0B0                            ; ===========================================================================
0000C0B0                            
0000C0B0                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000C0B0 0828 0003 0028             		btst	#3,$28(a0)
0000C0B6 6700                       		beq.s	Obj30_ChkSwitch
0000C0B8 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C0BC 0440 0010                  		subi.w	#$10,d0
0000C0C0 6000                       		bra.s	loc_B5EE
0000C0C2                            ; ===========================================================================
0000C0C2                            
0000C0C2                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000C0C2 4A28 0034                  		tst.b	$34(a0)
0000C0C6 6600                       		bne.s	loc_B5E0
0000C0C8 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000C0CC 7000                       		moveq	#0,d0
0000C0CE 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000C0D2 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000C0D4 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000C0D8 6700                       		beq.s	loc_B5EA	; if not, branch
0000C0DA 117C 0001 0034             		move.b	#1,$34(a0)
0000C0E0                            
0000C0E0                            loc_B5E0:
0000C0E0 4A68 0032                  		tst.w	$32(a0)
0000C0E4 6700                       		beq.s	loc_B5EA
0000C0E6 5568 0032                  		subq.w	#2,$32(a0)
0000C0EA                            
0000C0EA                            loc_B5EA:
0000C0EA 3028 0032                  		move.w	$32(a0),d0
0000C0EE                            
0000C0EE                            loc_B5EE:
0000C0EE 3228 0030                  		move.w	$30(a0),d1
0000C0F2 9240                       		sub.w	d0,d1
0000C0F4 3141 000C                  		move.w	d1,$C(a0)
0000C0F8 4E75                       		rts	
0000C0FA                            ; ===========================================================================
0000C0FA                            ; ---------------------------------------------------------------------------
0000C0FA                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C0FA                            ; ---------------------------------------------------------------------------
0000C0FA                            Map_obj30:
0000C0FA                            	include "_maps\obj30.asm"
0000C0FA                            ; ---------------------------------------------------------------------------
0000C0FA                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C0FA                            ; ---------------------------------------------------------------------------
0000C0FA 0000                       		dc.w byte_B600-Map_obj30
0000C0FC 0000                       		dc.w byte_B63D-Map_obj30
0000C0FE 0000                       		dc.w byte_B648-Map_obj30
0000C100 0C                         byte_B600:	dc.b $C
0000C101 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000C106 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000C10B C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000C110 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000C115 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000C11A E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000C11F 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000C124 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000C129 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000C12E 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000C133 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000C138 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000C13D 02                         byte_B63D:	dc.b 2
0000C13E 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000C143 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000C148 0A                         byte_B648:	dc.b $A
0000C149 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000C14E C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000C153 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000C158 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000C15D F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000C162 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000C167 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000C16C 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000C171 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000C176 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000C17C 00                         		even
0000C17C 00                         		even
0000C17C                            
0000C17C                            ; ===========================================================================
0000C17C                            ; ---------------------------------------------------------------------------
0000C17C                            ; Object 31 - stomping metal blocks on chains (MZ)
0000C17C                            ; ---------------------------------------------------------------------------
0000C17C                            
0000C17C                            Obj31:					; XREF: Obj_Index
0000C17C 7000                       		moveq	#0,d0
0000C17E 1028 0024                  		move.b	$24(a0),d0
0000C182 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000C186 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000C18A                            ; ===========================================================================
0000C18A 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000C18C 0000                       		dc.w loc_B798-Obj31_Index
0000C18E 0000                       		dc.w loc_B7FE-Obj31_Index
0000C190 0000                       		dc.w Obj31_Display2-Obj31_Index
0000C192 0000                       		dc.w loc_B7E2-Obj31_Index
0000C194                            
0000C194 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000C196 0100                       		dc.b 1,	0
0000C198                            
0000C198 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000C19B 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000C19E 08CC 03                    		dc.b 8,	$CC, 3
0000C1A1 06F0 02                    		dc.b 6,	$F0, 2
0000C1A4                            
0000C1A4 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000C1A8 5000 7800                  		dc.w $5000, $7800
0000C1AC 3800 5800                  		dc.w $3800, $5800
0000C1B0 B800                       		dc.w $B800
0000C1B2                            ; ===========================================================================
0000C1B2                            
0000C1B2                            Obj31_Main:				; XREF: Obj31_Index
0000C1B2 7000                       		moveq	#0,d0
0000C1B4 1028 0028                  		move.b	$28(a0),d0
0000C1B8 6A00                       		bpl.s	loc_B6CE
0000C1BA 0240 007F                  		andi.w	#$7F,d0
0000C1BE D040                       		add.w	d0,d0
0000C1C0 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000C1C4 115A 003A                  		move.b	(a2)+,$3A(a0)
0000C1C8 101A                       		move.b	(a2)+,d0
0000C1CA 1140 0028                  		move.b	d0,$28(a0)
0000C1CE                            
0000C1CE                            loc_B6CE:
0000C1CE 0200 000F                  		andi.b	#$F,d0
0000C1D2 D040                       		add.w	d0,d0
0000C1D4 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000C1D8 4A40                       		tst.w	d0
0000C1DA 6600                       		bne.s	loc_B6E0
0000C1DC 3142 0032                  		move.w	d2,$32(a0)
0000C1E0                            
0000C1E0                            loc_B6E0:
0000C1E0 45F9 0000 C198             		lea	(Obj31_Var).l,a2
0000C1E6 2248                       		movea.l	a0,a1
0000C1E8 7203                       		moveq	#3,d1
0000C1EA 6000                       		bra.s	Obj31_MakeStomper
0000C1EC                            ; ===========================================================================
0000C1EC                            
0000C1EC                            Obj31_Loop:
0000C1EC 6100 0000                  		bsr.w	SingleObjLoad2
0000C1F0 6600 0000                  		bne.w	Obj31_SetSize
0000C1F4                            
0000C1F4                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000C1F4 135A 0024                  		move.b	(a2)+,$24(a1)
0000C1F8 12BC 0031                  		move.b	#$31,0(a1)
0000C1FC 3368 0008 0008             		move.w	8(a0),8(a1)
0000C202 101A                       		move.b	(a2)+,d0
0000C204 4880                       		ext.w	d0
0000C206 D068 000C                  		add.w	$C(a0),d0
0000C20A 3340 000C                  		move.w	d0,$C(a1)
0000C20E 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000C216 337C 0300 0002             		move.w	#$300,2(a1)
0000C21C 137C 0004 0001             		move.b	#4,1(a1)
0000C222 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000C228 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C22E 137C 0010 0019             		move.b	#$10,$19(a1)
0000C234 3342 0034                  		move.w	d2,$34(a1)
0000C238 137C 0004 0018             		move.b	#4,$18(a1)
0000C23E 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C242 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000C248 6600                       		bne.s	loc_B76A
0000C24A 5341                       		subq.w	#1,d1
0000C24C 1028 0028                  		move.b	$28(a0),d0
0000C250 0240 00F0                  		andi.w	#$F0,d0
0000C254 0C40 0020                  		cmpi.w	#$20,d0
0000C258 679A                       		beq.s	Obj31_MakeStomper
0000C25A 137C 0038 0019             		move.b	#$38,$19(a1)
0000C260 137C 0090 0020             		move.b	#$90,$20(a1)
0000C266 5241                       		addq.w	#1,d1
0000C268                            
0000C268                            loc_B76A:
0000C268 2348 003C                  		move.l	a0,$3C(a1)
0000C26C 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000C270                            
0000C270 137C 0003 0018             		move.b	#3,$18(a1)
0000C276                            
0000C276                            Obj31_SetSize:
0000C276 7000                       		moveq	#0,d0
0000C278 1028 0028                  		move.b	$28(a0),d0
0000C27C E648                       		lsr.w	#3,d0
0000C27E 0200 000E                  		andi.b	#$E,d0
0000C282 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000C286 115A 0019                  		move.b	(a2)+,$19(a0)
0000C28A 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C28E 6000                       		bra.s	loc_B798
0000C290                            ; ===========================================================================
0000C290 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000C292 3009                       		dc.b $30, 9
0000C294 100A                       		dc.b $10, $A
0000C296                            ; ===========================================================================
0000C296                            
0000C296                            loc_B798:				; XREF: Obj31_Index
0000C296 6100 0000                  		bsr.w	Obj31_Types
0000C29A 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000C2A0 7200                       		moveq	#0,d1
0000C2A2 1228 0019                  		move.b	$19(a0),d1
0000C2A6 0641 000B                  		addi.w	#$B,d1
0000C2AA 343C 000C                  		move.w	#$C,d2
0000C2AE 363C 000D                  		move.w	#$D,d3
0000C2B2 3828 0008                  		move.w	8(a0),d4
0000C2B6 6100 0000                  		bsr.w	SolidObject
0000C2BA 0828 0003 0022             		btst	#3,$22(a0)
0000C2C0 6700                       		beq.s	Obj31_Display
0000C2C2 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C2C8 6400                       		bcc.s	Obj31_Display
0000C2CA 2448                       		movea.l	a0,a2
0000C2CC 41F8 D000                  		lea	($FFFFD000).w,a0
0000C2D0 4EB9 0000 0000             		jsr	KillSonic
0000C2D6 204A                       		movea.l	a2,a0
0000C2D8                            
0000C2D8                            Obj31_Display:
0000C2D8 6100 0000                  		bsr.w	DisplaySprite
0000C2DC 6000 0000                  		bra.w	Obj31_ChkDel
0000C2E0                            ; ===========================================================================
0000C2E0                            
0000C2E0                            loc_B7E2:				; XREF: Obj31_Index
0000C2E0 117C 0080 0016             		move.b	#$80,$16(a0)
0000C2E6 08E8 0004 0001             		bset	#4,1(a0)
0000C2EC 2268 003C                  		movea.l	$3C(a0),a1
0000C2F0 1029 0032                  		move.b	$32(a1),d0
0000C2F4 EA08                       		lsr.b	#5,d0
0000C2F6 5600                       		addq.b	#3,d0
0000C2F8 1140 001A                  		move.b	d0,$1A(a0)
0000C2FC                            
0000C2FC                            loc_B7FE:				; XREF: Obj31_Index
0000C2FC 2268 003C                  		movea.l	$3C(a0),a1
0000C300 7000                       		moveq	#0,d0
0000C302 1029 0032                  		move.b	$32(a1),d0
0000C306 D068 0030                  		add.w	$30(a0),d0
0000C30A 3140 000C                  		move.w	d0,$C(a0)
0000C30E                            
0000C30E                            Obj31_Display2:				; XREF: Obj31_Index
0000C30E 6100 0000                  		bsr.w	DisplaySprite
0000C312                            
0000C312                            Obj31_ChkDel:				; XREF: Obj31_Display
0000C312 3028 0008                  		move.w	8(a0),d0
0000C316 0240 FF80                  		andi.w	#$FF80,d0
0000C31A 3238 F700                  		move.w	($FFFFF700).w,d1
0000C31E 0441 0080                  		subi.w	#$80,d1
0000C322 0241 FF80                  		andi.w	#$FF80,d1
0000C326 9041                       		sub.w	d1,d0
0000C328 0C40 0280                  		cmpi.w	#$280,d0
0000C32C 6200 0000                  		bhi.w	DeleteObject
0000C330 4E75                       		rts	
0000C332                            ; ===========================================================================
0000C332                            
0000C332                            Obj31_Types:				; XREF: loc_B798
0000C332 1028 0028                  		move.b	$28(a0),d0
0000C336 0240 000F                  		andi.w	#$F,d0
0000C33A D040                       		add.w	d0,d0
0000C33C 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000C340 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000C344                            ; ===========================================================================
0000C344 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000C346 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C348 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C34A 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C34C 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C34E 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C350 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C352                            ; ===========================================================================
0000C352                            
0000C352                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000C352 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000C356 7000                       		moveq	#0,d0
0000C358 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000C35C 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000C360 6700                       		beq.s	loc_B8A8	; if not, branch
0000C362 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000C366 6A00                       		bpl.s	loc_B872
0000C368 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C36E 6700                       		beq.s	loc_B8A0
0000C370                            
0000C370                            loc_B872:
0000C370 4A68 0032                  		tst.w	$32(a0)
0000C374 6700                       		beq.s	loc_B8A0
0000C376 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C37A 0200 000F                  		andi.b	#$F,d0
0000C37E 6600                       		bne.s	loc_B892
0000C380 4A28 0001                  		tst.b	1(a0)
0000C384 6A00                       		bpl.s	loc_B892
0000C386 303C 00C7                  		move.w	#$C7,d0
0000C38A 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C390                            
0000C390                            loc_B892:
0000C390 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C396 6400                       		bcc.s	Obj31_Restart
0000C398 317C 0000 0032             		move.w	#0,$32(a0)
0000C39E                            
0000C39E                            loc_B8A0:
0000C39E 317C 0000 0012             		move.w	#0,$12(a0)
0000C3A4 6000                       		bra.s	Obj31_Restart
0000C3A6                            ; ===========================================================================
0000C3A6                            
0000C3A6                            loc_B8A8:				; XREF: Obj31_Type00
0000C3A6 3228 0034                  		move.w	$34(a0),d1
0000C3AA B268 0032                  		cmp.w	$32(a0),d1
0000C3AE 6700                       		beq.s	Obj31_Restart
0000C3B0 3028 0012                  		move.w	$12(a0),d0
0000C3B4 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C3BA D168 0032                  		add.w	d0,$32(a0)
0000C3BE B268 0032                  		cmp.w	$32(a0),d1
0000C3C2 6200                       		bhi.s	Obj31_Restart
0000C3C4 3141 0032                  		move.w	d1,$32(a0)
0000C3C8 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C3CE 4A28 0001                  		tst.b	1(a0)
0000C3D2 6A00                       		bpl.s	Obj31_Restart
0000C3D4 303C 00BD                  		move.w	#$BD,d0
0000C3D8 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C3DE                            
0000C3DE                            Obj31_Restart:
0000C3DE 7000                       		moveq	#0,d0
0000C3E0 1028 0032                  		move.b	$32(a0),d0
0000C3E4 D068 0030                  		add.w	$30(a0),d0
0000C3E8 3140 000C                  		move.w	d0,$C(a0)
0000C3EC 4E75                       		rts	
0000C3EE                            ; ===========================================================================
0000C3EE                            
0000C3EE                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000C3EE 4A68 0036                  		tst.w	$36(a0)
0000C3F2 6700                       		beq.s	loc_B938
0000C3F4 4A68 0038                  		tst.w	$38(a0)
0000C3F8 6700                       		beq.s	loc_B902
0000C3FA 5368 0038                  		subq.w	#1,$38(a0)
0000C3FE 6000                       		bra.s	loc_B97C
0000C400                            ; ===========================================================================
0000C400                            
0000C400                            loc_B902:
0000C400 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C404 0200 000F                  		andi.b	#$F,d0
0000C408 6600                       		bne.s	loc_B91C
0000C40A 4A28 0001                  		tst.b	1(a0)
0000C40E 6A00                       		bpl.s	loc_B91C
0000C410 303C 00C7                  		move.w	#$C7,d0
0000C414 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C41A                            
0000C41A                            loc_B91C:
0000C41A 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C420 6400                       		bcc.s	loc_B97C
0000C422 317C 0000 0032             		move.w	#0,$32(a0)
0000C428 317C 0000 0012             		move.w	#0,$12(a0)
0000C42E 317C 0000 0036             		move.w	#0,$36(a0)
0000C434 6000                       		bra.s	loc_B97C
0000C436                            ; ===========================================================================
0000C436                            
0000C436                            loc_B938:				; XREF: Obj31_Type01
0000C436 3228 0034                  		move.w	$34(a0),d1
0000C43A B268 0032                  		cmp.w	$32(a0),d1
0000C43E 6700                       		beq.s	loc_B97C
0000C440 3028 0012                  		move.w	$12(a0),d0
0000C444 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C44A D168 0032                  		add.w	d0,$32(a0)
0000C44E B268 0032                  		cmp.w	$32(a0),d1
0000C452 6200                       		bhi.s	loc_B97C
0000C454 3141 0032                  		move.w	d1,$32(a0)
0000C458 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C45E 317C 0001 0036             		move.w	#1,$36(a0)
0000C464 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C46A 4A28 0001                  		tst.b	1(a0)
0000C46E 6A00                       		bpl.s	loc_B97C
0000C470 303C 00BD                  		move.w	#$BD,d0
0000C474 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C47A                            
0000C47A                            loc_B97C:
0000C47A 6000 FF62                  		bra.w	Obj31_Restart
0000C47E                            ; ===========================================================================
0000C47E                            
0000C47E                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000C47E 3038 D008                  		move.w	($FFFFD008).w,d0
0000C482 9068 0008                  		sub.w	8(a0),d0
0000C486 6400                       		bcc.s	loc_B98C
0000C488 4440                       		neg.w	d0
0000C48A                            
0000C48A                            loc_B98C:
0000C48A 0C40 0090                  		cmpi.w	#$90,d0
0000C48E 6400                       		bcc.s	loc_B996
0000C490 5228 0028                  		addq.b	#1,$28(a0)
0000C494                            
0000C494                            loc_B996:
0000C494 6000 FF48                  		bra.w	Obj31_Restart
0000C498                            ; ===========================================================================
0000C498                            ; ---------------------------------------------------------------------------
0000C498                            ; Object 45 - spiked metal block from beta version (MZ)
0000C498                            ; ---------------------------------------------------------------------------
0000C498                            
0000C498                            Obj45:					; XREF: Obj_Index
0000C498 7000                       		moveq	#0,d0
0000C49A 1028 0024                  		move.b	$24(a0),d0
0000C49E 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000C4A2 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000C4A6                            ; ===========================================================================
0000C4A6 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000C4A8 0000                       		dc.w Obj45_Solid-Obj45_Index
0000C4AA 0000                       		dc.w loc_BA8E-Obj45_Index
0000C4AC 0000                       		dc.w Obj45_Display-Obj45_Index
0000C4AE 0000                       		dc.w loc_BA7A-Obj45_Index
0000C4B0                            
0000C4B0 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000C4B3 04E4 01                    		dc.b	4, $E4,	  1
0000C4B6 0834 03                    		dc.b	8, $34,	  3
0000C4B9 0628 02                    		dc.b	6, $28,	  2
0000C4BC                            
0000C4BC 3800                       word_B9BE:	dc.w $3800
0000C4BE A000                       		dc.w -$6000
0000C4C0 5000                       		dc.w $5000
0000C4C2                            ; ===========================================================================
0000C4C2                            
0000C4C2                            Obj45_Main:				; XREF: Obj45_Index
0000C4C2 7000                       		moveq	#0,d0
0000C4C4 1028 0028                  		move.b	$28(a0),d0
0000C4C8 D040                       		add.w	d0,d0
0000C4CA 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000C4CE 45F9 0000 C4B0             		lea	(Obj45_Var).l,a2
0000C4D4 2248                       		movea.l	a0,a1
0000C4D6 7203                       		moveq	#3,d1
0000C4D8 6000                       		bra.s	Obj45_Load
0000C4DA                            ; ===========================================================================
0000C4DA                            
0000C4DA                            Obj45_Loop:
0000C4DA 6100 0000                  		bsr.w	SingleObjLoad2
0000C4DE 6600                       		bne.s	loc_BA52
0000C4E0                            
0000C4E0                            Obj45_Load:				; XREF: Obj45_Main
0000C4E0 135A 0024                  		move.b	(a2)+,$24(a1)
0000C4E4 12BC 0045                  		move.b	#$45,0(a1)
0000C4E8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C4EE 101A                       		move.b	(a2)+,d0
0000C4F0 4880                       		ext.w	d0
0000C4F2 D068 0008                  		add.w	8(a0),d0
0000C4F6 3340 0008                  		move.w	d0,8(a1)
0000C4FA 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000C502 337C 0300 0002             		move.w	#$300,2(a1)
0000C508 137C 0004 0001             		move.b	#4,1(a1)
0000C50E 3369 0008 0030             		move.w	8(a1),$30(a1)
0000C514 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000C51A 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C520 137C 0020 0019             		move.b	#$20,$19(a1)
0000C526 3342 0034                  		move.w	d2,$34(a1)
0000C52A 137C 0004 0018             		move.b	#4,$18(a1)
0000C530 0C12 0001                  		cmpi.b	#1,(a2)
0000C534 6600                       		bne.s	loc_BA40
0000C536 137C 0091 0020             		move.b	#$91,$20(a1)
0000C53C                            
0000C53C                            loc_BA40:
0000C53C 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C540 2348 003C                  		move.l	a0,$3C(a1)
0000C544 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000C548                            
0000C548 137C 0003 0018             		move.b	#3,$18(a1)
0000C54E                            
0000C54E                            loc_BA52:
0000C54E 117C 0010 0019             		move.b	#$10,$19(a0)
0000C554                            
0000C554                            Obj45_Solid:				; XREF: Obj45_Index
0000C554 3F28 0008                  		move.w	8(a0),-(sp)
0000C558 6100 0000                  		bsr.w	Obj45_Move
0000C55C 323C 0017                  		move.w	#$17,d1
0000C560 343C 0020                  		move.w	#$20,d2
0000C564 363C 0020                  		move.w	#$20,d3
0000C568 381F                       		move.w	(sp)+,d4
0000C56A 6100 0000                  		bsr.w	SolidObject
0000C56E 6100 0000                  		bsr.w	DisplaySprite
0000C572 6000 0000                  		bra.w	Obj45_ChkDel
0000C576                            ; ===========================================================================
0000C576                            
0000C576                            loc_BA7A:				; XREF: Obj45_Index
0000C576 2268 003C                  		movea.l	$3C(a0),a1
0000C57A 1029 0032                  		move.b	$32(a1),d0
0000C57E 0600 0010                  		addi.b	#$10,d0
0000C582 EA08                       		lsr.b	#5,d0
0000C584 5600                       		addq.b	#3,d0
0000C586 1140 001A                  		move.b	d0,$1A(a0)
0000C58A                            
0000C58A                            loc_BA8E:				; XREF: Obj45_Index
0000C58A 2268 003C                  		movea.l	$3C(a0),a1
0000C58E 7000                       		moveq	#0,d0
0000C590 1029 0032                  		move.b	$32(a1),d0
0000C594 4440                       		neg.w	d0
0000C596 D068 0030                  		add.w	$30(a0),d0
0000C59A 3140 0008                  		move.w	d0,8(a0)
0000C59E                            
0000C59E                            Obj45_Display:				; XREF: Obj45_Index
0000C59E 6100 0000                  		bsr.w	DisplaySprite
0000C5A2                            
0000C5A2                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000C5A2 3028 003A                  		move.w	$3A(a0),d0
0000C5A6 0240 FF80                  		andi.w	#$FF80,d0
0000C5AA 3238 F700                  		move.w	($FFFFF700).w,d1
0000C5AE 0441 0080                  		subi.w	#$80,d1
0000C5B2 0241 FF80                  		andi.w	#$FF80,d1
0000C5B6 9041                       		sub.w	d1,d0
0000C5B8 0C40 0280                  		cmpi.w	#$280,d0
0000C5BC 6200 0000                  		bhi.w	DeleteObject
0000C5C0 4E75                       		rts	
0000C5C2                            
0000C5C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C5C2                            
0000C5C2                            
0000C5C2                            Obj45_Move:				; XREF: Obj45_Solid
0000C5C2 7000                       		moveq	#0,d0
0000C5C4 1028 0028                  		move.b	$28(a0),d0
0000C5C8 D040                       		add.w	d0,d0
0000C5CA 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000C5CE 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000C5D2                            ; End of function Obj45_Move
0000C5D2                            
0000C5D2                            ; ===========================================================================
0000C5D2 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000C5D4 0000                       		dc.w loc_BADA-off_BAD6
0000C5D6                            ; ===========================================================================
0000C5D6                            
0000C5D6                            loc_BADA:				; XREF: off_BAD6
0000C5D6 4A68 0036                  		tst.w	$36(a0)
0000C5DA 6700                       		beq.s	loc_BB08
0000C5DC 4A68 0038                  		tst.w	$38(a0)
0000C5E0 6700                       		beq.s	loc_BAEC
0000C5E2 5368 0038                  		subq.w	#1,$38(a0)
0000C5E6 6000                       		bra.s	loc_BB3C
0000C5E8                            ; ===========================================================================
0000C5E8                            
0000C5E8                            loc_BAEC:
0000C5E8 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C5EE 6400                       		bcc.s	loc_BB3C
0000C5F0 317C 0000 0032             		move.w	#0,$32(a0)
0000C5F6 317C 0000 0010             		move.w	#0,$10(a0)
0000C5FC 317C 0000 0036             		move.w	#0,$36(a0)
0000C602 6000                       		bra.s	loc_BB3C
0000C604                            ; ===========================================================================
0000C604                            
0000C604                            loc_BB08:				; XREF: loc_BADA
0000C604 3228 0034                  		move.w	$34(a0),d1
0000C608 B268 0032                  		cmp.w	$32(a0),d1
0000C60C 6700                       		beq.s	loc_BB3C
0000C60E 3028 0010                  		move.w	$10(a0),d0
0000C612 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C618 D168 0032                  		add.w	d0,$32(a0)
0000C61C B268 0032                  		cmp.w	$32(a0),d1
0000C620 6200                       		bhi.s	loc_BB3C
0000C622 3141 0032                  		move.w	d1,$32(a0)
0000C626 317C 0000 0010             		move.w	#0,$10(a0)
0000C62C 317C 0001 0036             		move.w	#1,$36(a0)
0000C632 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C638                            
0000C638                            loc_BB3C:
0000C638 7000                       		moveq	#0,d0
0000C63A 1028 0032                  		move.b	$32(a0),d0
0000C63E 4440                       		neg.w	d0
0000C640 D068 0030                  		add.w	$30(a0),d0
0000C644 3140 0008                  		move.w	d0,8(a0)
0000C648 4E75                       		rts	
0000C64A                            ; ===========================================================================
0000C64A                            ; ---------------------------------------------------------------------------
0000C64A                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C64A                            ; ---------------------------------------------------------------------------
0000C64A                            Map_obj31:
0000C64A                            	include "_maps\obj31.asm"
0000C64A                            ; ---------------------------------------------------------------------------
0000C64A                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C64A                            ; ---------------------------------------------------------------------------
0000C64A 0000                       		dc.w byte_BB64-Map_obj31
0000C64C 0000                       		dc.w byte_BB7E-Map_obj31
0000C64E 0000                       		dc.w byte_BB98-Map_obj31
0000C650 0000                       		dc.w byte_BB9E-Map_obj31
0000C652 0000                       		dc.w byte_BBA9-Map_obj31
0000C654 0000                       		dc.w byte_BBBE-Map_obj31
0000C656 0000                       		dc.w byte_BBDD-Map_obj31
0000C658 0000                       		dc.w byte_BC06-Map_obj31
0000C65A 0000                       		dc.w byte_BC06-Map_obj31
0000C65C 0000                       		dc.w byte_BC39-Map_obj31
0000C65E 0000                       		dc.w byte_BC53-Map_obj31
0000C660 05                         byte_BB64:	dc.b 5
0000C661 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C666 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C66B EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C670 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C675 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C67A 05                         byte_BB7E:	dc.b 5
0000C67B F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C680 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C685 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C68A F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C68F F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C694 01                         byte_BB98:	dc.b 1
0000C695 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C69A 02                         byte_BB9E:	dc.b 2
0000C69B 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C6A0 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C6A5 04                         byte_BBA9:	dc.b 4
0000C6A6 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C6AB F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C6B0 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C6B5 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C6BA 06                         byte_BBBE:	dc.b 6
0000C6BB C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C6C0 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C6C5 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C6CA F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C6CF 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C6D4 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C6D9 08                         byte_BBDD:	dc.b 8
0000C6DA A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C6DF B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C6E4 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C6E9 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C6EE E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C6F3 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C6F8 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C6FD 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C702 0A                         byte_BC06:	dc.b $A
0000C703 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C708 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C70D A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C712 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C717 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C71C D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C721 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C726 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C72B 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C730 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C735 05                         byte_BC39:	dc.b 5
0000C736 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C73B F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C740 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C745 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C74A EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C74F 01                         byte_BC53:	dc.b 1
0000C750 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C756 00                         		even
0000C756 00                         		even
0000C756                            
0000C756                            ; ---------------------------------------------------------------------------
0000C756                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C756                            ; ---------------------------------------------------------------------------
0000C756                            Map_obj45:
0000C756                            	include "_maps\obj45.asm"
0000C756                            ; ---------------------------------------------------------------------------
0000C756                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C756                            ; ---------------------------------------------------------------------------
0000C756 0000                       		dc.w byte_BC6C-Map_obj45
0000C758 0000                       		dc.w byte_BC7C-Map_obj45
0000C75A 0000                       		dc.w byte_BC8C-Map_obj45
0000C75C 0000                       		dc.w byte_BC92-Map_obj45
0000C75E 0000                       		dc.w byte_BC9D-Map_obj45
0000C760 0000                       		dc.w byte_BCB2-Map_obj45
0000C762 0000                       		dc.w byte_BCD1-Map_obj45
0000C764 0000                       		dc.w byte_BCFA-Map_obj45
0000C766 0000                       		dc.w byte_BCFA-Map_obj45
0000C768 03                         byte_BC6C:	dc.b 3
0000C769 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C76E 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C773 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C778 03                         byte_BC7C:	dc.b 3
0000C779 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C77E FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C783 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C788 01                         byte_BC8C:	dc.b 1
0000C789 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C78E 02                         byte_BC92:	dc.b 2
0000C78F F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C794 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C799 04                         byte_BC9D:	dc.b 4
0000C79A F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C79F F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C7A4 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C7A9 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C7AE 06                         byte_BCB2:	dc.b 6
0000C7AF F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C7B4 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C7B9 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C7BE F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C7C3 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C7C8 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C7CD 08                         byte_BCD1:	dc.b 8
0000C7CE F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C7D3 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C7D8 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C7DD F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C7E2 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C7E7 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C7EC F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C7F1 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C7F6 08                         byte_BCFA:	dc.b 8
0000C7F7 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C7FC F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C801 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C806 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C80B F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C810 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C815 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C81A F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C81F F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C824 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C82A 00                         		even
0000C82A 00                         		even
0000C82A                            
0000C82A                            ; ===========================================================================
0000C82A                            ; ---------------------------------------------------------------------------
0000C82A                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C82A                            ; ---------------------------------------------------------------------------
0000C82A                            
0000C82A                            Obj32:					; XREF: Obj_Index
0000C82A 7000                       		moveq	#0,d0
0000C82C 1028 0024                  		move.b	$24(a0),d0
0000C830 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C834 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C838                            ; ===========================================================================
0000C838 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C83A 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C83C                            ; ===========================================================================
0000C83C                            
0000C83C                            Obj32_Main:				; XREF: Obj32_Index
0000C83C 5428 0024                  		addq.b	#2,$24(a0)
0000C840 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C848 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C84E 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C854 6700                       		beq.s	loc_BD60
0000C856 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C85C                            
0000C85C                            loc_BD60:
0000C85C 117C 0004 0001             		move.b	#4,1(a0)
0000C862 117C 0010 0019             		move.b	#$10,$19(a0)
0000C868 117C 0004 0018             		move.b	#4,$18(a0)
0000C86E 5668 000C                  		addq.w	#3,$C(a0)
0000C872                            
0000C872                            Obj32_Pressed:				; XREF: Obj32_Index
0000C872 4A28 0001                  		tst.b	1(a0)
0000C876 6A00                       		bpl.s	Obj32_Display
0000C878 323C 001B                  		move.w	#$1B,d1
0000C87C 343C 0005                  		move.w	#5,d2
0000C880 363C 0005                  		move.w	#5,d3
0000C884 3828 0008                  		move.w	8(a0),d4
0000C888 6100 0000                  		bsr.w	SolidObject
0000C88C 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C892 1028 0028                  		move.b	$28(a0),d0
0000C896 0240 000F                  		andi.w	#$F,d0
0000C89A 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C89E 47F3 0000                  		lea	(a3,d0.w),a3
0000C8A2 7600                       		moveq	#0,d3
0000C8A4 0828 0006 0028             		btst	#6,$28(a0)
0000C8AA 6700                       		beq.s	loc_BDB2
0000C8AC 7607                       		moveq	#7,d3
0000C8AE                            
0000C8AE                            loc_BDB2:
0000C8AE 4A28 0028                  		tst.b	$28(a0)
0000C8B2 6A00                       		bpl.s	loc_BDBE
0000C8B4 6100 0000                  		bsr.w	Obj32_MZBlock
0000C8B8 6600                       		bne.s	loc_BDC8
0000C8BA                            
0000C8BA                            loc_BDBE:
0000C8BA 4A28 0025                  		tst.b	$25(a0)
0000C8BE 6600                       		bne.s	loc_BDC8
0000C8C0 0793                       		bclr	d3,(a3)
0000C8C2 6000                       		bra.s	loc_BDDE
0000C8C4                            ; ===========================================================================
0000C8C4                            
0000C8C4                            loc_BDC8:
0000C8C4 4A13                       		tst.b	(a3)
0000C8C6 6600                       		bne.s	loc_BDD6
0000C8C8 303C 00CD                  		move.w	#$CD,d0
0000C8CC 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play switch sound
0000C8D2                            
0000C8D2                            loc_BDD6:
0000C8D2 07D3                       		bset	d3,(a3)
0000C8D4 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C8DA                            
0000C8DA                            loc_BDDE:
0000C8DA 0828 0005 0028             		btst	#5,$28(a0)
0000C8E0 6700                       		beq.s	Obj32_Display
0000C8E2 5328 001E                  		subq.b	#1,$1E(a0)
0000C8E6 6A00                       		bpl.s	Obj32_Display
0000C8E8 117C 0007 001E             		move.b	#7,$1E(a0)
0000C8EE 0868 0001 001A             		bchg	#1,$1A(a0)
0000C8F4                            
0000C8F4                            Obj32_Display:
0000C8F4 6100 0000                  		bsr.w	DisplaySprite
0000C8F8 3028 0008                  		move.w	8(a0),d0
0000C8FC 0240 FF80                  		andi.w	#$FF80,d0
0000C900 3238 F700                  		move.w	($FFFFF700).w,d1
0000C904 0441 0080                  		subi.w	#$80,d1
0000C908 0241 FF80                  		andi.w	#$FF80,d1
0000C90C 9041                       		sub.w	d1,d0
0000C90E 0C40 0280                  		cmpi.w	#$280,d0
0000C912 6200 0000                  		bhi.w	Obj32_Delete
0000C916 4E75                       		rts	
0000C918                            ; ===========================================================================
0000C918                            
0000C918                            Obj32_Delete:
0000C918 6100 0000                  		bsr.w	DeleteObject
0000C91C 4E75                       		rts	
0000C91E                            
0000C91E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C91E                            
0000C91E                            
0000C91E                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C91E 3F03                       		move.w	d3,-(sp)
0000C920 3428 0008                  		move.w	8(a0),d2
0000C924 3628 000C                  		move.w	$C(a0),d3
0000C928 0442 0010                  		subi.w	#$10,d2
0000C92C 5143                       		subq.w	#8,d3
0000C92E 383C 0020                  		move.w	#$20,d4
0000C932 3A3C 0010                  		move.w	#$10,d5
0000C936 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C93A 3C3C 005F                  		move.w	#$5F,d6
0000C93E                            
0000C93E                            Obj32_MZLoop:
0000C93E 4A29 0001                  		tst.b	1(a1)
0000C942 6A00                       		bpl.s	loc_BE4E
0000C944 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C948 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C94A                            
0000C94A                            loc_BE4E:
0000C94A 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C94E 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C952                            
0000C952 361F                       		move.w	(sp)+,d3
0000C954 7000                       		moveq	#0,d0
0000C956                            
0000C956                            locret_BE5A:
0000C956 4E75                       		rts	
0000C958                            ; ===========================================================================
0000C958 1010                       Obj32_MZData:	dc.b $10, $10
0000C95A                            ; ===========================================================================
0000C95A                            
0000C95A                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C95A 7001                       		moveq	#1,d0
0000C95C 0240 003F                  		andi.w	#$3F,d0
0000C960 D040                       		add.w	d0,d0
0000C962 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C966 121A                       		move.b	(a2)+,d1
0000C968 4881                       		ext.w	d1
0000C96A 3029 0008                  		move.w	8(a1),d0
0000C96E 9041                       		sub.w	d1,d0
0000C970 9042                       		sub.w	d2,d0
0000C972 6400                       		bcc.s	loc_BE80
0000C974 D241                       		add.w	d1,d1
0000C976 D041                       		add.w	d1,d0
0000C978 6500                       		bcs.s	loc_BE84
0000C97A 60CE                       		bra.s	loc_BE4E
0000C97C                            ; ===========================================================================
0000C97C                            
0000C97C                            loc_BE80:
0000C97C B044                       		cmp.w	d4,d0
0000C97E 62CA                       		bhi.s	loc_BE4E
0000C980                            
0000C980                            loc_BE84:
0000C980 121A                       		move.b	(a2)+,d1
0000C982 4881                       		ext.w	d1
0000C984 3029 000C                  		move.w	$C(a1),d0
0000C988 9041                       		sub.w	d1,d0
0000C98A 9043                       		sub.w	d3,d0
0000C98C 6400                       		bcc.s	loc_BE9A
0000C98E D241                       		add.w	d1,d1
0000C990 D041                       		add.w	d1,d0
0000C992 6500                       		bcs.s	loc_BE9E
0000C994 60B4                       		bra.s	loc_BE4E
0000C996                            ; ===========================================================================
0000C996                            
0000C996                            loc_BE9A:
0000C996 B045                       		cmp.w	d5,d0
0000C998 62B0                       		bhi.s	loc_BE4E
0000C99A                            
0000C99A                            loc_BE9E:
0000C99A 361F                       		move.w	(sp)+,d3
0000C99C 7001                       		moveq	#1,d0
0000C99E 4E75                       		rts	
0000C9A0                            ; End of function Obj32_MZBlock
0000C9A0                            
0000C9A0                            ; ===========================================================================
0000C9A0                            ; ---------------------------------------------------------------------------
0000C9A0                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C9A0                            ; ---------------------------------------------------------------------------
0000C9A0                            Map_obj32:
0000C9A0                            	include "_maps\obj32.asm"
0000C9A0                            ; ---------------------------------------------------------------------------
0000C9A0                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C9A0                            ; ---------------------------------------------------------------------------
0000C9A0 0000                       		dc.w byte_BEAC-Map_obj32
0000C9A2 0000                       		dc.w byte_BEB7-Map_obj32
0000C9A4 0000                       		dc.w byte_BEC2-Map_obj32
0000C9A6 0000                       		dc.w byte_BEB7-Map_obj32
0000C9A8 02                         byte_BEAC:	dc.b 2
0000C9A9 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C9AE F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C9B3 02                         byte_BEB7:	dc.b 2
0000C9B4 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C9B9 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C9BE 02                         byte_BEC2:	dc.b 2
0000C9BF F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C9C4 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C9C9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C9CE                            		even
0000C9CE                            		even
0000C9CE                            
0000C9CE                            ; ===========================================================================
0000C9CE                            ; ---------------------------------------------------------------------------
0000C9CE                            ; Object 33 - pushable blocks (MZ, LZ)
0000C9CE                            ; ---------------------------------------------------------------------------
0000C9CE                            
0000C9CE                            Obj33:					; XREF: Obj_Index
0000C9CE 7000                       		moveq	#0,d0
0000C9D0 1028 0024                  		move.b	$24(a0),d0
0000C9D4 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C9D8 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C9DC                            ; ===========================================================================
0000C9DC 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C9DE 0000                       		dc.w loc_BF6E-Obj33_Index
0000C9E0 0000                       		dc.w loc_C02C-Obj33_Index
0000C9E2                            
0000C9E2 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C9E4 4001                       		dc.b $40, 1
0000C9E6                            ; ===========================================================================
0000C9E6                            
0000C9E6                            Obj33_Main:				; XREF: Obj33_Index
0000C9E6 5428 0024                  		addq.b	#2,$24(a0)
0000C9EA 117C 000F 0016             		move.b	#$F,$16(a0)
0000C9F0 117C 000F 0017             		move.b	#$F,$17(a0)
0000C9F6 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C9FE 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000CA04 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000CA0A 6600                       		bne.s	loc_BF16
0000CA0C 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000CA12                            
0000CA12                            loc_BF16:
0000CA12 117C 0004 0001             		move.b	#4,1(a0)
0000CA18 117C 0003 0018             		move.b	#3,$18(a0)
0000CA1E 3168 0008 0034             		move.w	8(a0),$34(a0)
0000CA24 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000CA2A 7000                       		moveq	#0,d0
0000CA2C 1028 0028                  		move.b	$28(a0),d0
0000CA30 D040                       		add.w	d0,d0
0000CA32 0240 000E                  		andi.w	#$E,d0
0000CA36 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000CA3A 115A 0019                  		move.b	(a2)+,$19(a0)
0000CA3E 115A 001A                  		move.b	(a2)+,$1A(a0)
0000CA42 4A28 0028                  		tst.b	$28(a0)
0000CA46 6700                       		beq.s	Obj33_ChkGone
0000CA48 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000CA4E                            
0000CA4E                            Obj33_ChkGone:
0000CA4E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000CA52 7000                       		moveq	#0,d0
0000CA54 1028 0023                  		move.b	$23(a0),d0
0000CA58 6700                       		beq.s	loc_BF6E
0000CA5A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000CA60 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000CA66 6600 0000                  		bne.w	DeleteObject
0000CA6A                            
0000CA6A                            loc_BF6E:				; XREF: Obj33_Index
0000CA6A 4A28 0032                  		tst.b	$32(a0)
0000CA6E 6600 0000                  		bne.w	loc_C046
0000CA72 7200                       		moveq	#0,d1
0000CA74 1228 0019                  		move.b	$19(a0),d1
0000CA78 0641 000B                  		addi.w	#$B,d1
0000CA7C 343C 0010                  		move.w	#$10,d2
0000CA80 363C 0011                  		move.w	#$11,d3
0000CA84 3828 0008                  		move.w	8(a0),d4
0000CA88 6100 0000                  		bsr.w	loc_C186
0000CA8C 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000CA92 6600                       		bne.s	loc_BFC6	; if not, branch
0000CA94 08A8 0007 0028             		bclr	#7,$28(a0)
0000CA9A 3028 0008                  		move.w	8(a0),d0
0000CA9E 0C40 0A20                  		cmpi.w	#$A20,d0
0000CAA2 6500                       		bcs.s	loc_BFC6
0000CAA4 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000CAA8 6400                       		bcc.s	loc_BFC6
0000CAAA 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000CAAE 0440 001C                  		subi.w	#$1C,d0
0000CAB2 3140 000C                  		move.w	d0,$C(a0)
0000CAB6 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000CABC 08E8 0007 0028             		bset	#7,$28(a0)
0000CAC2                            
0000CAC2                            loc_BFC6:
0000CAC2 3028 0008                  		move.w	8(a0),d0
0000CAC6 0240 FF80                  		andi.w	#$FF80,d0
0000CACA 3238 F700                  		move.w	($FFFFF700).w,d1
0000CACE 0441 0080                  		subi.w	#$80,d1
0000CAD2 0241 FF80                  		andi.w	#$FF80,d1
0000CAD6 9041                       		sub.w	d1,d0
0000CAD8 0C40 0280                  		cmpi.w	#$280,d0
0000CADC 6200                       		bhi.s	loc_BFE6
0000CADE 6000 0000                  		bra.w	DisplaySprite
0000CAE2                            ; ===========================================================================
0000CAE2                            
0000CAE2                            loc_BFE6:
0000CAE2 3028 0034                  		move.w	$34(a0),d0
0000CAE6 0240 FF80                  		andi.w	#$FF80,d0
0000CAEA 3238 F700                  		move.w	($FFFFF700).w,d1
0000CAEE 0441 0080                  		subi.w	#$80,d1
0000CAF2 0241 FF80                  		andi.w	#$FF80,d1
0000CAF6 9041                       		sub.w	d1,d0
0000CAF8 0C40 0280                  		cmpi.w	#$280,d0
0000CAFC 6200                       		bhi.s	loc_C016
0000CAFE 3168 0034 0008             		move.w	$34(a0),8(a0)
0000CB04 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000CB0A 117C 0004 0024             		move.b	#4,$24(a0)
0000CB10 6000                       		bra.s	loc_C02C
0000CB12                            ; ===========================================================================
0000CB12                            
0000CB12                            loc_C016:
0000CB12 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000CB16 7000                       		moveq	#0,d0
0000CB18 1028 0023                  		move.b	$23(a0),d0
0000CB1C 6700                       		beq.s	loc_C028
0000CB1E 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000CB24                            
0000CB24                            loc_C028:
0000CB24 6000 0000                  		bra.w	DeleteObject
0000CB28                            ; ===========================================================================
0000CB28                            
0000CB28                            loc_C02C:				; XREF: Obj33_Index
0000CB28 6100 0000                  		bsr.w	ChkObjOnScreen2
0000CB2C 6700                       		beq.s	locret_C044
0000CB2E 117C 0002 0024             		move.b	#2,$24(a0)
0000CB34 4228 0032                  		clr.b	$32(a0)
0000CB38 4268 0010                  		clr.w	$10(a0)
0000CB3C 4268 0012                  		clr.w	$12(a0)
0000CB40                            
0000CB40                            locret_C044:
0000CB40 4E75                       		rts	
0000CB42                            ; ===========================================================================
0000CB42                            
0000CB42                            loc_C046:				; XREF: loc_BF6E
0000CB42 3F28 0008                  		move.w	8(a0),-(sp)
0000CB46 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000CB4C 6400                       		bcc.s	loc_C056
0000CB4E 6100 0000                  		bsr.w	SpeedToPos
0000CB52                            
0000CB52                            loc_C056:
0000CB52 0828 0001 0022             		btst	#1,$22(a0)
0000CB58 6700                       		beq.s	loc_C0A0
0000CB5A 0668 0018 0012             		addi.w	#$18,$12(a0)
0000CB60 4EB9 0000 0000             		jsr	ObjHitFloor
0000CB66 4A41                       		tst.w	d1
0000CB68 6A00 0000                  		bpl.w	loc_C09E
0000CB6C D368 000C                  		add.w	d1,$C(a0)
0000CB70 4268 0012                  		clr.w	$12(a0)
0000CB74 08A8 0001 0022             		bclr	#1,$22(a0)
0000CB7A 3011                       		move.w	(a1),d0
0000CB7C 0240 03FF                  		andi.w	#$3FF,d0
0000CB80 0C40 016A                  		cmpi.w	#$16A,d0
0000CB84 6500                       		bcs.s	loc_C09E
0000CB86 3028 0030                  		move.w	$30(a0),d0
0000CB8A E640                       		asr.w	#3,d0
0000CB8C 3140 0010                  		move.w	d0,$10(a0)
0000CB90 117C 0001 0032             		move.b	#1,$32(a0)
0000CB96 4268 000E                  		clr.w	$E(a0)
0000CB9A                            
0000CB9A                            loc_C09E:
0000CB9A 6000                       		bra.s	loc_C0E6
0000CB9C                            ; ===========================================================================
0000CB9C                            
0000CB9C                            loc_C0A0:
0000CB9C 4A68 0010                  		tst.w	$10(a0)
0000CBA0 6700 0000                  		beq.w	loc_C0D6
0000CBA4 6B00                       		bmi.s	loc_C0BC
0000CBA6 7600                       		moveq	#0,d3
0000CBA8 1628 0019                  		move.b	$19(a0),d3
0000CBAC 4EB9 0000 0000             		jsr	ObjHitWallRight
0000CBB2 4A41                       		tst.w	d1		; has block touched a wall?
0000CBB4 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000CBB6 6000                       		bra.s	loc_C0E6
0000CBB8                            ; ===========================================================================
0000CBB8                            
0000CBB8                            loc_C0BC:
0000CBB8 7600                       		moveq	#0,d3
0000CBBA 1628 0019                  		move.b	$19(a0),d3
0000CBBE 4643                       		not.w	d3
0000CBC0 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000CBC6 4A41                       		tst.w	d1		; has block touched a wall?
0000CBC8 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000CBCA 6000                       		bra.s	loc_C0E6
0000CBCC                            ; ===========================================================================
0000CBCC                            
0000CBCC                            Obj33_StopPush:
0000CBCC 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000CBD0 6000                       		bra.s	loc_C0E6
0000CBD2                            ; ===========================================================================
0000CBD2                            
0000CBD2                            loc_C0D6:
0000CBD2 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000CBDA 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000CBE0 6400                       		bcc.s	loc_C104
0000CBE2                            
0000CBE2                            loc_C0E6:
0000CBE2 7200                       		moveq	#0,d1
0000CBE4 1228 0019                  		move.b	$19(a0),d1
0000CBE8 0641 000B                  		addi.w	#$B,d1
0000CBEC 343C 0010                  		move.w	#$10,d2
0000CBF0 363C 0011                  		move.w	#$11,d3
0000CBF4 381F                       		move.w	(sp)+,d4
0000CBF6 6100 0000                  		bsr.w	loc_C186
0000CBFA 6100                       		bsr.s	Obj33_ChkLava
0000CBFC 6000 FEC4                  		bra.w	loc_BFC6
0000CC00                            ; ===========================================================================
0000CC00                            
0000CC00                            loc_C104:
0000CC00 381F                       		move.w	(sp)+,d4
0000CC02 43F8 D000                  		lea	($FFFFD000).w,a1
0000CC06 08A9 0003 0022             		bclr	#3,$22(a1)
0000CC0C 08A8 0003 0022             		bclr	#3,$22(a0)
0000CC12 6000 FECE                  		bra.w	loc_BFE6
0000CC16                            ; ===========================================================================
0000CC16                            
0000CC16                            Obj33_ChkLava:
0000CC16 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000CC1C 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000CC1E 343C FFE0                  		move.w	#-$20,d2
0000CC22 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000CC28 6700                       		beq.s	Obj33_LoadLava
0000CC2A 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000CC30 6700                       		beq.s	Obj33_LoadLava
0000CC32 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000CC38 6700                       		beq.s	Obj33_LoadLava
0000CC3A 4E75                       		rts	
0000CC3C                            ; ===========================================================================
0000CC3C                            
0000CC3C                            Obj33_ChkLava2:
0000CC3C 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000CC42 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000CC44 343C 0020                  		move.w	#$20,d2
0000CC48 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000CC4E 6700                       		beq.s	Obj33_LoadLava
0000CC50 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000CC56 6700                       		beq.s	Obj33_LoadLava
0000CC58                            
0000CC58                            Obj33_NoLava:
0000CC58 4E75                       		rts	
0000CC5A                            ; ===========================================================================
0000CC5A                            
0000CC5A                            Obj33_LoadLava:
0000CC5A 6100 0000                  		bsr.w	SingleObjLoad
0000CC5E 6600                       		bne.s	locret_C184
0000CC60 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000CC64 3368 0008 0008             		move.w	8(a0),8(a1)
0000CC6A D569 0008                  		add.w	d2,8(a1)
0000CC6E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CC74 0669 0010 000C             		addi.w	#$10,$C(a1)
0000CC7A 2348 003C                  		move.l	a0,$3C(a1)
0000CC7E                            
0000CC7E                            locret_C184:
0000CC7E 4E75                       		rts	
0000CC80                            ; ===========================================================================
0000CC80                            
0000CC80                            loc_C186:				; XREF: loc_BF6E
0000CC80 1028 0025                  		move.b	$25(a0),d0
0000CC84 6700 0000                  		beq.w	loc_C218
0000CC88 5500                       		subq.b	#2,d0
0000CC8A 6600                       		bne.s	loc_C1AA
0000CC8C 6100 B3DE                  		bsr.w	ExitPlatform
0000CC90 0829 0003 0022             		btst	#3,$22(a1)
0000CC96 6600                       		bne.s	loc_C1A4
0000CC98 4228 0025                  		clr.b	$25(a0)
0000CC9C 4E75                       		rts	
0000CC9E                            ; ===========================================================================
0000CC9E                            
0000CC9E                            loc_C1A4:
0000CC9E 3404                       		move.w	d4,d2
0000CCA0 6000 B928                  		bra.w	MvSonicOnPtfm
0000CCA4                            ; ===========================================================================
0000CCA4                            
0000CCA4                            loc_C1AA:
0000CCA4 5500                       		subq.b	#2,d0
0000CCA6 6600                       		bne.s	loc_C1F2
0000CCA8 6100 0000                  		bsr.w	SpeedToPos
0000CCAC 0668 0018 0012             		addi.w	#$18,$12(a0)
0000CCB2 4EB9 0000 0000             		jsr	ObjHitFloor
0000CCB8 4A41                       		tst.w	d1
0000CCBA 6A00 0000                  		bpl.w	locret_C1F0
0000CCBE D368 000C                  		add.w	d1,$C(a0)
0000CCC2 4268 0012                  		clr.w	$12(a0)
0000CCC6 4228 0025                  		clr.b	$25(a0)
0000CCCA 3011                       		move.w	(a1),d0
0000CCCC 0240 03FF                  		andi.w	#$3FF,d0
0000CCD0 0C40 016A                  		cmpi.w	#$16A,d0
0000CCD4 6500                       		bcs.s	locret_C1F0
0000CCD6 3028 0030                  		move.w	$30(a0),d0
0000CCDA E640                       		asr.w	#3,d0
0000CCDC 3140 0010                  		move.w	d0,$10(a0)
0000CCE0 117C 0001 0032             		move.b	#1,$32(a0)
0000CCE6 4268 000E                  		clr.w	$E(a0)
0000CCEA                            
0000CCEA                            locret_C1F0:
0000CCEA 4E75                       		rts	
0000CCEC                            ; ===========================================================================
0000CCEC                            
0000CCEC                            loc_C1F2:
0000CCEC 6100 0000                  		bsr.w	SpeedToPos
0000CCF0 3028 0008                  		move.w	8(a0),d0
0000CCF4 0240 000C                  		andi.w	#$C,d0
0000CCF8 6600 0000                  		bne.w	locret_C2E4
0000CCFC 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000CD02 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000CD08 4268 0010                  		clr.w	$10(a0)
0000CD0C 5528 0025                  		subq.b	#2,$25(a0)
0000CD10 4E75                       		rts	
0000CD12                            ; ===========================================================================
0000CD12                            
0000CD12                            loc_C218:
0000CD12 6100 0000                  		bsr.w	loc_FAC8
0000CD16 4A44                       		tst.w	d4
0000CD18 6700 0000                  		beq.w	locret_C2E4
0000CD1C 6B00 0000                  		bmi.w	locret_C2E4
0000CD20 4A28 0032                  		tst.b	$32(a0)
0000CD24 6700                       		beq.s	loc_C230
0000CD26 6000 0000                  		bra.w	locret_C2E4
0000CD2A                            ; ===========================================================================
0000CD2A                            
0000CD2A                            loc_C230:
0000CD2A 4A40                       		tst.w	d0
0000CD2C 6700 0000                  		beq.w	locret_C2E4
0000CD30 6B00                       		bmi.s	loc_C268
0000CD32 0829 0000 0022             		btst	#0,$22(a1)
0000CD38 6600 0000                  		bne.w	locret_C2E4
0000CD3C 3F00                       		move.w	d0,-(sp)
0000CD3E 7600                       		moveq	#0,d3
0000CD40 1628 0019                  		move.b	$19(a0),d3
0000CD44 4EB9 0000 0000             		jsr	ObjHitWallRight
0000CD4A 301F                       		move.w	(sp)+,d0
0000CD4C 4A41                       		tst.w	d1
0000CD4E 6B00 0000                  		bmi.w	locret_C2E4
0000CD52 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000CD5A 7001                       		moveq	#1,d0
0000CD5C 323C 0040                  		move.w	#$40,d1
0000CD60 6000                       		bra.s	loc_C294
0000CD62                            ; ===========================================================================
0000CD62                            
0000CD62                            loc_C268:
0000CD62 0829 0000 0022             		btst	#0,$22(a1)
0000CD68 6700                       		beq.s	locret_C2E4
0000CD6A 3F00                       		move.w	d0,-(sp)
0000CD6C 7600                       		moveq	#0,d3
0000CD6E 1628 0019                  		move.b	$19(a0),d3
0000CD72 4643                       		not.w	d3
0000CD74 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000CD7A 301F                       		move.w	(sp)+,d0
0000CD7C 4A41                       		tst.w	d1
0000CD7E 6B00                       		bmi.s	locret_C2E4
0000CD80 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000CD88 70FF                       		moveq	#-1,d0
0000CD8A 323C FFC0                  		move.w	#-$40,d1
0000CD8E                            
0000CD8E                            loc_C294:
0000CD8E 43F8 D000                  		lea	($FFFFD000).w,a1
0000CD92 D169 0008                  		add.w	d0,8(a1)
0000CD96 3341 0014                  		move.w	d1,$14(a1)
0000CD9A 337C 0000 0010             		move.w	#0,$10(a1)
0000CDA0 3F00                       		move.w	d0,-(sp)
0000CDA2 303C 00A7                  		move.w	#$A7,d0
0000CDA6 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play pushing sound
0000CDAC 301F                       		move.w	(sp)+,d0
0000CDAE 4A28 0028                  		tst.b	$28(a0)
0000CDB2 6B00                       		bmi.s	locret_C2E4
0000CDB4 3F00                       		move.w	d0,-(sp)
0000CDB6 4EB9 0000 0000             		jsr	ObjHitFloor
0000CDBC 301F                       		move.w	(sp)+,d0
0000CDBE 0C41 0004                  		cmpi.w	#4,d1
0000CDC2 6F00                       		ble.s	loc_C2E0
0000CDC4 317C 0400 0010             		move.w	#$400,$10(a0)
0000CDCA 4A40                       		tst.w	d0
0000CDCC 6A00                       		bpl.s	loc_C2D8
0000CDCE 4468 0010                  		neg.w	$10(a0)
0000CDD2                            
0000CDD2                            loc_C2D8:
0000CDD2 117C 0006 0025             		move.b	#6,$25(a0)
0000CDD8 6000                       		bra.s	locret_C2E4
0000CDDA                            ; ===========================================================================
0000CDDA                            
0000CDDA                            loc_C2E0:
0000CDDA D368 000C                  		add.w	d1,$C(a0)
0000CDDE                            
0000CDDE                            locret_C2E4:
0000CDDE 4E75                       		rts	
0000CDE0                            ; ===========================================================================
0000CDE0                            ; ---------------------------------------------------------------------------
0000CDE0                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CDE0                            ; ---------------------------------------------------------------------------
0000CDE0                            Map_obj33:
0000CDE0                            	include "_maps\obj33.asm"
0000CDE0                            ; ---------------------------------------------------------------------------
0000CDE0                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CDE0                            ; ---------------------------------------------------------------------------
0000CDE0 0000                       		dc.w byte_C2EA-Map_obj33
0000CDE2 0000                       		dc.w byte_C2F0-Map_obj33
0000CDE4 01                         byte_C2EA:	dc.b 1
0000CDE5 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000CDEA 04                         byte_C2F0:	dc.b 4
0000CDEB F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000CDF0 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000CDF5 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000CDFA F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000CE00 00                         		even
0000CE00 00                         		even
0000CE00                            
0000CE00                            ; ===========================================================================
0000CE00                            ; ---------------------------------------------------------------------------
0000CE00                            ; Object 34 - zone title cards
0000CE00                            ; ---------------------------------------------------------------------------
0000CE00                            
0000CE00                            Obj34:					; XREF: Obj_Index
0000CE00 7000                       		moveq	#0,d0
0000CE02 1028 0024                  		move.b	$24(a0),d0
0000CE06 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000CE0A 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000CE0E                            ; ===========================================================================
0000CE0E 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000CE10 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000CE12 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CE14 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CE16                            ; ===========================================================================
0000CE16                            
0000CE16                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000CE16 2248                       		movea.l	a0,a1
0000CE18 7000                       		moveq	#0,d0
0000CE1A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CE1E 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000CE24 6600                       		bne.s	Obj34_CheckFZ
0000CE26 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000CE28                            
0000CE28                            Obj34_CheckFZ:
0000CE28 3400                       		move.w	d0,d2
0000CE2A 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000CE30 6600                       		bne.s	Obj34_LoadConfig
0000CE32 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000CE34 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000CE36                            
0000CE36                            Obj34_LoadConfig:
0000CE36 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000CE3C E948                       		lsl.w	#4,d0
0000CE3E D6C0                       		adda.w	d0,a3
0000CE40 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000CE46 7203                       		moveq	#3,d1
0000CE48                            
0000CE48                            Obj34_Loop:
0000CE48 12BC 0034                  		move.b	#$34,0(a1)
0000CE4C 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000CE50 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000CE54 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000CE58 335A 000A                  		move.w	(a2)+,$A(a1)
0000CE5C 135A 0024                  		move.b	(a2)+,$24(a1)
0000CE60 101A                       		move.b	(a2)+,d0
0000CE62 6600                       		bne.s	Obj34_ActNumber
0000CE64 1002                       		move.b	d2,d0
0000CE66                            
0000CE66                            Obj34_ActNumber:
0000CE66 0C00 0007                  		cmpi.b	#7,d0
0000CE6A 6600                       		bne.s	Obj34_MakeSprite
0000CE6C D038 FE11                  		add.b	($FFFFFE11).w,d0
0000CE70 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000CE76 6600                       		bne.s	Obj34_MakeSprite
0000CE78 5300                       		subq.b	#1,d0
0000CE7A                            
0000CE7A                            Obj34_MakeSprite:
0000CE7A 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000CE7E 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000CE86 337C 8580 0002             		move.w	#$8580,2(a1)
0000CE8C 137C 0078 0019             		move.b	#$78,$19(a1)
0000CE92 137C 0000 0001             		move.b	#0,1(a1)
0000CE98 137C 0000 0018             		move.b	#0,$18(a1)
0000CE9E 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000CEA4 43E9 0040                  		lea	$40(a1),a1	; next object
0000CEA8 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000CEAC                            
0000CEAC                            Obj34_ChkPos:				; XREF: Obj34_Index
0000CEAC 7210                       		moveq	#$10,d1		; set horizontal speed
0000CEAE 3028 0030                  		move.w	$30(a0),d0
0000CEB2 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000CEB6 6700                       		beq.s	loc_C3C8	; if yes, branch
0000CEB8 6C00                       		bge.s	Obj34_Move
0000CEBA 4441                       		neg.w	d1
0000CEBC                            
0000CEBC                            Obj34_Move:
0000CEBC D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CEC0                            
0000CEC0                            loc_C3C8:
0000CEC0 3028 0008                  		move.w	8(a0),d0
0000CEC4 6B00                       		bmi.s	locret_C3D8
0000CEC6 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CECA 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000CECC 6000 0000                  		bra.w	DisplaySprite
0000CED0                            ; ===========================================================================
0000CED0                            
0000CED0                            locret_C3D8:
0000CED0 4E75                       		rts	
0000CED2                            ; ===========================================================================
0000CED2                            
0000CED2                            Obj34_Wait:				; XREF: Obj34_Index
0000CED2 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000CED6 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000CED8 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000CEDC 6000 0000                  		bra.w	DisplaySprite
0000CEE0                            ; ===========================================================================
0000CEE0                            
0000CEE0                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000CEE0 4A28 0001                  		tst.b	1(a0)
0000CEE4 6A00                       		bpl.s	Obj34_ChangeArt
0000CEE6 7220                       		moveq	#$20,d1
0000CEE8 3028 0032                  		move.w	$32(a0),d0
0000CEEC B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000CEF0 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000CEF2 6C00                       		bge.s	Obj34_Move2
0000CEF4 4441                       		neg.w	d1
0000CEF6                            
0000CEF6                            Obj34_Move2:
0000CEF6 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CEFA 3028 0008                  		move.w	8(a0),d0
0000CEFE 6B00                       		bmi.s	locret_C412
0000CF00 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CF04 6400                       		bcc.s	locret_C412	; if yes, branch
0000CF06 6000 0000                  		bra.w	DisplaySprite
0000CF0A                            ; ===========================================================================
0000CF0A                            
0000CF0A                            locret_C412:
0000CF0A 4E75                       		rts	
0000CF0C                            ; ===========================================================================
0000CF0C                            
0000CF0C                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000CF0C 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000CF12 6600                       		bne.s	Obj34_Delete
0000CF14 7002                       		moveq	#2,d0
0000CF16 4EB9 0000 16EA             		jsr	(LoadPLC).l	; load explosion patterns
0000CF1C 7000                       		moveq	#0,d0
0000CF1E 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CF22 0640 0015                  		addi.w	#$15,d0
0000CF26 4EB9 0000 16EA             		jsr	(LoadPLC).l	; load animal patterns
0000CF2C                            
0000CF2C                            Obj34_Delete:
0000CF2C 6000 0000                  		bra.w	DeleteObject
0000CF30                            ; ===========================================================================
0000CF30 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000CF32 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000CF34 00E4                       		dc.w $E4
0000CF36 0206                       		dc.b 2,	6
0000CF38 00EA                       		dc.w $EA
0000CF3A 0207                       		dc.b 2,	7
0000CF3C 00E0                       		dc.w $E0
0000CF3E 020A                       		dc.b 2,	$A
0000CF40                            ; ---------------------------------------------------------------------------
0000CF40                            ; Title	card configuration data
0000CF40                            ; Format:
0000CF40                            ; 4 bytes per item (YYYY XXXX)
0000CF40                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000CF40                            ; ---------------------------------------------------------------------------
0000CF40 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CF50 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000CF60 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000CF70 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000CF80 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000CF90 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000CFA0 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000CFB0                            ; ===========================================================================
0000CFB0                            ; ---------------------------------------------------------------------------
0000CFB0                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000CFB0                            ; ---------------------------------------------------------------------------
0000CFB0                            
0000CFB0                            Obj39:					; XREF: Obj_Index
0000CFB0 7000                       		moveq	#0,d0
0000CFB2 1028 0024                  		move.b	$24(a0),d0
0000CFB6 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000CFBA 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000CFBE                            ; ===========================================================================
0000CFBE 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000CFC0 0000                       		dc.w loc_C50C-Obj39_Index
0000CFC2 0000                       		dc.w Obj39_Wait-Obj39_Index
0000CFC4                            ; ===========================================================================
0000CFC4                            
0000CFC4                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000CFC4 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CFC8 6700                       		beq.s	Obj39_Main	; if yes, branch
0000CFCA 4E75                       		rts	
0000CFCC                            ; ===========================================================================
0000CFCC                            
0000CFCC                            Obj39_Main:
0000CFCC 5428 0024                  		addq.b	#2,$24(a0)
0000CFD0 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000CFD6 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000CFDC 6700                       		beq.s	loc_C4EC	; if not, branch
0000CFDE 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000CFE4                            
0000CFE4                            loc_C4EC:
0000CFE4 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000CFEA 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000CFF2 317C 855E 0002             		move.w	#$855E,2(a0)
0000CFF8 117C 0000 0001             		move.b	#0,1(a0)
0000CFFE 117C 0000 0018             		move.b	#0,$18(a0)
0000D004                            
0000D004                            loc_C50C:				; XREF: Obj39_Index
0000D004 7210                       		moveq	#$10,d1		; set horizontal speed
0000D006 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000D00C 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000D00E 6500                       		bcs.s	Obj39_Move
0000D010 4441                       		neg.w	d1
0000D012                            
0000D012                            Obj39_Move:
0000D012 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D016 6000 0000                  		bra.w	DisplaySprite
0000D01A                            ; ===========================================================================
0000D01A                            
0000D01A                            Obj39_SetWait:				; XREF: Obj39_Main
0000D01A 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000D020 5428 0024                  		addq.b	#2,$24(a0)
0000D024 4E75                       		rts	
0000D026                            ; ===========================================================================
0000D026                            
0000D026                            Obj39_Wait:				; XREF: Obj39_Index
0000D026 1038 F605                  		move.b	($FFFFF605).w,d0
0000D02A 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000D02E 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000D030 0828 0000 001A             		btst	#0,$1A(a0)
0000D036 6600                       		bne.s	Obj39_Display
0000D038 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000D03C 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000D03E 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D042 6000 0000                  		bra.w	DisplaySprite
0000D046                            ; ===========================================================================
0000D046                            
0000D046                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000D046 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000D04A 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000D04C 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000D052 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000D056 6600                       		bne.s	Obj39_Display	; if yes, branch
0000D058 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000D05E 6000                       		bra.s	Obj39_Display
0000D060                            ; ===========================================================================
0000D060                            
0000D060                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000D060 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D066                            
0000D066                            Obj39_Display:				; XREF: Obj39_ChgMode
0000D066 6000 0000                  		bra.w	DisplaySprite
0000D06A                            ; ===========================================================================
0000D06A                            ; ---------------------------------------------------------------------------
0000D06A                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000D06A                            ; ---------------------------------------------------------------------------
0000D06A                            
0000D06A                            Obj3A:					; XREF: Obj_Index
0000D06A 7000                       		moveq	#0,d0
0000D06C 1028 0024                  		move.b	$24(a0),d0
0000D070 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000D074 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000D078                            ; ===========================================================================
0000D078 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000D07A 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000D07C 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D07E 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000D080 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D082 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000D084 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D086 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000D088 0000                       		dc.w loc_C766-Obj3A_Index
0000D08A                            ; ===========================================================================
0000D08A                            
0000D08A                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000D08A 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D08E 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000D090 4E75                       		rts	
0000D092                            ; ===========================================================================
0000D092                            
0000D092                            Obj3A_Main:
0000D092 2248                       		movea.l	a0,a1
0000D094 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000D09A 7206                       		moveq	#6,d1
0000D09C                            
0000D09C                            Obj3A_Loop:
0000D09C 12BC 003A                  		move.b	#$3A,0(a1)
0000D0A0 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000D0A4 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000D0A8 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D0AC 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D0B0 135A 0024                  		move.b	(a2)+,$24(a1)
0000D0B4 101A                       		move.b	(a2)+,d0
0000D0B6 0C00 0006                  		cmpi.b	#6,d0
0000D0BA 6600                       		bne.s	loc_C5CA
0000D0BC D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000D0C0                            
0000D0C0                            loc_C5CA:
0000D0C0 1340 001A                  		move.b	d0,$1A(a1)
0000D0C4 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000D0CC 337C 8580 0002             		move.w	#$8580,2(a1)
0000D0D2 137C 0000 0001             		move.b	#0,1(a1)
0000D0D8 43E9 0040                  		lea	$40(a1),a1
0000D0DC 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000D0E0                            
0000D0E0                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000D0E0 7210                       		moveq	#$10,d1		; set horizontal speed
0000D0E2 3028 0030                  		move.w	$30(a0),d0
0000D0E6 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D0EA 6700                       		beq.s	loc_C61A	; if yes, branch
0000D0EC 6C00                       		bge.s	Obj3A_Move
0000D0EE 4441                       		neg.w	d1
0000D0F0                            
0000D0F0                            Obj3A_Move:
0000D0F0 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D0F4                            
0000D0F4                            loc_C5FE:				; XREF: loc_C61A
0000D0F4 3028 0008                  		move.w	8(a0),d0
0000D0F8 6B00                       		bmi.s	locret_C60E
0000D0FA 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D0FE 6400                       		bcc.s	locret_C60E	; if yes, branch
0000D100 6000 0000                  		bra.w	DisplaySprite
0000D104                            ; ===========================================================================
0000D104                            
0000D104                            locret_C60E:
0000D104 4E75                       		rts	
0000D106                            ; ===========================================================================
0000D106                            
0000D106                            loc_C610:				; XREF: loc_C61A
0000D106 117C 000E 0024             		move.b	#$E,$24(a0)
0000D10C 6000 0000                  		bra.w	Obj3A_ChkPos2
0000D110                            ; ===========================================================================
0000D110                            
0000D110                            loc_C61A:				; XREF: Obj3A_ChkPos
0000D110 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000D116 67EE                       		beq.s	loc_C610
0000D118 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D11E 66D4                       		bne.s	loc_C5FE
0000D120 5428 0024                  		addq.b	#2,$24(a0)
0000D124 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D12A                            
0000D12A                            Obj3A_Wait:				; XREF: Obj3A_Index
0000D12A 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D12E 6600                       		bne.s	Obj3A_Display
0000D130 5428 0024                  		addq.b	#2,$24(a0)
0000D134                            
0000D134                            Obj3A_Display:
0000D134 6000 0000                  		bra.w	DisplaySprite
0000D138                            ; ===========================================================================
0000D138                            
0000D138                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000D138 6100 0000                  		bsr.w	DisplaySprite
0000D13C 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000D142 7000                       		moveq	#0,d0
0000D144 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000D148 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000D14A 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D14E 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000D154                            
0000D154                            Obj3A_RingBonus:
0000D154 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D158 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000D15A 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D15E 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D164                            
0000D164                            Obj3A_ChkBonus:
0000D164 4A40                       		tst.w	d0		; is there any bonus?
0000D166 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000D168 303C 00C5                  		move.w	#$C5,d0
0000D16C 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D172 5428 0024                  		addq.b	#2,$24(a0)
0000D176 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000D17C 6600                       		bne.s	Obj3A_SetDelay
0000D17E 5828 0024                  		addq.b	#4,$24(a0)
0000D182                            
0000D182                            Obj3A_SetDelay:
0000D182 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D188                            
0000D188                            locret_C692:
0000D188 4E75                       		rts	
0000D18A                            ; ===========================================================================
0000D18A                            
0000D18A                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000D18A 4EB9 0000 0000             		jsr	AddPoints
0000D190 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D194 0200 0003                  		andi.b	#3,d0
0000D198 66EE                       		bne.s	locret_C692
0000D19A 303C 00CD                  		move.w	#$CD,d0
0000D19E 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D1A4                            ; ===========================================================================
0000D1A4                            
0000D1A4                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000D1A4 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D1A8 0240 0007                  		andi.w	#7,d0
0000D1AC E748                       		lsl.w	#3,d0
0000D1AE 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000D1B2 0241 0003                  		andi.w	#3,d1
0000D1B6 D241                       		add.w	d1,d1
0000D1B8 D041                       		add.w	d1,d0
0000D1BA 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000D1BE 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000D1C2 4A40                       		tst.w	d0
0000D1C4 6600                       		bne.s	Obj3A_ChkSS
0000D1C6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000D1CC 6000                       		bra.s	Obj3A_Display2
0000D1CE                            ; ===========================================================================
0000D1CE                            
0000D1CE                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000D1CE 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000D1D2 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000D1D6 6700                       		beq.s	loc_C6EA	; if not, branch
0000D1D8 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000D1DE 6000                       		bra.s	Obj3A_Display2
0000D1E0                            ; ===========================================================================
0000D1E0                            
0000D1E0                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000D1E0 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D1E6                            
0000D1E6                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000D1E6 6000 0000                  		bra.w	DisplaySprite
0000D1EA                            ; ===========================================================================
0000D1EA                            ; ---------------------------------------------------------------------------
0000D1EA                            ; Level	order array
0000D1EA                            ; ---------------------------------------------------------------------------
0000D1EA                            LevelOrder:	incbin	misc\lvl_ord.bin
0000D21A                            		even
0000D21A                            ; ===========================================================================
0000D21A                            
0000D21A                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000D21A 7220                       		moveq	#$20,d1		; set horizontal speed
0000D21C 3028 0032                  		move.w	$32(a0),d0
0000D220 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000D224 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000D226 6C00                       		bge.s	Obj3A_Move2
0000D228 4441                       		neg.w	d1
0000D22A                            
0000D22A                            Obj3A_Move2:
0000D22A D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D22E 3028 0008                  		move.w	8(a0),d0
0000D232 6B00                       		bmi.s	locret_C748
0000D234 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D238 6400                       		bcc.s	locret_C748	; if yes, branch
0000D23A 6000 0000                  		bra.w	DisplaySprite
0000D23E                            ; ===========================================================================
0000D23E                            
0000D23E                            locret_C748:
0000D23E 4E75                       		rts	
0000D240                            ; ===========================================================================
0000D240                            
0000D240                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000D240 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D246 6600 0000                  		bne.w	DeleteObject
0000D24A 5428 0024                  		addq.b	#2,$24(a0)
0000D24E 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000D252 303C 008D                  		move.w	#$8D,d0
0000D256 4EF9 0000 1470             		jmp	(PlaySound).l	; play FZ music
0000D25C                            ; ===========================================================================
0000D25C                            
0000D25C                            loc_C766:				; XREF: Obj3A_Index
0000D25C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000D260 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000D266 6700 0000                  		beq.w	DeleteObject
0000D26A 4E75                       		rts	
0000D26C                            ; ===========================================================================
0000D26C 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000D272 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000D274 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000D27A 0201                       		dc.b 2,	1
0000D27C 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000D282 0206                       		dc.b 2,	6
0000D284 0520 0120 00EC             		dc.w $520, $120, $EC
0000D28A 0202                       		dc.b 2,	2
0000D28C 0540 0120 00FC             		dc.w $540, $120, $FC
0000D292 0203                       		dc.b 2,	3
0000D294 0560 0120 010C             		dc.w $560, $120, $10C
0000D29A 0204                       		dc.b 2,	4
0000D29C 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000D2A2 0205                       		dc.b 2,	5
0000D2A4                            ; ===========================================================================
0000D2A4                            ; ---------------------------------------------------------------------------
0000D2A4                            ; Object 7E - special stage results screen
0000D2A4                            ; ---------------------------------------------------------------------------
0000D2A4                            
0000D2A4                            Obj7E:					; XREF: Obj_Index
0000D2A4 7000                       		moveq	#0,d0
0000D2A6 1028 0024                  		move.b	$24(a0),d0
0000D2AA 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000D2AE 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000D2B2                            ; ===========================================================================
0000D2B2 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000D2B4 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000D2B6 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D2B8 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000D2BA 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D2BC 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D2BE 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D2C0 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000D2C2 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D2C4 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D2C6 0000                       		dc.w loc_C91A-Obj7E_Index
0000D2C8                            ; ===========================================================================
0000D2C8                            
0000D2C8                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000D2C8 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D2CC 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000D2CE 4E75                       		rts	
0000D2D0                            ; ===========================================================================
0000D2D0                            
0000D2D0                            Obj7E_Main:
0000D2D0 2248                       		movea.l	a0,a1
0000D2D2 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000D2D8 7203                       		moveq	#3,d1
0000D2DA 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000D2E0 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000D2E2 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000D2E4                            
0000D2E4                            Obj7E_Loop:
0000D2E4 12BC 007E                  		move.b	#$7E,0(a1)
0000D2E8 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000D2EC 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D2F0 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D2F4 135A 0024                  		move.b	(a2)+,$24(a1)
0000D2F8 135A 001A                  		move.b	(a2)+,$1A(a1)
0000D2FC 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000D304 337C 8580 0002             		move.w	#$8580,2(a1)
0000D30A 137C 0000 0001             		move.b	#0,1(a1)
0000D310 43E9 0040                  		lea	$40(a1),a1
0000D314 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000D318                            
0000D318 7007                       		moveq	#7,d0
0000D31A 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000D31E 6700                       		beq.s	loc_C842
0000D320 7000                       		moveq	#0,d0
0000D322 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000D326 6600                       		bne.s	loc_C842	; if not, branch
0000D328 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000D32A 317C 0018 0008             		move.w	#$18,8(a0)
0000D330 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000D336                            
0000D336                            loc_C842:
0000D336 1140 001A                  		move.b	d0,$1A(a0)
0000D33A                            
0000D33A                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000D33A 7210                       		moveq	#$10,d1		; set horizontal speed
0000D33C 3028 0030                  		move.w	$30(a0),d0
0000D340 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D344 6700                       		beq.s	loc_C86C	; if yes, branch
0000D346 6C00                       		bge.s	Obj7E_Move
0000D348 4441                       		neg.w	d1
0000D34A                            
0000D34A                            Obj7E_Move:
0000D34A D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D34E                            
0000D34E                            loc_C85A:				; XREF: loc_C86C
0000D34E 3028 0008                  		move.w	8(a0),d0
0000D352 6B00                       		bmi.s	locret_C86A
0000D354 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D358 6400                       		bcc.s	locret_C86A	; if yes, branch
0000D35A 6000 0000                  		bra.w	DisplaySprite
0000D35E                            ; ===========================================================================
0000D35E                            
0000D35E                            locret_C86A:
0000D35E 4E75                       		rts	
0000D360                            ; ===========================================================================
0000D360                            
0000D360                            loc_C86C:				; XREF: Obj7E_ChkPos
0000D360 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000D366 66E6                       		bne.s	loc_C85A
0000D368 5428 0024                  		addq.b	#2,$24(a0)
0000D36C 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D372 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000D378                            
0000D378                            Obj7E_Wait:				; XREF: Obj7E_Index
0000D378 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D37C 6600                       		bne.s	Obj7E_Display
0000D37E 5428 0024                  		addq.b	#2,$24(a0)
0000D382                            
0000D382                            Obj7E_Display:
0000D382 6000 0000                  		bra.w	DisplaySprite
0000D386                            ; ===========================================================================
0000D386                            
0000D386                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000D386 6100 0000                  		bsr.w	DisplaySprite
0000D38A 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000D390 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D394 6700                       		beq.s	loc_C8C4	; if yes, branch
0000D396 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D39C 700A                       		moveq	#10,d0		; add 10 to score
0000D39E 4EB9 0000 0000             		jsr	AddPoints
0000D3A4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D3A8 0200 0003                  		andi.b	#3,d0
0000D3AC 6600                       		bne.s	locret_C8EA
0000D3AE 303C 00CD                  		move.w	#$CD,d0
0000D3B2 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D3B8                            ; ===========================================================================
0000D3B8                            
0000D3B8                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000D3B8 303C 00C5                  		move.w	#$C5,d0
0000D3BC 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D3C2 5428 0024                  		addq.b	#2,$24(a0)
0000D3C6 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D3CC 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000D3D2 6500                       		bcs.s	locret_C8EA	; if not, branch
0000D3D4 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000D3DA 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000D3DE                            
0000D3DE                            locret_C8EA:
0000D3DE 4E75                       		rts	
0000D3E0                            ; ===========================================================================
0000D3E0                            
0000D3E0                            Obj7E_Exit:				; XREF: Obj7E_Index
0000D3E0 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D3E6 6000 0000                  		bra.w	DisplaySprite
0000D3EA                            ; ===========================================================================
0000D3EA                            
0000D3EA                            Obj7E_Continue:				; XREF: Obj7E_Index
0000D3EA 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000D3F0 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000D3F6 303C 00BF                  		move.w	#$BF,d0
0000D3FA 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play continues music
0000D400 5428 0024                  		addq.b	#2,$24(a0)
0000D404 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000D40A 6000 0000                  		bra.w	DisplaySprite
0000D40E                            ; ===========================================================================
0000D40E                            
0000D40E                            loc_C91A:				; XREF: Obj7E_Index
0000D40E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D412 0200 000F                  		andi.b	#$F,d0
0000D416 6600                       		bne.s	Obj7E_Display2
0000D418 0868 0000 001A             		bchg	#0,$1A(a0)
0000D41E                            
0000D41E                            Obj7E_Display2:
0000D41E 6000 0000                  		bra.w	DisplaySprite
0000D422                            ; ===========================================================================
0000D422 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000D428 0200                       		dc.b 2,	0		; rountine number, frame number
0000D42A 0320 0120 0118             		dc.w $320, $120, $118
0000D430 0201                       		dc.b 2,	1
0000D432 0360 0120 0128             		dc.w $360, $120, $128
0000D438 0202                       		dc.b 2,	2
0000D43A 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000D440 0203                       		dc.b 2,	3
0000D442 03A0 0120 0138             		dc.w $3A0, $120, $138
0000D448 0206                       		dc.b 2,	6
0000D44A                            ; ===========================================================================
0000D44A                            ; ---------------------------------------------------------------------------
0000D44A                            ; Object 7F - chaos emeralds from the special stage results screen
0000D44A                            ; ---------------------------------------------------------------------------
0000D44A                            
0000D44A                            Obj7F:					; XREF: Obj_Index
0000D44A 7000                       		moveq	#0,d0
0000D44C 1028 0024                  		move.b	$24(a0),d0
0000D450 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000D454 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000D458                            ; ===========================================================================
0000D458 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000D45A 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000D45C                            
0000D45C                            ; ---------------------------------------------------------------------------
0000D45C                            ; X-axis positions for chaos emeralds
0000D45C                            ; ---------------------------------------------------------------------------
0000D45C 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000D468                            ; ===========================================================================
0000D468                            
0000D468                            Obj7F_Main:				; XREF: Obj7F_Index
0000D468 2248                       		movea.l	a0,a1
0000D46A 45F9 0000 D45C             		lea	(Obj7F_PosData).l,a2
0000D470 7400                       		moveq	#0,d2
0000D472 7200                       		moveq	#0,d1
0000D474 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000D478 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000D47A 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000D47E                            
0000D47E                            Obj7F_Loop:
0000D47E 12BC 007F                  		move.b	#$7F,0(a1)
0000D482 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000D486 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000D48C 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000D490 1633 2000                  		move.b	(a3,d2.w),d3
0000D494 1343 001A                  		move.b	d3,$1A(a1)
0000D498 1343 001C                  		move.b	d3,$1C(a1)
0000D49C 5202                       		addq.b	#1,d2
0000D49E 5429 0024                  		addq.b	#2,$24(a1)
0000D4A2 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000D4AA 337C 8541 0002             		move.w	#$8541,2(a1)
0000D4B0 137C 0000 0001             		move.b	#0,1(a1)
0000D4B6 43E9 0040                  		lea	$40(a1),a1	; next object
0000D4BA 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000D4BE                            
0000D4BE                            Obj7F_Flash:				; XREF: Obj7F_Index
0000D4BE 1028 001A                  		move.b	$1A(a0),d0
0000D4C2 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000D4C8 0C00 0006                  		cmpi.b	#6,d0
0000D4CC 6600                       		bne.s	Obj7F_Display
0000D4CE 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000D4D4                            
0000D4D4                            Obj7F_Display:
0000D4D4 6000 0000                  		bra.w	DisplaySprite
0000D4D8                            ; ===========================================================================
0000D4D8                            ; ---------------------------------------------------------------------------
0000D4D8                            ; Sprite mappings - zone title cards
0000D4D8                            ; ---------------------------------------------------------------------------
0000D4D8                            Map_obj34:
0000D4D8                            	include "_maps\obj34.asm"
0000D4D8                            ; ---------------------------------------------------------------------------
0000D4D8                            ; Sprite mappings - zone title cards
0000D4D8                            ; ---------------------------------------------------------------------------
0000D4D8 0000                           	dc.w byte_C9FE-Map_obj34
0000D4DA 0000                       		dc.w byte_CA2C-Map_obj34
0000D4DC 0000                       		dc.w byte_CA5A-Map_obj34
0000D4DE 0000                       		dc.w byte_CA7A-Map_obj34
0000D4E0 0000                       		dc.w byte_CAA8-Map_obj34
0000D4E2 0000                       		dc.w byte_CADC-Map_obj34
0000D4E4 0000                       		dc.w byte_CB10-Map_obj34
0000D4E6 0000                       		dc.w byte_CB26-Map_obj34
0000D4E8 0000                       		dc.w byte_CB31-Map_obj34
0000D4EA 0000                       		dc.w byte_CB3C-Map_obj34
0000D4EC 0000                       		dc.w byte_CB47-Map_obj34
0000D4EE 0000                       		dc.w byte_CB8A-Map_obj34
0000D4F0 09                         byte_C9FE:	dc.b 9 			; GREEN HILL
0000D4F1 F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000D4F6 F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000D4FB F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000D500 F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000D505 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D50A F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000D50F F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000D514 F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000D519 F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000D51E 09                         byte_CA2C:	dc.b 9			; LABYRINTH
0000D51F F805 0026 BC               		dc.b $F8, 5, 0,	$26, $BC
0000D524 F805 0000 CC               		dc.b $F8, 5, 0,	0, $CC
0000D529 F805 0004 DC               		dc.b $F8, 5, 0,	4, $DC
0000D52E F805 004A EC               		dc.b $F8, 5, 0,	$4A, $EC
0000D533 F805 003A FC               		dc.b $F8, 5, 0,	$3A, $FC
0000D538 F801 0020 0C               		dc.b $F8, 1, 0,	$20, $C
0000D53D F805 002E 14               		dc.b $F8, 5, 0,	$2E, $14
0000D542 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D547 F805 001C 34               		dc.b $F8, 5, 0,	$1C, $34
0000D54C 06                         byte_CA5A:	dc.b 6			; MARBLE
0000D54D F805 002A CF               		dc.b $F8, 5, 0,	$2A, $CF
0000D552 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D557 F805 003A F0               		dc.b $F8, 5, 0,	$3A, $F0
0000D55C F805 0004 00               		dc.b $F8, 5, 0,	4, 0
0000D561 F805 0026 10               		dc.b $F8, 5, 0,	$26, $10
0000D566 F805 0010 20               		dc.b $F8, 5, 0,	$10, $20
0000D56B 00                         		dc.b 0
0000D56C 09                         byte_CA7A:	dc.b 9			; STAR	LIGHT
0000D56D F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000D572 F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000D577 F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000D57C F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000D581 F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000D586 F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000D58B F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000D590 F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000D595 F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000D59A 0A                         byte_CAA8:	dc.b $A			; SPRING YARD
0000D59B F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000D5A0 F805 0036 BC               		dc.b $F8, 5, 0,	$36, $BC
0000D5A5 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000D5AA F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D5AF F805 002E E4               		dc.b $F8, 5, 0,	$2E, $E4
0000D5B4 F805 0018 F4               		dc.b $F8, 5, 0,	$18, $F4
0000D5B9 F805 004A 14               		dc.b $F8, 5, 0,	$4A, $14
0000D5BE F805 0000 24               		dc.b $F8, 5, 0,	0, $24
0000D5C3 F805 003A 34               		dc.b $F8, 5, 0,	$3A, $34
0000D5C8 F805 000C 44               		dc.b $F8, 5, 0,	$C, $44
0000D5CD 00                         		dc.b 0
0000D5CE 0A                         byte_CADC:	dc.b $A			; SCRAP BRAIN
0000D5CF F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000D5D4 F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000D5D9 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000D5DE F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000D5E3 F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000D5E8 F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000D5ED F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000D5F2 F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000D5F7 F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000D5FC F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000D601 00                         		dc.b 0
0000D602 04                         byte_CB10:	dc.b 4			; ZONE
0000D603 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000D608 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000D60D F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000D612 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D617 00                         		dc.b 0
0000D618 02                         byte_CB26:	dc.b 2			; ACT 1
0000D619 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D61E F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000D623 02                         byte_CB31:	dc.b 2			; ACT 2
0000D624 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D629 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000D62E 02                         byte_CB3C:	dc.b 2			; ACT 3
0000D62F 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D634 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000D639 0D                         byte_CB47:	dc.b $D			; Oval
0000D63A E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000D63F E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000D644 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000D649 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000D64E 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000D653 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000D658 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000D65D FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000D662 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000D667 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000D66C FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000D671 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000D676 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000D67B 00                         		dc.b 0
0000D67C 05                         byte_CB8A:	dc.b 5			; FINAL
0000D67D F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000D682 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000D687 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D68C F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000D691 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000D696                            		even
0000D696                            		even
0000D696                            ; ---------------------------------------------------------------------------
0000D696                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D696                            ; ---------------------------------------------------------------------------
0000D696                            Map_obj39:
0000D696                            	include "_maps\obj39.asm"
0000D696                            ; ---------------------------------------------------------------------------
0000D696                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D696                            ; ---------------------------------------------------------------------------
0000D696 0000                       		dc.w byte_CBAC-Map_obj39
0000D698 0000                       		dc.w byte_CBB7-Map_obj39
0000D69A 0000                       		dc.w byte_CBC2-Map_obj39
0000D69C 0000                       		dc.w byte_CBCD-Map_obj39
0000D69E 02                         byte_CBAC:	dc.b 2
0000D69F F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D6A4 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D6A9 02                         byte_CBB7:	dc.b 2
0000D6AA F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D6AF F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D6B4 02                         byte_CBC2:	dc.b 2
0000D6B5 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D6BA F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D6BF 02                         byte_CBCD:	dc.b 2
0000D6C0 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D6C5 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D6CA                            		even
0000D6CA                            		even
0000D6CA                            
0000D6CA                            ; ---------------------------------------------------------------------------
0000D6CA                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D6CA                            ; ---------------------------------------------------------------------------
0000D6CA 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D6CC 0000                       		dc.w byte_CC13-Map_obj3A
0000D6CE 0000                       		dc.w byte_CC32-Map_obj3A
0000D6D0 0000                       		dc.w byte_CC51-Map_obj3A
0000D6D2 0000                       		dc.w byte_CC75-Map_obj3A
0000D6D4 FF6F                       		dc.w byte_CB47-Map_obj3A
0000D6D6 FF4E                       		dc.w byte_CB26-Map_obj3A
0000D6D8 FF59                       		dc.w byte_CB31-Map_obj3A
0000D6DA FF64                       		dc.w byte_CB3C-Map_obj3A
0000D6DC 08                         byte_CBEA:	dc.b 8			; SONIC HAS
0000D6DD F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000D6E2 F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000D6E7 F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000D6EC F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000D6F1 F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000D6F6 F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000D6FB F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000D700 F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000D705 06                         byte_CC13:	dc.b 6			; PASSED
0000D706 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D70B F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D710 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D715 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D71A F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D71F F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D724 06                         byte_CC32:	dc.b 6			; SCORE
0000D725 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D72A F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D72F F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D734 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D739 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D73E FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D743 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D744 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D749 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D74E F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D753 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D758 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D75D F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D762 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D767 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D768 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D76D F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D772 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D777 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D77C FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D781 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D786 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D78C 00                         		even
0000D78C                            ; ---------------------------------------------------------------------------
0000D78C                            ; Sprite mappings - special stage results screen
0000D78C                            ; ---------------------------------------------------------------------------
0000D78C 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D78E 0000                       		dc.w byte_CCEE-Map_obj7E
0000D790 0000                       		dc.w byte_CD0D-Map_obj7E
0000D792 FEAD                       		dc.w byte_CB47-Map_obj7E
0000D794 0000                       		dc.w byte_CD31-Map_obj7E
0000D796 0000                       		dc.w byte_CD46-Map_obj7E
0000D798 0000                       		dc.w byte_CD5B-Map_obj7E
0000D79A 0000                       		dc.w byte_CD6B-Map_obj7E
0000D79C 0000                       		dc.w byte_CDA8-Map_obj7E
0000D79E 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D79F F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D7A4 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D7A9 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D7AE F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D7B3 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D7B8 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D7BD F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D7C2 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D7C7 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D7CC F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D7D1 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D7D6 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D7DB F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D7E0 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D7E1 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D7E6 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D7EB F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D7F0 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D7F5 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D7FA FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D7FF 07                         byte_CD0D:	dc.b 7
0000D800 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D805 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D80A F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D80F F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D814 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D819 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D81E F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D823 04                         byte_CD31:	dc.b 4
0000D824 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D829 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D82E F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D833 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D838 04                         byte_CD46:	dc.b 4
0000D839 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D83E F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D843 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D848 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D84D 03                         byte_CD5B:	dc.b 3
0000D84E F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D853 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D858 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D85D 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D85E F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D863 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D868 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D86D F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D872 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D877 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D87C F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D881 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D886 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D88B F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D890 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D895 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D89A 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D89B F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D8A0 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D8A5 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D8AA F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D8AF F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D8B4 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D8B9 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D8BE F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D8C3 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D8C8 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D8CD F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D8D2 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D8D7 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D8DC F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D8E1 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D8E6                            		even
0000D8E6                            ; ---------------------------------------------------------------------------
0000D8E6                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D8E6                            ; ---------------------------------------------------------------------------
0000D8E6                            Map_obj7F:
0000D8E6                            	include "_maps\obj7F.asm"
0000D8E6                            ; ---------------------------------------------------------------------------
0000D8E6                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D8E6                            ; ---------------------------------------------------------------------------
0000D8E6 0000                       		dc.w byte_CE02-Map_obj7F
0000D8E8 0000                       		dc.w byte_CE08-Map_obj7F
0000D8EA 0000                       		dc.w byte_CE0E-Map_obj7F
0000D8EC 0000                       		dc.w byte_CE14-Map_obj7F
0000D8EE 0000                       		dc.w byte_CE1A-Map_obj7F
0000D8F0 0000                       		dc.w byte_CE20-Map_obj7F
0000D8F2 0000                       		dc.w byte_CE26-Map_obj7F
0000D8F4 01                         byte_CE02:	dc.b 1
0000D8F5 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D8FA 01                         byte_CE08:	dc.b 1
0000D8FB F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D900 01                         byte_CE0E:	dc.b 1
0000D901 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D906 01                         byte_CE14:	dc.b 1
0000D907 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D90C 01                         byte_CE1A:	dc.b 1
0000D90D F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D912 01                         byte_CE20:	dc.b 1
0000D913 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D918 00                         byte_CE26:	dc.b 0			; Blank frame
0000D91A 00                         		even
0000D91A 00                         		even
0000D91A                            
0000D91A                            ; ===========================================================================
0000D91A                            ; ---------------------------------------------------------------------------
0000D91A                            ; Object 36 - spikes
0000D91A                            ; ---------------------------------------------------------------------------
0000D91A                            
0000D91A                            Obj36:					; XREF: Obj_Index
0000D91A 7000                       		moveq	#0,d0
0000D91C 1028 0024                  		move.b	$24(a0),d0
0000D920 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D924 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D928                            ; ===========================================================================
0000D928 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D92A 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D92C                            
0000D92C 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D92E 0110                       		dc.b 1,	$10
0000D930 0204                       		dc.b 2,	4
0000D932 031C                       		dc.b 3,	$1C
0000D934 0440                       		dc.b 4,	$40
0000D936 0510                       		dc.b 5,	$10
0000D938                            ; ===========================================================================
0000D938                            
0000D938                            Obj36_Main:				; XREF: Obj36_Index
0000D938 5428 0024                  		addq.b	#2,$24(a0)
0000D93C 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D944 317C 051B 0002             		move.w	#$51B,2(a0)
0000D94A 0028 0004 0001             		ori.b	#4,1(a0)
0000D950 117C 0004 0018             		move.b	#4,$18(a0)
0000D956 1028 0028                  		move.b	$28(a0),d0
0000D95A 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D960 0240 00F0                  		andi.w	#$F0,d0
0000D964 43F9 0000 D92C             		lea	(Obj36_Var).l,a1
0000D96A E648                       		lsr.w	#3,d0
0000D96C D2C0                       		adda.w	d0,a1
0000D96E 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D972 1159 0019                  		move.b	(a1)+,$19(a0)
0000D976 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D97C 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D982                            
0000D982                            Obj36_Solid:				; XREF: Obj36_Index
0000D982 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D986 343C 0004                  		move.w	#4,d2
0000D98A 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D990 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D992 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D998 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D99A 343C 0014                  		move.w	#$14,d2
0000D99E                            
0000D99E                            ; Spikes types $1x and $5x face	sideways
0000D99E                            
0000D99E                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D99E 323C 001B                  		move.w	#$1B,d1
0000D9A2 3602                       		move.w	d2,d3
0000D9A4 5243                       		addq.w	#1,d3
0000D9A6 3828 0008                  		move.w	8(a0),d4
0000D9AA 6100 0000                  		bsr.w	SolidObject
0000D9AE 0828 0003 0022             		btst	#3,$22(a0)
0000D9B4 6600                       		bne.s	Obj36_Display
0000D9B6 0C44 0001                  		cmpi.w	#1,d4
0000D9BA 6700                       		beq.s	Obj36_Hurt
0000D9BC 6000                       		bra.s	Obj36_Display
0000D9BE                            ; ===========================================================================
0000D9BE                            
0000D9BE                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D9BE                            
0000D9BE                            Obj36_Upright:				; XREF: Obj36_Solid
0000D9BE 7200                       		moveq	#0,d1
0000D9C0 1228 0019                  		move.b	$19(a0),d1
0000D9C4 0641 000B                  		addi.w	#$B,d1
0000D9C8 343C 0010                  		move.w	#$10,d2
0000D9CC 363C 0011                  		move.w	#$11,d3
0000D9D0 3828 0008                  		move.w	8(a0),d4
0000D9D4 6100 0000                  		bsr.w	SolidObject
0000D9D8 0828 0003 0022             		btst	#3,$22(a0)
0000D9DE 6600                       		bne.s	Obj36_Hurt
0000D9E0 4A44                       		tst.w	d4
0000D9E2 6A00                       		bpl.s	Obj36_Display
0000D9E4                            
0000D9E4                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D9E4 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D9E8 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D9EA 4A78 D030                  		tst.w	($FFFFD030).w	; +++ is Sonic invulnerable?
0000D9EE 6600                       		bne.s	Obj36_Display	; +++ if yes, branch
0000D9F0 2F08                       		move.l	a0,-(sp)
0000D9F2 2448                       		movea.l	a0,a2
0000D9F4 41F8 D000                  		lea	($FFFFD000).w,a0
0000D9F8 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D9FE 6400                       		bcc.s	loc_CF20
0000DA00 2628 000C                  		move.l	$C(a0),d3
0000DA04 3028 0012                  		move.w	$12(a0),d0
0000DA08 48C0                       		ext.l	d0
0000DA0A E180                       		asl.l	#8,d0
0000DA0C 9680                       		sub.l	d0,d3
0000DA0E 2143 000C                  		move.l	d3,$C(a0)
0000DA12 4EB9 0000 0000             		jsr	HurtSonic
0000DA18                            
0000DA18                            loc_CF20:
0000DA18 205F                       		movea.l	(sp)+,a0
0000DA1A                            
0000DA1A                            Obj36_Display:
0000DA1A 6100 0000                  		bsr.w	DisplaySprite
0000DA1E 3028 0030                  		move.w	$30(a0),d0
0000DA22 0240 FF80                  		andi.w	#$FF80,d0
0000DA26 3238 F700                  		move.w	($FFFFF700).w,d1
0000DA2A 0441 0080                  		subi.w	#$80,d1
0000DA2E 0241 FF80                  		andi.w	#$FF80,d1
0000DA32 9041                       		sub.w	d1,d0
0000DA34 0C40 0280                  		cmpi.w	#$280,d0
0000DA38 6200 0000                  		bhi.w	DeleteObject
0000DA3C 4E75                       		rts	
0000DA3E                            ; ===========================================================================
0000DA3E                            
0000DA3E                            Obj36_Type0x:				; XREF: Obj36_Solid
0000DA3E 7000                       		moveq	#0,d0
0000DA40 1028 0028                  		move.b	$28(a0),d0
0000DA44 D040                       		add.w	d0,d0
0000DA46 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000DA4A 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000DA4E                            ; ===========================================================================
0000DA4E 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000DA50 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000DA52 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000DA54                            ; ===========================================================================
0000DA54                            
0000DA54                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000DA54 4E75                       		rts			; don't move the object
0000DA56                            ; ===========================================================================
0000DA56                            
0000DA56                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000DA56 6100 0000                  		bsr.w	Obj36_Wait
0000DA5A 7000                       		moveq	#0,d0
0000DA5C 1028 0034                  		move.b	$34(a0),d0
0000DA60 D068 0032                  		add.w	$32(a0),d0
0000DA64 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000DA68 4E75                       		rts	
0000DA6A                            ; ===========================================================================
0000DA6A                            
0000DA6A                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000DA6A 6100 0000                  		bsr.w	Obj36_Wait
0000DA6E 7000                       		moveq	#0,d0
0000DA70 1028 0034                  		move.b	$34(a0),d0
0000DA74 D068 0030                  		add.w	$30(a0),d0
0000DA78 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000DA7C 4E75                       		rts	
0000DA7E                            ; ===========================================================================
0000DA7E                            
0000DA7E                            Obj36_Wait:
0000DA7E 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000DA82 6700                       		beq.s	loc_CFA4	; if yes, branch
0000DA84 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000DA88 6600                       		bne.s	locret_CFE6
0000DA8A 4A28 0001                  		tst.b	1(a0)
0000DA8E 6A00                       		bpl.s	locret_CFE6
0000DA90 303C 00B6                  		move.w	#$B6,d0
0000DA94 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000DA9A 6000                       		bra.s	locret_CFE6
0000DA9C                            ; ===========================================================================
0000DA9C                            
0000DA9C                            loc_CFA4:
0000DA9C 4A68 0036                  		tst.w	$36(a0)
0000DAA0 6700                       		beq.s	loc_CFC6
0000DAA2 0468 0800 0034             		subi.w	#$800,$34(a0)
0000DAA8 6400                       		bcc.s	locret_CFE6
0000DAAA 317C 0000 0034             		move.w	#0,$34(a0)
0000DAB0 317C 0000 0036             		move.w	#0,$36(a0)
0000DAB6 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000DABC 6000                       		bra.s	locret_CFE6
0000DABE                            ; ===========================================================================
0000DABE                            
0000DABE                            loc_CFC6:
0000DABE 0668 0800 0034             		addi.w	#$800,$34(a0)
0000DAC4 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000DACA 6500                       		bcs.s	locret_CFE6
0000DACC 317C 2000 0034             		move.w	#$2000,$34(a0)
0000DAD2 317C 0001 0036             		move.w	#1,$36(a0)
0000DAD8 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000DADE                            
0000DADE                            locret_CFE6:
0000DADE 4E75                       		rts	
0000DAE0                            ; ===========================================================================
0000DAE0                            ; ---------------------------------------------------------------------------
0000DAE0                            ; Sprite mappings - spikes
0000DAE0                            ; ---------------------------------------------------------------------------
0000DAE0                            Map_obj36:
0000DAE0                            	include "_maps\obj36.asm"
0000DAE0                            ; ---------------------------------------------------------------------------
0000DAE0                            ; Sprite mappings - spikes
0000DAE0                            ; ---------------------------------------------------------------------------
0000DAE0 0000                       		dc.w byte_CFF4-Map_obj36
0000DAE2 0000                       		dc.w byte_D004-Map_obj36
0000DAE4 0000                       		dc.w byte_D014-Map_obj36
0000DAE6 0000                       		dc.w byte_D01A-Map_obj36
0000DAE8 0000                       		dc.w byte_D02A-Map_obj36
0000DAEA 0000                       		dc.w byte_D049-Map_obj36
0000DAEC 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000DAED F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000DAF2 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000DAF7 F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000DAFC 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000DAFD EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000DB02 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000DB07 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000DB0C 01                         byte_D014:	dc.b 1			; 1 spike
0000DB0D F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000DB12 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000DB13 F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000DB18 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000DB1D F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000DB22 06                         byte_D02A:	dc.b 6			; 6 spikes
0000DB23 F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000DB28 F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000DB2D F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000DB32 F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000DB37 F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000DB3C F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000DB41 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000DB42 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000DB48 00                         		even
0000DB48 00                         		even
0000DB48                            
0000DB48                            ; ===========================================================================
0000DB48                            ; ---------------------------------------------------------------------------
0000DB48                            ; Object 3B - purple rock (GHZ)
0000DB48                            ; ---------------------------------------------------------------------------
0000DB48                            
0000DB48                            Obj3B:					; XREF: Obj_Index
0000DB48 7000                       		moveq	#0,d0
0000DB4A 1028 0024                  		move.b	$24(a0),d0
0000DB4E 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000DB52 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000DB56                            ; ===========================================================================
0000DB56 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000DB58 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000DB5A                            ; ===========================================================================
0000DB5A                            
0000DB5A                            Obj3B_Main:				; XREF: Obj3B_Index
0000DB5A 5428 0024                  		addq.b	#2,$24(a0)
0000DB5E 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000DB66 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000DB6C 117C 0004 0001             		move.b	#4,1(a0)
0000DB72 117C 0013 0019             		move.b	#$13,$19(a0)
0000DB78 117C 0004 0018             		move.b	#4,$18(a0)
0000DB7E                            
0000DB7E                            Obj3B_Solid:				; XREF: Obj3B_Index
0000DB7E 323C 001B                  		move.w	#$1B,d1
0000DB82 343C 0010                  		move.w	#$10,d2
0000DB86 363C 0010                  		move.w	#$10,d3
0000DB8A 3828 0008                  		move.w	8(a0),d4
0000DB8E 6100 0000                  		bsr.w	SolidObject
0000DB92 6100 0000                  		bsr.w	DisplaySprite
0000DB96 3028 0008                  		move.w	8(a0),d0
0000DB9A 0240 FF80                  		andi.w	#$FF80,d0
0000DB9E 3238 F700                  		move.w	($FFFFF700).w,d1
0000DBA2 0441 0080                  		subi.w	#$80,d1
0000DBA6 0241 FF80                  		andi.w	#$FF80,d1
0000DBAA 9041                       		sub.w	d1,d0
0000DBAC 0C40 0280                  		cmpi.w	#$280,d0
0000DBB0 6200 0000                  		bhi.w	DeleteObject
0000DBB4 4E75                       		rts
0000DBB6                            ; ===========================================================================
0000DBB6                            ; ---------------------------------------------------------------------------
0000DBB6                            ; Object 49 - waterfall	sound effect (GHZ)
0000DBB6                            ; ---------------------------------------------------------------------------
0000DBB6                            
0000DBB6                            Obj49:					; XREF: Obj_Index
0000DBB6 7000                       		moveq	#0,d0
0000DBB8 1028 0024                  		move.b	$24(a0),d0
0000DBBC 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000DBC0 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000DBC4                            ; ===========================================================================
0000DBC4 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000DBC6 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000DBC8                            ; ===========================================================================
0000DBC8                            
0000DBC8                            Obj49_Main:				; XREF: Obj49_Index
0000DBC8 5428 0024                  		addq.b	#2,$24(a0)
0000DBCC 117C 0004 0001             		move.b	#4,1(a0)
0000DBD2                            
0000DBD2                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000DBD2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000DBD6 0200 003F                  		andi.b	#$3F,d0
0000DBDA 6600                       		bne.s	Obj49_ChkDel
0000DBDC 303C 00D0                  		move.w	#$D0,d0
0000DBE0 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000DBE6                            
0000DBE6                            Obj49_ChkDel:
0000DBE6 3028 0008                  		move.w	8(a0),d0
0000DBEA 0240 FF80                  		andi.w	#$FF80,d0
0000DBEE 3238 F700                  		move.w	($FFFFF700).w,d1
0000DBF2 0441 0080                  		subi.w	#$80,d1
0000DBF6 0241 FF80                  		andi.w	#$FF80,d1
0000DBFA 9041                       		sub.w	d1,d0
0000DBFC 0C40 0280                  		cmpi.w	#$280,d0
0000DC00 6200 0000                  		bhi.w	DeleteObject
0000DC04 4E75                       		rts	
0000DC06                            ; ===========================================================================
0000DC06                            ; ---------------------------------------------------------------------------
0000DC06                            ; Sprite mappings - purple rock	(GHZ)
0000DC06                            ; ---------------------------------------------------------------------------
0000DC06                            Map_obj3B:
0000DC06                            	include "_maps\obj3B.asm"
0000DC06                            ; ---------------------------------------------------------------------------
0000DC06                            ; Sprite mappings - purple rock	(GHZ)
0000DC06                            ; ---------------------------------------------------------------------------
0000DC06 0000                       		dc.w byte_D110-Map_obj3B
0000DC08 02                         byte_D110:	dc.b 2
0000DC09 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000DC0E F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000DC14 00                         		even
0000DC14 00                         		even
0000DC14                            
0000DC14                            ; ===========================================================================
0000DC14                            ; ---------------------------------------------------------------------------
0000DC14                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000DC14                            ; ---------------------------------------------------------------------------
0000DC14                            
0000DC14                            Obj3C:					; XREF: Obj_Index
0000DC14 7000                       		moveq	#0,d0
0000DC16 1028 0024                  		move.b	$24(a0),d0
0000DC1A 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000DC1E 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000DC22 6000 0000                  		bra.w	MarkObjGone
0000DC26                            ; ===========================================================================
0000DC26 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000DC28 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000DC2A 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000DC2C                            ; ===========================================================================
0000DC2C                            
0000DC2C                            Obj3C_Main:				; XREF: Obj3C_Index
0000DC2C 5428 0024                  		addq.b	#2,$24(a0)
0000DC30 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000DC38 317C 450F 0002             		move.w	#$450F,2(a0)
0000DC3E 117C 0004 0001             		move.b	#4,1(a0)
0000DC44 117C 0010 0019             		move.b	#$10,$19(a0)
0000DC4A 117C 0004 0018             		move.b	#4,$18(a0)
0000DC50 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000DC56                            
0000DC56                            Obj3C_Solid:				; XREF: Obj3C_Index
0000DC56 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000DC5C 323C 001B                  		move.w	#$1B,d1
0000DC60 343C 0020                  		move.w	#$20,d2
0000DC64 363C 0020                  		move.w	#$20,d3
0000DC68 3828 0008                  		move.w	8(a0),d4
0000DC6C 6100 0000                  		bsr.w	SolidObject
0000DC70 0828 0005 0022             		btst	#5,$22(a0)
0000DC76 6600                       		bne.s	Obj3C_ChkRoll
0000DC78                            
0000DC78                            locret_D180:
0000DC78 4E75                       		rts
0000DC7A                            ; ===========================================================================
0000DC7A                            
0000DC7A                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000DC7A 4A38 FE19                                  tst.b   (Super_Sonic_flag).w
0000DC7E 6600                                       bne.s   ObjBreakeAnyways
0000DC80 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000DC86 66F0                       		bne.s	locret_D180	; if not, branch
0000DC88 3028 0030                  		move.w	$30(a0),d0
0000DC8C 6A00                       		bpl.s	Obj3C_ChkSpeed
0000DC8E 4440                       		neg.w	d0
0000DC90                            
0000DC90                            Obj3C_ChkSpeed:
0000DC90 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000DC94 65E2                       		bcs.s	locret_D180	; if not, branch
0000DC96                            ObjBreakeAnyways:		
0000DC96 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000DC9C 5869 0008                  		addq.w	#4,8(a1)
0000DCA0 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000DCA6 3028 0008                  		move.w	8(a0),d0
0000DCAA B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000DCAE 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000DCB0 5169 0008                  		subq.w	#8,8(a1)
0000DCB4 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000DCBA                            
0000DCBA                            Obj3C_Smash:
0000DCBA 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000DCC0 08A8 0005 0022             		bclr	#5,$22(a0)
0000DCC6 08A9 0005 0022             		bclr	#5,$22(a1)
0000DCCC 7207                       		moveq	#7,d1		; load 8 fragments
0000DCCE 343C 0070                  		move.w	#$70,d2
0000DCD2 6100                       		bsr.s	SmashObject
0000DCD4                            
0000DCD4                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000DCD4 6100 0000                  		bsr.w	SpeedToPos
0000DCD8 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000DCDE 6100 0000                  		bsr.w	DisplaySprite
0000DCE2 4A28 0001                  		tst.b	1(a0)
0000DCE6 6A00 0000                  		bpl.w	DeleteObject
0000DCEA 4E75                       		rts
0000DCEC                            
0000DCEC                            ; ---------------------------------------------------------------------------
0000DCEC                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000DCEC                            ; ---------------------------------------------------------------------------
0000DCEC                            
0000DCEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DCEC                            
0000DCEC                            
0000DCEC                            SmashObject:				; XREF: Obj3C_Smash
0000DCEC 7000                       		moveq	#0,d0
0000DCEE 1028 001A                  		move.b	$1A(a0),d0
0000DCF2 D040                       		add.w	d0,d0
0000DCF4 2668 0004                  		movea.l	4(a0),a3
0000DCF8 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000DCFC 524B                       		addq.w	#1,a3
0000DCFE 08E8 0005 0001             		bset	#5,1(a0)
0000DD04 1810                       		move.b	0(a0),d4
0000DD06 1A28 0001                  		move.b	1(a0),d5
0000DD0A 2248                       		movea.l	a0,a1
0000DD0C 6000                       		bra.s	Smash_LoadFrag
0000DD0E                            ; ===========================================================================
0000DD0E                            
0000DD0E                            Smash_Loop:
0000DD0E 6100 0000                  		bsr.w	SingleObjLoad
0000DD12 6600                       		bne.s	Smash_PlaySnd
0000DD14 5A4B                       		addq.w	#5,a3
0000DD16                            
0000DD16                            Smash_LoadFrag:				; XREF: SmashObject
0000DD16 137C 0004 0024             		move.b	#4,$24(a1)
0000DD1C 1284                       		move.b	d4,0(a1)
0000DD1E 234B 0004                  		move.l	a3,4(a1)
0000DD22 1345 0001                  		move.b	d5,1(a1)
0000DD26 3368 0008 0008             		move.w	8(a0),8(a1)
0000DD2C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DD32 3368 0002 0002             		move.w	2(a0),2(a1)
0000DD38 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000DD3E 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000DD44 335C 0010                  		move.w	(a4)+,$10(a1)
0000DD48 335C 0012                  		move.w	(a4)+,$12(a1)
0000DD4C B3C8                       		cmpa.l	a0,a1
0000DD4E 6400                       		bcc.s	loc_D268
0000DD50 2F08                       		move.l	a0,-(sp)
0000DD52 2049                       		movea.l	a1,a0
0000DD54 6100 0000                  		bsr.w	SpeedToPos
0000DD58 D568 0012                  		add.w	d2,$12(a0)
0000DD5C 205F                       		movea.l	(sp)+,a0
0000DD5E 6100 0000                  		bsr.w	DisplaySprite2
0000DD62                            
0000DD62                            loc_D268:
0000DD62 51C9 FFAA                  		dbf	d1,Smash_Loop
0000DD66                            
0000DD66                            Smash_PlaySnd:
0000DD66 303C 00CB                  		move.w	#$CB,d0
0000DD6A 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play smashing sound
0000DD70                            ; End of function SmashObject
0000DD70                            
0000DD70                            ; ===========================================================================
0000DD70                            ; Smashed block	fragment speeds
0000DD70                            ;
0000DD70 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000DD74 0600 FF00                  		dc.w $600, $FF00
0000DD78 0600 0100                  		dc.w $600, $100
0000DD7C 0400 0500                  		dc.w $400, $500
0000DD80 0600 FA00                  		dc.w $600, $FA00
0000DD84 0800 FE00                  		dc.w $800, $FE00
0000DD88 0800 0200                  		dc.w $800, $200
0000DD8C 0600 0600                  		dc.w $600, $600
0000DD90                            
0000DD90 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000DD94 F800 FE00                  		dc.w $F800, $FE00
0000DD98 F800 0200                  		dc.w $F800, $200
0000DD9C FA00 0600                  		dc.w $FA00, $600
0000DDA0 FC00 FB00                  		dc.w $FC00, $FB00
0000DDA4 FA00 FF00                  		dc.w $FA00, $FF00
0000DDA8 FA00 0100                  		dc.w $FA00, $100
0000DDAC FC00 0500                  		dc.w $FC00, $500
0000DDB0                            ; ---------------------------------------------------------------------------
0000DDB0                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DDB0                            ; ---------------------------------------------------------------------------
0000DDB0                            Map_obj3C:
0000DDB0                            	include "_maps\obj3C.asm"
0000DDB0                            ; ---------------------------------------------------------------------------
0000DDB0                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DDB0                            ; ---------------------------------------------------------------------------
0000DDB0 0000                       		dc.w byte_D2BC-Map_obj3C
0000DDB2 0000                       		dc.w byte_D2E5-Map_obj3C
0000DDB4 0000                       		dc.w byte_D30E-Map_obj3C
0000DDB6 08                         byte_D2BC:	dc.b 8
0000DDB7 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000DDBC F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000DDC1 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000DDC6 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000DDCB E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DDD0 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DDD5 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DDDA 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DDDF 08                         byte_D2E5:	dc.b 8
0000DDE0 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DDE5 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DDEA 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DDEF 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DDF4 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DDF9 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DDFE 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DE03 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DE08 08                         byte_D30E:	dc.b 8
0000DE09 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DE0E F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DE13 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DE18 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DE1D E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000DE22 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000DE27 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000DE2C 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000DE32 00                         		even
0000DE32 00                         		even
0000DE32                            
0000DE32                            ; ---------------------------------------------------------------------------
0000DE32                            ; Object code loading subroutine
0000DE32                            ; ---------------------------------------------------------------------------
0000DE32                            
0000DE32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE32                            
0000DE32                            
0000DE32                            ObjectsLoad:				; XREF: TitleScreen; et al
0000DE32 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000DE36 7E7F                       		moveq	#$7F,d7
0000DE38 7000                       		moveq	#0,d0
0000DE3A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000DE40 6400                       		bcc.s	loc_D362
0000DE42                            
0000DE42                            loc_D348:
0000DE42 1010                       		move.b	(a0),d0		; load object number from RAM
0000DE44 6700                       		beq.s	loc_D358
0000DE46 D040                       		add.w	d0,d0
0000DE48 D040                       		add.w	d0,d0
0000DE4A 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000DE4E 4E91                       		jsr	(a1)		; run the object's code
0000DE50 7000                       		moveq	#0,d0
0000DE52                            
0000DE52                            loc_D358:
0000DE52 41E8 0040                  		lea	$40(a0),a0	; next object
0000DE56 51CF FFEA                  		dbf	d7,loc_D348
0000DE5A 4E75                       		rts	
0000DE5C                            ; ===========================================================================
0000DE5C                            
0000DE5C                            loc_D362:
0000DE5C 0C38 000A D024             		cmpi.b	#$A,($FFFFD000+$24).w	; Has Sonic drowned?
0000DE62 67DE                       		beq.s	loc_D348				; If so, run objects a little longer
0000DE64 7E1F                       		moveq	#$1F,d7
0000DE66 61DA                       		bsr.s	loc_D348
0000DE68 7E5F                       		moveq	#$5F,d7
0000DE6A                            
0000DE6A                            loc_D368:
0000DE6A 7000                       		moveq	#0,d0
0000DE6C 1010                       		move.b	(a0),d0
0000DE6E 6700                       		beq.s	loc_D378
0000DE70 4A28 0001                  		tst.b	1(a0)
0000DE74 6A00                       		bpl.s	loc_D378
0000DE76 6100 0000                  		bsr.w	DisplaySprite
0000DE7A                            
0000DE7A                            loc_D378:
0000DE7A 41E8 0040                  		lea	$40(a0),a0
0000DE7E                            
0000DE7E                            loc_D37C:
0000DE7E 51CF FFEA                  		dbf	d7,loc_D368
0000DE82 4E75                       		rts	
0000DE84                            ; End of function ObjectsLoad
0000DE84                            
0000DE84                            ; ===========================================================================
0000DE84                            ; ---------------------------------------------------------------------------
0000DE84                            ; Object pointers
0000DE84                            ; ---------------------------------------------------------------------------
0000DE84                            Obj_Index:
0000DE84                            	include "_inc\Object pointers.asm"
0000DE84                            ; ---------------------------------------------------------------------------
0000DE84                            ; Object pointers
0000DE84                            ; ---------------------------------------------------------------------------
0000DE84 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000DE94 0000 0000 0000 0000 0000+  	dc.l SpinDash_dust, speedboosters, ObjectFall, Obj08
0000DEA4 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000DEB4 0000 0000 0000 B11C 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000DEC4 0000 7DD8 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000DED4 0000 83FE 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000DEE4 0000 8C4C 0000 8CB4 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000DEF4 0000 92FE 0000 95EC 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000DF04 0000 0000 0000 A270 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000DF14 0000 A5B2 0000 ABE0 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000DF24 0000 9EA8 0000 93D4 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000DF34 0000 B7AA 0000 ADDE 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000DF44 0000 C17C 0000 C82A 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000DF54 0000 BCE0 0000 D91A 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000DF64 0000 CFB0 0000 D06A 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000DF74 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000DF84 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DF94 0000 C498 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DFA4 0000 DBB6 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DFB4 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DFC4 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DFD4 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DFE4 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DFF4 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000E004 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000E014 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000E024 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000E034 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000E044 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000E054 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000E064 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000E074 0000 0000 0000 D2A4 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000E084 0000 59CA 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000E094 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000E0A4 0000 6084 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E0A4 0000 6084 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E0B4                            
0000E0B4                            ; ---------------------------------------------------------------------------
0000E0B4                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000E0B4                            ; ---------------------------------------------------------------------------
0000E0B4                            
0000E0B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E0B4                            
0000E0B4                            
0000E0B4                            ObjectFall:
0000E0B4 2428 0008                  		move.l	8(a0),d2
0000E0B8 2628 000C                  		move.l	$C(a0),d3
0000E0BC 3028 0010                  		move.w	$10(a0),d0
0000E0C0 48C0                       		ext.l	d0
0000E0C2 E180                       		asl.l	#8,d0
0000E0C4 D480                       		add.l	d0,d2
0000E0C6 3028 0012                  		move.w	$12(a0),d0
0000E0CA 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000E0D0 48C0                       		ext.l	d0
0000E0D2 E180                       		asl.l	#8,d0
0000E0D4 D680                       		add.l	d0,d3
0000E0D6 2142 0008                  		move.l	d2,8(a0)
0000E0DA 2143 000C                  		move.l	d3,$C(a0)
0000E0DE 4E75                       		rts	
0000E0E0                            ; End of function ObjectFall
0000E0E0                            
0000E0E0                            ; ---------------------------------------------------------------------------
0000E0E0                            ; Subroutine translating object	speed to update	object position
0000E0E0                            ; ---------------------------------------------------------------------------
0000E0E0                            
0000E0E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E0E0                            
0000E0E0                            
0000E0E0                            SpeedToPos:
0000E0E0 2428 0008                  		move.l	8(a0),d2
0000E0E4 2628 000C                  		move.l	$C(a0),d3
0000E0E8 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000E0EC 48C0                       		ext.l	d0
0000E0EE E180                       		asl.l	#8,d0		; multiply speed by $100
0000E0F0 D480                       		add.l	d0,d2		; add to x-axis	position
0000E0F2 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000E0F6 48C0                       		ext.l	d0
0000E0F8 E180                       		asl.l	#8,d0		; multiply by $100
0000E0FA D680                       		add.l	d0,d3		; add to y-axis	position
0000E0FC 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000E100 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000E104 4E75                       		rts	
0000E106                            ; End of function SpeedToPos
0000E106                            
0000E106                            ; ---------------------------------------------------------------------------
0000E106                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000E106                            ; ---------------------------------------------------------------------------
0000E106                            
0000E106                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E106                            
0000E106                            
0000E106                            DisplaySprite:
0000E106 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000E10A 3028 0018                  		move.w	$18(a0),d0
0000E10E E248                       		lsr.w	#1,d0
0000E110 0240 0380                  		andi.w	#$380,d0
0000E114 D2C0                       		adda.w	d0,a1
0000E116 0C51 007E                  		cmpi.w	#$7E,(a1)
0000E11A 6400                       		bcc.s	locret_D620
0000E11C 5451                       		addq.w	#2,(a1)
0000E11E D2D1                       		adda.w	(a1),a1
0000E120 3288                       		move.w	a0,(a1)
0000E122                            
0000E122                            locret_D620:
0000E122 4E75                       		rts	
0000E124                            ; End of function DisplaySprite
0000E124                            
0000E124                            ; ---------------------------------------------------------------------------
0000E124                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000E124                            ; ---------------------------------------------------------------------------
0000E124                            
0000E124                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E124                            
0000E124                            
0000E124                            DisplaySprite2:
0000E124 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000E128 3029 0018                  		move.w	$18(a1),d0
0000E12C E248                       		lsr.w	#1,d0
0000E12E 0240 0380                  		andi.w	#$380,d0
0000E132 D4C0                       		adda.w	d0,a2
0000E134 0C52 007E                  		cmpi.w	#$7E,(a2)
0000E138 6400                       		bcc.s	locret_D63E
0000E13A 5452                       		addq.w	#2,(a2)
0000E13C D4D2                       		adda.w	(a2),a2
0000E13E 3489                       		move.w	a1,(a2)
0000E140                            
0000E140                            locret_D63E:
0000E140 4E75                       		rts
0000E142                            ; End of function DisplaySprite2
0000E142                            
0000E142                            ; ---------------------------------------------------------------------------
0000E142                            ; Subroutine to	delete an object
0000E142                            ; ---------------------------------------------------------------------------
0000E142                            
0000E142                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E142                            
0000E142                            
0000E142                            DeleteObject:
0000E142 2248                       		movea.l	a0,a1
0000E144                            
0000E144                            DeleteObject2:
0000E144 7200                       		moveq	#0,d1
0000E146 700F                       		moveq	#$F,d0
0000E148                            
0000E148                            loc_D646:
0000E148 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000E14A 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000E14E 4E75                       		rts
0000E150                            ; End of function DeleteObject
0000E150                            
0000E150                            ; ===========================================================================
0000E150 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000E154 00FF F700                  		dc.l $FFF700		; main screen x-position
0000E158 00FF F708                  		dc.l $FFF708		; background x-position	1
0000E15C 00FF F718                  		dc.l $FFF718		; background x-position	2
0000E160                            ; ---------------------------------------------------------------------------
0000E160                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000E160                            ; ---------------------------------------------------------------------------
0000E160                            
0000E160                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E160                            
0000E160                            
0000E160                            BuildSprites:				; XREF: TitleScreen; et al
0000E160 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000E164 7A00                       		moveq	#0,d5
0000E166 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000E16A 7E07                       		moveq	#7,d7
0000E16C                            
0000E16C                            loc_D66A:
0000E16C 4A54                       		tst.w	(a4)
0000E16E 6700 0000                  		beq.w	loc_D72E
0000E172 7C02                       		moveq	#2,d6
0000E174                            
0000E174                            loc_D672:
0000E174 3074 6000                  		movea.w	(a4,d6.w),a0
0000E178 4A10                       		tst.b	(a0)
0000E17A 6700 0000                  		beq.w	loc_D726
0000E17E 08A8 0007 0001             		bclr	#7,1(a0)
0000E184 1028 0001                  		move.b	1(a0),d0
0000E188 1800                       		move.b	d0,d4
0000E18A 0240 000C                  		andi.w	#$C,d0
0000E18E 6700                       		beq.s	loc_D6DE
0000E190 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000E194 7000                       		moveq	#0,d0
0000E196 1028 0019                  		move.b	$19(a0),d0
0000E19A 3628 0008                  		move.w	8(a0),d3
0000E19E 9651                       		sub.w	(a1),d3
0000E1A0 3203                       		move.w	d3,d1
0000E1A2 D240                       		add.w	d0,d1
0000E1A4 6B00 0000                  		bmi.w	loc_D726
0000E1A8 3203                       		move.w	d3,d1
0000E1AA 9240                       		sub.w	d0,d1
0000E1AC 0C41 0140                  		cmpi.w	#$140,d1
0000E1B0 6C00                       		bge.s	loc_D726
0000E1B2 0643 0080                  		addi.w	#$80,d3
0000E1B6 0804 0004                  		btst	#4,d4
0000E1BA 6700                       		beq.s	loc_D6E8
0000E1BC 7000                       		moveq	#0,d0
0000E1BE 1028 0016                  		move.b	$16(a0),d0
0000E1C2 3428 000C                  		move.w	$C(a0),d2
0000E1C6 9469 0004                  		sub.w	4(a1),d2
0000E1CA 3202                       		move.w	d2,d1
0000E1CC D240                       		add.w	d0,d1
0000E1CE 6B00                       		bmi.s	loc_D726
0000E1D0 3202                       		move.w	d2,d1
0000E1D2 9240                       		sub.w	d0,d1
0000E1D4 0C41 00E0                  		cmpi.w	#$E0,d1
0000E1D8 6C00                       		bge.s	loc_D726
0000E1DA 0642 0080                  		addi.w	#$80,d2
0000E1DE 6000                       		bra.s	loc_D700
0000E1E0                            ; ===========================================================================
0000E1E0                            
0000E1E0                            loc_D6DE:
0000E1E0 3428 000A                  		move.w	$A(a0),d2
0000E1E4 3628 0008                  		move.w	8(a0),d3
0000E1E8 6000                       		bra.s	loc_D700
0000E1EA                            ; ===========================================================================
0000E1EA                            
0000E1EA                            loc_D6E8:
0000E1EA 3428 000C                  		move.w	$C(a0),d2
0000E1EE 9469 0004                  		sub.w	4(a1),d2
0000E1F2 0642 0080                  		addi.w	#$80,d2
0000E1F6 0C42 0060                  		cmpi.w	#$60,d2
0000E1FA 6500                       		bcs.s	loc_D726
0000E1FC 0C42 0180                  		cmpi.w	#$180,d2
0000E200 6400                       		bcc.s	loc_D726
0000E202                            
0000E202                            loc_D700:
0000E202 2268 0004                  		movea.l	4(a0),a1
0000E206 7200                       		moveq	#0,d1
0000E208 0804 0005                  		btst	#5,d4
0000E20C 6600                       		bne.s	loc_D71C
0000E20E 1228 001A                  		move.b	$1A(a0),d1
0000E212 D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
0000E214 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000E218 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
0000E21A 1219                       		move.b	(a1)+,d1
0000E21C 5301                       		subq.b	#1,d1
0000E21E 6B00                       		bmi.s	loc_D720
0000E220                            
0000E220                            loc_D71C:
0000E220 6100 0000                  		bsr.w	sub_D750
0000E224                            
0000E224                            loc_D720:
0000E224 08E8 0007 0001             		bset	#7,1(a0)
0000E22A                            
0000E22A                            loc_D726:
0000E22A 5446                       		addq.w	#2,d6
0000E22C 5554                       		subq.w	#2,(a4)
0000E22E 6600 FF44                  		bne.w	loc_D672
0000E232                            
0000E232                            loc_D72E:
0000E232 49EC 0080                  		lea	$80(a4),a4
0000E236 51CF FF34                  		dbf	d7,loc_D66A
0000E23A 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000E23E 0C05 0050                  		cmpi.b	#$50,d5
0000E242 6700                       		beq.s	loc_D748
0000E244 24BC 0000 0000             		move.l	#0,(a2)
0000E24A 4E75                       		rts	
0000E24C                            ; ===========================================================================
0000E24C                            
0000E24C                            loc_D748:
0000E24C 157C 0000 FFFB             		move.b	#0,-5(a2)
0000E252 4E75                       		rts	
0000E254                            ; End of function BuildSprites
0000E254                            
0000E254                            
0000E254                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E254                            
0000E254                            
0000E254                            sub_D750:				; XREF: BuildSprites
0000E254 3668 0002                  		movea.w	2(a0),a3
0000E258 0804 0000                  		btst	#0,d4
0000E25C 6600                       		bne.s	loc_D796
0000E25E 0804 0001                  		btst	#1,d4
0000E262 6600 0000                  		bne.w	loc_D7E4
0000E266                            ; End of function sub_D750
0000E266                            
0000E266                            
0000E266                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E266                            
0000E266                            
0000E266                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000E266 0C05 0050                  		cmpi.b	#$50,d5
0000E26A 6700                       		beq.s	locret_D794
0000E26C 1019                       		move.b	(a1)+,d0
0000E26E 4880                       		ext.w	d0
0000E270 D042                       		add.w	d2,d0
0000E272 34C0                       		move.w	d0,(a2)+
0000E274 14D9                       		move.b	(a1)+,(a2)+
0000E276 5205                       		addq.b	#1,d5
0000E278 14C5                       		move.b	d5,(a2)+
0000E27A 1019                       		move.b	(a1)+,d0
0000E27C E148                       		lsl.w	#8,d0
0000E27E 1019                       		move.b	(a1)+,d0
0000E280 D04B                       		add.w	a3,d0
0000E282 34C0                       		move.w	d0,(a2)+
0000E284 1019                       		move.b	(a1)+,d0
0000E286 4880                       		ext.w	d0
0000E288 D043                       		add.w	d3,d0
0000E28A 0240 01FF                  		andi.w	#$1FF,d0
0000E28E 6600                       		bne.s	loc_D78E
0000E290 5240                       		addq.w	#1,d0
0000E292                            
0000E292                            loc_D78E:
0000E292 34C0                       		move.w	d0,(a2)+
0000E294 51C9 FFD0                  		dbf	d1,sub_D762
0000E298                            
0000E298                            locret_D794:
0000E298 4E75                       		rts	
0000E29A                            ; End of function sub_D762
0000E29A                            
0000E29A                            ; ===========================================================================
0000E29A                            
0000E29A                            loc_D796:
0000E29A 0804 0001                  		btst	#1,d4
0000E29E 6600 0000                  		bne.w	loc_D82A
0000E2A2                            
0000E2A2                            loc_D79E:
0000E2A2 0C05 0050                  		cmpi.b	#$50,d5
0000E2A6 6700                       		beq.s	locret_D7E2
0000E2A8 1019                       		move.b	(a1)+,d0
0000E2AA 4880                       		ext.w	d0
0000E2AC D042                       		add.w	d2,d0
0000E2AE 34C0                       		move.w	d0,(a2)+
0000E2B0 1819                       		move.b	(a1)+,d4
0000E2B2 14C4                       		move.b	d4,(a2)+
0000E2B4 5205                       		addq.b	#1,d5
0000E2B6 14C5                       		move.b	d5,(a2)+
0000E2B8 1019                       		move.b	(a1)+,d0
0000E2BA E148                       		lsl.w	#8,d0
0000E2BC 1019                       		move.b	(a1)+,d0
0000E2BE D04B                       		add.w	a3,d0
0000E2C0 0A40 0800                  		eori.w	#$800,d0
0000E2C4 34C0                       		move.w	d0,(a2)+
0000E2C6 1019                       		move.b	(a1)+,d0
0000E2C8 4880                       		ext.w	d0
0000E2CA 4440                       		neg.w	d0
0000E2CC D804                       		add.b	d4,d4
0000E2CE 0244 0018                  		andi.w	#$18,d4
0000E2D2 5044                       		addq.w	#8,d4
0000E2D4 9044                       		sub.w	d4,d0
0000E2D6 D043                       		add.w	d3,d0
0000E2D8 0240 01FF                  		andi.w	#$1FF,d0
0000E2DC 6600                       		bne.s	loc_D7DC
0000E2DE 5240                       		addq.w	#1,d0
0000E2E0                            
0000E2E0                            loc_D7DC:
0000E2E0 34C0                       		move.w	d0,(a2)+
0000E2E2 51C9 FFBE                  		dbf	d1,loc_D79E
0000E2E6                            
0000E2E6                            locret_D7E2:
0000E2E6 4E75                       		rts	
0000E2E8                            ; ===========================================================================
0000E2E8                            
0000E2E8                            loc_D7E4:				; XREF: sub_D750
0000E2E8 0C05 0050                  		cmpi.b	#$50,d5
0000E2EC 6700                       		beq.s	locret_D828
0000E2EE 1019                       		move.b	(a1)+,d0
0000E2F0 1811                       		move.b	(a1),d4
0000E2F2 4880                       		ext.w	d0
0000E2F4 4440                       		neg.w	d0
0000E2F6 E70C                       		lsl.b	#3,d4
0000E2F8 0244 0018                  		andi.w	#$18,d4
0000E2FC 5044                       		addq.w	#8,d4
0000E2FE 9044                       		sub.w	d4,d0
0000E300 D042                       		add.w	d2,d0
0000E302 34C0                       		move.w	d0,(a2)+
0000E304 14D9                       		move.b	(a1)+,(a2)+
0000E306 5205                       		addq.b	#1,d5
0000E308 14C5                       		move.b	d5,(a2)+
0000E30A 1019                       		move.b	(a1)+,d0
0000E30C E148                       		lsl.w	#8,d0
0000E30E 1019                       		move.b	(a1)+,d0
0000E310 D04B                       		add.w	a3,d0
0000E312 0A40 1000                  		eori.w	#$1000,d0
0000E316 34C0                       		move.w	d0,(a2)+
0000E318 1019                       		move.b	(a1)+,d0
0000E31A 4880                       		ext.w	d0
0000E31C D043                       		add.w	d3,d0
0000E31E 0240 01FF                  		andi.w	#$1FF,d0
0000E322 6600                       		bne.s	loc_D822
0000E324 5240                       		addq.w	#1,d0
0000E326                            
0000E326                            loc_D822:
0000E326 34C0                       		move.w	d0,(a2)+
0000E328 51C9 FFBE                  		dbf	d1,loc_D7E4
0000E32C                            
0000E32C                            locret_D828:
0000E32C 4E75                       		rts	
0000E32E                            ; ===========================================================================
0000E32E                            
0000E32E                            loc_D82A:
0000E32E 0C05 0050                  		cmpi.b	#$50,d5
0000E332 6700                       		beq.s	locret_D87C
0000E334 1019                       		move.b	(a1)+,d0
0000E336 1811                       		move.b	(a1),d4
0000E338 4880                       		ext.w	d0
0000E33A 4440                       		neg.w	d0
0000E33C E70C                       		lsl.b	#3,d4
0000E33E 0244 0018                  		andi.w	#$18,d4
0000E342 5044                       		addq.w	#8,d4
0000E344 9044                       		sub.w	d4,d0
0000E346 D042                       		add.w	d2,d0
0000E348 34C0                       		move.w	d0,(a2)+
0000E34A 1819                       		move.b	(a1)+,d4
0000E34C 14C4                       		move.b	d4,(a2)+
0000E34E 5205                       		addq.b	#1,d5
0000E350 14C5                       		move.b	d5,(a2)+
0000E352 1019                       		move.b	(a1)+,d0
0000E354 E148                       		lsl.w	#8,d0
0000E356 1019                       		move.b	(a1)+,d0
0000E358 D04B                       		add.w	a3,d0
0000E35A 0A40 1800                  		eori.w	#$1800,d0
0000E35E 34C0                       		move.w	d0,(a2)+
0000E360 1019                       		move.b	(a1)+,d0
0000E362 4880                       		ext.w	d0
0000E364 4440                       		neg.w	d0
0000E366 D804                       		add.b	d4,d4
0000E368 0244 0018                  		andi.w	#$18,d4
0000E36C 5044                       		addq.w	#8,d4
0000E36E 9044                       		sub.w	d4,d0
0000E370 D043                       		add.w	d3,d0
0000E372 0240 01FF                  		andi.w	#$1FF,d0
0000E376 6600                       		bne.s	loc_D876
0000E378 5240                       		addq.w	#1,d0
0000E37A                            
0000E37A                            loc_D876:
0000E37A 34C0                       		move.w	d0,(a2)+
0000E37C 51C9 FFB0                  		dbf	d1,loc_D82A
0000E380                            
0000E380                            locret_D87C:
0000E380 4E75                       		rts	
0000E382                            ; ---------------------------------------------------------------------------
0000E382                            ; Subroutine to	check if an object is on the screen
0000E382                            ; ---------------------------------------------------------------------------
0000E382                            
0000E382                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E382                            
0000E382                            
0000E382                            ChkObjOnScreen:
0000E382 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000E386 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000E38A 6B00                       		bmi.s	NotOnScreen
0000E38C 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000E390 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E392                            
0000E392 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000E396 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000E39A 6B00                       		bmi.s	NotOnScreen
0000E39C 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000E3A0 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E3A2                            
0000E3A2 7000                       		moveq	#0,d0		; set flag to 0
0000E3A4 4E75                       		rts	
0000E3A6                            ; ===========================================================================
0000E3A6                            
0000E3A6                            NotOnScreen:				; XREF: ChkObjOnScreen
0000E3A6 7001                       		moveq	#1,d0		; set flag to 1
0000E3A8 4E75                       		rts	
0000E3AA                            ; End of function ChkObjOnScreen
0000E3AA                            
0000E3AA                            
0000E3AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E3AA                            
0000E3AA                            
0000E3AA                            ChkObjOnScreen2:
0000E3AA 7200                       		moveq	#0,d1
0000E3AC 1228 0019                  		move.b	$19(a0),d1
0000E3B0 3028 0008                  		move.w	8(a0),d0
0000E3B4 9078 F700                  		sub.w	($FFFFF700).w,d0
0000E3B8 D041                       		add.w	d1,d0
0000E3BA 6B00                       		bmi.s	NotOnScreen2
0000E3BC D241                       		add.w	d1,d1
0000E3BE 9041                       		sub.w	d1,d0
0000E3C0 0C40 0140                  		cmpi.w	#320,d0
0000E3C4 6C00                       		bge.s	NotOnScreen2
0000E3C6                            
0000E3C6 3228 000C                  		move.w	$C(a0),d1
0000E3CA 9278 F704                  		sub.w	($FFFFF704).w,d1
0000E3CE 6B00                       		bmi.s	NotOnScreen2
0000E3D0 0C41 00E0                  		cmpi.w	#224,d1
0000E3D4 6C00                       		bge.s	NotOnScreen2
0000E3D6                            
0000E3D6 7000                       		moveq	#0,d0
0000E3D8 4E75                       		rts	
0000E3DA                            ; ===========================================================================
0000E3DA                            
0000E3DA                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000E3DA 7001                       		moveq	#1,d0
0000E3DC 4E75                       		rts	
0000E3DE                            ; End of function ChkObjOnScreen2
0000E3DE                            
0000E3DE                            ; ---------------------------------------------------------------------------
0000E3DE                            ; Subroutine to	load a level's objects
0000E3DE                            ; ---------------------------------------------------------------------------
0000E3DE                            
0000E3DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E3DE                            
0000E3DE                            
0000E3DE                            ObjPosLoad:				; XREF: Level; et al
0000E3DE 7000                       		moveq	#0,d0
0000E3E0 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000E3E4 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000E3E8 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000E3EC                            ; End of function ObjPosLoad
0000E3EC                            
0000E3EC                            ; ===========================================================================
0000E3EC 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000E3EE 0000                       		dc.w OPL_Next-OPL_Index
0000E3F0                            ; ===========================================================================
0000E3F0                            
0000E3F0                            OPL_Main:				; XREF: OPL_Index
0000E3F0 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000E3F4 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000E3F8 ED08                       		lsl.b	#6,d0
0000E3FA E848                       		lsr.w	#4,d0
0000E3FC 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000E402 2248                       		movea.l	a0,a1
0000E404 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000E408 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E40C 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E410 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000E414 21C9 F778                  		move.l	a1,($FFFFF778).w
0000E418 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000E41C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E420 34FC 0101                  		move.w	#$101,(a2)+
0000E424 303C 005E                  		move.w	#$5E,d0
0000E428                            
0000E428                            OPL_ClrList:
0000E428 429A                       		clr.l	(a2)+
0000E42A 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000E42E                            
0000E42E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E432 7400                       		moveq	#0,d2
0000E434 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E438 0446 0080                  		subi.w	#$80,d6
0000E43C 6400                       		bcc.s	loc_D93C
0000E43E 7C00                       		moveq	#0,d6
0000E440                            
0000E440                            loc_D93C:
0000E440 0246 FF80                  		andi.w	#$FF80,d6
0000E444 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E448                            
0000E448                            loc_D944:
0000E448 BC50                       		cmp.w	(a0),d6
0000E44A 6300                       		bls.s	loc_D956
0000E44C 4A28 0004                  		tst.b	4(a0)
0000E450 6A00                       		bpl.s	loc_D952
0000E452 1412                       		move.b	(a2),d2
0000E454 5212                       		addq.b	#1,(a2)
0000E456                            
0000E456                            loc_D952:
0000E456 5C48                       		addq.w	#6,a0
0000E458 60EE                       		bra.s	loc_D944
0000E45A                            ; ===========================================================================
0000E45A                            
0000E45A                            loc_D956:
0000E45A 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E45E 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E462 0446 0080                  		subi.w	#$80,d6
0000E466 6500                       		bcs.s	loc_D976
0000E468                            
0000E468                            loc_D964:
0000E468 BC50                       		cmp.w	(a0),d6
0000E46A 6300                       		bls.s	loc_D976
0000E46C 4A28 0004                  		tst.b	4(a0)
0000E470 6A00                       		bpl.s	loc_D972
0000E472 522A 0001                  		addq.b	#1,1(a2)
0000E476                            
0000E476                            loc_D972:
0000E476 5C48                       		addq.w	#6,a0
0000E478 60EE                       		bra.s	loc_D964
0000E47A                            ; ===========================================================================
0000E47A                            
0000E47A                            loc_D976:
0000E47A 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E47E 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000E484                            
0000E484                            OPL_Next:				; XREF: OPL_Index
0000E484 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E488 7400                       		moveq	#0,d2
0000E48A 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E48E 0246 FF80                  		andi.w	#$FF80,d6
0000E492 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000E496 6700 0000                  		beq.w	locret_DA3A
0000E49A 6C00                       		bge.s	loc_D9F6
0000E49C 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E4A0 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E4A4 0446 0080                  		subi.w	#$80,d6
0000E4A8 6500                       		bcs.s	loc_D9D2
0000E4AA                            
0000E4AA                            loc_D9A6:
0000E4AA BC68 FFFA                  		cmp.w	-6(a0),d6
0000E4AE 6C00                       		bge.s	loc_D9D2
0000E4B0 5D48                       		subq.w	#6,a0
0000E4B2 4A28 0004                  		tst.b	4(a0)
0000E4B6 6A00                       		bpl.s	loc_D9BC
0000E4B8 532A 0001                  		subq.b	#1,1(a2)
0000E4BC 142A 0001                  		move.b	1(a2),d2
0000E4C0                            
0000E4C0                            loc_D9BC:
0000E4C0 6100 0000                  		bsr.w	loc_DA3C
0000E4C4 6600                       		bne.s	loc_D9C6
0000E4C6 5D48                       		subq.w	#6,a0
0000E4C8 60E0                       		bra.s	loc_D9A6
0000E4CA                            ; ===========================================================================
0000E4CA                            
0000E4CA                            loc_D9C6:
0000E4CA 4A28 0004                  		tst.b	4(a0)
0000E4CE 6A00                       		bpl.s	loc_D9D0
0000E4D0 522A 0001                  		addq.b	#1,1(a2)
0000E4D4                            
0000E4D4                            loc_D9D0:
0000E4D4 5C48                       		addq.w	#6,a0
0000E4D6                            
0000E4D6                            loc_D9D2:
0000E4D6 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E4DA 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E4DE 0646 0300                  		addi.w	#$300,d6
0000E4E2                            
0000E4E2                            loc_D9DE:
0000E4E2 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E4E6 6E00                       		bgt.s	loc_D9F0
0000E4E8 4A28 FFFE                  		tst.b	-2(a0)
0000E4EC 6A00                       		bpl.s	loc_D9EC
0000E4EE 5312                       		subq.b	#1,(a2)
0000E4F0                            
0000E4F0                            loc_D9EC:
0000E4F0 5D48                       		subq.w	#6,a0
0000E4F2 60EE                       		bra.s	loc_D9DE
0000E4F4                            ; ===========================================================================
0000E4F4                            
0000E4F4                            loc_D9F0:
0000E4F4 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E4F8 4E75                       		rts	
0000E4FA                            ; ===========================================================================
0000E4FA                            
0000E4FA                            loc_D9F6:
0000E4FA 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E4FE 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E502 0646 0280                  		addi.w	#$280,d6
0000E506                            
0000E506                            loc_DA02:
0000E506 BC50                       		cmp.w	(a0),d6
0000E508 6300                       		bls.s	loc_DA16
0000E50A 4A28 0004                  		tst.b	4(a0)
0000E50E 6A00                       		bpl.s	loc_DA10
0000E510 1412                       		move.b	(a2),d2
0000E512 5212                       		addq.b	#1,(a2)
0000E514                            
0000E514                            loc_DA10:
0000E514 6100 0000                  		bsr.w	loc_DA3C
0000E518 67EC                       		beq.s	loc_DA02
0000E51A 4A28 0004                  		tst.b	$04(a0)		; was this object a remember state?
0000E51E 6A00                       		bpl.s	loc_DA16	; if not, branch
0000E520 5312                       		subq.b	#$01,(a2)	; move right counter back		
0000E522                            
0000E522                            loc_DA16:
0000E522 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E526 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E52A 0446 0300                  		subi.w	#$300,d6
0000E52E 6500                       		bcs.s	loc_DA36
0000E530                            
0000E530                            loc_DA24:
0000E530 BC50                       		cmp.w	(a0),d6
0000E532 6300                       		bls.s	loc_DA36
0000E534 4A28 0004                  		tst.b	4(a0)
0000E538 6A00                       		bpl.s	loc_DA32
0000E53A 522A 0001                  		addq.b	#1,1(a2)
0000E53E                            
0000E53E                            loc_DA32:
0000E53E 5C48                       		addq.w	#6,a0
0000E540 60EE                       		bra.s	loc_DA24
0000E542                            ; ===========================================================================
0000E542                            
0000E542                            loc_DA36:
0000E542 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E546                            
0000E546                            locret_DA3A:
0000E546 4E75                       		rts	
0000E548                            ; ===========================================================================
0000E548                            
0000E548                            loc_DA3C:
0000E548 4A28 0004                  		tst.b	4(a0)
0000E54C 6A00                       		bpl.s	OPL_MakeItem
0000E54E 0832 0007 2002             		btst	#7,2(a2,d2.w)
0000E554 6700                       		beq.s	OPL_MakeItem
0000E556 5C48                       		addq.w	#6,a0
0000E558 7000                       		moveq	#0,d0
0000E55A 4E75                       		rts	
0000E55C                            ; ===========================================================================
0000E55C                            
0000E55C                            OPL_MakeItem:
0000E55C 6100 0000                  		bsr.w	SingleObjLoad
0000E560 6600                       		bne.s	locret_DA8A
0000E562 3358 0008                  		move.w	(a0)+,8(a1)
0000E566 3018                       		move.w	(a0)+,d0
0000E568 3200                       		move.w	d0,d1
0000E56A 0240 0FFF                  		andi.w	#$FFF,d0
0000E56E 3340 000C                  		move.w	d0,$C(a1)
0000E572 E559                       		rol.w	#2,d1
0000E574 0201 0003                  		andi.b	#3,d1
0000E578 1341 0001                  		move.b	d1,1(a1)
0000E57C 1341 0022                  		move.b	d1,$22(a1)
0000E580 1018                       		move.b	(a0)+,d0
0000E582 6A00                       		bpl.s	loc_DA80
0000E584 08F2 0007 2002             		bset	#$07,$02(a2,d2.w)	; set as removed
0000E58A 0200 007F                  		andi.b	#$7F,d0
0000E58E 1342 0023                  		move.b	d2,$23(a1)
0000E592                            
0000E592                            loc_DA80:
0000E592 1280                       		move.b	d0,0(a1)
0000E594 1358 0028                  		move.b	(a0)+,$28(a1)
0000E598 7000                       		moveq	#0,d0
0000E59A                            
0000E59A                            locret_DA8A:
0000E59A 4E75                       		rts	
0000E59C                            ; ---------------------------------------------------------------------------
0000E59C                            ; Single object	loading	subroutine
0000E59C                            ; ---------------------------------------------------------------------------
0000E59C                            
0000E59C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E59C                            
0000E59C                            
0000E59C                            SingleObjLoad:
0000E59C 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E5A0 303C 005F                  		move.w	#$5F,d0
0000E5A4                            
0000E5A4                            loc_DA94:
0000E5A4 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E5A6 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E5A8 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E5AC 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E5B0                            
0000E5B0                            locret_DAA0:
0000E5B0 4E75                       		rts	
0000E5B2                            ; End of function SingleObjLoad
0000E5B2                            
0000E5B2                            
0000E5B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E5B2                            
0000E5B2                            
0000E5B2                            SingleObjLoad2:
0000E5B2 2248                       		movea.l	a0,a1
0000E5B4 303C F000                  		move.w	#-$1000,d0
0000E5B8 9048                       		sub.w	a0,d0
0000E5BA EC48                       		lsr.w	#6,d0
0000E5BC 5340                       		subq.w	#1,d0
0000E5BE 6500                       		bcs.s	locret_DABC
0000E5C0                            
0000E5C0                            loc_DAB0:
0000E5C0 4A11                       		tst.b	(a1)
0000E5C2 6700                       		beq.s	locret_DABC
0000E5C4 43E9 0040                  		lea	$40(a1),a1
0000E5C8 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E5CC                            
0000E5CC                            locret_DABC:
0000E5CC 4E75                       		rts	
0000E5CE                            ; End of function SingleObjLoad2
0000E5CE                            
0000E5CE                            ; ===========================================================================
0000E5CE                            ; ---------------------------------------------------------------------------
0000E5CE                            ; Object 41 - springs
0000E5CE                            ; ---------------------------------------------------------------------------
0000E5CE                            
0000E5CE                            Obj41:					; XREF: Obj_Index
0000E5CE 7000                       		moveq	#0,d0
0000E5D0 1028 0024                  		move.b	$24(a0),d0
0000E5D4 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E5D8 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E5DC 6100 FB28                  		bsr.w	DisplaySprite
0000E5E0 3028 0008                  		move.w	8(a0),d0
0000E5E4 0240 FF80                  		andi.w	#$FF80,d0
0000E5E8 3238 F700                  		move.w	($FFFFF700).w,d1
0000E5EC 0441 0080                  		subi.w	#$80,d1
0000E5F0 0241 FF80                  		andi.w	#$FF80,d1
0000E5F4 9041                       		sub.w	d1,d0
0000E5F6 0C40 0280                  		cmpi.w	#$280,d0
0000E5FA 6200 FB46                  		bhi.w	DeleteObject
0000E5FE 4E75                       		rts	
0000E600                            ; ===========================================================================
0000E600 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E602 0000                       		dc.w Obj41_Up-Obj41_Index
0000E604 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E606 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E608 0000                       		dc.w Obj41_LR-Obj41_Index
0000E60A 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E60C 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E60E 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E610 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E612 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E614                            
0000E614 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E616 F600                       		dc.w -$A00		; power	of yellow spring
0000E618                            ; ===========================================================================
0000E618                            
0000E618                            Obj41_Main:				; XREF: Obj41_Index
0000E618 5428 0024                  		addq.b	#2,$24(a0)
0000E61C 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E624 317C 0523 0002             		move.w	#$523,2(a0)
0000E62A 0028 0004 0001             		ori.b	#4,1(a0)
0000E630 117C 0010 0019             		move.b	#$10,$19(a0)
0000E636 117C 0004 0018             		move.b	#4,$18(a0)
0000E63C 1028 0028                  		move.b	$28(a0),d0
0000E640 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E644 6700                       		beq.s	loc_DB54	; if not, branch
0000E646 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E64C 117C 0001 001C             		move.b	#1,$1C(a0)
0000E652 117C 0003 001A             		move.b	#3,$1A(a0)
0000E658 317C 0533 0002             		move.w	#$533,2(a0)
0000E65E 117C 0008 0019             		move.b	#8,$19(a0)
0000E664                            
0000E664                            loc_DB54:
0000E664 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E668 6700                       		beq.s	loc_DB66	; if not, branch
0000E66A 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E670 08E8 0001 0022             		bset	#1,$22(a0)
0000E676                            
0000E676                            loc_DB66:
0000E676 0800 0001                  		btst	#1,d0
0000E67A 6700                       		beq.s	loc_DB72
0000E67C 08E8 0005 0002             		bset	#5,2(a0)
0000E682                            
0000E682                            loc_DB72:
0000E682 0240 000F                  		andi.w	#$F,d0
0000E686 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E68C 4E75                       		rts	
0000E68E                            ; ===========================================================================
0000E68E                            
0000E68E                            Obj41_Up:				; XREF: Obj41_Index
0000E68E 323C 001B                  		move.w	#$1B,d1
0000E692 343C 0008                  		move.w	#8,d2
0000E696 363C 0010                  		move.w	#$10,d3
0000E69A 3828 0008                  		move.w	8(a0),d4
0000E69E 6100 0000                  		bsr.w	SolidObject
0000E6A2 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E6A6 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E6A8 4E75                       		rts	
0000E6AA                            ; ===========================================================================
0000E6AA                            
0000E6AA                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E6AA 5428 0024                  		addq.b	#2,$24(a0)
0000E6AE 5069 000C                  		addq.w	#8,$C(a1)
0000E6B2 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E6B8 08E9 0001 0022             		bset	#1,$22(a1)
0000E6BE 08A9 0003 0022             		bclr	#3,$22(a1)
0000E6C4 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E6CA 137C 0002 0024             		move.b	#2,$24(a1)
0000E6D0 08A8 0003 0022             		bclr	#3,$22(a0)
0000E6D6 4228 0025                  		clr.b	$25(a0)
0000E6DA 303C 00CC                  		move.w	#$CC,d0
0000E6DE 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play spring sound
0000E6E4                            
0000E6E4                            Obj41_AniUp:				; XREF: Obj41_Index
0000E6E4 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E6EA 6000 CB2C                  		bra.w	AnimateSprite
0000E6EE                            ; ===========================================================================
0000E6EE                            
0000E6EE                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E6EE 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E6F4 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E6F8 4E75                       		rts	
0000E6FA                            ; ===========================================================================
0000E6FA                            
0000E6FA                            Obj41_LR:				; XREF: Obj41_Index
0000E6FA 323C 0013                  		move.w	#$13,d1
0000E6FE 343C 000E                  		move.w	#$E,d2
0000E702 363C 000F                  		move.w	#$F,d3
0000E706 3828 0008                  		move.w	8(a0),d4
0000E70A 6100 0000                  		bsr.w	SolidObject
0000E70E 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E714 6600                       		bne.s	loc_DC0C
0000E716 117C 0008 0024             		move.b	#8,$24(a0)
0000E71C                            
0000E71C                            loc_DC0C:
0000E71C 0828 0005 0022             		btst	#5,$22(a0)
0000E722 6600                       		bne.s	Obj41_BounceLR
0000E724 4E75                       		rts	
0000E726                            ; ===========================================================================
0000E726                            
0000E726                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E726 5428 0024                  		addq.b	#2,$24(a0)
0000E72A 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E730 5069 0008                  		addq.w	#8,8(a1)
0000E734 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E73A 6600                       		bne.s	loc_DC36	; if yes, branch
0000E73C 0469 0010 0008             		subi.w	#$10,8(a1)
0000E742 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E746                            
0000E746                            loc_DC36:
0000E746 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E74C 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E752 0869 0000 0022             		bchg	#0,$22(a1)
0000E758 0829 0002 0022             		btst	#2,$22(a1)
0000E75E 6600                       		bne.s	loc_DC56
0000E760 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E766                            
0000E766                            loc_DC56:
0000E766 08A8 0005 0022             		bclr	#5,$22(a0)
0000E76C 08A9 0005 0022             		bclr	#5,$22(a1)
0000E772 303C 00CC                  		move.w	#$CC,d0
0000E776 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play spring sound
0000E77C                            
0000E77C                            Obj41_AniLR:				; XREF: Obj41_Index
0000E77C 4278 C904                  		clr.w	($FFFFC904).w	; clear screen delay counter
0000E780 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E786 6000 CA90                  		bra.w	AnimateSprite
0000E78A                            ; ===========================================================================
0000E78A                            
0000E78A                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E78A 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E790 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E794 4E75                       		rts	
0000E796                            ; ===========================================================================
0000E796                            
0000E796                            Obj41_Dwn:				; XREF: Obj41_Index
0000E796 323C 001B                  		move.w	#$1B,d1
0000E79A 343C 0008                  		move.w	#8,d2
0000E79E 363C 0010                  		move.w	#$10,d3
0000E7A2 3828 0008                  		move.w	8(a0),d4
0000E7A6 6100 0000                  		bsr.w	SolidObject
0000E7AA 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E7B0 6600                       		bne.s	loc_DCA4
0000E7B2 117C 000E 0024             		move.b	#$E,$24(a0)
0000E7B8                            
0000E7B8                            loc_DCA4:
0000E7B8 4A28 0025                  		tst.b	$25(a0)
0000E7BC 6600                       		bne.s	locret_DCAE
0000E7BE 4A44                       		tst.w	d4
0000E7C0 6B00                       		bmi.s	Obj41_BounceDwn
0000E7C2                            
0000E7C2                            locret_DCAE:
0000E7C2 4E75                       		rts	
0000E7C4                            ; ===========================================================================
0000E7C4                            
0000E7C4                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E7C4 5428 0024                  		addq.b	#2,$24(a0)
0000E7C8 5169 000C                  		subq.w	#8,$C(a1)
0000E7CC 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E7D2 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E7D6 08E9 0001 0022             		bset	#1,$22(a1)
0000E7DC 08A9 0003 0022             		bclr	#3,$22(a1)
0000E7E2 137C 0002 0024             		move.b	#2,$24(a1)
0000E7E8 08A8 0003 0022             		bclr	#3,$22(a0)
0000E7EE 4228 0025                  		clr.b	$25(a0)
0000E7F2 303C 00CC                  		move.w	#$CC,d0
0000E7F6 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play spring sound
0000E7FC                            
0000E7FC                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E7FC 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E802 6000 CA14                  		bra.w	AnimateSprite
0000E806                            ; ===========================================================================
0000E806                            
0000E806                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E806 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E80C 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E810 4E75                       		rts	
0000E812                            ; ===========================================================================
0000E812                            Ani_obj41:
0000E812                            	include "_anim\obj41.asm"
0000E812                            ; ---------------------------------------------------------------------------
0000E812                            ; Animation script - springs
0000E812                            ; ---------------------------------------------------------------------------
0000E812 0000                       		dc.w byte_DD02-Ani_obj41
0000E814 0000                       		dc.w byte_DD0E-Ani_obj41
0000E816 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E822 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E82E                            		even
0000E82E                            		even
0000E82E                            
0000E82E                            ; ---------------------------------------------------------------------------
0000E82E                            ; Sprite mappings - springs
0000E82E                            ; ---------------------------------------------------------------------------
0000E82E                            Map_obj41:
0000E82E                            	include "_maps\obj41.asm"
0000E82E                            ; ---------------------------------------------------------------------------
0000E82E                            ; Sprite mappings - springs
0000E82E                            ; ---------------------------------------------------------------------------
0000E82E 0000                       		dc.w byte_DD26-Map_obj41
0000E830 0000                       		dc.w byte_DD31-Map_obj41
0000E832 0000                       		dc.w byte_DD37-Map_obj41
0000E834 0000                       		dc.w byte_DD47-Map_obj41
0000E836 0000                       		dc.w byte_DD4D-Map_obj41
0000E838 0000                       		dc.w byte_DD53-Map_obj41
0000E83A 02                         byte_DD26:	dc.b 2
0000E83B F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E840 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E845 01                         byte_DD31:	dc.b 1
0000E846 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E84B 03                         byte_DD37:	dc.b 3
0000E84C E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E851 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E856 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E85B 01                         byte_DD47:	dc.b 1
0000E85C F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E861 01                         byte_DD4D:	dc.b 1
0000E862 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E867 04                         byte_DD53:	dc.b 4
0000E868 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E86D F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E872 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E877 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E87C                            		even
0000E87C                            		even
0000E87C                            
0000E87C                            ; ===========================================================================
0000E87C                            ; ---------------------------------------------------------------------------
0000E87C                            ; Object 42 - Newtron enemy (GHZ)
0000E87C                            ; ---------------------------------------------------------------------------
0000E87C                            
0000E87C                            Obj42:					; XREF: Obj_Index
0000E87C 7000                       		moveq	#0,d0
0000E87E 1028 0024                  		move.b	$24(a0),d0
0000E882 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E886 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E88A                            ; ===========================================================================
0000E88A 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E88C 0000                       		dc.w Obj42_Action-Obj42_Index
0000E88E 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E890                            ; ===========================================================================
0000E890                            
0000E890                            Obj42_Main:				; XREF: Obj42_Index
0000E890 5428 0024                  		addq.b	#2,$24(a0)
0000E894 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E89C 317C 049B 0002             		move.w	#$49B,2(a0)
0000E8A2 117C 0004 0001             		move.b	#4,1(a0)
0000E8A8 117C 0004 0018             		move.b	#4,$18(a0)
0000E8AE 117C 0014 0019             		move.b	#$14,$19(a0)
0000E8B4 117C 0010 0016             		move.b	#$10,$16(a0)
0000E8BA 117C 0008 0017             		move.b	#8,$17(a0)
0000E8C0                            
0000E8C0                            Obj42_Action:				; XREF: Obj42_Index
0000E8C0 7000                       		moveq	#0,d0
0000E8C2 1028 0025                  		move.b	$25(a0),d0
0000E8C6 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E8CA 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E8CE 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E8D4 6100 C942                  		bsr.w	AnimateSprite
0000E8D8 6000 0000                  		bra.w	MarkObjGone
0000E8DC                            ; ===========================================================================
0000E8DC 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E8DE 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E8E0 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E8E2 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E8E4 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E8E6                            ; ===========================================================================
0000E8E6                            
0000E8E6                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E8E6 08E8 0000 0022             		bset	#0,$22(a0)
0000E8EC 3038 D008                  		move.w	($FFFFD008).w,d0
0000E8F0 9068 0008                  		sub.w	8(a0),d0
0000E8F4 6400                       		bcc.s	loc_DDEA
0000E8F6 4440                       		neg.w	d0
0000E8F8 08A8 0000 0022             		bclr	#0,$22(a0)
0000E8FE                            
0000E8FE                            loc_DDEA:
0000E8FE 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E902 6400                       		bcc.s	locret_DE12	; if not, branch
0000E904 5428 0025                  		addq.b	#2,$25(a0)
0000E908 117C 0001 001C             		move.b	#1,$1C(a0)
0000E90E 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E912 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E914 317C 249B 0002             		move.w	#$249B,2(a0)
0000E91A 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E920 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E926                            
0000E926                            locret_DE12:
0000E926 4E75                       		rts	
0000E928                            ; ===========================================================================
0000E928                            
0000E928                            Obj42_Type00:				; XREF: Obj42_Index2
0000E928 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E92E 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E930 08E8 0000 0022             		bset	#0,$22(a0)
0000E936 3038 D008                  		move.w	($FFFFD008).w,d0
0000E93A 9068 0008                  		sub.w	8(a0),d0
0000E93E 6400                       		bcc.s	locret_DE32
0000E940 08A8 0000 0022             		bclr	#0,$22(a0)
0000E946                            
0000E946                            locret_DE32:
0000E946 4E75                       		rts	
0000E948                            ; ===========================================================================
0000E948                            
0000E948                            Obj42_Fall:				; XREF: Obj42_Type00
0000E948 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E94E 6600                       		bne.s	loc_DE42
0000E950 117C 000C 0020             		move.b	#$C,$20(a0)
0000E956                            
0000E956                            loc_DE42:
0000E956 6100 F75C                  		bsr.w	ObjectFall
0000E95A 6100 0000                  		bsr.w	ObjHitFloor
0000E95E 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E960 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E962 D368 000C                  		add.w	d1,$C(a0)
0000E966 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E96C 5428 0025                  		addq.b	#2,$25(a0)
0000E970 117C 0002 001C             		move.b	#2,$1C(a0)
0000E976 0828 0005 0002             		btst	#5,2(a0)
0000E97C 6700                       		beq.s	Obj42_Move
0000E97E 5228 001C                  		addq.b	#1,$1C(a0)
0000E982                            
0000E982                            Obj42_Move:
0000E982 117C 000D 0020             		move.b	#$D,$20(a0)
0000E988 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E98E 0828 0000 0022             		btst	#0,$22(a0)
0000E994 6600                       		bne.s	locret_DE86
0000E996 4468 0010                  		neg.w	$10(a0)
0000E99A                            
0000E99A                            locret_DE86:
0000E99A 4E75                       		rts	
0000E99C                            ; ===========================================================================
0000E99C                            
0000E99C                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E99C 6100 F742                  		bsr.w	SpeedToPos
0000E9A0 6100 0000                  		bsr.w	ObjHitFloor
0000E9A4 0C41 FFF8                  		cmpi.w	#-8,d1
0000E9A8 6D00                       		blt.s	loc_DEA2
0000E9AA 0C41 000C                  		cmpi.w	#$C,d1
0000E9AE 6C00                       		bge.s	loc_DEA2
0000E9B0 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E9B4 4E75                       		rts	
0000E9B6                            ; ===========================================================================
0000E9B6                            
0000E9B6                            loc_DEA2:
0000E9B6 5428 0025                  		addq.b	#2,$25(a0)
0000E9BA 4E75                       		rts	
0000E9BC                            ; ===========================================================================
0000E9BC                            
0000E9BC                            Obj42_Speed:				; XREF: Obj42_Index2
0000E9BC 6100 F722                  		bsr.w	SpeedToPos
0000E9C0 4E75                       		rts	
0000E9C2                            ; ===========================================================================
0000E9C2                            
0000E9C2                            Obj42_Type01:				; XREF: Obj42_Index2
0000E9C2 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E9C8 6600                       		bne.s	Obj42_FireMissile
0000E9CA 117C 000C 0020             		move.b	#$C,$20(a0)
0000E9D0                            
0000E9D0                            Obj42_FireMissile:
0000E9D0 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E9D6 6600                       		bne.s	locret_DF14
0000E9D8 4A28 0032                  		tst.b	$32(a0)
0000E9DC 6600                       		bne.s	locret_DF14
0000E9DE 117C 0001 0032             		move.b	#1,$32(a0)
0000E9E4 6100 FBB6                  		bsr.w	SingleObjLoad
0000E9E8 6600                       		bne.s	locret_DF14
0000E9EA 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E9EE 3368 0008 0008             		move.w	8(a0),8(a1)
0000E9F4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E9FA 5169 000C                  		subq.w	#8,$C(a1)
0000E9FE 337C 0200 0010             		move.w	#$200,$10(a1)
0000EA04 303C 0014                  		move.w	#$14,d0
0000EA08 0828 0000 0022             		btst	#0,$22(a0)
0000EA0E 6600                       		bne.s	loc_DF04
0000EA10 4440                       		neg.w	d0
0000EA12 4469 0010                  		neg.w	$10(a1)
0000EA16                            
0000EA16                            loc_DF04:
0000EA16 D169 0008                  		add.w	d0,8(a1)
0000EA1A 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000EA20 137C 0001 0028             		move.b	#1,$28(a1)
0000EA26                            
0000EA26                            locret_DF14:
0000EA26 4E75                       		rts	
0000EA28                            ; ===========================================================================
0000EA28                            
0000EA28                            Obj42_Delete:				; XREF: Obj42_Index
0000EA28 6000 F718                  		bra.w	DeleteObject
0000EA2C                            ; ===========================================================================
0000EA2C                            Ani_obj42:
0000EA2C                            	include "_anim\obj42.asm"
0000EA2C                            ; ---------------------------------------------------------------------------
0000EA2C                            ; Animation script - Newtron enemy
0000EA2C                            ; ---------------------------------------------------------------------------
0000EA2C 0000                       		dc.w byte_DF24-Ani_obj42
0000EA2E 0000                       		dc.w byte_DF28-Ani_obj42
0000EA30 0000                       		dc.w byte_DF30-Ani_obj42
0000EA32 0000                       		dc.w byte_DF34-Ani_obj42
0000EA34 0000                       		dc.w byte_DF38-Ani_obj42
0000EA36 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000EA3A 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000EA42 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000EA46 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000EA4A 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000EA54                            		even
0000EA54                            		even
0000EA54                            
0000EA54                            ; ---------------------------------------------------------------------------
0000EA54                            ; Sprite mappings - Newtron enemy (GHZ)
0000EA54                            ; ---------------------------------------------------------------------------
0000EA54                            Map_obj42:
0000EA54                            	include "_maps\obj42.asm"
0000EA54                            ; ---------------------------------------------------------------------------
0000EA54                            ; Sprite mappings - Newtron enemy (GHZ)
0000EA54                            ; ---------------------------------------------------------------------------
0000EA54 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000EA58 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000EA5C 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000EA60 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000EA64 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000EA68 0000                       		dc.w byte_DFF8-Map_obj42
0000EA6A 03                         byte_DF58:	dc.b 3
0000EA6B EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000EA70 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000EA75 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000EA7A 03                         byte_DF68:	dc.b 3
0000EA7B EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000EA80 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000EA85 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000EA8A 03                         byte_DF78:	dc.b 3
0000EA8B EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000EA90 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000EA95 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000EA9A 04                         byte_DF88:	dc.b 4
0000EA9B EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000EAA0 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000EAA5 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000EAAA 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000EAAF 03                         byte_DF9D:	dc.b 3
0000EAB0 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000EAB5 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000EABA 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000EABF 02                         byte_DFAD:	dc.b 2
0000EAC0 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EAC5 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EACA 03                         byte_DFB8:	dc.b 3
0000EACB F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EAD0 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EAD5 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000EADA 03                         byte_DFC8:	dc.b 3
0000EADB F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EAE0 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EAE5 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000EAEA 03                         byte_DFD8:	dc.b 3
0000EAEB F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EAF0 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EAF5 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000EAFA 03                         byte_DFE8:	dc.b 3
0000EAFB F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EB00 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EB05 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000EB0A 00                         byte_DFF8:	dc.b 0
0000EB0C 00                         		even
0000EB0C 00                         		even
0000EB0C                            
0000EB0C                            ; ===========================================================================
0000EB0C                            ; ---------------------------------------------------------------------------
0000EB0C                            ; Object 43 - Roller enemy (SYZ)
0000EB0C                            ; ---------------------------------------------------------------------------
0000EB0C                            
0000EB0C                            Obj43:					; XREF: Obj_Index
0000EB0C 7000                       		moveq	#0,d0
0000EB0E 1028 0024                  		move.b	$24(a0),d0
0000EB12 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000EB16 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000EB1A                            ; ===========================================================================
0000EB1A 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000EB1C 0000                       		dc.w Obj43_Action-Obj43_Index
0000EB1E                            ; ===========================================================================
0000EB1E                            
0000EB1E                            Obj43_Main:				; XREF: Obj43_Index
0000EB1E 117C 000E 0016             		move.b	#$E,$16(a0)
0000EB24 117C 0008 0017             		move.b	#8,$17(a0)
0000EB2A 6100 F588                  		bsr.w	ObjectFall
0000EB2E 6100 0000                  		bsr.w	ObjHitFloor
0000EB32 4A41                       		tst.w	d1
0000EB34 6A00                       		bpl.s	locret_E052
0000EB36 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000EB3A 317C 0000 0012             		move.w	#0,$12(a0)
0000EB40 5428 0024                  		addq.b	#2,$24(a0)
0000EB44 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000EB4C 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000EB52 117C 0004 0001             		move.b	#4,1(a0)
0000EB58 117C 0004 0018             		move.b	#4,$18(a0)
0000EB5E 117C 0010 0019             		move.b	#$10,$19(a0)
0000EB64                            
0000EB64                            locret_E052:
0000EB64 4E75                       		rts	
0000EB66                            ; ===========================================================================
0000EB66                            
0000EB66                            Obj43_Action:				; XREF: Obj43_Index
0000EB66 7000                       		moveq	#0,d0
0000EB68 1028 0025                  		move.b	$25(a0),d0
0000EB6C 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000EB70 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000EB74 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000EB7A 6100 C69C                  		bsr.w	AnimateSprite
0000EB7E 3028 0008                  		move.w	8(a0),d0
0000EB82 0240 FF80                  		andi.w	#$FF80,d0
0000EB86 3238 F700                  		move.w	($FFFFF700).w,d1
0000EB8A 0441 0080                  		subi.w	#$80,d1
0000EB8E 0241 FF80                  		andi.w	#$FF80,d1
0000EB92 9041                       		sub.w	d1,d0
0000EB94 0C40 0280                  		cmpi.w	#$280,d0
0000EB98 6E00 0000                  		bgt.w	Obj43_ChkGone
0000EB9C 6000 F568                  		bra.w	DisplaySprite
0000EBA0                            ; ===========================================================================
0000EBA0                            
0000EBA0                            Obj43_ChkGone:				; XREF: Obj43_Action
0000EBA0 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EBA4 7000                       		moveq	#0,d0
0000EBA6 1028 0023                  		move.b	$23(a0),d0
0000EBAA 6700                       		beq.s	Obj43_Delete
0000EBAC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000EBB2                            
0000EBB2                            Obj43_Delete:
0000EBB2 6000 F58E                  		bra.w	DeleteObject
0000EBB6                            ; ===========================================================================
0000EBB6 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000EBB8 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000EBBA 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000EBBC 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000EBBE                            ; ===========================================================================
0000EBBE                            
0000EBBE                            Obj43_RollChk:				; XREF: Obj43_Index2
0000EBBE 3038 D008                  		move.w	($FFFFD008).w,d0
0000EBC2 0440 0100                  		subi.w	#$100,d0
0000EBC6 6500                       		bcs.s	loc_E0D2
0000EBC8 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000EBCC 6500                       		bcs.s	loc_E0D2
0000EBCE 5828 0025                  		addq.b	#4,$25(a0)
0000EBD2 117C 0002 001C             		move.b	#2,$1C(a0)
0000EBD8 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000EBDE 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000EBE4                            
0000EBE4                            loc_E0D2:
0000EBE4 588F                       		addq.l	#4,sp
0000EBE6 4E75                       		rts	
0000EBE8                            ; ===========================================================================
0000EBE8                            
0000EBE8                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000EBE8 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000EBEE 6700                       		beq.s	loc_E0F8
0000EBF0 5368 0030                  		subq.w	#1,$30(a0)
0000EBF4 6A00                       		bpl.s	locret_E0F6
0000EBF6 117C 0001 001C             		move.b	#1,$1C(a0)
0000EBFC 317C 0700 0010             		move.w	#$700,$10(a0)
0000EC02 117C 008E 0020             		move.b	#$8E,$20(a0)
0000EC08                            
0000EC08                            locret_E0F6:
0000EC08 4E75                       		rts	
0000EC0A                            ; ===========================================================================
0000EC0A                            
0000EC0A                            loc_E0F8:
0000EC0A 5428 0025                  		addq.b	#2,$25(a0)
0000EC0E 4E75                       		rts	
0000EC10                            ; ===========================================================================
0000EC10                            
0000EC10                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000EC10 6100 0000                  		bsr.w	Obj43_Stop
0000EC14 6100 F4CA                  		bsr.w	SpeedToPos
0000EC18 6100 0000                  		bsr.w	ObjHitFloor
0000EC1C 0C41 FFF8                  		cmpi.w	#-8,d1
0000EC20 6D00                       		blt.s	Obj43_Jump
0000EC22 0C41 000C                  		cmpi.w	#$C,d1
0000EC26 6C00                       		bge.s	Obj43_Jump
0000EC28 D368 000C                  		add.w	d1,$C(a0)
0000EC2C 4E75                       		rts	
0000EC2E                            ; ===========================================================================
0000EC2E                            
0000EC2E                            Obj43_Jump:
0000EC2E 5428 0025                  		addq.b	#2,$25(a0)
0000EC32 08E8 0000 0032             		bset	#0,$32(a0)
0000EC38 6700                       		beq.s	locret_E12E
0000EC3A 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000EC40                            
0000EC40                            locret_E12E:
0000EC40 4E75                       		rts	
0000EC42                            ; ===========================================================================
0000EC42                            
0000EC42                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000EC42 6100 F470                  		bsr.w	ObjectFall
0000EC46 4A68 0012                  		tst.w	$12(a0)
0000EC4A 6B00                       		bmi.s	locret_E150
0000EC4C 6100 0000                  		bsr.w	ObjHitFloor
0000EC50 4A41                       		tst.w	d1
0000EC52 6A00                       		bpl.s	locret_E150
0000EC54 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000EC58 5528 0025                  		subq.b	#2,$25(a0)
0000EC5C 317C 0000 0012             		move.w	#0,$12(a0)
0000EC62                            
0000EC62                            locret_E150:
0000EC62 4E75                       		rts	
0000EC64                            
0000EC64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EC64                            
0000EC64                            
0000EC64                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000EC64 4A28 0032                  		tst.b	$32(a0)
0000EC68 6B00                       		bmi.s	locret_E188
0000EC6A 3038 D008                  		move.w	($FFFFD008).w,d0
0000EC6E 0440 0030                  		subi.w	#$30,d0
0000EC72 9068 0008                  		sub.w	8(a0),d0
0000EC76 6400                       		bcc.s	locret_E188
0000EC78 117C 0000 001C             		move.b	#0,$1C(a0)
0000EC7E 117C 000E 0020             		move.b	#$E,$20(a0)
0000EC84 4268 0010                  		clr.w	$10(a0)
0000EC88 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000EC8E 117C 0002 0025             		move.b	#2,$25(a0)
0000EC94 08E8 0007 0032             		bset	#7,$32(a0)
0000EC9A                            
0000EC9A                            locret_E188:
0000EC9A 4E75                       		rts	
0000EC9C                            ; End of function Obj43_Stop
0000EC9C                            
0000EC9C                            ; ===========================================================================
0000EC9C                            Ani_obj43:
0000EC9C                            	include "_anim\obj43.asm"
0000EC9C                            ; ---------------------------------------------------------------------------
0000EC9C                            ; Animation script - Roller enemy
0000EC9C                            ; ---------------------------------------------------------------------------
0000EC9C 0000                       		dc.w byte_E190-Ani_obj43
0000EC9E 0000                       		dc.w byte_E196-Ani_obj43
0000ECA0 0000                       		dc.w byte_E19C-Ani_obj43
0000ECA2 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000ECA8 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000ECAE 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000ECB4 00                         		even
0000ECB4 00                         		even
0000ECB4                            
0000ECB4                            ; ---------------------------------------------------------------------------
0000ECB4                            ; Sprite mappings - Roller enemy (SYZ)
0000ECB4                            ; ---------------------------------------------------------------------------
0000ECB4                            Map_obj43:
0000ECB4                            	include "_maps\obj43.asm"
0000ECB4                            ; ---------------------------------------------------------------------------
0000ECB4                            ; Sprite mappings - Roller enemy (SYZ)
0000ECB4                            ; ---------------------------------------------------------------------------
0000ECB4 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0000ECB8 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0000ECBC 0000                       		dc.w byte_E1CE-Map_obj43
0000ECBE 02                         byte_E1AC:	dc.b 2
0000ECBF DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0000ECC4 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000ECC9 02                         byte_E1B7:	dc.b 2
0000ECCA E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0000ECCF FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000ECD4 01                         byte_E1C2:	dc.b 1
0000ECD5 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0000ECDA 01                         byte_E1C8:	dc.b 1
0000ECDB F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0000ECE0 01                         byte_E1CE:	dc.b 1
0000ECE1 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000ECE6                            		even
0000ECE6                            		even
0000ECE6                            
0000ECE6                            ; ===========================================================================
0000ECE6                            ; ---------------------------------------------------------------------------
0000ECE6                            ; Object 44 - walls (GHZ)
0000ECE6                            ; ---------------------------------------------------------------------------
0000ECE6                            
0000ECE6                            Obj44:					; XREF: Obj_Index
0000ECE6 7000                       		moveq	#0,d0
0000ECE8 1028 0024                  		move.b	$24(a0),d0
0000ECEC 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000ECF0 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000ECF4                            ; ===========================================================================
0000ECF4 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000ECF6 0000                       		dc.w Obj44_Solid-Obj44_Index
0000ECF8 0000                       		dc.w Obj44_Display-Obj44_Index
0000ECFA                            ; ===========================================================================
0000ECFA                            
0000ECFA                            Obj44_Main:				; XREF: Obj44_Index
0000ECFA 5428 0024                  		addq.b	#2,$24(a0)
0000ECFE 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000ED06 317C 434C 0002             		move.w	#$434C,2(a0)
0000ED0C 0028 0004 0001             		ori.b	#4,1(a0)
0000ED12 117C 0008 0019             		move.b	#8,$19(a0)
0000ED18 117C 0006 0018             		move.b	#6,$18(a0)
0000ED1E 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000ED24 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000ED2A 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000ED2C 5428 0024                  		addq.b	#2,$24(a0)
0000ED30 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000ED32                            ; ===========================================================================
0000ED32                            
0000ED32                            Obj44_Solid:				; XREF: Obj44_Index
0000ED32 323C 0013                  		move.w	#$13,d1
0000ED36 343C 0028                  		move.w	#$28,d2
0000ED3A 6100 A7C6                  		bsr.w	Obj44_SolidWall
0000ED3E                            
0000ED3E                            Obj44_Display:				; XREF: Obj44_Index
0000ED3E 6100 F3C6                  		bsr.w	DisplaySprite
0000ED42 3028 0008                  		move.w	8(a0),d0
0000ED46 0240 FF80                  		andi.w	#$FF80,d0
0000ED4A 3238 F700                  		move.w	($FFFFF700).w,d1
0000ED4E 0441 0080                  		subi.w	#$80,d1
0000ED52 0241 FF80                  		andi.w	#$FF80,d1
0000ED56 9041                       		sub.w	d1,d0
0000ED58 0C40 0280                  		cmpi.w	#$280,d0
0000ED5C 6200 F3E4                  		bhi.w	DeleteObject
0000ED60 4E75                       		rts	
0000ED62                            ; ===========================================================================
0000ED62                            ; ---------------------------------------------------------------------------
0000ED62                            ; Sprite mappings - walls (GHZ)
0000ED62                            ; ---------------------------------------------------------------------------
0000ED62                            Map_obj44:
0000ED62                            	include "_maps\obj44.asm"
0000ED62                            ; ---------------------------------------------------------------------------
0000ED62                            ; Sprite mappings - walls (GHZ)
0000ED62                            ; ---------------------------------------------------------------------------
0000ED62 0000                       		dc.w byte_E256-Map_obj44
0000ED64 0000                       		dc.w byte_E26B-Map_obj44
0000ED66 0000                       		dc.w byte_E280-Map_obj44
0000ED68 04                         byte_E256:	dc.b 4
0000ED69 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000ED6E F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000ED73 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000ED78 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000ED7D 04                         byte_E26B:	dc.b 4
0000ED7E E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000ED83 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000ED88 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000ED8D 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000ED92 04                         byte_E280:	dc.b 4
0000ED93 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000ED98 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000ED9D 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000EDA2 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000EDA8 00                         		even
0000EDA8 00                         		even
0000EDA8                            
0000EDA8                            ; ===========================================================================
0000EDA8                            ; ---------------------------------------------------------------------------
0000EDA8                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000EDA8                            ; ---------------------------------------------------------------------------
0000EDA8                            
0000EDA8                            Obj13:					; XREF: Obj_Index
0000EDA8 7000                       		moveq	#0,d0
0000EDAA 1028 0024                  		move.b	$24(a0),d0
0000EDAE 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000EDB2 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000EDB6 6000 0000                  		bra.w	Obj14_ChkDel
0000EDBA                            ; ===========================================================================
0000EDBA 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000EDBC 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000EDBE                            ; ---------------------------------------------------------------------------
0000EDBE                            ;
0000EDBE                            ; Lava ball production rates
0000EDBE                            ;
0000EDBE 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000EDC4                            ; ===========================================================================
0000EDC4                            
0000EDC4                            Obj13_Main:				; XREF: Obj13_Index
0000EDC4 5428 0024                  		addq.b	#2,$24(a0)
0000EDC8 1028 0028                  		move.b	$28(a0),d0
0000EDCC E848                       		lsr.w	#4,d0
0000EDCE 0240 000F                  		andi.w	#$F,d0
0000EDD2 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000EDD8 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000EDDE 0228 000F 0028             		andi.b	#$F,$28(a0)
0000EDE4                            
0000EDE4                            Obj13_MakeLava:				; XREF: Obj13_Index
0000EDE4 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000EDE8 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000EDEA 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000EDF0 6100 F590                  		bsr.w	ChkObjOnScreen
0000EDF4 6600                       		bne.s	locret_E302
0000EDF6 6100 F7A4                  		bsr.w	SingleObjLoad
0000EDFA 6600                       		bne.s	locret_E302
0000EDFC 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000EE00 3368 0008 0008             		move.w	8(a0),8(a1)
0000EE06 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EE0C 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EE12                            
0000EE12                            locret_E302:
0000EE12 4E75                       		rts	
0000EE14                            ; ===========================================================================
0000EE14                            ; ---------------------------------------------------------------------------
0000EE14                            ; Object 14 - lava balls (MZ, SLZ)
0000EE14                            ; ---------------------------------------------------------------------------
0000EE14                            
0000EE14                            Obj14:					; XREF: Obj_Index
0000EE14 7000                       		moveq	#0,d0
0000EE16 1028 0024                  		move.b	$24(a0),d0
0000EE1A 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000EE1E 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000EE22 6000 F2E2                  		bra.w	DisplaySprite
0000EE26                            ; ===========================================================================
0000EE26 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000EE28 0000                       		dc.w Obj14_Action-Obj14_Index
0000EE2A 0000                       		dc.w Obj14_Delete-Obj14_Index
0000EE2C                            
0000EE2C FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000EE36 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000EE3E                            ; ===========================================================================
0000EE3E                            
0000EE3E                            Obj14_Main:				; XREF: Obj14_Index
0000EE3E 5428 0024                  		addq.b	#2,$24(a0)
0000EE42 117C 0008 0016             		move.b	#8,$16(a0)
0000EE48 117C 0008 0017             		move.b	#8,$17(a0)
0000EE4E 217C 0000 BE70 0004        		move.l	#Map_obj14,4(a0)
0000EE56 317C 0345 0002             		move.w	#$345,2(a0)
0000EE5C 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000EE62 6600                       		bne.s	loc_E35A
0000EE64 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000EE6A                            
0000EE6A                            loc_E35A:
0000EE6A 117C 0004 0001             		move.b	#4,1(a0)
0000EE70 117C 0003 0018             		move.b	#3,$18(a0)
0000EE76 117C 008B 0020             		move.b	#$8B,$20(a0)
0000EE7C 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EE82 4A28 0029                  		tst.b	$29(a0)
0000EE86 6700                       		beq.s	Obj14_SetSpeed
0000EE88 5428 0018                  		addq.b	#2,$18(a0)
0000EE8C                            
0000EE8C                            Obj14_SetSpeed:
0000EE8C 7000                       		moveq	#0,d0
0000EE8E 1028 0028                  		move.b	$28(a0),d0
0000EE92 D040                       		add.w	d0,d0
0000EE94 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000EE9A 117C 0008 0019             		move.b	#8,$19(a0)
0000EEA0 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000EEA6 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000EEA8 117C 0010 0019             		move.b	#$10,$19(a0)
0000EEAE 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000EEB4 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000EEBA 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000EEC0                            
0000EEC0                            Obj14_PlaySnd:
0000EEC0 303C 00AE                  		move.w	#$AE,d0
0000EEC4 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000EECA                            
0000EECA                            Obj14_Action:				; XREF: Obj14_Index
0000EECA 7000                       		moveq	#0,d0
0000EECC 1028 0028                  		move.b	$28(a0),d0
0000EED0 D040                       		add.w	d0,d0
0000EED2 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000EED6 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000EEDA 6100 F204                  		bsr.w	SpeedToPos
0000EEDE 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000EEE4 6100 C332                  		bsr.w	AnimateSprite
0000EEE8                            
0000EEE8                            Obj14_ChkDel:				; XREF: Obj13
0000EEE8 3028 0008                  		move.w	8(a0),d0
0000EEEC 0240 FF80                  		andi.w	#$FF80,d0
0000EEF0 3238 F700                  		move.w	($FFFFF700).w,d1
0000EEF4 0441 0080                  		subi.w	#$80,d1
0000EEF8 0241 FF80                  		andi.w	#$FF80,d1
0000EEFC 9041                       		sub.w	d1,d0
0000EEFE 0C40 0280                  		cmpi.w	#$280,d0
0000EF02 6200 F23E                  		bhi.w	DeleteObject
0000EF06 4E75                       		rts	
0000EF08                            ; ===========================================================================
0000EF08 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EF0C 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EF10 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000EF14 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000EF18 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000EF1A                            ; ===========================================================================
0000EF1A                            ; lavaball types 00-03 fly up and fall back down
0000EF1A                            
0000EF1A                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000EF1A 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000EF20 3028 0030                  		move.w	$30(a0),d0
0000EF24 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000EF28 6400                       		bcc.s	loc_E41E	; if not, branch
0000EF2A 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000EF2E                            
0000EF2E                            loc_E41E:
0000EF2E 08A8 0001 0022             		bclr	#1,$22(a0)
0000EF34 4A68 0012                  		tst.w	$12(a0)
0000EF38 6A00                       		bpl.s	locret_E430
0000EF3A 08E8 0001 0022             		bset	#1,$22(a0)
0000EF40                            
0000EF40                            locret_E430:
0000EF40 4E75                       		rts	
0000EF42                            ; ===========================================================================
0000EF42                            ; lavaball type	04 flies up until it hits the ceiling
0000EF42                            
0000EF42                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000EF42 08E8 0001 0022             		bset	#1,$22(a0)
0000EF48 6100 0000                  		bsr.w	ObjHitCeiling
0000EF4C 4A41                       		tst.w	d1
0000EF4E 6A00                       		bpl.s	locret_E452
0000EF50 117C 0008 0028             		move.b	#8,$28(a0)
0000EF56 117C 0001 001C             		move.b	#1,$1C(a0)
0000EF5C 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000EF62                            
0000EF62                            locret_E452:
0000EF62 4E75                       		rts	
0000EF64                            ; ===========================================================================
0000EF64                            ; lavaball type	05 falls down until it hits the	floor
0000EF64                            
0000EF64                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000EF64 08A8 0001 0022             		bclr	#1,$22(a0)
0000EF6A 6100 0000                  		bsr.w	ObjHitFloor
0000EF6E 4A41                       		tst.w	d1
0000EF70 6A00                       		bpl.s	locret_E474
0000EF72 117C 0008 0028             		move.b	#8,$28(a0)
0000EF78 117C 0001 001C             		move.b	#1,$1C(a0)
0000EF7E 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000EF84                            
0000EF84                            locret_E474:
0000EF84 4E75                       		rts	
0000EF86                            ; ===========================================================================
0000EF86                            ; lavaball types 06-07 move sideways
0000EF86                            
0000EF86                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000EF86 08E8 0000 0022             		bset	#0,$22(a0)
0000EF8C 76F8                       		moveq	#-8,d3
0000EF8E 6100 0000                  		bsr.w	ObjHitWallLeft
0000EF92 4A41                       		tst.w	d1
0000EF94 6A00                       		bpl.s	locret_E498
0000EF96 117C 0008 0028             		move.b	#8,$28(a0)
0000EF9C 117C 0003 001C             		move.b	#3,$1C(a0)
0000EFA2 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EFA8                            
0000EFA8                            locret_E498:
0000EFA8 4E75                       		rts	
0000EFAA                            ; ===========================================================================
0000EFAA                            
0000EFAA                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000EFAA 08A8 0000 0022             		bclr	#0,$22(a0)
0000EFB0 7608                       		moveq	#8,d3
0000EFB2 6100 0000                  		bsr.w	ObjHitWallRight
0000EFB6 4A41                       		tst.w	d1
0000EFB8 6A00                       		bpl.s	locret_E4BC
0000EFBA 117C 0008 0028             		move.b	#8,$28(a0)
0000EFC0 117C 0003 001C             		move.b	#3,$1C(a0)
0000EFC6 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EFCC                            
0000EFCC                            locret_E4BC:
0000EFCC 4E75                       		rts	
0000EFCE                            ; ===========================================================================
0000EFCE                            
0000EFCE                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000EFCE 4E75                       		rts	
0000EFD0                            ; ===========================================================================
0000EFD0                            
0000EFD0                            Obj14_Delete:				; XREF: Obj14_Index
0000EFD0 6000 F170                  		bra.w	DeleteObject
0000EFD4                            ; ===========================================================================
0000EFD4                            Ani_obj14:
0000EFD4                            	include "_anim\obj14.asm"
0000EFD4                            ; ---------------------------------------------------------------------------
0000EFD4                            ; Animation script - lava balls
0000EFD4                            ; ---------------------------------------------------------------------------
0000EFD4 0000                       		dc.w byte_E4CC-Ani_obj14
0000EFD6 0000                       		dc.w byte_E4D2-Ani_obj14
0000EFD8 0000                       		dc.w byte_E4D6-Ani_obj14
0000EFDA 0000                       		dc.w byte_E4DC-Ani_obj14
0000EFDC 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000EFE2 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000EFE6 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000EFEC 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000EFF0                            		even
0000EFF0                            		even
0000EFF0                            
0000EFF0                            ; ===========================================================================
0000EFF0                            ; ---------------------------------------------------------------------------
0000EFF0                            ; Object 6D - flame thrower (SBZ)
0000EFF0                            ; ---------------------------------------------------------------------------
0000EFF0                            
0000EFF0                            Obj6D:					; XREF: Obj_Index
0000EFF0 7000                       		moveq	#0,d0
0000EFF2 1028 0024                  		move.b	$24(a0),d0
0000EFF6 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000EFFA 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000EFFE                            ; ===========================================================================
0000EFFE 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000F000 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000F002                            ; ===========================================================================
0000F002                            
0000F002                            Obj6D_Main:				; XREF: Obj6D_Index
0000F002 5428 0024                  		addq.b	#2,$24(a0)
0000F006 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000F00E 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000F014 0028 0004 0001             		ori.b	#4,1(a0)
0000F01A 117C 0001 0018             		move.b	#1,$18(a0)
0000F020 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F026 117C 000C 0019             		move.b	#$C,$19(a0)
0000F02C 1028 0028                  		move.b	$28(a0),d0
0000F030 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000F034 D040                       		add.w	d0,d0		; multiply by 2
0000F036 3140 0030                  		move.w	d0,$30(a0)
0000F03A 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000F03E 1028 0028                  		move.b	$28(a0),d0
0000F042 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000F046 EB48                       		lsl.w	#5,d0		; multiply by $20
0000F048 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000F04C 117C 000A 0036             		move.b	#$A,$36(a0)
0000F052 0828 0001 0022             		btst	#1,$22(a0)
0000F058 6700                       		beq.s	Obj6D_Action
0000F05A 117C 0002 001C             		move.b	#2,$1C(a0)
0000F060 117C 0015 0036             		move.b	#$15,$36(a0)
0000F066                            
0000F066                            Obj6D_Action:				; XREF: Obj6D_Index
0000F066 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000F06A 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000F06C 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000F072 0868 0000 001C             		bchg	#0,$1C(a0)
0000F078 6700                       		beq.s	loc_E57A
0000F07A 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000F080 303C 00B3                  		move.w	#$B3,d0
0000F084 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play flame sound
0000F08A                            
0000F08A                            loc_E57A:
0000F08A 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000F090 6100 C186                  		bsr.w	AnimateSprite
0000F094 117C 0000 0020             		move.b	#0,$20(a0)
0000F09A 1028 0036                  		move.b	$36(a0),d0
0000F09E B028 001A                  		cmp.b	$1A(a0),d0
0000F0A2 6600                       		bne.s	Obj6D_ChkDel
0000F0A4 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000F0AA                            
0000F0AA                            Obj6D_ChkDel:
0000F0AA 3028 0008                  		move.w	8(a0),d0
0000F0AE 0240 FF80                  		andi.w	#$FF80,d0
0000F0B2 3238 F700                  		move.w	($FFFFF700).w,d1
0000F0B6 0441 0080                  		subi.w	#$80,d1
0000F0BA 0241 FF80                  		andi.w	#$FF80,d1
0000F0BE 9041                       		sub.w	d1,d0
0000F0C0 0C40 0280                  		cmpi.w	#$280,d0
0000F0C4 6200 F07C                  		bhi.w	DeleteObject
0000F0C8 6000 F03C                  		bra.w	DisplaySprite
0000F0CC                            ; ===========================================================================
0000F0CC                            Ani_obj6D:
0000F0CC                            	include "_anim\obj6D.asm"
0000F0CC                            ; ---------------------------------------------------------------------------
0000F0CC                            ; Animation script - flamethrower (SBZ)
0000F0CC                            ; ---------------------------------------------------------------------------
0000F0CC 0000                       		dc.w byte_E5C4-Ani_obj6D
0000F0CE 0000                       		dc.w byte_E5D2-Ani_obj6D
0000F0D0 0000                       		dc.w byte_E5DC-Ani_obj6D
0000F0D2 0000                       		dc.w byte_E5EA-Ani_obj6D
0000F0D4 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000F0E2 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000F0EC 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000F0FA 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000F104                            		even
0000F104                            		even
0000F104                            
0000F104                            ; ---------------------------------------------------------------------------
0000F104                            ; Sprite mappings - flame thrower (SBZ)
0000F104                            ; ---------------------------------------------------------------------------
0000F104                            Map_obj6D:
0000F104                            	include "_maps\obj6D.asm"
0000F104                            ; ---------------------------------------------------------------------------
0000F104                            ; Sprite mappings - flame thrower (SBZ)
0000F104                            ; ---------------------------------------------------------------------------
0000F104 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000F108 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000F10C 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000F110 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000F114 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000F118 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000F11C 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000F120 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000F124 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000F128 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000F12C 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000F130 01                         byte_E620:	dc.b 1
0000F131 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F136 02                         byte_E626:	dc.b 2
0000F137 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F13C 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F141 02                         byte_E631:	dc.b 2
0000F142 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F147 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F14C 03                         byte_E63C:	dc.b 3
0000F14D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F152 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F157 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F15C 03                         byte_E64C:	dc.b 3
0000F15D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F162 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F167 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F16C 04                         byte_E65C:	dc.b 4
0000F16D 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F172 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F177 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F17C 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F181 04                         byte_E671:	dc.b 4
0000F182 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F187 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F18C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F191 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F196 05                         byte_E686:	dc.b 5
0000F197 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F19C 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F1A1 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F1A6 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F1AB 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F1B0 05                         byte_E6A0:	dc.b 5
0000F1B1 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F1B6 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F1BB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F1C0 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F1C5 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F1CA 06                         byte_E6BA:	dc.b 6
0000F1CB E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F1D0 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F1D5 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F1DA 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F1DF 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F1E4 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F1E9 06                         byte_E6D9:	dc.b 6
0000F1EA E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F1EF F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F1F4 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F1F9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F1FE 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F203 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F208 01                         byte_E6F8:	dc.b 1
0000F209 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F20E 02                         byte_E6FE:	dc.b 2
0000F20F 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F214 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F219 02                         byte_E709:	dc.b 2
0000F21A 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F21F 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F224 03                         byte_E714:	dc.b 3
0000F225 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F22A 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F22F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F234 03                         byte_E724:	dc.b 3
0000F235 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F23A 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F23F 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F244 04                         byte_E734:	dc.b 4
0000F245 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F24A 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F24F 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F254 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F259 04                         byte_E749:	dc.b 4
0000F25A 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F25F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F264 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F269 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F26E 05                         byte_E75E:	dc.b 5
0000F26F F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F274 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F279 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F27E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F283 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F288 05                         byte_E778:	dc.b 5
0000F289 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F28E 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F293 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F298 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F29D 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F2A2 06                         byte_E792:	dc.b 6
0000F2A3 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F2A8 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F2AD 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F2B2 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F2B7 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F2BC 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F2C1 06                         byte_E7B1:	dc.b 6
0000F2C2 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F2C7 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F2CC 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F2D1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F2D6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F2DB 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F2E0                            		even
0000F2E0                            		even
0000F2E0                            
0000F2E0                            ; ===========================================================================
0000F2E0                            ; ---------------------------------------------------------------------------
0000F2E0                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000F2E0                            ; ---------------------------------------------------------------------------
0000F2E0                            
0000F2E0                            Obj46:					; XREF: Obj_Index
0000F2E0 7000                       		moveq	#0,d0
0000F2E2 1028 0024                  		move.b	$24(a0),d0
0000F2E6 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000F2EA 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000F2EE                            ; ===========================================================================
0000F2EE 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000F2F0 0000                       		dc.w Obj46_Action-Obj46_Index
0000F2F2                            ; ===========================================================================
0000F2F2                            
0000F2F2                            Obj46_Main:				; XREF: Obj46_Index
0000F2F2 5428 0024                  		addq.b	#2,$24(a0)
0000F2F6 117C 000F 0016             		move.b	#$F,$16(a0)
0000F2FC 117C 000F 0017             		move.b	#$F,$17(a0)
0000F302 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000F30A 317C 4000 0002             		move.w	#$4000,2(a0)
0000F310 117C 0004 0001             		move.b	#4,1(a0)
0000F316 117C 0003 0018             		move.b	#3,$18(a0)
0000F31C 117C 0010 0019             		move.b	#$10,$19(a0)
0000F322 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F328 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000F32E                            
0000F32E                            Obj46_Action:				; XREF: Obj46_Index
0000F32E 4A28 0001                  		tst.b	1(a0)
0000F332 6A00                       		bpl.s	Obj46_ChkDel
0000F334 7000                       		moveq	#0,d0
0000F336 1028 0028                  		move.b	$28(a0),d0	; get object type
0000F33A 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000F33E D040                       		add.w	d0,d0
0000F340 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000F344 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000F348 323C 001B                  		move.w	#$1B,d1
0000F34C 343C 0010                  		move.w	#$10,d2
0000F350 363C 0011                  		move.w	#$11,d3
0000F354 3828 0008                  		move.w	8(a0),d4
0000F358 6100 0000                  		bsr.w	SolidObject
0000F35C                            
0000F35C                            Obj46_ChkDel:
0000F35C 6100 EDA8                  		bsr.w	DisplaySprite
0000F360 3028 0008                  		move.w	8(a0),d0
0000F364 0240 FF80                  		andi.w	#$FF80,d0
0000F368 3238 F700                  		move.w	($FFFFF700).w,d1
0000F36C 0441 0080                  		subi.w	#$80,d1
0000F370 0241 FF80                  		andi.w	#$FF80,d1
0000F374 9041                       		sub.w	d1,d0
0000F376 0C40 0280                  		cmpi.w	#$280,d0
0000F37A 6200 EDC6                  		bhi.w	DeleteObject
0000F37E 4E75                       		rts	
0000F380                            ; ===========================================================================
0000F380 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000F382 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000F384 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000F386 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000F388 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000F38A                            ; ===========================================================================
0000F38A                            
0000F38A                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000F38A 4E75                       		rts	
0000F38C                            ; ===========================================================================
0000F38C                            
0000F38C                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000F38C 3038 D008                  		move.w	($FFFFD008).w,d0
0000F390 9068 0008                  		sub.w	8(a0),d0
0000F394 6400                       		bcc.s	loc_E888
0000F396 4440                       		neg.w	d0
0000F398                            
0000F398                            loc_E888:
0000F398 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000F39C 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000F39E 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000F3A4                            
0000F3A4                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000F3A4 7000                       		moveq	#0,d0
0000F3A6 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000F3AA 0828 0003 0028             		btst	#3,$28(a0)
0000F3B0 6700                       		beq.s	loc_E8A8
0000F3B2 4440                       		neg.w	d0
0000F3B4 0640 0010                  		addi.w	#$10,d0
0000F3B8                            
0000F3B8                            loc_E8A8:
0000F3B8 3228 0030                  		move.w	$30(a0),d1
0000F3BC 9240                       		sub.w	d0,d1
0000F3BE 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000F3C2 4E75                       		rts	
0000F3C4                            ; ===========================================================================
0000F3C4                            
0000F3C4                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000F3C4 6100 ED1A                  		bsr.w	SpeedToPos
0000F3C8 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000F3CE 6100 0000                  		bsr.w	ObjHitFloor
0000F3D2 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000F3D4 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000F3D8 D368 000C                  		add.w	d1,$C(a0)
0000F3DC 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000F3E0 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F3E6 117C 0004 0028             		move.b	#4,$28(a0)
0000F3EC 3011                       		move.w	(a1),d0
0000F3EE 0240 03FF                  		andi.w	#$3FF,d0
0000F3F2 0C40 02E8                  		cmpi.w	#$2E8,d0
0000F3F6 6400                       		bcc.s	locret_E8EE
0000F3F8 117C 0000 0028             		move.b	#0,$28(a0)
0000F3FE                            
0000F3FE                            locret_E8EE:
0000F3FE 4E75                       		rts	
0000F400                            ; ===========================================================================
0000F400                            
0000F400                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000F400 7000                       		moveq	#0,d0
0000F402 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000F406 E648                       		lsr.w	#3,d0
0000F408 3228 0030                  		move.w	$30(a0),d1
0000F40C 9240                       		sub.w	d0,d1
0000F40E 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000F412 4E75                       		rts	
0000F414                            ; ===========================================================================
0000F414                            ; ---------------------------------------------------------------------------
0000F414                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F414                            ; ---------------------------------------------------------------------------
0000F414                            Map_obj46:
0000F414                            	include "_maps\obj46.asm"
0000F414                            ; ---------------------------------------------------------------------------
0000F414                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F414                            ; ---------------------------------------------------------------------------
0000F414 0000                       		dc.w byte_E906-Map_obj46
0000F416 01                         byte_E906:	dc.b 1
0000F417 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000F41C                            		even
0000F41C                            		even
0000F41C                            
0000F41C                            ; ===========================================================================
0000F41C                            ; ---------------------------------------------------------------------------
0000F41C                            ; Object 12 - lamp (SYZ)
0000F41C                            ; ---------------------------------------------------------------------------
0000F41C                            
0000F41C                            Obj12:					; XREF: Obj_Index
0000F41C 7000                       		moveq	#0,d0
0000F41E 1028 0024                  		move.b	$24(a0),d0
0000F422 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000F426 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000F42A                            ; ===========================================================================
0000F42A 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000F42C 0000                       		dc.w Obj12_Animate-Obj12_Index
0000F42E                            ; ===========================================================================
0000F42E                            
0000F42E                            Obj12_Main:				; XREF: Obj12_Index
0000F42E 5428 0024                  		addq.b	#2,$24(a0)
0000F432 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000F43A 317C 0000 0002             		move.w	#0,2(a0)
0000F440 117C 0004 0001             		move.b	#4,1(a0)
0000F446 117C 0010 0019             		move.b	#$10,$19(a0)
0000F44C 117C 0006 0018             		move.b	#6,$18(a0)
0000F452                            
0000F452                            Obj12_Animate:				; XREF: Obj12_Index
0000F452 5328 001E                  		subq.b	#1,$1E(a0)
0000F456 6A00                       		bpl.s	Obj12_ChkDel
0000F458 117C 0007 001E             		move.b	#7,$1E(a0)
0000F45E 5228 001A                  		addq.b	#1,$1A(a0)
0000F462 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000F468 6500                       		bcs.s	Obj12_ChkDel
0000F46A 117C 0000 001A             		move.b	#0,$1A(a0)
0000F470                            
0000F470                            Obj12_ChkDel:
0000F470 3028 0008                  		move.w	8(a0),d0
0000F474 0240 FF80                  		andi.w	#$FF80,d0
0000F478 3238 F700                  		move.w	($FFFFF700).w,d1
0000F47C 0441 0080                  		subi.w	#$80,d1
0000F480 0241 FF80                  		andi.w	#$FF80,d1
0000F484 9041                       		sub.w	d1,d0
0000F486 0C40 0280                  		cmpi.w	#$280,d0
0000F48A 6200 ECB6                  		bhi.w	DeleteObject
0000F48E 6000 EC76                  		bra.w	DisplaySprite
0000F492                            ; ===========================================================================
0000F492                            ; ---------------------------------------------------------------------------
0000F492                            ; Sprite mappings - lamp (SYZ)
0000F492                            ; ---------------------------------------------------------------------------
0000F492                            Map_obj12:
0000F492                            	include "_maps\obj12.asm"
0000F492                            ; ---------------------------------------------------------------------------
0000F492                            ; Sprite mappings - lamp (SYZ)
0000F492                            ; ---------------------------------------------------------------------------
0000F492 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000F496 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000F49A 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000F49E 02                         byte_E98E:	dc.b 2
0000F49F F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000F4A4 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000F4A9 02                         byte_E999:	dc.b 2
0000F4AA F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000F4AF 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000F4B4 02                         byte_E9A4:	dc.b 2
0000F4B5 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000F4BA 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000F4BF 02                         byte_E9AF:	dc.b 2
0000F4C0 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000F4C5 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000F4CA 02                         byte_E9BA:	dc.b 2
0000F4CB F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000F4D0 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000F4D5 02                         byte_E9C5:	dc.b 2
0000F4D6 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000F4DB 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000F4E0                            		even
0000F4E0                            		even
0000F4E0                            
0000F4E0                            ; ===========================================================================
0000F4E0                            ; ---------------------------------------------------------------------------
0000F4E0                            ; Object 47 - pinball bumper (SYZ)
0000F4E0                            ; ---------------------------------------------------------------------------
0000F4E0                            
0000F4E0                            Obj47:					; XREF: Obj_Index
0000F4E0 7000                       		moveq	#0,d0
0000F4E2 1028 0024                  		move.b	$24(a0),d0
0000F4E6 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000F4EA 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000F4EE                            ; ===========================================================================
0000F4EE 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000F4F0 0000                       		dc.w Obj47_Hit-Obj47_Index
0000F4F2                            ; ===========================================================================
0000F4F2                            
0000F4F2                            Obj47_Main:				; XREF: Obj47_Index
0000F4F2 5428 0024                  		addq.b	#2,$24(a0)
0000F4F6 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000F4FE 317C 0380 0002             		move.w	#$380,2(a0)
0000F504 117C 0004 0001             		move.b	#4,1(a0)
0000F50A 117C 0010 0019             		move.b	#$10,$19(a0)
0000F510 117C 0001 0018             		move.b	#1,$18(a0)
0000F516 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000F51C                            
0000F51C                            Obj47_Hit:				; XREF: Obj47_Index
0000F51C 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000F520 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000F524 4228 0021                  		clr.b	$21(a0)
0000F528 43F8 D000                  		lea	($FFFFD000).w,a1
0000F52C 3228 0008                  		move.w	8(a0),d1
0000F530 3428 000C                  		move.w	$C(a0),d2
0000F534 9269 0008                  		sub.w	8(a1),d1
0000F538 9469 000C                  		sub.w	$C(a1),d2
0000F53C 4EB9 0000 36A2             		jsr	(CalcAngle).l
0000F542 4EB9 0000 33D4             		jsr	(CalcSine).l
0000F548 C3FC F900                  		muls.w	#-$700,d1
0000F54C E081                       		asr.l	#8,d1
0000F54E 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000F552 C1FC F900                  		muls.w	#-$700,d0
0000F556 E080                       		asr.l	#8,d0
0000F558 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000F55C 08E9 0001 0022             		bset	#1,$22(a1)
0000F562 08A9 0004 0022             		bclr	#4,$22(a1)
0000F568 08A9 0005 0022             		bclr	#5,$22(a1)
0000F56E 4229 003C                  		clr.b	$3C(a1)
0000F572 117C 0001 001C             		move.b	#1,$1C(a0)
0000F578 303C 00B4                  		move.w	#$B4,d0
0000F57C 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F582 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F586 7000                       		moveq	#0,d0
0000F588 1028 0023                  		move.b	$23(a0),d0
0000F58C 6700                       		beq.s	Obj47_Score
0000F58E 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F594 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F596 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F59A                            
0000F59A                            Obj47_Score:
0000F59A 7001                       		moveq	#1,d0
0000F59C 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F5A2 6100 EFF8                  		bsr.w	SingleObjLoad
0000F5A6 6600                       		bne.s	Obj47_Display
0000F5A8 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F5AC 3368 0008 0008             		move.w	8(a0),8(a1)
0000F5B2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F5B8 137C 0004 001A             		move.b	#4,$1A(a1)
0000F5BE                            
0000F5BE                            Obj47_Display:
0000F5BE 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F5C4 6100 BC52                  		bsr.w	AnimateSprite
0000F5C8 3028 0008                  		move.w	8(a0),d0
0000F5CC 0240 FF80                  		andi.w	#$FF80,d0
0000F5D0 3238 F700                  		move.w	($FFFFF700).w,d1
0000F5D4 0441 0080                  		subi.w	#$80,d1
0000F5D8 0241 FF80                  		andi.w	#$FF80,d1
0000F5DC 9041                       		sub.w	d1,d0
0000F5DE 0C40 0280                  		cmpi.w	#$280,d0
0000F5E2 6200                       		bhi.s	Obj47_ChkHit
0000F5E4 6000 EB20                  		bra.w	DisplaySprite
0000F5E8                            ; ===========================================================================
0000F5E8                            
0000F5E8                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F5E8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F5EC 7000                       		moveq	#0,d0
0000F5EE 1028 0023                  		move.b	$23(a0),d0
0000F5F2 6700                       		beq.s	Obj47_Delete
0000F5F4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F5FA                            
0000F5FA                            Obj47_Delete:
0000F5FA 6000 EB46                  		bra.w	DeleteObject
0000F5FE                            ; ===========================================================================
0000F5FE                            Ani_obj47:
0000F5FE                            	include "_anim\obj47.asm"
0000F5FE                            ; ---------------------------------------------------------------------------
0000F5FE                            ; Animation script - flamethrower (SBZ)
0000F5FE                            ; ---------------------------------------------------------------------------
0000F5FE 0000                       		dc.w byte_EAF4-Ani_obj47
0000F600 0000                       		dc.w byte_EAF8-Ani_obj47
0000F602 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F606 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F60E                            		even
0000F60E                            		even
0000F60E                            
0000F60E                            ; ---------------------------------------------------------------------------
0000F60E                            ; Sprite mappings - pinball bumper (SYZ)
0000F60E                            ; ---------------------------------------------------------------------------
0000F60E                            Map_obj47:
0000F60E                            	include "_maps\obj47.asm"
0000F60E                            ; ---------------------------------------------------------------------------
0000F60E                            ; Sprite mappings - pinball bumper (SYZ)
0000F60E                            ; ---------------------------------------------------------------------------
0000F60E 0000                       		dc.w byte_EB06-Map_obj47
0000F610 0000                       		dc.w byte_EB11-Map_obj47
0000F612 0000                       		dc.w byte_EB1C-Map_obj47
0000F614 02                         byte_EB06:	dc.b 2
0000F615 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F61A F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F61F 02                         byte_EB11:	dc.b 2
0000F620 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F625 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F62A 02                         byte_EB1C:	dc.b 2
0000F62B F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F630 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F636 00                         		even
0000F636 00                         		even
0000F636                            
0000F636                            ; ===========================================================================
0000F636                            ; ---------------------------------------------------------------------------
0000F636                            ; Object 0D - signpost at the end of a level
0000F636                            ; ---------------------------------------------------------------------------
0000F636                            
0000F636                            Obj0D:					; XREF: Obj_Index
0000F636 7000                       		moveq	#0,d0
0000F638 1028 0024                  		move.b	$24(a0),d0
0000F63C 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F640 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F644 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F64A 6100 BBCC                  		bsr.w	AnimateSprite
0000F64E 6100 EAB6                  		bsr.w	DisplaySprite
0000F652 3028 0008                  		move.w	8(a0),d0
0000F656 0240 FF80                  		andi.w	#$FF80,d0
0000F65A 3238 F700                  		move.w	($FFFFF700).w,d1
0000F65E 0441 0080                  		subi.w	#$80,d1
0000F662 0241 FF80                  		andi.w	#$FF80,d1
0000F666 9041                       		sub.w	d1,d0
0000F668 0C40 0280                  		cmpi.w	#$280,d0
0000F66C 6200 EAD4                  		bhi.w	DeleteObject
0000F670 4E75                       		rts	
0000F672                            ; ===========================================================================
0000F672 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F674 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F676 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F678 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F67A 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F67C                            ; ===========================================================================
0000F67C                            
0000F67C                            Obj0D_Main:				; XREF: Obj0D_Index
0000F67C 5428 0024                  		addq.b	#2,$24(a0)
0000F680 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F688 317C 0680 0002             		move.w	#$680,2(a0)
0000F68E 117C 0004 0001             		move.b	#4,1(a0)
0000F694 117C 0018 0019             		move.b	#$18,$19(a0)
0000F69A 117C 0004 0018             		move.b	#4,$18(a0)
0000F6A0                            
0000F6A0                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F6A0 3038 D008                  		move.w	($FFFFD008).w,d0
0000F6A4 9068 0008                  		sub.w	8(a0),d0
0000F6A8 6500                       		bcs.s	locret_EBBA
0000F6AA 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F6AE 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F6B0 303C 00CF                  		move.w	#$CF,d0
0000F6B4 4EB9 0000 1470             		jsr	(PlaySound).l	; play signpost	sound
0000F6BA 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F6BE 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F6C4 5428 0024                  		addq.b	#2,$24(a0)
0000F6C8                            
0000F6C8                            locret_EBBA:
0000F6C8 4E75                       		rts	
0000F6CA                            ; ===========================================================================
0000F6CA                            
0000F6CA                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F6CA 4238 FE19                  		clr.b (Super_Sonic_Flag).w ; Revert Sonic to Normal
0000F6CE 31FC 0600 F760             		move.w #$600,(Sonic_top_speed).w ; Revert speeds
0000F6D4 31FC 000C F762             		move.w #$C,(Sonic_acceleration).w ; ^^^
0000F6DA 31FC 0080 F764             		move.w #$80,(Sonic_deceleration).w ; ^^^
0000F6E0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F6E4 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F6E6 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F6EC 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F6F0 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F6F6 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F6F8 5428 0024                  		addq.b	#2,$24(a0)
0000F6FC                            
0000F6FC                            Obj0D_Sparkle:
0000F6FC 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F700 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F702 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F708 7000                       		moveq	#0,d0
0000F70A 1028 0034                  		move.b	$34(a0),d0
0000F70E 5428 0034                  		addq.b	#2,$34(a0)
0000F712 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F718 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F71C 6100 EE7E                  		bsr.w	SingleObjLoad
0000F720 6600                       		bne.s	locret_EC42
0000F722 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F726 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F72C 101A                       		move.b	(a2)+,d0
0000F72E 4880                       		ext.w	d0
0000F730 D068 0008                  		add.w	8(a0),d0
0000F734 3340 0008                  		move.w	d0,8(a1)
0000F738 101A                       		move.b	(a2)+,d0
0000F73A 4880                       		ext.w	d0
0000F73C D068 000C                  		add.w	$C(a0),d0
0000F740 3340 000C                  		move.w	d0,$C(a1)
0000F744 237C 0000 AA5A 0004        		move.l	#Map_obj25,4(a1)
0000F74C 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F752 137C 0004 0001             		move.b	#4,1(a1)
0000F758 137C 0002 0018             		move.b	#2,$18(a1)
0000F75E 137C 0008 0019             		move.b	#8,$19(a1)
0000F764                            
0000F764                            locret_EC42:
0000F764 4E75                       		rts	
0000F766                            ; ===========================================================================
0000F766 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F768 0808                       		dc.b	8,   8
0000F76A F000                       		dc.b -$10,   0
0000F76C 18F8                       		dc.b  $18,  -8
0000F76E 00F8                       		dc.b	0,  -8
0000F770 1000                       		dc.b  $10,   0
0000F772 E808                       		dc.b -$18,   8
0000F774 1810                       		dc.b  $18, $10
0000F776                            ; ===========================================================================
0000F776                            
0000F776                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F776 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F77A 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F77E 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F784 6600                       		bne.s	loc_EC70
0000F786 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F78C 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F792                            
0000F792                            loc_EC70:
0000F792 4A38 D000                  		tst.b	($FFFFD000).w
0000F796 6700                       		beq.s	loc_EC86
0000F798 3038 D008                  		move.w	($FFFFD008).w,d0
0000F79C 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F7A0 0641 0128                  		addi.w	#$128,d1
0000F7A4 B041                       		cmp.w	d1,d0
0000F7A6 6500                       		bcs.s	locret_ECEE
0000F7A8                            
0000F7A8                            loc_EC86:
0000F7A8 5428 0024                  		addq.b	#2,$24(a0)
0000F7AC                            
0000F7AC                            ; ---------------------------------------------------------------------------
0000F7AC                            ; Subroutine to	set up bonuses at the end of an	act
0000F7AC                            ; ---------------------------------------------------------------------------
0000F7AC                            
0000F7AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F7AC                            
0000F7AC                            
0000F7AC                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F7AC 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F7B0 6600                       		bne.s	locret_ECEE
0000F7B2 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F7B8 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F7BC 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F7C0 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F7C6 7010                       		moveq	#$10,d0
0000F7C8 4EB9 0000 171C             		jsr	(LoadPLC2).l	; load title card patterns
0000F7CE 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F7D4 7000                       		moveq	#0,d0
0000F7D6 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F7DA C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F7DE 7200                       		moveq	#0,d1
0000F7E0 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F7E4 D041                       		add.w	d1,d0		; add up your time
0000F7E6 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F7EA 7214                       		moveq	#$14,d1
0000F7EC B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F7EE 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F7F0 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F7F2                            
0000F7F2                            loc_ECD0:
0000F7F2 D040                       		add.w	d0,d0
0000F7F4 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F7FA 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F7FE C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F802 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F806 303C 008E                  		move.w	#$8E,d0
0000F80A 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F810                            
0000F810                            locret_ECEE:
0000F810 4E75                       		rts	
0000F812                            ; End of function GotThroughAct
0000F812                            
0000F812                            ; ===========================================================================
0000F812 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F826 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F83C                            ; ===========================================================================
0000F83C                            
0000F83C                            locret_ED1A:				; XREF: Obj0D_Index
0000F83C 4E75                       		rts	
0000F83E                            ; ===========================================================================
0000F83E                            Ani_obj0D:
0000F83E                            	include "_anim\obj0D.asm"
0000F83E                            ; ---------------------------------------------------------------------------
0000F83E                            ; Animation script - signpost
0000F83E                            ; ---------------------------------------------------------------------------
0000F83E 0000                       		dc.w byte_ED24-Ani_obj0D
0000F840 0000                       		dc.w byte_ED28-Ani_obj0D
0000F842 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F844 0000                       		dc.w byte_ED34-Ani_obj0D
0000F846 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F84A 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F850 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F856 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F85A 00                         		even
0000F85A 00                         		even
0000F85A                            
0000F85A                            ; ---------------------------------------------------------------------------
0000F85A                            ; Sprite mappings - signpost
0000F85A                            ; ---------------------------------------------------------------------------
0000F85A                            Map_obj0D:
0000F85A                            	include "_maps\obj0D.asm"
0000F85A                            ; ---------------------------------------------------------------------------
0000F85A                            ; Sprite mappings - signpost
0000F85A                            ; ---------------------------------------------------------------------------
0000F85A 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F85E 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F862 0000                       		dc.w byte_ED73-Map_obj0D
0000F864 03                         byte_ED42:	dc.b 3
0000F865 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F86A F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F86F 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F874 02                         byte_ED52:	dc.b 2
0000F875 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F87A 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F87F 02                         byte_ED5D:	dc.b 2
0000F880 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F885 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F88A 02                         byte_ED68:	dc.b 2
0000F88B F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F890 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F895 03                         byte_ED73:	dc.b 3
0000F896 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F89B F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F8A0 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F8A6 00                         		even
0000F8A6 00                         		even
0000F8A6                            
0000F8A6                            ; ===========================================================================
0000F8A6                            ; ---------------------------------------------------------------------------
0000F8A6                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F8A6                            ; ---------------------------------------------------------------------------
0000F8A6                            
0000F8A6                            Obj4C:					; XREF: Obj_Index
0000F8A6 7000                       		moveq	#0,d0
0000F8A8 1028 0024                  		move.b	$24(a0),d0
0000F8AC 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F8B0 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F8B4 6000 0000                  		bra.w	Obj4D_ChkDel
0000F8B8                            ; ===========================================================================
0000F8B8 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F8BA 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F8BC 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F8BE 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F8C0 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F8C2 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F8C4                            ; ===========================================================================
0000F8C4                            
0000F8C4                            Obj4C_Main:				; XREF: Obj4C_Index
0000F8C4 5428 0024                  		addq.b	#2,$24(a0)
0000F8C8 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F8D0 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F8D6 117C 0004 0001             		move.b	#4,1(a0)
0000F8DC 117C 0001 0018             		move.b	#1,$18(a0)
0000F8E2 117C 0038 0019             		move.b	#$38,$19(a0)
0000F8E8 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F8EE                            
0000F8EE                            loc_EDCC:				; XREF: Obj4C_Index
0000F8EE 5368 0032                  		subq.w	#1,$32(a0)
0000F8F2 6A00                       		bpl.s	locret_EDF0
0000F8F4 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F8FA 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F8FE 3228 000C                  		move.w	$C(a0),d1
0000F902 B041                       		cmp.w	d1,d0
0000F904 6400                       		bcc.s	locret_EDF0
0000F906 0441 0170                  		subi.w	#$170,d1
0000F90A B041                       		cmp.w	d1,d0
0000F90C 6500                       		bcs.s	locret_EDF0
0000F90E 5428 0024                  		addq.b	#2,$24(a0)
0000F912                            
0000F912                            locret_EDF0:
0000F912 4E75                       		rts	
0000F914                            ; ===========================================================================
0000F914                            
0000F914                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F914 5428 0024                  		addq.b	#2,$24(a0)
0000F918 6100 EC98                  		bsr.w	SingleObjLoad2
0000F91C 6600                       		bne.s	loc_EE18
0000F91E 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F922 3368 0008 0008             		move.w	8(a0),8(a1)
0000F928 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F92E 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F934 2348 003C                  		move.l	a0,$3C(a1)
0000F938                            
0000F938                            loc_EE18:
0000F938 117C 0001 001C             		move.b	#1,$1C(a0)
0000F93E 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F942 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F944 117C 0004 001C             		move.b	#4,$1C(a0)
0000F94A 6000                       		bra.s	Obj4C_Display
0000F94C                            ; ===========================================================================
0000F94C                            
0000F94C                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F94C 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F950 08E9 0001 0022             		bset	#1,$22(a1)
0000F956 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F95C 6000                       		bra.s	Obj4C_Display
0000F95E                            ; ===========================================================================
0000F95E                            
0000F95E                            loc_EE3E:				; XREF: Obj4C_Index
0000F95E 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F962 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F964 5428 0024                  		addq.b	#2,$24(a0)
0000F968 4E75                       		rts	
0000F96A                            ; ===========================================================================
0000F96A                            
0000F96A                            Obj4C_Display:				; XREF: Obj4C_Index
0000F96A 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F970 6100 B8A6                  		bsr.w	AnimateSprite
0000F974 6100 E790                  		bsr.w	DisplaySprite
0000F978 4E75                       		rts	
0000F97A                            ; ===========================================================================
0000F97A                            
0000F97A                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F97A 117C 0000 001C             		move.b	#0,$1C(a0)
0000F980 117C 0002 0024             		move.b	#2,$24(a0)
0000F986 4A28 0028                  		tst.b	$28(a0)
0000F98A 6700 E7B6                  		beq.w	DeleteObject
0000F98E 4E75                       		rts	
0000F990                            ; ===========================================================================
0000F990                            ; ---------------------------------------------------------------------------
0000F990                            ; Object 4D - lava geyser / lavafall (MZ)
0000F990                            ; ---------------------------------------------------------------------------
0000F990                            
0000F990                            Obj4D:					; XREF: Obj_Index
0000F990 7000                       		moveq	#0,d0
0000F992 1028 0024                  		move.b	$24(a0),d0
0000F996 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F99A 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F99E 6000 E766                  		bra.w	DisplaySprite
0000F9A2                            ; ===========================================================================
0000F9A2 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F9A4 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F9A6 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F9A8 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F9AA                            
0000F9AA FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F9AE                            ; ===========================================================================
0000F9AE                            
0000F9AE                            Obj4D_Main:				; XREF: Obj4D_Index
0000F9AE 5428 0024                  		addq.b	#2,$24(a0)
0000F9B2 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F9B8 4A28 0028                  		tst.b	$28(a0)
0000F9BC 6700                       		beq.s	loc_EEA4
0000F9BE 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F9C4                            
0000F9C4                            loc_EEA4:
0000F9C4 7000                       		moveq	#0,d0
0000F9C6 1028 0028                  		move.b	$28(a0),d0
0000F9CA D040                       		add.w	d0,d0
0000F9CC 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F9D2 2248                       		movea.l	a0,a1
0000F9D4 7201                       		moveq	#1,d1
0000F9D6 6100                       		bsr.s	Obj4D_MakeLava
0000F9D8 6000                       		bra.s	loc_EF10
0000F9DA                            ; ===========================================================================
0000F9DA                            
0000F9DA                            Obj4D_Loop:
0000F9DA 6100 EBD6                  		bsr.w	SingleObjLoad2
0000F9DE 6600                       		bne.s	loc_EF0A
0000F9E0                            
0000F9E0                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F9E0 12BC 004D                  		move.b	#$4D,0(a1)
0000F9E4 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F9EC 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F9F2 137C 0004 0001             		move.b	#4,1(a1)
0000F9F8 137C 0020 0019             		move.b	#$20,$19(a1)
0000F9FE 3368 0008 0008             		move.w	8(a0),8(a1)
0000FA04 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FA0A 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000FA10 137C 0001 0018             		move.b	#1,$18(a1)
0000FA16 137C 0005 001C             		move.b	#5,$1C(a1)
0000FA1C 4A28 0028                  		tst.b	$28(a0)
0000FA20 6700                       		beq.s	loc_EF0A
0000FA22 137C 0002 001C             		move.b	#2,$1C(a1)
0000FA28                            
0000FA28                            loc_EF0A:
0000FA28 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000FA2C 4E75                       		rts	
0000FA2E                            ; ===========================================================================
0000FA2E                            
0000FA2E                            loc_EF10:				; XREF: Obj4D_Main
0000FA2E 0669 0060 000C             		addi.w	#$60,$C(a1)
0000FA34 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000FA3A 0669 0060 0030             		addi.w	#$60,$30(a1)
0000FA40 137C 0093 0020             		move.b	#$93,$20(a1)
0000FA46 137C 0080 0016             		move.b	#$80,$16(a1)
0000FA4C 08E9 0004 0001             		bset	#4,1(a1)
0000FA52 5829 0024                  		addq.b	#4,$24(a1)
0000FA56 2348 003C                  		move.l	a0,$3C(a1)
0000FA5A 4A28 0028                  		tst.b	$28(a0)
0000FA5E 6700                       		beq.s	Obj4D_PlaySnd
0000FA60 7200                       		moveq	#0,d1
0000FA62 6100 FF76                  		bsr.w	Obj4D_Loop
0000FA66 5429 0024                  		addq.b	#2,$24(a1)
0000FA6A 08E9 0004 0002             		bset	#4,2(a1)
0000FA70 0669 0100 000C             		addi.w	#$100,$C(a1)
0000FA76 137C 0000 0018             		move.b	#0,$18(a1)
0000FA7C 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000FA82 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000FA88 117C 0000 0028             		move.b	#0,$28(a0)
0000FA8E                            
0000FA8E                            Obj4D_PlaySnd:
0000FA8E 303C 00C8                  		move.w	#$C8,d0
0000FA92 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play flame sound
0000FA98                            
0000FA98                            Obj4D_Action:				; XREF: Obj4D_Index
0000FA98 7000                       		moveq	#0,d0
0000FA9A 1028 0028                  		move.b	$28(a0),d0
0000FA9E D040                       		add.w	d0,d0
0000FAA0 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000FAA4 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000FAA8 6100 E636                  		bsr.w	SpeedToPos
0000FAAC 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000FAB2 6100 B764                  		bsr.w	AnimateSprite
0000FAB6                            
0000FAB6                            Obj4D_ChkDel:				; XREF: Obj4C
0000FAB6 3028 0008                  		move.w	8(a0),d0
0000FABA 0240 FF80                  		andi.w	#$FF80,d0
0000FABE 3238 F700                  		move.w	($FFFFF700).w,d1
0000FAC2 0441 0080                  		subi.w	#$80,d1
0000FAC6 0241 FF80                  		andi.w	#$FF80,d1
0000FACA 9041                       		sub.w	d1,d0
0000FACC 0C40 0280                  		cmpi.w	#$280,d0
0000FAD0 6200 E670                  		bhi.w	DeleteObject
0000FAD4 4E75                       		rts	
0000FAD6                            ; ===========================================================================
0000FAD6 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000FAD8 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000FADA                            ; ===========================================================================
0000FADA                            
0000FADA                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000FADA 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000FAE0 3028 0030                  		move.w	$30(a0),d0
0000FAE4 B068 000C                  		cmp.w	$C(a0),d0
0000FAE8 6400                       		bcc.s	locret_EFDA
0000FAEA 5828 0024                  		addq.b	#4,$24(a0)
0000FAEE 2268 003C                  		movea.l	$3C(a0),a1
0000FAF2 137C 0003 001C             		move.b	#3,$1C(a1)
0000FAF8                            
0000FAF8                            locret_EFDA:
0000FAF8 4E75                       		rts	
0000FAFA                            ; ===========================================================================
0000FAFA                            
0000FAFA                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000FAFA 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000FB00 3028 0030                  		move.w	$30(a0),d0
0000FB04 B068 000C                  		cmp.w	$C(a0),d0
0000FB08 6400                       		bcc.s	locret_EFFA
0000FB0A 5828 0024                  		addq.b	#4,$24(a0)
0000FB0E 2268 003C                  		movea.l	$3C(a0),a1
0000FB12 137C 0001 001C             		move.b	#1,$1C(a1)
0000FB18                            
0000FB18                            locret_EFFA:
0000FB18 4E75                       		rts	
0000FB1A                            ; ===========================================================================
0000FB1A                            
0000FB1A                            loc_EFFC:				; XREF: Obj4D_Index
0000FB1A 2268 003C                  		movea.l	$3C(a0),a1
0000FB1E 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000FB24 6700 0000                  		beq.w	Obj4D_Delete
0000FB28 3029 000C                  		move.w	$C(a1),d0
0000FB2C 0640 0060                  		addi.w	#$60,d0
0000FB30 3140 000C                  		move.w	d0,$C(a0)
0000FB34 9068 0030                  		sub.w	$30(a0),d0
0000FB38 4440                       		neg.w	d0
0000FB3A 7208                       		moveq	#8,d1
0000FB3C 0C40 0040                  		cmpi.w	#$40,d0
0000FB40 6C00                       		bge.s	loc_F026
0000FB42 720B                       		moveq	#$B,d1
0000FB44                            
0000FB44                            loc_F026:
0000FB44 0C40 0080                  		cmpi.w	#$80,d0
0000FB48 6F00                       		ble.s	loc_F02E
0000FB4A 720E                       		moveq	#$E,d1
0000FB4C                            
0000FB4C                            loc_F02E:
0000FB4C 5328 001E                  		subq.b	#1,$1E(a0)
0000FB50 6A00                       		bpl.s	loc_F04C
0000FB52 117C 0007 001E             		move.b	#7,$1E(a0)
0000FB58 5228 001B                  		addq.b	#1,$1B(a0)
0000FB5C 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000FB62 6500                       		bcs.s	loc_F04C
0000FB64 117C 0000 001B             		move.b	#0,$1B(a0)
0000FB6A                            
0000FB6A                            loc_F04C:
0000FB6A 1028 001B                  		move.b	$1B(a0),d0
0000FB6E D001                       		add.b	d1,d0
0000FB70 1140 001A                  		move.b	d0,$1A(a0)
0000FB74 6000 FF40                  		bra.w	Obj4D_ChkDel
0000FB78                            ; ===========================================================================
0000FB78                            
0000FB78                            Obj4D_Delete:				; XREF: Obj4D_Index
0000FB78 6000 E5C8                  		bra.w	DeleteObject
0000FB7C                            ; ===========================================================================
0000FB7C                            ; ---------------------------------------------------------------------------
0000FB7C                            ; Object 4E - advancing	wall of	lava (MZ)
0000FB7C                            ; ---------------------------------------------------------------------------
0000FB7C                            
0000FB7C                            Obj4E:					; XREF: Obj_Index
0000FB7C 7000                       		moveq	#0,d0
0000FB7E 1028 0024                  		move.b	$24(a0),d0
0000FB82 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000FB86 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000FB8A                            ; ===========================================================================
0000FB8A 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000FB8C 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000FB8E 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000FB90 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000FB92 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000FB94                            ; ===========================================================================
0000FB94                            
0000FB94                            Obj4E_Main:				; XREF: Obj4E_Index
0000FB94 5828 0024                  		addq.b	#4,$24(a0)
0000FB98 2248                       		movea.l	a0,a1
0000FB9A 7201                       		moveq	#1,d1
0000FB9C 6000                       		bra.s	Obj4E_Main2
0000FB9E                            ; ===========================================================================
0000FB9E                            
0000FB9E                            Obj4E_Loop:
0000FB9E 6100 EA12                  		bsr.w	SingleObjLoad2
0000FBA2 6600                       		bne.s	loc_F0C8
0000FBA4                            
0000FBA4                            Obj4E_Main2:				; XREF: Obj4E_Main
0000FBA4 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000FBA8 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000FBB0 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000FBB6 137C 0004 0001             		move.b	#4,1(a1)
0000FBBC 137C 0050 0019             		move.b	#$50,$19(a1)
0000FBC2 3368 0008 0008             		move.w	8(a0),8(a1)
0000FBC8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FBCE 137C 0001 0018             		move.b	#1,$18(a1)
0000FBD4 137C 0000 001C             		move.b	#0,$1C(a1)
0000FBDA 137C 0094 0020             		move.b	#$94,$20(a1)
0000FBE0 2348 003C                  		move.l	a0,$3C(a1)
0000FBE4                            
0000FBE4                            loc_F0C8:
0000FBE4 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000FBE8                            
0000FBE8 5C29 0024                  		addq.b	#6,$24(a1)
0000FBEC 137C 0004 001A             		move.b	#4,$1A(a1)
0000FBF2                            
0000FBF2                            Obj4E_Action:				; XREF: Obj4E_Index
0000FBF2 3038 D008                  		move.w	($FFFFD008).w,d0
0000FBF6 9068 0008                  		sub.w	8(a0),d0
0000FBFA 6400                       		bcc.s	Obj4E_ChkSonic
0000FBFC 4440                       		neg.w	d0
0000FBFE                            
0000FBFE                            Obj4E_ChkSonic:
0000FBFE 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000FC02 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000FC04 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000FC08 9068 000C                  		sub.w	$C(a0),d0
0000FC0C 6400                       		bcc.s	loc_F0F4
0000FC0E 4440                       		neg.w	d0
0000FC10                            
0000FC10                            loc_F0F4:
0000FC10 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000FC14 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000FC16 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000FC1C 6000                       		bra.s	Obj4E_Solid
0000FC1E                            ; ===========================================================================
0000FC1E                            
0000FC1E                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000FC1E 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000FC22 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000FC24 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000FC2A 5528 0024                  		subq.b	#2,$24(a0)
0000FC2E                            
0000FC2E                            Obj4E_Solid:				; XREF: Obj4E_Index
0000FC2E 323C 002B                  		move.w	#$2B,d1
0000FC32 343C 0018                  		move.w	#$18,d2
0000FC36 3602                       		move.w	d2,d3
0000FC38 5243                       		addq.w	#1,d3
0000FC3A 3828 0008                  		move.w	8(a0),d4
0000FC3E 1028 0024                  		move.b	$24(a0),d0
0000FC42 3F00                       		move.w	d0,-(sp)
0000FC44 6100 0000                  		bsr.w	SolidObject
0000FC48 301F                       		move.w	(sp)+,d0
0000FC4A 1140 0024                  		move.b	d0,$24(a0)
0000FC4E 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000FC54 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000FC56 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000FC5A 4228 0036                  		clr.b	$36(a0)
0000FC5E                            
0000FC5E                            Obj4E_Animate:
0000FC5E 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000FC64 6100 B5B2                  		bsr.w	AnimateSprite
0000FC68 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000FC6E 6400                       		bcc.s	Obj4E_ChkDel
0000FC70 6100 E46E                  		bsr.w	SpeedToPos
0000FC74                            
0000FC74                            Obj4E_ChkDel:
0000FC74 6100 E490                  		bsr.w	DisplaySprite
0000FC78 4A28 0036                  		tst.b	$36(a0)
0000FC7C 6600                       		bne.s	locret_F17E
0000FC7E 3028 0008                  		move.w	8(a0),d0
0000FC82 0240 FF80                  		andi.w	#$FF80,d0
0000FC86 3238 F700                  		move.w	($FFFFF700).w,d1
0000FC8A 0441 0080                  		subi.w	#$80,d1
0000FC8E 0241 FF80                  		andi.w	#$FF80,d1
0000FC92 9041                       		sub.w	d1,d0
0000FC94 0C40 0280                  		cmpi.w	#$280,d0
0000FC98 6200                       		bhi.s	Obj4E_ChkGone
0000FC9A                            
0000FC9A                            locret_F17E:
0000FC9A 4E75                       		rts	
0000FC9C                            ; ===========================================================================
0000FC9C                            
0000FC9C                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000FC9C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FCA0 7000                       		moveq	#0,d0
0000FCA2 1028 0023                  		move.b	$23(a0),d0
0000FCA6 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FCAC 117C 0008 0024             		move.b	#8,$24(a0)
0000FCB2 4E75                       		rts	
0000FCB4                            ; ===========================================================================
0000FCB4                            
0000FCB4                            Obj4E_Move2:				; XREF: Obj4E_Index
0000FCB4 2268 003C                  		movea.l	$3C(a0),a1
0000FCB8 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000FCBE 6700                       		beq.s	Obj4E_Delete
0000FCC0 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000FCC6 0468 0080 0008             		subi.w	#$80,8(a0)
0000FCCC 6000 E438                  		bra.w	DisplaySprite
0000FCD0                            ; ===========================================================================
0000FCD0                            
0000FCD0                            Obj4E_Delete:				; XREF: Obj4E_Index
0000FCD0 6000 E470                  		bra.w	DeleteObject
0000FCD4                            ; ===========================================================================
0000FCD4                            ; ---------------------------------------------------------------------------
0000FCD4                            ; Object 54 - invisible	lava tag (MZ)
0000FCD4                            ; ---------------------------------------------------------------------------
0000FCD4                            
0000FCD4                            Obj54:					; XREF: Obj_Index
0000FCD4 7000                       		moveq	#0,d0
0000FCD6 1028 0024                  		move.b	$24(a0),d0
0000FCDA 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000FCDE 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000FCE2                            ; ===========================================================================
0000FCE2 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000FCE4 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000FCE6                            
0000FCE6 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000FCEA                            ; ===========================================================================
0000FCEA                            
0000FCEA                            Obj54_Main:				; XREF: Obj54_Index
0000FCEA 5428 0024                  		addq.b	#2,$24(a0)
0000FCEE 7000                       		moveq	#0,d0
0000FCF0 1028 0028                  		move.b	$28(a0),d0
0000FCF4 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000FCFA 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000FD02 117C 0084 0001             		move.b	#$84,1(a0)
0000FD08                            
0000FD08                            Obj54_ChkDel:				; XREF: Obj54_Index
0000FD08 3028 0008                  		move.w	8(a0),d0
0000FD0C 0240 FF80                  		andi.w	#$FF80,d0
0000FD10 3238 F700                  		move.w	($FFFFF700).w,d1
0000FD14 0441 0080                  		subi.w	#$80,d1
0000FD18 0241 FF80                  		andi.w	#$FF80,d1
0000FD1C 9041                       		sub.w	d1,d0
0000FD1E 6B00 E422                  		bmi.w	DeleteObject
0000FD22 0C40 0280                  		cmpi.w	#$280,d0
0000FD26 6200 E41A                  		bhi.w	DeleteObject
0000FD2A 4E75                       		rts	
0000FD2C                            ; ===========================================================================
0000FD2C                            ; ---------------------------------------------------------------------------
0000FD2C                            ; Sprite mappings - invisible lava tag (MZ)
0000FD2C                            ; ---------------------------------------------------------------------------
0000FD2C                            Map_obj54:
0000FD2C                            	include "_maps\obj54.asm"
0000FD2C                            ; ---------------------------------------------------------------------------
0000FD2C                            ; Sprite mappings - invisible lava tag (MZ)
0000FD2C                            ; ---------------------------------------------------------------------------
0000FD2C 0000                       		dc.w byte_F212-Map_obj54
0000FD2E 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000FD30 00                         		even
0000FD30 00                         		even
0000FD30                            
0000FD30                            Ani_obj4C:
0000FD30                            	include "_anim\obj4C.asm"
0000FD30                            ; ---------------------------------------------------------------------------
0000FD30                            ; Animation script - geyser of lava (MZ)
0000FD30                            ; ---------------------------------------------------------------------------
0000FD30 0000                       		dc.w byte_F220-Ani_obj4C
0000FD32 0000                       		dc.w byte_F22A-Ani_obj4C
0000FD34 0000                       		dc.w byte_F22E-Ani_obj4C
0000FD36 0000                       		dc.w byte_F232-Ani_obj4C
0000FD38 0000                       		dc.w byte_F23A-Ani_obj4C
0000FD3A 0000                       		dc.w byte_F23E-Ani_obj4C
0000FD3C 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000FD46 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000FD4A 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000FD4E 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000FD56 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000FD5A 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000FD5E                            		even
0000FD5E                            		even
0000FD5E                            
0000FD5E                            Ani_obj4E:
0000FD5E                            	include "_anim\obj4E.asm"
0000FD5E                            ; ---------------------------------------------------------------------------
0000FD5E                            ; Animation script - advancing wall of lava (MZ)
0000FD5E                            ; ---------------------------------------------------------------------------
0000FD5E 0000                       		dc.w byte_F244-Ani_obj4E
0000FD60 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000FD66                            		even
0000FD66                            		even
0000FD66                            
0000FD66                            ; ---------------------------------------------------------------------------
0000FD66                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FD66                            ; ---------------------------------------------------------------------------
0000FD66                            Map_obj4C:
0000FD66                            	include "_maps\obj4C.asm"
0000FD66                            ; ---------------------------------------------------------------------------
0000FD66                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FD66                            ; ---------------------------------------------------------------------------
0000FD66 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000FD6A 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000FD6E 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000FD72 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000FD76 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000FD7A 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000FD7E 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000FD82 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000FD86 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000FD8A 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000FD8E 02                         byte_F272:	dc.b 2
0000FD8F EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000FD94 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000FD99 02                         byte_F27D:	dc.b 2
0000FD9A EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000FD9F EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000FDA4 04                         byte_F288:	dc.b 4
0000FDA5 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FDAA F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FDAF F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FDB4 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FDB9 04                         byte_F29D:	dc.b 4
0000FDBA EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FDBF F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FDC4 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FDC9 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FDCE 06                         byte_F2B2:	dc.b 6
0000FDCF EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FDD4 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FDD9 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FDDE EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FDE3 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000FDE8 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000FDED 06                         byte_F2D1:	dc.b 6
0000FDEE EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FDF3 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FDF8 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FDFD EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FE02 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000FE07 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000FE0C 02                         byte_F2F0:	dc.b 2
0000FE0D E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000FE12 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000FE17 02                         byte_F2FB:	dc.b 2
0000FE18 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000FE1D E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000FE22 0A                         byte_F306:	dc.b $A
0000FE23 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FE28 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FE2D B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FE32 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FE37 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FE3C D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FE41 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FE46 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FE4B 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FE50 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FE55 0A                         byte_F339:	dc.b $A
0000FE56 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FE5B 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FE60 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FE65 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FE6A D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FE6F D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FE74 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FE79 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FE7E 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FE83 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FE88 0A                         byte_F36C:	dc.b $A
0000FE89 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FE8E 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FE93 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FE98 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FE9D D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FEA2 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FEA7 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FEAC F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FEB1 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FEB6 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FEBB 06                         byte_F39F:	dc.b 6
0000FEBC 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FEC1 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FEC6 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FECB B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FED0 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FED5 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FEDA 06                         byte_F3BE:	dc.b 6
0000FEDB 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FEE0 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FEE5 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FEEA B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FEEF D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FEF4 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FEF9 06                         byte_F3DD:	dc.b 6
0000FEFA 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FEFF 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FF04 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FF09 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FF0E D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FF13 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FF18 10                         byte_F3FC:	dc.b $10
0000FF19 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FF1E 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FF23 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FF28 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FF2D D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FF32 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FF37 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FF3C F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FF41 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FF46 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FF4B 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000FF50 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000FF55 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000FF5A 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000FF5F 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000FF64 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000FF69 10                         byte_F44D:	dc.b $10
0000FF6A 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FF6F 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FF74 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FF79 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FF7E D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FF83 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FF88 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FF8D F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FF92 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FF97 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FF9C 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FFA1 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FFA6 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FFAB 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FFB0 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FFB5 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FFBA 10                         byte_F49E:	dc.b $10
0000FFBB 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FFC0 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FFC5 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FFCA B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FFCF D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FFD4 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FFD9 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FFDE F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FFE3 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FFE8 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FFED 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FFF2 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FFF7 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FFFC 500F 0860 00               		dc.b $50, $F, 8, $60, 0
00010001 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
00010006 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0001000B 06                         byte_F4EF:	dc.b 6
0001000C E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
00010011 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
00010016 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0001001B E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
00010020 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
00010025 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0001002A 06                         byte_F50E:	dc.b 6
0001002B E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
00010030 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
00010035 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0001003A E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0001003F D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
00010044 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
00010049 00                         byte_F52D:	dc.b 0
0001004A                            		even
0001004A                            		even
0001004A                            
0001004A                            ; ---------------------------------------------------------------------------
0001004A                            ; Sprite mappings - advancing wall of lava (MZ)
0001004A                            ; ---------------------------------------------------------------------------
0001004A                            Map_obj4E:
0001004A                            	include "_maps\obj4E.asm"
0001004A                            ; ---------------------------------------------------------------------------
0001004A                            ; Sprite mappings - advancing wall of lava (MZ)
0001004A                            ; ---------------------------------------------------------------------------
0001004A 0000                       		dc.w byte_F538-Map_obj4E
0001004C 0000                       		dc.w byte_F566-Map_obj4E
0001004E 0000                       		dc.w byte_F594-Map_obj4E
00010050 0000                       		dc.w byte_F5C2-Map_obj4E
00010052 0000                       		dc.w byte_F5F0-Map_obj4E
00010054 09                         byte_F538:	dc.b 9
00010055 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0001005A 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0001005F 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010064 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010069 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0001006E E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010073 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010078 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0001007D 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010082 09                         byte_F566:	dc.b 9
00010083 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00010088 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0001008D 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010092 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010097 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0001009C E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000100A1 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000100A6 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000100AB 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000100B0 09                         byte_F594:	dc.b 9
000100B1 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
000100B6 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
000100BB 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000100C0 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000100C5 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000100CA E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000100CF 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000100D4 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000100D9 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000100DE 09                         byte_F5C2:	dc.b 9
000100DF E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
000100E4 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
000100E9 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000100EE E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000100F3 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000100F8 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000100FD 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010102 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010107 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0001010C 08                         byte_F5F0:	dc.b 8
0001010D E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
00010112 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010117 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0001011C 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010121 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010126 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0001012B E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010130 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010136 00                         		even
00010136 00                         		even
00010136                            
00010136                            ; ===========================================================================
00010136                            ; ---------------------------------------------------------------------------
00010136                            ; Object 40 - Moto Bug enemy (GHZ)
00010136                            ; ---------------------------------------------------------------------------
00010136                            
00010136                            Obj40:					; XREF: Obj_Index
00010136 7000                       		moveq	#0,d0
00010138 1028 0024                  		move.b	$24(a0),d0
0001013C 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
00010140 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
00010144                            ; ===========================================================================
00010144 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
00010146 0000                       		dc.w Obj40_Action-Obj40_Index
00010148 0000                       		dc.w Obj40_Animate-Obj40_Index
0001014A 0000                       		dc.w Obj40_Delete-Obj40_Index
0001014C                            ; ===========================================================================
0001014C                            
0001014C                            Obj40_Main:				; XREF: Obj40_Index
0001014C 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
00010154 317C 04F0 0002             		move.w	#$4F0,2(a0)
0001015A 117C 0004 0001             		move.b	#4,1(a0)
00010160 117C 0004 0018             		move.b	#4,$18(a0)
00010166 117C 0014 0019             		move.b	#$14,$19(a0)
0001016C 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
00010170 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
00010172 117C 000E 0016             		move.b	#$E,$16(a0)
00010178 117C 0008 0017             		move.b	#8,$17(a0)
0001017E 117C 000C 0020             		move.b	#$C,$20(a0)
00010184 6100 DF2E                  		bsr.w	ObjectFall
00010188 4EB9 0000 0000             		jsr	ObjHitFloor
0001018E 4A41                       		tst.w	d1
00010190 6A00                       		bpl.s	locret_F68A
00010192 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010196 317C 0000 0012             		move.w	#0,$12(a0)
0001019C 5428 0024                  		addq.b	#2,$24(a0)
000101A0 0868 0000 0022             		bchg	#0,$22(a0)
000101A6                            
000101A6                            locret_F68A:
000101A6 4E75                       		rts	
000101A8                            ; ===========================================================================
000101A8                            
000101A8                            Obj40_SetSmoke:				; XREF: Obj40_Main
000101A8 5828 0024                  		addq.b	#4,$24(a0)
000101AC 6000 0000                  		bra.w	Obj40_Animate
000101B0                            ; ===========================================================================
000101B0                            
000101B0                            Obj40_Action:				; XREF: Obj40_Index
000101B0 7000                       		moveq	#0,d0
000101B2 1028 0025                  		move.b	$25(a0),d0
000101B6 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
000101BA 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
000101BE 43F9 0000 0000             		lea	(Ani_obj40).l,a1
000101C4 6100 B052                  		bsr.w	AnimateSprite
000101C8                            
000101C8                            ; ---------------------------------------------------------------------------
000101C8                            ; Routine to mark an enemy/monitor/ring	as destroyed
000101C8                            ; ---------------------------------------------------------------------------
000101C8                            
000101C8                            MarkObjGone:
000101C8 3028 0008                  		move.w	8(a0),d0
000101CC 0240 FF80                  		andi.w	#$FF80,d0
000101D0 3238 F700                  		move.w	($FFFFF700).w,d1
000101D4 0441 0080                  		subi.w	#$80,d1
000101D8 0241 FF80                  		andi.w	#$FF80,d1
000101DC 9041                       		sub.w	d1,d0
000101DE 0C40 0280                  		cmpi.w	#$280,d0
000101E2 6200 0000                  		bhi.w	Mark_ChkGone
000101E6 6000 DF1E                  		bra.w	DisplaySprite
000101EA                            ; ===========================================================================
000101EA                            
000101EA                            Mark_ChkGone:
000101EA 45F8 FC00                  		lea	($FFFFFC00).w,a2
000101EE 7000                       		moveq	#0,d0
000101F0 1028 0023                  		move.b	$23(a0),d0
000101F4 6700                       		beq.s	Mark_Delete
000101F6 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000101FC                            
000101FC                            Mark_Delete:
000101FC 6000 DF44                  		bra.w	DeleteObject
00010200                            
00010200                            ; ===========================================================================
00010200 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
00010202 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
00010204                            ; ===========================================================================
00010204                            
00010204                            Obj40_Move:				; XREF: Obj40_Index2
00010204 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00010208 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0001020A 5428 0025                  		addq.b	#2,$25(a0)
0001020E 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
00010214 117C 0001 001C             		move.b	#1,$1C(a0)
0001021A 0868 0000 0022             		bchg	#0,$22(a0)
00010220 6600                       		bne.s	locret_F70A
00010222 4468 0010                  		neg.w	$10(a0)		; change direction
00010226                            
00010226                            locret_F70A:
00010226 4E75                       		rts	
00010228                            ; ===========================================================================
00010228                            
00010228                            Obj40_FixToFloor:			; XREF: Obj40_Index2
00010228 6100 DEB6                  		bsr.w	SpeedToPos
0001022C 4EB9 0000 0000             		jsr	ObjHitFloor
00010232 0C41 FFF8                  		cmpi.w	#-8,d1
00010236 6D00                       		blt.s	Obj40_Pause
00010238 0C41 000C                  		cmpi.w	#$C,d1
0001023C 6C00                       		bge.s	Obj40_Pause
0001023E D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010242 5328 0033                  		subq.b	#1,$33(a0)
00010246 6A00                       		bpl.s	locret_F756
00010248 117C 000F 0033             		move.b	#$F,$33(a0)
0001024E 6100 E34C                  		bsr.w	SingleObjLoad
00010252 6600                       		bne.s	locret_F756
00010254 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
00010258 3368 0008 0008             		move.w	8(a0),8(a1)
0001025E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010264 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001026A 137C 0002 001C             		move.b	#2,$1C(a1)
00010270                            
00010270                            locret_F756:
00010270 4E75                       		rts	
00010272                            ; ===========================================================================
00010272                            
00010272                            Obj40_Pause:				; XREF: Obj40_FixToFloor
00010272 5528 0025                  		subq.b	#2,$25(a0)
00010276 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0001027C 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
00010282 117C 0000 001C             		move.b	#0,$1C(a0)
00010288 4E75                       		rts	
0001028A                            ; ===========================================================================
0001028A                            
0001028A                            Obj40_Animate:				; XREF: Obj40_Index
0001028A 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00010290 6100 AF86                  		bsr.w	AnimateSprite
00010294 6000 DE70                  		bra.w	DisplaySprite
00010298                            ; ===========================================================================
00010298                            
00010298                            Obj40_Delete:				; XREF: Obj40_Index
00010298 6000 DEA8                  		bra.w	DeleteObject
0001029C                            ; ===========================================================================
0001029C                            Ani_obj40:
0001029C                            	include "_anim\obj40.asm"
0001029C                            ; ---------------------------------------------------------------------------
0001029C                            ; Animation script - Motobug enemy
0001029C                            ; ---------------------------------------------------------------------------
0001029C 0000                       		dc.w byte_F788-Ani_obj40
0001029E 0000                       		dc.w byte_F78C-Ani_obj40
000102A0 0000                       		dc.w byte_F792-Ani_obj40
000102A2 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
000102A6 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
000102AC 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
000102BA                            		even
000102BA                            		even
000102BA                            
000102BA                            ; ---------------------------------------------------------------------------
000102BA                            ; Sprite mappings - Moto Bug enemy (GHZ)
000102BA                            ; ---------------------------------------------------------------------------
000102BA                            Map_obj40:
000102BA                            	include "_maps\obj40.asm"
000102BA                            ; ---------------------------------------------------------------------------
000102BA                            ; Sprite mappings - Moto Bug enemy (GHZ)
000102BA                            ; ---------------------------------------------------------------------------
000102BA 0000 0000                  		dc.w byte_F7AE-Map_obj40, byte_F7C3-Map_obj40
000102BE 0000 0000                  		dc.w byte_F7D8-Map_obj40, byte_F7F2-Map_obj40
000102C2 0000 0000                  		dc.w byte_F7F8-Map_obj40, byte_F7FE-Map_obj40
000102C6 0000                       		dc.w byte_F804-Map_obj40
000102C8 04                         byte_F7AE:	dc.b 4
000102C9 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
000102CE 000C 0008 EC               		dc.b 0,	$C, 0, 8, $EC
000102D3 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
000102D8 0808 000E F4               		dc.b 8,	8, 0, $E, $F4
000102DD 04                         byte_F7C3:	dc.b 4
000102DE F10D 0000 EC               		dc.b $F1, $D, 0, 0, $EC
000102E3 010C 0008 EC               		dc.b 1,	$C, 0, 8, $EC
000102E8 F901 000C 0C               		dc.b $F9, 1, 0,	$C, $C
000102ED 0908 0011 F4               		dc.b 9,	8, 0, $11, $F4
000102F2 05                         byte_F7D8:	dc.b 5
000102F3 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
000102F8 000C 0014 EC               		dc.b 0,	$C, 0, $14, $EC
000102FD F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
00010302 0804 0018 EC               		dc.b 8,	4, 0, $18, $EC
00010307 0804 0012 FC               		dc.b 8,	4, 0, $12, $FC
0001030C 01                         byte_F7F2:	dc.b 1
0001030D FA00 001A 10               		dc.b $FA, 0, 0,	$1A, $10
00010312 01                         byte_F7F8:	dc.b 1
00010313 FA00 001B 10               		dc.b $FA, 0, 0,	$1B, $10
00010318 01                         byte_F7FE:	dc.b 1
00010319 FA00 001C 10               		dc.b $FA, 0, 0,	$1C, $10
0001031E 00                         byte_F804:	dc.b 0
00010320 00                         		even
00010320 00                         		even
00010320                            
00010320                            ; ===========================================================================
00010320                            ; ---------------------------------------------------------------------------
00010320                            ; Object 4F - blank
00010320                            ; ---------------------------------------------------------------------------
00010320                            
00010320                            Obj4F:					; XREF: Obj_Index
00010320 4E75                       		rts	
00010322                            
00010322                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010322                            
00010322                            
00010322                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
00010322 3038 FE04                  		move.w	($FFFFFE04).w,d0
00010326 D047                       		add.w	d7,d0
00010328 0240 0003                  		andi.w	#3,d0
0001032C 6600                       		bne.s	loc_F836
0001032E 7600                       		moveq	#0,d3
00010330 1628 0019                  		move.b	$19(a0),d3
00010334 4A68 0010                  		tst.w	$10(a0)
00010338 6B00                       		bmi.s	loc_F82C
0001033A 6100 0000                  		bsr.w	ObjHitWallRight
0001033E 4A41                       		tst.w	d1
00010340 6A00                       		bpl.s	loc_F836
00010342                            
00010342                            loc_F828:
00010342 7001                       		moveq	#1,d0
00010344 4E75                       		rts	
00010346                            ; ===========================================================================
00010346                            
00010346                            loc_F82C:
00010346 4643                       		not.w	d3
00010348 6100 0000                  		bsr.w	ObjHitWallLeft
0001034C 4A41                       		tst.w	d1
0001034E 6BF2                       		bmi.s	loc_F828
00010350                            
00010350                            loc_F836:
00010350 7000                       		moveq	#0,d0
00010352 4E75                       		rts	
00010354                            ; End of function Obj50_ChkWall
00010354                            
00010354                            ; ===========================================================================
00010354                            ; ---------------------------------------------------------------------------
00010354                            ; Object 50 - Yadrin enemy (SYZ)
00010354                            ; ---------------------------------------------------------------------------
00010354                            
00010354                            Obj50:					; XREF: Obj_Index
00010354 7000                       		moveq	#0,d0
00010356 1028 0024                  		move.b	$24(a0),d0
0001035A 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0001035E 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
00010362                            ; ===========================================================================
00010362 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
00010364 0000                       		dc.w Obj50_Action-Obj50_Index
00010366                            ; ===========================================================================
00010366                            
00010366                            Obj50_Main:				; XREF: Obj50_Index
00010366 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0001036E 317C 247B 0002             		move.w	#$247B,2(a0)
00010374 117C 0004 0001             		move.b	#4,1(a0)
0001037A 117C 0004 0018             		move.b	#4,$18(a0)
00010380 117C 0014 0019             		move.b	#$14,$19(a0)
00010386 117C 0011 0016             		move.b	#$11,$16(a0)
0001038C 117C 0008 0017             		move.b	#8,$17(a0)
00010392 117C 00CC 0020             		move.b	#$CC,$20(a0)
00010398 6100 DD1A                  		bsr.w	ObjectFall
0001039C 6100 0000                  		bsr.w	ObjHitFloor
000103A0 4A41                       		tst.w	d1
000103A2 6A00                       		bpl.s	locret_F89E
000103A4 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
000103A8 317C 0000 0012             		move.w	#0,$12(a0)
000103AE 5428 0024                  		addq.b	#2,$24(a0)
000103B2 0868 0000 0022             		bchg	#0,$22(a0)
000103B8                            
000103B8                            locret_F89E:
000103B8 4E75                       		rts	
000103BA                            ; ===========================================================================
000103BA                            
000103BA                            Obj50_Action:				; XREF: Obj50_Index
000103BA 7000                       		moveq	#0,d0
000103BC 1028 0025                  		move.b	$25(a0),d0
000103C0 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
000103C4 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
000103C8 43F9 0000 0000             		lea	(Ani_obj50).l,a1
000103CE 6100 AE48                  		bsr.w	AnimateSprite
000103D2 6000 FDF4                  		bra.w	MarkObjGone
000103D6                            ; ===========================================================================
000103D6 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
000103D8 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
000103DA                            ; ===========================================================================
000103DA                            
000103DA                            Obj50_Move:				; XREF: Obj50_Index2
000103DA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
000103DE 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
000103E0 5428 0025                  		addq.b	#2,$25(a0)
000103E4 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
000103EA 117C 0001 001C             		move.b	#1,$1C(a0)
000103F0 0868 0000 0022             		bchg	#0,$22(a0)
000103F6 6600                       		bne.s	locret_F8E2
000103F8 4468 0010                  		neg.w	$10(a0)		; change direction
000103FC                            
000103FC                            locret_F8E2:
000103FC 4E75                       		rts	
000103FE                            ; ===========================================================================
000103FE                            
000103FE                            Obj50_FixToFloor:			; XREF: Obj50_Index2
000103FE 6100 DCE0                  		bsr.w	SpeedToPos
00010402 6100 0000                  		bsr.w	ObjHitFloor
00010406 0C41 FFF8                  		cmpi.w	#-8,d1
0001040A 6D00                       		blt.s	Obj50_Pause
0001040C 0C41 000C                  		cmpi.w	#$C,d1
00010410 6C00                       		bge.s	Obj50_Pause
00010412 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
00010416 6100 FF0A                  		bsr.w	Obj50_ChkWall
0001041A 6600                       		bne.s	Obj50_Pause
0001041C 4E75                       		rts	
0001041E                            ; ===========================================================================
0001041E                            
0001041E                            Obj50_Pause:				; XREF: Obj50_FixToFloor
0001041E 5528 0025                  		subq.b	#2,$25(a0)
00010422 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00010428 317C 0000 0010             		move.w	#0,$10(a0)
0001042E 117C 0000 001C             		move.b	#0,$1C(a0)
00010434 4E75                       		rts	
00010436                            ; ===========================================================================
00010436                            Ani_obj50:
00010436                            	include "_anim\obj50.asm"
00010436                            ; ---------------------------------------------------------------------------
00010436                            ; Animation script - Yadrin enemy
00010436                            ; ---------------------------------------------------------------------------
00010436 0000                       		dc.w byte_F920-Ani_obj50
00010438 0000                       		dc.w byte_F924-Ani_obj50
0001043A 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
0001043E 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
00010448                            		even
00010448                            		even
00010448                            
00010448                            ; ---------------------------------------------------------------------------
00010448                            ; Sprite mappings - Yadrin enemy (SYZ)
00010448                            ; ---------------------------------------------------------------------------
00010448                            Map_obj50:
00010448                            	include "_maps\obj50.asm"
00010448                            ; ---------------------------------------------------------------------------
00010448                            ; Sprite mappings - Yadrin enemy (SYZ)
00010448                            ; ---------------------------------------------------------------------------
00010448 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
0001044C 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
00010450 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
00010454 05                         byte_F93A:	dc.b 5
00010455 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0001045A FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0001045F EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00010464 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00010469 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0001046E 05                         byte_F954:	dc.b 5
0001046F F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
00010474 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
00010479 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0001047E F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00010483 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00010488 05                         byte_F96E:	dc.b 5
00010489 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0001048E 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
00010493 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00010498 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0001049D 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
000104A2 05                         byte_F988:	dc.b 5
000104A3 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
000104A8 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
000104AD EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000104B2 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000104B7 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
000104BC 05                         byte_F9A2:	dc.b 5
000104BD F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
000104C2 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
000104C7 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000104CC F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000104D1 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
000104D6 05                         byte_F9BC:	dc.b 5
000104D7 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
000104DC 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
000104E1 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000104E6 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000104EB 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
000104F0                            		even
000104F0                            		even
000104F0                            
000104F0                            ; ---------------------------------------------------------------------------
000104F0                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
000104F0                            ;
000104F0                            ; variables:
000104F0                            ; d1 = width
000104F0                            ; d2 = height /	2 (when	jumping)
000104F0                            ; d3 = height /	2 (when	walking)
000104F0                            ; d4 = x-axis position
000104F0                            ; ---------------------------------------------------------------------------
000104F0                            
000104F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000104F0                            
000104F0                            
000104F0                            SolidObject:
000104F0 4A28 0025                  		tst.b	$25(a0)
000104F4 6700 0000                  		beq.w	loc_FAC8
000104F8 3401                       		move.w	d1,d2
000104FA D442                       		add.w	d2,d2
000104FC 43F8 D000                  		lea	($FFFFD000).w,a1
00010500 0829 0001 0022             		btst	#1,$22(a1)
00010506 6600                       		bne.s	loc_F9FE
00010508 3029 0008                  		move.w	8(a1),d0
0001050C 9068 0008                  		sub.w	8(a0),d0
00010510 D041                       		add.w	d1,d0
00010512 6B00                       		bmi.s	loc_F9FE
00010514 B042                       		cmp.w	d2,d0
00010516 6500                       		bcs.s	loc_FA12
00010518                            
00010518                            loc_F9FE:
00010518 08A9 0003 0022             		bclr	#3,$22(a1)
0001051E 08A8 0003 0022             		bclr	#3,$22(a0)
00010524 4228 0025                  		clr.b	$25(a0)
00010528 7800                       		moveq	#0,d4
0001052A 4E75                       		rts	
0001052C                            ; ===========================================================================
0001052C                            
0001052C                            loc_FA12:
0001052C 3404                       		move.w	d4,d2
0001052E 6100 809A                  		bsr.w	MvSonicOnPtfm
00010532 7800                       		moveq	#0,d4
00010534 4E75                       		rts	
00010536                            ; ===========================================================================
00010536                            
00010536                            SolidObject71:				; XREF: Obj71_Solid
00010536 4A28 0025                  		tst.b	$25(a0)
0001053A 6700 0000                  		beq.w	loc_FAD0
0001053E 3401                       		move.w	d1,d2
00010540 D442                       		add.w	d2,d2
00010542 43F8 D000                  		lea	($FFFFD000).w,a1
00010546 0829 0001 0022             		btst	#1,$22(a1)
0001054C 6600                       		bne.s	loc_FA44
0001054E 3029 0008                  		move.w	8(a1),d0
00010552 9068 0008                  		sub.w	8(a0),d0
00010556 D041                       		add.w	d1,d0
00010558 6B00                       		bmi.s	loc_FA44
0001055A B042                       		cmp.w	d2,d0
0001055C 6500                       		bcs.s	loc_FA58
0001055E                            
0001055E                            loc_FA44:
0001055E 08A9 0003 0022             		bclr	#3,$22(a1)
00010564 08A8 0003 0022             		bclr	#3,$22(a0)
0001056A 4228 0025                  		clr.b	$25(a0)
0001056E 7800                       		moveq	#0,d4
00010570 4E75                       		rts	
00010572                            ; ===========================================================================
00010572                            
00010572                            loc_FA58:
00010572 3404                       		move.w	d4,d2
00010574 6100 8054                  		bsr.w	MvSonicOnPtfm
00010578 7800                       		moveq	#0,d4
0001057A 4E75                       		rts	
0001057C                            ; ===========================================================================
0001057C                            
0001057C                            SolidObject2F:				; XREF: Obj2F_Solid
0001057C 43F8 D000                  		lea	($FFFFD000).w,a1
00010580 4A28 0001                  		tst.b	1(a0)
00010584 6A00 0000                  		bpl.w	loc_FB92
00010588 3029 0008                  		move.w	8(a1),d0
0001058C 9068 0008                  		sub.w	8(a0),d0
00010590 D041                       		add.w	d1,d0
00010592 6B00 0000                  		bmi.w	loc_FB92
00010596 3601                       		move.w	d1,d3
00010598 D643                       		add.w	d3,d3
0001059A B043                       		cmp.w	d3,d0
0001059C 6200 0000                  		bhi.w	loc_FB92
000105A0 3A00                       		move.w	d0,d5
000105A2 0828 0000 0001             		btst	#0,1(a0)
000105A8 6700                       		beq.s	loc_FA94
000105AA 4645                       		not.w	d5
000105AC DA43                       		add.w	d3,d5
000105AE                            
000105AE                            loc_FA94:
000105AE E24D                       		lsr.w	#1,d5
000105B0 7600                       		moveq	#0,d3
000105B2 1632 5000                  		move.b	(a2,d5.w),d3
000105B6 9612                       		sub.b	(a2),d3
000105B8 3A28 000C                  		move.w	$C(a0),d5
000105BC 9A43                       		sub.w	d3,d5
000105BE 1629 0016                  		move.b	$16(a1),d3
000105C2 4883                       		ext.w	d3
000105C4 D443                       		add.w	d3,d2
000105C6 3629 000C                  		move.w	$C(a1),d3
000105CA 9645                       		sub.w	d5,d3
000105CC 5843                       		addq.w	#4,d3
000105CE D642                       		add.w	d2,d3
000105D0 6B00 0000                  		bmi.w	loc_FB92
000105D4 3802                       		move.w	d2,d4
000105D6 D844                       		add.w	d4,d4
000105D8 B644                       		cmp.w	d4,d3
000105DA 6400 0000                  		bcc.w	loc_FB92
000105DE 6000 0000                  		bra.w	loc_FB0E
000105E2                            ; ===========================================================================
000105E2                            
000105E2                            loc_FAC8:
000105E2 4A28 0001                  		tst.b	1(a0)
000105E6 6A00 0000                  		bpl.w	loc_FB92
000105EA                            
000105EA                            loc_FAD0:
000105EA 43F8 D000                  		lea	($FFFFD000).w,a1
000105EE 3029 0008                  		move.w	8(a1),d0
000105F2 9068 0008                  		sub.w	8(a0),d0
000105F6 D041                       		add.w	d1,d0
000105F8 6B00 0000                  		bmi.w	loc_FB92
000105FC 3601                       		move.w	d1,d3
000105FE D643                       		add.w	d3,d3
00010600 B043                       		cmp.w	d3,d0
00010602 6200 0000                  		bhi.w	loc_FB92
00010606 1629 0016                  		move.b	$16(a1),d3
0001060A 4883                       		ext.w	d3
0001060C D443                       		add.w	d3,d2
0001060E 3629 000C                  		move.w	$C(a1),d3
00010612 9668 000C                  		sub.w	$C(a0),d3
00010616 5843                       		addq.w	#4,d3
00010618 D642                       		add.w	d2,d3
0001061A 6B00 0000                  		bmi.w	loc_FB92
0001061E 3802                       		move.w	d2,d4
00010620 D844                       		add.w	d4,d4
00010622 B644                       		cmp.w	d4,d3
00010624 6400 0000                  		bcc.w	loc_FB92
00010628                            
00010628                            loc_FB0E:
00010628 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001062C 6B00 0000                  		bmi.w	loc_FB92
00010630 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00010636 6400 0000                  		bcc.w	loc_FB92
0001063A 4A78 FE08                  		tst.w	($FFFFFE08).w
0001063E 6600 0000                  		bne.w	loc_FBAC
00010642 3A00                       		move.w	d0,d5
00010644 B240                       		cmp.w	d0,d1
00010646 6400                       		bcc.s	loc_FB36
00010648 D241                       		add.w	d1,d1
0001064A 9041                       		sub.w	d1,d0
0001064C 3A00                       		move.w	d0,d5
0001064E 4445                       		neg.w	d5
00010650                            
00010650                            loc_FB36:
00010650 3203                       		move.w	d3,d1
00010652 B443                       		cmp.w	d3,d2
00010654 6400                       		bcc.s	loc_FB44
00010656 5943                       		subq.w	#4,d3
00010658 9644                       		sub.w	d4,d3
0001065A 3203                       		move.w	d3,d1
0001065C 4441                       		neg.w	d1
0001065E                            
0001065E                            loc_FB44:
0001065E BA41                       		cmp.w	d1,d5
00010660 6200 0000                  		bhi.w	loc_FBB0
00010664 0C41 0004                  		cmpi.w	#4,d1
00010668 6300                       		bls.s	loc_FB8C
0001066A 4A40                       		tst.w	d0
0001066C 6700                       		beq.s	loc_FB70
0001066E 6B00                       		bmi.s	loc_FB5E
00010670 4A69 0010                  		tst.w	$10(a1)
00010674 6B00                       		bmi.s	loc_FB70
00010676 6000                       		bra.s	loc_FB64
00010678                            ; ===========================================================================
00010678                            
00010678                            loc_FB5E:
00010678 4A69 0010                  		tst.w	$10(a1)
0001067C 6A00                       		bpl.s	loc_FB70
0001067E                            
0001067E                            loc_FB64:
0001067E 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
00010684 337C 0000 0010             		move.w	#0,$10(a1)
0001068A                            
0001068A                            loc_FB70:
0001068A 9169 0008                  		sub.w	d0,8(a1)
0001068E 0829 0001 0022             		btst	#1,$22(a1)
00010694 6600                       		bne.s	loc_FB8C
00010696 08E9 0005 0022             		bset	#5,$22(a1)
0001069C 08E8 0005 0022             		bset	#5,$22(a0)
000106A2 7801                       		moveq	#1,d4
000106A4 4E75                       		rts	
000106A6                            ; ===========================================================================
000106A6                            
000106A6                            loc_FB8C:
000106A6 6100                       		bsr.s	loc_FBA0
000106A8 7801                       		moveq	#1,d4
000106AA 4E75                       		rts	
000106AC                            ; ===========================================================================
000106AC                            
000106AC                            loc_FB92:
000106AC 0828 0005 0022             		btst	#5,$22(a0)
000106B2 6700                       		beq.s	loc_FBAC
000106B4 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
000106BA 6700                       		beq.s	loc_FBA0
000106BC 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
000106C2 6700                       		beq.s	loc_FBA0
000106C4 0C29 001A 001C             		cmp.b	#$1A,$1C(a1)	; check if in hurt animation
000106CA 6700                       		beq.s	loc_FBA0
000106CC 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
000106D2                            
000106D2                            loc_FBA0:
000106D2 08A8 0005 0022             		bclr	#5,$22(a0)
000106D8                            
000106D8 08A9 0005 0022             		bclr	#5,$22(a1)
000106DE                            
000106DE                            loc_FBAC:
000106DE 7800                       		moveq	#0,d4
000106E0 4E75                       		rts	
000106E2                            ; ===========================================================================
000106E2                            
000106E2                            loc_FBB0:
000106E2 4A43                       		tst.w	d3
000106E4 6B00                       		bmi.s	loc_FBBC
000106E6 0C43 0010                  		cmpi.w	#$10,d3
000106EA 6500                       		bcs.s	loc_FBEE
000106EC 60BE                       		bra.s	loc_FB92
000106EE                            ; ===========================================================================
000106EE                            
000106EE                            loc_FBBC:
000106EE 4A69 0012                  		tst.w	$12(a1)
000106F2 6700                       		beq.s	loc_FBD6
000106F4 6A00                       		bpl.s	loc_FBD2
000106F6 4A43                       		tst.w	d3
000106F8 6A00                       		bpl.s	loc_FBD2
000106FA 9769 000C                  		sub.w	d3,$C(a1)
000106FE 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
00010704                            
00010704                            loc_FBD2:
00010704 78FF                       		moveq	#-1,d4
00010706 4E75                       		rts	
00010708                            ; ===========================================================================
00010708                            
00010708                            loc_FBD6:
00010708 0829 0001 0022             		btst	#1,$22(a1)
0001070E 66F4                       		bne.s	loc_FBD2
00010710 2F08                       		move.l	a0,-(sp)
00010712 2049                       		movea.l	a1,a0
00010714 4EB9 0000 0000             		jsr	KillSonic
0001071A 205F                       		movea.l	(sp)+,a0
0001071C 78FF                       		moveq	#-1,d4
0001071E 4E75                       		rts	
00010720                            ; ===========================================================================
00010720                            
00010720                            loc_FBEE:
00010720 5943                       		subq.w	#4,d3
00010722 7200                       		moveq	#0,d1
00010724 1228 0019                  		move.b	$19(a0),d1
00010728 3401                       		move.w	d1,d2
0001072A D442                       		add.w	d2,d2
0001072C D269 0008                  		add.w	8(a1),d1
00010730 9268 0008                  		sub.w	8(a0),d1
00010734 6B00                       		bmi.s	loc_FC28
00010736 B242                       		cmp.w	d2,d1
00010738 6400                       		bcc.s	loc_FC28
0001073A 4A69 0012                  		tst.w	$12(a1)
0001073E 6B00                       		bmi.s	loc_FC28
00010740 9769 000C                  		sub.w	d3,$C(a1)
00010744 5369 000C                  		subq.w	#1,$C(a1)
00010748 6100                       		bsr.s	sub_FC2C
0001074A 117C 0002 0025             		move.b	#2,$25(a0)
00010750 08E8 0003 0022             		bset	#3,$22(a0)
00010756 78FF                       		moveq	#-1,d4
00010758 4E75                       		rts	
0001075A                            ; ===========================================================================
0001075A                            
0001075A                            loc_FC28:
0001075A 7800                       		moveq	#0,d4
0001075C 4E75                       		rts	
0001075E                            ; End of function SolidObject
0001075E                            
0001075E                            
0001075E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001075E                            
0001075E                            
0001075E                            sub_FC2C:				; XREF: SolidObject
0001075E 0829 0003 0022             		btst	#3,$22(a1)
00010764 6700                       		beq.s	loc_FC4E
00010766 7000                       		moveq	#0,d0
00010768 1029 003D                  		move.b	$3D(a1),d0
0001076C ED48                       		lsl.w	#6,d0
0001076E 0680 00FF D000             		addi.l	#$FFD000,d0
00010774 2440                       		movea.l	d0,a2
00010776 08AA 0003 0022             		bclr	#3,$22(a2)
0001077C 422A 0025                  		clr.b	$25(a2)
00010780                            
00010780                            loc_FC4E:
00010780 3008                       		move.w	a0,d0
00010782 0440 D000                  		subi.w	#-$3000,d0
00010786 EC48                       		lsr.w	#6,d0
00010788 0240 007F                  		andi.w	#$7F,d0
0001078C 1340 003D                  		move.b	d0,$3D(a1)
00010790 137C 0000 0026             		move.b	#0,$26(a1)
00010796 337C 0000 0012             		move.w	#0,$12(a1)
0001079C 3369 0010 0014             		move.w	$10(a1),$14(a1)
000107A2 0829 0001 0022             		btst	#1,$22(a1)
000107A8 6700                       		beq.s	loc_FC84
000107AA 2F08                       		move.l	a0,-(sp)
000107AC 2049                       		movea.l	a1,a0
000107AE 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
000107B4 205F                       		movea.l	(sp)+,a0
000107B6                            
000107B6                            loc_FC84:
000107B6 08E9 0003 0022             		bset	#3,$22(a1)
000107BC 08E8 0003 0022             		bset	#3,$22(a0)
000107C2 4E75                       		rts	
000107C4                            ; End of function sub_FC2C
000107C4                            
000107C4                            ; ===========================================================================
000107C4                            ; ---------------------------------------------------------------------------
000107C4                            ; Object 51 - smashable	green block (MZ)
000107C4                            ; ---------------------------------------------------------------------------
000107C4                            
000107C4                            Obj51:					; XREF: Obj_Index
000107C4 7000                       		moveq	#0,d0
000107C6 1028 0024                  		move.b	$24(a0),d0
000107CA 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
000107CE 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
000107D2 6000 F9F4                  		bra.w	MarkObjGone
000107D6                            ; ===========================================================================
000107D6 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
000107D8 0000                       		dc.w Obj51_Solid-Obj51_Index
000107DA 0000                       		dc.w Obj51_Display-Obj51_Index
000107DC                            ; ===========================================================================
000107DC                            
000107DC                            Obj51_Main:				; XREF: Obj51_Index
000107DC 5428 0024                  		addq.b	#2,$24(a0)
000107E0 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
000107E8 317C 42B8 0002             		move.w	#$42B8,2(a0)
000107EE 117C 0004 0001             		move.b	#4,1(a0)
000107F4 117C 0010 0019             		move.b	#$10,$19(a0)
000107FA 117C 0004 0018             		move.b	#4,$18(a0)
00010800 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00010806                            
00010806                            Obj51_Solid:				; XREF: Obj51_Index
00010806 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
0001080C 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
00010812 323C 001B                  		move.w	#$1B,d1
00010816 343C 0010                  		move.w	#$10,d2
0001081A 363C 0011                  		move.w	#$11,d3
0001081E 3828 0008                  		move.w	8(a0),d4
00010822 6100 FCCC                  		bsr.w	SolidObject
00010826 0828 0003 0022             		btst	#3,$22(a0)
0001082C 6600                       		bne.s	Obj51_Smash
0001082E                            
0001082E                            locret_FCFC:
0001082E 4E75                       		rts	
00010830                            ; ===========================================================================
00010830                            
00010830                            Obj51_Smash:				; XREF: Obj51_Solid
00010830 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
00010836 66F6                       		bne.s	locret_FCFC	; if not, branch
00010838 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
0001083E 08E9 0002 0022             		bset	#2,$22(a1)
00010844 137C 000E 0016             		move.b	#$E,$16(a1)
0001084A 137C 0007 0017             		move.b	#7,$17(a1)
00010850 137C 0002 001C             		move.b	#2,$1C(a1)
00010856 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
0001085C 08E9 0001 0022             		bset	#1,$22(a1)
00010862 08A9 0003 0022             		bclr	#3,$22(a1)
00010868 137C 0002 0024             		move.b	#2,$24(a1)
0001086E 08A8 0003 0022             		bclr	#3,$22(a0)
00010874 4228 0025                  		clr.b	$25(a0)
00010878 117C 0001 001A             		move.b	#1,$1A(a0)
0001087E 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
00010884 7203                       		moveq	#3,d1		; set number of	fragments to 4
00010886 343C 0038                  		move.w	#$38,d2
0001088A 6100 D460                  		bsr.w	SmashObject
0001088E 6100 DD0C                  		bsr.w	SingleObjLoad
00010892 6600                       		bne.s	Obj51_Display
00010894 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00010898 3368 0008 0008             		move.w	8(a0),8(a1)
0001089E 3368 000C 000C             		move.w	$C(a0),$C(a1)
000108A4 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
000108A8 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
000108AC 0C42 0006                  		cmpi.w	#6,d2
000108B0 6500                       		bcs.s	Obj51_Bonus
000108B2 7406                       		moveq	#6,d2
000108B4                            
000108B4                            Obj51_Bonus:
000108B4 7000                       		moveq	#0,d0
000108B6 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
000108BA 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
000108C0 6500                       		bcs.s	loc_FD98	; if not, branch
000108C2 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
000108C6 740A                       		moveq	#10,d2
000108C8                            
000108C8                            loc_FD98:
000108C8 4EB9 0000 0000             		jsr	AddPoints
000108CE E24A                       		lsr.w	#1,d2
000108D0 1342 001A                  		move.b	d2,$1A(a1)
000108D4                            
000108D4                            Obj51_Display:				; XREF: Obj51_Index
000108D4 6100 D80A                  		bsr.w	SpeedToPos
000108D8 0668 0038 0012             		addi.w	#$38,$12(a0)
000108DE 6100 D826                  		bsr.w	DisplaySprite
000108E2 4A28 0001                  		tst.b	1(a0)
000108E6 6A00 D85A                  		bpl.w	DeleteObject
000108EA 4E75                       		rts	
000108EC                            ; ===========================================================================
000108EC FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
000108F0 FF00 FF00                  		dc.w $FF00, $FF00
000108F4 0200 FE00                  		dc.w $200, $FE00
000108F8 0100 FF00                  		dc.w $100, $FF00
000108FC                            
000108FC 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
00010904                            ; ---------------------------------------------------------------------------
00010904                            ; Sprite mappings - smashable green block (MZ)
00010904                            ; ---------------------------------------------------------------------------
00010904                            Map_obj51:
00010904                            	include "_maps\obj51.asm"
00010904                            ; ---------------------------------------------------------------------------
00010904                            ; Sprite mappings - smashable green block (MZ)
00010904                            ; ---------------------------------------------------------------------------
00010904 0000                       		dc.w byte_FDD8-Map_obj51
00010906 0000                       		dc.w byte_FDE3-Map_obj51
00010908 02                         byte_FDD8:	dc.b 2
00010909 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
0001090E 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
00010913 04                         byte_FDE3:	dc.b 4
00010914 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
00010919 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
0001091E F005 8000 00               		dc.b $F0, 5, $80, 0, 0
00010923 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00010928                            		even
00010928                            		even
00010928                            
00010928                            ; ===========================================================================
00010928                            ; ---------------------------------------------------------------------------
00010928                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00010928                            ; ---------------------------------------------------------------------------
00010928                            
00010928                            Obj52:					; XREF: Obj_Index
00010928 7000                       		moveq	#0,d0
0001092A 1028 0024                  		move.b	$24(a0),d0
0001092E 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
00010932 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
00010936                            ; ===========================================================================
00010936 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
00010938 0000                       		dc.w Obj52_Platform-Obj52_Index
0001093A 0000                       		dc.w Obj52_StandOn-Obj52_Index
0001093C                            
0001093C 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
0001093E 2001                       		dc.b $20, 1
00010940 2002                       		dc.b $20, 2
00010942 4003                       		dc.b $40, 3
00010944 3004                       		dc.b $30, 4
00010946                            ; ===========================================================================
00010946                            
00010946                            Obj52_Main:				; XREF: Obj52_Index
00010946 5428 0024                  		addq.b	#2,$24(a0)
0001094A 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
00010952 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010958 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001095E 6600                       		bne.s	loc_FE44
00010960 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00010968 317C 43BC 0002             		move.w	#$43BC,2(a0)
0001096E 117C 0007 0016             		move.b	#7,$16(a0)
00010974                            
00010974                            loc_FE44:
00010974 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0001097A 6600                       		bne.s	loc_FE60
0001097C 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
00010982 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
00010988 6700                       		beq.s	loc_FE60	; if yes, branch
0001098A 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
00010990                            
00010990                            loc_FE60:
00010990 117C 0004 0001             		move.b	#4,1(a0)
00010996 7000                       		moveq	#0,d0
00010998 1028 0028                  		move.b	$28(a0),d0
0001099C E648                       		lsr.w	#3,d0
0001099E 0240 001E                  		andi.w	#$1E,d0
000109A2 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
000109A6 115A 0019                  		move.b	(a2)+,$19(a0)
000109AA 115A 001A                  		move.b	(a2)+,$1A(a0)
000109AE 117C 0004 0018             		move.b	#4,$18(a0)
000109B4 3168 0008 0030             		move.w	8(a0),$30(a0)
000109BA 3168 000C 0032             		move.w	$C(a0),$32(a0)
000109C0 0228 000F 0028             		andi.b	#$F,$28(a0)
000109C6                            
000109C6                            Obj52_Platform:				; XREF: Obj52_Index
000109C6 6100 0000                  		bsr.w	Obj52_Move
000109CA 7200                       		moveq	#0,d1
000109CC 1228 0019                  		move.b	$19(a0),d1
000109D0 4EB9 0000 7EF8             		jsr	(PlatformObject).l
000109D6 6000                       		bra.s	Obj52_ChkDel
000109D8                            ; ===========================================================================
000109D8                            
000109D8                            Obj52_StandOn:				; XREF: Obj52_Index
000109D8 7200                       		moveq	#0,d1
000109DA 1228 0019                  		move.b	$19(a0),d1
000109DE 4EB9 0000 806C             		jsr	(ExitPlatform).l
000109E4 3F28 0008                  		move.w	8(a0),-(sp)
000109E8 6100 0000                  		bsr.w	Obj52_Move
000109EC 341F                       		move.w	(sp)+,d2
000109EE 4EB9 0000 85D6             		jsr	(MvSonicOnPtfm2).l
000109F4                            
000109F4                            Obj52_ChkDel:				; XREF: Obj52_Platform
000109F4 3028 0030                  		move.w	$30(a0),d0
000109F8 0240 FF80                  		andi.w	#$FF80,d0
000109FC 3238 F700                  		move.w	($FFFFF700).w,d1
00010A00 0441 0080                  		subi.w	#$80,d1
00010A04 0241 FF80                  		andi.w	#$FF80,d1
00010A08 9041                       		sub.w	d1,d0
00010A0A 0C40 0280                  		cmpi.w	#$280,d0
00010A0E 6200 D732                  		bhi.w	DeleteObject
00010A12 6000 D6F2                  		bra.w	DisplaySprite
00010A16                            ; ===========================================================================
00010A16                            
00010A16                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
00010A16 7000                       		moveq	#0,d0
00010A18 1028 0028                  		move.b	$28(a0),d0
00010A1C 0240 000F                  		andi.w	#$F,d0
00010A20 D040                       		add.w	d0,d0
00010A22 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
00010A26 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
00010A2A                            ; ===========================================================================
00010A2A 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00010A2E 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
00010A32 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
00010A36 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00010A3A 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00010A3E 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00010A40                            ; ===========================================================================
00010A40                            
00010A40                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00010A40 4E75                       		rts	
00010A42                            ; ===========================================================================
00010A42                            
00010A42                            Obj52_Type01:				; XREF: Obj52_TypeIndex
00010A42 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010A46 323C 0060                  		move.w	#$60,d1
00010A4A 0828 0000 0022             		btst	#0,$22(a0)
00010A50 6700                       		beq.s	loc_FF26
00010A52 4440                       		neg.w	d0
00010A54 D041                       		add.w	d1,d0
00010A56                            
00010A56                            loc_FF26:
00010A56 3228 0030                  		move.w	$30(a0),d1
00010A5A 9240                       		sub.w	d0,d1
00010A5C 3141 0008                  		move.w	d1,8(a0)
00010A60 4E75                       		rts	
00010A62                            ; ===========================================================================
00010A62                            
00010A62                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00010A62 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00010A68 6600                       		bne.s	Obj52_02_Wait
00010A6A 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00010A6E                            
00010A6E                            Obj52_02_Wait:
00010A6E 4E75                       		rts	
00010A70                            ; ===========================================================================
00010A70                            
00010A70                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00010A70 7600                       		moveq	#0,d3
00010A72 1628 0019                  		move.b	$19(a0),d3
00010A76 6100 0000                  		bsr.w	ObjHitWallRight
00010A7A 4A41                       		tst.w	d1		; has the platform hit a wall?
00010A7C 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00010A7E 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010A82 3168 0008 0030             		move.w	8(a0),$30(a0)
00010A88 4E75                       		rts	
00010A8A                            ; ===========================================================================
00010A8A                            
00010A8A                            Obj52_03_End:
00010A8A 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
00010A8E 4E75                       		rts	
00010A90                            ; ===========================================================================
00010A90                            
00010A90                            Obj52_Type05:				; XREF: Obj52_TypeIndex
00010A90 7600                       		moveq	#0,d3
00010A92 1628 0019                  		move.b	$19(a0),d3
00010A96 6100 0000                  		bsr.w	ObjHitWallRight
00010A9A 4A41                       		tst.w	d1		; has the platform hit a wall?
00010A9C 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
00010A9E 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010AA2 3168 0008 0030             		move.w	8(a0),$30(a0)
00010AA8 4E75                       		rts	
00010AAA                            ; ===========================================================================
00010AAA                            
00010AAA                            Obj52_05_End:
00010AAA 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
00010AAE 4E75                       		rts	
00010AB0                            ; ===========================================================================
00010AB0                            
00010AB0                            Obj52_Type06:				; XREF: Obj52_TypeIndex
00010AB0 6100 D62E                  		bsr.w	SpeedToPos
00010AB4 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
00010ABA 6100 0000                  		bsr.w	ObjHitFloor
00010ABE 4A41                       		tst.w	d1		; has platform hit the floor?
00010AC0 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00010AC4 D368 000C                  		add.w	d1,$C(a0)
00010AC8 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00010ACC 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
00010AD0                            
00010AD0                            locret_FFA0:
00010AD0 4E75                       		rts	
00010AD2                            ; ===========================================================================
00010AD2                            
00010AD2                            Obj52_Type07:				; XREF: Obj52_TypeIndex
00010AD2 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
00010AD6 6700                       		beq.s	Obj52_07_ChkDel
00010AD8 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
00010ADC                            
00010ADC                            Obj52_07_ChkDel:
00010ADC 588F                       		addq.l	#4,sp
00010ADE 3028 0030                  		move.w	$30(a0),d0
00010AE2 0240 FF80                  		andi.w	#$FF80,d0
00010AE6 3238 F700                  		move.w	($FFFFF700).w,d1
00010AEA 0441 0080                  		subi.w	#$80,d1
00010AEE 0241 FF80                  		andi.w	#$FF80,d1
00010AF2 9041                       		sub.w	d1,d0
00010AF4 0C40 0280                  		cmpi.w	#$280,d0
00010AF8 6200 D648                  		bhi.w	DeleteObject
00010AFC 4E75                       		rts	
00010AFE                            ; ===========================================================================
00010AFE                            
00010AFE                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00010AFE 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010B02 323C 0080                  		move.w	#$80,d1
00010B06 0828 0000 0022             		btst	#0,$22(a0)
00010B0C 6700                       		beq.s	loc_FFE2
00010B0E 4440                       		neg.w	d0
00010B10 D041                       		add.w	d1,d0
00010B12                            
00010B12                            loc_FFE2:
00010B12 3228 0032                  		move.w	$32(a0),d1
00010B16 9240                       		sub.w	d0,d1
00010B18 3141 000C                  		move.w	d1,$C(a0)
00010B1C 4E75                       		rts	
00010B1E                            ; ===========================================================================
00010B1E                            
00010B1E                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00010B1E 7600                       		moveq	#0,d3
00010B20 1628 0019                  		move.b	$19(a0),d3
00010B24 D643                       		add.w	d3,d3
00010B26 7208                       		moveq	#8,d1
00010B28 0828 0000 0022             		btst	#0,$22(a0)
00010B2E 6700                       		beq.s	loc_10004
00010B30 4441                       		neg.w	d1
00010B32 4443                       		neg.w	d3
00010B34                            
00010B34                            loc_10004:
00010B34 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00010B38 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00010B3A 3028 0008                  		move.w	8(a0),d0
00010B3E 9068 0030                  		sub.w	$30(a0),d0
00010B42 B043                       		cmp.w	d3,d0
00010B44 6700                       		beq.s	Obj52_0A_Wait
00010B46 D368 0008                  		add.w	d1,8(a0)	; move platform
00010B4A 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00010B50 4E75                       		rts	
00010B52                            ; ===========================================================================
00010B52                            
00010B52                            Obj52_0A_Wait:
00010B52 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00010B56 6600                       		bne.s	locret_1002E	; if time remains, branch
00010B58 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00010B5E                            
00010B5E                            locret_1002E:
00010B5E 4E75                       		rts	
00010B60                            ; ===========================================================================
00010B60                            
00010B60                            Obj52_0A_Back:
00010B60 3028 0008                  		move.w	8(a0),d0
00010B64 9068 0030                  		sub.w	$30(a0),d0
00010B68 6700                       		beq.s	Obj52_0A_Reset
00010B6A 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00010B6E 4E75                       		rts	
00010B70                            ; ===========================================================================
00010B70                            
00010B70                            Obj52_0A_Reset:
00010B70 4268 0036                  		clr.w	$36(a0)
00010B74 5328 0028                  		subq.b	#1,$28(a0)
00010B78 4E75                       		rts	
00010B7A                            ; ===========================================================================
00010B7A                            ; ---------------------------------------------------------------------------
00010B7A                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010B7A                            ; ---------------------------------------------------------------------------
00010B7A                            Map_obj52:
00010B7A                            	include "_maps\obj52mz.asm"
00010B7A                            ; ---------------------------------------------------------------------------
00010B7A                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010B7A                            ; ---------------------------------------------------------------------------
00010B7A 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00010B7E 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00010B82 0000                       		dc.w byte_1008F-Map_obj52
00010B84 01                         byte_10054:	dc.b 1
00010B85 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010B8A 02                         byte_1005A:	dc.b 2
00010B8B F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00010B90 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00010B95 04                         byte_10065:	dc.b 4
00010B96 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00010B9B 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00010BA0 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00010BA5 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00010BAA 04                         byte_1007A:	dc.b 4
00010BAB F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00010BB0 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00010BB5 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00010BBA F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00010BBF 03                         byte_1008F:	dc.b 3
00010BC0 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00010BC5 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010BCA F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00010BD0 00                         		even
00010BD0 00                         		even
00010BD0                            
00010BD0                            ; ---------------------------------------------------------------------------
00010BD0                            ; Sprite mappings - moving block (LZ)
00010BD0                            ; ---------------------------------------------------------------------------
00010BD0                            Map_obj52a:
00010BD0                            	include "_maps\obj52lz.asm"
00010BD0                            ; ---------------------------------------------------------------------------
00010BD0                            ; Sprite mappings - moving block (LZ)
00010BD0                            ; ---------------------------------------------------------------------------
00010BD0 0000                       		dc.w byte_100A2-Map_obj52a
00010BD2 01                         byte_100A2:	dc.b 1
00010BD3 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00010BD8                            		even
00010BD8                            		even
00010BD8                            
00010BD8                            ; ===========================================================================
00010BD8                            ; ---------------------------------------------------------------------------
00010BD8                            ; Object 55 - Basaran enemy (MZ)
00010BD8                            ; ---------------------------------------------------------------------------
00010BD8                            
00010BD8                            Obj55:					; XREF: Obj_Index
00010BD8 7000                       		moveq	#0,d0
00010BDA 1028 0024                  		move.b	$24(a0),d0
00010BDE 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00010BE2 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00010BE6                            ; ===========================================================================
00010BE6 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00010BE8 0000                       		dc.w Obj55_Action-Obj55_Index
00010BEA                            ; ===========================================================================
00010BEA                            
00010BEA                            Obj55_Main:				; XREF: Obj55_Index
00010BEA 5428 0024                  		addq.b	#2,$24(a0)
00010BEE 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00010BF6 317C 84B8 0002             		move.w	#$84B8,2(a0)
00010BFC 117C 0004 0001             		move.b	#4,1(a0)
00010C02 117C 000C 0016             		move.b	#$C,$16(a0)
00010C08 117C 0002 0018             		move.b	#2,$18(a0)
00010C0E 117C 000B 0020             		move.b	#$B,$20(a0)
00010C14 117C 0010 0019             		move.b	#$10,$19(a0)
00010C1A                            
00010C1A                            Obj55_Action:				; XREF: Obj55_Index
00010C1A 7000                       		moveq	#0,d0
00010C1C 1028 0025                  		move.b	$25(a0),d0
00010C20 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00010C24 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00010C28 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00010C2E 6100 A5E8                  		bsr.w	AnimateSprite
00010C32 6000 F594                  		bra.w	MarkObjGone
00010C36                            ; ===========================================================================
00010C36 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00010C38 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00010C3A 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00010C3C 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00010C3E                            ; ===========================================================================
00010C3E                            
00010C3E                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00010C3E 343C 0080                  		move.w	#$80,d2
00010C42 6100 0000                  		bsr.w	Obj55_ChkSonic
00010C46 6400                       		bcc.s	Obj55_NoDrop
00010C48 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010C4C 3140 0036                  		move.w	d0,$36(a0)
00010C50 9068 000C                  		sub.w	$C(a0),d0
00010C54 6500                       		bcs.s	Obj55_NoDrop
00010C56 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00010C5A 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00010C5C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00010C60 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00010C62 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010C66 D007                       		add.b	d7,d0
00010C68 0200 0007                  		andi.b	#7,d0
00010C6C 6600                       		bne.s	Obj55_NoDrop
00010C6E 117C 0001 001C             		move.b	#1,$1C(a0)
00010C74 5428 0025                  		addq.b	#2,$25(a0)
00010C78                            
00010C78                            Obj55_NoDrop:
00010C78 4E75                       		rts	
00010C7A                            ; ===========================================================================
00010C7A                            
00010C7A                            Obj55_DropFly:				; XREF: Obj55_Index2
00010C7A 6100 D464                  		bsr.w	SpeedToPos
00010C7E 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
00010C84 343C 0080                  		move.w	#$80,d2
00010C88 6100 0000                  		bsr.w	Obj55_ChkSonic
00010C8C 3028 0036                  		move.w	$36(a0),d0
00010C90 9068 000C                  		sub.w	$C(a0),d0
00010C94 6500                       		bcs.s	Obj55_ChkDel
00010C96 0C40 0010                  		cmpi.w	#$10,d0
00010C9A 6400                       		bcc.s	locret_10180
00010C9C 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00010CA0 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00010CA6 117C 0002 001C             		move.b	#2,$1C(a0)
00010CAC 5428 0025                  		addq.b	#2,$25(a0)
00010CB0                            
00010CB0                            locret_10180:
00010CB0 4E75                       		rts	
00010CB2                            ; ===========================================================================
00010CB2                            
00010CB2                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00010CB2 4A28 0001                  		tst.b	1(a0)
00010CB6 6A00 D48A                  		bpl.w	DeleteObject
00010CBA 4E75                       		rts	
00010CBC                            ; ===========================================================================
00010CBC                            
00010CBC                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00010CBC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010CC0 0200 000F                  		andi.b	#$F,d0
00010CC4 6600                       		bne.s	loc_101A0
00010CC6 303C 00C0                  		move.w	#$C0,d0
00010CCA 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play flapping sound
00010CD0                            
00010CD0                            loc_101A0:
00010CD0 6100 D40E                  		bsr.w	SpeedToPos
00010CD4 3038 D008                  		move.w	($FFFFD008).w,d0
00010CD8 9068 0008                  		sub.w	8(a0),d0
00010CDC 6400                       		bcc.s	loc_101B0
00010CDE 4440                       		neg.w	d0
00010CE0                            
00010CE0                            loc_101B0:
00010CE0 0C40 0080                  		cmpi.w	#$80,d0
00010CE4 6500                       		bcs.s	locret_101C6
00010CE6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010CEA D007                       		add.b	d7,d0
00010CEC 0200 0007                  		andi.b	#7,d0
00010CF0 6600                       		bne.s	locret_101C6
00010CF2 5428 0025                  		addq.b	#2,$25(a0)
00010CF6                            
00010CF6                            locret_101C6:
00010CF6 4E75                       		rts	
00010CF8                            ; ===========================================================================
00010CF8                            
00010CF8                            Obj55_FlyUp:				; XREF: Obj55_Index2
00010CF8 6100 D3E6                  		bsr.w	SpeedToPos
00010CFC 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00010D02 6100 0000                  		bsr.w	ObjHitCeiling
00010D06 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00010D08 6A00                       		bpl.s	locret_101F4	; if not, branch
00010D0A 9368 000C                  		sub.w	d1,$C(a0)
00010D0E 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010D14 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00010D18 4268 0012                  		clr.w	$12(a0)
00010D1C 4228 001C                  		clr.b	$1C(a0)
00010D20 4228 0025                  		clr.b	$25(a0)
00010D24                            
00010D24                            locret_101F4:
00010D24 4E75                       		rts	
00010D26                            ; ===========================================================================
00010D26                            
00010D26                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00010D26 323C 0100                  		move.w	#$100,d1
00010D2A 08E8 0000 0022             		bset	#0,$22(a0)
00010D30 3038 D008                  		move.w	($FFFFD008).w,d0
00010D34 9068 0008                  		sub.w	8(a0),d0
00010D38 6400                       		bcc.s	loc_10214
00010D3A 4440                       		neg.w	d0
00010D3C 4441                       		neg.w	d1
00010D3E 08A8 0000 0022             		bclr	#0,$22(a0)
00010D44                            
00010D44                            loc_10214:
00010D44 B042                       		cmp.w	d2,d0
00010D46 4E75                       		rts	
00010D48                            ; ===========================================================================
00010D48 6100 D396                  		bsr.w	SpeedToPos
00010D4C 6100 D3B8                  		bsr.w	DisplaySprite
00010D50 4A28 0001                  		tst.b	1(a0)
00010D54 6A00 D3EC                  		bpl.w	DeleteObject
00010D58 4E75                       		rts	
00010D5A                            ; ===========================================================================
00010D5A                            Ani_obj55:
00010D5A                            	include "_anim\obj55.asm"
00010D5A                            ; ---------------------------------------------------------------------------
00010D5A                            ; Animation script - Basaran enemy
00010D5A                            ; ---------------------------------------------------------------------------
00010D5A 0000                       		dc.w byte_10230-Ani_obj55
00010D5C 0000                       		dc.w byte_10234-Ani_obj55
00010D5E 0000                       		dc.w byte_10238-Ani_obj55
00010D60 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00010D64 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00010D68 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00010D6E                            		even
00010D6E                            		even
00010D6E                            
00010D6E                            ; ---------------------------------------------------------------------------
00010D6E                            ; Sprite mappings - Basaran enemy (MZ)
00010D6E                            ; ---------------------------------------------------------------------------
00010D6E                            Map_obj55:
00010D6E                            	include "_maps\obj55.asm"
00010D6E                            ; ---------------------------------------------------------------------------
00010D6E                            ; Sprite mappings - Basaran enemy (MZ)
00010D6E                            ; ---------------------------------------------------------------------------
00010D6E 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00010D72 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00010D76 01                         byte_10246:	dc.b 1
00010D77 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00010D7C 03                         byte_1024C:	dc.b 3
00010D7D F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00010D82 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00010D87 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00010D8C 04                         byte_1025C:	dc.b 4
00010D8D F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00010D92 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00010D97 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00010D9C 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00010DA1 04                         byte_10271:	dc.b 4
00010DA2 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00010DA7 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00010DAC 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00010DB1 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00010DB6                            		even
00010DB6                            		even
00010DB6                            
00010DB6                            ; ===========================================================================
00010DB6                            ; ---------------------------------------------------------------------------
00010DB6                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00010DB6                            ; ---------------------------------------------------------------------------
00010DB6                            
00010DB6                            Obj56:					; XREF: Obj_Index
00010DB6 7000                       		moveq	#0,d0
00010DB8 1028 0024                  		move.b	$24(a0),d0
00010DBC 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010DC0 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010DC4                            ; ===========================================================================
00010DC4 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00010DC6 0000                       		dc.w Obj56_Action-Obj56_Index
00010DC8                            
00010DC8 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00010DCA 2020                       		dc.b  $20, $20
00010DCC 1020                       		dc.b  $10, $20
00010DCE 201A                       		dc.b  $20, $1A
00010DD0 1027                       		dc.b  $10, $27
00010DD2 1010                       		dc.b  $10, $10
00010DD4 0820                       		dc.b	8, $20
00010DD6 4010                       		dc.b  $40, $10
00010DD8                            ; ===========================================================================
00010DD8                            
00010DD8                            Obj56_Main:				; XREF: Obj56_Index
00010DD8 5428 0024                  		addq.b	#2,$24(a0)
00010DDC 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010DE4 317C 4000 0002             		move.w	#$4000,2(a0)
00010DEA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010DF0 6600                       		bne.s	loc_102C8
00010DF2 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010DF8                            
00010DF8                            loc_102C8:
00010DF8 117C 0004 0001             		move.b	#4,1(a0)
00010DFE 117C 0003 0018             		move.b	#3,$18(a0)
00010E04 7000                       		moveq	#0,d0
00010E06 1028 0028                  		move.b	$28(a0),d0
00010E0A E648                       		lsr.w	#3,d0
00010E0C 0240 000E                  		andi.w	#$E,d0
00010E10 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010E14 115A 0019                  		move.b	(a2)+,$19(a0)
00010E18 1152 0016                  		move.b	(a2),$16(a0)
00010E1C E248                       		lsr.w	#1,d0
00010E1E 1140 001A                  		move.b	d0,$1A(a0)
00010E22 3168 0008 0034             		move.w	8(a0),$34(a0)
00010E28 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010E2E 7000                       		moveq	#0,d0
00010E30 1012                       		move.b	(a2),d0
00010E32 D040                       		add.w	d0,d0
00010E34 3140 003A                  		move.w	d0,$3A(a0)
00010E38 7000                       		moveq	#0,d0
00010E3A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010E40 6700                       		beq.s	loc_10332
00010E42 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010E46 0240 000F                  		andi.w	#$F,d0
00010E4A 5140                       		subq.w	#8,d0
00010E4C 6500                       		bcs.s	loc_10332
00010E4E E548                       		lsl.w	#2,d0
00010E50 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010E54 45F2 0000                  		lea	(a2,d0.w),a2
00010E58 4A52                       		tst.w	(a2)
00010E5A 6A00                       		bpl.s	loc_10332
00010E5C 0868 0000 0022             		bchg	#0,$22(a0)
00010E62                            
00010E62                            loc_10332:
00010E62 1028 0028                  		move.b	$28(a0),d0
00010E66 6A00                       		bpl.s	Obj56_Action
00010E68 0200 000F                  		andi.b	#$F,d0
00010E6C 1140 003C                  		move.b	d0,$3C(a0)
00010E70 117C 0005 0028             		move.b	#5,$28(a0)
00010E76 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00010E7C 6600                       		bne.s	Obj56_ChkGone
00010E7E 117C 000C 0028             		move.b	#$C,$28(a0)
00010E84 317C 0080 003A             		move.w	#$80,$3A(a0)
00010E8A                            
00010E8A                            Obj56_ChkGone:
00010E8A 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010E8E 7000                       		moveq	#0,d0
00010E90 1028 0023                  		move.b	$23(a0),d0
00010E94 6700                       		beq.s	Obj56_Action
00010E96 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010E9C 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010EA2 6700                       		beq.s	Obj56_Action
00010EA4 5228 0028                  		addq.b	#1,$28(a0)
00010EA8 4268 003A                  		clr.w	$3A(a0)
00010EAC                            
00010EAC                            Obj56_Action:				; XREF: Obj56_Index
00010EAC 3F28 0008                  		move.w	8(a0),-(sp)
00010EB0 7000                       		moveq	#0,d0
00010EB2 1028 0028                  		move.b	$28(a0),d0	; get object type
00010EB6 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010EBA D040                       		add.w	d0,d0
00010EBC 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010EC0 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010EC4 381F                       		move.w	(sp)+,d4
00010EC6 4A28 0001                  		tst.b	1(a0)
00010ECA 6A00                       		bpl.s	Obj56_ChkDel
00010ECC 7200                       		moveq	#0,d1
00010ECE 1228 0019                  		move.b	$19(a0),d1
00010ED2 0641 000B                  		addi.w	#$B,d1
00010ED6 7400                       		moveq	#0,d2
00010ED8 1428 0016                  		move.b	$16(a0),d2
00010EDC 3602                       		move.w	d2,d3
00010EDE 5243                       		addq.w	#1,d3
00010EE0 6100 F60E                  		bsr.w	SolidObject
00010EE4                            
00010EE4                            Obj56_ChkDel:
00010EE4 3028 0034                  		move.w	$34(a0),d0
00010EE8 0240 FF80                  		andi.w	#$FF80,d0
00010EEC 3238 F700                  		move.w	($FFFFF700).w,d1
00010EF0 0441 0080                  		subi.w	#$80,d1
00010EF4 0241 FF80                  		andi.w	#$FF80,d1
00010EF8 9041                       		sub.w	d1,d0
00010EFA 0C40 0280                  		cmpi.w	#$280,d0
00010EFE 6200 D242                  		bhi.w	DeleteObject
00010F02 6000 D202                  		bra.w	DisplaySprite
00010F06                            ; ===========================================================================
00010F06 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010F0A 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010F0E 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010F12 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010F16 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010F1A 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010F1E 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010F22                            ; ===========================================================================
00010F22                            
00010F22                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010F22 4E75                       		rts	
00010F24                            ; ===========================================================================
00010F24                            
00010F24                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010F24 323C 0040                  		move.w	#$40,d1
00010F28 7000                       		moveq	#0,d0
00010F2A 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010F2E 6000                       		bra.s	Obj56_Move_LR
00010F30                            ; ===========================================================================
00010F30                            
00010F30                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010F30 323C 0080                  		move.w	#$80,d1
00010F34 7000                       		moveq	#0,d0
00010F36 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010F3A                            
00010F3A                            Obj56_Move_LR:
00010F3A 0828 0000 0022             		btst	#0,$22(a0)
00010F40 6700                       		beq.s	loc_10416
00010F42 4440                       		neg.w	d0
00010F44 D041                       		add.w	d1,d0
00010F46                            
00010F46                            loc_10416:
00010F46 3228 0034                  		move.w	$34(a0),d1
00010F4A 9240                       		sub.w	d0,d1
00010F4C 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010F50 4E75                       		rts	
00010F52                            ; ===========================================================================
00010F52                            
00010F52                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010F52 323C 0040                  		move.w	#$40,d1
00010F56 7000                       		moveq	#0,d0
00010F58 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010F5C 6000                       		bra.s	Obj56_Move_UD
00010F5E                            ; ===========================================================================
00010F5E                            
00010F5E                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00010F5E 323C 0080                  		move.w	#$80,d1
00010F62 7000                       		moveq	#0,d0
00010F64 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010F68                            
00010F68                            Obj56_Move_UD:
00010F68 0828 0000 0022             		btst	#0,$22(a0)
00010F6E 6700                       		beq.s	loc_10444
00010F70 4440                       		neg.w	d0
00010F72 D041                       		add.w	d1,d0
00010F74                            
00010F74                            loc_10444:
00010F74 3228 0030                  		move.w	$30(a0),d1
00010F78 9240                       		sub.w	d0,d1
00010F7A 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010F7E 4E75                       		rts	
00010F80                            ; ===========================================================================
00010F80                            
00010F80                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00010F80 4A28 0038                  		tst.b	$38(a0)
00010F84 6600                       		bne.s	loc_104A4
00010F86 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010F8C 6600                       		bne.s	loc_1047A	; if not, branch
00010F8E 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010F94 6600                       		bne.s	loc_1047A
00010F96 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010F9A 3038 D008                  		move.w	($FFFFD008).w,d0
00010F9E B068 0008                  		cmp.w	8(a0),d0
00010FA2 6400                       		bcc.s	loc_1047A
00010FA4 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010FAA                            
00010FAA                            loc_1047A:
00010FAA 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010FAE 7000                       		moveq	#0,d0
00010FB0 1028 003C                  		move.b	$3C(a0),d0
00010FB4 0832 0000 0000             		btst	#0,(a2,d0.w)
00010FBA 6700                       		beq.s	loc_104AE
00010FBC 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010FC2 6600                       		bne.s	loc_1049E	; if not, branch
00010FC4 0C00 0003                  		cmpi.b	#3,d0
00010FC8 6600                       		bne.s	loc_1049E
00010FCA 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010FCE                            
00010FCE                            loc_1049E:
00010FCE 117C 0001 0038             		move.b	#1,$38(a0)
00010FD4                            
00010FD4                            loc_104A4:
00010FD4 4A68 003A                  		tst.w	$3A(a0)
00010FD8 6700                       		beq.s	loc_104C8
00010FDA 5568 003A                  		subq.w	#2,$3A(a0)
00010FDE                            
00010FDE                            loc_104AE:
00010FDE 3028 003A                  		move.w	$3A(a0),d0
00010FE2 0828 0000 0022             		btst	#0,$22(a0)
00010FE8 6700                       		beq.s	loc_104BC
00010FEA 4440                       		neg.w	d0
00010FEC                            
00010FEC                            loc_104BC:
00010FEC 3228 0030                  		move.w	$30(a0),d1
00010FF0 D240                       		add.w	d0,d1
00010FF2 3141 000C                  		move.w	d1,$C(a0)
00010FF6 4E75                       		rts	
00010FF8                            ; ===========================================================================
00010FF8                            
00010FF8                            loc_104C8:
00010FF8 5228 0028                  		addq.b	#1,$28(a0)
00010FFC 4228 0038                  		clr.b	$38(a0)
00011000 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011004 7000                       		moveq	#0,d0
00011006 1028 0023                  		move.b	$23(a0),d0
0001100A 67D2                       		beq.s	loc_104AE
0001100C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00011012 60CA                       		bra.s	loc_104AE
00011014                            ; ===========================================================================
00011014                            
00011014                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00011014 4A28 0038                  		tst.b	$38(a0)
00011018 6600                       		bne.s	loc_10500
0001101A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001101E 7000                       		moveq	#0,d0
00011020 1028 003C                  		move.b	$3C(a0),d0
00011024 4A32 0000                  		tst.b	(a2,d0.w)
00011028 6A00                       		bpl.s	loc_10512
0001102A 117C 0001 0038             		move.b	#1,$38(a0)
00011030                            
00011030                            loc_10500:
00011030 7000                       		moveq	#0,d0
00011032 1028 0016                  		move.b	$16(a0),d0
00011036 D040                       		add.w	d0,d0
00011038 B068 003A                  		cmp.w	$3A(a0),d0
0001103C 6700                       		beq.s	loc_1052C
0001103E 5468 003A                  		addq.w	#2,$3A(a0)
00011042                            
00011042                            loc_10512:
00011042 3028 003A                  		move.w	$3A(a0),d0
00011046 0828 0000 0022             		btst	#0,$22(a0)
0001104C 6700                       		beq.s	loc_10520
0001104E 4440                       		neg.w	d0
00011050                            
00011050                            loc_10520:
00011050 3228 0030                  		move.w	$30(a0),d1
00011054 D240                       		add.w	d0,d1
00011056 3141 000C                  		move.w	d1,$C(a0)
0001105A 4E75                       		rts	
0001105C                            ; ===========================================================================
0001105C                            
0001105C                            loc_1052C:
0001105C 5328 0028                  		subq.b	#1,$28(a0)
00011060 4228 0038                  		clr.b	$38(a0)
00011064 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011068 7000                       		moveq	#0,d0
0001106A 1028 0023                  		move.b	$23(a0),d0
0001106E 67D2                       		beq.s	loc_10512
00011070 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00011076 60CA                       		bra.s	loc_10512
00011078                            ; ===========================================================================
00011078                            
00011078                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00011078 4A28 0038                  		tst.b	$38(a0)
0001107C 6600                       		bne.s	loc_1055E
0001107E 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00011082 6700                       		beq.s	locret_10578
00011084 117C 0001 0038             		move.b	#1,$38(a0)
0001108A 4268 003A                  		clr.w	$3A(a0)
0001108E                            
0001108E                            loc_1055E:
0001108E 5268 0008                  		addq.w	#1,8(a0)
00011092 3168 0008 0034             		move.w	8(a0),$34(a0)
00011098 5268 003A                  		addq.w	#1,$3A(a0)
0001109C 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
000110A2 6600                       		bne.s	locret_10578
000110A4 4228 0028                  		clr.b	$28(a0)
000110A8                            
000110A8                            locret_10578:
000110A8 4E75                       		rts	
000110AA                            ; ===========================================================================
000110AA                            
000110AA                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
000110AA 4A28 0038                  		tst.b	$38(a0)
000110AE 6600                       		bne.s	loc_10598
000110B0 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000110B4 7000                       		moveq	#0,d0
000110B6 1028 003C                  		move.b	$3C(a0),d0
000110BA 0832 0000 0000             		btst	#0,(a2,d0.w)
000110C0 6700                       		beq.s	loc_105A2
000110C2 117C 0001 0038             		move.b	#1,$38(a0)
000110C8                            
000110C8                            loc_10598:
000110C8 4A68 003A                  		tst.w	$3A(a0)
000110CC 6700                       		beq.s	loc_105C0
000110CE 5568 003A                  		subq.w	#2,$3A(a0)
000110D2                            
000110D2                            loc_105A2:
000110D2 3028 003A                  		move.w	$3A(a0),d0
000110D6 0828 0000 0022             		btst	#0,$22(a0)
000110DC 6700                       		beq.s	loc_105B4
000110DE 4440                       		neg.w	d0
000110E0 0640 0080                  		addi.w	#$80,d0
000110E4                            
000110E4                            loc_105B4:
000110E4 3228 0034                  		move.w	$34(a0),d1
000110E8 D240                       		add.w	d0,d1
000110EA 3141 0008                  		move.w	d1,8(a0)
000110EE 4E75                       		rts	
000110F0                            ; ===========================================================================
000110F0                            
000110F0                            loc_105C0:
000110F0 5228 0028                  		addq.b	#1,$28(a0)
000110F4 4228 0038                  		clr.b	$38(a0)
000110F8 45F8 FC00                  		lea	($FFFFFC00).w,a2
000110FC 7000                       		moveq	#0,d0
000110FE 1028 0023                  		move.b	$23(a0),d0
00011102 67CE                       		beq.s	loc_105A2
00011104 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001110A 60C6                       		bra.s	loc_105A2
0001110C                            ; ===========================================================================
0001110C                            
0001110C                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
0001110C 4A28 0038                  		tst.b	$38(a0)
00011110 6600                       		bne.s	loc_105F8
00011112 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011116 7000                       		moveq	#0,d0
00011118 1028 003C                  		move.b	$3C(a0),d0
0001111C 4A32 0000                  		tst.b	(a2,d0.w)
00011120 6A00                       		bpl.s	loc_10606
00011122 117C 0001 0038             		move.b	#1,$38(a0)
00011128                            
00011128                            loc_105F8:
00011128 303C 0080                  		move.w	#$80,d0
0001112C B068 003A                  		cmp.w	$3A(a0),d0
00011130 6700                       		beq.s	loc_10624
00011132 5468 003A                  		addq.w	#2,$3A(a0)
00011136                            
00011136                            loc_10606:
00011136 3028 003A                  		move.w	$3A(a0),d0
0001113A 0828 0000 0022             		btst	#0,$22(a0)
00011140 6700                       		beq.s	loc_10618
00011142 4440                       		neg.w	d0
00011144 0640 0080                  		addi.w	#$80,d0
00011148                            
00011148                            loc_10618:
00011148 3228 0034                  		move.w	$34(a0),d1
0001114C D240                       		add.w	d0,d1
0001114E 3141 0008                  		move.w	d1,8(a0)
00011152 4E75                       		rts	
00011154                            ; ===========================================================================
00011154                            
00011154                            loc_10624:
00011154 5328 0028                  		subq.b	#1,$28(a0)
00011158 4228 0038                  		clr.b	$38(a0)
0001115C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011160 7000                       		moveq	#0,d0
00011162 1028 0023                  		move.b	$23(a0),d0
00011166 67CE                       		beq.s	loc_10606
00011168 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001116E 60C6                       		bra.s	loc_10606
00011170                            ; ===========================================================================
00011170                            
00011170                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00011170 323C 0010                  		move.w	#$10,d1
00011174 7000                       		moveq	#0,d0
00011176 1038 FE88                  		move.b	($FFFFFE88).w,d0
0001117A E248                       		lsr.w	#1,d0
0001117C 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00011180 6000                       		bra.s	Obj56_Move_Sqr
00011182                            ; ===========================================================================
00011182                            
00011182                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00011182 323C 0030                  		move.w	#$30,d1
00011186 7000                       		moveq	#0,d0
00011188 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
0001118C 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00011190 6000                       		bra.s	Obj56_Move_Sqr
00011192                            ; ===========================================================================
00011192                            
00011192                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00011192 323C 0050                  		move.w	#$50,d1
00011196 7000                       		moveq	#0,d0
00011198 1038 FE90                  		move.b	($FFFFFE90).w,d0
0001119C 3638 FE92                  		move.w	($FFFFFE92).w,d3
000111A0 6000                       		bra.s	Obj56_Move_Sqr
000111A2                            ; ===========================================================================
000111A2                            
000111A2                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
000111A2 323C 0070                  		move.w	#$70,d1
000111A6 7000                       		moveq	#0,d0
000111A8 1038 FE94                  		move.b	($FFFFFE94).w,d0
000111AC 3638 FE96                  		move.w	($FFFFFE96).w,d3
000111B0                            
000111B0                            Obj56_Move_Sqr:
000111B0 4A43                       		tst.w	d3
000111B2 6600                       		bne.s	loc_1068E
000111B4 5228 0022                  		addq.b	#1,$22(a0)
000111B8 0228 0003 0022             		andi.b	#3,$22(a0)
000111BE                            
000111BE                            loc_1068E:
000111BE 1428 0022                  		move.b	$22(a0),d2
000111C2 0202 0003                  		andi.b	#3,d2
000111C6 6600                       		bne.s	loc_106AE
000111C8 9041                       		sub.w	d1,d0
000111CA D068 0034                  		add.w	$34(a0),d0
000111CE 3140 0008                  		move.w	d0,8(a0)
000111D2 4441                       		neg.w	d1
000111D4 D268 0030                  		add.w	$30(a0),d1
000111D8 3141 000C                  		move.w	d1,$C(a0)
000111DC 4E75                       		rts	
000111DE                            ; ===========================================================================
000111DE                            
000111DE                            loc_106AE:
000111DE 5302                       		subq.b	#1,d2
000111E0 6600                       		bne.s	loc_106CC
000111E2 5341                       		subq.w	#1,d1
000111E4 9041                       		sub.w	d1,d0
000111E6 4440                       		neg.w	d0
000111E8 D068 0030                  		add.w	$30(a0),d0
000111EC 3140 000C                  		move.w	d0,$C(a0)
000111F0 5241                       		addq.w	#1,d1
000111F2 D268 0034                  		add.w	$34(a0),d1
000111F6 3141 0008                  		move.w	d1,8(a0)
000111FA 4E75                       		rts	
000111FC                            ; ===========================================================================
000111FC                            
000111FC                            loc_106CC:
000111FC 5302                       		subq.b	#1,d2
000111FE 6600                       		bne.s	loc_106EA
00011200 5341                       		subq.w	#1,d1
00011202 9041                       		sub.w	d1,d0
00011204 4440                       		neg.w	d0
00011206 D068 0034                  		add.w	$34(a0),d0
0001120A 3140 0008                  		move.w	d0,8(a0)
0001120E 5241                       		addq.w	#1,d1
00011210 D268 0030                  		add.w	$30(a0),d1
00011214 3141 000C                  		move.w	d1,$C(a0)
00011218 4E75                       		rts	
0001121A                            ; ===========================================================================
0001121A                            
0001121A                            loc_106EA:
0001121A 9041                       		sub.w	d1,d0
0001121C D068 0030                  		add.w	$30(a0),d0
00011220 3140 000C                  		move.w	d0,$C(a0)
00011224 4441                       		neg.w	d1
00011226 D268 0034                  		add.w	$34(a0),d1
0001122A 3141 0008                  		move.w	d1,8(a0)
0001122E 4E75                       		rts	
00011230                            ; ===========================================================================
00011230                            ; ---------------------------------------------------------------------------
00011230                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00011230                            ; ---------------------------------------------------------------------------
00011230                            Map_obj56:
00011230                            	include "_maps\obj56.asm"
00011230                            ; ---------------------------------------------------------------------------
00011230                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00011230                            ; ---------------------------------------------------------------------------
00011230 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00011234 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00011238 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
0001123C 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00011240 01                         byte_10710:	dc.b 1
00011241 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00011246 04                         byte_10716:	dc.b 4
00011247 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
0001124C E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00011251 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00011256 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
0001125B 02                         byte_1072B:	dc.b 2
0001125C E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00011261 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00011266 04                         byte_10736:	dc.b 4
00011267 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
0001126C E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00011271 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00011276 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
0001127B 03                         byte_1074B:	dc.b 3
0001127C D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00011281 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00011286 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
0001128B 01                         byte_1075B:	dc.b 1
0001128C F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00011291 02                         byte_10761:	dc.b 2
00011292 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011297 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
0001129C 04                         byte_1076C:	dc.b 4
0001129D F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
000112A2 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
000112A7 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
000112AC F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
000112B2 00                         		even
000112B2 00                         		even
000112B2                            
000112B2                            ; ===========================================================================
000112B2                            ; ---------------------------------------------------------------------------
000112B2                            ; Object 57 - spiked balls (SYZ, LZ)
000112B2                            ; ---------------------------------------------------------------------------
000112B2                            
000112B2                            Obj57:					; XREF: Obj_Index
000112B2 7000                       		moveq	#0,d0
000112B4 1028 0024                  		move.b	$24(a0),d0
000112B8 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
000112BC 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
000112C0                            ; ===========================================================================
000112C0 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
000112C2 0000                       		dc.w Obj57_Move-Obj57_Index
000112C4 0000                       		dc.w Obj57_Display-Obj57_Index
000112C6                            ; ===========================================================================
000112C6                            
000112C6                            Obj57_Main:				; XREF: Obj57_Index
000112C6 5428 0024                  		addq.b	#2,$24(a0)
000112CA 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
000112D2 317C 03BA 0002             		move.w	#$3BA,2(a0)
000112D8 117C 0004 0001             		move.b	#4,1(a0)
000112DE 117C 0004 0018             		move.b	#4,$18(a0)
000112E4 117C 0008 0019             		move.b	#8,$19(a0)
000112EA 3168 0008 003A             		move.w	8(a0),$3A(a0)
000112F0 3168 000C 0038             		move.w	$C(a0),$38(a0)
000112F6 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
000112FC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011302 6600                       		bne.s	loc_107E8
00011304 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
0001130A 317C 0310 0002             		move.w	#$310,2(a0)
00011310 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00011318                            
00011318                            loc_107E8:
00011318 1228 0028                  		move.b	$28(a0),d1	; get object type
0001131C 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00011320 4881                       		ext.w	d1
00011322 E741                       		asl.w	#3,d1		; multiply by 8
00011324 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00011328 1028 0022                  		move.b	$22(a0),d0
0001132C E418                       		ror.b	#2,d0
0001132E 0200 00C0                  		andi.b	#-$40,d0
00011332 1140 0026                  		move.b	d0,$26(a0)
00011336 45E8 0029                  		lea	$29(a0),a2
0001133A 1228 0028                  		move.b	$28(a0),d1	; get object type
0001133E 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00011342 14FC 0000                  		move.b	#0,(a2)+
00011346 3601                       		move.w	d1,d3
00011348 E94B                       		lsl.w	#4,d3
0001134A 1143 003C                  		move.b	d3,$3C(a0)
0001134E 5341                       		subq.w	#1,d1		; set chain length (type-1)
00011350 6500                       		bcs.s	loc_10894
00011352 0828 0003 0028             		btst	#3,$28(a0)
00011358 6700                       		beq.s	Obj57_MakeChain
0001135A 5341                       		subq.w	#1,d1
0001135C 6500                       		bcs.s	loc_10894
0001135E                            
0001135E                            Obj57_MakeChain:
0001135E 6100 D23C                  		bsr.w	SingleObjLoad
00011362 6600                       		bne.s	loc_10894
00011364 5228 0029                  		addq.b	#1,$29(a0)
00011368 3A09                       		move.w	a1,d5
0001136A 0445 D000                  		subi.w	#-$3000,d5
0001136E EC4D                       		lsr.w	#6,d5
00011370 0245 007F                  		andi.w	#$7F,d5
00011374 14C5                       		move.b	d5,(a2)+
00011376 137C 0004 0024             		move.b	#4,$24(a1)
0001137C 1290                       		move.b	0(a0),0(a1)
0001137E 2368 0004 0004             		move.l	4(a0),4(a1)
00011384 3368 0002 0002             		move.w	2(a0),2(a1)
0001138A 1368 0001 0001             		move.b	1(a0),1(a1)
00011390 1368 0018 0018             		move.b	$18(a0),$18(a1)
00011396 1368 0019 0019             		move.b	$19(a0),$19(a1)
0001139C 1368 0020 0020             		move.b	$20(a0),$20(a1)
000113A2 0403 0010                  		subi.b	#$10,d3
000113A6 1343 003C                  		move.b	d3,$3C(a1)
000113AA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000113B0 6600                       		bne.s	loc_10890
000113B2 4A03                       		tst.b	d3
000113B4 6600                       		bne.s	loc_10890
000113B6 137C 0002 001A             		move.b	#2,$1A(a1)
000113BC                            
000113BC                            loc_10890:
000113BC 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
000113C0                            
000113C0                            loc_10894:
000113C0 3A08                       		move.w	a0,d5
000113C2 0445 D000                  		subi.w	#-$3000,d5
000113C6 EC4D                       		lsr.w	#6,d5
000113C8 0245 007F                  		andi.w	#$7F,d5
000113CC 14C5                       		move.b	d5,(a2)+
000113CE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000113D4 6600                       		bne.s	Obj57_Move
000113D6 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
000113DC 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
000113E2                            
000113E2                            Obj57_Move:				; XREF: Obj57_Index
000113E2 6100 0000                  		bsr.w	Obj57_MoveSub
000113E6 6000 0000                  		bra.w	Obj57_ChkDel
000113EA                            ; ===========================================================================
000113EA                            
000113EA                            Obj57_MoveSub:				; XREF: Obj57_Move
000113EA 3028 003E                  		move.w	$3E(a0),d0
000113EE D168 0026                  		add.w	d0,$26(a0)
000113F2 1028 0026                  		move.b	$26(a0),d0
000113F6 4EB9 0000 33D4             		jsr	(CalcSine).l
000113FC 3428 0038                  		move.w	$38(a0),d2
00011400 3628 003A                  		move.w	$3A(a0),d3
00011404 45E8 0029                  		lea	$29(a0),a2
00011408 7C00                       		moveq	#0,d6
0001140A 1C1A                       		move.b	(a2)+,d6
0001140C                            
0001140C                            Obj57_MoveLoop:
0001140C 7800                       		moveq	#0,d4
0001140E 181A                       		move.b	(a2)+,d4
00011410 ED4C                       		lsl.w	#6,d4
00011412 0684 00FF D000             		addi.l	#$FFD000,d4
00011418 2244                       		movea.l	d4,a1
0001141A 7800                       		moveq	#0,d4
0001141C 1829 003C                  		move.b	$3C(a1),d4
00011420 2A04                       		move.l	d4,d5
00011422 C9C0                       		muls.w	d0,d4
00011424 E084                       		asr.l	#8,d4
00011426 CBC1                       		muls.w	d1,d5
00011428 E085                       		asr.l	#8,d5
0001142A D842                       		add.w	d2,d4
0001142C DA43                       		add.w	d3,d5
0001142E 3344 000C                  		move.w	d4,$C(a1)
00011432 3345 0008                  		move.w	d5,8(a1)
00011436 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
0001143A 4E75                       		rts	
0001143C                            ; ===========================================================================
0001143C                            
0001143C                            Obj57_ChkDel:				; XREF: Obj57_Move
0001143C 3028 003A                  		move.w	$3A(a0),d0
00011440 0240 FF80                  		andi.w	#$FF80,d0
00011444 3238 F700                  		move.w	($FFFFF700).w,d1
00011448 0441 0080                  		subi.w	#$80,d1
0001144C 0241 FF80                  		andi.w	#$FF80,d1
00011450 9041                       		sub.w	d1,d0
00011452 0C40 0280                  		cmpi.w	#$280,d0
00011456 6200 0000                  		bhi.w	Obj57_Delete
0001145A 6000 CCAA                  		bra.w	DisplaySprite
0001145E                            ; ===========================================================================
0001145E                            
0001145E                            Obj57_Delete:				; XREF: Obj57_ChkDel
0001145E 7400                       		moveq	#0,d2
00011460 45E8 0029                  		lea	$29(a0),a2
00011464 141A                       		move.b	(a2)+,d2
00011466                            
00011466                            Obj57_DelLoop:
00011466 7000                       		moveq	#0,d0
00011468 101A                       		move.b	(a2)+,d0
0001146A ED48                       		lsl.w	#6,d0
0001146C 0680 00FF D000             		addi.l	#$FFD000,d0
00011472 2240                       		movea.l	d0,a1
00011474 6100 CCCE                  		bsr.w	DeleteObject2
00011478 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
0001147C                            
0001147C 4E75                       		rts	
0001147E                            ; ===========================================================================
0001147E                            
0001147E                            Obj57_Display:				; XREF: Obj57_Index
0001147E 6000 CC86                  		bra.w	DisplaySprite
00011482                            ; ===========================================================================
00011482                            ; ---------------------------------------------------------------------------
00011482                            ; Sprite mappings - chain of spiked balls (SYZ)
00011482                            ; ---------------------------------------------------------------------------
00011482                            Map_obj57:
00011482                            	include "_maps\obj57syz.asm"
00011482                            ; ---------------------------------------------------------------------------
00011482                            ; Sprite mappings - chain of spiked balls (SYZ)
00011482                            ; ---------------------------------------------------------------------------
00011482 0000                       		dc.w byte_10958-Map_obj57
00011484 01                         byte_10958:	dc.b 1
00011485 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001148A                            		even
0001148A                            		even
0001148A                            
0001148A                            ; ---------------------------------------------------------------------------
0001148A                            ; Sprite mappings - spiked ball	on a chain (LZ)
0001148A                            ; ---------------------------------------------------------------------------
0001148A                            Map_obj57a:
0001148A                            	include "_maps\obj57lz.asm"
0001148A                            ; ---------------------------------------------------------------------------
0001148A                            ; Sprite mappings - spiked ball	on a chain (LZ)
0001148A                            ; ---------------------------------------------------------------------------
0001148A 0000                       		dc.w byte_10964-Map_obj57a
0001148C 0000                       		dc.w byte_1096A-Map_obj57a
0001148E 0000                       		dc.w byte_10970-Map_obj57a
00011490 01                         byte_10964:	dc.b 1
00011491 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00011496 01                         byte_1096A:	dc.b 1
00011497 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
0001149C 01                         byte_10970:	dc.b 1
0001149D F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
000114A2                            		even
000114A2                            		even
000114A2                            
000114A2                            ; ===========================================================================
000114A2                            ; ---------------------------------------------------------------------------
000114A2                            ; Object 58 - giant spiked balls (SYZ)
000114A2                            ; ---------------------------------------------------------------------------
000114A2                            
000114A2                            Obj58:					; XREF: Obj_Index
000114A2 7000                       		moveq	#0,d0
000114A4 1028 0024                  		move.b	$24(a0),d0
000114A8 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
000114AC 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
000114B0                            ; ===========================================================================
000114B0 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
000114B2 0000                       		dc.w Obj58_Move-Obj58_Index
000114B4                            ; ===========================================================================
000114B4                            
000114B4                            Obj58_Main:				; XREF: Obj58_Index
000114B4 5428 0024                  		addq.b	#2,$24(a0)
000114B8 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
000114C0 317C 0396 0002             		move.w	#$396,2(a0)
000114C6 117C 0004 0001             		move.b	#4,1(a0)
000114CC 117C 0004 0018             		move.b	#4,$18(a0)
000114D2 117C 0018 0019             		move.b	#$18,$19(a0)
000114D8 3168 0008 003A             		move.w	8(a0),$3A(a0)
000114DE 3168 000C 0038             		move.w	$C(a0),$38(a0)
000114E4 117C 0086 0020             		move.b	#$86,$20(a0)
000114EA 1228 0028                  		move.b	$28(a0),d1	; get object type
000114EE 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000114F2 4881                       		ext.w	d1
000114F4 E741                       		asl.w	#3,d1		; multiply by 8
000114F6 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
000114FA 1028 0022                  		move.b	$22(a0),d0
000114FE E418                       		ror.b	#2,d0
00011500 0200 00C0                  		andi.b	#$C0,d0
00011504 1140 0026                  		move.b	d0,$26(a0)
00011508 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
0001150E                            
0001150E                            Obj58_Move:				; XREF: Obj58_Index
0001150E 7000                       		moveq	#0,d0
00011510 1028 0028                  		move.b	$28(a0),d0	; get object type
00011514 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00011518 D040                       		add.w	d0,d0
0001151A 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
0001151E 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00011522 3028 003A                  		move.w	$3A(a0),d0
00011526 0240 FF80                  		andi.w	#$FF80,d0
0001152A 3238 F700                  		move.w	($FFFFF700).w,d1
0001152E 0441 0080                  		subi.w	#$80,d1
00011532 0241 FF80                  		andi.w	#$FF80,d1
00011536 9041                       		sub.w	d1,d0
00011538 0C40 0280                  		cmpi.w	#$280,d0
0001153C 6200 CC04                  		bhi.w	DeleteObject
00011540 6000 CBC4                  		bra.w	DisplaySprite
00011544                            ; ===========================================================================
00011544 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00011546 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00011548 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
0001154A 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
0001154C                            ; ===========================================================================
0001154C                            
0001154C                            Obj58_Type00:				; XREF: Obj58_TypeIndex
0001154C 4E75                       		rts	
0001154E                            ; ===========================================================================
0001154E                            
0001154E                            Obj58_Type01:				; XREF: Obj58_TypeIndex
0001154E 323C 0060                  		move.w	#$60,d1
00011552 7000                       		moveq	#0,d0
00011554 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011558 0828 0000 0022             		btst	#0,$22(a0)
0001155E 6700                       		beq.s	loc_10A38
00011560 4440                       		neg.w	d0
00011562 D041                       		add.w	d1,d0
00011564                            
00011564                            loc_10A38:
00011564 3228 003A                  		move.w	$3A(a0),d1
00011568 9240                       		sub.w	d0,d1
0001156A 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
0001156E 4E75                       		rts	
00011570                            ; ===========================================================================
00011570                            
00011570                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00011570 323C 0060                  		move.w	#$60,d1
00011574 7000                       		moveq	#0,d0
00011576 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001157A 0828 0000 0022             		btst	#0,$22(a0)
00011580 6700                       		beq.s	loc_10A5C
00011582 4440                       		neg.w	d0
00011584 0640 0080                  		addi.w	#$80,d0
00011588                            
00011588                            loc_10A5C:
00011588 3228 0038                  		move.w	$38(a0),d1
0001158C 9240                       		sub.w	d0,d1
0001158E 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00011592 4E75                       		rts	
00011594                            ; ===========================================================================
00011594                            
00011594                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00011594 3028 003E                  		move.w	$3E(a0),d0
00011598 D168 0026                  		add.w	d0,$26(a0)
0001159C 1028 0026                  		move.b	$26(a0),d0
000115A0 4EB9 0000 33D4             		jsr	(CalcSine).l
000115A6 3428 0038                  		move.w	$38(a0),d2
000115AA 3628 003A                  		move.w	$3A(a0),d3
000115AE 7800                       		moveq	#0,d4
000115B0 1828 003C                  		move.b	$3C(a0),d4
000115B4 2A04                       		move.l	d4,d5
000115B6 C9C0                       		muls.w	d0,d4
000115B8 E084                       		asr.l	#8,d4
000115BA CBC1                       		muls.w	d1,d5
000115BC E085                       		asr.l	#8,d5
000115BE D842                       		add.w	d2,d4
000115C0 DA43                       		add.w	d3,d5
000115C2 3144 000C                  		move.w	d4,$C(a0)
000115C6 3145 0008                  		move.w	d5,8(a0)
000115CA 4E75                       		rts	
000115CC                            ; ===========================================================================
000115CC                            ; ---------------------------------------------------------------------------
000115CC                            ; Sprite mappings - SBZ	spiked ball on a chain
000115CC                            ; ---------------------------------------------------------------------------
000115CC                            Map_obj15b:
000115CC                            	include "_maps\obj15sbz.asm"
000115CC                            ; ---------------------------------------------------------------------------
000115CC                            ; Sprite mappings - spiked ball on a chain (SBZ)
000115CC                            ; ---------------------------------------------------------------------------
000115CC 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
000115D0 0000                       		dc.w byte_10AC6-Map_obj15b
000115D2 05                         byte_10AA6:	dc.b 5
000115D3 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
000115D8 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
000115DD F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
000115E2 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
000115E7 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
000115EC 01                         byte_10AC0:	dc.b 1
000115ED F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
000115F2 02                         byte_10AC6:	dc.b 2
000115F3 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
000115F8 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
000115FE 00                         		even
000115FE 00                         		even
000115FE                            
000115FE                            ; ===========================================================================
000115FE                            ; ---------------------------------------------------------------------------
000115FE                            ; Object 59 - platforms	that move when you stand on them (SLZ)
000115FE                            ; ---------------------------------------------------------------------------
000115FE                            
000115FE                            Obj59:					; XREF: Obj_Index
000115FE 7000                       		moveq	#0,d0
00011600 1028 0024                  		move.b	$24(a0),d0
00011604 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00011608 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
0001160C 3028 0032                  		move.w	$32(a0),d0
00011610 0240 FF80                  		andi.w	#$FF80,d0
00011614 3238 F700                  		move.w	($FFFFF700).w,d1
00011618 0441 0080                  		subi.w	#$80,d1
0001161C 0241 FF80                  		andi.w	#$FF80,d1
00011620 9041                       		sub.w	d1,d0
00011622 0C40 0280                  		cmpi.w	#$280,d0
00011626 6200 CB1A                  		bhi.w	DeleteObject
0001162A 6000 CADA                  		bra.w	DisplaySprite
0001162E                            ; ===========================================================================
0001162E 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00011630 0000                       		dc.w Obj59_Platform-Obj59_Index
00011632 0000                       		dc.w Obj59_Action-Obj59_Index
00011634 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00011636                            
00011636 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00011638                            
00011638 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
0001163A 2001                       		dc.b $20, 1
0001163C 3401                       		dc.b $34, 1
0001163E 1003                       		dc.b $10, 3
00011640 2003                       		dc.b $20, 3
00011642 3403                       		dc.b $34, 3
00011644 1401                       		dc.b $14, 1
00011646 2401                       		dc.b $24, 1
00011648 2C01                       		dc.b $2C, 1
0001164A 1403                       		dc.b $14, 3
0001164C 2403                       		dc.b $24, 3
0001164E 2C03                       		dc.b $2C, 3
00011650 2005                       		dc.b $20, 5
00011652 2007                       		dc.b $20, 7
00011654 3009                       		dc.b $30, 9
00011656                            ; ===========================================================================
00011656                            
00011656                            Obj59_Main:				; XREF: Obj59_Index
00011656 5428 0024                  		addq.b	#2,$24(a0)
0001165A 7000                       		moveq	#0,d0
0001165C 1028 0028                  		move.b	$28(a0),d0
00011660 6A00                       		bpl.s	Obj59_Main2
00011662 5828 0024                  		addq.b	#4,$24(a0)
00011666 0240 007F                  		andi.w	#$7F,d0
0001166A C0FC 0006                  		mulu.w	#6,d0
0001166E 3140 003C                  		move.w	d0,$3C(a0)
00011672 3140 003E                  		move.w	d0,$3E(a0)
00011676 588F                       		addq.l	#4,sp
00011678 4E75                       		rts	
0001167A                            ; ===========================================================================
0001167A                            
0001167A                            Obj59_Main2:
0001167A E648                       		lsr.w	#3,d0
0001167C 0240 001E                  		andi.w	#$1E,d0
00011680 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00011684 115A 0019                  		move.b	(a2)+,$19(a0)
00011688 115A 001A                  		move.b	(a2)+,$1A(a0)
0001168C 7000                       		moveq	#0,d0
0001168E 1028 0028                  		move.b	$28(a0),d0
00011692 D040                       		add.w	d0,d0
00011694 0240 001E                  		andi.w	#$1E,d0
00011698 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
0001169C 101A                       		move.b	(a2)+,d0
0001169E E548                       		lsl.w	#2,d0
000116A0 3140 003C                  		move.w	d0,$3C(a0)
000116A4 115A 0028                  		move.b	(a2)+,$28(a0)
000116A8 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
000116B0 317C 4000 0002             		move.w	#$4000,2(a0)
000116B6 117C 0004 0001             		move.b	#4,1(a0)
000116BC 117C 0004 0018             		move.b	#4,$18(a0)
000116C2 3168 0008 0032             		move.w	8(a0),$32(a0)
000116C8 3168 000C 0030             		move.w	$C(a0),$30(a0)
000116CE                            
000116CE                            Obj59_Platform:				; XREF: Obj59_Index
000116CE 7200                       		moveq	#0,d1
000116D0 1228 0019                  		move.b	$19(a0),d1
000116D4 4EB9 0000 7EF8             		jsr	(PlatformObject).l
000116DA 6000 0000                  		bra.w	Obj59_Types
000116DE                            ; ===========================================================================
000116DE                            
000116DE                            Obj59_Action:				; XREF: Obj59_Index
000116DE 7200                       		moveq	#0,d1
000116E0 1228 0019                  		move.b	$19(a0),d1
000116E4 4EB9 0000 806C             		jsr	(ExitPlatform).l
000116EA 3F28 0008                  		move.w	8(a0),-(sp)
000116EE 6100 0000                  		bsr.w	Obj59_Types
000116F2 341F                       		move.w	(sp)+,d2
000116F4 4A10                       		tst.b	0(a0)
000116F6 6700                       		beq.s	locret_10BD4
000116F8 4EF9 0000 85D6             		jmp	(MvSonicOnPtfm2).l
000116FE                            ; ===========================================================================
000116FE                            
000116FE                            locret_10BD4:
000116FE 4E75                       		rts	
00011700                            ; ===========================================================================
00011700                            
00011700                            Obj59_Types:
00011700 7000                       		moveq	#0,d0
00011702 1028 0028                  		move.b	$28(a0),d0
00011706 0240 000F                  		andi.w	#$F,d0
0001170A D040                       		add.w	d0,d0
0001170C 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00011710 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
00011714                            ; ===========================================================================
00011714 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011718 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001171C 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011720 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011724 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00011728                            ; ===========================================================================
00011728                            
00011728                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00011728 4E75                       		rts	
0001172A                            ; ===========================================================================
0001172A                            
0001172A                            Obj59_Type01:				; XREF: Obj59_TypeIndex
0001172A 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00011730 6600                       		bne.s	locret_10C0C
00011732 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00011736                            
00011736                            locret_10C0C:
00011736 4E75                       		rts	
00011738                            ; ===========================================================================
00011738                            
00011738                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00011738 6100 0000                  		bsr.w	Obj59_Move
0001173C 3028 0034                  		move.w	$34(a0),d0
00011740 4440                       		neg.w	d0
00011742 D068 0030                  		add.w	$30(a0),d0
00011746 3140 000C                  		move.w	d0,$C(a0)
0001174A 4E75                       		rts	
0001174C                            ; ===========================================================================
0001174C                            
0001174C                            Obj59_Type04:				; XREF: Obj59_TypeIndex
0001174C 6100 0000                  		bsr.w	Obj59_Move
00011750 3028 0034                  		move.w	$34(a0),d0
00011754 D068 0030                  		add.w	$30(a0),d0
00011758 3140 000C                  		move.w	d0,$C(a0)
0001175C 4E75                       		rts	
0001175E                            ; ===========================================================================
0001175E                            
0001175E                            Obj59_Type06:				; XREF: Obj59_TypeIndex
0001175E 6100 0000                  		bsr.w	Obj59_Move
00011762 3028 0034                  		move.w	$34(a0),d0
00011766 E240                       		asr.w	#1,d0
00011768 4440                       		neg.w	d0
0001176A D068 0030                  		add.w	$30(a0),d0
0001176E 3140 000C                  		move.w	d0,$C(a0)
00011772 3028 0034                  		move.w	$34(a0),d0
00011776 D068 0032                  		add.w	$32(a0),d0
0001177A 3140 0008                  		move.w	d0,8(a0)
0001177E 4E75                       		rts	
00011780                            ; ===========================================================================
00011780                            
00011780                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00011780 6100 0000                  		bsr.w	Obj59_Move
00011784 3028 0034                  		move.w	$34(a0),d0
00011788 E240                       		asr.w	#1,d0
0001178A D068 0030                  		add.w	$30(a0),d0
0001178E 3140 000C                  		move.w	d0,$C(a0)
00011792 3028 0034                  		move.w	$34(a0),d0
00011796 4440                       		neg.w	d0
00011798 D068 0032                  		add.w	$32(a0),d0
0001179C 3140 0008                  		move.w	d0,8(a0)
000117A0 4E75                       		rts	
000117A2                            ; ===========================================================================
000117A2                            
000117A2                            Obj59_Type09:				; XREF: Obj59_TypeIndex
000117A2 6100 0000                  		bsr.w	Obj59_Move
000117A6 3028 0034                  		move.w	$34(a0),d0
000117AA 4440                       		neg.w	d0
000117AC D068 0030                  		add.w	$30(a0),d0
000117B0 3140 000C                  		move.w	d0,$C(a0)
000117B4 4A28 0028                  		tst.b	$28(a0)
000117B8 6700 0000                  		beq.w	loc_10C94
000117BC 4E75                       		rts	
000117BE                            ; ===========================================================================
000117BE                            
000117BE                            loc_10C94:
000117BE 0828 0003 0022             		btst	#3,$22(a0)
000117C4 6700                       		beq.s	Obj59_Delete
000117C6 08E9 0001 0022             		bset	#1,$22(a1)
000117CC 08A9 0003 0022             		bclr	#3,$22(a1)
000117D2 137C 0002 0024             		move.b	#2,$24(a1)
000117D8                            
000117D8                            Obj59_Delete:
000117D8 6000 C968                  		bra.w	DeleteObject
000117DC                            
000117DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000117DC                            
000117DC                            
000117DC                            Obj59_Move:				; XREF: Obj59_Type02; et al
000117DC 3028 0038                  		move.w	$38(a0),d0
000117E0 4A28 003A                  		tst.b	$3A(a0)
000117E4 6600                       		bne.s	loc_10CC8
000117E6 0C40 0800                  		cmpi.w	#$800,d0
000117EA 6400                       		bcc.s	loc_10CD0
000117EC 0640 0010                  		addi.w	#$10,d0
000117F0 6000                       		bra.s	loc_10CD0
000117F2                            ; ===========================================================================
000117F2                            
000117F2                            loc_10CC8:
000117F2 4A40                       		tst.w	d0
000117F4 6700                       		beq.s	loc_10CD0
000117F6 0440 0010                  		subi.w	#$10,d0
000117FA                            
000117FA                            loc_10CD0:
000117FA 3140 0038                  		move.w	d0,$38(a0)
000117FE 48C0                       		ext.l	d0
00011800 E180                       		asl.l	#8,d0
00011802 D0A8 0034                  		add.l	$34(a0),d0
00011806 2140 0034                  		move.l	d0,$34(a0)
0001180A 4840                       		swap	d0
0001180C 3428 003C                  		move.w	$3C(a0),d2
00011810 B042                       		cmp.w	d2,d0
00011812 6300                       		bls.s	loc_10CF0
00011814 117C 0001 003A             		move.b	#1,$3A(a0)
0001181A                            
0001181A                            loc_10CF0:
0001181A D442                       		add.w	d2,d2
0001181C B042                       		cmp.w	d2,d0
0001181E 6600                       		bne.s	locret_10CFA
00011820 4228 0028                  		clr.b	$28(a0)
00011824                            
00011824                            locret_10CFA:
00011824 4E75                       		rts	
00011826                            ; End of function Obj59_Move
00011826                            
00011826                            ; ===========================================================================
00011826                            
00011826                            Obj59_MakeMulti:			; XREF: Obj59_Index
00011826 5368 003C                  		subq.w	#1,$3C(a0)
0001182A 6600                       		bne.s	Obj59_ChkDel
0001182C 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
00011832 6100 CD68                  		bsr.w	SingleObjLoad
00011836 6600                       		bne.s	Obj59_ChkDel
00011838 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
0001183C 3368 0008 0008             		move.w	8(a0),8(a1)
00011842 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011848 137C 000E 0028             		move.b	#$E,$28(a1)
0001184E                            
0001184E                            Obj59_ChkDel:
0001184E 588F                       		addq.l	#4,sp
00011850 3028 0008                  		move.w	8(a0),d0
00011854 0240 FF80                  		andi.w	#$FF80,d0
00011858 3238 F700                  		move.w	($FFFFF700).w,d1
0001185C 0441 0080                  		subi.w	#$80,d1
00011860 0241 FF80                  		andi.w	#$FF80,d1
00011864 9041                       		sub.w	d1,d0
00011866 0C40 0280                  		cmpi.w	#$280,d0
0001186A 6200 C8D6                  		bhi.w	DeleteObject
0001186E 4E75                       		rts	
00011870                            ; ===========================================================================
00011870                            ; ---------------------------------------------------------------------------
00011870                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011870                            ; ---------------------------------------------------------------------------
00011870                            Map_obj59:
00011870                            	include "_maps\obj59.asm"
00011870                            ; ---------------------------------------------------------------------------
00011870                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011870                            ; ---------------------------------------------------------------------------
00011870 0000                       		dc.w byte_10D4A-Map_obj59
00011872 03                         byte_10D4A:	dc.b 3
00011873 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00011878 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
0001187D F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00011882                            		even
00011882                            		even
00011882                            
00011882                            ; ===========================================================================
00011882                            ; ---------------------------------------------------------------------------
00011882                            ; Object 5A - platforms	moving in circles (SLZ)
00011882                            ; ---------------------------------------------------------------------------
00011882                            
00011882                            Obj5A:					; XREF: Obj_Index
00011882 7000                       		moveq	#0,d0
00011884 1028 0024                  		move.b	$24(a0),d0
00011888 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
0001188C 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
00011890 3028 0032                  		move.w	$32(a0),d0
00011894 0240 FF80                  		andi.w	#$FF80,d0
00011898 3238 F700                  		move.w	($FFFFF700).w,d1
0001189C 0441 0080                  		subi.w	#$80,d1
000118A0 0241 FF80                  		andi.w	#$FF80,d1
000118A4 9041                       		sub.w	d1,d0
000118A6 0C40 0280                  		cmpi.w	#$280,d0
000118AA 6200 C896                  		bhi.w	DeleteObject
000118AE 6000 C856                  		bra.w	DisplaySprite
000118B2                            ; ===========================================================================
000118B2 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
000118B4 0000                       		dc.w Obj5A_Platform-Obj5A_Index
000118B6 0000                       		dc.w Obj5A_Action-Obj5A_Index
000118B8                            ; ===========================================================================
000118B8                            
000118B8                            Obj5A_Main:				; XREF: Obj5A_Index
000118B8 5428 0024                  		addq.b	#2,$24(a0)
000118BC 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
000118C4 317C 4000 0002             		move.w	#$4000,2(a0)
000118CA 117C 0004 0001             		move.b	#4,1(a0)
000118D0 117C 0004 0018             		move.b	#4,$18(a0)
000118D6 117C 0018 0019             		move.b	#$18,$19(a0)
000118DC 3168 0008 0032             		move.w	8(a0),$32(a0)
000118E2 3168 000C 0030             		move.w	$C(a0),$30(a0)
000118E8                            
000118E8                            Obj5A_Platform:				; XREF: Obj5A_Index
000118E8 7200                       		moveq	#0,d1
000118EA 1228 0019                  		move.b	$19(a0),d1
000118EE 4EB9 0000 7EF8             		jsr	(PlatformObject).l
000118F4 6000 0000                  		bra.w	Obj5A_Types
000118F8                            ; ===========================================================================
000118F8                            
000118F8                            Obj5A_Action:				; XREF: Obj5A_Index
000118F8 7200                       		moveq	#0,d1
000118FA 1228 0019                  		move.b	$19(a0),d1
000118FE 4EB9 0000 806C             		jsr	(ExitPlatform).l
00011904 3F28 0008                  		move.w	8(a0),-(sp)
00011908 6100 0000                  		bsr.w	Obj5A_Types
0001190C 341F                       		move.w	(sp)+,d2
0001190E 4EF9 0000 85D6             		jmp	(MvSonicOnPtfm2).l
00011914                            ; ===========================================================================
00011914                            
00011914                            Obj5A_Types:
00011914 7000                       		moveq	#0,d0
00011916 1028 0028                  		move.b	$28(a0),d0
0001191A 0240 000C                  		andi.w	#$C,d0
0001191E E248                       		lsr.w	#1,d0
00011920 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
00011924 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00011928                            ; ===========================================================================
00011928 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
0001192A 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
0001192C                            ; ===========================================================================
0001192C                            
0001192C                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
0001192C 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011930 0401 0050                  		subi.b	#$50,d1
00011934 4881                       		ext.w	d1
00011936 1438 FE84                  		move.b	($FFFFFE84).w,d2
0001193A 0402 0050                  		subi.b	#$50,d2
0001193E 4882                       		ext.w	d2
00011940 0828 0000 0028             		btst	#0,$28(a0)
00011946 6700                       		beq.s	loc_10E24
00011948 4441                       		neg.w	d1
0001194A 4442                       		neg.w	d2
0001194C                            
0001194C                            loc_10E24:
0001194C 0828 0001 0028             		btst	#1,$28(a0)
00011952 6700                       		beq.s	loc_10E30
00011954 4441                       		neg.w	d1
00011956 C342                       		exg	d1,d2
00011958                            
00011958                            loc_10E30:
00011958 D268 0032                  		add.w	$32(a0),d1
0001195C 3141 0008                  		move.w	d1,8(a0)
00011960 D468 0030                  		add.w	$30(a0),d2
00011964 3142 000C                  		move.w	d2,$C(a0)
00011968 4E75                       		rts	
0001196A                            ; ===========================================================================
0001196A                            
0001196A                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
0001196A 1238 FE80                  		move.b	($FFFFFE80).w,d1
0001196E 0401 0050                  		subi.b	#$50,d1
00011972 4881                       		ext.w	d1
00011974 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011978 0402 0050                  		subi.b	#$50,d2
0001197C 4882                       		ext.w	d2
0001197E 0828 0000 0028             		btst	#0,$28(a0)
00011984 6700                       		beq.s	loc_10E62
00011986 4441                       		neg.w	d1
00011988 4442                       		neg.w	d2
0001198A                            
0001198A                            loc_10E62:
0001198A 0828 0001 0028             		btst	#1,$28(a0)
00011990 6700                       		beq.s	loc_10E6E
00011992 4441                       		neg.w	d1
00011994 C342                       		exg	d1,d2
00011996                            
00011996                            loc_10E6E:
00011996 4441                       		neg.w	d1
00011998 D268 0032                  		add.w	$32(a0),d1
0001199C 3141 0008                  		move.w	d1,8(a0)
000119A0 D468 0030                  		add.w	$30(a0),d2
000119A4 3142 000C                  		move.w	d2,$C(a0)
000119A8 4E75                       		rts	
000119AA                            ; ===========================================================================
000119AA                            ; ---------------------------------------------------------------------------
000119AA                            ; Sprite mappings - platforms that move	in circles (SLZ)
000119AA                            ; ---------------------------------------------------------------------------
000119AA                            Map_obj5A:
000119AA                            	include "_maps\obj5A.asm"
000119AA                            ; ---------------------------------------------------------------------------
000119AA                            ; Sprite mappings - platforms that move	in circles (SLZ)
000119AA                            ; ---------------------------------------------------------------------------
000119AA 0000                       		dc.w byte_10E84-Map_obj5A
000119AC 02                         byte_10E84:	dc.b 2
000119AD F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
000119B2 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
000119B8 00                         		even
000119B8 00                         		even
000119B8                            
000119B8                            ; ===========================================================================
000119B8                            ; ---------------------------------------------------------------------------
000119B8                            ; Object 5B - blocks that form a staircase (SLZ)
000119B8                            ; ---------------------------------------------------------------------------
000119B8                            
000119B8                            Obj5B:					; XREF: Obj_Index
000119B8 7000                       		moveq	#0,d0
000119BA 1028 0024                  		move.b	$24(a0),d0
000119BE 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
000119C2 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
000119C6 3028 0030                  		move.w	$30(a0),d0
000119CA 0240 FF80                  		andi.w	#$FF80,d0
000119CE 3238 F700                  		move.w	($FFFFF700).w,d1
000119D2 0441 0080                  		subi.w	#$80,d1
000119D6 0241 FF80                  		andi.w	#$FF80,d1
000119DA 9041                       		sub.w	d1,d0
000119DC 0C40 0280                  		cmpi.w	#$280,d0
000119E0 6200 C760                  		bhi.w	DeleteObject
000119E4 6000 C720                  		bra.w	DisplaySprite
000119E8                            ; ===========================================================================
000119E8 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
000119EA 0000                       		dc.w Obj5B_Move-Obj5B_Index
000119EC 0000                       		dc.w Obj5B_Solid-Obj5B_Index
000119EE                            ; ===========================================================================
000119EE                            
000119EE                            Obj5B_Main:				; XREF: Obj5B_Index
000119EE 5428 0024                  		addq.b	#2,$24(a0)
000119F2 7638                       		moveq	#$38,d3
000119F4 7801                       		moveq	#1,d4
000119F6 0828 0000 0022             		btst	#0,$22(a0)
000119FC 6700                       		beq.s	loc_10EDA
000119FE 763B                       		moveq	#$3B,d3
00011A00 78FF                       		moveq	#-1,d4
00011A02                            
00011A02                            loc_10EDA:
00011A02 3428 0008                  		move.w	8(a0),d2
00011A06 2248                       		movea.l	a0,a1
00011A08 7203                       		moveq	#3,d1
00011A0A 6000                       		bra.s	Obj5B_MakeBlocks
00011A0C                            ; ===========================================================================
00011A0C                            
00011A0C                            Obj5B_Loop:
00011A0C 6100 CBA4                  		bsr.w	SingleObjLoad2
00011A10 6600 0000                  		bne.w	Obj5B_Move
00011A14 137C 0004 0024             		move.b	#4,$24(a1)
00011A1A                            
00011A1A                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
00011A1A 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00011A1E 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
00011A26 337C 4000 0002             		move.w	#$4000,2(a1)
00011A2C 137C 0004 0001             		move.b	#4,1(a1)
00011A32 137C 0003 0018             		move.b	#3,$18(a1)
00011A38 137C 0010 0019             		move.b	#$10,$19(a1)
00011A3E 1368 0028 0028             		move.b	$28(a0),$28(a1)
00011A44 3342 0008                  		move.w	d2,8(a1)
00011A48 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011A4E 3368 0008 0030             		move.w	8(a0),$30(a1)
00011A54 3369 000C 0032             		move.w	$C(a1),$32(a1)
00011A5A 0642 0020                  		addi.w	#$20,d2
00011A5E 1343 0037                  		move.b	d3,$37(a1)
00011A62 2348 003C                  		move.l	a0,$3C(a1)
00011A66 D604                       		add.b	d4,d3
00011A68 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00011A6C                            
00011A6C                            Obj5B_Move:				; XREF: Obj5B_Index
00011A6C 7000                       		moveq	#0,d0
00011A6E 1028 0028                  		move.b	$28(a0),d0
00011A72 0240 0007                  		andi.w	#7,d0
00011A76 D040                       		add.w	d0,d0
00011A78 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00011A7C 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00011A80                            
00011A80                            Obj5B_Solid:				; XREF: Obj5B_Index
00011A80 2468 003C                  		movea.l	$3C(a0),a2
00011A84 7000                       		moveq	#0,d0
00011A86 1028 0037                  		move.b	$37(a0),d0
00011A8A 1032 0000                  		move.b	(a2,d0.w),d0
00011A8E D068 0032                  		add.w	$32(a0),d0
00011A92 3140 000C                  		move.w	d0,$C(a0)
00011A96 7200                       		moveq	#0,d1
00011A98 1228 0019                  		move.b	$19(a0),d1
00011A9C 0641 000B                  		addi.w	#$B,d1
00011AA0 343C 0010                  		move.w	#$10,d2
00011AA4 363C 0011                  		move.w	#$11,d3
00011AA8 3828 0008                  		move.w	8(a0),d4
00011AAC 6100 EA42                  		bsr.w	SolidObject
00011AB0 4A04                       		tst.b	d4
00011AB2 6A00                       		bpl.s	loc_10F92
00011AB4 1544 0036                  		move.b	d4,$36(a2)
00011AB8                            
00011AB8                            loc_10F92:
00011AB8 0828 0003 0022             		btst	#3,$22(a0)
00011ABE 6700                       		beq.s	locret_10FA0
00011AC0 157C 0001 0036             		move.b	#1,$36(a2)
00011AC6                            
00011AC6                            locret_10FA0:
00011AC6 4E75                       		rts	
00011AC8                            ; ===========================================================================
00011AC8 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00011ACA 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011ACC 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00011ACE 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011AD0                            ; ===========================================================================
00011AD0                            
00011AD0                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00011AD0 4A68 0034                  		tst.w	$34(a0)
00011AD4 6600                       		bne.s	loc_10FC0
00011AD6 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00011ADC 6600                       		bne.s	locret_10FBE
00011ADE 317C 001E 0034             		move.w	#$1E,$34(a0)
00011AE4                            
00011AE4                            locret_10FBE:
00011AE4 4E75                       		rts	
00011AE6                            ; ===========================================================================
00011AE6                            
00011AE6                            loc_10FC0:
00011AE6 5368 0034                  		subq.w	#1,$34(a0)
00011AEA 66F8                       		bne.s	locret_10FBE
00011AEC 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011AF0 4E75                       		rts	
00011AF2                            ; ===========================================================================
00011AF2                            
00011AF2                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00011AF2 4A68 0034                  		tst.w	$34(a0)
00011AF6 6600                       		bne.s	loc_10FE0
00011AF8 4A28 0036                  		tst.b	$36(a0)
00011AFC 6A00                       		bpl.s	locret_10FDE
00011AFE 317C 003C 0034             		move.w	#$3C,$34(a0)
00011B04                            
00011B04                            locret_10FDE:
00011B04 4E75                       		rts	
00011B06                            ; ===========================================================================
00011B06                            
00011B06                            loc_10FE0:
00011B06 5368 0034                  		subq.w	#1,$34(a0)
00011B0A 6600                       		bne.s	loc_10FEC
00011B0C 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011B10 4E75                       		rts	
00011B12                            ; ===========================================================================
00011B12                            
00011B12                            loc_10FEC:
00011B12 43E8 0038                  		lea	$38(a0),a1
00011B16 3028 0034                  		move.w	$34(a0),d0
00011B1A E408                       		lsr.b	#2,d0
00011B1C 0200 0001                  		andi.b	#1,d0
00011B20 12C0                       		move.b	d0,(a1)+
00011B22 0A00 0001                  		eori.b	#1,d0
00011B26 12C0                       		move.b	d0,(a1)+
00011B28 0A00 0001                  		eori.b	#1,d0
00011B2C 12C0                       		move.b	d0,(a1)+
00011B2E 0A00 0001                  		eori.b	#1,d0
00011B32 12C0                       		move.b	d0,(a1)+
00011B34 4E75                       		rts	
00011B36                            ; ===========================================================================
00011B36                            
00011B36                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00011B36 43E8 0038                  		lea	$38(a0),a1
00011B3A 0C11 0080                  		cmpi.b	#$80,(a1)
00011B3E 6700                       		beq.s	locret_11038
00011B40 5211                       		addq.b	#1,(a1)
00011B42 7200                       		moveq	#0,d1
00011B44 1219                       		move.b	(a1)+,d1
00011B46 4841                       		swap	d1
00011B48 E289                       		lsr.l	#1,d1
00011B4A 2401                       		move.l	d1,d2
00011B4C E289                       		lsr.l	#1,d1
00011B4E 2601                       		move.l	d1,d3
00011B50 D682                       		add.l	d2,d3
00011B52 4841                       		swap	d1
00011B54 4842                       		swap	d2
00011B56 4843                       		swap	d3
00011B58 12C3                       		move.b	d3,(a1)+
00011B5A 12C2                       		move.b	d2,(a1)+
00011B5C 12C1                       		move.b	d1,(a1)+
00011B5E                            
00011B5E                            locret_11038:
00011B5E 4E75                       		rts	
00011B60 4E75                       		rts	
00011B62                            ; ===========================================================================
00011B62                            ; ---------------------------------------------------------------------------
00011B62                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011B62                            ; ---------------------------------------------------------------------------
00011B62                            Map_obj5B:
00011B62                            	include "_maps\obj5B.asm"
00011B62                            ; ---------------------------------------------------------------------------
00011B62                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011B62                            ; ---------------------------------------------------------------------------
00011B62 0000                       		dc.w byte_1103E-Map_obj5B
00011B64 01                         byte_1103E:	dc.b 1
00011B65 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00011B6A                            		even
00011B6A                            		even
00011B6A                            
00011B6A                            ; ===========================================================================
00011B6A                            ; ---------------------------------------------------------------------------
00011B6A                            ; Object 5C - metal girders in foreground (SLZ)
00011B6A                            ; ---------------------------------------------------------------------------
00011B6A                            
00011B6A                            Obj5C:					; XREF: Obj_Index
00011B6A 7000                       		moveq	#0,d0
00011B6C 1028 0024                  		move.b	$24(a0),d0
00011B70 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00011B74 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00011B78                            ; ===========================================================================
00011B78 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00011B7A 0000                       		dc.w Obj5C_Display-Obj5C_Index
00011B7C                            ; ===========================================================================
00011B7C                            
00011B7C                            Obj5C_Main:				; XREF: Obj5C_Index
00011B7C 5428 0024                  		addq.b	#2,$24(a0)
00011B80 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00011B88 317C 83CC 0002             		move.w	#$83CC,2(a0)
00011B8E 117C 0010 0019             		move.b	#$10,$19(a0)
00011B94                            
00011B94                            Obj5C_Display:				; XREF: Obj5C_Index
00011B94 2238 F700                  		move.l	($FFFFF700).w,d1
00011B98 D281                       		add.l	d1,d1
00011B9A 4841                       		swap	d1
00011B9C 4441                       		neg.w	d1
00011B9E 3141 0008                  		move.w	d1,8(a0)
00011BA2 2238 F704                  		move.l	($FFFFF704).w,d1
00011BA6 D281                       		add.l	d1,d1
00011BA8 4841                       		swap	d1
00011BAA 0241 003F                  		andi.w	#$3F,d1
00011BAE 4441                       		neg.w	d1
00011BB0 0641 0100                  		addi.w	#$100,d1
00011BB4 3141 000A                  		move.w	d1,$A(a0)
00011BB8 6000 C54C                  		bra.w	DisplaySprite
00011BBC                            ; ===========================================================================
00011BBC                            ; ---------------------------------------------------------------------------
00011BBC                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011BBC                            ; ---------------------------------------------------------------------------
00011BBC                            Map_obj5C:
00011BBC                            	include "_maps\obj5C.asm"
00011BBC                            ; ---------------------------------------------------------------------------
00011BBC                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011BBC                            ; ---------------------------------------------------------------------------
00011BBC 0000                       		dc.w byte_11098-Map_obj5C
00011BBE 09                         byte_11098:	dc.b 9
00011BBF 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00011BC4 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00011BC9 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00011BCE E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00011BD3 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00011BD8 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00011BDD 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00011BE2 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00011BE7 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00011BEC                            		even
00011BEC                            		even
00011BEC                            
00011BEC                            ; ===========================================================================
00011BEC                            ; ---------------------------------------------------------------------------
00011BEC                            ; Object 1B - water surface (LZ)
00011BEC                            ; ---------------------------------------------------------------------------
00011BEC                            
00011BEC                            Obj1B:					; XREF: Obj_Index
00011BEC 7000                       		moveq	#0,d0
00011BEE 1028 0024                  		move.b	$24(a0),d0
00011BF2 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00011BF6 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00011BFA                            ; ===========================================================================
00011BFA 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00011BFC 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011BFE                            ; ===========================================================================
00011BFE                            
00011BFE                            Obj1B_Main:				; XREF: Obj1B_Index
00011BFE 5428 0024                  		addq.b	#2,$24(a0)
00011C02 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00011C0A 317C C300 0002             		move.w	#$C300,2(a0)
00011C10 117C 0004 0001             		move.b	#4,1(a0)
00011C16 117C 0080 0019             		move.b	#$80,$19(a0)
00011C1C 3168 0008 0030             		move.w	8(a0),$30(a0)
00011C22                            
00011C22                            Obj1B_Action:				; XREF: Obj1B_Index
00011C22 3238 F700                  		move.w	($FFFFF700).w,d1
00011C26 0241 FFE0                  		andi.w	#$FFE0,d1
00011C2A D268 0030                  		add.w	$30(a0),d1
00011C2E 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00011C34 6700                       		beq.s	loc_11114
00011C36 0641 0020                  		addi.w	#$20,d1
00011C3A                            
00011C3A                            loc_11114:
00011C3A 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00011C3E 3238 F646                  		move.w	($FFFFF646).w,d1
00011C42 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00011C46 4A28 0032                  		tst.b	$32(a0)
00011C4A 6600                       		bne.s	Obj1B_Animate
00011C4C 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00011C52 6700                       		beq.s	loc_1114A	; if not, branch
00011C54 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00011C58 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00011C5E 6000                       		bra.s	Obj1B_Display
00011C60                            ; ===========================================================================
00011C60                            
00011C60                            Obj1B_Animate:				; XREF: loc_11114
00011C60 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00011C64 6600                       		bne.s	Obj1B_Display	; if yes, branch
00011C66 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00011C6C 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00011C70                            
00011C70                            loc_1114A:				; XREF: loc_11114
00011C70 5328 001E                  		subq.b	#1,$1E(a0)
00011C74 6A00                       		bpl.s	Obj1B_Display
00011C76 117C 0007 001E             		move.b	#7,$1E(a0)
00011C7C 5228 001A                  		addq.b	#1,$1A(a0)
00011C80 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00011C86 6500                       		bcs.s	Obj1B_Display
00011C88 117C 0000 001A             		move.b	#0,$1A(a0)
00011C8E                            
00011C8E                            Obj1B_Display:
00011C8E 6000 C476                  		bra.w	DisplaySprite
00011C92                            ; ===========================================================================
00011C92                            ; ---------------------------------------------------------------------------
00011C92                            ; Sprite mappings - water surface (LZ)
00011C92                            ; ---------------------------------------------------------------------------
00011C92                            Map_obj1B:
00011C92                            	include "_maps\obj1B.asm"
00011C92                            ; ---------------------------------------------------------------------------
00011C92                            ; Sprite mappings - water surface (LZ)
00011C92                            ; ---------------------------------------------------------------------------
00011C92 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00011C96 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00011C9A 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00011C9E 03                         byte_11178:	dc.b 3
00011C9F FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011CA4 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011CA9 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011CAE 03                         byte_11188:	dc.b 3
00011CAF FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011CB4 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011CB9 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011CBE 03                         byte_11198:	dc.b 3
00011CBF FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011CC4 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011CC9 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011CCE 06                         byte_111A8:	dc.b 6
00011CCF FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011CD4 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00011CD9 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011CDE FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00011CE3 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011CE8 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00011CED 06                         byte_111C7:	dc.b 6
00011CEE FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011CF3 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00011CF8 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011CFD FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011D02 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011D07 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00011D0C 06                         byte_111E6:	dc.b 6
00011D0D FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011D12 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00011D17 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011D1C FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00011D21 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011D26 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00011D2C 00                         		even
00011D2C 00                         		even
00011D2C                            
00011D2C                            ; ===========================================================================
00011D2C                            ; ---------------------------------------------------------------------------
00011D2C                            ; Object 0B - pole that	breaks (LZ)
00011D2C                            ; ---------------------------------------------------------------------------
00011D2C                            
00011D2C                            Obj0B:					; XREF: Obj_Index
00011D2C 7000                       		moveq	#0,d0
00011D2E 1028 0024                  		move.b	$24(a0),d0
00011D32 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00011D36 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00011D3A                            ; ===========================================================================
00011D3A 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00011D3C 0000                       		dc.w Obj0B_Action-Obj0B_Index
00011D3E 0000                       		dc.w Obj0B_Display-Obj0B_Index
00011D40                            ; ===========================================================================
00011D40                            
00011D40                            Obj0B_Main:				; XREF: Obj0B_Index
00011D40 5428 0024                  		addq.b	#2,$24(a0)
00011D44 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00011D4C 317C 43DE 0002             		move.w	#$43DE,2(a0)
00011D52 117C 0004 0001             		move.b	#4,1(a0)
00011D58 117C 0008 0019             		move.b	#8,$19(a0)
00011D5E 117C 0004 0018             		move.b	#4,$18(a0)
00011D64 117C 00E1 0020             		move.b	#$E1,$20(a0)
00011D6A 7000                       		moveq	#0,d0
00011D6C 1028 0028                  		move.b	$28(a0),d0	; get object type
00011D70 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011D74 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00011D78                            
00011D78                            Obj0B_Action:				; XREF: Obj0B_Index
00011D78 4A28 0032                  		tst.b	$32(a0)
00011D7C 6700                       		beq.s	Obj0B_Grab
00011D7E 4A68 0030                  		tst.w	$30(a0)
00011D82 6700                       		beq.s	Obj0B_MoveUp
00011D84 5368 0030                  		subq.w	#1,$30(a0)
00011D88 6600                       		bne.s	Obj0B_MoveUp
00011D8A 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00011D90 6000                       		bra.s	Obj0B_Release
00011D92                            ; ===========================================================================
00011D92                            
00011D92                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00011D92 43F8 D000                  		lea	($FFFFD000).w,a1
00011D96 3028 000C                  		move.w	$C(a0),d0
00011D9A 0440 0018                  		subi.w	#$18,d0
00011D9E 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00011DA4 6700                       		beq.s	Obj0B_MoveDown
00011DA6 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00011DAA B069 000C                  		cmp.w	$C(a1),d0
00011DAE 6500                       		bcs.s	Obj0B_MoveDown
00011DB0 3340 000C                  		move.w	d0,$C(a1)
00011DB4                            
00011DB4                            Obj0B_MoveDown:
00011DB4 0640 0024                  		addi.w	#$24,d0
00011DB8 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011DBE 6700                       		beq.s	Obj0B_LetGo
00011DC0 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011DC4 B069 000C                  		cmp.w	$C(a1),d0
00011DC8 6400                       		bcc.s	Obj0B_LetGo
00011DCA 3340 000C                  		move.w	d0,$C(a1)
00011DCE                            
00011DCE                            Obj0B_LetGo:
00011DCE 1038 F603                  		move.b	($FFFFF603).w,d0
00011DD2 0240 0070                  		andi.w	#$70,d0
00011DD6 6700                       		beq.s	Obj0B_Display
00011DD8                            
00011DD8                            Obj0B_Release:				; XREF: Obj0B_Action
00011DD8 4228 0020                  		clr.b	$20(a0)
00011DDC 5428 0024                  		addq.b	#2,$24(a0)
00011DE0 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011DE4 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011DE8 4228 0032                  		clr.b	$32(a0)
00011DEC 6000                       		bra.s	Obj0B_Display
00011DEE                            ; ===========================================================================
00011DEE                            
00011DEE                            Obj0B_Grab:				; XREF: Obj0B_Action
00011DEE 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011DF2 6700                       		beq.s	Obj0B_Display	; if not, branch
00011DF4 43F8 D000                  		lea	($FFFFD000).w,a1
00011DF8 3028 0008                  		move.w	8(a0),d0
00011DFC 0640 0014                  		addi.w	#$14,d0
00011E00 B069 0008                  		cmp.w	8(a1),d0
00011E04 6400                       		bcc.s	Obj0B_Display
00011E06 4228 0021                  		clr.b	$21(a0)
00011E0A 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011E10 6400                       		bcc.s	Obj0B_Display
00011E12 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011E16 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011E1A 3028 0008                  		move.w	8(a0),d0
00011E1E 0640 0014                  		addi.w	#$14,d0
00011E22 3340 0008                  		move.w	d0,8(a1)
00011E26 08A9 0000 0022             		bclr	#0,$22(a1)
00011E2C 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011E32 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00011E38 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011E3E 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011E44                            
00011E44                            Obj0B_Display:				; XREF: Obj0B_Index
00011E44 6000 E382                  		bra.w	MarkObjGone
00011E48                            ; ===========================================================================
00011E48                            ; ---------------------------------------------------------------------------
00011E48                            ; Sprite mappings - pole that breaks (LZ)
00011E48                            ; ---------------------------------------------------------------------------
00011E48                            Map_obj0B:
00011E48                            	include "_maps\obj0B.asm"
00011E48                            ; ---------------------------------------------------------------------------
00011E48                            ; Sprite mappings - pole that breaks (LZ)
00011E48                            ; ---------------------------------------------------------------------------
00011E48 0000                       		dc.w byte_11326-Map_obj0B
00011E4A 0000                       		dc.w byte_11331-Map_obj0B
00011E4C 02                         byte_11326:	dc.b 2			; normal pole
00011E4D E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011E52 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011E57 04                         byte_11331:	dc.b 4			; broken pole
00011E58 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011E5D F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011E62 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011E67 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011E6C                            		even
00011E6C                            		even
00011E6C                            
00011E6C                            ; ===========================================================================
00011E6C                            ; ---------------------------------------------------------------------------
00011E6C                            ; Object 0C - flapping door (LZ)
00011E6C                            ; ---------------------------------------------------------------------------
00011E6C                            
00011E6C                            Obj0C:					; XREF: Obj_Index
00011E6C 7000                       		moveq	#0,d0
00011E6E 1028 0024                  		move.b	$24(a0),d0
00011E72 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00011E76 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00011E7A                            ; ===========================================================================
00011E7A 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00011E7C 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00011E7E                            ; ===========================================================================
00011E7E                            
00011E7E                            Obj0C_Main:				; XREF: Obj0C_Index
00011E7E 5428 0024                  		addq.b	#2,$24(a0)
00011E82 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00011E8A 317C 4328 0002             		move.w	#$4328,2(a0)
00011E90 0028 0004 0001             		ori.b	#4,1(a0)
00011E96 117C 0028 0019             		move.b	#$28,$19(a0)
00011E9C 7000                       		moveq	#0,d0
00011E9E 1028 0028                  		move.b	$28(a0),d0	; get object type
00011EA2 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011EA6 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011EAA                            
00011EAA                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011EAA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011EAE 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011EB0 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00011EB6 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011EBC 4A28 0001                  		tst.b	1(a0)
00011EC0 6A00                       		bpl.s	Obj0C_Solid
00011EC2 303C 00BB                  		move.w	#$BB,d0
00011EC6 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play door sound
00011ECC                            
00011ECC                            Obj0C_Solid:
00011ECC 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011ED2 6100 9344                  		bsr.w	AnimateSprite
00011ED6 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011EDA 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011EDE 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011EE0 3038 D008                  		move.w	($FFFFD008).w,d0
00011EE4 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011EE8 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011EEA 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011EF0 323C 0013                  		move.w	#$13,d1
00011EF4 343C 0020                  		move.w	#$20,d2
00011EF8 3602                       		move.w	d2,d3
00011EFA 5243                       		addq.w	#1,d3
00011EFC 3828 0008                  		move.w	8(a0),d4
00011F00 6100 E5EE                  		bsr.w	SolidObject	; make the door	solid
00011F04                            
00011F04                            Obj0C_Display:
00011F04 6000 E2C2                  		bra.w	MarkObjGone
00011F08                            ; ===========================================================================
00011F08                            Ani_obj0C:
00011F08                            	include "_anim\obj0C.asm"
00011F08                            ; ---------------------------------------------------------------------------
00011F08                            ; Animation script - flapping door (LZ)
00011F08                            ; ---------------------------------------------------------------------------
00011F08 0000                       		dc.w byte_113E6-Ani_obj0C
00011F0A 0000                       		dc.w byte_113EC-Ani_obj0C
00011F0C 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011F12 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011F18                            		even
00011F18                            		even
00011F18                            
00011F18                            ; ---------------------------------------------------------------------------
00011F18                            ; Sprite mappings - flapping door (LZ)
00011F18                            ; ---------------------------------------------------------------------------
00011F18                            Map_obj0C:
00011F18                            	include "_maps\obj0C.asm"
00011F18                            ; ---------------------------------------------------------------------------
00011F18                            ; Sprite mappings - flapping door (LZ)
00011F18                            ; ---------------------------------------------------------------------------
00011F18 0000                       		dc.w byte_113F8-Map_obj0C
00011F1A 0000                       		dc.w byte_11403-Map_obj0C
00011F1C 0000                       		dc.w byte_1140E-Map_obj0C
00011F1E 02                         byte_113F8:	dc.b 2
00011F1F E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011F24 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011F29 02                         byte_11403:	dc.b 2
00011F2A DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011F2F 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011F34 02                         byte_1140E:	dc.b 2
00011F35 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00011F3A 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011F40 00                         		even
00011F40 00                         		even
00011F40                            
00011F40                            ; ===========================================================================
00011F40                            ; ---------------------------------------------------------------------------
00011F40                            ; Object 71 - invisible	solid blocks
00011F40                            ; ---------------------------------------------------------------------------
00011F40                            
00011F40                            Obj71:					; XREF: Obj_Index
00011F40 7000                       		moveq	#0,d0
00011F42 1028 0024                  		move.b	$24(a0),d0
00011F46 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00011F4A 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011F4E                            ; ===========================================================================
00011F4E 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011F50 0000                       		dc.w Obj71_Solid-Obj71_Index
00011F52                            ; ===========================================================================
00011F52                            
00011F52                            Obj71_Main:				; XREF: Obj71_Index
00011F52 5428 0024                  		addq.b	#2,$24(a0)
00011F56 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00011F5E 317C 8680 0002             		move.w	#$8680,2(a0)
00011F64 0028 0004 0001             		ori.b	#4,1(a0)
00011F6A 1028 0028                  		move.b	$28(a0),d0	; get object type
00011F6E 1200                       		move.b	d0,d1
00011F70 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00011F74 0640 0010                  		addi.w	#$10,d0
00011F78 E248                       		lsr.w	#1,d0
00011F7A 1140 0019                  		move.b	d0,$19(a0)	; set object width
00011F7E 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011F82 5241                       		addq.w	#1,d1
00011F84 E749                       		lsl.w	#3,d1
00011F86 1141 0016                  		move.b	d1,$16(a0)	; set object height
00011F8A                            
00011F8A                            Obj71_Solid:				; XREF: Obj71_Index
00011F8A 6100 C3F6                  		bsr.w	ChkObjOnScreen
00011F8E 6600                       		bne.s	Obj71_ChkDel
00011F90 7200                       		moveq	#0,d1
00011F92 1228 0019                  		move.b	$19(a0),d1
00011F96 0641 000B                  		addi.w	#$B,d1
00011F9A 7400                       		moveq	#0,d2
00011F9C 1428 0016                  		move.b	$16(a0),d2
00011FA0 3602                       		move.w	d2,d3
00011FA2 5243                       		addq.w	#1,d3
00011FA4 3828 0008                  		move.w	8(a0),d4
00011FA8 6100 E58C                  		bsr.w	SolidObject71
00011FAC                            
00011FAC                            Obj71_ChkDel:
00011FAC 3028 0008                  		move.w	8(a0),d0
00011FB0 0240 FF80                  		andi.w	#$FF80,d0
00011FB4 3238 F700                  		move.w	($FFFFF700).w,d1
00011FB8 0441 0080                  		subi.w	#$80,d1
00011FBC 0241 FF80                  		andi.w	#$FF80,d1
00011FC0 9041                       		sub.w	d1,d0
00011FC2 0C40 0280                  		cmpi.w	#$280,d0
00011FC6 6200                       		bhi.s	Obj71_Delete
00011FC8 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011FCC 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011FCE 4EFA C136                  		jmp	DisplaySprite	; if yes, display the object
00011FD2                            ; ===========================================================================
00011FD2                            
00011FD2                            Obj71_NoDisplay:
00011FD2 4E75                       		rts	
00011FD4                            ; ===========================================================================
00011FD4                            
00011FD4                            Obj71_Delete:
00011FD4 4EFA C16C                  		jmp	DeleteObject
00011FD8                            ; ===========================================================================
00011FD8                            ; ---------------------------------------------------------------------------
00011FD8                            ; Sprite mappings - invisible solid blocks
00011FD8                            ; ---------------------------------------------------------------------------
00011FD8                            Map_obj71:
00011FD8                            	include "_maps\obj71.asm"
00011FD8                            ; ---------------------------------------------------------------------------
00011FD8                            ; Sprite mappings - invisible solid blocks
00011FD8                            ; ---------------------------------------------------------------------------
00011FD8 0000                       		dc.w byte_114BC-Map_obj71
00011FDA 0000                       		dc.w byte_114D1-Map_obj71
00011FDC 0000                       		dc.w byte_114E6-Map_obj71
00011FDE 04                         byte_114BC:	dc.b 4
00011FDF F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011FE4 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011FE9 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011FEE 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011FF3 04                         byte_114D1:	dc.b 4
00011FF4 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011FF9 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011FFE 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00012003 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00012008 04                         byte_114E6:	dc.b 4
00012009 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
0001200E E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00012013 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00012018 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
0001201E 00                         		even
0001201E 00                         		even
0001201E                            
0001201E                            ; ===========================================================================
0001201E                            ; ---------------------------------------------------------------------------
0001201E                            ; Object 5D - fans (SLZ)
0001201E                            ; ---------------------------------------------------------------------------
0001201E                            
0001201E                            Obj5D:					; XREF: Obj_Index
0001201E 7000                       		moveq	#0,d0
00012020 1028 0024                  		move.b	$24(a0),d0
00012024 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00012028 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
0001202C                            ; ===========================================================================
0001202C 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
0001202E 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00012030                            ; ===========================================================================
00012030                            
00012030                            Obj5D_Main:				; XREF: Obj5D_Index
00012030 5428 0024                  		addq.b	#2,$24(a0)
00012034 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
0001203C 317C 43A0 0002             		move.w	#$43A0,2(a0)
00012042 0028 0004 0001             		ori.b	#4,1(a0)
00012048 117C 0010 0019             		move.b	#$10,$19(a0)
0001204E 117C 0004 0018             		move.b	#4,$18(a0)
00012054                            
00012054                            Obj5D_Delay:				; XREF: Obj5D_Index
00012054 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
0001205A 6600                       		bne.s	Obj5D_Blow	; if yes, branch
0001205C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012060 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00012062 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00012068 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
0001206E 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00012070 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00012076                            
00012076                            Obj5D_Blow:
00012076 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
0001207A 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
0001207E 43F8 D000                  		lea	($FFFFD000).w,a1
00012082 3029 0008                  		move.w	8(a1),d0
00012086 9068 0008                  		sub.w	8(a0),d0
0001208A 0828 0000 0022             		btst	#0,$22(a0)
00012090 6600                       		bne.s	Obj5D_ChkSonic
00012092 4440                       		neg.w	d0
00012094                            
00012094                            Obj5D_ChkSonic:
00012094 0640 0050                  		addi.w	#$50,d0
00012098 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
0001209C 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
0001209E 3229 000C                  		move.w	$C(a1),d1
000120A2 0641 0060                  		addi.w	#$60,d1
000120A6 9268 000C                  		sub.w	$C(a0),d1
000120AA 6500                       		bcs.s	Obj5D_Animate
000120AC 0C41 0070                  		cmpi.w	#$70,d1
000120B0 6400                       		bcc.s	Obj5D_Animate
000120B2 0440 0050                  		subi.w	#$50,d0
000120B6 6400                       		bcc.s	loc_1159A
000120B8 4640                       		not.w	d0
000120BA D040                       		add.w	d0,d0
000120BC                            
000120BC                            loc_1159A:
000120BC 0640 0060                  		addi.w	#$60,d0
000120C0 0828 0000 0022             		btst	#0,$22(a0)
000120C6 6600                       		bne.s	loc_115A8
000120C8 4440                       		neg.w	d0
000120CA                            
000120CA                            loc_115A8:
000120CA 4400                       		neg.b	d0
000120CC E840                       		asr.w	#4,d0
000120CE 0828 0000 0028             		btst	#0,$28(a0)
000120D4 6700                       		beq.s	Obj5D_MoveSonic
000120D6 4440                       		neg.w	d0
000120D8                            
000120D8                            Obj5D_MoveSonic:
000120D8 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
000120DC                            
000120DC                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
000120DC 5328 001E                  		subq.b	#1,$1E(a0)
000120E0 6A00                       		bpl.s	Obj5D_ChkDel
000120E2 117C 0000 001E             		move.b	#0,$1E(a0)
000120E8 5228 001B                  		addq.b	#1,$1B(a0)
000120EC 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
000120F2 6500                       		bcs.s	loc_115D8
000120F4 117C 0000 001B             		move.b	#0,$1B(a0)
000120FA                            
000120FA                            loc_115D8:
000120FA 7000                       		moveq	#0,d0
000120FC 0828 0000 0028             		btst	#0,$28(a0)
00012102 6700                       		beq.s	loc_115E4
00012104 7002                       		moveq	#2,d0
00012106                            
00012106                            loc_115E4:
00012106 D028 001B                  		add.b	$1B(a0),d0
0001210A 1140 001A                  		move.b	d0,$1A(a0)
0001210E                            
0001210E                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
0001210E 6100 BFF6                  		bsr.w	DisplaySprite
00012112 3028 0008                  		move.w	8(a0),d0
00012116 0240 FF80                  		andi.w	#$FF80,d0
0001211A 3238 F700                  		move.w	($FFFFF700).w,d1
0001211E 0441 0080                  		subi.w	#$80,d1
00012122 0241 FF80                  		andi.w	#$FF80,d1
00012126 9041                       		sub.w	d1,d0
00012128 0C40 0280                  		cmpi.w	#$280,d0
0001212C 6200 C014                  		bhi.w	DeleteObject
00012130 4E75                       		rts	
00012132                            ; ===========================================================================
00012132                            ; ---------------------------------------------------------------------------
00012132                            ; Sprite mappings - fans (SLZ)
00012132                            ; ---------------------------------------------------------------------------
00012132                            Map_obj5D:
00012132                            	include "_maps\obj5D.asm"
00012132                            ; ---------------------------------------------------------------------------
00012132                            ; Sprite mappings - fans (SLZ)
00012132                            ; ---------------------------------------------------------------------------
00012132 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00012136 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
0001213A 0000                       		dc.w byte_1161A-Map_obj5D
0001213C 02                         byte_1161A:	dc.b 2
0001213D F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00012142 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00012147 02                         byte_11625:	dc.b 2
00012148 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
0001214D 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00012152 02                         byte_11630:	dc.b 2
00012153 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00012158 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
0001215E 00                         		even
0001215E 00                         		even
0001215E                            
0001215E                            ; ===========================================================================
0001215E                            ; ---------------------------------------------------------------------------
0001215E                            ; Object 5E - seesaws (SLZ)
0001215E                            ; ---------------------------------------------------------------------------
0001215E                            
0001215E                            Obj5E:					; XREF: Obj_Index
0001215E 7000                       		moveq	#0,d0
00012160 1028 0024                  		move.b	$24(a0),d0
00012164 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00012168 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
0001216C 3028 0030                  		move.w	$30(a0),d0
00012170 0240 FF80                  		andi.w	#$FF80,d0
00012174 3238 F700                  		move.w	($FFFFF700).w,d1
00012178 0441 0080                  		subi.w	#$80,d1
0001217C 0241 FF80                  		andi.w	#$FF80,d1
00012180 9041                       		sub.w	d1,d0
00012182 6B00 BFBE                  		bmi.w	DeleteObject
00012186 0C40 0280                  		cmpi.w	#$280,d0
0001218A 6200 BFB6                  		bhi.w	DeleteObject
0001218E 6000 BF76                  		bra.w	DisplaySprite
00012192                            ; ===========================================================================
00012192 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00012194 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00012196 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00012198 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
0001219A 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
0001219C 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
0001219E                            ; ===========================================================================
0001219E                            
0001219E                            Obj5E_Main:				; XREF: Obj5E_Index
0001219E 5428 0024                  		addq.b	#2,$24(a0)
000121A2 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
000121AA 317C 0374 0002             		move.w	#$374,2(a0)
000121B0 0028 0004 0001             		ori.b	#4,1(a0)
000121B6 117C 0004 0018             		move.b	#4,$18(a0)
000121BC 117C 0030 0019             		move.b	#$30,$19(a0)
000121C2 3168 0008 0030             		move.w	8(a0),$30(a0)
000121C8 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
000121CC 6600                       		bne.s	loc_116D2	; if not, branch
000121CE 6100 C3E2                  		bsr.w	SingleObjLoad2
000121D2 6600                       		bne.s	loc_116D2
000121D4 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
000121D8 5C29 0024                  		addq.b	#6,$24(a1)
000121DC 3368 0008 0008             		move.w	8(a0),8(a1)
000121E2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000121E8 1368 0022 0022             		move.b	$22(a0),$22(a1)
000121EE 2348 003C                  		move.l	a0,$3C(a1)
000121F2                            
000121F2                            loc_116D2:
000121F2 0828 0000 0022             		btst	#0,$22(a0)
000121F8 6700                       		beq.s	loc_116E0
000121FA 117C 0002 001A             		move.b	#2,$1A(a0)
00012200                            
00012200                            loc_116E0:
00012200 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00012206                            
00012206                            Obj5E_Slope:				; XREF: Obj5E_Index
00012206 1228 003A                  		move.b	$3A(a0),d1
0001220A 6100 0000                  		bsr.w	loc_11766
0001220E 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00012214 0828 0000 001A             		btst	#0,$1A(a0)
0001221A 6700                       		beq.s	loc_11702
0001221C 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00012222                            
00012222                            loc_11702:
00012222 43F8 D000                  		lea	($FFFFD000).w,a1
00012226 3169 0012 0038             		move.w	$12(a1),$38(a0)
0001222C 323C 0030                  		move.w	#$30,d1
00012230 4EB9 0000 7FCC             		jsr	(SlopeObject).l
00012236 4E75                       		rts	
00012238                            ; ===========================================================================
00012238                            
00012238                            Obj5E_Slope2:				; XREF: Obj5E_Index
00012238 6100 0000                  		bsr.w	loc_1174A
0001223C 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00012242 0828 0000 001A             		btst	#0,$1A(a0)
00012248 6700                       		beq.s	loc_11730
0001224A 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00012250                            
00012250                            loc_11730:
00012250 323C 0030                  		move.w	#$30,d1
00012254 4EB9 0000 806C             		jsr	(ExitPlatform).l
0001225A 323C 0030                  		move.w	#$30,d1
0001225E 3428 0008                  		move.w	8(a0),d2
00012262 4EB9 0000 8FCA             		jsr	SlopeObject2
00012268 4E75                       		rts	
0001226A                            ; ===========================================================================
0001226A                            
0001226A                            loc_1174A:				; XREF: Obj5E_Slope2
0001226A 7202                       		moveq	#2,d1
0001226C 43F8 D000                  		lea	($FFFFD000).w,a1
00012270 3028 0008                  		move.w	8(a0),d0
00012274 9069 0008                  		sub.w	8(a1),d0
00012278 6400                       		bcc.s	loc_1175E
0001227A 4440                       		neg.w	d0
0001227C 7200                       		moveq	#0,d1
0001227E                            
0001227E                            loc_1175E:
0001227E 0C40 0008                  		cmpi.w	#8,d0
00012282 6400                       		bcc.s	loc_11766
00012284 7201                       		moveq	#1,d1
00012286                            
00012286                            loc_11766:
00012286 1028 001A                  		move.b	$1A(a0),d0
0001228A B001                       		cmp.b	d1,d0
0001228C 6700                       		beq.s	locret_11790
0001228E 6400                       		bcc.s	loc_11772
00012290 5400                       		addq.b	#2,d0
00012292                            
00012292                            loc_11772:
00012292 5300                       		subq.b	#1,d0
00012294 1140 001A                  		move.b	d0,$1A(a0)
00012298 1141 003A                  		move.b	d1,$3A(a0)
0001229C 08A8 0000 0001             		bclr	#0,1(a0)
000122A2 0828 0001 001A             		btst	#1,$1A(a0)
000122A8 6700                       		beq.s	locret_11790
000122AA 08E8 0000 0001             		bset	#0,1(a0)
000122B0                            
000122B0                            locret_11790:
000122B0 4E75                       		rts	
000122B2                            ; ===========================================================================
000122B2                            
000122B2                            Obj5E_Spikeball:			; XREF: Obj5E_Index
000122B2 5428 0024                  		addq.b	#2,$24(a0)
000122B6 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
000122BE 317C 04F0 0002             		move.w	#$4F0,2(a0)
000122C4 0028 0004 0001             		ori.b	#4,1(a0)
000122CA 117C 0004 0018             		move.b	#4,$18(a0)
000122D0 117C 008B 0020             		move.b	#$8B,$20(a0)
000122D6 117C 000C 0019             		move.b	#$C,$19(a0)
000122DC 3168 0008 0030             		move.w	8(a0),$30(a0)
000122E2 0668 0028 0008             		addi.w	#$28,8(a0)
000122E8 3168 000C 0034             		move.w	$C(a0),$34(a0)
000122EE 117C 0001 001A             		move.b	#1,$1A(a0)
000122F4 0828 0000 0022             		btst	#0,$22(a0)
000122FA 6700                       		beq.s	Obj5E_MoveSpike
000122FC 0468 0050 0008             		subi.w	#$50,8(a0)
00012302 117C 0002 003A             		move.b	#2,$3A(a0)
00012308                            
00012308                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00012308 2268 003C                  		movea.l	$3C(a0),a1
0001230C 7000                       		moveq	#0,d0
0001230E 1028 003A                  		move.b	$3A(a0),d0
00012312 9029 003A                  		sub.b	$3A(a1),d0
00012316 6700                       		beq.s	loc_1183E
00012318 6400                       		bcc.s	loc_117FC
0001231A 4400                       		neg.b	d0
0001231C                            
0001231C                            loc_117FC:
0001231C 323C F7E8                  		move.w	#-$818,d1
00012320 343C FEEC                  		move.w	#-$114,d2
00012324 0C00 0001                  		cmpi.b	#1,d0
00012328 6700                       		beq.s	loc_11822
0001232A 323C F510                  		move.w	#-$AF0,d1
0001232E 343C FF34                  		move.w	#-$CC,d2
00012332 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00012338 6D00                       		blt.s	loc_11822
0001233A 323C F200                  		move.w	#-$E00,d1
0001233E 343C FF60                  		move.w	#-$A0,d2
00012342                            
00012342                            loc_11822:
00012342 3141 0012                  		move.w	d1,$12(a0)
00012346 3142 0010                  		move.w	d2,$10(a0)
0001234A 3028 0008                  		move.w	8(a0),d0
0001234E 9068 0030                  		sub.w	$30(a0),d0
00012352 6400                       		bcc.s	loc_11838
00012354 4468 0010                  		neg.w	$10(a0)
00012358                            
00012358                            loc_11838:
00012358 5428 0024                  		addq.b	#2,$24(a0)
0001235C 6000                       		bra.s	Obj5E_SpikeFall
0001235E                            ; ===========================================================================
0001235E                            
0001235E                            loc_1183E:				; XREF: Obj5E_MoveSpike
0001235E 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00012364 7000                       		moveq	#0,d0
00012366 1029 001A                  		move.b	$1A(a1),d0
0001236A 343C 0028                  		move.w	#$28,d2
0001236E 3228 0008                  		move.w	8(a0),d1
00012372 9268 0030                  		sub.w	$30(a0),d1
00012376 6400                       		bcc.s	loc_1185C
00012378 4442                       		neg.w	d2
0001237A 5440                       		addq.w	#2,d0
0001237C                            
0001237C                            loc_1185C:
0001237C D040                       		add.w	d0,d0
0001237E 3228 0034                  		move.w	$34(a0),d1
00012382 D272 0000                  		add.w	(a2,d0.w),d1
00012386 3141 000C                  		move.w	d1,$C(a0)
0001238A D468 0030                  		add.w	$30(a0),d2
0001238E 3142 0008                  		move.w	d2,8(a0)
00012392 4268 000E                  		clr.w	$E(a0)
00012396 4268 000A                  		clr.w	$A(a0)
0001239A 4E75                       		rts	
0001239C                            ; ===========================================================================
0001239C                            
0001239C                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
0001239C 4A68 0012                  		tst.w	$12(a0)
000123A0 6A00                       		bpl.s	loc_1189A
000123A2 6100 BD10                  		bsr.w	ObjectFall
000123A6 3028 0034                  		move.w	$34(a0),d0
000123AA 0440 002F                  		subi.w	#$2F,d0
000123AE B068 000C                  		cmp.w	$C(a0),d0
000123B2 6E00                       		bgt.s	locret_11898
000123B4 6100 BCFE                  		bsr.w	ObjectFall
000123B8                            
000123B8                            locret_11898:
000123B8 4E75                       		rts	
000123BA                            ; ===========================================================================
000123BA                            
000123BA                            loc_1189A:				; XREF: Obj5E_SpikeFall
000123BA 6100 BCF8                  		bsr.w	ObjectFall
000123BE 2268 003C                  		movea.l	$3C(a0),a1
000123C2 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000123C8 7000                       		moveq	#0,d0
000123CA 1029 001A                  		move.b	$1A(a1),d0
000123CE 3228 0008                  		move.w	8(a0),d1
000123D2 9268 0030                  		sub.w	$30(a0),d1
000123D6 6400                       		bcc.s	loc_118BA
000123D8 5440                       		addq.w	#2,d0
000123DA                            
000123DA                            loc_118BA:
000123DA D040                       		add.w	d0,d0
000123DC 3228 0034                  		move.w	$34(a0),d1
000123E0 D272 0000                  		add.w	(a2,d0.w),d1
000123E4 B268 000C                  		cmp.w	$C(a0),d1
000123E8 6E00                       		bgt.s	locret_11938
000123EA 2268 003C                  		movea.l	$3C(a0),a1
000123EE 7202                       		moveq	#2,d1
000123F0 4A68 0010                  		tst.w	$10(a0)
000123F4 6B00                       		bmi.s	Obj5E_Spring
000123F6 7200                       		moveq	#0,d1
000123F8                            
000123F8                            Obj5E_Spring:
000123F8 1341 003A                  		move.b	d1,$3A(a1)
000123FC 1141 003A                  		move.b	d1,$3A(a0)
00012400 B229 001A                  		cmp.b	$1A(a1),d1
00012404 6700                       		beq.s	loc_1192C
00012406 08A9 0003 0022             		bclr	#3,$22(a1)
0001240C 6700                       		beq.s	loc_1192C
0001240E 4229 0025                  		clr.b	$25(a1)
00012412 137C 0002 0024             		move.b	#2,$24(a1)
00012418 45F8 D000                  		lea	($FFFFD000).w,a2
0001241C 3568 0012 0012             		move.w	$12(a0),$12(a2)
00012422 446A 0012                  		neg.w	$12(a2)
00012426 08EA 0001 0022             		bset	#1,$22(a2)
0001242C 08AA 0003 0022             		bclr	#3,$22(a2)
00012432 422A 003C                  		clr.b	$3C(a2)
00012436 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
0001243C 157C 0002 0024             		move.b	#2,$24(a2)
00012442 303C 00CC                  		move.w	#$CC,d0
00012446 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play spring sound
0001244C                            
0001244C                            loc_1192C:
0001244C 4268 0010                  		clr.w	$10(a0)
00012450 4268 0012                  		clr.w	$12(a0)
00012454 5528 0024                  		subq.b	#2,$24(a0)
00012458                            
00012458                            locret_11938:
00012458 4E75                       		rts	
0001245A                            ; ===========================================================================
0001245A FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00012464                            
00012464                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00012494                            		even
00012494                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
000124C4                            		even
000124C4                            ; ---------------------------------------------------------------------------
000124C4                            ; Sprite mappings - seesaws (SLZ)
000124C4                            ; ---------------------------------------------------------------------------
000124C4                            Map_obj5E:
000124C4                            	include "_maps\obj5E.asm"
000124C4                            ; ---------------------------------------------------------------------------
000124C4                            ; Sprite mappings - seesaws (SLZ)
000124C4                            ; ---------------------------------------------------------------------------
000124C4 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000124C8 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000124CC 07                         byte_119AC:	dc.b 7
000124CD D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
000124D2 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
000124D7 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
000124DC EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
000124E1 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
000124E6 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
000124EB FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
000124F0 04                         byte_119D0:	dc.b 4
000124F1 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
000124F6 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
000124FB E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00012500 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00012506 00                         		even
00012506 00                         		even
00012506                            
00012506                            ; ---------------------------------------------------------------------------
00012506                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00012506                            ; ---------------------------------------------------------------------------
00012506                            Map_obj5Ea:
00012506                            	include "_maps\obj5Eballs.asm"
00012506                            ; ---------------------------------------------------------------------------
00012506                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00012506                            ; ---------------------------------------------------------------------------
00012506 0000                       		dc.w byte_119EA-Map_obj5Ea
00012508 0000                       		dc.w byte_119F0-Map_obj5Ea
0001250A 01                         byte_119EA:	dc.b 1
0001250B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012510 01                         byte_119F0:	dc.b 1
00012511 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00012516                            		even
00012516                            		even
00012516                            
00012516                            ; ===========================================================================
00012516                            ; ---------------------------------------------------------------------------
00012516                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00012516                            ; ---------------------------------------------------------------------------
00012516                            
00012516                            Obj5F:					; XREF: Obj_Index
00012516 7000                       		moveq	#0,d0
00012518 1028 0024                  		move.b	$24(a0),d0
0001251C 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00012520 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00012524                            ; ===========================================================================
00012524 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00012526 0000                       		dc.w Obj5F_Action-Obj5F_Index
00012528 0000                       		dc.w Obj5F_Display-Obj5F_Index
0001252A 0000                       		dc.w Obj5F_End-Obj5F_Index
0001252C                            ; ===========================================================================
0001252C                            
0001252C                            Obj5F_Main:				; XREF: Obj5F_Index
0001252C 5428 0024                  		addq.b	#2,$24(a0)
00012530 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00012538 317C 0400 0002             		move.w	#$400,2(a0)
0001253E 0028 0004 0001             		ori.b	#4,1(a0)
00012544 117C 0003 0018             		move.b	#3,$18(a0)
0001254A 117C 000C 0019             		move.b	#$C,$19(a0)
00012550 1028 0028                  		move.b	$28(a0),d0
00012554 6700                       		beq.s	loc_11A3C
00012556 1140 0024                  		move.b	d0,$24(a0)
0001255A 4E75                       		rts	
0001255C                            ; ===========================================================================
0001255C                            
0001255C                            loc_11A3C:
0001255C 117C 009A 0020             		move.b	#$9A,$20(a0)
00012562 0868 0000 0022             		bchg	#0,$22(a0)
00012568                            
00012568                            Obj5F_Action:				; XREF: Obj5F_Index
00012568 7000                       		moveq	#0,d0
0001256A 1028 0025                  		move.b	$25(a0),d0
0001256E 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00012572 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00012576 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001257C 6100 8C9A                  		bsr.w	AnimateSprite
00012580 6000 DC46                  		bra.w	MarkObjGone
00012584                            ; ===========================================================================
00012584 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00012586 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00012588 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
0001258A                            ; ===========================================================================
0001258A                            
0001258A                            Obj5F_Walk:				; XREF: Obj5F_Index2
0001258A 6100 0000                  		bsr.w	Obj5F_ChkSonic
0001258E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012592 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00012594 5428 0025                  		addq.b	#2,$25(a0)
00012598 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
0001259E 317C 0010 0010             		move.w	#$10,$10(a0)
000125A4 117C 0001 001C             		move.b	#1,$1C(a0)
000125AA 0868 0000 0022             		bchg	#0,$22(a0)
000125B0 6700                       		beq.s	locret_11A96
000125B2 4468 0010                  		neg.w	$10(a0)		; change direction
000125B6                            
000125B6                            locret_11A96:
000125B6 4E75                       		rts	
000125B8                            ; ===========================================================================
000125B8                            
000125B8                            Obj5F_Wait:				; XREF: Obj5F_Index2
000125B8 6100 0000                  		bsr.w	Obj5F_ChkSonic
000125BC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000125C0 6B00                       		bmi.s	loc_11AA8
000125C2 6100 BB1C                  		bsr.w	SpeedToPos
000125C6 4E75                       		rts	
000125C8                            ; ===========================================================================
000125C8                            
000125C8                            loc_11AA8:
000125C8 5528 0025                  		subq.b	#2,$25(a0)
000125CC 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
000125D2 4268 0010                  		clr.w	$10(a0)		; stop walking
000125D6 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
000125DC 4E75                       		rts	
000125DE                            ; ===========================================================================
000125DE                            
000125DE                            Obj5F_Explode:				; XREF: Obj5F_Index2
000125DE 5368 0030                  		subq.w	#1,$30(a0)
000125E2 6A00                       		bpl.s	locret_11AD0
000125E4 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
000125E8 117C 0000 0024             		move.b	#0,$24(a0)
000125EE                            
000125EE                            locret_11AD0:
000125EE 4E75                       		rts	
000125F0                            ; ===========================================================================
000125F0                            
000125F0                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
000125F0 3038 D008                  		move.w	($FFFFD008).w,d0
000125F4 9068 0008                  		sub.w	8(a0),d0
000125F8 6400                       		bcc.s	loc_11ADE
000125FA 4440                       		neg.w	d0
000125FC                            
000125FC                            loc_11ADE:
000125FC 0C40 0060                  		cmpi.w	#$60,d0
00012600 6400                       		bcc.s	locret_11B5E
00012602 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012606 9068 000C                  		sub.w	$C(a0),d0
0001260A 6400                       		bcc.s	Obj5F_MakeFuse
0001260C 4440                       		neg.w	d0
0001260E                            
0001260E                            Obj5F_MakeFuse:
0001260E 0C40 0060                  		cmpi.w	#$60,d0
00012612 6400                       		bcc.s	locret_11B5E
00012614 4A78 FE08                  		tst.w	($FFFFFE08).w
00012618 6600                       		bne.s	locret_11B5E
0001261A 117C 0004 0025             		move.b	#4,$25(a0)
00012620 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00012626 4268 0010                  		clr.w	$10(a0)
0001262A 117C 0002 001C             		move.b	#2,$1C(a0)
00012630 6100 BF80                  		bsr.w	SingleObjLoad2
00012634 6600                       		bne.s	locret_11B5E
00012636 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
0001263A 3368 0008 0008             		move.w	8(a0),8(a1)
00012640 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012646 3368 000C 0034             		move.w	$C(a0),$34(a1)
0001264C 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012652 137C 0004 0028             		move.b	#4,$28(a1)
00012658 137C 0003 001C             		move.b	#3,$1C(a1)
0001265E 337C 0010 0012             		move.w	#$10,$12(a1)
00012664 0828 0001 0022             		btst	#1,$22(a0)
0001266A 6700                       		beq.s	loc_11B54
0001266C 4469 0012                  		neg.w	$12(a1)
00012670                            
00012670                            loc_11B54:
00012670 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00012676 2348 003C                  		move.l	a0,$3C(a1)
0001267A                            
0001267A                            locret_11B5E:
0001267A 4E75                       		rts	
0001267C                            ; ===========================================================================
0001267C                            
0001267C                            Obj5F_Display:				; XREF: Obj5F_Index
0001267C 6100                       		bsr.s	loc_11B70
0001267E 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012684 6100 8B92                  		bsr.w	AnimateSprite
00012688 6000 DB3E                  		bra.w	MarkObjGone
0001268C                            ; ===========================================================================
0001268C                            
0001268C                            loc_11B70:
0001268C 5368 0030                  		subq.w	#1,$30(a0)
00012690 6B00                       		bmi.s	loc_11B7C
00012692 6100 BA4C                  		bsr.w	SpeedToPos
00012696 4E75                       		rts	
00012698                            ; ===========================================================================
00012698                            
00012698                            loc_11B7C:
00012698 4268 0030                  		clr.w	$30(a0)
0001269C 4228 0024                  		clr.b	$24(a0)
000126A0 3168 0034 000C             		move.w	$34(a0),$C(a0)
000126A6 7203                       		moveq	#3,d1
000126A8 2248                       		movea.l	a0,a1
000126AA 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
000126B0 6000                       		bra.s	Obj5F_MakeShrap
000126B2                            ; ===========================================================================
000126B2                            
000126B2                            Obj5F_Loop:
000126B2 6100 BEFE                  		bsr.w	SingleObjLoad2
000126B6 6600                       		bne.s	loc_11BCE
000126B8                            
000126B8                            Obj5F_MakeShrap:			; XREF: loc_11B7C
000126B8 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
000126BC 3368 0008 0008             		move.w	8(a0),8(a1)
000126C2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000126C8 137C 0006 0028             		move.b	#6,$28(a1)
000126CE 137C 0004 001C             		move.b	#4,$1C(a1)
000126D4 335A 0010                  		move.w	(a2)+,$10(a1)
000126D8 335A 0012                  		move.w	(a2)+,$12(a1)
000126DC 137C 0098 0020             		move.b	#$98,$20(a1)
000126E2 08E9 0007 0001             		bset	#7,1(a1)
000126E8                            
000126E8                            loc_11BCE:
000126E8 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
000126EC                            
000126EC 117C 0006 0024             		move.b	#6,$24(a0)
000126F2                            
000126F2                            Obj5F_End:				; XREF: Obj5F_Index
000126F2 6100 B9EC                  		bsr.w	SpeedToPos
000126F6 0668 0018 0012             		addi.w	#$18,$12(a0)
000126FC 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012702 6100 8B14                  		bsr.w	AnimateSprite
00012706 4A28 0001                  		tst.b	1(a0)
0001270A 6A00 BA36                  		bpl.w	DeleteObject
0001270E 6000 B9F6                  		bra.w	DisplaySprite
00012712                            ; ===========================================================================
00012712 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00012722                            
00012722                            Ani_obj5F:
00012722                            	include "_anim\obj5F.asm"
00012722                            ; ---------------------------------------------------------------------------
00012722                            ; Animation script - Bomb enemy
00012722                            ; ---------------------------------------------------------------------------
00012722 0000                       		dc.w byte_11C12-Ani_obj5F
00012724 0000                       		dc.w byte_11C16-Ani_obj5F
00012726 0000                       		dc.w byte_11C1C-Ani_obj5F
00012728 0000                       		dc.w byte_11C20-Ani_obj5F
0001272A 0000                       		dc.w byte_11C24-Ani_obj5F
0001272C 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00012730 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00012736 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
0001273A 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
0001273E 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00012742                            		even
00012742                            		even
00012742                            
00012742                            ; ---------------------------------------------------------------------------
00012742                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012742                            ; ---------------------------------------------------------------------------
00012742                            Map_obj5F:
00012742                            	include "_maps\obj5F.asm"
00012742                            ; ---------------------------------------------------------------------------
00012742                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012742                            ; ---------------------------------------------------------------------------
00012742 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00012746 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
0001274A 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
0001274E 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00012752 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00012756 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
0001275A 03                         byte_11C40:	dc.b 3
0001275B F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012760 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012765 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001276A 03                         byte_11C50:	dc.b 3
0001276B F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012770 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012775 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001277A 03                         byte_11C60:	dc.b 3
0001277B F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012780 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00012785 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
0001278A 03                         byte_11C70:	dc.b 3
0001278B F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012790 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00012795 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001279A 03                         byte_11C80:	dc.b 3
0001279B F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000127A0 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
000127A5 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000127AA 03                         byte_11C90:	dc.b 3
000127AB F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000127B0 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
000127B5 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000127BA 02                         byte_11CA0:	dc.b 2
000127BB F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000127C0 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000127C5 02                         byte_11CAB:	dc.b 2
000127C6 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000127CB 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000127D0 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
000127D1 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
000127D6 01                         byte_11CBC:	dc.b 1			; fuse
000127D7 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
000127DC 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
000127DD FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000127E2 01                         byte_11CC8:	dc.b 1			; fireball
000127E3 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000127E8                            		even
000127E8                            		even
000127E8                            
000127E8                            ; ===========================================================================
000127E8                            ; ---------------------------------------------------------------------------
000127E8                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
000127E8                            ; ---------------------------------------------------------------------------
000127E8                            
000127E8                            Obj60:					; XREF: Obj_Index
000127E8 7000                       		moveq	#0,d0
000127EA 1028 0024                  		move.b	$24(a0),d0
000127EE 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
000127F2 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
000127F6                            ; ===========================================================================
000127F6 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
000127F8 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
000127FA 0000                       		dc.w Obj60_Display-Obj60_Index
000127FC 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
000127FE 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00012800                            ; ===========================================================================
00012800                            
00012800                            Obj60_Main:				; XREF: Obj60_Index
00012800 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00012808 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
0001280E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00012814 6700                       		beq.s	loc_11D02
00012816 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
0001281C                            
0001281C                            loc_11D02:
0001281C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00012822 6600                       		bne.s	loc_11D10
00012824 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
0001282A                            
0001282A                            loc_11D10:
0001282A 0028 0004 0001             		ori.b	#4,1(a0)
00012830 117C 0004 0018             		move.b	#4,$18(a0)
00012836 117C 000B 0020             		move.b	#$B,$20(a0)
0001283C 117C 000C 0019             		move.b	#$C,$19(a0)
00012842 7400                       		moveq	#0,d2
00012844 45E8 0037                  		lea	$37(a0),a2
00012848 264A                       		movea.l	a2,a3
0001284A 524A                       		addq.w	#1,a2
0001284C 7203                       		moveq	#3,d1
0001284E                            
0001284E                            Obj60_MakeOrbs:
0001284E 6100 BD62                  		bsr.w	SingleObjLoad2
00012852 6600                       		bne.s	loc_11D90
00012854 5213                       		addq.b	#1,(a3)
00012856 3A09                       		move.w	a1,d5
00012858 0445 D000                  		subi.w	#-$3000,d5
0001285C EC4D                       		lsr.w	#6,d5
0001285E 0245 007F                  		andi.w	#$7F,d5
00012862 14C5                       		move.b	d5,(a2)+
00012864 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00012866 137C 0006 0024             		move.b	#6,$24(a1)
0001286C 2368 0004 0004             		move.l	4(a0),4(a1)
00012872 3368 0002 0002             		move.w	2(a0),2(a1)
00012878 0029 0004 0001             		ori.b	#4,1(a1)
0001287E 137C 0004 0018             		move.b	#4,$18(a1)
00012884 137C 0008 0019             		move.b	#8,$19(a1)
0001288A 137C 0003 001A             		move.b	#3,$1A(a1)
00012890 137C 0098 0020             		move.b	#$98,$20(a1)
00012896 1342 0026                  		move.b	d2,$26(a1)
0001289A 0602 0040                  		addi.b	#$40,d2
0001289E 2348 003C                  		move.l	a0,$3C(a1)
000128A2 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
000128A6                            
000128A6                            loc_11D90:
000128A6 7001                       		moveq	#1,d0
000128A8 0828 0000 0022             		btst	#0,$22(a0)
000128AE 6700                       		beq.s	Obj60_Move
000128B0 4440                       		neg.w	d0
000128B2                            
000128B2                            Obj60_Move:
000128B2 1140 0036                  		move.b	d0,$36(a0)
000128B6 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
000128BC 5428 0024                  		addq.b	#2,$24(a0)
000128C0 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
000128C6 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
000128CC 6700                       		beq.s	locret_11DBC	; if not, branch
000128CE 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
000128D2                            
000128D2                            locret_11DBC:
000128D2 4E75                       		rts	
000128D4                            ; ===========================================================================
000128D4                            
000128D4                            Obj60_ChkSonic:				; XREF: Obj60_Index
000128D4 3038 D008                  		move.w	($FFFFD008).w,d0
000128D8 9068 0008                  		sub.w	8(a0),d0
000128DC 6400                       		bcc.s	loc_11DCA
000128DE 4440                       		neg.w	d0
000128E0                            
000128E0                            loc_11DCA:
000128E0 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
000128E4 6400                       		bcc.s	Obj60_Animate	; if not, branch
000128E6 3038 D00C                  		move.w	($FFFFD00C).w,d0
000128EA 9068 000C                  		sub.w	$C(a0),d0
000128EE 6400                       		bcc.s	loc_11DDC
000128F0 4440                       		neg.w	d0
000128F2                            
000128F2                            loc_11DDC:
000128F2 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
000128F6 6400                       		bcc.s	Obj60_Animate	; if not, branch
000128F8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000128FC 6600                       		bne.s	Obj60_Animate	; if yes, branch
000128FE 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00012904                            
00012904                            Obj60_Animate:
00012904 43F9 0000 0000             		lea	(Ani_obj60).l,a1
0001290A 6100 890C                  		bsr.w	AnimateSprite
0001290E 6000 0000                  		bra.w	Obj60_ChkDel
00012912                            ; ===========================================================================
00012912                            
00012912                            Obj60_Display:				; XREF: Obj60_Index
00012912 6100 B7CC                  		bsr.w	SpeedToPos
00012916                            
00012916                            Obj60_ChkDel:				; XREF: Obj60_Animate
00012916 3028 0008                  		move.w	8(a0),d0
0001291A 0240 FF80                  		andi.w	#$FF80,d0
0001291E 3238 F700                  		move.w	($FFFFF700).w,d1
00012922 0441 0080                  		subi.w	#$80,d1
00012926 0241 FF80                  		andi.w	#$FF80,d1
0001292A 9041                       		sub.w	d1,d0
0001292C 0C40 0280                  		cmpi.w	#$280,d0
00012930 6200 0000                  		bhi.w	Obj60_ChkGone
00012934 6000 B7D0                  		bra.w	DisplaySprite
00012938                            ; ===========================================================================
00012938                            
00012938                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00012938 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001293C 7000                       		moveq	#0,d0
0001293E 1028 0023                  		move.b	$23(a0),d0
00012942 6700                       		beq.s	loc_11E34
00012944 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001294A                            
0001294A                            loc_11E34:
0001294A 45E8 0037                  		lea	$37(a0),a2
0001294E 7400                       		moveq	#0,d2
00012950 141A                       		move.b	(a2)+,d2
00012952 5342                       		subq.w	#1,d2
00012954 6500                       		bcs.s	Obj60_Delete
00012956                            
00012956                            loc_11E40:
00012956 7000                       		moveq	#0,d0
00012958 101A                       		move.b	(a2)+,d0
0001295A ED48                       		lsl.w	#6,d0
0001295C 0680 00FF D000             		addi.l	#$FFD000,d0
00012962 2240                       		movea.l	d0,a1
00012964 6100 B7DE                  		bsr.w	DeleteObject2
00012968 51CA FFEC                  		dbf	d2,loc_11E40
0001296C                            
0001296C                            Obj60_Delete:
0001296C 6000 B7D4                  		bra.w	DeleteObject
00012970                            ; ===========================================================================
00012970                            
00012970                            Obj60_MoveOrb:				; XREF: Obj60_Index
00012970 2268 003C                  		movea.l	$3C(a0),a1
00012974 0C11 0060                  		cmpi.b	#$60,0(a1)
00012978 6600 B7C8                  		bne.w	DeleteObject
0001297C 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
00012982 6600                       		bne.s	Obj60_Circle
00012984 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
0001298A 6600                       		bne.s	Obj60_Circle
0001298C 5428 0024                  		addq.b	#2,$24(a0)
00012990 5329 0037                  		subq.b	#1,$37(a1)
00012994 6600                       		bne.s	Obj60_FireOrb
00012996 5429 0024                  		addq.b	#2,$24(a1)
0001299A                            
0001299A                            Obj60_FireOrb:
0001299A 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
000129A0 0829 0000 0022             		btst	#0,$22(a1)
000129A6 6700                       		beq.s	Obj60_Display2
000129A8 4468 0010                  		neg.w	$10(a0)
000129AC                            
000129AC                            Obj60_Display2:
000129AC 6000 B758                  		bra.w	DisplaySprite
000129B0                            ; ===========================================================================
000129B0                            
000129B0                            Obj60_Circle:				; XREF: Obj60_MoveOrb
000129B0 1028 0026                  		move.b	$26(a0),d0
000129B4 4EB9 0000 33D4             		jsr	(CalcSine).l
000129BA E841                       		asr.w	#4,d1
000129BC D269 0008                  		add.w	8(a1),d1
000129C0 3141 0008                  		move.w	d1,8(a0)
000129C4 E840                       		asr.w	#4,d0
000129C6 D069 000C                  		add.w	$C(a1),d0
000129CA 3140 000C                  		move.w	d0,$C(a0)
000129CE 1029 0036                  		move.b	$36(a1),d0
000129D2 D128 0026                  		add.b	d0,$26(a0)
000129D6 6000 B72E                  		bra.w	DisplaySprite
000129DA                            ; ===========================================================================
000129DA                            
000129DA                            Obj60_ChkDel2:				; XREF: Obj60_Index
000129DA 6100 B704                  		bsr.w	SpeedToPos
000129DE 4A28 0001                  		tst.b	1(a0)
000129E2 6A00 B75E                  		bpl.w	DeleteObject
000129E6 6000 B71E                  		bra.w	DisplaySprite
000129EA                            ; ===========================================================================
000129EA                            Ani_obj60:
000129EA                            	include "_anim\obj60.asm"
000129EA                            ; ---------------------------------------------------------------------------
000129EA                            ; Animation script - Orbinaut enemy
000129EA                            ; ---------------------------------------------------------------------------
000129EA 0000                       		dc.w byte_11EDA-Ani_obj60
000129EC 0000                       		dc.w byte_11EDE-Ani_obj60
000129EE 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
000129F2 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
000129F8                            		even
000129F8                            		even
000129F8                            
000129F8                            ; ---------------------------------------------------------------------------
000129F8                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000129F8                            ; ---------------------------------------------------------------------------
000129F8                            Map_obj60:
000129F8                            	include "_maps\obj60.asm"
000129F8                            ; ---------------------------------------------------------------------------
000129F8                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000129F8                            ; ---------------------------------------------------------------------------
000129F8 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
000129FC 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00012A00 01                         byte_11EEC:	dc.b 1
00012A01 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012A06 01                         byte_11EF2:	dc.b 1
00012A07 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00012A0C 01                         byte_11EF8:	dc.b 1
00012A0D F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00012A12 01                         byte_11EFE:	dc.b 1
00012A13 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00012A18                            		even
00012A18                            		even
00012A18                            
00012A18                            ; ===========================================================================
00012A18                            ; ---------------------------------------------------------------------------
00012A18                            ; Object 16 - harpoon (LZ)
00012A18                            ; ---------------------------------------------------------------------------
00012A18                            
00012A18                            Obj16:					; XREF: Obj_Index
00012A18 7000                       		moveq	#0,d0
00012A1A 1028 0024                  		move.b	$24(a0),d0
00012A1E 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
00012A22 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00012A26                            ; ===========================================================================
00012A26 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00012A28 0000                       		dc.w Obj16_Move-Obj16_Index
00012A2A 0000                       		dc.w Obj16_Wait-Obj16_Index
00012A2C                            ; ===========================================================================
00012A2C                            
00012A2C                            Obj16_Main:				; XREF: Obj16_Index
00012A2C 5428 0024                  		addq.b	#2,$24(a0)
00012A30 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00012A38 317C 03CC 0002             		move.w	#$3CC,2(a0)
00012A3E 0028 0004 0001             		ori.b	#4,1(a0)
00012A44 117C 0004 0018             		move.b	#4,$18(a0)
00012A4A 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00012A50 117C 0014 0019             		move.b	#$14,$19(a0)
00012A56 317C 003C 0030             		move.w	#60,$30(a0)
00012A5C                            
00012A5C                            Obj16_Move:				; XREF: Obj16_Index
00012A5C 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00012A62 6100 87B4                  		bsr.w	AnimateSprite
00012A66 7000                       		moveq	#0,d0
00012A68 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00012A6C 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00012A72 6000 D754                  		bra.w	MarkObjGone
00012A76                            ; ===========================================================================
00012A76 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00012A7C                            ; ===========================================================================
00012A7C                            
00012A7C                            Obj16_Wait:				; XREF: Obj16_Index
00012A7C 5368 0030                  		subq.w	#1,$30(a0)
00012A80 6A00                       		bpl.s	Obj16_ChkDel
00012A82 317C 003C 0030             		move.w	#60,$30(a0)
00012A88 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
00012A8C 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
00012A92                            
00012A92                            Obj16_ChkDel:
00012A92 6000 D734                  		bra.w	MarkObjGone
00012A96                            ; ===========================================================================
00012A96                            Ani_obj16:
00012A96                            	include "_anim\obj16.asm"
00012A96                            ; ---------------------------------------------------------------------------
00012A96                            ; Animation script - harpoon (LZ)
00012A96                            ; ---------------------------------------------------------------------------
00012A96 0000                       		dc.w byte_11F8A-Ani_obj16
00012A98 0000                       		dc.w byte_11F8E-Ani_obj16
00012A9A 0000                       		dc.w byte_11F92-Ani_obj16
00012A9C 0000                       		dc.w byte_11F96-Ani_obj16
00012A9E 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
00012AA2 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
00012AA6 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
00012AAA 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
00012AAE                            		even
00012AAE                            		even
00012AAE                            
00012AAE                            ; ---------------------------------------------------------------------------
00012AAE                            ; Sprite mappings - harpoon (LZ)
00012AAE                            ; ---------------------------------------------------------------------------
00012AAE                            Map_obj16:
00012AAE                            	include "_maps\obj16.asm"
00012AAE                            ; ---------------------------------------------------------------------------
00012AAE                            ; Sprite mappings - harpoon (LZ)
00012AAE                            ; ---------------------------------------------------------------------------
00012AAE 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
00012AB2 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
00012AB6 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00012ABA 01                         byte_11FA6:	dc.b 1
00012ABB FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00012AC0 01                         byte_11FAC:	dc.b 1
00012AC1 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00012AC6 02                         byte_11FB2:	dc.b 2
00012AC7 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00012ACC FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00012AD1 01                         byte_11FBD:	dc.b 1
00012AD2 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00012AD7 01                         byte_11FC3:	dc.b 1
00012AD8 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00012ADD 02                         byte_11FC9:	dc.b 2
00012ADE D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00012AE3 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00012AE8                            		even
00012AE8                            		even
00012AE8                            
00012AE8                            ; ===========================================================================
00012AE8                            ; ---------------------------------------------------------------------------
00012AE8                            ; Object 61 - blocks (LZ)
00012AE8                            ; ---------------------------------------------------------------------------
00012AE8                            
00012AE8                            Obj61:					; XREF: Obj_Index
00012AE8 7000                       		moveq	#0,d0
00012AEA 1028 0024                  		move.b	$24(a0),d0
00012AEE 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00012AF2 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00012AF6                            ; ===========================================================================
00012AF6 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00012AF8 0000                       		dc.w Obj61_Action-Obj61_Index
00012AFA                            
00012AFA 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00012AFC 200C                       		dc.b $20, $C
00012AFE 1010                       		dc.b $10, $10
00012B00 1010                       		dc.b $10, $10
00012B02                            ; ===========================================================================
00012B02                            
00012B02                            Obj61_Main:				; XREF: Obj61_Index
00012B02 5428 0024                  		addq.b	#2,$24(a0)
00012B06 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00012B0E 317C 43E6 0002             		move.w	#$43E6,2(a0)
00012B14 117C 0004 0001             		move.b	#4,1(a0)
00012B1A 117C 0003 0018             		move.b	#3,$18(a0)
00012B20 7000                       		moveq	#0,d0
00012B22 1028 0028                  		move.b	$28(a0),d0
00012B26 E648                       		lsr.w	#3,d0
00012B28 0240 000E                  		andi.w	#$E,d0
00012B2C 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00012B30 115A 0019                  		move.b	(a2)+,$19(a0)
00012B34 1152 0016                  		move.b	(a2),$16(a0)
00012B38 E248                       		lsr.w	#1,d0
00012B3A 1140 001A                  		move.b	d0,$1A(a0)
00012B3E 3168 0008 0034             		move.w	8(a0),$34(a0)
00012B44 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012B4A 1028 0028                  		move.b	$28(a0),d0
00012B4E 0200 000F                  		andi.b	#$F,d0
00012B52 6700                       		beq.s	Obj61_Action
00012B54 0C00 0007                  		cmpi.b	#7,d0
00012B58 6700                       		beq.s	Obj61_Action
00012B5A 117C 0001 0038             		move.b	#1,$38(a0)
00012B60                            
00012B60                            Obj61_Action:				; XREF: Obj61_Index
00012B60 3F28 0008                  		move.w	8(a0),-(sp)
00012B64 7000                       		moveq	#0,d0
00012B66 1028 0028                  		move.b	$28(a0),d0
00012B6A 0240 000F                  		andi.w	#$F,d0
00012B6E D040                       		add.w	d0,d0
00012B70 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00012B74 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00012B78 381F                       		move.w	(sp)+,d4
00012B7A 4A28 0001                  		tst.b	1(a0)
00012B7E 6A00                       		bpl.s	Obj61_ChkDel
00012B80 7200                       		moveq	#0,d1
00012B82 1228 0019                  		move.b	$19(a0),d1
00012B86 0641 000B                  		addi.w	#$B,d1
00012B8A 7400                       		moveq	#0,d2
00012B8C 1428 0016                  		move.b	$16(a0),d2
00012B90 3602                       		move.w	d2,d3
00012B92 5243                       		addq.w	#1,d3
00012B94 6100 D95A                  		bsr.w	SolidObject
00012B98 1144 003F                  		move.b	d4,$3F(a0)
00012B9C 6100 0000                  		bsr.w	loc_12180
00012BA0                            
00012BA0                            Obj61_ChkDel:
00012BA0 3028 0034                  		move.w	$34(a0),d0
00012BA4 0240 FF80                  		andi.w	#$FF80,d0
00012BA8 3238 F700                  		move.w	($FFFFF700).w,d1
00012BAC 0441 0080                  		subi.w	#$80,d1
00012BB0 0241 FF80                  		andi.w	#$FF80,d1
00012BB4 9041                       		sub.w	d1,d0
00012BB6 0C40 0280                  		cmpi.w	#$280,d0
00012BBA 6200 B586                  		bhi.w	DeleteObject
00012BBE 6000 B546                  		bra.w	DisplaySprite
00012BC2                            ; ===========================================================================
00012BC2 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012BC6 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012BCA 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00012BCE 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00012BD2                            ; ===========================================================================
00012BD2                            
00012BD2                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00012BD2 4E75                       		rts	
00012BD4                            ; ===========================================================================
00012BD4                            
00012BD4                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00012BD4 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00012BD8 6600                       		bne.s	loc_120D6	; if yes, branch
00012BDA 0828 0003 0022             		btst	#3,$22(a0)
00012BE0 6700                       		beq.s	locret_120D4
00012BE2 317C 001E 0036             		move.w	#30,$36(a0)	; wait for � second
00012BE8                            
00012BE8                            locret_120D4:
00012BE8 4E75                       		rts	
00012BEA                            ; ===========================================================================
00012BEA                            
00012BEA                            loc_120D6:
00012BEA 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00012BEE 66F8                       		bne.s	locret_120D4	; if time remains, branch
00012BF0 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012BF4 4228 0038                  		clr.b	$38(a0)
00012BF8 4E75                       		rts	
00012BFA                            ; ===========================================================================
00012BFA                            
00012BFA                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00012BFA 6100 B4E4                  		bsr.w	SpeedToPos
00012BFE 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00012C02 6100 0000                  		bsr.w	ObjHitFloor
00012C06 4A41                       		tst.w	d1
00012C08 6A00 0000                  		bpl.w	locret_12106
00012C0C 5241                       		addq.w	#1,d1
00012C0E D368 000C                  		add.w	d1,$C(a0)
00012C12 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00012C16 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012C1A                            
00012C1A                            locret_12106:
00012C1A 4E75                       		rts	
00012C1C                            ; ===========================================================================
00012C1C                            
00012C1C                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00012C1C 6100 B4C2                  		bsr.w	SpeedToPos
00012C20 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00012C24 6100 0000                  		bsr.w	ObjHitCeiling
00012C28 4A41                       		tst.w	d1
00012C2A 6A00 0000                  		bpl.w	locret_12126
00012C2E 9368 000C                  		sub.w	d1,$C(a0)
00012C32 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00012C36 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012C3A                            
00012C3A                            locret_12126:
00012C3A 4E75                       		rts	
00012C3C                            ; ===========================================================================
00012C3C                            
00012C3C                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00012C3C 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00012C42 6600                       		bne.s	locret_12138	; if not, branch
00012C44 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00012C48 4228 0038                  		clr.b	$38(a0)
00012C4C                            
00012C4C                            locret_12138:
00012C4C 4E75                       		rts	
00012C4E                            ; ===========================================================================
00012C4E                            
00012C4E                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00012C4E 3038 F646                  		move.w	($FFFFF646).w,d0
00012C52 9068 000C                  		sub.w	$C(a0),d0
00012C56 6700                       		beq.s	locret_1217E
00012C58 6400                       		bcc.s	loc_12162
00012C5A 0C40 FFFE                  		cmpi.w	#-2,d0
00012C5E 6C00                       		bge.s	loc_1214E
00012C60 70FE                       		moveq	#-2,d0
00012C62                            
00012C62                            loc_1214E:
00012C62 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00012C66 6100 0000                  		bsr.w	ObjHitCeiling
00012C6A 4A41                       		tst.w	d1
00012C6C 6A00 0000                  		bpl.w	locret_12160
00012C70 9368 000C                  		sub.w	d1,$C(a0)
00012C74                            
00012C74                            locret_12160:
00012C74 4E75                       		rts	
00012C76                            ; ===========================================================================
00012C76                            
00012C76                            loc_12162:				; XREF: Obj61_Type07
00012C76 0C40 0002                  		cmpi.w	#2,d0
00012C7A 6F00                       		ble.s	loc_1216A
00012C7C 7002                       		moveq	#2,d0
00012C7E                            
00012C7E                            loc_1216A:
00012C7E D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00012C82 6100 0000                  		bsr.w	ObjHitFloor
00012C86 4A41                       		tst.w	d1
00012C88 6A00 0000                  		bpl.w	locret_1217E
00012C8C 5241                       		addq.w	#1,d1
00012C8E D368 000C                  		add.w	d1,$C(a0)
00012C92                            
00012C92                            locret_1217E:
00012C92 4E75                       		rts	
00012C94                            ; ===========================================================================
00012C94                            
00012C94                            loc_12180:				; XREF: Obj61_Action
00012C94 4A28 0038                  		tst.b	$38(a0)
00012C98 6700                       		beq.s	locret_121C0
00012C9A 0828 0003 0022             		btst	#3,$22(a0)
00012CA0 6600                       		bne.s	loc_1219A
00012CA2 4A28 003E                  		tst.b	$3E(a0)
00012CA6 6700                       		beq.s	locret_121C0
00012CA8 5928 003E                  		subq.b	#4,$3E(a0)
00012CAC 6000                       		bra.s	loc_121A6
00012CAE                            ; ===========================================================================
00012CAE                            
00012CAE                            loc_1219A:
00012CAE 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00012CB4 6700                       		beq.s	locret_121C0
00012CB6 5828 003E                  		addq.b	#4,$3E(a0)
00012CBA                            
00012CBA                            loc_121A6:
00012CBA 1028 003E                  		move.b	$3E(a0),d0
00012CBE 4EB9 0000 33D4             		jsr	(CalcSine).l
00012CC4 323C 0400                  		move.w	#$400,d1
00012CC8 C1C1                       		muls.w	d1,d0
00012CCA 4840                       		swap	d0
00012CCC D068 0030                  		add.w	$30(a0),d0
00012CD0 3140 000C                  		move.w	d0,$C(a0)
00012CD4                            
00012CD4                            locret_121C0:
00012CD4 4E75                       		rts	
00012CD6                            ; ===========================================================================
00012CD6                            ; ---------------------------------------------------------------------------
00012CD6                            ; Sprite mappings - blocks (LZ)
00012CD6                            ; ---------------------------------------------------------------------------
00012CD6                            Map_obj61:
00012CD6                            	include "_maps\obj61.asm"
00012CD6                            ; ---------------------------------------------------------------------------
00012CD6                            ; Sprite mappings - blocks (LZ)
00012CD6                            ; ---------------------------------------------------------------------------
00012CD6 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00012CDA 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012CDE 01                         byte_121CA:	dc.b 1
00012CDF F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012CE4 02                         byte_121D0:	dc.b 2
00012CE5 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00012CEA F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012CEF 01                         byte_121DB:	dc.b 1
00012CF0 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012CF5 01                         byte_121E1:	dc.b 1
00012CF6 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012CFC 00                         		even
00012CFC 00                         		even
00012CFC                            
00012CFC                            ; ===========================================================================
00012CFC                            ; ---------------------------------------------------------------------------
00012CFC                            ; Object 62 - gargoyle head (LZ)
00012CFC                            ; ---------------------------------------------------------------------------
00012CFC                            
00012CFC                            Obj62:					; XREF: Obj_Index
00012CFC 7000                       		moveq	#0,d0
00012CFE 1028 0024                  		move.b	$24(a0),d0
00012D02 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00012D06 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00012D0A 6000 D4BC                  		bra.w	MarkObjGone
00012D0E                            ; ===========================================================================
00012D0E 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012D10 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00012D12 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012D14 0000                       		dc.w Obj62_AniFire-Obj62_Index
00012D16                            
00012D16 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00012D1E                            ; ===========================================================================
00012D1E                            
00012D1E                            Obj62_Main:				; XREF: Obj62_Index
00012D1E 5428 0024                  		addq.b	#2,$24(a0)
00012D22 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012D2A 317C 42E9 0002             		move.w	#$42E9,2(a0)
00012D30 0028 0004 0001             		ori.b	#4,1(a0)
00012D36 117C 0003 0018             		move.b	#3,$18(a0)
00012D3C 117C 0010 0019             		move.b	#$10,$19(a0)
00012D42 1028 0028                  		move.b	$28(a0),d0	; get object type
00012D46 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012D4A 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00012D50 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012D56 0228 000F 0028             		andi.b	#$F,$28(a0)
00012D5C                            
00012D5C                            Obj62_MakeFire:				; XREF: Obj62_Index
00012D5C 5328 001E                  		subq.b	#1,$1E(a0)
00012D60 6600                       		bne.s	Obj62_NoFire
00012D62 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012D68 6100 B618                  		bsr.w	ChkObjOnScreen
00012D6C 6600                       		bne.s	Obj62_NoFire
00012D6E 6100 B82C                  		bsr.w	SingleObjLoad
00012D72 6600                       		bne.s	Obj62_NoFire
00012D74 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00012D78 5829 0024                  		addq.b	#4,$24(a1)
00012D7C 3368 0008 0008             		move.w	8(a0),8(a1)
00012D82 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012D88 1368 0001 0001             		move.b	1(a0),1(a1)
00012D8E 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012D94                            
00012D94                            Obj62_NoFire:
00012D94 4E75                       		rts	
00012D96                            ; ===========================================================================
00012D96                            
00012D96                            Obj62_FireBall:				; XREF: Obj62_Index
00012D96 5428 0024                  		addq.b	#2,$24(a0)
00012D9A 117C 0008 0016             		move.b	#8,$16(a0)
00012DA0 117C 0008 0017             		move.b	#8,$17(a0)
00012DA6 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012DAE 317C 02E9 0002             		move.w	#$2E9,2(a0)
00012DB4 0028 0004 0001             		ori.b	#4,1(a0)
00012DBA 117C 0004 0018             		move.b	#4,$18(a0)
00012DC0 117C 0098 0020             		move.b	#$98,$20(a0)
00012DC6 117C 0008 0019             		move.b	#8,$19(a0)
00012DCC 117C 0002 001A             		move.b	#2,$1A(a0)
00012DD2 5068 000C                  		addq.w	#8,$C(a0)
00012DD6 317C 0200 0010             		move.w	#$200,$10(a0)
00012DDC 0828 0000 0022             		btst	#0,$22(a0)
00012DE2 6600                       		bne.s	Obj62_Sound
00012DE4 4468 0010                  		neg.w	$10(a0)
00012DE8                            
00012DE8                            Obj62_Sound:
00012DE8 303C 00AE                  		move.w	#$AE,d0
00012DEC 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012DF2                            
00012DF2                            Obj62_AniFire:				; XREF: Obj62_Index
00012DF2 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012DF6 0200 0007                  		andi.b	#7,d0
00012DFA 6600                       		bne.s	Obj62_StopFire
00012DFC 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012E02                            
00012E02                            Obj62_StopFire:
00012E02 6100 B2DC                  		bsr.w	SpeedToPos
00012E06 0828 0000 0022             		btst	#0,$22(a0)
00012E0C 6600                       		bne.s	Obj62_StopFire2
00012E0E 76F8                       		moveq	#-8,d3
00012E10 6100 0000                  		bsr.w	ObjHitWallLeft
00012E14 4A41                       		tst.w	d1
00012E16 6B00 B32A                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012E1A 4E75                       		rts	
00012E1C                            ; ===========================================================================
00012E1C                            
00012E1C                            Obj62_StopFire2:
00012E1C 7608                       		moveq	#8,d3
00012E1E 6100 0000                  		bsr.w	ObjHitWallRight
00012E22 4A41                       		tst.w	d1
00012E24 6B00 B31C                  		bmi.w	DeleteObject
00012E28 4E75                       		rts	
00012E2A                            ; ===========================================================================
00012E2A                            ; ---------------------------------------------------------------------------
00012E2A                            ; Sprite mappings - gargoyle head (LZ)
00012E2A                            ; ---------------------------------------------------------------------------
00012E2A                            Map_obj62:
00012E2A                            	include "_maps\obj62.asm"
00012E2A                            ; ---------------------------------------------------------------------------
00012E2A                            ; Sprite mappings - gargoyle head (LZ)
00012E2A                            ; ---------------------------------------------------------------------------
00012E2A 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012E2E 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012E32 03                         byte_12320:	dc.b 3
00012E33 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00012E38 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012E3D 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012E42 01                         byte_12330:	dc.b 1
00012E43 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012E48 01                         byte_12336:	dc.b 1
00012E49 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012E4E                            		even
00012E4E                            		even
00012E4E                            
00012E4E                            ; ===========================================================================
00012E4E                            ; ---------------------------------------------------------------------------
00012E4E                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012E4E                            ; ---------------------------------------------------------------------------
00012E4E                            
00012E4E                            Obj63:					; XREF: Obj_Index
00012E4E 7000                       		moveq	#0,d0
00012E50 1028 0024                  		move.b	$24(a0),d0
00012E54 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00012E58 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012E5C 3028 0030                  		move.w	$30(a0),d0
00012E60 0240 FF80                  		andi.w	#$FF80,d0
00012E64 3238 F700                  		move.w	($FFFFF700).w,d1
00012E68 0441 0080                  		subi.w	#$80,d1
00012E6C 0241 FF80                  		andi.w	#$FF80,d1
00012E70 9041                       		sub.w	d1,d0
00012E72 0C40 0280                  		cmpi.w	#$280,d0
00012E76 6200                       		bhi.s	loc_1236A
00012E78                            
00012E78                            Obj63_Display:				; XREF: loc_1236A
00012E78 6000 B28C                  		bra.w	DisplaySprite
00012E7C                            ; ===========================================================================
00012E7C                            
00012E7C                            loc_1236A:				; XREF: Obj63
00012E7C 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012E82 6600                       		bne.s	loc_12378
00012E84 0C40 FF80                  		cmpi.w	#-$80,d0
00012E88 64EE                       		bcc.s	Obj63_Display
00012E8A                            
00012E8A                            loc_12378:
00012E8A 1028 002F                  		move.b	$2F(a0),d0
00012E8E 6A00 B2B2                  		bpl.w	DeleteObject
00012E92 0240 007F                  		andi.w	#$7F,d0
00012E96 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012E9A 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012EA0 6000 B2A0                  		bra.w	DeleteObject
00012EA4                            ; ===========================================================================
00012EA4 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00012EA6 0000                       		dc.w loc_124B2-Obj63_Index
00012EA8 0000                       		dc.w loc_124C2-Obj63_Index
00012EAA 0000                       		dc.w loc_124DE-Obj63_Index
00012EAC                            ; ===========================================================================
00012EAC                            
00012EAC                            Obj63_Main:				; XREF: Obj63_Index
00012EAC 1028 0028                  		move.b	$28(a0),d0
00012EB0 6B00 0000                  		bmi.w	loc_12460
00012EB4 5428 0024                  		addq.b	#2,$24(a0)
00012EB8 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012EC0 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012EC6 0028 0004 0001             		ori.b	#4,1(a0)
00012ECC 117C 0010 0019             		move.b	#$10,$19(a0)
00012ED2 117C 0004 0018             		move.b	#4,$18(a0)
00012ED8 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012EDE 6600                       		bne.s	loc_123E2
00012EE0 5828 0024                  		addq.b	#4,$24(a0)
00012EE4 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012EEA 117C 0001 0018             		move.b	#1,$18(a0)
00012EF0 6000 0000                  		bra.w	loc_124DE
00012EF4                            ; ===========================================================================
00012EF4                            
00012EF4                            loc_123E2:
00012EF4 117C 0004 001A             		move.b	#4,$1A(a0)
00012EFA 7000                       		moveq	#0,d0
00012EFC 1028 0028                  		move.b	$28(a0),d0
00012F00 3200                       		move.w	d0,d1
00012F02 E648                       		lsr.w	#3,d0
00012F04 0240 001E                  		andi.w	#$1E,d0
00012F08 45FA 0000                  		lea	Obj63_Data(pc),a2
00012F0C D4F2 0000                  		adda.w	(a2,d0.w),a2
00012F10 315A 0038                  		move.w	(a2)+,$38(a0)
00012F14 315A 0030                  		move.w	(a2)+,$30(a0)
00012F18 214A 003C                  		move.l	a2,$3C(a0)
00012F1C 0241 000F                  		andi.w	#$F,d1
00012F20 E549                       		lsl.w	#2,d1
00012F22 1141 0038                  		move.b	d1,$38(a0)
00012F26 117C 0004 003A             		move.b	#4,$3A(a0)
00012F2C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012F30 6700                       		beq.s	loc_1244C
00012F32 117C 0001 003B             		move.b	#1,$3B(a0)
00012F38 4428 003A                  		neg.b	$3A(a0)
00012F3C 7200                       		moveq	#0,d1
00012F3E 1228 0038                  		move.b	$38(a0),d1
00012F42 D228 003A                  		add.b	$3A(a0),d1
00012F46 B228 0039                  		cmp.b	$39(a0),d1
00012F4A 6500                       		bcs.s	loc_12448
00012F4C 1001                       		move.b	d1,d0
00012F4E 7200                       		moveq	#0,d1
00012F50 4A00                       		tst.b	d0
00012F52 6A00                       		bpl.s	loc_12448
00012F54 1228 0039                  		move.b	$39(a0),d1
00012F58 5901                       		subq.b	#4,d1
00012F5A                            
00012F5A                            loc_12448:
00012F5A 1141 0038                  		move.b	d1,$38(a0)
00012F5E                            
00012F5E                            loc_1244C:
00012F5E 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00012F64 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00012F6A 6100 0000                  		bsr.w	Obj63_ChangeDir
00012F6E 6000 0000                  		bra.w	loc_124B2
00012F72                            ; ===========================================================================
00012F72                            
00012F72                            loc_12460:				; XREF: Obj63_Main
00012F72 1140 002F                  		move.b	d0,$2F(a0)
00012F76 0240 007F                  		andi.w	#$7F,d0
00012F7A 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012F7E 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012F84 6600 B1BC                  		bne.w	DeleteObject
00012F88 D040                       		add.w	d0,d0
00012F8A 0240 001E                  		andi.w	#$1E,d0
00012F8E 0640 0070                  		addi.w	#$70,d0
00012F92 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00012F98 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012F9C 321A                       		move.w	(a2)+,d1
00012F9E 2248                       		movea.l	a0,a1
00012FA0 6000                       		bra.s	Obj63_MakePtfms
00012FA2                            ; ===========================================================================
00012FA2                            
00012FA2                            Obj63_Loop:
00012FA2 6100 B5F8                  		bsr.w	SingleObjLoad
00012FA6 6600                       		bne.s	loc_124AA
00012FA8                            
00012FA8                            Obj63_MakePtfms:			; XREF: loc_12460
00012FA8 12BC 0063                  		move.b	#$63,0(a1)
00012FAC 335A 0008                  		move.w	(a2)+,8(a1)
00012FB0 335A 000C                  		move.w	(a2)+,$C(a1)
00012FB4 301A                       		move.w	(a2)+,d0
00012FB6 1340 0028                  		move.b	d0,$28(a1)
00012FBA                            
00012FBA                            loc_124AA:
00012FBA 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012FBE                            
00012FBE 588F                       		addq.l	#4,sp
00012FC0 4E75                       		rts	
00012FC2                            ; ===========================================================================
00012FC2                            
00012FC2                            loc_124B2:				; XREF: Obj63_Index
00012FC2 7200                       		moveq	#0,d1
00012FC4 1228 0019                  		move.b	$19(a0),d1
00012FC8 4EB9 0000 7EF8             		jsr	(PlatformObject).l
00012FCE 6000 0000                  		bra.w	sub_12502
00012FD2                            ; ===========================================================================
00012FD2                            
00012FD2                            loc_124C2:				; XREF: Obj63_Index
00012FD2 7200                       		moveq	#0,d1
00012FD4 1228 0019                  		move.b	$19(a0),d1
00012FD8 4EB9 0000 806C             		jsr	(ExitPlatform).l
00012FDE 3F28 0008                  		move.w	8(a0),-(sp)
00012FE2 6100 0000                  		bsr.w	sub_12502
00012FE6 341F                       		move.w	(sp)+,d2
00012FE8 4EF9 0000 85D6             		jmp	(MvSonicOnPtfm2).l
00012FEE                            ; ===========================================================================
00012FEE                            
00012FEE                            loc_124DE:				; XREF: Obj63_Index
00012FEE 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012FF2 0240 0003                  		andi.w	#3,d0
00012FF6 6600                       		bne.s	loc_124FC
00012FF8 7201                       		moveq	#1,d1
00012FFA 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012FFE 6700                       		beq.s	loc_124F2
00013000 4401                       		neg.b	d1
00013002                            
00013002                            loc_124F2:
00013002 D328 001A                  		add.b	d1,$1A(a0)
00013006 0228 0003 001A             		andi.b	#3,$1A(a0)
0001300C                            
0001300C                            loc_124FC:
0001300C 588F                       		addq.l	#4,sp
0001300E 6000 D1B8                  		bra.w	MarkObjGone
00013012                            
00013012                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013012                            
00013012                            
00013012                            sub_12502:				; XREF: loc_124B2; loc_124C2
00013012 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00013016 6700                       		beq.s	loc_12520
00013018 4A28 003B                  		tst.b	$3B(a0)
0001301C 6600                       		bne.s	loc_12520
0001301E 117C 0001 003B             		move.b	#1,$3B(a0)
00013024 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
0001302A 4428 003A                  		neg.b	$3A(a0)
0001302E 6000                       		bra.s	loc_12534
00013030                            ; ===========================================================================
00013030                            
00013030                            loc_12520:
00013030 3028 0008                  		move.w	8(a0),d0
00013034 B068 0034                  		cmp.w	$34(a0),d0
00013038 6600                       		bne.s	loc_1256A
0001303A 3028 000C                  		move.w	$C(a0),d0
0001303E B068 0036                  		cmp.w	$36(a0),d0
00013042 6600                       		bne.s	loc_1256A
00013044                            
00013044                            loc_12534:
00013044 7200                       		moveq	#0,d1
00013046 1228 0038                  		move.b	$38(a0),d1
0001304A D228 003A                  		add.b	$3A(a0),d1
0001304E B228 0039                  		cmp.b	$39(a0),d1
00013052 6500                       		bcs.s	loc_12552
00013054 1001                       		move.b	d1,d0
00013056 7200                       		moveq	#0,d1
00013058 4A00                       		tst.b	d0
0001305A 6A00                       		bpl.s	loc_12552
0001305C 1228 0039                  		move.b	$39(a0),d1
00013060 5901                       		subq.b	#4,d1
00013062                            
00013062                            loc_12552:
00013062 1141 0038                  		move.b	d1,$38(a0)
00013066 2268 003C                  		movea.l	$3C(a0),a1
0001306A 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00013070 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00013076 6100 0000                  		bsr.w	Obj63_ChangeDir
0001307A                            
0001307A                            loc_1256A:
0001307A 6100 B064                  		bsr.w	SpeedToPos
0001307E 4E75                       		rts	
00013080                            ; End of function sub_12502
00013080                            
00013080                            
00013080                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013080                            
00013080                            
00013080                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00013080 7000                       		moveq	#0,d0
00013082 343C FF00                  		move.w	#-$100,d2
00013086 3028 0008                  		move.w	8(a0),d0
0001308A 9068 0034                  		sub.w	$34(a0),d0
0001308E 6400                       		bcc.s	loc_12584
00013090 4440                       		neg.w	d0
00013092 4442                       		neg.w	d2
00013094                            
00013094                            loc_12584:
00013094 7200                       		moveq	#0,d1
00013096 363C FF00                  		move.w	#-$100,d3
0001309A 3228 000C                  		move.w	$C(a0),d1
0001309E 9268 0036                  		sub.w	$36(a0),d1
000130A2 6400                       		bcc.s	loc_12598
000130A4 4441                       		neg.w	d1
000130A6 4443                       		neg.w	d3
000130A8                            
000130A8                            loc_12598:
000130A8 B240                       		cmp.w	d0,d1
000130AA 6500                       		bcs.s	loc_125C2
000130AC 3028 0008                  		move.w	8(a0),d0
000130B0 9068 0034                  		sub.w	$34(a0),d0
000130B4 6700                       		beq.s	loc_125AE
000130B6 48C0                       		ext.l	d0
000130B8 E180                       		asl.l	#8,d0
000130BA 81C1                       		divs.w	d1,d0
000130BC 4440                       		neg.w	d0
000130BE                            
000130BE                            loc_125AE:
000130BE 3140 0010                  		move.w	d0,$10(a0)
000130C2 3143 0012                  		move.w	d3,$12(a0)
000130C6 4840                       		swap	d0
000130C8 3140 000A                  		move.w	d0,$A(a0)
000130CC 4268 000E                  		clr.w	$E(a0)
000130D0 4E75                       		rts	
000130D2                            ; ===========================================================================
000130D2                            
000130D2                            loc_125C2:				; XREF: Obj63_ChangeDir
000130D2 3228 000C                  		move.w	$C(a0),d1
000130D6 9268 0036                  		sub.w	$36(a0),d1
000130DA 6700                       		beq.s	loc_125D4
000130DC 48C1                       		ext.l	d1
000130DE E181                       		asl.l	#8,d1
000130E0 83C0                       		divs.w	d0,d1
000130E2 4441                       		neg.w	d1
000130E4                            
000130E4                            loc_125D4:
000130E4 3141 0012                  		move.w	d1,$12(a0)
000130E8 3142 0010                  		move.w	d2,$10(a0)
000130EC 4841                       		swap	d1
000130EE 3141 000E                  		move.w	d1,$E(a0)
000130F2 4268 000A                  		clr.w	$A(a0)
000130F6 4E75                       		rts	
000130F8                            ; End of function Obj63_ChangeDir
000130F8                            
000130F8                            ; ===========================================================================
000130F8 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
000130FA 0000                       		dc.w word_12610-Obj63_Data
000130FC 0000                       		dc.w word_12628-Obj63_Data
000130FE 0000                       		dc.w word_1263C-Obj63_Data
00013100 0000                       		dc.w word_12650-Obj63_Data
00013102 0000                       		dc.w word_12668-Obj63_Data
00013104 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00013114 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00013120 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00013130 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00013138 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
0001314C 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00013160 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00013178 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
0001318C                            
0001318C                            ; ---------------------------------------------------------------------------
0001318C                            ; Sprite mappings - platforms on a conveyor belt (LZ)
0001318C                            ; ---------------------------------------------------------------------------
0001318C                            Map_obj63:
0001318C                            	include "_maps\obj63.asm"
0001318C                            ; ---------------------------------------------------------------------------
0001318C                            ; Sprite mappings - platforms on a conveyor belt (LZ)
0001318C                            ; ---------------------------------------------------------------------------
0001318C 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00013190 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00013194 0000                       		dc.w byte_1269E-Map_obj63
00013196 01                         byte_12686:	dc.b 1
00013197 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001319C 01                         byte_1268C:	dc.b 1
0001319D F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000131A2 01                         byte_12692:	dc.b 1
000131A3 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
000131A8 01                         byte_12698:	dc.b 1
000131A9 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
000131AE 01                         byte_1269E:	dc.b 1
000131AF F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
000131B4                            		even
000131B4                            		even
000131B4                            
000131B4                            ; ===========================================================================
000131B4                            ; ---------------------------------------------------------------------------
000131B4                            ; Object 64 - bubbles (LZ)
000131B4                            ; ---------------------------------------------------------------------------
000131B4                            
000131B4                            Obj64:					; XREF: Obj_Index
000131B4 7000                       		moveq	#0,d0
000131B6 1028 0024                  		move.b	$24(a0),d0
000131BA 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
000131BE 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
000131C2                            ; ===========================================================================
000131C2 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
000131C4 0000                       		dc.w Obj64_Animate-Obj64_Index
000131C6 0000                       		dc.w Obj64_ChkWater-Obj64_Index
000131C8 0000                       		dc.w Obj64_Display2-Obj64_Index
000131CA 0000                       		dc.w Obj64_Delete3-Obj64_Index
000131CC 0000                       		dc.w Obj64_BblMaker-Obj64_Index
000131CE                            ; ===========================================================================
000131CE                            
000131CE                            Obj64_Main:				; XREF: Obj64_Index
000131CE 5428 0024                  		addq.b	#2,$24(a0)
000131D2 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
000131DA 317C 8348 0002             		move.w	#$8348,2(a0)
000131E0 117C 0084 0001             		move.b	#$84,1(a0)
000131E6 117C 0010 0019             		move.b	#$10,$19(a0)
000131EC 117C 0001 0018             		move.b	#1,$18(a0)
000131F2 1028 0028                  		move.b	$28(a0),d0	; get object type
000131F6 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
000131F8 5028 0024                  		addq.b	#8,$24(a0)
000131FC 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00013200 1140 0032                  		move.b	d0,$32(a0)
00013204 1140 0033                  		move.b	d0,$33(a0)
00013208 117C 0006 001C             		move.b	#6,$1C(a0)
0001320E 6000 0000                  		bra.w	Obj64_BblMaker
00013212                            ; ===========================================================================
00013212                            
00013212                            Obj64_Bubble:				; XREF: Obj64_Main
00013212 1140 001C                  		move.b	d0,$1C(a0)
00013216 3168 0008 0030             		move.w	8(a0),$30(a0)
0001321C 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00013222 4EB9 0000 33AE             		jsr	(RandomNumber).l
00013228 1140 0026                  		move.b	d0,$26(a0)
0001322C                            
0001322C                            Obj64_Animate:				; XREF: Obj64_Index
0001322C 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013232 4EB9 0000 B218             		jsr	AnimateSprite
00013238 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0001323E 6600                       		bne.s	Obj64_ChkWater
00013240 117C 0001 002E             		move.b	#1,$2E(a0)
00013246                            
00013246                            Obj64_ChkWater:				; XREF: Obj64_Index
00013246 3038 F646                  		move.w	($FFFFF646).w,d0
0001324A B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
0001324E 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00013250                            
00013250                            Obj64_Burst:				; XREF: Obj64_Wobble
00013250 117C 0006 0024             		move.b	#6,$24(a0)
00013256 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
0001325A 6000 0000                  		bra.w	Obj64_Display2
0001325E                            ; ===========================================================================
0001325E                            
0001325E                            Obj64_Wobble:				; XREF: Obj64_ChkWater
0001325E 1028 0026                  		move.b	$26(a0),d0
00013262 5228 0026                  		addq.b	#1,$26(a0)
00013266 0240 007F                  		andi.w	#$7F,d0
0001326A 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00013270 1031 0000                  		move.b	(a1,d0.w),d0
00013274 4880                       		ext.w	d0
00013276 D068 0030                  		add.w	$30(a0),d0
0001327A 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
0001327E 4A28 002E                  		tst.b	$2E(a0)
00013282 6700                       		beq.s	Obj64_Display
00013284 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00013288 6700                       		beq.s	Obj64_Display	; if not, branch
0001328A                            
0001328A 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
0001328E 303C 00AD                  		move.w	#$AD,d0
00013292 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00013298 43F8 D000                  		lea	($FFFFD000).w,a1
0001329C 4269 0010                  		clr.w	$10(a1)
000132A0 4269 0012                  		clr.w	$12(a1)
000132A4 4269 0014                  		clr.w	$14(a1)
000132A8 137C 0015 001C             		move.b	#$15,$1C(a1)
000132AE 337C 0023 003E             		move.w	#$23,$3E(a1)
000132B4 137C 0000 003C             		move.b	#0,$3C(a1)
000132BA 08A9 0005 0022             		bclr	#5,$22(a1)
000132C0 08A9 0004 0022             		bclr	#4,$22(a1)
000132C6 0829 0002 0022             		btst	#2,$22(a1)
000132CC 6700 FF82                  		beq.w	Obj64_Burst
000132D0 08A9 0002 0022             		bclr	#2,$22(a1)
000132D6 137C 0013 0016             		move.b	#$13,$16(a1)
000132DC 137C 0009 0017             		move.b	#9,$17(a1)
000132E2 5B69 000C                  		subq.w	#5,$C(a1)
000132E6 6000 FF68                  		bra.w	Obj64_Burst
000132EA                            ; ===========================================================================
000132EA                            
000132EA                            Obj64_Display:				; XREF: Obj64_Wobble
000132EA 6100 ADF4                  		bsr.w	SpeedToPos
000132EE 4A28 0001                  		tst.b	1(a0)
000132F2 6A00                       		bpl.s	Obj64_Delete
000132F4 4EFA AE10                  		jmp	DisplaySprite
000132F8                            ; ===========================================================================
000132F8                            
000132F8                            Obj64_Delete:
000132F8 4EFA AE48                  		jmp	DeleteObject
000132FC                            ; ===========================================================================
000132FC                            
000132FC                            Obj64_Display2:				; XREF: Obj64_Index
000132FC 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013302 4EB9 0000 B218             		jsr	AnimateSprite
00013308 4A28 0001                  		tst.b	1(a0)
0001330C 6A00                       		bpl.s	Obj64_Delete2
0001330E 4EFA ADF6                  		jmp	DisplaySprite
00013312                            ; ===========================================================================
00013312                            
00013312                            Obj64_Delete2:
00013312 4EFA AE2E                  		jmp	DeleteObject
00013316                            ; ===========================================================================
00013316                            
00013316                            Obj64_Delete3:				; XREF: Obj64_Index
00013316 6000 AE2A                  		bra.w	DeleteObject
0001331A                            ; ===========================================================================
0001331A                            
0001331A                            Obj64_BblMaker:				; XREF: Obj64_Index
0001331A 4A68 0036                  		tst.w	$36(a0)
0001331E 6600                       		bne.s	loc_12874
00013320 3038 F646                  		move.w	($FFFFF646).w,d0
00013324 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00013328 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
0001332C 4A28 0001                  		tst.b	1(a0)
00013330 6A00 0000                  		bpl.w	Obj64_ChkDel
00013334 5368 0038                  		subq.w	#1,$38(a0)
00013338 6A00 0000                  		bpl.w	loc_12914
0001333C 317C 0001 0036             		move.w	#1,$36(a0)
00013342                            
00013342                            loc_1283A:
00013342 4EB9 0000 33AE             		jsr	(RandomNumber).l
00013348 3200                       		move.w	d0,d1
0001334A 0240 0007                  		andi.w	#7,d0
0001334E 0C40 0006                  		cmpi.w	#6,d0
00013352 64EE                       		bcc.s	loc_1283A
00013354                            
00013354 1140 0034                  		move.b	d0,$34(a0)
00013358 0241 000C                  		andi.w	#$C,d1
0001335C 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00013362 D2C1                       		adda.w	d1,a1
00013364 2149 003C                  		move.l	a1,$3C(a0)
00013368 5328 0032                  		subq.b	#1,$32(a0)
0001336C 6A00                       		bpl.s	loc_12872
0001336E 1168 0033 0032             		move.b	$33(a0),$32(a0)
00013374 08E8 0007 0036             		bset	#7,$36(a0)
0001337A                            
0001337A                            loc_12872:
0001337A 6000                       		bra.s	loc_1287C
0001337C                            ; ===========================================================================
0001337C                            
0001337C                            loc_12874:				; XREF: Obj64_BblMaker
0001337C 5368 0038                  		subq.w	#1,$38(a0)
00013380 6A00 0000                  		bpl.w	loc_12914
00013384                            
00013384                            loc_1287C:
00013384 4EB9 0000 33AE             		jsr	(RandomNumber).l
0001338A 0240 001F                  		andi.w	#$1F,d0
0001338E 3140 0038                  		move.w	d0,$38(a0)
00013392 6100 B208                  		bsr.w	SingleObjLoad
00013396 6600                       		bne.s	loc_128F8
00013398 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
0001339C 3368 0008 0008             		move.w	8(a0),8(a1)
000133A2 4EB9 0000 33AE             		jsr	(RandomNumber).l
000133A8 0240 000F                  		andi.w	#$F,d0
000133AC 5140                       		subq.w	#8,d0
000133AE D169 0008                  		add.w	d0,8(a1)
000133B2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000133B8 7000                       		moveq	#0,d0
000133BA 1028 0034                  		move.b	$34(a0),d0
000133BE 2468 003C                  		movea.l	$3C(a0),a2
000133C2 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
000133C8 0828 0007 0036             		btst	#7,$36(a0)
000133CE 6700                       		beq.s	loc_128F8
000133D0 4EB9 0000 33AE             		jsr	(RandomNumber).l
000133D6 0240 0003                  		andi.w	#3,d0
000133DA 6600                       		bne.s	loc_128E4
000133DC 08E8 0006 0036             		bset	#6,$36(a0)
000133E2 6600                       		bne.s	loc_128F8
000133E4 137C 0002 0028             		move.b	#2,$28(a1)
000133EA                            
000133EA                            loc_128E4:
000133EA 4A28 0034                  		tst.b	$34(a0)
000133EE 6600                       		bne.s	loc_128F8
000133F0 08E8 0006 0036             		bset	#6,$36(a0)
000133F6 6600                       		bne.s	loc_128F8
000133F8 137C 0002 0028             		move.b	#2,$28(a1)
000133FE                            
000133FE                            loc_128F8:
000133FE 5328 0034                  		subq.b	#1,$34(a0)
00013402 6A00                       		bpl.s	loc_12914
00013404 4EB9 0000 33AE             		jsr	(RandomNumber).l
0001340A 0240 007F                  		andi.w	#$7F,d0
0001340E 0640 0080                  		addi.w	#$80,d0
00013412 D168 0038                  		add.w	d0,$38(a0)
00013416 4268 0036                  		clr.w	$36(a0)
0001341A                            
0001341A                            loc_12914:
0001341A 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013420 4EB9 0000 B218             		jsr	AnimateSprite
00013426                            
00013426                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00013426 3028 0008                  		move.w	8(a0),d0
0001342A 0240 FF80                  		andi.w	#$FF80,d0
0001342E 3238 F700                  		move.w	($FFFFF700).w,d1
00013432 0441 0080                  		subi.w	#$80,d1
00013436 0241 FF80                  		andi.w	#$FF80,d1
0001343A 9041                       		sub.w	d1,d0
0001343C 0C40 0280                  		cmpi.w	#$280,d0
00013440 6200 AD00                  		bhi.w	DeleteObject
00013444 3038 F646                  		move.w	($FFFFF646).w,d0
00013448 B068 000C                  		cmp.w	$C(a0),d0
0001344C 6500 ACB8                  		bcs.w	DisplaySprite
00013450 4E75                       		rts	
00013452                            ; ===========================================================================
00013452                            ; bubble production sequence
00013452                            
00013452                            ; 0 = small bubble, 1 =	large bubble
00013452                            
00013452 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00013464                            
00013464                            ; ===========================================================================
00013464                            
00013464                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00013464 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013468 6B00                       		bmi.s	loc_12998
0001346A 43F8 D000                  		lea	($FFFFD000).w,a1
0001346E 3029 0008                  		move.w	8(a1),d0
00013472 3228 0008                  		move.w	8(a0),d1
00013476 0441 0010                  		subi.w	#$10,d1
0001347A B240                       		cmp.w	d0,d1
0001347C 6400                       		bcc.s	loc_12998
0001347E 0641 0020                  		addi.w	#$20,d1
00013482 B240                       		cmp.w	d0,d1
00013484 6500                       		bcs.s	loc_12998
00013486 3029 000C                  		move.w	$C(a1),d0
0001348A 3228 000C                  		move.w	$C(a0),d1
0001348E B240                       		cmp.w	d0,d1
00013490 6400                       		bcc.s	loc_12998
00013492 0641 0010                  		addi.w	#$10,d1
00013496 B240                       		cmp.w	d0,d1
00013498 6500                       		bcs.s	loc_12998
0001349A 7001                       		moveq	#1,d0
0001349C 4E75                       		rts	
0001349E                            ; ===========================================================================
0001349E                            
0001349E                            loc_12998:
0001349E 7000                       		moveq	#0,d0
000134A0 4E75                       		rts	
000134A2                            ; ===========================================================================
000134A2                            Ani_obj64:
000134A2                            	include "_anim\obj64.asm"
000134A2                            ; ---------------------------------------------------------------------------
000134A2                            ; Animation script - bubbles (LZ)
000134A2                            ; ---------------------------------------------------------------------------
000134A2 0000                       		dc.w byte_129AA-Ani_obj64
000134A4 0000                       		dc.w byte_129B0-Ani_obj64
000134A6 0000                       		dc.w byte_129B6-Ani_obj64
000134A8 0000                       		dc.w byte_129BE-Ani_obj64
000134AA 0000                       		dc.w byte_129BE-Ani_obj64
000134AC 0000                       		dc.w byte_129C0-Ani_obj64
000134AE 0000                       		dc.w byte_129C6-Ani_obj64
000134B0 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
000134B6 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
000134BC 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
000134C4 04FC                       byte_129BE:	dc.b 4,	$FC
000134C6 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
000134CC 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
000134D2 00                         		even
000134D2 00                         		even
000134D2                            
000134D2                            ; ---------------------------------------------------------------------------
000134D2                            ; Sprite mappings - bubbles (LZ)
000134D2                            ; ---------------------------------------------------------------------------
000134D2                            Map_obj64:
000134D2                            	include "_maps\obj64.asm"
000134D2                            ; ---------------------------------------------------------------------------
000134D2                            ; Sprite mappings - bubbles (LZ)
000134D2                            ; ---------------------------------------------------------------------------
000134D2 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
000134D6 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
000134DA 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
000134DE 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
000134E2 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
000134E6 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
000134EA 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
000134EE 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
000134F2 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
000134F6 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
000134FA 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
000134FE 0000                       		dc.w byte_12A9C-Map_obj64
00013500 01                         byte_129FA:	dc.b 1
00013501 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00013506 01                         byte_12A00:	dc.b 1
00013507 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
0001350C 01                         byte_12A06:	dc.b 1
0001350D FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00013512 01                         byte_12A0C:	dc.b 1
00013513 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00013518 01                         byte_12A12:	dc.b 1
00013519 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
0001351E 01                         byte_12A18:	dc.b 1
0001351F F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00013524 01                         byte_12A1E:	dc.b 1
00013525 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
0001352A 04                         byte_12A24:	dc.b 4
0001352B F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00013530 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00013535 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
0001353A 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
0001353F 04                         byte_12A39:	dc.b 4
00013540 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00013545 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
0001354A 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
0001354F 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00013554 01                         byte_12A4E:	dc.b 1
00013555 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
0001355A 01                         byte_12A54:	dc.b 1
0001355B F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00013560 01                         byte_12A5A:	dc.b 1
00013561 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00013566 01                         byte_12A60:	dc.b 1
00013567 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
0001356C 01                         byte_12A66:	dc.b 1
0001356D F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00013572 01                         byte_12A6C:	dc.b 1
00013573 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00013578 01                         byte_12A72:	dc.b 1
00013579 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
0001357E 01                         byte_12A78:	dc.b 1
0001357F F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00013584 01                         byte_12A7E:	dc.b 1
00013585 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
0001358A 01                         byte_12A84:	dc.b 1
0001358B F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00013590 01                         byte_12A8A:	dc.b 1
00013591 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00013596 01                         byte_12A90:	dc.b 1
00013597 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
0001359C 01                         byte_12A96:	dc.b 1
0001359D F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
000135A2 00                         byte_12A9C:	dc.b 0
000135A4 00                         		even
000135A4 00                         		even
000135A4                            
000135A4                            ; ===========================================================================
000135A4                            ; ---------------------------------------------------------------------------
000135A4                            ; Object 65 - waterfalls (LZ)
000135A4                            ; ---------------------------------------------------------------------------
000135A4                            
000135A4                            Obj65:					; XREF: Obj_Index
000135A4 7000                       		moveq	#0,d0
000135A6 1028 0024                  		move.b	$24(a0),d0
000135AA 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
000135AE 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
000135B2                            ; ===========================================================================
000135B2 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
000135B4 0000                       		dc.w Obj65_Animate-Obj65_Index
000135B6 0000                       		dc.w Obj65_ChkDel-Obj65_Index
000135B8 0000                       		dc.w Obj65_FixHeight-Obj65_Index
000135BA 0000                       		dc.w loc_12B36-Obj65_Index
000135BC                            ; ===========================================================================
000135BC                            
000135BC                            Obj65_Main:				; XREF: Obj65_Index
000135BC 5828 0024                  		addq.b	#4,$24(a0)
000135C0 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
000135C8 317C 4259 0002             		move.w	#$4259,2(a0)
000135CE 0028 0004 0001             		ori.b	#4,1(a0)
000135D4 117C 0018 0019             		move.b	#$18,$19(a0)
000135DA 117C 0001 0018             		move.b	#1,$18(a0)
000135E0 1028 0028                  		move.b	$28(a0),d0	; get object type
000135E4 6A00                       		bpl.s	loc_12AE6
000135E6 08E8 0007 0002             		bset	#7,2(a0)
000135EC                            
000135EC                            loc_12AE6:
000135EC 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
000135F0 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
000135F4 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
000135F8 6600                       		bne.s	Obj65_ChkDel	; if not, branch
000135FA 4228 0018                  		clr.b	$18(a0)
000135FE 5528 0024                  		subq.b	#2,$24(a0)
00013602 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00013608 6700                       		beq.s	loc_12B0A	; if not, branch
0001360A 117C 0006 0024             		move.b	#6,$24(a0)
00013610                            
00013610                            loc_12B0A:
00013610 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
00013616 6700                       		beq.s	Obj65_Animate	; if not, branch
00013618 117C 0008 0024             		move.b	#8,$24(a0)
0001361E                            
0001361E                            Obj65_Animate:				; XREF: Obj65_Index
0001361E 43F9 0000 0000             		lea	(Ani_obj65).l,a1
00013624 4EB9 0000 B218             		jsr	AnimateSprite
0001362A                            
0001362A                            Obj65_ChkDel:				; XREF: Obj65_Index
0001362A 6000 CB9C                  		bra.w	MarkObjGone
0001362E                            ; ===========================================================================
0001362E                            
0001362E                            Obj65_FixHeight:			; XREF: Obj65_Index
0001362E 3038 F646                  		move.w	($FFFFF646).w,d0
00013632 0440 0010                  		subi.w	#$10,d0
00013636 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
0001363A 60E2                       		bra.s	Obj65_Animate
0001363C                            ; ===========================================================================
0001363C                            
0001363C                            loc_12B36:				; XREF: Obj65_Index
0001363C 08A8 0007 0002             		bclr	#7,2(a0)
00013642 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00013648 6600                       		bne.s	Obj65_Animate2
0001364A 08E8 0007 0002             		bset	#7,2(a0)
00013650                            
00013650                            Obj65_Animate2:
00013650 60CC                       		bra.s	Obj65_Animate
00013652                            ; ===========================================================================
00013652                            Ani_obj65:
00013652                            	include "_anim\obj65.asm"
00013652                            ; ---------------------------------------------------------------------------
00013652                            ; Animation script - waterfall (LZ)
00013652                            ; ---------------------------------------------------------------------------
00013652 0000                       		dc.w byte_12B4E-Ani_obj65
00013654 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
0001365A 00                         		even
0001365A 00                         		even
0001365A                            
0001365A                            ; ---------------------------------------------------------------------------
0001365A                            ; Sprite mappings - waterfalls (LZ)
0001365A                            ; ---------------------------------------------------------------------------
0001365A                            Map_obj65:
0001365A                            	include "_maps\obj65.asm"
0001365A                            ; ---------------------------------------------------------------------------
0001365A                            ; Sprite mappings - waterfalls (LZ)
0001365A                            ; ---------------------------------------------------------------------------
0001365A 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
0001365E 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00013662 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00013666 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
0001366A 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
0001366E 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00013672 01                         byte_12B6C:	dc.b 1
00013673 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00013678 02                         byte_12B72:	dc.b 2
00013679 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
0001367E 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00013683 02                         byte_12B7D:	dc.b 2
00013684 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013689 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001368E 01                         byte_12B88:	dc.b 1
0001368F F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00013694 02                         byte_12B8E:	dc.b 2
00013695 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
0001369A 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001369F 01                         byte_12B99:	dc.b 1
000136A0 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
000136A5 01                         byte_12B9F:	dc.b 1
000136A6 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
000136AB 01                         byte_12BA5:	dc.b 1
000136AC F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
000136B1 02                         byte_12BAB:	dc.b 2
000136B2 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
000136B7 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
000136BC 02                         byte_12BB6:	dc.b 2
000136BD F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
000136C2 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
000136C7 02                         byte_12BC1:	dc.b 2
000136C8 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
000136CD F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
000136D2 02                         byte_12BCC:	dc.b 2
000136D3 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
000136D8 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
000136DE 00                         		even
000136DE 00                         		even
000136DE                            
000136DE                            ; ===========================================================================
000136DE                            ; ---------------------------------------------------------------------------
000136DE                            ; Object 01 - Sonic
000136DE                            ; ---------------------------------------------------------------------------
000136DE                            
000136DE                            Obj01:					; XREF: Obj_Index
000136DE 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000136E2 6700                       		beq.s	Obj01_Normal	; if not, branch
000136E4 4EF9 0000 0000             		jmp	DebugMode
000136EA                            ; ===========================================================================
000136EA                            
000136EA                            Obj01_Normal:
000136EA 7000                       		moveq	#0,d0
000136EC 1028 0024                  		move.b	$24(a0),d0
000136F0 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
000136F4 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
000136F8                            ; ===========================================================================
000136F8 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
000136FA 0000                       		dc.w Obj01_Control-Obj01_Index
000136FC 0000                       		dc.w Obj01_Hurt-Obj01_Index
000136FE 0000                       		dc.w Obj01_Death-Obj01_Index
00013700 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00013702 0000                       		dc.w Sonic_Drowned-Obj01_Index
00013704                            ; ===========================================================================
00013704                            
00013704                            Obj01_Main:				; XREF: Obj01_Index
00013704 5428 0024                  		addq.b	#2,$24(a0)
00013708 117C 0013 0016             		move.b	#$13,$16(a0)
0001370E 117C 0009 0017             		move.b	#9,$17(a0)
00013714 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001371C 317C 0780 0002             		move.w	#$780,2(a0)
00013722 117C 0002 0018             		move.b	#2,$18(a0)
00013728 117C 0018 0019             		move.b	#$18,$19(a0)
0001372E 117C 0004 0001             		move.b	#4,1(a0)
00013734 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
0001373A 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
00013740 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00013746 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
0001374C 11FC 0000 FE19             		move.b	#0,(Super_Sonic_flag).w
00013752                            
00013752                            Obj01_Control:				; XREF: Obj01_Index
00013752 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00013756 6700                       		beq.s	loc_12C58	; if not, branch
00013758 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
0001375E 6700                       		beq.s	loc_12C58	; if not, branch
00013760 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00013766 4238 F7CC                  		clr.b	($FFFFF7CC).w
0001376A 4E75                       		rts
0001376C                            ; ===========================================================================
0001376C                            
0001376C                            loc_12C58:
0001376C 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00013770 6600                       		bne.s	loc_12C64	; if yes, branch
00013772 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00013778                            
00013778                            loc_12C64:
00013778 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
0001377E 6600                       		bne.s	loc_12C7E	; if yes, branch
00013780 7000                       		moveq	#0,d0
00013782 1028 0022                  		move.b	$22(a0),d0
00013786 0240 0006                  		andi.w	#6,d0
0001378A 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
0001378E 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00013792                            
00013792                            loc_12C7E:
00013792 6100                       		bsr.s	Sonic_Display
00013794 6100 0000                  		bsr.w	Sonic_Super
00013798 6100 0000                  		bsr.w	Sonic_RecordPos
0001379C 6100 0000                  		bsr.w	Sonic_Water
000137A0 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
000137A6 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
000137AC 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000137B0 6700                       		beq.s	loc_12CA6
000137B2 4A28 001C                  		tst.b	$1C(a0)
000137B6 6600                       		bne.s	loc_12CA6
000137B8 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
000137BE                            
000137BE                            loc_12CA6:
000137BE 6100 0000                  		bsr.w	Sonic_Animate
000137C2 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000137C6 6B00                       		bmi.s	loc_12CB6
000137C8 4EB9 0000 0000             		jsr	TouchResponse
000137CE                            
000137CE                            loc_12CB6:
000137CE 6100 0000                  		bsr.w	Sonic_Loops
000137D2 6100 0000                  		bsr.w	LoadSonicDynPLC
000137D6 4E75                       		rts
000137D8                            ; ===========================================================================
000137D8 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
000137DA 0000                       		dc.w Obj01_MdJump-Obj01_Modes
000137DC 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
000137DE 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
000137E0                            ; ---------------------------------------------------------------------------
000137E0                            ; Music	to play	after invincibility wears off
000137E0                            ; ---------------------------------------------------------------------------
000137E0                            ;MusicList2:	incbin	misc\muslist2.bin
000137E0                            ;		even
000137E0                            ; ===========================================================================
000137E0                            
000137E0                            Sonic_Display:				; XREF: loc_12C7E
000137E0 3028 0030                  		move.w	$30(a0),d0
000137E4 6700                       		beq.s	Obj01_Display
000137E6 5368 0030                  		subq.w	#1,$30(a0)
000137EA E648                       		lsr.w	#3,d0
000137EC 6400                       		bcc.s	Obj01_ChkInvin
000137EE                            
000137EE                            Obj01_Display:
000137EE 4EBA A916                  		jsr	DisplaySprite
000137F2                            
000137F2                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
000137F2                            
000137F2                            Obj01_ChkInvin:
000137F2 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000137F6 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
000137FA 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
000137FE 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
00013802 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00013806 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
0001380A 4A38 F7AA                  		tst.b	($FFFFF7AA).w
0001380E 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
00013812 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00013818 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
0001381C 4A38 FE2E                  		tst.b ($FFFFFE2E).w ; does Sonic have speed shoes?
00013820 6600                       		bne.s Obj01_ChkShoes	
00013822 7000                       		moveq	#0,d0
00013824 1038 FE10                  		move.b	($FFFFFE10).w,d0
00013828                             
00013828 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
0001382E 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
00013830 43F9 0000 41BC             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00013836 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013838                             
00013838                            Obj01_GetBgm2:
00013838 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
0001383E 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
00013840 43F9 0000 41C2             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00013846 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013848                             
00013848                            Obj01_GetBgm3:
00013848 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
0001384E 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
00013850 43F9 0000 41C8             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00013856 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013858                             
00013858                            Obj01_GetBgm4:
00013858 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
0001385E 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
00013860 43F9 0000 41CE             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00013866                             
00013866                            Obj01_PlayMusic:
00013866 1031 0000                  		move.b	(a1,d0.w),d0
0001386A 4EB9 0000 1470             		jsr	(PlaySound).l	; play normal music
00013870                             
00013870                            ; NineKode ends here.
00013870                            
00013870                            
00013870                            Obj01_RmvInvin:
00013870 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00013876                            
00013876                            Obj01_ChkShoes:
00013876 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
0001387A 6700                       		beq.s	Obj01_ExitChk	; if not, branch
0001387C 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00013880 6700                       		beq.s	Obj01_ExitChk
00013882 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
00013886 6600                       		bne.s	Obj01_ExitChk
00013888 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
0001388E 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013894 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
0001389A 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
000138A0 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; does Sonic have invincibility?
000138A4 6600                       		bne.s Obj01_ExitChk
000138A6                            
000138A6 7000                       		moveq #0,d0
000138A8 1038 FE10                  		move.b ($FFFFFE10).w,d0
000138AC 0C78 0103 FE10             		cmpi.w #$103,($FFFFFE10).w ; check if level is SBZ3
000138B2 6600                       		bne.s playthemusic
000138B4 7009                       		moveq #9,d0 ; play SBZ music
000138B6                            playthemusic:
000138B6 43F9 0000 41C2             		lea (MusicList2).l,a1 ; load music playlist
000138BC 1031 0000                  		move.b (a1,d0.w),d0 ; add d0 to a1
000138C0 4EB9 0000 1470             		jsr (PlaySound).l ; play normal music
000138C6                            ; ===========================================================================
000138C6                            
000138C6                            Obj01_ExitChk:
000138C6 4E75                       		rts	
000138C8                            
000138C8                            ; ---------------------------------------------------------------------------
000138C8                            ; Subroutine to	record Sonic's previous positions for invincibility stars
000138C8                            ; ---------------------------------------------------------------------------
000138C8                            
000138C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138C8                            
000138C8                            
000138C8                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
000138C8 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000138CC 43F8 CB00                  		lea	($FFFFCB00).w,a1
000138D0 43F1 0000                  		lea	(a1,d0.w),a1
000138D4 32E8 0008                  		move.w	8(a0),(a1)+
000138D8 32E8 000C                  		move.w	$C(a0),(a1)+
000138DC 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
000138E0 4E75                       		rts	
000138E2                            ; End of function Sonic_RecordPos
000138E2                            
000138E2                            ; ---------------------------------------------------------------------------
000138E2                            ; Subroutine for Sonic when he's underwater
000138E2                            ; ---------------------------------------------------------------------------
000138E2                            
000138E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138E2                            
000138E2                            
000138E2                            Sonic_Water:				; XREF: loc_12C7E
000138E2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000138E8 6700                       		beq.s	Obj01_InWater	; if yes, branch
000138EA                            
000138EA                            locret_12D80:
000138EA 4E75                       		rts	
000138EC                            ; ===========================================================================
000138EC                            
000138EC                            Obj01_InWater:
000138EC 3038 F646                  		move.w	($FFFFF646).w,d0
000138F0 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
000138F4 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
000138F6 08E8 0006 0022             		bset	#6,$22(a0)
000138FC 66EC                       		bne.s	locret_12D80
000138FE 6100 0000                  		bsr.w	ResumeMusic
00013902 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00013908 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
0001390E 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00013914 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
0001391A 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
00013920 4A38 FE19                  	tst.b	(Super_Sonic_flag).w	; Is Sonic Super?
00013924 6700                       	beq.s	@Skip			; If not branch
00013926 31FC 0500 F760             	move.w	#$500,(Sonic_top_speed).w
0001392C 31FC 0018 F762             	move.w	#$18,(Sonic_acceleration).w
00013932 31FC 0080 F764             	move.w	#$80,(Sonic_deceleration).w
00013938                            @Skip:		
00013938 E0E8 0010                  		asr	$10(a0)
0001393C E0E8 0012                  		asr	$12(a0)
00013940 E0E8 0012                  		asr	$12(a0)
00013944 67A4                       		beq.s	locret_12D80
00013946 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001394C 303C 00AA                  		move.w	#$AA,d0
00013950 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play splash sound
00013956                            ; ===========================================================================
00013956                            
00013956                            Obj01_OutWater:
00013956 08A8 0006 0022             		bclr	#6,$22(a0)
0001395C 678C                       		beq.s	locret_12D80
0001395E 6100 0000                  		bsr.w	ResumeMusic
00013962 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013968 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
0001396E 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013974 4A38 FE19                  	tst.b	(Super_Sonic_flag).w	; Is Sonic Super?
00013978 6700                       	beq.s	@Skip2			; If not branch
0001397A 31FC 0A00 F760             	move.w	#$A00,(Sonic_top_speed).w
00013980 31FC 0030 F762             	move.w	#$30,(Sonic_acceleration).w
00013986 31FC 0100 F764             	move.w	#$100,(Sonic_deceleration).w
0001398C                            @Skip2
0001398C E1E8 0012                  		asl	$12(a0)
00013990 4A68 0012                  		tst.w   $12(a0)
00013994 6700 FF54                  		beq.w	locret_12D80
00013998 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001399E 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
000139A4 6E00                       		bgt.s	loc_12E0E
000139A6 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
000139AC                            
000139AC                            loc_12E0E:
000139AC 303C 00AA                  		move.w	#$AA,d0
000139B0 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play splash sound
000139B6                            ; End of function Sonic_Water
000139B6                            
000139B6                            ; ===========================================================================
000139B6                            ; ---------------------------------------------------------------------------
000139B6                            ; Modes	for controlling	Sonic
000139B6                            ; ---------------------------------------------------------------------------
000139B6                            
000139B6                            Obj01_MdNormal:				; XREF: Obj01_Modes
000139B6 6100 0000                  		bsr.w	Sonic_SpinDash
000139BA 6100 0000                  		bsr.w	Sonic_Jump
000139BE 6100 0000                  		bsr.w	Sonic_SlopeResist
000139C2 6100 0000                  		bsr.w	Sonic_Move
000139C6 6100 0000                  		bsr.w	Sonic_Roll
000139CA 6100 0000                  		bsr.w	Sonic_Super
000139CE 6100 0000                  		bsr.w	Sonic_LevelBound
000139D2 4EBA A70C                  		jsr	SpeedToPos
000139D6 6100 0000                  		bsr.w	Sonic_AnglePos
000139DA 6100 0000                  		bsr.w	Sonic_SlopeRepel
000139DE 4E75                       		rts	
000139E0                            ; ===========================================================================
000139E0                            
000139E0                            Obj01_MdJump:				; XREF: Obj01_Modes
000139E0 4228 0039                  		clr.b	$39(a0)
000139E4 6100 0000                  		bsr.w	Sonic_JumpHeight
000139E8 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000139EC 6100 0000                  		bsr.w	Sonic_LevelBound
000139F0 4EBA A6C2                  		jsr	ObjectFall
000139F4 0828 0006 0022             		btst	#6,$22(a0)
000139FA 6700                       		beq.s	loc_12E5C
000139FC 0468 0028 0012             		subi.w	#$28,$12(a0)
00013A02                            
00013A02                            loc_12E5C:
00013A02 6100 0000                  		bsr.w	Sonic_JumpAngle
00013A06 6100 0000                  		bsr.w	Sonic_Floor
00013A0A 4E75                       		rts	
00013A0C                            ; ===========================================================================
00013A0C                            
00013A0C                            Obj01_MdRoll:				; XREF: Obj01_Modes
00013A0C 6100 0000                  		bsr.w	Sonic_Jump
00013A10 6100 0000                  		bsr.w	Sonic_RollRepel
00013A14 6100 0000                  		bsr.w	Sonic_RollSpeed
00013A18 6100 0000                  		bsr.w	Sonic_LevelBound
00013A1C 4EBA A6C2                  		jsr	SpeedToPos
00013A20 6100 0000                  		bsr.w	Sonic_AnglePos
00013A24 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013A28 4E75                       		rts	
00013A2A                            ; ===========================================================================
00013A2A                            
00013A2A                            Obj01_MdJump2:				; XREF: Obj01_Modes
00013A2A 4228 0039                  		clr.b	$39(a0)
00013A2E 6100 0000                  		bsr.w	Sonic_JumpHeight
00013A32 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013A36 6100 0000                  		bsr.w	Sonic_LevelBound
00013A3A 4EBA A678                  		jsr	ObjectFall
00013A3E 0828 0006 0022             		btst	#6,$22(a0)
00013A44 6700                       		beq.s	loc_12EA6
00013A46 0468 0028 0012             		subi.w	#$28,$12(a0)
00013A4C                            
00013A4C                            loc_12EA6:
00013A4C 6100 0000                  		bsr.w	Sonic_JumpAngle
00013A50 6100 0000                  		bsr.w	Sonic_Floor
00013A54 4E75                       		rts	
00013A56                            ; ---------------------------------------------------------------------------
00013A56                            ; Subroutine to	make Sonic walk/run
00013A56                            ; ---------------------------------------------------------------------------
00013A56                            
00013A56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A56                            
00013A56                            
00013A56                            Sonic_Move:				; XREF: Obj01_MdNormal
00013A56 3C38 F760                  		move.w	($FFFFF760).w,d6
00013A5A 3A38 F762                  		move.w	($FFFFF762).w,d5
00013A5E 3838 F764                  		move.w	($FFFFF764).w,d4
00013A62 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013A66 6600 0000                  		bne.w	loc_12FEE
00013A6A 4A68 003E                  		tst.w	$3E(a0)
00013A6E 6600 0000                  		bne.w	Obj01_ResetScr
00013A72 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013A78 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00013A7A 6100 0000                  		bsr.w	Sonic_MoveLeft
00013A7E                            
00013A7E                            Obj01_NotLeft:
00013A7E 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013A84 6700                       		beq.s	Obj01_NotRight	; if not, branch
00013A86 6100 0000                  		bsr.w	Sonic_MoveRight
00013A8A                            
00013A8A                            Obj01_NotRight:
00013A8A 1028 0026                  		move.b	$26(a0),d0
00013A8E 0600 0020                  		addi.b	#$20,d0
00013A92 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00013A96 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013A9A 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013A9E 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013AA2 08A8 0005 0022             		bclr	#5,$22(a0)
00013AA8 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013AAE 0828 0003 0022             		btst	#3,$22(a0)
00013AB4 6700                       		beq.s	Sonic_Balance
00013AB6 7000                       		moveq	#0,d0
00013AB8 1028 003D                  		move.b	$3D(a0),d0
00013ABC ED48                       		lsl.w	#6,d0
00013ABE 43F8 D000                  		lea	($FFFFD000).w,a1
00013AC2 43F1 0000                  		lea	(a1,d0.w),a1
00013AC6 4A29 0022                  		tst.b	$22(a1)
00013ACA 6B00                       		bmi.s	Sonic_LookUp
00013ACC 7200                       		moveq	#0,d1
00013ACE 1229 0019                  		move.b	$19(a1),d1
00013AD2 3401                       		move.w	d1,d2
00013AD4 D442                       		add.w	d2,d2
00013AD6 5942                       		subq.w	#4,d2
00013AD8 D268 0008                  		add.w	8(a0),d1
00013ADC 9269 0008                  		sub.w	8(a1),d1
00013AE0 0C41 0004                  		cmpi.w	#4,d1
00013AE4 6D00                       		blt.s	loc_12F6A
00013AE6 B242                       		cmp.w	d2,d1
00013AE8 6C00                       		bge.s	loc_12F5A
00013AEA 6000                       		bra.s	Sonic_LookUp
00013AEC                            ; ===========================================================================
00013AEC                            
00013AEC                            Sonic_Balance:
00013AEC 4EB9 0000 0000             		jsr	ObjHitFloor
00013AF2 0C41 000C                  		cmpi.w	#$C,d1
00013AF6 6D00                       		blt.s	Sonic_LookUp
00013AF8 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00013AFE 6600                       		bne.s	loc_12F62
00013B00                            
00013B00                            loc_12F5A:
00013B00 08A8 0000 0022             		bclr	#0,$22(a0)
00013B06 6000                       		bra.s	loc_12F70
00013B08                            ; ===========================================================================
00013B08                            
00013B08                            loc_12F62:
00013B08 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00013B0E 6600                       		bne.s	Sonic_LookUp
00013B10                            
00013B10                            loc_12F6A:
00013B10 08E8 0000 0022             		bset	#0,$22(a0)
00013B16                            
00013B16                            loc_12F70:
00013B16 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00013B1C 6000                       		bra.s	Obj01_ResetScr
00013B1E                            ; ===========================================================================
00013B1E                            
00013B1E                            Sonic_LookUp:
00013B1E 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00013B24 6700                       		beq.s	Sonic_Duck	; if not, branch
00013B26 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00013B2C 5238 C903                  		addq.b	#1,($FFFFC903).w
00013B30 0C38 0078 C903             		cmp.b	#$78,($FFFFC903).w
00013B36 6500                       		bcs.s	Obj01_ResetScr_Part2
00013B38 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
00013B3E 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00013B44 6700                       		beq.s	loc_12FC2
00013B46 5478 F73E                  		addq.w	#2,($FFFFF73E).w
00013B4A 6000                       		bra.s	loc_12FC2
00013B4C                            ; ===========================================================================
00013B4C                            
00013B4C                            Sonic_Duck:
00013B4C 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013B52 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00013B54 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
00013B5A 5238 C903                  		addq.b	#1,($FFFFC903).w
00013B5E 0C38 0078 C903             		cmpi.b	#$78,($FFFFC903).w
00013B64 6500                       		bcs.s	Obj01_ResetScr_Part2
00013B66 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
00013B6C 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00013B72 6700                       		beq.s	loc_12FC2
00013B74 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013B78 6000                       		bra.s	loc_12FC2
00013B7A                            ; ===========================================================================
00013B7A                            
00013B7A                            Obj01_ResetScr:
00013B7A 11FC 0000 C903             		move.b	#0,($FFFFC903).w
00013B80                            		
00013B80                            Obj01_ResetScr_Part2:
00013B80 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00013B86 6700                       		beq.s	loc_12FC2	; if yes, branch
00013B88 6400                       		bcc.s	loc_12FBE
00013B8A 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00013B8E                            
00013B8E                            loc_12FBE:
00013B8E 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00013B92                            
00013B92                            
00013B92                            loc_12FC2:
00013B92 1038 F602                  		move.b	($FFFFF602).w,d0
00013B96 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00013B9A 6600                       		bne.s	loc_12FEE	; if yes, branch
00013B9C 3028 0014                  		move.w	$14(a0),d0
00013BA0 6700                       		beq.s	loc_12FEE
00013BA2 6B00                       		bmi.s	loc_12FE2
00013BA4 9045                       		sub.w	d5,d0
00013BA6 6400                       		bcc.s	loc_12FDC
00013BA8 303C 0000                  		move.w	#0,d0
00013BAC                            
00013BAC                            loc_12FDC:
00013BAC 3140 0014                  		move.w	d0,$14(a0)
00013BB0 6000                       		bra.s	loc_12FEE
00013BB2                            ; ===========================================================================
00013BB2                            
00013BB2                            loc_12FE2:
00013BB2 D045                       		add.w	d5,d0
00013BB4 6400                       		bcc.s	loc_12FEA
00013BB6 303C 0000                  		move.w	#0,d0
00013BBA                            
00013BBA                            loc_12FEA:
00013BBA 3140 0014                  		move.w	d0,$14(a0)
00013BBE                            
00013BBE                            loc_12FEE:
00013BBE 1028 0026                  		move.b	$26(a0),d0
00013BC2 4EB9 0000 33D4             		jsr	(CalcSine).l
00013BC8 C3E8 0014                  		muls.w	$14(a0),d1
00013BCC E081                       		asr.l	#8,d1
00013BCE 3141 0010                  		move.w	d1,$10(a0)
00013BD2 C1E8 0014                  		muls.w	$14(a0),d0
00013BD6 E080                       		asr.l	#8,d0
00013BD8 3140 0012                  		move.w	d0,$12(a0)
00013BDC                            
00013BDC                            loc_1300C:
00013BDC 1028 0026                  		move.b	$26(a0),d0
00013BE0 0600 0040                  		addi.b	#$40,d0
00013BE4 6B00                       		bmi.s	locret_1307C
00013BE6 123C 0040                  		move.b	#$40,d1
00013BEA 4A68 0014                  		tst.w	$14(a0)
00013BEE 6700                       		beq.s	locret_1307C
00013BF0 6B00                       		bmi.s	loc_13024
00013BF2 4441                       		neg.w	d1
00013BF4                            
00013BF4                            loc_13024:
00013BF4 1028 0026                  		move.b	$26(a0),d0
00013BF8 D001                       		add.b	d1,d0
00013BFA 3F00                       		move.w	d0,-(sp)
00013BFC 6100 0000                  		bsr.w	Sonic_WalkSpeed
00013C00 301F                       		move.w	(sp)+,d0
00013C02 4A41                       		tst.w	d1
00013C04 6A00                       		bpl.s	locret_1307C
00013C06 E141                       		asl.w	#8,d1
00013C08 0600 0020                  		addi.b	#$20,d0
00013C0C 0200 00C0                  		andi.b	#$C0,d0
00013C10 6700                       		beq.s	loc_13078
00013C12 0C00 0040                  		cmpi.b	#$40,d0
00013C16 6700                       		beq.s	loc_13066
00013C18 0C00 0080                  		cmpi.b	#$80,d0
00013C1C 6700                       		beq.s	loc_13060
00013C1E D368 0010                  		add.w	d1,$10(a0)
00013C22 08E8 0005 0022             		bset	#5,$22(a0)
00013C28 317C 0000 0014             		move.w	#0,$14(a0)
00013C2E 4E75                       		rts	
00013C30                            ; ===========================================================================
00013C30                            
00013C30                            loc_13060:
00013C30 9368 0012                  		sub.w	d1,$12(a0)
00013C34 4E75                       		rts	
00013C36                            ; ===========================================================================
00013C36                            
00013C36                            loc_13066:
00013C36 9368 0010                  		sub.w	d1,$10(a0)
00013C3A 08E8 0005 0022             		bset	#5,$22(a0)
00013C40 317C 0000 0014             		move.w	#0,$14(a0)
00013C46 4E75                       		rts	
00013C48                            ; ===========================================================================
00013C48                            
00013C48                            loc_13078:
00013C48 D368 0012                  		add.w	d1,$12(a0)
00013C4C                            
00013C4C                            locret_1307C:
00013C4C 4E75                       		rts	
00013C4E                            ; End of function Sonic_Move
00013C4E                            
00013C4E                            
00013C4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C4E                            
00013C4E                            
00013C4E                            Sonic_MoveLeft:		   ; XREF: Sonic_Move
00013C4E 3028 0014                  		move.w	$14(a0),d0
00013C52 6700                       		beq.s	loc_13086
00013C54 6A00                       		bpl.s	loc_130B2
00013C56                            
00013C56                            loc_13086:
00013C56 08E8 0000 0022             		bset	#0,$22(a0)
00013C5C 6600                       		bne.s	loc_1309A
00013C5E 08A8 0005 0022             		bclr	#5,$22(a0)
00013C64 117C 0001 001D             		move.b	#1,$1D(a0)
00013C6A                            
00013C6A                            loc_1309A:
00013C6A 9045                       		sub.w	d5,d0
00013C6C 3206                       		move.w	d6,d1
00013C6E 4441                       		neg.w	d1
00013C70 B041                       		cmp.w	d1,d0
00013C72 6E00                       		bgt.s	loc_130A6
00013C74 D045                       		add.w	d5,d0
00013C76 B041                       		cmp.w	d1,d0
00013C78 6F00                       		ble.s	loc_130A6
00013C7A 3001                       		move.w	d1,d0
00013C7C                            
00013C7C                            loc_130A6:
00013C7C 3140 0014                  		move.w	d0,$14(a0)
00013C80 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00013C86 4E75                       		rts
00013C88                            
00013C88                            ; ===========================================================================
00013C88                            
00013C88                            loc_130B2:				; XREF: Sonic_MoveLeft
00013C88 9044                       		sub.w	d4,d0
00013C8A 6400                       		bcc.s	loc_130BA
00013C8C 303C FF80                  		move.w	#-$80,d0
00013C90                            
00013C90                            loc_130BA:
00013C90 3140 0014                  		move.w	d0,$14(a0)
00013C94 1028 0026                  		move.b	$26(a0),d0
00013C98 0600 0020                  		addi.b	#$20,d0
00013C9C 0200 00C0                  		andi.b	#$C0,d0
00013CA0 6600                       		bne.s	locret_130E8
00013CA2 0C40 0400                  		cmpi.w	#$400,d0
00013CA6 6D00                       		blt.s	locret_130E8
00013CA8 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013CAE 08A8 0000 0022             		bclr	#0,$22(a0)
00013CB4 303C 00A4                  		move.w	#$A4,d0
00013CB8 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play stopping sound
00013CBE                            
00013CBE                            locret_130E8:
00013CBE 4E75                       		rts	
00013CC0                            ; End of function Sonic_MoveLeft
00013CC0                            
00013CC0                            
00013CC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013CC0                            
00013CC0                            
00013CC0                            Sonic_MoveRight:	   ; XREF: Sonic_Move
00013CC0 3028 0014                  		move.w	$14(a0),d0
00013CC4 6B00                       		bmi.s	loc_13118
00013CC6 08A8 0000 0022             		bclr	#0,$22(a0)
00013CCC 6700                       		beq.s	loc_13104
00013CCE 08A8 0005 0022             		bclr	#5,$22(a0)
00013CD4 117C 0001 001D             		move.b	#1,$1D(a0)
00013CDA                            
00013CDA                            loc_13104:
00013CDA D045                       		add.w	d5,d0
00013CDC B046                       		cmp.w	d6,d0
00013CDE 6D00                       		blt.s	loc_1310C
00013CE0 9045                       		sub.w	d5,d0
00013CE2 B046                       		cmp.w	d6,d0
00013CE4 6C00                       		bge.s	loc_1310C
00013CE6 3006                       		move.w	d6,d0
00013CE8                            
00013CE8                            loc_1310C:
00013CE8 3140 0014                  		move.w	d0,$14(a0)
00013CEC 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00013CF2 4E75                       		rts
00013CF4                            
00013CF4                            ; ===========================================================================
00013CF4                            
00013CF4                            loc_13118:				; XREF: Sonic_MoveRight
00013CF4 D044                       		add.w	d4,d0
00013CF6 6400                       		bcc.s	loc_13120
00013CF8 303C 0080                  		move.w	#$80,d0
00013CFC                            
00013CFC                            loc_13120:
00013CFC 3140 0014                  		move.w	d0,$14(a0)
00013D00 1028 0026                  		move.b	$26(a0),d0
00013D04 0600 0020                  		addi.b	#$20,d0
00013D08 0200 00C0                  		andi.b	#$C0,d0
00013D0C 6600                       		bne.s	locret_1314E
00013D0E 0C40 FC00                  		cmpi.w	#-$400,d0
00013D12 6E00                       		bgt.s	locret_1314E
00013D14 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013D1A 08E8 0000 0022             		bset	#0,$22(a0)
00013D20 303C 00A4                  		move.w	#$A4,d0
00013D24 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play stopping sound
00013D2A                            
00013D2A                            locret_1314E:
00013D2A 4E75                       		rts	
00013D2C                            ; End of function Sonic_MoveRight
00013D2C                            
00013D2C                            ; ---------------------------------------------------------------------------
00013D2C                            ; Subroutine to	change Sonic's speed as he rolls
00013D2C                            ; ---------------------------------------------------------------------------
00013D2C                            
00013D2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D2C                            
00013D2C                            
00013D2C                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00013D2C 3C38 F760                  		move.w	($FFFFF760).w,d6
00013D30 E346                       		asl.w	#1,d6
00013D32 3A38 F762                  		move.w	($FFFFF762).w,d5
00013D36 E245                       		asr.w	#1,d5
00013D38 3838 F764                  		move.w	($FFFFF764).w,d4
00013D3C E444                       		asr.w	#2,d4
00013D3E 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013D42 6600 0000                  		bne.w	loc_131CC
00013D46 4A68 003E                  		tst.w	$3E(a0)
00013D4A 6600                       		bne.s	loc_13188
00013D4C 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013D52 6700                       		beq.s	loc_1317C	; if not, branch
00013D54 6100 0000                  		bsr.w	Sonic_RollLeft
00013D58                            
00013D58                            loc_1317C:
00013D58 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013D5E 6700                       		beq.s	loc_13188	; if not, branch
00013D60 6100 0000                  		bsr.w	Sonic_RollRight
00013D64                            
00013D64                            loc_13188:
00013D64 3028 0014                  		move.w	$14(a0),d0
00013D68 6700                       		beq.s	loc_131AA
00013D6A 6B00                       		bmi.s	loc_1319E
00013D6C 9045                       		sub.w	d5,d0
00013D6E 6400                       		bcc.s	loc_13198
00013D70 303C 0000                  		move.w	#0,d0
00013D74                            
00013D74                            loc_13198:
00013D74 3140 0014                  		move.w	d0,$14(a0)
00013D78 6000                       		bra.s	loc_131AA
00013D7A                            ; ===========================================================================
00013D7A                            
00013D7A                            loc_1319E:				; XREF: Sonic_RollSpeed
00013D7A D045                       		add.w	d5,d0
00013D7C 6400                       		bcc.s	loc_131A6
00013D7E 303C 0000                  		move.w	#0,d0
00013D82                            
00013D82                            loc_131A6:
00013D82 3140 0014                  		move.w	d0,$14(a0)
00013D86                            
00013D86                            loc_131AA:
00013D86 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013D8A 6600                       		bne.s	loc_131CC	; if yes, branch
00013D8C 08A8 0002 0022             		bclr	#2,$22(a0)
00013D92 117C 0013 0016             		move.b	#$13,$16(a0)
00013D98 117C 0009 0017             		move.b	#9,$17(a0)
00013D9E 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013DA4 5B68 000C                  		subq.w	#5,$C(a0)
00013DA8                            
00013DA8                            loc_131CC:
00013DA8 0C78 0060 F73E             		cmp.w	#$60,($FFFFF73E).w
00013DAE 6700                       		beq.s	@cont2
00013DB0 6400                       		bcc.s	@cont1
00013DB2 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013DB6                            		
00013DB6                            @cont1:
00013DB6 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013DBA                            		
00013DBA                            @cont2:
00013DBA 1028 0026                  		move.b	$26(a0),d0
00013DBE 4EB9 0000 33D4             		jsr	(CalcSine).l
00013DC4 C1E8 0014                  		muls.w	$14(a0),d0
00013DC8 E080                       		asr.l	#8,d0
00013DCA 3140 0012                  		move.w	d0,$12(a0)
00013DCE C3E8 0014                  		muls.w	$14(a0),d1
00013DD2 E081                       		asr.l	#8,d1
00013DD4 0C41 1000                  		cmpi.w	#$1000,d1
00013DD8 6F00                       		ble.s	loc_131F0
00013DDA 323C 1000                  		move.w	#$1000,d1
00013DDE                            
00013DDE                            loc_131F0:
00013DDE 0C41 F000                  		cmpi.w	#-$1000,d1
00013DE2 6C00                       		bge.s	loc_131FA
00013DE4 323C F000                  		move.w	#-$1000,d1
00013DE8                            
00013DE8                            loc_131FA:
00013DE8 3141 0010                  		move.w	d1,$10(a0)
00013DEC 6000 FDEE                  		bra.w	loc_1300C
00013DF0                            ; End of function Sonic_RollSpeed
00013DF0                            
00013DF0                            
00013DF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DF0                            
00013DF0                            
00013DF0                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00013DF0 3028 0014                  		move.w	$14(a0),d0
00013DF4 6700                       		beq.s	loc_1320A
00013DF6 6A00                       		bpl.s	loc_13218
00013DF8                            
00013DF8                            loc_1320A:
00013DF8 08E8 0000 0022             		bset	#0,$22(a0)
00013DFE 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013E04 4E75                       		rts	
00013E06                            ; ===========================================================================
00013E06                            
00013E06                            loc_13218:
00013E06 9044                       		sub.w	d4,d0
00013E08 6400                       		bcc.s	loc_13220
00013E0A 303C FF80                  		move.w	#-$80,d0
00013E0E                            
00013E0E                            loc_13220:
00013E0E 3140 0014                  		move.w	d0,$14(a0)
00013E12 4E75                       		rts	
00013E14                            ; End of function Sonic_RollLeft
00013E14                            
00013E14                            
00013E14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E14                            
00013E14                            
00013E14                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00013E14 3028 0014                  		move.w	$14(a0),d0
00013E18 6B00                       		bmi.s	loc_1323A
00013E1A 08A8 0000 0022             		bclr	#0,$22(a0)
00013E20 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013E26 4E75                       		rts	
00013E28                            ; ===========================================================================
00013E28                            
00013E28                            loc_1323A:
00013E28 D044                       		add.w	d4,d0
00013E2A 6400                       		bcc.s	loc_13242
00013E2C 303C 0080                  		move.w	#$80,d0
00013E30                            
00013E30                            loc_13242:
00013E30 3140 0014                  		move.w	d0,$14(a0)
00013E34 4E75                       		rts	
00013E36                            ; End of function Sonic_RollRight
00013E36                            
00013E36                            ; ---------------------------------------------------------------------------
00013E36                            ; Subroutine to	change Sonic's direction while jumping
00013E36                            ; ---------------------------------------------------------------------------
00013E36                            
00013E36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E36                            
00013E36                            
00013E36                            Sonic_ChgJumpDir:		; XREF: Obj01_MdJump; Obj01_MdJump2
00013E36 3C38 F760                  		move.w	($FFFFF760).w,d6
00013E3A 3A38 F762                  		move.w	($FFFFF762).w,d5
00013E3E E345                       		asl.w	#1,d5
00013E40 0828 0004 0022             		btst	#4,$22(a0)	
00013E46 6600                       		bne.s	Obj01_ResetScr2	
00013E48 3028 0010                  		move.w	$10(a0),d0	
00013E4C 0838 0002 F602             		btst	#2,($FFFFF602).w; is left being pressed?	
00013E52 6700                       		beq.s	loc_13278; if not, branch	
00013E54 08E8 0000 0022             		bset	#0,$22(a0)	
00013E5A 9045                       		sub.w	d5,d0	
00013E5C 3206                       		move.w	d6,d1	
00013E5E 4441                       		neg.w	d1	
00013E60 B041                       		cmp.w	d1,d0	
00013E62 6E00                       		bgt.s	loc_13278	
00013E64 D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
00013E66 B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
00013E68 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
00013E6A 3001                       		move.w	d1,d0
00013E6C                            
00013E6C                            loc_13278:
00013E6C 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
00013E72 6700                       		beq.s	Obj01_JumpMove; if not, branch	
00013E74 08A8 0000 0022             		bclr	#0,$22(a0)	
00013E7A D045                       		add.w	d5,d0	
00013E7C B046                       		cmp.w	d6,d0	
00013E7E 6D00                       		blt.s	Obj01_JumpMove
00013E80 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
00013E82 B046                       		cmp.w	d6,d0		; +++ compare speed with top speed
00013E84 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
00013E86 3006                       		move.w	d6,d0
00013E88                            
00013E88                            Obj01_JumpMove:
00013E88 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013E8C                            
00013E8C                            Obj01_ResetScr2:
00013E8C 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013E92 6700                       		beq.s	loc_132A4	; if yes, branch
00013E94 6400                       		bcc.s	loc_132A0
00013E96 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013E9A                            
00013E9A                            loc_132A0:
00013E9A 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013E9E                            
00013E9E                            loc_132A4:
00013E9E 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013EA4 6500                       		bcs.s	locret_132D2	; if yes, branch
00013EA6 3028 0010                  		move.w	$10(a0),d0
00013EAA 3200                       		move.w	d0,d1
00013EAC EA41                       		asr.w	#5,d1
00013EAE 6700                       		beq.s	locret_132D2
00013EB0 6B00                       		bmi.s	loc_132C6
00013EB2 9041                       		sub.w	d1,d0
00013EB4 6400                       		bcc.s	loc_132C0
00013EB6 303C 0000                  		move.w	#0,d0
00013EBA                            
00013EBA                            loc_132C0:
00013EBA 3140 0010                  		move.w	d0,$10(a0)
00013EBE 4E75                       		rts	
00013EC0                            ; ===========================================================================
00013EC0                            
00013EC0                            loc_132C6:
00013EC0 9041                       		sub.w	d1,d0
00013EC2 6500                       		bcs.s	loc_132CE
00013EC4 303C 0000                  		move.w	#0,d0
00013EC8                            
00013EC8                            loc_132CE:
00013EC8 3140 0010                  		move.w	d0,$10(a0)
00013ECC                            
00013ECC                            locret_132D2:
00013ECC 4E75                       		rts	
00013ECE                            ; End of function Sonic_ChgJumpDir
00013ECE                            
00013ECE                            ; ===========================================================================
00013ECE                            ; ---------------------------------------------------------------------------
00013ECE                            ; Unused subroutine to squash Sonic
00013ECE                            ; ---------------------------------------------------------------------------
00013ECE 1028 0026                  		move.b	$26(a0),d0
00013ED2 0600 0020                  		addi.b	#$20,d0
00013ED6 0200 00C0                  		andi.b	#$C0,d0
00013EDA 6600                       		bne.s	locret_13302
00013EDC 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013EE0 4A41                       		tst.w	d1
00013EE2 6A00                       		bpl.s	locret_13302
00013EE4 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013EEA 317C 0000 0010             		move.w	#0,$10(a0)
00013EF0 317C 0000 0012             		move.w	#0,$12(a0)
00013EF6 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00013EFC                            
00013EFC                            locret_13302:
00013EFC 4E75                       		rts	
00013EFE                            ; ---------------------------------------------------------------------------
00013EFE                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00013EFE                            ; ---------------------------------------------------------------------------
00013EFE                            
00013EFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013EFE                            
00013EFE                            
00013EFE                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00013EFE 2228 0008                  		move.l	8(a0),d1
00013F02 3028 0010                  		move.w	$10(a0),d0
00013F06 48C0                       		ext.l	d0
00013F08 E180                       		asl.l	#8,d0
00013F0A D280                       		add.l	d0,d1
00013F0C 4841                       		swap	d1
00013F0E 3038 F728                  		move.w	($FFFFF728).w,d0
00013F12 0640 0010                  		addi.w	#$10,d0
00013F16 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013F18 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00013F1A 3038 F72A                  		move.w	($FFFFF72A).w,d0
00013F1E 0640 0128                  		addi.w	#$128,d0
00013F22 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013F26 6600                       		bne.s	loc_13332
00013F28 0640 0040                  		addi.w	#$40,d0
00013F2C                            
00013F2C                            loc_13332:
00013F2C B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013F2E 6300                       		bls.s	Boundary_Sides	; if yes, branch
00013F30                            
00013F30                            loc_13336:
00013F30 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013F34 0640 00E0                  		addi.w	#$E0,d0
00013F38 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00013F3C 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013F3E 4E75                       		rts	
00013F40                            ; ===========================================================================
00013F40                            
00013F40                            Jmp_KillSonic:
00013F40 4EF9 0000 0000             	       jmp    KillSonic
00013F46                            
00013F46                            Boundary_Bottom:
00013F46 3038 F726                  		move.w	($FFFFF726).w,d0
00013F4A 3238 F72E                  		move.w	($FFFFF72E).w,d1
00013F4E B240                       		cmp.w	d0,d1			; screen still scrolling down?
00013F50 6D00                       		blt.s	Boundary_Bottom_locret	; if so, don't kill Sonic
00013F52 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w	; is level SBZ2 ?
00013F58 6600 FFE6                  		bne.w	Jmp_KillSonic		; if not, kill Sonic
00013F5C 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00013F62 6500 FFDC                  		bcs.w	Jmp_KillSonic
00013F66 4238 FE30                  		clr.b	($FFFFFE30).w		; clear lamppost counter
00013F6A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w	; restart the level
00013F70 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w	; set level to SBZ3 (LZ4)
00013F76                            
00013F76                            Boundary_Bottom_locret:
00013F76 4E75                       		rts	
00013F78                            ; ===========================================================================
00013F78                            
00013F78                            
00013F78                            Boundary_Sides:
00013F78 3140 0008                  		move.w	d0,8(a0)
00013F7C 317C 0000 000A             		move.w	#0,$A(a0)
00013F82 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013F88 317C 0000 0014             		move.w	#0,$14(a0)
00013F8E 60A0                       		bra.s	loc_13336
00013F90                            ; End of function Sonic_LevelBound
00013F90                            
00013F90                            ; ---------------------------------------------------------------------------
00013F90                            ; Subroutine allowing Sonic to roll when he's moving
00013F90                            ; ---------------------------------------------------------------------------
00013F90                            
00013F90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F90                            
00013F90                            
00013F90                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013F90 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013F94 6600                       		bne.s	Obj01_NoRoll
00013F96 3028 0014                  		move.w	$14(a0),d0
00013F9A 6A00                       		bpl.s	loc_13392
00013F9C 4440                       		neg.w	d0
00013F9E                            
00013F9E                            loc_13392:
00013F9E 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013FA2 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013FA4 1038 F602                  		move.b	($FFFFF602).w,d0
00013FA8 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013FAC 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013FAE 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013FB4 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013FB6                            
00013FB6                            Obj01_NoRoll:
00013FB6 4E75                       		rts	
00013FB8                            ; ===========================================================================
00013FB8                            
00013FB8                            Obj01_ChkRoll:
00013FB8 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013FBE 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013FC0 4E75                       		rts	
00013FC2                            ; ===========================================================================
00013FC2                            
00013FC2                            Obj01_DoRoll:
00013FC2 08E8 0002 0022             		bset	#2,$22(a0)
00013FC8 117C 000E 0016             		move.b	#$E,$16(a0)
00013FCE 117C 0007 0017             		move.b	#7,$17(a0)
00013FD4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013FDA 5A68 000C                  		addq.w	#5,$C(a0)
00013FDE 303C 00BE                  		move.w	#$BE,d0
00013FE2 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play rolling sound
00013FE8 4A68 0014                  		tst.w	$14(a0)
00013FEC 6600                       		bne.s	locret_133E8
00013FEE 317C 0200 0014             		move.w	#$200,$14(a0)
00013FF4                            
00013FF4                            locret_133E8:
00013FF4 4E75                       		rts	
00013FF6                            ; End of function Sonic_Roll
00013FF6                            
00013FF6                            ; ---------------------------------------------------------------------------
00013FF6                            ; Subroutine allowing Sonic to jump
00013FF6                            ; ---------------------------------------------------------------------------
00013FF6                            
00013FF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013FF6                            
00013FF6                            
00013FF6                            Sonic_Jump:                ; XREF: Obj01_MdNormal; Obj01_MdRoll
00013FF6 1038 F603                  		move.b	($FFFFF603).w,d0
00013FFA 0200 0070                          andi.b	#$70,d0		; is A,	B or C 
00013FFE 6700 0000                          beq.w    locret_1348E        ; if not, branch
00014002 303C 00A0                          move.w    #$A0,d0    ; set jumping sound
00014006 4EB9 0000 1470                     jsr    (PlaySound).l ; play jumping sound
0001400C 7000                               moveq    #0,d0
0001400E 1028 0026                          move.b    $26(a0),d0
00014012 0600 0080                          addi.b    #$80,d0
00014016 4EB9 0000 0000                     jsr    sub_14D48
0001401C 0C41 0006                          cmpi.w    #6,d1
00014020 6D00 0000                          blt.w    locret_1348E
00014024 343C 0680                          move.w    #$680,d2 ; set normal jump speed
00014028 4A38 FE19                          tst.b    ($FFFFFE19).w    ; is Sonic Super?
0001402C 6700                               beq.s    Sonic_JumpContinue2 ; if not, branch
0001402E 343C 0880                          move.w    #$880,d2        ; set higher jump speed if super
00014032                            
00014032                            Sonic_JumpContinue2:
00014032 0828 0006 0022                     btst    #6,$22(a0) ; is player underwater?
00014038 6700                               beq.s    loc_1341C ; if not, branch
0001403A 343C 0380                          move.w    #$380,d2 ; if yes, decrease his jump speed
0001403E 4A38 FE19                          tst.b    ($FFFFFE19).w    ; is Sonic Super?
00014042 6700                               beq.s    loc_1341C ; if not, branch
00014044 343C 0530                          move.w    #$530,d2 ; super jump speed
00014048                            
00014048                            loc_1341C:
00014048 7000                       		moveq	#0,d0
0001404A 1028 0026                  		move.b	$26(a0),d0
0001404E 0400 0040                  		subi.b	#$40,d0
00014052 4EB9 0000 33D4             		jsr	(CalcSine).l
00014058 C3C2                       		muls.w	d2,d1
0001405A E081                       		asr.l	#8,d1
0001405C D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00014060 C1C2                       		muls.w	d2,d0
00014062 E080                       		asr.l	#8,d0
00014064 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00014068 08E8 0001 0022             		bset	#1,$22(a0)
0001406E 08A8 0005 0022             		bclr	#5,$22(a0)
00014074 588F                       		addq.l	#4,sp
00014076 117C 0001 003C             		move.b	#1,$3C(a0)
0001407C 4228 0038                  		clr.b	$38(a0)
00014080 303C 00A0                  		move.w	#$A0,d0
00014084 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play jumping sound
0001408A 117C 0013 0016             		move.b	#$13,$16(a0)
00014090 117C 0009 0017             		move.b	#9,$17(a0)
00014096 0828 0002 0022             		btst	#2,$22(a0)
0001409C 6600                       		bne.s	loc_13490
0001409E 117C 000E 0016             		move.b	#$E,$16(a0)
000140A4 117C 0007 0017             		move.b	#7,$17(a0)
000140AA 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
000140B0 08E8 0002 0022             		bset	#2,$22(a0)
000140B6 5A68 000C                  		addq.w	#5,$C(a0)
000140BA                            
000140BA                            locret_1348E:
000140BA 4E75                       		rts	
000140BC                            ; ===========================================================================
000140BC                            
000140BC                            loc_13490:
000140BC 08E8 0004 0022             		bset	#4,$22(a0)
000140C2 4E75                       		rts	
000140C4                            ; End of function Sonic_Jump
000140C4                            
000140C4                            
000140C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000140C4                            
000140C4                            
000140C4                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
000140C4 4A28 003C                  		tst.b	$3C(a0)
000140C8 6700                       		beq.s	loc_134C4
000140CA 323C FC00                  		move.w	#-$400,d1
000140CE 0828 0006 0022             		btst	#6,$22(a0)
000140D4 6700                       		beq.s	loc_134AE
000140D6 323C FE00                  		move.w	#-$200,d1
000140DA                            
000140DA                            loc_134AE:
000140DA B268 0012                  		cmp.w	$12(a0),d1
000140DE 6F00                       		ble.s	locret_134C2
000140E0 1038 F602                  		move.b	($FFFFF602).w,d0
000140E4 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
000140E8 6600                       		bne.s	locret_134C2	; if yes, branch
000140EA 3141 0012                  		move.w	d1,$12(a0)
000140EE                            
000140EE                            locret_134C2:
000140EE 4A28 0012                  	tst.b	y_vel(a0)		; is Sonic exactly at the height of his jump?
000140F2 6700                       	beq.s	jmp_Sonic_CheckGoSuper	; if yes, test for turning into Super Sonic	
000140F4 4E75                       		rts	
000140F6                            ; ===========================================================================
000140F6                            
000140F6                            loc_134C4:
000140F6 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
000140FC 6C00                       		bge.s	locret_134D2
000140FE 317C F040 0012             		move.w	#-$FC0,$12(a0)
00014104                            
00014104                            locret_134D2:
00014104 4E75                       		rts	
00014106                            ; End of function Sonic_JumpHeight
00014106                            
00014106                            Jmp_Sonic_CheckGoSuper
00014106 4EF9 0000 0000             	jmp Sonic_CheckGoSuper
0001410C                            ; ---------------------------------------------------------------------------
0001410C                            ; Subroutine to make Sonic perform a spindash
0001410C                            ; ---------------------------------------------------------------------------
0001410C                             
0001410C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001410C                             
0001410C                             
0001410C                            Sonic_SpinDash:
0001410C 4A28 0039                  		tst.b	$39(a0)			; already Spin Dashing?
00014110 6600                       		bne.s	loc2_1AC8E		; if set, branch
00014112 0C28 0008 001C             		cmpi.b	#8,$1C(a0)		; is anim duck
00014118 6600                       		bne.s	locret2_1AC8C		; if not, return
0001411A 1038 F603                  		move.b	($FFFFF603).w,d0	; read controller
0001411E 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C ?
00014122 6700 0000                  		beq.w	locret2_1AC8C		; if not, return
00014126 117C 001D 001C             		move.b	#$1D,$1C(a0)		; set Spin Dash anim (9 in s2)
0001412C 303C 00D1                  		move.w	#$D1,d0			; spin sound ($E0 in s2)
00014130 4EB9 0000 1476             		jsr	(PlaySound_Special).l	; play spin sound
00014136 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00014138 117C 0001 0039             		move.b	#1,$39(a0)		; set Spin Dash flag
0001413E 317C 0000 003A             		move.w	#0,$3A(a0)		; set charge count to 0
00014144 0C28 000C 0028             		cmpi.b	#$C,$28(a0)		; ??? oxygen remaining?
0001414A 11FC 0002 D1DC             		move.b	#2,($FFFFD1DC).w	; Set the Spin Dash dust animation to $2.
00014150                            						; the smoke/dust object
00014150                            loc2_1AC84:
00014150 6100 FDAC                  		bsr.w	Sonic_LevelBound
00014154 6100 0000                  		bsr.w	Sonic_AnglePos
00014158                            
00014158                            locret2_1AC8C:
00014158 4E75                       		rts	
0001415A                            ; ---------------------------------------------------------------------------
0001415A                            
0001415A                            loc2_1AC8E:
0001415A 117C 001D 001C             		move.b	#$1D,$1C(a0)
00014160 1038 F602                  		move.b	($FFFFF602).w,d0	; read controller
00014164 0800 0001                  		btst	#1,d0			; check down button
00014168 6600 0000                  		bne.w	loc2_1AD30		; if set, branch
0001416C 117C 000E 0016             		move.b	#$E,$16(a0)		; $16(a0) is height/2
00014172 117C 0007 0017             		move.b	#7,$17(a0)		; $17(a0) is width/2
00014178 117C 0002 001C             		move.b	#2,$1C(a0)		; set animation to roll
0001417E 5A68 000C                  		addq.w	#5,$C(a0)		; $C(a0) is Y coordinate
00014182 117C 0000 0039             		move.b	#0,$39(a0)		; clear Spin Dash flag
00014188 7000                       		moveq	#0,d0
0001418A 1028 003A                  		move.b	$3A(a0),d0		; copy charge count
0001418E D040                       		add.w	d0,d0			; double it
00014190 317B 0000 0014             		move.w	Dash_Speeds(pc,d0.w),$14(a0) ; get normal speed
00014196 3028 0014                  		move.w	$14(a0),d0		; get inertia
0001419A 0440 0800                  		subi.w	#$800,d0		; subtract $800
0001419E D040                       		add.w	d0,d0			; double it
000141A0 0240 1F00                  		andi.w	#$1F00,d0		; mask it against $1F00
000141A4 4440                       		neg.w	d0			; negate it
000141A6 0640 2000                  		addi.w	#$2000,d0		; add $2000
000141AA 31C0 C904                  		move.w	d0,($FFFFC904).w	; move to $C904
000141AE 0828 0000 0022             		btst	#0,$22(a0)		; is sonic facing right?
000141B4 6700                       		beq.s	loc2_1ACF4		; if not, branch
000141B6 4468 0014                  		neg.w	$14(a0)			; negate inertia
000141BA                            ; ===========================================================================
000141BA                            jmp_loc2_1AD78:
000141BA 4EF9 0000 0000             	jmp loc2_1AD78
000141C0                            loc2_1ACF4:
000141C0 08E8 0002 0022             		bset	#2,$22(a0)		; set unused (in s1) flag
000141C6 11FC 0000 D1DC             		move.b	#0,($FFFFD1DC).w	; clear Spin Dash dust animation.
000141CC 303C 00BC                  		move.w	#$BC,d0			; spin release sound
000141D0 4EB9 0000 1476             		jsr	(PlaySound_Special).l	; play it!
000141D6 60E2                       		bra.s	jmp_loc2_1AD78
000141D8                            ; ===========================================================================
000141D8                            ;zafast:
000141D8                            ;		move.w	SuperDash_Speeds(pc,d0.w),$14(a0) ; get super speed
000141D8                            ;		move.w	$14(a0),d0		; get inertia
000141D8                            ;		subi.w	#$800,d0		; subtract $800
000141D8                            ;		add.w	d0,d0			; double it
000141D8                            ;		andi.w	#$1F00,d0		; mask it against $1F00
000141D8                            ;		neg.w	d0			; negate it
000141D8                            ;		addi.w	#$2000,d0		; add $2000
000141D8                            ;		move.w	d0,($FFFFC904).w	; move to $C904
000141D8                            ;		btst	#0,$22(a0)		; is sonic facing right?
000141D8                            ;		beq.s	loc2_1ACF4		; if not, branch
000141D8                            ;		neg.w	$14(a0)			; negate inertia
000141D8                            
000141D8                            ; ===========================================================================
000141D8                            Dash_Speeds:
000141D8 0800                       		dc.w  $800		; 0
000141DA 0880                       		dc.w  $880		; 1
000141DC 0900                       		dc.w  $900		; 2
000141DE 0980                       		dc.w  $980		; 3
000141E0 0A00                       		dc.w  $A00		; 4
000141E2 0A80                       		dc.w  $A80		; 5
000141E4 0B00                       		dc.w  $B00		; 6
000141E6 0B80                       		dc.w  $B80		; 7
000141E8 0C00                       		dc.w  $C00		; 8
000141EA                            ;SuperDash_Speeds:
000141EA                            ;		dc.w  $B00		; 0
000141EA                            ;		dc.w  $B80		; 1
000141EA                            ;		dc.w  $C00		; 2
000141EA                            ;		dc.w  $C80		; 3
000141EA                            ;		dc.w  $D00		; 4
000141EA                            ;		dc.w  $D80		; 5
000141EA                            ;		dc.w  $E00		; 6
000141EA                            ;		dc.w  $E80		; 7
000141EA                            ;		dc.w  $F00		; 8		
000141EA                            ; ===========================================================================
000141EA                            
000141EA                            loc2_1AD30:				; If still charging the dash...
000141EA 4A68 003A                  		tst.w	$3A(a0)		; check charge count
000141EE 6700                       		beq.s	loc2_1AD48	; if zero, branch
000141F0 3028 003A                  		move.w	$3A(a0),d0	; otherwise put it in d0
000141F4 EA48                       		lsr.w	#5,d0		; shift right 5 (divide it by 32)
000141F6 9168 003A                  		sub.w	d0,$3A(a0)	; subtract from charge count
000141FA 6400                       		bcc.s	loc2_1AD48	; ??? branch if carry clear
000141FC 317C 0000 003A             		move.w	#0,$3A(a0)	; set charge count to 0
00014202                            
00014202                            loc2_1AD48:
00014202 1038 F603                  		move.b	($FFFFF603).w,d0	; read controller
00014206 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C?
0001420A 6700 0000                  		beq.w	loc2_1AD78		; if not, branch
0001420E 317C 1D00 001C             		move.w	#$1D00,$1C(a0)		; reset spdsh animation
00014214 303C 00D1                  		move.w	#$D1,d0			; was $E0 in sonic 2
00014218 11FC 0002 D1DC             		move.b	#2,$FFFFD1DC.w	; Set the Spin Dash dust animation to $2.		
0001421E 4EB9 0000 1476             		jsr	(PlaySound_Special).l	; play charge sound
00014224 0668 0200 003A             		addi.w	#$200,$3A(a0)		; increase charge count
0001422A 0C68 0800 003A             		cmpi.w	#$800,$3A(a0)		; check if it's maxed
00014230 6500                       		bcs.s	loc2_1AD78		; if not, then branch
00014232 317C 0800 003A             		move.w	#$800,$3A(a0)		; reset it to max
00014238                            
00014238                            loc2_1AD78:
00014238 588F                       		addq.l	#4,sp			; increase stack ptr
0001423A 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00014240 6700                       		beq.s	loc2_1AD8C
00014242 6400                       		bcc.s	loc2_1AD88
00014244 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00014248                            
00014248                            loc2_1AD88:
00014248 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001424C                            
0001424C                            loc2_1AD8C:
0001424C 6100 FCB0                  		bsr.w	Sonic_LevelBound
00014250 6100 0000                  		bsr.w	Sonic_AnglePos
00014254                            		;move.w	#$60,($FFFFF73E).w	; reset looking up/down
00014254 4E75                       		rts
00014256                            ; End of subroutine Sonic_SpinDash
00014256                            
00014256                            SpinDash_dust:
00014256                            Sprite_1DD20:				; DATA XREF: ROM:0001600C?o
00014256 7000                       		moveq	#0,d0
00014258 1028 0024                  		move.b	$24(a0),d0
0001425C 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
00014260 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
00014264                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014264 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBA?o h+6DBC?o ...
00014266 0000                       		dc loc_1DD90-off_1DD2E; 1
00014268 0000                       		dc loc_1DE46-off_1DD2E; 2
0001426A 0000                       		dc loc_1DE4A-off_1DD2E; 3
0001426C                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001426C                            
0001426C                            loc_1DD36:				; DATA XREF: h+6DBA?o
0001426C 5428 0024                  		addq.b	#2,$24(a0)
00014270 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
00014278 0028 0004 0001             		or.b	#4,1(a0)
0001427E 117C 0001 0018             		move.b	#1,$18(a0)
00014284 117C 0010 0019             		move.b	#$10,$19(a0)
0001428A 317C 07A0 0002             		move	#$7A0,2(a0)
00014290 317C D000 003E             		move	#-$3000,$3E(a0)
00014296 317C F400 003C             		move	#$F400,$3C(a0)
0001429C B0FC D1C0                  		cmp	#-$2E40,a0
000142A0 6700                       		beq.s	loc_1DD8C
000142A2 117C 0001 0034             		move.b	#1,$34(a0)
000142A8                            ;		cmp	#2,($FFFFFF70).w
000142A8                            ;		beq.s	loc_1DD8C
000142A8                            ;		move	#$48C,2(a0)
000142A8                            ;		move	#-$4FC0,$3E(a0)
000142A8                            ;		move	#-$6E80,$3C(a0)
000142A8                            
000142A8                            loc_1DD8C:				; CODE XREF: h+6DF6?j h+6E04?j
000142A8                            ;		bsr.w	sub_16D6E
000142A8                            
000142A8                            loc_1DD90:				; DATA XREF: h+6DBA?o
000142A8 3468 003E                  		movea.w	$3E(a0),a2
000142AC 7000                       		moveq	#0,d0
000142AE 1028 001C                  		move.b	$1C(a0),d0
000142B2 D040                       		add	d0,d0
000142B4 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
000142B8 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
000142BC                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000142BC 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30?o h+6E32?o ...
000142BE 0000                       		dc loc_1DDAC-off_1DDA4; 1
000142C0 0000                       		dc loc_1DDCC-off_1DDA4; 2
000142C2 0000                       		dc loc_1DE20-off_1DDA4; 3
000142C4                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000142C4                            
000142C4                            loc_1DDAC:				; DATA XREF: h+6E30?o
000142C4 3178 F646 000C             		move	($FFFFF646).w,$C(a0)
000142CA 4A28 001D                  		tst.b	$1D(a0)
000142CE 6600                       		bne.s	loc_1DE28
000142D0 316A 0008 0008             		move	8(a2),8(a0)
000142D6 117C 0000 0022             		move.b	#0,$22(a0)
000142DC 0268 7FFF 0002             		and	#$7FFF,2(a0)
000142E2 6000                       		bra.s	loc_1DE28
000142E4                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000142E4                            
000142E4                            loc_1DDCC:				; DATA XREF: h+6E30?o
000142E4                            ;		cmp.b	#$C,$28(a2)
000142E4                            ;		bcs.s	loc_1DE3E
000142E4 0C2A 0004 0024             		cmp.b	#4,$24(a2)
000142EA 6400                       		bcc.s	loc_1DE3E
000142EC 4A2A 0039                  		tst.b	$39(a2)
000142F0 6700                       		beq.s	loc_1DE3E
000142F2 316A 0008 0008             		move	8(a2),8(a0)
000142F8 316A 000C 000C             		move	$C(a2),$C(a0)
000142FE 116A 0022 0022             		move.b	$22(a2),$22(a0)
00014304 0228 0001 0022             		and.b	#1,$22(a0)
0001430A 4A28 0034                  		tst.b	$34(a0)
0001430E 6700                       		beq.s	loc_1DE06
00014310 5968 000C                  		sub	#4,$C(a0)
00014314                            
00014314                            loc_1DE06:				; CODE XREF: h+6E8A?j
00014314 4A28 001D                  		tst.b	$1D(a0)
00014318 6600                       		bne.s	loc_1DE28
0001431A 0268 7FFF 0002             		and	#$7FFF,2(a0)
00014320 4A6A 0002                  		tst	2(a2)
00014324 6A00                       		bpl.s	loc_1DE28
00014326 0068 8000 0002             		or	#-$8000,2(a0)
0001432C                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001432C                            
0001432C                            loc_1DE20:				; DATA XREF: h+6E30?o
0001432C                            loc_1DE28:				; CODE XREF: h+6E42?j h+6E56?j ...
0001432C 43F9 0000 0000             		lea	(off_1DF38).l,a1
00014332 4EB9 0000 B218             		jsr	AnimateSprite
00014338 6100 0000                  		bsr.w	loc_1DEE4
0001433C 4EFA 9DC8                  		jmp	DisplaySprite
00014340                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014340                            
00014340                            loc_1DE3E:				; CODE XREF: h+6E5E?j h+6E66?j ...
00014340 117C 0000 001C             		move.b	#0,$1C(a0)
00014346 4E75                       		rts	
00014348                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014348                            
00014348                            loc_1DE46:				; DATA XREF: h+6DBA?o
00014348 6000 9DF8                  		bra.w	DeleteObject
0001434C                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001434C                            
0001434C                            
0001434C                            
0001434C                            loc_1DE4A:
0001434C 3468 003E                  	movea.w	$3E(a0),a2
00014350 7210                       	moveq	#$10,d1
00014352 0C2A 000D 001C             	cmp.b	#$D,$1C(a2)
00014358 6700                       	beq.s	loc_1DE64
0001435A 7206                       	moveq	#$6,d1
0001435C 0C2A 0003 0021             	cmp.b	#$3,$21(a2)
00014362 6700                       	beq.s	loc_1DE64
00014364 117C 0002 0024             	move.b	#2,$24(a0)
0001436A 117C 0000 0032             	move.b	#0,$32(a0)
00014370 4E75                       	rts
00014372                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014372                            
00014372                            loc_1DE64:				; CODE XREF: h+6EE0?j
00014372 5328 0032                  		subq.b	#1,$32(a0)
00014376 6A00                       		bpl.s	loc_1DEE0
00014378 117C 0003 0032             		move.b	#3,$32(a0)
0001437E 4EBA A21C                  		jsr	SingleObjLoad
00014382 6600                       		bne.s	loc_1DEE0
00014384 1290                       		move.b	0(a0),0(a1)
00014386 336A 0008 0008             		move	8(a2),8(a1)
0001438C 336A 000C 000C             		move	$C(a2),$C(a1)
00014392 4A28 0034                  		tst.b	$34(a0)
00014396 6700                       		beq.s	loc_1DE9A
00014398 5941                       		sub	#4,d1
0001439A                            
0001439A                            loc_1DE9A:				; CODE XREF: h+6F1E?j
0001439A D369 000C                  		add	d1,$C(a1)
0001439E 137C 0000 0022             		move.b	#0,$22(a1)
000143A4 137C 0003 001C             		move.b	#3,$1C(a1)
000143AA 5429 0024                  		addq.b	#2,$24(a1)
000143AE 2368 0004 0004             		move.l	4(a0),4(a1)
000143B4 1368 0001 0001             		move.b	1(a0),1(a1)
000143BA 137C 0001 0018             		move.b	#1,$18(a1)
000143C0 137C 0004 0019             		move.b	#4,$19(a1)
000143C6 3368 0002 0002             		move	2(a0),2(a1)
000143CC 3368 003E 003E             		move	$3E(a0),$3E(a1)
000143D2 0269 7FFF 0002             		and	#$7FFF,2(a1)
000143D8 4A6A 0002                  		tst	2(a2)
000143DC 6A00                       		bpl.s	loc_1DEE0
000143DE 0069 8000 0002             		or	#-$8000,2(a1)
000143E4                            
000143E4                            loc_1DEE0:				; CODE XREF: h+6EF4?j h+6F00?j ...
000143E4 6100                       		bsr.s	loc_1DEE4
000143E6 4E75                       		rts	
000143E8                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000143E8                            
000143E8                            loc_1DEE4:				; CODE XREF: h+6EC0?p h+6F6C?p
000143E8 7000                       		moveq	#0,d0
000143EA 1028 001A                  		move.b	$1A(a0),d0
000143EE B028 0030                  		cmp.b	$30(a0),d0
000143F2 6700 0000                  		beq.w	locret_1DF36
000143F6 1140 0030                  		move.b	d0,$30(a0)
000143FA 45F9 0000 0000             		lea	(off_1E074).l,a2
00014400 D040                       		add	d0,d0
00014402 D4F2 0000                  		add	(a2,d0.w),a2
00014406 3A1A                       		move	(a2)+,d5
00014408 5345                       		subq	#1,d5
0001440A 6B00 0000                  		bmi.w	locret_1DF36
0001440E 3828 003C                  		move $3C(a0),d4
00014412                            
00014412                            loc_1DF0A:				; CODE XREF: h+6FBE?j
00014412 7200                       		moveq	#0,d1
00014414 321A                       		move	(a2)+,d1
00014416 3601                       		move	d1,d3
00014418 E04B                       		lsr.w	#8,d3
0001441A 0243 00F0                  		and	#$F0,d3	; 'ð'
0001441E 0643 0010                  		add	#$10,d3
00014422 0241 0FFF                  		and	#$FFF,d1
00014426 EB89                       		lsl.l	#5,d1
00014428 0681 0000 0000             		add.l	#Art_Dust,d1
0001442E 3404                       		move	d4,d2
00014430 D843                       		add	d3,d4
00014432 D843                       		add	d3,d4
00014434 4EB9 0000 151A             		jsr	(QueueDMATransfer).l
0001443A 51CD FFD6                  		dbf	d5,loc_1DF0A
0001443E 4E75                           rts
00014440                            
00014440                            locret_1DF36:				; CODE XREF: h+6F7A?j h+6F90?j
00014440 4E75                       		rts	
00014442                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014442 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4?o h+6FC4?o ...
00014444 0000                       		dc byte_1DF43-off_1DF38; 1
00014446 0000                       		dc byte_1DF4F-off_1DF38; 2
00014448 0000                       		dc byte_1DF58-off_1DF38; 3
0001444A 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4?o
0001444D 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4?o
00014459 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4?o
00014462 0311 1213 14FC             byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC; 0	; DATA XREF: h+6FC4?o
00014468                            
00014468                            return_1ABA4:
00014468 4E75                       	rts
0001446A                            Sonic_CheckGoSuper:
0001446A                            	include "_inc\SuperSonic.asm"
0001446A                            ; ---------------------------------------------------------------------------
0001446A                            ; Subroutine called at the peak of a jump that transforms Sonic into Super Sonic
0001446A                            ; if he has enough rings and emeralds
0001446A                            ; ---------------------------------------------------------------------------
0001446A                            
0001446A                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0001446A                            ; loc_1AB38: test_set_SS:
0001446A 4A38 FE19                  	tst.b	(Super_Sonic_flag).w	; is Sonic already Super?
0001446E 66F8                       	bne.s	return_1ABA4		; if yes, branch
00014470                            ;	cmpi.b	#6,(Emerald_count).w	; does Sonic have exactly 7 emeralds?
00014470                            ;	bne.s	return_1ABA4		; if not, branch
00014470 0C78 0032 FE20             	cmpi.w	#50,(Ring_count).w	; does Sonic have at least 50 rings?
00014476 65F0                       	bcs.s	return_1ABA4		; if not, branch
00014478                            
00014478 11FC 0001 F65F             	move.b	#1,(Super_Sonic_palette).w
0001447E 11FC 000F F65E             	move.b	#$F,(Palette_frame_count).w
00014484 11FC 0001 FE19             	move.b	#1,(Super_Sonic_flag).w
0001448A 117C 0081 002A             	move.b	#$81,obj_control(a0)
00014490 117C 001F 001C             	move.b	#$1F,anim(a0)			; use transformation animation
00014496                            ;	move.b	#$7E,(Object_RAM+$2040).w	; Obj7E is the ending sonic which is why it's commented out
00014496 31FC 0A00 F760             	move.w	#$A00,(Sonic_top_speed).w
0001449C 31FC 0030 F762             	move.w	#$30,(Sonic_acceleration).w
000144A2 31FC 0100 F764             	move.w	#$100,(Sonic_deceleration).w
000144A8 317C 0000 0032             	move.w	#0,invincibility_time(a0)
000144AE 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
000144B4 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
000144BA 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
000144C0 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
000144C6 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
000144CC 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
000144D2 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
000144D8 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w	
000144DE 303C 00C3                          move.w	#$C3,d0         ; 
000144E2 4EB9 0000 1470             	jsr	(PlaySound).l	; Play special ring sound effect.
000144E8 303C 009F                  	move.w	#$9F,d0         
000144EC 4EF9 0000 1476             	jmp	(PlaySound_Special).l	; load the invincibility song and return also playmusic doesn't exist
000144F2                            
000144F2                            ; End of subroutine Sonic_CheckGoSuper
000144F2                            
000144F2                            ; ---------------------------------------------------------------------------
000144F2                            ; Subroutine doing the extra logic for Super Sonic
000144F2                            ; ---------------------------------------------------------------------------
000144F2                            
000144F2                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000144F2                            rts:
000144F2 4E75                       	rts
000144F4                            ; loc_1ABA6:
000144F4                            Sonic_Super:
000144F4 4A38 FE19                  	tst.b	(Super_Sonic_flag).w	; Ignore all this code if not Super Sonic
000144F8 6700 0000                  	beq.w	return_1AC3C
000144FC 4A38 FE1E                  	tst.b	(Update_HUD_timer).w
00014500 6700                       	beq.s	Sonic_RevertToNormal ; ?
00014502 5378 F670                  	subq.w	#1,(Super_Sonic_frame_count).w
00014506 6A00 0000                  	bpl.w	return_1AC3C
0001450A 31FC 003C F670             	move.w	#60,(Super_Sonic_frame_count).w	; Reset frame counter to 60
00014510 4A78 FE20                  	tst.w	(Ring_count).w
00014514 6700                       	beq.s	Sonic_RevertToNormal
00014516 0038 0001 FE1D             	ori.b	#1,(Update_HUD_rings).w
0001451C 0C78 0001 FE20             	cmpi.w	#1,(Ring_count).w
00014522 6700                       	beq.s	@update
00014524 0C78 000A FE20             	cmpi.w	#10,(Ring_count).w
0001452A 6700                       	beq.s	@update
0001452C 0C78 0064 FE20             	cmpi.w	#100,(Ring_count).w
00014532 6600                       	bne.s	@update2
00014534                            @update
00014534 0038 0080 FE1D             	ori.b	#$80,(Update_HUD_rings).w
0001453A                            @update2
0001453A 5378 FE20                  	subq.w	#1,(Ring_count).w
0001453E 66B2                       	bne.s	rts
00014540                            ; loc_1ABF2:
00014540                            Sonic_RevertToNormal:
00014540 11FC 0002 F65F             	move.b	#2,(Super_Sonic_palette).w	; Remove rotating palette
00014546 31FC 0028 F65C             	move.w	#$28,($FFFFF65C).w	; Unknown
0001454C 11FC 0000 FE19             	move.b	#0,(Super_Sonic_flag).w
00014552 117C 0001 001D             	move.b	#1,next_anim(a0)	; Change animation back to normal ?
00014558 317C 0001 0032             	move.w	#1,invincibility_time(a0)	; Remove invincibility
0001455E 31FC 0600 F760             	move.w	#$600,(Sonic_top_speed).w
00014564 31FC 000C F762             	move.w	#$C,(Sonic_acceleration).w
0001456A 31FC 0080 F764             	move.w	#$80,(Sonic_deceleration).w
00014570 0828 0006 0022             	btst	#6,status(a0)	; Check if underwater, return if not
00014576 6700                       	beq.s	return_1AC3C
00014578 31FC 0300 F760             	move.w	#$300,(Sonic_top_speed).w
0001457E 31FC 0006 F762             	move.w	#6,(Sonic_acceleration).w
00014584 31FC 0040 F764             	move.w	#$40,(Sonic_deceleration).w
0001458A                            
0001458A                            return_1AC3C:
0001458A 4E75                       	rts
0001458C                            ; End of subroutine Sonic_Super
0001458C                            ; End of subroutine Sonic_Super
0001458C                            ; -------------------------------------------------------------------------------
0001458C                            ; Unknown Sprite Mappings
0001458C                            ; -------------------------------------------------------------------------------
0001458C                            MapUnc_1DF5E:
0001458C 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
0001458E 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
00014590 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
00014592 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
00014594 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
00014596 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
00014598 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
0001459A 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
0001459C 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
0001459E 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
000145A0 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
000145A2 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
000145A4 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
000145A6 0000                       	dc word_1E004-MapUnc_1DF5E; 13
000145A8 0000                       	dc word_1E016-MapUnc_1DF5E; 14
000145AA 0000                       	dc word_1E028-MapUnc_1DF5E; 15
000145AC 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
000145AE 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
000145B0 0000                       	dc word_1E056-MapUnc_1DF5E; 18
000145B2 0000                       	dc word_1E060-MapUnc_1DF5E; 19
000145B4 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
000145B6 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
000145B8 00                         word_1DF8A:	dc.b 0
000145B9 01                         word_1DF8C:	dc.b 1
000145BA F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000145BF 01                         word_1DF96:	dc.b 1
000145C0 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000145C5 01                         word_1DFA0:	dc.b 1
000145C6 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000145CB 01                         word_1DFAA:	dc.b 1
000145CC E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000145D1 01                         word_1DFB4:	dc.b 1
000145D2 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000145D7 01                         word_1DFBE:	dc.b 1
000145D8 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000145DD 01                         word_1DFC8:	dc.b 1
000145DE F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000145E3 01                         word_1DFD2:	dc.b 1
000145E4 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000145E9 01                         word_1DFDC:	dc.b 1
000145EA F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000145EF 01                         word_1DFE6:	dc.b 1
000145F0 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
000145F5 01                         word_1DFF0:	dc.b 1
000145F6 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
000145FB 01                         word_1DFFA:	dc.b 1
000145FC 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00014601 02                         word_1E004:	dc.b 2
00014602 F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
00014607 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
0001460C 02                         word_1E016:	dc.b 2
0001460D F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
00014612 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
00014617 02                         word_1E028:	dc.b 2
00014618 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
0001461D 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00014622 02                         word_1E03A:	dc.b 2
00014623 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00014628 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
0001462D 01                         word_1E04C:	dc.b 1
0001462E F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
00014633 01                         word_1E056:	dc.b 1
00014634 F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
00014639 01                         word_1E060:	dc.b 1
0001463A F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
0001463F 01                         word_1E06A:	dc.b 1
00014640 F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
00014645 00                         	dc.b 0
00014646 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
00014648 0000                       	dc word_1E0A2-off_1E074; 1
0001464A 0000                       	dc word_1E0A6-off_1E074; 2
0001464C 0000                       	dc word_1E0AA-off_1E074; 3
0001464E 0000                       	dc word_1E0AE-off_1E074; 4
00014650 0000                       	dc word_1E0B2-off_1E074; 5
00014652 0000                       	dc word_1E0B6-off_1E074; 6
00014654 0000                       	dc word_1E0BA-off_1E074; 7
00014656 0000                       	dc word_1E0BE-off_1E074; 8
00014658 0000                       	dc word_1E0C2-off_1E074; 9
0001465A 0000                       	dc word_1E0C6-off_1E074; 10
0001465C 0000                       	dc word_1E0CA-off_1E074; 11
0001465E 0000                       	dc word_1E0CE-off_1E074; 12
00014660 0000                       	dc word_1E0D2-off_1E074; 13
00014662 0000                       	dc word_1E0D8-off_1E074; 14
00014664 0000                       	dc word_1E0DE-off_1E074; 15
00014666 0000                       	dc word_1E0E4-off_1E074; 16
00014668 0000                       	dc word_1E0EA-off_1E074; 17
0001466A 0000                       	dc word_1E0EA-off_1E074; 18
0001466C 0000                       	dc word_1E0EA-off_1E074; 19
0001466E 0000                       	dc word_1E0EA-off_1E074; 20
00014670 0000                       	dc word_1E0EC-off_1E074; 21
00014672 0000                       word_1E0A0:	dc 0
00014674 0001                       word_1E0A2:	dc 1
00014676 7000                       	dc $7000
00014678 0001                       word_1E0A6:	dc 1
0001467A F008                       	dc $F008
0001467C 0001                       word_1E0AA:	dc 1
0001467E F018                       	dc $F018
00014680 0001                       word_1E0AE:	dc 1
00014682 F028                       	dc $F028
00014684 0001                       word_1E0B2:	dc 1
00014686 F038                       	dc $F038
00014688 0001                       word_1E0B6:	dc 1
0001468A F048                       	dc $F048
0001468C 0001                       word_1E0BA:	dc 1
0001468E 7058                       	dc $7058
00014690 0001                       word_1E0BE:	dc 1
00014692 7060                       	dc $7060
00014694 0001                       word_1E0C2:	dc 1
00014696 7068                       	dc $7068
00014698 0001                       word_1E0C6:	dc 1
0001469A 7070                       	dc $7070
0001469C 0001                       word_1E0CA:	dc 1
0001469E 7078                       	dc $7078
000146A0 0001                       word_1E0CE:	dc 1
000146A2 7080                       	dc $7080
000146A4 0002                       word_1E0D2:	dc 2
000146A6 1088                       	dc $1088
000146A8 708A                       	dc $708A
000146AA 0002                       word_1E0D8:	dc 2
000146AC 3092                       	dc $3092
000146AE 7096                       	dc $7096
000146B0 0002                       word_1E0DE:	dc 2
000146B2 509E                       	dc $509E
000146B4 70A4                       	dc $70A4
000146B6 0002                       word_1E0E4:	dc 2
000146B8 50AC                       	dc $50AC
000146BA 70B2                       	dc $70B2
000146BC 0000                       word_1E0EA:	dc 0
000146BE 0001                       word_1E0EC:	dc 1
000146C0 F0BA                       	dc $F0BA
000146C2                            	even
000146C2                            
000146C2                            ; ---------------------------------------------------------------------------
000146C2                            ; Subroutine to	slow Sonic walking up a	slope
000146C2                            ; ---------------------------------------------------------------------------
000146C2                            
000146C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000146C2                            
000146C2                            
000146C2                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
000146C2 1028 0026                  		move.b	$26(a0),d0
000146C6 0600 0060                  		addi.b	#$60,d0
000146CA 0C00 00C0                  		cmpi.b	#$C0,d0
000146CE 6400                       		bcc.s	locret_13508
000146D0 1028 0026                  		move.b	$26(a0),d0
000146D4 4EB9 0000 33D4             		jsr	(CalcSine).l
000146DA C1FC 0020                  		muls.w	#$20,d0
000146DE E080                       		asr.l	#8,d0
000146E0 4A68 0014                  		tst.w	$14(a0)
000146E4 6700                       		beq.s	locret_13508
000146E6 6B00                       		bmi.s	loc_13504
000146E8 4A40                       		tst.w	d0
000146EA 6700                       		beq.s	locret_13502
000146EC D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
000146F0                            
000146F0                            locret_13502:
000146F0 4E75                       		rts	
000146F2                            ; ===========================================================================
000146F2                            
000146F2                            loc_13504:
000146F2 D168 0014                  		add.w	d0,$14(a0)
000146F6                            
000146F6                            locret_13508:
000146F6 4E75                       		rts	
000146F8                            ; End of function Sonic_SlopeResist
000146F8                            
000146F8                            ; ---------------------------------------------------------------------------
000146F8                            ; Subroutine to	push Sonic down	a slope	while he's rolling
000146F8                            ; ---------------------------------------------------------------------------
000146F8                            
000146F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000146F8                            
000146F8                            
000146F8                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
000146F8 1028 0026                  		move.b	$26(a0),d0
000146FC 0600 0060                  		addi.b	#$60,d0
00014700 0C00 00C0                  		cmpi.b	#-$40,d0
00014704 6400                       		bcc.s	locret_13544
00014706 1028 0026                  		move.b	$26(a0),d0
0001470A 4EB9 0000 33D4             		jsr	(CalcSine).l
00014710 C1FC 0050                  		muls.w	#$50,d0
00014714 E080                       		asr.l	#8,d0
00014716 4A68 0014                  		tst.w	$14(a0)
0001471A 6B00                       		bmi.s	loc_1353A
0001471C 4A40                       		tst.w	d0
0001471E 6A00                       		bpl.s	loc_13534
00014720 E480                       		asr.l	#2,d0
00014722                            
00014722                            loc_13534:
00014722 D168 0014                  		add.w	d0,$14(a0)
00014726 4E75                       		rts	
00014728                            ; ===========================================================================
00014728                            
00014728                            loc_1353A:
00014728 4A40                       		tst.w	d0
0001472A 6B00                       		bmi.s	loc_13540
0001472C E480                       		asr.l	#2,d0
0001472E                            
0001472E                            loc_13540:
0001472E D168 0014                  		add.w	d0,$14(a0)
00014732                            
00014732                            locret_13544:
00014732 4E75                       		rts	
00014734                            ; End of function Sonic_RollRepel
00014734                            
00014734                            ; ---------------------------------------------------------------------------
00014734                            ; Subroutine to	push Sonic down	a slope
00014734                            ; ---------------------------------------------------------------------------
00014734                            
00014734                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014734                            
00014734                            
00014734                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00014734 4E71                       		nop	
00014736 4A28 0038                  		tst.b	$38(a0)
0001473A 6600                       		bne.s	locret_13580
0001473C 4A68 003E                  		tst.w	$3E(a0)
00014740 6600                       		bne.s	loc_13582
00014742 1028 0026                  		move.b	$26(a0),d0
00014746 0600 0020                  		addi.b	#$20,d0
0001474A 0200 00C0                  		andi.b	#$C0,d0
0001474E 6700                       		beq.s	locret_13580
00014750 3028 0014                  		move.w	$14(a0),d0
00014754 6A00                       		bpl.s	loc_1356A
00014756 4440                       		neg.w	d0
00014758                            
00014758                            loc_1356A:
00014758 0C40 0280                  		cmpi.w	#$280,d0
0001475C 6400                       		bcc.s	locret_13580
0001475E 4268 0014                  		clr.w	$14(a0)
00014762 08E8 0001 0022             		bset	#1,$22(a0)
00014768 317C 001E 003E             		move.w	#$1E,$3E(a0)
0001476E                            
0001476E                            locret_13580:
0001476E 4E75                       		rts	
00014770                            ; ===========================================================================
00014770                            
00014770                            loc_13582:
00014770 5368 003E                  		subq.w	#1,$3E(a0)
00014774 4E75                       		rts	
00014776                            ; End of function Sonic_SlopeRepel
00014776                            
00014776                            ; ---------------------------------------------------------------------------
00014776                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00014776                            ; ---------------------------------------------------------------------------
00014776                            
00014776                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014776                            
00014776                            
00014776                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00014776 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
0001477A 6700                       		beq.s	locret_135A2	; if already 0,	branch
0001477C 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
0001477E                            
0001477E 5400                       		addq.b	#2,d0		; increase angle
00014780 6400                       		bcc.s	loc_13596
00014782 7000                       		moveq	#0,d0
00014784                            
00014784                            loc_13596:
00014784 6000                       		bra.s	loc_1359E
00014786                            ; ===========================================================================
00014786                            
00014786                            loc_13598:
00014786 5500                       		subq.b	#2,d0		; decrease angle
00014788 6400                       		bcc.s	loc_1359E
0001478A 7000                       		moveq	#0,d0
0001478C                            
0001478C                            loc_1359E:
0001478C 1140 0026                  		move.b	d0,$26(a0)
00014790                            
00014790                            locret_135A2:
00014790 4E75                       		rts	
00014792                            ; End of function Sonic_JumpAngle
00014792                            
00014792                            ; ---------------------------------------------------------------------------
00014792                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00014792                            ; ---------------------------------------------------------------------------
00014792                            
00014792                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014792                            
00014792                            
00014792                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00014792 3228 0010                  		move.w	$10(a0),d1
00014796 3428 0012                  		move.w	$12(a0),d2
0001479A 4EB9 0000 36A2             		jsr	(CalcAngle).l
000147A0 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
000147A4 0400 0020                  		subi.b	#$20,d0
000147A8 11C0 FFED                  		move.b	d0,($FFFFFFED).w
000147AC 0200 00C0                  		andi.b	#$C0,d0
000147B0 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
000147B4 0C00 0040                  		cmpi.b	#$40,d0
000147B8 6700 0000                  		beq.w	loc_13680
000147BC 0C00 0080                  		cmpi.b	#$80,d0
000147C0 6700 0000                  		beq.w	loc_136E2
000147C4 0C00 00C0                  		cmpi.b	#-$40,d0
000147C8 6700 0000                  		beq.w	loc_1373E
000147CC 6100 0000                  		bsr.w	Sonic_HitWall
000147D0 4A41                       		tst.w	d1
000147D2 6A00                       		bpl.s	loc_135F0
000147D4 9368 0008                  		sub.w	d1,8(a0)
000147D8 317C 0000 0010             		move.w	#0,$10(a0)
000147DE                            
000147DE                            loc_135F0:
000147DE 6100 0000                  		bsr.w	sub_14EB4
000147E2 4A41                       		tst.w	d1
000147E4 6A00                       		bpl.s	loc_13602
000147E6 D368 0008                  		add.w	d1,8(a0)
000147EA 317C 0000 0010             		move.w	#0,$10(a0)
000147F0                            
000147F0                            loc_13602:
000147F0 6100 0000                  		bsr.w	Sonic_HitFloor
000147F4 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
000147F8 4A41                       		tst.w	d1
000147FA 6A00                       		bpl.s	locret_1367E
000147FC 1428 0012                  		move.b	$12(a0),d2
00014800 5002                       		addq.b	#8,d2
00014802 4402                       		neg.b	d2
00014804 B202                       		cmp.b	d2,d1
00014806 6C00                       		bge.s	loc_1361E
00014808 B002                       		cmp.b	d2,d0
0001480A 6D00                       		blt.s	locret_1367E
0001480C                            
0001480C                            loc_1361E:
0001480C D368 000C                  		add.w	d1,$C(a0)
00014810 1143 0026                  		move.b	d3,$26(a0)
00014814 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014818 117C 0000 001C             		move.b	#0,$1C(a0)
0001481E 1003                       		move.b	d3,d0
00014820 0600 0020                  		addi.b	#$20,d0
00014824 0200 0040                  		andi.b	#$40,d0
00014828 6600                       		bne.s	loc_1365C
0001482A 1003                       		move.b	d3,d0
0001482C 0600 0010                  		addi.b	#$10,d0
00014830 0200 0020                  		andi.b	#$20,d0
00014834 6700                       		beq.s	loc_1364E
00014836 E0E8 0012                  		asr	$12(a0)
0001483A 6000                       		bra.s	loc_13670
0001483C                            ; ===========================================================================
0001483C                            
0001483C                            loc_1364E:
0001483C 317C 0000 0012             		move.w	#0,$12(a0)
00014842 3168 0010 0014             		move.w	$10(a0),$14(a0)
00014848 4E75                       		rts	
0001484A                            ; ===========================================================================
0001484A                            
0001484A                            loc_1365C:
0001484A 317C 0000 0010             		move.w	#0,$10(a0)
00014850 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00014856 6F00                       		ble.s	loc_13670
00014858 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
0001485E                            
0001485E                            loc_13670:
0001485E 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014864 4A03                       		tst.b	d3
00014866 6A00                       		bpl.s	locret_1367E
00014868 4468 0014                  		neg.w	$14(a0)
0001486C                            
0001486C                            locret_1367E:
0001486C 4E75                       		rts	
0001486E                            ; ===========================================================================
0001486E                            
0001486E                            loc_13680:
0001486E 6100 0000                  		bsr.w	Sonic_HitWall
00014872 4A41                       		tst.w	d1
00014874 6A00                       		bpl.s	loc_1369A
00014876 9368 0008                  		sub.w	d1,8(a0)
0001487A 317C 0000 0010             		move.w	#0,$10(a0)
00014880 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014886 4E75                       		rts	
00014888                            ; ===========================================================================
00014888                            
00014888                            loc_1369A:
00014888 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001488C 4A41                       		tst.w	d1
0001488E 6A00                       		bpl.s	loc_136B4
00014890 9368 000C                  		sub.w	d1,$C(a0)
00014894 4A68 0012                  		tst.w	$12(a0)
00014898 6A00                       		bpl.s	locret_136B2
0001489A 317C 0000 0012             		move.w	#0,$12(a0)
000148A0                            
000148A0                            locret_136B2:
000148A0 4E75                       		rts	
000148A2                            ; ===========================================================================
000148A2                            
000148A2                            loc_136B4:
000148A2 4A68 0012                  		tst.w	$12(a0)
000148A6 6B00                       		bmi.s	locret_136E0
000148A8 6100 0000                  		bsr.w	Sonic_HitFloor
000148AC 4A41                       		tst.w	d1
000148AE 6A00                       		bpl.s	locret_136E0
000148B0 D368 000C                  		add.w	d1,$C(a0)
000148B4 1143 0026                  		move.b	d3,$26(a0)
000148B8 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000148BC 117C 0000 001C             		move.b	#0,$1C(a0)
000148C2 317C 0000 0012             		move.w	#0,$12(a0)
000148C8 3168 0010 0014             		move.w	$10(a0),$14(a0)
000148CE                            
000148CE                            locret_136E0:
000148CE 4E75                       		rts	
000148D0                            ; ===========================================================================
000148D0                            
000148D0                            loc_136E2:
000148D0 6100 0000                  		bsr.w	Sonic_HitWall
000148D4 4A41                       		tst.w	d1
000148D6 6A00                       		bpl.s	loc_136F4
000148D8 9368 0008                  		sub.w	d1,8(a0)
000148DC 317C 0000 0010             		move.w	#0,$10(a0)
000148E2                            
000148E2                            loc_136F4:
000148E2 6100 0000                  		bsr.w	sub_14EB4
000148E6 4A41                       		tst.w	d1
000148E8 6A00                       		bpl.s	loc_13706
000148EA D368 0008                  		add.w	d1,8(a0)
000148EE 317C 0000 0010             		move.w	#0,$10(a0)
000148F4                            
000148F4                            loc_13706:
000148F4 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000148F8 4A41                       		tst.w	d1
000148FA 6A00                       		bpl.s	locret_1373C
000148FC 9368 000C                  		sub.w	d1,$C(a0)
00014900 1003                       		move.b	d3,d0
00014902 0600 0020                  		addi.b	#$20,d0
00014906 0200 0040                  		andi.b	#$40,d0
0001490A 6600                       		bne.s	loc_13726
0001490C 317C 0000 0012             		move.w	#0,$12(a0)
00014912 4E75                       		rts	
00014914                            ; ===========================================================================
00014914                            
00014914                            loc_13726:
00014914 1143 0026                  		move.b	d3,$26(a0)
00014918 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001491C 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014922 4A03                       		tst.b	d3
00014924 6A00                       		bpl.s	locret_1373C
00014926 4468 0014                  		neg.w	$14(a0)
0001492A                            
0001492A                            locret_1373C:
0001492A 4E75                       		rts	
0001492C                            ; ===========================================================================
0001492C                            
0001492C                            loc_1373E:
0001492C 6100 0000                  		bsr.w	sub_14EB4
00014930 4A41                       		tst.w	d1
00014932 6A00                       		bpl.s	loc_13758
00014934 D368 0008                  		add.w	d1,8(a0)
00014938 317C 0000 0010             		move.w	#0,$10(a0)
0001493E 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014944 4E75                       		rts	
00014946                            ; ===========================================================================
00014946                            
00014946                            loc_13758:
00014946 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001494A 4A41                       		tst.w	d1
0001494C 6A00                       		bpl.s	loc_13772
0001494E 9368 000C                  		sub.w	d1,$C(a0)
00014952 4A68 0012                  		tst.w	$12(a0)
00014956 6A00                       		bpl.s	locret_13770
00014958 317C 0000 0012             		move.w	#0,$12(a0)
0001495E                            
0001495E                            locret_13770:
0001495E 4E75                       		rts	
00014960                            ; ===========================================================================
00014960                            
00014960                            loc_13772:
00014960 4A68 0012                  		tst.w	$12(a0)
00014964 6B00                       		bmi.s	locret_1379E
00014966 6100 0000                  		bsr.w	Sonic_HitFloor
0001496A 4A41                       		tst.w	d1
0001496C 6A00                       		bpl.s	locret_1379E
0001496E D368 000C                  		add.w	d1,$C(a0)
00014972 1143 0026                  		move.b	d3,$26(a0)
00014976 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001497A 117C 0000 001C             		move.b	#0,$1C(a0)
00014980 317C 0000 0012             		move.w	#0,$12(a0)
00014986 3168 0010 0014             		move.w	$10(a0),$14(a0)
0001498C                            
0001498C                            locret_1379E:
0001498C 4E75                       		rts	
0001498E                            ; End of function Sonic_Floor
0001498E                            
0001498E                            ; ---------------------------------------------------------------------------
0001498E                            ; Subroutine to	reset Sonic's mode when he lands on the floor
0001498E                            ; ---------------------------------------------------------------------------
0001498E                            
0001498E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001498E                            
0001498E                            
0001498E                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
0001498E 0828 0004 0022             		btst	#4,$22(a0)
00014994 6700                       		beq.s	loc_137AE
00014996 4E71                       		nop	
00014998 4E71                       		nop	
0001499A 4E71                       		nop	
0001499C                            
0001499C                            loc_137AE:
0001499C 08A8 0005 0022             		bclr	#5,$22(a0)
000149A2 08A8 0001 0022             		bclr	#1,$22(a0)
000149A8 08A8 0004 0022             		bclr	#4,$22(a0)
000149AE 0828 0002 0022             		btst	#2,$22(a0)
000149B4 6700                       		beq.s	loc_137E4
000149B6 08A8 0002 0022             		bclr	#2,$22(a0)
000149BC 117C 0013 0016             		move.b	#$13,$16(a0)
000149C2 117C 0009 0017             		move.b	#9,$17(a0)
000149C8 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
000149CE 5B68 000C                  		subq.w	#5,$C(a0)
000149D2                            
000149D2                            loc_137E4:
000149D2 117C 0000 003C             		move.b	#0,$3C(a0)
000149D8 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
000149DE 4E75                       		rts	
000149E0                            ; End of function Sonic_ResetOnFloor
000149E0                            
000149E0                            ; ===========================================================================
000149E0                            ; ---------------------------------------------------------------------------
000149E0                            ; Sonic	when he	gets hurt
000149E0                            ; ---------------------------------------------------------------------------
000149E0                            
000149E0                            Obj01_Hurt:				; XREF: Obj01_Index
000149E0 4EBA 96FE                  		jsr	SpeedToPos
000149E4 0668 0030 0012             		addi.w	#$30,$12(a0)
000149EA 0828 0006 0022             		btst	#6,$22(a0)
000149F0 6700                       		beq.s	loc_1380C
000149F2 0468 0020 0012             		subi.w	#$20,$12(a0)
000149F8                            
000149F8                            loc_1380C:
000149F8 6100 0000                  		bsr.w	Sonic_HurtStop
000149FC 6100 F500                  		bsr.w	Sonic_LevelBound
00014A00 6100 EEC6                  		bsr.w	Sonic_RecordPos
00014A04 6100 EEDC                  		bsr.w	Sonic_Water		
00014A08 6100 0000                  		bsr.w	Sonic_Animate
00014A0C 6100 0000                  		bsr.w	LoadSonicDynPLC
00014A10 4EFA 96F4                  		jmp	DisplaySprite
00014A14                            
00014A14                            ; ---------------------------------------------------------------------------
00014A14                            ; Subroutine to	stop Sonic falling after he's been hurt
00014A14                            ; ---------------------------------------------------------------------------
00014A14                            
00014A14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014A14                            
00014A14                            
00014A14                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00014A14 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014A18 0640 00E0                  		addi.w	#$E0,d0
00014A1C B068 000C                  		cmp.w	$C(a0),d0
00014A20 6500 F51E                  		bcs.w	Jmp_KillSonic
00014A24 6100 FD6C                  		bsr.w	Sonic_Floor
00014A28 0828 0001 0022             		btst	#1,$22(a0)
00014A2E 6600                       		bne.s	locret_13860
00014A30 7000                       		moveq	#0,d0
00014A32 3140 0012                  		move.w	d0,$12(a0)
00014A36 3140 0010                  		move.w	d0,$10(a0)
00014A3A 3140 0014                  		move.w	d0,$14(a0)
00014A3E 117C 0000 001C             		move.b	#0,$1C(a0)
00014A44 5528 0024                  		subq.b	#2,$24(a0)
00014A48 317C 0078 0030             		move.w	#$78,$30(a0)
00014A4E                            
00014A4E                            locret_13860:
00014A4E 4E75                       		rts	
00014A50                            ; End of function Sonic_HurtStop
00014A50                            
00014A50                            ; ===========================================================================
00014A50                            ; ---------------------------------------------------------------------------
00014A50                            ; Sonic	when he	dies
00014A50                            ; ---------------------------------------------------------------------------
00014A50                            
00014A50                            Obj01_Death:				; XREF: Obj01_Index
00014A50 6100 0000                  		bsr.w	GameOver
00014A54 4EBA 965E                  		jsr	ObjectFall
00014A58 6100 EE6E                  		bsr.w	Sonic_RecordPos
00014A5C 6100 0000                  		bsr.w	Sonic_Animate
00014A60 6100 0000                  		bsr.w	LoadSonicDynPLC
00014A64 4EFA 96A0                  		jmp	DisplaySprite
00014A68                            
00014A68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014A68                            
00014A68                            
00014A68                            GameOver:				; XREF: Obj01_Death
00014A68 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014A6C 0640 0100                  		addi.w	#$100,d0
00014A70 B068 000C                  		cmp.w	$C(a0),d0
00014A74 6C00 0000                  		bge.w	locret_13900
00014A78 317C FFC8 0012             		move.w	#-$38,$12(a0)
00014A7E 5428 0024                  		addq.b	#2,$24(a0)
00014A82 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00014A86 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00014A8A 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00014A8E 6600                       		bne.s	loc_138D4
00014A90 317C 0000 003A             		move.w	#0,$3A(a0)
00014A96 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00014A9C 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00014AA2 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00014AA8 4238 FE1A                  		clr.b	($FFFFFE1A).w
00014AAC                            
00014AAC                            loc_138C2:
00014AAC 303C 008F                  		move.w	#$8F,d0
00014AB0 4EB9 0000 1470             		jsr	(PlaySound).l	; play game over music
00014AB6 7003                       		moveq	#3,d0
00014AB8 4EF9 0000 16EA             		jmp	(LoadPLC).l	; load game over patterns
00014ABE                            ; ===========================================================================
00014ABE                            
00014ABE                            loc_138D4:
00014ABE 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00014AC4 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00014AC8 6700                       		beq.s	locret_13900	; if not, branch
00014ACA 317C 0000 003A             		move.w	#0,$3A(a0)
00014AD0 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00014AD6 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00014ADC 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00014AE2 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00014AE8 60C2                       		bra.s	loc_138C2
00014AEA                            ; ===========================================================================
00014AEA                            
00014AEA                            locret_13900:
00014AEA 4E75                       		rts	
00014AEC                            ; End of function GameOver
00014AEC                            
00014AEC                            ; ===========================================================================
00014AEC                            ; ---------------------------------------------------------------------------
00014AEC                            ; Sonic	when the level is restarted
00014AEC                            ; ---------------------------------------------------------------------------
00014AEC                            
00014AEC                            Obj01_ResetLevel:			; XREF: Obj01_Index
00014AEC 4A68 003A                  		tst.w	$3A(a0)
00014AF0 6700                       		beq.s	locret_13914
00014AF2 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00014AF6 6600                       		bne.s	locret_13914
00014AF8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00014AFE                            
00014AFE                            locret_13914:
00014AFE 4E75                       		rts	
00014B00                            
00014B00                            ; ---------------------------------------------------------------------------
00014B00                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00014B00                            ; ---------------------------------------------------------------------------
00014B00                            
00014B00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014B00                            
00014B00                            
00014B00                            Sonic_Loops:				; XREF: Obj01_Control
00014B00 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00014B06 6700                       		beq.s	loc_13926	; if yes, branch
00014B08 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00014B0C 6600 0000                  		bne.w	locret_139C2	; if not, branch
00014B10                            
00014B10                            loc_13926:
00014B10 3028 000C                  		move.w	$C(a0),d0
00014B14 E248                       		lsr.w	#1,d0
00014B16 0240 0380                  		andi.w	#$380,d0
00014B1A 1228 0008                  		move.b	8(a0),d1
00014B1E 0241 007F                  		andi.w	#$7F,d1
00014B22 D041                       		add.w	d1,d0
00014B24 43F8 A400                  		lea	($FFFFA400).w,a1
00014B28 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00014B2C B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00014B30 6700 F486                  		beq.w	Obj01_ChkRoll
00014B34 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00014B38 6700 F47E                  		beq.w	Obj01_ChkRoll
00014B3C B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00014B40 6700                       		beq.s	loc_13976
00014B42 B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00014B46 6700                       		beq.s	loc_13966
00014B48 08A8 0006 0001             		bclr	#6,1(a0)
00014B4E 4E75                       		rts	
00014B50                            ; ===========================================================================
00014B50                            
00014B50                            loc_13966:
00014B50 0828 0001 0022             		btst	#1,$22(a0)
00014B56 6700                       		beq.s	loc_13976
00014B58 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014B5E 4E75                       		rts	
00014B60                            ; ===========================================================================
00014B60                            
00014B60                            loc_13976:
00014B60 3428 0008                  		move.w	8(a0),d2
00014B64 0C02 002C                  		cmpi.b	#$2C,d2
00014B68 6400                       		bcc.s	loc_13988
00014B6A 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014B70 4E75                       		rts	
00014B72                            ; ===========================================================================
00014B72                            
00014B72                            loc_13988:
00014B72 0C02 00E0                  		cmpi.b	#-$20,d2
00014B76 6500                       		bcs.s	loc_13996
00014B78 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014B7E 4E75                       		rts	
00014B80                            ; ===========================================================================
00014B80                            
00014B80                            loc_13996:
00014B80 0828 0006 0001             		btst	#6,1(a0)
00014B86 6600                       		bne.s	loc_139B2
00014B88 1228 0026                  		move.b	$26(a0),d1
00014B8C 6700                       		beq.s	locret_139C2
00014B8E 0C01 0080                  		cmpi.b	#-$80,d1
00014B92 6200                       		bhi.s	locret_139C2
00014B94 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014B9A 4E75                       		rts	
00014B9C                            ; ===========================================================================
00014B9C                            
00014B9C                            loc_139B2:
00014B9C 1228 0026                  		move.b	$26(a0),d1
00014BA0 0C01 0080                  		cmpi.b	#-$80,d1
00014BA4 6300                       		bls.s	locret_139C2
00014BA6 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014BAC                            
00014BAC                            locret_139C2:
00014BAC 4E75                       		rts	
00014BAE                            ; End of function Sonic_Loops
00014BAE                            
00014BAE                            ; ---------------------------------------------------------------------------
00014BAE                            ; Sonic when he's drowning
00014BAE                            ; ---------------------------------------------------------------------------
00014BAE                             
00014BAE                            ; ||||||||||||||| S	U B	R O	U T	I N	E |||||||||||||||||||||||||||||||||||||||
00014BAE                             
00014BAE                             
00014BAE                            Sonic_Drowned:
00014BAE 6100 9530                  		bsr.w   SpeedToPos		; Make Sonic able to move
00014BB2 0668 0010 0012             		addi.w  #$10,$12(a0)	; Apply gravity
00014BB8 6100 ED0E                  		bsr.w   Sonic_RecordPos	; Record position
00014BBC 6100                       		bsr.s   Sonic_Animate	; Animate Sonic
00014BBE 6100 0000                  		bsr.w   LoadSonicDynPLC	; Load Sonic's DPLCs
00014BC2 6000 9542                  		bra.w   DisplaySprite	; And finally, display Sonic
00014BC6                            
00014BC6                            ; ---------------------------------------------------------------------------
00014BC6                            ; Subroutine to animate Sonic's sprites
00014BC6                            ; See also: AnimateSprite
00014BC6                            ; ---------------------------------------------------------------------------
00014BC6                            
00014BC6                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00014BC6                            
00014BC6                            ; loc_1B350:
00014BC6                            Sonic_Animate:
00014BC6 43F9 0000 0000             	lea	(SonicAniData).l,a1
00014BCC 4A38 FE19                  	tst.b	(Super_Sonic_flag).w
00014BD0 6700                       	beq.s	loc1
00014BD2 43F9 0000 0000             	lea	(SuperSonicAniData).l,a1
00014BD8                            loc1
00014BD8 7000                       	moveq	#0,d0
00014BDA 1028 001C                  	move.b	anim(a0),d0
00014BDE B028 001D                  	cmp.b	next_anim(a0),d0	; has animation changed?
00014BE2 6700                       	beq.s	SAnim_Do		; if not, branch
00014BE4 1140 001D                  	move.b	d0,next_anim(a0)	; set to next animation
00014BE8 117C 0000 001B             	move.b	#0,anim_frame(a0)	; reset animation frame
00014BEE 117C 0000 001E             	move.b	#0,anim_frame_duration(a0)	; reset frame duration
00014BF4 08A8 0005 0022             	bclr	#5,status(a0)
00014BFA                            ; loc_1B384:
00014BFA                            SAnim_Do:
00014BFA D040                       	add.w	d0,d0
00014BFC D2F1 0000                  	adda.w	(a1,d0.w),a1	; calculate address of appropriate animation script
00014C00 1011                       	move.b	(a1),d0
00014C02 6B00                       	bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00014C04 1228 0022                  	move.b	status(a0),d1
00014C08 0201 0001                  	andi.b	#1,d1
00014C0C 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
00014C12 8328 0001                  	or.b	d1,render_flags(a0)
00014C16 5328 001E                  	subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame duration
00014C1A 6A00                       	bpl.s	SAnim_Delay			; if time remains, branch
00014C1C 1140 001E                  	move.b	d0,anim_frame_duration(a0)	; load frame duration
00014C20                            ; loc_1B3AA:
00014C20                            SAnim_Do2:
00014C20 7200                       	moveq	#0,d1
00014C22 1228 001B                  	move.b	anim_frame(a0),d1	; load current frame number
00014C26 1031 1001                  	move.b	1(a1,d1.w),d0		; read sprite number from script
00014C2A 0C00 00F0                  	cmpi.b	#$F0,d0
00014C2E 6400                       	bcc.s	SAnim_End_FF		; if animation is complete, branch
00014C30                            ; loc_1B3BA:
00014C30                            SAnim_Next:
00014C30 1140 001A                  	move.b	d0,mapping_frame(a0)	; load sprite number
00014C34 5228 001B                  	addq.b	#1,anim_frame(a0)	; go to next frame
00014C38                            ; return_1B3C2:
00014C38                            SAnim_Delay:
00014C38 4E75                       	rts
00014C3A                            ; ===========================================================================
00014C3A                            ; loc_1B3C4:
00014C3A                            SAnim_End_FF:
00014C3A 5200                       	addq.b	#1,d0		; is the end flag = $FF ?
00014C3C 6600                       	bne.s	SAnim_End_FE	; if not, branch
00014C3E 117C 0000 001B             	move.b	#0,anim_frame(a0)	; restart the animation
00014C44 1029 0001                  	move.b	1(a1),d0	; read sprite number
00014C48 60E6                       	bra.s	SAnim_Next
00014C4A                            ; ===========================================================================
00014C4A                            ; loc_1B3D4:
00014C4A                            SAnim_End_FE:
00014C4A 5200                       	addq.b	#1,d0		; is the end flag = $FE ?
00014C4C 6600                       	bne.s	SAnim_End_FD	; if not, branch
00014C4E 1031 1002                  	move.b	2(a1,d1.w),d0	; read the next byte in the script
00014C52 9128 001B                  	sub.b	d0,anim_frame(a0)	; jump back d0 bytes in the script
00014C56 9200                       	sub.b	d0,d1
00014C58 1031 1001                  	move.b	1(a1,d1.w),d0	; read sprite number
00014C5C 60D2                       	bra.s	SAnim_Next
00014C5E                            ; ===========================================================================
00014C5E                            ; loc_1B3E8:
00014C5E                            SAnim_End_FD:
00014C5E 5200                       	addq.b	#1,d0			; is the end flag = $FD ?
00014C60 6600                       	bne.s	SAnim_End		; if not, branch
00014C62 1171 1002 001C             	move.b	2(a1,d1.w),anim(a0)	; read next byte, run that animation
00014C68                            ; return_1B3F2:
00014C68                            SAnim_End:
00014C68 4E75                       	rts
00014C6A                            ; ===========================================================================
00014C6A                            ; loc_1B3F4:
00014C6A                            SAnim_WalkRun:
00014C6A 5200                       	addq.b	#1,d0		; is the start flag = $FF ?
00014C6C 6600 0000                  	bne.w	SAnim_Roll	; if not, branch
00014C70 7000                       	moveq	#0,d0		; is animation walking/running?
00014C72 1028 0027                  	move.b	flip_angle(a0),d0	; if not, branch
00014C76 6600 0000                  	bne.w	SAnim_Tumble
00014C7A 7200                       	moveq	#0,d1
00014C7C 1028 0026                  	move.b	angle(a0),d0	; get Sonic's angle
00014C80 6B00                       	bmi.s	loc2
00014C82 6700                       	beq.s	loc2
00014C84 5300                       	subq.b	#1,d0
00014C86                            loc2
00014C86 1428 0022                  	move.b	status(a0),d2
00014C8A 0202 0001                  	andi.b	#1,d2		; is Sonic mirrored horizontally?
00014C8E 6600                       	bne.s	loc3		; if yes, branch
00014C90 4600                       	not.b	d0		; reverse angle
00014C92                            loc3
00014C92 0600 0010                  	addi.b	#$10,d0		; add $10 to angle
00014C96 6A00                       	bpl.s	loc4		; if angle is $0-$7F, branch
00014C98 7203                       	moveq	#3,d1
00014C9A                            loc4
00014C9A 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
00014CA0 B302                       	eor.b	d1,d2
00014CA2 8528 0001                  	or.b	d2,render_flags(a0)
00014CA6 0828 0005 0022             	btst	#5,status(a0)
00014CAC 6600 0000                  	bne.w	SAnim_Push
00014CB0 E808                       	lsr.b	#4,d0		; divide angle by 16
00014CB2 0200 0006                  	andi.b	#6,d0		; angle must be 0, 2, 4 or 6
00014CB6 3428 0014                  	move.w	inertia(a0),d2	; get Sonic's "speed" for animation purposes
00014CBA 6A00                       	bpl.s	loc5
00014CBC 4442                       	neg.w	d2
00014CBE                            loc5
00014CBE 4A28 002B                  	tst.b	status_secondary(a0)
00014CC2 6A00 0000                  	bpl.w	loc6
00014CC6 D442                       	add.w	d2,d2
00014CC8                            loc6
00014CC8 4A38 FE19                  	tst.b	(Super_Sonic_flag).w
00014CCC 6600                       	bne.s	SAnim_Super
00014CCE 43F9 0000 0000             	lea	(SonAni_Run).l,a1	; use running animation
00014CD4 0C42 0600                  	cmpi.w	#$600,d2		; is Sonic at running speed?
00014CD8 6400                       	bcc.s	loc7			; use running animation
00014CDA 43F9 0000 0000             	lea	(SonAni_Walk).l,a1	; if yes, branch
00014CE0 D000                       	add.b	d0,d0
00014CE2                            loc7
00014CE2 D000                       	add.b	d0,d0
00014CE4 1600                       	move.b	d0,d3
00014CE6 7200                       	moveq	#0,d1
00014CE8 1228 001B                  	move.b	anim_frame(a0),d1
00014CEC 1031 1001                  	move.b	1(a1,d1.w),d0
00014CF0 0C00 00FF                  	cmpi.b	#-1,d0
00014CF4 6600                       	bne.s	loc8
00014CF6 117C 0000 001B             	move.b	#0,anim_frame(a0)
00014CFC 1029 0001                  	move.b	1(a1),d0
00014D00                            loc8
00014D00 1140 001A                  	move.b	d0,mapping_frame(a0)
00014D04 D728 001A                  	add.b	d3,mapping_frame(a0)
00014D08 5328 001E                  	subq.b	#1,anim_frame_duration(a0)
00014D0C 6A00                       	bpl.s	return_1B4AC
00014D0E 4442                       	neg.w	d2
00014D10 0642 0800                  	addi.w	#$800,d2
00014D14 6A00                       	bpl.s	loc81
00014D16 7400                       	moveq	#0,d2
00014D18                            loc81
00014D18 E04A                       	lsr.w	#8,d2
00014D1A 1142 001E                  	move.b	d2,anim_frame_duration(a0)	; modify frame duration
00014D1E 5228 001B                  	addq.b	#1,anim_frame(a0)		; modify frame number
00014D22                            
00014D22                            return_1B4AC:
00014D22 4E75                       	rts
00014D24                            ; ===========================================================================
00014D24                            ; loc_1B4AE:
00014D24                            SAnim_Super:
00014D24 43F9 0000 0000             	lea	(SupSonAni_Run).l,a1	; use fast animation
00014D2A 0C42 0800                  	cmpi.w	#$800,d2		; is Sonic moving fast?
00014D2E 6400                       	bcc.s	SAnim_SuperRun		; if yes, branch
00014D30 43F9 0000 0000             	lea	(SupSonAni_Walk).l,a1	; use slower animation
00014D36 D000                       	add.b	d0,d0
00014D38 D000                       	add.b	d0,d0
00014D3A 6000                       	bra.s	SAnim_SuperWalk
00014D3C                            ; ---------------------------------------------------------------------------
00014D3C                            ; loc_1B4C6:
00014D3C                            SAnim_SuperRun:
00014D3C E208                       	lsr.b	#1,d0
00014D3E                            ; loc_1B4C8:
00014D3E                            SAnim_SuperWalk:
00014D3E 1600                       	move.b	d0,d3
00014D40 7200                       	moveq	#0,d1
00014D42 1228 001B                  	move.b	anim_frame(a0),d1
00014D46 1031 1001                  	move.b	1(a1,d1.w),d0
00014D4A 0C00 00FF                  	cmpi.b	#-1,d0
00014D4E 6600                       	bne.s	loc9
00014D50 117C 0000 001B             	move.b	#0,anim_frame(a0)
00014D56 1029 0001                  	move.b	1(a1),d0
00014D5A                            loc9
00014D5A 1140 001A                  	move.b	d0,mapping_frame(a0)
00014D5E D728 001A                  	add.b	d3,mapping_frame(a0)
00014D62 1238 FE05                  	move.b	($FFFFFE05).w,d1
00014D66 0201 0003                  	andi.b	#3,d1
00014D6A 6600                       	bne.s	loc10
00014D6C 0C28 00B5 001A             	cmpi.b	#-$4B,mapping_frame(a0)
00014D72 6400                       	bcc.s	loc10
00014D74 0628 0020 001A             	addi.b	#$20,mapping_frame(a0)
00014D7A                            loc10
00014D7A 5328 001E                  	subq.b	#1,anim_frame_duration(a0)
00014D7E 6A00                       	bpl.s	return_1B51E
00014D80 4442                       	neg.w	d2
00014D82 0642 0800                  	addi.w	#$800,d2
00014D86 6A00                       	bpl.s	loc11
00014D88 7400                       	moveq	#0,d2
00014D8A                            loc11
00014D8A E04A                       	lsr.w	#8,d2
00014D8C 1142 001E                  	move.b	d2,anim_frame_duration(a0)
00014D90 5228 001B                  	addq.b	#1,anim_frame(a0)
00014D94                            
00014D94                            return_1B51E:
00014D94 4E75                       	rts
00014D96                            ; ===========================================================================
00014D96                            ; loc_1B520:
00014D96                            SAnim_Tumble:
00014D96 1028 0027                  	move.b	flip_angle(a0),d0
00014D9A 7200                       	moveq	#0,d1
00014D9C 1428 0022                  	move.b	status(a0),d2
00014DA0 0202 0001                  	andi.b	#1,d2
00014DA4 6600                       	bne.s	SAnim_Tumble_Left
00014DA6                            
00014DA6 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
00014DAC 0600 000B                  	addi.b	#$B,d0
00014DB0 80FC 0016                  	divu.w	#$16,d0
00014DB4 0600 005F                  	addi.b	#$5F,d0
00014DB8 1140 001A                  	move.b	d0,mapping_frame(a0)
00014DBC 117C 0000 001E             	move.b	#0,anim_frame_duration(a0)
00014DC2 4E75                       	rts
00014DC4                            ; ===========================================================================
00014DC4                            ; loc_1B54E:
00014DC4                            SAnim_Tumble_Left:
00014DC4 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
00014DCA 4A28 0029                  	tst.b	flip_turned(a0)
00014DCE 6700                       	beq.s	loc_1B566
00014DD0 0028 0001 0001             	ori.b	#1,render_flags(a0)
00014DD6 0600 000B                  	addi.b	#$B,d0
00014DDA 6000                       	bra.s	loc_1B572
00014DDC                            ; ===========================================================================
00014DDC                            
00014DDC                            loc_1B566:
00014DDC 0028 0003 0001             	ori.b	#3,render_flags(a0)
00014DE2 4400                       	neg.b	d0
00014DE4 0600 008F                  	addi.b	#$8F,d0
00014DE8                            
00014DE8                            loc_1B572:
00014DE8 80FC 0016                  	divu.w	#$16,d0
00014DEC 0600 005F                  	addi.b	#$5F,d0
00014DF0 1140 001A                  	move.b	d0,mapping_frame(a0)
00014DF4 117C 0000 001E             	move.b	#0,anim_frame_duration(a0)
00014DFA 4E75                       	rts
00014DFC                            ; ===========================================================================
00014DFC                            ; loc_1B586:
00014DFC                            SAnim_Roll:
00014DFC 5328 001E                  	subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame duration
00014E00 6A00 FE36                  	bpl.w	SAnim_Delay			; if time remains, branch
00014E04 5200                       	addq.b	#1,d0		; is the start flag = $FE ?
00014E06 6600                       	bne.s	SAnim_Push	; if not, branch
00014E08 3428 0014                  	move.w	inertia(a0),d2
00014E0C 6A00                       	bpl.s	loc12
00014E0E 4442                       	neg.w	d2
00014E10                            loc12
00014E10 43F9 0000 0000             	lea	(SonAni_Roll2).l,a1
00014E16 0C42 0600                  	cmpi.w	#$600,d2
00014E1A 6400                       	bcc.s	loc14
00014E1C 43F9 0000 0000             	lea	(SonAni_Roll).l,a1
00014E22                            loc14
00014E22 4442                       	neg.w	d2
00014E24 0642 0400                  	addi.w	#$400,d2
00014E28 6A00                       	bpl.s	loc15
00014E2A 7400                       	moveq	#0,d2
00014E2C                            loc15
00014E2C E04A                       	lsr.w	#8,d2
00014E2E 1142 001E                  	move.b	d2,anim_frame_duration(a0)
00014E32 1228 0022                  	move.b	status(a0),d1
00014E36 0201 0001                  	andi.b	#1,d1
00014E3A 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
00014E40 8328 0001                  	or.b	d1,render_flags(a0)
00014E44 6000 FDDA                  	bra.w	SAnim_Do2
00014E48                            ; ===========================================================================
00014E48                            
00014E48                            SAnim_Push:
00014E48 5328 001E                  	subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame duration
00014E4C 6A00 FDEA                  	bpl.w	SAnim_Delay			; if time remains, branch
00014E50 3428 0014                  	move.w	inertia(a0),d2
00014E54 6B00                       	bmi.s	loc16
00014E56 4442                       	neg.w	d2
00014E58                            loc16
00014E58 0642 0800                  	addi.w	#$800,d2
00014E5C 6A00                       	bpl.s	loc17
00014E5E 7400                       	moveq	#0,d2
00014E60                            loc17
00014E60 EC4A                       	lsr.w	#6,d2
00014E62 1142 001E                  	move.b	d2,anim_frame_duration(a0)
00014E66 43F9 0000 0000             	lea	(SonAni_Push).l,a1
00014E6C 4A38 FE19                  	tst.b	(Super_Sonic_flag).w
00014E70 6700                       	beq.s	loc18
00014E72 43F9 0000 0000             	lea	(SupSonAni_Push).l,a1
00014E78                            loc18
00014E78 1228 0022                  	move.b	status(a0),d1
00014E7C 0201 0001                  	andi.b	#1,d1
00014E80 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
00014E86 8328 0001                  	or.b	d1,render_flags(a0)
00014E8A 6000 FD94                  	bra.w	SAnim_Do2
00014E8E                            ; ===========================================================================
00014E8E                            
00014E8E                            ; ---------------------------------------------------------------------------
00014E8E                            ; Animation script - Sonic
00014E8E                            ; ---------------------------------------------------------------------------
00014E8E                            ; off_1B618:
00014E8E                            SonicAniData:
00014E8E                            	include "_anim\Sonic.asm"
00014E8E                            ; ---------------------------------------------------------------------------
00014E8E                            ; Animation script - Sonic
00014E8E                            ; ---------------------------------------------------------------------------
00014E8E 0000                       		dc.w SonAni_Walk-SonicAniData	; 0
00014E90 0000                       		dc.w SonAni_Run-SonicAniData	; 1
00014E92 0000                       		dc.w SonAni_Roll-SonicAniData	; 2
00014E94 0000                       		dc.w SonAni_Roll2-SonicAniData	; 3
00014E96 0000                       		dc.w SonAni_Push-SonicAniData	; 4
00014E98 0000                       		dc.w SonAni_Wait-SonicAniData	; 5
00014E9A 0000                       		dc.w SonAni_Balance-SonicAniData	; 6
00014E9C 0000                       		dc.w SonAni_LookUp-SonicAniData	; 7
00014E9E 0000                       		dc.w SonAni_Duck-SonicAniData	; 8
00014EA0 0000                       		dc.w SonAni_Warp1-SonicAniData	; 9
00014EA2 0000                       		dc.w SonAni_Warp2-SonicAniData	; A
00014EA4 0000                       		dc.w SonAni_Warp3-SonicAniData	; B
00014EA6 0000                       		dc.w SonAni_Warp4-SonicAniData	; C
00014EA8 0000                       		dc.w SonAni_Stop-SonicAniData	; D
00014EAA 0000                       		dc.w SonAni_Float1-SonicAniData	; E
00014EAC 0000                       		dc.w SonAni_Float2-SonicAniData	; F
00014EAE 0000                       		dc.w SonAni_Spring-SonicAniData	; 10
00014EB0 0000                       		dc.w SonAni_LZHang-SonicAniData	; 11
00014EB2 0000                       		dc.w SonAni_Leap1-SonicAniData	; 12
00014EB4 0000                       		dc.w SonAni_Leap2-SonicAniData	; 13
00014EB6 0000                       		dc.w SonAni_Surf-SonicAniData	; 14
00014EB8 0000                       		dc.w SonAni_Bubble-SonicAniData	; 15
00014EBA 0000                       		dc.w SonAni_Death-SonicAniData	; 16
00014EBC 0000                       		dc.w SonAni_Drown-SonicAniData	; 17
00014EBE 0000                       		dc.w SonAni_Hurt-SonicAniData	; 18
00014EC0 0000                       		dc.w SonAni_LZSlide-SonicAniData	; 19
00014EC2 0000                       		dc.w SonAni_Blank-SonicAniData	; 1A
00014EC4 0000                       		dc.w SonAni_Float3-SonicAniData	; 1B
00014EC6 0000                       		dc.w SonAni_Float4-SonicAniData	; 1C
00014EC8 0000                       		dc.w SonAni_Spindash-SonicAniData	; 1D
00014ECA 0000                       		dc.w SonAni_Blink-SonicAniData	; 1E
00014ECC 0000                       		dc.w SonAni_GetUp-SonicAniData	; 1F
00014ECE 0000                       		dc.w SonAni_Balance2-SonicAniData	; 20
00014ED0 0000                       		dc.w SonAni_Hang-SonicAniData		; 2A
00014ED2 0000                       		dc.w SonAni_Dash2-SonicAniData	; 2B
00014ED4 0000                       		dc.w SonAni_Dash3-SonicAniData	; 2C
00014ED6 0000                       		dc.w SonAni_Hang2-SonicAniData	; 2D
00014ED8 0000                       		dc.w SonAni_DeathBW-SonicAniData	; 2E	
00014EDA 0000                       		dc.w SonAni_Balance3-SonicAniData	; 2F
00014EDC 0000                       		dc.w SonAni_Balance4-SonicAniData	; 30		
00014EDE 0000                       		dc.w SonAni_Lying-SonicAniData	; 31
00014EE0 0000                       		dc.w SonAni_LieDown-SonicAniData	; 32
00014EE2 FF0F 1011 1213 140D 0EFF   SonAni_Walk:	dc.b $FF, $F,$10,$11,$12,$13,$14, $D, $E,$FF
00014EEC FF2D 2E2F 30FF FFFF FFFF   SonAni_Run:	dc.b $FF,$2D,$2E,$2F,$30,$FF,$FF,$FF,$FF,$FF
00014EF6 FE3D 413E 413F 4140 41FF   SonAni_Roll:	dc.b $FE,$3D,$41,$3E,$41,$3F,$41,$40,$41,$FF
00014F00 FE3D 413E 413F 4140 41FF   SonAni_Roll2:	dc.b $FE,$3D,$41,$3E,$41,$3F,$41,$40,$41,$FF
00014F0A FD48 494A 4BFF FFFF FFFF   SonAni_Push:	dc.b $FD,$48,$49,$4A,$4B,$FF,$FF,$FF,$FF,$FF
00014F14                            SonAni_Wait:
00014F14 0501 0101 0101 0101 0101+  	dc.b   5,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1
00014F24 0101 0101 0101 0101 0101+  	dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2
00014F34 0303 0303 0304 0404 0505+  	dc.b   3,  3,  3,  3,  3,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5
00014F44 0504 0404 0505 0504 0404+  	dc.b   5,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5,  5,  6,  6,  6
00014F54 0606 0606 0606 0604 0404+  	dc.b   6,  6,  6,  6,  6,  6,  6,  4,  4,  4,  5,  5,  5,  4,  4,  4
00014F64 0505 0504 0404 0505 0504+  	dc.b   5,  5,  5,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5,  5,  6
00014F74 0606 0606 0606 0606 0604+  	dc.b   6,  6,  6,  6,  6,  6,  6,  6,  6,  4,  4,  4,  5,  5,  5,  4
00014F84 0404 0505 0504 0404 0505+  	dc.b   4,  4,  5,  5,  5,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5
00014F94 0506 0606 0606 0606 0606+  	dc.b   5,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  4,  4,  4,  5,  5
00014FA4 0504 0404 0505 0504 0404+  	dc.b   5,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5,  5,  4,  4,  4
00014FB4 0505 0506 0606 0606 0606+  	dc.b   5,  5,  5,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  7,  8,  8
00014FC4 0809 0909 FE06             	dc.b   8,  9,  9,  9,$FE,  6
00014FCA 09CC CDCE CDFF             SonAni_Balance:	dc.b   9,$CC,$CD,$CE,$CD,$FF
00014FD0 050B 0CFE 01               SonAni_LookUp:	dc.b   5, $B, $C,$FE,  1
00014FD5 054C 4DFE 01               SonAni_Duck:	dc.b   5,$4C,$4D,$FE,  1
00014FDA 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00014FDE 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00014FE2 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00014FE6 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
00014FEA 0102 FD00                  SonAni_Blink:	dc.b   1,  2,$FD,  0
00014FEE 030A FD00                  SonAni_GetUp:	dc.b   3, $A,$FD,  0
00014FF2 03C8 C9CA CBFF             SonAni_Balance2:    dc.b   3,$C8,$C9,$CA,$CB,$FF
00014FF8 05D2 D3D4 D5FD 00          SonAni_Stop:	dc.b   5,$D2,$D3,$D4,$D5,$FD,  0 ; halt/skidding animation
00014FFF 0754 59FF                  SonAni_Float1:	dc.b   7,$54,$59,$FF
00015003 0754 5556 5758 FF          SonAni_Float2:	dc.b   7,$54,$55,$56,$57,$58,$FF
0001500A 2F5B FD00                  SonAni_Spring:	dc.b $2F,$5B,$FD,  0
0001500E 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
00015012 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00015018 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
0001501E 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00015022 0B5A 5A11 12FD 00          SonAni_Bubble:	dc.b  $B,$5A,$5A,$11,$12,$FD,  0 ; breathe
00015029 205D FF                    SonAni_Drown:	dc.b $20,$5D,$FF
0001502C 205C FF                    SonAni_Death:	dc.b $20,$5C,$FF
0001502F 404E FF                    SonAni_Hurt:	dc.b $40,$4E,$FF
00015032 094E 4FFF                  SonAni_LZSlide:	dc.b   9,$4E,$4F,$FF
00015036 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
0001503A 0042 4342 4442 4542 4642+  SonAni_Spindash: dc.b   0,$42,$43,$42,$44,$42,$45,$42,$46,$42,$47,$FF
00015046 0150 51FF                  SonAni_Hang:	dc.b   1,$50,$51,$FF
0001504A 0F43 4343 FE01             SonAni_Dash2:	dc.b  $F,$43,$43,$43,$FE,  1
00015050 0F43 44FE 01               SonAni_Dash3:	dc.b  $F,$43,$44,$FE,  1
00015055 136B 6CFF                  SonAni_Hang2:	dc.b $13,$6B,$6C,$FF
00015059 205E FF                    SonAni_DeathBW:	dc.b $20,$5E,$FF
0001505C 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00015064 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
00015068 13D0 D1FF                  SonAni_Balance3:dc.b $13,$D0,$D1,$FF
0001506C 03CF C8C9 CACB FE04        SonAni_Balance4:dc.b   3,$CF,$C8,$C9,$CA,$CB,$FE,  4
00015074 0908 09FF                  SonAni_Lying:	dc.b   9,  8,  9,$FF
00015078 0307 FD00                  SonAni_LieDown:	dc.b   3,  7,$FD,  0
0001507C                            		even
0001507C                            ; ---------------------------------------------------------------------------
0001507C                            ; Animation script - Super Sonic
0001507C                            ; (many of these point to the data above this)
0001507C                            ; ---------------------------------------------------------------------------
0001507C                            SuperSonicAniData:
0001507C 0000                       	dc.w SupSonAni_Walk-SuperSonicAniData		; 0
0001507E 0000                       	dc.w SupSonAni_Run-SuperSonicAniData          ; 1
00015080 FE7A                       	dc.w SonAni_Roll-SuperSonicAniData            ; 2
00015082 FE84                       	dc.w SonAni_Roll2-SuperSonicAniData           ; 3
00015084 0000                       	dc.w SupSonAni_Push-SuperSonicAniData         ; 4
00015086 0000                       	dc.w SupSonAni_Stand-SuperSonicAniData        ; 5
00015088 0000                       	dc.w SupSonAni_Balance-SuperSonicAniData      ; 6
0001508A FF54                       	dc.w SonAni_LookUp-SuperSonicAniData          ; 7
0001508C 0000                       	dc.w SupSonAni_Duck-SuperSonicAniData         ; 8
0001508E FFBE                       	dc.w SonAni_Spindash-SuperSonicAniData        ; 9
00015090 FF6E                       	dc.w SonAni_Blink-SuperSonicAniData           ; 10 ; $A
00015092 FF72                       	dc.w SonAni_GetUp-SuperSonicAniData           ; 11 ; $B
00015094 FF76                       	dc.w SonAni_Balance2-SuperSonicAniData        ; 12 ; $C
00015096 FF7C                       	dc.w SonAni_Stop-SuperSonicAniData            ; 13 ; $D
00015098 FF83                       	dc.w SonAni_Float1-SuperSonicAniData           ; 14 ; $E
0001509A FF87                       	dc.w SonAni_Float2-SuperSonicAniData          ; 15 ; $F
0001509C FF8E                       	dc.w SonAni_Spring-SuperSonicAniData          ; 16 ; $10
0001509E FFCA                       	dc.w SonAni_Hang-SuperSonicAniData            ; 17 ; $11
000150A0 FFCE                       	dc.w SonAni_Dash2-SuperSonicAniData           ; 18 ; $12
000150A2 FFD4                       	dc.w SonAni_Dash3-SuperSonicAniData           ; 19 ; $13
000150A4 FFD9                       	dc.w SonAni_Hang2-SuperSonicAniData           ; 20 ; $14
000150A6 FFA6                       	dc.w SonAni_Bubble-SuperSonicAniData          ; 21 ; $15
000150A8 FFDD                       	dc.w SonAni_DeathBW-SuperSonicAniData         ; 22 ; $16
000150AA FFAD                       	dc.w SonAni_Drown-SuperSonicAniData           ; 23 ; $17
000150AC FFB0                       	dc.w SonAni_Death-SuperSonicAniData           ; 24 ; $18
000150AE FFB3                       	dc.w SonAni_Hurt-SuperSonicAniData            ; 25 ; $19
000150B0 FFB3                       	dc.w SonAni_Hurt-SuperSonicAniData            ; 26 ; $1A
000150B2 FFB6                       	dc.w SonAni_LZSlide-SuperSonicAniData           ; 27 ; $1B
000150B4 FFBA                       	dc.w SonAni_Blank-SuperSonicAniData           ; 28 ; $1C
000150B6 FFEC                       	dc.w SonAni_Balance3-SuperSonicAniData        ; 29 ; $1D
000150B8 FFF0                       	dc.w SonAni_Balance4-SuperSonicAniData        ; 30 ; $1E
000150BA 0000                       	dc.w SupSonAni_Transform-SuperSonicAniData    ; 31 ; $1F
000150BC                            
000150BC FF77 7879 7A7B 7C75 76FF   SupSonAni_Walk:		dc.b $FF,$77,$78,$79,$7A,$7B,$7C,$75,$76,$FF
000150C6 FFB5 B9FF FFFF FFFF FFFF   SupSonAni_Run:		dc.b $FF,$B5,$B9,$FF,$FF,$FF,$FF,$FF,$FF,$FF
000150D0 FDBD BEBF C0FF FFFF FFFF   SupSonAni_Push:		dc.b $FD,$BD,$BE,$BF,$C0,$FF,$FF,$FF,$FF,$FF
000150DA 0772 7374 73FF             SupSonAni_Stand:	dc.b   7,$72,$73,$74,$73,$FF
000150E0 09C2 C3C4 C3C5 C6C7 C6FF   SupSonAni_Balance:	dc.b   9,$C2,$C3,$C4,$C3,$C5,$C6,$C7,$C6,$FF
000150EA 05C1 FF                    SupSonAni_Duck:		dc.b   5,$C1,$FF
000150ED 026D 6D6E 6E6F 7071 7071+  SupSonAni_Transform:	dc.b   2,$6D,$6D,$6E,$6E,$6F,$70,$71,$70,$71,$70,$71,$70,$71,$FD,  0
000150FE 00                         	even		
000150FE 00                         	even		
000150FE                            
000150FE                            
000150FE                            ; ---------------------------------------------------------------------------
000150FE                            ; Sonic	pattern	loading	subroutine
000150FE                            ; ---------------------------------------------------------------------------
000150FE                            
000150FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150FE                            
000150FE                            
000150FE                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
000150FE 7000                       		moveq	#0,d0
00015100 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00015104 B038 F766                  		cmp.b	($FFFFF766).w,d0
00015108 6700                       		beq.s	locret_13C96
0001510A 11C0 F766                  		move.b	d0,($FFFFF766).w
0001510E 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
00015114 D040                       		add.w	d0,d0
00015116 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001511A 7A00                       		moveq	#0,d5
0001511C 1A1A                       		move.b	(a2)+,d5
0001511E 5345                       		subq.w	#1,d5
00015120 6B00                       		bmi.s	locret_13C96
00015122 383C F000                  		move.w	#$F000,d4
00015126 2C3C 0000 0000             		move.l	#Art_Sonic,d6
0001512C                            
0001512C                            SPLC_ReadEntry:
0001512C 7200                       		moveq	#0,d1
0001512E 121A                       		move.b	(a2)+,d1
00015130 E149                       		lsl.w	#8,d1
00015132 121A                       		move.b	(a2)+,d1
00015134 3601                       		move.w	d1,d3
00015136 E04B                       		lsr.w	#8,d3
00015138 0243 00F0                  		andi.w	#$F0,d3
0001513C 0643 0010                  		addi.w	#$10,d3
00015140 0241 0FFF                  		andi.w	#$FFF,d1
00015144 EB89                       		lsl.l	#5,d1
00015146 D286                       		add.l	d6,d1
00015148 3404                       		move.w	d4,d2
0001514A D843                       		add.w	d3,d4
0001514C D843                       		add.w	d3,d4
0001514E 4EB9 0000 151A             		jsr	(QueueDMATransfer).l
00015154 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
00015158                            
00015158                            locret_13C96:
00015158 4E75                       		rts
0001515A                            ; End of function LoadSonicDynPLC
0001515A                            
0001515A                            ; ===========================================================================
0001515A                            ; ---------------------------------------------------------------------------
0001515A                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
0001515A                            ; ---------------------------------------------------------------------------
0001515A                            
0001515A                            Obj0A:					; XREF: Obj_Index
0001515A 7000                       		moveq	#0,d0
0001515C 1028 0024                  		move.b	$24(a0),d0
00015160 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00015164 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00015168                            ; ===========================================================================
00015168 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
0001516C 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00015170 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00015174 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00015178 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
0001517A                            ; ===========================================================================
0001517A                            
0001517A                            Obj0A_Main:				; XREF: Obj0A_Index
0001517A 5428 0024                  		addq.b	#2,$24(a0)
0001517E 217C 0001 34D2 0004        		move.l	#Map_obj64,4(a0)
00015186 317C 8348 0002             		move.w	#$8348,2(a0)
0001518C 117C 0084 0001             		move.b	#$84,1(a0)
00015192 117C 0010 0019             		move.b	#$10,$19(a0)
00015198 117C 0001 0018             		move.b	#1,$18(a0)
0001519E 1028 0028                  		move.b	$28(a0),d0
000151A2 6A00                       		bpl.s	loc_13D00
000151A4 5028 0024                  		addq.b	#8,$24(a0)
000151A8 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
000151B0 317C 0440 0002             		move.w	#$440,2(a0)
000151B6 0240 007F                  		andi.w	#$7F,d0
000151BA 1140 0033                  		move.b	d0,$33(a0)
000151BE 6000 0000                  		bra.w	Obj0A_Countdown
000151C2                            ; ===========================================================================
000151C2                            
000151C2                            loc_13D00:
000151C2 1140 001C                  		move.b	d0,$1C(a0)
000151C6 3168 0008 0030             		move.w	8(a0),$30(a0)
000151CC 317C FF78 0012             		move.w	#-$88,$12(a0)
000151D2                            
000151D2                            Obj0A_Animate:				; XREF: Obj0A_Index
000151D2 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000151D8 4EB9 0000 B218             		jsr	AnimateSprite
000151DE                            
000151DE                            Obj0A_ChkWater:				; XREF: Obj0A_Index
000151DE 3038 F646                  		move.w	($FFFFF646).w,d0
000151E2 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
000151E6 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
000151E8 117C 0006 0024             		move.b	#6,$24(a0)
000151EE 5E28 001C                  		addq.b	#7,$1C(a0)
000151F2 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
000151F8 6700                       		beq.s	Obj0A_Display
000151FA 6000                       		bra.s	Obj0A_Display
000151FC                            ; ===========================================================================
000151FC                            
000151FC                            Obj0A_Wobble:
000151FC 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00015200 6700                       		beq.s	loc_13D44
00015202 5868 0030                  		addq.w	#4,$30(a0)
00015206                            
00015206                            loc_13D44:
00015206 1028 0026                  		move.b	$26(a0),d0
0001520A 5228 0026                  		addq.b	#1,$26(a0)
0001520E 0240 007F                  		andi.w	#$7F,d0
00015212 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00015218 1031 0000                  		move.b	(a1,d0.w),d0
0001521C 4880                       		ext.w	d0
0001521E D068 0030                  		add.w	$30(a0),d0
00015222 3140 0008                  		move.w	d0,8(a0)
00015226 6100                       		bsr.s	Obj0A_ShowNumber
00015228 4EBA 8EB6                  		jsr	SpeedToPos
0001522C 4A28 0001                  		tst.b	1(a0)
00015230 6A00                       		bpl.s	Obj0A_Delete
00015232 4EFA 8ED2                  		jmp	DisplaySprite
00015236                            ; ===========================================================================
00015236                            
00015236                            Obj0A_Delete:
00015236 4EFA 8F0A                  		jmp	DeleteObject
0001523A                            ; ===========================================================================
0001523A                            
0001523A                            Obj0A_Display:				; XREF: Obj0A_Index
0001523A 6100                       		bsr.s	Obj0A_ShowNumber
0001523C 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015242 4EB9 0000 B218             		jsr	AnimateSprite
00015248 4EFA 8EBC                  		jmp	DisplaySprite
0001524C                            ; ===========================================================================
0001524C                            
0001524C                            Obj0A_Delete2:				; XREF: Obj0A_Index
0001524C 4EFA 8EF4                  		jmp	DeleteObject
00015250                            ; ===========================================================================
00015250                            
00015250                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00015250 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00015256 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00015258 5368 0038                  		subq.w	#1,$38(a0)
0001525C 6600                       		bne.s	Obj0A_Display2
0001525E 117C 000E 0024             		move.b	#$E,$24(a0)
00015264 5E28 001C                  		addq.b	#7,$1C(a0)
00015268 60D0                       		bra.s	Obj0A_Display
0001526A                            ; ===========================================================================
0001526A                            
0001526A                            Obj0A_Display2:
0001526A 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015270 4EB9 0000 B218             		jsr	AnimateSprite
00015276 4A28 0001                  		tst.b	1(a0)
0001527A 6A00                       		bpl.s	Obj0A_Delete3
0001527C 4EFA 8E88                  		jmp	DisplaySprite
00015280                            ; ===========================================================================
00015280                            
00015280                            Obj0A_Delete3:
00015280 4EFA 8EC0                  		jmp	DeleteObject
00015284                            ; ===========================================================================
00015284                            
00015284                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00015284 4A68 0038                  		tst.w	$38(a0)
00015288 6700                       		beq.s	locret_13E1A
0001528A 5368 0038                  		subq.w	#1,$38(a0)
0001528E 6600                       		bne.s	locret_13E1A
00015290 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00015296 6400                       		bcc.s	locret_13E1A
00015298 317C 000F 0038             		move.w	#$F,$38(a0)
0001529E 4268 0012                  		clr.w	$12(a0)
000152A2 117C 0080 0001             		move.b	#$80,1(a0)
000152A8 3028 0008                  		move.w	8(a0),d0
000152AC 9078 F700                  		sub.w	($FFFFF700).w,d0
000152B0 0640 0080                  		addi.w	#$80,d0
000152B4 3140 0008                  		move.w	d0,8(a0)
000152B8 3028 000C                  		move.w	$C(a0),d0
000152BC 9078 F704                  		sub.w	($FFFFF704).w,d0
000152C0 0640 0080                  		addi.w	#$80,d0
000152C4 3140 000A                  		move.w	d0,$A(a0)
000152C8 117C 000C 0024             		move.b	#$C,$24(a0)
000152CE                            
000152CE                            locret_13E1A:
000152CE 4E75                       		rts	
000152D0                            ; ===========================================================================
000152D0                            Obj0A_WobbleData:
000152D0 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
000152E1 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
000152F2 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00015303 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00015313 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00015320 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001532D FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001533A FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00015347 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00015350                            ; ===========================================================================
00015350                            
00015350                            Obj0A_Countdown:			; XREF: Obj0A_Index
00015350 4A68 002C                  		tst.w	$2C(a0)
00015354 6600 0000                  		bne.w	loc_13F86
00015358 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0001535E 6400 0000                  		bcc.w	locret_1408C
00015362 0838 0006 D022             		btst	#6,($FFFFD022).w
00015368 6700 0000                  		beq.w	locret_1408C
0001536C 5368 0038                  		subq.w	#1,$38(a0)
00015370 6A00 0000                  		bpl.w	loc_13FAC
00015374 317C 003B 0038             		move.w	#59,$38(a0)
0001537A 317C 0001 0036             		move.w	#1,$36(a0)
00015380 4EB9 0000 33AE             		jsr	(RandomNumber).l
00015386 0240 0001                  		andi.w	#1,d0
0001538A 1140 0034                  		move.b	d0,$34(a0)
0001538E 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00015392 0C40 0019                  		cmpi.w	#$19,d0
00015396 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00015398 0C40 0014                  		cmpi.w	#$14,d0
0001539C 6700                       		beq.s	Obj0A_WarnSound
0001539E 0C40 000F                  		cmpi.w	#$F,d0
000153A2 6700                       		beq.s	Obj0A_WarnSound
000153A4 0C40 000C                  		cmpi.w	#$C,d0
000153A8 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
000153AA 6600                       		bne.s	loc_13F02
000153AC 303C 0092                  		move.w	#$92,d0
000153B0 4EB9 0000 1470             		jsr	(PlaySound).l	; play countdown music
000153B6                            
000153B6                            loc_13F02:
000153B6 5328 0032                  		subq.b	#1,$32(a0)
000153BA 6A00                       		bpl.s	Obj0A_ReduceAir
000153BC 1168 0033 0032             		move.b	$33(a0),$32(a0)
000153C2 08E8 0007 0036             		bset	#7,$36(a0)
000153C8 6000                       		bra.s	Obj0A_ReduceAir
000153CA                            ; ===========================================================================
000153CA                            
000153CA                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
000153CA 303C 00C2                  		move.w	#$C2,d0
000153CE 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
000153D4                            
000153D4                            Obj0A_ReduceAir:
000153D4 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
000153D8 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
000153DC 6100 0000                  		bsr.w	ResumeMusic
000153E0 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000153E6 303C 00B2                  		move.w	#$B2,d0
000153EA 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play drowning sound
000153F0 117C 000A 0034             		move.b	#$A,$34(a0)
000153F6 317C 0001 0036             		move.w	#1,$36(a0)
000153FC 317C 0078 002C             		move.w	#$78,$2C(a0)
00015402 2F08                       		move.l	a0,-(sp)
00015404 41F8 D000                  		lea	($FFFFD000).w,a0
00015408 6100 F584                  		bsr.w	Sonic_ResetOnFloor
0001540C 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00015412 08E8 0001 0022             		bset	#1,$22(a0)
00015418 08E8 0007 0002             		bset	#7,2(a0)
0001541E 317C 0000 0012             		move.w	#0,$12(a0)
00015424 317C 0000 0010             		move.w	#0,$10(a0)
0001542A 317C 0000 0014             		move.w	#0,$14(a0)
00015430 117C 000A 0024             		move.b	#$A,$24(a0)		; Force the character to drown
00015436 11FC 0001 F744             		move.b	#1,($FFFFF744).w
0001543C 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w	; Stop the timer immediately
00015442 205F                       		movea.l	(sp)+,a0
00015444 4E75                       		rts
00015446                            ; ===========================================================================
00015446                            
00015446                            loc_13F86:
00015446 5368 002C                  		subq.w	#1,$2C(a0)
0001544A 6600                       		bne.s	loc_13FAC	; Make it jump straight to this location
0001544C 11FC 0006 D024             		move.b	#6,($FFFFD000+$24).w
00015452 4E75                       		rts
00015454                            ; ===========================================================================
00015454                            
00015454                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00015454 6000                       		bra.s	Obj0A_MakeItem
00015456                            ; ===========================================================================
00015456                            
00015456                            loc_13FAC:
00015456 4A68 0036                  		tst.w	$36(a0)
0001545A 6700 0000                  		beq.w	locret_1408C
0001545E 5368 003A                  		subq.w	#1,$3A(a0)
00015462 6A00 0000                  		bpl.w	locret_1408C
00015466                            
00015466                            Obj0A_MakeItem:
00015466 4EB9 0000 33AE             		jsr	(RandomNumber).l
0001546C 0240 000F                  		andi.w	#$F,d0
00015470 3140 003A                  		move.w	d0,$3A(a0)
00015474 4EBA 9126                  		jsr	SingleObjLoad
00015478 6600 0000                  		bne.w	locret_1408C
0001547C 12BC 000A                  		move.b	#$A,0(a1)	; load object
00015480 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00015486 7006                       		moveq	#6,d0
00015488 0838 0000 D022             		btst	#0,($FFFFD022).w
0001548E 6700                       		beq.s	loc_13FF2
00015490 4440                       		neg.w	d0
00015492 137C 0040 0026             		move.b	#$40,$26(a1)
00015498                            
00015498                            loc_13FF2:
00015498 D169 0008                  		add.w	d0,8(a1)
0001549C 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
000154A2 137C 0006 0028             		move.b	#6,$28(a1)
000154A8 4A68 002C                  		tst.w	$2C(a0)
000154AC 6700 0000                  		beq.w	loc_1403E
000154B0 0268 0007 003A             		andi.w	#7,$3A(a0)
000154B6 0668 0000 003A             		addi.w	#0,$3A(a0)
000154BC 3038 D00C                  		move.w	($FFFFD00C).w,d0
000154C0 0440 000C                  		subi.w	#$C,d0
000154C4 3340 000C                  		move.w	d0,$C(a1)
000154C8 4EB9 0000 33AE             		jsr	(RandomNumber).l
000154CE 1340 0026                  		move.b	d0,$26(a1)
000154D2 3038 FE04                  		move.w	($FFFFFE04).w,d0
000154D6 0200 0003                  		andi.b	#3,d0
000154DA 6600                       		bne.s	loc_14082
000154DC 137C 000E 0028             		move.b	#$E,$28(a1)
000154E2 6000                       		bra.s	loc_14082
000154E4                            ; ===========================================================================
000154E4                            
000154E4                            loc_1403E:
000154E4 0828 0007 0036             		btst	#7,$36(a0)
000154EA 6700                       		beq.s	loc_14082
000154EC 3438 FE14                  		move.w	($FFFFFE14).w,d2
000154F0 E24A                       		lsr.w	#1,d2
000154F2 4EB9 0000 33AE             		jsr	(RandomNumber).l
000154F8 0240 0003                  		andi.w	#3,d0
000154FC 6600                       		bne.s	loc_1406A
000154FE 08E8 0006 0036             		bset	#6,$36(a0)
00015504 6600                       		bne.s	loc_14082
00015506 1342 0028                  		move.b	d2,$28(a1)
0001550A 337C 001C 0038             		move.w	#$1C,$38(a1)
00015510                            
00015510                            loc_1406A:
00015510 4A28 0034                  		tst.b	$34(a0)
00015514 6600                       		bne.s	loc_14082
00015516 08E8 0006 0036             		bset	#6,$36(a0)
0001551C 6600                       		bne.s	loc_14082
0001551E 1342 0028                  		move.b	d2,$28(a1)
00015522 337C 001C 0038             		move.w	#$1C,$38(a1)
00015528                            
00015528                            loc_14082:
00015528 5328 0034                  		subq.b	#1,$34(a0)
0001552C 6A00                       		bpl.s	locret_1408C
0001552E 4268 0036                  		clr.w	$36(a0)
00015532                            
00015532                            locret_1408C:
00015532 4E75                       		rts	
00015534                            
00015534                            ; ---------------------------------------------------------------------------
00015534                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00015534                            ; ---------------------------------------------------------------------------
00015534                            
00015534                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015534                            
00015534                            
00015534                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00015534 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
0001553A                             
0001553A                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
0001553A                             
0001553A 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
0001553E                             
0001553E 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00015544 6600                       		bne.s	Air_GetBgm2	; if not, branch
00015546 43F9 0000 41BC             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
0001554C 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
0001554E                             
0001554E                            Air_GetBgm2:
0001554E 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00015554 6600                       		bne.s	Air_GetBgm3	; if not, branch
00015556 43F9 0000 41C2             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
0001555C 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
0001555E                             
0001555E                            Air_GetBgm3:
0001555E 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00015564 6600                       		bne.s	Air_GetBgm4	; if not, branch
00015566 43F9 0000 41C8             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
0001556C 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
0001556E                             
0001556E                            Air_GetBgm4:
0001556E 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00015574 6600                       		bne.s	Air_PlayMusic	; if not, branch
00015576 43F9 0000 41CE             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
0001557C                             
0001557C                            Air_PlayMusic:
0001557C 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
00015580                             
00015580                            loc_140A6:
00015580 4EB9 0000 1470             		jsr	(PlaySound).l
00015586                             
00015586                            ; NineKode ends here
00015586                            
00015586                            loc_140AC:
00015586 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
0001558C 4238 D372                  		clr.b	($FFFFD372).w
00015590 4E75                       		rts	
00015592                            ; End of function ResumeMusic
00015592                            
00015592                            ; ===========================================================================
00015592                            Ani_obj0A:
00015592                            	include "_anim\obj0A.asm"
00015592                            ; ---------------------------------------------------------------------------
00015592                            ; Animation script - countdown numbers and bubbles (LZ)
00015592                            ; ---------------------------------------------------------------------------
00015592 0000                       		dc.w byte_140D6-Ani_obj0A
00015594 0000                       		dc.w byte_140E0-Ani_obj0A
00015596 0000                       		dc.w byte_140EA-Ani_obj0A
00015598 0000                       		dc.w byte_140F4-Ani_obj0A
0001559A 0000                       		dc.w byte_140FE-Ani_obj0A
0001559C 0000                       		dc.w byte_14108-Ani_obj0A
0001559E 0000                       		dc.w byte_14112-Ani_obj0A
000155A0 0000                       		dc.w byte_14118-Ani_obj0A
000155A2 0000                       		dc.w byte_14120-Ani_obj0A
000155A4 0000                       		dc.w byte_14128-Ani_obj0A
000155A6 0000                       		dc.w byte_14130-Ani_obj0A
000155A8 0000                       		dc.w byte_14138-Ani_obj0A
000155AA 0000                       		dc.w byte_14140-Ani_obj0A
000155AC 0000                       		dc.w byte_14148-Ani_obj0A
000155AE 0000                       		dc.w byte_1414A-Ani_obj0A
000155B0 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
000155BA 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
000155C4 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
000155CE 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
000155D8 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
000155E2 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
000155EC 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
000155F2 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
000155FA 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00015602 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
0001560A 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00015612 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
0001561A 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00015622 0EFC                       byte_14148:	dc.b $E, $FC
00015624 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
0001562A                            		even
0001562A                            		even
0001562A                            
0001562A                            ; ---------------------------------------------------------------------------
0001562A                            ; Sprite mappings - drowning countdown numbers (LZ)
0001562A                            ; ---------------------------------------------------------------------------
0001562A                            Map_obj0A:
0001562A                            	include "_maps\obj0A.asm"
0001562A                            ; ---------------------------------------------------------------------------
0001562A                            ; Sprite mappings - drowning countdown numbers (LZ)
0001562A                            ; ---------------------------------------------------------------------------
0001562A 0000                       		dc.w byte_14152-Map_obj0A
0001562C 01                         byte_14152:	dc.b 1
0001562D E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00015632                            		even
00015632                            		even
00015632                            
00015632                            ; ===========================================================================
00015632                            ; ---------------------------------------------------------------------------
00015632                            ; Object 38 - shield and invincibility stars
00015632                            ; ---------------------------------------------------------------------------
00015632                            
00015632                            Obj38:					; XREF: Obj_Index
00015632 7000                       		moveq	#0,d0
00015634 1028 0024                  		move.b	$24(a0),d0
00015638 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
0001563C 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00015640                            ; ===========================================================================
00015640 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00015642 0000                       		dc.w Obj38_Shield-Obj38_Index
00015644 0000                       		dc.w Obj38_Stars-Obj38_Index
00015646                            ; ===========================================================================
00015646                            
00015646                            Obj38_Main:				; XREF: Obj38_Index
00015646 5428 0024                  		addq.b	#2,$24(a0)
0001564A 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00015652 117C 0004 0001             		move.b	#4,1(a0)
00015658 117C 0001 0018             		move.b	#1,$18(a0)
0001565E 117C 0010 0019             		move.b	#$10,$19(a0)
00015664 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00015668 6600                       		bne.s	Obj38_DoStars	; if not, branch
0001566A 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00015670 4E75                       		rts	
00015672                            ; ===========================================================================
00015672                            
00015672                            Obj38_DoStars:
00015672 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00015676 317C 055C 0002             		move.w	#$55C,2(a0)
0001567C 4E75                       		rts	
0001567E                            ; ===========================================================================
0001567E                            
0001567E                            Obj38_Shield:				; XREF: Obj38_Index
0001567E 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00015682 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00015684 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00015688 6700                       		beq.s	Obj38_Delete	; if not, branch
0001568A 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00015690 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00015696 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
0001569C 43F9 0000 0000             		lea	(Ani_obj38).l,a1
000156A2 4EB9 0000 B218             		jsr	AnimateSprite
000156A8 4EFA 8A5C                  		jmp	DisplaySprite
000156AC                            ; ===========================================================================
000156AC                            
000156AC                            Obj38_RmvShield:
000156AC 4E75                       		rts	
000156AE                            ; ===========================================================================
000156AE                            
000156AE                            Obj38_Delete:
000156AE 4EFA 8A92                  		jmp	DeleteObject
000156B2                            ; ===========================================================================
000156B2                            
000156B2                            Obj38_Stars:				; XREF: Obj38_Index
000156B2 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000156B6 6700                       		beq.s	Obj38_Delete2	; if not, branch
000156B8 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000156BC 1228 001C                  		move.b	$1C(a0),d1
000156C0 5301                       		subq.b	#1,d1
000156C2 6000                       		bra.s	Obj38_StarTrail
000156C4                            ; ===========================================================================
000156C4 E909                       		lsl.b	#4,d1
000156C6 5801                       		addq.b	#4,d1
000156C8 9001                       		sub.b	d1,d0
000156CA 1228 0030                  		move.b	$30(a0),d1
000156CE 9001                       		sub.b	d1,d0
000156D0 5801                       		addq.b	#4,d1
000156D2 0201 000F                  		andi.b	#$F,d1
000156D6 1141 0030                  		move.b	d1,$30(a0)
000156DA 6000                       		bra.s	Obj38_StarTrail2a
000156DC                            ; ===========================================================================
000156DC                            
000156DC                            Obj38_StarTrail:			; XREF: Obj38_Stars
000156DC E709                       		lsl.b	#3,d1
000156DE 1401                       		move.b	d1,d2
000156E0 D201                       		add.b	d1,d1
000156E2 D202                       		add.b	d2,d1
000156E4 5801                       		addq.b	#4,d1
000156E6 9001                       		sub.b	d1,d0
000156E8 1228 0030                  		move.b	$30(a0),d1
000156EC 9001                       		sub.b	d1,d0
000156EE 5801                       		addq.b	#4,d1
000156F0 0C01 0018                  		cmpi.b	#$18,d1
000156F4 6500                       		bcs.s	Obj38_StarTrail2
000156F6 7200                       		moveq	#0,d1
000156F8                            
000156F8                            Obj38_StarTrail2:
000156F8 1141 0030                  		move.b	d1,$30(a0)
000156FC                            
000156FC                            Obj38_StarTrail2a:
000156FC 43F8 CB00                  		lea	($FFFFCB00).w,a1
00015700 43F1 0000                  		lea	(a1,d0.w),a1
00015704 3159 0008                  		move.w	(a1)+,8(a0)
00015708 3159 000C                  		move.w	(a1)+,$C(a0)
0001570C 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00015712 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00015718 4EB9 0000 B218             		jsr	AnimateSprite
0001571E 4EFA 89E6                  		jmp	DisplaySprite
00015722                            ; ===========================================================================
00015722                            
00015722                            Obj38_Delete2:				; XREF: Obj38_Stars
00015722 4EFA 8A1E                  		jmp	DeleteObject
00015726                            ; ===========================================================================
00015726                            ; ---------------------------------------------------------------------------
00015726                            ; Object 4A - special stage entry from beta
00015726                            ; ---------------------------------------------------------------------------
00015726                            
00015726                            Obj4A:					; XREF: Obj_Index
00015726 7000                       		moveq	#0,d0
00015728 1028 0024                  		move.b	$24(a0),d0
0001572C 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00015730 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00015734                            ; ===========================================================================
00015734 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00015736 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00015738 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
0001573A                            ; ===========================================================================
0001573A                            
0001573A                            Obj4A_Main:				; XREF: Obj4A_Index
0001573A 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
0001573E 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00015740 4E75                       		rts	
00015742                            ; ===========================================================================
00015742                            
00015742                            Obj4A_Main2:
00015742 5428 0024                  		addq.b	#2,$24(a0)
00015746 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
0001574E 117C 0004 0001             		move.b	#4,1(a0)
00015754 117C 0001 0018             		move.b	#1,$18(a0)
0001575A 117C 0038 0019             		move.b	#$38,$19(a0)
00015760 317C 0541 0002             		move.w	#$541,2(a0)
00015766 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
0001576C                            
0001576C                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
0001576C 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00015772 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00015778 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
0001577E 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00015784 4EB9 0000 B218             		jsr	AnimateSprite
0001578A 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00015790 6600                       		bne.s	Obj4A_Display
00015792 4A38 D000                  		tst.b	($FFFFD000).w
00015796 6700                       		beq.s	Obj4A_Display
00015798 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
0001579E 303C 00A8                  		move.w	#$A8,d0
000157A2 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
000157A8                            
000157A8                            Obj4A_Display:
000157A8 4EFA 895C                  		jmp	DisplaySprite
000157AC                            ; ===========================================================================
000157AC                            
000157AC                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
000157AC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
000157B0 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
000157B2 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000157B8 4EFA 8988                  		jmp	DeleteObject
000157BC                            ; ===========================================================================
000157BC                            
000157BC                            Obj4A_Wait:
000157BC 4E75                       		rts	
000157BE                            ; ===========================================================================
000157BE                            	include "_inc\sub RememberState.asm"
000157BE                            ; ---------------------------------------------------------------------------
000157BE                            ; Subroutine to remember whether an object is destroyed/collected
000157BE                            ; ---------------------------------------------------------------------------
000157BE                            
000157BE                            RememberState:
000157DC 6000 8928                  		bra.w	DisplaySprite
000157E0                            
000157E0                            	@offscreen:
000157E0 45F8 FC00                  		lea	(v_objstate).w,a2
000157E4 7000                       		moveq	#0,d0
000157E6 1028 0023                  		move.b	obRespawnNo(a0),d0
000157EA 6700                       		beq.s	@delete
000157EC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000157F2                            
000157F2                            	@delete:
000157F2 6000 894E                  		bra.w	DeleteObject
000157F2 6000 894E                  		bra.w	DeleteObject
000157F6 =00000034                  id_Roll:	equ (SonAni_Roll-SonicAniData)/2	; 2
000157F6 0000 0000                  ptr_sndCC:	dc.l SoundCC
000157FA                            ani_booster:
000157FA                            	include "_anim\speedbooster.asm"
000157FA                            ; ---------------------------------------------------------------------------
000157FA                            ; Animation script - Sonic 4's Speed Booster
000157FA                            ; ---------------------------------------------------------------------------
000157FA 0000                       		dc.w idle-Ani_Booster
000157FC 0101 0101 FE01             idle:	dc.b 1,	1, 1, 1, $FE, 1
00015802                            		even
00015802                            		even
00015802                            speedboosters:
00015802                            	include "_inc\speedbooster.asm"
00015802                            ; ----------------------------------------------------------------------------
00015802                            ; Object 06 - Booster things from CPZ
00015802                            ; ----------------------------------------------------------------------------
00015802                            
00015802                            		; DATA XREF: ROM:0001600Co
00015802 7000                       		moveq	#0,d0
00015804 1028 0024                  		move.b	obRoutine(a0),d0
00015808 323B 0000                  		move.w	Booster_Index(pc,d0.w),d1
0001580C 4EFB 1000                  		jmp	Booster_Index(pc,d1.w)
00015810                            ; ===========================================================================
00015810 0000                       Booster_Index:	dc.w Booster_Init-Booster_Index; 0 ; DATA XREF: h+B346o h+B348o
00015812 0000                       		dc.w Booster_Loop-Booster_Index; 1
00015814 1000                       word_222BE:	dc.w $1000		; 0
00015816 0A00                       		dc.w  $A00		; 1
00015818                            ; ===========================================================================
00015818                            
00015818                            Booster_Init:				; DATA XREF: h+B346o
00015818 5428 0024                  		addq.b	#2,obRoutine(a0)
0001581C 217C 0000 0000 0004        		move.l	#Map_SpeedBooster,obMap(a0)
00015824                            		
00015824                            		;move.w	#$372,obGfx(a0) ; SYZ2 specific code
00015824                            		;cmpi.w	#(id_SYZ<<8)+1,(v_zone).w ; check if level is SY2
00015824                            		;beq.s	@Continue	; if yes, branch
00015824 317C 5000 0002             		move.w	#$0400*20,obGfx(a0) ; 0 = palette line, XXX = Tile address (VRAM address / $20)
0001582A                            		
0001582A                            	@Continue:	
0001582A                            		;bsr.w	loc_22402
0001582A 0028 0004 0001             		ori.b	#4,obRender(a0)
00015830 117C 0020 0019             		move.b	#$20,obActWid(a0) ; ' '
00015836 117C 0001 0018             		move.b	#1,obPriority(a0)
0001583C 1028 0028                  		move.b	obSubtype(a0),d0
00015840 0240 0002                  		andi.w	#2,d0
00015844 317B 00CE 0030             		move.w	word_222BE(pc,d0.w),$30(a0)
0001584A                            
0001584A                            Booster_Loop:				; DATA XREF: h+B346o
0001584A                            		;move.b	(obTimeFrame).w,obFrame(a0)
0001584A                            		;andi.b	#2,d0
0001584A                            		;move.b	d0,obFrame(a0)
0001584A                            		;move.b	(v_ani1_frame).w,obFrame(a0)
0001584A 3028 0008                  		move.w	obX(a0),d0
0001584E 3200                       		move.w	d0,d1
00015850 0440 0010                  		subi.w	#$10,d0
00015854 0641 0010                  		addi.w	#$10,d1
00015858 3428 000C                  		move.w	obY(a0),d2
0001585C 3602                       		move.w	d2,d3
0001585E 0442 0010                  		subi.w	#$10,d2
00015862 0643 0010                  		addi.w	#$10,d3
00015866                            		;lea	($FFFFB000).w,a1
00015866 43F8 D000                  		lea	(v_player).w,a1
0001586A 0829 0001 0022             		btst	#1,obStatus(a1)
00015870 6600                       		bne.s	loc_22384
00015872 3829 0008                  		move.w	obX(a1),d4
00015876 B840                       		cmp.w	d0,d4
00015878 6500 0000                  		bcs.w	loc_22384
0001587C B841                       		cmp.w	d1,d4
0001587E 6400 0000                  		bcc.w	loc_22384
00015882 3829 000C                  		move.w	obY(a1),d4
00015886 B842                       		cmp.w	d2,d4
00015888 6500 0000                  		bcs.w	loc_22384
0001588C B843                       		cmp.w	d3,d4
0001588E 6400 0000                  		bcc.w	loc_22384
00015892 3F00                       		move.w	d0,-(sp)
00015894 6100 0000                  		bsr.w	loc_22388
00015898 301F                       		move.w	(sp)+,d0
0001589A                            		;bsr.w	loc_22388
0001589A                            
0001589A                            ;loc_22354:				; CODE XREF: h+B3B6j h+B3BEj ...
0001589A                            		;lea	(v_player).w,a1 ; a1=character
0001589A                            		;btst	#1,$22(a1)
0001589A                            		;bne.s	loc_22384
0001589A                            		;move.w	8(a1),d4
0001589A                            		;cmp.w	d0,d4
0001589A                            		;bcs.w	loc_22384
0001589A                            		;cmp.w	d1,d4
0001589A                            		;bcc.w	loc_22384
0001589A                            		;move.w	$C(a1),d4
0001589A                            		;cmp.w	d2,d4
0001589A                            		;bcs.w	loc_22384
0001589A                            		;cmp.w	d3,d4
0001589A                            		;bcc.w	loc_22384
0001589A                            		;bsr.w	loc_22388
0001589A                            
0001589A                            loc_22384:				; CODE XREF: h+B3EAj h+B3F2j ...
0001589A 4EFA A92C                  		jmp	MarkObjGone		;jsr	loc_223FC
0001589E                            ; ===========================================================================
0001589E                            
0001589E                            loc_22388:				; CODE XREF: h+B3DAp h+B40Cp
0001589E 3029 0010                  		move.w	obVelX(a1),d0
000158A2 0828 0000 0022             		btst	#0,obStatus(a0)
000158A8 6700                       		beq.s	loc_22396
000158AA 4440                       		neg.w	d0
000158AC                            
000158AC                            loc_22396:				; CODE XREF: h+B41Ej
000158AC 0C40 1000                  		cmpi.w	#$1000,d0 			; is the character already going super fast?
000158B0 6C00                       		bge.s	loc_223D8 			; if yes, branch to not change the speed
000158B2 3368 0030 0010             		move.w	$30(a0),obVelX(a1)  ; make the character go super fast
000158B8 08A9 0000 0022             		bclr	#0,obStatus(a1)		; turn him right
000158BE 0828 0000 0022             		btst	#0,obStatus(a0)		; was that the correct direction?
000158C4 6700                       		beq.s	loc_223BA 			; if yes, branch
000158C6 08E9 0000 0022             		bset	#0,obStatus(a1)		; turn him left
000158CC 4469 0010                  		neg.w	obVelX(a1)			; make the boosting direction left
000158D0                            
000158D0                            loc_223BA:				; CODE XREF: h+B43Aj
000158D0                            		;move.w	#$F,$2E(a1)
000158D0 3369 0010 0014             		move.w	obVelX(a1),obInertia(a1)
000158D6 08A8 0005 0022             		bclr	#5,obStatus(a0)
000158DC 08A8 0006 0022             		bclr	#6,obStatus(a0)
000158E2 08A9 0005 0022             		bclr	#5,obStatus(a1)
000158E8                            		
000158E8                            		;addq.w	#5,obY(a1)
000158E8                            
000158E8                            loc_223D8:				; CODE XREF: h+B426j
000158E8                            		;move.w	#$D1,d0	; 'Ì'
000158E8                            		;jmp	(play_SFX).l
000158E8                            ;		bset	#2,obStatus(a1)		;set rolling bit
000158E8                            ;		move.b	#$E,obHeight(a1) 	; change hitbox
000158E8                            ;		move.b	#7,obWidth(a1)	  	; change hitbox
000158E8                            ;		move.b	#id_Roll,obAnim(a1) ; use "rolling" animation
000158E8 303C 00D1                  		move.w	#$D1,d0
000158EC 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play spring sound
000158F2                            ; ===========================================================================
000158F2                            ; -------------------------------------------------------------------------------
000158F2                            ; sprite mappings
000158F2                            ; -------------------------------------------------------------------------------
000158F2                            Map_SpeedBooster:	incbin "_maps/SpeedBooster.asm"
00015ACC                            Nem_SpeedBooster:	incbin "artnem/speedbooster.bin"
00015CC3                            ; ===========================================================================
00015CC3                            
00015CC3                            ;loc_223FC:				; CODE XREF: h+B410j	
00015CC3                            ;       out_of_range    DeleteObject
00015CC3                            ;		lea	(Ani_Eggman).l,a1
00015CC3                            ;		jsr	AnimateSprite
00015CC3                            ;		bra.w	RememberState
00015CC3                            ;		even
00015CC3                            ;		even
00015CC3                            ; ---------------------------------------------------------------------------
00015CC3                            ; Object 08 - water splash (LZ)
00015CC3                            ; ---------------------------------------------------------------------------
00015CC3                            
00015CC3                            Obj08:					; XREF: Obj_Index
00015CC4 0070 00                    		moveq	#0,d0
00015CC6 1028 0024                  		move.b	$24(a0),d0
00015CCA 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00015CCE 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00015CD2                            ; ===========================================================================
00015CD2 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00015CD4 0000                       		dc.w Obj08_Display-Obj08_Index
00015CD6 0000                       		dc.w Obj08_Delete-Obj08_Index
00015CD8                            ; ===========================================================================
00015CD8                            
00015CD8                            Obj08_Main:				; XREF: Obj08_Index
00015CD8 5428 0024                  		addq.b	#2,$24(a0)
00015CDC 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00015CE4 0028 0004 0001             		ori.b	#4,1(a0)
00015CEA 117C 0001 0018             		move.b	#1,$18(a0)
00015CF0 117C 0010 0019             		move.b	#$10,$19(a0)
00015CF6 317C 4259 0002             		move.w	#$4259,2(a0)
00015CFC 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00015D02                            
00015D02                            Obj08_Display:				; XREF: Obj08_Index
00015D02 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00015D08 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00015D0E 4EB9 0000 B218             		jsr	AnimateSprite
00015D14 4EFA 83F0                  		jmp	DisplaySprite
00015D18                            ; ===========================================================================
00015D18                            
00015D18                            Obj08_Delete:				; XREF: Obj08_Index
00015D18 4EFA 8428                  		jmp	DeleteObject	; delete when animation	is complete
00015D1C                            ; ===========================================================================
00015D1C                            Ani_obj38:
00015D1C                            	include "_anim\obj38.asm"
00015D1C                            ; ---------------------------------------------------------------------------
00015D1C                            ; Animation script - shield and invincibility stars
00015D1C                            ; ---------------------------------------------------------------------------
00015D1C 0000                       		dc.w byte_14356-Ani_obj38
00015D1E 0000                       		dc.w byte_1435E-Ani_obj38
00015D20 0000                       		dc.w byte_14364-Ani_obj38
00015D22 0000                       		dc.w byte_1437E-Ani_obj38
00015D24 0000                       		dc.w byte_14398-Ani_obj38
00015D26 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00015D2E 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00015D34 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00015D45 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00015D4E 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00015D5F 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00015D68 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00015D79 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00015D82                            		even
00015D82                            		even
00015D82                            
00015D82                            ; ---------------------------------------------------------------------------
00015D82                            ; Sprite mappings - shield and invincibility stars
00015D82                            ; ---------------------------------------------------------------------------
00015D82                            Map_obj38:
00015D82                            	include "_maps\obj38.asm"
00015D82                            ; ---------------------------------------------------------------------------
00015D82                            ; Sprite mappings - shield and invincibility stars
00015D82                            ; ---------------------------------------------------------------------------
00015D82 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00015D86 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00015D8A 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00015D8E 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00015D92 04                         byte_143C2:	dc.b 4
00015D93 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00015D98 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00015D9D 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00015DA2 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00015DA7 04                         byte_143D7:	dc.b 4
00015DA8 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00015DAD E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00015DB2 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00015DB7 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00015DBC 04                         byte_143EC:	dc.b 4
00015DBD E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00015DC2 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00015DC7 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00015DCC 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00015DD1 04                         byte_14401:	dc.b 4
00015DD2 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00015DD7 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00015DDC 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00015DE1 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00015DE6 04                         byte_14416:	dc.b 4
00015DE7 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00015DEC E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00015DF1 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00015DF6 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00015DFB 04                         byte_1442B:	dc.b 4
00015DFC E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00015E01 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00015E06 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00015E0B 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00015E10 04                         byte_14440:	dc.b 4
00015E11 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00015E16 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00015E1B 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00015E20 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00015E26 00                         		even
00015E26 00                         		even
00015E26                            
00015E26                            Ani_obj4A:
00015E26                            	include "_anim\obj4A.asm"
00015E26                            ; ---------------------------------------------------------------------------
00015E26                            ; Animation script - special stage entry effect from beta
00015E26                            ; ---------------------------------------------------------------------------
00015E26 0000                       		dc.w byte_14458-Ani_obj4A
00015E28 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00015E3C                            		even
00015E3C                            		even
00015E3C                            
00015E3C                            ; ---------------------------------------------------------------------------
00015E3C                            ; Sprite mappings - special stage entry	from beta
00015E3C                            ; ---------------------------------------------------------------------------
00015E3C                            Map_obj4A:
00015E3C                            	include "_maps\obj4A.asm"
00015E3C                            ; ---------------------------------------------------------------------------
00015E3C                            ; Sprite mappings - special stage entry	from beta
00015E3C                            ; ---------------------------------------------------------------------------
00015E3C 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00015E40 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00015E44 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00015E48 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00015E4C 03                         byte_1447C:	dc.b 3
00015E4D F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00015E52 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00015E57 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00015E5C 03                         byte_1448C:	dc.b 3
00015E5D F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00015E62 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00015E67 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00015E6C 05                         byte_1449C:	dc.b 5
00015E6D E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00015E72 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00015E77 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00015E7C 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00015E81 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00015E86 09                         byte_144B6:	dc.b 9
00015E87 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00015E8C F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00015E91 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00015E96 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00015E9B F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00015EA0 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00015EA5 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00015EAA 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00015EAF F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00015EB4 12                         byte_144E4:	dc.b $12
00015EB5 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00015EBA F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00015EBF F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00015EC4 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00015EC9 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00015ECE 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00015ED3 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00015ED8 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00015EDD 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00015EE2 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00015EE7 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00015EEC 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00015EF1 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00015EF6 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00015EFB 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00015F00 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00015F05 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00015F0A F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00015F0F 11                         byte_1453F:	dc.b $11
00015F10 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00015F15 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00015F1A 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00015F1F 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00015F24 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00015F29 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00015F2E 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00015F33 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00015F38 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00015F3D 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00015F42 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00015F47 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00015F4C F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00015F51 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00015F56 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00015F5B 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00015F60 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00015F65 09                         byte_14595:	dc.b 9
00015F66 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00015F6B 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00015F70 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00015F75 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00015F7A FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00015F7F FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00015F84 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00015F89 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00015F8E 04                         		dc.b 4
00015F8F 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00015F94                            		even
00015F94                            		even
00015F94                            
00015F94                            Ani_obj08:
00015F94                            	include "_anim\obj08.asm"
00015F94                            ; ---------------------------------------------------------------------------
00015F94                            ; Animation script - water splash (LZ)
00015F94                            ; ---------------------------------------------------------------------------
00015F94 0000                       		dc.w byte_145C6-Ani_obj08
00015F96 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00015F9C                            		even
00015F9C                            		even
00015F9C                            
00015F9C                            ; ---------------------------------------------------------------------------
00015F9C                            ; Sprite mappings - water splash (LZ)
00015F9C                            ; ---------------------------------------------------------------------------
00015F9C                            Map_obj08:
00015F9C                            	include "_maps\obj08.asm"
00015F9C                            ; ---------------------------------------------------------------------------
00015F9C                            ; Sprite mappings - water splash (LZ)
00015F9C                            ; ---------------------------------------------------------------------------
00015F9C 0000                       		dc.w byte_145D2-Map_obj08
00015F9E 0000                       		dc.w byte_145DD-Map_obj08
00015FA0 0000                       		dc.w byte_145E8-Map_obj08
00015FA2 02                         byte_145D2:	dc.b 2
00015FA3 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00015FA8 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00015FAD 02                         byte_145DD:	dc.b 2
00015FAE E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00015FB3 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00015FB8 01                         byte_145E8:	dc.b 1
00015FB9 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00015FBE                            		even
00015FBE                            		even
00015FBE                            
00015FBE                            ; ---------------------------------------------------------------------------
00015FBE                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00015FBE                            ; ---------------------------------------------------------------------------
00015FBE                            
00015FBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015FBE                            
00015FBE                            
00015FBE                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00015FBE 0828 0003 0022             		btst	#3,$22(a0)
00015FC4 6700                       		beq.s	loc_14602
00015FC6 7000                       		moveq	#0,d0
00015FC8 11C0 F768                  		move.b	d0,($FFFFF768).w
00015FCC 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015FD0 4E75                       		rts	
00015FD2                            ; ===========================================================================
00015FD2                            
00015FD2                            loc_14602:
00015FD2 7003                       		moveq	#3,d0
00015FD4 11C0 F768                  		move.b	d0,($FFFFF768).w
00015FD8 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015FDC 1028 0026                  		move.b	$26(a0),d0
00015FE0 0600 0020                  		addi.b	#$20,d0
00015FE4 6A00                       		bpl.s	loc_14624
00015FE6 1028 0026                  		move.b	$26(a0),d0
00015FEA 6A00                       		bpl.s	loc_1461E
00015FEC 5300                       		subq.b	#1,d0
00015FEE                            
00015FEE                            loc_1461E:
00015FEE 0600 0020                  		addi.b	#$20,d0
00015FF2 6000                       		bra.s	loc_14630
00015FF4                            ; ===========================================================================
00015FF4                            
00015FF4                            loc_14624:
00015FF4 1028 0026                  		move.b	$26(a0),d0
00015FF8 6A00                       		bpl.s	loc_1462C
00015FFA 5200                       		addq.b	#1,d0
00015FFC                            
00015FFC                            loc_1462C:
00015FFC 0600 001F                  		addi.b	#$1F,d0
00016000                            
00016000                            loc_14630:
00016000 0200 00C0                  		andi.b	#$C0,d0
00016004 0C00 0040                  		cmpi.b	#$40,d0
00016008 6700 0000                  		beq.w	Sonic_WalkVertL
0001600C 0C00 0080                  		cmpi.b	#$80,d0
00016010 6700 0000                  		beq.w	Sonic_WalkCeiling
00016014 0C00 00C0                  		cmpi.b	#$C0,d0
00016018 6700 0000                  		beq.w	Sonic_WalkVertR
0001601C 3428 000C                  		move.w	$C(a0),d2
00016020 3628 0008                  		move.w	8(a0),d3
00016024 7000                       		moveq	#0,d0
00016026 1028 0016                  		move.b	$16(a0),d0
0001602A 4880                       		ext.w	d0
0001602C D440                       		add.w	d0,d2
0001602E 1028 0017                  		move.b	$17(a0),d0
00016032 4880                       		ext.w	d0
00016034 D640                       		add.w	d0,d3
00016036 49F8 F768                  		lea	($FFFFF768).w,a4
0001603A 367C 0010                  		movea.w	#$10,a3
0001603E 3C3C 0000                  		move.w	#0,d6
00016042 7A0D                       		moveq	#$D,d5
00016044 6100 0000                  		bsr.w	FindFloor
00016048 3F01                       		move.w	d1,-(sp)
0001604A 3428 000C                  		move.w	$C(a0),d2
0001604E 3628 0008                  		move.w	8(a0),d3
00016052 7000                       		moveq	#0,d0
00016054 1028 0016                  		move.b	$16(a0),d0
00016058 4880                       		ext.w	d0
0001605A D440                       		add.w	d0,d2
0001605C 1028 0017                  		move.b	$17(a0),d0
00016060 4880                       		ext.w	d0
00016062 4440                       		neg.w	d0
00016064 D640                       		add.w	d0,d3
00016066 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001606A 367C 0010                  		movea.w	#$10,a3
0001606E 3C3C 0000                  		move.w	#0,d6
00016072 7A0D                       		moveq	#$D,d5
00016074 6100 0000                  		bsr.w	FindFloor
00016078 301F                       		move.w	(sp)+,d0
0001607A 6100 0000                  		bsr.w	Sonic_Angle
0001607E 4A41                       		tst.w	d1
00016080 6700                       		beq.s	locret_146BE
00016082 6A00                       		bpl.s	loc_146C0
00016084 0C41 FFF2                  		cmpi.w	#-$E,d1
00016088 6D00                       		blt.s	locret_146E6
0001608A D368 000C                  		add.w	d1,$C(a0)
0001608E                            
0001608E                            locret_146BE:
0001608E 4E75                       		rts	
00016090                            ; ===========================================================================
00016090                            
00016090                            loc_146C0:
00016090 0C41 000E                  		cmpi.w	#$E,d1
00016094 6E00                       		bgt.s	loc_146CC
00016096                            
00016096                            loc_146C6:
00016096 D368 000C                  		add.w	d1,$C(a0)
0001609A 4E75                       		rts	
0001609C                            ; ===========================================================================
0001609C                            
0001609C                            loc_146CC:
0001609C 4A28 0038                  		tst.b	$38(a0)
000160A0 66F4                       		bne.s	loc_146C6
000160A2 08E8 0001 0022             		bset	#1,$22(a0)
000160A8 08A8 0005 0022             		bclr	#5,$22(a0)
000160AE 117C 0001 001D             		move.b	#1,$1D(a0)
000160B4 4E75                       		rts	
000160B6                            ; ===========================================================================
000160B6                            
000160B6                            locret_146E6:
000160B6 4E75                       		rts	
000160B8                            ; End of function Sonic_AnglePos
000160B8                            
000160B8                            ; ===========================================================================
000160B8 2428 0008                  		move.l	8(a0),d2
000160BC 3028 0010                  		move.w	$10(a0),d0
000160C0 48C0                       		ext.l	d0
000160C2 E180                       		asl.l	#8,d0
000160C4 9480                       		sub.l	d0,d2
000160C6 2142 0008                  		move.l	d2,8(a0)
000160CA 303C 0038                  		move.w	#$38,d0
000160CE 48C0                       		ext.l	d0
000160D0 E180                       		asl.l	#8,d0
000160D2 9680                       		sub.l	d0,d3
000160D4 2143 000C                  		move.l	d3,$C(a0)
000160D8 4E75                       		rts	
000160DA                            ; ===========================================================================
000160DA                            
000160DA                            locret_1470A:
000160DA 4E75                       		rts	
000160DC                            ; ===========================================================================
000160DC 2628 000C                  		move.l	$C(a0),d3
000160E0 3028 0012                  		move.w	$12(a0),d0
000160E4 0440 0038                  		subi.w	#$38,d0
000160E8 3140 0012                  		move.w	d0,$12(a0)
000160EC 48C0                       		ext.l	d0
000160EE E180                       		asl.l	#8,d0
000160F0 9680                       		sub.l	d0,d3
000160F2 2143 000C                  		move.l	d3,$C(a0)
000160F6 4E75                       		rts	
000160F8 4E75                       		rts	
000160FA                            ; ===========================================================================
000160FA 2428 0008                  		move.l	8(a0),d2
000160FE 2628 000C                  		move.l	$C(a0),d3
00016102 3028 0010                  		move.w	$10(a0),d0
00016106 48C0                       		ext.l	d0
00016108 E180                       		asl.l	#8,d0
0001610A 9480                       		sub.l	d0,d2
0001610C 3028 0012                  		move.w	$12(a0),d0
00016110 48C0                       		ext.l	d0
00016112 E180                       		asl.l	#8,d0
00016114 9680                       		sub.l	d0,d3
00016116 2142 0008                  		move.l	d2,8(a0)
0001611A 2143 000C                  		move.l	d3,$C(a0)
0001611E 4E75                       		rts	
00016120                            
00016120                            ; ---------------------------------------------------------------------------
00016120                            ; Subroutine to	change Sonic's angle as he walks along the floor
00016120                            ; ---------------------------------------------------------------------------
00016120                            
00016120                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016120                            
00016120                            
00016120                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00016120 1438 F76A                  		move.b	($FFFFF76A).w,d2
00016124 B240                       		cmp.w	d0,d1
00016126 6F00                       		ble.s	loc_1475E
00016128 1438 F768                  		move.b	($FFFFF768).w,d2
0001612C 3200                       		move.w	d0,d1
0001612E                            
0001612E                            loc_1475E:
0001612E 0802 0000                  		btst	#0,d2
00016132 6600                       		bne.s	loc_1476A
00016134 1142 0026                  		move.b	d2,$26(a0)
00016138 4E75                       		rts	
0001613A                            ; ===========================================================================
0001613A                            
0001613A                            loc_1476A:
0001613A 1428 0026                  		move.b	$26(a0),d2
0001613E 0602 0020                  		addi.b	#$20,d2
00016142 0202 00C0                  		andi.b	#$C0,d2
00016146 1142 0026                  		move.b	d2,$26(a0)
0001614A 4E75                       		rts	
0001614C                            ; End of function Sonic_Angle
0001614C                            
0001614C                            ; ---------------------------------------------------------------------------
0001614C                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
0001614C                            ; ---------------------------------------------------------------------------
0001614C                            
0001614C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001614C                            
0001614C                            
0001614C                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
0001614C 3428 000C                  		move.w	$C(a0),d2
00016150 3628 0008                  		move.w	8(a0),d3
00016154 7000                       		moveq	#0,d0
00016156 1028 0017                  		move.b	$17(a0),d0
0001615A 4880                       		ext.w	d0
0001615C 4440                       		neg.w	d0
0001615E D440                       		add.w	d0,d2
00016160 1028 0016                  		move.b	$16(a0),d0
00016164 4880                       		ext.w	d0
00016166 D640                       		add.w	d0,d3
00016168 49F8 F768                  		lea	($FFFFF768).w,a4
0001616C 367C 0010                  		movea.w	#$10,a3
00016170 3C3C 0000                  		move.w	#0,d6
00016174 7A0D                       		moveq	#$D,d5
00016176 6100 0000                  		bsr.w	FindWall
0001617A 3F01                       		move.w	d1,-(sp)
0001617C 3428 000C                  		move.w	$C(a0),d2
00016180 3628 0008                  		move.w	8(a0),d3
00016184 7000                       		moveq	#0,d0
00016186 1028 0017                  		move.b	$17(a0),d0
0001618A 4880                       		ext.w	d0
0001618C D440                       		add.w	d0,d2
0001618E 1028 0016                  		move.b	$16(a0),d0
00016192 4880                       		ext.w	d0
00016194 D640                       		add.w	d0,d3
00016196 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001619A 367C 0010                  		movea.w	#$10,a3
0001619E 3C3C 0000                  		move.w	#0,d6
000161A2 7A0D                       		moveq	#$D,d5
000161A4 6100 0000                  		bsr.w	FindWall
000161A8 301F                       		move.w	(sp)+,d0
000161AA 6100 FF74                  		bsr.w	Sonic_Angle
000161AE 4A41                       		tst.w	d1
000161B0 6700                       		beq.s	locret_147F0
000161B2 6A00                       		bpl.s	loc_147F2
000161B4 0C41 FFF2                  		cmpi.w	#-$E,d1
000161B8 6D00 FF20                  		blt.w	locret_1470A
000161BC D368 0008                  		add.w	d1,8(a0)
000161C0                            
000161C0                            locret_147F0:
000161C0 4E75                       		rts	
000161C2                            ; ===========================================================================
000161C2                            
000161C2                            loc_147F2:
000161C2 0C41 000E                  		cmpi.w	#$E,d1
000161C6 6E00                       		bgt.s	loc_147FE
000161C8                            
000161C8                            loc_147F8:
000161C8 D368 0008                  		add.w	d1,8(a0)
000161CC 4E75                       		rts	
000161CE                            ; ===========================================================================
000161CE                            
000161CE                            loc_147FE:
000161CE 4A28 0038                  		tst.b	$38(a0)
000161D2 66F4                       		bne.s	loc_147F8
000161D4 08E8 0001 0022             		bset	#1,$22(a0)
000161DA 08A8 0005 0022             		bclr	#5,$22(a0)
000161E0 117C 0001 001D             		move.b	#1,$1D(a0)
000161E6 4E75                       		rts	
000161E8                            ; End of function Sonic_WalkVertR
000161E8                            
000161E8                            ; ---------------------------------------------------------------------------
000161E8                            ; Subroutine allowing Sonic to walk upside-down
000161E8                            ; ---------------------------------------------------------------------------
000161E8                            
000161E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000161E8                            
000161E8                            
000161E8                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
000161E8 3428 000C                  		move.w	$C(a0),d2
000161EC 3628 0008                  		move.w	8(a0),d3
000161F0 7000                       		moveq	#0,d0
000161F2 1028 0016                  		move.b	$16(a0),d0
000161F6 4880                       		ext.w	d0
000161F8 9440                       		sub.w	d0,d2
000161FA 0A42 000F                  		eori.w	#$F,d2
000161FE 1028 0017                  		move.b	$17(a0),d0
00016202 4880                       		ext.w	d0
00016204 D640                       		add.w	d0,d3
00016206 49F8 F768                  		lea	($FFFFF768).w,a4
0001620A 367C FFF0                  		movea.w	#-$10,a3
0001620E 3C3C 1000                  		move.w	#$1000,d6
00016212 7A0D                       		moveq	#$D,d5
00016214 6100 0000                  		bsr.w	FindFloor
00016218 3F01                       		move.w	d1,-(sp)
0001621A 3428 000C                  		move.w	$C(a0),d2
0001621E 3628 0008                  		move.w	8(a0),d3
00016222 7000                       		moveq	#0,d0
00016224 1028 0016                  		move.b	$16(a0),d0
00016228 4880                       		ext.w	d0
0001622A 9440                       		sub.w	d0,d2
0001622C 0A42 000F                  		eori.w	#$F,d2
00016230 1028 0017                  		move.b	$17(a0),d0
00016234 4880                       		ext.w	d0
00016236 9640                       		sub.w	d0,d3
00016238 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001623C 367C FFF0                  		movea.w	#-$10,a3
00016240 3C3C 1000                  		move.w	#$1000,d6
00016244 7A0D                       		moveq	#$D,d5
00016246 6100 0000                  		bsr.w	FindFloor
0001624A 301F                       		move.w	(sp)+,d0
0001624C 6100 FED2                  		bsr.w	Sonic_Angle
00016250 4A41                       		tst.w	d1
00016252 6700                       		beq.s	locret_14892
00016254 6A00                       		bpl.s	loc_14894
00016256 0C41 FFF2                  		cmpi.w	#-$E,d1
0001625A 6D00 FE5A                  		blt.w	locret_146E6
0001625E 9368 000C                  		sub.w	d1,$C(a0)
00016262                            
00016262                            locret_14892:
00016262 4E75                       		rts	
00016264                            ; ===========================================================================
00016264                            
00016264                            loc_14894:
00016264 0C41 000E                  		cmpi.w	#$E,d1
00016268 6E00                       		bgt.s	loc_148A0
0001626A                            
0001626A                            loc_1489A:
0001626A 9368 000C                  		sub.w	d1,$C(a0)
0001626E 4E75                       		rts	
00016270                            ; ===========================================================================
00016270                            
00016270                            loc_148A0:
00016270 4A28 0038                  		tst.b	$38(a0)
00016274 66F4                       		bne.s	loc_1489A
00016276 08E8 0001 0022             		bset	#1,$22(a0)
0001627C 08A8 0005 0022             		bclr	#5,$22(a0)
00016282 117C 0001 001D             		move.b	#1,$1D(a0)
00016288 4E75                       		rts	
0001628A                            ; End of function Sonic_WalkCeiling
0001628A                            
0001628A                            ; ---------------------------------------------------------------------------
0001628A                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
0001628A                            ; ---------------------------------------------------------------------------
0001628A                            
0001628A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001628A                            
0001628A                            
0001628A                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
0001628A 3428 000C                  		move.w	$C(a0),d2
0001628E 3628 0008                  		move.w	8(a0),d3
00016292 7000                       		moveq	#0,d0
00016294 1028 0017                  		move.b	$17(a0),d0
00016298 4880                       		ext.w	d0
0001629A 9440                       		sub.w	d0,d2
0001629C 1028 0016                  		move.b	$16(a0),d0
000162A0 4880                       		ext.w	d0
000162A2 9640                       		sub.w	d0,d3
000162A4 0A43 000F                  		eori.w	#$F,d3
000162A8 49F8 F768                  		lea	($FFFFF768).w,a4
000162AC 367C FFF0                  		movea.w	#-$10,a3
000162B0 3C3C 0800                  		move.w	#$800,d6
000162B4 7A0D                       		moveq	#$D,d5
000162B6 6100 0000                  		bsr.w	FindWall
000162BA 3F01                       		move.w	d1,-(sp)
000162BC 3428 000C                  		move.w	$C(a0),d2
000162C0 3628 0008                  		move.w	8(a0),d3
000162C4 7000                       		moveq	#0,d0
000162C6 1028 0017                  		move.b	$17(a0),d0
000162CA 4880                       		ext.w	d0
000162CC D440                       		add.w	d0,d2
000162CE 1028 0016                  		move.b	$16(a0),d0
000162D2 4880                       		ext.w	d0
000162D4 9640                       		sub.w	d0,d3
000162D6 0A43 000F                  		eori.w	#$F,d3
000162DA 49F8 F76A                  		lea	($FFFFF76A).w,a4
000162DE 367C FFF0                  		movea.w	#-$10,a3
000162E2 3C3C 0800                  		move.w	#$800,d6
000162E6 7A0D                       		moveq	#$D,d5
000162E8 6100 0000                  		bsr.w	FindWall
000162EC 301F                       		move.w	(sp)+,d0
000162EE 6100 FE30                  		bsr.w	Sonic_Angle
000162F2 4A41                       		tst.w	d1
000162F4 6700                       		beq.s	locret_14934
000162F6 6A00                       		bpl.s	loc_14936
000162F8 0C41 FFF2                  		cmpi.w	#-$E,d1
000162FC 6D00 FDDC                  		blt.w	locret_1470A
00016300 9368 0008                  		sub.w	d1,8(a0)
00016304                            
00016304                            locret_14934:
00016304 4E75                       		rts	
00016306                            ; ===========================================================================
00016306                            
00016306                            loc_14936:
00016306 0C41 000E                  		cmpi.w	#$E,d1
0001630A 6E00                       		bgt.s	loc_14942
0001630C                            
0001630C                            loc_1493C:
0001630C 9368 0008                  		sub.w	d1,8(a0)
00016310 4E75                       		rts	
00016312                            ; ===========================================================================
00016312                            
00016312                            loc_14942:
00016312 4A28 0038                  		tst.b	$38(a0)
00016316 66F4                       		bne.s	loc_1493C
00016318 08E8 0001 0022             		bset	#1,$22(a0)
0001631E 08A8 0005 0022             		bclr	#5,$22(a0)
00016324 117C 0001 001D             		move.b	#1,$1D(a0)
0001632A 4E75                       		rts	
0001632C                            ; End of function Sonic_WalkVertL
0001632C                            
0001632C                            ; ---------------------------------------------------------------------------
0001632C                            ; Subroutine to	find which tile	the object is standing on
0001632C                            ; ---------------------------------------------------------------------------
0001632C                            
0001632C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001632C                            
0001632C                            
0001632C                            Floor_ChkTile:				; XREF: FindFloor; et al
0001632C 3002                       		move.w	d2,d0
0001632E E248                       		lsr.w	#1,d0
00016330 0240 0380                  		andi.w	#$380,d0
00016334 3203                       		move.w	d3,d1
00016336 E049                       		lsr.w	#8,d1
00016338 0241 007F                  		andi.w	#$7F,d1
0001633C D041                       		add.w	d1,d0
0001633E 72FF                       		moveq	#-1,d1
00016340 43F8 A400                  		lea	($FFFFA400).w,a1
00016344 1231 0000                  		move.b	(a1,d0.w),d1
00016348 6700                       		beq.s	loc_14996
0001634A 6B00                       		bmi.s	loc_1499A
0001634C 5301                       		subq.b	#1,d1
0001634E 4881                       		ext.w	d1
00016350 EE59                       		ror.w	#7,d1
00016352 3002                       		move.w	d2,d0
00016354 D040                       		add.w	d0,d0
00016356 0240 01E0                  		andi.w	#$1E0,d0
0001635A D240                       		add.w	d0,d1
0001635C 3003                       		move.w	d3,d0
0001635E E648                       		lsr.w	#3,d0
00016360 0240 001E                  		andi.w	#$1E,d0
00016364 D240                       		add.w	d0,d1
00016366                            
00016366                            loc_14996:
00016366 2241                       		movea.l	d1,a1
00016368 4E75                       		rts	
0001636A                            ; ===========================================================================
0001636A                            
0001636A                            loc_1499A:
0001636A 0241 007F                  		andi.w	#$7F,d1
0001636E 0828 0006 0001             		btst	#6,1(a0)
00016374 6700                       		beq.s	loc_149B2
00016376 5241                       		addq.w	#1,d1
00016378 0C41 0029                  		cmpi.w	#$29,d1
0001637C 6600                       		bne.s	loc_149B2
0001637E 323C 0051                  		move.w	#$51,d1
00016382                            
00016382                            loc_149B2:
00016382 5301                       		subq.b	#1,d1
00016384 EE59                       		ror.w	#7,d1
00016386 3002                       		move.w	d2,d0
00016388 D040                       		add.w	d0,d0
0001638A 0240 01E0                  		andi.w	#$1E0,d0
0001638E D240                       		add.w	d0,d1
00016390 3003                       		move.w	d3,d0
00016392 E648                       		lsr.w	#3,d0
00016394 0240 001E                  		andi.w	#$1E,d0
00016398 D240                       		add.w	d0,d1
0001639A 2241                       		movea.l	d1,a1
0001639C 4E75                       		rts	
0001639E                            ; End of function Floor_ChkTile
0001639E                            
0001639E                            
0001639E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001639E                            
0001639E                            
0001639E                            FindFloor:				; XREF: Sonic_AnglePos; et al
0001639E 618C                       		bsr.s	Floor_ChkTile
000163A0 3011                       		move.w	(a1),d0
000163A2 3800                       		move.w	d0,d4
000163A4 0240 07FF                  		andi.w	#$7FF,d0
000163A8 6700                       		beq.s	loc_149DE
000163AA 0B04                       		btst	d5,d4
000163AC 6600                       		bne.s	loc_149EC
000163AE                            
000163AE                            loc_149DE:
000163AE D44B                       		add.w	a3,d2
000163B0 6100 0000                  		bsr.w	FindFloor2
000163B4 944B                       		sub.w	a3,d2
000163B6 0641 0010                  		addi.w	#$10,d1
000163BA 4E75                       		rts	
000163BC                            ; ===========================================================================
000163BC                            
000163BC                            loc_149EC:
000163BC 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
000163C0 1032 0000                  		move.b	(a2,d0.w),d0
000163C4 0240 00FF                  		andi.w	#$FF,d0
000163C8 67E4                       		beq.s	loc_149DE
000163CA 45F9 0000 0000             		lea	(AngleMap).l,a2
000163D0 18B2 0000                  		move.b	(a2,d0.w),(a4)
000163D4 E948                       		lsl.w	#4,d0
000163D6 3203                       		move.w	d3,d1
000163D8 0804 000B                  		btst	#$B,d4
000163DC 6700                       		beq.s	loc_14A12
000163DE 4641                       		not.w	d1
000163E0 4414                       		neg.b	(a4)
000163E2                            
000163E2                            loc_14A12:
000163E2 0804 000C                  		btst	#$C,d4
000163E6 6700                       		beq.s	loc_14A22
000163E8 0614 0040                  		addi.b	#$40,(a4)
000163EC 4414                       		neg.b	(a4)
000163EE 0414 0040                  		subi.b	#$40,(a4)
000163F2                            
000163F2                            loc_14A22:
000163F2 0241 000F                  		andi.w	#$F,d1
000163F6 D240                       		add.w	d0,d1
000163F8 45F9 0000 0000             		lea	(CollArray1).l,a2
000163FE 1032 1000                  		move.b	(a2,d1.w),d0
00016402 4880                       		ext.w	d0
00016404 BD44                       		eor.w	d6,d4
00016406 0804 000C                  		btst	#$C,d4
0001640A 6700                       		beq.s	loc_14A3E
0001640C 4440                       		neg.w	d0
0001640E                            
0001640E                            loc_14A3E:
0001640E 4A40                       		tst.w	d0
00016410 679C                       		beq.s	loc_149DE
00016412 6B00                       		bmi.s	loc_14A5A
00016414 0C00 0010                  		cmpi.b	#$10,d0
00016418 6700                       		beq.s	loc_14A66
0001641A 3202                       		move.w	d2,d1
0001641C 0241 000F                  		andi.w	#$F,d1
00016420 D041                       		add.w	d1,d0
00016422 323C 000F                  		move.w	#$F,d1
00016426 9240                       		sub.w	d0,d1
00016428 4E75                       		rts	
0001642A                            ; ===========================================================================
0001642A                            
0001642A                            loc_14A5A:
0001642A 3202                       		move.w	d2,d1
0001642C 0241 000F                  		andi.w	#$F,d1
00016430 D041                       		add.w	d1,d0
00016432 6A00 FF7A                  		bpl.w	loc_149DE
00016436                            
00016436                            loc_14A66:
00016436 944B                       		sub.w	a3,d2
00016438 6100 0000                  		bsr.w	FindFloor2
0001643C D44B                       		add.w	a3,d2
0001643E 0441 0010                  		subi.w	#$10,d1
00016442 4E75                       		rts	
00016444                            ; End of function FindFloor
00016444                            
00016444                            
00016444                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016444                            
00016444                            
00016444                            FindFloor2:				; XREF: FindFloor
00016444 6100 FEE6                  		bsr.w	Floor_ChkTile
00016448 3011                       		move.w	(a1),d0
0001644A 3800                       		move.w	d0,d4
0001644C 0240 07FF                  		andi.w	#$7FF,d0
00016450 6700                       		beq.s	loc_14A86
00016452 0B04                       		btst	d5,d4
00016454 6600                       		bne.s	loc_14A94
00016456                            
00016456                            loc_14A86:
00016456 323C 000F                  		move.w	#$F,d1
0001645A 3002                       		move.w	d2,d0
0001645C 0240 000F                  		andi.w	#$F,d0
00016460 9240                       		sub.w	d0,d1
00016462 4E75                       		rts	
00016464                            ; ===========================================================================
00016464                            
00016464                            loc_14A94:
00016464 2478 F796                  		movea.l	($FFFFF796).w,a2
00016468 1032 0000                  		move.b	(a2,d0.w),d0
0001646C 0240 00FF                  		andi.w	#$FF,d0
00016470 67E4                       		beq.s	loc_14A86
00016472 45F9 0000 0000             		lea	(AngleMap).l,a2
00016478 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001647C E948                       		lsl.w	#4,d0
0001647E 3203                       		move.w	d3,d1
00016480 0804 000B                  		btst	#$B,d4
00016484 6700                       		beq.s	loc_14ABA
00016486 4641                       		not.w	d1
00016488 4414                       		neg.b	(a4)
0001648A                            
0001648A                            loc_14ABA:
0001648A 0804 000C                  		btst	#$C,d4
0001648E 6700                       		beq.s	loc_14ACA
00016490 0614 0040                  		addi.b	#$40,(a4)
00016494 4414                       		neg.b	(a4)
00016496 0414 0040                  		subi.b	#$40,(a4)
0001649A                            
0001649A                            loc_14ACA:
0001649A 0241 000F                  		andi.w	#$F,d1
0001649E D240                       		add.w	d0,d1
000164A0 45F9 0000 0000             		lea	(CollArray1).l,a2
000164A6 1032 1000                  		move.b	(a2,d1.w),d0
000164AA 4880                       		ext.w	d0
000164AC BD44                       		eor.w	d6,d4
000164AE 0804 000C                  		btst	#$C,d4
000164B2 6700                       		beq.s	loc_14AE6
000164B4 4440                       		neg.w	d0
000164B6                            
000164B6                            loc_14AE6:
000164B6 4A40                       		tst.w	d0
000164B8 679C                       		beq.s	loc_14A86
000164BA 6B00                       		bmi.s	loc_14AFC
000164BC 3202                       		move.w	d2,d1
000164BE 0241 000F                  		andi.w	#$F,d1
000164C2 D041                       		add.w	d1,d0
000164C4 323C 000F                  		move.w	#$F,d1
000164C8 9240                       		sub.w	d0,d1
000164CA 4E75                       		rts	
000164CC                            ; ===========================================================================
000164CC                            
000164CC                            loc_14AFC:
000164CC 3202                       		move.w	d2,d1
000164CE 0241 000F                  		andi.w	#$F,d1
000164D2 D041                       		add.w	d1,d0
000164D4 6A00 FF80                  		bpl.w	loc_14A86
000164D8 4641                       		not.w	d1
000164DA 4E75                       		rts	
000164DC                            ; End of function FindFloor2
000164DC                            
000164DC                            
000164DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000164DC                            
000164DC                            
000164DC                            FindWall:				; XREF: Sonic_WalkVertR; et al
000164DC 6100 FE4E                  		bsr.w	Floor_ChkTile
000164E0 3011                       		move.w	(a1),d0
000164E2 3800                       		move.w	d0,d4
000164E4 0240 07FF                  		andi.w	#$7FF,d0
000164E8 6700                       		beq.s	loc_14B1E
000164EA 0B04                       		btst	d5,d4
000164EC 6600                       		bne.s	loc_14B2C
000164EE                            
000164EE                            loc_14B1E:
000164EE D64B                       		add.w	a3,d3
000164F0 6100 0000                  		bsr.w	FindWall2
000164F4 964B                       		sub.w	a3,d3
000164F6 0641 0010                  		addi.w	#$10,d1
000164FA 4E75                       		rts	
000164FC                            ; ===========================================================================
000164FC                            
000164FC                            loc_14B2C:
000164FC 2478 F796                  		movea.l	($FFFFF796).w,a2
00016500 1032 0000                  		move.b	(a2,d0.w),d0
00016504 0240 00FF                  		andi.w	#$FF,d0
00016508 67E4                       		beq.s	loc_14B1E
0001650A 45F9 0000 0000             		lea	(AngleMap).l,a2
00016510 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016514 E948                       		lsl.w	#4,d0
00016516 3202                       		move.w	d2,d1
00016518 0804 000C                  		btst	#$C,d4
0001651C 6700                       		beq.s	loc_14B5A
0001651E 4641                       		not.w	d1
00016520 0614 0040                  		addi.b	#$40,(a4)
00016524 4414                       		neg.b	(a4)
00016526 0414 0040                  		subi.b	#$40,(a4)
0001652A                            
0001652A                            loc_14B5A:
0001652A 0804 000B                  		btst	#$B,d4
0001652E 6700                       		beq.s	loc_14B62
00016530 4414                       		neg.b	(a4)
00016532                            
00016532                            loc_14B62:
00016532 0241 000F                  		andi.w	#$F,d1
00016536 D240                       		add.w	d0,d1
00016538 45F9 0000 0000             		lea	(CollArray2).l,a2
0001653E 1032 1000                  		move.b	(a2,d1.w),d0
00016542 4880                       		ext.w	d0
00016544 BD44                       		eor.w	d6,d4
00016546 0804 000B                  		btst	#$B,d4
0001654A 6700                       		beq.s	loc_14B7E
0001654C 4440                       		neg.w	d0
0001654E                            
0001654E                            loc_14B7E:
0001654E 4A40                       		tst.w	d0
00016550 679C                       		beq.s	loc_14B1E
00016552 6B00                       		bmi.s	loc_14B9A
00016554 0C00 0010                  		cmpi.b	#$10,d0
00016558 6700                       		beq.s	loc_14BA6
0001655A 3203                       		move.w	d3,d1
0001655C 0241 000F                  		andi.w	#$F,d1
00016560 D041                       		add.w	d1,d0
00016562 323C 000F                  		move.w	#$F,d1
00016566 9240                       		sub.w	d0,d1
00016568 4E75                       		rts	
0001656A                            ; ===========================================================================
0001656A                            
0001656A                            loc_14B9A:
0001656A 3203                       		move.w	d3,d1
0001656C 0241 000F                  		andi.w	#$F,d1
00016570 D041                       		add.w	d1,d0
00016572 6A00 FF7A                  		bpl.w	loc_14B1E
00016576                            
00016576                            loc_14BA6:
00016576 964B                       		sub.w	a3,d3
00016578 6100 0000                  		bsr.w	FindWall2
0001657C D64B                       		add.w	a3,d3
0001657E 0441 0010                  		subi.w	#$10,d1
00016582 4E75                       		rts	
00016584                            ; End of function FindWall
00016584                            
00016584                            
00016584                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016584                            
00016584                            
00016584                            FindWall2:				; XREF: FindWall
00016584 6100 FDA6                  		bsr.w	Floor_ChkTile
00016588 3011                       		move.w	(a1),d0
0001658A 3800                       		move.w	d0,d4
0001658C 0240 07FF                  		andi.w	#$7FF,d0
00016590 6700                       		beq.s	loc_14BC6
00016592 0B04                       		btst	d5,d4
00016594 6600                       		bne.s	loc_14BD4
00016596                            
00016596                            loc_14BC6:
00016596 323C 000F                  		move.w	#$F,d1
0001659A 3003                       		move.w	d3,d0
0001659C 0240 000F                  		andi.w	#$F,d0
000165A0 9240                       		sub.w	d0,d1
000165A2 4E75                       		rts	
000165A4                            ; ===========================================================================
000165A4                            
000165A4                            loc_14BD4:
000165A4 2478 F796                  		movea.l	($FFFFF796).w,a2
000165A8 1032 0000                  		move.b	(a2,d0.w),d0
000165AC 0240 00FF                  		andi.w	#$FF,d0
000165B0 67E4                       		beq.s	loc_14BC6
000165B2 45F9 0000 0000             		lea	(AngleMap).l,a2
000165B8 18B2 0000                  		move.b	(a2,d0.w),(a4)
000165BC E948                       		lsl.w	#4,d0
000165BE 3202                       		move.w	d2,d1
000165C0 0804 000C                  		btst	#$C,d4
000165C4 6700                       		beq.s	loc_14C02
000165C6 4641                       		not.w	d1
000165C8 0614 0040                  		addi.b	#$40,(a4)
000165CC 4414                       		neg.b	(a4)
000165CE 0414 0040                  		subi.b	#$40,(a4)
000165D2                            
000165D2                            loc_14C02:
000165D2 0804 000B                  		btst	#$B,d4
000165D6 6700                       		beq.s	loc_14C0A
000165D8 4414                       		neg.b	(a4)
000165DA                            
000165DA                            loc_14C0A:
000165DA 0241 000F                  		andi.w	#$F,d1
000165DE D240                       		add.w	d0,d1
000165E0 45F9 0000 0000             		lea	(CollArray2).l,a2
000165E6 1032 1000                  		move.b	(a2,d1.w),d0
000165EA 4880                       		ext.w	d0
000165EC BD44                       		eor.w	d6,d4
000165EE 0804 000B                  		btst	#$B,d4
000165F2 6700                       		beq.s	loc_14C26
000165F4 4440                       		neg.w	d0
000165F6                            
000165F6                            loc_14C26:
000165F6 4A40                       		tst.w	d0
000165F8 679C                       		beq.s	loc_14BC6
000165FA 6B00                       		bmi.s	loc_14C3C
000165FC 3203                       		move.w	d3,d1
000165FE 0241 000F                  		andi.w	#$F,d1
00016602 D041                       		add.w	d1,d0
00016604 323C 000F                  		move.w	#$F,d1
00016608 9240                       		sub.w	d0,d1
0001660A 4E75                       		rts	
0001660C                            ; ===========================================================================
0001660C                            
0001660C                            loc_14C3C:
0001660C 3203                       		move.w	d3,d1
0001660E 0241 000F                  		andi.w	#$F,d1
00016612 D041                       		add.w	d1,d0
00016614 6A00 FF80                  		bpl.w	loc_14BC6
00016618 4641                       		not.w	d1
0001661A 4E75                       		rts	
0001661C                            ; End of function FindWall2
0001661C                            
0001661C                            ; ---------------------------------------------------------------------------
0001661C                            ; Unused floor/wall subroutine - logs something	to do with collision
0001661C                            ; ---------------------------------------------------------------------------
0001661C                            
0001661C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001661C                            
0001661C                            
0001661C                            FloorLog_Unk:				; XREF: Level
0001661C 4E75                       		rts	
0001661E                            
0001661E 43F9 0000 0000             		lea	(CollArray1).l,a1
00016624 45F9 0000 0000             		lea	(CollArray1).l,a2
0001662A 363C 00FF                  		move.w	#$FF,d3
0001662E                            
0001662E                            loc_14C5E:
0001662E 7A10                       		moveq	#$10,d5
00016630 343C 000F                  		move.w	#$F,d2
00016634                            
00016634                            loc_14C64:
00016634 7800                       		moveq	#0,d4
00016636 323C 000F                  		move.w	#$F,d1
0001663A                            
0001663A                            loc_14C6A:
0001663A 3019                       		move.w	(a1)+,d0
0001663C EAA8                       		lsr.l	d5,d0
0001663E D944                       		addx.w	d4,d4
00016640 51C9 FFF8                  		dbf	d1,loc_14C6A
00016644                            
00016644 34C4                       		move.w	d4,(a2)+
00016646 92FC 0020                  		suba.w	#$20,a1
0001664A 5345                       		subq.w	#1,d5
0001664C 51CA FFE6                  		dbf	d2,loc_14C64
00016650                            
00016650 D2FC 0020                  		adda.w	#$20,a1
00016654 51CB FFD8                  		dbf	d3,loc_14C5E
00016658                            
00016658 43F9 0000 0000             		lea	(CollArray1).l,a1
0001665E 45F9 0000 0000             		lea	(CollArray2).l,a2
00016664 6100                       		bsr.s	FloorLog_Unk2
00016666 43F9 0000 0000             		lea	(CollArray1).l,a1
0001666C 45F9 0000 0000             		lea	(CollArray1).l,a2
00016672                            
00016672                            ; End of function FloorLog_Unk
00016672                            
00016672                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016672                            
00016672                            
00016672                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00016672 363C 0FFF                  		move.w	#$FFF,d3
00016676                            
00016676                            loc_14CA6:
00016676 7400                       		moveq	#0,d2
00016678 323C 000F                  		move.w	#$F,d1
0001667C 3019                       		move.w	(a1)+,d0
0001667E 6700                       		beq.s	loc_14CD4
00016680 6B00                       		bmi.s	loc_14CBE
00016682                            
00016682                            loc_14CB2:
00016682 E248                       		lsr.w	#1,d0
00016684 6400                       		bcc.s	loc_14CB8
00016686 5202                       		addq.b	#1,d2
00016688                            
00016688                            loc_14CB8:
00016688 51C9 FFF8                  		dbf	d1,loc_14CB2
0001668C                            
0001668C 6000                       		bra.s	loc_14CD6
0001668E                            ; ===========================================================================
0001668E                            
0001668E                            loc_14CBE:
0001668E 0C40 FFFF                  		cmpi.w	#-1,d0
00016692 6700                       		beq.s	loc_14CD0
00016694                            
00016694                            loc_14CC4:
00016694 E348                       		lsl.w	#1,d0
00016696 6400                       		bcc.s	loc_14CCA
00016698 5302                       		subq.b	#1,d2
0001669A                            
0001669A                            loc_14CCA:
0001669A 51C9 FFF8                  		dbf	d1,loc_14CC4
0001669E                            
0001669E 6000                       		bra.s	loc_14CD6
000166A0                            ; ===========================================================================
000166A0                            
000166A0                            loc_14CD0:
000166A0 303C 0010                  		move.w	#$10,d0
000166A4                            
000166A4                            loc_14CD4:
000166A4 3400                       		move.w	d0,d2
000166A6                            
000166A6                            loc_14CD6:
000166A6 14C2                       		move.b	d2,(a2)+
000166A8 51CB FFCC                  		dbf	d3,loc_14CA6
000166AC                            
000166AC 4E75                       		rts	
000166AE                            
000166AE                            ; End of function FloorLog_Unk2
000166AE                            
000166AE                            
000166AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000166AE                            
000166AE                            
000166AE                            Sonic_WalkSpeed:			; XREF: Sonic_Move
000166AE 2628 0008                  		move.l	8(a0),d3
000166B2 2428 000C                  		move.l	$C(a0),d2
000166B6 3228 0010                  		move.w	$10(a0),d1
000166BA 48C1                       		ext.l	d1
000166BC E181                       		asl.l	#8,d1
000166BE D681                       		add.l	d1,d3
000166C0 3228 0012                  		move.w	$12(a0),d1
000166C4 48C1                       		ext.l	d1
000166C6 E181                       		asl.l	#8,d1
000166C8 D481                       		add.l	d1,d2
000166CA 4842                       		swap	d2
000166CC 4843                       		swap	d3
000166CE 11C0 F768                  		move.b	d0,($FFFFF768).w
000166D2 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000166D6 1200                       		move.b	d0,d1
000166D8 0600 0020                  		addi.b	#$20,d0
000166DC 6A00                       		bpl.s	loc_14D1A
000166DE 1001                       		move.b	d1,d0
000166E0 6A00                       		bpl.s	loc_14D14
000166E2 5300                       		subq.b	#1,d0
000166E4                            
000166E4                            loc_14D14:
000166E4 0600 0020                  		addi.b	#$20,d0
000166E8 6000                       		bra.s	loc_14D24
000166EA                            ; ===========================================================================
000166EA                            
000166EA                            loc_14D1A:
000166EA 1001                       		move.b	d1,d0
000166EC 6A00                       		bpl.s	loc_14D20
000166EE 5200                       		addq.b	#1,d0
000166F0                            
000166F0                            loc_14D20:
000166F0 0600 001F                  		addi.b	#$1F,d0
000166F4                            
000166F4                            loc_14D24:
000166F4 0200 00C0                  		andi.b	#$C0,d0
000166F8 6700 0000                  		beq.w	loc_14DF0
000166FC 0C00 0080                  		cmpi.b	#$80,d0
00016700 6700 0000                  		beq.w	loc_14F7C
00016704 0201 0038                  		andi.b	#$38,d1
00016708 6600                       		bne.s	loc_14D3C
0001670A 5042                       		addq.w	#8,d2
0001670C                            
0001670C                            loc_14D3C:
0001670C 0C00 0040                  		cmpi.b	#$40,d0
00016710 6700 0000                  		beq.w	loc_1504A
00016714 6000 0000                  		bra.w	loc_14EBC
00016718                            
00016718                            ; End of function Sonic_WalkSpeed
00016718                            
00016718                            
00016718                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016718                            
00016718                            
00016718                            sub_14D48:				; XREF: Sonic_Jump
00016718 11C0 F768                  		move.b	d0,($FFFFF768).w
0001671C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00016720 0600 0020                  		addi.b	#$20,d0
00016724 0200 00C0                  		andi.b	#$C0,d0
00016728 0C00 0040                  		cmpi.b	#$40,d0
0001672C 6700 0000                  		beq.w	loc_14FD6
00016730 0C00 0080                  		cmpi.b	#$80,d0
00016734 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00016738 0C00 00C0                  		cmpi.b	#$C0,d0
0001673C 6700 0000                  		beq.w	sub_14E50
00016740                            
00016740                            ; End of function sub_14D48
00016740                            
00016740                            ; ---------------------------------------------------------------------------
00016740                            ; Subroutine to	make Sonic land	on the floor after jumping
00016740                            ; ---------------------------------------------------------------------------
00016740                            
00016740                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016740                            
00016740                            
00016740                            Sonic_HitFloor:				; XREF: Sonic_Floor
00016740 3428 000C                  		move.w	$C(a0),d2
00016744 3628 0008                  		move.w	8(a0),d3
00016748 7000                       		moveq	#0,d0
0001674A 1028 0016                  		move.b	$16(a0),d0
0001674E 4880                       		ext.w	d0
00016750 D440                       		add.w	d0,d2
00016752 1028 0017                  		move.b	$17(a0),d0
00016756 4880                       		ext.w	d0
00016758 D640                       		add.w	d0,d3
0001675A 49F8 F768                  		lea	($FFFFF768).w,a4
0001675E 367C 0010                  		movea.w	#$10,a3
00016762 3C3C 0000                  		move.w	#0,d6
00016766 7A0D                       		moveq	#$D,d5
00016768 6100 FC34                  		bsr.w	FindFloor
0001676C 3F01                       		move.w	d1,-(sp)
0001676E 3428 000C                  		move.w	$C(a0),d2
00016772 3628 0008                  		move.w	8(a0),d3
00016776 7000                       		moveq	#0,d0
00016778 1028 0016                  		move.b	$16(a0),d0
0001677C 4880                       		ext.w	d0
0001677E D440                       		add.w	d0,d2
00016780 1028 0017                  		move.b	$17(a0),d0
00016784 4880                       		ext.w	d0
00016786 9640                       		sub.w	d0,d3
00016788 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001678C 367C 0010                  		movea.w	#$10,a3
00016790 3C3C 0000                  		move.w	#0,d6
00016794 7A0D                       		moveq	#$D,d5
00016796 6100 FC06                  		bsr.w	FindFloor
0001679A 301F                       		move.w	(sp)+,d0
0001679C 143C 0000                  		move.b	#0,d2
000167A0                            
000167A0                            loc_14DD0:
000167A0 1638 F76A                  		move.b	($FFFFF76A).w,d3
000167A4 B240                       		cmp.w	d0,d1
000167A6 6F00                       		ble.s	loc_14DDE
000167A8 1638 F768                  		move.b	($FFFFF768).w,d3
000167AC C141                       		exg	d0,d1
000167AE                            
000167AE                            loc_14DDE:
000167AE 0803 0000                  		btst	#0,d3
000167B2 6700                       		beq.s	locret_14DE6
000167B4 1602                       		move.b	d2,d3
000167B6                            
000167B6                            locret_14DE6:
000167B6 4E75                       		rts	
000167B8                            
000167B8                            ; End of function Sonic_HitFloor
000167B8                            
000167B8                            ; ===========================================================================
000167B8 3428 000C                  		move.w	$C(a0),d2
000167BC 3628 0008                  		move.w	8(a0),d3
000167C0                            
000167C0                            loc_14DF0:				; XREF: Sonic_WalkSpeed
000167C0 0642 000A                  		addi.w	#$A,d2
000167C4 49F8 F768                  		lea	($FFFFF768).w,a4
000167C8 367C 0010                  		movea.w	#$10,a3
000167CC 3C3C 0000                  		move.w	#0,d6
000167D0 7A0E                       		moveq	#$E,d5
000167D2 6100 FBCA                  		bsr.w	FindFloor
000167D6 143C 0000                  		move.b	#0,d2
000167DA                            
000167DA                            loc_14E0A:				; XREF: sub_14EB4
000167DA 1638 F768                  		move.b	($FFFFF768).w,d3
000167DE 0803 0000                  		btst	#0,d3
000167E2 6700                       		beq.s	locret_14E16
000167E4 1602                       		move.b	d2,d3
000167E6                            
000167E6                            locret_14E16:
000167E6 4E75                       		rts	
000167E8                            
000167E8                            ; ---------------------------------------------------------------------------
000167E8                            ; Subroutine allowing objects to interact with the floor
000167E8                            ; ---------------------------------------------------------------------------
000167E8                            
000167E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000167E8                            
000167E8                            
000167E8                            ObjHitFloor:
000167E8 3628 0008                  		move.w	8(a0),d3
000167EC                            
000167EC                            ; End of function ObjHitFloor
000167EC                            
000167EC                            
000167EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000167EC                            
000167EC                            
000167EC                            ObjHitFloor2:
000167EC 3428 000C                  		move.w	$C(a0),d2
000167F0 7000                       		moveq	#0,d0
000167F2 1028 0016                  		move.b	$16(a0),d0
000167F6 4880                       		ext.w	d0
000167F8 D440                       		add.w	d0,d2
000167FA 49F8 F768                  		lea	($FFFFF768).w,a4
000167FE 18BC 0000                  		move.b	#0,(a4)
00016802 367C 0010                  		movea.w	#$10,a3
00016806 3C3C 0000                  		move.w	#0,d6
0001680A 7A0D                       		moveq	#$D,d5
0001680C 6100 FB90                  		bsr.w	FindFloor
00016810 1638 F768                  		move.b	($FFFFF768).w,d3
00016814 0803 0000                  		btst	#0,d3
00016818 6700                       		beq.s	locret_14E4E
0001681A 163C 0000                  		move.b	#0,d3
0001681E                            
0001681E                            locret_14E4E:
0001681E 4E75                       		rts	
00016820                            ; End of function ObjHitFloor2
00016820                            
00016820                            
00016820                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016820                            
00016820                            
00016820                            sub_14E50:				; XREF: sub_14D48
00016820 3428 000C                  		move.w	$C(a0),d2
00016824 3628 0008                  		move.w	8(a0),d3
00016828 7000                       		moveq	#0,d0
0001682A 1028 0017                  		move.b	$17(a0),d0
0001682E 4880                       		ext.w	d0
00016830 9440                       		sub.w	d0,d2
00016832 1028 0016                  		move.b	$16(a0),d0
00016836 4880                       		ext.w	d0
00016838 D640                       		add.w	d0,d3
0001683A 49F8 F768                  		lea	($FFFFF768).w,a4
0001683E 367C 0010                  		movea.w	#$10,a3
00016842 3C3C 0000                  		move.w	#0,d6
00016846 7A0E                       		moveq	#$E,d5
00016848 6100 FC92                  		bsr.w	FindWall
0001684C 3F01                       		move.w	d1,-(sp)
0001684E 3428 000C                  		move.w	$C(a0),d2
00016852 3628 0008                  		move.w	8(a0),d3
00016856 7000                       		moveq	#0,d0
00016858 1028 0017                  		move.b	$17(a0),d0
0001685C 4880                       		ext.w	d0
0001685E D440                       		add.w	d0,d2
00016860 1028 0016                  		move.b	$16(a0),d0
00016864 4880                       		ext.w	d0
00016866 D640                       		add.w	d0,d3
00016868 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001686C 367C 0010                  		movea.w	#$10,a3
00016870 3C3C 0000                  		move.w	#0,d6
00016874 7A0E                       		moveq	#$E,d5
00016876 6100 FC64                  		bsr.w	FindWall
0001687A 301F                       		move.w	(sp)+,d0
0001687C 143C 00C0                  		move.b	#-$40,d2
00016880 6000 FF1E                  		bra.w	loc_14DD0
00016884                            
00016884                            ; End of function sub_14E50
00016884                            
00016884                            
00016884                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016884                            
00016884                            
00016884                            sub_14EB4:				; XREF: Sonic_Floor
00016884 3428 000C                  		move.w	$C(a0),d2
00016888 3628 0008                  		move.w	8(a0),d3
0001688C                            
0001688C                            loc_14EBC:
0001688C 0643 000A                  		addi.w	#$A,d3
00016890 49F8 F768                  		lea	($FFFFF768).w,a4
00016894 367C 0010                  		movea.w	#$10,a3
00016898 3C3C 0000                  		move.w	#0,d6
0001689C 7A0E                       		moveq	#$E,d5
0001689E 6100 FC3C                  		bsr.w	FindWall
000168A2 143C 00C0                  		move.b	#-$40,d2
000168A6 6000 FF32                  		bra.w	loc_14E0A
000168AA                            
000168AA                            ; End of function sub_14EB4
000168AA                            
000168AA                            ; ---------------------------------------------------------------------------
000168AA                            ; Subroutine to	detect when an object hits a wall to its right
000168AA                            ; ---------------------------------------------------------------------------
000168AA                            
000168AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000168AA                            
000168AA                            
000168AA                            ObjHitWallRight:
000168AA D668 0008                  		add.w	8(a0),d3
000168AE 3428 000C                  		move.w	$C(a0),d2
000168B2 49F8 F768                  		lea	($FFFFF768).w,a4
000168B6 18BC 0000                  		move.b	#0,(a4)
000168BA 367C 0010                  		movea.w	#$10,a3
000168BE 3C3C 0000                  		move.w	#0,d6
000168C2 7A0E                       		moveq	#$E,d5
000168C4 6100 FC16                  		bsr.w	FindWall
000168C8 1638 F768                  		move.b	($FFFFF768).w,d3
000168CC 0803 0000                  		btst	#0,d3
000168D0 6700                       		beq.s	locret_14F06
000168D2 163C 00C0                  		move.b	#-$40,d3
000168D6                            
000168D6                            locret_14F06:
000168D6 4E75                       		rts	
000168D8                            
000168D8                            ; End of function ObjHitWallRight
000168D8                            
000168D8                            ; ---------------------------------------------------------------------------
000168D8                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
000168D8                            ; touches them
000168D8                            ; ---------------------------------------------------------------------------
000168D8                            
000168D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000168D8                            
000168D8                            
000168D8                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
000168D8 3428 000C                  		move.w	$C(a0),d2
000168DC 3628 0008                  		move.w	8(a0),d3
000168E0 7000                       		moveq	#0,d0
000168E2 1028 0016                  		move.b	$16(a0),d0
000168E6 4880                       		ext.w	d0
000168E8 9440                       		sub.w	d0,d2
000168EA 0A42 000F                  		eori.w	#$F,d2
000168EE 1028 0017                  		move.b	$17(a0),d0
000168F2 4880                       		ext.w	d0
000168F4 D640                       		add.w	d0,d3
000168F6 49F8 F768                  		lea	($FFFFF768).w,a4
000168FA 367C FFF0                  		movea.w	#-$10,a3
000168FE 3C3C 1000                  		move.w	#$1000,d6
00016902 7A0E                       		moveq	#$E,d5
00016904 6100 FA98                  		bsr.w	FindFloor
00016908 3F01                       		move.w	d1,-(sp)
0001690A 3428 000C                  		move.w	$C(a0),d2
0001690E 3628 0008                  		move.w	8(a0),d3
00016912 7000                       		moveq	#0,d0
00016914 1028 0016                  		move.b	$16(a0),d0
00016918 4880                       		ext.w	d0
0001691A 9440                       		sub.w	d0,d2
0001691C 0A42 000F                  		eori.w	#$F,d2
00016920 1028 0017                  		move.b	$17(a0),d0
00016924 4880                       		ext.w	d0
00016926 9640                       		sub.w	d0,d3
00016928 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001692C 367C FFF0                  		movea.w	#-$10,a3
00016930 3C3C 1000                  		move.w	#$1000,d6
00016934 7A0E                       		moveq	#$E,d5
00016936 6100 FA66                  		bsr.w	FindFloor
0001693A 301F                       		move.w	(sp)+,d0
0001693C 143C 0080                  		move.b	#-$80,d2
00016940 6000 FE5E                  		bra.w	loc_14DD0
00016944                            ; End of function Sonic_DontRunOnWalls
00016944                            
00016944                            ; ===========================================================================
00016944 3428 000C                  		move.w	$C(a0),d2
00016948 3628 0008                  		move.w	8(a0),d3
0001694C                            
0001694C                            loc_14F7C:
0001694C 0442 000A                  		subi.w	#$A,d2
00016950 0A42 000F                  		eori.w	#$F,d2
00016954 49F8 F768                  		lea	($FFFFF768).w,a4
00016958 367C FFF0                  		movea.w	#-$10,a3
0001695C 3C3C 1000                  		move.w	#$1000,d6
00016960 7A0E                       		moveq	#$E,d5
00016962 6100 FA3A                  		bsr.w	FindFloor
00016966 143C 0080                  		move.b	#-$80,d2
0001696A 6000 FE6E                  		bra.w	loc_14E0A
0001696E                            
0001696E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001696E                            
0001696E                            
0001696E                            ObjHitCeiling:
0001696E 3428 000C                  		move.w	$C(a0),d2
00016972 3628 0008                  		move.w	8(a0),d3
00016976 7000                       		moveq	#0,d0
00016978 1028 0016                  		move.b	$16(a0),d0
0001697C 4880                       		ext.w	d0
0001697E 9440                       		sub.w	d0,d2
00016980 0A42 000F                  		eori.w	#$F,d2
00016984 49F8 F768                  		lea	($FFFFF768).w,a4
00016988 367C FFF0                  		movea.w	#-$10,a3
0001698C 3C3C 1000                  		move.w	#$1000,d6
00016990 7A0E                       		moveq	#$E,d5
00016992 6100 FA0A                  		bsr.w	FindFloor
00016996 1638 F768                  		move.b	($FFFFF768).w,d3
0001699A 0803 0000                  		btst	#0,d3
0001699E 6700                       		beq.s	locret_14FD4
000169A0 163C 0080                  		move.b	#-$80,d3
000169A4                            
000169A4                            locret_14FD4:
000169A4 4E75                       		rts	
000169A6                            ; End of function ObjHitCeiling
000169A6                            
000169A6                            ; ===========================================================================
000169A6                            
000169A6                            loc_14FD6:				; XREF: sub_14D48
000169A6 3428 000C                  		move.w	$C(a0),d2
000169AA 3628 0008                  		move.w	8(a0),d3
000169AE 7000                       		moveq	#0,d0
000169B0 1028 0017                  		move.b	$17(a0),d0
000169B4 4880                       		ext.w	d0
000169B6 9440                       		sub.w	d0,d2
000169B8 1028 0016                  		move.b	$16(a0),d0
000169BC 4880                       		ext.w	d0
000169BE 9640                       		sub.w	d0,d3
000169C0 0A43 000F                  		eori.w	#$F,d3
000169C4 49F8 F768                  		lea	($FFFFF768).w,a4
000169C8 367C FFF0                  		movea.w	#-$10,a3
000169CC 3C3C 0800                  		move.w	#$800,d6
000169D0 7A0E                       		moveq	#$E,d5
000169D2 6100 FB08                  		bsr.w	FindWall
000169D6 3F01                       		move.w	d1,-(sp)
000169D8 3428 000C                  		move.w	$C(a0),d2
000169DC 3628 0008                  		move.w	8(a0),d3
000169E0 7000                       		moveq	#0,d0
000169E2 1028 0017                  		move.b	$17(a0),d0
000169E6 4880                       		ext.w	d0
000169E8 D440                       		add.w	d0,d2
000169EA 1028 0016                  		move.b	$16(a0),d0
000169EE 4880                       		ext.w	d0
000169F0 9640                       		sub.w	d0,d3
000169F2 0A43 000F                  		eori.w	#$F,d3
000169F6 49F8 F76A                  		lea	($FFFFF76A).w,a4
000169FA 367C FFF0                  		movea.w	#-$10,a3
000169FE 3C3C 0800                  		move.w	#$800,d6
00016A02 7A0E                       		moveq	#$E,d5
00016A04 6100 FAD6                  		bsr.w	FindWall
00016A08 301F                       		move.w	(sp)+,d0
00016A0A 143C 0040                  		move.b	#$40,d2
00016A0E 6000 FD90                  		bra.w	loc_14DD0
00016A12                            
00016A12                            ; ---------------------------------------------------------------------------
00016A12                            ; Subroutine to	stop Sonic when	he jumps at a wall
00016A12                            ; ---------------------------------------------------------------------------
00016A12                            
00016A12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016A12                            
00016A12                            
00016A12                            Sonic_HitWall:				; XREF: Sonic_Floor
00016A12 3428 000C                  		move.w	$C(a0),d2
00016A16 3628 0008                  		move.w	8(a0),d3
00016A1A                            
00016A1A                            loc_1504A:
00016A1A 0443 000A                  		subi.w	#$A,d3
00016A1E 0A43 000F                  		eori.w	#$F,d3
00016A22 49F8 F768                  		lea	($FFFFF768).w,a4
00016A26 367C FFF0                  		movea.w	#-$10,a3
00016A2A 3C3C 0800                  		move.w	#$800,d6
00016A2E 7A0E                       		moveq	#$E,d5
00016A30 6100 FAAA                  		bsr.w	FindWall
00016A34 143C 0040                  		move.b	#$40,d2
00016A38 6000 FDA0                  		bra.w	loc_14E0A
00016A3C                            ; End of function Sonic_HitWall
00016A3C                            
00016A3C                            ; ---------------------------------------------------------------------------
00016A3C                            ; Subroutine to	detect when an object hits a wall to its left
00016A3C                            ; ---------------------------------------------------------------------------
00016A3C                            
00016A3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016A3C                            
00016A3C                            
00016A3C                            ObjHitWallLeft:
00016A3C D668 0008                  		add.w	8(a0),d3
00016A40 3428 000C                  		move.w	$C(a0),d2
00016A44 49F8 F768                  		lea	($FFFFF768).w,a4
00016A48 18BC 0000                  		move.b	#0,(a4)
00016A4C 367C FFF0                  		movea.w	#-$10,a3
00016A50 3C3C 0800                  		move.w	#$800,d6
00016A54 7A0E                       		moveq	#$E,d5
00016A56 6100 FA84                  		bsr.w	FindWall
00016A5A 1638 F768                  		move.b	($FFFFF768).w,d3
00016A5E 0803 0000                  		btst	#0,d3
00016A62 6700                       		beq.s	locret_15098
00016A64 163C 0040                  		move.b	#$40,d3
00016A68                            
00016A68                            locret_15098:
00016A68 4E75                       		rts	
00016A6A                            ; End of function ObjHitWallLeft
00016A6A                            
00016A6A                            ; ===========================================================================
00016A6A                            ; ---------------------------------------------------------------------------
00016A6A                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00016A6A                            ; ---------------------------------------------------------------------------
00016A6A                            
00016A6A                            Obj66:					; XREF: Obj_Index
00016A6A 7000                       		moveq	#0,d0
00016A6C 1028 0024                  		move.b	$24(a0),d0
00016A70 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00016A74 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00016A78                            ; ===========================================================================
00016A78 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00016A7A 0000                       		dc.w Obj66_Action-Obj66_Index
00016A7C 0000                       		dc.w Obj66_Display-Obj66_Index
00016A7E 0000                       		dc.w Obj66_Release-Obj66_Index
00016A80                            ; ===========================================================================
00016A80                            
00016A80                            Obj66_Main:				; XREF: Obj66_Index
00016A80 5428 0024                  		addq.b	#2,$24(a0)
00016A84 323C 0001                  		move.w	#1,d1
00016A88 2248                       		movea.l	a0,a1
00016A8A 6000                       		bra.s	Obj66_MakeItem
00016A8C                            ; ===========================================================================
00016A8C                            
00016A8C                            jmp_SingleObjLoad:
00016A8C 4EF9 0000 E59C             	jmp SingleObjLoad
00016A92                            
00016A92                            Obj66_Loop:
00016A92 6100 FFF8                  		bsr.w	jmp_SingleObjLoad
00016A96 6600                       		bne.s	loc_150FE
00016A98 12BC 0066                  		move.b	#$66,0(a1)
00016A9C 5829 0024                  		addq.b	#4,$24(a1)
00016AA0 3368 0008 0008             		move.w	8(a0),8(a1)
00016AA6 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016AAC 137C 0003 0018             		move.b	#3,$18(a1)
00016AB2 137C 0010 001A             		move.b	#$10,$1A(a1)
00016AB8                            
00016AB8                            Obj66_MakeItem:				; XREF: Obj66_Main
00016AB8 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00016AC0 337C 4348 0002             		move.w	#$4348,2(a1)
00016AC6 0029 0004 0001             		ori.b	#4,1(a1)
00016ACC 137C 0038 0019             		move.b	#$38,$19(a1)
00016AD2                            
00016AD2                            loc_150FE:
00016AD2 51C9 FFBE                  		dbf	d1,Obj66_Loop
00016AD6                            
00016AD6 117C 0030 0019             		move.b	#$30,$19(a0)
00016ADC 117C 0004 0018             		move.b	#4,$18(a0)
00016AE2 317C 003C 0030             		move.w	#$3C,$30(a0)
00016AE8 117C 0001 0034             		move.b	#1,$34(a0)
00016AEE 1168 0028 0038             		move.b	$28(a0),$38(a0)
00016AF4                            
00016AF4                            Obj66_Action:				; XREF: Obj66_Index
00016AF4 6100 0000                  		bsr.w	Obj66_ChkSwitch
00016AF8 4A28 0001                  		tst.b	1(a0)
00016AFC 6A00 0000                  		bpl.w	Obj66_Display
00016B00 323C 0030                  		move.w	#$30,d1
00016B04 3401                       		move.w	d1,d2
00016B06 3602                       		move.w	d2,d3
00016B08 5243                       		addq.w	#1,d3
00016B0A 3828 0008                  		move.w	8(a0),d4
00016B0E 6100 99E0                  		bsr.w	SolidObject
00016B12 0828 0005 0022             		btst	#5,$22(a0)
00016B18 6700 0000                  		beq.w	Obj66_Display
00016B1C 43F8 D000                  		lea	($FFFFD000).w,a1
00016B20 720E                       		moveq	#$E,d1
00016B22 3029 0008                  		move.w	8(a1),d0
00016B26 B068 0008                  		cmp.w	8(a0),d0
00016B2A 6500                       		bcs.s	Obj66_GrabSonic
00016B2C 7207                       		moveq	#7,d1
00016B2E                            
00016B2E                            Obj66_GrabSonic:
00016B2E B228 001A                  		cmp.b	$1A(a0),d1
00016B32 6600                       		bne.s	Obj66_Display
00016B34 1141 0032                  		move.b	d1,$32(a0)
00016B38 5828 0024                  		addq.b	#4,$24(a0)
00016B3C 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00016B42 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00016B48 337C 0800 0014             		move.w	#$800,$14(a1)
00016B4E 337C 0000 0010             		move.w	#0,$10(a1)
00016B54 337C 0000 0012             		move.w	#0,$12(a1)
00016B5A 08A8 0005 0022             		bclr	#5,$22(a0)
00016B60 08A9 0005 0022             		bclr	#5,$22(a1)
00016B66 08E9 0001 0022             		bset	#1,$22(a1)
00016B6C 3429 0008                  		move.w	8(a1),d2
00016B70 3629 000C                  		move.w	$C(a1),d3
00016B74 6100 0000                  		bsr.w	Obj66_ChgPos
00016B78 D569 0008                  		add.w	d2,8(a1)
00016B7C D769 000C                  		add.w	d3,$C(a1)
00016B80 E0E9 0008                  		asr	8(a1)
00016B84 E0E9 000C                  		asr	$C(a1)
00016B88                            
00016B88                            Obj66_Display:				; XREF: Obj66_Index
00016B88 6000 963E                  		bra.w	MarkObjGone
00016B8C                            ; ===========================================================================
00016B8C                            
00016B8C                            Obj66_Release:				; XREF: Obj66_Index
00016B8C 1028 001A                  		move.b	$1A(a0),d0
00016B90 0C00 0004                  		cmpi.b	#4,d0
00016B94 6700                       		beq.s	loc_151C8
00016B96 0C00 0007                  		cmpi.b	#7,d0
00016B9A 6600                       		bne.s	loc_151F8
00016B9C                            
00016B9C                            loc_151C8:
00016B9C B028 0032                  		cmp.b	$32(a0),d0
00016BA0 6700                       		beq.s	loc_151F8
00016BA2 43F8 D000                  		lea	($FFFFD000).w,a1
00016BA6 337C 0000 0010             		move.w	#0,$10(a1)
00016BAC 337C 0800 0012             		move.w	#$800,$12(a1)
00016BB2 0C00 0004                  		cmpi.b	#4,d0
00016BB6 6700                       		beq.s	loc_151F0
00016BB8 337C 0800 0010             		move.w	#$800,$10(a1)
00016BBE 337C 0800 0012             		move.w	#$800,$12(a1)
00016BC4                            
00016BC4                            loc_151F0:
00016BC4 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00016BC8 5928 0024                  		subq.b	#4,$24(a0)
00016BCC                            
00016BCC                            loc_151F8:
00016BCC 6100                       		bsr.s	Obj66_ChkSwitch
00016BCE 6100                       		bsr.s	Obj66_ChgPos
00016BD0 6000 95F6                  		bra.w	MarkObjGone
00016BD4                            
00016BD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016BD4                            
00016BD4                            
00016BD4                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00016BD4 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016BD8 7000                       		moveq	#0,d0
00016BDA 1028 0038                  		move.b	$38(a0),d0
00016BDE 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00016BE4 6700                       		beq.s	loc_15224	; if not, branch
00016BE6 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00016BEA 6600                       		bne.s	Obj66_Animate	; if yes, branch
00016BEC 4428 0034                  		neg.b	$34(a0)
00016BF0 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00016BF6 6000                       		bra.s	Obj66_Animate
00016BF8                            ; ===========================================================================
00016BF8                            
00016BF8                            loc_15224:
00016BF8 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00016BFC                            
00016BFC                            Obj66_Animate:
00016BFC 5328 001E                  		subq.b	#1,$1E(a0)
00016C00 6A00                       		bpl.s	locret_15246
00016C02 117C 0007 001E             		move.b	#7,$1E(a0)
00016C08 1228 0034                  		move.b	$34(a0),d1
00016C0C 1028 001A                  		move.b	$1A(a0),d0
00016C10 D001                       		add.b	d1,d0
00016C12 0200 000F                  		andi.b	#$F,d0
00016C16 1140 001A                  		move.b	d0,$1A(a0)
00016C1A                            
00016C1A                            locret_15246:
00016C1A 4E75                       		rts	
00016C1C                            ; End of function Obj66_ChkSwitch
00016C1C                            
00016C1C                            
00016C1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016C1C                            
00016C1C                            
00016C1C                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00016C1C 43F8 D000                  		lea	($FFFFD000).w,a1
00016C20 7000                       		moveq	#0,d0
00016C22 1028 001A                  		move.b	$1A(a0),d0
00016C26 D040                       		add.w	d0,d0
00016C28 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00016C2C 101A                       		move.b	(a2)+,d0
00016C2E 4880                       		ext.w	d0
00016C30 D068 0008                  		add.w	8(a0),d0
00016C34 3340 0008                  		move.w	d0,8(a1)
00016C38 101A                       		move.b	(a2)+,d0
00016C3A 4880                       		ext.w	d0
00016C3C D068 000C                  		add.w	$C(a0),d0
00016C40 3340 000C                  		move.w	d0,$C(a1)
00016C44 4E75                       		rts	
00016C46                            ; End of function Obj66_ChgPos
00016C46                            
00016C46                            ; ===========================================================================
00016C46 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00016C4A E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00016C4E 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00016C52 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00016C56 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00016C5A 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00016C5E 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00016C62 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00016C66                            ; ---------------------------------------------------------------------------
00016C66                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00016C66                            ; ---------------------------------------------------------------------------
00016C66                            Map_obj66:
00016C66                            	include "_maps\obj66.asm"
00016C66                            ; ---------------------------------------------------------------------------
00016C66                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00016C66                            ; ---------------------------------------------------------------------------
00016C66 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00016C6A 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00016C6E 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00016C72 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00016C76 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00016C7A 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00016C7E 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00016C82 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00016C86 0000                       		dc.w byte_154A4-Map_obj66
00016C88 06                         byte_152B4:	dc.b 6
00016C89 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00016C8E 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00016C93 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00016C98 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00016C9D 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00016CA2 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00016CA7 06                         byte_152D3:	dc.b 6
00016CA8 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00016CAD 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00016CB2 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00016CB7 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00016CBC 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00016CC1 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00016CC6 06                         byte_152F2:	dc.b 6
00016CC7 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00016CCC 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00016CD1 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00016CD6 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00016CDB 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00016CE0 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00016CE5 06                         byte_15311:	dc.b 6
00016CE6 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00016CEB 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00016CF0 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00016CF5 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00016CFA 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00016CFF 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00016D04 06                         byte_15330:	dc.b 6
00016D05 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00016D0A 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00016D0F 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00016D14 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00016D19 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00016D1E 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00016D23 06                         byte_1534F:	dc.b 6
00016D24 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00016D29 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00016D2E 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00016D33 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00016D38 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00016D3D 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00016D42 06                         byte_1536E:	dc.b 6
00016D43 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00016D48 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00016D4D 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00016D52 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00016D57 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00016D5C 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00016D61 06                         byte_1538D:	dc.b 6
00016D62 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00016D67 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00016D6C F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00016D71 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00016D76 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00016D7B 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00016D80 06                         byte_153AC:	dc.b 6
00016D81 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00016D86 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00016D8B E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00016D90 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00016D95 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00016D9A 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00016D9F 06                         byte_153CB:	dc.b 6
00016DA0 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00016DA5 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00016DAA DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00016DAF DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00016DB4 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00016DB9 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00016DBE 06                         byte_153EA:	dc.b 6
00016DBF D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00016DC4 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00016DC9 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00016DCE D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00016DD3 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00016DD8 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00016DDD 06                         byte_15409:	dc.b 6
00016DDE D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00016DE3 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00016DE8 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00016DED CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00016DF2 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00016DF7 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00016DFC 06                         byte_15428:	dc.b 6
00016DFD D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00016E02 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00016E07 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00016E0C C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00016E11 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00016E16 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00016E1B 06                         byte_15447:	dc.b 6
00016E1C D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00016E21 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00016E26 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00016E2B CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00016E30 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00016E35 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00016E3A 06                         byte_15466:	dc.b 6
00016E3B E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00016E40 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00016E45 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00016E4A D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00016E4F E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00016E54 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00016E59 06                         byte_15485:	dc.b 6
00016E5A E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00016E5F D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00016E64 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00016E69 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00016E6E F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00016E73 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00016E78 0C                         byte_154A4:	dc.b $C
00016E79 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00016E7E D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00016E83 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00016E88 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00016E8D D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00016E92 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00016E97 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00016E9C 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00016EA1 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00016EA6 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00016EAB 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00016EB0 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00016EB6 00                         		even
00016EB6 00                         		even
00016EB6                            
00016EB6                            ; ===========================================================================
00016EB6                            ; ---------------------------------------------------------------------------
00016EB6                            ; Object 67 - disc that	you run	around (SBZ)
00016EB6                            ; ---------------------------------------------------------------------------
00016EB6                            
00016EB6                            Obj67:					; XREF: Obj_Index
00016EB6 7000                       		moveq	#0,d0
00016EB8 1028 0024                  		move.b	$24(a0),d0
00016EBC 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00016EC0 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00016EC4                            ; ===========================================================================
00016EC4 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00016EC6 0000                       		dc.w Obj67_Action-Obj67_Index
00016EC8                            ; ===========================================================================
00016EC8                            
00016EC8                            Obj67_Main:				; XREF: Obj67_Index
00016EC8 5428 0024                  		addq.b	#2,$24(a0)
00016ECC 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00016ED4 317C C344 0002             		move.w	#$C344,2(a0)
00016EDA 117C 0004 0001             		move.b	#4,1(a0)
00016EE0 117C 0004 0018             		move.b	#4,$18(a0)
00016EE6 117C 0008 0019             		move.b	#8,$19(a0)
00016EEC 3168 0008 0032             		move.w	8(a0),$32(a0)
00016EF2 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016EF8 117C 0018 0034             		move.b	#$18,$34(a0)
00016EFE 117C 0048 0038             		move.b	#$48,$38(a0)
00016F04 1228 0028                  		move.b	$28(a0),d1	; get object type
00016F08 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00016F0C 6700                       		beq.s	loc_15546
00016F0E 117C 0010 0034             		move.b	#$10,$34(a0)
00016F14 117C 0038 0038             		move.b	#$38,$38(a0)
00016F1A                            
00016F1A                            loc_15546:
00016F1A 1228 0028                  		move.b	$28(a0),d1	; get object type
00016F1E 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00016F22 4881                       		ext.w	d1
00016F24 E741                       		asl.w	#3,d1
00016F26 3141 0036                  		move.w	d1,$36(a0)
00016F2A 1028 0022                  		move.b	$22(a0),d0
00016F2E E418                       		ror.b	#2,d0
00016F30 0200 00C0                  		andi.b	#-$40,d0
00016F34 1140 0026                  		move.b	d0,$26(a0)
00016F38                            
00016F38                            Obj67_Action:				; XREF: Obj67_Index
00016F38 6100 0000                  		bsr.w	Obj67_MoveSonic
00016F3C 6100 0000                  		bsr.w	Obj67_MoveSpot
00016F40 6000 0000                  		bra.w	Obj67_ChkDel
00016F44                            ; ===========================================================================
00016F44                            
00016F44                            Obj67_MoveSonic:			; XREF: Obj67_Action
00016F44 7400                       		moveq	#0,d2
00016F46 1428 0038                  		move.b	$38(a0),d2
00016F4A 3602                       		move.w	d2,d3
00016F4C D643                       		add.w	d3,d3
00016F4E 43F8 D000                  		lea	($FFFFD000).w,a1
00016F52 3029 0008                  		move.w	8(a1),d0
00016F56 9068 0032                  		sub.w	$32(a0),d0
00016F5A D042                       		add.w	d2,d0
00016F5C B043                       		cmp.w	d3,d0
00016F5E 6400                       		bcc.s	loc_155A8
00016F60 3229 000C                  		move.w	$C(a1),d1
00016F64 9268 0030                  		sub.w	$30(a0),d1
00016F68 D242                       		add.w	d2,d1
00016F6A B243                       		cmp.w	d3,d1
00016F6C 6400                       		bcc.s	loc_155A8
00016F6E 0829 0001 0022             		btst	#1,$22(a1)
00016F74 6700                       		beq.s	loc_155B8
00016F76 4228 003A                  		clr.b	$3A(a0)
00016F7A 4E75                       		rts	
00016F7C                            ; ===========================================================================
00016F7C                            
00016F7C                            loc_155A8:
00016F7C 4A28 003A                  		tst.b	$3A(a0)
00016F80 6700                       		beq.s	locret_155B6
00016F82 4229 0038                  		clr.b	$38(a1)
00016F86 4228 003A                  		clr.b	$3A(a0)
00016F8A                            
00016F8A                            locret_155B6:
00016F8A 4E75                       		rts	
00016F8C                            ; ===========================================================================
00016F8C                            
00016F8C                            loc_155B8:
00016F8C 4A28 003A                  		tst.b	$3A(a0)
00016F90 6600                       		bne.s	loc_155E2
00016F92 117C 0001 003A             		move.b	#1,$3A(a0)
00016F98 0829 0002 0022             		btst	#2,$22(a1)
00016F9E 6600                       		bne.s	loc_155D0
00016FA0 4229 001C                  		clr.b	$1C(a1)
00016FA4                            
00016FA4                            loc_155D0:
00016FA4 08A9 0005 0022             		bclr	#5,$22(a1)
00016FAA 137C 0001 001D             		move.b	#1,$1D(a1)
00016FB0 137C 0001 0038             		move.b	#1,$38(a1)
00016FB6                            
00016FB6                            loc_155E2:
00016FB6 3029 0014                  		move.w	$14(a1),d0
00016FBA 4A68 0036                  		tst.w	$36(a0)
00016FBE 6A00                       		bpl.s	loc_15608
00016FC0 0C40 FC00                  		cmpi.w	#-$400,d0
00016FC4 6F00                       		ble.s	loc_155FA
00016FC6 337C FC00 0014             		move.w	#-$400,$14(a1)
00016FCC 4E75                       		rts	
00016FCE                            ; ===========================================================================
00016FCE                            
00016FCE                            loc_155FA:
00016FCE 0C40 F100                  		cmpi.w	#-$F00,d0
00016FD2 6C00                       		bge.s	locret_15606
00016FD4 337C F100 0014             		move.w	#-$F00,$14(a1)
00016FDA                            
00016FDA                            locret_15606:
00016FDA 4E75                       		rts	
00016FDC                            ; ===========================================================================
00016FDC                            
00016FDC                            loc_15608:
00016FDC 0C40 0400                  		cmpi.w	#$400,d0
00016FE0 6C00                       		bge.s	loc_15616
00016FE2 337C 0400 0014             		move.w	#$400,$14(a1)
00016FE8 4E75                       		rts	
00016FEA                            ; ===========================================================================
00016FEA                            
00016FEA                            loc_15616:
00016FEA 0C40 0F00                  		cmpi.w	#$F00,d0
00016FEE 6F00                       		ble.s	locret_15622
00016FF0 337C 0F00 0014             		move.w	#$F00,$14(a1)
00016FF6                            
00016FF6                            locret_15622:
00016FF6 4E75                       		rts	
00016FF8                            ; ===========================================================================
00016FF8                            
00016FF8                            Obj67_MoveSpot:				; XREF: Obj67_Action
00016FF8 3028 0036                  		move.w	$36(a0),d0
00016FFC D168 0026                  		add.w	d0,$26(a0)
00017000 1028 0026                  		move.b	$26(a0),d0
00017004 4EB9 0000 33D4             		jsr	(CalcSine).l
0001700A 3428 0030                  		move.w	$30(a0),d2
0001700E 3628 0032                  		move.w	$32(a0),d3
00017012 7800                       		moveq	#0,d4
00017014 1828 0034                  		move.b	$34(a0),d4
00017018 E14C                       		lsl.w	#8,d4
0001701A 2A04                       		move.l	d4,d5
0001701C C9C0                       		muls.w	d0,d4
0001701E 4844                       		swap	d4
00017020 CBC1                       		muls.w	d1,d5
00017022 4845                       		swap	d5
00017024 D842                       		add.w	d2,d4
00017026 DA43                       		add.w	d3,d5
00017028 3144 000C                  		move.w	d4,$C(a0)
0001702C 3145 0008                  		move.w	d5,8(a0)
00017030 4E75                       		rts	
00017032                            ; ===========================================================================
00017032                            
00017032                            Obj67_ChkDel:				; XREF: Obj67_Action
00017032 3028 0032                  		move.w	$32(a0),d0
00017036 0240 FF80                  		andi.w	#-$80,d0
0001703A 3238 F700                  		move.w	($FFFFF700).w,d1
0001703E 0441 0080                  		subi.w	#$80,d1
00017042 0241 FF80                  		andi.w	#-$80,d1
00017046 9041                       		sub.w	d1,d0
00017048 0C40 0280                  		cmpi.w	#$280,d0
0001704C 6200                       		bhi.s	Obj67_Delete
0001704E 4EF9 0000 E106             		jmp	DisplaySprite
00017054                            ; ===========================================================================
00017054                            
00017054                            Obj67_Delete:
00017054 4EF9 0000 E142             		jmp	DeleteObject
0001705A                            ; ===========================================================================
0001705A                            ; ---------------------------------------------------------------------------
0001705A                            ; Sprite mappings - disc that you run around (SBZ)
0001705A                            ; (It's just a small blob that moves around in a circle. The disc itself is
0001705A                            ; part of the level tiles.)
0001705A                            ; ---------------------------------------------------------------------------
0001705A                            Map_obj67:
0001705A                            	include "_maps\obj67.asm"
0001705A                            ; ---------------------------------------------------------------------------
0001705A                            ; Sprite mappings - disc that you run around (SBZ)
0001705A                            ; (It's just a small blob that moves around in a circle. The disc itself is
0001705A                            ; part of the level tiles.)
0001705A                            ; ---------------------------------------------------------------------------
0001705A 0000                       		dc.w byte_15688-Map_obj67
0001705C 01                         byte_15688:	dc.b 1
0001705D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00017062                            		even
00017062                            		even
00017062                            
00017062                            ; ===========================================================================
00017062                            ; ---------------------------------------------------------------------------
00017062                            ; Object 68 - conveyor belts (SBZ)
00017062                            ; ---------------------------------------------------------------------------
00017062                            
00017062                            Obj68:					; XREF: Obj_Index
00017062 7000                       		moveq	#0,d0
00017064 1028 0024                  		move.b	$24(a0),d0
00017068 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
0001706C 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00017070                            ; ===========================================================================
00017070 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00017072 0000                       		dc.w Obj68_Action-Obj68_Index
00017074                            ; ===========================================================================
00017074                            
00017074                            Obj68_Main:				; XREF: Obj68_Index
00017074 5428 0024                  		addq.b	#2,$24(a0)
00017078 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
0001707E 1228 0028                  		move.b	$28(a0),d1	; get object type
00017082 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00017086 6700                       		beq.s	loc_156BA	; if zero, branch
00017088 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
0001708E                            
0001708E                            loc_156BA:
0001708E 1228 0028                  		move.b	$28(a0),d1	; get object type
00017092 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00017096 4881                       		ext.w	d1
00017098 E841                       		asr.w	#4,d1
0001709A 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
0001709E                            
0001709E                            Obj68_Action:				; XREF: Obj68_Index
0001709E 6100                       		bsr.s	Obj68_MoveSonic
000170A0 3028 0008                  		move.w	8(a0),d0
000170A4 0240 FF80                  		andi.w	#$FF80,d0
000170A8 3238 F700                  		move.w	($FFFFF700).w,d1
000170AC 0441 0080                  		subi.w	#$80,d1
000170B0 0241 FF80                  		andi.w	#$FF80,d1
000170B4 9041                       		sub.w	d1,d0
000170B6 0C40 0280                  		cmpi.w	#$280,d0
000170BA 6200                       		bhi.s	Obj68_Delete
000170BC 4E75                       		rts	
000170BE                            ; ===========================================================================
000170BE                            
000170BE                            Obj68_Delete:
000170BE 4EF9 0000 E142             		jmp	DeleteObject
000170C4                            ; ===========================================================================
000170C4                            
000170C4                            Obj68_MoveSonic:			; XREF: Obj68_Action
000170C4 7400                       		moveq	#0,d2
000170C6 1428 0038                  		move.b	$38(a0),d2
000170CA 3602                       		move.w	d2,d3
000170CC D643                       		add.w	d3,d3
000170CE 43F8 D000                  		lea	($FFFFD000).w,a1
000170D2 3029 0008                  		move.w	8(a1),d0
000170D6 9068 0008                  		sub.w	8(a0),d0
000170DA D042                       		add.w	d2,d0
000170DC B043                       		cmp.w	d3,d0
000170DE 6400                       		bcc.s	locret_1572E
000170E0 3229 000C                  		move.w	$C(a1),d1
000170E4 9268 000C                  		sub.w	$C(a0),d1
000170E8 0641 0030                  		addi.w	#$30,d1
000170EC 0C41 0030                  		cmpi.w	#$30,d1
000170F0 6400                       		bcc.s	locret_1572E
000170F2 0829 0001 0022             		btst	#1,$22(a1)
000170F8 6600                       		bne.s	locret_1572E
000170FA 3028 0036                  		move.w	$36(a0),d0
000170FE D169 0008                  		add.w	d0,8(a1)
00017102                            
00017102                            locret_1572E:
00017102 4E75                       		rts	
00017104                            
00017104                            ; ===========================================================================
00017104                            ; ---------------------------------------------------------------------------
00017104                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00017104                            ; ---------------------------------------------------------------------------
00017104                            
00017104                            Obj69:					; XREF: Obj_Index
00017104 7000                       		moveq	#0,d0
00017106 1028 0024                  		move.b	$24(a0),d0
0001710A 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
0001710E 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00017112                            ; ===========================================================================
00017112 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00017114 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00017116 0000                       		dc.w Obj69_Spinner-Obj69_Index
00017118                            ; ===========================================================================
00017118                            
00017118                            Obj69_Main:				; XREF: Obj69_Index
00017118 5428 0024                  		addq.b	#2,$24(a0)
0001711C 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00017124 317C 4492 0002             		move.w	#$4492,2(a0)
0001712A 0028 0004 0001             		ori.b	#4,1(a0)
00017130 117C 0080 0019             		move.b	#$80,$19(a0)
00017136 7000                       		moveq	#0,d0
00017138 1028 0028                  		move.b	$28(a0),d0
0001713C 0240 000F                  		andi.w	#$F,d0
00017140 C0FC 003C                  		mulu.w	#$3C,d0
00017144 3140 0032                  		move.w	d0,$32(a0)
00017148 4A28 0028                  		tst.b	$28(a0)
0001714C 6A00                       		bpl.s	Obj69_Trapdoor
0001714E 5428 0024                  		addq.b	#2,$24(a0)
00017152 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
0001715A 317C 04DF 0002             		move.w	#$4DF,2(a0)
00017160 117C 0010 0019             		move.b	#$10,$19(a0)
00017166 117C 0002 001C             		move.b	#2,$1C(a0)
0001716C 7000                       		moveq	#0,d0
0001716E 1028 0028                  		move.b	$28(a0),d0	; get object type
00017172 3200                       		move.w	d0,d1
00017174 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00017178 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
0001717C 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00017180 3140 0032                  		move.w	d0,$32(a0)
00017184 0241 0070                  		andi.w	#$70,d1
00017188 0641 0010                  		addi.w	#$10,d1
0001718C E549                       		lsl.w	#2,d1
0001718E 5341                       		subq.w	#1,d1
00017190 3141 0036                  		move.w	d1,$36(a0)
00017194 6000                       		bra.s	Obj69_Spinner
00017196                            ; ===========================================================================
00017196                            
00017196                            Obj69_Trapdoor:				; XREF: Obj69_Index
00017196 5368 0030                  		subq.w	#1,$30(a0)
0001719A 6A00                       		bpl.s	Obj69_Animate
0001719C 3168 0032 0030             		move.w	$32(a0),$30(a0)
000171A2 0868 0000 001C             		bchg	#0,$1C(a0)
000171A8 4A28 0001                  		tst.b	1(a0)
000171AC 6A00                       		bpl.s	Obj69_Animate
000171AE 303C 00BB                  		move.w	#$BB,d0
000171B2 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play door sound
000171B8                            
000171B8                            Obj69_Animate:
000171B8 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000171BE 4EB9 0000 B218             		jsr	AnimateSprite
000171C4 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
000171C8 6600                       		bne.s	Obj69_NotSolid	; if not, branch
000171CA 323C 004B                  		move.w	#$4B,d1
000171CE 343C 000C                  		move.w	#$C,d2
000171D2 3602                       		move.w	d2,d3
000171D4 5243                       		addq.w	#1,d3
000171D6 3828 0008                  		move.w	8(a0),d4
000171DA 6100 9314                  		bsr.w	SolidObject
000171DE 6000 8FE8                  		bra.w	MarkObjGone
000171E2                            ; ===========================================================================
000171E2                            
000171E2                            Obj69_NotSolid:
000171E2 0828 0003 0022             		btst	#3,$22(a0)
000171E8 6700                       		beq.s	Obj69_Display
000171EA 43F8 D000                  		lea	($FFFFD000).w,a1
000171EE 08A9 0003 0022             		bclr	#3,$22(a1)
000171F4 08A8 0003 0022             		bclr	#3,$22(a0)
000171FA 4228 0025                  		clr.b	$25(a0)
000171FE                            
000171FE                            Obj69_Display:
000171FE 6000 8FC8                  		bra.w	MarkObjGone
00017202                            ; ===========================================================================
00017202                            
00017202                            Obj69_Spinner:				; XREF: Obj69_Index
00017202 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017206 C068 0036                  		and.w	$36(a0),d0
0001720A 6600                       		bne.s	Obj69_Delay
0001720C 117C 0001 0034             		move.b	#1,$34(a0)
00017212                            
00017212                            Obj69_Delay:
00017212 4A28 0034                  		tst.b	$34(a0)
00017216 6700                       		beq.s	Obj69_Animate2
00017218 5368 0030                  		subq.w	#1,$30(a0)
0001721C 6A00                       		bpl.s	Obj69_Animate2
0001721E 3168 0032 0030             		move.w	$32(a0),$30(a0)
00017224 4228 0034                  		clr.b	$34(a0)
00017228 0868 0000 001C             		bchg	#0,$1C(a0)
0001722E                            
0001722E                            Obj69_Animate2:
0001722E 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00017234 4EB9 0000 B218             		jsr	AnimateSprite
0001723A 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
0001723E 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00017240 323C 001B                  		move.w	#$1B,d1
00017244 343C 0007                  		move.w	#7,d2
00017248 3602                       		move.w	d2,d3
0001724A 5243                       		addq.w	#1,d3
0001724C 3828 0008                  		move.w	8(a0),d4
00017250 6100 929E                  		bsr.w	SolidObject
00017254 6000 8F72                  		bra.w	MarkObjGone
00017258                            ; ===========================================================================
00017258                            
00017258                            Obj69_NotSolid2:
00017258 0828 0003 0022             		btst	#3,$22(a0)
0001725E 6700                       		beq.s	Obj69_Display2
00017260 43F8 D000                  		lea	($FFFFD000).w,a1
00017264 08A9 0003 0022             		bclr	#3,$22(a1)
0001726A 08A8 0003 0022             		bclr	#3,$22(a0)
00017270 4228 0025                  		clr.b	$25(a0)
00017274                            
00017274                            Obj69_Display2:
00017274 6000 8F52                  		bra.w	MarkObjGone
00017278                            ; ===========================================================================
00017278                            Ani_obj69:
00017278                            	include "_anim\obj69.asm"
00017278                            ; ---------------------------------------------------------------------------
00017278                            ; Animation script - trapdoor (SBZ)
00017278                            ; ---------------------------------------------------------------------------
00017278 0000                       		dc.w byte_158AC-Ani_obj69
0001727A 0000                       		dc.w byte_158B2-Ani_obj69
0001727C 0000                       		dc.w byte_158B8-Ani_obj69
0001727E 0000                       		dc.w byte_158CC-Ani_obj69
00017280 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00017286 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
0001728C 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00017299 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000172A0 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000172AD 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000172B4                            		even
000172B4                            		even
000172B4                            
000172B4                            ; ---------------------------------------------------------------------------
000172B4                            ; Sprite mappings - trapdoor (SBZ)
000172B4                            ; ---------------------------------------------------------------------------
000172B4                            Map_obj69:
000172B4                            	include "_maps\obj69.asm"
000172B4                            ; ---------------------------------------------------------------------------
000172B4                            ; Sprite mappings - trapdoor (SBZ)
000172B4                            ; ---------------------------------------------------------------------------
000172B4 0000                       		dc.w byte_158E6-Map_obj69
000172B6 0000                       		dc.w byte_158FB-Map_obj69
000172B8 0000                       		dc.w byte_15924-Map_obj69
000172BA 04                         byte_158E6:	dc.b 4
000172BB F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
000172C0 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
000172C5 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
000172CA F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
000172CF 08                         byte_158FB:	dc.b 8
000172D0 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
000172D5 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
000172DA 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
000172DF 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
000172E4 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
000172E9 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
000172EE 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
000172F3 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
000172F8 04                         byte_15924:	dc.b 4
000172F9 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
000172FE 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00017303 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00017308 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
0001730E 00                         		even
0001730E 00                         		even
0001730E                            
0001730E                            ; ---------------------------------------------------------------------------
0001730E                            ; Sprite mappings - spinning platforms (SBZ)
0001730E                            ; ---------------------------------------------------------------------------
0001730E                            Map_obj69a:
0001730E                            	include "_maps\obj69a.asm"
0001730E                            ; ---------------------------------------------------------------------------
0001730E                            ; Sprite mappings - spinning platforms (SBZ)
0001730E                            ; ---------------------------------------------------------------------------
0001730E 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00017312 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00017316 0000                       		dc.w byte_15970-Map_obj69a
00017318 02                         byte_15944:	dc.b 2
00017319 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0001731E F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00017323 02                         byte_1594F:	dc.b 2
00017324 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00017329 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
0001732E 02                         byte_1595A:	dc.b 2
0001732F F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00017334 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00017339 02                         byte_15965:	dc.b 2
0001733A F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
0001733F 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00017344 02                         byte_15970:	dc.b 2
00017345 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
0001734A 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00017350 00                         		even
00017350 00                         		even
00017350                            
00017350                            ; ===========================================================================
00017350                            ; ---------------------------------------------------------------------------
00017350                            ; Object 6A - ground saws and pizza cutters (SBZ)
00017350                            ; ---------------------------------------------------------------------------
00017350                            
00017350                            Obj6A:					; XREF: Obj_Index
00017350 7000                       		moveq	#0,d0
00017352 1028 0024                  		move.b	$24(a0),d0
00017356 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
0001735A 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
0001735E                            ; ===========================================================================
0001735E 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00017360 0000                       		dc.w Obj6A_Action-Obj6A_Index
00017362                            ; ===========================================================================
00017362                            
00017362                            Obj6A_Main:				; XREF: Obj6A_Index
00017362 5428 0024                  		addq.b	#2,$24(a0)
00017366 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
0001736E 317C 43B5 0002             		move.w	#$43B5,2(a0)
00017374 117C 0004 0001             		move.b	#4,1(a0)
0001737A 117C 0004 0018             		move.b	#4,$18(a0)
00017380 117C 0020 0019             		move.b	#$20,$19(a0)
00017386 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001738C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00017392 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00017398 6400                       		bcc.s	Obj6A_Action
0001739A 117C 00A2 0020             		move.b	#$A2,$20(a0)
000173A0                            
000173A0                            Obj6A_Action:				; XREF: Obj6A_Index
000173A0 7000                       		moveq	#0,d0
000173A2 1028 0028                  		move.b	$28(a0),d0
000173A6 0240 0007                  		andi.w	#7,d0
000173AA D040                       		add.w	d0,d0
000173AC 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
000173B0 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
000173B4 3028 003A                  		move.w	$3A(a0),d0
000173B8 0240 FF80                  		andi.w	#$FF80,d0
000173BC 3238 F700                  		move.w	($FFFFF700).w,d1
000173C0 0441 0080                  		subi.w	#$80,d1
000173C4 0241 FF80                  		andi.w	#$FF80,d1
000173C8 9041                       		sub.w	d1,d0
000173CA 0C40 0280                  		cmpi.w	#$280,d0
000173CE 6200                       		bhi.s	Obj6A_Delete
000173D0 4EF9 0000 E106             		jmp	DisplaySprite
000173D6                            ; ===========================================================================
000173D6                            
000173D6                            Obj6A_Delete:
000173D6 4EF9 0000 E142             		jmp	DeleteObject
000173DC                            ; ===========================================================================
000173DC 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
000173E0 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
000173E4 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
000173E6                            ; ===========================================================================
000173E6                            
000173E6                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
000173E6 4E75                       		rts	
000173E8                            ; ===========================================================================
000173E8                            
000173E8                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
000173E8 323C 0060                  		move.w	#$60,d1
000173EC 7000                       		moveq	#0,d0
000173EE 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000173F2 0828 0000 0022             		btst	#0,$22(a0)
000173F8 6700                       		beq.s	Obj6A_Animate01
000173FA 4440                       		neg.w	d0
000173FC D041                       		add.w	d1,d0
000173FE                            
000173FE                            Obj6A_Animate01:
000173FE 3228 003A                  		move.w	$3A(a0),d1
00017402 9240                       		sub.w	d0,d1
00017404 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00017408 5328 001E                  		subq.b	#1,$1E(a0)
0001740C 6A00                       		bpl.s	loc_15A46
0001740E 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00017414 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0001741A                            
0001741A                            loc_15A46:
0001741A 4A28 0001                  		tst.b	1(a0)
0001741E 6A00                       		bpl.s	locret_15A60
00017420 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017424 0240 000F                  		andi.w	#$F,d0
00017428 6600                       		bne.s	locret_15A60
0001742A 303C 00B0                  		move.w	#$B0,d0
0001742E 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play saw sound
00017434                            
00017434                            locret_15A60:
00017434 4E75                       		rts	
00017436                            ; ===========================================================================
00017436                            
00017436                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00017436 323C 0030                  		move.w	#$30,d1
0001743A 7000                       		moveq	#0,d0
0001743C 1038 FE64                  		move.b	($FFFFFE64).w,d0
00017440 0828 0000 0022             		btst	#0,$22(a0)
00017446 6700                       		beq.s	Obj6A_Animate02
00017448 4440                       		neg.w	d0
0001744A 0640 0080                  		addi.w	#$80,d0
0001744E                            
0001744E                            Obj6A_Animate02:
0001744E 3228 0038                  		move.w	$38(a0),d1
00017452 9240                       		sub.w	d0,d1
00017454 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00017458 5328 001E                  		subq.b	#1,$1E(a0)
0001745C 6A00                       		bpl.s	loc_15A96
0001745E 117C 0002 001E             		move.b	#2,$1E(a0)
00017464 0868 0000 001A             		bchg	#0,$1A(a0)
0001746A                            
0001746A                            loc_15A96:
0001746A 4A28 0001                  		tst.b	1(a0)
0001746E 6A00                       		bpl.s	locret_15AB0
00017470 1038 FE64                  		move.b	($FFFFFE64).w,d0
00017474 0C00 0018                  		cmpi.b	#$18,d0
00017478 6600                       		bne.s	locret_15AB0
0001747A 303C 00B0                  		move.w	#$B0,d0
0001747E 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play saw sound
00017484                            
00017484                            locret_15AB0:
00017484 4E75                       		rts	
00017486                            ; ===========================================================================
00017486                            
00017486                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00017486 4A28 003D                  		tst.b	$3D(a0)
0001748A 6600                       		bne.s	Obj6A_Animate03
0001748C 3038 D008                  		move.w	($FFFFD008).w,d0
00017490 0440 00C0                  		subi.w	#$C0,d0
00017494 6500                       		bcs.s	loc_15B02
00017496 9068 0008                  		sub.w	8(a0),d0
0001749A 6500                       		bcs.s	loc_15B02
0001749C 3038 D00C                  		move.w	($FFFFD00C).w,d0
000174A0 0440 0080                  		subi.w	#$80,d0
000174A4 B068 000C                  		cmp.w	$C(a0),d0
000174A8 6400                       		bcc.s	locret_15B04
000174AA 0640 0100                  		addi.w	#$100,d0
000174AE B068 000C                  		cmp.w	$C(a0),d0
000174B2 6500                       		bcs.s	locret_15B04
000174B4 117C 0001 003D             		move.b	#1,$3D(a0)
000174BA 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
000174C0 117C 00A2 0020             		move.b	#$A2,$20(a0)
000174C6 117C 0002 001A             		move.b	#2,$1A(a0)
000174CC 303C 00B0                  		move.w	#$B0,d0
000174D0 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play saw sound
000174D6                            
000174D6                            loc_15B02:
000174D6 588F                       		addq.l	#4,sp
000174D8                            
000174D8                            locret_15B04:
000174D8 4E75                       		rts	
000174DA                            ; ===========================================================================
000174DA                            
000174DA                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
000174DA 4EB9 0000 E0E0             		jsr	SpeedToPos
000174E0 3168 0008 003A             		move.w	8(a0),$3A(a0)
000174E6 5328 001E                  		subq.b	#1,$1E(a0)
000174EA 6A00                       		bpl.s	locret_15B24
000174EC 117C 0002 001E             		move.b	#2,$1E(a0)
000174F2 0868 0000 001A             		bchg	#0,$1A(a0)
000174F8                            
000174F8                            locret_15B24:
000174F8 4E75                       		rts	
000174FA                            ; ===========================================================================
000174FA                            
000174FA                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
000174FA 4A28 003D                  		tst.b	$3D(a0)
000174FE 6600                       		bne.s	Obj6A_Animate04
00017500 3038 D008                  		move.w	($FFFFD008).w,d0
00017504 0640 00E0                  		addi.w	#$E0,d0
00017508 9068 0008                  		sub.w	8(a0),d0
0001750C 6400                       		bcc.s	loc_15B74
0001750E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017512 0440 0080                  		subi.w	#$80,d0
00017516 B068 000C                  		cmp.w	$C(a0),d0
0001751A 6400                       		bcc.s	locret_15B76
0001751C 0640 0100                  		addi.w	#$100,d0
00017520 B068 000C                  		cmp.w	$C(a0),d0
00017524 6500                       		bcs.s	locret_15B76
00017526 117C 0001 003D             		move.b	#1,$3D(a0)
0001752C 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00017532 117C 00A2 0020             		move.b	#$A2,$20(a0)
00017538 117C 0002 001A             		move.b	#2,$1A(a0)
0001753E 303C 00B0                  		move.w	#$B0,d0
00017542 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play saw sound
00017548                            
00017548                            loc_15B74:
00017548 588F                       		addq.l	#4,sp
0001754A                            
0001754A                            locret_15B76:
0001754A 4E75                       		rts	
0001754C                            ; ===========================================================================
0001754C                            
0001754C                            Obj6A_Animate04:
0001754C 4EB9 0000 E0E0             		jsr	SpeedToPos
00017552 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017558 5328 001E                  		subq.b	#1,$1E(a0)
0001755C 6A00                       		bpl.s	locret_15B96
0001755E 117C 0002 001E             		move.b	#2,$1E(a0)
00017564 0868 0000 001A             		bchg	#0,$1A(a0)
0001756A                            
0001756A                            locret_15B96:
0001756A 4E75                       		rts	
0001756C                            ; ===========================================================================
0001756C                            ; ---------------------------------------------------------------------------
0001756C                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
0001756C                            ; ---------------------------------------------------------------------------
0001756C                            Map_obj6A:
0001756C                            	include "_maps\obj6A.asm"
0001756C                            ; ---------------------------------------------------------------------------
0001756C                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
0001756C                            ; ---------------------------------------------------------------------------
0001756C 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00017570 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00017574 07                         byte_15BA0:	dc.b 7
00017575 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
0001757A D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
0001757F E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00017584 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00017589 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
0001758E 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00017593 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00017598 07                         byte_15BC4:	dc.b 7
00017599 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
0001759E D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000175A3 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000175A8 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000175AD E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000175B2 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000175B7 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000175BC 04                         byte_15BE8:	dc.b 4
000175BD E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000175C2 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000175C7 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000175CC 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000175D1 04                         byte_15BFD:	dc.b 4
000175D2 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000175D7 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000175DC 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000175E1 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000175E6                            		even
000175E6                            		even
000175E6                            
000175E6                            ; ===========================================================================
000175E6                            ; ---------------------------------------------------------------------------
000175E6                            ; Object 6B - stomper (SBZ)
000175E6                            ; ---------------------------------------------------------------------------
000175E6                            
000175E6                            Obj6B:					; XREF: Obj_Index
000175E6 7000                       		moveq	#0,d0
000175E8 1028 0024                  		move.b	$24(a0),d0
000175EC 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
000175F0 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
000175F4                            ; ===========================================================================
000175F4 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
000175F6 0000                       		dc.w Obj6B_Action-Obj6B_Index
000175F8                            
000175F8 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
000175FC 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00017600 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00017604 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00017608 8040 0005                  		dc.b  $80, $40,	  0,   5
0001760C                            ; ===========================================================================
0001760C                            
0001760C                            Obj6B_Main:				; XREF: Obj6B_Index
0001760C 5428 0024                  		addq.b	#2,$24(a0)
00017610 7000                       		moveq	#0,d0
00017612 1028 0028                  		move.b	$28(a0),d0
00017616 E448                       		lsr.w	#2,d0
00017618 0240 001C                  		andi.w	#$1C,d0
0001761C 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00017620 115B 0019                  		move.b	(a3)+,$19(a0)
00017624 115B 0016                  		move.b	(a3)+,$16(a0)
00017628 E448                       		lsr.w	#2,d0
0001762A 1140 001A                  		move.b	d0,$1A(a0)
0001762E 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00017636 317C 22C0 0002             		move.w	#$22C0,2(a0)
0001763C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00017642 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00017644 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
0001764A 6700                       		beq.s	Obj6B_SBZ3
0001764C                            
0001764C                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
0001764C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017650 7000                       		moveq	#0,d0
00017652 1028 0023                  		move.b	$23(a0),d0
00017656 6700                       		beq.s	Obj6B_Delete
00017658 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001765E                            
0001765E                            Obj6B_Delete:
0001765E 4EF9 0000 E142             		jmp	DeleteObject
00017664                            ; ===========================================================================
00017664                            
00017664                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00017664 317C 41F0 0002             		move.w	#$41F0,2(a0)
0001766A 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00017670 6600                       		bne.s	Obj6B_SBZ12
00017672 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017676 7000                       		moveq	#0,d0
00017678 1028 0023                  		move.b	$23(a0),d0
0001767C 6700                       		beq.s	Obj6B_SBZ12
0001767E 0832 0000 0002             		btst	#0,2(a2,d0.w)
00017684 6700                       		beq.s	Obj6B_SBZ12
00017686 4238 F7CB                  		clr.b	($FFFFF7CB).w
0001768A 60C0                       		bra.s	Obj6B_ChkGone
0001768C                            ; ===========================================================================
0001768C                            
0001768C                            Obj6B_SBZ12:				; XREF: Obj6B_Main
0001768C 0028 0004 0001             		ori.b	#4,1(a0)
00017692 117C 0004 0018             		move.b	#4,$18(a0)
00017698 3168 0008 0034             		move.w	8(a0),$34(a0)
0001769E 3168 000C 0030             		move.w	$C(a0),$30(a0)
000176A4 7000                       		moveq	#0,d0
000176A6 101B                       		move.b	(a3)+,d0
000176A8 3140 003C                  		move.w	d0,$3C(a0)
000176AC 7000                       		moveq	#0,d0
000176AE 1028 0028                  		move.b	$28(a0),d0
000176B2 6A00                       		bpl.s	Obj6B_Action
000176B4 0200 000F                  		andi.b	#$F,d0
000176B8 1140 003E                  		move.b	d0,$3E(a0)
000176BC 1153 0028                  		move.b	(a3),$28(a0)
000176C0 0C13 0005                  		cmpi.b	#5,(a3)
000176C4 6600                       		bne.s	Obj6B_ChkGone2
000176C6 08E8 0004 0001             		bset	#4,1(a0)
000176CC                            
000176CC                            Obj6B_ChkGone2:
000176CC 45F8 FC00                  		lea	($FFFFFC00).w,a2
000176D0 7000                       		moveq	#0,d0
000176D2 1028 0023                  		move.b	$23(a0),d0
000176D6 6700                       		beq.s	Obj6B_Action
000176D8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000176DE                            
000176DE                            Obj6B_Action:				; XREF: Obj6B_Index
000176DE 3F28 0008                  		move.w	8(a0),-(sp)
000176E2 7000                       		moveq	#0,d0
000176E4 1028 0028                  		move.b	$28(a0),d0
000176E8 0240 000F                  		andi.w	#$F,d0
000176EC D040                       		add.w	d0,d0
000176EE 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
000176F2 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
000176F6 381F                       		move.w	(sp)+,d4
000176F8 4A28 0001                  		tst.b	1(a0)
000176FC 6A00                       		bpl.s	Obj6B_ChkDel
000176FE 7200                       		moveq	#0,d1
00017700 1228 0019                  		move.b	$19(a0),d1
00017704 0641 000B                  		addi.w	#$B,d1
00017708 7400                       		moveq	#0,d2
0001770A 1428 0016                  		move.b	$16(a0),d2
0001770E 3602                       		move.w	d2,d3
00017710 5243                       		addq.w	#1,d3
00017712 6100 8DDC                  		bsr.w	SolidObject
00017716                            
00017716                            Obj6B_ChkDel:
00017716 3028 0034                  		move.w	$34(a0),d0
0001771A 0240 FF80                  		andi.w	#$FF80,d0
0001771E 3238 F700                  		move.w	($FFFFF700).w,d1
00017722 0441 0080                  		subi.w	#$80,d1
00017726 0241 FF80                  		andi.w	#$FF80,d1
0001772A 9041                       		sub.w	d1,d0
0001772C 0C40 0280                  		cmpi.w	#$280,d0
00017730 6200                       		bhi.s	loc_15D64
00017732 4EF9 0000 E106             		jmp	DisplaySprite
00017738                            ; ===========================================================================
00017738                            
00017738                            loc_15D64:
00017738 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0001773E 6600                       		bne.s	Obj6B_Delete2
00017740 4238 F7CB                  		clr.b	($FFFFF7CB).w
00017744 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017748 7000                       		moveq	#0,d0
0001774A 1028 0023                  		move.b	$23(a0),d0
0001774E 6700                       		beq.s	Obj6B_Delete2
00017750 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017756                            
00017756                            Obj6B_Delete2:
00017756 4EF9 0000 E142             		jmp	DeleteObject
0001775C                            ; ===========================================================================
0001775C 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00017760 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00017764 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00017768                            ; ===========================================================================
00017768                            
00017768                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00017768 4E75                       		rts	
0001776A                            ; ===========================================================================
0001776A                            
0001776A                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
0001776A 4A28 0038                  		tst.b	$38(a0)
0001776E 6600                       		bne.s	loc_15DB4
00017770 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00017774 7000                       		moveq	#0,d0
00017776 1028 003E                  		move.b	$3E(a0),d0
0001777A 0832 0000 0000             		btst	#0,(a2,d0.w)
00017780 6700                       		beq.s	loc_15DC2
00017782 117C 0001 0038             		move.b	#1,$38(a0)
00017788                            
00017788                            loc_15DB4:
00017788 3028 003C                  		move.w	$3C(a0),d0
0001778C B068 003A                  		cmp.w	$3A(a0),d0
00017790 6700                       		beq.s	loc_15DE0
00017792 5468 003A                  		addq.w	#2,$3A(a0)
00017796                            
00017796                            loc_15DC2:
00017796 3028 003A                  		move.w	$3A(a0),d0
0001779A 0828 0000 0022             		btst	#0,$22(a0)
000177A0 6700                       		beq.s	loc_15DD4
000177A2 4440                       		neg.w	d0
000177A4 0640 0080                  		addi.w	#$80,d0
000177A8                            
000177A8                            loc_15DD4:
000177A8 3228 0034                  		move.w	$34(a0),d1
000177AC 9240                       		sub.w	d0,d1
000177AE 3141 0008                  		move.w	d1,8(a0)
000177B2 4E75                       		rts	
000177B4                            ; ===========================================================================
000177B4                            
000177B4                            loc_15DE0:
000177B4 5228 0028                  		addq.b	#1,$28(a0)
000177B8 317C 00B4 0036             		move.w	#$B4,$36(a0)
000177BE 4228 0038                  		clr.b	$38(a0)
000177C2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000177C6 7000                       		moveq	#0,d0
000177C8 1028 0023                  		move.b	$23(a0),d0
000177CC 67C8                       		beq.s	loc_15DC2
000177CE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000177D4 60C0                       		bra.s	loc_15DC2
000177D6                            ; ===========================================================================
000177D6                            
000177D6                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
000177D6 4A28 0038                  		tst.b	$38(a0)
000177DA 6600                       		bne.s	loc_15E14
000177DC 5368 0036                  		subq.w	#1,$36(a0)
000177E0 6600                       		bne.s	loc_15E1E
000177E2 117C 0001 0038             		move.b	#1,$38(a0)
000177E8                            
000177E8                            loc_15E14:
000177E8 4A68 003A                  		tst.w	$3A(a0)
000177EC 6700                       		beq.s	loc_15E3C
000177EE 5568 003A                  		subq.w	#2,$3A(a0)
000177F2                            
000177F2                            loc_15E1E:
000177F2 3028 003A                  		move.w	$3A(a0),d0
000177F6 0828 0000 0022             		btst	#0,$22(a0)
000177FC 6700                       		beq.s	loc_15E30
000177FE 4440                       		neg.w	d0
00017800 0640 0080                  		addi.w	#$80,d0
00017804                            
00017804                            loc_15E30:
00017804 3228 0034                  		move.w	$34(a0),d1
00017808 9240                       		sub.w	d0,d1
0001780A 3141 0008                  		move.w	d1,8(a0)
0001780E 4E75                       		rts	
00017810                            ; ===========================================================================
00017810                            
00017810                            loc_15E3C:
00017810 5328 0028                  		subq.b	#1,$28(a0)
00017814 4228 0038                  		clr.b	$38(a0)
00017818 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001781C 7000                       		moveq	#0,d0
0001781E 1028 0023                  		move.b	$23(a0),d0
00017822 67CE                       		beq.s	loc_15E1E
00017824 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001782A 60C6                       		bra.s	loc_15E1E
0001782C                            ; ===========================================================================
0001782C                            
0001782C                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
0001782C 4A28 0038                  		tst.b	$38(a0)
00017830 6600                       		bne.s	loc_15E7C
00017832 4A68 003A                  		tst.w	$3A(a0)
00017836 6700                       		beq.s	loc_15E6A
00017838 5368 003A                  		subq.w	#1,$3A(a0)
0001783C 6000                       		bra.s	loc_15E8E
0001783E                            ; ===========================================================================
0001783E                            
0001783E                            loc_15E6A:
0001783E 5368 0036                  		subq.w	#1,$36(a0)
00017842 6A00                       		bpl.s	loc_15E8E
00017844 317C 003C 0036             		move.w	#$3C,$36(a0)
0001784A 117C 0001 0038             		move.b	#1,$38(a0)
00017850                            
00017850                            loc_15E7C:
00017850 5068 003A                  		addq.w	#8,$3A(a0)
00017854 3028 003A                  		move.w	$3A(a0),d0
00017858 B068 003C                  		cmp.w	$3C(a0),d0
0001785C 6600                       		bne.s	loc_15E8E
0001785E 4228 0038                  		clr.b	$38(a0)
00017862                            
00017862                            loc_15E8E:
00017862 3028 003A                  		move.w	$3A(a0),d0
00017866 0828 0000 0022             		btst	#0,$22(a0)
0001786C 6700                       		beq.s	loc_15EA0
0001786E 4440                       		neg.w	d0
00017870 0640 0038                  		addi.w	#$38,d0
00017874                            
00017874                            loc_15EA0:
00017874 3228 0030                  		move.w	$30(a0),d1
00017878 D240                       		add.w	d0,d1
0001787A 3141 000C                  		move.w	d1,$C(a0)
0001787E 4E75                       		rts	
00017880                            ; ===========================================================================
00017880                            
00017880                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00017880 4A28 0038                  		tst.b	$38(a0)
00017884 6600                       		bne.s	loc_15ED0
00017886 4A68 003A                  		tst.w	$3A(a0)
0001788A 6700                       		beq.s	loc_15EBE
0001788C 5168 003A                  		subq.w	#8,$3A(a0)
00017890 6000                       		bra.s	loc_15EF0
00017892                            ; ===========================================================================
00017892                            
00017892                            loc_15EBE:
00017892 5368 0036                  		subq.w	#1,$36(a0)
00017896 6A00                       		bpl.s	loc_15EF0
00017898 317C 003C 0036             		move.w	#$3C,$36(a0)
0001789E 117C 0001 0038             		move.b	#1,$38(a0)
000178A4                            
000178A4                            loc_15ED0:
000178A4 3028 003A                  		move.w	$3A(a0),d0
000178A8 B068 003C                  		cmp.w	$3C(a0),d0
000178AC 6700                       		beq.s	loc_15EE0
000178AE 5068 003A                  		addq.w	#8,$3A(a0)
000178B2 6000                       		bra.s	loc_15EF0
000178B4                            ; ===========================================================================
000178B4                            
000178B4                            loc_15EE0:
000178B4 5368 0036                  		subq.w	#1,$36(a0)
000178B8 6A00                       		bpl.s	loc_15EF0
000178BA 317C 003C 0036             		move.w	#$3C,$36(a0)
000178C0 4228 0038                  		clr.b	$38(a0)
000178C4                            
000178C4                            loc_15EF0:
000178C4 3028 003A                  		move.w	$3A(a0),d0
000178C8 0828 0000 0022             		btst	#0,$22(a0)
000178CE 6700                       		beq.s	loc_15F02
000178D0 4440                       		neg.w	d0
000178D2 0640 0038                  		addi.w	#$38,d0
000178D6                            
000178D6                            loc_15F02:
000178D6 3228 0030                  		move.w	$30(a0),d1
000178DA D240                       		add.w	d0,d1
000178DC 3141 000C                  		move.w	d1,$C(a0)
000178E0 4E75                       		rts	
000178E2                            ; ===========================================================================
000178E2                            
000178E2                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
000178E2 4A28 0038                  		tst.b	$38(a0)
000178E6 6600                       		bne.s	loc_15F3E
000178E8 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000178EC 7000                       		moveq	#0,d0
000178EE 1028 003E                  		move.b	$3E(a0),d0
000178F2 0832 0000 0000             		btst	#0,(a2,d0.w)
000178F8 6700                       		beq.s	locret_15F5C
000178FA 117C 0001 0038             		move.b	#1,$38(a0)
00017900 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017904 7000                       		moveq	#0,d0
00017906 1028 0023                  		move.b	$23(a0),d0
0001790A 6700                       		beq.s	loc_15F3E
0001790C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017912                            
00017912                            loc_15F3E:
00017912 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0001791A 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00017922 3168 0008 0034             		move.w	8(a0),$34(a0)
00017928 0C68 0980 0008             		cmpi.w	#$980,8(a0)
0001792E 6700                       		beq.s	loc_15F5E
00017930                            
00017930                            locret_15F5C:
00017930 4E75                       		rts	
00017932                            ; ===========================================================================
00017932                            
00017932                            loc_15F5E:
00017932 4228 0028                  		clr.b	$28(a0)
00017936 4228 0038                  		clr.b	$38(a0)
0001793A 4E75                       		rts	
0001793C                            ; ===========================================================================
0001793C                            ; ---------------------------------------------------------------------------
0001793C                            ; Sprite mappings - stomper and	platforms (SBZ)
0001793C                            ; ---------------------------------------------------------------------------
0001793C                            Map_obj6B:
0001793C                            	include "_maps\obj6B.asm"
0001793C                            ; ---------------------------------------------------------------------------
0001793C                            ; Sprite mappings - stomper and	platforms (SBZ)
0001793C                            ; ---------------------------------------------------------------------------
0001793C 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00017940 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00017944 0000                       		dc.w byte_15FB0-Map_obj6B
00017946 04                         byte_15F72:	dc.b 4
00017947 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
0001794C F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00017951 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00017956 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
0001795B 08                         byte_15F87:	dc.b 8
0001795C E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00017961 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00017966 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
0001796B E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00017970 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00017975 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
0001797A 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
0001797F 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00017984 0E                         byte_15FB0:	dc.b $E
00017985 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
0001798A C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
0001798F C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00017994 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00017999 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
0001799E C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
000179A3 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
000179A8 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
000179AD E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
000179B2 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
000179B7 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
000179BC 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
000179C1 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
000179C6 200F 0058 80               		dc.b $20, $F, 0, $58, $80
000179CC 00                         		even
000179CC 00                         		even
000179CC                            
000179CC                            ; ===========================================================================
000179CC                            ; ---------------------------------------------------------------------------
000179CC                            ; Object 6C - vanishing	platforms (SBZ)
000179CC                            ; ---------------------------------------------------------------------------
000179CC                            
000179CC                            Obj6C:					; XREF: Obj_Index
000179CC 7000                       		moveq	#0,d0
000179CE 1028 0024                  		move.b	$24(a0),d0
000179D2 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
000179D6 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
000179DA                            ; ===========================================================================
000179DA 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
000179DC 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000179DE 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000179E0 0000                       		dc.w loc_16068-Obj6C_Index
000179E2                            ; ===========================================================================
000179E2                            
000179E2                            Obj6C_Main:				; XREF: Obj6C_Index
000179E2 5C28 0024                  		addq.b	#6,$24(a0)
000179E6 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
000179EE 317C 44C3 0002             		move.w	#$44C3,2(a0)
000179F4 0028 0004 0001             		ori.b	#4,1(a0)
000179FA 117C 0010 0019             		move.b	#$10,$19(a0)
00017A00 117C 0004 0018             		move.b	#4,$18(a0)
00017A06 7000                       		moveq	#0,d0
00017A08 1028 0028                  		move.b	$28(a0),d0	; get object type
00017A0C 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00017A10 5240                       		addq.w	#1,d0		; add 1
00017A12 EF48                       		lsl.w	#7,d0		; multiply by $80
00017A14 3200                       		move.w	d0,d1
00017A16 5340                       		subq.w	#1,d0
00017A18 3140 0030                  		move.w	d0,$30(a0)
00017A1C 3140 0032                  		move.w	d0,$32(a0)
00017A20 7000                       		moveq	#0,d0
00017A22 1028 0028                  		move.b	$28(a0),d0	; get object type
00017A26 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00017A2A 0641 0080                  		addi.w	#$80,d1
00017A2E C0C1                       		mulu.w	d1,d0
00017A30 E088                       		lsr.l	#8,d0
00017A32 3140 0036                  		move.w	d0,$36(a0)
00017A36 5341                       		subq.w	#1,d1
00017A38 3141 0038                  		move.w	d1,$38(a0)
00017A3C                            
00017A3C                            loc_16068:				; XREF: Obj6C_Index
00017A3C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017A40 9068 0036                  		sub.w	$36(a0),d0
00017A44 C068 0038                  		and.w	$38(a0),d0
00017A48 6600                       		bne.s	Obj6C_Animate
00017A4A 5928 0024                  		subq.b	#4,$24(a0)
00017A4E 6000                       		bra.s	Obj6C_Vanish
00017A50                            ; ===========================================================================
00017A50                            
00017A50                            Obj6C_Animate:
00017A50 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00017A56 4EB9 0000 B218             		jsr	AnimateSprite
00017A5C 6000 876A                  		bra.w	MarkObjGone
00017A60                            ; ===========================================================================
00017A60                            
00017A60                            Obj6C_Vanish:				; XREF: Obj6C_Index
00017A60 5368 0030                  		subq.w	#1,$30(a0)
00017A64 6A00                       		bpl.s	loc_160AA
00017A66 317C 007F 0030             		move.w	#127,$30(a0)
00017A6C 4A28 001C                  		tst.b	$1C(a0)
00017A70 6700                       		beq.s	loc_160A4
00017A72 3168 0032 0030             		move.w	$32(a0),$30(a0)
00017A78                            
00017A78                            loc_160A4:
00017A78 0868 0000 001C             		bchg	#0,$1C(a0)
00017A7E                            
00017A7E                            loc_160AA:
00017A7E 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00017A84 4EB9 0000 B218             		jsr	AnimateSprite
00017A8A 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00017A90 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00017A92 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00017A98 6600                       		bne.s	loc_160D6
00017A9A 7200                       		moveq	#0,d1
00017A9C 1228 0019                  		move.b	$19(a0),d1
00017AA0 4EB9 0000 7EF8             		jsr	(PlatformObject).l
00017AA6 6000 8720                  		bra.w	MarkObjGone
00017AAA                            ; ===========================================================================
00017AAA                            
00017AAA                            loc_160D6:
00017AAA 7200                       		moveq	#0,d1
00017AAC 1228 0019                  		move.b	$19(a0),d1
00017AB0 4EB9 0000 806C             		jsr	(ExitPlatform).l
00017AB6 3428 0008                  		move.w	8(a0),d2
00017ABA 4EB9 0000 85D6             		jsr	(MvSonicOnPtfm2).l
00017AC0 6000 8706                  		bra.w	MarkObjGone
00017AC4                            ; ===========================================================================
00017AC4                            
00017AC4                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00017AC4 0828 0003 0022             		btst	#3,$22(a0)
00017ACA 6700                       		beq.s	Obj6C_Display
00017ACC 43F8 D000                  		lea	($FFFFD000).w,a1
00017AD0 08A9 0003 0022             		bclr	#3,$22(a1)
00017AD6 08A8 0003 0022             		bclr	#3,$22(a0)
00017ADC 117C 0002 0024             		move.b	#2,$24(a0)
00017AE2 4228 0025                  		clr.b	$25(a0)
00017AE6                            
00017AE6                            Obj6C_Display:
00017AE6 6000 86E0                  		bra.w	MarkObjGone
00017AEA                            ; ===========================================================================
00017AEA                            Ani_obj6C:
00017AEA                            	include "_anim\obj6C.asm"
00017AEA                            ; ---------------------------------------------------------------------------
00017AEA                            ; Animation script - vanishing platforms (SBZ)
00017AEA                            ; ---------------------------------------------------------------------------
00017AEA 0000                       		dc.w byte_1611A-Ani_obj6C
00017AEC 0000                       		dc.w byte_16122-Ani_obj6C
00017AEE 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00017AF6 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00017AFE                            		even
00017AFE                            		even
00017AFE                            
00017AFE                            ; ---------------------------------------------------------------------------
00017AFE                            ; Sprite mappings - vanishing platforms	(SBZ)
00017AFE                            ; ---------------------------------------------------------------------------
00017AFE                            Map_obj6C:
00017AFE                            	include "_maps\obj6C.asm"
00017AFE                            ; ---------------------------------------------------------------------------
00017AFE                            ; Sprite mappings - vanishing platforms	(SBZ)
00017AFE                            ; ---------------------------------------------------------------------------
00017AFE 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00017B02 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00017B06 01                         byte_16132:	dc.b 1
00017B07 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00017B0C 01                         byte_16138:	dc.b 1
00017B0D F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00017B12 01                         byte_1613E:	dc.b 1
00017B13 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00017B18 00                         byte_16144:	dc.b 0
00017B1A 00                         		even
00017B1A 00                         		even
00017B1A                            
00017B1A                            ; ===========================================================================
00017B1A                            ; ---------------------------------------------------------------------------
00017B1A                            ; Object 6E - electrocution orbs (SBZ)
00017B1A                            ; ---------------------------------------------------------------------------
00017B1A                            
00017B1A                            Obj6E:					; XREF: Obj_Index
00017B1A 7000                       		moveq	#0,d0
00017B1C 1028 0024                  		move.b	$24(a0),d0
00017B20 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00017B24 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00017B28                            ; ===========================================================================
00017B28 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00017B2A 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00017B2C                            ; ===========================================================================
00017B2C                            
00017B2C                            Obj6E_Main:				; XREF: Obj6E_Index
00017B2C 5428 0024                  		addq.b	#2,$24(a0)
00017B30 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00017B38 317C 047E 0002             		move.w	#$47E,2(a0)
00017B3E 0028 0004 0001             		ori.b	#4,1(a0)
00017B44 117C 0028 0019             		move.b	#$28,$19(a0)
00017B4A 7000                       		moveq	#0,d0
00017B4C 1028 0028                  		move.b	$28(a0),d0	; read object type
00017B50 E948                       		lsl.w	#4,d0		; multiply by $10
00017B52 5340                       		subq.w	#1,d0
00017B54 3140 0034                  		move.w	d0,$34(a0)
00017B58                            
00017B58                            Obj6E_Shock:				; XREF: Obj6E_Index
00017B58 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017B5C C068 0034                  		and.w	$34(a0),d0
00017B60 6600                       		bne.s	Obj6E_Animate
00017B62 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00017B68 4A28 0001                  		tst.b	1(a0)
00017B6C 6A00                       		bpl.s	Obj6E_Animate
00017B6E 303C 00B1                  		move.w	#$B1,d0
00017B72 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play electricity sound
00017B78                            
00017B78                            Obj6E_Animate:
00017B78 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00017B7E 4EB9 0000 B218             		jsr	AnimateSprite
00017B84 117C 0000 0020             		move.b	#0,$20(a0)
00017B8A 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00017B90 6600                       		bne.s	Obj6E_Display	; if not, branch
00017B92 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00017B98                            
00017B98                            Obj6E_Display:
00017B98 6000 862E                  		bra.w	MarkObjGone
00017B9C                            ; ===========================================================================
00017B9C                            Ani_obj6E:
00017B9C                            	include "_anim\obj6E.asm"
00017B9C                            ; ---------------------------------------------------------------------------
00017B9C                            ; Animation script - electrocution orbs (SBZ)
00017B9C                            ; ---------------------------------------------------------------------------
00017B9C 0000                       		dc.w byte_161CC-Ani_obj6E
00017B9E 0000                       		dc.w byte_161D0-Ani_obj6E
00017BA0 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00017BA4 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00017BB4                            		even
00017BB4                            		even
00017BB4                            
00017BB4                            ; ---------------------------------------------------------------------------
00017BB4                            ; Sprite mappings - electrocution orbs (SBZ)
00017BB4                            ; ---------------------------------------------------------------------------
00017BB4                            Map_obj6E:
00017BB4                            	include "_maps\obj6E.asm"
00017BB4                            ; ---------------------------------------------------------------------------
00017BB4                            ; Sprite mappings - electrocution orbs (SBZ)
00017BB4                            ; ---------------------------------------------------------------------------
00017BB4 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
00017BB8 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
00017BBC 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
00017BC0 02                         byte_161EC:	dc.b 2
00017BC1 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017BC6 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017BCB 03                         byte_161F7:	dc.b 3
00017BCC F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00017BD1 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017BD6 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017BDB 05                         byte_16207:	dc.b 5
00017BDC F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00017BE1 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017BE6 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017BEB F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00017BF0 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00017BF5 04                         byte_16221:	dc.b 4
00017BF6 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017BFB 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017C00 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00017C05 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00017C0A 06                         byte_16236:	dc.b 6
00017C0B F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017C10 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017C15 F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
00017C1A F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
00017C1F F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
00017C24 F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
00017C29 04                         byte_16255:	dc.b 4
00017C2A F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017C2F 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017C34 F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
00017C39 F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
00017C3E                            		even
00017C3E                            		even
00017C3E                            
00017C3E                            ; ===========================================================================
00017C3E                            ; ---------------------------------------------------------------------------
00017C3E                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00017C3E                            ; ---------------------------------------------------------------------------
00017C3E                            
00017C3E                            Obj6F:					; XREF: Obj_Index
00017C3E 7000                       		moveq	#0,d0
00017C40 1028 0024                  		move.b	$24(a0),d0
00017C44 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00017C48 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00017C4C 3028 0030                  		move.w	$30(a0),d0
00017C50 0240 FF80                  		andi.w	#$FF80,d0
00017C54 3238 F700                  		move.w	($FFFFF700).w,d1
00017C58 0441 0080                  		subi.w	#$80,d1
00017C5C 0241 FF80                  		andi.w	#$FF80,d1
00017C60 9041                       		sub.w	d1,d0
00017C62 0C40 0280                  		cmpi.w	#$280,d0
00017C66 6200                       		bhi.s	loc_1629A
00017C68                            
00017C68                            Obj6F_Display:
00017C68 4EF9 0000 E106             		jmp	DisplaySprite
00017C6E                            ; ===========================================================================
00017C6E                            
00017C6E                            loc_1629A:
00017C6E 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00017C74 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00017C76 0C40 FF80                  		cmpi.w	#-$80,d0
00017C7A 64EC                       		bcc.s	Obj6F_Display
00017C7C                            
00017C7C                            Obj6F_Act1or2:
00017C7C 1028 002F                  		move.b	$2F(a0),d0
00017C80 6A00                       		bpl.s	Obj6F_Delete
00017C82 0240 007F                  		andi.w	#$7F,d0
00017C86 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00017C8A 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00017C90                            
00017C90                            Obj6F_Delete:
00017C90 4EF9 0000 E142             		jmp	DeleteObject
00017C96                            ; ===========================================================================
00017C96 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00017C98 0000                       		dc.w loc_163D8-Obj6F_Index
00017C9A                            ; ===========================================================================
00017C9A                            
00017C9A                            Obj6F_Main:				; XREF: Obj6F_Index
00017C9A 1028 0028                  		move.b	$28(a0),d0
00017C9E 6B00 0000                  		bmi.w	loc_16380
00017CA2 5428 0024                  		addq.b	#2,$24(a0)
00017CA6 217C 0001 730E 0004        		move.l	#Map_obj69a,4(a0)
00017CAE 317C 04DF 0002             		move.w	#$4DF,2(a0)
00017CB4 117C 0010 0019             		move.b	#$10,$19(a0)
00017CBA 0028 0004 0001             		ori.b	#4,1(a0)
00017CC0 117C 0004 0018             		move.b	#4,$18(a0)
00017CC6 7000                       		moveq	#0,d0
00017CC8 1028 0028                  		move.b	$28(a0),d0
00017CCC 3200                       		move.w	d0,d1
00017CCE E648                       		lsr.w	#3,d0
00017CD0 0240 001E                  		andi.w	#$1E,d0
00017CD4 45FA 0000                  		lea	off_164A6(pc),a2
00017CD8 D4F2 0000                  		adda.w	(a2,d0.w),a2
00017CDC 315A 0038                  		move.w	(a2)+,$38(a0)
00017CE0 315A 0030                  		move.w	(a2)+,$30(a0)
00017CE4 214A 003C                  		move.l	a2,$3C(a0)
00017CE8 0241 000F                  		andi.w	#$F,d1
00017CEC E549                       		lsl.w	#2,d1
00017CEE 1141 0038                  		move.b	d1,$38(a0)
00017CF2 117C 0004 003A             		move.b	#4,$3A(a0)
00017CF8 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00017CFC 6700                       		beq.s	loc_16356
00017CFE 117C 0001 003B             		move.b	#1,$3B(a0)
00017D04 4428 003A                  		neg.b	$3A(a0)
00017D08 7200                       		moveq	#0,d1
00017D0A 1228 0038                  		move.b	$38(a0),d1
00017D0E D228 003A                  		add.b	$3A(a0),d1
00017D12 B228 0039                  		cmp.b	$39(a0),d1
00017D16 6500                       		bcs.s	loc_16352
00017D18 1001                       		move.b	d1,d0
00017D1A 7200                       		moveq	#0,d1
00017D1C 4A00                       		tst.b	d0
00017D1E 6A00                       		bpl.s	loc_16352
00017D20 1228 0039                  		move.b	$39(a0),d1
00017D24 5901                       		subq.b	#4,d1
00017D26                            
00017D26                            loc_16352:
00017D26 1141 0038                  		move.b	d1,$38(a0)
00017D2A                            
00017D2A                            loc_16356:
00017D2A 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00017D30 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00017D36 4A41                       		tst.w	d1
00017D38 6600                       		bne.s	loc_1636C
00017D3A 117C 0001 001C             		move.b	#1,$1C(a0)
00017D40                            
00017D40                            loc_1636C:
00017D40 0C41 0008                  		cmpi.w	#8,d1
00017D44 6600                       		bne.s	loc_16378
00017D46 117C 0000 001C             		move.b	#0,$1C(a0)
00017D4C                            
00017D4C                            loc_16378:
00017D4C 6100 B332                  		bsr.w	Obj63_ChangeDir
00017D50 6000 0000                  		bra.w	loc_163D8
00017D54                            ; ===========================================================================
00017D54                            
00017D54                            loc_16380:				; XREF: Obj6F_Main
00017D54 1140 002F                  		move.b	d0,$2F(a0)
00017D58 0240 007F                  		andi.w	#$7F,d0
00017D5C 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00017D60 08F2 0000 0000             		bset	#0,(a2,d0.w)
00017D66 6700                       		beq.s	loc_1639A
00017D68 4EF9 0000 E142             		jmp	DeleteObject
00017D6E                            ; ===========================================================================
00017D6E                            
00017D6E                            loc_1639A:
00017D6E D040                       		add.w	d0,d0
00017D70 0240 001E                  		andi.w	#$1E,d0
00017D74 0640 0080                  		addi.w	#$80,d0
00017D78 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00017D7E D4F2 0000                  		adda.w	(a2,d0.w),a2
00017D82 321A                       		move.w	(a2)+,d1
00017D84 2248                       		movea.l	a0,a1
00017D86 6000                       		bra.s	Obj6F_LoadPform
00017D88                            ; ===========================================================================
00017D88                            
00017D88                            Obj6F_Loop:
00017D88 4EB9 0000 E59C             		jsr	SingleObjLoad
00017D8E 6600                       		bne.s	loc_163D0
00017D90                            
00017D90                            Obj6F_LoadPform:			; XREF: loc_1639A
00017D90 12BC 006F                  		move.b	#$6F,0(a1)
00017D94 335A 0008                  		move.w	(a2)+,8(a1)
00017D98 335A 000C                  		move.w	(a2)+,$C(a1)
00017D9C 301A                       		move.w	(a2)+,d0
00017D9E 1340 0028                  		move.b	d0,$28(a1)
00017DA2                            
00017DA2                            loc_163D0:
00017DA2 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00017DA6                            
00017DA6 588F                       		addq.l	#4,sp
00017DA8 4E75                       		rts	
00017DAA                            ; ===========================================================================
00017DAA                            
00017DAA                            loc_163D8:				; XREF: Obj6F_Index
00017DAA 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00017DB0 4EB9 0000 B218             		jsr	AnimateSprite
00017DB6 4A28 001A                  		tst.b	$1A(a0)
00017DBA 6600                       		bne.s	loc_16404
00017DBC 3F28 0008                  		move.w	8(a0),-(sp)
00017DC0 6100 0000                  		bsr.w	loc_16424
00017DC4 323C 001B                  		move.w	#$1B,d1
00017DC8 343C 0007                  		move.w	#7,d2
00017DCC 3602                       		move.w	d2,d3
00017DCE 5243                       		addq.w	#1,d3
00017DD0 381F                       		move.w	(sp)+,d4
00017DD2 6000 871C                  		bra.w	SolidObject
00017DD6                            ; ===========================================================================
00017DD6                            
00017DD6                            loc_16404:
00017DD6 0828 0003 0022             		btst	#3,$22(a0)
00017DDC 6700                       		beq.s	loc_16420
00017DDE 43F8 D000                  		lea	($FFFFD000).w,a1
00017DE2 08A9 0003 0022             		bclr	#3,$22(a1)
00017DE8 08A8 0003 0022             		bclr	#3,$22(a0)
00017DEE 4228 0025                  		clr.b	$25(a0)
00017DF2                            
00017DF2                            loc_16420:
00017DF2 6000 0002                  		bra.w	*+4
00017DF6                            
00017DF6                            loc_16424:
00017DF6 3028 0008                  		move.w	8(a0),d0
00017DFA B068 0034                  		cmp.w	$34(a0),d0
00017DFE 6600                       		bne.s	loc_16484
00017E00 3028 000C                  		move.w	$C(a0),d0
00017E04 B068 0036                  		cmp.w	$36(a0),d0
00017E08 6600                       		bne.s	loc_16484
00017E0A 7200                       		moveq	#0,d1
00017E0C 1228 0038                  		move.b	$38(a0),d1
00017E10 D228 003A                  		add.b	$3A(a0),d1
00017E14 B228 0039                  		cmp.b	$39(a0),d1
00017E18 6500                       		bcs.s	loc_16456
00017E1A 1001                       		move.b	d1,d0
00017E1C 7200                       		moveq	#0,d1
00017E1E 4A00                       		tst.b	d0
00017E20 6A00                       		bpl.s	loc_16456
00017E22 1228 0039                  		move.b	$39(a0),d1
00017E26 5901                       		subq.b	#4,d1
00017E28                            
00017E28                            loc_16456:
00017E28 1141 0038                  		move.b	d1,$38(a0)
00017E2C 2268 003C                  		movea.l	$3C(a0),a1
00017E30 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00017E36 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00017E3C 4A41                       		tst.w	d1
00017E3E 6600                       		bne.s	loc_16474
00017E40 117C 0001 001C             		move.b	#1,$1C(a0)
00017E46                            
00017E46                            loc_16474:
00017E46 0C41 0008                  		cmpi.w	#8,d1
00017E4A 6600                       		bne.s	loc_16480
00017E4C 117C 0000 001C             		move.b	#0,$1C(a0)
00017E52                            
00017E52                            loc_16480:
00017E52 6100 B22C                  		bsr.w	Obj63_ChangeDir
00017E56                            
00017E56                            loc_16484:
00017E56 4EF9 0000 E0E0             		jmp	SpeedToPos
00017E5C                            ; ===========================================================================
00017E5C                            Ani_obj6F:
00017E5C                            	include "_anim\obj6F.asm"
00017E5C                            ; ---------------------------------------------------------------------------
00017E5C                            ; Animation script - platform on conveyor belt (SBZ)
00017E5C                            ; ---------------------------------------------------------------------------
00017E5C 0000                       		dc.w byte_1648E-Ani_obj6F
00017E5E 0000                       		dc.w byte_164A2-Ani_obj6F
00017E60 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00017E6D 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00017E74 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00017E78 00                         		even
00017E78 00                         		even
00017E78                            
00017E78 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00017E7E 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00017E84 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00017E98 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00017EAC 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00017EC0 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00017ED4 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00017EE8 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00017EFC                            ; ===========================================================================
00017EFC                            ; ---------------------------------------------------------------------------
00017EFC                            ; Object 70 - large girder block (SBZ)
00017EFC                            ; ---------------------------------------------------------------------------
00017EFC                            
00017EFC                            Obj70:					; XREF: Obj_Index
00017EFC 7000                       		moveq	#0,d0
00017EFE 1028 0024                  		move.b	$24(a0),d0
00017F02 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00017F06 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00017F0A                            ; ===========================================================================
00017F0A 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00017F0C 0000                       		dc.w Obj70_Action-Obj70_Index
00017F0E                            ; ===========================================================================
00017F0E                            
00017F0E                            Obj70_Main:				; XREF: Obj70_Index
00017F0E 5428 0024                  		addq.b	#2,$24(a0)
00017F12 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00017F1A 317C 42F0 0002             		move.w	#$42F0,2(a0)
00017F20 0028 0004 0001             		ori.b	#4,1(a0)
00017F26 117C 0004 0018             		move.b	#4,$18(a0)
00017F2C 117C 0060 0019             		move.b	#$60,$19(a0)
00017F32 117C 0018 0016             		move.b	#$18,$16(a0)
00017F38 3168 0008 0032             		move.w	8(a0),$32(a0)
00017F3E 3168 000C 0030             		move.w	$C(a0),$30(a0)
00017F44 6100 0000                  		bsr.w	Obj70_Move2
00017F48                            
00017F48                            Obj70_Action:				; XREF: Obj70_Index
00017F48 3F28 0008                  		move.w	8(a0),-(sp)
00017F4C 4A68 003A                  		tst.w	$3A(a0)
00017F50 6700                       		beq.s	Obj70_Move
00017F52 5368 003A                  		subq.w	#1,$3A(a0)
00017F56 6600                       		bne.s	Obj70_Solid
00017F58                            
00017F58                            Obj70_Move:
00017F58 4EB9 0000 E0E0             		jsr	SpeedToPos
00017F5E 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00017F62 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00017F64 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00017F68                            
00017F68                            Obj70_Solid:
00017F68 381F                       		move.w	(sp)+,d4
00017F6A 4A28 0001                  		tst.b	1(a0)
00017F6E 6A00                       		bpl.s	Obj70_ChkDel
00017F70 7200                       		moveq	#0,d1
00017F72 1228 0019                  		move.b	$19(a0),d1
00017F76 0641 000B                  		addi.w	#$B,d1
00017F7A 7400                       		moveq	#0,d2
00017F7C 1428 0016                  		move.b	$16(a0),d2
00017F80 3602                       		move.w	d2,d3
00017F82 5243                       		addq.w	#1,d3
00017F84 6100 856A                  		bsr.w	SolidObject
00017F88                            
00017F88                            Obj70_ChkDel:
00017F88 3028 0032                  		move.w	$32(a0),d0
00017F8C 0240 FF80                  		andi.w	#$FF80,d0
00017F90 3238 F700                  		move.w	($FFFFF700).w,d1
00017F94 0441 0080                  		subi.w	#$80,d1
00017F98 0241 FF80                  		andi.w	#$FF80,d1
00017F9C 9041                       		sub.w	d1,d0
00017F9E 0C40 0280                  		cmpi.w	#$280,d0
00017FA2 6200                       		bhi.s	Obj70_Delete
00017FA4 4EF9 0000 E106             		jmp	DisplaySprite
00017FAA                            ; ===========================================================================
00017FAA                            
00017FAA                            Obj70_Delete:
00017FAA 4EF9 0000 E142             		jmp	DeleteObject
00017FB0                            ; ===========================================================================
00017FB0                            
00017FB0                            Obj70_Move2:				; XREF: Obj70_Main
00017FB0 1028 0038                  		move.b	$38(a0),d0
00017FB4 0240 0018                  		andi.w	#$18,d0
00017FB8 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00017FBE 43F1 0000                  		lea	(a1,d0.w),a1
00017FC2 3159 0010                  		move.w	(a1)+,$10(a0)
00017FC6 3159 0012                  		move.w	(a1)+,$12(a0)
00017FCA 3159 0034                  		move.w	(a1)+,$34(a0)
00017FCE 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00017FD2 317C 0007 003A             		move.w	#7,$3A(a0)
00017FD8 4E75                       		rts	
00017FDA                            ; ===========================================================================
00017FDA 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00017FE2 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00017FEA FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00017FF2 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00017FFA                            ; ---------------------------------------------------------------------------
00017FFA                            ; Sprite mappings - large girder block (SBZ)
00017FFA                            ; ---------------------------------------------------------------------------
00017FFA                            Map_obj70:
00017FFA                            	include "_maps\obj70.asm"
00017FFA                            ; ---------------------------------------------------------------------------
00017FFA                            ; Sprite mappings - large girder block (SBZ)
00017FFA                            ; ---------------------------------------------------------------------------
00017FFA 0000                       		dc.w byte_1662A-Map_obj70
00017FFC 0C                         byte_1662A:	dc.b $C
00017FFD E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00018002 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00018007 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
0001800C 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00018011 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00018016 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
0001801B E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00018020 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00018025 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
0001802A 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
0001802F E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00018034 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
0001803A 00                         		even
0001803A 00                         		even
0001803A                            
0001803A                            ; ===========================================================================
0001803A                            ; ---------------------------------------------------------------------------
0001803A                            ; Object 72 - teleporter (SBZ)
0001803A                            ; ---------------------------------------------------------------------------
0001803A                            
0001803A                            Obj72:					; XREF: Obj_Index
0001803A 7000                       		moveq	#0,d0
0001803C 1028 0024                  		move.b	$24(a0),d0
00018040 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00018044 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00018048 3028 0008                  		move.w	8(a0),d0
0001804C 0240 FF80                  		andi.w	#$FF80,d0
00018050 3238 F700                  		move.w	($FFFFF700).w,d1
00018054 0441 0080                  		subi.w	#$80,d1
00018058 0241 FF80                  		andi.w	#$FF80,d1
0001805C 9041                       		sub.w	d1,d0
0001805E 0C40 0280                  		cmpi.w	#$280,d0
00018062 6200                       		bhi.s	Obj72_Delete
00018064 4E75                       		rts	
00018066                            ; ===========================================================================
00018066                            
00018066                            Obj72_Delete:
00018066 4EF9 0000 E142             		jmp	DeleteObject
0001806C                            ; ===========================================================================
0001806C 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
0001806E 0000                       		dc.w loc_166C8-Obj72_Index
00018070 0000                       		dc.w loc_1675E-Obj72_Index
00018072 0000                       		dc.w loc_16798-Obj72_Index
00018074                            ; ===========================================================================
00018074                            
00018074                            Obj72_Main:				; XREF: Obj72_Index
00018074 5428 0024                  		addq.b	#2,$24(a0)
00018078 1028 0028                  		move.b	$28(a0),d0
0001807C D040                       		add.w	d0,d0
0001807E 0240 001E                  		andi.w	#$1E,d0
00018082 45FA 0000                  		lea	Obj72_Data(pc),a2
00018086 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001808A 315A 003A                  		move.w	(a2)+,$3A(a0)
0001808E 214A 003C                  		move.l	a2,$3C(a0)
00018092 315A 0036                  		move.w	(a2)+,$36(a0)
00018096 315A 0038                  		move.w	(a2)+,$38(a0)
0001809A                            
0001809A                            loc_166C8:				; XREF: Obj72_Index
0001809A 43F8 D000                  		lea	($FFFFD000).w,a1
0001809E 3029 0008                  		move.w	8(a1),d0
000180A2 9068 0008                  		sub.w	8(a0),d0
000180A6 0828 0000 0022             		btst	#0,$22(a0)
000180AC 6700                       		beq.s	loc_166E0
000180AE 0640 000F                  		addi.w	#$F,d0
000180B2                            
000180B2                            loc_166E0:
000180B2 0C40 0010                  		cmpi.w	#$10,d0
000180B6 6400                       		bcc.s	locret_1675C
000180B8 3229 000C                  		move.w	$C(a1),d1
000180BC 9268 000C                  		sub.w	$C(a0),d1
000180C0 0641 0020                  		addi.w	#$20,d1
000180C4 0C41 0040                  		cmpi.w	#$40,d1
000180C8 6400                       		bcc.s	locret_1675C
000180CA 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000180CE 6600                       		bne.s	locret_1675C
000180D0 0C28 0007 0028             		cmpi.b	#7,$28(a0)
000180D6 6600                       		bne.s	loc_1670E
000180D8 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
000180DE 6500                       		bcs.s	locret_1675C
000180E0                            
000180E0                            loc_1670E:
000180E0 5428 0024                  		addq.b	#2,$24(a0)
000180E4 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000180EA 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
000180F0 337C 0800 0014             		move.w	#$800,$14(a1)
000180F6 337C 0000 0010             		move.w	#0,$10(a1)
000180FC 337C 0000 0012             		move.w	#0,$12(a1)
00018102 08A8 0005 0022             		bclr	#5,$22(a0)
00018108 08A9 0005 0022             		bclr	#5,$22(a1)
0001810E 08E9 0001 0022             		bset	#1,$22(a1)
00018114 3368 0008 0008             		move.w	8(a0),8(a1)
0001811A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018120 4228 0032                  		clr.b	$32(a0)
00018124 303C 00BE                  		move.w	#$BE,d0
00018128 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
0001812E                            
0001812E                            locret_1675C:
0001812E 4E75                       		rts	
00018130                            ; ===========================================================================
00018130                            
00018130                            loc_1675E:				; XREF: Obj72_Index
00018130 43F8 D000                  		lea	($FFFFD000).w,a1
00018134 1028 0032                  		move.b	$32(a0),d0
00018138 5428 0032                  		addq.b	#2,$32(a0)
0001813C 4EB9 0000 33D4             		jsr	(CalcSine).l
00018142 EA40                       		asr.w	#5,d0
00018144 3428 000C                  		move.w	$C(a0),d2
00018148 9440                       		sub.w	d0,d2
0001814A 3342 000C                  		move.w	d2,$C(a1)
0001814E 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00018154 6600                       		bne.s	locret_16796
00018156 6100 0000                  		bsr.w	sub_1681C
0001815A 5428 0024                  		addq.b	#2,$24(a0)
0001815E 303C 00BC                  		move.w	#$BC,d0
00018162 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play teleport sound
00018168                            
00018168                            locret_16796:
00018168 4E75                       		rts	
0001816A                            ; ===========================================================================
0001816A                            
0001816A                            loc_16798:				; XREF: Obj72_Index
0001816A 588F                       		addq.l	#4,sp
0001816C 43F8 D000                  		lea	($FFFFD000).w,a1
00018170 5328 002E                  		subq.b	#1,$2E(a0)
00018174 6A00                       		bpl.s	loc_167DA
00018176 3368 0036 0008             		move.w	$36(a0),8(a1)
0001817C 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018182 7200                       		moveq	#0,d1
00018184 1228 003A                  		move.b	$3A(a0),d1
00018188 5801                       		addq.b	#4,d1
0001818A B228 003B                  		cmp.b	$3B(a0),d1
0001818E 6500                       		bcs.s	loc_167C2
00018190 7200                       		moveq	#0,d1
00018192 6000                       		bra.s	loc_16800
00018194                            ; ===========================================================================
00018194                            
00018194                            loc_167C2:
00018194 1141 003A                  		move.b	d1,$3A(a0)
00018198 2468 003C                  		movea.l	$3C(a0),a2
0001819C 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
000181A2 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
000181A8 6000 0000                  		bra.w	sub_1681C
000181AC                            ; ===========================================================================
000181AC                            
000181AC                            loc_167DA:
000181AC 2429 0008                  		move.l	8(a1),d2
000181B0 2629 000C                  		move.l	$C(a1),d3
000181B4 3029 0010                  		move.w	$10(a1),d0
000181B8 48C0                       		ext.l	d0
000181BA E180                       		asl.l	#8,d0
000181BC D480                       		add.l	d0,d2
000181BE 3029 0012                  		move.w	$12(a1),d0
000181C2 48C0                       		ext.l	d0
000181C4 E180                       		asl.l	#8,d0
000181C6 D680                       		add.l	d0,d3
000181C8 2342 0008                  		move.l	d2,8(a1)
000181CC 2343 000C                  		move.l	d3,$C(a1)
000181D0 4E75                       		rts	
000181D2                            ; ===========================================================================
000181D2                            
000181D2                            loc_16800:
000181D2 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
000181D8 4228 0024                  		clr.b	$24(a0)
000181DC 4238 F7C8                  		clr.b	($FFFFF7C8).w
000181E0 337C 0000 0010             		move.w	#0,$10(a1)
000181E6 337C 0200 0012             		move.w	#$200,$12(a1)
000181EC 4E75                       		rts	
000181EE                            
000181EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000181EE                            
000181EE                            
000181EE                            sub_1681C:
000181EE 7000                       		moveq	#0,d0
000181F0 343C 1000                  		move.w	#$1000,d2
000181F4 3028 0036                  		move.w	$36(a0),d0
000181F8 9069 0008                  		sub.w	8(a1),d0
000181FC 6C00                       		bge.s	loc_16830
000181FE 4440                       		neg.w	d0
00018200 4442                       		neg.w	d2
00018202                            
00018202                            loc_16830:
00018202 7200                       		moveq	#0,d1
00018204 363C 1000                  		move.w	#$1000,d3
00018208 3228 0038                  		move.w	$38(a0),d1
0001820C 9269 000C                  		sub.w	$C(a1),d1
00018210 6C00                       		bge.s	loc_16844
00018212 4441                       		neg.w	d1
00018214 4443                       		neg.w	d3
00018216                            
00018216                            loc_16844:
00018216 B240                       		cmp.w	d0,d1
00018218 6500                       		bcs.s	loc_1687A
0001821A 7200                       		moveq	#0,d1
0001821C 3228 0038                  		move.w	$38(a0),d1
00018220 9269 000C                  		sub.w	$C(a1),d1
00018224 4841                       		swap	d1
00018226 83C3                       		divs.w	d3,d1
00018228 7000                       		moveq	#0,d0
0001822A 3028 0036                  		move.w	$36(a0),d0
0001822E 9069 0008                  		sub.w	8(a1),d0
00018232 6700                       		beq.s	loc_16866
00018234 4840                       		swap	d0
00018236 81C1                       		divs.w	d1,d0
00018238                            
00018238                            loc_16866:
00018238 3340 0010                  		move.w	d0,$10(a1)
0001823C 3343 0012                  		move.w	d3,$12(a1)
00018240 4A41                       		tst.w	d1
00018242 6A00                       		bpl.s	loc_16874
00018244 4441                       		neg.w	d1
00018246                            
00018246                            loc_16874:
00018246 3141 002E                  		move.w	d1,$2E(a0)
0001824A 4E75                       		rts	
0001824C                            ; ===========================================================================
0001824C                            
0001824C                            loc_1687A:
0001824C 7000                       		moveq	#0,d0
0001824E 3028 0036                  		move.w	$36(a0),d0
00018252 9069 0008                  		sub.w	8(a1),d0
00018256 4840                       		swap	d0
00018258 81C2                       		divs.w	d2,d0
0001825A 7200                       		moveq	#0,d1
0001825C 3228 0038                  		move.w	$38(a0),d1
00018260 9269 000C                  		sub.w	$C(a1),d1
00018264 6700                       		beq.s	loc_16898
00018266 4841                       		swap	d1
00018268 83C0                       		divs.w	d0,d1
0001826A                            
0001826A                            loc_16898:
0001826A 3341 0012                  		move.w	d1,$12(a1)
0001826E 3342 0010                  		move.w	d2,$10(a1)
00018272 4A40                       		tst.w	d0
00018274 6A00                       		bpl.s	loc_168A6
00018276 4440                       		neg.w	d0
00018278                            
00018278                            loc_168A6:
00018278 3140 002E                  		move.w	d0,$2E(a0)
0001827C 4E75                       		rts	
0001827E                            ; End of function sub_1681C
0001827E                            
0001827E                            ; ===========================================================================
0001827E 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00018284 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
0001828A 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
0001828E 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00018294 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
0001829A 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
000182A0 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
000182A6 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
000182AC 0884 0298 0894             		dc.w $884, $298, $894
000182B2 0270 0894 0190             		dc.w $270, $894, $190
000182B8 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
000182BE 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
000182C4 1184 0498 1158             		dc.w $1184, $498, $1158
000182CA 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
000182D0 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
000182D6 04E8 0F94 0590             		dc.w $4E8, $F94, $590
000182DC 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
000182E2 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
000182E8 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
000182EE FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
000182F4 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
000182FA FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00018300 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00018306                            ; ===========================================================================
00018306                            ; ---------------------------------------------------------------------------
00018306                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00018306                            ; ---------------------------------------------------------------------------
00018306                            
00018306                            Obj78:					; XREF: Obj_Index
00018306 7000                       		moveq	#0,d0
00018308 1028 0024                  		move.b	$24(a0),d0
0001830C 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00018310 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00018314                            ; ===========================================================================
00018314 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00018316 0000                       		dc.w Obj78_Action-Obj78_Index
00018318 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
0001831A 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
0001831C 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
0001831E 0000                       		dc.w Obj78_Delete-Obj78_Index
00018320 0000                       		dc.w loc_16CC0-Obj78_Index
00018322                            ; ===========================================================================
00018322                            
00018322                            locret_16950:
00018322 4E75                       		rts	
00018324                            ; ===========================================================================
00018324                            
00018324                            Obj78_Main:				; XREF: Obj78_Index
00018324 117C 0007 0016             		move.b	#7,$16(a0)
0001832A 117C 0008 0017             		move.b	#8,$17(a0)
00018330 4EB9 0000 E0B4             		jsr	ObjectFall
00018336 4EBA E4B0                  		jsr	ObjHitFloor
0001833A 4A41                       		tst.w	d1
0001833C 6AE4                       		bpl.s	locret_16950
0001833E D368 000C                  		add.w	d1,$C(a0)
00018342 4268 0012                  		clr.w	$12(a0)
00018346 5428 0024                  		addq.b	#2,$24(a0)
0001834A 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
00018352 317C 22B0 0002             		move.w	#$22B0,2(a0)
00018358 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
0001835E 6700                       		beq.s	loc_16996
00018360 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00018366                            
00018366                            loc_16996:
00018366 0228 0003 0001             		andi.b	#3,1(a0)
0001836C 0028 0004 0001             		ori.b	#4,1(a0)
00018372 1168 0001 0022             		move.b	1(a0),$22(a0)
00018378 117C 0004 0018             		move.b	#4,$18(a0)
0001837E 117C 0008 0019             		move.b	#8,$19(a0)
00018384 117C 000B 0020             		move.b	#$B,$20(a0)
0001838A 3428 0008                  		move.w	8(a0),d2
0001838E 7A0C                       		moveq	#$C,d5
00018390 0828 0000 0022             		btst	#0,$22(a0)
00018396 6700                       		beq.s	loc_169CA
00018398 4445                       		neg.w	d5
0001839A                            
0001839A                            loc_169CA:
0001839A 1C3C 0004                  		move.b	#4,d6
0001839E 7600                       		moveq	#0,d3
000183A0 7804                       		moveq	#4,d4
000183A2 2448                       		movea.l	a0,a2
000183A4 7202                       		moveq	#2,d1
000183A6                            
000183A6                            Obj78_LoadBody:
000183A6 4EB9 0000 E5B2             		jsr	SingleObjLoad2
000183AC 6600                       		bne.s	Obj78_QuitLoad
000183AE 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
000183B2 1346 0024                  		move.b	d6,$24(a1)
000183B6 5406                       		addq.b	#2,d6
000183B8 2368 0004 0004             		move.l	4(a0),4(a1)
000183BE 3368 0002 0002             		move.w	2(a0),2(a1)
000183C4 137C 0005 0018             		move.b	#5,$18(a1)
000183CA 137C 0008 0019             		move.b	#8,$19(a1)
000183D0 137C 00CB 0020             		move.b	#$CB,$20(a1)
000183D6 D445                       		add.w	d5,d2
000183D8 3342 0008                  		move.w	d2,8(a1)
000183DC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000183E2 1368 0022 0022             		move.b	$22(a0),$22(a1)
000183E8 1368 0022 0001             		move.b	$22(a0),1(a1)
000183EE 137C 0008 001A             		move.b	#8,$1A(a1)
000183F4 234A 003C                  		move.l	a2,$3C(a1)
000183F8 1344 003C                  		move.b	d4,$3C(a1)
000183FC 5804                       		addq.b	#4,d4
000183FE 2449                       		movea.l	a1,a2
00018400                            
00018400                            Obj78_QuitLoad:
00018400 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00018404                            
00018404 117C 0007 002A             		move.b	#7,$2A(a0)
0001840A 4228 003C                  		clr.b	$3C(a0)
0001840E                            
0001840E                            Obj78_Action:				; XREF: Obj78_Index
0001840E 4A28 0022                  		tst.b	$22(a0)
00018412 6B00 0000                  		bmi.w	loc_16C96
00018416 7000                       		moveq	#0,d0
00018418 1028 0025                  		move.b	$25(a0),d0
0001841C 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00018420 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00018424 1228 002B                  		move.b	$2B(a0),d1
00018428 6A00                       		bpl.s	Obj78_Display
0001842A 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00018430 1028 0026                  		move.b	$26(a0),d0
00018434 0240 007F                  		andi.w	#$7F,d0
00018438 5828 0026                  		addq.b	#4,$26(a0)
0001843C 1031 0000                  		move.b	(a1,d0.w),d0
00018440 6A00                       		bpl.s	Obj78_AniHead
00018442 08A8 0007 002B             		bclr	#7,$2B(a0)
00018448 6000                       		bra.s	Obj78_Display
0001844A                            ; ===========================================================================
0001844A                            
0001844A                            Obj78_AniHead:
0001844A 0201 0010                  		andi.b	#$10,d1
0001844E D001                       		add.b	d1,d0
00018450 1140 001A                  		move.b	d0,$1A(a0)
00018454                            
00018454                            Obj78_Display:
00018454 3028 0008                  		move.w	8(a0),d0
00018458 0240 FF80                  		andi.w	#$FF80,d0
0001845C 3238 F700                  		move.w	($FFFFF700).w,d1
00018460 0441 0080                  		subi.w	#$80,d1
00018464 0241 FF80                  		andi.w	#$FF80,d1
00018468 9041                       		sub.w	d1,d0
0001846A 0C40 0280                  		cmpi.w	#$280,d0
0001846E 6200 0000                  		bhi.w	Obj78_ChkGone
00018472 4EF9 0000 E106             		jmp	DisplaySprite
00018478                            ; ===========================================================================
00018478                            
00018478                            Obj78_ChkGone:
00018478 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001847C 7000                       		moveq	#0,d0
0001847E 1028 0023                  		move.b	$23(a0),d0
00018482 6700                       		beq.s	loc_16ABC
00018484 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001848A                            
0001848A                            loc_16ABC:
0001848A 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
00018490 4E75                       		rts	
00018492                            ; ===========================================================================
00018492                            
00018492                            Obj78_Delete:				; XREF: Obj78_Index
00018492 4EF9 0000 E142             		jmp	DeleteObject
00018498                            ; ===========================================================================
00018498 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
0001849A 0000                       		dc.w loc_16B02-Obj78_Index2
0001849C                            ; ===========================================================================
0001849C                            
0001849C                            Obj78_Move:				; XREF: Obj78_Index2
0001849C 5328 002A                  		subq.b	#1,$2A(a0)
000184A0 6B00                       		bmi.s	Obj78_Move2
000184A2 4E75                       		rts	
000184A4                            ; ===========================================================================
000184A4                            
000184A4                            Obj78_Move2:
000184A4 5428 0025                  		addq.b	#2,$25(a0)
000184A8 117C 0010 002A             		move.b	#$10,$2A(a0)
000184AE 317C FF40 0010             		move.w	#-$C0,$10(a0)
000184B4 317C 0040 0014             		move.w	#$40,$14(a0)
000184BA 0868 0004 002B             		bchg	#4,$2B(a0)
000184C0 6600                       		bne.s	loc_16AFC
000184C2 4268 0010                  		clr.w	$10(a0)
000184C6 4468 0014                  		neg.w	$14(a0)
000184CA                            
000184CA                            loc_16AFC:
000184CA 08E8 0007 002B             		bset	#7,$2B(a0)
000184D0                            
000184D0                            loc_16B02:				; XREF: Obj78_Index2
000184D0 5328 002A                  		subq.b	#1,$2A(a0)
000184D4 6B00                       		bmi.s	loc_16B5E
000184D6 2F28 0008                  		move.l	8(a0),-(sp)
000184DA 2428 0008                  		move.l	8(a0),d2
000184DE 3028 0010                  		move.w	$10(a0),d0
000184E2 0828 0000 0022             		btst	#0,$22(a0)
000184E8 6700                       		beq.s	loc_16B1E
000184EA 4440                       		neg.w	d0
000184EC                            
000184EC                            loc_16B1E:
000184EC 48C0                       		ext.l	d0
000184EE E180                       		asl.l	#8,d0
000184F0 D480                       		add.l	d0,d2
000184F2 2142 0008                  		move.l	d2,8(a0)
000184F6 4EBA E2F0                  		jsr	ObjHitFloor
000184FA 241F                       		move.l	(sp)+,d2
000184FC 0C41 FFF8                  		cmpi.w	#-8,d1
00018500 6D00                       		blt.s	loc_16B70
00018502 0C41 000C                  		cmpi.w	#$C,d1
00018506 6C00                       		bge.s	loc_16B70
00018508 D368 000C                  		add.w	d1,$C(a0)
0001850C 4842                       		swap	d2
0001850E B468 0008                  		cmp.w	8(a0),d2
00018512 6700                       		beq.s	locret_16B5C
00018514 7000                       		moveq	#0,d0
00018516 1028 003C                  		move.b	$3C(a0),d0
0001851A 5228 003C                  		addq.b	#1,$3C(a0)
0001851E 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018524 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018528                            
00018528                            locret_16B5C:
00018528 4E75                       		rts	
0001852A                            ; ===========================================================================
0001852A                            
0001852A                            loc_16B5E:
0001852A 5528 0025                  		subq.b	#2,$25(a0)
0001852E 117C 0007 002A             		move.b	#7,$2A(a0)
00018534 317C 0000 0010             		move.w	#0,$10(a0)
0001853A 4E75                       		rts	
0001853C                            ; ===========================================================================
0001853C                            
0001853C                            loc_16B70:
0001853C 2142 0008                  		move.l	d2,8(a0)
00018540 0868 0000 0022             		bchg	#0,$22(a0)
00018546 1168 0022 0001             		move.b	$22(a0),1(a0)
0001854C 7000                       		moveq	#0,d0
0001854E 1028 003C                  		move.b	$3C(a0),d0
00018552 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00018558 5228 003C                  		addq.b	#1,$3C(a0)
0001855C 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018562 4E75                       		rts	
00018564                            ; ===========================================================================
00018564                            
00018564                            Obj78_BodySeg2:				; XREF: Obj78_Index
00018564 2268 003C                  		movea.l	$3C(a0),a1
00018568 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001856E 6A00                       		bpl.s	Obj78_BodySeg1
00018570 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00018576 1028 0026                  		move.b	$26(a0),d0
0001857A 0240 007F                  		andi.w	#$7F,d0
0001857E 5828 0026                  		addq.b	#4,$26(a0)
00018582 4A31 0004                  		tst.b	4(a1,d0.w)
00018586 6A00                       		bpl.s	Obj78_AniBody
00018588 5828 0026                  		addq.b	#4,$26(a0)
0001858C                            
0001858C                            Obj78_AniBody:
0001858C 1031 0000                  		move.b	(a1,d0.w),d0
00018590 5000                       		addq.b	#8,d0
00018592 1140 001A                  		move.b	d0,$1A(a0)
00018596                            
00018596                            Obj78_BodySeg1:				; XREF: Obj78_Index
00018596 2268 003C                  		movea.l	$3C(a0),a1
0001859A 4A28 0022                  		tst.b	$22(a0)
0001859E 6B00 0000                  		bmi.w	loc_16C90
000185A2 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000185A8 1169 0025 0025             		move.b	$25(a1),$25(a0)
000185AE 6700 0000                  		beq.w	loc_16C64
000185B2 3169 0014 0014             		move.w	$14(a1),$14(a0)
000185B8 3029 0010                  		move.w	$10(a1),d0
000185BC D069 0014                  		add.w	$14(a1),d0
000185C0 3140 0010                  		move.w	d0,$10(a0)
000185C4 2428 0008                  		move.l	8(a0),d2
000185C8 2602                       		move.l	d2,d3
000185CA 3028 0010                  		move.w	$10(a0),d0
000185CE 0828 0000 0022             		btst	#0,$22(a0)
000185D4 6700                       		beq.s	loc_16C0C
000185D6 4440                       		neg.w	d0
000185D8                            
000185D8                            loc_16C0C:
000185D8 48C0                       		ext.l	d0
000185DA E180                       		asl.l	#8,d0
000185DC D480                       		add.l	d0,d2
000185DE 2142 0008                  		move.l	d2,8(a0)
000185E2 4843                       		swap	d3
000185E4 B668 0008                  		cmp.w	8(a0),d3
000185E8 6700                       		beq.s	loc_16C64
000185EA 7000                       		moveq	#0,d0
000185EC 1028 003C                  		move.b	$3C(a0),d0
000185F0 1231 002C                  		move.b	$2C(a1,d0.w),d1
000185F4 0C01 0080                  		cmpi.b	#-$80,d1
000185F8 6600                       		bne.s	loc_16C50
000185FA 4843                       		swap	d3
000185FC 2143 0008                  		move.l	d3,8(a0)
00018600 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018604 0868 0000 0022             		bchg	#0,$22(a0)
0001860A 1168 0022 0001             		move.b	$22(a0),1(a0)
00018610 5228 003C                  		addq.b	#1,$3C(a0)
00018614 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001861A 6000                       		bra.s	loc_16C64
0001861C                            ; ===========================================================================
0001861C                            
0001861C                            loc_16C50:
0001861C 4881                       		ext.w	d1
0001861E D368 000C                  		add.w	d1,$C(a0)
00018622 5228 003C                  		addq.b	#1,$3C(a0)
00018626 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001862C 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018630                            
00018630                            loc_16C64:
00018630 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00018636 6700                       		beq.s	loc_16C90
00018638 0C11 0027                  		cmpi.b	#$27,0(a1)
0001863C 6700                       		beq.s	loc_16C7C
0001863E 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00018644 6600                       		bne.s	loc_16C82
00018646                            
00018646                            loc_16C7C:
00018646 4229 0020                  		clr.b	$20(a1)	; immediately remove all touch response values when destroying the head to avoid taking damage
0001864A 117C 000A 0024             		move.b	#$A,$24(a0)
00018650                            
00018650                            loc_16C82:
00018650 4EF9 0000 E106             		jmp	DisplaySprite
00018656                            
00018656                            ; ===========================================================================
00018656 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
0001865E                            ; ===========================================================================
0001865E                            
0001865E                            loc_16C90:
0001865E 08E9 0007 0022             		bset	#7,$22(a1)
00018664                            
00018664                            loc_16C96:
00018664 7000                       		moveq	#0,d0
00018666 1028 0024                  		move.b	$24(a0),d0
0001866A 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
0001866E 0828 0000 0022             		btst	#0,$22(a0)
00018674 6700                       		beq.s	loc_16CAA
00018676 4440                       		neg.w	d0
00018678                            
00018678                            loc_16CAA:
00018678 3140 0010                  		move.w	d0,$10(a0)
0001867C 317C FC00 0012             		move.w	#-$400,$12(a0)
00018682 117C 000C 0024             		move.b	#$C,$24(a0)
00018688 0228 00F8 001A             		andi.b	#-8,$1A(a0)
0001868E                            
0001868E                            loc_16CC0:				; XREF: Obj78_Index
0001868E 4EB9 0000 E0B4             		jsr	ObjectFall
00018694 4A68 0012                  		tst.w	$12(a0)
00018698 6B00                       		bmi.s	loc_16CE0
0001869A 4EBA E14C                  		jsr	ObjHitFloor
0001869E 4A41                       		tst.w	d1
000186A0 6A00                       		bpl.s	loc_16CE0
000186A2 D368 000C                  		add.w	d1,$C(a0)
000186A6 317C FC00 0012             		move.w	#-$400,$12(a0)
000186AC                            
000186AC                            loc_16CE0:
000186AC 4A28 0001                  		tst.b	1(a0)
000186B0 6A00 FDC6                  		bpl.w	Obj78_ChkGone
000186B4 4EF9 0000 E106             		jmp	DisplaySprite
000186BA                            ; ===========================================================================
000186BA                            Ani_obj78:
000186BA                            	include "_anim\obj78.asm"
000186BA                            ; ---------------------------------------------------------------------------
000186BA                            ; Animation script - Caterkiller enemy (uses non-standard format)
000186BA                            ; ---------------------------------------------------------------------------
000186BA 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
000186CA 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
000186DA 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
000186EA 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
000186FA 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
0001870A 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
0001871A 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
0001872A 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
0001873A                            	even
0001873A                            	even
0001873A                            
0001873A                            ; ---------------------------------------------------------------------------
0001873A                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0001873A                            ; ---------------------------------------------------------------------------
0001873A                            Map_obj78:
0001873A                            	include "_maps\obj78.asm"
0001873A                            ; ---------------------------------------------------------------------------
0001873A                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0001873A                            ; ---------------------------------------------------------------------------
0001873A 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
0001873E 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00018742 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00018746 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
0001874A 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
0001874E 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00018752 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00018756 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
0001875A 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
0001875E 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00018762 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00018766 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
0001876A 01                         byte_16D9E:	dc.b 1
0001876B F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00018770 01                         byte_16DA4:	dc.b 1
00018771 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00018776 01                         byte_16DAA:	dc.b 1
00018777 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
0001877C 01                         byte_16DB0:	dc.b 1
0001877D EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00018782 01                         byte_16DB6:	dc.b 1
00018783 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00018788 01                         byte_16DBC:	dc.b 1
00018789 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
0001878E 01                         byte_16DC2:	dc.b 1
0001878F EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00018794 01                         byte_16DC8:	dc.b 1
00018795 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
0001879A 01                         byte_16DCE:	dc.b 1
0001879B F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000187A0 01                         byte_16DD4:	dc.b 1
000187A1 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
000187A6 01                         byte_16DDA:	dc.b 1
000187A7 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
000187AC 01                         byte_16DE0:	dc.b 1
000187AD F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
000187B2 01                         byte_16DE6:	dc.b 1
000187B3 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
000187B8 01                         byte_16DEC:	dc.b 1
000187B9 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
000187BE 01                         byte_16DF2:	dc.b 1
000187BF F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
000187C4 01                         byte_16DF8:	dc.b 1
000187C5 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
000187CA 01                         byte_16DFE:	dc.b 1
000187CB F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
000187D0 01                         byte_16E04:	dc.b 1
000187D1 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
000187D6 01                         byte_16E0A:	dc.b 1
000187D7 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
000187DC 01                         byte_16E10:	dc.b 1
000187DD EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
000187E2 01                         byte_16E16:	dc.b 1
000187E3 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
000187E8 01                         byte_16E1C:	dc.b 1
000187E9 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
000187EE 01                         byte_16E22:	dc.b 1
000187EF EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
000187F4 01                         byte_16E28:	dc.b 1
000187F5 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
000187FA                            		even
000187FA                            		even
000187FA                            
000187FA                            ; ===========================================================================
000187FA                            ; ---------------------------------------------------------------------------
000187FA                            ; Object 79 - lamppost
000187FA                            ; ---------------------------------------------------------------------------
000187FA                            
000187FA                            Obj79:					; XREF: Obj_Index
000187FA 7000                       		moveq	#0,d0
000187FC 1028 0024                  		move.b	$24(a0),d0
00018800 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00018804 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00018808 4EF9 0001 01C8             		jmp	MarkObjGone
0001880E                            ; ===========================================================================
0001880E 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00018810 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00018812 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00018814 0000                       		dc.w Obj79_Twirl-Obj79_Index
00018816                            ; ===========================================================================
00018816                            
00018816                            Obj79_Main:				; XREF: Obj79_Index
00018816 5428 0024                  		addq.b	#2,$24(a0)
0001881A 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00018822 317C 06C0 0002             		move.w	#($D800/$20),2(a0)
00018828 117C 0004 0001             		move.b	#4,1(a0)
0001882E 117C 0008 0019             		move.b	#8,$19(a0)
00018834 117C 0005 0018             		move.b	#5,$18(a0)
0001883A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001883E 7000                       		moveq	#0,d0
00018840 1028 0023                  		move.b	$23(a0),d0
00018844 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001884A 0832 0000 0002             		btst	#0,2(a2,d0.w)
00018850 6600                       		bne.s	Obj79_RedLamp
00018852 1238 FE30                  		move.b	($FFFFFE30).w,d1
00018856 0201 007F                  		andi.b	#$7F,d1
0001885A 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
0001885E 0202 007F                  		andi.b	#$7F,d2
00018862 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00018864 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00018866                            
00018866                            Obj79_RedLamp:
00018866 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001886C 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00018872 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00018878 4E75                       		rts	
0001887A                            ; ===========================================================================
0001887A                            
0001887A                            Obj79_BlueLamp:				; XREF: Obj79_Index
0001887A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001887E 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00018882 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00018886 6B00 0000                  		bmi.w	locret_16F90
0001888A 1238 FE30                  		move.b	($FFFFFE30).w,d1
0001888E 0201 007F                  		andi.b	#$7F,d1
00018892 1428 0028                  		move.b	$28(a0),d2
00018896 0202 007F                  		andi.b	#$7F,d2
0001889A B202                       		cmp.b	d2,d1
0001889C 6500                       		bcs.s	Obj79_HitLamp
0001889E 45F8 FC00                  		lea	($FFFFFC00).w,a2
000188A2 7000                       		moveq	#0,d0
000188A4 1028 0023                  		move.b	$23(a0),d0
000188A8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000188AE 117C 0004 0024             		move.b	#4,$24(a0)
000188B4 117C 0003 001A             		move.b	#3,$1A(a0)
000188BA 6000 0000                  		bra.w	locret_16F90
000188BE                            ; ===========================================================================
000188BE                            
000188BE                            Obj79_HitLamp:
000188BE 3038 D008                  		move.w	($FFFFD008).w,d0
000188C2 9068 0008                  		sub.w	8(a0),d0
000188C6 5040                       		addq.w	#8,d0
000188C8 0C40 0010                  		cmpi.w	#$10,d0
000188CC 6400 0000                  		bcc.w	locret_16F90
000188D0 3038 D00C                  		move.w	($FFFFD00C).w,d0
000188D4 9068 000C                  		sub.w	$C(a0),d0
000188D8 0640 0040                  		addi.w	#$40,d0
000188DC 0C40 0068                  		cmpi.w	#$68,d0
000188E0 6400                       		bcc.s	locret_16F90
000188E2 303C 00A1                  		move.w	#$A1,d0
000188E6 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play lamppost sound
000188EC 5428 0024                  		addq.b	#2,$24(a0)
000188F0 4EB9 0000 E59C             		jsr	SingleObjLoad
000188F6 6600                       		bne.s	loc_16F76
000188F8 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
000188FC 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00018902 3368 0008 0030             		move.w	8(a0),$30(a1)
00018908 3368 000C 0032             		move.w	$C(a0),$32(a1)
0001890E 0469 0018 0032             		subi.w	#$18,$32(a1)
00018914 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
0001891C 337C 06C0 0002             		move.w	#($D800/$20),2(a1)
00018922 137C 0004 0001             		move.b	#4,1(a1)
00018928 137C 0008 0019             		move.b	#8,$19(a1)
0001892E 137C 0004 0018             		move.b	#4,$18(a1)
00018934 137C 0002 001A             		move.b	#2,$1A(a1)
0001893A 337C 0020 0036             		move.w	#$20,$36(a1)
00018940                            
00018940                            loc_16F76:
00018940 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00018946 6100 0000                  		bsr.w	Obj79_StoreInfo
0001894A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001894E 7000                       		moveq	#0,d0
00018950 1028 0023                  		move.b	$23(a0),d0
00018954 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001895A                            
0001895A                            locret_16F90:
0001895A 4E75                       		rts	
0001895C                            ; ===========================================================================
0001895C                            
0001895C                            Obj79_AfterHit:				; XREF: Obj79_Index
0001895C 4E75                       		rts	
0001895E                            ; ===========================================================================
0001895E                            
0001895E                            Obj79_Twirl:				; XREF: Obj79_Index
0001895E 5368 0036                  		subq.w	#1,$36(a0)
00018962 6A00                       		bpl.s	loc_16FA0
00018964 117C 0004 0024             		move.b	#4,$24(a0)
0001896A                            
0001896A                            loc_16FA0:
0001896A 1028 0026                  		move.b	$26(a0),d0
0001896E 0428 0010 0026             		subi.b	#$10,$26(a0)
00018974 0400 0040                  		subi.b	#$40,d0
00018978 4EB9 0000 33D4             		jsr	(CalcSine).l
0001897E C3FC 0C00                  		muls.w	#$C00,d1
00018982 4841                       		swap	d1
00018984 D268 0030                  		add.w	$30(a0),d1
00018988 3141 0008                  		move.w	d1,8(a0)
0001898C C1FC 0C00                  		muls.w	#$C00,d0
00018990 4840                       		swap	d0
00018992 D068 0032                  		add.w	$32(a0),d0
00018996 3140 000C                  		move.w	d0,$C(a0)
0001899A 4E75                       		rts	
0001899C                            ; ===========================================================================
0001899C                            ; ---------------------------------------------------------------------------
0001899C                            ; Subroutine to	store information when you hit a lamppost
0001899C                            ; ---------------------------------------------------------------------------
0001899C                            
0001899C                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
0001899C 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
000189A2 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
000189A8 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
000189AE 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
000189B4 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
000189BA 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
000189C0 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
000189C6 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
000189CC 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
000189D2 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
000189D8 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
000189DE 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
000189E4 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
000189EA 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
000189F0 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
000189F6 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
000189FC 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00018A02 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00018A08 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00018A0E 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00018A14 4E75                       		rts	
00018A16                            
00018A16                            ; ---------------------------------------------------------------------------
00018A16                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00018A16                            ; ---------------------------------------------------------------------------
00018A16                            
00018A16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018A16                            
00018A16                            
00018A16                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00018A16 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00018A1C 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00018A22 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00018A28 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00018A2E 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00018A34 4278 FE20                  		clr.w	($FFFFFE20).w
00018A38 4238 FE1B                  		clr.b	($FFFFFE1B).w
00018A3C 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00018A42 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00018A48 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00018A4C 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00018A52 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00018A58 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00018A5E 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00018A64 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00018A6A 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00018A70 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00018A76 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00018A7C 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00018A82 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00018A88 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00018A8E 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00018A94 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00018A9A 6600                       		bne.s	loc_170E4
00018A9C 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00018AA2 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00018AA8 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00018AAE                            
00018AAE                            loc_170E4:
00018AAE 4A38 FE30                  		tst.b	($FFFFFE30).w
00018AB2 6A00                       		bpl.s	locret_170F6
00018AB4 3038 FE32                  		move.w	($FFFFFE32).w,d0
00018AB8 0440 00A0                  		subi.w	#$A0,d0
00018ABC 31C0 F728                  		move.w	d0,($FFFFF728).w
00018AC0                            
00018AC0                            locret_170F6:
00018AC0 4E75                       		rts	
00018AC2                            ; End of function Obj79_LoadInfo
00018AC2                            
00018AC2                            ; ===========================================================================
00018AC2                            ; ---------------------------------------------------------------------------
00018AC2                            ; Sprite mappings - lamppost
00018AC2                            ; ---------------------------------------------------------------------------
00018AC2                            Map_obj79:
00018AC2                            	include "_maps\obj79.asm"
00018AC2                            ; ---------------------------------------------------------------------------
00018AC2                            ; Sprite mappings - lamppost
00018AC2                            ; ---------------------------------------------------------------------------
00018AC2 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00018AC6 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00018ACA 06                         byte_17100:	dc.b 6
00018ACB E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00018AD0 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00018AD5 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00018ADA F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00018ADF D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00018AE4 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00018AE9 04                         byte_1711F:	dc.b 4
00018AEA E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00018AEF E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00018AF4 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00018AF9 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00018AFE 02                         byte_17134:	dc.b 2
00018AFF F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00018B04 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00018B09 06                         byte_1713F:	dc.b 6
00018B0A E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00018B0F E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00018B14 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00018B19 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00018B1E D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00018B23 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00018B28                            		even
00018B28                            		even
00018B28                            
00018B28                            ; ===========================================================================
00018B28                            ; ---------------------------------------------------------------------------
00018B28                            ; Object 7D - hidden points at the end of a level
00018B28                            ; ---------------------------------------------------------------------------
00018B28                            
00018B28                            Obj7D:					; XREF: Obj_Index
00018B28 7000                       		moveq	#0,d0
00018B2A 1028 0024                  		move.b	$24(a0),d0
00018B2E 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00018B32 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00018B36                            ; ===========================================================================
00018B36 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00018B38 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00018B3A                            ; ===========================================================================
00018B3A                            
00018B3A                            Obj7D_Main:				; XREF: Obj7D_Index
00018B3A 7410                       		moveq	#$10,d2
00018B3C 3602                       		move.w	d2,d3
00018B3E D643                       		add.w	d3,d3
00018B40 43F8 D000                  		lea	($FFFFD000).w,a1
00018B44 3029 0008                  		move.w	8(a1),d0
00018B48 9068 0008                  		sub.w	8(a0),d0
00018B4C D042                       		add.w	d2,d0
00018B4E B043                       		cmp.w	d3,d0
00018B50 6400                       		bcc.s	Obj7D_ChkDel
00018B52 3229 000C                  		move.w	$C(a1),d1
00018B56 9268 000C                  		sub.w	$C(a0),d1
00018B5A D242                       		add.w	d2,d1
00018B5C B243                       		cmp.w	d3,d1
00018B5E 6400                       		bcc.s	Obj7D_ChkDel
00018B60 4A78 FE08                  		tst.w	($FFFFFE08).w
00018B64 6600                       		bne.s	Obj7D_ChkDel
00018B66 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00018B6A 6600                       		bne.s	Obj7D_ChkDel
00018B6C 5428 0024                  		addq.b	#2,$24(a0)
00018B70 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00018B78 317C 84B6 0002             		move.w	#$84B6,2(a0)
00018B7E 0028 0004 0001             		ori.b	#4,1(a0)
00018B84 117C 0000 0018             		move.b	#0,$18(a0)
00018B8A 117C 0010 0019             		move.b	#$10,$19(a0)
00018B90 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00018B96 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00018B9C 303C 00C9                  		move.w	#$C9,d0
00018BA0 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play bonus sound
00018BA6 7000                       		moveq	#0,d0
00018BA8 1028 0028                  		move.b	$28(a0),d0
00018BAC D040                       		add.w	d0,d0
00018BAE 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00018BB2 4EB9 0000 0000             		jsr	AddPoints
00018BB8                            
00018BB8                            Obj7D_ChkDel:
00018BB8 3028 0008                  		move.w	8(a0),d0
00018BBC 0240 FF80                  		andi.w	#$FF80,d0
00018BC0 3238 F700                  		move.w	($FFFFF700).w,d1
00018BC4 0441 0080                  		subi.w	#$80,d1
00018BC8 0241 FF80                  		andi.w	#$FF80,d1
00018BCC 9041                       		sub.w	d1,d0
00018BCE 0C40 0280                  		cmpi.w	#$280,d0
00018BD2 6200                       		bhi.s	Obj7D_Delete
00018BD4 4E75                       		rts	
00018BD6                            ; ===========================================================================
00018BD6                            
00018BD6                            Obj7D_Delete:
00018BD6 4EF9 0000 E142             		jmp	DeleteObject
00018BDC                            ; ===========================================================================
00018BDC 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00018BDE 03E8                       		dc.w 1000
00018BE0 0064                       		dc.w 100
00018BE2 000A                       		dc.w 10
00018BE4                            ; ===========================================================================
00018BE4                            
00018BE4                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00018BE4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00018BE8 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00018BEA 3028 0008                  		move.w	8(a0),d0
00018BEE 0240 FF80                  		andi.w	#-$80,d0
00018BF2 3238 F700                  		move.w	($FFFFF700).w,d1
00018BF6 0441 0080                  		subi.w	#$80,d1
00018BFA 0241 FF80                  		andi.w	#-$80,d1
00018BFE 9041                       		sub.w	d1,d0
00018C00 0C40 0280                  		cmpi.w	#$280,d0
00018C04 6200                       		bhi.s	Obj7D_Delete2
00018C06 4EF9 0000 E106             		jmp	DisplaySprite
00018C0C                            ; ===========================================================================
00018C0C                            
00018C0C                            Obj7D_Delete2:
00018C0C 4EF9 0000 E142             		jmp	DeleteObject
00018C12                            ; ===========================================================================
00018C12                            ; ---------------------------------------------------------------------------
00018C12                            ; Sprite mappings - hidden points at the end of	a level
00018C12                            ; ---------------------------------------------------------------------------
00018C12                            Map_obj7D:
00018C12                            	include "_maps\obj7D.asm"
00018C12                            ; ---------------------------------------------------------------------------
00018C12                            ; Sprite mappings - hidden points at the end of	a level
00018C12                            ; ---------------------------------------------------------------------------
00018C12 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00018C16 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00018C1A 00                         byte_17250:	dc.b 0
00018C1B 01                         byte_17251:	dc.b 1
00018C1C F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00018C21 01                         byte_17257:	dc.b 1
00018C22 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00018C27 01                         byte_1725D:	dc.b 1
00018C28 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00018C2E 00                         		even
00018C2E 00                         		even
00018C2E                            
00018C2E                            ; ===========================================================================
00018C2E                            ; ---------------------------------------------------------------------------
00018C2E                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00018C2E                            ; ---------------------------------------------------------------------------
00018C2E                            
00018C2E                            Obj8A:					; XREF: Obj_Index
00018C2E 7000                       		moveq	#0,d0
00018C30 1028 0024                  		move.b	$24(a0),d0
00018C34 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00018C38 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00018C3C                            ; ===========================================================================
00018C3C 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00018C3E 0000                       		dc.w Obj8A_Display-Obj8A_Index
00018C40                            ; ===========================================================================
00018C40                            
00018C40                            Obj8A_Main:				; XREF: Obj8A_Index
00018C40 5428 0024                  		addq.b	#2,$24(a0)
00018C44 317C 0120 0008             		move.w	#$120,8(a0)
00018C4A 317C 00F0 000A             		move.w	#$F0,$A(a0)
00018C50 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00018C58 317C 05A0 0002             		move.w	#$5A0,2(a0)
00018C5E 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00018C62 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00018C66 117C 0000 0001             		move.b	#0,1(a0)
00018C6C 117C 0000 0018             		move.b	#0,$18(a0)
00018C72 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00018C78 6600                       		bne.s	Obj8A_Display	; if not, branch
00018C7A 317C 00A6 0002             		move.w	#$A6,2(a0)
00018C80 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00018C86 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00018C8A 6700                       		beq.s	Obj8A_Display	; if not, branch
00018C8C 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00018C92 6600                       		bne.s	Obj8A_Display	; if not, branch
00018C94 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00018C9A 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00018CA0 4EF9 0000 E142             		jmp	DeleteObject
00018CA6                            ; ===========================================================================
00018CA6                            
00018CA6                            Obj8A_Display:				; XREF: Obj8A_Index
00018CA6 4EF9 0000 E106             		jmp	DisplaySprite
00018CAC                            ; ===========================================================================
00018CAC                            ; ---------------------------------------------------------------------------
00018CAC                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00018CAC                            ; ---------------------------------------------------------------------------
00018CAC                            Map_obj8A:
00018CAC                            	include "_maps\obj8A.asm"
00018CAC                            ; ---------------------------------------------------------------------------
00018CAC                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00018CAC                            ; ---------------------------------------------------------------------------
00018CAC 0000 0000                  		dc.w byte_172F8-Map_obj8A, byte_1733F-Map_obj8A
00018CB0 0000 0000                  		dc.w byte_17390-Map_obj8A, byte_173C3-Map_obj8A
00018CB4 0000 0000                  		dc.w byte_1743C-Map_obj8A, byte_174A1-Map_obj8A
00018CB8 0000 0000                  		dc.w byte_17524-Map_obj8A, byte_17598-Map_obj8A
00018CBC 0000 0000                  		dc.w byte_17634-Map_obj8A, byte_17680-Map_obj8A
00018CC0 0000                       		dc.w byte_176A9-Map_obj8A
00018CC2 0E                         byte_172F8:	dc.b $E			 ; SONIC TEAM STAFF
00018CC3 F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
00018CC8 F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
00018CCD F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
00018CD2 F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
00018CD7 F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
00018CDC F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
00018CE1 F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
00018CE6 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00018CEB F809 0008 08               		dc.b $F8, 9, 0,	8, 8
00018CF0 F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
00018CF5 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
00018CFA F805 0004 48               		dc.b $F8, 5, 0,	4, $48
00018CFF F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
00018D04 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
00018D09 10                         byte_1733F:	dc.b $10		; GAME PLAN CAROL YAS
00018D0A D805 0000 80               		dc.b $D8, 5, 0,	0, $80
00018D0F D805 0004 90               		dc.b $D8, 5, 0,	4, $90
00018D14 D809 0008 A0               		dc.b $D8, 9, 0,	8, $A0
00018D19 D805 000E B4               		dc.b $D8, 5, 0,	$E, $B4
00018D1E D805 0012 D0               		dc.b $D8, 5, 0,	$12, $D0
00018D23 D805 0016 E0               		dc.b $D8, 5, 0,	$16, $E0
00018D28 D805 0004 F0               		dc.b $D8, 5, 0,	4, $F0
00018D2D D805 001A 00               		dc.b $D8, 5, 0,	$1A, 0
00018D32 0805 001E C8               		dc.b 8,	5, 0, $1E, $C8
00018D37 0805 0004 D8               		dc.b 8,	5, 0, 4, $D8
00018D3C 0805 0022 E8               		dc.b 8,	5, 0, $22, $E8
00018D41 0805 0026 F8               		dc.b 8,	5, 0, $26, $F8
00018D46 0805 0016 08               		dc.b 8,	5, 0, $16, 8
00018D4B 0805 002A 20               		dc.b 8,	5, 0, $2A, $20
00018D50 0805 0004 30               		dc.b 8,	5, 0, 4, $30
00018D55 0805 002E 44               		dc.b 8,	5, 0, $2E, $44
00018D5A 0A                         byte_17390:	dc.b $A			 ; PROGRAM YU 2
00018D5B D805 0012 80               		dc.b $D8, 5, 0,	$12, $80
00018D60 D805 0022 90               		dc.b $D8, 5, 0,	$22, $90
00018D65 D805 0026 A0               		dc.b $D8, 5, 0,	$26, $A0
00018D6A D805 0000 B0               		dc.b $D8, 5, 0,	0, $B0
00018D6F D805 0022 C0               		dc.b $D8, 5, 0,	$22, $C0
00018D74 D805 0004 D0               		dc.b $D8, 5, 0,	4, $D0
00018D79 D809 0008 E0               		dc.b $D8, 9, 0,	8, $E0
00018D7E 0805 002A E8               		dc.b 8,	5, 0, $2A, $E8
00018D83 0805 0032 F8               		dc.b 8,	5, 0, $32, $F8
00018D88 0805 0036 08               		dc.b 8,	5, 0, $36, 8
00018D8D 18                         byte_173C3:	dc.b $18		 ; CHARACTER DESIGN BIGISLAND
00018D8E D805 001E 88               		dc.b $D8, 5, 0,	$1E, $88
00018D93 D805 003A 98               		dc.b $D8, 5, 0,	$3A, $98
00018D98 D805 0004 A8               		dc.b $D8, 5, 0,	4, $A8
00018D9D D805 0022 B8               		dc.b $D8, 5, 0,	$22, $B8
00018DA2 D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
00018DA7 D805 001E D8               		dc.b $D8, 5, 0,	$1E, $D8
00018DAC D805 003E E8               		dc.b $D8, 5, 0,	$3E, $E8
00018DB1 D805 000E F8               		dc.b $D8, 5, 0,	$E, $F8
00018DB6 D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
00018DBB D805 0042 20               		dc.b $D8, 5, 0,	$42, $20
00018DC0 D805 000E 30               		dc.b $D8, 5, 0,	$E, $30
00018DC5 D805 002E 40               		dc.b $D8, 5, 0,	$2E, $40
00018DCA D801 0046 50               		dc.b $D8, 1, 0,	$46, $50
00018DCF D805 0000 58               		dc.b $D8, 5, 0,	0, $58
00018DD4 D805 001A 68               		dc.b $D8, 5, 0,	$1A, $68
00018DD9 0805 0048 C0               		dc.b 8,	5, 0, $48, $C0
00018DDE 0801 0046 D0               		dc.b 8,	1, 0, $46, $D0
00018DE3 0805 0000 D8               		dc.b 8,	5, 0, 0, $D8
00018DE8 0801 0046 E8               		dc.b 8,	1, 0, $46, $E8
00018DED 0805 002E F0               		dc.b 8,	5, 0, $2E, $F0
00018DF2 0805 0016 00               		dc.b 8,	5, 0, $16, 0
00018DF7 0805 0004 10               		dc.b 8,	5, 0, 4, $10
00018DFC 0805 001A 20               		dc.b 8,	5, 0, $1A, $20
00018E01 0805 0042 30               		dc.b 8,	5, 0, $42, $30
00018E06 14                         byte_1743C:	dc.b $14		 ; DESIGN JINYA	PHENIX RIE
00018E07 D005 0042 A0               		dc.b $D0, 5, 0,	$42, $A0
00018E0C D005 000E B0               		dc.b $D0, 5, 0,	$E, $B0
00018E11 D005 002E C0               		dc.b $D0, 5, 0,	$2E, $C0
00018E16 D001 0046 D0               		dc.b $D0, 1, 0,	$46, $D0
00018E1B D005 0000 D8               		dc.b $D0, 5, 0,	0, $D8
00018E20 D005 001A E8               		dc.b $D0, 5, 0,	$1A, $E8
00018E25 0005 004C E8               		dc.b 0,	5, 0, $4C, $E8
00018E2A 0001 0046 F8               		dc.b 0,	1, 0, $46, $F8
00018E2F 0005 001A 04               		dc.b 0,	5, 0, $1A, 4
00018E34 0005 002A 14               		dc.b 0,	5, 0, $2A, $14
00018E39 0005 0004 24               		dc.b 0,	5, 0, 4, $24
00018E3E 2005 0012 D0               		dc.b $20, 5, 0,	$12, $D0
00018E43 2005 003A E0               		dc.b $20, 5, 0,	$3A, $E0
00018E48 2005 000E F0               		dc.b $20, 5, 0,	$E, $F0
00018E4D 2005 001A 00               		dc.b $20, 5, 0,	$1A, 0
00018E52 2001 0046 10               		dc.b $20, 1, 0,	$46, $10
00018E57 2005 0050 18               		dc.b $20, 5, 0,	$50, $18
00018E5C 2005 0022 30               		dc.b $20, 5, 0,	$22, $30
00018E61 2001 0046 40               		dc.b $20, 1, 0,	$46, $40
00018E66 2005 000E 48               		dc.b $20, 5, 0,	$E, $48
00018E6B 1A                         byte_174A1:	dc.b $1A		 ; SOUND PRODUCE MASATO	NAKAMURA
00018E6C D805 002E 98               		dc.b $D8, 5, 0,	$2E, $98
00018E71 D805 0026 A8               		dc.b $D8, 5, 0,	$26, $A8
00018E76 D805 0032 B8               		dc.b $D8, 5, 0,	$32, $B8
00018E7B D805 001A C8               		dc.b $D8, 5, 0,	$1A, $C8
00018E80 D805 0054 D8               		dc.b $D8, 5, 0,	$54, $D8
00018E85 D805 0012 F8               		dc.b $D8, 5, 0,	$12, $F8
00018E8A D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
00018E8F D805 0026 18               		dc.b $D8, 5, 0,	$26, $18
00018E94 D805 0042 28               		dc.b $D8, 5, 0,	$42, $28
00018E99 D805 0032 38               		dc.b $D8, 5, 0,	$32, $38
00018E9E D805 001E 48               		dc.b $D8, 5, 0,	$1E, $48
00018EA3 D805 000E 58               		dc.b $D8, 5, 0,	$E, $58
00018EA8 0809 0008 88               		dc.b 8,	9, 0, 8, $88
00018EAD 0805 0004 9C               		dc.b 8,	5, 0, 4, $9C
00018EB2 0805 002E AC               		dc.b 8,	5, 0, $2E, $AC
00018EB7 0805 0004 BC               		dc.b 8,	5, 0, 4, $BC
00018EBC 0805 003E CC               		dc.b 8,	5, 0, $3E, $CC
00018EC1 0805 0026 DC               		dc.b 8,	5, 0, $26, $DC
00018EC6 0805 001A F8               		dc.b 8,	5, 0, $1A, $F8
00018ECB 0805 0004 08               		dc.b 8,	5, 0, 4, 8
00018ED0 0805 0058 18               		dc.b 8,	5, 0, $58, $18
00018ED5 0805 0004 28               		dc.b 8,	5, 0, 4, $28
00018EDA 0809 0008 38               		dc.b 8,	9, 0, 8, $38
00018EDF 0805 0032 4C               		dc.b 8,	5, 0, $32, $4C
00018EE4 0805 0022 5C               		dc.b 8,	5, 0, $22, $5C
00018EE9 0805 0004 6C               		dc.b 8,	5, 0, 4, $6C
00018EEE 17                         byte_17524:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
00018EEF D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
00018EF4 D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
00018EF9 D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
00018EFE D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
00018F03 D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
00018F08 D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
00018F0D D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
00018F12 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
00018F17 D005 0000 28               		dc.b $D0, 5, 0,	0, $28
00018F1C D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
00018F21 D005 0004 48               		dc.b $D0, 5, 0,	4, $48
00018F26 D009 0008 58               		dc.b $D0, 9, 0,	8, $58
00018F2B 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
00018F30 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
00018F35 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
00018F3A 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
00018F3F 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
00018F44 0005 0004 14               		dc.b 0,	5, 0, 4, $14
00018F49 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
00018F4E 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
00018F53 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
00018F58 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
00018F5D 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
00018F62 1F                         byte_17598:	dc.b $1F		 ; SPECIAL THANKS FUJIO	MINEGISHI PAPA
00018F63 D805 002E 80               		dc.b $D8, 5, 0,	$2E, $80
00018F68 D805 0012 90               		dc.b $D8, 5, 0,	$12, $90
00018F6D D805 000E A0               		dc.b $D8, 5, 0,	$E, $A0
00018F72 D805 001E B0               		dc.b $D8, 5, 0,	$1E, $B0
00018F77 D801 0046 C0               		dc.b $D8, 1, 0,	$46, $C0
00018F7C D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
00018F81 D805 0016 D8               		dc.b $D8, 5, 0,	$16, $D8
00018F86 D805 003E F8               		dc.b $D8, 5, 0,	$3E, $F8
00018F8B D805 003A 08               		dc.b $D8, 5, 0,	$3A, 8
00018F90 D805 0004 18               		dc.b $D8, 5, 0,	4, $18
00018F95 D805 001A 28               		dc.b $D8, 5, 0,	$1A, $28
00018F9A D805 0058 38               		dc.b $D8, 5, 0,	$58, $38
00018F9F D805 002E 48               		dc.b $D8, 5, 0,	$2E, $48
00018FA4 0005 005C B0               		dc.b 0,	5, 0, $5C, $B0
00018FA9 0005 0032 C0               		dc.b 0,	5, 0, $32, $C0
00018FAE 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
00018FB3 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
00018FB8 0005 0026 E8               		dc.b 0,	5, 0, $26, $E8
00018FBD 0009 0008 00               		dc.b 0,	9, 0, 8, 0
00018FC2 0001 0046 14               		dc.b 0,	1, 0, $46, $14
00018FC7 0005 001A 1C               		dc.b 0,	5, 0, $1A, $1C
00018FCC 0005 000E 2C               		dc.b 0,	5, 0, $E, $2C
00018FD1 0005 0000 3C               		dc.b 0,	5, 0, 0, $3C
00018FD6 0001 0046 4C               		dc.b 0,	1, 0, $46, $4C
00018FDB 0005 002E 54               		dc.b 0,	5, 0, $2E, $54
00018FE0 0005 003A 64               		dc.b 0,	5, 0, $3A, $64
00018FE5 0001 0046 74               		dc.b 0,	1, 0, $46, $74
00018FEA 2005 0012 F8               		dc.b $20, 5, 0,	$12, $F8
00018FEF 2005 0004 08               		dc.b $20, 5, 0,	4, 8
00018FF4 2005 0012 18               		dc.b $20, 5, 0,	$12, $18
00018FF9 2005 0004 28               		dc.b $20, 5, 0,	4, $28
00018FFE 0F                         byte_17634:	dc.b $F			 ; PRESENTED BY	SEGA
00018FFF F805 0012 80               		dc.b $F8, 5, 0,	$12, $80
00019004 F805 0022 90               		dc.b $F8, 5, 0,	$22, $90
00019009 F805 000E A0               		dc.b $F8, 5, 0,	$E, $A0
0001900E F805 002E B0               		dc.b $F8, 5, 0,	$2E, $B0
00019013 F805 000E C0               		dc.b $F8, 5, 0,	$E, $C0
00019018 F805 001A D0               		dc.b $F8, 5, 0,	$1A, $D0
0001901D F805 003E E0               		dc.b $F8, 5, 0,	$3E, $E0
00019022 F805 000E F0               		dc.b $F8, 5, 0,	$E, $F0
00019027 F805 0042 00               		dc.b $F8, 5, 0,	$42, 0
0001902C F805 0048 18               		dc.b $F8, 5, 0,	$48, $18
00019031 F805 002A 28               		dc.b $F8, 5, 0,	$2A, $28
00019036 F805 002E 40               		dc.b $F8, 5, 0,	$2E, $40
0001903B F805 000E 50               		dc.b $F8, 5, 0,	$E, $50
00019040 F805 0000 60               		dc.b $F8, 5, 0,	0, $60
00019045 F805 0004 70               		dc.b $F8, 5, 0,	4, $70
0001904A 08                         byte_17680:	dc.b 8			 ; TRY AGAIN
0001904B 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
00019050 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
00019055 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
0001905A 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
0001905F 3005 0000 08               		dc.b $30, 5, 0,	0, 8
00019064 3005 0004 18               		dc.b $30, 5, 0,	4, $18
00019069 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
0001906E 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
00019073 11                         byte_176A9:	dc.b $11		 ; SONIC TEAM PRESENTS
00019074 E805 002E B4               		dc.b $E8, 5, 0,	$2E, $B4
00019079 E805 0026 C4               		dc.b $E8, 5, 0,	$26, $C4
0001907E E805 001A D4               		dc.b $E8, 5, 0,	$1A, $D4
00019083 E801 0046 E4               		dc.b $E8, 1, 0,	$46, $E4
00019088 E805 001E EC               		dc.b $E8, 5, 0,	$1E, $EC
0001908D E805 003E 04               		dc.b $E8, 5, 0,	$3E, 4
00019092 E805 000E 14               		dc.b $E8, 5, 0,	$E, $14
00019097 E805 0004 24               		dc.b $E8, 5, 0,	4, $24
0001909C E809 0008 34               		dc.b $E8, 9, 0,	8, $34
000190A1 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0
000190A6 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0
000190AB 0005 000E E0               		dc.b 0,	5, 0, $E, $E0
000190B0 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0
000190B5 0005 000E 00               		dc.b 0,	5, 0, $E, 0
000190BA 0005 001A 10               		dc.b 0,	5, 0, $1A, $10
000190BF 0005 003E 20               		dc.b 0,	5, 0, $3E, $20
000190C4 0005 002E 30               		dc.b 0,	5, 0, $2E, $30
000190CA 00                         		even
000190CA 00                         		even
000190CA                            
000190CA                            ; ===========================================================================
000190CA                            ; ---------------------------------------------------------------------------
000190CA                            ; Object 3D - Eggman (GHZ)
000190CA                            ; ---------------------------------------------------------------------------
000190CA                            
000190CA                            Obj3D:					; XREF: Obj_Index
000190CA 7000                       		moveq	#0,d0
000190CC 1028 0024                  		move.b	$24(a0),d0
000190D0 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
000190D4 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
000190D8                            ; ===========================================================================
000190D8 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
000190DA 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
000190DC 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
000190DE 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
000190E0                            
000190E0 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
000190E2 0401                       		dc.b 4,	1
000190E4 0607                       		dc.b 6,	7
000190E6                            ; ===========================================================================
000190E6                            
000190E6                            Obj3D_Main:				; XREF: Obj3D_Index
000190E6 45F9 0001 90E0             		lea	(Obj3D_ObjData).l,a2
000190EC 2248                       		movea.l	a0,a1
000190EE 7202                       		moveq	#2,d1
000190F0 6000                       		bra.s	Obj3D_LoadBoss
000190F2                            ; ===========================================================================
000190F2                            
000190F2                            Obj3D_Loop:
000190F2 4EB9 0000 E5B2             		jsr	SingleObjLoad2
000190F8 6600                       		bne.s	loc_17772
000190FA                            
000190FA                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
000190FA 135A 0024                  		move.b	(a2)+,$24(a1)
000190FE 12BC 003D                  		move.b	#$3D,0(a1)
00019102 3368 0008 0008             		move.w	8(a0),8(a1)
00019108 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001910E 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00019116 337C 0400 0002             		move.w	#$400,2(a1)
0001911C 137C 0004 0001             		move.b	#4,1(a1)
00019122 137C 0020 0019             		move.b	#$20,$19(a1)
00019128 137C 0003 0018             		move.b	#3,$18(a1)
0001912E 135A 001C                  		move.b	(a2)+,$1C(a1)
00019132 2348 0034                  		move.l	a0,$34(a1)
00019136 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
0001913A                            
0001913A                            loc_17772:
0001913A 3168 0008 0030             		move.w	8(a0),$30(a0)
00019140 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019146 117C 000F 0020             		move.b	#$F,$20(a0)
0001914C 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019152                            
00019152                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00019152 7000                       		moveq	#0,d0
00019154 1028 0025                  		move.b	$25(a0),d0
00019158 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
0001915C 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00019160 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00019166 4EB9 0000 B218             		jsr	AnimateSprite
0001916C 1028 0022                  		move.b	$22(a0),d0
00019170 0200 0003                  		andi.b	#3,d0
00019174 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001917A 8128 0001                  		or.b	d0,1(a0)
0001917E 4EF9 0000 E106             		jmp	DisplaySprite
00019184                            ; ===========================================================================
00019184 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00019186 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
00019188 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
0001918A 0000                       		dc.w loc_17954-Obj3D_ShipIndex
0001918C 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
0001918E 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00019190 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00019192                            ; ===========================================================================
00019192                            
00019192                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00019192 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
00019198 6100 0000                  		bsr.w	BossMove
0001919C 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
000191A2 6600                       		bne.s	loc_177E6
000191A4 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
000191AA 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
000191AE                            
000191AE                            loc_177E6:
000191AE 1028 003F                  		move.b	$3F(a0),d0
000191B2 4EB9 0000 33D4             		jsr	(CalcSine).l
000191B8 EC40                       		asr.w	#6,d0
000191BA D068 0038                  		add.w	$38(a0),d0
000191BE 3140 000C                  		move.w	d0,$C(a0)
000191C2 3168 0030 0008             		move.w	$30(a0),8(a0)
000191C8 5428 003F                  		addq.b	#2,$3F(a0)
000191CC 0C28 0008 0025             		cmpi.b	#8,$25(a0)
000191D2 6400                       		bcc.s	locret_1784A
000191D4 4A28 0022                  		tst.b	$22(a0)
000191D8 6B00                       		bmi.s	loc_1784C
000191DA 4A28 0020                  		tst.b	$20(a0)
000191DE 6600                       		bne.s	locret_1784A
000191E0 4A28 003E                  		tst.b	$3E(a0)
000191E4 6600                       		bne.s	Obj3D_ShipFlash
000191E6 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
000191EC 303C 00AC                  		move.w	#$AC,d0
000191F0 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play boss damage sound
000191F6                            
000191F6                            Obj3D_ShipFlash:
000191F6 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
000191FA 7000                       		moveq	#0,d0		; move 0 (black) to d0
000191FC 4A51                       		tst.w	(a1)
000191FE 6600                       		bne.s	loc_1783C
00019200 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00019204                            
00019204                            loc_1783C:
00019204 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00019206 5328 003E                  		subq.b	#1,$3E(a0)
0001920A 6600                       		bne.s	locret_1784A
0001920C 117C 000F 0020             		move.b	#$F,$20(a0)
00019212                            
00019212                            locret_1784A:
00019212 4E75                       		rts	
00019214                            ; ===========================================================================
00019214                            
00019214                            loc_1784C:				; XREF: loc_177E6
00019214 7064                       		moveq	#100,d0
00019216 6100 0000                  		bsr.w	AddPoints
0001921A 117C 0008 0025             		move.b	#8,$25(a0)
00019220 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00019226 4E75                       		rts	
00019228                            
00019228                            ; ---------------------------------------------------------------------------
00019228                            ; Defeated boss	subroutine
00019228                            ; ---------------------------------------------------------------------------
00019228                            
00019228                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019228                            
00019228                            
00019228                            BossDefeated:
00019228 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001922C 0200 0007                  		andi.b	#7,d0
00019230 6600                       		bne.s	locret_178A2
00019232 4EB9 0000 E59C             		jsr	SingleObjLoad
00019238 6600                       		bne.s	locret_178A2
0001923A 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001923E 3368 0008 0008             		move.w	8(a0),8(a1)
00019244 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001924A 4EB9 0000 33AE             		jsr	(RandomNumber).l
00019250 3200                       		move.w	d0,d1
00019252 7200                       		moveq	#0,d1
00019254 1200                       		move.b	d0,d1
00019256 E409                       		lsr.b	#2,d1
00019258 0441 0020                  		subi.w	#$20,d1
0001925C D369 0008                  		add.w	d1,8(a1)
00019260 E048                       		lsr.w	#8,d0
00019262 E608                       		lsr.b	#3,d0
00019264 D169 000C                  		add.w	d0,$C(a1)
00019268                            
00019268                            locret_178A2:
00019268 4E75                       		rts	
0001926A                            ; End of function BossDefeated
0001926A                            
0001926A                            ; ---------------------------------------------------------------------------
0001926A                            ; Subroutine to	move a boss
0001926A                            ; ---------------------------------------------------------------------------
0001926A                            
0001926A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001926A                            
0001926A                            
0001926A                            BossMove:
0001926A 2428 0030                  		move.l	$30(a0),d2
0001926E 2628 0038                  		move.l	$38(a0),d3
00019272 3028 0010                  		move.w	$10(a0),d0
00019276 48C0                       		ext.l	d0
00019278 E180                       		asl.l	#8,d0
0001927A D480                       		add.l	d0,d2
0001927C 3028 0012                  		move.w	$12(a0),d0
00019280 48C0                       		ext.l	d0
00019282 E180                       		asl.l	#8,d0
00019284 D680                       		add.l	d0,d3
00019286 2142 0030                  		move.l	d2,$30(a0)
0001928A 2143 0038                  		move.l	d3,$38(a0)
0001928E 4E75                       		rts	
00019290                            ; End of function BossMove
00019290                            
00019290                            ; ===========================================================================
00019290                            
00019290                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
00019290 317C FF00 0010             		move.w	#-$100,$10(a0)
00019296 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001929C 6100 FFCC                  		bsr.w	BossMove
000192A0 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
000192A6 6600                       		bne.s	loc_17916
000192A8 317C 0000 0010             		move.w	#0,$10(a0)
000192AE 317C 0000 0012             		move.w	#0,$12(a0)
000192B4 5428 0025                  		addq.b	#2,$25(a0)
000192B8 4EB9 0000 E5B2             		jsr	SingleObjLoad2
000192BE 6600                       		bne.s	loc_17910
000192C0 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
000192C4 3368 0030 0008             		move.w	$30(a0),8(a1)
000192CA 3368 0038 000C             		move.w	$38(a0),$C(a1)
000192D0 2348 0034                  		move.l	a0,$34(a1)
000192D4                            
000192D4                            loc_17910:
000192D4 317C 0077 003C             		move.w	#$77,$3C(a0)
000192DA                            
000192DA                            loc_17916:
000192DA 6000 FED2                  		bra.w	loc_177E6
000192DE                            ; ===========================================================================
000192DE                            
000192DE                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
000192DE 5368 003C                  		subq.w	#1,$3C(a0)
000192E2 6A00                       		bpl.s	Obj3D_Reverse
000192E4 5428 0025                  		addq.b	#2,$25(a0)
000192E8 317C 003F 003C             		move.w	#$3F,$3C(a0)
000192EE 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
000192F4 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
000192FA 6600                       		bne.s	Obj3D_Reverse
000192FC 317C 007F 003C             		move.w	#$7F,$3C(a0)
00019302 317C 0040 0010             		move.w	#$40,$10(a0)
00019308                            
00019308                            Obj3D_Reverse:
00019308 0828 0000 0022             		btst	#0,$22(a0)
0001930E 6600                       		bne.s	loc_17950
00019310 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
00019314                            
00019314                            loc_17950:
00019314 6000 FE98                  		bra.w	loc_177E6
00019318                            ; ===========================================================================
00019318                            
00019318                            loc_17954:				; XREF: Obj3D_ShipIndex
00019318 5368 003C                  		subq.w	#1,$3C(a0)
0001931C 6B00                       		bmi.s	loc_17960
0001931E 6100 FF4A                  		bsr.w	BossMove
00019322 6000                       		bra.s	loc_17976
00019324                            ; ===========================================================================
00019324                            
00019324                            loc_17960:
00019324 0868 0000 0022             		bchg	#0,$22(a0)
0001932A 317C 003F 003C             		move.w	#$3F,$3C(a0)
00019330 5528 0025                  		subq.b	#2,$25(a0)
00019334 317C 0000 0010             		move.w	#0,$10(a0)
0001933A                            
0001933A                            loc_17976:
0001933A 6000 FE72                  		bra.w	loc_177E6
0001933E                            ; ===========================================================================
0001933E                            
0001933E                            loc_1797A:				; XREF: Obj3D_ShipIndex
0001933E 5368 003C                  		subq.w	#1,$3C(a0)
00019342 6B00                       		bmi.s	loc_17984
00019344 6000 FEE2                  		bra.w	BossDefeated
00019348                            ; ===========================================================================
00019348                            
00019348                            loc_17984:
00019348 08E8 0000 0022             		bset	#0,$22(a0)
0001934E 08A8 0007 0022             		bclr	#7,$22(a0)
00019354 4268 0010                  		clr.w	$10(a0)
00019358 5428 0025                  		addq.b	#2,$25(a0)
0001935C 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00019362 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019366 6600                       		bne.s	locret_179AA
00019368 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001936E                            
0001936E                            locret_179AA:
0001936E 4E75                       		rts	
00019370                            ; ===========================================================================
00019370                            
00019370                            loc_179AC:				; XREF: Obj3D_ShipIndex
00019370 5268 003C                  		addq.w	#1,$3C(a0)
00019374 6700                       		beq.s	loc_179BC
00019376 6A00                       		bpl.s	loc_179C2
00019378 0668 0018 0012             		addi.w	#$18,$12(a0)
0001937E 6000                       		bra.s	loc_179EE
00019380                            ; ===========================================================================
00019380                            
00019380                            loc_179BC:
00019380 4268 0012                  		clr.w	$12(a0)
00019384 6000                       		bra.s	loc_179EE
00019386                            ; ===========================================================================
00019386                            
00019386                            loc_179C2:
00019386 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001938C 6500                       		bcs.s	loc_179DA
0001938E 6700                       		beq.s	loc_179E0
00019390 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00019396 6500                       		bcs.s	loc_179EE
00019398 5428 0025                  		addq.b	#2,$25(a0)
0001939C 6000                       		bra.s	loc_179EE
0001939E                            ; ===========================================================================
0001939E                            
0001939E                            loc_179DA:
0001939E 5168 0012                  		subq.w	#8,$12(a0)
000193A2 6000                       		bra.s	loc_179EE
000193A4                            ; ===========================================================================
000193A4                            
000193A4                            loc_179E0:
000193A4 4268 0012                  		clr.w	$12(a0)
000193A8 303C 0081                  		move.w	#$81,d0
000193AC 4EB9 0000 1470             		jsr	(PlaySound).l	; play GHZ music
000193B2                            
000193B2                            loc_179EE:
000193B2 6100 FEB6                  		bsr.w	BossMove
000193B6 6000 FDF6                  		bra.w	loc_177E6
000193BA                            ; ===========================================================================
000193BA                            
000193BA                            loc_179F6:				; XREF: Obj3D_ShipIndex
000193BA 317C 0400 0010             		move.w	#$400,$10(a0)
000193C0 317C FFC0 0012             		move.w	#-$40,$12(a0)
000193C6 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
000193CC 6700                       		beq.s	loc_17A10
000193CE 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000193D2 6000                       		bra.s	loc_17A16
000193D4                            ; ===========================================================================
000193D4                            
000193D4                            loc_17A10:
000193D4 4A28 0001                  		tst.b	1(a0)
000193D8 6A00                       		bpl.s	Obj3D_ShipDel
000193DA                            
000193DA                            loc_17A16:
000193DA 6100 FE8E                  		bsr.w	BossMove
000193DE 6000 FDCE                  		bra.w	loc_177E6
000193E2                            ; ===========================================================================
000193E2                            
000193E2                            Obj3D_ShipDel:
000193E2 4EF9 0000 E142             		jmp	DeleteObject
000193E8                            ; ===========================================================================
000193E8                            
000193E8                            Obj3D_FaceMain:				; XREF: Obj3D_Index
000193E8 7000                       		moveq	#0,d0
000193EA 7201                       		moveq	#1,d1
000193EC 2268 0034                  		movea.l	$34(a0),a1
000193F0 1029 0025                  		move.b	$25(a1),d0
000193F4 5900                       		subq.b	#4,d0
000193F6 6600                       		bne.s	loc_17A3E
000193F8 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
000193FE 6600                       		bne.s	loc_17A46
00019400 7204                       		moveq	#4,d1
00019402                            
00019402                            loc_17A3E:
00019402 5D00                       		subq.b	#6,d0
00019404 6B00                       		bmi.s	loc_17A46
00019406 720A                       		moveq	#$A,d1
00019408 6000                       		bra.s	loc_17A5A
0001940A                            ; ===========================================================================
0001940A                            
0001940A                            loc_17A46:
0001940A 4A29 0020                  		tst.b	$20(a1)
0001940E 6600                       		bne.s	loc_17A50
00019410 7205                       		moveq	#5,d1
00019412 6000                       		bra.s	loc_17A5A
00019414                            ; ===========================================================================
00019414                            
00019414                            loc_17A50:
00019414 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001941A 6500                       		bcs.s	loc_17A5A
0001941C 7204                       		moveq	#4,d1
0001941E                            
0001941E                            loc_17A5A:
0001941E 1141 001C                  		move.b	d1,$1C(a0)
00019422 5500                       		subq.b	#2,d0
00019424 6600                       		bne.s	Obj3D_FaceDisp
00019426 117C 0006 001C             		move.b	#6,$1C(a0)
0001942C 4A28 0001                  		tst.b	1(a0)
00019430 6A00                       		bpl.s	Obj3D_FaceDel
00019432                            
00019432                            Obj3D_FaceDisp:
00019432 6000                       		bra.s	Obj3D_Display
00019434                            ; ===========================================================================
00019434                            
00019434                            Obj3D_FaceDel:
00019434 4EF9 0000 E142             		jmp	DeleteObject
0001943A                            ; ===========================================================================
0001943A                            
0001943A                            Obj3D_FlameMain:			; XREF: Obj3D_Index
0001943A 117C 0007 001C             		move.b	#7,$1C(a0)
00019440 2268 0034                  		movea.l	$34(a0),a1
00019444 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
0001944A 6600                       		bne.s	loc_17A96
0001944C 117C 000B 001C             		move.b	#$B,$1C(a0)
00019452 4A28 0001                  		tst.b	1(a0)
00019456 6A00                       		bpl.s	Obj3D_FlameDel
00019458 6000                       		bra.s	Obj3D_FlameDisp
0001945A                            ; ===========================================================================
0001945A                            
0001945A                            loc_17A96:
0001945A 3029 0010                  		move.w	$10(a1),d0
0001945E 6700                       		beq.s	Obj3D_FlameDisp
00019460 117C 0008 001C             		move.b	#8,$1C(a0)
00019466                            
00019466                            Obj3D_FlameDisp:
00019466 6000                       		bra.s	Obj3D_Display
00019468                            ; ===========================================================================
00019468                            
00019468                            Obj3D_FlameDel:
00019468 4EF9 0000 E142             		jmp	DeleteObject
0001946E                            ; ===========================================================================
0001946E                            
0001946E                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
0001946E 2268 0034                  		movea.l	$34(a0),a1
00019472 3169 0008 0008             		move.w	8(a1),8(a0)
00019478 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001947E 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019484 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001948A 4EB9 0000 B218             		jsr	AnimateSprite
00019490 1028 0022                  		move.b	$22(a0),d0
00019494 0200 0003                  		andi.b	#3,d0
00019498 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001949E 8128 0001                  		or.b	d0,1(a0)
000194A2 4EF9 0000 E106             		jmp	DisplaySprite
000194A8                            ; ===========================================================================
000194A8                            ; ---------------------------------------------------------------------------
000194A8                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
000194A8                            ; ---------------------------------------------------------------------------
000194A8                            
000194A8                            Obj48:					; XREF: Obj_Index
000194A8 7000                       		moveq	#0,d0
000194AA 1028 0024                  		move.b	$24(a0),d0
000194AE 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
000194B2 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
000194B6                            ; ===========================================================================
000194B6 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
000194B8 0000                       		dc.w Obj48_Base-Obj48_Index
000194BA 0000                       		dc.w Obj48_Display2-Obj48_Index
000194BC 0000                       		dc.w loc_17C68-Obj48_Index
000194BE 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
000194C0                            ; ===========================================================================
000194C0                            
000194C0                            Obj48_Main:				; XREF: Obj48_Index
000194C0 5428 0024                  		addq.b	#2,$24(a0)
000194C4 317C 4080 0026             		move.w	#$4080,$26(a0)
000194CA 317C FE00 003E             		move.w	#-$200,$3E(a0)
000194D0 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
000194D8 317C 046C 0002             		move.w	#$46C,2(a0)
000194DE 45E8 0028                  		lea	$28(a0),a2
000194E2 14FC 0000                  		move.b	#0,(a2)+
000194E6 7205                       		moveq	#5,d1
000194E8 2248                       		movea.l	a0,a1
000194EA 6000                       		bra.s	loc_17B60
000194EC                            ; ===========================================================================
000194EC                            
000194EC                            Obj48_MakeLinks:
000194EC 4EB9 0000 E5B2             		jsr	SingleObjLoad2
000194F2 6600                       		bne.s	Obj48_MakeBall
000194F4 3368 0008 0008             		move.w	8(a0),8(a1)
000194FA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019500 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00019504 137C 0006 0024             		move.b	#6,$24(a1)
0001950A 237C 0000 86F0 0004        		move.l	#Map_obj15,4(a1)
00019512 337C 0380 0002             		move.w	#$380,2(a1)
00019518 137C 0001 001A             		move.b	#1,$1A(a1)
0001951E 5228 0028                  		addq.b	#1,$28(a0)
00019522                            
00019522                            loc_17B60:				; XREF: Obj48_Main
00019522 3A09                       		move.w	a1,d5
00019524 0445 D000                  		subi.w	#$D000,d5
00019528 EC4D                       		lsr.w	#6,d5
0001952A 0245 007F                  		andi.w	#$7F,d5
0001952E 14C5                       		move.b	d5,(a2)+
00019530 137C 0004 0001             		move.b	#4,1(a1)
00019536 137C 0008 0019             		move.b	#8,$19(a1)
0001953C 137C 0006 0018             		move.b	#6,$18(a1)
00019542 2368 0034 0034             		move.l	$34(a0),$34(a1)
00019548 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
0001954C                            
0001954C                            Obj48_MakeBall:
0001954C 137C 0008 0024             		move.b	#8,$24(a1)
00019552 237C 0000 8C4E 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
0001955A 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00019560 137C 0001 001A             		move.b	#1,$1A(a1)
00019566 137C 0005 0018             		move.b	#5,$18(a1)
0001956C 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00019572 4E75                       		rts	
00019574                            ; ===========================================================================
00019574                            
00019574 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
0001957A                            
0001957A                            ; ===========================================================================
0001957A                            
0001957A                            Obj48_Base:				; XREF: Obj48_Index
0001957A 47F9 0001 9574             		lea	(Obj48_PosData).l,a3
00019580 45E8 0028                  		lea	$28(a0),a2
00019584 7C00                       		moveq	#0,d6
00019586 1C1A                       		move.b	(a2)+,d6
00019588                            
00019588                            loc_17BC6:
00019588 7800                       		moveq	#0,d4
0001958A 181A                       		move.b	(a2)+,d4
0001958C ED4C                       		lsl.w	#6,d4
0001958E 0684 00FF D000             		addi.l	#$FFD000,d4
00019594 2244                       		movea.l	d4,a1
00019596 101B                       		move.b	(a3)+,d0
00019598 B029 003C                  		cmp.b	$3C(a1),d0
0001959C 6700                       		beq.s	loc_17BE0
0001959E 5229 003C                  		addq.b	#1,$3C(a1)
000195A2                            
000195A2                            loc_17BE0:
000195A2 51CE FFE4                  		dbf	d6,loc_17BC6
000195A6                            
000195A6 B029 003C                  		cmp.b	$3C(a1),d0
000195AA 6600                       		bne.s	loc_17BFA
000195AC 2268 0034                  		movea.l	$34(a0),a1
000195B0 0C29 0006 0025             		cmpi.b	#6,$25(a1)
000195B6 6600                       		bne.s	loc_17BFA
000195B8 5428 0024                  		addq.b	#2,$24(a0)
000195BC                            
000195BC                            loc_17BFA:
000195BC 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
000195C2 6700                       		beq.s	Obj48_Display
000195C4 5268 0032                  		addq.w	#1,$32(a0)
000195C8                            
000195C8                            Obj48_Display:
000195C8 6100 0000                  		bsr.w	sub_17C2A
000195CC 1028 0026                  		move.b	$26(a0),d0
000195D0 4EB9 0000 8662             		jsr	(Obj15_Move2).l
000195D6 4EF9 0000 E106             		jmp	DisplaySprite
000195DC                            ; ===========================================================================
000195DC                            
000195DC                            Obj48_Display2:				; XREF: Obj48_Index
000195DC 6100 0000                  		bsr.w	sub_17C2A
000195E0 4EB9 0000 8622             		jsr	(Obj48_Move).l
000195E6 4EF9 0000 E106             		jmp	DisplaySprite
000195EC                            
000195EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000195EC                            
000195EC                            
000195EC                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
000195EC 2268 0034                  		movea.l	$34(a0),a1
000195F0 0628 0020 001B             		addi.b	#$20,$1B(a0)
000195F6 6400                       		bcc.s	loc_17C3C
000195F8 0868 0000 001A             		bchg	#0,$1A(a0)
000195FE                            
000195FE                            loc_17C3C:
000195FE 3169 0008 003A             		move.w	8(a1),$3A(a0)
00019604 3029 000C                  		move.w	$C(a1),d0
00019608 D068 0032                  		add.w	$32(a0),d0
0001960C 3140 0038                  		move.w	d0,$38(a0)
00019610 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019616 4A29 0022                  		tst.b	$22(a1)
0001961A 6A00                       		bpl.s	locret_17C66
0001961C 10BC 003F                  		move.b	#$3F,0(a0)
00019620 117C 0000 0024             		move.b	#0,$24(a0)
00019626                            
00019626                            locret_17C66:
00019626 4E75                       		rts	
00019628                            ; End of function sub_17C2A
00019628                            
00019628                            ; ===========================================================================
00019628                            
00019628                            loc_17C68:				; XREF: Obj48_Index
00019628 2268 0034                  		movea.l	$34(a0),a1
0001962C 4A29 0022                  		tst.b	$22(a1)
00019630 6A00                       		bpl.s	Obj48_Display3
00019632 10BC 003F                  		move.b	#$3F,0(a0)
00019636 117C 0000 0024             		move.b	#0,$24(a0)
0001963C                            
0001963C                            Obj48_Display3:
0001963C 4EF9 0000 E106             		jmp	DisplaySprite
00019642                            ; ===========================================================================
00019642                            
00019642                            Obj48_ChkVanish:			; XREF: Obj48_Index
00019642 7000                       		moveq	#0,d0
00019644 4A28 001A                  		tst.b	$1A(a0)
00019648 6600                       		bne.s	Obj48_Vanish
0001964A 5200                       		addq.b	#1,d0
0001964C                            
0001964C                            Obj48_Vanish:
0001964C 1140 001A                  		move.b	d0,$1A(a0)
00019650 2268 0034                  		movea.l	$34(a0),a1
00019654 4A29 0022                  		tst.b	$22(a1)
00019658 6A00                       		bpl.s	Obj48_Display4
0001965A 117C 0000 0020             		move.b	#0,$20(a0)
00019660 6100 FBC6                  		bsr.w	BossDefeated
00019664 5328 003C                  		subq.b	#1,$3C(a0)
00019668 6A00                       		bpl.s	Obj48_Display4
0001966A 10BC 003F                  		move.b	#$3F,(a0)
0001966E 117C 0000 0024             		move.b	#0,$24(a0)
00019674                            
00019674                            Obj48_Display4:
00019674 4EF9 0000 E106             		jmp	DisplaySprite
0001967A                            ; ===========================================================================
0001967A                            Ani_Eggman:
0001967A                            	include "_anim\Eggman.asm"
0001967A                            ; ---------------------------------------------------------------------------
0001967A                            ; Animation script - Eggman (bosses)
0001967A                            ; ---------------------------------------------------------------------------
0001967A 0000                       		dc.w byte_17CD4-Ani_Eggman
0001967C 0000                       		dc.w byte_17CD8-Ani_Eggman
0001967E 0000                       		dc.w byte_17CDC-Ani_Eggman
00019680 0000                       		dc.w byte_17CE0-Ani_Eggman
00019682 0000                       		dc.w byte_17CE4-Ani_Eggman
00019684 0000                       		dc.w byte_17CE8-Ani_Eggman
00019686 0000                       		dc.w byte_17CEC-Ani_Eggman
00019688 0000                       		dc.w byte_17CF0-Ani_Eggman
0001968A 0000                       		dc.w byte_17CF4-Ani_Eggman
0001968C 0000                       		dc.w byte_17CF8-Ani_Eggman
0001968E 0000                       		dc.w byte_17CFC-Ani_Eggman
00019690 0000                       		dc.w byte_17D00-Ani_Eggman
00019692 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00019696 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
0001969A 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
0001969E 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
000196A2 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
000196A6 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
000196AA 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
000196AE 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
000196B2 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
000196B6 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
000196BA 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
000196BE 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
000196CA                            		even
000196CA                            		even
000196CA                            
000196CA                            ; ---------------------------------------------------------------------------
000196CA                            ; Sprite mappings - Eggman (boss levels)
000196CA                            ; ---------------------------------------------------------------------------
000196CA                            Map_Eggman:
000196CA                            	include "_maps\Eggman.asm"
000196CA                            ; ---------------------------------------------------------------------------
000196CA                            ; Sprite mappings - Eggman (boss levels)
000196CA                            ; ---------------------------------------------------------------------------
000196CA 0000 0000                  		dc.w byte_17D26-Map_Eggman, byte_17D45-Map_Eggman
000196CE 0000 0000                  		dc.w byte_17D50-Map_Eggman, byte_17D5B-Map_Eggman
000196D2 0000 0000                  		dc.w byte_17D6B-Map_Eggman, byte_17D7B-Map_Eggman
000196D6 0000 0000                  		dc.w byte_17D8B-Map_Eggman, byte_17D9B-Map_Eggman
000196DA 0000 0000                  		dc.w byte_17DB0-Map_Eggman, byte_17DB6-Map_Eggman
000196DE 0000 0000                  		dc.w byte_17DBC-Map_Eggman, byte_17DBD-Map_Eggman
000196E2 0000                       		dc.w byte_17DC8-Map_Eggman
000196E4 06                         byte_17D26:	dc.b 6
000196E5 EC01 000A E4               		dc.b $EC, 1, 0,	$A, $E4
000196EA EC05 000C 0C               		dc.b $EC, 5, 0,	$C, $C
000196EF FC0E 2010 E4               		dc.b $FC, $E, $20, $10,	$E4
000196F4 FC0E 201C 04               		dc.b $FC, $E, $20, $1C,	4
000196F9 140C 2028 EC               		dc.b $14, $C, $20, $28,	$EC
000196FE 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C
00019703 02                         byte_17D45:	dc.b 2
00019704 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019709 EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC
0001970E 02                         byte_17D50:	dc.b 2
0001970F E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019714 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00019719 03                         byte_17D5B:	dc.b 3
0001971A E408 003D F4               		dc.b $E4, 8, 0,	$3D, $F4
0001971F EC09 0040 EC               		dc.b $EC, 9, 0,	$40, $EC
00019724 EC05 0046 04               		dc.b $EC, 5, 0,	$46, 4
00019729 03                         byte_17D6B:	dc.b 3
0001972A E408 004A F4               		dc.b $E4, 8, 0,	$4A, $F4
0001972F EC09 004D EC               		dc.b $EC, 9, 0,	$4D, $EC
00019734 EC05 0053 04               		dc.b $EC, 5, 0,	$53, 4
00019739 03                         byte_17D7B:	dc.b 3
0001973A E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
0001973F EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00019744 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00019749 03                         byte_17D8B:	dc.b 3
0001974A E404 0064 04               		dc.b $E4, 4, 0,	$64, 4
0001974F E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00019754 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00019759 04                         byte_17D9B:	dc.b 4
0001975A E409 0066 F4               		dc.b $E4, 9, 0,	$66, $F4
0001975F E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00019764 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00019769 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
0001976E 01                         byte_17DB0:	dc.b 1
0001976F 0405 002D 22               		dc.b 4,	5, 0, $2D, $22
00019774 01                         byte_17DB6:	dc.b 1
00019775 0405 0031 22               		dc.b 4,	5, 0, $31, $22
0001977A 00                         byte_17DBC:	dc.b 0
0001977B 02                         byte_17DBD:	dc.b 2
0001977C 0008 012A 22               		dc.b 0,	8, 1, $2A, $22
00019781 0808 112A 22               		dc.b 8,	8, $11,	$2A, $22
00019786 02                         byte_17DC8:	dc.b 2
00019787 F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22
0001978C 0001 0139 3A               		dc.b 0,	1, 1, $39, $3A
00019792 00                         		even
00019792 00                         		even
00019792                            
00019792                            ; ---------------------------------------------------------------------------
00019792                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00019792                            ; ---------------------------------------------------------------------------
00019792                            Map_BossItems:
00019792                            	include "_maps\Boss items.asm"
00019792                            ; ---------------------------------------------------------------------------
00019792                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00019792                            ; ---------------------------------------------------------------------------
00019792 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00019796 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
0001979A 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
0001979E 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
000197A2 01                         byte_17DE4:	dc.b 1
000197A3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000197A8 02                         byte_17DEA:	dc.b 2
000197A9 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
000197AE F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000197B3 00                         		dc.b 0
000197B4 01                         byte_17DF6:	dc.b 1
000197B5 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
000197BA 01                         byte_17DFC:	dc.b 1
000197BB 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
000197C0 01                         byte_17E02:	dc.b 1
000197C1 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
000197C6 04                         byte_17E08:	dc.b 4
000197C7 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
000197CC F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
000197D1 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
000197D6 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
000197DB 00                         		dc.b 0
000197DC 02                         byte_17E1E:	dc.b 2
000197DD 0005 0017 00               		dc.b 0,	5, 0, $17, 0
000197E2 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
000197E7 00                         		dc.b 0
000197E8 02                         byte_17E2A:	dc.b 2
000197E9 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
000197EE 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
000197F4 00                         		even
000197F4 00                         		even
000197F4                            
000197F4                            ; ===========================================================================
000197F4                            ; ---------------------------------------------------------------------------
000197F4                            ; Object 77 - Eggman (LZ)
000197F4                            ; ---------------------------------------------------------------------------
000197F4                            
000197F4                            Obj77:					; XREF: Obj_Index
000197F4 7000                       		moveq	#0,d0
000197F6 1028 0024                  		move.b	$24(a0),d0
000197FA 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
000197FE 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
00019802                            ; ===========================================================================
00019802 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
00019804 0000                       		dc.w Obj77_ShipMain-Obj77_Index
00019806 0000                       		dc.w Obj77_FaceMain-Obj77_Index
00019808 0000                       		dc.w Obj77_FlameMain-Obj77_Index
0001980A                            
0001980A 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
0001980C 0401                       		dc.b 4,	1
0001980E 0607                       		dc.b 6,	7
00019810                            ; ===========================================================================
00019810                            
00019810                            Obj77_Main:				; XREF: Obj77_Index
00019810 317C 1E10 0008             		move.w	#$1E10,8(a0)
00019816 317C 05C0 000C             		move.w	#$5C0,$C(a0)
0001981C 3168 0008 0030             		move.w	8(a0),$30(a0)
00019822 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019828 117C 000F 0020             		move.b	#$F,$20(a0)
0001982E 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019834 117C 0004 0018             		move.b	#4,$18(a0)
0001983A 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
0001983E 2248                       		movea.l	a0,a1
00019840 7202                       		moveq	#2,d1
00019842 6000                       		bra.s	Obj77_LoadBoss
00019844                            ; ===========================================================================
00019844                            
00019844                            Obj77_Loop:
00019844 4EB9 0000 E5B2             		jsr	SingleObjLoad2
0001984A 6600                       		bne.s	Obj77_ShipMain
0001984C 12BC 0077                  		move.b	#$77,0(a1)
00019850 3368 0008 0008             		move.w	8(a0),8(a1)
00019856 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001985C                            
0001985C                            Obj77_LoadBoss:				; XREF: Obj77_Main
0001985C 08A8 0000 0022             		bclr	#0,$22(a0)
00019862 4229 0025                  		clr.b	$25(a1)
00019866 135A 0024                  		move.b	(a2)+,$24(a1)
0001986A 135A 001C                  		move.b	(a2)+,$1C(a1)
0001986E 1368 0018 0018             		move.b	$18(a0),$18(a1)
00019874 237C 0001 96CA 0004        		move.l	#Map_Eggman,4(a1)
0001987C 337C 0400 0002             		move.w	#$400,2(a1)
00019882 137C 0004 0001             		move.b	#4,1(a1)
00019888 137C 0020 0019             		move.b	#$20,$19(a1)
0001988E 2348 0034                  		move.l	a0,$34(a1)
00019892 51C9 FFB0                  		dbf	d1,Obj77_Loop
00019896                            
00019896                            Obj77_ShipMain:
00019896 43F8 D000                  		lea	($FFFFD000).w,a1
0001989A 7000                       		moveq	#0,d0
0001989C 1028 0025                  		move.b	$25(a0),d0
000198A0 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
000198A4 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
000198A8 43F9 0001 967A             		lea	(Ani_Eggman).l,a1
000198AE 4EB9 0000 B218             		jsr	AnimateSprite
000198B4 7003                       		moveq	#3,d0
000198B6 C028 0022                  		and.b	$22(a0),d0
000198BA 0228 00FC 0001             		andi.b	#$FC,1(a0)
000198C0 8128 0001                  		or.b	d0,1(a0)
000198C4 4EF9 0000 E106             		jmp	DisplaySprite
000198CA                            ; ===========================================================================
000198CA 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
000198CE 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
000198D2 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
000198D6 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
000198DA                            ; ===========================================================================
000198DA                            
000198DA                            loc_17F1E:				; XREF: Obj77_ShipIndex
000198DA 3029 0008                  		move.w	8(a1),d0
000198DE 0C40 1DA0                  		cmpi.w	#$1DA0,d0
000198E2 6500                       		bcs.s	loc_17F38
000198E4 317C FE80 0012             		move.w	#-$180,$12(a0)
000198EA 317C 0060 0010             		move.w	#$60,$10(a0)
000198F0 5428 0025                  		addq.b	#2,$25(a0)
000198F4                            
000198F4                            loc_17F38:
000198F4 6100 F974                  		bsr.w	BossMove
000198F8 3168 0038 000C             		move.w	$38(a0),$C(a0)
000198FE 3168 0030 0008             		move.w	$30(a0),8(a0)
00019904                            
00019904                            loc_17F48:
00019904 4A28 003D                  		tst.b	$3D(a0)
00019908 6600                       		bne.s	loc_17F8E
0001990A 4A28 0022                  		tst.b	$22(a0)
0001990E 6B00                       		bmi.s	loc_17F92
00019910 4A28 0020                  		tst.b	$20(a0)
00019914 6600                       		bne.s	locret_17F8C
00019916 4A28 003E                  		tst.b	$3E(a0)
0001991A 6600                       		bne.s	loc_17F70
0001991C 117C 0020 003E             		move.b	#$20,$3E(a0)
00019922 303C 00AC                  		move.w	#$AC,d0
00019926 4EB9 0000 1476             		jsr	(PlaySound_Special).l
0001992C                            
0001992C                            loc_17F70:
0001992C 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019930 7000                       		moveq	#0,d0
00019932 4A51                       		tst.w	(a1)
00019934 6600                       		bne.s	loc_17F7E
00019936 303C 0EEE                  		move.w	#$EEE,d0
0001993A                            
0001993A                            loc_17F7E:
0001993A 3280                       		move.w	d0,(a1)
0001993C 5328 003E                  		subq.b	#1,$3E(a0)
00019940 6600                       		bne.s	locret_17F8C
00019942 117C 000F 0020             		move.b	#$F,$20(a0)
00019948                            
00019948                            locret_17F8C:
00019948 4E75                       		rts	
0001994A                            ; ===========================================================================
0001994A                            
0001994A                            loc_17F8E:				; XREF: loc_17F48
0001994A 6000 F8DC                  		bra.w	BossDefeated
0001994E                            ; ===========================================================================
0001994E                            
0001994E                            loc_17F92:				; XREF: loc_17F48
0001994E 7064                       		moveq	#100,d0
00019950 6100 0000                  		bsr.w	AddPoints
00019954 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001995A 4E75                       		rts	
0001995C                            ; ===========================================================================
0001995C                            
0001995C                            loc_17FA0:				; XREF: Obj77_ShipIndex
0001995C 70FE                       		moveq	#-2,d0
0001995E 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
00019964 6500                       		bcs.s	loc_17FB6
00019966 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001996C 4268 0010                  		clr.w	$10(a0)
00019970 5240                       		addq.w	#1,d0
00019972                            
00019972                            loc_17FB6:
00019972 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
00019978 6E00                       		bgt.s	loc_17FCA
0001997A 317C 0500 0038             		move.w	#$500,$38(a0)
00019980 4268 0012                  		clr.w	$12(a0)
00019984 5240                       		addq.w	#1,d0
00019986                            
00019986                            loc_17FCA:
00019986 6600                       		bne.s	loc_17FDC
00019988 317C 0140 0010             		move.w	#$140,$10(a0)
0001998E 317C FE00 0012             		move.w	#-$200,$12(a0)
00019994 5428 0025                  		addq.b	#2,$25(a0)
00019998                            
00019998                            loc_17FDC:
00019998 6000 FF5A                  		bra.w	loc_17F38
0001999C                            ; ===========================================================================
0001999C                            
0001999C                            loc_17FE0:				; XREF: Obj77_ShipIndex
0001999C 70FE                       		moveq	#-2,d0
0001999E 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
000199A4 6500                       		bcs.s	loc_17FF6
000199A6 317C 1E70 0030             		move.w	#$1E70,$30(a0)
000199AC 4268 0010                  		clr.w	$10(a0)
000199B0 5240                       		addq.w	#1,d0
000199B2                            
000199B2                            loc_17FF6:
000199B2 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
000199B8 6E00                       		bgt.s	loc_1800A
000199BA 317C 04C0 0038             		move.w	#$4C0,$38(a0)
000199C0 4268 0012                  		clr.w	$12(a0)
000199C4 5240                       		addq.w	#1,d0
000199C6                            
000199C6                            loc_1800A:
000199C6 6600                       		bne.s	loc_1801A
000199C8 317C FE80 0012             		move.w	#-$180,$12(a0)
000199CE 5428 0025                  		addq.b	#2,$25(a0)
000199D2 4228 003F                  		clr.b	$3F(a0)
000199D6                            
000199D6                            loc_1801A:
000199D6 6000 FF1C                  		bra.w	loc_17F38
000199DA                            ; ===========================================================================
000199DA                            
000199DA                            loc_1801E:				; XREF: Obj77_ShipIndex
000199DA 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
000199E0 6E00                       		bgt.s	loc_1804E
000199E2 317C 0100 0038             		move.w	#$100,$38(a0)
000199E8 317C 0140 0010             		move.w	#$140,$10(a0)
000199EE 317C FF80 0012             		move.w	#-$80,$12(a0)
000199F4 4A28 003D                  		tst.b	$3D(a0)
000199F8 6700                       		beq.s	loc_18046
000199FA E1E8 0010                  		asl	$10(a0)
000199FE E1E8 0012                  		asl	$12(a0)
00019A02                            
00019A02                            loc_18046:
00019A02 5428 0025                  		addq.b	#2,$25(a0)
00019A06 6000 FEEC                  		bra.w	loc_17F38
00019A0A                            ; ===========================================================================
00019A0A                            
00019A0A                            loc_1804E:
00019A0A 08E8 0000 0022             		bset	#0,$22(a0)
00019A10 5428 003F                  		addq.b	#2,$3F(a0)
00019A14 1028 003F                  		move.b	$3F(a0),d0
00019A18 4EB9 0000 33D4             		jsr	(CalcSine).l
00019A1E 4A41                       		tst.w	d1
00019A20 6A00                       		bpl.s	loc_1806C
00019A22 08A8 0000 0022             		bclr	#0,$22(a0)
00019A28                            
00019A28                            loc_1806C:
00019A28 E840                       		asr.w	#4,d0
00019A2A 4840                       		swap	d0
00019A2C 4240                       		clr.w	d0
00019A2E D0A8 0030                  		add.l	$30(a0),d0
00019A32 4840                       		swap	d0
00019A34 3140 0008                  		move.w	d0,8(a0)
00019A38 3028 0012                  		move.w	$12(a0),d0
00019A3C 3238 D00C                  		move.w	($FFFFD00C).w,d1
00019A40 9268 000C                  		sub.w	$C(a0),d1
00019A44 6500                       		bcs.s	loc_180A2
00019A46 0441 0048                  		subi.w	#$48,d1
00019A4A 6500                       		bcs.s	loc_180A2
00019A4C E240                       		asr.w	#1,d0
00019A4E 0441 0028                  		subi.w	#$28,d1
00019A52 6500                       		bcs.s	loc_180A2
00019A54 E240                       		asr.w	#1,d0
00019A56 0441 0028                  		subi.w	#$28,d1
00019A5A 6500                       		bcs.s	loc_180A2
00019A5C 7000                       		moveq	#0,d0
00019A5E                            
00019A5E                            loc_180A2:
00019A5E 48C0                       		ext.l	d0
00019A60 E180                       		asl.l	#8,d0
00019A62 4A28 003D                  		tst.b	$3D(a0)
00019A66 6700                       		beq.s	loc_180AE
00019A68 D080                       		add.l	d0,d0
00019A6A                            
00019A6A                            loc_180AE:
00019A6A D1A8 0038                  		add.l	d0,$38(a0)
00019A6E 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019A74 6000 FE8E                  		bra.w	loc_17F48
00019A78                            ; ===========================================================================
00019A78                            
00019A78                            loc_180BC:				; XREF: Obj77_ShipIndex
00019A78 70FE                       		moveq	#-2,d0
00019A7A 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
00019A80 6500                       		bcs.s	loc_180D2
00019A82 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
00019A88 4268 0010                  		clr.w	$10(a0)
00019A8C 5240                       		addq.w	#1,d0
00019A8E                            
00019A8E                            loc_180D2:
00019A8E 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
00019A94 6E00                       		bgt.s	loc_180E6
00019A96 317C 00C0 0038             		move.w	#$C0,$38(a0)
00019A9C 4268 0012                  		clr.w	$12(a0)
00019AA0 5240                       		addq.w	#1,d0
00019AA2                            
00019AA2                            loc_180E6:
00019AA2 6600                       		bne.s	loc_180F2
00019AA4 5428 0025                  		addq.b	#2,$25(a0)
00019AA8 08A8 0000 0022             		bclr	#0,$22(a0)
00019AAE                            
00019AAE                            loc_180F2:
00019AAE 6000 FE44                  		bra.w	loc_17F38
00019AB2                            ; ===========================================================================
00019AB2                            
00019AB2                            loc_180F6:				; XREF: Obj77_ShipIndex
00019AB2 4A28 003D                  		tst.b	$3D(a0)
00019AB6 6600                       		bne.s	loc_18112
00019AB8 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
00019ABE 6D00                       		blt.s	loc_18126
00019AC0 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
00019AC6 6E00                       		bgt.s	loc_18126
00019AC8 117C 0032 003C             		move.b	#$32,$3C(a0)
00019ACE                            
00019ACE                            loc_18112:
00019ACE 303C 0082                  		move.w	#$82,d0
00019AD2 4EB9 0000 1470             		jsr	(PlaySound).l	; play LZ music
00019AD8 08E8 0000 0022             		bset	#0,$22(a0)
00019ADE 5428 0025                  		addq.b	#2,$25(a0)
00019AE2                            
00019AE2                            loc_18126:
00019AE2 6000 FE10                  		bra.w	loc_17F38
00019AE6                            ; ===========================================================================
00019AE6                            
00019AE6                            loc_1812A:				; XREF: Obj77_ShipIndex
00019AE6 4A28 003D                  		tst.b	$3D(a0)
00019AEA 6600                       		bne.s	loc_18136
00019AEC 5328 003C                  		subq.b	#1,$3C(a0)
00019AF0 6600                       		bne.s	loc_1814E
00019AF2                            
00019AF2                            loc_18136:
00019AF2 4228 003C                  		clr.b	$3C(a0)
00019AF6 317C 0400 0010             		move.w	#$400,$10(a0)
00019AFC 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019B02 4228 003D                  		clr.b	$3D(a0)
00019B06 5428 0025                  		addq.b	#2,$25(a0)
00019B0A                            
00019B0A                            loc_1814E:
00019B0A 6000 FDE8                  		bra.w	loc_17F38
00019B0E                            ; ===========================================================================
00019B0E                            
00019B0E                            loc_18152:				; XREF: Obj77_ShipIndex
00019B0E 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
00019B14 6400                       		bcc.s	loc_18160
00019B16 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019B1A 6000                       		bra.s	loc_18166
00019B1C                            ; ===========================================================================
00019B1C                            
00019B1C                            loc_18160:
00019B1C 4A28 0001                  		tst.b	1(a0)
00019B20 6A00                       		bpl.s	Obj77_ShipDel
00019B22                            
00019B22                            loc_18166:
00019B22 6000 FDD0                  		bra.w	loc_17F38
00019B26                            ; ===========================================================================
00019B26                            
00019B26                            Obj77_ShipDel:
00019B26 4EF9 0000 E142             		jmp	DeleteObject
00019B2C                            ; ===========================================================================
00019B2C                            
00019B2C                            Obj77_FaceMain:				; XREF: Obj77_Index
00019B2C 2268 0034                  		movea.l	$34(a0),a1
00019B30 1011                       		move.b	(a1),d0
00019B32 B010                       		cmp.b	(a0),d0
00019B34 6600                       		bne.s	Obj77_FaceDel
00019B36 7000                       		moveq	#0,d0
00019B38 1029 0025                  		move.b	$25(a1),d0
00019B3C 7201                       		moveq	#1,d1
00019B3E 4A28 003D                  		tst.b	$3D(a0)
00019B42 6700                       		beq.s	loc_1818C
00019B44 720A                       		moveq	#$A,d1
00019B46 6000                       		bra.s	loc_181A0
00019B48                            ; ===========================================================================
00019B48                            
00019B48                            loc_1818C:
00019B48 4A29 0020                  		tst.b	$20(a1)
00019B4C 6600                       		bne.s	loc_18196
00019B4E 7205                       		moveq	#5,d1
00019B50 6000                       		bra.s	loc_181A0
00019B52                            ; ===========================================================================
00019B52                            
00019B52                            loc_18196:
00019B52 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019B58 6500                       		bcs.s	loc_181A0
00019B5A 7204                       		moveq	#4,d1
00019B5C                            
00019B5C                            loc_181A0:
00019B5C 1141 001C                  		move.b	d1,$1C(a0)
00019B60 0C00 000E                  		cmpi.b	#$E,d0
00019B64 6600                       		bne.s	loc_181B6
00019B66 117C 0006 001C             		move.b	#6,$1C(a0)
00019B6C 4A28 0001                  		tst.b	1(a0)
00019B70 6A00                       		bpl.s	Obj77_FaceDel
00019B72                            
00019B72                            loc_181B6:
00019B72 6000                       		bra.s	Obj77_Display
00019B74                            ; ===========================================================================
00019B74                            
00019B74                            Obj77_FaceDel:
00019B74 4EF9 0000 E142             		jmp	DeleteObject
00019B7A                            ; ===========================================================================
00019B7A                            
00019B7A                            Obj77_FlameMain:			; XREF: Obj77_Index
00019B7A 117C 0007 001C             		move.b	#7,$1C(a0)
00019B80 2268 0034                  		movea.l	$34(a0),a1
00019B84 1011                       		move.b	(a1),d0
00019B86 B010                       		cmp.b	(a0),d0
00019B88 6600                       		bne.s	Obj77_FlameDel
00019B8A 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
00019B90 6600                       		bne.s	loc_181F0
00019B92 117C 000B 001C             		move.b	#$B,$1C(a0)
00019B98 4A28 0001                  		tst.b	1(a0)
00019B9C 6A00                       		bpl.s	Obj77_FlameDel
00019B9E 6000                       		bra.s	loc_181F0
00019BA0                            ; ===========================================================================
00019BA0 4A69 0010                  		tst.w	$10(a1)
00019BA4 6700                       		beq.s	loc_181F0
00019BA6 117C 0008 001C             		move.b	#8,$1C(a0)
00019BAC                            
00019BAC                            loc_181F0:
00019BAC 6000                       		bra.s	Obj77_Display
00019BAE                            ; ===========================================================================
00019BAE                            
00019BAE                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
00019BAE 4EF9 0000 E142             		jmp	DeleteObject
00019BB4                            ; ===========================================================================
00019BB4                            
00019BB4                            Obj77_Display:
00019BB4 43F9 0001 967A             		lea	(Ani_Eggman).l,a1
00019BBA 4EB9 0000 B218             		jsr	AnimateSprite
00019BC0 2268 0034                  		movea.l	$34(a0),a1
00019BC4 3169 0008 0008             		move.w	8(a1),8(a0)
00019BCA 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019BD0 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019BD6 7003                       		moveq	#3,d0
00019BD8 C028 0022                  		and.b	$22(a0),d0
00019BDC 0228 00FC 0001             		andi.b	#-4,1(a0)
00019BE2 8128 0001                  		or.b	d0,1(a0)
00019BE6 4EF9 0000 E106             		jmp	DisplaySprite
00019BEC                            ; ===========================================================================
00019BEC                            ; ---------------------------------------------------------------------------
00019BEC                            ; Object 73 - Eggman (MZ)
00019BEC                            ; ---------------------------------------------------------------------------
00019BEC                            
00019BEC                            Obj73:					; XREF: Obj_Index
00019BEC 7000                       		moveq	#0,d0
00019BEE 1028 0024                  		move.b	$24(a0),d0
00019BF2 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00019BF6 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00019BFA                            ; ===========================================================================
00019BFA 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00019BFC 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00019BFE 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00019C00 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00019C02 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00019C04                            
00019C04 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00019C07 0401 04                    		dc.b 4,	1, 4
00019C0A 0607 04                    		dc.b 6,	7, 4
00019C0D 0800 03                    		dc.b 8,	0, 3
00019C10                            ; ===========================================================================
00019C10                            
00019C10                            Obj73_Main:				; XREF: Obj73_Index
00019C10 3168 0008 0030             		move.w	8(a0),$30(a0)
00019C16 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019C1C 117C 000F 0020             		move.b	#$F,$20(a0)
00019C22 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019C28 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00019C2C 2248                       		movea.l	a0,a1
00019C2E 7203                       		moveq	#3,d1
00019C30 6000                       		bra.s	Obj73_LoadBoss
00019C32                            ; ===========================================================================
00019C32                            
00019C32                            Obj73_Loop:
00019C32 4EB9 0000 E5B2             		jsr	SingleObjLoad2
00019C38 6600                       		bne.s	Obj73_ShipMain
00019C3A 12BC 0073                  		move.b	#$73,0(a1)
00019C3E 3368 0008 0008             		move.w	8(a0),8(a1)
00019C44 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019C4A                            
00019C4A                            Obj73_LoadBoss:				; XREF: Obj73_Main
00019C4A 08A8 0000 0022             		bclr	#0,$22(a0)
00019C50 4229 0025                  		clr.b	$25(a1)
00019C54 135A 0024                  		move.b	(a2)+,$24(a1)
00019C58 135A 001C                  		move.b	(a2)+,$1C(a1)
00019C5C 135A 0018                  		move.b	(a2)+,$18(a1)
00019C60 237C 0001 96CA 0004        		move.l	#Map_Eggman,4(a1)
00019C68 337C 0400 0002             		move.w	#$400,2(a1)
00019C6E 137C 0004 0001             		move.b	#4,1(a1)
00019C74 137C 0020 0019             		move.b	#$20,$19(a1)
00019C7A 2348 0034                  		move.l	a0,$34(a1)
00019C7E 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00019C82                            
00019C82                            Obj73_ShipMain:
00019C82 7000                       		moveq	#0,d0
00019C84 1028 0025                  		move.b	$25(a0),d0
00019C88 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
00019C8C 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00019C90 43F9 0001 967A             		lea	(Ani_Eggman).l,a1
00019C96 4EB9 0000 B218             		jsr	AnimateSprite
00019C9C 7003                       		moveq	#3,d0
00019C9E C028 0022                  		and.b	$22(a0),d0
00019CA2 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019CA8 8128 0001                  		or.b	d0,1(a0)
00019CAC 4EF9 0000 E106             		jmp	DisplaySprite
00019CB2                            ; ===========================================================================
00019CB2 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00019CB4 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00019CB6 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00019CB8 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00019CBA 0000                       		dc.w loc_18582-Obj73_ShipIndex
00019CBC                            ; ===========================================================================
00019CBC                            
00019CBC                            loc_18302:				; XREF: Obj73_ShipIndex
00019CBC 1028 003F                  		move.b	$3F(a0),d0
00019CC0 5428 003F                  		addq.b	#2,$3F(a0)
00019CC4 4EB9 0000 33D4             		jsr	(CalcSine).l
00019CCA E440                       		asr.w	#2,d0
00019CCC 3140 0012                  		move.w	d0,$12(a0)
00019CD0 317C FF00 0010             		move.w	#-$100,$10(a0)
00019CD6 6100 F592                  		bsr.w	BossMove
00019CDA 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00019CE0 6600                       		bne.s	loc_18334
00019CE2 5428 0025                  		addq.b	#2,$25(a0)
00019CE6 4228 0028                  		clr.b	$28(a0)
00019CEA 42A8 0010                  		clr.l	$10(a0)
00019CEE                            
00019CEE                            loc_18334:
00019CEE 4EB9 0000 33AE             		jsr	(RandomNumber).l
00019CF4 1140 0034                  		move.b	d0,$34(a0)
00019CF8                            
00019CF8                            loc_1833E:
00019CF8 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019CFE 3168 0030 0008             		move.w	$30(a0),8(a0)
00019D04 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00019D0A 6400                       		bcc.s	locret_18390
00019D0C 4A28 0022                  		tst.b	$22(a0)
00019D10 6B00                       		bmi.s	loc_18392
00019D12 4A28 0020                  		tst.b	$20(a0)
00019D16 6600                       		bne.s	locret_18390
00019D18 4A28 003E                  		tst.b	$3E(a0)
00019D1C 6600                       		bne.s	loc_18374
00019D1E 117C 0028 003E             		move.b	#$28,$3E(a0)
00019D24 303C 00AC                  		move.w	#$AC,d0
00019D28 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019D2E                            
00019D2E                            loc_18374:
00019D2E 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019D32 7000                       		moveq	#0,d0
00019D34 4A51                       		tst.w	(a1)
00019D36 6600                       		bne.s	loc_18382
00019D38 303C 0EEE                  		move.w	#$EEE,d0
00019D3C                            
00019D3C                            loc_18382:
00019D3C 3280                       		move.w	d0,(a1)
00019D3E 5328 003E                  		subq.b	#1,$3E(a0)
00019D42 6600                       		bne.s	locret_18390
00019D44 117C 000F 0020             		move.b	#$F,$20(a0)
00019D4A                            
00019D4A                            locret_18390:
00019D4A 4E75                       		rts	
00019D4C                            ; ===========================================================================
00019D4C                            
00019D4C                            loc_18392:				; XREF: loc_1833E
00019D4C 7064                       		moveq	#100,d0
00019D4E 6100 0000                  		bsr.w	AddPoints
00019D52 117C 0004 0025             		move.b	#4,$25(a0)
00019D58 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019D5E 4268 0010                  		clr.w	$10(a0)
00019D62 4E75                       		rts	
00019D64                            ; ===========================================================================
00019D64                            
00019D64                            loc_183AA:				; XREF: Obj73_ShipIndex
00019D64 7000                       		moveq	#0,d0
00019D66 1028 0028                  		move.b	$28(a0),d0
00019D6A 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00019D6E 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00019D72 0228 0006 0028             		andi.b	#6,$28(a0)
00019D78 6000 FF7E                  		bra.w	loc_1833E
00019D7C                            ; ===========================================================================
00019D7C 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00019D7E 0000                       		dc.w Obj73_MakeLava2-off_183C2
00019D80 0000                       		dc.w loc_183CA-off_183C2
00019D82 0000                       		dc.w Obj73_MakeLava2-off_183C2
00019D84                            ; ===========================================================================
00019D84                            
00019D84                            loc_183CA:				; XREF: off_183C2
00019D84 4A68 0010                  		tst.w	$10(a0)
00019D88 6600                       		bne.s	loc_183FE
00019D8A 7040                       		moveq	#$40,d0
00019D8C 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00019D92 6700                       		beq.s	loc_183E6
00019D94 6500                       		bcs.s	loc_183DE
00019D96 4440                       		neg.w	d0
00019D98                            
00019D98                            loc_183DE:
00019D98 3140 0012                  		move.w	d0,$12(a0)
00019D9C 6000 F4CC                  		bra.w	BossMove
00019DA0                            ; ===========================================================================
00019DA0                            
00019DA0                            loc_183E6:
00019DA0 317C 0200 0010             		move.w	#$200,$10(a0)
00019DA6 317C 0100 0012             		move.w	#$100,$12(a0)
00019DAC 0828 0000 0022             		btst	#0,$22(a0)
00019DB2 6600                       		bne.s	loc_183FE
00019DB4 4468 0010                  		neg.w	$10(a0)
00019DB8                            
00019DB8                            loc_183FE:
00019DB8 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00019DBE 6400                       		bcc.s	Obj73_MakeLava
00019DC0 6100 F4A8                  		bsr.w	BossMove
00019DC4 5968 0012                  		subq.w	#4,$12(a0)
00019DC8                            
00019DC8                            Obj73_MakeLava:
00019DC8 5328 0034                  		subq.b	#1,$34(a0)
00019DCC 6400                       		bcc.s	loc_1845C
00019DCE 4EB9 0000 E59C             		jsr	SingleObjLoad
00019DD4 6600                       		bne.s	loc_1844A
00019DD6 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00019DDA 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00019DE0 4EB9 0000 33AE             		jsr	(RandomNumber).l
00019DE6 0280 0000 FFFF             		andi.l	#$FFFF,d0
00019DEC 80FC 0050                  		divu.w	#$50,d0
00019DF0 4840                       		swap	d0
00019DF2 0640 1878                  		addi.w	#$1878,d0
00019DF6 3340 0008                  		move.w	d0,8(a1)
00019DFA EE09                       		lsr.b	#7,d1
00019DFC 337C 00FF 0028             		move.w	#$FF,$28(a1)
00019E02                            
00019E02                            loc_1844A:
00019E02 4EB9 0000 33AE             		jsr	(RandomNumber).l
00019E08 0200 001F                  		andi.b	#$1F,d0
00019E0C 0600 0040                  		addi.b	#$40,d0
00019E10 1140 0034                  		move.b	d0,$34(a0)
00019E14                            
00019E14                            loc_1845C:
00019E14 0828 0000 0022             		btst	#0,$22(a0)
00019E1A 6700                       		beq.s	loc_18474
00019E1C 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00019E22 6D00                       		blt.s	locret_1849C
00019E24 317C 1910 0030             		move.w	#$1910,$30(a0)
00019E2A 6000                       		bra.s	loc_18482
00019E2C                            ; ===========================================================================
00019E2C                            
00019E2C                            loc_18474:
00019E2C 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00019E32 6E00                       		bgt.s	locret_1849C
00019E34 317C 1830 0030             		move.w	#$1830,$30(a0)
00019E3A                            
00019E3A                            loc_18482:
00019E3A 4268 0010                  		clr.w	$10(a0)
00019E3E 317C FE80 0012             		move.w	#-$180,$12(a0)
00019E44 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00019E4A 6400                       		bcc.s	loc_18498
00019E4C 4468 0012                  		neg.w	$12(a0)
00019E50                            
00019E50                            loc_18498:
00019E50 5428 0028                  		addq.b	#2,$28(a0)
00019E54                            
00019E54                            locret_1849C:
00019E54 4E75                       		rts	
00019E56                            ; ===========================================================================
00019E56                            
00019E56                            Obj73_MakeLava2:			; XREF: off_183C2
00019E56 6100 F412                  		bsr.w	BossMove
00019E5A 3028 0038                  		move.w	$38(a0),d0
00019E5E 0440 022C                  		subi.w	#$22C,d0
00019E62 6E00                       		bgt.s	locret_184F4
00019E64 303C 022C                  		move.w	#$22C,d0
00019E68 4A68 0012                  		tst.w	$12(a0)
00019E6C 6700                       		beq.s	loc_184EA
00019E6E 4268 0012                  		clr.w	$12(a0)
00019E72 317C 0050 003C             		move.w	#$50,$3C(a0)
00019E78 0868 0000 0022             		bchg	#0,$22(a0)
00019E7E 4EB9 0000 E59C             		jsr	SingleObjLoad
00019E84 6600                       		bne.s	loc_184EA
00019E86 3368 0030 0008             		move.w	$30(a0),8(a1)
00019E8C 3368 0038 000C             		move.w	$38(a0),$C(a1)
00019E92 0669 0018 000C             		addi.w	#$18,$C(a1)
00019E98 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00019E9C 137C 0001 0028             		move.b	#1,$28(a1)
00019EA2                            
00019EA2                            loc_184EA:
00019EA2 5368 003C                  		subq.w	#1,$3C(a0)
00019EA6 6600                       		bne.s	locret_184F4
00019EA8 5428 0028                  		addq.b	#2,$28(a0)
00019EAC                            
00019EAC                            locret_184F4:
00019EAC 4E75                       		rts	
00019EAE                            ; ===========================================================================
00019EAE                            
00019EAE                            loc_184F6:				; XREF: Obj73_ShipIndex
00019EAE 5368 003C                  		subq.w	#1,$3C(a0)
00019EB2 6B00                       		bmi.s	loc_18500
00019EB4 6000 F372                  		bra.w	BossDefeated
00019EB8                            ; ===========================================================================
00019EB8                            
00019EB8                            loc_18500:
00019EB8 08E8 0000 0022             		bset	#0,$22(a0)
00019EBE 08A8 0007 0022             		bclr	#7,$22(a0)
00019EC4 4268 0010                  		clr.w	$10(a0)
00019EC8 5428 0025                  		addq.b	#2,$25(a0)
00019ECC 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00019ED2 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019ED6 6600                       		bne.s	locret_1852A
00019ED8 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019EDE 4268 0012                  		clr.w	$12(a0)
00019EE2                            
00019EE2                            locret_1852A:
00019EE2 4E75                       		rts	
00019EE4                            ; ===========================================================================
00019EE4                            
00019EE4                            loc_1852C:				; XREF: Obj73_ShipIndex
00019EE4 5268 003C                  		addq.w	#1,$3C(a0)
00019EE8 6700                       		beq.s	loc_18544
00019EEA 6A00                       		bpl.s	loc_1854E
00019EEC 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00019EF2 6400                       		bcc.s	loc_18544
00019EF4 0668 0018 0012             		addi.w	#$18,$12(a0)
00019EFA 6000                       		bra.s	loc_1857A
00019EFC                            ; ===========================================================================
00019EFC                            
00019EFC                            loc_18544:
00019EFC 4268 0012                  		clr.w	$12(a0)
00019F00 4268 003C                  		clr.w	$3C(a0)
00019F04 6000                       		bra.s	loc_1857A
00019F06                            ; ===========================================================================
00019F06                            
00019F06                            loc_1854E:
00019F06 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00019F0C 6500                       		bcs.s	loc_18566
00019F0E 6700                       		beq.s	loc_1856C
00019F10 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00019F16 6500                       		bcs.s	loc_1857A
00019F18 5428 0025                  		addq.b	#2,$25(a0)
00019F1C 6000                       		bra.s	loc_1857A
00019F1E                            ; ===========================================================================
00019F1E                            
00019F1E                            loc_18566:
00019F1E 5168 0012                  		subq.w	#8,$12(a0)
00019F22 6000                       		bra.s	loc_1857A
00019F24                            ; ===========================================================================
00019F24                            
00019F24                            loc_1856C:
00019F24 4268 0012                  		clr.w	$12(a0)
00019F28 303C 0083                  		move.w	#$83,d0
00019F2C 4EB9 0000 1470             		jsr	(PlaySound).l	; play MZ music
00019F32                            
00019F32                            loc_1857A:
00019F32 6100 F336                  		bsr.w	BossMove
00019F36 6000 FDC0                  		bra.w	loc_1833E
00019F3A                            ; ===========================================================================
00019F3A                            
00019F3A                            loc_18582:				; XREF: Obj73_ShipIndex
00019F3A 317C 0500 0010             		move.w	#$500,$10(a0)
00019F40 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019F46 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00019F4C 6400                       		bcc.s	loc_1859C
00019F4E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019F52 6000                       		bra.s	loc_185A2
00019F54                            ; ===========================================================================
00019F54                            
00019F54                            loc_1859C:
00019F54 4A28 0001                  		tst.b	1(a0)
00019F58 6A00                       		bpl.s	Obj73_ShipDel
00019F5A                            
00019F5A                            loc_185A2:
00019F5A 6100 F30E                  		bsr.w	BossMove
00019F5E 6000 FD98                  		bra.w	loc_1833E
00019F62                            ; ===========================================================================
00019F62                            
00019F62                            Obj73_ShipDel:
00019F62 4EF9 0000 E142             		jmp	DeleteObject
00019F68                            ; ===========================================================================
00019F68                            
00019F68                            Obj73_FaceMain:				; XREF: Obj73_Index
00019F68 7000                       		moveq	#0,d0
00019F6A 7201                       		moveq	#1,d1
00019F6C 2268 0034                  		movea.l	$34(a0),a1
00019F70 1029 0025                  		move.b	$25(a1),d0
00019F74 5540                       		subq.w	#2,d0
00019F76 6600                       		bne.s	loc_185D2
00019F78 0829 0001 0028             		btst	#1,$28(a1)
00019F7E 6700                       		beq.s	loc_185DA
00019F80 4A69 0012                  		tst.w	$12(a1)
00019F84 6600                       		bne.s	loc_185DA
00019F86 7204                       		moveq	#4,d1
00019F88 6000                       		bra.s	loc_185EE
00019F8A                            ; ===========================================================================
00019F8A                            
00019F8A                            loc_185D2:
00019F8A 5500                       		subq.b	#2,d0
00019F8C 6B00                       		bmi.s	loc_185DA
00019F8E 720A                       		moveq	#$A,d1
00019F90 6000                       		bra.s	loc_185EE
00019F92                            ; ===========================================================================
00019F92                            
00019F92                            loc_185DA:
00019F92 4A29 0020                  		tst.b	$20(a1)
00019F96 6600                       		bne.s	loc_185E4
00019F98 7205                       		moveq	#5,d1
00019F9A 6000                       		bra.s	loc_185EE
00019F9C                            ; ===========================================================================
00019F9C                            
00019F9C                            loc_185E4:
00019F9C 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019FA2 6500                       		bcs.s	loc_185EE
00019FA4 7204                       		moveq	#4,d1
00019FA6                            
00019FA6                            loc_185EE:
00019FA6 1141 001C                  		move.b	d1,$1C(a0)
00019FAA 5900                       		subq.b	#4,d0
00019FAC 6600                       		bne.s	loc_18602
00019FAE 117C 0006 001C             		move.b	#6,$1C(a0)
00019FB4 4A28 0001                  		tst.b	1(a0)
00019FB8 6A00                       		bpl.s	Obj73_FaceDel
00019FBA                            
00019FBA                            loc_18602:
00019FBA 6000                       		bra.s	Obj73_Display
00019FBC                            ; ===========================================================================
00019FBC                            
00019FBC                            Obj73_FaceDel:
00019FBC 4EF9 0000 E142             		jmp	DeleteObject
00019FC2                            ; ===========================================================================
00019FC2                            
00019FC2                            Obj73_FlameMain:			; XREF: Obj73_Index
00019FC2 117C 0007 001C             		move.b	#7,$1C(a0)
00019FC8 2268 0034                  		movea.l	$34(a0),a1
00019FCC 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019FD2 6D00                       		blt.s	loc_1862A
00019FD4 117C 000B 001C             		move.b	#$B,$1C(a0)
00019FDA 4A28 0001                  		tst.b	1(a0)
00019FDE 6A00                       		bpl.s	Obj73_FlameDel
00019FE0 6000                       		bra.s	loc_18636
00019FE2                            ; ===========================================================================
00019FE2                            
00019FE2                            loc_1862A:
00019FE2 4A69 0010                  		tst.w	$10(a1)
00019FE6 6700                       		beq.s	loc_18636
00019FE8 117C 0008 001C             		move.b	#8,$1C(a0)
00019FEE                            
00019FEE                            loc_18636:
00019FEE 6000                       		bra.s	Obj73_Display
00019FF0                            ; ===========================================================================
00019FF0                            
00019FF0                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00019FF0 4EF9 0000 E142             		jmp	DeleteObject
00019FF6                            ; ===========================================================================
00019FF6                            
00019FF6                            Obj73_Display:
00019FF6 43F9 0001 967A             		lea	(Ani_Eggman).l,a1
00019FFC 4EB9 0000 B218             		jsr	AnimateSprite
0001A002                            
0001A002                            loc_1864A:
0001A002 2268 0034                  		movea.l	$34(a0),a1
0001A006 3169 0008 0008             		move.w	8(a1),8(a0)
0001A00C 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A012 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A018 7003                       		moveq	#3,d0
0001A01A C028 0022                  		and.b	$22(a0),d0
0001A01E 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A024 8128 0001                  		or.b	d0,1(a0)
0001A028 4EF9 0000 E106             		jmp	DisplaySprite
0001A02E                            ; ===========================================================================
0001A02E                            
0001A02E                            Obj73_TubeMain:				; XREF: Obj73_Index
0001A02E 2268 0034                  		movea.l	$34(a0),a1
0001A032 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001A038 6600                       		bne.s	loc_18688
0001A03A 4A28 0001                  		tst.b	1(a0)
0001A03E 6A00                       		bpl.s	Obj73_TubeDel
0001A040                            
0001A040                            loc_18688:
0001A040 217C 0001 9792 0004        		move.l	#Map_BossItems,4(a0)
0001A048 317C 246C 0002             		move.w	#$246C,2(a0)
0001A04E 117C 0004 001A             		move.b	#4,$1A(a0)
0001A054 60AC                       		bra.s	loc_1864A
0001A056                            ; ===========================================================================
0001A056                            
0001A056                            Obj73_TubeDel:
0001A056 4EF9 0000 E142             		jmp	DeleteObject
0001A05C                            ; ===========================================================================
0001A05C                            ; ---------------------------------------------------------------------------
0001A05C                            ; Object 74 - lava that	Eggman drops (MZ)
0001A05C                            ; ---------------------------------------------------------------------------
0001A05C                            
0001A05C                            Obj74:					; XREF: Obj_Index
0001A05C 7000                       		moveq	#0,d0
0001A05E 1028 0024                  		move.b	$24(a0),d0
0001A062 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001A066 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001A06A 4EF9 0000 E106             		jmp	DisplaySprite
0001A070                            ; ===========================================================================
0001A070 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001A072 0000                       		dc.w Obj74_Action-Obj74_Index
0001A074 0000                       		dc.w loc_18886-Obj74_Index
0001A076 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001A078                            ; ===========================================================================
0001A078                            
0001A078                            Obj74_Main:				; XREF: Obj74_Index
0001A078 117C 0008 0016             		move.b	#8,$16(a0)
0001A07E 117C 0008 0017             		move.b	#8,$17(a0)
0001A084 217C 0000 BE70 0004        		move.l	#Map_obj14,4(a0)
0001A08C 317C 0345 0002             		move.w	#$345,2(a0)
0001A092 117C 0004 0001             		move.b	#4,1(a0)
0001A098 117C 0005 0018             		move.b	#5,$18(a0)
0001A09E 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A0A4 117C 0008 0019             		move.b	#8,$19(a0)
0001A0AA 5428 0024                  		addq.b	#2,$24(a0)
0001A0AE 4A28 0028                  		tst.b	$28(a0)
0001A0B2 6600                       		bne.s	loc_1870A
0001A0B4 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A0BA 5428 0024                  		addq.b	#2,$24(a0)
0001A0BE 6000 0000                  		bra.w	loc_18886
0001A0C2                            ; ===========================================================================
0001A0C2                            
0001A0C2                            loc_1870A:
0001A0C2 117C 001E 0029             		move.b	#$1E,$29(a0)
0001A0C8 303C 00AE                  		move.w	#$AE,d0
0001A0CC 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play lava sound
0001A0D2                            
0001A0D2                            Obj74_Action:				; XREF: Obj74_Index
0001A0D2 7000                       		moveq	#0,d0
0001A0D4 1028 0025                  		move.b	$25(a0),d0
0001A0D8 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001A0DC 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001A0E0 4EB9 0000 E0E0             		jsr	SpeedToPos
0001A0E6 43F9 0000 EFD4             		lea	(Ani_obj14).l,a1
0001A0EC 4EB9 0000 B218             		jsr	AnimateSprite
0001A0F2 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
0001A0F8 6200                       		bhi.s	Obj74_Delete
0001A0FA 4E75                       		rts	
0001A0FC                            ; ===========================================================================
0001A0FC                            
0001A0FC                            Obj74_Delete:
0001A0FC 4EF9 0000 E142             		jmp	DeleteObject
0001A102                            ; ===========================================================================
0001A102 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001A104 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001A106 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001A108 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001A10A                            ; ===========================================================================
0001A10A                            
0001A10A                            Obj74_Drop:				; XREF: Obj74_Index2
0001A10A 08E8 0001 0022             		bset	#1,$22(a0)
0001A110 5328 0029                  		subq.b	#1,$29(a0)
0001A114 6A00                       		bpl.s	locret_18780
0001A116 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A11C 4228 0028                  		clr.b	$28(a0)
0001A120 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A126 08A8 0001 0022             		bclr	#1,$22(a0)
0001A12C 6100 C6BA                  		bsr.w	ObjHitFloor
0001A130 4A41                       		tst.w	d1
0001A132 6A00                       		bpl.s	locret_18780
0001A134 5428 0025                  		addq.b	#2,$25(a0)
0001A138                            
0001A138                            locret_18780:
0001A138 4E75                       		rts	
0001A13A                            ; ===========================================================================
0001A13A                            
0001A13A                            Obj74_MakeFlame:			; XREF: Obj74_Index2
0001A13A 5568 000C                  		subq.w	#2,$C(a0)
0001A13E 08E8 0007 0002             		bset	#7,2(a0)
0001A144 317C 00A0 0010             		move.w	#$A0,$10(a0)
0001A14A 4268 0012                  		clr.w	$12(a0)
0001A14E 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A154 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A15A 117C 0003 0029             		move.b	#3,$29(a0)
0001A160 4EB9 0000 E5B2             		jsr	SingleObjLoad2
0001A166 6600                       		bne.s	loc_187CA
0001A168 47D1                       		lea	(a1),a3
0001A16A 45D0                       		lea	(a0),a2
0001A16C 7003                       		moveq	#3,d0
0001A16E                            
0001A16E                            Obj74_Loop:
0001A16E 26DA                       		move.l	(a2)+,(a3)+
0001A170 26DA                       		move.l	(a2)+,(a3)+
0001A172 26DA                       		move.l	(a2)+,(a3)+
0001A174 26DA                       		move.l	(a2)+,(a3)+
0001A176 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001A17A                            
0001A17A 4469 0010                  		neg.w	$10(a1)
0001A17E 5429 0025                  		addq.b	#2,$25(a1)
0001A182                            
0001A182                            loc_187CA:
0001A182 5428 0025                  		addq.b	#2,$25(a0)
0001A186 4E75                       		rts	
0001A188                            
0001A188                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A188                            
0001A188                            
0001A188                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
0001A188 4EB9 0000 E5B2             		jsr	SingleObjLoad2
0001A18E 6600                       		bne.s	locret_187EE
0001A190 3368 0008 0008             		move.w	8(a0),8(a1)
0001A196 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A19C 12BC 0074                  		move.b	#$74,(a1)
0001A1A0 337C 0067 0028             		move.w	#$67,$28(a1)
0001A1A6                            
0001A1A6                            locret_187EE:
0001A1A6 4E75                       		rts	
0001A1A8                            ; End of function Obj74_Duplicate2
0001A1A8                            
0001A1A8                            ; ===========================================================================
0001A1A8                            
0001A1A8                            Obj74_Duplicate:			; XREF: Obj74_Index2
0001A1A8 6100 C63E                  		bsr.w	ObjHitFloor
0001A1AC 4A41                       		tst.w	d1
0001A1AE 6A00                       		bpl.s	loc_18826
0001A1B0 3028 0008                  		move.w	8(a0),d0
0001A1B4 0C40 1940                  		cmpi.w	#$1940,d0
0001A1B8 6E00                       		bgt.s	loc_1882C
0001A1BA 3228 0030                  		move.w	$30(a0),d1
0001A1BE B240                       		cmp.w	d0,d1
0001A1C0 6700                       		beq.s	loc_1881E
0001A1C2 0240 0010                  		andi.w	#$10,d0
0001A1C6 0241 0010                  		andi.w	#$10,d1
0001A1CA B240                       		cmp.w	d0,d1
0001A1CC 6700                       		beq.s	loc_1881E
0001A1CE 61B8                       		bsr.s	Obj74_Duplicate2
0001A1D0 3168 0008 0032             		move.w	8(a0),$32(a0)
0001A1D6                            
0001A1D6                            loc_1881E:
0001A1D6 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A1DC 4E75                       		rts	
0001A1DE                            ; ===========================================================================
0001A1DE                            
0001A1DE                            loc_18826:
0001A1DE 5428 0025                  		addq.b	#2,$25(a0)
0001A1E2 4E75                       		rts	
0001A1E4                            ; ===========================================================================
0001A1E4                            
0001A1E4                            loc_1882C:
0001A1E4 5428 0024                  		addq.b	#2,$24(a0)
0001A1E8 4E75                       		rts	
0001A1EA                            ; ===========================================================================
0001A1EA                            
0001A1EA                            Obj74_FallEdge:				; XREF: Obj74_Index2
0001A1EA 08A8 0001 0022             		bclr	#1,$22(a0)
0001A1F0 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
0001A1F6 3028 0008                  		move.w	8(a0),d0
0001A1FA 9068 0032                  		sub.w	$32(a0),d0
0001A1FE 6A00                       		bpl.s	loc_1884A
0001A200 4440                       		neg.w	d0
0001A202                            
0001A202                            loc_1884A:
0001A202 0C40 0012                  		cmpi.w	#$12,d0
0001A206 6600                       		bne.s	loc_18856
0001A208 08A8 0007 0002             		bclr	#7,2(a0)
0001A20E                            
0001A20E                            loc_18856:
0001A20E 6100 C5D8                  		bsr.w	ObjHitFloor
0001A212 4A41                       		tst.w	d1
0001A214 6A00                       		bpl.s	locret_1887E
0001A216 5328 0029                  		subq.b	#1,$29(a0)
0001A21A 6700                       		beq.s	Obj74_Delete2
0001A21C 4268 0012                  		clr.w	$12(a0)
0001A220 3168 0032 0008             		move.w	$32(a0),8(a0)
0001A226 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A22C 08E8 0007 0002             		bset	#7,2(a0)
0001A232 5528 0025                  		subq.b	#2,$25(a0)
0001A236                            
0001A236                            locret_1887E:
0001A236 4E75                       		rts	
0001A238                            ; ===========================================================================
0001A238                            
0001A238                            Obj74_Delete2:
0001A238 4EF9 0000 E142             		jmp	DeleteObject
0001A23E                            ; ===========================================================================
0001A23E                            
0001A23E                            loc_18886:				; XREF: Obj74_Index
0001A23E 08E8 0007 0002             		bset	#7,2(a0)
0001A244 5328 0029                  		subq.b	#1,$29(a0)
0001A248 6600                       		bne.s	Obj74_Animate
0001A24A 117C 0001 001C             		move.b	#1,$1C(a0)
0001A250 5968 000C                  		subq.w	#4,$C(a0)
0001A254 4228 0020                  		clr.b	$20(a0)
0001A258                            
0001A258                            Obj74_Animate:
0001A258 43F9 0000 EFD4             		lea	(Ani_obj14).l,a1
0001A25E 4EF9 0000 B218             		jmp	AnimateSprite
0001A264                            ; ===========================================================================
0001A264                            
0001A264                            Obj74_Delete3:				; XREF: Obj74_Index
0001A264 4EF9 0000 E142             		jmp	DeleteObject
0001A26A                            ; ===========================================================================
0001A26A                            
0001A26A                            Obj7A_Delete:
0001A26A 4EF9 0000 E142             		jmp	DeleteObject
0001A270                            ; ===========================================================================
0001A270                            ; ---------------------------------------------------------------------------
0001A270                            ; Object 7A - Eggman (SLZ)
0001A270                            ; ---------------------------------------------------------------------------
0001A270                            
0001A270                            Obj7A:					; XREF: Obj_Index
0001A270 7000                       		moveq	#0,d0
0001A272 1028 0024                  		move.b	$24(a0),d0
0001A276 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001A27A 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001A27E                            ; ===========================================================================
0001A27E 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001A280 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001A282 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001A284 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001A286 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001A288                            
0001A288 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001A28B 0401 04                    		dc.b 4,	1, 4
0001A28E 0607 04                    		dc.b 6,	7, 4
0001A291 0800 03                    		dc.b 8,	0, 3
0001A294                            ; ===========================================================================
0001A294                            
0001A294                            Obj7A_Main:				; XREF: Obj7A_Index
0001A294 317C 2188 0008             		move.w	#$2188,8(a0)
0001A29A 317C 0228 000C             		move.w	#$228,$C(a0)
0001A2A0 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A2A6 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A2AC 117C 000F 0020             		move.b	#$F,$20(a0)
0001A2B2 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A2B8 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
0001A2BC 2248                       		movea.l	a0,a1
0001A2BE 7203                       		moveq	#3,d1
0001A2C0 6000                       		bra.s	Obj7A_LoadBoss
0001A2C2                            ; ===========================================================================
0001A2C2                            
0001A2C2                            Obj7A_Loop:
0001A2C2 4EB9 0000 E5B2             		jsr	SingleObjLoad2
0001A2C8 6600                       		bne.s	loc_1895C
0001A2CA 12BC 007A                  		move.b	#$7A,0(a1)
0001A2CE 3368 0008 0008             		move.w	8(a0),8(a1)
0001A2D4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A2DA                            
0001A2DA                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
0001A2DA 08A8 0000 0022             		bclr	#0,$22(a0)
0001A2E0 4229 0025                  		clr.b	$25(a1)
0001A2E4 135A 0024                  		move.b	(a2)+,$24(a1)
0001A2E8 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A2EC 135A 0018                  		move.b	(a2)+,$18(a1)
0001A2F0 237C 0001 96CA 0004        		move.l	#Map_Eggman,4(a1)
0001A2F8 337C 0400 0002             		move.w	#$400,2(a1)
0001A2FE 137C 0004 0001             		move.b	#4,1(a1)
0001A304 137C 0020 0019             		move.b	#$20,$19(a1)
0001A30A 2348 0034                  		move.l	a0,$34(a1)
0001A30E 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001A312                            
0001A312                            loc_1895C:
0001A312 43F8 D040                  		lea	($FFFFD040).w,a1
0001A316 45E8 002A                  		lea	$2A(a0),a2
0001A31A 705E                       		moveq	#$5E,d0
0001A31C 723E                       		moveq	#$3E,d1
0001A31E                            
0001A31E                            loc_18968:
0001A31E B011                       		cmp.b	(a1),d0
0001A320 6600                       		bne.s	loc_18974
0001A322 4A29 0028                  		tst.b	$28(a1)
0001A326 6700                       		beq.s	loc_18974
0001A328 34C9                       		move.w	a1,(a2)+
0001A32A                            
0001A32A                            loc_18974:
0001A32A D2FC 0040                  		adda.w	#$40,a1
0001A32E 51C9 FFEE                  		dbf	d1,loc_18968
0001A332                            
0001A332                            Obj7A_ShipMain:				; XREF: Obj7A_Index
0001A332 7000                       		moveq	#0,d0
0001A334 1028 0025                  		move.b	$25(a0),d0
0001A338 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001A33C 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001A340 43F9 0001 967A             		lea	(Ani_Eggman).l,a1
0001A346 4EB9 0000 B218             		jsr	AnimateSprite
0001A34C 7003                       		moveq	#3,d0
0001A34E C028 0022                  		and.b	$22(a0),d0
0001A352 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A358 8128 0001                  		or.b	d0,1(a0)
0001A35C 4EF9 0000 E106             		jmp	DisplaySprite
0001A362                            ; ===========================================================================
0001A362 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001A364 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001A366 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001A368 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001A36A 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001A36C 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001A36E                            ; ===========================================================================
0001A36E                            
0001A36E                            loc_189B8:				; XREF: Obj7A_ShipIndex
0001A36E 317C FF00 0010             		move.w	#-$100,$10(a0)
0001A374 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001A37A 6400                       		bcc.s	loc_189CA
0001A37C 5428 0025                  		addq.b	#2,$25(a0)
0001A380                            
0001A380                            loc_189CA:
0001A380 6100 EEE8                  		bsr.w	BossMove
0001A384 1028 003F                  		move.b	$3F(a0),d0
0001A388 5428 003F                  		addq.b	#2,$3F(a0)
0001A38C 4EB9 0000 33D4             		jsr	(CalcSine).l
0001A392 EC40                       		asr.w	#6,d0
0001A394 D068 0038                  		add.w	$38(a0),d0
0001A398 3140 000C                  		move.w	d0,$C(a0)
0001A39C 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A3A2 6000                       		bra.s	loc_189FE
0001A3A4                            ; ===========================================================================
0001A3A4                            
0001A3A4                            loc_189EE:
0001A3A4 6100 EEC4                  		bsr.w	BossMove
0001A3A8 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A3AE 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A3B4                            
0001A3B4                            loc_189FE:
0001A3B4 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001A3BA 6400                       		bcc.s	locret_18A44
0001A3BC 4A28 0022                  		tst.b	$22(a0)
0001A3C0 6B00                       		bmi.s	loc_18A46
0001A3C2 4A28 0020                  		tst.b	$20(a0)
0001A3C6 6600                       		bne.s	locret_18A44
0001A3C8 4A28 003E                  		tst.b	$3E(a0)
0001A3CC 6600                       		bne.s	loc_18A28
0001A3CE 117C 0020 003E             		move.b	#$20,$3E(a0)
0001A3D4 303C 00AC                  		move.w	#$AC,d0
0001A3D8 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A3DE                            
0001A3DE                            loc_18A28:
0001A3DE 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001A3E2 7000                       		moveq	#0,d0
0001A3E4 4A51                       		tst.w	(a1)
0001A3E6 6600                       		bne.s	loc_18A36
0001A3E8 303C 0EEE                  		move.w	#$EEE,d0
0001A3EC                            
0001A3EC                            loc_18A36:
0001A3EC 3280                       		move.w	d0,(a1)
0001A3EE 5328 003E                  		subq.b	#1,$3E(a0)
0001A3F2 6600                       		bne.s	locret_18A44
0001A3F4 117C 000F 0020             		move.b	#$F,$20(a0)
0001A3FA                            
0001A3FA                            locret_18A44:
0001A3FA 4E75                       		rts	
0001A3FC                            ; ===========================================================================
0001A3FC                            
0001A3FC                            loc_18A46:
0001A3FC 7064                       		moveq	#100,d0
0001A3FE 6100 0000                  		bsr.w	AddPoints
0001A402 117C 0006 0025             		move.b	#6,$25(a0)
0001A408 117C 0078 003C             		move.b	#$78,$3C(a0)
0001A40E 4268 0010                  		clr.w	$10(a0)
0001A412 4E75                       		rts	
0001A414                            ; ===========================================================================
0001A414                            
0001A414                            loc_18A5E:				; XREF: Obj7A_ShipIndex
0001A414 3028 0030                  		move.w	$30(a0),d0
0001A418 317C 0200 0010             		move.w	#$200,$10(a0)
0001A41E 0828 0000 0022             		btst	#0,$22(a0)
0001A424 6600                       		bne.s	loc_18A7C
0001A426 4468 0010                  		neg.w	$10(a0)
0001A42A 0C40 2008                  		cmpi.w	#$2008,d0
0001A42E 6E00                       		bgt.s	loc_18A88
0001A430 6000                       		bra.s	loc_18A82
0001A432                            ; ===========================================================================
0001A432                            
0001A432                            loc_18A7C:
0001A432 0C40 2138                  		cmpi.w	#$2138,d0
0001A436 6D00                       		blt.s	loc_18A88
0001A438                            
0001A438                            loc_18A82:
0001A438 0868 0000 0022             		bchg	#0,$22(a0)
0001A43E                            
0001A43E                            loc_18A88:
0001A43E 3028 0008                  		move.w	8(a0),d0
0001A442 72FF                       		moveq	#-1,d1
0001A444 7402                       		moveq	#2,d2
0001A446 45E8 002A                  		lea	$2A(a0),a2
0001A44A 7828                       		moveq	#$28,d4
0001A44C 4A68 0010                  		tst.w	$10(a0)
0001A450 6A00                       		bpl.s	loc_18A9E
0001A452 4444                       		neg.w	d4
0001A454                            
0001A454                            loc_18A9E:
0001A454 321A                       		move.w	(a2)+,d1
0001A456 2641                       		movea.l	d1,a3
0001A458 082B 0003 0022             		btst	#3,$22(a3)
0001A45E 6600                       		bne.s	loc_18AB4
0001A460 362B 0008                  		move.w	8(a3),d3
0001A464 D644                       		add.w	d4,d3
0001A466 9640                       		sub.w	d0,d3
0001A468 6700                       		beq.s	loc_18AC0
0001A46A                            
0001A46A                            loc_18AB4:
0001A46A 51CA FFE8                  		dbf	d2,loc_18A9E
0001A46E                            
0001A46E 1142 0028                  		move.b	d2,$28(a0)
0001A472 6000 FF0C                  		bra.w	loc_189CA
0001A476                            ; ===========================================================================
0001A476                            
0001A476                            loc_18AC0:
0001A476 1142 0028                  		move.b	d2,$28(a0)
0001A47A 5428 0025                  		addq.b	#2,$25(a0)
0001A47E 117C 0028 003C             		move.b	#$28,$3C(a0)
0001A484 6000 FEFA                  		bra.w	loc_189CA
0001A488                            ; ===========================================================================
0001A488                            
0001A488                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
0001A488 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001A48E 6600                       		bne.s	loc_18B36
0001A490 70FF                       		moveq	#-1,d0
0001A492 1028 0028                  		move.b	$28(a0),d0
0001A496 4880                       		ext.w	d0
0001A498 6B00                       		bmi.s	loc_18B40
0001A49A 5540                       		subq.w	#2,d0
0001A49C 4440                       		neg.w	d0
0001A49E D040                       		add.w	d0,d0
0001A4A0 43E8 002A                  		lea	$2A(a0),a1
0001A4A4 3031 0000                  		move.w	(a1,d0.w),d0
0001A4A8 2440                       		movea.l	d0,a2
0001A4AA 43F8 D040                  		lea	($FFFFD040).w,a1
0001A4AE 723E                       		moveq	#$3E,d1
0001A4B0                            
0001A4B0                            loc_18AFA:
0001A4B0 B0A9 003C                  		cmp.l	$3C(a1),d0
0001A4B4 6700                       		beq.s	loc_18B40
0001A4B6 D2FC 0040                  		adda.w	#$40,a1
0001A4BA 51C9 FFF4                  		dbf	d1,loc_18AFA
0001A4BE                            
0001A4BE 2F08                       		move.l	a0,-(sp)
0001A4C0 41D2                       		lea	(a2),a0
0001A4C2 4EB9 0000 E5B2             		jsr	SingleObjLoad2
0001A4C8 205F                       		movea.l	(sp)+,a0
0001A4CA 6600                       		bne.s	loc_18B40
0001A4CC 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
0001A4D0 3368 0008 0008             		move.w	8(a0),8(a1)
0001A4D6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A4DC 0669 0020 000C             		addi.w	#$20,$C(a1)
0001A4E2 136A 0022 0022             		move.b	$22(a2),$22(a1)
0001A4E8 234A 003C                  		move.l	a2,$3C(a1)
0001A4EC                            
0001A4EC                            loc_18B36:
0001A4EC 5328 003C                  		subq.b	#1,$3C(a0)
0001A4F0 6700                       		beq.s	loc_18B40
0001A4F2 6000 FEC0                  		bra.w	loc_189FE
0001A4F6                            ; ===========================================================================
0001A4F6                            
0001A4F6                            loc_18B40:
0001A4F6 5528 0025                  		subq.b	#2,$25(a0)
0001A4FA 6000 FE84                  		bra.w	loc_189CA
0001A4FE                            ; ===========================================================================
0001A4FE                            
0001A4FE                            loc_18B48:				; XREF: Obj7A_ShipIndex
0001A4FE 5328 003C                  		subq.b	#1,$3C(a0)
0001A502 6B00                       		bmi.s	loc_18B52
0001A504 6000 ED22                  		bra.w	BossDefeated
0001A508                            ; ===========================================================================
0001A508                            
0001A508                            loc_18B52:
0001A508 5428 0025                  		addq.b	#2,$25(a0)
0001A50C 4268 0012                  		clr.w	$12(a0)
0001A510 08E8 0000 0022             		bset	#0,$22(a0)
0001A516 08A8 0007 0022             		bclr	#7,$22(a0)
0001A51C 4268 0010                  		clr.w	$10(a0)
0001A520 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001A526 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001A52A 6600                       		bne.s	loc_18B7C
0001A52C 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001A532                            
0001A532                            loc_18B7C:
0001A532 6000 FE80                  		bra.w	loc_189FE
0001A536                            ; ===========================================================================
0001A536                            
0001A536                            loc_18B80:				; XREF: Obj7A_ShipIndex
0001A536 5228 003C                  		addq.b	#1,$3C(a0)
0001A53A 6700                       		beq.s	loc_18B90
0001A53C 6A00                       		bpl.s	loc_18B96
0001A53E 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A544 6000                       		bra.s	loc_18BC2
0001A546                            ; ===========================================================================
0001A546                            
0001A546                            loc_18B90:
0001A546 4268 0012                  		clr.w	$12(a0)
0001A54A 6000                       		bra.s	loc_18BC2
0001A54C                            ; ===========================================================================
0001A54C                            
0001A54C                            loc_18B96:
0001A54C 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001A552 6500                       		bcs.s	loc_18BAE
0001A554 6700                       		beq.s	loc_18BB4
0001A556 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001A55C 6500                       		bcs.s	loc_18BC2
0001A55E 5428 0025                  		addq.b	#2,$25(a0)
0001A562 6000                       		bra.s	loc_18BC2
0001A564                            ; ===========================================================================
0001A564                            
0001A564                            loc_18BAE:
0001A564 5168 0012                  		subq.w	#8,$12(a0)
0001A568 6000                       		bra.s	loc_18BC2
0001A56A                            ; ===========================================================================
0001A56A                            
0001A56A                            loc_18BB4:
0001A56A 4268 0012                  		clr.w	$12(a0)
0001A56E 303C 0084                  		move.w	#$84,d0
0001A572 4EB9 0000 1470             		jsr	(PlaySound).l	; play SLZ music
0001A578                            
0001A578                            loc_18BC2:
0001A578 6000 FE2A                  		bra.w	loc_189EE
0001A57C                            ; ===========================================================================
0001A57C                            
0001A57C                            loc_18BC6:				; XREF: Obj7A_ShipIndex
0001A57C 317C 0400 0010             		move.w	#$400,$10(a0)
0001A582 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A588 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
0001A58E 6400                       		bcc.s	loc_18BE0
0001A590 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A594 6000                       		bra.s	loc_18BE8
0001A596                            ; ===========================================================================
0001A596                            
0001A596                            loc_18BE0:
0001A596 4A28 0001                  		tst.b	1(a0)
0001A59A 6A00 FCCE                  		bpl.w	Obj7A_Delete
0001A59E                            
0001A59E                            loc_18BE8:
0001A59E 6100 ECCA                  		bsr.w	BossMove
0001A5A2 6000 FDDC                  		bra.w	loc_189CA
0001A5A6                            ; ===========================================================================
0001A5A6                            
0001A5A6                            Obj7A_FaceMain:				; XREF: Obj7A_Index
0001A5A6 7000                       		moveq	#0,d0
0001A5A8 7201                       		moveq	#1,d1
0001A5AA 2268 0034                  		movea.l	$34(a0),a1
0001A5AE 1029 0025                  		move.b	$25(a1),d0
0001A5B2 0C00 0006                  		cmpi.b	#6,d0
0001A5B6 6B00                       		bmi.s	loc_18C06
0001A5B8 720A                       		moveq	#$A,d1
0001A5BA 6000                       		bra.s	loc_18C1A
0001A5BC                            ; ===========================================================================
0001A5BC                            
0001A5BC                            loc_18C06:
0001A5BC 4A29 0020                  		tst.b	$20(a1)
0001A5C0 6600                       		bne.s	loc_18C10
0001A5C2 7205                       		moveq	#5,d1
0001A5C4 6000                       		bra.s	loc_18C1A
0001A5C6                            ; ===========================================================================
0001A5C6                            
0001A5C6                            loc_18C10:
0001A5C6 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A5CC 6500                       		bcs.s	loc_18C1A
0001A5CE 7204                       		moveq	#4,d1
0001A5D0                            
0001A5D0                            loc_18C1A:
0001A5D0 1141 001C                  		move.b	d1,$1C(a0)
0001A5D4 0C00 000A                  		cmpi.b	#$A,d0
0001A5D8 6600                       		bne.s	loc_18C32
0001A5DA 117C 0006 001C             		move.b	#6,$1C(a0)
0001A5E0 4A28 0001                  		tst.b	1(a0)
0001A5E4 6A00 FC84                  		bpl.w	Obj7A_Delete
0001A5E8                            
0001A5E8                            loc_18C32:
0001A5E8 6000                       		bra.s	loc_18C6C
0001A5EA                            ; ===========================================================================
0001A5EA                            
0001A5EA                            Obj7A_FlameMain:			; XREF: Obj7A_Index
0001A5EA 117C 0008 001C             		move.b	#8,$1C(a0)
0001A5F0 2268 0034                  		movea.l	$34(a0),a1
0001A5F4 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A5FA 6600                       		bne.s	loc_18C56
0001A5FC 4A28 0001                  		tst.b	1(a0)
0001A600 6A00 FC68                  		bpl.w	Obj7A_Delete
0001A604 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A60A 6000                       		bra.s	loc_18C6C
0001A60C                            ; ===========================================================================
0001A60C                            
0001A60C                            loc_18C56:
0001A60C 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001A612 6E00                       		bgt.s	loc_18C6C
0001A614 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001A61A 6D00                       		blt.s	loc_18C6C
0001A61C 117C 0007 001C             		move.b	#7,$1C(a0)
0001A622                            
0001A622                            loc_18C6C:
0001A622 43F9 0001 967A             		lea	(Ani_Eggman).l,a1
0001A628 4EB9 0000 B218             		jsr	AnimateSprite
0001A62E                            
0001A62E                            loc_18C78:
0001A62E 2268 0034                  		movea.l	$34(a0),a1
0001A632 3169 0008 0008             		move.w	8(a1),8(a0)
0001A638 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A63E 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A644 7003                       		moveq	#3,d0
0001A646 C028 0022                  		and.b	$22(a0),d0
0001A64A 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A650 8128 0001                  		or.b	d0,1(a0)
0001A654 4EF9 0000 E106             		jmp	DisplaySprite
0001A65A                            ; ===========================================================================
0001A65A                            
0001A65A                            Obj7A_TubeMain:				; XREF: Obj7A_Index
0001A65A 2268 0034                  		movea.l	$34(a0),a1
0001A65E 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A664 6600                       		bne.s	loc_18CB8
0001A666 4A28 0001                  		tst.b	1(a0)
0001A66A 6A00 FBFE                  		bpl.w	Obj7A_Delete
0001A66E                            
0001A66E                            loc_18CB8:
0001A66E 217C 0001 9792 0004        		move.l	#Map_BossItems,4(a0)
0001A676 317C 246C 0002             		move.w	#$246C,2(a0)
0001A67C 117C 0003 001A             		move.b	#3,$1A(a0)
0001A682 60AA                       		bra.s	loc_18C78
0001A684                            ; ===========================================================================
0001A684                            ; ---------------------------------------------------------------------------
0001A684                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001A684                            ; ---------------------------------------------------------------------------
0001A684                            
0001A684                            Obj7B:					; XREF: Obj_Index
0001A684 7000                       		moveq	#0,d0
0001A686 1028 0024                  		move.b	$24(a0),d0
0001A68A 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001A68E 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001A692 3028 0030                  		move.w	$30(a0),d0
0001A696 0240 FF80                  		andi.w	#$FF80,d0
0001A69A 3238 F700                  		move.w	($FFFFF700).w,d1
0001A69E 0441 0080                  		subi.w	#$80,d1
0001A6A2 0241 FF80                  		andi.w	#$FF80,d1
0001A6A6 9041                       		sub.w	d1,d0
0001A6A8 6B00 FBC0                  		bmi.w	Obj7A_Delete
0001A6AC 0C40 0280                  		cmpi.w	#$280,d0
0001A6B0 6200 FBB8                  		bhi.w	Obj7A_Delete
0001A6B4 4EF9 0000 E106             		jmp	DisplaySprite
0001A6BA                            ; ===========================================================================
0001A6BA 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001A6BC 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001A6BE 0000                       		dc.w loc_18DC6-Obj7B_Index
0001A6C0 0000                       		dc.w loc_18EAA-Obj7B_Index
0001A6C2 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001A6C4 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001A6C6                            ; ===========================================================================
0001A6C6                            
0001A6C6                            Obj7B_Main:				; XREF: Obj7B_Index
0001A6C6 217C 0001 2506 0004        		move.l	#Map_obj5Ea,4(a0)
0001A6CE 317C 0518 0002             		move.w	#$518,2(a0)
0001A6D4 117C 0001 001A             		move.b	#1,$1A(a0)
0001A6DA 0028 0004 0001             		ori.b	#4,1(a0)
0001A6E0 117C 0004 0018             		move.b	#4,$18(a0)
0001A6E6 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A6EC 117C 000C 0019             		move.b	#$C,$19(a0)
0001A6F2 2268 003C                  		movea.l	$3C(a0),a1
0001A6F6 3169 0008 0030             		move.w	8(a1),$30(a0)
0001A6FC 3169 000C 0034             		move.w	$C(a1),$34(a0)
0001A702 08E8 0000 0022             		bset	#0,$22(a0)
0001A708 3028 0008                  		move.w	8(a0),d0
0001A70C B069 0008                  		cmp.w	8(a1),d0
0001A710 6E00                       		bgt.s	loc_18D68
0001A712 08A8 0000 0022             		bclr	#0,$22(a0)
0001A718 117C 0002 003A             		move.b	#2,$3A(a0)
0001A71E                            
0001A71E                            loc_18D68:
0001A71E 5428 0024                  		addq.b	#2,$24(a0)
0001A722                            
0001A722                            Obj7B_Fall:				; XREF: Obj7B_Index
0001A722 4EB9 0000 E0B4             		jsr	ObjectFall
0001A728 2268 003C                  		movea.l	$3C(a0),a1
0001A72C 45F9 0000 0000             		lea	(word_19018).l,a2
0001A732 7000                       		moveq	#0,d0
0001A734 1029 001A                  		move.b	$1A(a1),d0
0001A738 3228 0008                  		move.w	8(a0),d1
0001A73C 9268 0030                  		sub.w	$30(a0),d1
0001A740 6400                       		bcc.s	loc_18D8E
0001A742 5440                       		addq.w	#2,d0
0001A744                            
0001A744                            loc_18D8E:
0001A744 D040                       		add.w	d0,d0
0001A746 3228 0034                  		move.w	$34(a0),d1
0001A74A D272 0000                  		add.w	(a2,d0.w),d1
0001A74E B268 000C                  		cmp.w	$C(a0),d1
0001A752 6E00                       		bgt.s	locret_18DC4
0001A754 2268 003C                  		movea.l	$3C(a0),a1
0001A758 7202                       		moveq	#2,d1
0001A75A 0828 0000 0022             		btst	#0,$22(a0)
0001A760 6700                       		beq.s	loc_18DAE
0001A762 7200                       		moveq	#0,d1
0001A764                            
0001A764                            loc_18DAE:
0001A764 317C 00F0 0028             		move.w	#$F0,$28(a0)
0001A76A 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
0001A770 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001A776 6000 0000                  		bra.w	loc_18FA2
0001A77A                            ; ===========================================================================
0001A77A                            
0001A77A                            locret_18DC4:
0001A77A 4E75                       		rts	
0001A77C                            ; ===========================================================================
0001A77C                            
0001A77C                            loc_18DC6:				; XREF: Obj7B_Index
0001A77C 2268 003C                  		movea.l	$3C(a0),a1
0001A780 7000                       		moveq	#0,d0
0001A782 1028 003A                  		move.b	$3A(a0),d0
0001A786 9029 003A                  		sub.b	$3A(a1),d0
0001A78A 6700                       		beq.s	loc_18E2A
0001A78C 6400                       		bcc.s	loc_18DDA
0001A78E 4400                       		neg.b	d0
0001A790                            
0001A790                            loc_18DDA:
0001A790 323C F7E8                  		move.w	#-$818,d1
0001A794 343C FEEC                  		move.w	#-$114,d2
0001A798 0C00 0001                  		cmpi.b	#1,d0
0001A79C 6700                       		beq.s	loc_18E00
0001A79E 323C F6A0                  		move.w	#-$960,d1
0001A7A2 343C FF0C                  		move.w	#-$F4,d2
0001A7A6 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001A7AC 6D00                       		blt.s	loc_18E00
0001A7AE 323C F5E0                  		move.w	#-$A20,d1
0001A7B2 343C FF80                  		move.w	#-$80,d2
0001A7B6                            
0001A7B6                            loc_18E00:
0001A7B6 3141 0012                  		move.w	d1,$12(a0)
0001A7BA 3142 0010                  		move.w	d2,$10(a0)
0001A7BE 3028 0008                  		move.w	8(a0),d0
0001A7C2 9068 0030                  		sub.w	$30(a0),d0
0001A7C6 6400                       		bcc.s	loc_18E16
0001A7C8 4468 0010                  		neg.w	$10(a0)
0001A7CC                            
0001A7CC                            loc_18E16:
0001A7CC 117C 0001 001A             		move.b	#1,$1A(a0)
0001A7D2 317C 0020 0028             		move.w	#$20,$28(a0)
0001A7D8 5428 0024                  		addq.b	#2,$24(a0)
0001A7DC 6000 0000                  		bra.w	loc_18EAA
0001A7E0                            ; ===========================================================================
0001A7E0                            
0001A7E0                            loc_18E2A:				; XREF: loc_18DC6
0001A7E0 45F9 0000 0000             		lea	(word_19018).l,a2
0001A7E6 7000                       		moveq	#0,d0
0001A7E8 1029 001A                  		move.b	$1A(a1),d0
0001A7EC 343C 0028                  		move.w	#$28,d2
0001A7F0 3228 0008                  		move.w	8(a0),d1
0001A7F4 9268 0030                  		sub.w	$30(a0),d1
0001A7F8 6400                       		bcc.s	loc_18E48
0001A7FA 4442                       		neg.w	d2
0001A7FC 5440                       		addq.w	#2,d0
0001A7FE                            
0001A7FE                            loc_18E48:
0001A7FE D040                       		add.w	d0,d0
0001A800 3228 0034                  		move.w	$34(a0),d1
0001A804 D272 0000                  		add.w	(a2,d0.w),d1
0001A808 3141 000C                  		move.w	d1,$C(a0)
0001A80C D468 0030                  		add.w	$30(a0),d2
0001A810 3142 0008                  		move.w	d2,8(a0)
0001A814 4268 000E                  		clr.w	$E(a0)
0001A818 4268 000A                  		clr.w	$A(a0)
0001A81C 5368 0028                  		subq.w	#1,$28(a0)
0001A820 6600                       		bne.s	loc_18E7A
0001A822 317C 0020 0028             		move.w	#$20,$28(a0)
0001A828 117C 0008 0024             		move.b	#8,$24(a0)
0001A82E 4E75                       		rts	
0001A830                            ; ===========================================================================
0001A830                            
0001A830                            loc_18E7A:
0001A830 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
0001A836 6600                       		bne.s	loc_18E88
0001A838 117C 0005 001F             		move.b	#5,$1F(a0)
0001A83E                            
0001A83E                            loc_18E88:
0001A83E 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
0001A844 6600                       		bne.s	loc_18E96
0001A846 117C 0002 001F             		move.b	#2,$1F(a0)
0001A84C                            
0001A84C                            loc_18E96:
0001A84C 5328 001E                  		subq.b	#1,$1E(a0)
0001A850 6E00                       		bgt.s	locret_18EA8
0001A852 0868 0000 001A             		bchg	#0,$1A(a0)
0001A858 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001A85E                            
0001A85E                            locret_18EA8:
0001A85E 4E75                       		rts	
0001A860                            ; ===========================================================================
0001A860                            
0001A860                            loc_18EAA:				; XREF: Obj7B_Index
0001A860 43F8 D040                  		lea	($FFFFD040).w,a1
0001A864 707A                       		moveq	#$7A,d0
0001A866 7240                       		moveq	#$40,d1
0001A868 743E                       		moveq	#$3E,d2
0001A86A                            
0001A86A                            loc_18EB4:
0001A86A B011                       		cmp.b	(a1),d0
0001A86C 6700                       		beq.s	loc_18EC0
0001A86E D2C1                       		adda.w	d1,a1
0001A870 51CA FFF8                  		dbf	d2,loc_18EB4
0001A874                            
0001A874 6000                       		bra.s	loc_18F38
0001A876                            ; ===========================================================================
0001A876                            
0001A876                            loc_18EC0:
0001A876 3029 0008                  		move.w	8(a1),d0
0001A87A 3229 000C                  		move.w	$C(a1),d1
0001A87E 3428 0008                  		move.w	8(a0),d2
0001A882 3628 000C                  		move.w	$C(a0),d3
0001A886 45FA 0000                  		lea	byte_19022(pc),a2
0001A88A 47FA 0000                  		lea	byte_19026(pc),a3
0001A88E 181A                       		move.b	(a2)+,d4
0001A890 4884                       		ext.w	d4
0001A892 D044                       		add.w	d4,d0
0001A894 181B                       		move.b	(a3)+,d4
0001A896 4884                       		ext.w	d4
0001A898 D444                       		add.w	d4,d2
0001A89A B440                       		cmp.w	d0,d2
0001A89C 6500                       		bcs.s	loc_18F38
0001A89E 181A                       		move.b	(a2)+,d4
0001A8A0 4884                       		ext.w	d4
0001A8A2 D044                       		add.w	d4,d0
0001A8A4 181B                       		move.b	(a3)+,d4
0001A8A6 4884                       		ext.w	d4
0001A8A8 D444                       		add.w	d4,d2
0001A8AA B042                       		cmp.w	d2,d0
0001A8AC 6500                       		bcs.s	loc_18F38
0001A8AE 181A                       		move.b	(a2)+,d4
0001A8B0 4884                       		ext.w	d4
0001A8B2 D244                       		add.w	d4,d1
0001A8B4 181B                       		move.b	(a3)+,d4
0001A8B6 4884                       		ext.w	d4
0001A8B8 D644                       		add.w	d4,d3
0001A8BA B641                       		cmp.w	d1,d3
0001A8BC 6500                       		bcs.s	loc_18F38
0001A8BE 181A                       		move.b	(a2)+,d4
0001A8C0 4884                       		ext.w	d4
0001A8C2 D244                       		add.w	d4,d1
0001A8C4 181B                       		move.b	(a3)+,d4
0001A8C6 4884                       		ext.w	d4
0001A8C8 D644                       		add.w	d4,d3
0001A8CA B243                       		cmp.w	d3,d1
0001A8CC 6500                       		bcs.s	loc_18F38
0001A8CE 5428 0024                  		addq.b	#2,$24(a0)
0001A8D2 4268 0028                  		clr.w	$28(a0)
0001A8D6 4229 0020                  		clr.b	$20(a1)
0001A8DA 5329 0021                  		subq.b	#1,$21(a1)
0001A8DE 6600                       		bne.s	loc_18F38
0001A8E0 08E9 0007 0022             		bset	#7,$22(a1)
0001A8E6 4268 0010                  		clr.w	$10(a0)
0001A8EA 4268 0012                  		clr.w	$12(a0)
0001A8EE                            
0001A8EE                            loc_18F38:
0001A8EE 4A68 0012                  		tst.w	$12(a0)
0001A8F2 6A00                       		bpl.s	loc_18F5C
0001A8F4 4EB9 0000 E0B4             		jsr	ObjectFall
0001A8FA 3028 0034                  		move.w	$34(a0),d0
0001A8FE 0440 002F                  		subi.w	#$2F,d0
0001A902 B068 000C                  		cmp.w	$C(a0),d0
0001A906 6E00                       		bgt.s	loc_18F58
0001A908 4EB9 0000 E0B4             		jsr	ObjectFall
0001A90E                            
0001A90E                            loc_18F58:
0001A90E 6000 FF20                  		bra.w	loc_18E7A
0001A912                            ; ===========================================================================
0001A912                            
0001A912                            loc_18F5C:
0001A912 4EB9 0000 E0B4             		jsr	ObjectFall
0001A918 2268 003C                  		movea.l	$3C(a0),a1
0001A91C 45F9 0000 0000             		lea	(word_19018).l,a2
0001A922 7000                       		moveq	#0,d0
0001A924 1029 001A                  		move.b	$1A(a1),d0
0001A928 3228 0008                  		move.w	8(a0),d1
0001A92C 9268 0030                  		sub.w	$30(a0),d1
0001A930 6400                       		bcc.s	loc_18F7E
0001A932 5440                       		addq.w	#2,d0
0001A934                            
0001A934                            loc_18F7E:
0001A934 D040                       		add.w	d0,d0
0001A936 3228 0034                  		move.w	$34(a0),d1
0001A93A D272 0000                  		add.w	(a2,d0.w),d1
0001A93E B268 000C                  		cmp.w	$C(a0),d1
0001A942 6ECA                       		bgt.s	loc_18F58
0001A944 2268 003C                  		movea.l	$3C(a0),a1
0001A948 7202                       		moveq	#2,d1
0001A94A 4A68 0010                  		tst.w	$10(a0)
0001A94E 6B00                       		bmi.s	loc_18F9C
0001A950 7200                       		moveq	#0,d1
0001A952                            
0001A952                            loc_18F9C:
0001A952 317C 0000 0028             		move.w	#0,$28(a0)
0001A958                            
0001A958                            loc_18FA2:
0001A958 1341 003A                  		move.b	d1,$3A(a1)
0001A95C 1141 003A                  		move.b	d1,$3A(a0)
0001A960 B229 001A                  		cmp.b	$1A(a1),d1
0001A964 6700                       		beq.s	loc_19008
0001A966 08A9 0003 0022             		bclr	#3,$22(a1)
0001A96C 6700                       		beq.s	loc_19008
0001A96E 4229 0025                  		clr.b	$25(a1)
0001A972 137C 0002 0024             		move.b	#2,$24(a1)
0001A978 45F8 D000                  		lea	($FFFFD000).w,a2
0001A97C 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001A982 446A 0012                  		neg.w	$12(a2)
0001A986 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0001A98C 6600                       		bne.s	loc_18FDC
0001A98E E0EA 0012                  		asr	$12(a2)
0001A992                            
0001A992                            loc_18FDC:
0001A992 08EA 0001 0022             		bset	#1,$22(a2)
0001A998 08AA 0003 0022             		bclr	#3,$22(a2)
0001A99E 422A 003C                  		clr.b	$3C(a2)
0001A9A2 2F08                       		move.l	a0,-(sp)
0001A9A4 41D2                       		lea	(a2),a0
0001A9A6 4EBA 9610                  		jsr	Obj01_ChkRoll
0001A9AA 205F                       		movea.l	(sp)+,a0
0001A9AC 157C 0002 0024             		move.b	#2,$24(a2)
0001A9B2 303C 00CC                  		move.w	#$CC,d0
0001A9B6 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play "spring" sound
0001A9BC                            
0001A9BC                            loc_19008:
0001A9BC 4268 0010                  		clr.w	$10(a0)
0001A9C0 4268 0012                  		clr.w	$12(a0)
0001A9C4 5428 0024                  		addq.b	#2,$24(a0)
0001A9C8 6000 FE66                  		bra.w	loc_18E7A
0001A9CC                            ; ===========================================================================
0001A9CC FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001A9D6                            		even
0001A9D6 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001A9DA                            		even
0001A9DA 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001A9DE                            		even
0001A9DE                            ; ===========================================================================
0001A9DE                            
0001A9DE                            Obj7B_Explode:				; XREF: Obj7B_Index
0001A9DE 10BC 003F                  		move.b	#$3F,(a0)
0001A9E2 4228 0024                  		clr.b	$24(a0)
0001A9E6 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
0001A9EC 6700                       		beq.s	Obj7B_MakeFrag
0001A9EE 4E75                       		rts	
0001A9F0                            ; ===========================================================================
0001A9F0                            
0001A9F0                            Obj7B_MakeFrag:
0001A9F0 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001A9F6 7203                       		moveq	#3,d1
0001A9F8 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001A9FC                            
0001A9FC                            Obj7B_Loop:
0001A9FC 4EB9 0000 E59C             		jsr	SingleObjLoad
0001AA02 6600                       		bne.s	loc_1909A
0001AA04 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
0001AA08 137C 000A 0024             		move.b	#$A,$24(a1)
0001AA0E 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
0001AA16 137C 0003 0018             		move.b	#3,$18(a1)
0001AA1C 337C 0518 0002             		move.w	#$518,2(a1)
0001AA22 3368 0008 0008             		move.w	8(a0),8(a1)
0001AA28 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AA2E 335A 0010                  		move.w	(a2)+,$10(a1)
0001AA32 335A 0012                  		move.w	(a2)+,$12(a1)
0001AA36 137C 0098 0020             		move.b	#$98,$20(a1)
0001AA3C 0029 0004 0001             		ori.b	#4,1(a1)
0001AA42 08E9 0007 0001             		bset	#7,1(a1)
0001AA48 137C 000C 0019             		move.b	#$C,$19(a1)
0001AA4E                            
0001AA4E                            loc_1909A:
0001AA4E 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001AA52                            
0001AA52 4E75                       		rts	
0001AA54                            ; ===========================================================================
0001AA54 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
0001AA58 FF60 FDC0                  		dc.w $FF60, $FDC0
0001AA5C 0100 FCC0                  		dc.w $100, $FCC0
0001AA60 00A0 FDC0                  		dc.w $A0, $FDC0
0001AA64                            ; ===========================================================================
0001AA64                            
0001AA64                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
0001AA64 4EB9 0000 E0E0             		jsr	SpeedToPos
0001AA6A 3168 0008 0030             		move.w	8(a0),$30(a0)
0001AA70 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001AA76 0668 0018 0012             		addi.w	#$18,$12(a0)
0001AA7C 7004                       		moveq	#4,d0
0001AA7E C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001AA82 E448                       		lsr.w	#2,d0
0001AA84 1140 001A                  		move.b	d0,$1A(a0)
0001AA88 4A28 0001                  		tst.b	1(a0)
0001AA8C 6A00 F7DC                  		bpl.w	Obj7A_Delete
0001AA90 4E75                       		rts	
0001AA92                            ; ===========================================================================
0001AA92                            ; ---------------------------------------------------------------------------
0001AA92                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001AA92                            ; ---------------------------------------------------------------------------
0001AA92                            Map_obj7B:
0001AA92                            	include "_maps\obj7B.asm"
0001AA92                            ; ---------------------------------------------------------------------------
0001AA92                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001AA92                            ; ---------------------------------------------------------------------------
0001AA92 0000                       		dc.w byte_190E2-Map_obj7B
0001AA94 0000                       		dc.w byte_190E8-Map_obj7B
0001AA96 01                         byte_190E2:	dc.b 1
0001AA97 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001AA9C 01                         byte_190E8:	dc.b 1
0001AA9D FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001AAA2                            		even
0001AAA2                            		even
0001AAA2                            
0001AAA2                            ; ===========================================================================
0001AAA2                            ; ---------------------------------------------------------------------------
0001AAA2                            ; Object 75 - Eggman (SYZ)
0001AAA2                            ; ---------------------------------------------------------------------------
0001AAA2                            
0001AAA2                            Obj75:					; XREF: Obj_Index
0001AAA2 7000                       		moveq	#0,d0
0001AAA4 1028 0024                  		move.b	$24(a0),d0
0001AAA8 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001AAAC 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001AAB0                            ; ===========================================================================
0001AAB0 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001AAB2 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001AAB4 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001AAB6 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001AAB8 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001AABA                            
0001AABA 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
0001AABD 0401 05                    		dc.b 4,	1, 5
0001AAC0 0607 05                    		dc.b 6,	7, 5
0001AAC3 0800 05                    		dc.b 8,	0, 5
0001AAC6                            ; ===========================================================================
0001AAC6                            
0001AAC6                            Obj75_Main:				; XREF: Obj75_Index
0001AAC6 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
0001AACC 317C 04DA 000C             		move.w	#$4DA,$C(a0)
0001AAD2 3168 0008 0030             		move.w	8(a0),$30(a0)
0001AAD8 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001AADE 117C 000F 0020             		move.b	#$F,$20(a0)
0001AAE4 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001AAEA 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
0001AAEE 2248                       		movea.l	a0,a1
0001AAF0 7203                       		moveq	#3,d1
0001AAF2 6000                       		bra.s	Obj75_LoadBoss
0001AAF4                            ; ===========================================================================
0001AAF4                            
0001AAF4                            Obj75_Loop:
0001AAF4 4EB9 0000 E5B2             		jsr	SingleObjLoad2
0001AAFA 6600                       		bne.s	Obj75_ShipMain
0001AAFC 12BC 0075                  		move.b	#$75,(a1)
0001AB00 3368 0008 0008             		move.w	8(a0),8(a1)
0001AB06 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AB0C                            
0001AB0C                            Obj75_LoadBoss:				; XREF: Obj75_Main
0001AB0C 08A8 0000 0022             		bclr	#0,$22(a0)
0001AB12 4229 0025                  		clr.b	$25(a1)
0001AB16 135A 0024                  		move.b	(a2)+,$24(a1)
0001AB1A 135A 001C                  		move.b	(a2)+,$1C(a1)
0001AB1E 135A 0018                  		move.b	(a2)+,$18(a1)
0001AB22 237C 0001 96CA 0004        		move.l	#Map_Eggman,4(a1)
0001AB2A 337C 0400 0002             		move.w	#$400,2(a1)
0001AB30 137C 0004 0001             		move.b	#4,1(a1)
0001AB36 137C 0020 0019             		move.b	#$20,$19(a1)
0001AB3C 2348 0034                  		move.l	a0,$34(a1)
0001AB40 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001AB44                            
0001AB44                            Obj75_ShipMain:				; XREF: Obj75_Index
0001AB44 7000                       		moveq	#0,d0
0001AB46 1028 0025                  		move.b	$25(a0),d0
0001AB4A 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001AB4E 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001AB52 43F9 0001 967A             		lea	(Ani_Eggman).l,a1
0001AB58 4EB9 0000 B218             		jsr	AnimateSprite
0001AB5E 7003                       		moveq	#3,d0
0001AB60 C028 0022                  		and.b	$22(a0),d0
0001AB64 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001AB6A 8128 0001                  		or.b	d0,1(a0)
0001AB6E 4EF9 0000 E106             		jmp	DisplaySprite
0001AB74                            ; ===========================================================================
0001AB74 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001AB78 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001AB7C 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001AB80                            ; ===========================================================================
0001AB80                            
0001AB80                            loc_191CC:				; XREF: Obj75_ShipIndex
0001AB80 317C FF00 0010             		move.w	#-$100,$10(a0)
0001AB86 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001AB8C 6400                       		bcc.s	loc_191DE
0001AB8E 5428 0025                  		addq.b	#2,$25(a0)
0001AB92                            
0001AB92                            loc_191DE:
0001AB92 1028 003F                  		move.b	$3F(a0),d0
0001AB96 5428 003F                  		addq.b	#2,$3F(a0)
0001AB9A 4EB9 0000 33D4             		jsr	(CalcSine).l
0001ABA0 E440                       		asr.w	#2,d0
0001ABA2 3140 0012                  		move.w	d0,$12(a0)
0001ABA6                            
0001ABA6                            loc_191F2:
0001ABA6 6100 E6C2                  		bsr.w	BossMove
0001ABAA 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001ABB0 3168 0030 0008             		move.w	$30(a0),8(a0)
0001ABB6                            
0001ABB6                            loc_19202:
0001ABB6 3028 0008                  		move.w	8(a0),d0
0001ABBA 0440 2C00                  		subi.w	#$2C00,d0
0001ABBE EA48                       		lsr.w	#5,d0
0001ABC0 1140 0034                  		move.b	d0,$34(a0)
0001ABC4 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001ABCA 6400                       		bcc.s	locret_19256
0001ABCC 4A28 0022                  		tst.b	$22(a0)
0001ABD0 6B00                       		bmi.s	loc_19258
0001ABD2 4A28 0020                  		tst.b	$20(a0)
0001ABD6 6600                       		bne.s	locret_19256
0001ABD8 4A28 003E                  		tst.b	$3E(a0)
0001ABDC 6600                       		bne.s	loc_1923A
0001ABDE 117C 0020 003E             		move.b	#$20,$3E(a0)
0001ABE4 303C 00AC                  		move.w	#$AC,d0
0001ABE8 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001ABEE                            
0001ABEE                            loc_1923A:
0001ABEE 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001ABF2 7000                       		moveq	#0,d0
0001ABF4 4A51                       		tst.w	(a1)
0001ABF6 6600                       		bne.s	loc_19248
0001ABF8 303C 0EEE                  		move.w	#$EEE,d0
0001ABFC                            
0001ABFC                            loc_19248:
0001ABFC 3280                       		move.w	d0,(a1)
0001ABFE 5328 003E                  		subq.b	#1,$3E(a0)
0001AC02 6600                       		bne.s	locret_19256
0001AC04 117C 000F 0020             		move.b	#$F,$20(a0)
0001AC0A                            
0001AC0A                            locret_19256:
0001AC0A 4E75                       		rts	
0001AC0C                            ; ===========================================================================
0001AC0C                            
0001AC0C                            loc_19258:				; XREF: loc_19202
0001AC0C 7064                       		moveq	#100,d0
0001AC0E 6100 0000                  		bsr.w	AddPoints
0001AC12 117C 0006 0025             		move.b	#6,$25(a0)
0001AC18 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001AC1E 4268 0010                  		clr.w	$10(a0)
0001AC22 4E75                       		rts	
0001AC24                            ; ===========================================================================
0001AC24                            
0001AC24                            loc_19270:				; XREF: Obj75_ShipIndex
0001AC24 3028 0030                  		move.w	$30(a0),d0
0001AC28 317C 0140 0010             		move.w	#$140,$10(a0)
0001AC2E 0828 0000 0022             		btst	#0,$22(a0)
0001AC34 6600                       		bne.s	loc_1928E
0001AC36 4468 0010                  		neg.w	$10(a0)
0001AC3A 0C40 2C08                  		cmpi.w	#$2C08,d0
0001AC3E 6E00                       		bgt.s	loc_1929E
0001AC40 6000                       		bra.s	loc_19294
0001AC42                            ; ===========================================================================
0001AC42                            
0001AC42                            loc_1928E:
0001AC42 0C40 2D38                  		cmpi.w	#$2D38,d0
0001AC46 6D00                       		blt.s	loc_1929E
0001AC48                            
0001AC48                            loc_19294:
0001AC48 0868 0000 0022             		bchg	#0,$22(a0)
0001AC4E 4228 003D                  		clr.b	$3D(a0)
0001AC52                            
0001AC52                            loc_1929E:
0001AC52 0440 2C10                  		subi.w	#$2C10,d0
0001AC56 0240 001F                  		andi.w	#$1F,d0
0001AC5A 0440 001F                  		subi.w	#$1F,d0
0001AC5E 6A00                       		bpl.s	loc_192AE
0001AC60 4440                       		neg.w	d0
0001AC62                            
0001AC62                            loc_192AE:
0001AC62 5340                       		subq.w	#1,d0
0001AC64 6E00                       		bgt.s	loc_192E8
0001AC66 4A28 003D                  		tst.b	$3D(a0)
0001AC6A 6600                       		bne.s	loc_192E8
0001AC6C 3238 D008                  		move.w	($FFFFD008).w,d1
0001AC70 0441 2C00                  		subi.w	#$2C00,d1
0001AC74 EA41                       		asr.w	#5,d1
0001AC76 B228 0034                  		cmp.b	$34(a0),d1
0001AC7A 6600                       		bne.s	loc_192E8
0001AC7C 7000                       		moveq	#0,d0
0001AC7E 1028 0034                  		move.b	$34(a0),d0
0001AC82 EB40                       		asl.w	#5,d0
0001AC84 0640 2C10                  		addi.w	#$2C10,d0
0001AC88 3140 0030                  		move.w	d0,$30(a0)
0001AC8C 6100 0000                  		bsr.w	Obj75_FindBlocks
0001AC90 5428 0025                  		addq.b	#2,$25(a0)
0001AC94 4268 0028                  		clr.w	$28(a0)
0001AC98 4268 0010                  		clr.w	$10(a0)
0001AC9C                            
0001AC9C                            loc_192E8:
0001AC9C 6000 FEF4                  		bra.w	loc_191DE
0001ACA0                            ; ===========================================================================
0001ACA0                            
0001ACA0                            loc_192EC:				; XREF: Obj75_ShipIndex
0001ACA0 7000                       		moveq	#0,d0
0001ACA2 1028 0028                  		move.b	$28(a0),d0
0001ACA6 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001ACAA 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001ACAE                            ; ===========================================================================
0001ACAE 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001ACB0 0000                       		dc.w loc_19348-off_192FA
0001ACB2 0000                       		dc.w loc_1938E-off_192FA
0001ACB4 0000                       		dc.w loc_193D0-off_192FA
0001ACB6                            ; ===========================================================================
0001ACB6                            
0001ACB6                            loc_19302:				; XREF: off_192FA
0001ACB6 317C 0180 0012             		move.w	#$180,$12(a0)
0001ACBC 3028 0038                  		move.w	$38(a0),d0
0001ACC0 0C40 0556                  		cmpi.w	#$556,d0
0001ACC4 6500                       		bcs.s	loc_19344
0001ACC6 317C 0556 0038             		move.w	#$556,$38(a0)
0001ACCC 4268 003C                  		clr.w	$3C(a0)
0001ACD0 70FF                       		moveq	#-1,d0
0001ACD2 3028 0036                  		move.w	$36(a0),d0
0001ACD6 6700                       		beq.s	loc_1933C
0001ACD8 2240                       		movea.l	d0,a1
0001ACDA 137C 00FF 0029             		move.b	#-1,$29(a1)
0001ACE0 117C 00FF 0029             		move.b	#-1,$29(a0)
0001ACE6 2348 0034                  		move.l	a0,$34(a1)
0001ACEA 317C 0032 003C             		move.w	#$32,$3C(a0)
0001ACF0                            
0001ACF0                            loc_1933C:
0001ACF0 4268 0012                  		clr.w	$12(a0)
0001ACF4 5428 0028                  		addq.b	#2,$28(a0)
0001ACF8                            
0001ACF8                            loc_19344:
0001ACF8 6000 FEAC                  		bra.w	loc_191F2
0001ACFC                            ; ===========================================================================
0001ACFC                            
0001ACFC                            loc_19348:				; XREF: off_192FA
0001ACFC 5368 003C                  		subq.w	#1,$3C(a0)
0001AD00 6A00                       		bpl.s	loc_19366
0001AD02 5428 0028                  		addq.b	#2,$28(a0)
0001AD06 317C F800 0012             		move.w	#-$800,$12(a0)
0001AD0C 4A68 0036                  		tst.w	$36(a0)
0001AD10 6600                       		bne.s	loc_19362
0001AD12 E0E8 0012                  		asr	$12(a0)
0001AD16                            
0001AD16                            loc_19362:
0001AD16 7000                       		moveq	#0,d0
0001AD18 6000                       		bra.s	loc_1937C
0001AD1A                            ; ===========================================================================
0001AD1A                            
0001AD1A                            loc_19366:
0001AD1A 7000                       		moveq	#0,d0
0001AD1C 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001AD22 6E00                       		bgt.s	loc_1937C
0001AD24 7002                       		moveq	#2,d0
0001AD26 0828 0001 003D             		btst	#1,$3D(a0)
0001AD2C 6700                       		beq.s	loc_1937C
0001AD2E 4440                       		neg.w	d0
0001AD30                            
0001AD30                            loc_1937C:
0001AD30 D068 0038                  		add.w	$38(a0),d0
0001AD34 3140 000C                  		move.w	d0,$C(a0)
0001AD38 3168 0030 0008             		move.w	$30(a0),8(a0)
0001AD3E 6000 FE76                  		bra.w	loc_19202
0001AD42                            ; ===========================================================================
0001AD42                            
0001AD42                            loc_1938E:				; XREF: off_192FA
0001AD42 303C 04DA                  		move.w	#$4DA,d0
0001AD46 4A68 0036                  		tst.w	$36(a0)
0001AD4A 6700                       		beq.s	loc_1939C
0001AD4C 0440 0018                  		subi.w	#$18,d0
0001AD50                            
0001AD50                            loc_1939C:
0001AD50 B068 0038                  		cmp.w	$38(a0),d0
0001AD54 6D00                       		blt.s	loc_193BE
0001AD56 317C 0008 003C             		move.w	#8,$3C(a0)
0001AD5C 4A68 0036                  		tst.w	$36(a0)
0001AD60 6700                       		beq.s	loc_193B4
0001AD62 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001AD68                            
0001AD68                            loc_193B4:
0001AD68 5428 0028                  		addq.b	#2,$28(a0)
0001AD6C 4268 0012                  		clr.w	$12(a0)
0001AD70 6000                       		bra.s	loc_193CC
0001AD72                            ; ===========================================================================
0001AD72                            
0001AD72                            loc_193BE:
0001AD72 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
0001AD78 6C00                       		bge.s	loc_193CC
0001AD7A 0668 000C 0012             		addi.w	#$C,$12(a0)
0001AD80                            
0001AD80                            loc_193CC:
0001AD80 6000 FE24                  		bra.w	loc_191F2
0001AD84                            ; ===========================================================================
0001AD84                            
0001AD84                            loc_193D0:				; XREF: off_192FA
0001AD84 5368 003C                  		subq.w	#1,$3C(a0)
0001AD88 6E00                       		bgt.s	loc_19406
0001AD8A 6B00                       		bmi.s	loc_193EE
0001AD8C 70FF                       		moveq	#-1,d0
0001AD8E 3028 0036                  		move.w	$36(a0),d0
0001AD92 6700                       		beq.s	loc_193E8
0001AD94 2240                       		movea.l	d0,a1
0001AD96 137C 000A 0029             		move.b	#$A,$29(a1)
0001AD9C                            
0001AD9C                            loc_193E8:
0001AD9C 4268 0036                  		clr.w	$36(a0)
0001ADA0 6000                       		bra.s	loc_19406
0001ADA2                            ; ===========================================================================
0001ADA2                            
0001ADA2                            loc_193EE:
0001ADA2 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001ADA8 6600                       		bne.s	loc_19406
0001ADAA 4228 0029                  		clr.b	$29(a0)
0001ADAE 5528 0025                  		subq.b	#2,$25(a0)
0001ADB2 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001ADB8 6000                       		bra.s	loc_19446
0001ADBA                            ; ===========================================================================
0001ADBA                            
0001ADBA                            loc_19406:
0001ADBA 7001                       		moveq	#1,d0
0001ADBC 4A68 0036                  		tst.w	$36(a0)
0001ADC0 6700                       		beq.s	loc_19410
0001ADC2 7002                       		moveq	#2,d0
0001ADC4                            
0001ADC4                            loc_19410:
0001ADC4 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001ADCA 6700                       		beq.s	loc_19424
0001ADCC 6D00                       		blt.s	loc_1941C
0001ADCE 4440                       		neg.w	d0
0001ADD0                            
0001ADD0                            loc_1941C:
0001ADD0 4A68 0036                  		tst.w	$36(a0)
0001ADD4 D168 0038                  		add.w	d0,$38(a0)
0001ADD8                            
0001ADD8                            loc_19424:
0001ADD8 7000                       		moveq	#0,d0
0001ADDA 4A68 0036                  		tst.w	$36(a0)
0001ADDE 6700                       		beq.s	loc_19438
0001ADE0 7002                       		moveq	#2,d0
0001ADE2 0828 0000 003D             		btst	#0,$3D(a0)
0001ADE8 6700                       		beq.s	loc_19438
0001ADEA 4440                       		neg.w	d0
0001ADEC                            
0001ADEC                            loc_19438:
0001ADEC D068 0038                  		add.w	$38(a0),d0
0001ADF0 3140 000C                  		move.w	d0,$C(a0)
0001ADF4 3168 0030 0008             		move.w	$30(a0),8(a0)
0001ADFA                            
0001ADFA                            loc_19446:
0001ADFA 6000 FDBA                  		bra.w	loc_19202
0001ADFE                            
0001ADFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ADFE                            
0001ADFE                            
0001ADFE                            Obj75_FindBlocks:			; XREF: loc_192AE
0001ADFE 4268 0036                  		clr.w	$36(a0)
0001AE02 43F8 D040                  		lea	($FFFFD040).w,a1
0001AE06 703E                       		moveq	#$3E,d0
0001AE08 7276                       		moveq	#$76,d1
0001AE0A 1428 0034                  		move.b	$34(a0),d2
0001AE0E                            
0001AE0E                            Obj75_FindLoop:
0001AE0E B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001AE10 6600                       		bne.s	loc_1946A	; if not, branch
0001AE12 B429 0028                  		cmp.b	$28(a1),d2
0001AE16 6600                       		bne.s	loc_1946A
0001AE18 3149 0036                  		move.w	a1,$36(a0)
0001AE1C 6000                       		bra.s	locret_19472
0001AE1E                            ; ===========================================================================
0001AE1E                            
0001AE1E                            loc_1946A:
0001AE1E 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001AE22 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001AE26                            
0001AE26                            locret_19472:
0001AE26 4E75                       		rts	
0001AE28                            ; End of function Obj75_FindBlocks
0001AE28                            
0001AE28                            ; ===========================================================================
0001AE28                            
0001AE28                            loc_19474:				; XREF: Obj75_ShipIndex
0001AE28 5368 003C                  		subq.w	#1,$3C(a0)
0001AE2C 6B00                       		bmi.s	loc_1947E
0001AE2E 6000 E3F8                  		bra.w	BossDefeated
0001AE32                            ; ===========================================================================
0001AE32                            
0001AE32                            loc_1947E:
0001AE32 5428 0025                  		addq.b	#2,$25(a0)
0001AE36 4268 0012                  		clr.w	$12(a0)
0001AE3A 08E8 0000 0022             		bset	#0,$22(a0)
0001AE40 08A8 0007 0022             		bclr	#7,$22(a0)
0001AE46 4268 0010                  		clr.w	$10(a0)
0001AE4A 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001AE50 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001AE54 6600                       		bne.s	loc_194A8
0001AE56 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001AE5C                            
0001AE5C                            loc_194A8:
0001AE5C 6000 FD58                  		bra.w	loc_19202
0001AE60                            ; ===========================================================================
0001AE60                            
0001AE60                            loc_194AC:				; XREF: Obj75_ShipIndex
0001AE60 5268 003C                  		addq.w	#1,$3C(a0)
0001AE64 6700                       		beq.s	loc_194BC
0001AE66 6A00                       		bpl.s	loc_194C2
0001AE68 0668 0018 0012             		addi.w	#$18,$12(a0)
0001AE6E 6000                       		bra.s	loc_194EE
0001AE70                            ; ===========================================================================
0001AE70                            
0001AE70                            loc_194BC:
0001AE70 4268 0012                  		clr.w	$12(a0)
0001AE74 6000                       		bra.s	loc_194EE
0001AE76                            ; ===========================================================================
0001AE76                            
0001AE76                            loc_194C2:
0001AE76 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001AE7C 6500                       		bcs.s	loc_194DA
0001AE7E 6700                       		beq.s	loc_194E0
0001AE80 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001AE86 6500                       		bcs.s	loc_194EE
0001AE88 5428 0025                  		addq.b	#2,$25(a0)
0001AE8C 6000                       		bra.s	loc_194EE
0001AE8E                            ; ===========================================================================
0001AE8E                            
0001AE8E                            loc_194DA:
0001AE8E 5168 0012                  		subq.w	#8,$12(a0)
0001AE92 6000                       		bra.s	loc_194EE
0001AE94                            ; ===========================================================================
0001AE94                            
0001AE94                            loc_194E0:
0001AE94 4268 0012                  		clr.w	$12(a0)
0001AE98 303C 0085                  		move.w	#$85,d0
0001AE9C 4EB9 0000 1470             		jsr	(PlaySound).l	; play SYZ music
0001AEA2                            
0001AEA2                            loc_194EE:
0001AEA2 6000 FD02                  		bra.w	loc_191F2
0001AEA6                            ; ===========================================================================
0001AEA6                            
0001AEA6                            loc_194F2:				; XREF: Obj75_ShipIndex
0001AEA6 317C 0400 0010             		move.w	#$400,$10(a0)
0001AEAC 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001AEB2 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
0001AEB8 6400                       		bcc.s	loc_1950C
0001AEBA 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001AEBE 6000                       		bra.s	loc_19512
0001AEC0                            ; ===========================================================================
0001AEC0                            
0001AEC0                            loc_1950C:
0001AEC0 4A28 0001                  		tst.b	1(a0)
0001AEC4 6A00                       		bpl.s	Obj75_ShipDelete
0001AEC6                            
0001AEC6                            loc_19512:
0001AEC6 6100 E3A2                  		bsr.w	BossMove
0001AECA 6000 FCC6                  		bra.w	loc_191DE
0001AECE                            ; ===========================================================================
0001AECE                            
0001AECE                            Obj75_ShipDelete:
0001AECE 4EF9 0000 E142             		jmp	DeleteObject
0001AED4                            ; ===========================================================================
0001AED4                            
0001AED4                            Obj75_FaceMain:				; XREF: Obj75_Index
0001AED4 7201                       		moveq	#1,d1
0001AED6 2268 0034                  		movea.l	$34(a0),a1
0001AEDA 7000                       		moveq	#0,d0
0001AEDC 1029 0025                  		move.b	$25(a1),d0
0001AEE0 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001AEE4 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001AEE8 1141 001C                  		move.b	d1,$1C(a0)
0001AEEC 1010                       		move.b	(a0),d0
0001AEEE B011                       		cmp.b	(a1),d0
0001AEF0 6600                       		bne.s	Obj75_FaceDelete
0001AEF2 6000                       		bra.s	loc_195BE
0001AEF4                            ; ===========================================================================
0001AEF4                            
0001AEF4                            Obj75_FaceDelete:
0001AEF4 4EF9 0000 E142             		jmp	DeleteObject
0001AEFA                            ; ===========================================================================
0001AEFA 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001AEFE 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001AF02 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001AF06                            ; ===========================================================================
0001AF06                            
0001AF06                            loc_19552:				; XREF: off_19546
0001AF06 720A                       		moveq	#$A,d1
0001AF08 4E75                       		rts	
0001AF0A                            ; ===========================================================================
0001AF0A                            
0001AF0A                            loc_19556:				; XREF: off_19546
0001AF0A 7206                       		moveq	#6,d1
0001AF0C 4E75                       		rts	
0001AF0E                            ; ===========================================================================
0001AF0E                            
0001AF0E                            loc_1955A:				; XREF: off_19546
0001AF0E 7000                       		moveq	#0,d0
0001AF10 1029 0028                  		move.b	$28(a1),d0
0001AF14 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001AF18 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001AF1C                            ; ===========================================================================
0001AF1C 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001AF20 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001AF24                            ; ===========================================================================
0001AF24                            
0001AF24                            loc_19570:				; XREF: off_19568
0001AF24 6000                       		bra.s	loc_19574
0001AF26                            ; ===========================================================================
0001AF26                            
0001AF26                            loc_19572:				; XREF: off_19568
0001AF26 7206                       		moveq	#6,d1
0001AF28                            
0001AF28                            loc_19574:				; XREF: off_19546
0001AF28 4A29 0020                  		tst.b	$20(a1)
0001AF2C 6600                       		bne.s	loc_1957E
0001AF2E 7205                       		moveq	#5,d1
0001AF30 4E75                       		rts	
0001AF32                            ; ===========================================================================
0001AF32                            
0001AF32                            loc_1957E:
0001AF32 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001AF38 6500                       		bcs.s	locret_19588
0001AF3A 7204                       		moveq	#4,d1
0001AF3C                            
0001AF3C                            locret_19588:
0001AF3C 4E75                       		rts	
0001AF3E                            ; ===========================================================================
0001AF3E                            
0001AF3E                            Obj75_FlameMain:			; XREF: Obj75_Index
0001AF3E 117C 0007 001C             		move.b	#7,$1C(a0)
0001AF44 2268 0034                  		movea.l	$34(a0),a1
0001AF48 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001AF4E 6600                       		bne.s	loc_195AA
0001AF50 117C 000B 001C             		move.b	#$B,$1C(a0)
0001AF56 4A28 0001                  		tst.b	1(a0)
0001AF5A 6A00                       		bpl.s	Obj75_FlameDelete
0001AF5C 6000                       		bra.s	loc_195B6
0001AF5E                            ; ===========================================================================
0001AF5E                            
0001AF5E                            loc_195AA:
0001AF5E 4A69 0010                  		tst.w	$10(a1)
0001AF62 6700                       		beq.s	loc_195B6
0001AF64 117C 0008 001C             		move.b	#8,$1C(a0)
0001AF6A                            
0001AF6A                            loc_195B6:
0001AF6A 6000                       		bra.s	loc_195BE
0001AF6C                            ; ===========================================================================
0001AF6C                            
0001AF6C                            Obj75_FlameDelete:
0001AF6C 4EF9 0000 E142             		jmp	DeleteObject
0001AF72                            ; ===========================================================================
0001AF72                            
0001AF72                            loc_195BE:
0001AF72 43F9 0001 967A             		lea	(Ani_Eggman).l,a1
0001AF78 4EB9 0000 B218             		jsr	AnimateSprite
0001AF7E 2268 0034                  		movea.l	$34(a0),a1
0001AF82 3169 0008 0008             		move.w	8(a1),8(a0)
0001AF88 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AF8E                            
0001AF8E                            loc_195DA:
0001AF8E 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001AF94 7003                       		moveq	#3,d0
0001AF96 C028 0022                  		and.b	$22(a0),d0
0001AF9A 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001AFA0 8128 0001                  		or.b	d0,1(a0)
0001AFA4 4EF9 0000 E106             		jmp	DisplaySprite
0001AFAA                            ; ===========================================================================
0001AFAA                            
0001AFAA                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001AFAA 217C 0001 9792 0004        		move.l	#Map_BossItems,4(a0)
0001AFB2 317C 246C 0002             		move.w	#$246C,2(a0)
0001AFB8 117C 0005 001A             		move.b	#5,$1A(a0)
0001AFBE 2268 0034                  		movea.l	$34(a0),a1
0001AFC2 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001AFC8 6600                       		bne.s	loc_1961C
0001AFCA 4A28 0001                  		tst.b	1(a0)
0001AFCE 6A00                       		bpl.s	Obj75_SpikeDelete
0001AFD0                            
0001AFD0                            loc_1961C:
0001AFD0 3169 0008 0008             		move.w	8(a1),8(a0)
0001AFD6 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AFDC 3028 003C                  		move.w	$3C(a0),d0
0001AFE0 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001AFE6 6600                       		bne.s	loc_19652
0001AFE8 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001AFEE 6700                       		beq.s	loc_1964C
0001AFF0 4A29 0028                  		tst.b	$28(a1)
0001AFF4 6600                       		bne.s	loc_19658
0001AFF6 0C40 0094                  		cmpi.w	#$94,d0
0001AFFA 6C00                       		bge.s	loc_19658
0001AFFC 5E40                       		addq.w	#7,d0
0001AFFE 6000                       		bra.s	loc_19658
0001B000                            ; ===========================================================================
0001B000                            
0001B000                            loc_1964C:
0001B000 4A69 003C                  		tst.w	$3C(a1)
0001B004 6A00                       		bpl.s	loc_19658
0001B006                            
0001B006                            loc_19652:
0001B006 4A40                       		tst.w	d0
0001B008 6F00                       		ble.s	loc_19658
0001B00A 5B40                       		subq.w	#5,d0
0001B00C                            
0001B00C                            loc_19658:
0001B00C 3140 003C                  		move.w	d0,$3C(a0)
0001B010 E440                       		asr.w	#2,d0
0001B012 D168 000C                  		add.w	d0,$C(a0)
0001B016 117C 0008 0019             		move.b	#8,$19(a0)
0001B01C 117C 000C 0016             		move.b	#$C,$16(a0)
0001B022 4228 0020                  		clr.b	$20(a0)
0001B026 2268 0034                  		movea.l	$34(a0),a1
0001B02A 4A29 0020                  		tst.b	$20(a1)
0001B02E 6700                       		beq.s	loc_19688
0001B030 4A29 0029                  		tst.b	$29(a1)
0001B034 6600                       		bne.s	loc_19688
0001B036 117C 0084 0020             		move.b	#$84,$20(a0)
0001B03C                            
0001B03C                            loc_19688:
0001B03C 6000 FF50                  		bra.w	loc_195DA
0001B040                            ; ===========================================================================
0001B040                            
0001B040                            Obj75_SpikeDelete:
0001B040 4EF9 0000 E142             		jmp	DeleteObject
0001B046                            ; ===========================================================================
0001B046                            ; ---------------------------------------------------------------------------
0001B046                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001B046                            ; ---------------------------------------------------------------------------
0001B046                            
0001B046                            Obj76:					; XREF: Obj_Index
0001B046 7000                       		moveq	#0,d0
0001B048 1028 0024                  		move.b	$24(a0),d0
0001B04C 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001B050 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001B054                            ; ===========================================================================
0001B054 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001B056 0000                       		dc.w Obj76_Action-Obj76_Index
0001B058 0000                       		dc.w loc_19762-Obj76_Index
0001B05A                            ; ===========================================================================
0001B05A                            
0001B05A                            Obj76_Main:				; XREF: Obj76_Index
0001B05A 7800                       		moveq	#0,d4
0001B05C 3A3C 2C10                  		move.w	#$2C10,d5
0001B060 7C09                       		moveq	#9,d6
0001B062 43D0                       		lea	(a0),a1
0001B064 6000                       		bra.s	Obj76_MakeBlock
0001B066                            ; ===========================================================================
0001B066                            
0001B066                            Obj76_Loop:
0001B066 4EB9 0000 E59C             		jsr	SingleObjLoad
0001B06C 6600                       		bne.s	Obj76_ExitLoop
0001B06E                            
0001B06E                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001B06E 12BC 0076                  		move.b	#$76,(a1)
0001B072 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001B07A 337C 4000 0002             		move.w	#$4000,2(a1)
0001B080 137C 0004 0001             		move.b	#4,1(a1)
0001B086 137C 0010 0019             		move.b	#$10,$19(a1)
0001B08C 137C 0010 0016             		move.b	#$10,$16(a1)
0001B092 137C 0003 0018             		move.b	#3,$18(a1)
0001B098 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001B09C 337C 0582 000C             		move.w	#$582,$C(a1)
0001B0A2 3344 0028                  		move.w	d4,$28(a1)
0001B0A6 0644 0101                  		addi.w	#$101,d4
0001B0AA 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001B0AE 5429 0024                  		addq.b	#2,$24(a1)
0001B0B2 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001B0B6                            
0001B0B6                            Obj76_ExitLoop:
0001B0B6 4E75                       		rts	
0001B0B8                            ; ===========================================================================
0001B0B8                            
0001B0B8                            Obj76_Action:				; XREF: Obj76_Index
0001B0B8 1028 0029                  		move.b	$29(a0),d0
0001B0BC B028 0028                  		cmp.b	$28(a0),d0
0001B0C0 6700                       		beq.s	Obj76_Solid
0001B0C2 4A00                       		tst.b	d0
0001B0C4 6B00                       		bmi.s	loc_19718
0001B0C6                            
0001B0C6                            loc_19712:
0001B0C6 6100 0000                  		bsr.w	Obj76_Break
0001B0CA 6000                       		bra.s	Obj76_Display
0001B0CC                            ; ===========================================================================
0001B0CC                            
0001B0CC                            loc_19718:
0001B0CC 2268 0034                  		movea.l	$34(a0),a1
0001B0D0 4A29 0021                  		tst.b	$21(a1)
0001B0D4 67F0                       		beq.s	loc_19712
0001B0D6 3169 0008 0008             		move.w	8(a1),8(a0)
0001B0DC 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B0E2 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001B0E8 B2C8                       		cmpa.w	a0,a1
0001B0EA 6500                       		bcs.s	Obj76_Display
0001B0EC 3029 0012                  		move.w	$12(a1),d0
0001B0F0 48C0                       		ext.l	d0
0001B0F2 E080                       		asr.l	#8,d0
0001B0F4 D168 000C                  		add.w	d0,$C(a0)
0001B0F8 6000                       		bra.s	Obj76_Display
0001B0FA                            ; ===========================================================================
0001B0FA                            
0001B0FA                            Obj76_Solid:				; XREF: Obj76_Action
0001B0FA 323C 001B                  		move.w	#$1B,d1
0001B0FE 343C 0010                  		move.w	#$10,d2
0001B102 363C 0011                  		move.w	#$11,d3
0001B106 3828 0008                  		move.w	8(a0),d4
0001B10A 4EB9 0001 04F0             		jsr	SolidObject
0001B110                            
0001B110                            Obj76_Display:				; XREF: Obj76_Action
0001B110 4EF9 0000 E106             		jmp	DisplaySprite
0001B116                            ; ===========================================================================
0001B116                            
0001B116                            loc_19762:				; XREF: Obj76_Index
0001B116 4A28 0001                  		tst.b	1(a0)
0001B11A 6A00                       		bpl.s	Obj76_Delete
0001B11C 4EB9 0000 E0B4             		jsr	ObjectFall
0001B122 4EF9 0000 E106             		jmp	DisplaySprite
0001B128                            ; ===========================================================================
0001B128                            
0001B128                            Obj76_Delete:
0001B128 4EF9 0000 E142             		jmp	DeleteObject
0001B12E                            
0001B12E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B12E                            
0001B12E                            
0001B12E                            Obj76_Break:				; XREF: Obj76_Action
0001B12E 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001B132 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001B136 7801                       		moveq	#1,d4
0001B138 7203                       		moveq	#3,d1
0001B13A 7438                       		moveq	#$38,d2
0001B13C 5428 0024                  		addq.b	#2,$24(a0)
0001B140 117C 0008 0019             		move.b	#8,$19(a0)
0001B146 117C 0008 0016             		move.b	#8,$16(a0)
0001B14C 43D0                       		lea	(a0),a1
0001B14E 6000                       		bra.s	Obj76_MakeFrag
0001B150                            ; ===========================================================================
0001B150                            
0001B150                            Obj76_LoopFrag:
0001B150 4EB9 0000 E5B2             		jsr	SingleObjLoad2
0001B156 6600                       		bne.s	loc_197D4
0001B158                            
0001B158                            Obj76_MakeFrag:
0001B158 45D0                       		lea	(a0),a2
0001B15A 47D1                       		lea	(a1),a3
0001B15C 7603                       		moveq	#3,d3
0001B15E                            
0001B15E                            loc_197AA:
0001B15E 26DA                       		move.l	(a2)+,(a3)+
0001B160 26DA                       		move.l	(a2)+,(a3)+
0001B162 26DA                       		move.l	(a2)+,(a3)+
0001B164 26DA                       		move.l	(a2)+,(a3)+
0001B166 51CB FFF6                  		dbf	d3,loc_197AA
0001B16A                            
0001B16A 335C 0010                  		move.w	(a4)+,$10(a1)
0001B16E 335C 0012                  		move.w	(a4)+,$12(a1)
0001B172 361D                       		move.w	(a5)+,d3
0001B174 D769 0008                  		add.w	d3,8(a1)
0001B178 361D                       		move.w	(a5)+,d3
0001B17A D769 000C                  		add.w	d3,$C(a1)
0001B17E 1344 001A                  		move.b	d4,$1A(a1)
0001B182 5244                       		addq.w	#1,d4
0001B184 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001B188                            
0001B188                            loc_197D4:
0001B188 303C 00CB                  		move.w	#$CB,d0
0001B18C 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play smashing sound
0001B192                            ; End of function Obj76_Break
0001B192                            
0001B192                            ; ===========================================================================
0001B192 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001B196 0180 FE00                  		dc.w $180, $FE00
0001B19A FF00 FF00                  		dc.w $FF00, $FF00
0001B19E 0100 FF00                  		dc.w $100, $FF00
0001B1A2 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001B1A6 0010 0000                  		dc.w $10, 0
0001B1AA 0000 0010                  		dc.w 0,	$10
0001B1AE 0010 0010                  		dc.w $10, $10
0001B1B2                            ; ---------------------------------------------------------------------------
0001B1B2                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001B1B2                            ; ---------------------------------------------------------------------------
0001B1B2                            Map_obj76:
0001B1B2                            	include "_maps\obj76.asm"
0001B1B2                            ; ---------------------------------------------------------------------------
0001B1B2                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001B1B2                            ; ---------------------------------------------------------------------------
0001B1B2 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001B1B6 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001B1BA 0000                       		dc.w byte_19826-Map_obj76
0001B1BC 02                         byte_19808:	dc.b 2
0001B1BD F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001B1C2 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001B1C7 00                         		dc.b 0
0001B1C8 01                         byte_19814:	dc.b 1
0001B1C9 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001B1CE 01                         byte_1981A:	dc.b 1
0001B1CF F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001B1D4 01                         byte_19820:	dc.b 1
0001B1D5 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001B1DA 01                         byte_19826:	dc.b 1
0001B1DB F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001B1E0                            		even
0001B1E0                            		even
0001B1E0                            
0001B1E0                            ; ===========================================================================
0001B1E0                            
0001B1E0                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001B1E0 4EF9 0000 E142             		jmp	DeleteObject
0001B1E6                            ; ===========================================================================
0001B1E6                            ; ---------------------------------------------------------------------------
0001B1E6                            ; Object 82 - Eggman (SBZ2)
0001B1E6                            ; ---------------------------------------------------------------------------
0001B1E6                            
0001B1E6                            Obj82:					; XREF: Obj_Index
0001B1E6 7000                       		moveq	#0,d0
0001B1E8 1028 0024                  		move.b	$24(a0),d0
0001B1EC 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001B1F0 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001B1F4                            ; ===========================================================================
0001B1F4 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001B1F6 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001B1F8 0000                       		dc.w Obj82_Switch-Obj82_Index
0001B1FA                            
0001B1FA 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001B1FD 0400 03                    		dc.b 4,	0, 3
0001B200                            ; ===========================================================================
0001B200                            
0001B200                            Obj82_Main:				; XREF: Obj82_Index
0001B200 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001B204 317C 2160 0008             		move.w	#$2160,8(a0)
0001B20A 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001B210 117C 000F 0020             		move.b	#$F,$20(a0)
0001B216 117C 0010 0021             		move.b	#$10,$21(a0)
0001B21C 08A8 0000 0022             		bclr	#0,$22(a0)
0001B222 4228 0025                  		clr.b	$25(a0)
0001B226 115A 0024                  		move.b	(a2)+,$24(a0)
0001B22A 115A 001C                  		move.b	(a2)+,$1C(a0)
0001B22E 115A 0018                  		move.b	(a2)+,$18(a0)
0001B232 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001B23A 317C 0400 0002             		move.w	#$400,2(a0)
0001B240 117C 0004 0001             		move.b	#4,1(a0)
0001B246 08E8 0007 0001             		bset	#7,1(a0)
0001B24C 117C 0020 0019             		move.b	#$20,$19(a0)
0001B252 4EB9 0000 E5B2             		jsr	SingleObjLoad2
0001B258 6600                       		bne.s	Obj82_Eggman
0001B25A 2348 0034                  		move.l	a0,$34(a1)
0001B25E 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001B262 337C 2130 0008             		move.w	#$2130,8(a1)
0001B268 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001B26E 4228 0025                  		clr.b	$25(a0)
0001B272 135A 0024                  		move.b	(a2)+,$24(a1)
0001B276 135A 001C                  		move.b	(a2)+,$1C(a1)
0001B27A 135A 0018                  		move.b	(a2)+,$18(a1)
0001B27E 237C 0000 C9A0 0004        		move.l	#Map_obj32,4(a1)
0001B286 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001B28C 137C 0004 0001             		move.b	#4,1(a1)
0001B292 08E9 0007 0001             		bset	#7,1(a1)
0001B298 137C 0010 0019             		move.b	#$10,$19(a1)
0001B29E 137C 0000 001A             		move.b	#0,$1A(a1)
0001B2A4                            
0001B2A4                            Obj82_Eggman:				; XREF: Obj82_Index
0001B2A4 7000                       		moveq	#0,d0
0001B2A6 1028 0025                  		move.b	$25(a0),d0
0001B2AA 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001B2AE 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001B2B2 43FA 0000                  		lea	Ani_obj82(pc),a1
0001B2B6 4EB9 0000 B218             		jsr	AnimateSprite
0001B2BC 4EF9 0000 E106             		jmp	DisplaySprite
0001B2C2                            ; ===========================================================================
0001B2C2 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001B2C4 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001B2C6 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001B2C8 0000                       		dc.w loc_19934-Obj82_EggIndex
0001B2CA                            ; ===========================================================================
0001B2CA                            
0001B2CA                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001B2CA 3028 0008                  		move.w	8(a0),d0
0001B2CE 9078 D008                  		sub.w	($FFFFD008).w,d0
0001B2D2 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001B2D6 6400                       		bcc.s	loc_19934	; if not, branch
0001B2D8 5428 0025                  		addq.b	#2,$25(a0)
0001B2DC 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001B2E2 117C 0001 001C             		move.b	#1,$1C(a0)
0001B2E8                            
0001B2E8                            loc_19934:				; XREF: Obj82_EggIndex
0001B2E8 4EF9 0000 E0E0             		jmp	SpeedToPos
0001B2EE                            ; ===========================================================================
0001B2EE                            
0001B2EE                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001B2EE 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001B2F2 6600                       		bne.s	loc_19954	; if time remains, branch
0001B2F4 5428 0025                  		addq.b	#2,$25(a0)
0001B2F8 117C 0002 001C             		move.b	#2,$1C(a0)
0001B2FE 5868 000C                  		addq.w	#4,$C(a0)
0001B302 317C 000F 003C             		move.w	#15,$3C(a0)
0001B308                            
0001B308                            loc_19954:
0001B308 60DE                       		bra.s	loc_19934
0001B30A                            ; ===========================================================================
0001B30A                            
0001B30A                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001B30A 5368 003C                  		subq.w	#1,$3C(a0)
0001B30E 6E00                       		bgt.s	loc_199D0
0001B310 6600                       		bne.s	loc_1996A
0001B312 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001B318 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001B31E                            
0001B31E                            loc_1996A:
0001B31E 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001B324 6E00                       		bgt.s	loc_19976
0001B326 4268 0010                  		clr.w	$10(a0)
0001B32A                            
0001B32A                            loc_19976:
0001B32A 0668 0024 0012             		addi.w	#$24,$12(a0)
0001B330 4A68 0012                  		tst.w	$12(a0)
0001B334 6B00                       		bmi.s	Obj82_FindBlocks
0001B336 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001B33C 6500                       		bcs.s	Obj82_FindBlocks
0001B33E 317C 5357 0028             		move.w	#$5357,$28(a0)
0001B344 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001B34A 6500                       		bcs.s	Obj82_FindBlocks
0001B34C 317C 059B 000C             		move.w	#$59B,$C(a0)
0001B352 4268 0012                  		clr.w	$12(a0)
0001B356                            
0001B356                            Obj82_FindBlocks:
0001B356 3028 0010                  		move.w	$10(a0),d0
0001B35A 8068 0012                  		or.w	$12(a0),d0
0001B35E 6600                       		bne.s	loc_199D0
0001B360 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001B364 703E                       		moveq	#$3E,d0
0001B366 7240                       		moveq	#$40,d1
0001B368                            
0001B368                            Obj82_FindLoop:	
0001B368 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001B36A 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001B36E 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001B372                            
0001B372 6600                       		bne.s	loc_199D0
0001B374 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001B37A 5428 0025                  		addq.b	#2,$25(a0)
0001B37E 117C 0001 001C             		move.b	#1,$1C(a0)
0001B384                            
0001B384                            loc_199D0:
0001B384 6000 FF62                  		bra.w	loc_19934
0001B388                            ; ===========================================================================
0001B388                            
0001B388                            Obj82_Switch:				; XREF: Obj82_Index
0001B388 7000                       		moveq	#0,d0
0001B38A 1028 0025                  		move.b	$25(a0),d0
0001B38E 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001B392 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001B396                            ; ===========================================================================
0001B396 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001B398 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001B39A                            ; ===========================================================================
0001B39A                            
0001B39A                            loc_199E6:				; XREF: Obj82_SwIndex
0001B39A 2268 0034                  		movea.l	$34(a0),a1
0001B39E 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001B3A4 6600                       		bne.s	Obj82_SwDisplay
0001B3A6 117C 0001 001A             		move.b	#1,$1A(a0)
0001B3AC 5428 0025                  		addq.b	#2,$25(a0)
0001B3B0                            
0001B3B0                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001B3B0 4EF9 0000 E106             		jmp	DisplaySprite
0001B3B6                            ; ===========================================================================
0001B3B6                            Ani_obj82:
0001B3B6                            	include "_anim\obj82.asm"
0001B3B6                            ; ---------------------------------------------------------------------------
0001B3B6                            ; Animation script - Eggman (SBZ2)
0001B3B6                            ; ---------------------------------------------------------------------------
0001B3B6 0000                       		dc.w byte_19A10-Ani_obj82
0001B3B8 0000                       		dc.w byte_19A14-Ani_obj82
0001B3BA 0000                       		dc.w byte_19A18-Ani_obj82
0001B3BC 0000                       		dc.w byte_19A20-Ani_obj82
0001B3BE 0000                       		dc.w byte_19A24-Ani_obj82
0001B3C0 0000                       		dc.w byte_19A2A-Ani_obj82
0001B3C2 0000                       		dc.w byte_19A30-Ani_obj82
0001B3C4 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001B3C8 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001B3CC 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001B3D4 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001B3D8 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001B3DE 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001B3E4 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001B3E8                            		even
0001B3E8                            		even
0001B3E8                            
0001B3E8                            ; ---------------------------------------------------------------------------
0001B3E8                            ; Sprite mappings - Eggman (SBZ2)
0001B3E8                            ; ---------------------------------------------------------------------------
0001B3E8                            Map_obj82:
0001B3E8                            	include "_maps\obj82.asm"
0001B3E8                            ; ---------------------------------------------------------------------------
0001B3E8                            ; Sprite mappings - Eggman (SBZ2)
0001B3E8                            ; ---------------------------------------------------------------------------
0001B3E8 0000 0000                  		dc.w byte_19A4A-Map_obj82, byte_19A5A-Map_obj82
0001B3EC 0000 0000                  		dc.w byte_19A70-Map_obj82, byte_19A86-Map_obj82
0001B3F0 0000 0000                  		dc.w byte_19A9C-Map_obj82, byte_19AB2-Map_obj82
0001B3F4 0000 0000                  		dc.w byte_19AC8-Map_obj82, byte_19AEC-Map_obj82
0001B3F8 0000 0000                  		dc.w byte_19B06-Map_obj82, byte_19B26-Map_obj82
0001B3FC 0000                       		dc.w byte_19B4F-Map_obj82
0001B3FE 03                         byte_19A4A:	dc.b 3
0001B3FF FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001B404 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B409 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B40E 04                         byte_19A5A:	dc.b 4
0001B40F E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
0001B414 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B419 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B41E FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001B423 00                         		dc.b 0
0001B424 04                         byte_19A70:	dc.b 4
0001B425 E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
0001B42A E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
0001B42F 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
0001B434 FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
0001B439 00                         		dc.b 0
0001B43A 04                         byte_19A86:	dc.b 4
0001B43B F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
0001B440 F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
0001B445 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
0001B44A EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
0001B44F 00                         		dc.b 0
0001B450 04                         byte_19A9C:	dc.b 4
0001B451 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001B456 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001B45B 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
0001B460 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B465 00                         		dc.b 0
0001B466 04                         byte_19AB2:	dc.b 4
0001B467 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001B46C E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001B471 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B476 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B47B 00                         		dc.b 0
0001B47C 07                         byte_19AC8:	dc.b 7
0001B47D E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001B482 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001B487 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001B48C 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001B491 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001B496 F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
0001B49B F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
0001B4A0 05                         byte_19AEC:	dc.b 5
0001B4A1 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001B4A6 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001B4AB 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001B4B0 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001B4B5 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B4BA 06                         byte_19B06:	dc.b 6
0001B4BB EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
0001B4C0 EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
0001B4C5 0905 0844 00               		dc.b 9,	5, 8, $44, 0
0001B4CA 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
0001B4CF 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
0001B4D4 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0001B4D9 00                         		dc.b 0
0001B4DA 08                         byte_19B26:	dc.b 8
0001B4DB E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001B4E0 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001B4E5 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B4EA 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B4EF E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
0001B4F4 F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
0001B4F9 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
0001B4FE 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
0001B503 03                         byte_19B4F:	dc.b 3
0001B504 EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4
0001B509 F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
0001B50E EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
0001B514 00                         		even
0001B514 00                         		even
0001B514                            
0001B514                            ; ===========================================================================
0001B514                            ; ---------------------------------------------------------------------------
0001B514                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001B514                            ; ---------------------------------------------------------------------------
0001B514                            
0001B514                            Obj83:					; XREF: Obj_Index
0001B514 7000                       		moveq	#0,d0
0001B516 1028 0024                  		move.b	$24(a0),d0
0001B51A 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001B51E 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001B522                            ; ===========================================================================
0001B522 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001B524 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001B526 0000                       		dc.w loc_19C36-Obj83_Index
0001B528 0000                       		dc.w loc_19C62-Obj83_Index
0001B52A 0000                       		dc.w loc_19C72-Obj83_Index
0001B52C 0000                       		dc.w loc_19C80-Obj83_Index
0001B52E                            ; ===========================================================================
0001B52E                            
0001B52E                            Obj83_Main:				; XREF: Obj83_Index
0001B52E 317C 2080 0008             		move.w	#$2080,8(a0)
0001B534 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001B53A 117C 0080 0019             		move.b	#$80,$19(a0)
0001B540 117C 0010 0016             		move.b	#$10,$16(a0)
0001B546 117C 0004 0001             		move.b	#4,1(a0)
0001B54C 08E8 0007 0001             		bset	#7,1(a0)
0001B552 7800                       		moveq	#0,d4
0001B554 3A3C 2010                  		move.w	#$2010,d5
0001B558 7C07                       		moveq	#7,d6
0001B55A 45E8 0030                  		lea	$30(a0),a2
0001B55E                            
0001B55E                            Obj83_MakeBlock:
0001B55E 4EB9 0000 E59C             		jsr	SingleObjLoad
0001B564 6600                       		bne.s	Obj83_ExitMake
0001B566 34C9                       		move.w	a1,(a2)+
0001B568 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001B56C 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001B574 337C 4518 0002             		move.w	#$4518,2(a1)
0001B57A 137C 0004 0001             		move.b	#4,1(a1)
0001B580 137C 0010 0019             		move.b	#$10,$19(a1)
0001B586 137C 0010 0016             		move.b	#$10,$16(a1)
0001B58C 137C 0003 0018             		move.b	#3,$18(a1)
0001B592 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001B596 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001B59C 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001B5A0 137C 0008 0024             		move.b	#8,$24(a1)
0001B5A6 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001B5AA                            
0001B5AA                            Obj83_ExitMake:
0001B5AA 5428 0024                  		addq.b	#2,$24(a0)
0001B5AE 4E75                       		rts	
0001B5B0                            ; ===========================================================================
0001B5B0                            
0001B5B0                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001B5B0 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001B5B6 6600                       		bne.s	Obj83_Solid	; if not, branch
0001B5B8 4228 001A                  		clr.b	$1A(a0)
0001B5BC 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001B5C0                            
0001B5C0                            Obj83_Solid:
0001B5C0 7000                       		moveq	#0,d0
0001B5C2 1028 001A                  		move.b	$1A(a0),d0
0001B5C6 4400                       		neg.b	d0
0001B5C8 4880                       		ext.w	d0
0001B5CA 5040                       		addq.w	#8,d0
0001B5CC E940                       		asl.w	#4,d0
0001B5CE 383C 2100                  		move.w	#$2100,d4
0001B5D2 9840                       		sub.w	d0,d4
0001B5D4 1140 0019                  		move.b	d0,$19(a0)
0001B5D8 3144 0008                  		move.w	d4,8(a0)
0001B5DC 720B                       		moveq	#$B,d1
0001B5DE D240                       		add.w	d0,d1
0001B5E0 7410                       		moveq	#$10,d2
0001B5E2 7611                       		moveq	#$11,d3
0001B5E4 4EF9 0001 04F0             		jmp	SolidObject
0001B5EA                            ; ===========================================================================
0001B5EA                            
0001B5EA                            loc_19C36:				; XREF: Obj83_Index
0001B5EA 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001B5F0 6400                       		bcc.s	Obj83_Solid2
0001B5F2 70FF                       		moveq	#-1,d0
0001B5F4 1028 001A                  		move.b	$1A(a0),d0
0001B5F8 4880                       		ext.w	d0
0001B5FA D040                       		add.w	d0,d0
0001B5FC 3030 0030                  		move.w	$30(a0,d0.w),d0
0001B600 2240                       		movea.l	d0,a1
0001B602 337C 474F 0028             		move.w	#$474F,$28(a1)
0001B608 5228 001A                  		addq.b	#1,$1A(a0)
0001B60C 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001B612 6700                       		beq.s	loc_19C62
0001B614                            
0001B614                            Obj83_Solid2:
0001B614 60AA                       		bra.s	Obj83_Solid
0001B616                            ; ===========================================================================
0001B616                            
0001B616                            loc_19C62:				; XREF: Obj83_Index
0001B616 08A8 0003 0022             		bclr	#3,$22(a0)
0001B61C 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B622 6000 FBBC                  		bra.w	loc_1982C
0001B626                            ; ===========================================================================
0001B626                            
0001B626                            loc_19C72:				; XREF: Obj83_Index
0001B626 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001B62C 6700                       		beq.s	Obj83_Break	; if yes, branch
0001B62E 4EF9 0000 E106             		jmp	DisplaySprite
0001B634                            ; ===========================================================================
0001B634                            
0001B634                            loc_19C80:				; XREF: Obj83_Index
0001B634 4A28 0001                  		tst.b	1(a0)
0001B638 6A00 FBA6                  		bpl.w	loc_1982C
0001B63C 4EB9 0000 E0B4             		jsr	ObjectFall
0001B642 4EF9 0000 E106             		jmp	DisplaySprite
0001B648                            ; ===========================================================================
0001B648                            
0001B648                            Obj83_Break:				; XREF: loc_19C72
0001B648 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001B64C 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001B650 7801                       		moveq	#1,d4
0001B652 7203                       		moveq	#3,d1
0001B654 7438                       		moveq	#$38,d2
0001B656 5428 0024                  		addq.b	#2,$24(a0)
0001B65A 117C 0008 0019             		move.b	#8,$19(a0)
0001B660 117C 0008 0016             		move.b	#8,$16(a0)
0001B666 43D0                       		lea	(a0),a1
0001B668 6000                       		bra.s	Obj83_MakeFrag
0001B66A                            ; ===========================================================================
0001B66A                            
0001B66A                            Obj83_LoopFrag:
0001B66A 4EB9 0000 E5B2             		jsr	SingleObjLoad2
0001B670 6600                       		bne.s	Obj83_BreakSnd
0001B672                            
0001B672                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001B672 45D0                       		lea	(a0),a2
0001B674 47D1                       		lea	(a1),a3
0001B676 7603                       		moveq	#3,d3
0001B678                            
0001B678                            loc_19CC4:
0001B678 26DA                       		move.l	(a2)+,(a3)+
0001B67A 26DA                       		move.l	(a2)+,(a3)+
0001B67C 26DA                       		move.l	(a2)+,(a3)+
0001B67E 26DA                       		move.l	(a2)+,(a3)+
0001B680 51CB FFF6                  		dbf	d3,loc_19CC4
0001B684                            
0001B684 335C 0012                  		move.w	(a4)+,$12(a1)
0001B688 361D                       		move.w	(a5)+,d3
0001B68A D769 0008                  		add.w	d3,8(a1)
0001B68E 361D                       		move.w	(a5)+,d3
0001B690 D769 000C                  		add.w	d3,$C(a1)
0001B694 1344 001A                  		move.b	d4,$1A(a1)
0001B698 5244                       		addq.w	#1,d4
0001B69A 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001B69E                            
0001B69E                            Obj83_BreakSnd:
0001B69E 303C 00CB                  		move.w	#$CB,d0
0001B6A2 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play smashing sound
0001B6A8 4EF9 0000 E106             		jmp	DisplaySprite
0001B6AE                            ; ===========================================================================
0001B6AE 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001B6B2 0120 00C0                  		dc.w $120, $C0
0001B6B6 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001B6BA 0010 0000                  		dc.w $10, 0
0001B6BE 0000 0010                  		dc.w 0,	$10
0001B6C2 0010 0010                  		dc.w $10, $10
0001B6C6                            ; ---------------------------------------------------------------------------
0001B6C6                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001B6C6                            ; ---------------------------------------------------------------------------
0001B6C6                            Map_obj83:
0001B6C6                            	include "_maps\obj83.asm"
0001B6C6                            ; ---------------------------------------------------------------------------
0001B6C6                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001B6C6                            ; ---------------------------------------------------------------------------
0001B6C6 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001B6CA 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001B6CE 0000                       		dc.w byte_19D46-Map_obj83
0001B6D0 01                         byte_19D1C:	dc.b 1
0001B6D1 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001B6D6 02                         byte_19D22:	dc.b 2
0001B6D7 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001B6DC F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001B6E1 00                         		dc.b 0
0001B6E2 02                         byte_19D2E:	dc.b 2
0001B6E3 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001B6E8 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001B6ED 00                         		dc.b 0
0001B6EE 02                         byte_19D3A:	dc.b 2
0001B6EF F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001B6F4 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001B6F9 00                         		dc.b 0
0001B6FA 02                         byte_19D46:	dc.b 2
0001B6FB F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001B700 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001B706 00                         		even
0001B706 00                         		even
0001B706                            
0001B706                            ; ===========================================================================
0001B706                            ; ---------------------------------------------------------------------------
0001B706                            ; Object 85 - Eggman (FZ)
0001B706                            ; ---------------------------------------------------------------------------
0001B706                            
0001B706                            Obj85_Delete:
0001B706 4EF9 0000 E142             		jmp	DeleteObject
0001B70C                            ; ===========================================================================
0001B70C                            
0001B70C                            Obj85:					; XREF: Obj_Index
0001B70C 7000                       		moveq	#0,d0
0001B70E 1028 0024                  		move.b	$24(a0),d0
0001B712 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001B716 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001B71A                            ; ===========================================================================
0001B71A 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001B71C 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001B71E 0000                       		dc.w loc_1A38E-Obj85_Index
0001B720 0000                       		dc.w loc_1A346-Obj85_Index
0001B722 0000                       		dc.w loc_1A2C6-Obj85_Index
0001B724 0000                       		dc.w loc_1A3AC-Obj85_Index
0001B726 0000                       		dc.w loc_1A264-Obj85_Index
0001B728                            
0001B728 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001B72E 0001 B3E8                  		dc.l Map_obj82		; mappings pointer
0001B732 25B0 0590 0300             		dc.w $25B0, $590, $300
0001B738 0000 0000                  		dc.l Map_obj84
0001B73C 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001B742 0000 0000                  		dc.l Map_FZBoss
0001B746 26E0 0596 0470             		dc.w $26E0, $596, $470
0001B74C 0001 B3E8                  		dc.l Map_obj82
0001B750 26E0 0596 0400             		dc.w $26E0, $596, $400
0001B756 0001 96CA                  		dc.l Map_Eggman
0001B75A 26E0 0596 0400             		dc.w $26E0, $596, $400
0001B760 0001 96CA                  		dc.l Map_Eggman
0001B764                            
0001B764 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001B769 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001B76E 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001B773 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001B778 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001B77D 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001B782                            ; ===========================================================================
0001B782                            
0001B782                            Obj85_Main:				; XREF: Obj85_Index
0001B782 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001B786 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001B78A 2248                       		movea.l	a0,a1
0001B78C 7205                       		moveq	#5,d1
0001B78E 6000                       		bra.s	Obj85_LoadBoss
0001B790                            ; ===========================================================================
0001B790                            
0001B790                            Obj85_Loop:
0001B790 4EB9 0000 E5B2             		jsr	SingleObjLoad2
0001B796 6600                       		bne.s	loc_19E20
0001B798                            
0001B798                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001B798 12BC 0085                  		move.b	#$85,(a1)
0001B79C 335A 0008                  		move.w	(a2)+,8(a1)
0001B7A0 335A 000C                  		move.w	(a2)+,$C(a1)
0001B7A4 335A 0002                  		move.w	(a2)+,2(a1)
0001B7A8 235A 0004                  		move.l	(a2)+,4(a1)
0001B7AC 135B 0024                  		move.b	(a3)+,$24(a1)
0001B7B0 135B 001C                  		move.b	(a3)+,$1C(a1)
0001B7B4 135B 0018                  		move.b	(a3)+,$18(a1)
0001B7B8 135B 0017                  		move.b	(a3)+,$17(a1)
0001B7BC 135B 0016                  		move.b	(a3)+,$16(a1)
0001B7C0 137C 0004 0001             		move.b	#4,1(a1)
0001B7C6 08E8 0007 0001             		bset	#7,1(a0)
0001B7CC 2348 0034                  		move.l	a0,$34(a1)
0001B7D0 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001B7D4                            
0001B7D4                            loc_19E20:
0001B7D4 45E8 0036                  		lea	$36(a0),a2
0001B7D8 4EB9 0000 E59C             		jsr	SingleObjLoad
0001B7DE 6600                       		bne.s	loc_19E5A
0001B7E0 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001B7E4 3489                       		move.w	a1,(a2)
0001B7E6 2348 0034                  		move.l	a0,$34(a1)
0001B7EA 45E8 0038                  		lea	$38(a0),a2
0001B7EE 7400                       		moveq	#0,d2
0001B7F0 7203                       		moveq	#3,d1
0001B7F2                            
0001B7F2                            loc_19E3E:
0001B7F2 4EB9 0000 E5B2             		jsr	SingleObjLoad2
0001B7F8 6600                       		bne.s	loc_19E5A
0001B7FA 34C9                       		move.w	a1,(a2)+
0001B7FC 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001B800 2348 0034                  		move.l	a0,$34(a1)
0001B804 1342 0028                  		move.b	d2,$28(a1)
0001B808 5442                       		addq.w	#2,d2
0001B80A 51C9 FFE6                  		dbf	d1,loc_19E3E
0001B80E                            
0001B80E                            loc_19E5A:
0001B80E 317C 0000 0034             		move.w	#0,$34(a0)
0001B814 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001B81A 317C FFFF 0030             		move.w	#-1,$30(a0)
0001B820                            
0001B820                            Obj85_Eggman:				; XREF: Obj85_Index
0001B820 7000                       		moveq	#0,d0
0001B822 1028 0034                  		move.b	$34(a0),d0
0001B826 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001B82A 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001B82E 4EF9 0000 E106             		jmp	DisplaySprite
0001B834                            ; ===========================================================================
0001B834 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001B838 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001B83C 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001B840 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001B844                            ; ===========================================================================
0001B844                            
0001B844                            loc_19E90:				; XREF: off_19E80
0001B844 4AB8 F680                  		tst.l	($FFFFF680).w
0001B848 6600                       		bne.s	loc_19EA2
0001B84A 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001B850 6500                       		bcs.s	loc_19EA2
0001B852 5428 0034                  		addq.b	#2,$34(a0)
0001B856                            
0001B856                            loc_19EA2:
0001B856 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001B85A 4E75                       		rts	
0001B85C                            ; ===========================================================================
0001B85C                            
0001B85C                            loc_19EA8:				; XREF: off_19E80
0001B85C 4A68 0030                  		tst.w	$30(a0)
0001B860 6A00                       		bpl.s	loc_19F10
0001B862 4268 0030                  		clr.w	$30(a0)
0001B866 4EB9 0000 33AE             		jsr	(RandomNumber).l
0001B86C 0240 000C                  		andi.w	#$C,d0
0001B870 3200                       		move.w	d0,d1
0001B872 5441                       		addq.w	#2,d1
0001B874 4A80                       		tst.l	d0
0001B876 6A00                       		bpl.s	loc_19EC6
0001B878 C340                       		exg	d1,d0
0001B87A                            
0001B87A                            loc_19EC6:
0001B87A 43FA 0000                  		lea	word_19FD6(pc),a1
0001B87E 3031 0000                  		move.w	(a1,d0.w),d0
0001B882 3231 1000                  		move.w	(a1,d1.w),d1
0001B886 3140 0030                  		move.w	d0,$30(a0)
0001B88A 74FF                       		moveq	#-1,d2
0001B88C 3430 0038                  		move.w	$38(a0,d0.w),d2
0001B890 2242                       		movea.l	d2,a1
0001B892 137C 00FF 0029             		move.b	#-1,$29(a1)
0001B898 337C FFFF 0030             		move.w	#-1,$30(a1)
0001B89E 3430 1038                  		move.w	$38(a0,d1.w),d2
0001B8A2 2242                       		movea.l	d2,a1
0001B8A4 137C 0001 0029             		move.b	#1,$29(a1)
0001B8AA 337C 0000 0030             		move.w	#0,$30(a1)
0001B8B0 317C 0001 0032             		move.w	#1,$32(a0)
0001B8B6 4228 0035                  		clr.b	$35(a0)
0001B8BA 303C 00B7                  		move.w	#$B7,d0
0001B8BE 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001B8C4                            
0001B8C4                            loc_19F10:
0001B8C4 4A68 0032                  		tst.w	$32(a0)
0001B8C8 6B00 0000                  		bmi.w	loc_19FA6
0001B8CC 08A8 0000 0022             		bclr	#0,$22(a0)
0001B8D2 3038 D008                  		move.w	($FFFFD008).w,d0
0001B8D6 9068 0008                  		sub.w	8(a0),d0
0001B8DA 6500                       		bcs.s	loc_19F2E
0001B8DC 08E8 0000 0022             		bset	#0,$22(a0)
0001B8E2                            
0001B8E2                            loc_19F2E:
0001B8E2 323C 002B                  		move.w	#$2B,d1
0001B8E6 343C 0014                  		move.w	#$14,d2
0001B8EA 363C 0014                  		move.w	#$14,d3
0001B8EE 3828 0008                  		move.w	8(a0),d4
0001B8F2 4EB9 0001 04F0             		jsr	SolidObject
0001B8F8 4A44                       		tst.w	d4
0001B8FA 6E00                       		bgt.s	loc_19F50
0001B8FC                            
0001B8FC                            loc_19F48:
0001B8FC 4A28 0035                  		tst.b	$35(a0)
0001B900 6600                       		bne.s	loc_19F88
0001B902 6000                       		bra.s	loc_19F96
0001B904                            ; ===========================================================================
0001B904                            
0001B904                            loc_19F50:
0001B904 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001B908 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001B90E 66EC                       		bne.s	loc_19F48
0001B910 303C 0300                  		move.w	#$300,d0
0001B914 0828 0000 0022             		btst	#0,$22(a0)
0001B91A 6600                       		bne.s	loc_19F6A
0001B91C 4440                       		neg.w	d0
0001B91E                            
0001B91E                            loc_19F6A:
0001B91E 31C0 D010                  		move.w	d0,($FFFFD010).w
0001B922 4A28 0035                  		tst.b	$35(a0)
0001B926 6600                       		bne.s	loc_19F88
0001B928 5328 0021                  		subq.b	#1,$21(a0)
0001B92C 117C 0064 0035             		move.b	#$64,$35(a0)
0001B932 303C 00AC                  		move.w	#$AC,d0
0001B936 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001B93C                            
0001B93C                            loc_19F88:
0001B93C 5328 0035                  		subq.b	#1,$35(a0)
0001B940 6700                       		beq.s	loc_19F96
0001B942 117C 0003 001C             		move.b	#3,$1C(a0)
0001B948 6000                       		bra.s	loc_19F9C
0001B94A                            ; ===========================================================================
0001B94A                            
0001B94A                            loc_19F96:
0001B94A 117C 0001 001C             		move.b	#1,$1C(a0)
0001B950                            
0001B950                            loc_19F9C:
0001B950 43FA FA64                  		lea	Ani_obj82(pc),a1
0001B954 4EF9 0000 B218             		jmp	AnimateSprite
0001B95A                            ; ===========================================================================
0001B95A                            
0001B95A                            loc_19FA6:
0001B95A 4A28 0021                  		tst.b	$21(a0)
0001B95E 6700                       		beq.s	loc_19FBC
0001B960 5428 0034                  		addq.b	#2,$34(a0)
0001B964 317C FFFF 0030             		move.w	#-1,$30(a0)
0001B96A 4268 0032                  		clr.w	$32(a0)
0001B96E 4E75                       		rts	
0001B970                            ; ===========================================================================
0001B970                            
0001B970                            loc_19FBC:
0001B970 117C 0006 0034             		move.b	#6,$34(a0)
0001B976 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001B97C 317C 053C 000C             		move.w	#$53C,$C(a0)
0001B982 117C 0014 0016             		move.b	#$14,$16(a0)
0001B988 4E75                       		rts	
0001B98A                            ; ===========================================================================
0001B98A 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001B99A                            ; ===========================================================================
0001B99A                            
0001B99A                            loc_19FE6:				; XREF: off_19E80
0001B99A 70FF                       		moveq	#-1,d0
0001B99C 3028 0036                  		move.w	$36(a0),d0
0001B9A0 2240                       		movea.l	d0,a1
0001B9A2 4A68 0030                  		tst.w	$30(a0)
0001B9A6 6A00                       		bpl.s	loc_1A000
0001B9A8 4268 0030                  		clr.w	$30(a0)
0001B9AC 137C 00FF 0029             		move.b	#-1,$29(a1)
0001B9B2 6100                       		bsr.s	loc_1A020
0001B9B4                            
0001B9B4                            loc_1A000:
0001B9B4 700F                       		moveq	#$F,d0
0001B9B6 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001B9BA 6600                       		bne.s	loc_1A00A
0001B9BC 6100                       		bsr.s	loc_1A020
0001B9BE                            
0001B9BE                            loc_1A00A:
0001B9BE 4A68 0032                  		tst.w	$32(a0)
0001B9C2 6700                       		beq.s	locret_1A01E
0001B9C4 5528 0034                  		subq.b	#2,$34(a0)
0001B9C8 317C FFFF 0030             		move.w	#-1,$30(a0)
0001B9CE 4268 0032                  		clr.w	$32(a0)
0001B9D2                            
0001B9D2                            locret_1A01E:
0001B9D2 4E75                       		rts	
0001B9D4                            ; ===========================================================================
0001B9D4                            
0001B9D4                            loc_1A020:
0001B9D4 303C 00B1                  		move.w	#$B1,d0
0001B9D8 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play electricity sound
0001B9DE                            ; ===========================================================================
0001B9DE                            
0001B9DE                            loc_1A02A:				; XREF: off_19E80
0001B9DE 117C 0030 0017             		move.b	#$30,$17(a0)
0001B9E4 08E8 0000 0022             		bset	#0,$22(a0)
0001B9EA 4EB9 0000 E0E0             		jsr	SpeedToPos
0001B9F0 117C 0006 001A             		move.b	#6,$1A(a0)
0001B9F6 0668 0010 0012             		addi.w	#$10,$12(a0)
0001B9FC 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001BA02 6500                       		bcs.s	loc_1A070
0001BA04 317C 059C 000C             		move.w	#$59C,$C(a0)
0001BA0A 5428 0034                  		addq.b	#2,$34(a0)
0001BA0E 117C 0020 0017             		move.b	#$20,$17(a0)
0001BA14 317C 0100 0010             		move.w	#$100,$10(a0)
0001BA1A 317C FF00 0012             		move.w	#-$100,$12(a0)
0001BA20 5438 F742                  		addq.b	#2,($FFFFF742).w
0001BA24                            
0001BA24                            loc_1A070:
0001BA24 6000 0000                  		bra.w	loc_1A166
0001BA28                            ; ===========================================================================
0001BA28                            
0001BA28                            loc_1A074:				; XREF: off_19E80
0001BA28 08E8 0000 0022             		bset	#0,$22(a0)
0001BA2E 117C 0004 001C             		move.b	#4,$1C(a0)
0001BA34 4EB9 0000 E0E0             		jsr	SpeedToPos
0001BA3A 0668 0010 0012             		addi.w	#$10,$12(a0)
0001BA40 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001BA46 6500                       		bcs.s	loc_1A09A
0001BA48 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001BA4E                            
0001BA4E                            loc_1A09A:
0001BA4E 317C 0400 0010             		move.w	#$400,$10(a0)
0001BA54 3028 0008                  		move.w	8(a0),d0
0001BA58 9078 D008                  		sub.w	($FFFFD008).w,d0
0001BA5C 6A00                       		bpl.s	loc_1A0B4
0001BA5E 317C 0500 0010             		move.w	#$500,$10(a0)
0001BA64 6000 0000                  		bra.w	loc_1A0F2
0001BA68                            ; ===========================================================================
0001BA68                            
0001BA68                            loc_1A0B4:
0001BA68 0440 0070                  		subi.w	#$70,d0
0001BA6C 6500                       		bcs.s	loc_1A0F2
0001BA6E 0468 0100 0010             		subi.w	#$100,$10(a0)
0001BA74 5140                       		subq.w	#8,d0
0001BA76 6500                       		bcs.s	loc_1A0F2
0001BA78 0468 0100 0010             		subi.w	#$100,$10(a0)
0001BA7E 5140                       		subq.w	#8,d0
0001BA80 6500                       		bcs.s	loc_1A0F2
0001BA82 0468 0080 0010             		subi.w	#$80,$10(a0)
0001BA88 5140                       		subq.w	#8,d0
0001BA8A 6500                       		bcs.s	loc_1A0F2
0001BA8C 0468 0080 0010             		subi.w	#$80,$10(a0)
0001BA92 5140                       		subq.w	#8,d0
0001BA94 6500                       		bcs.s	loc_1A0F2
0001BA96 0468 0080 0010             		subi.w	#$80,$10(a0)
0001BA9C 0440 0038                  		subi.w	#$38,d0
0001BAA0 6500                       		bcs.s	loc_1A0F2
0001BAA2 4268 0010                  		clr.w	$10(a0)
0001BAA6                            
0001BAA6                            loc_1A0F2:
0001BAA6 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001BAAC 6500                       		bcs.s	loc_1A110
0001BAAE 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001BAB4 317C 0240 0010             		move.w	#$240,$10(a0)
0001BABA 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001BAC0 5428 0034                  		addq.b	#2,$34(a0)
0001BAC4                            
0001BAC4                            loc_1A110:
0001BAC4 6000                       		bra.s	loc_1A15C
0001BAC6                            ; ===========================================================================
0001BAC6                            
0001BAC6                            loc_1A112:				; XREF: off_19E80
0001BAC6 4EB9 0000 E0E0             		jsr	SpeedToPos
0001BACC 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001BAD2 6500                       		bcs.s	loc_1A124
0001BAD4 4268 0010                  		clr.w	$10(a0)
0001BAD8                            
0001BAD8                            loc_1A124:
0001BAD8 0668 0034 0012             		addi.w	#$34,$12(a0)
0001BADE 4A68 0012                  		tst.w	$12(a0)
0001BAE2 6B00                       		bmi.s	loc_1A142
0001BAE4 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001BAEA 6500                       		bcs.s	loc_1A142
0001BAEC 317C 0592 000C             		move.w	#$592,$C(a0)
0001BAF2 4268 0012                  		clr.w	$12(a0)
0001BAF6                            
0001BAF6                            loc_1A142:
0001BAF6 3028 0010                  		move.w	$10(a0),d0
0001BAFA 8068 0012                  		or.w	$12(a0),d0
0001BAFE 6600                       		bne.s	loc_1A15C
0001BB00 5428 0034                  		addq.b	#2,$34(a0)
0001BB04 317C FE80 0012             		move.w	#-$180,$12(a0)
0001BB0A 117C 0001 0021             		move.b	#1,$21(a0)
0001BB10                            
0001BB10                            loc_1A15C:
0001BB10 43FA F8A4                  		lea	Ani_obj82(pc),a1
0001BB14 4EB9 0000 B218             		jsr	AnimateSprite
0001BB1A                            
0001BB1A                            loc_1A166:
0001BB1A 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001BB20 6C00                       		bge.s	loc_1A172
0001BB22 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001BB26                            
0001BB26                            loc_1A172:
0001BB26 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001BB2C 6C00                       		bge.s	locret_1A190
0001BB2E 323C 001B                  		move.w	#$1B,d1
0001BB32 343C 0070                  		move.w	#$70,d2
0001BB36 363C 0071                  		move.w	#$71,d3
0001BB3A 3828 0008                  		move.w	8(a0),d4
0001BB3E 4EF9 0001 04F0             		jmp	SolidObject
0001BB44                            ; ===========================================================================
0001BB44                            
0001BB44                            locret_1A190:
0001BB44 4E75                       		rts	
0001BB46                            ; ===========================================================================
0001BB46                            
0001BB46                            loc_1A192:				; XREF: off_19E80
0001BB46 217C 0001 96CA 0004        		move.l	#Map_Eggman,4(a0)
0001BB4E 317C 0400 0002             		move.w	#$400,2(a0)
0001BB54 117C 0000 001C             		move.b	#0,$1C(a0)
0001BB5A 08E8 0000 0022             		bset	#0,$22(a0)
0001BB60 4EB9 0000 E0E0             		jsr	SpeedToPos
0001BB66 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001BB6C 6400                       		bcc.s	loc_1A1D0
0001BB6E 317C 0180 0010             		move.w	#$180,$10(a0)
0001BB74 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001BB7A 117C 000F 0020             		move.b	#$F,$20(a0)
0001BB80 5428 0034                  		addq.b	#2,$34(a0)
0001BB84                            
0001BB84                            loc_1A1D0:
0001BB84 6000 FF8A                  		bra.w	loc_1A15C
0001BB88                            ; ===========================================================================
0001BB88                            
0001BB88                            loc_1A1D4:				; XREF: off_19E80
0001BB88 08E8 0000 0022             		bset	#0,$22(a0)
0001BB8E 4EB9 0000 E0E0             		jsr	SpeedToPos
0001BB94 4A68 0030                  		tst.w	$30(a0)
0001BB98 6600                       		bne.s	loc_1A1FC
0001BB9A 4A28 0020                  		tst.b	$20(a0)
0001BB9E 6600                       		bne.s	loc_1A216
0001BBA0 317C 001E 0030             		move.w	#$1E,$30(a0)
0001BBA6 303C 00AC                  		move.w	#$AC,d0
0001BBAA 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001BBB0                            
0001BBB0                            loc_1A1FC:
0001BBB0 5368 0030                  		subq.w	#1,$30(a0)
0001BBB4 6600                       		bne.s	loc_1A216
0001BBB6 4A28 0022                  		tst.b	$22(a0)
0001BBBA 6A00                       		bpl.s	loc_1A210
0001BBBC 317C 0060 0012             		move.w	#$60,$12(a0)
0001BBC2 6000                       		bra.s	loc_1A216
0001BBC4                            ; ===========================================================================
0001BBC4                            
0001BBC4                            loc_1A210:
0001BBC4 117C 000F 0020             		move.b	#$F,$20(a0)
0001BBCA                            
0001BBCA                            loc_1A216:
0001BBCA 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001BBD0 6D00                       		blt.s	loc_1A23A
0001BBD2 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001BBD8 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001BBDE 4278 D014                  		clr.w	($FFFFD014).w
0001BBE2 4A68 0012                  		tst.w	$12(a0)
0001BBE6 6A00                       		bpl.s	loc_1A248
0001BBE8 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001BBEE                            
0001BBEE                            loc_1A23A:
0001BBEE 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001BBF4 6D00                       		blt.s	loc_1A248
0001BBF6 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001BBFC                            
0001BBFC                            loc_1A248:
0001BBFC 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001BC02 6500                       		bcs.s	loc_1A260
0001BC04 4A28 0001                  		tst.b	1(a0)
0001BC08 6B00                       		bmi.s	loc_1A260
0001BC0A 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001BC10 6000 FAF4                  		bra.w	Obj85_Delete
0001BC14                            ; ===========================================================================
0001BC14                            
0001BC14                            loc_1A260:
0001BC14 6000 FEFA                  		bra.w	loc_1A15C
0001BC18                            ; ===========================================================================
0001BC18                            
0001BC18                            loc_1A264:				; XREF: Obj85_Index
0001BC18 2268 0034                  		movea.l	$34(a0),a1
0001BC1C 1011                       		move.b	(a1),d0
0001BC1E B010                       		cmp.b	(a0),d0
0001BC20 6600 FAE4                  		bne.w	Obj85_Delete
0001BC24 117C 0007 001C             		move.b	#7,$1C(a0)
0001BC2A 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001BC30 6C00                       		bge.s	loc_1A280
0001BC32 6000                       		bra.s	loc_1A2A6
0001BC34                            ; ===========================================================================
0001BC34                            
0001BC34                            loc_1A280:
0001BC34 4A69 0010                  		tst.w	$10(a1)
0001BC38 6700                       		beq.s	loc_1A28C
0001BC3A 117C 000B 001C             		move.b	#$B,$1C(a0)
0001BC40                            
0001BC40                            loc_1A28C:
0001BC40 43FA DA38                  		lea	Ani_Eggman(pc),a1
0001BC44 4EB9 0000 B218             		jsr	AnimateSprite
0001BC4A                            
0001BC4A                            loc_1A296:
0001BC4A 2268 0034                  		movea.l	$34(a0),a1
0001BC4E 3169 0008 0008             		move.w	8(a1),8(a0)
0001BC54 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001BC5A                            
0001BC5A                            loc_1A2A6:
0001BC5A 2268 0034                  		movea.l	$34(a0),a1
0001BC5E 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001BC64 7003                       		moveq	#3,d0
0001BC66 C028 0022                  		and.b	$22(a0),d0
0001BC6A 0228 00FC 0001             		andi.b	#-4,1(a0)
0001BC70 8128 0001                  		or.b	d0,1(a0)
0001BC74 4EF9 0000 E106             		jmp	DisplaySprite
0001BC7A                            ; ===========================================================================
0001BC7A                            
0001BC7A                            loc_1A2C6:				; XREF: Obj85_Index
0001BC7A 2268 0034                  		movea.l	$34(a0),a1
0001BC7E 1011                       		move.b	(a1),d0
0001BC80 B010                       		cmp.b	(a0),d0
0001BC82 6600 FA82                  		bne.w	Obj85_Delete
0001BC86 0CA9 0001 96CA 0004        		cmpi.l	#Map_Eggman,4(a1)
0001BC8E 6700                       		beq.s	loc_1A2E4
0001BC90 117C 000A 001A             		move.b	#$A,$1A(a0)
0001BC96 60C2                       		bra.s	loc_1A2A6
0001BC98                            ; ===========================================================================
0001BC98                            
0001BC98                            loc_1A2E4:
0001BC98 117C 0001 001C             		move.b	#1,$1C(a0)
0001BC9E 4A29 0021                  		tst.b	$21(a1)
0001BCA2 6F00                       		ble.s	loc_1A312
0001BCA4 117C 0006 001C             		move.b	#6,$1C(a0)
0001BCAA 217C 0001 96CA 0004        		move.l	#Map_Eggman,4(a0)
0001BCB2 317C 0400 0002             		move.w	#$400,2(a0)
0001BCB8 43FA D9C0                  		lea	Ani_Eggman(pc),a1
0001BCBC 4EB9 0000 B218             		jsr	AnimateSprite
0001BCC2 6000 FF86                  		bra.w	loc_1A296
0001BCC6                            ; ===========================================================================
0001BCC6                            
0001BCC6                            loc_1A312:
0001BCC6 4A28 0001                  		tst.b	1(a0)
0001BCCA 6A00 FA3A                  		bpl.w	Obj85_Delete
0001BCCE 6100 D558                  		bsr.w	BossDefeated
0001BCD2 117C 0002 0018             		move.b	#2,$18(a0)
0001BCD8 117C 0000 001C             		move.b	#0,$1C(a0)
0001BCDE 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001BCE6 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001BCEC 43FA 0000                  		lea	Ani_obj85(pc),a1
0001BCF0 4EB9 0000 B218             		jsr	AnimateSprite
0001BCF6 6000 FF52                  		bra.w	loc_1A296
0001BCFA                            ; ===========================================================================
0001BCFA                            
0001BCFA                            loc_1A346:				; XREF: Obj85_Index
0001BCFA 08E8 0000 0022             		bset	#0,$22(a0)
0001BD00 2268 0034                  		movea.l	$34(a0),a1
0001BD04 0CA9 0001 96CA 0004        		cmpi.l	#Map_Eggman,4(a1)
0001BD0C 6700                       		beq.s	loc_1A35E
0001BD0E 6000 FF4A                  		bra.w	loc_1A2A6
0001BD12                            ; ===========================================================================
0001BD12                            
0001BD12                            loc_1A35E:
0001BD12 3169 0008 0008             		move.w	8(a1),8(a0)
0001BD18 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001BD1E 4A28 001E                  		tst.b	$1E(a0)
0001BD22 6600                       		bne.s	loc_1A376
0001BD24 117C 0014 001E             		move.b	#$14,$1E(a0)
0001BD2A                            
0001BD2A                            loc_1A376:
0001BD2A 5328 001E                  		subq.b	#1,$1E(a0)
0001BD2E 6E00                       		bgt.s	loc_1A38A
0001BD30 5228 001A                  		addq.b	#1,$1A(a0)
0001BD34 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001BD3A 6E00 F9CA                  		bgt.w	Obj85_Delete
0001BD3E                            
0001BD3E                            loc_1A38A:
0001BD3E 6000 FF0A                  		bra.w	loc_1A296
0001BD42                            ; ===========================================================================
0001BD42                            
0001BD42                            loc_1A38E:				; XREF: Obj85_Index
0001BD42 117C 000B 001A             		move.b	#$B,$1A(a0)
0001BD48 3038 D008                  		move.w	($FFFFD008).w,d0
0001BD4C 9068 0008                  		sub.w	8(a0),d0
0001BD50 6500                       		bcs.s	loc_1A3A6
0001BD52 4A28 0001                  		tst.b	1(a0)
0001BD56 6A00 F9AE                  		bpl.w	Obj85_Delete
0001BD5A                            
0001BD5A                            loc_1A3A6:
0001BD5A 4EF9 0000 E106             		jmp	DisplaySprite
0001BD60                            ; ===========================================================================
0001BD60                            
0001BD60                            loc_1A3AC:				; XREF: Obj85_Index
0001BD60 117C 0000 001A             		move.b	#0,$1A(a0)
0001BD66 08E8 0000 0022             		bset	#0,$22(a0)
0001BD6C 2268 0034                  		movea.l	$34(a0),a1
0001BD70 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001BD76 6600                       		bne.s	loc_1A3D0
0001BD78 0CA9 0001 96CA 0004        		cmpi.l	#Map_Eggman,4(a1)
0001BD80 6700 F984                  		beq.w	Obj85_Delete
0001BD84                            
0001BD84                            loc_1A3D0:
0001BD84 6000 FED4                  		bra.w	loc_1A2A6
0001BD88                            ; ===========================================================================
0001BD88                            Ani_obj85:
0001BD88                            	include "_anim\obj85.asm"
0001BD88                            ; ---------------------------------------------------------------------------
0001BD88                            ; Animation script - Eggman (FZ)
0001BD88                            ; ---------------------------------------------------------------------------
0001BD88 0000                       		dc.w byte_1A3D6-Ani_obj85
0001BD8A 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001BD8E                            		even
0001BD8E                            		even
0001BD8E                            
0001BD8E                            Map_Eggman2:
0001BD8E                            	include "_maps\Eggman2.asm"
0001BD8E                            ; ---------------------------------------------------------------------------
0001BD8E                            ; Sprite mappings - Eggman (FZ)
0001BD8E                            ; ---------------------------------------------------------------------------
0001BD8E 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001BD90 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001BD92 06                         byte_1A3DE:	dc.b 6
0001BD93 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001BD98 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001BD9D EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001BDA2 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001BDA7 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001BDAC 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001BDB1 06                         byte_1A3FD:	dc.b 6
0001BDB2 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001BDB7 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001BDBC EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001BDC1 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001BDC6 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001BDCB 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001BDD0                            		even
0001BDD0                            		even
0001BDD0                            
0001BDD0                            Map_FZBoss:
0001BDD0                            	include "_maps\FZ boss.asm"
0001BDD0                            ; ---------------------------------------------------------------------------
0001BDD0                            ; Sprite mappings - boss (FZ)
0001BDD0                            ; ---------------------------------------------------------------------------
0001BDD0 0000                       		dc.w byte_1A422-Map_FZBoss
0001BDD2 0000                       		dc.w byte_1A42D-Map_FZBoss
0001BDD4 0000                       		dc.w byte_1A43D-Map_FZBoss
0001BDD6 02                         byte_1A422:	dc.b 2
0001BDD7 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001BDDC 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001BDE1 03                         byte_1A42D:	dc.b 3
0001BDE2 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001BDE7 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001BDEC 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001BDF1 02                         byte_1A43D:	dc.b 2
0001BDF2 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001BDF7 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001BDFC                            		even
0001BDFC                            		even
0001BDFC                            
0001BDFC                            ; ===========================================================================
0001BDFC                            
0001BDFC                            Obj84_Delete:
0001BDFC 4EF9 0000 E142             		jmp	DeleteObject
0001BE02                            ; ===========================================================================
0001BE02                            ; ---------------------------------------------------------------------------
0001BE02                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001BE02                            ; ---------------------------------------------------------------------------
0001BE02                            
0001BE02                            Obj84:					; XREF: Obj_Index
0001BE02 7000                       		moveq	#0,d0
0001BE04 1028 0024                  		move.b	$24(a0),d0
0001BE08 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001BE0C 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001BE10                            ; ===========================================================================
0001BE10 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001BE12 0000                       		dc.w loc_1A4CE-Obj84_Index
0001BE14 0000                       		dc.w loc_1A57E-Obj84_Index
0001BE16                            
0001BE16 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001BE1A 2550 0620                  		dc.w $2550, $620
0001BE1E 2490 04C0                  		dc.w $2490, $4C0
0001BE22 2510 04C0                  		dc.w $2510, $4C0
0001BE26                            ; ===========================================================================
0001BE26                            
0001BE26                            Obj84_Main:				; XREF: Obj84_Index
0001BE26 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001BE2A 7000                       		moveq	#0,d0
0001BE2C 1028 0028                  		move.b	$28(a0),d0
0001BE30 D040                       		add.w	d0,d0
0001BE32 D2C0                       		adda.w	d0,a1
0001BE34 117C 0004 0001             		move.b	#4,1(a0)
0001BE3A 08E8 0007 0001             		bset	#7,1(a0)
0001BE40 08E8 0004 0001             		bset	#4,1(a0)
0001BE46 317C 0300 0002             		move.w	#$300,2(a0)
0001BE4C 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001BE54 3159 0008                  		move.w	(a1)+,8(a0)
0001BE58 3151 000C                  		move.w	(a1),$C(a0)
0001BE5C 3159 0038                  		move.w	(a1)+,$38(a0)
0001BE60 117C 0020 0016             		move.b	#$20,$16(a0)
0001BE66 117C 0060 0017             		move.b	#$60,$17(a0)
0001BE6C 117C 0020 0019             		move.b	#$20,$19(a0)
0001BE72 117C 0060 0016             		move.b	#$60,$16(a0)
0001BE78 117C 0003 0018             		move.b	#3,$18(a0)
0001BE7E 5428 0024                  		addq.b	#2,$24(a0)
0001BE82                            
0001BE82                            loc_1A4CE:				; XREF: Obj84_Index
0001BE82 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001BE88 6F00                       		ble.s	loc_1A4DC
0001BE8A 08E8 0001 0001             		bset	#1,1(a0)
0001BE90                            
0001BE90                            loc_1A4DC:
0001BE90 42A8 003C                  		clr.l	$3C(a0)
0001BE94 4A28 0029                  		tst.b	$29(a0)
0001BE98 6700                       		beq.s	loc_1A4EA
0001BE9A 5428 0024                  		addq.b	#2,$24(a0)
0001BE9E                            
0001BE9E                            loc_1A4EA:
0001BE9E 2028 003C                  		move.l	$3C(a0),d0
0001BEA2 2228 0038                  		move.l	$38(a0),d1
0001BEA6 D280                       		add.l	d0,d1
0001BEA8 4841                       		swap	d1
0001BEAA 3141 000C                  		move.w	d1,$C(a0)
0001BEAE 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001BEB4 6600                       		bne.s	loc_1A524
0001BEB6 4A68 0030                  		tst.w	$30(a0)
0001BEBA 6A00                       		bpl.s	loc_1A524
0001BEBC 70F6                       		moveq	#-$A,d0
0001BEBE 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001BEC4 6F00                       		ble.s	loc_1A514
0001BEC6 700E                       		moveq	#$E,d0
0001BEC8                            
0001BEC8                            loc_1A514:
0001BEC8 D240                       		add.w	d0,d1
0001BECA 2268 0034                  		movea.l	$34(a0),a1
0001BECE 3341 000C                  		move.w	d1,$C(a1)
0001BED2 3368 0008 0008             		move.w	8(a0),8(a1)
0001BED8                            
0001BED8                            loc_1A524:
0001BED8 323C 002B                  		move.w	#$2B,d1
0001BEDC 343C 0060                  		move.w	#$60,d2
0001BEE0 363C 0061                  		move.w	#$61,d3
0001BEE4 3828 0008                  		move.w	8(a0),d4
0001BEE8 4EB9 0001 04F0             		jsr	SolidObject
0001BEEE 7000                       		moveq	#0,d0
0001BEF0 3228 003C                  		move.w	$3C(a0),d1
0001BEF4 6A00                       		bpl.s	loc_1A550
0001BEF6 4441                       		neg.w	d1
0001BEF8 5141                       		subq.w	#8,d1
0001BEFA 6500                       		bcs.s	loc_1A55C
0001BEFC 5200                       		addq.b	#1,d0
0001BEFE E841                       		asr.w	#4,d1
0001BF00 D041                       		add.w	d1,d0
0001BF02 6000                       		bra.s	loc_1A55C
0001BF04                            ; ===========================================================================
0001BF04                            
0001BF04                            loc_1A550:
0001BF04 0441 0027                  		subi.w	#$27,d1
0001BF08 6500                       		bcs.s	loc_1A55C
0001BF0A 5200                       		addq.b	#1,d0
0001BF0C E841                       		asr.w	#4,d1
0001BF0E D041                       		add.w	d1,d0
0001BF10                            
0001BF10                            loc_1A55C:
0001BF10 1140 001A                  		move.b	d0,$1A(a0)
0001BF14 3038 D008                  		move.w	($FFFFD008).w,d0
0001BF18 9068 0008                  		sub.w	8(a0),d0
0001BF1C 6B00                       		bmi.s	loc_1A578
0001BF1E 0440 0140                  		subi.w	#$140,d0
0001BF22 6B00                       		bmi.s	loc_1A578
0001BF24 4A28 0001                  		tst.b	1(a0)
0001BF28 6A00 FED2                  		bpl.w	Obj84_Delete
0001BF2C                            
0001BF2C                            loc_1A578:
0001BF2C 4EF9 0000 E106             		jmp	DisplaySprite
0001BF32                            ; ===========================================================================
0001BF32                            
0001BF32                            loc_1A57E:				; XREF: Obj84_Index
0001BF32 7000                       		moveq	#0,d0
0001BF34 1028 0028                  		move.b	$28(a0),d0
0001BF38 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001BF3C 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001BF40 6000 FF5C                  		bra.w	loc_1A4EA
0001BF44                            ; ===========================================================================
0001BF44 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001BF46 0000                       		dc.w loc_1A598-off_1A590
0001BF48 0000                       		dc.w loc_1A604-off_1A590
0001BF4A 0000                       		dc.w loc_1A604-off_1A590
0001BF4C                            ; ===========================================================================
0001BF4C                            
0001BF4C                            loc_1A598:				; XREF: off_1A590
0001BF4C 4A28 0029                  		tst.b	$29(a0)
0001BF50 6600                       		bne.s	loc_1A5D4
0001BF52 2268 0034                  		movea.l	$34(a0),a1
0001BF56 4A29 0021                  		tst.b	$21(a1)
0001BF5A 6600                       		bne.s	loc_1A5B4
0001BF5C 6100 D2CA                  		bsr.w	BossDefeated
0001BF60 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001BF68                            
0001BF68                            loc_1A5B4:
0001BF68 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001BF70 6400                       		bcc.s	locret_1A602
0001BF72 42A8 003C                  		clr.l	$3C(a0)
0001BF76 2268 0034                  		movea.l	$34(a0),a1
0001BF7A 5369 0032                  		subq.w	#1,$32(a1)
0001BF7E 4269 0030                  		clr.w	$30(a1)
0001BF82 5528 0024                  		subq.b	#2,$24(a0)
0001BF86 4E75                       		rts	
0001BF88                            ; ===========================================================================
0001BF88                            
0001BF88                            loc_1A5D4:
0001BF88 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001BF8E 6C00                       		bge.s	loc_1A5E4
0001BF90 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001BF98                            
0001BF98                            loc_1A5E4:
0001BF98 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001BFA0 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001BFA6 6E00                       		bgt.s	locret_1A602
0001BFA8 4268 003E                  		clr.w	$3E(a0)
0001BFAC 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001BFB2 4228 0029                  		clr.b	$29(a0)
0001BFB6                            
0001BFB6                            locret_1A602:
0001BFB6 4E75                       		rts	
0001BFB8                            ; ===========================================================================
0001BFB8                            
0001BFB8                            loc_1A604:				; XREF: off_1A590
0001BFB8 08E8 0001 0001             		bset	#1,1(a0)
0001BFBE 4A28 0029                  		tst.b	$29(a0)
0001BFC2 6600                       		bne.s	loc_1A646
0001BFC4 2268 0034                  		movea.l	$34(a0),a1
0001BFC8 4A29 0021                  		tst.b	$21(a1)
0001BFCC 6600                       		bne.s	loc_1A626
0001BFCE 6100 D258                  		bsr.w	BossDefeated
0001BFD2 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001BFDA                            
0001BFDA                            loc_1A626:
0001BFDA 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001BFE2 6400                       		bcc.s	locret_1A674
0001BFE4 42A8 003C                  		clr.l	$3C(a0)
0001BFE8 2268 0034                  		movea.l	$34(a0),a1
0001BFEC 5369 0032                  		subq.w	#1,$32(a1)
0001BFF0 4269 0030                  		clr.w	$30(a1)
0001BFF4 5528 0024                  		subq.b	#2,$24(a0)
0001BFF8 4E75                       		rts	
0001BFFA                            ; ===========================================================================
0001BFFA                            
0001BFFA                            loc_1A646:
0001BFFA 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001C000 6D00                       		blt.s	loc_1A656
0001C002 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001C00A                            
0001C00A                            loc_1A656:
0001C00A 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001C012 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001C018 6D00                       		blt.s	locret_1A674
0001C01A 4268 003E                  		clr.w	$3E(a0)
0001C01E 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001C024 4228 0029                  		clr.b	$29(a0)
0001C028                            
0001C028                            locret_1A674:
0001C028 4E75                       		rts	
0001C02A                            ; ===========================================================================
0001C02A                            ; ---------------------------------------------------------------------------
0001C02A                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001C02A                            ; ---------------------------------------------------------------------------
0001C02A                            Map_obj84:
0001C02A                            	include "_maps\obj84.asm"
0001C02A                            ; ---------------------------------------------------------------------------
0001C02A                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001C02A                            ; ---------------------------------------------------------------------------
0001C02A 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001C02E 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001C032 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001C036 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001C03A 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001C03E 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001C042 06                         byte_1A68E:	dc.b 6
0001C043 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C048 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C04D B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C052 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C057 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C05C B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C061 08                         byte_1A6AD:	dc.b 8
0001C062 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C067 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C06C B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C071 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C076 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C07B B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C080 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C085 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C08A 0A                         byte_1A6D6:	dc.b $A
0001C08B A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C090 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C095 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C09A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C09F B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C0A4 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C0A9 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C0AE D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C0B3 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C0B8 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C0BD 0C                         byte_1A709:	dc.b $C
0001C0BE A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C0C3 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C0C8 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C0CD B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C0D2 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C0D7 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C0DC D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C0E1 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C0E6 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C0EB F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C0F0 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C0F5 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C0FA 0D                         byte_1A746:	dc.b $D
0001C0FB A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C100 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C105 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C10A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C10F B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C114 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C119 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C11E D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C123 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C128 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C12D 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C132 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C137 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001C13C 0E                         byte_1A788:	dc.b $E
0001C13D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C142 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C147 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C14C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C151 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C156 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C15B D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C160 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C165 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C16A F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C16F 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C174 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C179 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001C17E 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001C183 02                         byte_1A7CF:	dc.b 2
0001C184 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001C189 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001C18E                            		even
0001C18E                            		even
0001C18E                            
0001C18E                            ; ===========================================================================
0001C18E                            ; ---------------------------------------------------------------------------
0001C18E                            ; Object 86 - energy balls (FZ)
0001C18E                            ; ---------------------------------------------------------------------------
0001C18E                            
0001C18E                            Obj86:					; XREF: Obj_Index
0001C18E 7000                       		moveq	#0,d0
0001C190 1028 0024                  		move.b	$24(a0),d0
0001C194 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001C198 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001C19C                            ; ===========================================================================
0001C19C 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001C19E 0000                       		dc.w Obj86_Generator-Obj86_Index
0001C1A0 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001C1A2 0000                       		dc.w loc_1A962-Obj86_Index
0001C1A4 0000                       		dc.w loc_1A982-Obj86_Index
0001C1A6                            ; ===========================================================================
0001C1A6                            
0001C1A6                            Obj86_Main:				; XREF: Obj86_Index
0001C1A6 317C 2588 0008             		move.w	#$2588,8(a0)
0001C1AC 317C 053C 000C             		move.w	#$53C,$C(a0)
0001C1B2 317C 0300 0002             		move.w	#$300,2(a0)
0001C1B8 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001C1C0 117C 0000 001C             		move.b	#0,$1C(a0)
0001C1C6 117C 0003 0018             		move.b	#3,$18(a0)
0001C1CC 117C 0008 0017             		move.b	#8,$17(a0)
0001C1D2 117C 0008 0016             		move.b	#8,$16(a0)
0001C1D8 117C 0004 0001             		move.b	#4,1(a0)
0001C1DE 08E8 0007 0001             		bset	#7,1(a0)
0001C1E4 5428 0024                  		addq.b	#2,$24(a0)
0001C1E8                            
0001C1E8                            Obj86_Generator:			; XREF: Obj86_Index
0001C1E8 2268 0034                  		movea.l	$34(a0),a1
0001C1EC 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001C1F2 6600                       		bne.s	loc_1A850
0001C1F4 10BC 003F                  		move.b	#$3F,(a0)
0001C1F8 117C 0000 0024             		move.b	#0,$24(a0)
0001C1FE 4EF9 0000 E106             		jmp	DisplaySprite
0001C204                            ; ===========================================================================
0001C204                            
0001C204                            loc_1A850:
0001C204 117C 0000 001C             		move.b	#0,$1C(a0)
0001C20A 4A28 0029                  		tst.b	$29(a0)
0001C20E 6700                       		beq.s	loc_1A86C
0001C210 5428 0024                  		addq.b	#2,$24(a0)
0001C214 117C 0001 001C             		move.b	#1,$1C(a0)
0001C21A 117C 003E 0028             		move.b	#$3E,$28(a0)
0001C220                            
0001C220                            loc_1A86C:
0001C220 323C 0013                  		move.w	#$13,d1
0001C224 343C 0008                  		move.w	#8,d2
0001C228 363C 0011                  		move.w	#$11,d3
0001C22C 3828 0008                  		move.w	8(a0),d4
0001C230 4EB9 0001 04F0             		jsr	SolidObject
0001C236 3038 D008                  		move.w	($FFFFD008).w,d0
0001C23A 9068 0008                  		sub.w	8(a0),d0
0001C23E 6B00                       		bmi.s	loc_1A89A
0001C240 0440 0140                  		subi.w	#$140,d0
0001C244 6B00                       		bmi.s	loc_1A89A
0001C246 4A28 0001                  		tst.b	1(a0)
0001C24A 6A00 FBB0                  		bpl.w	Obj84_Delete
0001C24E                            
0001C24E                            loc_1A89A:
0001C24E 43FA 0000                  		lea	Ani_obj86(pc),a1
0001C252 4EB9 0000 B218             		jsr	AnimateSprite
0001C258 4EF9 0000 E106             		jmp	DisplaySprite
0001C25E                            ; ===========================================================================
0001C25E                            
0001C25E                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001C25E 4A28 0029                  		tst.b	$29(a0)
0001C262 6700 0000                  		beq.w	loc_1A954
0001C266 4228 0029                  		clr.b	$29(a0)
0001C26A D068 0030                  		add.w	$30(a0),d0
0001C26E 0240 001E                  		andi.w	#$1E,d0
0001C272 D4C0                       		adda.w	d0,a2
0001C274 5868 0030                  		addq.w	#4,$30(a0)
0001C278 4268 0032                  		clr.w	$32(a0)
0001C27C 7403                       		moveq	#3,d2
0001C27E                            
0001C27E                            Obj86_Loop:
0001C27E 4EB9 0000 E5B2             		jsr	SingleObjLoad2
0001C284 6600 0000                  		bne.w	loc_1A954
0001C288 12BC 0086                  		move.b	#$86,(a1)
0001C28C 3368 0008 0008             		move.w	8(a0),8(a1)
0001C292 337C 053C 000C             		move.w	#$53C,$C(a1)
0001C298 137C 0008 0024             		move.b	#8,$24(a1)
0001C29E 337C 2300 0002             		move.w	#$2300,2(a1)
0001C2A4 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001C2AC 137C 000C 0016             		move.b	#$C,$16(a1)
0001C2B2 137C 000C 0017             		move.b	#$C,$17(a1)
0001C2B8 137C 0000 0020             		move.b	#0,$20(a1)
0001C2BE 137C 0003 0018             		move.b	#3,$18(a1)
0001C2C4 337C 003E 0028             		move.w	#$3E,$28(a1)
0001C2CA 137C 0004 0001             		move.b	#4,1(a1)
0001C2D0 08E9 0007 0001             		bset	#7,1(a1)
0001C2D6 2348 0034                  		move.l	a0,$34(a1)
0001C2DA 4EB9 0000 33AE             		jsr	(RandomNumber).l
0001C2E0 3228 0032                  		move.w	$32(a0),d1
0001C2E4 C3FC FFB1                  		muls.w	#-$4F,d1
0001C2E8 0641 2578                  		addi.w	#$2578,d1
0001C2EC 0240 001F                  		andi.w	#$1F,d0
0001C2F0 0440 0010                  		subi.w	#$10,d0
0001C2F4 D041                       		add.w	d1,d0
0001C2F6 3340 0030                  		move.w	d0,$30(a1)
0001C2FA 5268 0032                  		addq.w	#1,$32(a0)
0001C2FE 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001C304 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001C308                            
0001C308                            loc_1A954:
0001C308 4A68 0032                  		tst.w	$32(a0)
0001C30C 6600                       		bne.s	loc_1A95E
0001C30E 5428 0024                  		addq.b	#2,$24(a0)
0001C312                            
0001C312                            loc_1A95E:
0001C312 6000 FF0C                  		bra.w	loc_1A86C
0001C316                            ; ===========================================================================
0001C316                            
0001C316                            loc_1A962:				; XREF: Obj86_Index
0001C316 117C 0002 001C             		move.b	#2,$1C(a0)
0001C31C 4A68 0038                  		tst.w	$38(a0)
0001C320 6600                       		bne.s	loc_1A97E
0001C322 117C 0002 0024             		move.b	#2,$24(a0)
0001C328 2268 0034                  		movea.l	$34(a0),a1
0001C32C 337C FFFF 0032             		move.w	#-1,$32(a1)
0001C332                            
0001C332                            loc_1A97E:
0001C332 6000 FEEC                  		bra.w	loc_1A86C
0001C336                            ; ===========================================================================
0001C336                            
0001C336                            loc_1A982:				; XREF: Obj86_Index
0001C336 7000                       		moveq	#0,d0
0001C338 1028 0025                  		move.b	$25(a0),d0
0001C33C 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001C340 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001C344 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001C348 4EB9 0000 B218             		jsr	AnimateSprite
0001C34E 4EF9 0000 E106             		jmp	DisplaySprite
0001C354                            ; ===========================================================================
0001C354 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001C356 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001C358 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001C35A                            ; ===========================================================================
0001C35A                            
0001C35A                            loc_1A9A6:				; XREF: Obj86_Index2
0001C35A 3028 0030                  		move.w	$30(a0),d0
0001C35E 9068 0008                  		sub.w	8(a0),d0
0001C362 E940                       		asl.w	#4,d0
0001C364 3140 0010                  		move.w	d0,$10(a0)
0001C368 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001C36E 5428 0025                  		addq.b	#2,$25(a0)
0001C372 4E75                       		rts	
0001C374                            ; ===========================================================================
0001C374                            
0001C374                            loc_1A9C0:				; XREF: Obj86_Index2
0001C374 4A68 0010                  		tst.w	$10(a0)
0001C378 6700                       		beq.s	loc_1A9E6
0001C37A 4EB9 0000 E0E0             		jsr	SpeedToPos
0001C380 3028 0008                  		move.w	8(a0),d0
0001C384 9068 0030                  		sub.w	$30(a0),d0
0001C388 6400                       		bcc.s	loc_1A9E6
0001C38A 4268 0010                  		clr.w	$10(a0)
0001C38E D168 0008                  		add.w	d0,8(a0)
0001C392 2268 0034                  		movea.l	$34(a0),a1
0001C396 5369 0032                  		subq.w	#1,$32(a1)
0001C39A                            
0001C39A                            loc_1A9E6:
0001C39A 117C 0000 001C             		move.b	#0,$1C(a0)
0001C3A0 5368 0028                  		subq.w	#1,$28(a0)
0001C3A4 6600                       		bne.s	locret_1AA1C
0001C3A6 5428 0025                  		addq.b	#2,$25(a0)
0001C3AA 117C 0001 001C             		move.b	#1,$1C(a0)
0001C3B0 117C 009A 0020             		move.b	#$9A,$20(a0)
0001C3B6 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001C3BC 7000                       		moveq	#0,d0
0001C3BE 3038 D008                  		move.w	($FFFFD008).w,d0
0001C3C2 9068 0008                  		sub.w	8(a0),d0
0001C3C6 3140 0010                  		move.w	d0,$10(a0)
0001C3CA 317C 0140 0012             		move.w	#$140,$12(a0)
0001C3D0                            
0001C3D0                            locret_1AA1C:
0001C3D0 4E75                       		rts	
0001C3D2                            ; ===========================================================================
0001C3D2                            
0001C3D2                            loc_1AA1E:				; XREF: Obj86_Index2
0001C3D2 4EB9 0000 E0E0             		jsr	SpeedToPos
0001C3D8 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001C3DE 6400                       		bcc.s	loc_1AA34
0001C3E0 5368 0028                  		subq.w	#1,$28(a0)
0001C3E4 6700                       		beq.s	loc_1AA34
0001C3E6 4E75                       		rts	
0001C3E8                            ; ===========================================================================
0001C3E8                            
0001C3E8                            loc_1AA34:
0001C3E8 2268 0034                  		movea.l	$34(a0),a1
0001C3EC 5369 0038                  		subq.w	#1,$38(a1)
0001C3F0 6000 FA0A                  		bra.w	Obj84_Delete
0001C3F4                            ; ===========================================================================
0001C3F4                            Ani_obj86:
0001C3F4                            	include "_anim\obj86.asm"
0001C3F4                            ; ---------------------------------------------------------------------------
0001C3F4                            ; Animation script - energy ball launcher (FZ)
0001C3F4                            ; ---------------------------------------------------------------------------
0001C3F4 0000                       		dc.w byte_1AA46-Ani_obj86
0001C3F6 0000                       		dc.w byte_1AA4A-Ani_obj86
0001C3F8 0000                       		dc.w byte_1AA50-Ani_obj86
0001C3FA 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001C3FE 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001C404 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001C40A                            		even
0001C40A                            		even
0001C40A                            
0001C40A                            ; ---------------------------------------------------------------------------
0001C40A                            ; Sprite mappings - energy ball	launcher (FZ)
0001C40A                            ; ---------------------------------------------------------------------------
0001C40A                            Map_obj86:
0001C40A                            	include "_maps\obj86.asm"
0001C40A                            ; ---------------------------------------------------------------------------
0001C40A                            ; Sprite mappings - energy ball	launcher (FZ)
0001C40A                            ; ---------------------------------------------------------------------------
0001C40A 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001C40E 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001C412 01                         byte_1AA5E:	dc.b 1
0001C413 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001C418 01                         byte_1AA64:	dc.b 1
0001C419 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001C41E 01                         byte_1AA6A:	dc.b 1
0001C41F F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001C424 01                         byte_1AA70:	dc.b 1
0001C425 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001C42A                            		even
0001C42A                            		even
0001C42A                            
0001C42A                            Ani_obj86a:
0001C42A                            	include "_anim\obj86a.asm"
0001C42A                            ; ---------------------------------------------------------------------------
0001C42A                            ; Animation script - energy balls (FZ)
0001C42A                            ; ---------------------------------------------------------------------------
0001C42A 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001C42C 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001C42E 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001C43D 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001C44C 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001C450 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001C45A                            		even
0001C45A                            		even
0001C45A                            
0001C45A                            ; ---------------------------------------------------------------------------
0001C45A                            ; Sprite mappings - energy balls (FZ)
0001C45A                            ; ---------------------------------------------------------------------------
0001C45A                            Map_obj86a:
0001C45A                            	include "_maps\obj86a.asm"
0001C45A                            ; ---------------------------------------------------------------------------
0001C45A                            ; Sprite mappings - energy balls (FZ)
0001C45A                            ; ---------------------------------------------------------------------------
0001C45A 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001C45E 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001C462 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001C466 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001C46A 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001C46E 0000                       		dc.w byte_1AB20-Map_obj86a
0001C470 02                         byte_1AABC:	dc.b 2
0001C471 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001C476 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001C47B 02                         byte_1AAC7:	dc.b 2
0001C47C F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001C481 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001C486 02                         byte_1AAD2:	dc.b 2
0001C487 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001C48C 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001C491 02                         byte_1AADD:	dc.b 2
0001C492 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001C497 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001C49C 02                         byte_1AAE8:	dc.b 2
0001C49D F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001C4A2 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001C4A7 02                         byte_1AAF3:	dc.b 2
0001C4A8 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001C4AD F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001C4B2 01                         byte_1AAFE:	dc.b 1
0001C4B3 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001C4B8 01                         byte_1AB04:	dc.b 1
0001C4B9 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001C4BE 02                         byte_1AB0A:	dc.b 2
0001C4BF F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001C4C4 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001C4C9 02                         byte_1AB15:	dc.b 2
0001C4CA F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001C4CF F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001C4D4 00                         byte_1AB20:	dc.b 0
0001C4D6 00                         		even
0001C4D6 00                         		even
0001C4D6                            
0001C4D6                            ; ===========================================================================
0001C4D6                            ; ---------------------------------------------------------------------------
0001C4D6                            ; Object 3E - prison capsule
0001C4D6                            ; ---------------------------------------------------------------------------
0001C4D6                            
0001C4D6                            Obj3E:					; XREF: Obj_Index
0001C4D6 7000                       		moveq	#0,d0
0001C4D8 1028 0024                  		move.b	$24(a0),d0
0001C4DC 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001C4E0 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001C4E4 3028 0008                  		move.w	8(a0),d0
0001C4E8 0240 FF80                  		andi.w	#$FF80,d0
0001C4EC 3238 F700                  		move.w	($FFFFF700).w,d1
0001C4F0 0441 0080                  		subi.w	#$80,d1
0001C4F4 0241 FF80                  		andi.w	#$FF80,d1
0001C4F8 9041                       		sub.w	d1,d0
0001C4FA 0C40 0280                  		cmpi.w	#$280,d0
0001C4FE 6200                       		bhi.s	Obj3E_Delete
0001C500 4EF9 0000 E106             		jmp	DisplaySprite
0001C506                            ; ===========================================================================
0001C506                            
0001C506                            Obj3E_Delete:
0001C506 4EF9 0000 E142             		jmp	DeleteObject
0001C50C                            ; ===========================================================================
0001C50C 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001C50E 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001C510 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001C512 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001C514 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001C516 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001C518 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001C51A 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001C51C                            
0001C51C 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001C520 040C 0501                  		dc.b 4,	$C, 5, 1
0001C524 0610 0403                  		dc.b 6,	$10, 4,	3
0001C528 0810 0305                  		dc.b 8,	$10, 3,	5
0001C52C                            ; ===========================================================================
0001C52C                            
0001C52C                            Obj3E_Main:				; XREF: Obj3E_Index
0001C52C 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001C534 317C 049D 0002             		move.w	#$49D,2(a0)
0001C53A 117C 0004 0001             		move.b	#4,1(a0)
0001C540 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001C546 7000                       		moveq	#0,d0
0001C548 1028 0028                  		move.b	$28(a0),d0
0001C54C E548                       		lsl.w	#2,d0
0001C54E 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001C552 1159 0024                  		move.b	(a1)+,$24(a0)
0001C556 1159 0019                  		move.b	(a1)+,$19(a0)
0001C55A 1159 0018                  		move.b	(a1)+,$18(a0)
0001C55E 1159 001A                  		move.b	(a1)+,$1A(a0)
0001C562 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001C566 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001C568 117C 0006 0020             		move.b	#6,$20(a0)
0001C56E 117C 0008 0021             		move.b	#8,$21(a0)
0001C574                            
0001C574                            Obj3E_Not02:
0001C574 4E75                       		rts	
0001C576                            ; ===========================================================================
0001C576                            
0001C576                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001C576 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001C57C 6700                       		beq.s	Obj3E_ChkOpened
0001C57E 323C 002B                  		move.w	#$2B,d1
0001C582 343C 0018                  		move.w	#$18,d2
0001C586 363C 0018                  		move.w	#$18,d3
0001C58A 3828 0008                  		move.w	8(a0),d4
0001C58E 4EF9 0001 04F0             		jmp	SolidObject
0001C594                            ; ===========================================================================
0001C594                            
0001C594                            Obj3E_ChkOpened:
0001C594 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001C598 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001C59A 4228 0025                  		clr.b	$25(a0)
0001C59E 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001C5A4 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001C5AA                            
0001C5AA                            Obj3E_DoOpen:
0001C5AA 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001C5B0 4E75                       		rts	
0001C5B2                            ; ===========================================================================
0001C5B2                            
0001C5B2                            Obj3E_Switched:				; XREF: Obj3E_Index
0001C5B2 323C 0017                  		move.w	#$17,d1
0001C5B6 343C 0008                  		move.w	#8,d2
0001C5BA 363C 0008                  		move.w	#8,d3
0001C5BE 3828 0008                  		move.w	8(a0),d4
0001C5C2 4EB9 0001 04F0             		jsr	SolidObject
0001C5C8 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001C5CE 4EB9 0000 B218             		jsr	AnimateSprite
0001C5D4 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001C5DA 4A28 0025                  		tst.b	$25(a0)
0001C5DE 6700                       		beq.s	locret_1AC60
0001C5E0 5068 000C                  		addq.w	#8,$C(a0)
0001C5E4 117C 000A 0024             		move.b	#$A,$24(a0)
0001C5EA 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001C5F0 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001C5F4 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001C5F8 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001C5FE 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001C604 4228 0025                  		clr.b	$25(a0)
0001C608 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001C60E 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001C614                            
0001C614                            locret_1AC60:
0001C614 4E75                       		rts	
0001C616                            ; ===========================================================================
0001C616                            
0001C616                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001C616 7007                       		moveq	#7,d0
0001C618 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001C61C 6600                       		bne.s	loc_1ACA0
0001C61E 4EB9 0000 E59C             		jsr	SingleObjLoad
0001C624 6600                       		bne.s	loc_1ACA0
0001C626 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001C62A 3368 0008 0008             		move.w	8(a0),8(a1)
0001C630 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C636 4EB9 0000 33AE             		jsr	(RandomNumber).l
0001C63C 7200                       		moveq	#0,d1
0001C63E 1200                       		move.b	d0,d1
0001C640 E409                       		lsr.b	#2,d1
0001C642 0441 0020                  		subi.w	#$20,d1
0001C646 D369 0008                  		add.w	d1,8(a1)
0001C64A E048                       		lsr.w	#8,d0
0001C64C E608                       		lsr.b	#3,d0
0001C64E D169 000C                  		add.w	d0,$C(a1)
0001C652                            
0001C652                            loc_1ACA0:
0001C652 5368 001E                  		subq.w	#1,$1E(a0)
0001C656 6700                       		beq.s	Obj3E_MakeAnimal
0001C658 4E75                       		rts	
0001C65A                            ; ===========================================================================
0001C65A                            
0001C65A                            Obj3E_MakeAnimal:
0001C65A 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001C660 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001C666 117C 0006 001A             		move.b	#6,$1A(a0)
0001C66C 317C 0096 001E             		move.w	#$96,$1E(a0)
0001C672 0668 0020 000C             		addi.w	#$20,$C(a0)
0001C678 7C07                       		moveq	#7,d6
0001C67A 3A3C 009A                  		move.w	#$9A,d5
0001C67E 78E4                       		moveq	#-$1C,d4
0001C680                            
0001C680                            Obj3E_Loop:
0001C680 4EB9 0000 E59C             		jsr	SingleObjLoad
0001C686 6600                       		bne.s	locret_1ACF8
0001C688 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001C68C 3368 0008 0008             		move.w	8(a0),8(a1)
0001C692 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C698 D969 0008                  		add.w	d4,8(a1)
0001C69C 5E44                       		addq.w	#7,d4
0001C69E 3345 0036                  		move.w	d5,$36(a1)
0001C6A2 5145                       		subq.w	#8,d5
0001C6A4 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001C6A8                            
0001C6A8                            locret_1ACF8:
0001C6A8 4E75                       		rts	
0001C6AA                            ; ===========================================================================
0001C6AA                            
0001C6AA                            Obj3E_Animals:				; XREF: Obj3E_Index
0001C6AA 7007                       		moveq	#7,d0
0001C6AC C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001C6B0 6600                       		bne.s	loc_1AD38
0001C6B2 4EB9 0000 E59C             		jsr	SingleObjLoad
0001C6B8 6600                       		bne.s	loc_1AD38
0001C6BA 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001C6BE 3368 0008 0008             		move.w	8(a0),8(a1)
0001C6C4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C6CA 4EB9 0000 33AE             		jsr	(RandomNumber).l
0001C6D0 0240 001F                  		andi.w	#$1F,d0
0001C6D4 5D40                       		subq.w	#6,d0
0001C6D6 4A41                       		tst.w	d1
0001C6D8 6A00                       		bpl.s	loc_1AD2E
0001C6DA 4440                       		neg.w	d0
0001C6DC                            
0001C6DC                            loc_1AD2E:
0001C6DC D169 0008                  		add.w	d0,8(a1)
0001C6E0 337C 000C 0036             		move.w	#$C,$36(a1)
0001C6E6                            
0001C6E6                            loc_1AD38:
0001C6E6 5368 001E                  		subq.w	#1,$1E(a0)
0001C6EA 6600                       		bne.s	locret_1AD48
0001C6EC 5428 0024                  		addq.b	#2,$24(a0)
0001C6F0 317C 00B4 001E             		move.w	#180,$1E(a0)
0001C6F6                            
0001C6F6                            locret_1AD48:
0001C6F6 4E75                       		rts	
0001C6F8                            ; ===========================================================================
0001C6F8                            
0001C6F8                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001C6F8 703E                       		moveq	#$3E,d0
0001C6FA 7228                       		moveq	#$28,d1
0001C6FC 7440                       		moveq	#$40,d2
0001C6FE 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001C702                            
0001C702                            Obj3E_FindObj28:
0001C702 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001C704 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001C706 D2C2                       		adda.w	d2,a1		; next object RAM
0001C708 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001C70C                            
0001C70C 4EB9 0000 F7AC             		jsr	GotThroughAct
0001C712 4EF9 0000 E142             		jmp	DeleteObject
0001C718                            ; ===========================================================================
0001C718                            
0001C718                            Obj3E_Obj28Found:
0001C718 4E75                       		rts	
0001C71A                            ; ===========================================================================
0001C71A                            Ani_obj3E:
0001C71A                            	include "_anim\obj3E.asm"
0001C71A                            ; ---------------------------------------------------------------------------
0001C71A                            ; Animation script - prison capsule
0001C71A                            ; ---------------------------------------------------------------------------
0001C71A 0000                       		dc.w byte_1AD70-Ani_obj3E
0001C71C 0000                       		dc.w byte_1AD70-Ani_obj3E
0001C71E 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001C722                            		even
0001C722                            		even
0001C722                            
0001C722                            ; ---------------------------------------------------------------------------
0001C722                            ; Sprite mappings - prison capsule
0001C722                            ; ---------------------------------------------------------------------------
0001C722                            Map_obj3E:
0001C722                            	include "_maps\obj3E.asm"
0001C722                            ; ---------------------------------------------------------------------------
0001C722                            ; Sprite mappings - prison capsule
0001C722                            ; ---------------------------------------------------------------------------
0001C722 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001C726 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001C72A 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001C72E 0000                       		dc.w byte_1ADE2-Map_obj3E
0001C730 07                         byte_1AD82:	dc.b 7
0001C731 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001C736 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001C73B E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001C740 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001C745 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001C74A 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001C74F 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001C754 01                         byte_1ADA6:	dc.b 1
0001C755 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001C75A 06                         byte_1ADAC:	dc.b 6
0001C75B 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001C760 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001C765 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001C76A 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001C76F 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001C774 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001C779 01                         byte_1ADCB:	dc.b 1
0001C77A F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001C77F 02                         byte_1ADD1:	dc.b 2
0001C780 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001C785 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001C78A 01                         byte_1ADDC:	dc.b 1
0001C78B F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001C790 00                         byte_1ADE2:	dc.b 0
0001C792 00                         		even
0001C792 00                         		even
0001C792                            
0001C792                            ; ---------------------------------------------------------------------------
0001C792                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001C792                            ; ---------------------------------------------------------------------------
0001C792                            
0001C792                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C792                            
0001C792                            
0001C792                            TouchResponse:				; XREF: Obj01
0001C792 4E71                       		nop	
0001C794 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001C798 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001C79C 5142                       		subq.w	#8,d2
0001C79E 7A00                       		moveq	#0,d5
0001C7A0 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001C7A4 5705                       		subq.b	#3,d5
0001C7A6 9645                       		sub.w	d5,d3
0001C7A8 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001C7AE 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001C7B0 0643 000C                  		addi.w	#$C,d3
0001C7B4 7A0A                       		moveq	#$A,d5
0001C7B6                            
0001C7B6                            Touch_NoDuck:
0001C7B6 383C 0010                  		move.w	#$10,d4
0001C7BA DA45                       		add.w	d5,d5
0001C7BC 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001C7C0 3C3C 005F                  		move.w	#$5F,d6
0001C7C4                            
0001C7C4                            Touch_Loop:
0001C7C4 4A29 0001                  		tst.b	1(a1)
0001C7C8 6A00                       		bpl.s	Touch_NextObj
0001C7CA 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001C7CE 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001C7D0                            
0001C7D0                            Touch_NextObj:
0001C7D0 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001C7D4 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001C7D8                            
0001C7D8 7000                       		moveq	#0,d0
0001C7DA 4E75                       		rts	
0001C7DC                            ; ===========================================================================
0001C7DC 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001C7DE 0C14                       		dc.b   $C, $14
0001C7E0 140C                       		dc.b  $14,  $C
0001C7E2 0410                       		dc.b	4, $10
0001C7E4 0C12                       		dc.b   $C, $12
0001C7E6 1010                       		dc.b  $10, $10
0001C7E8 0606                       		dc.b	6,   6
0001C7EA 180C                       		dc.b  $18,  $C
0001C7EC 0C10                       		dc.b   $C, $10
0001C7EE 100C                       		dc.b  $10,  $C
0001C7F0 0808                       		dc.b	8,   8
0001C7F2 1410                       		dc.b  $14, $10
0001C7F4 1408                       		dc.b  $14,   8
0001C7F6 0E0E                       		dc.b   $E,  $E
0001C7F8 1818                       		dc.b  $18, $18
0001C7FA 2810                       		dc.b  $28, $10
0001C7FC 1018                       		dc.b  $10, $18
0001C7FE 0810                       		dc.b	8, $10
0001C800 2070                       		dc.b  $20, $70
0001C802 4020                       		dc.b  $40, $20
0001C804 8020                       		dc.b  $80, $20
0001C806 2020                       		dc.b  $20, $20
0001C808 0808                       		dc.b	8,   8
0001C80A 0404                       		dc.b	4,   4
0001C80C 2008                       		dc.b  $20,   8
0001C80E 0C0C                       		dc.b   $C,  $C
0001C810 0804                       		dc.b	8,   4
0001C812 1804                       		dc.b  $18,   4
0001C814 2804                       		dc.b  $28,   4
0001C816 0408                       		dc.b	4,   8
0001C818 0418                       		dc.b	4, $18
0001C81A 0428                       		dc.b	4, $28
0001C81C 0420                       		dc.b	4, $20
0001C81E 1818                       		dc.b  $18, $18
0001C820 0C18                       		dc.b   $C, $18
0001C822 4808                       		dc.b  $48,   8
0001C824                            ; ===========================================================================
0001C824                            
0001C824                            Touch_Height:				; XREF: TouchResponse
0001C824 0240 003F                  		andi.w	#$3F,d0
0001C828 D040                       		add.w	d0,d0
0001C82A 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001C82E 7200                       		moveq	#0,d1
0001C830 121A                       		move.b	(a2)+,d1
0001C832 3029 0008                  		move.w	8(a1),d0
0001C836 9041                       		sub.w	d1,d0
0001C838 9042                       		sub.w	d2,d0
0001C83A 6400                       		bcc.s	loc_1AE98
0001C83C D241                       		add.w	d1,d1
0001C83E D041                       		add.w	d1,d0
0001C840 6500                       		bcs.s	Touch_Width
0001C842 6000 FF8C                  		bra.w	Touch_NextObj
0001C846                            ; ===========================================================================
0001C846                            
0001C846                            loc_1AE98:
0001C846 B044                       		cmp.w	d4,d0
0001C848 6200 FF86                  		bhi.w	Touch_NextObj
0001C84C                            
0001C84C                            Touch_Width:
0001C84C 7200                       		moveq	#0,d1
0001C84E 121A                       		move.b	(a2)+,d1
0001C850 3029 000C                  		move.w	$C(a1),d0
0001C854 9041                       		sub.w	d1,d0
0001C856 9043                       		sub.w	d3,d0
0001C858 6400                       		bcc.s	loc_1AEB6
0001C85A D241                       		add.w	d1,d1
0001C85C D240                       		add.w	d0,d1
0001C85E 6500                       		bcs.s	Touch_ChkValue
0001C860 6000 FF6E                  		bra.w	Touch_NextObj
0001C864                            ; ===========================================================================
0001C864                            
0001C864                            loc_1AEB6:
0001C864 B045                       		cmp.w	d5,d0
0001C866 6200 FF68                  		bhi.w	Touch_NextObj
0001C86A                            
0001C86A                            Touch_ChkValue:
0001C86A 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001C86E 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001C872 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001C876 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001C87A 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001C87E 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001C880 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001C884                            
0001C884                            ; touch	response is $40-$7F
0001C884                            
0001C884 1029 0020                  		move.b	$20(a1),d0
0001C888 0200 003F                  		andi.b	#$3F,d0
0001C88C 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001C890 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001C892 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001C898 6400 0000                  		bcc.w	locret_1AEF2
0001C89C 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001C8A0                            
0001C8A0                            locret_1AEF2:
0001C8A0 4E75                       		rts	
0001C8A2                            ; ===========================================================================
0001C8A2                            
0001C8A2                            Touch_Monitor:
0001C8A2 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001C8A6 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001C8A8 3028 000C                  		move.w	$C(a0),d0
0001C8AC 0440 0010                  		subi.w	#$10,d0
0001C8B0 B069 000C                  		cmp.w	$C(a1),d0
0001C8B4 6500                       		bcs.s	locret_1AF2E
0001C8B6 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001C8BA 337C FE80 0012             		move.w	#-$180,$12(a1)
0001C8C0 4A29 0025                  		tst.b	$25(a1)
0001C8C4 6600                       		bne.s	locret_1AF2E
0001C8C6 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001C8CA 4E75                       		rts	
0001C8CC                            ; ===========================================================================
0001C8CC                            
0001C8CC                            loc_1AF1E:
0001C8CC 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001C8D2 6600                       		bne.s	locret_1AF2E
0001C8D4 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001C8D8 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001C8DC                            
0001C8DC                            locret_1AF2E:
0001C8DC 4E75                       		rts	
0001C8DE                            ; ===========================================================================
0001C8DE                            
0001C8DE                            Touch_Enemy:				; XREF: Touch_ChkValue
0001C8DE 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001C8E2 6600                       		bne.s	loc_1AF40	; if yes, branch
0001C8E4 0C28 001D 001C             		cmpi.b	#$1D,$1C(a0)	; is Sonic Spin Dashing?
0001C8EA 6700 0000                  		beq.w	loc_1AF40	; if yes, branch
0001C8EE 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001C8F4 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001C8F8                            
0001C8F8                            loc_1AF40:
0001C8F8 4A29 0021                  		tst.b	$21(a1)
0001C8FC 6700                       		beq.s	Touch_KillEnemy
0001C8FE 4468 0010                  		neg.w	$10(a0)
0001C902 4468 0012                  		neg.w	$12(a0)
0001C906 E0E8 0010                  		asr	$10(a0)
0001C90A E0E8 0012                  		asr	$12(a0)
0001C90E 137C 0000 0020             		move.b	#0,$20(a1)
0001C914 5329 0021                  		subq.b	#1,$21(a1)
0001C918 6600                       		bne.s	locret_1AF68
0001C91A 08E9 0007 0022             		bset	#7,$22(a1)
0001C920                            
0001C920                            locret_1AF68:
0001C920 4E75                       		rts	
0001C922                            ; ===========================================================================
0001C922                            
0001C922                            Touch_KillEnemy:
0001C922 08E9 0007 0022             		bset	#7,$22(a1)
0001C928 7000                       		moveq	#0,d0
0001C92A 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001C92E 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001C932 0C40 0006                  		cmpi.w	#6,d0
0001C936 6500                       		bcs.s	loc_1AF82
0001C938 7006                       		moveq	#6,d0
0001C93A                            
0001C93A                            loc_1AF82:
0001C93A 3340 003E                  		move.w	d0,$3E(a1)
0001C93E 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001C942 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001C948 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001C94A 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001C94E 337C 000A 003E             		move.w	#$A,$3E(a1)
0001C954                            
0001C954                            loc_1AF9C:
0001C954 6100 0000                  		bsr.w	AddPoints
0001C958 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001C95C 137C 0000 0024             		move.b	#0,$24(a1)
0001C962 4A68 0012                  		tst.w	$12(a0)
0001C966 6B00                       		bmi.s	loc_1AFC2
0001C968 3028 000C                  		move.w	$C(a0),d0
0001C96C B069 000C                  		cmp.w	$C(a1),d0
0001C970 6400                       		bcc.s	loc_1AFCA
0001C972 4468 0012                  		neg.w	$12(a0)
0001C976 4E75                       		rts	
0001C978                            ; ===========================================================================
0001C978                            
0001C978                            loc_1AFC2:
0001C978 0668 0100 0012             		addi.w	#$100,$12(a0)
0001C97E 4E75                       		rts	
0001C980                            ; ===========================================================================
0001C980                            
0001C980                            loc_1AFCA:
0001C980 0468 0100 0012             		subi.w	#$100,$12(a0)
0001C986 4E75                       		rts	
0001C988                            ; ===========================================================================
0001C988 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001C990                            ; ===========================================================================
0001C990                            
0001C990                            loc_1AFDA:				; XREF: Touch_CatKiller
0001C990 08E9 0007 0022             		bset	#7,$22(a1)
0001C996                            
0001C996                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001C996 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001C99A 6700                       		beq.s	Touch_Hurt	; if not, branch
0001C99C                            
0001C99C                            loc_1AFE6:				; XREF: Touch_Hurt
0001C99C 70FF                       		moveq	#-1,d0
0001C99E 4E75                       		rts	
0001C9A0                            ; ===========================================================================
0001C9A0                            
0001C9A0                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001C9A0 4E71                       		nop	
0001C9A2 4A68 0030                  		tst.w	$30(a0)
0001C9A6 66F4                       		bne.s	loc_1AFE6
0001C9A8 2449                       		movea.l	a1,a2
0001C9AA                            
0001C9AA                            ; End of function TouchResponse
0001C9AA                            ; continue straight to HurtSonic
0001C9AA                            
0001C9AA                            ; ---------------------------------------------------------------------------
0001C9AA                            ; Hurting Sonic	subroutine
0001C9AA                            ; ---------------------------------------------------------------------------
0001C9AA                            
0001C9AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C9AA                            
0001C9AA                            
0001C9AA                            HurtSonic:
0001C9AA 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001C9AE 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001C9B0 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001C9B4 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001C9B8 4EB9 0000 E59C             		jsr	SingleObjLoad
0001C9BE 6600                       		bne.s	Hurt_Shield
0001C9C0 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001C9C4 3368 0008 0008             		move.w	8(a0),8(a1)
0001C9CA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C9D0                            
0001C9D0                            Hurt_Shield:
0001C9D0 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001C9D6 117C 0004 0024             		move.b	#4,$24(a0)
0001C9DC 4EB9 0001 498E             		jsr	Sonic_ResetOnFloor
0001C9E2 08E8 0001 0022             		bset	#1,$22(a0)
0001C9E8 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001C9EE 317C FE00 0010             		move.w	#-$200,$10(a0)
0001C9F4 0828 0006 0022             		btst	#6,$22(a0)
0001C9FA 6700                       		beq.s	Hurt_Reverse
0001C9FC 317C FE00 0012             		move.w	#-$200,$12(a0)
0001CA02 317C FF00 0010             		move.w	#-$100,$10(a0)
0001CA08                            
0001CA08                            Hurt_Reverse:
0001CA08 3028 0008                  		move.w	8(a0),d0
0001CA0C B06A 0008                  		cmp.w	8(a2),d0
0001CA10 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001CA12 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001CA16                            
0001CA16                            Hurt_ChkSpikes:
0001CA16 117C 0000 0039             		move.b	#0,$39(a0)	; clear Spin Dash flag
0001CA1C 317C 0000 0014             		move.w	#0,$14(a0)
0001CA22 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001CA28 317C 0078 0030             		move.w	#$78,$30(a0)
0001CA2E 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001CA32 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001CA36 6600                       		bne.s	Hurt_Sound	; if not, branch
0001CA38 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001CA3C 6600                       		bne.s	Hurt_Sound	; if not, branch
0001CA3E 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001CA42                            
0001CA42                            Hurt_Sound:
0001CA42 4EB9 0000 1476             		jsr	(PlaySound_Special).l
0001CA48 70FF                       		moveq	#-1,d0
0001CA4A 4E75                       		rts	
0001CA4C                            ; ===========================================================================
0001CA4C                            
0001CA4C                            Hurt_NoRings:
0001CA4C 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001CA50 6600 FF7E                  		bne.w	Hurt_Shield	; if yes, branch
0001CA54                            ; End of function HurtSonic
0001CA54                            
0001CA54                            ; ---------------------------------------------------------------------------
0001CA54                            ; Subroutine to	kill Sonic
0001CA54                            ; ---------------------------------------------------------------------------
0001CA54                            
0001CA54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA54                            
0001CA54                            
0001CA54                            KillSonic:
0001CA54 4238 FE19                  		clr.b   (Super_Sonic_Flag).w ; Revert Sonic to Normal
0001CA58 31FC 0600 F760             		move.w  #$600,(Sonic_top_speed).w ; Revert speeds
0001CA5E 31FC 000C F762             		move.w  #$C,(Sonic_acceleration).w ; ^^^
0001CA64 31FC 0080 F764             		move.w  #$80,(Sonic_deceleration).w ; ^^^
0001CA6A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001CA6E 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001CA70 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001CA76 117C 0006 0024             		move.b	#6,$24(a0)
0001CA7C 4EB9 0001 498E             		jsr	Sonic_ResetOnFloor
0001CA82 08E8 0001 0022             		bset	#1,$22(a0)
0001CA88 317C F900 0012             		move.w	#-$700,$12(a0)
0001CA8E 317C 0000 0010             		move.w	#0,$10(a0)
0001CA94 317C 0000 0014             		move.w	#0,$14(a0)
0001CA9A 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001CAA0 117C 0016 001C             		move.b	#$16,$1C(a0)
0001CAA6 08E8 0007 0002             		bset	#7,2(a0)
0001CAAC 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001CAB0 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001CAB4 6600                       		bne.s	Kill_Sound
0001CAB6 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001CABA                            
0001CABA                            Kill_Sound:
0001CABA 4EB9 0000 1476             		jsr	(PlaySound_Special).l
0001CAC0                            
0001CAC0                            Kill_NoDeath:
0001CAC0 70FF                       		moveq	#-1,d0
0001CAC2 4E75                       		rts	
0001CAC4                            ; End of function KillSonic
0001CAC4                            
0001CAC4                            
0001CAC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CAC4                            
0001CAC4                            
0001CAC4                            Touch_Special:				; XREF: Touch_ChkValue
0001CAC4 1229 0020                  		move.b	$20(a1),d1
0001CAC8 0201 003F                  		andi.b	#$3F,d1
0001CACC 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001CAD0 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001CAD2 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001CAD6 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001CAD8 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001CADC 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001CADE 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001CAE2 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001CAE4 4E75                       		rts	
0001CAE6                            ; ===========================================================================
0001CAE6                            
0001CAE6                            Touch_CatKiller:			; XREF: Touch_Special
0001CAE6 6000 FEA8                  		bra.w	loc_1AFDA
0001CAEA                            ; ===========================================================================
0001CAEA                            
0001CAEA                            Touch_Yadrin:				; XREF: Touch_Special
0001CAEA 9A40                       		sub.w	d0,d5
0001CAEC 0C45 0008                  		cmpi.w	#8,d5
0001CAF0 6400                       		bcc.s	loc_1B144
0001CAF2 3029 0008                  		move.w	8(a1),d0
0001CAF6 5940                       		subq.w	#4,d0
0001CAF8 0829 0000 0022             		btst	#0,$22(a1)
0001CAFE 6700                       		beq.s	loc_1B130
0001CB00 0440 0010                  		subi.w	#$10,d0
0001CB04                            
0001CB04                            loc_1B130:
0001CB04 9042                       		sub.w	d2,d0
0001CB06 6400                       		bcc.s	loc_1B13C
0001CB08 0640 0018                  		addi.w	#$18,d0
0001CB0C 6500                       		bcs.s	loc_1B140
0001CB0E 6000                       		bra.s	loc_1B144
0001CB10                            ; ===========================================================================
0001CB10                            
0001CB10                            loc_1B13C:
0001CB10 B044                       		cmp.w	d4,d0
0001CB12 6200                       		bhi.s	loc_1B144
0001CB14                            
0001CB14                            loc_1B140:
0001CB14 6000 FE80                  		bra.w	Touch_ChkHurt
0001CB18                            ; ===========================================================================
0001CB18                            
0001CB18                            loc_1B144:
0001CB18 6000 FDC4                  		bra.w	Touch_Enemy
0001CB1C                            ; ===========================================================================
0001CB1C                            
0001CB1C                            Touch_D7orE1:				; XREF: Touch_Special
0001CB1C 5229 0021                  		addq.b	#1,$21(a1)
0001CB20 4E75                       		rts	
0001CB22                            ; End of function Touch_Special
0001CB22                            
0001CB22                            ; ---------------------------------------------------------------------------
0001CB22                            ; Subroutine to	show the special stage layout
0001CB22                            ; ---------------------------------------------------------------------------
0001CB22                            
0001CB22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CB22                            
0001CB22                            
0001CB22                            SS_ShowLayout:				; XREF: SpecialStage
0001CB22 6100 0000                  		bsr.w	SS_AniWallsRings
0001CB26 6100 0000                  		bsr.w	SS_AniItems
0001CB2A 3F05                       		move.w	d5,-(sp)
0001CB2C 43F8 8000                  		lea	($FFFF8000).w,a1
0001CB30 1038 F780                  		move.b	($FFFFF780).w,d0
0001CB34                            ;		andi.b	#$FC,d0
0001CB34 4EB9 0000 33D4             		jsr	(CalcSine).l
0001CB3A 3800                       		move.w	d0,d4
0001CB3C 3A01                       		move.w	d1,d5
0001CB3E C9FC 0018                  		muls.w	#$18,d4
0001CB42 CBFC 0018                  		muls.w	#$18,d5
0001CB46 7400                       		moveq	#0,d2
0001CB48 3438 F700                  		move.w	($FFFFF700).w,d2
0001CB4C 84FC 0018                  		divu.w	#$18,d2
0001CB50 4842                       		swap	d2
0001CB52 4442                       		neg.w	d2
0001CB54 0642 FF4C                  		addi.w	#-$B4,d2
0001CB58 7600                       		moveq	#0,d3
0001CB5A 3638 F704                  		move.w	($FFFFF704).w,d3
0001CB5E 86FC 0018                  		divu.w	#$18,d3
0001CB62 4843                       		swap	d3
0001CB64 4443                       		neg.w	d3
0001CB66 0643 FF4C                  		addi.w	#-$B4,d3
0001CB6A 3E3C 000F                  		move.w	#$F,d7
0001CB6E                            
0001CB6E                            loc_1B19E:
0001CB6E 48A7 E000                  		movem.w	d0-d2,-(sp)
0001CB72 48A7 C000                  		movem.w	d0-d1,-(sp)
0001CB76 4440                       		neg.w	d0
0001CB78 C3C2                       		muls.w	d2,d1
0001CB7A C1C3                       		muls.w	d3,d0
0001CB7C 2C00                       		move.l	d0,d6
0001CB7E DC81                       		add.l	d1,d6
0001CB80 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001CB84 C1C2                       		muls.w	d2,d0
0001CB86 C3C3                       		muls.w	d3,d1
0001CB88 D280                       		add.l	d0,d1
0001CB8A 2406                       		move.l	d6,d2
0001CB8C 3C3C 000F                  		move.w	#$F,d6
0001CB90                            
0001CB90                            loc_1B1C0:
0001CB90 2002                       		move.l	d2,d0
0001CB92 E080                       		asr.l	#8,d0
0001CB94 32C0                       		move.w	d0,(a1)+
0001CB96 2001                       		move.l	d1,d0
0001CB98 E080                       		asr.l	#8,d0
0001CB9A 32C0                       		move.w	d0,(a1)+
0001CB9C D485                       		add.l	d5,d2
0001CB9E D284                       		add.l	d4,d1
0001CBA0 51CE FFEE                  		dbf	d6,loc_1B1C0
0001CBA4                            
0001CBA4 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001CBA8 0643 0018                  		addi.w	#$18,d3
0001CBAC 51CF FFC0                  		dbf	d7,loc_1B19E
0001CBB0                            
0001CBB0 3A1F                       		move.w	(sp)+,d5
0001CBB2 41F9 00FF 0000             		lea	($FF0000).l,a0
0001CBB8 7000                       		moveq	#0,d0
0001CBBA 3038 F704                  		move.w	($FFFFF704).w,d0
0001CBBE 80FC 0018                  		divu.w	#$18,d0
0001CBC2 C0FC 0080                  		mulu.w	#$80,d0
0001CBC6 D1C0                       		adda.l	d0,a0
0001CBC8 7000                       		moveq	#0,d0
0001CBCA 3038 F700                  		move.w	($FFFFF700).w,d0
0001CBCE 80FC 0018                  		divu.w	#$18,d0
0001CBD2 D0C0                       		adda.w	d0,a0
0001CBD4 49F8 8000                  		lea	($FFFF8000).w,a4
0001CBD8 3E3C 000F                  		move.w	#$F,d7
0001CBDC                            
0001CBDC                            loc_1B20C:
0001CBDC 3C3C 000F                  		move.w	#$F,d6
0001CBE0                            
0001CBE0                            loc_1B210:
0001CBE0 7000                       		moveq	#0,d0
0001CBE2 1018                       		move.b	(a0)+,d0
0001CBE4 6700                       		beq.s	loc_1B268
0001CBE6 0C00 004E                  		cmpi.b	#$4E,d0
0001CBEA 6200                       		bhi.s	loc_1B268
0001CBEC 3614                       		move.w	(a4),d3
0001CBEE 0643 0120                  		addi.w	#$120,d3
0001CBF2 0C43 0070                  		cmpi.w	#$70,d3
0001CBF6 6500                       		bcs.s	loc_1B268
0001CBF8 0C43 01D0                  		cmpi.w	#$1D0,d3
0001CBFC 6400                       		bcc.s	loc_1B268
0001CBFE 342C 0002                  		move.w	2(a4),d2
0001CC02 0642 00F0                  		addi.w	#$F0,d2
0001CC06 0C42 0070                  		cmpi.w	#$70,d2
0001CC0A 6500                       		bcs.s	loc_1B268
0001CC0C 0C42 0170                  		cmpi.w	#$170,d2
0001CC10 6400                       		bcc.s	loc_1B268
0001CC12 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001CC18 E748                       		lsl.w	#3,d0
0001CC1A 4BF5 0000                  		lea	(a5,d0.w),a5
0001CC1E 225D                       		movea.l	(a5)+,a1
0001CC20 321D                       		move.w	(a5)+,d1
0001CC22 D241                       		add.w	d1,d1
0001CC24 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001CC28 365D                       		movea.w	(a5)+,a3
0001CC2A 7200                       		moveq	#0,d1
0001CC2C 1219                       		move.b	(a1)+,d1
0001CC2E 5301                       		subq.b	#1,d1
0001CC30 6B00                       		bmi.s	loc_1B268
0001CC32 4EB9 0000 E266             		jsr	sub_D762
0001CC38                            
0001CC38                            loc_1B268:
0001CC38 584C                       		addq.w	#4,a4
0001CC3A 51CE FFA4                  		dbf	d6,loc_1B210
0001CC3E                            
0001CC3E 41E8 0070                  		lea	$70(a0),a0
0001CC42 51CF FF98                  		dbf	d7,loc_1B20C
0001CC46                            
0001CC46 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001CC4A 0C05 0050                  		cmpi.b	#$50,d5
0001CC4E 6700                       		beq.s	loc_1B288
0001CC50 24BC 0000 0000             		move.l	#0,(a2)
0001CC56 4E75                       		rts	
0001CC58                            ; ===========================================================================
0001CC58                            
0001CC58                            loc_1B288:
0001CC58 157C 0000 FFFB             		move.b	#0,-5(a2)
0001CC5E 4E75                       		rts	
0001CC60                            ; End of function SS_ShowLayout
0001CC60                            
0001CC60                            ; ---------------------------------------------------------------------------
0001CC60                            ; Subroutine to	animate	walls and rings	in the special stage
0001CC60                            ; ---------------------------------------------------------------------------
0001CC60                            
0001CC60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC60                            
0001CC60                            
0001CC60                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001CC60 43F9 00FF 400C             		lea	($FF400C).l,a1
0001CC66 7000                       		moveq	#0,d0
0001CC68 1038 F780                  		move.b	($FFFFF780).w,d0
0001CC6C E408                       		lsr.b	#2,d0
0001CC6E 0240 000F                  		andi.w	#$F,d0
0001CC72 7223                       		moveq	#$23,d1
0001CC74                            
0001CC74                            loc_1B2A4:
0001CC74 3280                       		move.w	d0,(a1)
0001CC76 5049                       		addq.w	#8,a1
0001CC78 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001CC7C                            
0001CC7C 43F9 00FF 4005             		lea	($FF4005).l,a1
0001CC82 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001CC86 6A00                       		bpl.s	loc_1B2C8
0001CC88 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001CC8E 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001CC92 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001CC98                            
0001CC98                            loc_1B2C8:
0001CC98 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001CC9E 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001CCA2 6A00                       		bpl.s	loc_1B2E4
0001CCA4 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001CCAA 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001CCAE 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001CCB4                            
0001CCB4                            loc_1B2E4:
0001CCB4 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001CCB8 1340 0138                  		move.b	d0,$138(a1)
0001CCBC 1340 0160                  		move.b	d0,$160(a1)
0001CCC0 1340 0148                  		move.b	d0,$148(a1)
0001CCC4 1340 0150                  		move.b	d0,$150(a1)
0001CCC8 1340 01D8                  		move.b	d0,$1D8(a1)
0001CCCC 1340 01E0                  		move.b	d0,$1E0(a1)
0001CCD0 1340 01E8                  		move.b	d0,$1E8(a1)
0001CCD4 1340 01F0                  		move.b	d0,$1F0(a1)
0001CCD8 1340 01F8                  		move.b	d0,$1F8(a1)
0001CCDC 1340 0200                  		move.b	d0,$200(a1)
0001CCE0 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001CCE4 6A00                       		bpl.s	loc_1B326
0001CCE6 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001CCEC 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001CCF0 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001CCF6                            
0001CCF6                            loc_1B326:
0001CCF6 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001CCFA 1340 0168                  		move.b	d0,$168(a1)
0001CCFE 1340 0170                  		move.b	d0,$170(a1)
0001CD02 1340 0178                  		move.b	d0,$178(a1)
0001CD06 1340 0180                  		move.b	d0,$180(a1)
0001CD0A 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001CD0E 6A00                       		bpl.s	loc_1B350
0001CD10 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001CD16 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001CD1A 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001CD20                            
0001CD20                            loc_1B350:
0001CD20 43F9 00FF 4016             		lea	($FF4016).l,a1
0001CD26 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001CD2C 7000                       		moveq	#0,d0
0001CD2E 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001CD32 D040                       		add.w	d0,d0
0001CD34 41F0 0000                  		lea	(a0,d0.w),a0
0001CD38 3290                       		move.w	(a0),(a1)
0001CD3A 3368 0002 0008             		move.w	2(a0),8(a1)
0001CD40 3368 0004 0010             		move.w	4(a0),$10(a1)
0001CD46 3368 0006 0018             		move.w	6(a0),$18(a1)
0001CD4C 3368 0008 0020             		move.w	8(a0),$20(a1)
0001CD52 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001CD58 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001CD5E 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001CD64 D0FC 0020                  		adda.w	#$20,a0
0001CD68 D2FC 0048                  		adda.w	#$48,a1
0001CD6C 3290                       		move.w	(a0),(a1)
0001CD6E 3368 0002 0008             		move.w	2(a0),8(a1)
0001CD74 3368 0004 0010             		move.w	4(a0),$10(a1)
0001CD7A 3368 0006 0018             		move.w	6(a0),$18(a1)
0001CD80 3368 0008 0020             		move.w	8(a0),$20(a1)
0001CD86 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001CD8C 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001CD92 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001CD98 D0FC 0020                  		adda.w	#$20,a0
0001CD9C D2FC 0048                  		adda.w	#$48,a1
0001CDA0 3290                       		move.w	(a0),(a1)
0001CDA2 3368 0002 0008             		move.w	2(a0),8(a1)
0001CDA8 3368 0004 0010             		move.w	4(a0),$10(a1)
0001CDAE 3368 0006 0018             		move.w	6(a0),$18(a1)
0001CDB4 3368 0008 0020             		move.w	8(a0),$20(a1)
0001CDBA 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001CDC0 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001CDC6 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001CDCC D0FC 0020                  		adda.w	#$20,a0
0001CDD0 D2FC 0048                  		adda.w	#$48,a1
0001CDD4 3290                       		move.w	(a0),(a1)
0001CDD6 3368 0002 0008             		move.w	2(a0),8(a1)
0001CDDC 3368 0004 0010             		move.w	4(a0),$10(a1)
0001CDE2 3368 0006 0018             		move.w	6(a0),$18(a1)
0001CDE8 3368 0008 0020             		move.w	8(a0),$20(a1)
0001CDEE 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001CDF4 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001CDFA 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001CE00 D0FC 0020                  		adda.w	#$20,a0
0001CE04 D2FC 0048                  		adda.w	#$48,a1
0001CE08 4E75                       		rts	
0001CE0A                            ; End of function SS_AniWallsRings
0001CE0A                            
0001CE0A                            ; ===========================================================================
0001CE0A 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001CE1A 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001CE2A 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001CE3A 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001CE4A 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001CE5A 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001CE6A 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001CE7A 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001CE8A                            ; ---------------------------------------------------------------------------
0001CE8A                            ; Subroutine to	remove items when you collect them in the special stage
0001CE8A                            ; ---------------------------------------------------------------------------
0001CE8A                            
0001CE8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE8A                            
0001CE8A                            
0001CE8A                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001CE8A 45F9 00FF 4400             		lea	($FF4400).l,a2
0001CE90 303C 001F                  		move.w	#$1F,d0
0001CE94                            
0001CE94                            loc_1B4C4:
0001CE94 4A12                       		tst.b	(a2)
0001CE96 6700                       		beq.s	locret_1B4CE
0001CE98 504A                       		addq.w	#8,a2
0001CE9A 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001CE9E                            
0001CE9E                            locret_1B4CE:
0001CE9E 4E75                       		rts	
0001CEA0                            ; End of function SS_RemoveCollectedItem
0001CEA0                            
0001CEA0                            ; ---------------------------------------------------------------------------
0001CEA0                            ; Subroutine to	animate	special	stage items when you touch them
0001CEA0                            ; ---------------------------------------------------------------------------
0001CEA0                            
0001CEA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CEA0                            
0001CEA0                            
0001CEA0                            SS_AniItems:				; XREF: SS_ShowLayout
0001CEA0 41F9 00FF 4400             		lea	($FF4400).l,a0
0001CEA6 3E3C 001F                  		move.w	#$1F,d7
0001CEAA                            
0001CEAA                            loc_1B4DA:
0001CEAA 7000                       		moveq	#0,d0
0001CEAC 1010                       		move.b	(a0),d0
0001CEAE 6700                       		beq.s	loc_1B4E8
0001CEB0 E548                       		lsl.w	#2,d0
0001CEB2 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001CEB6 4E91                       		jsr	(a1)
0001CEB8                            
0001CEB8                            loc_1B4E8:
0001CEB8 5048                       		addq.w	#8,a0
0001CEBA                            
0001CEBA                            loc_1B4EA:
0001CEBA 51CF FFEE                  		dbf	d7,loc_1B4DA
0001CEBE                            
0001CEBE 4E75                       		rts	
0001CEC0                            ; End of function SS_AniItems
0001CEC0                            
0001CEC0                            ; ===========================================================================
0001CEC0 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001CEC4 0000 0000                  		dc.l SS_AniBumper
0001CEC8 0000 0000                  		dc.l SS_Ani1Up
0001CECC 0000 0000                  		dc.l SS_AniReverse
0001CED0 0000 0000                  		dc.l SS_AniEmeraldSparks
0001CED4 0000 0000                  		dc.l SS_AniGlassBlock
0001CED8                            ; ===========================================================================
0001CED8                            
0001CED8                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001CED8 5328 0002                  		subq.b	#1,2(a0)
0001CEDC 6A00                       		bpl.s	locret_1B530
0001CEDE 117C 0005 0002             		move.b	#5,2(a0)
0001CEE4 7000                       		moveq	#0,d0
0001CEE6 1028 0003                  		move.b	3(a0),d0
0001CEEA 5228 0003                  		addq.b	#1,3(a0)
0001CEEE 2268 0004                  		movea.l	4(a0),a1
0001CEF2 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001CEF6 1280                       		move.b	d0,(a1)
0001CEF8 6600                       		bne.s	locret_1B530
0001CEFA 4290                       		clr.l	(a0)
0001CEFC 42A8 0004                  		clr.l	4(a0)
0001CF00                            
0001CF00                            locret_1B530:
0001CF00 4E75                       		rts	
0001CF02                            ; ===========================================================================
0001CF02 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001CF08                            ; ===========================================================================
0001CF08                            
0001CF08                            SS_AniBumper:				; XREF: SS_AniIndex
0001CF08 5328 0002                  		subq.b	#1,2(a0)
0001CF0C 6A00                       		bpl.s	locret_1B566
0001CF0E 117C 0007 0002             		move.b	#7,2(a0)
0001CF14 7000                       		moveq	#0,d0
0001CF16 1028 0003                  		move.b	3(a0),d0
0001CF1A 5228 0003                  		addq.b	#1,3(a0)
0001CF1E 2268 0004                  		movea.l	4(a0),a1
0001CF22 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001CF26 6600                       		bne.s	loc_1B564
0001CF28 4290                       		clr.l	(a0)
0001CF2A 42A8 0004                  		clr.l	4(a0)
0001CF2E 12BC 0025                  		move.b	#$25,(a1)
0001CF32 4E75                       		rts	
0001CF34                            ; ===========================================================================
0001CF34                            
0001CF34                            loc_1B564:
0001CF34 1280                       		move.b	d0,(a1)
0001CF36                            
0001CF36                            locret_1B566:
0001CF36 4E75                       		rts	
0001CF38                            ; ===========================================================================
0001CF38 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001CF3E                            ; ===========================================================================
0001CF3E                            
0001CF3E                            SS_Ani1Up:				; XREF: SS_AniIndex
0001CF3E 5328 0002                  		subq.b	#1,2(a0)
0001CF42 6A00                       		bpl.s	locret_1B596
0001CF44 117C 0005 0002             		move.b	#5,2(a0)
0001CF4A 7000                       		moveq	#0,d0
0001CF4C 1028 0003                  		move.b	3(a0),d0
0001CF50 5228 0003                  		addq.b	#1,3(a0)
0001CF54 2268 0004                  		movea.l	4(a0),a1
0001CF58 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001CF5C 1280                       		move.b	d0,(a1)
0001CF5E 6600                       		bne.s	locret_1B596
0001CF60 4290                       		clr.l	(a0)
0001CF62 42A8 0004                  		clr.l	4(a0)
0001CF66                            
0001CF66                            locret_1B596:
0001CF66 4E75                       		rts	
0001CF68                            ; ===========================================================================
0001CF68 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001CF6E                            ; ===========================================================================
0001CF6E                            
0001CF6E                            SS_AniReverse:				; XREF: SS_AniIndex
0001CF6E 5328 0002                  		subq.b	#1,2(a0)
0001CF72 6A00                       		bpl.s	locret_1B5CC
0001CF74 117C 0007 0002             		move.b	#7,2(a0)
0001CF7A 7000                       		moveq	#0,d0
0001CF7C 1028 0003                  		move.b	3(a0),d0
0001CF80 5228 0003                  		addq.b	#1,3(a0)
0001CF84 2268 0004                  		movea.l	4(a0),a1
0001CF88 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001CF8C 6600                       		bne.s	loc_1B5CA
0001CF8E 4290                       		clr.l	(a0)
0001CF90 42A8 0004                  		clr.l	4(a0)
0001CF94 12BC 002B                  		move.b	#$2B,(a1)
0001CF98 4E75                       		rts	
0001CF9A                            ; ===========================================================================
0001CF9A                            
0001CF9A                            loc_1B5CA:
0001CF9A 1280                       		move.b	d0,(a1)
0001CF9C                            
0001CF9C                            locret_1B5CC:
0001CF9C 4E75                       		rts	
0001CF9E                            ; ===========================================================================
0001CF9E 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001CFA4                            ; ===========================================================================
0001CFA4                            
0001CFA4                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001CFA4 5328 0002                  		subq.b	#1,2(a0)
0001CFA8 6A00                       		bpl.s	locret_1B60C
0001CFAA 117C 0005 0002             		move.b	#5,2(a0)
0001CFB0 7000                       		moveq	#0,d0
0001CFB2 1028 0003                  		move.b	3(a0),d0
0001CFB6 5228 0003                  		addq.b	#1,3(a0)
0001CFBA 2268 0004                  		movea.l	4(a0),a1
0001CFBE 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001CFC2 1280                       		move.b	d0,(a1)
0001CFC4 6600                       		bne.s	locret_1B60C
0001CFC6 4290                       		clr.l	(a0)
0001CFC8 42A8 0004                  		clr.l	4(a0)
0001CFCC 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001CFD2 303C 00A8                  		move.w	#$A8,d0
0001CFD6 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001CFDC                            
0001CFDC                            locret_1B60C:
0001CFDC 4E75                       		rts	
0001CFDE                            ; ===========================================================================
0001CFDE 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001CFE4                            ; ===========================================================================
0001CFE4                            
0001CFE4                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001CFE4 5328 0002                  		subq.b	#1,2(a0)
0001CFE8 6A00                       		bpl.s	locret_1B640
0001CFEA 117C 0001 0002             		move.b	#1,2(a0)
0001CFF0 7000                       		moveq	#0,d0
0001CFF2 1028 0003                  		move.b	3(a0),d0
0001CFF6 5228 0003                  		addq.b	#1,3(a0)
0001CFFA 2268 0004                  		movea.l	4(a0),a1
0001CFFE 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001D002 1280                       		move.b	d0,(a1)
0001D004 6600                       		bne.s	locret_1B640
0001D006 12A8 0004                  		move.b	4(a0),(a1)
0001D00A 4290                       		clr.l	(a0)
0001D00C 42A8 0004                  		clr.l	4(a0)
0001D010                            
0001D010                            locret_1B640:
0001D010 4E75                       		rts	
0001D012                            ; ===========================================================================
0001D012 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001D01C                            ; ---------------------------------------------------------------------------
0001D01C                            ; Special stage	layout pointers
0001D01C                            ; ---------------------------------------------------------------------------
0001D01C                            SS_LayoutIndex:
0001D01C                            	include "_inc\Special stage layout pointers.asm"
0001D01C                            ; ---------------------------------------------------------------------------
0001D01C                            ; Special stage	layout pointers
0001D01C                            ; ---------------------------------------------------------------------------
0001D01C 0000 0000                  	dc.l SS_1
0001D020 0000 0000                  	dc.l SS_2
0001D024 0000 0000                  	dc.l SS_3
0001D028 0000 0000                  	dc.l SS_4
0001D02C 0000 0000                  	dc.l SS_5
0001D030 0000 0000                  	dc.l SS_6
0001D034                            	even
0001D034                            	even
0001D034                            
0001D034                            ; ---------------------------------------------------------------------------
0001D034                            ; Special stage	start locations
0001D034                            ; ---------------------------------------------------------------------------
0001D034                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001D04C                            		even
0001D04C                            
0001D04C                            ; ---------------------------------------------------------------------------
0001D04C                            ; Subroutine to	load special stage layout
0001D04C                            ; ---------------------------------------------------------------------------
0001D04C                            
0001D04C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D04C                            
0001D04C                            
0001D04C                            SS_Load:				; XREF: SpecialStage
0001D04C 7000                       		moveq	#0,d0
0001D04E 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001D052 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001D056 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001D05C 6500                       		bcs.s	SS_ChkEmldNum
0001D05E 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001D064                            
0001D064                            SS_ChkEmldNum:
0001D064 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001D06A 6700                       		beq.s	SS_LoadData	; if yes, branch
0001D06C 7200                       		moveq	#0,d1
0001D06E 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001D072 5301                       		subq.b	#1,d1
0001D074 6500                       		bcs.s	SS_LoadData
0001D076 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001D07A                            
0001D07A                            SS_ChkEmldLoop:	
0001D07A B033 1000                  		cmp.b	(a3,d1.w),d0
0001D07E 6600                       		bne.s	SS_ChkEmldRepeat
0001D080 60CA                       		bra.s	SS_Load
0001D082                            ; ===========================================================================
0001D082                            
0001D082                            SS_ChkEmldRepeat:
0001D082 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001D086                            
0001D086                            SS_LoadData:
0001D086 E548                       		lsl.w	#2,d0
0001D088 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001D08C 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001D090 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001D094 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001D098 43F9 00FF 4000             		lea	($FF4000).l,a1
0001D09E 303C 0000                  		move.w	#0,d0
0001D0A2 4EB9 0000 1888             		jsr	(EniDec).l
0001D0A8 43F9 00FF 0000             		lea	($FF0000).l,a1
0001D0AE 303C 0FFF                  		move.w	#$FFF,d0
0001D0B2                            
0001D0B2                            SS_ClrRAM3:
0001D0B2 4299                       		clr.l	(a1)+
0001D0B4 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001D0B8                            
0001D0B8 43F9 00FF 1020             		lea	($FF1020).l,a1
0001D0BE 41F9 00FF 4000             		lea	($FF4000).l,a0
0001D0C4 723F                       		moveq	#$3F,d1
0001D0C6                            
0001D0C6                            loc_1B6F6:
0001D0C6 743F                       		moveq	#$3F,d2
0001D0C8                            
0001D0C8                            loc_1B6F8:
0001D0C8 12D8                       		move.b	(a0)+,(a1)+
0001D0CA 51CA FFFC                  		dbf	d2,loc_1B6F8
0001D0CE                            
0001D0CE 43E9 0040                  		lea	$40(a1),a1
0001D0D2 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001D0D6                            
0001D0D6 43F9 00FF 4008             		lea	($FF4008).l,a1
0001D0DC 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001D0E2 724D                       		moveq	#$4D,d1
0001D0E4                            
0001D0E4                            loc_1B714:
0001D0E4 22D8                       		move.l	(a0)+,(a1)+
0001D0E6 32FC 0000                  		move.w	#0,(a1)+
0001D0EA 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001D0F0 32D8                       		move.w	(a0)+,(a1)+
0001D0F2 51C9 FFF0                  		dbf	d1,loc_1B714
0001D0F6                            
0001D0F6 43F9 00FF 4400             		lea	($FF4400).l,a1
0001D0FC 323C 003F                  		move.w	#$3F,d1
0001D100                            
0001D100                            loc_1B730:
0001D100                            
0001D100 4299                       		clr.l	(a1)+
0001D102 51C9 FFFC                  		dbf	d1,loc_1B730
0001D106                            
0001D106 4E75                       		rts	
0001D108                            ; End of function SS_Load
0001D108                            
0001D108                            ; ===========================================================================
0001D108                            ; ---------------------------------------------------------------------------
0001D108                            ; Special stage	mappings and VRAM pointers
0001D108                            ; ---------------------------------------------------------------------------
0001D108                            SS_MapIndex:
0001D108                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001D108                            ; ---------------------------------------------------------------------------
0001D108                            ; Special stage	mappings and VRAM pointers
0001D108                            ; ---------------------------------------------------------------------------
0001D108 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001D10C 0142                       	dc.w $142		; VRAM setting
0001D10E 0000 0000                  	dc.l Map_SSWalls
0001D112 0142                       	dc.w $142
0001D114 0000 0000                  	dc.l Map_SSWalls
0001D118 0142                       	dc.w $142
0001D11A 0000 0000                  	dc.l Map_SSWalls
0001D11E 0142                       	dc.w $142
0001D120 0000 0000                  	dc.l Map_SSWalls
0001D124 0142                       	dc.w $142
0001D126 0000 0000                  	dc.l Map_SSWalls
0001D12A 0142                       	dc.w $142
0001D12C 0000 0000                  	dc.l Map_SSWalls
0001D130 0142                       	dc.w $142
0001D132 0000 0000                  	dc.l Map_SSWalls
0001D136 0142                       	dc.w $142
0001D138 0000 0000                  	dc.l Map_SSWalls
0001D13C 0142                       	dc.w $142
0001D13E 0000 0000                  	dc.l Map_SSWalls
0001D142 2142                       	dc.w $2142
0001D144 0000 0000                  	dc.l Map_SSWalls
0001D148 2142                       	dc.w $2142
0001D14A 0000 0000                  	dc.l Map_SSWalls
0001D14E 2142                       	dc.w $2142
0001D150 0000 0000                  	dc.l Map_SSWalls
0001D154 2142                       	dc.w $2142
0001D156 0000 0000                  	dc.l Map_SSWalls
0001D15A 2142                       	dc.w $2142
0001D15C 0000 0000                  	dc.l Map_SSWalls
0001D160 2142                       	dc.w $2142
0001D162 0000 0000                  	dc.l Map_SSWalls
0001D166 2142                       	dc.w $2142
0001D168 0000 0000                  	dc.l Map_SSWalls
0001D16C 2142                       	dc.w $2142
0001D16E 0000 0000                  	dc.l Map_SSWalls
0001D172 2142                       	dc.w $2142
0001D174 0000 0000                  	dc.l Map_SSWalls
0001D178 4142                       	dc.w $4142
0001D17A 0000 0000                  	dc.l Map_SSWalls
0001D17E 4142                       	dc.w $4142
0001D180 0000 0000                  	dc.l Map_SSWalls
0001D184 4142                       	dc.w $4142
0001D186 0000 0000                  	dc.l Map_SSWalls
0001D18A 4142                       	dc.w $4142
0001D18C 0000 0000                  	dc.l Map_SSWalls
0001D190 4142                       	dc.w $4142
0001D192 0000 0000                  	dc.l Map_SSWalls
0001D196 4142                       	dc.w $4142
0001D198 0000 0000                  	dc.l Map_SSWalls
0001D19C 4142                       	dc.w $4142
0001D19E 0000 0000                  	dc.l Map_SSWalls
0001D1A2 4142                       	dc.w $4142
0001D1A4 0000 0000                  	dc.l Map_SSWalls
0001D1A8 4142                       	dc.w $4142
0001D1AA 0000 0000                  	dc.l Map_SSWalls
0001D1AE 6142                       	dc.w $6142
0001D1B0 0000 0000                  	dc.l Map_SSWalls
0001D1B4 6142                       	dc.w $6142
0001D1B6 0000 0000                  	dc.l Map_SSWalls
0001D1BA 6142                       	dc.w $6142
0001D1BC 0000 0000                  	dc.l Map_SSWalls
0001D1C0 6142                       	dc.w $6142
0001D1C2 0000 0000                  	dc.l Map_SSWalls
0001D1C6 6142                       	dc.w $6142
0001D1C8 0000 0000                  	dc.l Map_SSWalls
0001D1CC 6142                       	dc.w $6142
0001D1CE 0000 0000                  	dc.l Map_SSWalls
0001D1D2 6142                       	dc.w $6142
0001D1D4 0000 0000                  	dc.l Map_SSWalls
0001D1D8 6142                       	dc.w $6142
0001D1DA 0000 0000                  	dc.l Map_SSWalls
0001D1DE 6142                       	dc.w $6142
0001D1E0 0000 F60E                  	dc.l Map_obj47
0001D1E4 023B                       	dc.w $23B
0001D1E6 0000 0000                  	dc.l Map_SS_R
0001D1EA 0570                       	dc.w $570
0001D1EC 0000 0000                  	dc.l Map_SS_R
0001D1F0 0251                       	dc.w $251
0001D1F2 0000 0000                  	dc.l Map_SS_R
0001D1F6 0370                       	dc.w $370
0001D1F8 0000 0000                  	dc.l Map_SS_Up
0001D1FC 0263                       	dc.w $263
0001D1FE 0000 0000                  	dc.l Map_SS_Down
0001D202 0263                       	dc.w $263
0001D204 0000 0000                  	dc.l Map_SS_R
0001D208 22F0                       	dc.w $22F0
0001D20A 0000 0000                  	dc.l Map_SS_Glass
0001D20E 0470                       	dc.w $470
0001D210 0000 0000                  	dc.l Map_SS_Glass
0001D214 05F0                       	dc.w $5F0
0001D216 0000 0000                  	dc.l Map_SS_Glass
0001D21A 65F0                       	dc.w $65F0
0001D21C 0000 0000                  	dc.l Map_SS_Glass
0001D220 25F0                       	dc.w $25F0
0001D222 0000 0000                  	dc.l Map_SS_Glass
0001D226 45F0                       	dc.w $45F0
0001D228 0000 0000                  	dc.l Map_SS_R
0001D22C 02F0                       	dc.w $2F0
0001D22E 0100 F60E                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001D232 023B                       	dc.w $23B
0001D234 0200 F60E                  	dc.l Map_obj47+$2000000
0001D238 023B                       	dc.w $23B
0001D23A 0000 0000                  	dc.l Map_SS_R
0001D23E 0797                       	dc.w $797
0001D240 0000 0000                  	dc.l Map_SS_R
0001D244 07A0                       	dc.w $7A0
0001D246 0000 0000                  	dc.l Map_SS_R
0001D24A 07A9                       	dc.w $7A9
0001D24C 0000 0000                  	dc.l Map_SS_R
0001D250 0797                       	dc.w $797
0001D252 0000 0000                  	dc.l Map_SS_R
0001D256 07A0                       	dc.w $7A0
0001D258 0000 0000                  	dc.l Map_SS_R
0001D25C 07A9                       	dc.w $7A9
0001D25E 0000 AA5A                  	dc.l Map_obj25
0001D262 27B2                       	dc.w $27B2
0001D264 0000 0000                  	dc.l Map_SS_Chaos3
0001D268 0770                       	dc.w $770
0001D26A 0000 0000                  	dc.l Map_SS_Chaos3
0001D26E 2770                       	dc.w $2770
0001D270 0000 0000                  	dc.l Map_SS_Chaos3
0001D274 4770                       	dc.w $4770
0001D276 0000 0000                  	dc.l Map_SS_Chaos3
0001D27A 6770                       	dc.w $6770
0001D27C 0000 0000                  	dc.l Map_SS_Chaos1
0001D280 0770                       	dc.w $770
0001D282 0000 0000                  	dc.l Map_SS_Chaos2
0001D286 0770                       	dc.w $770
0001D288 0000 0000                  	dc.l Map_SS_R
0001D28C 04F0                       	dc.w $4F0
0001D28E 0400 AA5A                  	dc.l Map_obj25+$4000000
0001D292 27B2                       	dc.w $27B2
0001D294 0500 AA5A                  	dc.l Map_obj25+$5000000
0001D298 27B2                       	dc.w $27B2
0001D29A 0600 AA5A                  	dc.l Map_obj25+$6000000
0001D29E 27B2                       	dc.w $27B2
0001D2A0 0700 AA5A                  	dc.l Map_obj25+$7000000
0001D2A4 27B2                       	dc.w $27B2
0001D2A6 0000 0000                  	dc.l Map_SS_Glass
0001D2AA 23F0                       	dc.w $23F0
0001D2AC 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001D2B0 23F0                       	dc.w $23F0
0001D2B2 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001D2B6 23F0                       	dc.w $23F0
0001D2B8 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001D2BC 23F0                       	dc.w $23F0
0001D2BE 0000 0000                  	dc.l Map_SS_R+$2000000
0001D2C2 04F0                       	dc.w $4F0
0001D2C4 0000 0000                  	dc.l Map_SS_Glass
0001D2C8 05F0                       	dc.w $5F0
0001D2CA 0000 0000                  	dc.l Map_SS_Glass
0001D2CE 65F0                       	dc.w $65F0
0001D2D0 0000 0000                  	dc.l Map_SS_Glass
0001D2D4 25F0                       	dc.w $25F0
0001D2D6 0000 0000                  	dc.l Map_SS_Glass
0001D2DA 45F0                       	dc.w $45F0
0001D2DA 45F0                       	dc.w $45F0
0001D2DC                            
0001D2DC                            ; ---------------------------------------------------------------------------
0001D2DC                            ; Sprite mappings - special stage "R" block
0001D2DC                            ; ---------------------------------------------------------------------------
0001D2DC                            Map_SS_R:
0001D2DC                            	include "_maps\SSRblock.asm"
0001D2DC                            ; ---------------------------------------------------------------------------
0001D2DC                            ; Sprite mappings - special stage "R" block
0001D2DC                            ; ---------------------------------------------------------------------------
0001D2DC 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001D2E0 0000                       		dc.w byte_1B91E-Map_SS_R
0001D2E2 01                         byte_1B912:	dc.b 1
0001D2E3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001D2E8 01                         byte_1B918:	dc.b 1
0001D2E9 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001D2EE 00                         byte_1B91E:	dc.b 0
0001D2F0 00                         		even
0001D2F0 00                         		even
0001D2F0                            
0001D2F0                            ; ---------------------------------------------------------------------------
0001D2F0                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001D2F0                            ; ---------------------------------------------------------------------------
0001D2F0                            Map_SS_Glass:
0001D2F0                            	include "_maps\SSglassblock.asm"
0001D2F0                            ; ---------------------------------------------------------------------------
0001D2F0                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001D2F0                            ; ---------------------------------------------------------------------------
0001D2F0 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001D2F4 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001D2F8 01                         byte_1B928:	dc.b 1
0001D2F9 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001D2FE 01                         byte_1B92E:	dc.b 1
0001D2FF F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001D304 01                         byte_1B934:	dc.b 1
0001D305 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001D30A 01                         byte_1B93A:	dc.b 1
0001D30B F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001D310                            		even
0001D310                            		even
0001D310                            
0001D310                            ; ---------------------------------------------------------------------------
0001D310                            ; Sprite mappings - special stage "UP" block
0001D310                            ; ---------------------------------------------------------------------------
0001D310                            Map_SS_Up:
0001D310                            	include "_maps\SSUPblock.asm"
0001D310                            ; ---------------------------------------------------------------------------
0001D310                            ; Sprite mappings - special stage "UP" block
0001D310                            ; ---------------------------------------------------------------------------
0001D310 0000                       		dc.w byte_1B944-Map_SS_Up
0001D312 0000                       		dc.w byte_1B94A-Map_SS_Up
0001D314 01                         byte_1B944:	dc.b 1
0001D315 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001D31A 01                         byte_1B94A:	dc.b 1
0001D31B F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001D320                            		even
0001D320                            		even
0001D320                            
0001D320                            ; ---------------------------------------------------------------------------
0001D320                            ; Sprite mappings - special stage "DOWN" block
0001D320                            ; ---------------------------------------------------------------------------
0001D320                            Map_SS_Down:
0001D320                            	include "_maps\SSDOWNblock.asm"
0001D320                            ; ---------------------------------------------------------------------------
0001D320                            ; Sprite mappings - special stage "DOWN" block
0001D320                            ; ---------------------------------------------------------------------------
0001D320 0000                       		dc.w byte_1B954-Map_SS_Down
0001D322 0000                       		dc.w byte_1B95A-Map_SS_Down
0001D324 01                         byte_1B954:	dc.b 1
0001D325 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001D32A 01                         byte_1B95A:	dc.b 1
0001D32B F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001D330                            		even
0001D330                            		even
0001D330                            
0001D330                            ; ---------------------------------------------------------------------------
0001D330                            ; Sprite mappings - special stage chaos	emeralds
0001D330                            ; ---------------------------------------------------------------------------
0001D330 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001D332 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001D334 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001D336 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001D338 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001D33A 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001D33C 01                         byte_1B96C:	dc.b 1
0001D33D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001D342 01                         byte_1B972:	dc.b 1
0001D343 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001D348 01                         byte_1B978:	dc.b 1
0001D349 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001D34E 01                         byte_1B97E:	dc.b 1
0001D34F F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001D354                            		even
0001D354                            ; ===========================================================================
0001D354                            ; ---------------------------------------------------------------------------
0001D354                            ; Object 09 - Sonic (special stage)
0001D354                            ; ---------------------------------------------------------------------------
0001D354                            
0001D354                            Obj09:					; XREF: Obj_Index
0001D354 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001D358 6700                       		beq.s	Obj09_Normal	; if not, branch
0001D35A 6100 0000                  		bsr.w	SS_FixCamera
0001D35E 6000 0000                  		bra.w	DebugMode
0001D362                            ; ===========================================================================
0001D362                            
0001D362                            Obj09_Normal:
0001D362 7000                       		moveq	#0,d0
0001D364 1028 0024                  		move.b	$24(a0),d0
0001D368 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001D36C 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001D370                            ; ===========================================================================
0001D370 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001D372 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001D374 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001D376 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001D378                            ; ===========================================================================
0001D378                            
0001D378                            Obj09_Main:				; XREF: Obj09_Index
0001D378 5428 0024                  		addq.b	#2,$24(a0)
0001D37C 117C 000E 0016             		move.b	#$E,$16(a0)
0001D382 117C 0007 0017             		move.b	#7,$17(a0)
0001D388 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001D390 317C 0780 0002             		move.w	#$780,2(a0)
0001D396 117C 0004 0001             		move.b	#4,1(a0)
0001D39C 117C 0000 0018             		move.b	#0,$18(a0)
0001D3A2 117C 0002 001C             		move.b	#2,$1C(a0)
0001D3A8 08E8 0002 0022             		bset	#2,$22(a0)
0001D3AE 08E8 0001 0022             		bset	#1,$22(a0)
0001D3B4                            
0001D3B4                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001D3B4 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001D3B8 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001D3BA 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001D3C0 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001D3C2 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001D3C8                            
0001D3C8                            Obj09_NoDebug:
0001D3C8 117C 0000 0030             		move.b	#0,$30(a0)
0001D3CE 7000                       		moveq	#0,d0
0001D3D0 1028 0022                  		move.b	$22(a0),d0
0001D3D4 0240 0002                  		andi.w	#2,d0
0001D3D8 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001D3DC 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001D3E0 4EB9 0001 50FE             		jsr	LoadSonicDynPLC
0001D3E6 4EF9 0000 E106             		jmp	DisplaySprite
0001D3EC                            ; ===========================================================================
0001D3EC 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001D3EE 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001D3F0                            ; ===========================================================================
0001D3F0                            
0001D3F0                            Obj09_OnWall:				; XREF: Obj09_Modes
0001D3F0 6100 0000                  		bsr.w	Obj09_Jump
0001D3F4 6100 0000                  		bsr.w	Obj09_Move
0001D3F8 6100 0000                  		bsr.w	Obj09_Fall
0001D3FC 6000                       		bra.s	Obj09_Display
0001D3FE                            ; ===========================================================================
0001D3FE                            
0001D3FE                            Obj09_InAir:				; XREF: Obj09_Modes
0001D3FE 6100 0000                  		bsr.w	nullsub_2
0001D402 6100 0000                  		bsr.w	Obj09_Move
0001D406 6100 0000                  		bsr.w	Obj09_Fall
0001D40A                            
0001D40A                            Obj09_Display:				; XREF: Obj09_OnWall
0001D40A 6100 0000                  		bsr.w	Obj09_ChkItems
0001D40E 6100 0000                  		bsr.w	Obj09_ChkItems2
0001D412 4EB9 0000 E0E0             		jsr	SpeedToPos
0001D418 6100 0000                  		bsr.w	SS_FixCamera
0001D41C 3038 F780                  		move.w	($FFFFF780).w,d0
0001D420 D078 F782                  		add.w	($FFFFF782).w,d0
0001D424 31C0 F780                  		move.w	d0,($FFFFF780).w
0001D428 4EB9 0001 4BC6             		jsr	Sonic_Animate
0001D42E 4E75                       		rts	
0001D430                            
0001D430                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D430                            
0001D430                            
0001D430                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001D430 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001D436 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001D438 6100 0000                  		bsr.w	Obj09_MoveLeft
0001D43C                            
0001D43C                            Obj09_ChkRight:
0001D43C 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001D442 6700                       		beq.s	loc_1BA78	; if not, branch
0001D444 6100 0000                  		bsr.w	Obj09_MoveRight
0001D448                            
0001D448                            loc_1BA78:
0001D448 1038 F602                  		move.b	($FFFFF602).w,d0
0001D44C 0200 000C                  		andi.b	#$C,d0
0001D450 6600                       		bne.s	loc_1BAA8
0001D452 3028 0014                  		move.w	$14(a0),d0
0001D456 6700                       		beq.s	loc_1BAA8
0001D458 6B00                       		bmi.s	loc_1BA9A
0001D45A 0440 000C                  		subi.w	#$C,d0
0001D45E 6400                       		bcc.s	loc_1BA94
0001D460 303C 0000                  		move.w	#0,d0
0001D464                            
0001D464                            loc_1BA94:
0001D464 3140 0014                  		move.w	d0,$14(a0)
0001D468 6000                       		bra.s	loc_1BAA8
0001D46A                            ; ===========================================================================
0001D46A                            
0001D46A                            loc_1BA9A:
0001D46A 0640 000C                  		addi.w	#$C,d0
0001D46E 6400                       		bcc.s	loc_1BAA4
0001D470 303C 0000                  		move.w	#0,d0
0001D474                            
0001D474                            loc_1BAA4:
0001D474 3140 0014                  		move.w	d0,$14(a0)
0001D478                            
0001D478                            loc_1BAA8:
0001D478 1038 F780                  		move.b	($FFFFF780).w,d0
0001D47C 0600 0020                  		addi.b	#$20,d0
0001D480 0200 00C0                  		andi.b	#$C0,d0
0001D484 4400                       		neg.b	d0
0001D486 4EB9 0000 33D4             		jsr	(CalcSine).l
0001D48C C3E8 0014                  		muls.w	$14(a0),d1
0001D490 D3A8 0008                  		add.l	d1,8(a0)
0001D494 C1E8 0014                  		muls.w	$14(a0),d0
0001D498 D1A8 000C                  		add.l	d0,$C(a0)
0001D49C 48E7 C000                  		movem.l	d0-d1,-(sp)
0001D4A0 2428 000C                  		move.l	$C(a0),d2
0001D4A4 2628 0008                  		move.l	8(a0),d3
0001D4A8 6100 0000                  		bsr.w	sub_1BCE8
0001D4AC 6700                       		beq.s	loc_1BAF2
0001D4AE 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001D4B2 93A8 0008                  		sub.l	d1,8(a0)
0001D4B6 91A8 000C                  		sub.l	d0,$C(a0)
0001D4BA 317C 0000 0014             		move.w	#0,$14(a0)
0001D4C0 4E75                       		rts	
0001D4C2                            ; ===========================================================================
0001D4C2                            
0001D4C2                            loc_1BAF2:
0001D4C2 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001D4C6 4E75                       		rts	
0001D4C8                            ; End of function Obj09_Move
0001D4C8                            
0001D4C8                            
0001D4C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D4C8                            
0001D4C8                            
0001D4C8                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001D4C8 08E8 0000 0022             		bset	#0,$22(a0)
0001D4CE 3028 0014                  		move.w	$14(a0),d0
0001D4D2 6700                       		beq.s	loc_1BB06
0001D4D4 6A00                       		bpl.s	loc_1BB1A
0001D4D6                            
0001D4D6                            loc_1BB06:
0001D4D6 0440 000C                  		subi.w	#$C,d0
0001D4DA 0C40 F800                  		cmpi.w	#-$800,d0
0001D4DE 6E00                       		bgt.s	loc_1BB14
0001D4E0 303C F800                  		move.w	#-$800,d0
0001D4E4                            
0001D4E4                            loc_1BB14:
0001D4E4 3140 0014                  		move.w	d0,$14(a0)
0001D4E8 4E75                       		rts	
0001D4EA                            ; ===========================================================================
0001D4EA                            
0001D4EA                            loc_1BB1A:
0001D4EA 0440 0040                  		subi.w	#$40,d0
0001D4EE 6400                       		bcc.s	loc_1BB22
0001D4F0 4E71                       		nop	
0001D4F2                            
0001D4F2                            loc_1BB22:
0001D4F2 3140 0014                  		move.w	d0,$14(a0)
0001D4F6 4E75                       		rts	
0001D4F8                            ; End of function Obj09_MoveLeft
0001D4F8                            
0001D4F8                            
0001D4F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D4F8                            
0001D4F8                            
0001D4F8                            Obj09_MoveRight:			; XREF: Obj09_Move
0001D4F8 08A8 0000 0022             		bclr	#0,$22(a0)
0001D4FE 3028 0014                  		move.w	$14(a0),d0
0001D502 6B00                       		bmi.s	loc_1BB48
0001D504 0640 000C                  		addi.w	#$C,d0
0001D508 0C40 0800                  		cmpi.w	#$800,d0
0001D50C 6D00                       		blt.s	loc_1BB42
0001D50E 303C 0800                  		move.w	#$800,d0
0001D512                            
0001D512                            loc_1BB42:
0001D512 3140 0014                  		move.w	d0,$14(a0)
0001D516 6000                       		bra.s	locret_1BB54
0001D518                            ; ===========================================================================
0001D518                            
0001D518                            loc_1BB48:
0001D518 0640 0040                  		addi.w	#$40,d0
0001D51C 6400                       		bcc.s	loc_1BB50
0001D51E 4E71                       		nop	
0001D520                            
0001D520                            loc_1BB50:
0001D520 3140 0014                  		move.w	d0,$14(a0)
0001D524                            
0001D524                            locret_1BB54:
0001D524 4E75                       		rts	
0001D526                            ; End of function Obj09_MoveRight
0001D526                            
0001D526                            
0001D526                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D526                            
0001D526                            
0001D526                            Obj09_Jump:				; XREF: Obj09_OnWall
0001D526 1038 F603                  		move.b	($FFFFF603).w,d0
0001D52A 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001D52E 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001D530 1038 F780                  		move.b	($FFFFF780).w,d0
0001D534 0200 00FC                  		andi.b	#$FC,d0
0001D538 4400                       		neg.b	d0
0001D53A 0400 0040                  		subi.b	#$40,d0
0001D53E 4EB9 0000 33D4             		jsr	(CalcSine).l
0001D544 C3FC 0680                  		muls.w	#$680,d1
0001D548 E081                       		asr.l	#8,d1
0001D54A 3141 0010                  		move.w	d1,$10(a0)
0001D54E C1FC 0680                  		muls.w	#$680,d0
0001D552 E080                       		asr.l	#8,d0
0001D554 3140 0012                  		move.w	d0,$12(a0)
0001D558 08E8 0001 0022             		bset	#1,$22(a0)
0001D55E 303C 00A0                  		move.w	#$A0,d0
0001D562 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play jumping sound
0001D568                            
0001D568                            Obj09_NoJump:
0001D568 4E75                       		rts	
0001D56A                            ; End of function Obj09_Jump
0001D56A                            
0001D56A                            
0001D56A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D56A                            
0001D56A                            
0001D56A                            nullsub_2:				; XREF: Obj09_InAir
0001D56A 4E75                       		rts	
0001D56C                            ; End of function nullsub_2
0001D56C                            
0001D56C                            ; ===========================================================================
0001D56C                            ; ---------------------------------------------------------------------------
0001D56C                            ; unused subroutine to limit Sonic's upward vertical speed
0001D56C                            ; ---------------------------------------------------------------------------
0001D56C 323C FC00                  		move.w	#-$400,d1
0001D570 B268 0012                  		cmp.w	$12(a0),d1
0001D574 6F00                       		ble.s	locret_1BBB4
0001D576 1038 F602                  		move.b	($FFFFF602).w,d0
0001D57A 0200 0070                  		andi.b	#$70,d0
0001D57E 6600                       		bne.s	locret_1BBB4
0001D580 3141 0012                  		move.w	d1,$12(a0)
0001D584                            
0001D584                            locret_1BBB4:
0001D584 4E75                       		rts	
0001D586                            ; ---------------------------------------------------------------------------
0001D586                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001D586                            ; ---------------------------------------------------------------------------
0001D586                            
0001D586                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D586                            
0001D586                            
0001D586                            SS_FixCamera:				; XREF: Obj09
0001D586 3428 000C                  		move.w	$C(a0),d2
0001D58A 3628 0008                  		move.w	8(a0),d3
0001D58E 3038 F700                  		move.w	($FFFFF700).w,d0
0001D592 0443 00A0                  		subi.w	#$A0,d3
0001D596 6500                       		bcs.s	loc_1BBCE
0001D598 9043                       		sub.w	d3,d0
0001D59A 9178 F700                  		sub.w	d0,($FFFFF700).w
0001D59E                            
0001D59E                            loc_1BBCE:
0001D59E 3038 F704                  		move.w	($FFFFF704).w,d0
0001D5A2 0442 0070                  		subi.w	#$70,d2
0001D5A6 6500                       		bcs.s	locret_1BBDE
0001D5A8 9042                       		sub.w	d2,d0
0001D5AA 9178 F704                  		sub.w	d0,($FFFFF704).w
0001D5AE                            
0001D5AE                            locret_1BBDE:
0001D5AE 4E75                       		rts	
0001D5B0                            ; End of function SS_FixCamera
0001D5B0                            
0001D5B0                            ; ===========================================================================
0001D5B0                            
0001D5B0                            Obj09_ExitStage:			; XREF: Obj09_Index
0001D5B0 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001D5B6 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001D5BC 6600                       		bne.s	loc_1BBF4
0001D5BE 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001D5C4                            
0001D5C4                            loc_1BBF4:
0001D5C4 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001D5CA 6D00                       		blt.s	loc_1BC12
0001D5CC 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001D5D2 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001D5D8 5428 0024                  		addq.b	#2,$24(a0)
0001D5DC 317C 003C 0038             		move.w	#$3C,$38(a0)
0001D5E2                            
0001D5E2                            loc_1BC12:
0001D5E2 3038 F780                  		move.w	($FFFFF780).w,d0
0001D5E6 D078 F782                  		add.w	($FFFFF782).w,d0
0001D5EA 31C0 F780                  		move.w	d0,($FFFFF780).w
0001D5EE 4EB9 0001 4BC6             		jsr	Sonic_Animate
0001D5F4 4EB9 0001 50FE             		jsr	LoadSonicDynPLC
0001D5FA 6100 FF8A                  		bsr.w	SS_FixCamera
0001D5FE 4EF9 0000 E106             		jmp	DisplaySprite
0001D604                            ; ===========================================================================
0001D604                            
0001D604                            Obj09_Exit2:				; XREF: Obj09_Index
0001D604 5368 0038                  		subq.w	#1,$38(a0)
0001D608 6600                       		bne.s	loc_1BC40
0001D60A 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001D610                            
0001D610                            loc_1BC40:
0001D610 4EB9 0001 4BC6             		jsr	Sonic_Animate
0001D616 4EB9 0001 50FE             		jsr	LoadSonicDynPLC
0001D61C 6100 FF68                  		bsr.w	SS_FixCamera
0001D620 4EF9 0000 E106             		jmp	DisplaySprite
0001D626                            
0001D626                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D626                            
0001D626                            
0001D626                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001D626 2428 000C                  		move.l	$C(a0),d2
0001D62A 2628 0008                  		move.l	8(a0),d3
0001D62E 1038 F780                  		move.b	($FFFFF780).w,d0
0001D632 0200 00FC                  		andi.b	#$FC,d0
0001D636 4EB9 0000 33D4             		jsr	(CalcSine).l
0001D63C 3828 0010                  		move.w	$10(a0),d4
0001D640 48C4                       		ext.l	d4
0001D642 E184                       		asl.l	#8,d4
0001D644 C1FC 002A                  		muls.w	#$2A,d0
0001D648 D084                       		add.l	d4,d0
0001D64A 3828 0012                  		move.w	$12(a0),d4
0001D64E 48C4                       		ext.l	d4
0001D650 E184                       		asl.l	#8,d4
0001D652 C3FC 002A                  		muls.w	#$2A,d1
0001D656 D284                       		add.l	d4,d1
0001D658 D680                       		add.l	d0,d3
0001D65A 6100 0000                  		bsr.w	sub_1BCE8
0001D65E 6700                       		beq.s	loc_1BCB0
0001D660 9680                       		sub.l	d0,d3
0001D662 7000                       		moveq	#0,d0
0001D664 3140 0010                  		move.w	d0,$10(a0)
0001D668 08A8 0001 0022             		bclr	#1,$22(a0)
0001D66E D481                       		add.l	d1,d2
0001D670 6100 0000                  		bsr.w	sub_1BCE8
0001D674 6700                       		beq.s	loc_1BCC6
0001D676 9481                       		sub.l	d1,d2
0001D678 7200                       		moveq	#0,d1
0001D67A 3141 0012                  		move.w	d1,$12(a0)
0001D67E 4E75                       		rts	
0001D680                            ; ===========================================================================
0001D680                            
0001D680                            loc_1BCB0:
0001D680 D481                       		add.l	d1,d2
0001D682 6100 0000                  		bsr.w	sub_1BCE8
0001D686 6700                       		beq.s	loc_1BCD4
0001D688 9481                       		sub.l	d1,d2
0001D68A 7200                       		moveq	#0,d1
0001D68C 3141 0012                  		move.w	d1,$12(a0)
0001D690 08A8 0001 0022             		bclr	#1,$22(a0)
0001D696                            
0001D696                            loc_1BCC6:
0001D696 E080                       		asr.l	#8,d0
0001D698 E081                       		asr.l	#8,d1
0001D69A 3140 0010                  		move.w	d0,$10(a0)
0001D69E 3141 0012                  		move.w	d1,$12(a0)
0001D6A2 4E75                       		rts	
0001D6A4                            ; ===========================================================================
0001D6A4                            
0001D6A4                            loc_1BCD4:
0001D6A4 E080                       		asr.l	#8,d0
0001D6A6 E081                       		asr.l	#8,d1
0001D6A8 3140 0010                  		move.w	d0,$10(a0)
0001D6AC 3141 0012                  		move.w	d1,$12(a0)
0001D6B0 08E8 0001 0022             		bset	#1,$22(a0)
0001D6B6 4E75                       		rts	
0001D6B8                            ; End of function Obj09_Fall
0001D6B8                            
0001D6B8                            
0001D6B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D6B8                            
0001D6B8                            
0001D6B8                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001D6B8 43F9 00FF 0000             		lea	($FF0000).l,a1
0001D6BE 7800                       		moveq	#0,d4
0001D6C0 4842                       		swap	d2
0001D6C2 3802                       		move.w	d2,d4
0001D6C4 4842                       		swap	d2
0001D6C6 0644 0044                  		addi.w	#$44,d4
0001D6CA 88FC 0018                  		divu.w	#$18,d4
0001D6CE C8FC 0080                  		mulu.w	#$80,d4
0001D6D2 D3C4                       		adda.l	d4,a1
0001D6D4 7800                       		moveq	#0,d4
0001D6D6 4843                       		swap	d3
0001D6D8 3803                       		move.w	d3,d4
0001D6DA 4843                       		swap	d3
0001D6DC 0644 0014                  		addi.w	#$14,d4
0001D6E0 88FC 0018                  		divu.w	#$18,d4
0001D6E4 D2C4                       		adda.w	d4,a1
0001D6E6 7A00                       		moveq	#0,d5
0001D6E8 1819                       		move.b	(a1)+,d4
0001D6EA 6100                       		bsr.s	sub_1BD30
0001D6EC 1819                       		move.b	(a1)+,d4
0001D6EE 6100                       		bsr.s	sub_1BD30
0001D6F0 D2FC 007E                  		adda.w	#$7E,a1
0001D6F4 1819                       		move.b	(a1)+,d4
0001D6F6 6100                       		bsr.s	sub_1BD30
0001D6F8 1819                       		move.b	(a1)+,d4
0001D6FA 6100                       		bsr.s	sub_1BD30
0001D6FC 4A05                       		tst.b	d5
0001D6FE 4E75                       		rts	
0001D700                            ; End of function sub_1BCE8
0001D700                            
0001D700                            
0001D700                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D700                            
0001D700                            
0001D700                            sub_1BD30:				; XREF: sub_1BCE8
0001D700 6700                       		beq.s	locret_1BD44
0001D702 0C04 0028                  		cmpi.b	#$28,d4
0001D706 6700                       		beq.s	locret_1BD44
0001D708 0C04 003A                  		cmpi.b	#$3A,d4
0001D70C 6500                       		bcs.s	loc_1BD46
0001D70E 0C04 004B                  		cmpi.b	#$4B,d4
0001D712 6400                       		bcc.s	loc_1BD46
0001D714                            
0001D714                            locret_1BD44:
0001D714 4E75                       		rts	
0001D716                            ; ===========================================================================
0001D716                            
0001D716                            loc_1BD46:
0001D716 1144 0030                  		move.b	d4,$30(a0)
0001D71A 2149 0032                  		move.l	a1,$32(a0)
0001D71E 7AFF                       		moveq	#-1,d5
0001D720 4E75                       		rts	
0001D722                            ; End of function sub_1BD30
0001D722                            
0001D722                            
0001D722                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D722                            
0001D722                            
0001D722                            Obj09_ChkItems:				; XREF: Obj09_Display
0001D722 43F9 00FF 0000             		lea	($FF0000).l,a1
0001D728 7800                       		moveq	#0,d4
0001D72A 3828 000C                  		move.w	$C(a0),d4
0001D72E 0644 0050                  		addi.w	#$50,d4
0001D732 88FC 0018                  		divu.w	#$18,d4
0001D736 C8FC 0080                  		mulu.w	#$80,d4
0001D73A D3C4                       		adda.l	d4,a1
0001D73C 7800                       		moveq	#0,d4
0001D73E 3828 0008                  		move.w	8(a0),d4
0001D742 0644 0020                  		addi.w	#$20,d4
0001D746 88FC 0018                  		divu.w	#$18,d4
0001D74A D2C4                       		adda.w	d4,a1
0001D74C 1811                       		move.b	(a1),d4
0001D74E 6600                       		bne.s	Obj09_ChkCont
0001D750 4A28 003A                  		tst.b	$3A(a0)
0001D754 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001D758 7800                       		moveq	#0,d4
0001D75A 4E75                       		rts	
0001D75C                            ; ===========================================================================
0001D75C                            
0001D75C                            Obj09_ChkCont:
0001D75C 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001D760 6600                       		bne.s	Obj09_Chk1Up
0001D762 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001D766 6600                       		bne.s	Obj09_GetCont
0001D768 14BC 0001                  		move.b	#1,(a2)
0001D76C 2549 0004                  		move.l	a1,4(a2)
0001D770                            
0001D770                            Obj09_GetCont:
0001D770 4EB9 0000 A700             		jsr	CollectRing
0001D776 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001D77C 6500                       		bcs.s	Obj09_NoCont
0001D77E 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001D784 6600                       		bne.s	Obj09_NoCont
0001D786 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001D78A 303C 00BF                  		move.w	#$BF,d0
0001D78E 4EB9 0000 1470             		jsr	(PlaySound).l	; play extra continue sound
0001D794                            
0001D794                            Obj09_NoCont:
0001D794 7800                       		moveq	#0,d4
0001D796 4E75                       		rts	
0001D798                            ; ===========================================================================
0001D798                            
0001D798                            Obj09_Chk1Up:
0001D798 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001D79C 6600                       		bne.s	Obj09_ChkEmer
0001D79E 6100 F6EA                  		bsr.w	SS_RemoveCollectedItem
0001D7A2 6600                       		bne.s	Obj09_Get1Up
0001D7A4 14BC 0003                  		move.b	#3,(a2)
0001D7A8 2549 0004                  		move.l	a1,4(a2)
0001D7AC                            
0001D7AC                            Obj09_Get1Up:
0001D7AC 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001D7B0 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001D7B4 303C 0088                  		move.w	#$88,d0
0001D7B8 4EB9 0000 1470             		jsr	(PlaySound).l	; play extra life music
0001D7BE 7800                       		moveq	#0,d4
0001D7C0 4E75                       		rts	
0001D7C2                            ; ===========================================================================
0001D7C2                            
0001D7C2                            Obj09_ChkEmer:
0001D7C2 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001D7C6 6500                       		bcs.s	Obj09_ChkGhost
0001D7C8 0C04 0040                  		cmpi.b	#$40,d4
0001D7CC 6200                       		bhi.s	Obj09_ChkGhost
0001D7CE 6100 F6BA                  		bsr.w	SS_RemoveCollectedItem
0001D7D2 6600                       		bne.s	Obj09_GetEmer
0001D7D4 14BC 0005                  		move.b	#5,(a2)
0001D7D8 2549 0004                  		move.l	a1,4(a2)
0001D7DC                            
0001D7DC                            Obj09_GetEmer:
0001D7DC 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001D7E2 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001D7E4 0404 003B                  		subi.b	#$3B,d4
0001D7E8 7000                       		moveq	#0,d0
0001D7EA 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001D7EE 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001D7F2 1584 0000                  		move.b	d4,(a2,d0.w)
0001D7F6 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001D7FA                            
0001D7FA                            Obj09_NoEmer:
0001D7FA 303C 0093                  		move.w	#$93,d0
0001D7FE 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play emerald music
0001D804 7800                       		moveq	#0,d4
0001D806 4E75                       		rts	
0001D808                            ; ===========================================================================
0001D808                            
0001D808                            Obj09_ChkGhost:
0001D808 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001D80C 6600                       		bne.s	Obj09_ChkGhostTag
0001D80E 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001D814                            
0001D814                            Obj09_ChkGhostTag:
0001D814 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001D818 6600                       		bne.s	Obj09_NoGhost
0001D81A 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001D820 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001D822 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001D828                            
0001D828                            Obj09_NoGhost:
0001D828 78FF                       		moveq	#-1,d4
0001D82A 4E75                       		rts	
0001D82C                            ; ===========================================================================
0001D82C                            
0001D82C                            Obj09_MakeGhostSolid:
0001D82C 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001D832 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001D834 43F9 00FF 1020             		lea	($FF1020).l,a1
0001D83A 723F                       		moveq	#$3F,d1
0001D83C                            
0001D83C                            Obj09_GhostLoop2:
0001D83C 743F                       		moveq	#$3F,d2
0001D83E                            
0001D83E                            Obj09_GhostLoop:
0001D83E 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001D842 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001D844 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001D848                            
0001D848                            Obj09_NoReplace:
0001D848 5249                       		addq.w	#1,a1
0001D84A 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001D84E 43E9 0040                  		lea	$40(a1),a1
0001D852 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001D856                            
0001D856                            Obj09_GhostNotSolid:
0001D856 4228 003A                  		clr.b	$3A(a0)
0001D85A 7800                       		moveq	#0,d4
0001D85C 4E75                       		rts	
0001D85E                            ; End of function Obj09_ChkItems
0001D85E                            
0001D85E                            
0001D85E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D85E                            
0001D85E                            
0001D85E                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001D85E 1028 0030                  		move.b	$30(a0),d0
0001D862 6600                       		bne.s	Obj09_ChkBumper
0001D864 5328 0036                  		subq.b	#1,$36(a0)
0001D868 6A00                       		bpl.s	loc_1BEA0
0001D86A 117C 0000 0036             		move.b	#0,$36(a0)
0001D870                            
0001D870                            loc_1BEA0:
0001D870 5328 0037                  		subq.b	#1,$37(a0)
0001D874 6A00                       		bpl.s	locret_1BEAC
0001D876 117C 0000 0037             		move.b	#0,$37(a0)
0001D87C                            
0001D87C                            locret_1BEAC:
0001D87C 4E75                       		rts	
0001D87E                            ; ===========================================================================
0001D87E                            
0001D87E                            Obj09_ChkBumper:
0001D87E 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001D882 6600                       		bne.s	Obj09_GOAL
0001D884 2228 0032                  		move.l	$32(a0),d1
0001D888 0481 00FF 0001             		subi.l	#$FF0001,d1
0001D88E 3401                       		move.w	d1,d2
0001D890 0241 007F                  		andi.w	#$7F,d1
0001D894 C2FC 0018                  		mulu.w	#$18,d1
0001D898 0441 0014                  		subi.w	#$14,d1
0001D89C EE4A                       		lsr.w	#7,d2
0001D89E 0242 007F                  		andi.w	#$7F,d2
0001D8A2 C4FC 0018                  		mulu.w	#$18,d2
0001D8A6 0442 0044                  		subi.w	#$44,d2
0001D8AA 9268 0008                  		sub.w	8(a0),d1
0001D8AE 9468 000C                  		sub.w	$C(a0),d2
0001D8B2 4EB9 0000 36A2             		jsr	(CalcAngle).l
0001D8B8 4EB9 0000 33D4             		jsr	(CalcSine).l
0001D8BE C3FC F900                  		muls.w	#-$700,d1
0001D8C2 E081                       		asr.l	#8,d1
0001D8C4 3141 0010                  		move.w	d1,$10(a0)
0001D8C8 C1FC F900                  		muls.w	#-$700,d0
0001D8CC E080                       		asr.l	#8,d0
0001D8CE 3140 0012                  		move.w	d0,$12(a0)
0001D8D2 08E8 0001 0022             		bset	#1,$22(a0)
0001D8D8 6100 F5B0                  		bsr.w	SS_RemoveCollectedItem
0001D8DC 6600                       		bne.s	Obj09_BumpSnd
0001D8DE 14BC 0002                  		move.b	#2,(a2)
0001D8E2 2028 0032                  		move.l	$32(a0),d0
0001D8E6 5380                       		subq.l	#1,d0
0001D8E8 2540 0004                  		move.l	d0,4(a2)
0001D8EC                            
0001D8EC                            Obj09_BumpSnd:
0001D8EC 303C 00B4                  		move.w	#$B4,d0
0001D8F0 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play bumper sound
0001D8F6                            ; ===========================================================================
0001D8F6                            
0001D8F6                            Obj09_GOAL:
0001D8F6 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001D8FA 6600                       		bne.s	Obj09_UPblock
0001D8FC 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001D900 303C 00A8                  		move.w	#$A8,d0		; change item
0001D904 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001D90A 4E75                       		rts	
0001D90C                            ; ===========================================================================
0001D90C                            
0001D90C                            Obj09_UPblock:
0001D90C 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001D910 6600                       		bne.s	Obj09_DOWNblock
0001D912 4A28 0036                  		tst.b	$36(a0)
0001D916 6600 0000                  		bne.w	Obj09_NoGlass
0001D91A 117C 001E 0036             		move.b	#$1E,$36(a0)
0001D920 0838 0006 F783             		btst	#6,($FFFFF783).w
0001D926 6700                       		beq.s	Obj09_UPsnd
0001D928 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001D92C 2268 0032                  		movea.l	$32(a0),a1
0001D930 5389                       		subq.l	#1,a1
0001D932 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001D936                            
0001D936                            Obj09_UPsnd:
0001D936 303C 00A9                  		move.w	#$A9,d0
0001D93A 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play up/down sound
0001D940                            ; ===========================================================================
0001D940                            
0001D940                            Obj09_DOWNblock:
0001D940 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001D944 6600                       		bne.s	Obj09_Rblock
0001D946 4A28 0036                  		tst.b	$36(a0)
0001D94A 6600 0000                  		bne.w	Obj09_NoGlass
0001D94E 117C 001E 0036             		move.b	#$1E,$36(a0)
0001D954 0838 0006 F783             		btst	#6,($FFFFF783).w
0001D95A 6600                       		bne.s	Obj09_DOWNsnd
0001D95C E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001D960 2268 0032                  		movea.l	$32(a0),a1
0001D964 5389                       		subq.l	#1,a1
0001D966 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001D96A                            
0001D96A                            Obj09_DOWNsnd:
0001D96A 303C 00A9                  		move.w	#$A9,d0
0001D96E 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play up/down sound
0001D974                            ; ===========================================================================
0001D974                            
0001D974                            Obj09_Rblock:
0001D974 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001D978 6600                       		bne.s	Obj09_ChkGlass
0001D97A 4A28 0037                  		tst.b	$37(a0)
0001D97E 6600 0000                  		bne.w	Obj09_NoGlass
0001D982 117C 001E 0037             		move.b	#$1E,$37(a0)
0001D988 6100 F500                  		bsr.w	SS_RemoveCollectedItem
0001D98C 6600                       		bne.s	Obj09_RevStage
0001D98E 14BC 0004                  		move.b	#4,(a2)
0001D992 2028 0032                  		move.l	$32(a0),d0
0001D996 5380                       		subq.l	#1,d0
0001D998 2540 0004                  		move.l	d0,4(a2)
0001D99C                            
0001D99C                            Obj09_RevStage:
0001D99C 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001D9A0 303C 00A9                  		move.w	#$A9,d0
0001D9A4 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play sound
0001D9AA                            ; ===========================================================================
0001D9AA                            
0001D9AA                            Obj09_ChkGlass:
0001D9AA 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001D9AE 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001D9B0 0C00 002E                  		cmpi.b	#$2E,d0
0001D9B4 6700                       		beq.s	Obj09_Glass
0001D9B6 0C00 002F                  		cmpi.b	#$2F,d0
0001D9BA 6700                       		beq.s	Obj09_Glass
0001D9BC 0C00 0030                  		cmpi.b	#$30,d0
0001D9C0 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001D9C2                            
0001D9C2                            Obj09_Glass:
0001D9C2 6100 F4C6                  		bsr.w	SS_RemoveCollectedItem
0001D9C6 6600                       		bne.s	Obj09_GlassSnd
0001D9C8 14BC 0006                  		move.b	#6,(a2)
0001D9CC 2268 0032                  		movea.l	$32(a0),a1
0001D9D0 5389                       		subq.l	#1,a1
0001D9D2 2549 0004                  		move.l	a1,4(a2)
0001D9D6 1011                       		move.b	(a1),d0
0001D9D8 5200                       		addq.b	#1,d0		; change glass type when touched
0001D9DA 0C00 0030                  		cmpi.b	#$30,d0
0001D9DE 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001D9E0 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001D9E2                            
0001D9E2                            Obj09_GlassUpdate:
0001D9E2 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001D9E6                            
0001D9E6                            Obj09_GlassSnd:
0001D9E6 303C 00BA                  		move.w	#$BA,d0
0001D9EA 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play glass block sound
0001D9F0                            ; ===========================================================================
0001D9F0                            
0001D9F0                            Obj09_NoGlass:
0001D9F0 4E75                       		rts	
0001D9F2                            ; End of function Obj09_ChkItems2
0001D9F2                            
0001D9F2                            ; ===========================================================================
0001D9F2                            ; ---------------------------------------------------------------------------
0001D9F2                            ; Object 10 - blank
0001D9F2                            ; ---------------------------------------------------------------------------
0001D9F2                            
0001D9F2                            Obj10:					; XREF: Obj_Index
0001D9F2 4E75                       		rts	
0001D9F4                            ; ---------------------------------------------------------------------------
0001D9F4                            ; Subroutine to	animate	level graphics
0001D9F4                            ; ---------------------------------------------------------------------------
0001D9F4                            
0001D9F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D9F4                            
0001D9F4                            
0001D9F4                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001D9F4 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001D9F8 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001D9FA 4DF9 00C0 0000             		lea	($C00000).l,a6
0001DA00 6100 0000                  		bsr.w	AniArt_GiantRing
0001DA04 7000                       		moveq	#0,d0
0001DA06 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001DA0A D040                       		add.w	d0,d0
0001DA0C 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001DA10 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001DA14                            ; ===========================================================================
0001DA14                            
0001DA14                            AniArt_Pause:
0001DA14 4E75                       		rts	
0001DA16                            ; End of function AniArt_Load
0001DA16                            
0001DA16                            ; ===========================================================================
0001DA16 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001DA1A 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001DA1E 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001DA22 0000                       		dc.w AniArt_Ending-AniArt_Index
0001DA24                            ; ===========================================================================
0001DA24                            ; ---------------------------------------------------------------------------
0001DA24                            ; Animated pattern routine - Green Hill
0001DA24                            ; ---------------------------------------------------------------------------
0001DA24                            
0001DA24                            AniArt_GHZ:				; XREF: AniArt_Index
0001DA24 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001DA28 6A00                       		bpl.s	loc_1C08A
0001DA2A 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001DA30 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001DA36 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001DA3A 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001DA3E 0240 0001                  		andi.w	#1,d0
0001DA42 6700                       		beq.s	loc_1C078
0001DA44 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001DA48                            
0001DA48                            loc_1C078:
0001DA48 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001DA52 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001DA56 6000 0000                  		bra.w	LoadTiles
0001DA5A                            ; ===========================================================================
0001DA5A                            
0001DA5A                            loc_1C08A:
0001DA5A 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001DA5E 6A00                       		bpl.s	loc_1C0C0
0001DA60 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001DA66 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001DA6C 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001DA70 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001DA74 0240 0001                  		andi.w	#1,d0
0001DA78 6700                       		beq.s	loc_1C0AE
0001DA7A 43E9 0200                  		lea	$200(a1),a1
0001DA7E                            
0001DA7E                            loc_1C0AE:
0001DA7E 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001DA88 323C 000F                  		move.w	#$F,d1
0001DA8C 6000 0000                  		bra.w	LoadTiles
0001DA90                            ; ===========================================================================
0001DA90                            
0001DA90                            loc_1C0C0:
0001DA90 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001DA94 6A00                       		bpl.s	locret_1C10C
0001DA96 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001DA9C 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001DAA0 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001DAA4 0240 0003                  		andi.w	#3,d0
0001DAA8 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001DAAC 0800 0000                  		btst	#0,d0
0001DAB0 6600                       		bne.s	loc_1C0E8
0001DAB2 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001DAB8                            
0001DAB8                            loc_1C0E8:
0001DAB8 EF48                       		lsl.w	#7,d0
0001DABA 3200                       		move.w	d0,d1
0001DABC D040                       		add.w	d0,d0
0001DABE D041                       		add.w	d1,d0
0001DAC0 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001DACA 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001DAD0 43F1 0000                  		lea	(a1,d0.w),a1
0001DAD4 323C 000B                  		move.w	#$B,d1
0001DAD8 6100 0000                  		bsr.w	LoadTiles
0001DADC                            
0001DADC                            locret_1C10C:
0001DADC 4E75                       		rts	
0001DADE                            ; ===========================================================================
0001DADE 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001DAE2                            ; ===========================================================================
0001DAE2                            ; ---------------------------------------------------------------------------
0001DAE2                            ; Animated pattern routine - Marble
0001DAE2                            ; ---------------------------------------------------------------------------
0001DAE2                            
0001DAE2                            AniArt_MZ:				; XREF: AniArt_Index
0001DAE2 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001DAE6 6A00                       		bpl.s	loc_1C150
0001DAE8 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001DAEE 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001DAF4 7000                       		moveq	#0,d0
0001DAF6 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001DAFA 5200                       		addq.b	#1,d0
0001DAFC 0C00 0003                  		cmpi.b	#3,d0
0001DB00 6600                       		bne.s	loc_1C134
0001DB02 7000                       		moveq	#0,d0
0001DB04                            
0001DB04                            loc_1C134:
0001DB04 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001DB08 C0FC 0100                  		mulu.w	#$100,d0
0001DB0C D2C0                       		adda.w	d0,a1
0001DB0E 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001DB18 323C 0007                  		move.w	#7,d1
0001DB1C 6100 0000                  		bsr.w	LoadTiles
0001DB20                            
0001DB20                            loc_1C150:
0001DB20 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001DB24 6A00                       		bpl.s	loc_1C1AE
0001DB26 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001DB2C 7000                       		moveq	#0,d0
0001DB2E 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001DB32 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001DB38 EE58                       		ror.w	#7,d0
0001DB3A D8C0                       		adda.w	d0,a4
0001DB3C 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001DB46 7600                       		moveq	#0,d3
0001DB48 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001DB4C 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001DB50 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001DB54 343C 0003                  		move.w	#3,d2
0001DB58                            
0001DB58                            loc_1C188:
0001DB58 3003                       		move.w	d3,d0
0001DB5A D040                       		add.w	d0,d0
0001DB5C 0240 001E                  		andi.w	#$1E,d0
0001DB60 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001DB66 3033 0000                  		move.w	(a3,d0.w),d0
0001DB6A 47F3 0000                  		lea	(a3,d0.w),a3
0001DB6E 224C                       		movea.l	a4,a1
0001DB70 323C 001F                  		move.w	#$1F,d1
0001DB74 4E93                       		jsr	(a3)
0001DB76 5843                       		addq.w	#4,d3
0001DB78 51CA FFDE                  		dbf	d2,loc_1C188
0001DB7C 4E75                       		rts	
0001DB7E                            ; ===========================================================================
0001DB7E                            
0001DB7E                            loc_1C1AE:
0001DB7E 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001DB82 6A00 0000                  		bpl.w	locret_1C1EA
0001DB86 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001DB8C 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001DB92 7000                       		moveq	#0,d0
0001DB94 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001DB98 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001DB9C 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001DBA2 C0FC 00C0                  		mulu.w	#$C0,d0
0001DBA6 D2C0                       		adda.w	d0,a1
0001DBA8 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001DBB2 323C 0005                  		move.w	#5,d1
0001DBB6 6000 0000                  		bra.w	LoadTiles
0001DBBA                            ; ===========================================================================
0001DBBA                            
0001DBBA                            locret_1C1EA:
0001DBBA 4E75                       		rts	
0001DBBC                            ; ===========================================================================
0001DBBC                            ; ---------------------------------------------------------------------------
0001DBBC                            ; Animated pattern routine - Scrap Brain
0001DBBC                            ; ---------------------------------------------------------------------------
0001DBBC                            
0001DBBC                            AniArt_SBZ:				; XREF: AniArt_Index
0001DBBC 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001DBC0 6700                       		beq.s	loc_1C1F8
0001DBC2 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001DBC6 6000                       		bra.s	loc_1C250
0001DBC8                            ; ===========================================================================
0001DBC8                            
0001DBC8                            loc_1C1F8:
0001DBC8 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001DBCC 6A00                       		bpl.s	loc_1C250
0001DBCE 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001DBD4 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001DBDA 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001DBE4 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001DBE8 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001DBEC 0240 0007                  		andi.w	#7,d0
0001DBF0 6700                       		beq.s	loc_1C234
0001DBF2 5340                       		subq.w	#1,d0
0001DBF4 C0FC 0180                  		mulu.w	#$180,d0
0001DBF8 43F1 0000                  		lea	(a1,d0.w),a1
0001DBFC 323C 000B                  		move.w	#$B,d1
0001DC00 6000 0000                  		bra.w	LoadTiles
0001DC04                            ; ===========================================================================
0001DC04                            
0001DC04                            loc_1C234:
0001DC04 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001DC0A                            
0001DC0A                            loc_1C23A:
0001DC0A 323C 0005                  		move.w	#5,d1
0001DC0E 6100 0000                  		bsr.w	LoadTiles
0001DC12 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001DC18 323C 0005                  		move.w	#5,d1
0001DC1C 6000 0000                  		bra.w	LoadTiles
0001DC20                            ; ===========================================================================
0001DC20                            
0001DC20                            loc_1C250:
0001DC20 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001DC24 6700                       		beq.s	loc_1C25C
0001DC26 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001DC2A 6000                       		bra.s	locret_1C2A0
0001DC2C                            ; ===========================================================================
0001DC2C                            
0001DC2C                            loc_1C25C:
0001DC2C 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001DC30 6A00                       		bpl.s	locret_1C2A0
0001DC32 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001DC38 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001DC3E 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001DC48 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001DC4C 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001DC50 0240 0007                  		andi.w	#7,d0
0001DC54 6700                       		beq.s	loc_1C298
0001DC56 5340                       		subq.w	#1,d0
0001DC58 C0FC 0180                  		mulu.w	#$180,d0
0001DC5C 43F1 0000                  		lea	(a1,d0.w),a1
0001DC60 323C 000B                  		move.w	#$B,d1
0001DC64 6000 0000                  		bra.w	LoadTiles
0001DC68                            ; ===========================================================================
0001DC68                            
0001DC68                            loc_1C298:
0001DC68 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001DC6E 609A                       		bra.s	loc_1C23A
0001DC70                            ; ===========================================================================
0001DC70                            
0001DC70                            locret_1C2A0:
0001DC70 4E75                       		rts	
0001DC72                            ; ===========================================================================
0001DC72                            ; ---------------------------------------------------------------------------
0001DC72                            ; Animated pattern routine - ending sequence
0001DC72                            ; ---------------------------------------------------------------------------
0001DC72                            
0001DC72                            AniArt_Ending:				; XREF: AniArt_Index
0001DC72 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001DC76 6A00                       		bpl.s	loc_1C2F4
0001DC78 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001DC7E 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001DC84 45F8 9400                  		lea	($FFFF9400).w,a2
0001DC88 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001DC8C 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001DC90 0240 0001                  		andi.w	#1,d0
0001DC94 6700                       		beq.s	loc_1C2CE
0001DC96 43E9 0200                  		lea	$200(a1),a1
0001DC9A 45EA 0200                  		lea	$200(a2),a2
0001DC9E                            
0001DC9E                            loc_1C2CE:
0001DC9E 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001DCA8 323C 000F                  		move.w	#$F,d1
0001DCAC 6100 0000                  		bsr.w	LoadTiles
0001DCB0 224A                       		movea.l	a2,a1
0001DCB2 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001DCBC 323C 000F                  		move.w	#$F,d1
0001DCC0 6000 0000                  		bra.w	LoadTiles
0001DCC4                            ; ===========================================================================
0001DCC4                            
0001DCC4                            loc_1C2F4:
0001DCC4 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001DCC8 6A00                       		bpl.s	loc_1C33C
0001DCCA 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001DCD0 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001DCD4 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001DCD8 0240 0007                  		andi.w	#7,d0
0001DCDC 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001DCE0 EF48                       		lsl.w	#7,d0
0001DCE2 3200                       		move.w	d0,d1
0001DCE4 D040                       		add.w	d0,d0
0001DCE6 D041                       		add.w	d1,d0
0001DCE8 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001DCF2 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001DCF8 43F1 0000                  		lea	(a1,d0.w),a1
0001DCFC 323C 000B                  		move.w	#$B,d1
0001DD00 6000 0000                  		bra.w	LoadTiles
0001DD04                            ; ===========================================================================
0001DD04 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001DD0C                            ; ===========================================================================
0001DD0C                            
0001DD0C                            loc_1C33C:
0001DD0C 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001DD10 6A00                       		bpl.s	loc_1C37A
0001DD12 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001DD18 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001DD1C 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001DD20 0240 0003                  		andi.w	#3,d0
0001DD24 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001DD28 E148                       		lsl.w	#8,d0
0001DD2A D040                       		add.w	d0,d0
0001DD2C 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001DD36 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001DD3A 43F1 0000                  		lea	(a1,d0.w),a1
0001DD3E 323C 000F                  		move.w	#$F,d1
0001DD42 6000 0000                  		bra.w	LoadTiles
0001DD46                            ; ===========================================================================
0001DD46 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001DD4A                            ; ===========================================================================
0001DD4A                            
0001DD4A                            loc_1C37A:
0001DD4A 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001DD4E 6A00                       		bpl.s	locret_1C3B4
0001DD50 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001DD56 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001DD5A 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001DD5E 0240 0003                  		andi.w	#3,d0
0001DD62 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001DD66 E148                       		lsl.w	#8,d0
0001DD68 D040                       		add.w	d0,d0
0001DD6A 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001DD74 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001DD78 43F1 0000                  		lea	(a1,d0.w),a1
0001DD7C 323C 000F                  		move.w	#$F,d1
0001DD80 6000 0000                  		bra.w	LoadTiles
0001DD84                            ; ===========================================================================
0001DD84                            
0001DD84                            locret_1C3B4:
0001DD84 4E75                       		rts	
0001DD86                            ; ===========================================================================
0001DD86                            
0001DD86                            AniArt_none:				; XREF: AniArt_Index
0001DD86 4E75                       		rts	
0001DD88                            
0001DD88                            ; ---------------------------------------------------------------------------
0001DD88                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001DD88                            ; ---------------------------------------------------------------------------
0001DD88                            
0001DD88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD88                            
0001DD88                            
0001DD88                            LoadTiles:
0001DD88 2C99                       		move.l	(a1)+,(a6)
0001DD8A 2C99                       		move.l	(a1)+,(a6)
0001DD8C 2C99                       		move.l	(a1)+,(a6)
0001DD8E 2C99                       		move.l	(a1)+,(a6)
0001DD90 2C99                       		move.l	(a1)+,(a6)
0001DD92 2C99                       		move.l	(a1)+,(a6)
0001DD94 2C99                       		move.l	(a1)+,(a6)
0001DD96 2C99                       		move.l	(a1)+,(a6)
0001DD98 51C9 FFEE                  		dbf	d1,LoadTiles
0001DD9C 4E75                       		rts	
0001DD9E                            ; End of function LoadTiles
0001DD9E                            
0001DD9E                            ; ===========================================================================
0001DD9E                            ; ---------------------------------------------------------------------------
0001DD9E                            ; Animated pattern routine - more Marble Zone
0001DD9E                            ; ---------------------------------------------------------------------------
0001DD9E 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001DDA2 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001DDA6 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001DDAA 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001DDAE 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001DDB2 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001DDB6 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001DDBA 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001DDBE                            ; ===========================================================================
0001DDBE                            
0001DDBE                            loc_1C3EE:				; XREF: AniArt_MZextra
0001DDBE 2C91                       		move.l	(a1),(a6)
0001DDC0 43E9 0010                  		lea	$10(a1),a1
0001DDC4 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001DDC8 4E75                       		rts	
0001DDCA                            ; ===========================================================================
0001DDCA                            
0001DDCA                            loc_1C3FA:				; XREF: AniArt_MZextra
0001DDCA 2029 0002                  		move.l	2(a1),d0
0001DDCE 1029 0001                  		move.b	1(a1),d0
0001DDD2 E098                       		ror.l	#8,d0
0001DDD4 2C80                       		move.l	d0,(a6)
0001DDD6 43E9 0010                  		lea	$10(a1),a1
0001DDDA 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001DDDE 4E75                       		rts	
0001DDE0                            ; ===========================================================================
0001DDE0                            
0001DDE0                            loc_1C410:				; XREF: AniArt_MZextra
0001DDE0 2CA9 0002                  		move.l	2(a1),(a6)
0001DDE4 43E9 0010                  		lea	$10(a1),a1
0001DDE8 51C9 FFF6                  		dbf	d1,loc_1C410
0001DDEC 4E75                       		rts	
0001DDEE                            ; ===========================================================================
0001DDEE                            
0001DDEE                            loc_1C41E:				; XREF: AniArt_MZextra
0001DDEE 2029 0004                  		move.l	4(a1),d0
0001DDF2 1029 0003                  		move.b	3(a1),d0
0001DDF6 E098                       		ror.l	#8,d0
0001DDF8 2C80                       		move.l	d0,(a6)
0001DDFA 43E9 0010                  		lea	$10(a1),a1
0001DDFE 51C9 FFEE                  		dbf	d1,loc_1C41E
0001DE02 4E75                       		rts	
0001DE04                            ; ===========================================================================
0001DE04                            
0001DE04                            loc_1C434:				; XREF: AniArt_MZextra
0001DE04 2CA9 0004                  		move.l	4(a1),(a6)
0001DE08 43E9 0010                  		lea	$10(a1),a1
0001DE0C 51C9 FFF6                  		dbf	d1,loc_1C434
0001DE10 4E75                       		rts	
0001DE12                            ; ===========================================================================
0001DE12                            
0001DE12                            loc_1C442:				; XREF: AniArt_MZextra
0001DE12 2029 0006                  		move.l	6(a1),d0
0001DE16 1029 0005                  		move.b	5(a1),d0
0001DE1A E098                       		ror.l	#8,d0
0001DE1C 2C80                       		move.l	d0,(a6)
0001DE1E 43E9 0010                  		lea	$10(a1),a1
0001DE22 51C9 FFEE                  		dbf	d1,loc_1C442
0001DE26 4E75                       		rts	
0001DE28                            ; ===========================================================================
0001DE28                            
0001DE28                            loc_1C458:				; XREF: AniArt_MZextra
0001DE28 2CA9 0006                  		move.l	6(a1),(a6)
0001DE2C 43E9 0010                  		lea	$10(a1),a1
0001DE30 51C9 FFF6                  		dbf	d1,loc_1C458
0001DE34 4E75                       		rts	
0001DE36                            ; ===========================================================================
0001DE36                            
0001DE36                            loc_1C466:				; XREF: AniArt_MZextra
0001DE36 2029 0008                  		move.l	8(a1),d0
0001DE3A 1029 0007                  		move.b	7(a1),d0
0001DE3E E098                       		ror.l	#8,d0
0001DE40 2C80                       		move.l	d0,(a6)
0001DE42 43E9 0010                  		lea	$10(a1),a1
0001DE46 51C9 FFEE                  		dbf	d1,loc_1C466
0001DE4A 4E75                       		rts	
0001DE4C                            ; ===========================================================================
0001DE4C                            
0001DE4C                            loc_1C47C:				; XREF: AniArt_MZextra
0001DE4C 2CA9 0008                  		move.l	8(a1),(a6)
0001DE50 43E9 0010                  		lea	$10(a1),a1
0001DE54 51C9 FFF6                  		dbf	d1,loc_1C47C
0001DE58 4E75                       		rts	
0001DE5A                            ; ===========================================================================
0001DE5A                            
0001DE5A                            loc_1C48A:				; XREF: AniArt_MZextra
0001DE5A 2029 000A                  		move.l	$A(a1),d0
0001DE5E 1029 0009                  		move.b	9(a1),d0
0001DE62 E098                       		ror.l	#8,d0
0001DE64 2C80                       		move.l	d0,(a6)
0001DE66 43E9 0010                  		lea	$10(a1),a1
0001DE6A 51C9 FFEE                  		dbf	d1,loc_1C48A
0001DE6E 4E75                       		rts	
0001DE70                            ; ===========================================================================
0001DE70                            
0001DE70                            loc_1C4A0:				; XREF: AniArt_MZextra
0001DE70 2CA9 000A                  		move.l	$A(a1),(a6)
0001DE74 43E9 0010                  		lea	$10(a1),a1
0001DE78 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001DE7C 4E75                       		rts	
0001DE7E                            ; ===========================================================================
0001DE7E                            
0001DE7E                            loc_1C4AE:				; XREF: AniArt_MZextra
0001DE7E 2029 000C                  		move.l	$C(a1),d0
0001DE82 1029 000B                  		move.b	$B(a1),d0
0001DE86 E098                       		ror.l	#8,d0
0001DE88 2C80                       		move.l	d0,(a6)
0001DE8A 43E9 0010                  		lea	$10(a1),a1
0001DE8E 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001DE92 4E75                       		rts	
0001DE94                            ; ===========================================================================
0001DE94                            
0001DE94                            loc_1C4C4:				; XREF: AniArt_MZextra
0001DE94 2CA9 000C                  		move.l	$C(a1),(a6)
0001DE98 43E9 0010                  		lea	$10(a1),a1
0001DE9C 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001DEA0 4E75                       		rts	
0001DEA2                            ; ===========================================================================
0001DEA2                            
0001DEA2                            loc_1C4D2:				; XREF: AniArt_MZextra
0001DEA2 2029 000C                  		move.l	$C(a1),d0
0001DEA6 E198                       		rol.l	#8,d0
0001DEA8 1011                       		move.b	0(a1),d0
0001DEAA 2C80                       		move.l	d0,(a6)
0001DEAC 43E9 0010                  		lea	$10(a1),a1
0001DEB0 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001DEB4 4E75                       		rts	
0001DEB6                            ; ===========================================================================
0001DEB6                            
0001DEB6                            loc_1C4E8:				; XREF: AniArt_MZextra
0001DEB6 3CA9 000E                  		move.w	$E(a1),(a6)
0001DEBA 3C91                       		move.w	0(a1),(a6)
0001DEBC 43E9 0010                  		lea	$10(a1),a1
0001DEC0 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001DEC4 4E75                       		rts	
0001DEC6                            ; ===========================================================================
0001DEC6                            
0001DEC6                            loc_1C4FA:				; XREF: AniArt_MZextra
0001DEC6 2011                       		move.l	0(a1),d0
0001DEC8 1029 000F                  		move.b	$F(a1),d0
0001DECC E098                       		ror.l	#8,d0
0001DECE 2C80                       		move.l	d0,(a6)
0001DED0 43E9 0010                  		lea	$10(a1),a1
0001DED4 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001DED8 4E75                       		rts	
0001DEDA                            
0001DEDA                            ; ---------------------------------------------------------------------------
0001DEDA                            ; Animated pattern routine - giant ring
0001DEDA                            ; ---------------------------------------------------------------------------
0001DEDA                            
0001DEDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DEDA                            
0001DEDA                            
0001DEDA                            AniArt_GiantRing:			; XREF: AniArt_Load
0001DEDA 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001DEDE 6600                       		bne.s	loc_1C518
0001DEE0 4E75                       		rts
0001DEE2                            ; ===========================================================================
0001DEE2                            
0001DEE2                            loc_1C518:
0001DEE2 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001DEE8 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001DEEE 7000                       		moveq	#0,d0
0001DEF0 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001DEF4 43F1 0000                  		lea	(a1,d0.w),a1
0001DEF8 0640 8000                  		addi.w	#$8000,d0
0001DEFC E588                       		lsl.l	#2,d0
0001DEFE E448                       		lsr.w	#2,d0
0001DF00 0040 4000                  		ori.w	#$4000,d0
0001DF04 4840                       		swap	d0
0001DF06 2D40 0004                  		move.l	d0,4(a6)
0001DF0A 323C 000D                  		move.w	#$D,d1
0001DF0E 6000 FE78                  		bra.w	LoadTiles
0001DF12                            ; End of function AniArt_GiantRing
0001DF12                            
0001DF12                            ; ===========================================================================
0001DF12                            ; ---------------------------------------------------------------------------
0001DF12                            ; Object 21 - SCORE, TIME, RINGS
0001DF12                            ; ---------------------------------------------------------------------------
0001DF12                            
0001DF12                            Obj21:					; XREF: Obj_Index
0001DF12 7000                       		moveq	#0,d0
0001DF14 1028 0024                  		move.b	$24(a0),d0
0001DF18 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001DF1C 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001DF20                            ; ===========================================================================
0001DF20 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001DF22 0000                       		dc.w Obj21_Flash-Obj21_Index
0001DF24                            ; ===========================================================================
0001DF24                            
0001DF24                            Obj21_Main:				; XREF: Obj21_Main
0001DF24 5428 0024                  		addq.b	#2,$24(a0)
0001DF28 317C 0090 0008             		move.w	#$90,8(a0)
0001DF2E 317C 0108 000A             		move.w	#$108,$A(a0)
0001DF34 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001DF3C 317C 06BA 0002                             move.w    #$6BA,2(a0)
0001DF42 117C 0000 0001             		move.b	#0,1(a0)
0001DF48 117C 0000 0018             		move.b	#0,$18(a0)
0001DF4E                            
0001DF4E                            Obj21_Flash:				; XREF: Obj21_Main
0001DF4E 7000                       		moveq	#0,d0
0001DF50 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001DF56 6600                       		bne.s	Obj21_Display
0001DF58 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001DF5C 6600                       		bne.s	Obj21_Flash2	; if not, branch
0001DF5E 5240                       		addq.w	#1,d0		; make ring counter flash red
0001DF60                            ; ===========================================================================
0001DF60                            
0001DF60                            Obj21_Flash2:
0001DF60 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001DF66 6600                       		bne.s	Obj21_Display	; if not, branch
0001DF68 5440                       		addq.w	#2,d0		; make time counter flash red
0001DF6A                            
0001DF6A                            Obj21_Display:
0001DF6A 1140 001A                  		move.b	d0,$1A(a0)
0001DF6E 4EF9 0000 E106             		jmp	DisplaySprite
0001DF74                            ; ===========================================================================
0001DF74                            ; ---------------------------------------------------------------------------
0001DF74                            ; Sprite mappings - SCORE, TIME, RINGS
0001DF74                            ; ---------------------------------------------------------------------------
0001DF74                            Map_obj21:
0001DF74                            	include "_maps\obj21.asm"
0001DF74                            ; ---------------------------------------------------------------------------
0001DF74                            ; Sprite mappings - SCORE, TIME, RINGS (CENTISECONDS)
0001DF74                            ; ---------------------------------------------------------------------------
0001DF74 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001DF78 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001DF7C 0B                         byte_1C5BC:	dc.b $B
0001DF7D 800D 8010 00               		dc.b $80, $D, $80, $10, 0	; SCOR
0001DF82 800D 8028 20               		dc.b $80, $D, $80, $28,	$20	; E nnn
0001DF87 800D 8030 40               		dc.b $80, $D, $80, $30,	$40	; nnnn
0001DF8C 900D 8020 00               		dc.b $90, $D, $80, $20,	0	; TIME
0001DF91 900D 8038 28               		dc.b $90, $D, $80, $38,	$28	; n'nn
0001DF96 9009 8000 48               			dc.b $90, 9, $80, $0,	$48	; "nn
0001DF9B A00D 8018 00               		dc.b $A0, $D, $80, $18, 0	; RING
0001DFA0 A001 8010 20               		dc.b $A0, 1, $80, $10, $20	; S
0001DFA5 A009 8040 30               		dc.b $A0, 9, $80, $40, $30	; rings
0001DFAA 4005 811A 00               		dc.b $40, 5, $81, $1A, 0	; icon
0001DFAF 400D 811E 10               		dc.b $40, $D, $81, $1E, $10	; SONIC x nn
0001DFB4 00                         		dc.b 0
0001DFB5 0B                         byte_1C5F0:	dc.b $B
0001DFB6 800D 8010 00               		dc.b $80, $D, $80, $10, 0	; SCOR
0001DFBB 800D 8028 20               		dc.b $80, $D, $80, $28,	$20	; E nnn
0001DFC0 800D 8030 40               		dc.b $80, $D, $80, $30,	$40	; nnnn
0001DFC5 900D 8020 00               		dc.b $90, $D, $80, $20,	0	; TIME
0001DFCA 900D 8038 28               		dc.b $90, $D, $80, $38,	$28	; n'nn
0001DFCF 9009 8000 48               			dc.b $90, 9, $80, $0,	$48	; "nn
0001DFD4 A00D A018 00               		dc.b $A0, $D, $A0, $18, 0	; RING
0001DFD9 A001 A010 20               		dc.b $A0, 1, $A0, $10, $20	; S
0001DFDE A009 8040 30               		dc.b $A0, 9, $80, $40, $30	; rings
0001DFE3 4005 811A 00               		dc.b $40, 5, $81, $1A, 0	; icon
0001DFE8 400D 811E 10               		dc.b $40, $D, $81, $1E, $10	; SONIC x nn
0001DFED 00                         		dc.b 0
0001DFEE 0B                         byte_1C624:	dc.b $B
0001DFEF 800D 8010 00               		dc.b $80, $D, $80, $10, 0	; SCOR
0001DFF4 800D 8028 20               		dc.b $80, $D, $80, $28,	$20	; E nnn
0001DFF9 800D 8030 40               		dc.b $80, $D, $80, $30,	$40	; nnnn
0001DFFE 900D A020 00               		dc.b $90, $D, $A0, $20,	0	; TIME
0001E003 900D 8038 28               		dc.b $90, $D, $80, $38,	$28	; n'nn
0001E008 9009 8000 48               			dc.b $90, 9, $80, $0,	$48	; "nn
0001E00D A00D 8018 00               		dc.b $A0, $D, $80, $18, 0	; RING
0001E012 A001 8010 20               		dc.b $A0, 1, $80, $10, $20	; S
0001E017 A009 8040 30               		dc.b $A0, 9, $80, $40, $30	; rings
0001E01C 4005 811A 00               		dc.b $40, 5, $81, $1A, 0	; icon
0001E021 400D 811E 10               		dc.b $40, $D, $81, $1E, $10	; SONIC x nn
0001E026 00                         		dc.b 0
0001E027 0B                         byte_1C658:	dc.b $B
0001E028 800D 8010 00               		dc.b $80, $D, $80, $10, 0	; SCOR
0001E02D 800D 8028 20               		dc.b $80, $D, $80, $28,	$20	; E nnn
0001E032 800D 8030 40               		dc.b $80, $D, $80, $30,	$40	; nnnn
0001E037 900D A020 00               		dc.b $90, $D, $A0, $20,	0	; TIME
0001E03C 900D 8038 28               		dc.b $90, $D, $80, $38,	$28	; n'nn
0001E041 9009 8000 48               			dc.b $90, 9, $80, $0,	$48	; "nn
0001E046 A00D A018 00               		dc.b $A0, $D, $A0, $18, 0	; RING
0001E04B A001 A010 20               		dc.b $A0, 1, $A0, $10, $20	; S
0001E050 A009 8040 30               		dc.b $A0, 9, $80, $40, $30	; rings
0001E055 4005 811A 00               		dc.b $40, 5, $81, $1A, 0	; icon
0001E05A 400D 811E 10               		dc.b $40, $D, $81, $1E, $10	; SONIC x nn
0001E060 00                         		even
0001E060 00                         		even
0001E060                            
0001E060                            ; ---------------------------------------------------------------------------
0001E060                            ; Add points subroutine
0001E060                            ; ---------------------------------------------------------------------------
0001E060                            
0001E060                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E060                            
0001E060                            
0001E060                            AddPoints:
0001E060 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001E066 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001E06A 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001E06E D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001E070 223C 000F 423F             		move.l	#999999,d1
0001E076 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001E078 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001E07C 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001E07E 2481                       		move.l	d1,(a2)
0001E080                            
0001E080                            loc_1C6AC:
0001E080 2013                       		move.l	(a3),d0
0001E082 B092                       		cmp.l	(a2),d0
0001E084 6500 0000                  		bcs.w	locret_1C6B6
0001E088 2480                       		move.l	d0,(a2)
0001E08A                            
0001E08A                            locret_1C6B6:
0001E08A 4E75                       		rts	
0001E08C                            ; End of function AddPoints
0001E08C                            
0001E08C                            ; ---------------------------------------------------------------------------
0001E08C                            ; Subroutine to	update the HUD
0001E08C                            ; ---------------------------------------------------------------------------
0001E08C                            
0001E08C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E08C                            
0001E08C                            
0001E08C                            HudUpdate:
0001E08C 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001E090 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001E094 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001E098 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001E09A 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001E09E 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001E0A4 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001E0A8 6100 0000                  		bsr.w	Hud_Score
0001E0AC                            
0001E0AC                            Hud_ChkRings:
0001E0AC 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001E0B0 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001E0B2 6A00                       		bpl.s	loc_1C6E4
0001E0B4 6100 0000                  		bsr.w	Hud_LoadZero
0001E0B8                            
0001E0B8                            loc_1C6E4:
0001E0B8 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001E0BC 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001E0C2 7200                       		moveq	#0,d1
0001E0C4 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001E0C8 6100 0000                  		bsr.w	Hud_Rings
0001E0CC                            
0001E0CC                            Hud_ChkTime:
0001E0CC 4A38 FE1E                          tst.b    ($FFFFFE1E).w    ; does the time    need updating?
0001E0D0 6700 0000                          beq.w    Hud_ChkLives    ; if not, branch    ;Mercury HUD Centiseconds (bsr.s => bsr.w) ported by -paranoimia-
0001E0D4 4A78 F63A                          tst.w    ($FFFFF63A).w    ; is the game paused?
0001E0D8 6600 0000                          bne.w    Hud_ChkLives    ; if yes, branch    ;Mercury HUD Centiseconds (bsr.s => bsr.w) ported by -paranoimia-
0001E0DC 43F8 FE22                          lea    ($FFFFFE22).w,a1
0001E0E0 0C99 0009 3B63                     cmpi.l    #$93B63,(a1)+    ; is the time 9'59"99?
0001E0E6 6700 0000                          beq.w    TimeOver    ; if yes, branch    ;Mercury HUD Centiseconds (bsr.s => bsr.w) ported by -paranoimia-
0001E0EA 1238 FEBF                          move.b    ($FFFFFEBF).w,d1
0001E0EE 5201                               addi.b    #1,d1
0001E0F0 0C01 0003                          cmpi.b    #3,d1
0001E0F4 6600                               bne.s    Cent_Skip
0001E0F6 123C 0000                          move.b    #0,d1
0001E0FA                            
0001E0FA                            Cent_Skip:
0001E0FA 11C1 FEBF                          move.b    d1,($FFFFFEBF).w
0001E0FE 0C01 0002                          cmpi.b    #2,d1
0001E102 6700                               beq.s    Cent_Skip2
0001E104 5201                               addi.b    #1,d1
0001E106                            
0001E106                            Cent_Skip2:
0001E106 D321                               add.b    d1,-(a1)
0001E108 0C11 0064                          cmpi.b    #100,(a1)
0001E10C 6500                               bcs.s    Hud_DoCent
0001E10E 12BC 0000                          move.b    #0,(a1)
0001E112 5221                               addq.b    #1,-(a1)
0001E114 0C11 003C                          cmpi.b    #60,(a1)
0001E118 6500                               bcs.s    loc_1C734
0001E11A 12BC 0000                          move.b    #0,(a1)
0001E11E 5221                               addq.b    #1,-(a1)
0001E120 0C11 0009                          cmpi.b    #9,(a1)
0001E124 6500                               bcs.s    loc_1C734
0001E126 12BC 0009                          move.b    #9,(a1)
0001E12A                            
0001E12A                            loc_1C734:
0001E12A 203C 5E40 0003                     move.l    #$5E400003,d0
0001E130 7200                               moveq    #0,d1
0001E132 1238 FE23                          move.b    ($FFFFFE23).w,d1 ; load    minutes
0001E136 6100 0000                          bsr.w    Hud_Mins
0001E13A 203C 5EC0 0003                     move.l    #$5EC00003,d0
0001E140 7200                               moveq    #0,d1
0001E142 1238 FE24                          move.b    ($FFFFFE24).w,d1 ; load    seconds
0001E146 6100 0000                          bsr.w    Hud_Secs
0001E14A                            
0001E14A                            Hud_DoCent:
0001E14A 203C 5780 0003                     move.l    #$57800003,d0    ;Mercury Macros ported by -paranoimia-
0001E150 7200                               moveq    #0,d1
0001E152 1238 FE25                          move.b    ($FFFFFE25).w,d1 ; load    centiseconds
0001E156 6100 0000                          bsr.w    Hud_Secs
0001E15A                            
0001E15A                            Hud_ChkLives:
0001E15A 4A38 FE1C                          tst.b    ($FFFFFE1C).w    ; does the lives counter need updating?
0001E15E 6700                               beq.s    Hud_ChkBonus    ; if not, branch
0001E160 4238 FE1C                          clr.b    ($FFFFFE1C).w
0001E164 6100 0000                          bsr.w    Hud_Lives
0001E168                            
0001E168                            Hud_ChkBonus:
0001E168 4A38 F7D6                          tst.b    ($FFFFF7D6).w    ; do time/ring bonus counters need updating?
0001E16C 6700                               beq.s    Hud_End        ; if not, branch
0001E16E 4238 F7D6                          clr.b    ($FFFFF7D6).w
0001E172 23FC 6E00 0002 00C0 0004           move.l    #$6E000002,($C00004).l
0001E17C 7200                               moveq    #0,d1
0001E17E 3238 F7D2                          move.w    ($FFFFF7D2).w,d1 ; load    time bonus
0001E182 6100 0000                          bsr.w    Hud_TimeRingBonus
0001E186 7200                               moveq    #0,d1
0001E188 3238 F7D4                          move.w    ($FFFFF7D4).w,d1 ; load    ring bonus
0001E18C 6100 0000                          bsr.w    Hud_TimeRingBonus
0001E190                            
0001E190                            Hud_End:
0001E190 4E75                               rts
0001E192                            ; ===========================================================================
0001E192                            
0001E192                            TimeOver:				; XREF: Hud_ChkTime
0001E192 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001E196 41F8 D000                  		lea	($FFFFD000).w,a0
0001E19A 2448                       		movea.l	a0,a2
0001E19C 6100 E8B6                  		bsr.w	KillSonic
0001E1A0 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001E1A6 4E75                       		rts
0001E1A8                            ; ===========================================================================
0001E1A8                            
0001E1A8                            HudDebug:				; XREF: HudUpdate
0001E1A8 6100 0000                  		bsr.w	HudDb_XY
0001E1AC 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001E1B0 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001E1B2 6A00                       		bpl.s	HudDb_Rings
0001E1B4 6100 0000                  		bsr.w	Hud_LoadZero
0001E1B8                            
0001E1B8                            HudDb_Rings:
0001E1B8 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001E1BC 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001E1C2 7200                       		moveq	#0,d1
0001E1C4 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001E1C8 6100 0000                  		bsr.w	Hud_Rings
0001E1CC                            
0001E1CC                            HudDb_ObjCount:
0001E1CC 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001E1D2 7200                       		moveq	#0,d1
0001E1D4 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001E1D8 6100 0000                  		bsr.w	Hud_Secs
0001E1DC 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001E1E0 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001E1E2 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001E1E6 6100 0000                  		bsr.w	Hud_Lives
0001E1EA                            
0001E1EA                            HudDb_ChkBonus:
0001E1EA 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001E1EE 6700                       		beq.s	HudDb_End	; if not, branch
0001E1F0 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001E1F4 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001E1FE 7200                       		moveq	#0,d1
0001E200 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001E204 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001E208 7200                       		moveq	#0,d1
0001E20A 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001E20E 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001E212                            
0001E212                            HudDb_End:
0001E212 4E75                       		rts
0001E214                            ; End of function HudUpdate
0001E214                            
0001E214                            ; ---------------------------------------------------------------------------
0001E214                            ; Subroutine to	load "0" on the	HUD
0001E214                            ; ---------------------------------------------------------------------------
0001E214                            
0001E214                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E214                            
0001E214                            
0001E214                            Hud_LoadZero:				; XREF: HudUpdate
0001E214 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001E21E 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001E222 343C 0002                  		move.w	#2,d2
0001E226 6000                       		bra.s	loc_1C83E
0001E228                            ; End of function Hud_LoadZero
0001E228                            
0001E228                            ; ---------------------------------------------------------------------------
0001E228                            ; Subroutine to    load " on the    HUD        ported by -paranoimia-
0001E228                            ; ---------------------------------------------------------------------------
0001E228                            
0001E228                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0001E228                            
0001E228                            
0001E228                            Hud_LoadMarks:                ; XREF: HUD_Update
0001E228 23FC 5740 0003 00D0 0004           move.l    #$57400003,($D00004).l  ;locVRAM    $D740
0001E232 45FA 0000                          lea    Hud_TilesMarks(pc),a2
0001E236 343C 0002                          move.w    #2,d2
0001E23A 6000                               bra.s    loc_1C83E
0001E23C                            ; End of function Hud_LoadMarks
0001E23C                            
0001E23C                            ; ---------------------------------------------------------------------------
0001E23C                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001E23C                            ; ---------------------------------------------------------------------------
0001E23C                            
0001E23C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E23C                            
0001E23C                            
0001E23C                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001E23C 4DF9 00C0 0000             		lea	($C00000).l,a6
0001E242 6100 0000                  		bsr.w	Hud_Lives
0001E246 61E0                       		bsr.s    Hud_LoadMarks
0001E248 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001E252 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001E256 343C 000E                  		move.w	#$E,d2
0001E25A                            
0001E25A                            loc_1C83E:				; XREF: Hud_LoadZero
0001E25A 43FA 0000                  		lea	Art_Hud(pc),a1
0001E25E                            
0001E25E                            loc_1C842:
0001E25E 323C 000F                  		move.w	#$F,d1
0001E262 101A                       		move.b	(a2)+,d0
0001E264 6B00                       		bmi.s	loc_1C85E
0001E266 4880                       		ext.w	d0
0001E268 EB48                       		lsl.w	#5,d0
0001E26A 47F1 0000                  		lea	(a1,d0.w),a3
0001E26E                            
0001E26E                            loc_1C852:
0001E26E 2C9B                       		move.l	(a3)+,(a6)
0001E270 51C9 FFFC                  		dbf	d1,loc_1C852
0001E274                            
0001E274                            loc_1C858:
0001E274 51CA FFE8                  		dbf	d2,loc_1C842
0001E278                            
0001E278 4E75                       		rts
0001E27A                            ; ===========================================================================
0001E27A                            
0001E27A                            loc_1C85E:
0001E27A 2CBC 0000 0000             		move.l	#0,(a6)
0001E280 51C9 FFF8                  		dbf	d1,loc_1C85E
0001E284                            
0001E284 60EE                       		bra.s	loc_1C858
0001E286                            ; End of function Hud_Base
0001E286                            
0001E286                            ; ===========================================================================
0001E286 1A00 0000                  Hud_TilesMarks:    dc.b $1A, 0, 0, 0
0001E28A 16FF FFFF FFFF FF00 0018+  Hud_TilesBase:    dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,    0, 0, $18, 0, 0
0001E296 FFFF 0000                  Hud_TilesZero:    dc.b $FF, $FF, 0, 0
0001E29A                            ; ---------------------------------------------------------------------------
0001E29A                            ; Subroutine to	load debug mode	numbers	patterns
0001E29A                            ; ---------------------------------------------------------------------------
0001E29A                            
0001E29A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E29A                            
0001E29A                            
0001E29A                            HudDb_XY:				; XREF: HudDebug
0001E29A 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001E2A4 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001E2A8 4841                       		swap	d1
0001E2AA 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001E2AE 6100                       		bsr.s	HudDb_XY2
0001E2B0 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001E2B4 4841                       		swap	d1
0001E2B6 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001E2BA                            ; End of function HudDb_XY
0001E2BA                            
0001E2BA                            
0001E2BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E2BA                            
0001E2BA                            
0001E2BA                            HudDb_XY2:
0001E2BA 7C07                       		moveq	#7,d6
0001E2BC 43F9 0000 058C             		lea	(Art_Text).l,a1
0001E2C2                            
0001E2C2                            HudDb_XYLoop:
0001E2C2 E959                       		rol.w	#4,d1
0001E2C4 3401                       		move.w	d1,d2
0001E2C6 0242 000F                  		andi.w	#$F,d2
0001E2CA 0C42 000A                  		cmpi.w	#$A,d2
0001E2CE 6500                       		bcs.s	loc_1C8B2
0001E2D0 5E42                       		addq.w	#7,d2
0001E2D2                            
0001E2D2                            loc_1C8B2:
0001E2D2 EB4A                       		lsl.w	#5,d2
0001E2D4 47F1 2000                  		lea	(a1,d2.w),a3
0001E2D8 2C9B                       		move.l	(a3)+,(a6)
0001E2DA 2C9B                       		move.l	(a3)+,(a6)
0001E2DC 2C9B                       		move.l	(a3)+,(a6)
0001E2DE 2C9B                       		move.l	(a3)+,(a6)
0001E2E0 2C9B                       		move.l	(a3)+,(a6)
0001E2E2 2C9B                       		move.l	(a3)+,(a6)
0001E2E4 2C9B                       		move.l	(a3)+,(a6)
0001E2E6 2C9B                       		move.l	(a3)+,(a6)
0001E2E8 4841                       		swap	d1
0001E2EA 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001E2EE                            
0001E2EE 4E75                       		rts	
0001E2F0                            ; End of function HudDb_XY2
0001E2F0                            
0001E2F0                            ; ---------------------------------------------------------------------------
0001E2F0                            ; Subroutine to	load rings numbers patterns
0001E2F0                            ; ---------------------------------------------------------------------------
0001E2F0                            
0001E2F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E2F0                            
0001E2F0                            
0001E2F0                            Hud_Rings:				; XREF: HudUpdate
0001E2F0 45F9 0000 0000             		lea	(Hud_100).l,a2
0001E2F6 7C02                       		moveq	#2,d6
0001E2F8 6000                       		bra.s	Hud_LoadArt
0001E2FA                            ; End of function Hud_Rings
0001E2FA                            
0001E2FA                            ; ---------------------------------------------------------------------------
0001E2FA                            ; Subroutine to	load score numbers patterns
0001E2FA                            ; ---------------------------------------------------------------------------
0001E2FA                            
0001E2FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E2FA                            
0001E2FA                            
0001E2FA                            Hud_Score:				; XREF: HudUpdate
0001E2FA 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001E300 7C05                       		moveq	#5,d6
0001E302                            
0001E302                            Hud_LoadArt:
0001E302 7800                       		moveq	#0,d4
0001E304 43FA 0000                  		lea	Art_Hud(pc),a1
0001E308                            
0001E308                            Hud_ScoreLoop:
0001E308 7400                       		moveq	#0,d2
0001E30A 261A                       		move.l	(a2)+,d3
0001E30C                            
0001E30C                            loc_1C8EC:
0001E30C 9283                       		sub.l	d3,d1
0001E30E 6500                       		bcs.s	loc_1C8F4
0001E310 5242                       		addq.w	#1,d2
0001E312 60F8                       		bra.s	loc_1C8EC
0001E314                            ; ===========================================================================
0001E314                            
0001E314                            loc_1C8F4:
0001E314 D283                       		add.l	d3,d1
0001E316 4A42                       		tst.w	d2
0001E318 6700                       		beq.s	loc_1C8FE
0001E31A 383C 0001                  		move.w	#1,d4
0001E31E                            
0001E31E                            loc_1C8FE:
0001E31E 4A44                       		tst.w	d4
0001E320 6700                       		beq.s	loc_1C92C
0001E322 ED4A                       		lsl.w	#6,d2
0001E324 2D40 0004                  		move.l	d0,4(a6)
0001E328 47F1 2000                  		lea	(a1,d2.w),a3
0001E32C 2C9B                       		move.l	(a3)+,(a6)
0001E32E 2C9B                       		move.l	(a3)+,(a6)
0001E330 2C9B                       		move.l	(a3)+,(a6)
0001E332 2C9B                       		move.l	(a3)+,(a6)
0001E334 2C9B                       		move.l	(a3)+,(a6)
0001E336 2C9B                       		move.l	(a3)+,(a6)
0001E338 2C9B                       		move.l	(a3)+,(a6)
0001E33A 2C9B                       		move.l	(a3)+,(a6)
0001E33C 2C9B                       		move.l	(a3)+,(a6)
0001E33E 2C9B                       		move.l	(a3)+,(a6)
0001E340 2C9B                       		move.l	(a3)+,(a6)
0001E342 2C9B                       		move.l	(a3)+,(a6)
0001E344 2C9B                       		move.l	(a3)+,(a6)
0001E346 2C9B                       		move.l	(a3)+,(a6)
0001E348 2C9B                       		move.l	(a3)+,(a6)
0001E34A 2C9B                       		move.l	(a3)+,(a6)
0001E34C                            
0001E34C                            loc_1C92C:
0001E34C 0680 0040 0000             		addi.l	#$400000,d0
0001E352 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001E356                            
0001E356 4E75                       		rts
0001E358                            ; End of function Hud_Score
0001E358                            
0001E358                            ; ---------------------------------------------------------------------------
0001E358                            ; Subroutine to	load countdown numbers on the continue screen
0001E358                            ; ---------------------------------------------------------------------------
0001E358                            
0001E358                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E358                            
0001E358                            
0001E358                            ContScrCounter:				; XREF: ContinueScreen
0001E358 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001E362 4DF9 00C0 0000             		lea	($C00000).l,a6
0001E368 45F9 0000 0000             		lea	(Hud_10).l,a2
0001E36E 7C01                       		moveq	#1,d6
0001E370 7800                       		moveq	#0,d4
0001E372 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001E376                            
0001E376                            ContScr_Loop:
0001E376 7400                       		moveq	#0,d2
0001E378 261A                       		move.l	(a2)+,d3
0001E37A                            
0001E37A                            loc_1C95A:
0001E37A 9283                       		sub.l	d3,d1
0001E37C 6500                       		bcs.s	loc_1C962
0001E37E 5242                       		addq.w	#1,d2
0001E380 60F8                       		bra.s	loc_1C95A
0001E382                            ; ===========================================================================
0001E382                            
0001E382                            loc_1C962:
0001E382 D283                       		add.l	d3,d1
0001E384 ED4A                       		lsl.w	#6,d2
0001E386 47F1 2000                  		lea	(a1,d2.w),a3
0001E38A 2C9B                       		move.l	(a3)+,(a6)
0001E38C 2C9B                       		move.l	(a3)+,(a6)
0001E38E 2C9B                       		move.l	(a3)+,(a6)
0001E390 2C9B                       		move.l	(a3)+,(a6)
0001E392 2C9B                       		move.l	(a3)+,(a6)
0001E394 2C9B                       		move.l	(a3)+,(a6)
0001E396 2C9B                       		move.l	(a3)+,(a6)
0001E398 2C9B                       		move.l	(a3)+,(a6)
0001E39A 2C9B                       		move.l	(a3)+,(a6)
0001E39C 2C9B                       		move.l	(a3)+,(a6)
0001E39E 2C9B                       		move.l	(a3)+,(a6)
0001E3A0 2C9B                       		move.l	(a3)+,(a6)
0001E3A2 2C9B                       		move.l	(a3)+,(a6)
0001E3A4 2C9B                       		move.l	(a3)+,(a6)
0001E3A6 2C9B                       		move.l	(a3)+,(a6)
0001E3A8 2C9B                       		move.l	(a3)+,(a6)
0001E3AA 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001E3AE                            
0001E3AE 4E75                       		rts
0001E3B0                            ; End of function ContScrCounter
0001E3B0                            
0001E3B0                            ; ===========================================================================
0001E3B0                            ; ---------------------------------------------------------------------------
0001E3B0                            ; HUD counter sizes
0001E3B0                            ; ---------------------------------------------------------------------------
0001E3B0 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001E3B4 0000 2710                  Hud_10000:	dc.l 10000
0001E3B8 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001E3BC 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001E3C0 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001E3C4 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001E3C8                            
0001E3C8                            ; ---------------------------------------------------------------------------
0001E3C8                            ; Subroutine to	load time numbers patterns
0001E3C8                            ; ---------------------------------------------------------------------------
0001E3C8                            
0001E3C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E3C8                            
0001E3C8                            
0001E3C8                            Hud_Mins:				; XREF: Hud_ChkTime
0001E3C8 45F9 0001 E3C4             		lea	(Hud_1).l,a2
0001E3CE 7C00                       		moveq	#0,d6
0001E3D0 6000                       		bra.s	loc_1C9BA
0001E3D2                            ; End of function Hud_Mins
0001E3D2                            
0001E3D2                            
0001E3D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E3D2                            
0001E3D2                            
0001E3D2                            Hud_Secs:				; XREF: Hud_ChkTime
0001E3D2 45F9 0001 E3C0             		lea	(Hud_10).l,a2
0001E3D8 7C01                       		moveq	#1,d6
0001E3DA                            
0001E3DA                            loc_1C9BA:
0001E3DA 7800                       		moveq	#0,d4
0001E3DC 43FA 0000                  		lea	Art_Hud(pc),a1
0001E3E0                            
0001E3E0                            Hud_TimeLoop:
0001E3E0 7400                       		moveq	#0,d2
0001E3E2 261A                       		move.l	(a2)+,d3
0001E3E4                            
0001E3E4                            loc_1C9C4:
0001E3E4 9283                       		sub.l	d3,d1
0001E3E6 6500                       		bcs.s	loc_1C9CC
0001E3E8 5242                       		addq.w	#1,d2
0001E3EA 60F8                       		bra.s	loc_1C9C4
0001E3EC                            ; ===========================================================================
0001E3EC                            
0001E3EC                            loc_1C9CC:
0001E3EC D283                       		add.l	d3,d1
0001E3EE 4A42                       		tst.w	d2
0001E3F0 6700                       		beq.s	loc_1C9D6
0001E3F2 383C 0001                  		move.w	#1,d4
0001E3F6                            
0001E3F6                            loc_1C9D6:
0001E3F6 ED4A                       		lsl.w	#6,d2
0001E3F8 2D40 0004                  		move.l	d0,4(a6)
0001E3FC 47F1 2000                  		lea	(a1,d2.w),a3
0001E400 2C9B                       		move.l	(a3)+,(a6)
0001E402 2C9B                       		move.l	(a3)+,(a6)
0001E404 2C9B                       		move.l	(a3)+,(a6)
0001E406 2C9B                       		move.l	(a3)+,(a6)
0001E408 2C9B                       		move.l	(a3)+,(a6)
0001E40A 2C9B                       		move.l	(a3)+,(a6)
0001E40C 2C9B                       		move.l	(a3)+,(a6)
0001E40E 2C9B                       		move.l	(a3)+,(a6)
0001E410 2C9B                       		move.l	(a3)+,(a6)
0001E412 2C9B                       		move.l	(a3)+,(a6)
0001E414 2C9B                       		move.l	(a3)+,(a6)
0001E416 2C9B                       		move.l	(a3)+,(a6)
0001E418 2C9B                       		move.l	(a3)+,(a6)
0001E41A 2C9B                       		move.l	(a3)+,(a6)
0001E41C 2C9B                       		move.l	(a3)+,(a6)
0001E41E 2C9B                       		move.l	(a3)+,(a6)
0001E420 0680 0040 0000             		addi.l	#$400000,d0
0001E426 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001E42A                            
0001E42A 4E75                       		rts
0001E42C                            ; End of function Hud_Secs
0001E42C                            
0001E42C                            ; ---------------------------------------------------------------------------
0001E42C                            ; Subroutine to	load time/ring bonus numbers patterns
0001E42C                            ; ---------------------------------------------------------------------------
0001E42C                            
0001E42C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E42C                            
0001E42C                            
0001E42C                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001E42C 45F9 0001 E3B8             		lea	(Hud_1000).l,a2
0001E432 7C03                       		moveq	#3,d6
0001E434 7800                       		moveq	#0,d4
0001E436 43FA 0000                  		lea	Art_Hud(pc),a1
0001E43A                            
0001E43A                            Hud_BonusLoop:
0001E43A 7400                       		moveq	#0,d2
0001E43C 261A                       		move.l	(a2)+,d3
0001E43E                            
0001E43E                            loc_1CA1E:
0001E43E 9283                       		sub.l	d3,d1
0001E440 6500                       		bcs.s	loc_1CA26
0001E442 5242                       		addq.w	#1,d2
0001E444 60F8                       		bra.s	loc_1CA1E
0001E446                            ; ===========================================================================
0001E446                            
0001E446                            loc_1CA26:
0001E446 D283                       		add.l	d3,d1
0001E448 4A42                       		tst.w	d2
0001E44A 6700                       		beq.s	loc_1CA30
0001E44C 383C 0001                  		move.w	#1,d4
0001E450                            
0001E450                            loc_1CA30:
0001E450 4A44                       		tst.w	d4
0001E452 6700                       		beq.s	Hud_ClrBonus
0001E454 ED4A                       		lsl.w	#6,d2
0001E456 47F1 2000                  		lea	(a1,d2.w),a3
0001E45A 2C9B                       		move.l	(a3)+,(a6)
0001E45C 2C9B                       		move.l	(a3)+,(a6)
0001E45E 2C9B                       		move.l	(a3)+,(a6)
0001E460 2C9B                       		move.l	(a3)+,(a6)
0001E462 2C9B                       		move.l	(a3)+,(a6)
0001E464 2C9B                       		move.l	(a3)+,(a6)
0001E466 2C9B                       		move.l	(a3)+,(a6)
0001E468 2C9B                       		move.l	(a3)+,(a6)
0001E46A 2C9B                       		move.l	(a3)+,(a6)
0001E46C 2C9B                       		move.l	(a3)+,(a6)
0001E46E 2C9B                       		move.l	(a3)+,(a6)
0001E470 2C9B                       		move.l	(a3)+,(a6)
0001E472 2C9B                       		move.l	(a3)+,(a6)
0001E474 2C9B                       		move.l	(a3)+,(a6)
0001E476 2C9B                       		move.l	(a3)+,(a6)
0001E478 2C9B                       		move.l	(a3)+,(a6)
0001E47A                            
0001E47A                            loc_1CA5A:
0001E47A 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001E47E                            
0001E47E 4E75                       		rts
0001E480                            ; ===========================================================================
0001E480                            
0001E480                            Hud_ClrBonus:
0001E480 7A0F                       		moveq	#$F,d5
0001E482                            
0001E482                            Hud_ClrBonusLoop:
0001E482 2CBC 0000 0000             		move.l	#0,(a6)
0001E488 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001E48C                            
0001E48C 60EC                       		bra.s	loc_1CA5A
0001E48E                            ; End of function Hud_TimeRingBonus
0001E48E                            
0001E48E                            ; ---------------------------------------------------------------------------
0001E48E                            ; Subroutine to	load uncompressed lives	counter	patterns
0001E48E                            ; ---------------------------------------------------------------------------
0001E48E                            
0001E48E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E48E                            
0001E48E                            
0001E48E                            Hud_Lives:				; XREF: Hud_ChkLives
0001E48E 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001E494 7200                       		moveq	#0,d1
0001E496 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001E49A 45F9 0001 E3C0             		lea	(Hud_10).l,a2
0001E4A0 7C01                       		moveq	#1,d6
0001E4A2 7800                       		moveq	#0,d4
0001E4A4 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001E4A8                            
0001E4A8                            Hud_LivesLoop:
0001E4A8 2D40 0004                  		move.l	d0,4(a6)
0001E4AC 7400                       		moveq	#0,d2
0001E4AE 261A                       		move.l	(a2)+,d3
0001E4B0                            
0001E4B0                            loc_1CA90:
0001E4B0 9283                       		sub.l	d3,d1
0001E4B2 6500                       		bcs.s	loc_1CA98
0001E4B4 5242                       		addq.w	#1,d2
0001E4B6 60F8                       		bra.s	loc_1CA90
0001E4B8                            ; ===========================================================================
0001E4B8                            
0001E4B8                            loc_1CA98:
0001E4B8 D283                       		add.l	d3,d1
0001E4BA 4A42                       		tst.w	d2
0001E4BC 6700                       		beq.s	loc_1CAA2
0001E4BE 383C 0001                  		move.w	#1,d4
0001E4C2                            
0001E4C2                            loc_1CAA2:
0001E4C2 4A44                       		tst.w	d4
0001E4C4 6700                       		beq.s	Hud_ClrLives
0001E4C6                            
0001E4C6                            loc_1CAA6:
0001E4C6 EB4A                       		lsl.w	#5,d2
0001E4C8 47F1 2000                  		lea	(a1,d2.w),a3
0001E4CC 2C9B                       		move.l	(a3)+,(a6)
0001E4CE 2C9B                       		move.l	(a3)+,(a6)
0001E4D0 2C9B                       		move.l	(a3)+,(a6)
0001E4D2 2C9B                       		move.l	(a3)+,(a6)
0001E4D4 2C9B                       		move.l	(a3)+,(a6)
0001E4D6 2C9B                       		move.l	(a3)+,(a6)
0001E4D8 2C9B                       		move.l	(a3)+,(a6)
0001E4DA 2C9B                       		move.l	(a3)+,(a6)
0001E4DC                            
0001E4DC                            loc_1CABC:
0001E4DC 0680 0040 0000             		addi.l	#$400000,d0
0001E4E2 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001E4E6                            
0001E4E6 4E75                       		rts
0001E4E8                            ; ===========================================================================
0001E4E8                            
0001E4E8                            Hud_ClrLives:
0001E4E8 4A46                       		tst.w	d6
0001E4EA 67DA                       		beq.s	loc_1CAA6
0001E4EC 7A07                       		moveq	#7,d5
0001E4EE                            
0001E4EE                            Hud_ClrLivesLoop:
0001E4EE 2CBC 0000 0000             		move.l	#0,(a6)
0001E4F4 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001E4F8 60E2                       		bra.s	loc_1CABC
0001E4FA                            ; End of function Hud_Lives
0001E4FA                            
0001E4FA                            ; ===========================================================================
0001E4FA                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001E87A                            		even
0001E87A                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001E9BA                            		even
0001E9BA                            ; ===========================================================================
0001E9BA                            ; ---------------------------------------------------------------------------
0001E9BA                            ; When debug mode is currently in use
0001E9BA                            ; ---------------------------------------------------------------------------
0001E9BA                            
0001E9BA                            DebugMode:				; XREF: Obj01; Obj09
0001E9BA 7000                       		moveq	#0,d0
0001E9BC 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001E9C0 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001E9C4 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001E9C8                            ; ===========================================================================
0001E9C8 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001E9CA 0000                       		dc.w Debug_Skip-Debug_Index
0001E9CC                            ; ===========================================================================
0001E9CC                            
0001E9CC                            Debug_Main:				; XREF: Debug_Index
0001E9CC 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001E9D0 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001E9D6 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001E9DC 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001E9E2 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001E9E8 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001E9EE 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001E9F4 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001E9FA 117C 0000 001A             		move.b	#0,$1A(a0)
0001EA00 117C 0000 001C             		move.b	#0,$1C(a0)
0001EA06 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001EA0C 6600                       		bne.s	Debug_Zone	; if not, branch
0001EA0E 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001EA14 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001EA1A 7006                       		moveq	#6,d0		; use 6th debug	item list
0001EA1C 6000                       		bra.s	Debug_UseList
0001EA1E                            ; ===========================================================================
0001EA1E                            
0001EA1E                            Debug_Zone:
0001EA1E 7000                       		moveq	#0,d0
0001EA20 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001EA24                            
0001EA24                            Debug_UseList:
0001EA24 45F9 0000 0000             		lea	(DebugList).l,a2
0001EA2A D040                       		add.w	d0,d0
0001EA2C D4F2 0000                  		adda.w	(a2,d0.w),a2
0001EA30 3C1A                       		move.w	(a2)+,d6
0001EA32 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001EA36 6200                       		bhi.s	loc_1CF9E
0001EA38 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001EA3E                            
0001EA3E                            loc_1CF9E:
0001EA3E 6100 0000                  		bsr.w	Debug_ShowItem
0001EA42 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001EA48 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001EA4E                            
0001EA4E                            Debug_Skip:				; XREF: Debug_Index
0001EA4E 7006                       		moveq	#6,d0
0001EA50 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001EA56 6700                       		beq.s	loc_1CFBE
0001EA58 7000                       		moveq	#0,d0
0001EA5A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001EA5E                            
0001EA5E                            loc_1CFBE:
0001EA5E 45F9 0000 0000             		lea	(DebugList).l,a2
0001EA64 D040                       		add.w	d0,d0
0001EA66 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001EA6A 3C1A                       		move.w	(a2)+,d6
0001EA6C 6100 0000                  		bsr.w	Debug_Control
0001EA70 4EF9 0000 E106             		jmp	DisplaySprite
0001EA76                            
0001EA76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EA76                            
0001EA76                            
0001EA76                            Debug_Control:
0001EA76 7800                       		moveq	#0,d4
0001EA78 323C 0001                  		move.w	#1,d1
0001EA7C 1838 F605                  		move.b	($FFFFF605).w,d4
0001EA80 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001EA84 6600                       		bne.s	loc_1D018	; if yes, branch
0001EA86 1038 F604                  		move.b	($FFFFF604).w,d0
0001EA8A 0240 000F                  		andi.w	#$F,d0
0001EA8E 6600                       		bne.s	loc_1D000
0001EA90 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001EA96 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001EA9C 6000 0000                  		bra.w	Debug_BackItem
0001EAA0                            ; ===========================================================================
0001EAA0                            
0001EAA0                            loc_1D000:
0001EAA0 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001EAA4 6600                       		bne.s	loc_1D01C
0001EAA6 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001EAAC 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001EAB0 6600                       		bne.s	loc_1D018
0001EAB2 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001EAB8                            
0001EAB8                            loc_1D018:
0001EAB8 1838 F604                  		move.b	($FFFFF604).w,d4
0001EABC                            
0001EABC                            loc_1D01C:
0001EABC 7200                       		moveq	#0,d1
0001EABE 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001EAC2 5241                       		addq.w	#1,d1
0001EAC4 4841                       		swap	d1
0001EAC6 E881                       		asr.l	#4,d1
0001EAC8 2428 000C                  		move.l	$C(a0),d2
0001EACC 2628 0008                  		move.l	8(a0),d3
0001EAD0 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001EAD4 6700                       		beq.s	loc_1D03C	; if not, branch
0001EAD6 9481                       		sub.l	d1,d2
0001EAD8 6400                       		bcc.s	loc_1D03C
0001EADA 7400                       		moveq	#0,d2
0001EADC                            
0001EADC                            loc_1D03C:
0001EADC 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001EAE0 6700                       		beq.s	loc_1D052	; if not, branch
0001EAE2 D481                       		add.l	d1,d2
0001EAE4 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001EAEA 6500                       		bcs.s	loc_1D052
0001EAEC 243C 07FF 0000             		move.l	#$7FF0000,d2
0001EAF2                            
0001EAF2                            loc_1D052:
0001EAF2 0804 0002                  		btst	#2,d4
0001EAF6 6700                       		beq.s	loc_1D05E
0001EAF8 9681                       		sub.l	d1,d3
0001EAFA 6400                       		bcc.s	loc_1D05E
0001EAFC 7600                       		moveq	#0,d3
0001EAFE                            
0001EAFE                            loc_1D05E:
0001EAFE 0804 0003                  		btst	#3,d4
0001EB02 6700                       		beq.s	loc_1D066
0001EB04 D681                       		add.l	d1,d3
0001EB06                            
0001EB06                            loc_1D066:
0001EB06 2142 000C                  		move.l	d2,$C(a0)
0001EB0A 2143 0008                  		move.l	d3,8(a0)
0001EB0E                            
0001EB0E                            Debug_BackItem:
0001EB0E 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001EB14 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001EB16 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001EB1C 6700                       		beq.s	Debug_NextItem	; if not, branch
0001EB1E 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001EB22 6400                       		bcc.s	Debug_NoLoop
0001EB24 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001EB28 6000                       		bra.s	Debug_NoLoop
0001EB2A                            ; ===========================================================================
0001EB2A                            
0001EB2A                            Debug_NextItem:
0001EB2A 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001EB30 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001EB32 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001EB36 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001EB3A 6200                       		bhi.s	Debug_NoLoop
0001EB3C 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001EB42                            
0001EB42                            Debug_NoLoop:
0001EB42 6000 0000                  		bra.w	Debug_ShowItem
0001EB46                            ; ===========================================================================
0001EB46                            
0001EB46                            Debug_MakeItem:
0001EB46 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001EB4C 6700                       		beq.s	Debug_Exit	; if not, branch
0001EB4E 4EB9 0000 E59C             		jsr	SingleObjLoad
0001EB54 6600                       		bne.s	Debug_Exit
0001EB56 3368 0008 0008             		move.w	8(a0),8(a1)
0001EB5C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001EB62 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001EB66 1368 0001 0001             		move.b	1(a0),1(a1)
0001EB6C 1368 0001 0022             		move.b	1(a0),$22(a1)
0001EB72 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001EB78 7000                       		moveq	#0,d0
0001EB7A 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001EB7E E748                       		lsl.w	#3,d0
0001EB80 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001EB86 4E75                       		rts	
0001EB88                            ; ===========================================================================
0001EB88                            
0001EB88                            Debug_Exit:
0001EB88 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001EB8E 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001EB90 7000                       		moveq	#0,d0
0001EB92 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001EB96 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001EB9E 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001EBA4 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001EBA8 3140 000A                  		move.w	d0,$A(a0)
0001EBAC 3140 000E                  		move.w	d0,$E(a0)
0001EBB0 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001EBB6 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001EBBC 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001EBC2 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001EBC4 4278 F780                  		clr.w	($FFFFF780).w
0001EBC8 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001EBCE 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001EBD6 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001EBDC 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001EBE2 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001EBE8 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001EBEE                            
0001EBEE                            Debug_DoNothing:
0001EBEE 4E75                       		rts	
0001EBF0                            ; End of function Debug_Control
0001EBF0                            
0001EBF0                            
0001EBF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EBF0                            
0001EBF0                            
0001EBF0                            Debug_ShowItem:				; XREF: Debug_Main
0001EBF0 7000                       		moveq	#0,d0
0001EBF2 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001EBF6 E748                       		lsl.w	#3,d0
0001EBF8 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001EBFE 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001EC04 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001EC0A 4E75                       		rts	
0001EC0C                            ; End of function Debug_ShowItem
0001EC0C                            
0001EC0C                            ; ===========================================================================
0001EC0C                            ; ---------------------------------------------------------------------------
0001EC0C                            ; Debug	list pointers
0001EC0C                            ; ---------------------------------------------------------------------------
0001EC0C                            DebugList:
0001EC0C                            	include "_inc\Debug list pointers.asm"
0001EC0C                            ; ---------------------------------------------------------------------------
0001EC0C                            ; Debug	list pointers
0001EC0C                            ; ---------------------------------------------------------------------------
0001EC0C 0000                       	dc.w Debug_GHZ-DebugList
0001EC0E 0000                       	dc.w Debug_LZ-DebugList
0001EC10 0000                       	dc.w Debug_MZ-DebugList
0001EC12 0000                       	dc.w Debug_SLZ-DebugList
0001EC14 0000                       	dc.w Debug_SYZ-DebugList
0001EC16 0000                       	dc.w Debug_SBZ-DebugList
0001EC18 0000                       	dc.w Debug_Ending-DebugList
0001EC18 0000                       	dc.w Debug_Ending-DebugList
0001EC1A                            
0001EC1A                            ; ---------------------------------------------------------------------------
0001EC1A                            ; Debug	list - Green Hill
0001EC1A                            ; ---------------------------------------------------------------------------
0001EC1A                            Debug_GHZ:
0001EC1A                            	include "_inc\Debug list - GHZ.asm"
0001EC1A                            ; ---------------------------------------------------------------------------
0001EC1A                            ; Debug	list - Green Hill
0001EC1A                            ; ---------------------------------------------------------------------------
0001EC1A 0010                       	dc.w $10			; number of items in list
0001EC1C 2500 AA5A                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001EC20 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001EC24 2600 B08A                  	dc.l Map_obj26+$26000000
0001EC28 0000 0680                  	dc.b 0,	0, 6, $80
0001EC2C 1F00 A1E2                  	dc.l Map_obj1F+$1F000000
0001EC30 0000 0400                  	dc.b 0,	0, 4, 0
0001EC34 2200 A4C2                  	dc.l Map_obj22+$22000000
0001EC38 0000 0444                  	dc.b 0,	0, 4, $44
0001EC3C 2B00 B6D0                  	dc.l Map_obj2B+$2B000000
0001EC40 0000 047B                  	dc.b 0,	0, 4, $7B
0001EC44 3600 DAE0                  	dc.l Map_obj36+$36000000
0001EC48 0000 051B                  	dc.b 0,	0, 5, $1B
0001EC4C 1800 8BE0                  	dc.l Map_obj18+$18000000
0001EC50 0000 4000                  	dc.b 0,	0, $40,	0
0001EC54 3B00 DC06                  	dc.l Map_obj3B+$3B000000
0001EC58 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001EC5C 4001 02BA                  	dc.l Map_obj40+$40000000
0001EC60 0000 04F0                  	dc.b 0,	0, 4, $F0
0001EC64 4100 E82E                  	dc.l Map_obj41+$41000000
0001EC68 0000 0523                  	dc.b 0,	0, 5, $23
0001EC6C 4200 EA54                  	dc.l Map_obj42+$42000000
0001EC70 0000 249B                  	dc.b 0,	0, $24,	$9B
0001EC74 4400 ED62                  	dc.l Map_obj44+$44000000
0001EC78 0000 434C                  	dc.b 0,	0, $43,	$4C
0001EC7C 1900 8C4E                  	dc.l Map_obj48+$19000000
0001EC80 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001EC84 7901 8AC2                  	dc.l Map_obj79+$79000000
0001EC88 0100 07A0                  	dc.b 1,	0, 7, $A0
0001EC8C 4B00 AA9A                  	dc.l Map_obj4B+$4B000000
0001EC90 0000 2400                  	dc.b 0,	0, $24,	0
0001EC94 7D01 8C12                  	dc.l Map_obj7D+$7D000000
0001EC98 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001EC9C                            	even
0001EC9C                            	even
0001EC9C                            
0001EC9C                            ; ---------------------------------------------------------------------------
0001EC9C                            ; Debug	list - Labyrinth
0001EC9C                            ; ---------------------------------------------------------------------------
0001EC9C                            Debug_LZ:
0001EC9C                            	include "_inc\Debug list - LZ.asm"
0001EC9C                            ; ---------------------------------------------------------------------------
0001EC9C                            ; Debug	list - Labyrinth
0001EC9C                            ; ---------------------------------------------------------------------------
0001EC9C 0019                       	dc.w $19
0001EC9E 2500 AA5A                  	dc.l Map_obj25+$25000000
0001ECA2 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001ECA6 2600 B08A                  	dc.l Map_obj26+$26000000
0001ECAA 0000 0680                  	dc.b 0,	0, 6, $80
0001ECAE 4100 E82E                  	dc.l Map_obj41+$41000000
0001ECB2 0000 0523                  	dc.b 0,	0, 5, $23
0001ECB6 2C00 B776                  	dc.l Map_obj2C+$2C000000
0001ECBA 0800 2486                  	dc.b 8,	0, $24,	$86
0001ECBE 2D00 B962                  	dc.l Map_obj2D+$2D000000
0001ECC2 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001ECC6 1601 2AAE                  	dc.l Map_obj16+$16000000
0001ECCA 0000 03CC                  	dc.b 0,	0, 3, $CC
0001ECCE 1601 2AAE                  	dc.l Map_obj16+$16000000
0001ECD2 0203 03CC                  	dc.b 2,	3, 3, $CC
0001ECD6 3300 CDE0                  	dc.l Map_obj33+$33000000
0001ECDA 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001ECDE 3200 C9A0                  	dc.l Map_obj32+$32000000
0001ECE2 0000 0513                  	dc.b 0,	0, 5, $13
0001ECE6 3600 DAE0                  	dc.l Map_obj36+$36000000
0001ECEA 0000 051B                  	dc.b 0,	0, 5, $1B
0001ECEE 5201 0BD0                  	dc.l Map_obj52a+$52000000
0001ECF2 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001ECF6 6101 2CD6                  	dc.l Map_obj61+$61000000
0001ECFA 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001ECFE 6101 2CD6                  	dc.l Map_obj61+$61000000
0001ED02 1301 43E6                  	dc.b $13, 1, $43, $E6
0001ED06 6101 2CD6                  	dc.l Map_obj61+$61000000
0001ED0A 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001ED0E 6201 2E2A                  	dc.l Map_obj62+$62000000
0001ED12 0000 443E                  	dc.b 0,	0, $44,	$3E
0001ED16 6101 2CD6                  	dc.l Map_obj61+$61000000
0001ED1A 2702 43E6                  	dc.b $27, 2, $43, $E6
0001ED1E 6101 2CD6                  	dc.l Map_obj61+$61000000
0001ED22 3003 43E6                  	dc.b $30, 3, $43, $E6
0001ED26 6301 318C                  	dc.l Map_obj63+$63000000
0001ED2A 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001ED2E 6001 29F8                  	dc.l Map_obj60+$60000000
0001ED32 0000 0467                  	dc.b 0,	0, 4, $67
0001ED36 6401 34D2                  	dc.l Map_obj64+$64000000
0001ED3A 8413 8348                  	dc.b $84, $13, $83, $48
0001ED3E 6501 365A                  	dc.l Map_obj65+$65000000
0001ED42 0202 C259                  	dc.b 2,	2, $C2,	$59
0001ED46 6501 365A                  	dc.l Map_obj65+$65000000
0001ED4A 0909 C259                  	dc.b 9,	9, $C2,	$59
0001ED4E 0B01 1E48                  	dc.l Map_obj0B+$B000000
0001ED52 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001ED56 0C01 1F18                  	dc.l Map_obj0C+$C000000
0001ED5A 0200 4328                  	dc.b 2,	0, $43,	$28
0001ED5E 7901 8AC2                  	dc.l Map_obj79+$79000000
0001ED62 0100 07A0                  	dc.b 1,	0, 7, $A0
0001ED66                            	even
0001ED66                            	even
0001ED66                            
0001ED66                            ; ---------------------------------------------------------------------------
0001ED66                            ; Debug	list - Marble
0001ED66                            ; ---------------------------------------------------------------------------
0001ED66                            Debug_MZ:
0001ED66                            	include "_inc\Debug list - MZ.asm"
0001ED66                            ; ---------------------------------------------------------------------------
0001ED66                            ; Debug	list - Marble
0001ED66                            ; ---------------------------------------------------------------------------
0001ED66 0012                       	dc.w $12
0001ED68 2500 AA5A                  	dc.l Map_obj25+$25000000
0001ED6C 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001ED70 2600 B08A                  	dc.l Map_obj26+$26000000
0001ED74 0000 0680                  	dc.b 0,	0, 6, $80
0001ED78 2200 A4C2                  	dc.l Map_obj22+$22000000
0001ED7C 0000 0444                  	dc.b 0,	0, 4, $44
0001ED80 3600 DAE0                  	dc.l Map_obj36+$36000000
0001ED84 0000 051B                  	dc.b 0,	0, 5, $1B
0001ED88 4100 E82E                  	dc.l Map_obj41+$41000000
0001ED8C 0000 0523                  	dc.b 0,	0, 5, $23
0001ED90 1300 BE70                  	dc.l Map_obj14+$13000000
0001ED94 0000 0345                  	dc.b 0,	0, 3, $45
0001ED98 4600 F414                  	dc.l Map_obj46+$46000000
0001ED9C 0000 4000                  	dc.b 0,	0, $40,	0
0001EDA0 4C00 FD66                  	dc.l Map_obj4C+$4C000000
0001EDA4 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001EDA8 4E01 004A                  	dc.l Map_obj4E+$4E000000
0001EDAC 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001EDB0 3300 CDE0                  	dc.l Map_obj33+$33000000
0001EDB4 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001EDB8 5001 0448                  	dc.l Map_obj50+$50000000
0001EDBC 0000 247B                  	dc.b 0,	0, $24,	$7B
0001EDC0 5101 0904                  	dc.l Map_obj51+$51000000
0001EDC4 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001EDC8 5201 0B7A                  	dc.l Map_obj52+$52000000
0001EDCC 0000 02B8                  	dc.b 0,	0, 2, $B8
0001EDD0 5300 91E6                  	dc.l Map_obj53+$53000000
0001EDD4 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001EDD8 5400 FD2C                  	dc.l Map_obj54+$54000000
0001EDDC 0000 8680                  	dc.b 0,	0, $86,	$80
0001EDE0 5501 0D6E                  	dc.l Map_obj55+$55000000
0001EDE4 0000 04B8                  	dc.b 0,	0, 4, $B8
0001EDE8 7801 873A                  	dc.l Map_obj78+$78000000
0001EDEC 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001EDF0 7901 8AC2                  	dc.l Map_obj79+$79000000
0001EDF4 0100 07A0                  	dc.b 1,	0, 7, $A0
0001EDF8                            	even
0001EDF8                            	even
0001EDF8                            
0001EDF8                            ; ---------------------------------------------------------------------------
0001EDF8                            ; Debug	list - Star Light
0001EDF8                            ; ---------------------------------------------------------------------------
0001EDF8                            Debug_SLZ:
0001EDF8                            	include "_inc\Debug list - SLZ.asm"
0001EDF8                            ; ---------------------------------------------------------------------------
0001EDF8                            ; Debug	list - Star Light
0001EDF8                            ; ---------------------------------------------------------------------------
0001EDF8 000F                       	dc.w $F
0001EDFA 2500 AA5A                  	dc.l Map_obj25+$25000000
0001EDFE 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001EE02 2600 B08A                  	dc.l Map_obj26+$26000000
0001EE06 0000 0680                  	dc.b 0,	0, 6, $80
0001EE0A 5901 1870                  	dc.l Map_obj59+$59000000
0001EE0E 0000 4000                  	dc.b 0,	0, $40,	0
0001EE12 5300 91E6                  	dc.l Map_obj53+$53000000
0001EE16 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001EE1A 1800 8C3E                  	dc.l Map_obj18b+$18000000
0001EE1E 0000 4000                  	dc.b 0,	0, $40,	0
0001EE22 5A01 19AA                  	dc.l Map_obj5A+$5A000000
0001EE26 0000 4000                  	dc.b 0,	0, $40,	0
0001EE2A 5B01 1B62                  	dc.l Map_obj5B+$5B000000
0001EE2E 0000 4000                  	dc.b 0,	0, $40,	0
0001EE32 5D01 2132                  	dc.l Map_obj5D+$5D000000
0001EE36 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001EE3A 5E01 24C4                  	dc.l Map_obj5E+$5E000000
0001EE3E 0000 0374                  	dc.b 0,	0, 3, $74
0001EE42 4100 E82E                  	dc.l Map_obj41+$41000000
0001EE46 0000 0523                  	dc.b 0,	0, 5, $23
0001EE4A 1300 BE70                  	dc.l Map_obj14+$13000000
0001EE4E 0000 0480                  	dc.b 0,	0, 4, $80
0001EE52 1C00 92F6                  	dc.l Map_obj1C+$1C000000
0001EE56 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001EE5A 5F01 2742                  	dc.l Map_obj5F+$5F000000
0001EE5E 0000 0400                  	dc.b 0,	0, 4, 0
0001EE62 6001 29F8                  	dc.l Map_obj60+$60000000
0001EE66 0000 2429                  	dc.b 0,	0, $24,	$29
0001EE6A 7901 8AC2                  	dc.l Map_obj79+$79000000
0001EE6E 0100 07A0                  	dc.b 1,	0, 7, $A0
0001EE72                            	even
0001EE72                            	even
0001EE72                            
0001EE72                            ; ---------------------------------------------------------------------------
0001EE72                            ; Debug	list - Spring Yard
0001EE72                            ; ---------------------------------------------------------------------------
0001EE72                            Debug_SYZ:
0001EE72                            	include "_inc\Debug list - SYZ.asm"
0001EE72                            ; ---------------------------------------------------------------------------
0001EE72                            ; Debug	list - Spring Yard
0001EE72                            ; ---------------------------------------------------------------------------
0001EE72 000F                       	dc.w $F
0001EE74 2500 AA5A                  	dc.l Map_obj25+$25000000
0001EE78 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001EE7C 2600 B08A                  	dc.l Map_obj26+$26000000
0001EE80 0000 0680                  	dc.b 0,	0, 6, $80
0001EE84 3600 DAE0                  	dc.l Map_obj36+$36000000
0001EE88 0000 051B                  	dc.b 0,	0, 5, $1B
0001EE8C 4100 E82E                  	dc.l Map_obj41+$41000000
0001EE90 0000 0523                  	dc.b 0,	0, 5, $23
0001EE94 4300 ECB4                  	dc.l Map_obj43+$43000000
0001EE98 0000 04B8                  	dc.b 0,	0, 4, $B8
0001EE9C 1200 F492                  	dc.l Map_obj12+$12000000
0001EEA0 0000 0000                  	dc.b 0,	0, 0, 0
0001EEA4 4700 F60E                  	dc.l Map_obj47+$47000000
0001EEA8 0000 0380                  	dc.b 0,	0, 3, $80
0001EEAC 1F00 A1E2                  	dc.l Map_obj1F+$1F000000
0001EEB0 0000 0400                  	dc.b 0,	0, 4, 0
0001EEB4 2200 A4C2                  	dc.l Map_obj22+$22000000
0001EEB8 0000 0444                  	dc.b 0,	0, 4, $44
0001EEBC 5001 0448                  	dc.l Map_obj50+$50000000
0001EEC0 0000 247B                  	dc.b 0,	0, $24,	$7B
0001EEC4 1800 8C2C                  	dc.l Map_obj18a+$18000000
0001EEC8 0000 4000                  	dc.b 0,	0, $40,	0
0001EECC 5601 1230                  	dc.l Map_obj56+$56000000
0001EED0 0000 4000                  	dc.b 0,	0, $40,	0
0001EED4 3200 C9A0                  	dc.l Map_obj32+$32000000
0001EED8 0000 0513                  	dc.b 0,	0, 5, $13
0001EEDC 7801 873A                  	dc.l Map_obj78+$78000000
0001EEE0 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001EEE4 7901 8AC2                  	dc.l Map_obj79+$79000000
0001EEE8 0100 07A0                  	dc.b 1,	0, 7, $A0
0001EEEC                            	even
0001EEEC                            	even
0001EEEC                            
0001EEEC                            ; ---------------------------------------------------------------------------
0001EEEC                            ; Debug	list - Scrap Brain
0001EEEC                            ; ---------------------------------------------------------------------------
0001EEEC                            Debug_SBZ:
0001EEEC                            	include "_inc\Debug list - SBZ.asm"
0001EEEC                            ; ---------------------------------------------------------------------------
0001EEEC                            ; Debug	list - Scrap Brain
0001EEEC                            ; ---------------------------------------------------------------------------
0001EEEC 001D                       	dc.w $1D
0001EEEE 2500 AA5A                  	dc.l Map_obj25+$25000000
0001EEF2 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001EEF6 2600 B08A                  	dc.l Map_obj26+$26000000
0001EEFA 0000 0680                  	dc.b 0,	0, 6, $80
0001EEFE 5F01 2742                  	dc.l Map_obj5F+$5F000000
0001EF02 0000 0400                  	dc.b 0,	0, 4, 0
0001EF06 6001 29F8                  	dc.l Map_obj60+$60000000
0001EF0A 0000 0429                  	dc.b 0,	0, 4, $29
0001EF0E 7801 873A                  	dc.l Map_obj78+$78000000
0001EF12 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001EF16 1501 15CC                  	dc.l Map_obj15b+$15000000
0001EF1A 0702 4391                  	dc.b 7,	2, $43,	$91
0001EF1E 6701 705A                  	dc.l Map_obj67+$67000000
0001EF22 E000 C344                  	dc.b $E0, 0, $C3, $44
0001EF26 5201 0B7A                  	dc.l Map_obj52+$52000000
0001EF2A 2802 22C0                  	dc.b $28, 2, $22, $C0
0001EF2E 3200 C9A0                  	dc.l Map_obj32+$32000000
0001EF32 0000 0513                  	dc.b 0,	0, 5, $13
0001EF36 6901 72B4                  	dc.l Map_obj69+$69000000
0001EF3A 0300 4492                  	dc.b 3,	0, $44,	$92
0001EF3E 6901 730E                  	dc.l Map_obj69a+$69000000
0001EF42 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001EF46 6A01 756C                  	dc.l Map_obj6A+$6A000000
0001EF4A 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001EF4E 5300 91E6                  	dc.l Map_obj53+$53000000
0001EF52 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001EF56 5201 0B7A                  	dc.l Map_obj52+$52000000
0001EF5A 3903 4460                  	dc.b $39, 3, $44, $60
0001EF5E 6B01 793C                  	dc.l Map_obj6B+$6B000000
0001EF62 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001EF66 2A00 948C                  	dc.l Map_obj2A+$2A000000
0001EF6A 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001EF6E 6B01 793C                  	dc.l Map_obj6B+$6B000000
0001EF72 1301 22C0                  	dc.b $13, 1, $22, $C0
0001EF76 6A01 756C                  	dc.l Map_obj6A+$6A000000
0001EF7A 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001EF7E 6B01 793C                  	dc.l Map_obj6B+$6B000000
0001EF82 2401 22C0                  	dc.b $24, 1, $22, $C0
0001EF86 6A01 756C                  	dc.l Map_obj6A+$6A000000
0001EF8A 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001EF8E 6B01 793C                  	dc.l Map_obj6B+$6B000000
0001EF92 3401 22C0                  	dc.b $34, 1, $22, $C0
0001EF96 6C01 7AFE                  	dc.l Map_obj6C+$6C000000
0001EF9A 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001EF9E 6D00 F104                  	dc.l Map_obj6D+$6D000000
0001EFA2 6400 83D9                  	dc.b $64, 0, $83, $D9
0001EFA6 6D00 F104                  	dc.l Map_obj6D+$6D000000
0001EFAA 640B 83D9                  	dc.b $64, $B, $83, $D9
0001EFAE 6E01 7BB4                  	dc.l Map_obj6E+$6E000000
0001EFB2 0400 047E                  	dc.b 4,	0, 4, $7E
0001EFB6 7001 7FFA                  	dc.l Map_obj70+$70000000
0001EFBA 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001EFBE 7101 1FD8                  	dc.l Map_obj71+$71000000
0001EFC2 1100 8680                  	dc.b $11, 0, $86, $80
0001EFC6 1E00 98FA                  	dc.l Map_obj1E+$1E000000
0001EFCA 0400 2302                  	dc.b 4,	0, $23,	2
0001EFCE 7901 8AC2                  	dc.l Map_obj79+$79000000
0001EFD2 0100 07A0                  	dc.b 1,	0, 7, $A0
0001EFD6                            	even
0001EFD6                            	even
0001EFD6                            
0001EFD6                            ; ---------------------------------------------------------------------------
0001EFD6                            ; Debug	list - ending sequence / special stage
0001EFD6                            ; ---------------------------------------------------------------------------
0001EFD6                            Debug_Ending:
0001EFD6                            	include "_inc\Debug list - Ending and SS.asm"
0001EFD6                            ; ---------------------------------------------------------------------------
0001EFD6                            ; Debug	list - ending sequence / special stage
0001EFD6                            ; ---------------------------------------------------------------------------
0001EFD6 000D                       	dc.w $D
0001EFD8 2500 AA5A                  	dc.l Map_obj25+$25000000
0001EFDC 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001EFE0 4700 F60E                  	dc.l Map_obj47+$47000000
0001EFE4 0000 0380                  	dc.b 0,	0, 3, $80
0001EFE8 2800 9F14                  	dc.l Map_obj28a+$28000000
0001EFEC 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001EFF0 2800 9F14                  	dc.l Map_obj28a+$28000000
0001EFF4 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001EFF8 2800 9F14                  	dc.l Map_obj28a+$28000000
0001EFFC 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001F000 2800 9EFC                  	dc.l Map_obj28+$28000000
0001F004 0D00 0553                  	dc.b $D, 0, 5, $53
0001F008 2800 9EFC                  	dc.l Map_obj28+$28000000
0001F00C 0E00 0553                  	dc.b $E, 0, 5, $53
0001F010 2800 9EFC                  	dc.l Map_obj28+$28000000
0001F014 0F00 0573                  	dc.b $F, 0, 5, $73
0001F018 2800 9EFC                  	dc.l Map_obj28+$28000000
0001F01C 1000 0573                  	dc.b $10, 0, 5,	$73
0001F020 2800 9F14                  	dc.l Map_obj28a+$28000000
0001F024 1100 0585                  	dc.b $11, 0, 5,	$85
0001F028 2800 9F2C                  	dc.l Map_obj28b+$28000000
0001F02C 1200 0593                  	dc.b $12, 0, 5,	$93
0001F030 2800 9F14                  	dc.l Map_obj28a+$28000000
0001F034 1300 0565                  	dc.b $13, 0, 5,	$65
0001F038 2800 9F2C                  	dc.l Map_obj28b+$28000000
0001F03C 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001F040                            	even
0001F040                            	even
0001F040                            
0001F040                            ; ---------------------------------------------------------------------------
0001F040                            ; Main level load blocks
0001F040                            ; ---------------------------------------------------------------------------
0001F040                            MainLoadBlocks:
0001F040                            	include "_inc\Main level load blocks.asm"
0001F040                            ; ---------------------------------------------------------------------------
0001F040                            ; Main level load blocks
0001F040                            ;
0001F040                            ; ===FORMAT===
0001F040                            ; level	patterns + (1st	PLC num	* 10^6)
0001F040                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001F040                            ; 256x256 mappings
0001F040                            ; blank, music (unused), pal index (unused), pal index
0001F040                            ; ---------------------------------------------------------------------------
0001F040 0000 0000                  	dc.l Nem_GHZ+$4000000
0001F044 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001F048 0000 0000                  	dc.l Blk256_GHZ
0001F04C 0081 0404                  	dc.b 0,	$81, 4,	4
0001F050 0000 0000                  	dc.l Nem_LZ+$6000000
0001F054 0000 0000                  	dc.l Blk16_LZ+$7000000
0001F058 0000 0000                  	dc.l Blk256_LZ
0001F05C 0082 0505                  	dc.b 0,	$82, 5,	5
0001F060 0000 0000                  	dc.l Nem_MZ+$8000000
0001F064 0000 0000                  	dc.l Blk16_MZ+$9000000
0001F068 0000 0000                  	dc.l Blk256_MZ
0001F06C 0083 0606                  	dc.b 0,	$83, 6,	6
0001F070 0000 0000                  	dc.l Nem_SLZ+$A000000
0001F074 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001F078 0000 0000                  	dc.l Blk256_SLZ
0001F07C 0084 0707                  	dc.b 0,	$84, 7,	7
0001F080 0000 0000                  	dc.l Nem_SYZ+$C000000
0001F084 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001F088 0000 0000                  	dc.l Blk256_SYZ
0001F08C 0085 0808                  	dc.b 0,	$85, 8,	8
0001F090 0000 0000                  	dc.l Nem_SBZ+$E000000
0001F094 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001F098 0000 0000                  	dc.l Blk256_SBZ
0001F09C 0086 0909                  	dc.b 0,	$86, 9,	9
0001F0A0 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001F0A4 0000 0000                  	dc.l Blk16_GHZ
0001F0A8 0000 0000                  	dc.l Blk256_GHZ
0001F0AC 0086 1313                  	dc.b 0,	$86, $13, $13
0001F0B0                            	even
0001F0B0                            	even
0001F0B0                            
0001F0B0                            ; ---------------------------------------------------------------------------
0001F0B0                            ; Pattern load cues
0001F0B0                            ; ---------------------------------------------------------------------------
0001F0B0                            ArtLoadCues:
0001F0B0                            	include "_inc\Pattern load cues.asm"
0001F0B0                            ; ---------------------------------------------------------------------------
0001F0B0                            ; Pattern load cues - index
0001F0B0                            ; ---------------------------------------------------------------------------
0001F0B0 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001F0B4 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001F0B8 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001F0BC 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001F0C0 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001F0C4 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001F0C8 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001F0CC 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001F0D0 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001F0D4 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001F0D8 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001F0DC 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001F0E0 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001F0E4 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001F0E8 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001F0EC 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001F0F0                            ; ---------------------------------------------------------------------------
0001F0F0                            ; Pattern load cues - standard block 1
0001F0F0                            ; ---------------------------------------------------------------------------
0001F0F0 0004                       PLC_Main:	dc.w 4
0001F0F2 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001F0F6 D800                       		dc.w $D800
0001F0F8 0000 0000                  		dc.l Nem_Hud		; HUD
0001F0FC D940                       		dc.w $D940
0001F0FE 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001F102 FA80                       		dc.w $FA80
0001F104 0000 0000                  		dc.l Nem_Ring		; rings
0001F108 F640                       		dc.w $F640
0001F10A 0000 0000                  		dc.l Nem_Points		; points from enemy
0001F10E F2E0                       		dc.w $F2E0
0001F110                            ; ---------------------------------------------------------------------------
0001F110                            ; Pattern load cues - standard block 2
0001F110                            ; ---------------------------------------------------------------------------
0001F110 0002                       PLC_Main2:	dc.w 2
0001F112 0000 0000                  		dc.l Nem_Monitors	; monitors
0001F116 D000                       		dc.w $D000
0001F118 0000 0000                  		dc.l Nem_Shield		; shield
0001F11C A820                       		dc.w $A820
0001F11E 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001F122 AB80                       		dc.w $AB80
0001F124                            ; ---------------------------------------------------------------------------
0001F124                            ; Pattern load cues - explosion
0001F124                            ; ---------------------------------------------------------------------------
0001F124 0000                       PLC_Explode:	dc.w 0
0001F126 0000 0000                  		dc.l Nem_Explode	; explosion
0001F12A B400                       		dc.w $B400
0001F12C                            ; ---------------------------------------------------------------------------
0001F12C                            ; Pattern load cues - game/time	over
0001F12C                            ; ---------------------------------------------------------------------------
0001F12C 0000                       PLC_GameOver:	dc.w 0
0001F12E 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001F132 ABC0                       		dc.w $ABC0
0001F134                            ; ---------------------------------------------------------------------------
0001F134                            ; Pattern load cues - Green Hill
0001F134                            ; ---------------------------------------------------------------------------
0001F134 000A                       PLC_GHZ:	dc.w $A
0001F136 0000 0000                  		dc.l Nem_GHZ	; GHZ main patterns
0001F13A 0000                       		dc.w 0
0001F13C 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001F140 6B00                       		dc.w $6B00
0001F142 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001F146 7A00                       		dc.w $7A00
0001F148 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001F14C 8000                       		dc.w $8000
0001F14E 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001F152 8880                       		dc.w $8880
0001F154 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001F158 8F60                       		dc.w $8F60
0001F15A 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001F15E 9360                       		dc.w $9360
0001F160 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001F164 9E00                       		dc.w $9E00
0001F166 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F16A A360                       		dc.w $A360
0001F16C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F170 A460                       		dc.w $A460
0001F172 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F176 A660                       		dc.w $A660
0001F178 0000 0000                  		dc.l ArtNem_DignlSprng	; diagonal spring
0001F17C A860                       		dc.W $A860
0001F17E 0005                       PLC_GHZ2:	dc.w 5
0001F180 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001F184 7000                       		dc.w $7000
0001F186 0000 0000                  		dc.l Nem_Bridge		; bridge
0001F18A 71C0                       		dc.w $71C0
0001F18C 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001F190 7300                       		dc.w $7300
0001F192 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001F196 7540                       		dc.w $7540
0001F198 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001F19C A1E0                       		dc.w $A1E0
0001F19E 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001F1A2 6980                       		dc.w $6980
0001F1A4                            ; ---------------------------------------------------------------------------
0001F1A4                            ; Pattern load cues - Labyrinth
0001F1A4                            ; ---------------------------------------------------------------------------
0001F1A4 000B                       PLC_LZ:		dc.w $B
0001F1A6 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001F1AA 0000                       		dc.w 0
0001F1AC 0000 0000                  		dc.l Nem_LzBlock1	; block
0001F1B0 3C00                       		dc.w $3C00
0001F1B2 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001F1B6 3E00                       		dc.w $3E00
0001F1B8 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001F1BC 4B20                       		dc.w $4B20
0001F1BE 0000 0000                  		dc.l Nem_Water		; water	surface
0001F1C2 6000                       		dc.w $6000
0001F1C4 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001F1C8 6200                       		dc.w $6200
0001F1CA 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001F1CE 6500                       		dc.w $6500
0001F1D0 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001F1D4 6900                       		dc.w $6900
0001F1D6 0000 0000                  		dc.l Nem_LzBlock3	; block
0001F1DA 7780                       		dc.w $7780
0001F1DC 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001F1E0 7880                       		dc.w $7880
0001F1E2 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001F1E6 7980                       		dc.w $7980
0001F1E8 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001F1EC 94C0                       		dc.w $94C0
0001F1EE 000C                       PLC_LZ2:	dc.w $C
0001F1F0 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001F1F4 7BC0                       		dc.w $7BC0
0001F1F6 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001F1FA 7CC0                       		dc.w $7CC0
0001F1FC 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001F200 7EC0                       		dc.w $7EC0
0001F202 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001F206 5D20                       		dc.w $5D20
0001F208 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001F20C 8800                       		dc.w $8800
0001F20E 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001F212 89E0                       		dc.w $89E0
0001F214 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001F218 8CE0                       		dc.w $8CE0
0001F21A 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001F21E 90C0                       		dc.w $90C0
0001F220 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001F224 A1E0                       		dc.w $A1E0
0001F226 0000 0000                  		dc.l Nem_Cork		; cork block
0001F22A A000                       		dc.w $A000
0001F22C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F230 A360                       		dc.w $A360
0001F232 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F236 A460                       		dc.w $A460
0001F238 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F23C A660                       		dc.w $A660
0001F23E 0000 0000                  		dc.l ArtNem_DignlSprng	; diagonal spring
0001F242 A860                       		dc.W $A860
0001F244                            ; ---------------------------------------------------------------------------
0001F244                            ; Pattern load cues - Marble
0001F244                            ; ---------------------------------------------------------------------------
0001F244 0009                       PLC_MZ:		dc.w 9
0001F246 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001F24A 0000                       		dc.w 0
0001F24C 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001F250 6000                       		dc.w $6000
0001F252 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001F256 68A0                       		dc.w $68A0
0001F258 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001F25C 7000                       		dc.w $7000
0001F25E 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001F262 71C0                       		dc.w $71C0
0001F264 0000 0000                  		dc.l Nem_Lava		; lava
0001F268 7500                       		dc.w $7500
0001F26A 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001F26E 8880                       		dc.w $8880
0001F270 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001F274 8F60                       		dc.w $8F60
0001F276 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001F27A 9700                       		dc.w $9700
0001F27C 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001F280 9FE0                       		dc.w $9FE0
0001F282 0004                       PLC_MZ2:	dc.w 4
0001F284 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001F288 A260                       		dc.w $A260
0001F28A 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F28E A360                       		dc.w $A360
0001F290 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F294 A460                       		dc.w $A460
0001F296 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F29A A660                       		dc.w $A660
0001F29C 0000 0000                  		dc.l ArtNem_DignlSprng	; diagonal spring
0001F2A0 A860                       		dc.W $A860
0001F2A2 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001F2A6 5700                       		dc.w $5700
0001F2A8                            ; ---------------------------------------------------------------------------
0001F2A8                            ; Pattern load cues - Star Light
0001F2A8                            ; ---------------------------------------------------------------------------
0001F2A8 0008                       PLC_SLZ:	dc.w 8
0001F2AA 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001F2AE 0000                       		dc.w 0
0001F2B0 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001F2B4 8000                       		dc.w $8000
0001F2B6 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001F2BA 8520                       		dc.w $8520
0001F2BC 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001F2C0 9000                       		dc.w $9000
0001F2C2 0000 0000                  		dc.l Nem_SlzBlock	; block
0001F2C6 9C00                       		dc.w $9C00
0001F2C8 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001F2CC A260                       		dc.w $A260
0001F2CE 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F2D2 A360                       		dc.w $A360
0001F2D4 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F2D8 A460                       		dc.w $A460
0001F2DA 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F2DE A660                       		dc.w $A660
0001F2E0 0000 0000                  		dc.l ArtNem_DignlSprng	; diagonal spring
0001F2E4 A860                       		dc.W $A860
0001F2E6 0005                       PLC_SLZ2:	dc.w 5
0001F2E8 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001F2EC 6E80                       		dc.w $6E80
0001F2EE 0000 0000                  		dc.l Nem_Fan		; fan
0001F2F2 7400                       		dc.w $7400
0001F2F4 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001F2F8 7980                       		dc.w $7980
0001F2FA 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001F2FE 7B80                       		dc.w $7B80
0001F300 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001F304 9B00                       		dc.w $9B00
0001F306 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001F30A 9E00                       		dc.w $9E00
0001F30C                            ; ---------------------------------------------------------------------------
0001F30C                            ; Pattern load cues - Spring Yard
0001F30C                            ; ---------------------------------------------------------------------------
0001F30C 0004                       PLC_SYZ:	dc.w 4
0001F30E 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001F312 0000                       		dc.w 0
0001F314 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001F318 8000                       		dc.w $8000
0001F31A 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001F31E 8880                       		dc.w $8880
0001F320 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001F324 8F60                       		dc.w $8F60
0001F326 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001F32A 9700                       		dc.w $9700
0001F32C 0007                       PLC_SYZ2:	dc.w 7
0001F32E 0000 0000                  		dc.l Nem_Bumper		; bumper
0001F332 7000                       		dc.w $7000
0001F334 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001F338 72C0                       		dc.w $72C0
0001F33A 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001F33E 7740                       		dc.w $7740
0001F340 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001F344 9FE0                       		dc.w $9FE0
0001F346 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001F34A A1E0                       		dc.w $A1E0
0001F34C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F350 A360                       		dc.w $A360
0001F352 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F356 A460                       		dc.w $A460
0001F358 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F35C A660                       		dc.w $A660
0001F35E 0000 0000                  		dc.l ArtNem_DignlSprng	; diagonal spring
0001F362 A860                       		dc.W $A860
0001F364                            ; ---------------------------------------------------------------------------
0001F364                            ; Pattern load cues - Scrap Brain
0001F364                            ; ---------------------------------------------------------------------------
0001F364 000B                       PLC_SBZ:	dc.w $B
0001F366 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001F36A 0000                       		dc.w 0
0001F36C 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001F370 5800                       		dc.w $5800
0001F372 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001F376 5D00                       		dc.w $5D00
0001F378 0000 0000                  		dc.l Nem_Girder		; girder
0001F37C 5E00                       		dc.w $5E00
0001F37E 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001F382 6040                       		dc.w $6040
0001F384 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001F388 6880                       		dc.w $6880
0001F38A 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001F38E 6900                       		dc.w $6900
0001F390 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001F394 7220                       		dc.w $7220
0001F396 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001F39A 76A0                       		dc.w $76A0
0001F39C 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001F3A0 7B20                       		dc.w $7B20
0001F3A2 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001F3A6 7EA0                       		dc.w $7EA0
0001F3A8 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001F3AC 9860                       		dc.w $9860
0001F3AE 000C                       PLC_SBZ2:	dc.w $C
0001F3B0 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001F3B4 5600                       		dc.w $5600
0001F3B6 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001F3BA 8000                       		dc.w $8000
0001F3BC 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001F3C0 8520                       		dc.w $8520
0001F3C2 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001F3C6 8C00                       		dc.w $8C00
0001F3C8 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001F3CC 8DE0                       		dc.w $8DE0
0001F3CE 0000 0000                  		dc.l Nem_Electric	; electric orb
0001F3D2 8FC0                       		dc.w $8FC0
0001F3D4 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001F3D8 9240                       		dc.w $9240
0001F3DA 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001F3DE 7F20                       		dc.w $7F20
0001F3E0 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001F3E4 9BE0                       		dc.w $9BE0
0001F3E6 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001F3EA A1E0                       		dc.w $A1E0
0001F3EC 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F3F0 A360                       		dc.w $A360
0001F3F2 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F3F6 A460                       		dc.w $A460
0001F3F8 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F3FC A660                       		dc.w $A660
0001F3FE 0000 0000                  		dc.l ArtNem_DignlSprng	; diagonal spring
0001F402 A860                       		dc.W $A860
0001F404                            ; ---------------------------------------------------------------------------
0001F404                            ; Pattern load cues - title card
0001F404                            ; ---------------------------------------------------------------------------
0001F404 0000                       PLC_TitleCard:	dc.w 0
0001F406 0000 0000                  		dc.l Nem_TitleCard
0001F40A B000                       		dc.w $B000
0001F40C                            ; ---------------------------------------------------------------------------
0001F40C                            ; Pattern load cues - act 3 boss
0001F40C                            ; ---------------------------------------------------------------------------
0001F40C 0005                       PLC_Boss:	dc.w 5
0001F40E 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001F412 8000                       		dc.w $8000
0001F414 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001F418 8D80                       		dc.w $8D80
0001F41A 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001F41E 93A0                       		dc.w $93A0
0001F420 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001F424 A300                       		dc.w $A300
0001F426 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001F42A A300                       		dc.w $A300
0001F42C 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001F430 A540                       		dc.w $A540
0001F432                            ; ---------------------------------------------------------------------------
0001F432                            ; Pattern load cues - act 1/2 signpost
0001F432                            ; ---------------------------------------------------------------------------
0001F432 0002                       PLC_Signpost:	dc.w 2
0001F434 0000 0000                  		dc.l Nem_SignPost	; signpost
0001F438 D000                       		dc.w $D000
0001F43A 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001F43E 96C0                       		dc.w $96C0
0001F440 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001F444 8C40                       		dc.w $8C40
0001F446                            ; ---------------------------------------------------------------------------
0001F446                            ; Pattern load cues - beta special stage warp effect
0001F446                            ; ---------------------------------------------------------------------------
0001F446 0000                       PLC_Warp:	dc.w 0
0001F448 0000 0000                  		dc.l Nem_Warp
0001F44C A820                       		dc.w $A820
0001F44E                            ; ---------------------------------------------------------------------------
0001F44E                            ; Pattern load cues - special stage
0001F44E                            ; ---------------------------------------------------------------------------
0001F44E 0010                       PLC_SpeStage:	dc.w $10
0001F450 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001F454 0000                       		dc.w 0
0001F456 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001F45A 0A20                       		dc.w $A20
0001F45C 0000 0000                  		dc.l Nem_SSWalls	; walls
0001F460 2840                       		dc.w $2840
0001F462 0000 0000                  		dc.l Nem_Bumper		; bumper
0001F466 4760                       		dc.w $4760
0001F468 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001F46C 4A20                       		dc.w $4A20
0001F46E 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001F472 4C60                       		dc.w $4C60
0001F474 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001F478 5E00                       		dc.w $5E00
0001F47A 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001F47E 6E00                       		dc.w $6E00
0001F480 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001F484 7E00                       		dc.w $7E00
0001F486 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001F48A 8E00                       		dc.w $8E00
0001F48C 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001F490 9E00                       		dc.w $9E00
0001F492 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001F496 AE00                       		dc.w $AE00
0001F498 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001F49C BE00                       		dc.w $BE00
0001F49E 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001F4A2 EE00                       		dc.w $EE00
0001F4A4 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001F4A8 F2E0                       		dc.w $F2E0
0001F4AA 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001F4AE F400                       		dc.w $F400
0001F4B0 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001F4B4 F520                       		dc.w $F520
0001F4B6 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001F4BA F2E0                       		dc.w $F2E0
0001F4BC 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001F4C0 F400                       		dc.w $F400
0001F4C2 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001F4C6 F520                       		dc.w $F520
0001F4C8                            ; ---------------------------------------------------------------------------
0001F4C8                            ; Pattern load cues - GHZ animals
0001F4C8                            ; ---------------------------------------------------------------------------
0001F4C8 0001                       PLC_GHZAnimals:	dc.w 1
0001F4CA 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001F4CE B000                       		dc.w $B000
0001F4D0 0000 0000                  		dc.l Nem_Flicky		; flicky
0001F4D4 B240                       		dc.w $B240
0001F4D6                            ; ---------------------------------------------------------------------------
0001F4D6                            ; Pattern load cues - LZ animals
0001F4D6                            ; ---------------------------------------------------------------------------
0001F4D6 0001                       PLC_LZAnimals:	dc.w 1
0001F4D8 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001F4DC B000                       		dc.w $B000
0001F4DE 0000 0000                  		dc.l Nem_Seal		; seal
0001F4E2 B240                       		dc.w $B240
0001F4E4                            ; ---------------------------------------------------------------------------
0001F4E4                            ; Pattern load cues - MZ animals
0001F4E4                            ; ---------------------------------------------------------------------------
0001F4E4 0001                       PLC_MZAnimals:	dc.w 1
0001F4E6 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001F4EA B000                       		dc.w $B000
0001F4EC 0000 0000                  		dc.l Nem_Seal		; seal
0001F4F0 B240                       		dc.w $B240
0001F4F2                            ; ---------------------------------------------------------------------------
0001F4F2                            ; Pattern load cues - SLZ animals
0001F4F2                            ; ---------------------------------------------------------------------------
0001F4F2 0001                       PLC_SLZAnimals:	dc.w 1
0001F4F4 0000 0000                  		dc.l Nem_Pig		; pig
0001F4F8 B000                       		dc.w $B000
0001F4FA 0000 0000                  		dc.l Nem_Flicky		; flicky
0001F4FE B240                       		dc.w $B240
0001F500                            ; ---------------------------------------------------------------------------
0001F500                            ; Pattern load cues - SYZ animals
0001F500                            ; ---------------------------------------------------------------------------
0001F500 0001                       PLC_SYZAnimals:	dc.w 1
0001F502 0000 0000                  		dc.l Nem_Pig		; pig
0001F506 B000                       		dc.w $B000
0001F508 0000 0000                  		dc.l Nem_Chicken	; chicken
0001F50C B240                       		dc.w $B240
0001F50E                            ; ---------------------------------------------------------------------------
0001F50E                            ; Pattern load cues - SBZ animals
0001F50E                            ; ---------------------------------------------------------------------------
0001F50E 0001                       PLC_SBZAnimals:	dc.w 1
0001F510 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001F514 B000                       		dc.w $B000
0001F516 0000 0000                  		dc.l Nem_Chicken	; chicken
0001F51A B240                       		dc.w $B240
0001F51C                            ; ---------------------------------------------------------------------------
0001F51C                            ; Pattern load cues - special stage results screen
0001F51C                            ; ---------------------------------------------------------------------------
0001F51C 0001                       PLC_SpeStResult:dc.w 1
0001F51E 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001F522 A820                       		dc.w $A820
0001F524 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001F528 AA20                       		dc.w $AA20
0001F52A                            ; ---------------------------------------------------------------------------
0001F52A                            ; Pattern load cues - ending sequence
0001F52A                            ; ---------------------------------------------------------------------------
0001F52A 000E                       PLC_Ending:	dc.w $E
0001F52C 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001F530 0000                       		dc.w 0
0001F532 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001F536 39A0                       		dc.w $39A0
0001F538 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001F53C 6B00                       		dc.w $6B00
0001F53E 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001F542 7400                       		dc.w $7400
0001F544 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001F548 78A0                       		dc.w $78A0
0001F54A 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001F54E 7C20                       		dc.w $7C20
0001F550 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001F554 A480                       		dc.w $A480
0001F556 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001F55A AA60                       		dc.w $AA60
0001F55C 0000 0000                  		dc.l Nem_Chicken	; chicken
0001F560 ACA0                       		dc.w $ACA0
0001F562 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001F566 AE60                       		dc.w $AE60
0001F568 0000 0000                  		dc.l Nem_Seal		; seal
0001F56C B0A0                       		dc.w $B0A0
0001F56E 0000 0000                  		dc.l Nem_Pig		; pig
0001F572 B260                       		dc.w $B260
0001F574 0000 0000                  		dc.l Nem_Flicky		; flicky
0001F578 B4A0                       		dc.w $B4A0
0001F57A 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001F57E B660                       		dc.w $B660
0001F580 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001F584 B8A0                       		dc.w $B8A0
0001F586                            ; ---------------------------------------------------------------------------
0001F586                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001F586                            ; ---------------------------------------------------------------------------
0001F586 0002                       PLC_TryAgain:	dc.w 2
0001F588 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001F58C 78A0                       		dc.w $78A0
0001F58E 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001F592 7C20                       		dc.w $7C20
0001F594 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001F598 B400                       		dc.w $B400
0001F59A                            ; ---------------------------------------------------------------------------
0001F59A                            ; Pattern load cues - Eggman on SBZ 2
0001F59A                            ; ---------------------------------------------------------------------------
0001F59A 0002                       PLC_EggmanSBZ2:	dc.w 2
0001F59C 0000 0000                  		dc.l Nem_SbzBlock	; block
0001F5A0 A300                       		dc.w $A300
0001F5A2 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001F5A6 8000                       		dc.w $8000
0001F5A8 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001F5AC 9400                       		dc.w $9400
0001F5AE                            ; ---------------------------------------------------------------------------
0001F5AE                            ; Pattern load cues - final boss
0001F5AE                            ; ---------------------------------------------------------------------------
0001F5AE 0004                       PLC_FZBoss:	dc.w 4
0001F5B0 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001F5B4 7400                       		dc.w $7400
0001F5B6 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001F5BA 6000                       		dc.w $6000
0001F5BC 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001F5C0 8000                       		dc.w $8000
0001F5C2 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001F5C6 8E00                       		dc.w $8E00
0001F5C8 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001F5CC A540                       		dc.w $A540
0001F5CE                            		even
0001F5CE                            		even
0001F5CE                            
0001F5CE                            		incbin	misc\padding.bin
0001F6BC                            		even
0001F6BC                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001FB1E                            		even
0001FB1E                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001FC16                            		even
0001FC16                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001FD2A                            		even
0001FD2A                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
00020D36                            		even
00020D36                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00022704                            		even
00022704                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00022738                            		even
00022738                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
000227F6                            		even
000227F6                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00022C9E                            		even
00022C9E                            Kos_Menu_art:   incbin  artkos/menuslctr.bin
00022DDA                            		 even
00022DDA                            Map_MenuS4: 	include  "_maps/menuslctr.asm"
00022DDA                            ; ================================================================================
00022DDA                            ; Sprite Mappings - generated by Flex 2 Sun Jan 09 2022 00:50:45 GMT-0600 (Central Standard Time)
00022DDA                            ; ================================================================================
00022DDA                            
00022DDA                            DATAQM9VZSSBLEK:
00022DDA 0000                       	dc.w DATAQM9VZSSBLEK_0-DATAQM9VZSSBLEK
00022DDC 01                         DATAQM9VZSSBLEK_0: dc.b $1
00022DDD F805 0014 F8               	dc.b $F8, $5, $0, $14, $F8
00022DE2                            	even
00022DE2                            	even
00022DE2                            ; ---------------------------------------------------------------------------
00022DE2                            ; Sprite mappings - Sonic
00022DE2                            ; ---------------------------------------------------------------------------
00022DE2                            Map_Sonic:
00022DE2                            	include "_maps\Sonic.asm"
00022DE2                            ; --------------------------------------------------------------------------------
00022DE2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00022DE2                            ; --------------------------------------------------------------------------------
00022DE2                            
00022DE2                            SME_N6hqJ:	
00022DE2 0000 0000                  		dc.w SME_N6hqJ_1AC-SME_N6hqJ, SME_N6hqJ_1AD-SME_N6hqJ	
00022DE6 0000 0000                  		dc.w SME_N6hqJ_1C2-SME_N6hqJ, SME_N6hqJ_1CD-SME_N6hqJ	
00022DEA 0000 0000                  		dc.w SME_N6hqJ_1E2-SME_N6hqJ, SME_N6hqJ_1F7-SME_N6hqJ	
00022DEE 0000 0000                  		dc.w SME_N6hqJ_211-SME_N6hqJ, SME_N6hqJ_221-SME_N6hqJ	
00022DF2 0000 0000                  		dc.w SME_N6hqJ_22C-SME_N6hqJ, SME_N6hqJ_237-SME_N6hqJ	
00022DF6 0000 0000                  		dc.w SME_N6hqJ_242-SME_N6hqJ, SME_N6hqJ_24D-SME_N6hqJ	
00022DFA 0000 0000                  		dc.w SME_N6hqJ_262-SME_N6hqJ, SME_N6hqJ_277-SME_N6hqJ	
00022DFE 0000 0000                  		dc.w SME_N6hqJ_287-SME_N6hqJ, SME_N6hqJ_29C-SME_N6hqJ	
00022E02 0000 0000                  		dc.w SME_N6hqJ_2AC-SME_N6hqJ, SME_N6hqJ_2B7-SME_N6hqJ	
00022E06 0000 0000                  		dc.w SME_N6hqJ_2C7-SME_N6hqJ, SME_N6hqJ_2DC-SME_N6hqJ	
00022E0A 0000 0000                  		dc.w SME_N6hqJ_2EC-SME_N6hqJ, SME_N6hqJ_2F7-SME_N6hqJ	
00022E0E 0000 0000                  		dc.w SME_N6hqJ_30C-SME_N6hqJ, SME_N6hqJ_326-SME_N6hqJ	
00022E12 0000 0000                  		dc.w SME_N6hqJ_33B-SME_N6hqJ, SME_N6hqJ_350-SME_N6hqJ	
00022E16 0000 0000                  		dc.w SME_N6hqJ_36A-SME_N6hqJ, SME_N6hqJ_384-SME_N6hqJ	
00022E1A 0000 0000                  		dc.w SME_N6hqJ_399-SME_N6hqJ, SME_N6hqJ_3B3-SME_N6hqJ	
00022E1E 0000 0000                  		dc.w SME_N6hqJ_3C3-SME_N6hqJ, SME_N6hqJ_3D3-SME_N6hqJ	
00022E22 0000 0000                  		dc.w SME_N6hqJ_3E3-SME_N6hqJ, SME_N6hqJ_3EE-SME_N6hqJ	
00022E26 0000 0000                  		dc.w SME_N6hqJ_3FE-SME_N6hqJ, SME_N6hqJ_40E-SME_N6hqJ	
00022E2A 0000 0000                  		dc.w SME_N6hqJ_41E-SME_N6hqJ, SME_N6hqJ_429-SME_N6hqJ	
00022E2E 0000 0000                  		dc.w SME_N6hqJ_43E-SME_N6hqJ, SME_N6hqJ_458-SME_N6hqJ	
00022E32 0000 0000                  		dc.w SME_N6hqJ_46D-SME_N6hqJ, SME_N6hqJ_482-SME_N6hqJ	
00022E36 0000 0000                  		dc.w SME_N6hqJ_497-SME_N6hqJ, SME_N6hqJ_4B1-SME_N6hqJ	
00022E3A 0000 0000                  		dc.w SME_N6hqJ_4C6-SME_N6hqJ, SME_N6hqJ_4DB-SME_N6hqJ	
00022E3E 0000 0000                  		dc.w SME_N6hqJ_4E6-SME_N6hqJ, SME_N6hqJ_4F1-SME_N6hqJ	
00022E42 0000 0000                  		dc.w SME_N6hqJ_4FC-SME_N6hqJ, SME_N6hqJ_507-SME_N6hqJ	
00022E46 0000 0000                  		dc.w SME_N6hqJ_51C-SME_N6hqJ, SME_N6hqJ_52C-SME_N6hqJ	
00022E4A 0000 0000                  		dc.w SME_N6hqJ_541-SME_N6hqJ, SME_N6hqJ_551-SME_N6hqJ	
00022E4E 0000 0000                  		dc.w SME_N6hqJ_55C-SME_N6hqJ, SME_N6hqJ_567-SME_N6hqJ	
00022E52 0000 0000                  		dc.w SME_N6hqJ_572-SME_N6hqJ, SME_N6hqJ_57D-SME_N6hqJ	
00022E56 0000 0000                  		dc.w SME_N6hqJ_58D-SME_N6hqJ, SME_N6hqJ_598-SME_N6hqJ	
00022E5A 0000 0000                  		dc.w SME_N6hqJ_5A8-SME_N6hqJ, SME_N6hqJ_5B3-SME_N6hqJ	
00022E5E 0000 0000                  		dc.w SME_N6hqJ_5B9-SME_N6hqJ, SME_N6hqJ_5BF-SME_N6hqJ	
00022E62 0000 0000                  		dc.w SME_N6hqJ_5C5-SME_N6hqJ, SME_N6hqJ_5CB-SME_N6hqJ	
00022E66 0000 0000                  		dc.w SME_N6hqJ_5D1-SME_N6hqJ, SME_N6hqJ_5D7-SME_N6hqJ	
00022E6A 0000 0000                  		dc.w SME_N6hqJ_5DD-SME_N6hqJ, SME_N6hqJ_5E3-SME_N6hqJ	
00022E6E 0000 0000                  		dc.w SME_N6hqJ_5E9-SME_N6hqJ, SME_N6hqJ_5EF-SME_N6hqJ	
00022E72 0000 0000                  		dc.w SME_N6hqJ_5F5-SME_N6hqJ, SME_N6hqJ_605-SME_N6hqJ	
00022E76 0000 0000                  		dc.w SME_N6hqJ_615-SME_N6hqJ, SME_N6hqJ_625-SME_N6hqJ	
00022E7A 0000 0000                  		dc.w SME_N6hqJ_635-SME_N6hqJ, SME_N6hqJ_63B-SME_N6hqJ	
00022E7E 0000 0000                  		dc.w SME_N6hqJ_641-SME_N6hqJ, SME_N6hqJ_64C-SME_N6hqJ	
00022E82 0000 0000                  		dc.w SME_N6hqJ_657-SME_N6hqJ, SME_N6hqJ_667-SME_N6hqJ	
00022E86 0000 0000                  		dc.w SME_N6hqJ_677-SME_N6hqJ, SME_N6hqJ_682-SME_N6hqJ	
00022E8A 0000 0000                  		dc.w SME_N6hqJ_68D-SME_N6hqJ, SME_N6hqJ_69D-SME_N6hqJ	
00022E8E 0000 0000                  		dc.w SME_N6hqJ_6B2-SME_N6hqJ, SME_N6hqJ_6C2-SME_N6hqJ	
00022E92 0000 0000                  		dc.w SME_N6hqJ_6D2-SME_N6hqJ, SME_N6hqJ_6E2-SME_N6hqJ	
00022E96 0000 0000                  		dc.w SME_N6hqJ_6F2-SME_N6hqJ, SME_N6hqJ_702-SME_N6hqJ	
00022E9A 0000 0000                  		dc.w SME_N6hqJ_70D-SME_N6hqJ, SME_N6hqJ_722-SME_N6hqJ	
00022E9E 0000 0000                  		dc.w SME_N6hqJ_737-SME_N6hqJ, SME_N6hqJ_747-SME_N6hqJ	
00022EA2 0000 0000                  		dc.w SME_N6hqJ_757-SME_N6hqJ, SME_N6hqJ_767-SME_N6hqJ	
00022EA6 0000 0000                  		dc.w SME_N6hqJ_772-SME_N6hqJ, SME_N6hqJ_778-SME_N6hqJ	
00022EAA 0000 0000                  		dc.w SME_N6hqJ_783-SME_N6hqJ, SME_N6hqJ_793-SME_N6hqJ	
00022EAE 0000 0000                  		dc.w SME_N6hqJ_7A3-SME_N6hqJ, SME_N6hqJ_7B3-SME_N6hqJ	
00022EB2 0000 0000                  		dc.w SME_N6hqJ_7BE-SME_N6hqJ, SME_N6hqJ_7C9-SME_N6hqJ	
00022EB6 0000 0000                  		dc.w SME_N6hqJ_7D9-SME_N6hqJ, SME_N6hqJ_7E4-SME_N6hqJ	
00022EBA 0000 0000                  		dc.w SME_N6hqJ_7F4-SME_N6hqJ, SME_N6hqJ_804-SME_N6hqJ	
00022EBE 0000 0000                  		dc.w SME_N6hqJ_80A-SME_N6hqJ, SME_N6hqJ_81A-SME_N6hqJ	
00022EC2 0000 0000                  		dc.w SME_N6hqJ_82A-SME_N6hqJ, SME_N6hqJ_844-SME_N6hqJ	
00022EC6 0000 0000                  		dc.w SME_N6hqJ_85E-SME_N6hqJ, SME_N6hqJ_869-SME_N6hqJ	
00022ECA 0000 0000                  		dc.w SME_N6hqJ_874-SME_N6hqJ, SME_N6hqJ_87F-SME_N6hqJ	
00022ECE 0000 0000                  		dc.w SME_N6hqJ_88F-SME_N6hqJ, SME_N6hqJ_8A4-SME_N6hqJ	
00022ED2 0000 0000                  		dc.w SME_N6hqJ_8B4-SME_N6hqJ, SME_N6hqJ_8BF-SME_N6hqJ	
00022ED6 0000 0000                  		dc.w SME_N6hqJ_8CF-SME_N6hqJ, SME_N6hqJ_8E4-SME_N6hqJ	
00022EDA 0000 0000                  		dc.w SME_N6hqJ_8F4-SME_N6hqJ, SME_N6hqJ_8FF-SME_N6hqJ	
00022EDE 0000 0000                  		dc.w SME_N6hqJ_914-SME_N6hqJ, SME_N6hqJ_92E-SME_N6hqJ	
00022EE2 0000 0000                  		dc.w SME_N6hqJ_948-SME_N6hqJ, SME_N6hqJ_962-SME_N6hqJ	
00022EE6 0000 0000                  		dc.w SME_N6hqJ_981-SME_N6hqJ, SME_N6hqJ_9A0-SME_N6hqJ	
00022EEA 0000 0000                  		dc.w SME_N6hqJ_9BA-SME_N6hqJ, SME_N6hqJ_9D4-SME_N6hqJ	
00022EEE 0000 0000                  		dc.w SME_N6hqJ_9E4-SME_N6hqJ, SME_N6hqJ_9F4-SME_N6hqJ	
00022EF2 0000 0000                  		dc.w SME_N6hqJ_A04-SME_N6hqJ, SME_N6hqJ_A0F-SME_N6hqJ	
00022EF6 0000 0000                  		dc.w SME_N6hqJ_A1F-SME_N6hqJ, SME_N6hqJ_A2F-SME_N6hqJ	
00022EFA 0000 0000                  		dc.w SME_N6hqJ_A3F-SME_N6hqJ, SME_N6hqJ_A4A-SME_N6hqJ	
00022EFE 0000 0000                  		dc.w SME_N6hqJ_A5F-SME_N6hqJ, SME_N6hqJ_A79-SME_N6hqJ	
00022F02 0000 0000                  		dc.w SME_N6hqJ_A8E-SME_N6hqJ, SME_N6hqJ_AA3-SME_N6hqJ	
00022F06 0000 0000                  		dc.w SME_N6hqJ_AB8-SME_N6hqJ, SME_N6hqJ_AD2-SME_N6hqJ	
00022F0A 0000 0000                  		dc.w SME_N6hqJ_AE7-SME_N6hqJ, SME_N6hqJ_AFC-SME_N6hqJ	
00022F0E 0000 0000                  		dc.w SME_N6hqJ_B0C-SME_N6hqJ, SME_N6hqJ_B21-SME_N6hqJ	
00022F12 0000 0000                  		dc.w SME_N6hqJ_B31-SME_N6hqJ, SME_N6hqJ_B3C-SME_N6hqJ	
00022F16 0000 0000                  		dc.w SME_N6hqJ_B4C-SME_N6hqJ, SME_N6hqJ_B61-SME_N6hqJ	
00022F1A 0000 0000                  		dc.w SME_N6hqJ_B71-SME_N6hqJ, SME_N6hqJ_B7C-SME_N6hqJ	
00022F1E 0000 0000                  		dc.w SME_N6hqJ_B96-SME_N6hqJ, SME_N6hqJ_BB5-SME_N6hqJ	
00022F22 0000 0000                  		dc.w SME_N6hqJ_BCF-SME_N6hqJ, SME_N6hqJ_BE9-SME_N6hqJ	
00022F26 0000 0000                  		dc.w SME_N6hqJ_C08-SME_N6hqJ, SME_N6hqJ_C27-SME_N6hqJ	
00022F2A 0000 0000                  		dc.w SME_N6hqJ_C41-SME_N6hqJ, SME_N6hqJ_C60-SME_N6hqJ	
00022F2E 0000 0000                  		dc.w SME_N6hqJ_C70-SME_N6hqJ, SME_N6hqJ_C80-SME_N6hqJ	
00022F32 0000 0000                  		dc.w SME_N6hqJ_C90-SME_N6hqJ, SME_N6hqJ_C9B-SME_N6hqJ	
00022F36 0000 0000                  		dc.w SME_N6hqJ_CAB-SME_N6hqJ, SME_N6hqJ_CBB-SME_N6hqJ	
00022F3A 0000 0000                  		dc.w SME_N6hqJ_CCB-SME_N6hqJ, SME_N6hqJ_CD6-SME_N6hqJ	
00022F3E 0000 0000                  		dc.w SME_N6hqJ_CEB-SME_N6hqJ, SME_N6hqJ_D05-SME_N6hqJ	
00022F42 0000 0000                  		dc.w SME_N6hqJ_D1F-SME_N6hqJ, SME_N6hqJ_D34-SME_N6hqJ	
00022F46 0000 0000                  		dc.w SME_N6hqJ_D49-SME_N6hqJ, SME_N6hqJ_D63-SME_N6hqJ	
00022F4A 0000 0000                  		dc.w SME_N6hqJ_D7D-SME_N6hqJ, SME_N6hqJ_D97-SME_N6hqJ	
00022F4E 0000 0000                  		dc.w SME_N6hqJ_DAC-SME_N6hqJ, SME_N6hqJ_DC1-SME_N6hqJ	
00022F52 0000 0000                  		dc.w SME_N6hqJ_DD6-SME_N6hqJ, SME_N6hqJ_DF0-SME_N6hqJ	
00022F56 0000 0000                  		dc.w SME_N6hqJ_E05-SME_N6hqJ, SME_N6hqJ_E1A-SME_N6hqJ	
00022F5A 0000 0000                  		dc.w SME_N6hqJ_E2F-SME_N6hqJ, SME_N6hqJ_E49-SME_N6hqJ	
00022F5E 0000 0000                  		dc.w SME_N6hqJ_E5E-SME_N6hqJ, SME_N6hqJ_E73-SME_N6hqJ	
00022F62 0000 0000                  		dc.w SME_N6hqJ_E88-SME_N6hqJ, SME_N6hqJ_E9D-SME_N6hqJ	
00022F66 0000 0000                  		dc.w SME_N6hqJ_EA8-SME_N6hqJ, SME_N6hqJ_EB8-SME_N6hqJ	
00022F6A 0000 0000                  		dc.w SME_N6hqJ_EC8-SME_N6hqJ, SME_N6hqJ_ED8-SME_N6hqJ	
00022F6E 0000 0000                  		dc.w SME_N6hqJ_EE8-SME_N6hqJ, SME_N6hqJ_EF8-SME_N6hqJ	
00022F72 0000 0000                  		dc.w SME_N6hqJ_F08-SME_N6hqJ, SME_N6hqJ_F18-SME_N6hqJ	
00022F76 0000 0000                  		dc.w SME_N6hqJ_F28-SME_N6hqJ, SME_N6hqJ_F38-SME_N6hqJ	
00022F7A 0000 0000                  		dc.w SME_N6hqJ_F52-SME_N6hqJ, SME_N6hqJ_F67-SME_N6hqJ	
00022F7E 0000 0000                  		dc.w SME_N6hqJ_F7C-SME_N6hqJ, SME_N6hqJ_F91-SME_N6hqJ	
00022F82 0000 0000                  		dc.w SME_N6hqJ_FA1-SME_N6hqJ, SME_N6hqJ_FB1-SME_N6hqJ	
00022F86 0000 0000                  		dc.w SME_N6hqJ_FC1-SME_N6hqJ, SME_N6hqJ_FD6-SME_N6hqJ	
00022F8A 0000 0000                  		dc.w SME_N6hqJ_FEB-SME_N6hqJ, SME_N6hqJ_1000-SME_N6hqJ	
00022F8E 00                         SME_N6hqJ_1AC:	dc.b 0	
00022F8F 04                         SME_N6hqJ_1AD:	dc.b 4	
00022F90 E405 0000 F8               		dc.b $E4, 5, 0, 0, $F8	
00022F95 EC03 0004 F0               		dc.b $EC, 3, 0, 4, $F0	
00022F9A F409 0008 F8               		dc.b $F4, 9, 0, 8, $F8	
00022F9F 0409 000E F8               		dc.b 4, 9, 0, $E, $F8	
00022FA4 02                         SME_N6hqJ_1C2:	dc.b 2	
00022FA5 EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00022FAA 0C09 000C F8               		dc.b $C, 9, 0, $C, $F8	
00022FAF 04                         SME_N6hqJ_1CD:	dc.b 4	
00022FB0 EC03 0000 F0               		dc.b $EC, 3, 0, 0, $F0	
00022FB5 EC05 0004 F8               		dc.b $EC, 5, 0, 4, $F8	
00022FBA FC05 0008 F8               		dc.b $FC, 5, 0, 8, $F8	
00022FBF 0C09 000C F8               		dc.b $C, 9, 0, $C, $F8	
00022FC4 04                         SME_N6hqJ_1E2:	dc.b 4	
00022FC5 EC03 0000 F0               		dc.b $EC, 3, 0, 0, $F0	
00022FCA EC05 0004 F8               		dc.b $EC, 5, 0, 4, $F8	
00022FCF FC05 0008 F8               		dc.b $FC, 5, 0, 8, $F8	
00022FD4 0C09 000C F8               		dc.b $C, 9, 0, $C, $F8	
00022FD9 05                         SME_N6hqJ_1F7:	dc.b 5	
00022FDA EC03 0000 F0               		dc.b $EC, 3, 0, 0, $F0	
00022FDF EC05 0004 F8               		dc.b $EC, 5, 0, 4, $F8	
00022FE4 FC05 0008 F8               		dc.b $FC, 5, 0, 8, $F8	
00022FE9 0C01 000C F8               		dc.b $C, 1, 0, $C, $F8	
00022FEE 0C05 000E 00               		dc.b $C, 5, 0, $E, 0	
00022FF3 03                         SME_N6hqJ_211:	dc.b 3	
00022FF4 EC03 0000 F0               		dc.b $EC, 3, 0, 0, $F0	
00022FF9 EC07 0004 F8               		dc.b $EC, 7, 0, 4, $F8	
00022FFE 0C09 000C F8               		dc.b $C, 9, 0, $C, $F8	
00023003 02                         SME_N6hqJ_221:	dc.b 2	
00023004 F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00023009 0401 000C 08               		dc.b 4, 1, 0, $C, 8	
0002300E 02                         SME_N6hqJ_22C:	dc.b 2	
0002300F F40B 0000 E8               		dc.b $F4, $B, 0, 0, $E8	
00023014 0405 000C 00               		dc.b 4, 5, 0, $C, 0	
00023019 02                         SME_N6hqJ_237:	dc.b 2	
0002301A F40B 0000 E8               		dc.b $F4, $B, 0, 0, $E8	
0002301F 0405 000C 00               		dc.b 4, 5, 0, $C, 0	
00023024 02                         SME_N6hqJ_242:	dc.b 2	
00023025 E40B 0000 F0               		dc.b $E4, $B, 0, 0, $F0	
0002302A 040D 000C F0               		dc.b 4, $D, 0, $C, $F0	
0002302F 04                         SME_N6hqJ_24D:	dc.b 4	
00023030 E405 0000 F8               		dc.b $E4, 5, 0, 0, $F8	
00023035 EC03 0004 F0               		dc.b $EC, 3, 0, 4, $F0	
0002303A F409 0008 F8               		dc.b $F4, 9, 0, 8, $F8	
0002303F 0409 000E F8               		dc.b 4, 9, 0, $E, $F8	
00023044 04                         SME_N6hqJ_262:	dc.b 4	
00023045 EC03 0000 F0               		dc.b $EC, 3, 0, 0, $F0	
0002304A E405 0004 F8               		dc.b $E4, 5, 0, 4, $F8	
0002304F F405 0008 F8               		dc.b $F4, 5, 0, 8, $F8	
00023054 0409 000C F8               		dc.b 4, 9, 0, $C, $F8	
00023059 03                         SME_N6hqJ_277:	dc.b 3	
0002305A EB0D 0000 EE               		dc.b $EB, $D, 0, 0, $EE	
0002305F 0301 0008 EC               		dc.b 3, 1, 0, 8, $EC	
00023064 FB0F 000A F4               		dc.b $FB, $F, 0, $A, $F4	
00023069 04                         SME_N6hqJ_287:	dc.b 4	
0002306A EC0D 0000 EE               		dc.b $EC, $D, 0, 0, $EE	
0002306F 0401 0008 EC               		dc.b 4, 1, 0, 8, $EC	
00023074 FC0B 000A F4               		dc.b $FC, $B, 0, $A, $F4	
00023079 0401 0016 0C               		dc.b 4, 1, 0, $16, $C	
0002307E 03                         SME_N6hqJ_29C:	dc.b 3	
0002307F ED0D 0000 ED               		dc.b $ED, $D, 0, 0, $ED	
00023084 FD09 0008 F4               		dc.b $FD, 9, 0, 8, $F4	
00023089 0D05 000E F7               		dc.b $D, 5, 0, $E, $F7	
0002308E 02                         SME_N6hqJ_2AC:	dc.b 2	
0002308F EC09 0000 F4               		dc.b $EC, 9, 0, 0, $F4	
00023094 FC0F 0006 EE               		dc.b $FC, $F, 0, 6, $EE	
00023099 03                         SME_N6hqJ_2B7:	dc.b 3	
0002309A EB09 0000 F4               		dc.b $EB, 9, 0, 0, $F4	
0002309F FB0F 0006 EE               		dc.b $FB, $F, 0, 6, $EE	
000230A4 FB01 0016 0E               		dc.b $FB, 1, 0, $16, $E	
000230A9 04                         SME_N6hqJ_2C7:	dc.b 4	
000230AA EC09 0000 F4               		dc.b $EC, 9, 0, 0, $F4	
000230AF 0401 0006 EC               		dc.b 4, 1, 0, 6, $EC	
000230B4 FC0B 0008 F4               		dc.b $FC, $B, 0, 8, $F4	
000230B9 0401 0014 0C               		dc.b 4, 1, 0, $14, $C	
000230BE 03                         SME_N6hqJ_2DC:	dc.b 3	
000230BF ED0D 0000 ED               		dc.b $ED, $D, 0, 0, $ED	
000230C4 FD09 0008 F4               		dc.b $FD, 9, 0, 8, $F4	
000230C9 0D05 000E F7               		dc.b $D, 5, 0, $E, $F7	
000230CE 02                         SME_N6hqJ_2EC:	dc.b 2	
000230CF EC0D 0000 EE               		dc.b $EC, $D, 0, 0, $EE	
000230D4 FC0B 0008 F3               		dc.b $FC, $B, 0, 8, $F3	
000230D9 04                         SME_N6hqJ_2F7:	dc.b 4	
000230DA EB09 0000 EA               		dc.b $EB, 9, 0, 0, $EA	
000230DF FB09 0006 EA               		dc.b $FB, 9, 0, 6, $EA	
000230E4 F305 000C 02               		dc.b $F3, 5, 0, $C, 2	
000230E9 0B01 0010 FA               		dc.b $B, 1, 0, $10, $FA	
000230EE 05                         SME_N6hqJ_30C:	dc.b 5	
000230EF EC09 0000 EB               		dc.b $EC, 9, 0, 0, $EB	
000230F4 EC01 0006 03               		dc.b $EC, 1, 0, 6, 3	
000230F9 FC0D 0008 EB               		dc.b $FC, $D, 0, 8, $EB	
000230FE FC05 0010 0B               		dc.b $FC, 5, 0, $10, $B	
00023103 0C01 0014 FB               		dc.b $C, 1, 0, $14, $FB	
00023108 04                         SME_N6hqJ_326:	dc.b 4	
00023109 ED07 0000 EC               		dc.b $ED, 7, 0, 0, $EC	
0002310E ED03 0008 FC               		dc.b $ED, 3, 0, 8, $FC	
00023113 F501 000C 04               		dc.b $F5, 1, 0, $C, 4	
00023118 0505 000E 04               		dc.b 5, 5, 0, $E, 4	
0002311D 04                         SME_N6hqJ_33B:	dc.b 4	
0002311E EC09 0000 EB               		dc.b $EC, 9, 0, 0, $EB	
00023123 EC01 0006 03               		dc.b $EC, 1, 0, 6, 3	
00023128 FC05 0008 EB               		dc.b $FC, 5, 0, 8, $EB	
0002312D FC0B 000C FB               		dc.b $FC, $B, 0, $C, $FB	
00023132 05                         SME_N6hqJ_350:	dc.b 5	
00023133 EB09 0000 EA               		dc.b $EB, 9, 0, 0, $EA	
00023138 EB01 0006 02               		dc.b $EB, 1, 0, 6, 2	
0002313D FB0D 0008 EA               		dc.b $FB, $D, 0, 8, $EA	
00023142 F301 0010 0A               		dc.b $F3, 1, 0, $10, $A	
00023147 0B05 0012 F2               		dc.b $B, 5, 0, $12, $F2	
0002314C 05                         SME_N6hqJ_36A:	dc.b 5	
0002314D EC09 0000 EB               		dc.b $EC, 9, 0, 0, $EB	
00023152 EC01 0006 03               		dc.b $EC, 1, 0, 6, 3	
00023157 FC0D 0008 EB               		dc.b $FC, $D, 0, 8, $EB	
0002315C FA05 0010 0B               		dc.b $FA, 5, 0, $10, $B	
00023161 0C01 0014 FB               		dc.b $C, 1, 0, $14, $FB	
00023166 04                         SME_N6hqJ_384:	dc.b 4	
00023167 ED07 0000 EC               		dc.b $ED, 7, 0, 0, $EC	
0002316C ED03 0008 FC               		dc.b $ED, 3, 0, 8, $FC	
00023171 F501 000C 04               		dc.b $F5, 1, 0, $C, 4	
00023176 0505 000E 04               		dc.b 5, 5, 0, $E, 4	
0002317B 05                         SME_N6hqJ_399:	dc.b 5	
0002317C EC09 0000 EB               		dc.b $EC, 9, 0, 0, $EB	
00023181 FC09 0006 EB               		dc.b $FC, 9, 0, 6, $EB	
00023186 F401 000C 03               		dc.b $F4, 1, 0, $C, 3	
0002318B 0C01 000E FB               		dc.b $C, 1, 0, $E, $FB	
00023190 0405 0010 03               		dc.b 4, 5, 0, $10, 3	
00023195 03                         SME_N6hqJ_3B3:	dc.b 3	
00023196 F207 0000 EB               		dc.b $F2, 7, 0, 0, $EB	
0002319B EC0B 0008 FB               		dc.b $EC, $B, 0, 8, $FB	
000231A0 0C05 0014 03               		dc.b $C, 5, 0, $14, 3	
000231A5 03                         SME_N6hqJ_3C3:	dc.b 3	
000231A6 F207 0000 EC               		dc.b $F2, 7, 0, 0, $EC	
000231AB EC0B 0008 FC               		dc.b $EC, $B, 0, 8, $FC	
000231B0 0C05 0014 04               		dc.b $C, 5, 0, $14, 4	
000231B5 03                         SME_N6hqJ_3D3:	dc.b 3	
000231B6 F307 0000 ED               		dc.b $F3, 7, 0, 0, $ED	
000231BB F403 0008 FD               		dc.b $F4, 3, 0, 8, $FD	
000231C0 F905 000C 05               		dc.b $F9, 5, 0, $C, 5	
000231C5 02                         SME_N6hqJ_3E3:	dc.b 2	
000231C6 F407 0000 EC               		dc.b $F4, 7, 0, 0, $EC	
000231CB F20B 0008 FC               		dc.b $F2, $B, 0, 8, $FC	
000231D0 03                         SME_N6hqJ_3EE:	dc.b 3	
000231D1 F407 0000 EB               		dc.b $F4, 7, 0, 0, $EB	
000231D6 E305 0008 FB               		dc.b $E3, 5, 0, 8, $FB	
000231DB F30B 000C FB               		dc.b $F3, $B, 0, $C, $FB	
000231E0 03                         SME_N6hqJ_3FE:	dc.b 3	
000231E1 F407 0000 EC               		dc.b $F4, 7, 0, 0, $EC	
000231E6 EC0B 0008 FC               		dc.b $EC, $B, 0, 8, $FC	
000231EB 0C05 0014 04               		dc.b $C, 5, 0, $14, 4	
000231F0 03                         SME_N6hqJ_40E:	dc.b 3	
000231F1 F307 0000 ED               		dc.b $F3, 7, 0, 0, $ED	
000231F6 F403 0008 FD               		dc.b $F4, 3, 0, 8, $FD	
000231FB F905 000C 05               		dc.b $F9, 5, 0, $C, 5	
00023200 02                         SME_N6hqJ_41E:	dc.b 2	
00023201 F207 0000 EC               		dc.b $F2, 7, 0, 0, $EC	
00023206 F40B 0008 FC               		dc.b $F4, $B, 0, 8, $FC	
0002320B 04                         SME_N6hqJ_429:	dc.b 4	
0002320C EE05 0000 F3               		dc.b $EE, 5, 0, 0, $F3	
00023211 FE07 0004 EB               		dc.b $FE, 7, 0, 4, $EB	
00023216 FE0D 000C FB               		dc.b $FE, $D, 0, $C, $FB	
0002321B 0E01 0014 FB               		dc.b $E, 1, 0, $14, $FB	
00023220 05                         SME_N6hqJ_43E:	dc.b 5	
00023221 DD05 0000 FC               		dc.b $DD, 5, 0, 0, $FC	
00023226 ED09 0004 F4               		dc.b $ED, 9, 0, 4, $F4	
0002322B FD07 000A EC               		dc.b $FD, 7, 0, $A, $EC	
00023230 FD0D 0012 FC               		dc.b $FD, $D, 0, $12, $FC	
00023235 0D01 001A FC               		dc.b $D, 1, 0, $1A, $FC	
0002323A 04                         SME_N6hqJ_458:	dc.b 4	
0002323B EC0D 0000 F5               		dc.b $EC, $D, 0, 0, $F5	
00023240 FC07 0008 ED               		dc.b $FC, 7, 0, 8, $ED	
00023245 FC05 0010 FD               		dc.b $FC, 5, 0, $10, $FD	
0002324A 0C01 0014 FD               		dc.b $C, 1, 0, $14, $FD	
0002324F 04                         SME_N6hqJ_46D:	dc.b 4	
00023250 ED0D 0000 F4               		dc.b $ED, $D, 0, 0, $F4	
00023255 FD07 0008 EC               		dc.b $FD, 7, 0, 8, $EC	
0002325A FD09 0010 FC               		dc.b $FD, 9, 0, $10, $FC	
0002325F 0D01 0016 FC               		dc.b $D, 1, 0, $16, $FC	
00023264 04                         SME_N6hqJ_482:	dc.b 4	
00023265 EE09 0000 F3               		dc.b $EE, 9, 0, 0, $F3	
0002326A FE07 0006 EB               		dc.b $FE, 7, 0, 6, $EB	
0002326F FE0D 000E FB               		dc.b $FE, $D, 0, $E, $FB	
00023274 0E01 0016 FB               		dc.b $E, 1, 0, $16, $FB	
00023279 05                         SME_N6hqJ_497:	dc.b 5	
0002327A DD05 0000 FA               		dc.b $DD, 5, 0, 0, $FA	
0002327F ED09 0004 F4               		dc.b $ED, 9, 0, 4, $F4	
00023284 FD07 000A EC               		dc.b $FD, 7, 0, $A, $EC	
00023289 FD0D 0012 FC               		dc.b $FD, $D, 0, $12, $FC	
0002328E 0D01 001A FC               		dc.b $D, 1, 0, $1A, $FC	
00023293 04                         SME_N6hqJ_4B1:	dc.b 4	
00023294 EC0D 0000 F5               		dc.b $EC, $D, 0, 0, $F5	
00023299 FC07 0008 ED               		dc.b $FC, 7, 0, 8, $ED	
0002329E FC05 0010 FD               		dc.b $FC, 5, 0, $10, $FD	
000232A3 0C01 0014 FD               		dc.b $C, 1, 0, $14, $FD	
000232A8 04                         SME_N6hqJ_4C6:	dc.b 4	
000232A9 ED0D 0000 F4               		dc.b $ED, $D, 0, 0, $F4	
000232AE FD07 0008 EC               		dc.b $FD, 7, 0, 8, $EC	
000232B3 FD09 0010 FC               		dc.b $FD, 9, 0, $10, $FC	
000232B8 0D01 0016 FC               		dc.b $D, 1, 0, $16, $FC	
000232BD 02                         SME_N6hqJ_4DB:	dc.b 2	
000232BE EE09 0000 F8               		dc.b $EE, 9, 0, 0, $F8	
000232C3 FE0F 0006 F0               		dc.b $FE, $F, 0, 6, $F0	
000232C8 02                         SME_N6hqJ_4E6:	dc.b 2	
000232C9 EE09 0000 F8               		dc.b $EE, 9, 0, 0, $F8	
000232CE FE0F 0006 F0               		dc.b $FE, $F, 0, 6, $F0	
000232D3 02                         SME_N6hqJ_4F1:	dc.b 2	
000232D4 EE09 0000 F8               		dc.b $EE, 9, 0, 0, $F8	
000232D9 FE0F 0006 F0               		dc.b $FE, $F, 0, 6, $F0	
000232DE 02                         SME_N6hqJ_4FC:	dc.b 2	
000232DF EE09 0000 F8               		dc.b $EE, 9, 0, 0, $F8	
000232E4 FE0F 0006 F0               		dc.b $FE, $F, 0, 6, $F0	
000232E9 04                         SME_N6hqJ_507:	dc.b 4	
000232EA EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
000232EF EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
000232F4 FC0D 0008 F4               		dc.b $FC, $D, 0, 8, $F4	
000232F9 0C09 0010 FA               		dc.b $C, 9, 0, $10, $FA	
000232FE 03                         SME_N6hqJ_51C:	dc.b 3	
000232FF EC0D 0000 ED               		dc.b $EC, $D, 0, 0, $ED	
00023304 FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
00023309 0C09 0010 F8               		dc.b $C, 9, 0, $10, $F8	
0002330E 04                         SME_N6hqJ_52C:	dc.b 4	
0002330F EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
00023314 EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
00023319 FC0D 0008 F4               		dc.b $FC, $D, 0, 8, $F4	
0002331E 0C09 0010 FD               		dc.b $C, 9, 0, $10, $FD	
00023323 03                         SME_N6hqJ_541:	dc.b 3	
00023324 EC0D 0000 ED               		dc.b $EC, $D, 0, 0, $ED	
00023329 FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
0002332E 0C09 0010 F8               		dc.b $C, 9, 0, $10, $F8	
00023333 02                         SME_N6hqJ_551:	dc.b 2	
00023334 F007 0000 EE               		dc.b $F0, 7, 0, 0, $EE	
00023339 F00B 0008 FE               		dc.b $F0, $B, 0, 8, $FE	
0002333E 02                         SME_N6hqJ_55C:	dc.b 2	
0002333F F007 0000 EE               		dc.b $F0, 7, 0, 0, $EE	
00023344 F00B 0008 FE               		dc.b $F0, $B, 0, 8, $FE	
00023349 02                         SME_N6hqJ_567:	dc.b 2	
0002334A F007 0000 EE               		dc.b $F0, 7, 0, 0, $EE	
0002334F F00B 0008 FE               		dc.b $F0, $B, 0, 8, $FE	
00023354 02                         SME_N6hqJ_572:	dc.b 2	
00023355 F007 0000 EE               		dc.b $F0, 7, 0, 0, $EE	
0002335A F00B 0008 FE               		dc.b $F0, $B, 0, 8, $FE	
0002335F 03                         SME_N6hqJ_57D:	dc.b 3	
00023360 E901 0000 F4               		dc.b $E9, 1, 0, 0, $F4	
00023365 F907 0002 EC               		dc.b $F9, 7, 0, 2, $EC	
0002336A EC0B 000A FC               		dc.b $EC, $B, 0, $A, $FC	
0002336F 02                         SME_N6hqJ_58D:	dc.b 2	
00023370 F307 0000 EC               		dc.b $F3, 7, 0, 0, $EC	
00023375 EB0B 0008 FC               		dc.b $EB, $B, 0, 8, $FC	
0002337A 03                         SME_N6hqJ_598:	dc.b 3	
0002337B E901 0000 F4               		dc.b $E9, 1, 0, 0, $F4	
00023380 F907 0002 EC               		dc.b $F9, 7, 0, 2, $EC	
00023385 EC0B 000A FC               		dc.b $EC, $B, 0, $A, $FC	
0002338A 02                         SME_N6hqJ_5A8:	dc.b 2	
0002338B F307 0000 EC               		dc.b $F3, 7, 0, 0, $EC	
00023390 EB0B 0008 FC               		dc.b $EB, $B, 0, 8, $FC	
00023395 01                         SME_N6hqJ_5B3:	dc.b 1	
00023396 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002339B 01                         SME_N6hqJ_5B9:	dc.b 1	
0002339C F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000233A1 01                         SME_N6hqJ_5BF:	dc.b 1	
000233A2 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000233A7 01                         SME_N6hqJ_5C5:	dc.b 1	
000233A8 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000233AD 01                         SME_N6hqJ_5CB:	dc.b 1	
000233AE F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000233B3 01                         SME_N6hqJ_5D1:	dc.b 1	
000233B4 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
000233B9 01                         SME_N6hqJ_5D7:	dc.b 1	
000233BA F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
000233BF 01                         SME_N6hqJ_5DD:	dc.b 1	
000233C0 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
000233C5 01                         SME_N6hqJ_5E3:	dc.b 1	
000233C6 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
000233CB 01                         SME_N6hqJ_5E9:	dc.b 1	
000233CC F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
000233D1 01                         SME_N6hqJ_5EF:	dc.b 1	
000233D2 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
000233D7 03                         SME_N6hqJ_5F5:	dc.b 3	
000233D8 E509 0000 F3               		dc.b $E5, 9, 0, 0, $F3	
000233DD F509 0006 F3               		dc.b $F5, 9, 0, 6, $F3	
000233E2 050D 000C EB               		dc.b 5, $D, 0, $C, $EB	
000233E7 03                         SME_N6hqJ_605:	dc.b 3	
000233E8 E409 0000 F3               		dc.b $E4, 9, 0, 0, $F3	
000233ED F409 0006 F3               		dc.b $F4, 9, 0, 6, $F3	
000233F2 0409 000C F3               		dc.b 4, 9, 0, $C, $F3	
000233F7 03                         SME_N6hqJ_615:	dc.b 3	
000233F8 E509 0000 F3               		dc.b $E5, 9, 0, 0, $F3	
000233FD F509 0006 F3               		dc.b $F5, 9, 0, 6, $F3	
00023402 050D 000C EB               		dc.b 5, $D, 0, $C, $EB	
00023407 03                         SME_N6hqJ_625:	dc.b 3	
00023408 E509 0000 F3               		dc.b $E5, 9, 0, 0, $F3	
0002340D F509 0006 F3               		dc.b $F5, 9, 0, 6, $F3	
00023412 0509 000C F3               		dc.b 5, 9, 0, $C, $F3	
00023417 01                         SME_N6hqJ_635:	dc.b 1	
00023418 F40B 0000 F6               		dc.b $F4, $B, 0, 0, $F6	
0002341D 01                         SME_N6hqJ_63B:	dc.b 1	
0002341E F40F 0000 F2               		dc.b $F4, $F, 0, 0, $F2	
00023423 02                         SME_N6hqJ_641:	dc.b 2	
00023424 F801 0000 EC               		dc.b $F8, 1, 0, 0, $EC	
00023429 F00F 0002 F4               		dc.b $F0, $F, 0, 2, $F4	
0002342E 02                         SME_N6hqJ_64C:	dc.b 2	
0002342F F003 0000 EC               		dc.b $F0, 3, 0, 0, $EC	
00023434 F00F 0004 F4               		dc.b $F0, $F, 0, 4, $F4	
00023439 03                         SME_N6hqJ_657:	dc.b 3	
0002343A E80F 0000 E8               		dc.b $E8, $F, 0, 0, $E8	
0002343F E801 0010 08               		dc.b $E8, 1, 0, $10, 8	
00023444 F805 0012 08               		dc.b $F8, 5, 0, $12, 8	
00023449 03                         SME_N6hqJ_667:	dc.b 3	
0002344A E80F 0000 E8               		dc.b $E8, $F, 0, 0, $E8	
0002344F E801 0010 08               		dc.b $E8, 1, 0, $10, 8	
00023454 F805 0012 08               		dc.b $F8, 5, 0, $12, 8	
00023459 02                         SME_N6hqJ_677:	dc.b 2	
0002345A E80B 0000 F4               		dc.b $E8, $B, 0, 0, $F4	
0002345F 0809 000C F4               		dc.b 8, 9, 0, $C, $F4	
00023464 02                         SME_N6hqJ_682:	dc.b 2	
00023465 E80B 0000 F4               		dc.b $E8, $B, 0, 0, $F4	
0002346A 0809 000C F4               		dc.b 8, 9, 0, $C, $F4	
0002346F 03                         SME_N6hqJ_68D:	dc.b 3	
00023470 FC05 0000 EC               		dc.b $FC, 5, 0, 0, $EC	
00023475 F40B 0004 FC               		dc.b $F4, $B, 0, 4, $FC	
0002347A F401 0010 14               		dc.b $F4, 1, 0, $10, $14	
0002347F 04                         SME_N6hqJ_69D:	dc.b 4	
00023480 F401 0000 E8               		dc.b $F4, 1, 0, 0, $E8	
00023485 F407 0002 F0               		dc.b $F4, 7, 0, 2, $F0	
0002348A F407 0802 00               		dc.b $F4, 7, 8, 2, 0	
0002348F F401 0800 10               		dc.b $F4, 1, 8, 0, $10	
00023494 03                         SME_N6hqJ_6B2:	dc.b 3	
00023495 FC05 0800 04               		dc.b $FC, 5, 8, 0, 4	
0002349A F40B 0804 EC               		dc.b $F4, $B, 8, 4, $EC	
0002349F F401 0810 E4               		dc.b $F4, 1, 8, $10, $E4	
000234A4 03                         SME_N6hqJ_6C2:	dc.b 3	
000234A5 F401 0000 E4               		dc.b $F4, 1, 0, 0, $E4	
000234AA F40B 0002 EC               		dc.b $F4, $B, 0, 2, $EC	
000234AF FC01 000E 04               		dc.b $FC, 1, 0, $E, 4	
000234B4 03                         SME_N6hqJ_6D2:	dc.b 3	
000234B5 F401 0800 14               		dc.b $F4, 1, 8, 0, $14	
000234BA F40B 0802 FC               		dc.b $F4, $B, 8, 2, $FC	
000234BF FC01 080E F4               		dc.b $FC, 1, 8, $E, $F4	
000234C4 03                         SME_N6hqJ_6E2:	dc.b 3	
000234C5 FC05 0000 EC               		dc.b $FC, 5, 0, 0, $EC	
000234CA F40B 0004 FC               		dc.b $F4, $B, 0, 4, $FC	
000234CF F401 0010 14               		dc.b $F4, 1, 0, $10, $14	
000234D4 03                         SME_N6hqJ_6F2:	dc.b 3	
000234D5 E409 0000 F4               		dc.b $E4, 9, 0, 0, $F4	
000234DA F40F 0006 EC               		dc.b $F4, $F, 0, 6, $EC	
000234DF 0401 0016 0C               		dc.b 4, 1, 0, $16, $C	
000234E4 02                         SME_N6hqJ_702:	dc.b 2	
000234E5 E80B 0000 F4               		dc.b $E8, $B, 0, 0, $F4	
000234EA 0805 000C FC               		dc.b 8, 5, 0, $C, $FC	
000234EF 04                         SME_N6hqJ_70D:	dc.b 4	
000234F0 EA01 0000 E8               		dc.b $EA, 1, 0, 0, $E8	
000234F5 EA0B 0002 F0               		dc.b $EA, $B, 0, 2, $F0	
000234FA EA01 000E 08               		dc.b $EA, 1, 0, $E, 8	
000234FF 0A0D 0010 F0               		dc.b $A, $D, 0, $10, $F0	
00023504 04                         SME_N6hqJ_722:	dc.b 4	
00023505 EA01 0000 E8               		dc.b $EA, 1, 0, 0, $E8	
0002350A EA0B 0002 F0               		dc.b $EA, $B, 0, 2, $F0	
0002350F EA01 000E 08               		dc.b $EA, 1, 0, $E, 8	
00023514 0A0D 0010 F0               		dc.b $A, $D, 0, $10, $F0	
00023519 03                         SME_N6hqJ_737:	dc.b 3	
0002351A EA0D 0000 E8               		dc.b $EA, $D, 0, 0, $E8	
0002351F EA01 0008 08               		dc.b $EA, 1, 0, 8, 8	
00023524 FA0B 000A F0               		dc.b $FA, $B, 0, $A, $F0	
00023529 03                         SME_N6hqJ_747:	dc.b 3	
0002352A E409 0000 F0               		dc.b $E4, 9, 0, 0, $F0	
0002352F F40B 0006 F0               		dc.b $F4, $B, 0, 6, $F0	
00023534 F401 0012 08               		dc.b $F4, 1, 0, $12, 8	
00023539 03                         SME_N6hqJ_757:	dc.b 3	
0002353A E50B 0000 F0               		dc.b $E5, $B, 0, 0, $F0	
0002353F F401 000C 08               		dc.b $F4, 1, 0, $C, 8	
00023544 0505 000E F8               		dc.b 5, 5, 0, $E, $F8	
00023549 02                         SME_N6hqJ_767:	dc.b 2	
0002354A EC0B 0000 F1               		dc.b $EC, $B, 0, 0, $F1	
0002354F FC01 000C 09               		dc.b $FC, 1, 0, $C, 9	
00023554 01                         SME_N6hqJ_772:	dc.b 1	
00023555 EE0F 0000 F0               		dc.b $EE, $F, 0, 0, $F0	
0002355A 02                         SME_N6hqJ_778:	dc.b 2	
0002355B F20B 0000 F0               		dc.b $F2, $B, 0, 0, $F0	
00023560 FA01 000C 08               		dc.b $FA, 1, 0, $C, 8	
00023565 03                         SME_N6hqJ_783:	dc.b 3	
00023566 E401 0000 00               		dc.b $E4, 1, 0, 0, 0	
0002356B F40B 0002 F0               		dc.b $F4, $B, 0, 2, $F0	
00023570 F401 000E 08               		dc.b $F4, 1, 0, $E, 8	
00023575 03                         SME_N6hqJ_793:	dc.b 3	
00023576 E509 0000 F0               		dc.b $E5, 9, 0, 0, $F0	
0002357B F50B 0006 F0               		dc.b $F5, $B, 0, 6, $F0	
00023580 ED03 0012 08               		dc.b $ED, 3, 0, $12, 8	
00023585 03                         SME_N6hqJ_7A3:	dc.b 3	
00023586 E405 0000 F8               		dc.b $E4, 5, 0, 0, $F8	
0002358B F40B 0004 F0               		dc.b $F4, $B, 0, 4, $F0	
00023590 F401 0010 08               		dc.b $F4, 1, 0, $10, 8	
00023595 02                         SME_N6hqJ_7B3:	dc.b 2	
00023596 ED0B 0000 F0               		dc.b $ED, $B, 0, 0, $F0	
0002359B F501 000C 08               		dc.b $F5, 1, 0, $C, 8	
000235A0 02                         SME_N6hqJ_7BE:	dc.b 2	
000235A1 F401 0000 F0               		dc.b $F4, 1, 0, 0, $F0	
000235A6 F10B 0002 F8               		dc.b $F1, $B, 0, 2, $F8	
000235AB 03                         SME_N6hqJ_7C9:	dc.b 3	
000235AC E405 0000 F1               		dc.b $E4, 5, 0, 0, $F1	
000235B1 F40B 0004 F0               		dc.b $F4, $B, 0, 4, $F0	
000235B6 F401 0010 08               		dc.b $F4, 1, 0, $10, 8	
000235BB 02                         SME_N6hqJ_7D9:	dc.b 2	
000235BC E105 0000 F0               		dc.b $E1, 5, 0, 0, $F0	
000235C1 F10F 0004 F0               		dc.b $F1, $F, 0, 4, $F0	
000235C6 03                         SME_N6hqJ_7E4:	dc.b 3	
000235C7 E807 0000 F0               		dc.b $E8, 7, 0, 0, $F0	
000235CC E003 0008 00               		dc.b $E0, 3, 0, 8, 0	
000235D1 0009 000C 00               		dc.b 0, 9, 0, $C, 0	
000235D6 03                         SME_N6hqJ_7F4:	dc.b 3	
000235D7 E807 0000 F0               		dc.b $E8, 7, 0, 0, $F0	
000235DC E003 0008 00               		dc.b $E0, 3, 0, 8, 0	
000235E1 0009 000C 00               		dc.b 0, 9, 0, $C, 0	
000235E6 01                         SME_N6hqJ_804:	dc.b 1	
000235E7 F00B 0000 F5               		dc.b $F0, $B, 0, 0, $F5	
000235EC 03                         SME_N6hqJ_80A:	dc.b 3	
000235ED E60B 0000 F0               		dc.b $E6, $B, 0, 0, $F0	
000235F2 EE01 000C 08               		dc.b $EE, 1, 0, $C, 8	
000235F7 0609 000E F0               		dc.b 6, 9, 0, $E, $F0	
000235FC 03                         SME_N6hqJ_81A:	dc.b 3	
000235FD E40A 0000 F0               		dc.b $E4, $A, 0, 0, $F0	
00023602 FC00 0009 08               		dc.b $FC, 0, 0, 9, 8	
00023607 FC0A 000A F0               		dc.b $FC, $A, 0, $A, $F0	
0002360C 05                         SME_N6hqJ_82A:	dc.b 5	
0002360D E408 0000 F0               		dc.b $E4, 8, 0, 0, $F0	
00023612 EC01 0003 F0               		dc.b $EC, 1, 0, 3, $F0	
00023617 EC05 0005 F8               		dc.b $EC, 5, 0, 5, $F8	
0002361C FC0A 0009 F0               		dc.b $FC, $A, 0, 9, $F0	
00023621 FD00 0012 08               		dc.b $FD, 0, 0, $12, 8	
00023626 05                         SME_N6hqJ_844:	dc.b 5	
00023627 E408 0000 F0               		dc.b $E4, 8, 0, 0, $F0	
0002362C EC01 0003 F0               		dc.b $EC, 1, 0, 3, $F0	
00023631 EC05 0005 F8               		dc.b $EC, 5, 0, 5, $F8	
00023636 FC0A 0009 F0               		dc.b $FC, $A, 0, 9, $F0	
0002363B FD00 0012 08               		dc.b $FD, 0, 0, $12, 8	
00023640 02                         SME_N6hqJ_85E:	dc.b 2	
00023641 E70A 0000 F1               		dc.b $E7, $A, 0, 0, $F1	
00023646 FF0A 0009 F3               		dc.b $FF, $A, 0, 9, $F3	
0002364B 02                         SME_N6hqJ_869:	dc.b 2	
0002364C E70A 0000 F1               		dc.b $E7, $A, 0, 0, $F1	
00023651 FF0A 0009 F3               		dc.b $FF, $A, 0, 9, $F3	
00023656 02                         SME_N6hqJ_874:	dc.b 2	
00023657 E70A 0000 F1               		dc.b $E7, $A, 0, 0, $F1	
0002365C FF0A 0009 F3               		dc.b $FF, $A, 0, 9, $F3	
00023661 03                         SME_N6hqJ_87F:	dc.b 3	
00023662 E30E 0000 EE               		dc.b $E3, $E, 0, 0, $EE	
00023667 0301 000C EC               		dc.b 3, 1, 0, $C, $EC	
0002366C FB0F 000E F4               		dc.b $FB, $F, 0, $E, $F4	
00023671 04                         SME_N6hqJ_88F:	dc.b 4	
00023672 E40E 0000 EE               		dc.b $E4, $E, 0, 0, $EE	
00023677 0401 000C EC               		dc.b 4, 1, 0, $C, $EC	
0002367C FC0B 000E F4               		dc.b $FC, $B, 0, $E, $F4	
00023681 0401 001A 0C               		dc.b 4, 1, 0, $1A, $C	
00023686 03                         SME_N6hqJ_8A4:	dc.b 3	
00023687 E50E 0000 ED               		dc.b $E5, $E, 0, 0, $ED	
0002368C FD09 000C F4               		dc.b $FD, 9, 0, $C, $F4	
00023691 0D05 0012 F7               		dc.b $D, 5, 0, $12, $F7	
00023696 02                         SME_N6hqJ_8B4:	dc.b 2	
00023697 E40A 0000 F4               		dc.b $E4, $A, 0, 0, $F4	
0002369C FC0F 0009 EE               		dc.b $FC, $F, 0, 9, $EE	
000236A1 03                         SME_N6hqJ_8BF:	dc.b 3	
000236A2 E30A 0000 F4               		dc.b $E3, $A, 0, 0, $F4	
000236A7 FB0F 0009 EE               		dc.b $FB, $F, 0, 9, $EE	
000236AC FB01 0019 0E               		dc.b $FB, 1, 0, $19, $E	
000236B1 04                         SME_N6hqJ_8CF:	dc.b 4	
000236B2 E40A 0000 F4               		dc.b $E4, $A, 0, 0, $F4	
000236B7 0401 0009 EC               		dc.b 4, 1, 0, 9, $EC	
000236BC FC0B 000B F4               		dc.b $FC, $B, 0, $B, $F4	
000236C1 0401 0017 0C               		dc.b 4, 1, 0, $17, $C	
000236C6 03                         SME_N6hqJ_8E4:	dc.b 3	
000236C7 E50E 0000 ED               		dc.b $E5, $E, 0, 0, $ED	
000236CC FD09 000C F4               		dc.b $FD, 9, 0, $C, $F4	
000236D1 0D05 0012 F7               		dc.b $D, 5, 0, $12, $F7	
000236D6 02                         SME_N6hqJ_8F4:	dc.b 2	
000236D7 E40E 0000 EE               		dc.b $E4, $E, 0, 0, $EE	
000236DC FC0B 000C F3               		dc.b $FC, $B, 0, $C, $F3	
000236E1 04                         SME_N6hqJ_8FF:	dc.b 4	
000236E2 EB0D 0000 E2               		dc.b $EB, $D, 0, 0, $E2	
000236E7 F305 0008 02               		dc.b $F3, 5, 0, 8, 2	
000236EC FB09 000C EA               		dc.b $FB, 9, 0, $C, $EA	
000236F1 0B01 0012 FA               		dc.b $B, 1, 0, $12, $FA	
000236F6 05                         SME_N6hqJ_914:	dc.b 5	
000236F7 EC0D 0000 E3               		dc.b $EC, $D, 0, 0, $E3	
000236FC EC01 0008 03               		dc.b $EC, 1, 0, 8, 3	
00023701 FC0D 000A EB               		dc.b $FC, $D, 0, $A, $EB	
00023706 FC05 0012 0B               		dc.b $FC, 5, 0, $12, $B	
0002370B 0C01 0016 FB               		dc.b $C, 1, 0, $16, $FB	
00023710 05                         SME_N6hqJ_92E:	dc.b 5	
00023711 ED0A 0000 E4               		dc.b $ED, $A, 0, 0, $E4	
00023716 ED03 0009 FC               		dc.b $ED, 3, 0, 9, $FC	
0002371B 0500 000D F4               		dc.b 5, 0, 0, $D, $F4	
00023720 F501 000E 04               		dc.b $F5, 1, 0, $E, 4	
00023725 0505 0010 04               		dc.b 5, 5, 0, $10, 4	
0002372A 05                         SME_N6hqJ_948:	dc.b 5	
0002372B E400 0000 F1               		dc.b $E4, 0, 0, 0, $F1	
00023730 EC0D 0001 E3               		dc.b $EC, $D, 0, 1, $E3	
00023735 EC01 0009 03               		dc.b $EC, 1, 0, 9, 3	
0002373A FC05 000B EB               		dc.b $FC, 5, 0, $B, $EB	
0002373F FC0B 000F FB               		dc.b $FC, $B, 0, $F, $FB	
00023744 06                         SME_N6hqJ_962:	dc.b 6	
00023745 E300 0000 F0               		dc.b $E3, 0, 0, 0, $F0	
0002374A EB0D 0001 E2               		dc.b $EB, $D, 0, 1, $E2	
0002374F EB01 0009 02               		dc.b $EB, 1, 0, 9, 2	
00023754 F301 000B 0A               		dc.b $F3, 1, 0, $B, $A	
00023759 FB0D 000D EA               		dc.b $FB, $D, 0, $D, $EA	
0002375E 0B05 0015 F2               		dc.b $B, 5, 0, $15, $F2	
00023763 06                         SME_N6hqJ_981:	dc.b 6	
00023764 E400 0000 F1               		dc.b $E4, 0, 0, 0, $F1	
00023769 EC0D 0001 E3               		dc.b $EC, $D, 0, 1, $E3	
0002376E EC01 0009 03               		dc.b $EC, 1, 0, 9, 3	
00023773 FC0D 000B EB               		dc.b $FC, $D, 0, $B, $EB	
00023778 FA05 0013 0B               		dc.b $FA, 5, 0, $13, $B	
0002377D 0C01 0017 FB               		dc.b $C, 1, 0, $17, $FB	
00023782 05                         SME_N6hqJ_9A0:	dc.b 5	
00023783 ED0A 0000 E4               		dc.b $ED, $A, 0, 0, $E4	
00023788 ED03 0009 FC               		dc.b $ED, 3, 0, 9, $FC	
0002378D 0500 000D F4               		dc.b 5, 0, 0, $D, $F4	
00023792 F501 000E 04               		dc.b $F5, 1, 0, $E, 4	
00023797 0505 0010 04               		dc.b 5, 5, 0, $10, 4	
0002379C 05                         SME_N6hqJ_9BA:	dc.b 5	
0002379D EC0D 0000 E3               		dc.b $EC, $D, 0, 0, $E3	
000237A2 F401 0008 03               		dc.b $F4, 1, 0, 8, 3	
000237A7 FC09 000A EB               		dc.b $FC, 9, 0, $A, $EB	
000237AC 0C00 0010 FB               		dc.b $C, 0, 0, $10, $FB	
000237B1 0405 0011 03               		dc.b 4, 5, 0, $11, 3	
000237B6 03                         SME_N6hqJ_9D4:	dc.b 3	
000237B7 F20B 0000 E3               		dc.b $F2, $B, 0, 0, $E3	
000237BC EC0B 000C FB               		dc.b $EC, $B, 0, $C, $FB	
000237C1 0C05 0018 03               		dc.b $C, 5, 0, $18, 3	
000237C6 03                         SME_N6hqJ_9E4:	dc.b 3	
000237C7 F20B 0000 E4               		dc.b $F2, $B, 0, 0, $E4	
000237CC EC0B 000C FC               		dc.b $EC, $B, 0, $C, $FC	
000237D1 0C05 0018 04               		dc.b $C, 5, 0, $18, 4	
000237D6 03                         SME_N6hqJ_9F4:	dc.b 3	
000237D7 F30B 0000 E5               		dc.b $F3, $B, 0, 0, $E5	
000237DC F403 000C FD               		dc.b $F4, 3, 0, $C, $FD	
000237E1 F905 0010 05               		dc.b $F9, 5, 0, $10, 5	
000237E6 02                         SME_N6hqJ_A04:	dc.b 2	
000237E7 F40A 0000 E4               		dc.b $F4, $A, 0, 0, $E4	
000237EC F20B 0009 FC               		dc.b $F2, $B, 0, 9, $FC	
000237F1 03                         SME_N6hqJ_A0F:	dc.b 3	
000237F2 F40A 0000 E3               		dc.b $F4, $A, 0, 0, $E3	
000237F7 E305 0009 FB               		dc.b $E3, 5, 0, 9, $FB	
000237FC F30B 000D FB               		dc.b $F3, $B, 0, $D, $FB	
00023801 03                         SME_N6hqJ_A1F:	dc.b 3	
00023802 F40A 0000 E4               		dc.b $F4, $A, 0, 0, $E4	
00023807 EC0B 0009 FC               		dc.b $EC, $B, 0, 9, $FC	
0002380C 0C05 0015 04               		dc.b $C, 5, 0, $15, 4	
00023811 03                         SME_N6hqJ_A2F:	dc.b 3	
00023812 F30B 0000 E5               		dc.b $F3, $B, 0, 0, $E5	
00023817 F403 000C FD               		dc.b $F4, 3, 0, $C, $FD	
0002381C F905 0010 05               		dc.b $F9, 5, 0, $10, 5	
00023821 02                         SME_N6hqJ_A3F:	dc.b 2	
00023822 F40B 0000 E4               		dc.b $F4, $B, 0, 0, $E4	
00023827 F20B 000C FC               		dc.b $F2, $B, 0, $C, $FC	
0002382C 04                         SME_N6hqJ_A4A:	dc.b 4	
0002382D EE05 0000 F3               		dc.b $EE, 5, 0, 0, $F3	
00023832 FE07 0004 EB               		dc.b $FE, 7, 0, 4, $EB	
00023837 FE0D 000C FB               		dc.b $FE, $D, 0, $C, $FB	
0002383C 0E00 0014 FB               		dc.b $E, 0, 0, $14, $FB	
00023841 05                         SME_N6hqJ_A5F:	dc.b 5	
00023842 DD05 0000 FC               		dc.b $DD, 5, 0, 0, $FC	
00023847 ED09 0004 F4               		dc.b $ED, 9, 0, 4, $F4	
0002384C FD07 000A EC               		dc.b $FD, 7, 0, $A, $EC	
00023851 FD0D 0012 FC               		dc.b $FD, $D, 0, $12, $FC	
00023856 0D00 001A FC               		dc.b $D, 0, 0, $1A, $FC	
0002385B 04                         SME_N6hqJ_A79:	dc.b 4	
0002385C EC0D 0000 F5               		dc.b $EC, $D, 0, 0, $F5	
00023861 FC07 0008 ED               		dc.b $FC, 7, 0, 8, $ED	
00023866 FC05 0010 FD               		dc.b $FC, 5, 0, $10, $FD	
0002386B 0C01 0014 FD               		dc.b $C, 1, 0, $14, $FD	
00023870 04                         SME_N6hqJ_A8E:	dc.b 4	
00023871 ED0D 0000 F4               		dc.b $ED, $D, 0, 0, $F4	
00023876 FD0B 0008 E4               		dc.b $FD, $B, 0, 8, $E4	
0002387B FD09 0014 FC               		dc.b $FD, 9, 0, $14, $FC	
00023880 0D00 001A FC               		dc.b $D, 0, 0, $1A, $FC	
00023885 04                         SME_N6hqJ_AA3:	dc.b 4	
00023886 EE09 0000 F3               		dc.b $EE, 9, 0, 0, $F3	
0002388B FE0B 0006 E3               		dc.b $FE, $B, 0, 6, $E3	
00023890 FE0D 0012 FB               		dc.b $FE, $D, 0, $12, $FB	
00023895 0E00 001A FB               		dc.b $E, 0, 0, $1A, $FB	
0002389A 05                         SME_N6hqJ_AB8:	dc.b 5	
0002389B DD05 0000 FA               		dc.b $DD, 5, 0, 0, $FA	
000238A0 ED09 0004 F4               		dc.b $ED, 9, 0, 4, $F4	
000238A5 FD0B 000A E4               		dc.b $FD, $B, 0, $A, $E4	
000238AA FD0D 0016 FC               		dc.b $FD, $D, 0, $16, $FC	
000238AF 0D00 001E FC               		dc.b $D, 0, 0, $1E, $FC	
000238B4 04                         SME_N6hqJ_AD2:	dc.b 4	
000238B5 EC0D 0000 F5               		dc.b $EC, $D, 0, 0, $F5	
000238BA FC07 0008 ED               		dc.b $FC, 7, 0, 8, $ED	
000238BF FC05 0010 FD               		dc.b $FC, 5, 0, $10, $FD	
000238C4 0C01 0014 FD               		dc.b $C, 1, 0, $14, $FD	
000238C9 04                         SME_N6hqJ_AE7:	dc.b 4	
000238CA ED0D 0000 F4               		dc.b $ED, $D, 0, 0, $F4	
000238CF FD07 0008 EC               		dc.b $FD, 7, 0, 8, $EC	
000238D4 FD09 0010 FC               		dc.b $FD, 9, 0, $10, $FC	
000238D9 0D00 0016 FC               		dc.b $D, 0, 0, $16, $FC	
000238DE 03                         SME_N6hqJ_AFC:	dc.b 3	
000238DF E30E 0000 EE               		dc.b $E3, $E, 0, 0, $EE	
000238E4 0301 000C EC               		dc.b 3, 1, 0, $C, $EC	
000238E9 FB0F 000E F4               		dc.b $FB, $F, 0, $E, $F4	
000238EE 04                         SME_N6hqJ_B0C:	dc.b 4	
000238EF E40E 0000 EE               		dc.b $E4, $E, 0, 0, $EE	
000238F4 0401 000C EC               		dc.b 4, 1, 0, $C, $EC	
000238F9 FC0B 000E F4               		dc.b $FC, $B, 0, $E, $F4	
000238FE 0401 001A 0C               		dc.b 4, 1, 0, $1A, $C	
00023903 03                         SME_N6hqJ_B21:	dc.b 3	
00023904 E50E 0000 ED               		dc.b $E5, $E, 0, 0, $ED	
00023909 FD09 000C F4               		dc.b $FD, 9, 0, $C, $F4	
0002390E 0D05 0012 F7               		dc.b $D, 5, 0, $12, $F7	
00023913 02                         SME_N6hqJ_B31:	dc.b 2	
00023914 E40A 0000 F4               		dc.b $E4, $A, 0, 0, $F4	
00023919 FC0F 0009 EE               		dc.b $FC, $F, 0, 9, $EE	
0002391E 03                         SME_N6hqJ_B3C:	dc.b 3	
0002391F E30A 0000 F4               		dc.b $E3, $A, 0, 0, $F4	
00023924 FB0F 0009 EE               		dc.b $FB, $F, 0, 9, $EE	
00023929 FB01 0019 0E               		dc.b $FB, 1, 0, $19, $E	
0002392E 04                         SME_N6hqJ_B4C:	dc.b 4	
0002392F E40A 0000 F4               		dc.b $E4, $A, 0, 0, $F4	
00023934 0401 0009 EC               		dc.b 4, 1, 0, 9, $EC	
00023939 FC0B 000B F4               		dc.b $FC, $B, 0, $B, $F4	
0002393E 0401 0017 0C               		dc.b 4, 1, 0, $17, $C	
00023943 03                         SME_N6hqJ_B61:	dc.b 3	
00023944 E50E 0000 ED               		dc.b $E5, $E, 0, 0, $ED	
00023949 FD09 000C F4               		dc.b $FD, 9, 0, $C, $F4	
0002394E 0D05 0012 F7               		dc.b $D, 5, 0, $12, $F7	
00023953 02                         SME_N6hqJ_B71:	dc.b 2	
00023954 E40E 0000 EE               		dc.b $E4, $E, 0, 0, $EE	
00023959 FC0B 000C F3               		dc.b $FC, $B, 0, $C, $F3	
0002395E 05                         SME_N6hqJ_B7C:	dc.b 5	
0002395F E304 0000 EA               		dc.b $E3, 4, 0, 0, $EA	
00023964 EB0D 0002 E2               		dc.b $EB, $D, 0, 2, $E2	
00023969 FB09 000A EA               		dc.b $FB, 9, 0, $A, $EA	
0002396E F305 0010 02               		dc.b $F3, 5, 0, $10, 2	
00023973 0B01 0014 FA               		dc.b $B, 1, 0, $14, $FA	
00023978 06                         SME_N6hqJ_B96:	dc.b 6	
00023979 E404 0000 EB               		dc.b $E4, 4, 0, 0, $EB	
0002397E EC0D 0002 E3               		dc.b $EC, $D, 0, 2, $E3	
00023983 EC01 000A 03               		dc.b $EC, 1, 0, $A, 3	
00023988 FC0D 000C EB               		dc.b $FC, $D, 0, $C, $EB	
0002398D FC05 0014 0B               		dc.b $FC, 5, 0, $14, $B	
00023992 0C01 0018 FB               		dc.b $C, 1, 0, $18, $FB	
00023997 05                         SME_N6hqJ_BB5:	dc.b 5	
00023998 EB09 0000 E4               		dc.b $EB, 9, 0, 0, $E4	
0002399D FB05 0006 EC               		dc.b $FB, 5, 0, 6, $EC	
000239A2 ED03 000A FC               		dc.b $ED, 3, 0, $A, $FC	
000239A7 F501 000E 04               		dc.b $F5, 1, 0, $E, 4	
000239AC 0505 0010 04               		dc.b 5, 5, 0, $10, 4	
000239B1 05                         SME_N6hqJ_BCF:	dc.b 5	
000239B2 E404 0000 EB               		dc.b $E4, 4, 0, 0, $EB	
000239B7 EC0D 0002 E3               		dc.b $EC, $D, 0, 2, $E3	
000239BC EC01 000A 03               		dc.b $EC, 1, 0, $A, 3	
000239C1 FC05 000C EB               		dc.b $FC, 5, 0, $C, $EB	
000239C6 FC0B 0010 FB               		dc.b $FC, $B, 0, $10, $FB	
000239CB 06                         SME_N6hqJ_BE9:	dc.b 6	
000239CC E304 0000 EA               		dc.b $E3, 4, 0, 0, $EA	
000239D1 EB0D 0002 E2               		dc.b $EB, $D, 0, 2, $E2	
000239D6 EB01 000A 02               		dc.b $EB, 1, 0, $A, 2	
000239DB F301 000C 0A               		dc.b $F3, 1, 0, $C, $A	
000239E0 FB0D 000E EA               		dc.b $FB, $D, 0, $E, $EA	
000239E5 0B05 0016 F2               		dc.b $B, 5, 0, $16, $F2	
000239EA 06                         SME_N6hqJ_C08:	dc.b 6	
000239EB E404 0000 EB               		dc.b $E4, 4, 0, 0, $EB	
000239F0 EC0D 0002 E3               		dc.b $EC, $D, 0, 2, $E3	
000239F5 EC01 000A 03               		dc.b $EC, 1, 0, $A, 3	
000239FA FC0D 000C EB               		dc.b $FC, $D, 0, $C, $EB	
000239FF FA05 0014 0B               		dc.b $FA, 5, 0, $14, $B	
00023A04 0C01 0018 FB               		dc.b $C, 1, 0, $18, $FB	
00023A09 05                         SME_N6hqJ_C27:	dc.b 5	
00023A0A EB09 0000 E4               		dc.b $EB, 9, 0, 0, $E4	
00023A0F FB05 0006 EC               		dc.b $FB, 5, 0, 6, $EC	
00023A14 ED03 000A FC               		dc.b $ED, 3, 0, $A, $FC	
00023A19 F501 000E 04               		dc.b $F5, 1, 0, $E, 4	
00023A1E 0505 0010 04               		dc.b 5, 5, 0, $10, 4	
00023A23 06                         SME_N6hqJ_C41:	dc.b 6	
00023A24 E404 0000 EB               		dc.b $E4, 4, 0, 0, $EB	
00023A29 EC0D 0002 E3               		dc.b $EC, $D, 0, 2, $E3	
00023A2E FC09 000A EB               		dc.b $FC, 9, 0, $A, $EB	
00023A33 F401 0010 03               		dc.b $F4, 1, 0, $10, 3	
00023A38 0405 0012 03               		dc.b 4, 5, 0, $12, 3	
00023A3D 0C01 0016 FB               		dc.b $C, 1, 0, $16, $FB	
00023A42 03                         SME_N6hqJ_C60:	dc.b 3	
00023A43 F20B 0000 E3               		dc.b $F2, $B, 0, 0, $E3	
00023A48 EC0B 000C FB               		dc.b $EC, $B, 0, $C, $FB	
00023A4D 0C05 0018 03               		dc.b $C, 5, 0, $18, 3	
00023A52 03                         SME_N6hqJ_C70:	dc.b 3	
00023A53 F20B 0000 E4               		dc.b $F2, $B, 0, 0, $E4	
00023A58 EC0B 000C FC               		dc.b $EC, $B, 0, $C, $FC	
00023A5D 0C05 0018 04               		dc.b $C, 5, 0, $18, 4	
00023A62 03                         SME_N6hqJ_C80:	dc.b 3	
00023A63 F30B 0000 E5               		dc.b $F3, $B, 0, 0, $E5	
00023A68 F403 000C FD               		dc.b $F4, 3, 0, $C, $FD	
00023A6D F905 0010 05               		dc.b $F9, 5, 0, $10, 5	
00023A72 02                         SME_N6hqJ_C90:	dc.b 2	
00023A73 F40A 0000 E4               		dc.b $F4, $A, 0, 0, $E4	
00023A78 F20B 0009 FC               		dc.b $F2, $B, 0, 9, $FC	
00023A7D 03                         SME_N6hqJ_C9B:	dc.b 3	
00023A7E F40A 0000 E3               		dc.b $F4, $A, 0, 0, $E3	
00023A83 E305 0009 FB               		dc.b $E3, 5, 0, 9, $FB	
00023A88 F30B 000D FB               		dc.b $F3, $B, 0, $D, $FB	
00023A8D 03                         SME_N6hqJ_CAB:	dc.b 3	
00023A8E F40A 0000 E4               		dc.b $F4, $A, 0, 0, $E4	
00023A93 EC0B 0009 FC               		dc.b $EC, $B, 0, 9, $FC	
00023A98 0C05 0015 04               		dc.b $C, 5, 0, $15, 4	
00023A9D 03                         SME_N6hqJ_CBB:	dc.b 3	
00023A9E F30B 0000 E5               		dc.b $F3, $B, 0, 0, $E5	
00023AA3 F403 000C FD               		dc.b $F4, 3, 0, $C, $FD	
00023AA8 F905 0010 05               		dc.b $F9, 5, 0, $10, 5	
00023AAD 02                         SME_N6hqJ_CCB:	dc.b 2	
00023AAE F20B 0000 E4               		dc.b $F2, $B, 0, 0, $E4	
00023AB3 F40B 000C FC               		dc.b $F4, $B, 0, $C, $FC	
00023AB8 04                         SME_N6hqJ_CD6:	dc.b 4	
00023AB9 EE05 0000 F3               		dc.b $EE, 5, 0, 0, $F3	
00023ABE FE0B 0004 E3               		dc.b $FE, $B, 0, 4, $E3	
00023AC3 FE0D 0010 FB               		dc.b $FE, $D, 0, $10, $FB	
00023AC8 0E00 0018 FB               		dc.b $E, 0, 0, $18, $FB	
00023ACD 05                         SME_N6hqJ_CEB:	dc.b 5	
00023ACE DD05 0000 FC               		dc.b $DD, 5, 0, 0, $FC	
00023AD3 ED09 0004 F4               		dc.b $ED, 9, 0, 4, $F4	
00023AD8 FD0B 000A E4               		dc.b $FD, $B, 0, $A, $E4	
00023ADD FD0D 0016 FC               		dc.b $FD, $D, 0, $16, $FC	
00023AE2 0D00 001E FC               		dc.b $D, 0, 0, $1E, $FC	
00023AE7 05                         SME_N6hqJ_D05:	dc.b 5	
00023AE8 EC0D 0000 F5               		dc.b $EC, $D, 0, 0, $F5	
00023AED 0401 0008 E5               		dc.b 4, 1, 0, 8, $E5	
00023AF2 FC07 000A ED               		dc.b $FC, 7, 0, $A, $ED	
00023AF7 FC05 0012 FD               		dc.b $FC, 5, 0, $12, $FD	
00023AFC 0C00 0016 FD               		dc.b $C, 0, 0, $16, $FD	
00023B01 04                         SME_N6hqJ_D1F:	dc.b 4	
00023B02 ED0D 0000 F4               		dc.b $ED, $D, 0, 0, $F4	
00023B07 FD0B 0008 E4               		dc.b $FD, $B, 0, 8, $E4	
00023B0C FD09 0014 FC               		dc.b $FD, 9, 0, $14, $FC	
00023B11 0D00 001A FC               		dc.b $D, 0, 0, $1A, $FC	
00023B16 04                         SME_N6hqJ_D34:	dc.b 4	
00023B17 EE09 0000 F3               		dc.b $EE, 9, 0, 0, $F3	
00023B1C FE0B 0006 E3               		dc.b $FE, $B, 0, 6, $E3	
00023B21 FE0D 0012 FB               		dc.b $FE, $D, 0, $12, $FB	
00023B26 0E00 001A FB               		dc.b $E, 0, 0, $1A, $FB	
00023B2B 05                         SME_N6hqJ_D49:	dc.b 5	
00023B2C DD05 0000 FA               		dc.b $DD, 5, 0, 0, $FA	
00023B31 ED09 0004 F4               		dc.b $ED, 9, 0, 4, $F4	
00023B36 FD0B 000A E4               		dc.b $FD, $B, 0, $A, $E4	
00023B3B FD0D 0016 FC               		dc.b $FD, $D, 0, $16, $FC	
00023B40 0D00 001E FC               		dc.b $D, 0, 0, $1E, $FC	
00023B45 05                         SME_N6hqJ_D63:	dc.b 5	
00023B46 EC0D 0000 F5               		dc.b $EC, $D, 0, 0, $F5	
00023B4B 0401 0008 E5               		dc.b 4, 1, 0, 8, $E5	
00023B50 FC07 000A ED               		dc.b $FC, 7, 0, $A, $ED	
00023B55 FC05 0012 FD               		dc.b $FC, 5, 0, $12, $FD	
00023B5A 0C00 0016 FD               		dc.b $C, 0, 0, $16, $FD	
00023B5F 05                         SME_N6hqJ_D7D:	dc.b 5	
00023B60 ED0D 0000 F4               		dc.b $ED, $D, 0, 0, $F4	
00023B65 0501 0008 E4               		dc.b 5, 1, 0, 8, $E4	
00023B6A FD07 000A EC               		dc.b $FD, 7, 0, $A, $EC	
00023B6F FD09 0012 FC               		dc.b $FD, 9, 0, $12, $FC	
00023B74 0D00 0018 FC               		dc.b $D, 0, 0, $18, $FC	
00023B79 04                         SME_N6hqJ_D97:	dc.b 4	
00023B7A F008 0000 FC               		dc.b $F0, 8, 0, 0, $FC	
00023B7F F800 0003 FC               		dc.b $F8, 0, 0, 3, $FC	
00023B84 F805 0004 04               		dc.b $F8, 5, 0, 4, 4	
00023B89 0009 0008 EC               		dc.b 0, 9, 0, 8, $EC	
00023B8E 04                         SME_N6hqJ_DAC:	dc.b 4	
00023B8F E604 0000 FA               		dc.b $E6, 4, 0, 0, $FA	
00023B94 EE0B 0002 F2               		dc.b $EE, $B, 0, 2, $F2	
00023B99 EE02 000E 0A               		dc.b $EE, 2, 0, $E, $A	
00023B9E 0E04 0011 FA               		dc.b $E, 4, 0, $11, $FA	
00023BA3 04                         SME_N6hqJ_DC1:	dc.b 4	
00023BA4 EC02 0000 F0               		dc.b $EC, 2, 0, 0, $F0	
00023BA9 EC05 0003 F8               		dc.b $EC, 5, 0, 3, $F8	
00023BAE FC08 0007 F8               		dc.b $FC, 8, 0, 7, $F8	
00023BB3 0405 000A 00               		dc.b 4, 5, 0, $A, 0	
00023BB8 05                         SME_N6hqJ_DD6:	dc.b 5	
00023BB9 EE08 0000 EE               		dc.b $EE, 8, 0, 0, $EE	
00023BBE F60D 0003 E6               		dc.b $F6, $D, 0, 3, $E6	
00023BC3 F605 000B 06               		dc.b $F6, 5, 0, $B, 6	
00023BC8 0604 000F EE               		dc.b 6, 4, 0, $F, $EE	
00023BCD 0600 0011 06               		dc.b 6, 0, 0, $11, 6	
00023BD2 04                         SME_N6hqJ_DF0:	dc.b 4	
00023BD3 E809 0000 FC               		dc.b $E8, 9, 0, 0, $FC	
00023BD8 F800 0006 FC               		dc.b $F8, 0, 0, 6, $FC	
00023BDD F805 0007 04               		dc.b $F8, 5, 0, 7, 4	
00023BE2 0009 000B EC               		dc.b 0, 9, 0, $B, $EC	
00023BE7 04                         SME_N6hqJ_E05:	dc.b 4	
00023BE8 E604 0000 FA               		dc.b $E6, 4, 0, 0, $FA	
00023BED EE0B 0002 F2               		dc.b $EE, $B, 0, 2, $F2	
00023BF2 EE02 000E 0A               		dc.b $EE, 2, 0, $E, $A	
00023BF7 0E00 0011 FA               		dc.b $E, 0, 0, $11, $FA	
00023BFC 04                         SME_N6hqJ_E1A:	dc.b 4	
00023BFD EC06 0000 E8               		dc.b $EC, 6, 0, 0, $E8	
00023C02 EC05 0006 F8               		dc.b $EC, 5, 0, 6, $F8	
00023C07 FC00 000A F8               		dc.b $FC, 0, 0, $A, $F8	
00023C0C FC06 000B 00               		dc.b $FC, 6, 0, $B, 0	
00023C11 05                         SME_N6hqJ_E2F:	dc.b 5	
00023C12 EE08 0000 EE               		dc.b $EE, 8, 0, 0, $EE	
00023C17 F60D 0003 E6               		dc.b $F6, $D, 0, 3, $E6	
00023C1C F605 000B 06               		dc.b $F6, 5, 0, $B, 6	
00023C21 0604 000F EE               		dc.b 6, 4, 0, $F, $EE	
00023C26 0600 0011 06               		dc.b 6, 0, 0, $11, 6	
00023C2B 04                         SME_N6hqJ_E49:	dc.b 4	
00023C2C E509 0000 EE               		dc.b $E5, 9, 0, 0, $EE	
00023C31 F505 0006 EB               		dc.b $F5, 5, 0, 6, $EB	
00023C36 F505 000A FB               		dc.b $F5, 5, 0, $A, $FB	
00023C3B 050D 000E EB               		dc.b 5, $D, 0, $E, $EB	
00023C40 04                         SME_N6hqJ_E5E:	dc.b 4	
00023C41 E409 0000 EE               		dc.b $E4, 9, 0, 0, $EE	
00023C46 F405 0006 EB               		dc.b $F4, 5, 0, 6, $EB	
00023C4B F405 000A FB               		dc.b $F4, 5, 0, $A, $FB	
00023C50 040D 000E EB               		dc.b 4, $D, 0, $E, $EB	
00023C55 04                         SME_N6hqJ_E73:	dc.b 4	
00023C56 E509 0000 EE               		dc.b $E5, 9, 0, 0, $EE	
00023C5B F505 0006 EB               		dc.b $F5, 5, 0, 6, $EB	
00023C60 F505 000A FB               		dc.b $F5, 5, 0, $A, $FB	
00023C65 050D 000E EB               		dc.b 5, $D, 0, $E, $EB	
00023C6A 04                         SME_N6hqJ_E88:	dc.b 4	
00023C6B E409 0000 EE               		dc.b $E4, 9, 0, 0, $EE	
00023C70 F405 0006 EB               		dc.b $F4, 5, 0, 6, $EB	
00023C75 F405 000A FB               		dc.b $F4, 5, 0, $A, $FB	
00023C7A 040D 000E EB               		dc.b 4, $D, 0, $E, $EB	
00023C7F 02                         SME_N6hqJ_E9D:	dc.b 2	
00023C80 FC02 0000 F0               		dc.b $FC, 2, 0, 0, $F0	
00023C85 F40B 0003 F8               		dc.b $F4, $B, 0, 3, $F8	
00023C8A 03                         SME_N6hqJ_EA8:	dc.b 3	
00023C8B E40A 0000 EC               		dc.b $E4, $A, 0, 0, $EC	
00023C90 FC08 0009 EC               		dc.b $FC, 8, 0, 9, $EC	
00023C95 0405 000C F1               		dc.b 4, 5, 0, $C, $F1	
00023C9A 03                         SME_N6hqJ_EB8:	dc.b 3	
00023C9B E40A 0000 EC               		dc.b $E4, $A, 0, 0, $EC	
00023CA0 FC08 0009 EC               		dc.b $FC, 8, 0, 9, $EC	
00023CA5 0405 000C F1               		dc.b 4, 5, 0, $C, $F1	
00023CAA 03                         SME_N6hqJ_EC8:	dc.b 3	
00023CAB E40A 0000 EC               		dc.b $E4, $A, 0, 0, $EC	
00023CB0 FC08 0009 EC               		dc.b $FC, 8, 0, 9, $EC	
00023CB5 0405 000C F1               		dc.b 4, 5, 0, $C, $F1	
00023CBA 03                         SME_N6hqJ_ED8:	dc.b 3	
00023CBB E50A 0000 ED               		dc.b $E5, $A, 0, 0, $ED	
00023CC0 FD08 0009 ED               		dc.b $FD, 8, 0, 9, $ED	
00023CC5 0505 000C F1               		dc.b 5, 5, 0, $C, $F1	
00023CCA 03                         SME_N6hqJ_EE8:	dc.b 3	
00023CCB E50A 0000 ED               		dc.b $E5, $A, 0, 0, $ED	
00023CD0 FD08 0009 ED               		dc.b $FD, 8, 0, 9, $ED	
00023CD5 0505 000C F1               		dc.b 5, 5, 0, $C, $F1	
00023CDA 03                         SME_N6hqJ_EF8:	dc.b 3	
00023CDB E50A 0000 ED               		dc.b $E5, $A, 0, 0, $ED	
00023CE0 FD08 0009 ED               		dc.b $FD, 8, 0, 9, $ED	
00023CE5 0505 000C F1               		dc.b 5, 5, 0, $C, $F1	
00023CEA 03                         SME_N6hqJ_F08:	dc.b 3	
00023CEB EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00023CF0 EC03 000C 08               		dc.b $EC, 3, 0, $C, 8	
00023CF5 0C05 0010 F1               		dc.b $C, 5, 0, $10, $F1	
00023CFA 03                         SME_N6hqJ_F18:	dc.b 3	
00023CFB EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00023D00 EC03 000C 08               		dc.b $EC, 3, 0, $C, 8	
00023D05 0C05 0010 F1               		dc.b $C, 5, 0, $10, $F1	
00023D0A 03                         SME_N6hqJ_F28:	dc.b 3	
00023D0B EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00023D10 EC03 000C 08               		dc.b $EC, 3, 0, $C, 8	
00023D15 0C05 0010 F1               		dc.b $C, 5, 0, $10, $F1	
00023D1A 05                         SME_N6hqJ_F38:	dc.b 5	
00023D1B EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00023D20 EC01 000C 08               		dc.b $EC, 1, 0, $C, 8	
00023D25 EC01 000E 10               		dc.b $EC, 1, 0, $E, $10	
00023D2A FC01 0010 08               		dc.b $FC, 1, 0, $10, 8	
00023D2F 0C05 0012 F1               		dc.b $C, 5, 0, $12, $F1	
00023D34 04                         SME_N6hqJ_F52:	dc.b 4	
00023D35 EC07 0000 EB               		dc.b $EC, 7, 0, 0, $EB	
00023D3A EC09 0008 FB               		dc.b $EC, 9, 0, 8, $FB	
00023D3F FC05 000E FB               		dc.b $FC, 5, 0, $E, $FB	
00023D44 0C09 0012 EE               		dc.b $C, 9, 0, $12, $EE	
00023D49 04                         SME_N6hqJ_F67:	dc.b 4	
00023D4A EC07 0000 EC               		dc.b $EC, 7, 0, 0, $EC	
00023D4F EC09 0008 FC               		dc.b $EC, 9, 0, 8, $FC	
00023D54 FC05 000E FC               		dc.b $FC, 5, 0, $E, $FC	
00023D59 0C09 0012 EF               		dc.b $C, 9, 0, $12, $EF	
00023D5E 04                         SME_N6hqJ_F7C:	dc.b 4	
00023D5F EC07 0000 EC               		dc.b $EC, 7, 0, 0, $EC	
00023D64 EC09 0008 FC               		dc.b $EC, 9, 0, 8, $FC	
00023D69 FC09 000E FC               		dc.b $FC, 9, 0, $E, $FC	
00023D6E 0C09 0014 F0               		dc.b $C, 9, 0, $14, $F0	
00023D73 03                         SME_N6hqJ_F91:	dc.b 3	
00023D74 F403 0000 E8               		dc.b $F4, 3, 0, 0, $E8	
00023D79 EC0B 0004 F0               		dc.b $EC, $B, 0, 4, $F0	
00023D7E 0C05 0010 F0               		dc.b $C, 5, 0, $10, $F0	
00023D83 03                         SME_N6hqJ_FA1:	dc.b 3	
00023D84 F403 0800 0C               		dc.b $F4, 3, 8, 0, $C	
00023D89 EC0B 0804 F4               		dc.b $EC, $B, 8, 4, $F4	
00023D8E 0C05 0810 FC               		dc.b $C, 5, 8, $10, $FC	
00023D93 03                         SME_N6hqJ_FB1:	dc.b 3	
00023D94 F403 0800 0C               		dc.b $F4, 3, 8, 0, $C	
00023D99 EC0B 0804 F4               		dc.b $EC, $B, 8, 4, $F4	
00023D9E 0C05 0810 FC               		dc.b $C, 5, 8, $10, $FC	
00023DA3 04                         SME_N6hqJ_FC1:	dc.b 4	
00023DA4 EC0D 0000 ED               		dc.b $EC, $D, 0, 0, $ED	
00023DA9 FC0D 0008 EF               		dc.b $FC, $D, 0, 8, $EF	
00023DAE FC01 0010 0F               		dc.b $FC, 1, 0, $10, $F	
00023DB3 0C05 0012 01               		dc.b $C, 5, 0, $12, 1	
00023DB8 04                         SME_N6hqJ_FD6:	dc.b 4	
00023DB9 EC0D 0000 EE               		dc.b $EC, $D, 0, 0, $EE	
00023DBE FC0D 0008 EF               		dc.b $FC, $D, 0, 8, $EF	
00023DC3 FC01 0010 0F               		dc.b $FC, 1, 0, $10, $F	
00023DC8 0C05 0012 01               		dc.b $C, 5, 0, $12, 1	
00023DCD 04                         SME_N6hqJ_FEB:	dc.b 4	
00023DCE EC0D 0000 EF               		dc.b $EC, $D, 0, 0, $EF	
00023DD3 FC0D 0008 EF               		dc.b $FC, $D, 0, 8, $EF	
00023DD8 FC01 0010 0F               		dc.b $FC, 1, 0, $10, $F	
00023DDD 0C05 0012 01               		dc.b $C, 5, 0, $12, 1	
00023DE2 02                         SME_N6hqJ_1000:	dc.b 2	
00023DE3 EC09 0000 F4               		dc.b $EC, 9, 0, 0, $F4	
00023DE8 FC0B 0006 F7               		dc.b $FC, $B, 0, 6, $F7	
00023DEE 00                         		even
00023DEE 00                         		even
00023DEE                            
00023DEE                            ; ---------------------------------------------------------------------------
00023DEE                            ; Uncompressed graphics	loading	array for Sonic
00023DEE                            ; ---------------------------------------------------------------------------
00023DEE                            SonicDynPLC:
00023DEE                            	include "_inc\Sonic dynamic pattern load cues.asm"
00023DEE                            ; --------------------------------------------------------------------------------
00023DEE                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00023DEE                            
00023DEE                            SME_QQU6s:	
00023DEE 0000 0000                  		dc.w SME_QQU6s_1AC-SME_QQU6s, SME_QQU6s_1AD-SME_QQU6s	
00023DF2 0000 0000                  		dc.w SME_QQU6s_1B6-SME_QQU6s, SME_QQU6s_1BB-SME_QQU6s	
00023DF6 0000 0000                  		dc.w SME_QQU6s_1C4-SME_QQU6s, SME_QQU6s_1CD-SME_QQU6s	
00023DFA 0000 0000                  		dc.w SME_QQU6s_1D8-SME_QQU6s, SME_QQU6s_1DF-SME_QQU6s	
00023DFE 0000 0000                  		dc.w SME_QQU6s_1E4-SME_QQU6s, SME_QQU6s_1E9-SME_QQU6s	
00023E02 0000 0000                  		dc.w SME_QQU6s_1EE-SME_QQU6s, SME_QQU6s_1F3-SME_QQU6s	
00023E06 0000 0000                  		dc.w SME_QQU6s_1FC-SME_QQU6s, SME_QQU6s_205-SME_QQU6s	
00023E0A 0000 0000                  		dc.w SME_QQU6s_20C-SME_QQU6s, SME_QQU6s_215-SME_QQU6s	
00023E0E 0000 0000                  		dc.w SME_QQU6s_21C-SME_QQU6s, SME_QQU6s_221-SME_QQU6s	
00023E12 0000 0000                  		dc.w SME_QQU6s_228-SME_QQU6s, SME_QQU6s_231-SME_QQU6s	
00023E16 0000 0000                  		dc.w SME_QQU6s_238-SME_QQU6s, SME_QQU6s_23D-SME_QQU6s	
00023E1A 0000 0000                  		dc.w SME_QQU6s_246-SME_QQU6s, SME_QQU6s_251-SME_QQU6s	
00023E1E 0000 0000                  		dc.w SME_QQU6s_25A-SME_QQU6s, SME_QQU6s_263-SME_QQU6s	
00023E22 0000 0000                  		dc.w SME_QQU6s_26E-SME_QQU6s, SME_QQU6s_279-SME_QQU6s	
00023E26 0000 0000                  		dc.w SME_QQU6s_282-SME_QQU6s, SME_QQU6s_28D-SME_QQU6s	
00023E2A 0000 0000                  		dc.w SME_QQU6s_294-SME_QQU6s, SME_QQU6s_29B-SME_QQU6s	
00023E2E 0000 0000                  		dc.w SME_QQU6s_2A2-SME_QQU6s, SME_QQU6s_2A7-SME_QQU6s	
00023E32 0000 0000                  		dc.w SME_QQU6s_2AE-SME_QQU6s, SME_QQU6s_2B5-SME_QQU6s	
00023E36 0000 0000                  		dc.w SME_QQU6s_2BC-SME_QQU6s, SME_QQU6s_2C1-SME_QQU6s	
00023E3A 0000 0000                  		dc.w SME_QQU6s_2CA-SME_QQU6s, SME_QQU6s_2D5-SME_QQU6s	
00023E3E 0000 0000                  		dc.w SME_QQU6s_2DE-SME_QQU6s, SME_QQU6s_2E7-SME_QQU6s	
00023E42 0000 0000                  		dc.w SME_QQU6s_2F0-SME_QQU6s, SME_QQU6s_2FB-SME_QQU6s	
00023E46 0000 0000                  		dc.w SME_QQU6s_304-SME_QQU6s, SME_QQU6s_30D-SME_QQU6s	
00023E4A 0000 0000                  		dc.w SME_QQU6s_312-SME_QQU6s, SME_QQU6s_317-SME_QQU6s	
00023E4E 0000 0000                  		dc.w SME_QQU6s_31C-SME_QQU6s, SME_QQU6s_321-SME_QQU6s	
00023E52 0000 0000                  		dc.w SME_QQU6s_32A-SME_QQU6s, SME_QQU6s_331-SME_QQU6s	
00023E56 0000 0000                  		dc.w SME_QQU6s_33A-SME_QQU6s, SME_QQU6s_341-SME_QQU6s	
00023E5A 0000 0000                  		dc.w SME_QQU6s_346-SME_QQU6s, SME_QQU6s_34B-SME_QQU6s	
00023E5E 0000 0000                  		dc.w SME_QQU6s_350-SME_QQU6s, SME_QQU6s_355-SME_QQU6s	
00023E62 0000 0000                  		dc.w SME_QQU6s_35C-SME_QQU6s, SME_QQU6s_361-SME_QQU6s	
00023E66 0000 0000                  		dc.w SME_QQU6s_368-SME_QQU6s, SME_QQU6s_36D-SME_QQU6s	
00023E6A 0000 0000                  		dc.w SME_QQU6s_370-SME_QQU6s, SME_QQU6s_373-SME_QQU6s	
00023E6E 0000 0000                  		dc.w SME_QQU6s_376-SME_QQU6s, SME_QQU6s_379-SME_QQU6s	
00023E72 0000 0000                  		dc.w SME_QQU6s_37C-SME_QQU6s, SME_QQU6s_37F-SME_QQU6s	
00023E76 0000 0000                  		dc.w SME_QQU6s_382-SME_QQU6s, SME_QQU6s_385-SME_QQU6s	
00023E7A 0000 0000                  		dc.w SME_QQU6s_388-SME_QQU6s, SME_QQU6s_38B-SME_QQU6s	
00023E7E 0000 0000                  		dc.w SME_QQU6s_38E-SME_QQU6s, SME_QQU6s_395-SME_QQU6s	
00023E82 0000 0000                  		dc.w SME_QQU6s_39C-SME_QQU6s, SME_QQU6s_3A3-SME_QQU6s	
00023E86 0000 0000                  		dc.w SME_QQU6s_3AA-SME_QQU6s, SME_QQU6s_3AD-SME_QQU6s	
00023E8A 0000 0000                  		dc.w SME_QQU6s_3B0-SME_QQU6s, SME_QQU6s_3B5-SME_QQU6s	
00023E8E 0000 0000                  		dc.w SME_QQU6s_3BA-SME_QQU6s, SME_QQU6s_3C1-SME_QQU6s	
00023E92 0000 0000                  		dc.w SME_QQU6s_3C8-SME_QQU6s, SME_QQU6s_3CD-SME_QQU6s	
00023E96 0000 0000                  		dc.w SME_QQU6s_3D2-SME_QQU6s, SME_QQU6s_3D9-SME_QQU6s	
00023E9A 0000 0000                  		dc.w SME_QQU6s_3DE-SME_QQU6s, SME_QQU6s_3E5-SME_QQU6s	
00023E9E 0000 0000                  		dc.w SME_QQU6s_3EC-SME_QQU6s, SME_QQU6s_3F3-SME_QQU6s	
00023EA2 0000 0000                  		dc.w SME_QQU6s_3FA-SME_QQU6s, SME_QQU6s_401-SME_QQU6s	
00023EA6 0000 0000                  		dc.w SME_QQU6s_406-SME_QQU6s, SME_QQU6s_40F-SME_QQU6s	
00023EAA 0000 0000                  		dc.w SME_QQU6s_418-SME_QQU6s, SME_QQU6s_41F-SME_QQU6s	
00023EAE 0000 0000                  		dc.w SME_QQU6s_426-SME_QQU6s, SME_QQU6s_42D-SME_QQU6s	
00023EB2 0000 0000                  		dc.w SME_QQU6s_432-SME_QQU6s, SME_QQU6s_435-SME_QQU6s	
00023EB6 0000 0000                  		dc.w SME_QQU6s_43A-SME_QQU6s, SME_QQU6s_441-SME_QQU6s	
00023EBA 0000 0000                  		dc.w SME_QQU6s_448-SME_QQU6s, SME_QQU6s_44F-SME_QQU6s	
00023EBE 0000 0000                  		dc.w SME_QQU6s_454-SME_QQU6s, SME_QQU6s_459-SME_QQU6s	
00023EC2 0000 0000                  		dc.w SME_QQU6s_460-SME_QQU6s, SME_QQU6s_465-SME_QQU6s	
00023EC6 0000 0000                  		dc.w SME_QQU6s_46C-SME_QQU6s, SME_QQU6s_473-SME_QQU6s	
00023ECA 0000 0000                  		dc.w SME_QQU6s_476-SME_QQU6s, SME_QQU6s_47D-SME_QQU6s	
00023ECE 0000 0000                  		dc.w SME_QQU6s_484-SME_QQU6s, SME_QQU6s_48F-SME_QQU6s	
00023ED2 0000 0000                  		dc.w SME_QQU6s_49A-SME_QQU6s, SME_QQU6s_49F-SME_QQU6s	
00023ED6 0000 0000                  		dc.w SME_QQU6s_4A4-SME_QQU6s, SME_QQU6s_4A9-SME_QQU6s	
00023EDA 0000 0000                  		dc.w SME_QQU6s_4B0-SME_QQU6s, SME_QQU6s_4B9-SME_QQU6s	
00023EDE 0000 0000                  		dc.w SME_QQU6s_4C0-SME_QQU6s, SME_QQU6s_4C5-SME_QQU6s	
00023EE2 0000 0000                  		dc.w SME_QQU6s_4CC-SME_QQU6s, SME_QQU6s_4D5-SME_QQU6s	
00023EE6 0000 0000                  		dc.w SME_QQU6s_4DC-SME_QQU6s, SME_QQU6s_4E1-SME_QQU6s	
00023EEA 0000 0000                  		dc.w SME_QQU6s_4EA-SME_QQU6s, SME_QQU6s_4F5-SME_QQU6s	
00023EEE 0000 0000                  		dc.w SME_QQU6s_500-SME_QQU6s, SME_QQU6s_50B-SME_QQU6s	
00023EF2 0000 0000                  		dc.w SME_QQU6s_518-SME_QQU6s, SME_QQU6s_525-SME_QQU6s	
00023EF6 0000 0000                  		dc.w SME_QQU6s_530-SME_QQU6s, SME_QQU6s_53B-SME_QQU6s	
00023EFA 0000 0000                  		dc.w SME_QQU6s_542-SME_QQU6s, SME_QQU6s_549-SME_QQU6s	
00023EFE 0000 0000                  		dc.w SME_QQU6s_550-SME_QQU6s, SME_QQU6s_555-SME_QQU6s	
00023F02 0000 0000                  		dc.w SME_QQU6s_55C-SME_QQU6s, SME_QQU6s_563-SME_QQU6s	
00023F06 0000 0000                  		dc.w SME_QQU6s_56A-SME_QQU6s, SME_QQU6s_56F-SME_QQU6s	
00023F0A 0000 0000                  		dc.w SME_QQU6s_578-SME_QQU6s, SME_QQU6s_583-SME_QQU6s	
00023F0E 0000 0000                  		dc.w SME_QQU6s_58C-SME_QQU6s, SME_QQU6s_595-SME_QQU6s	
00023F12 0000 0000                  		dc.w SME_QQU6s_59E-SME_QQU6s, SME_QQU6s_5A9-SME_QQU6s	
00023F16 0000 0000                  		dc.w SME_QQU6s_5B2-SME_QQU6s, SME_QQU6s_5BB-SME_QQU6s	
00023F1A 0000 0000                  		dc.w SME_QQU6s_5C2-SME_QQU6s, SME_QQU6s_5CB-SME_QQU6s	
00023F1E 0000 0000                  		dc.w SME_QQU6s_5D2-SME_QQU6s, SME_QQU6s_5D7-SME_QQU6s	
00023F22 0000 0000                  		dc.w SME_QQU6s_5DE-SME_QQU6s, SME_QQU6s_5E7-SME_QQU6s	
00023F26 0000 0000                  		dc.w SME_QQU6s_5EE-SME_QQU6s, SME_QQU6s_5F3-SME_QQU6s	
00023F2A 0000 0000                  		dc.w SME_QQU6s_5FE-SME_QQU6s, SME_QQU6s_60B-SME_QQU6s	
00023F2E 0000 0000                  		dc.w SME_QQU6s_616-SME_QQU6s, SME_QQU6s_621-SME_QQU6s	
00023F32 0000 0000                  		dc.w SME_QQU6s_62E-SME_QQU6s, SME_QQU6s_63B-SME_QQU6s	
00023F36 0000 0000                  		dc.w SME_QQU6s_646-SME_QQU6s, SME_QQU6s_653-SME_QQU6s	
00023F3A 0000 0000                  		dc.w SME_QQU6s_65A-SME_QQU6s, SME_QQU6s_661-SME_QQU6s	
00023F3E 0000 0000                  		dc.w SME_QQU6s_668-SME_QQU6s, SME_QQU6s_66D-SME_QQU6s	
00023F42 0000 0000                  		dc.w SME_QQU6s_674-SME_QQU6s, SME_QQU6s_67B-SME_QQU6s	
00023F46 0000 0000                  		dc.w SME_QQU6s_682-SME_QQU6s, SME_QQU6s_687-SME_QQU6s	
00023F4A 0000 0000                  		dc.w SME_QQU6s_690-SME_QQU6s, SME_QQU6s_69B-SME_QQU6s	
00023F4E 0000 0000                  		dc.w SME_QQU6s_6A6-SME_QQU6s, SME_QQU6s_6AF-SME_QQU6s	
00023F52 0000 0000                  		dc.w SME_QQU6s_6B8-SME_QQU6s, SME_QQU6s_6C3-SME_QQU6s	
00023F56 0000 0000                  		dc.w SME_QQU6s_6CE-SME_QQU6s, SME_QQU6s_6D9-SME_QQU6s	
00023F5A 0000 0000                  		dc.w SME_QQU6s_6E2-SME_QQU6s, SME_QQU6s_6EB-SME_QQU6s	
00023F5E 0000 0000                  		dc.w SME_QQU6s_6F4-SME_QQU6s, SME_QQU6s_6FF-SME_QQU6s	
00023F62 0000 0000                  		dc.w SME_QQU6s_708-SME_QQU6s, SME_QQU6s_711-SME_QQU6s	
00023F66 0000 0000                  		dc.w SME_QQU6s_71A-SME_QQU6s, SME_QQU6s_725-SME_QQU6s	
00023F6A 0000 0000                  		dc.w SME_QQU6s_72E-SME_QQU6s, SME_QQU6s_737-SME_QQU6s	
00023F6E 0000 0000                  		dc.w SME_QQU6s_740-SME_QQU6s, SME_QQU6s_749-SME_QQU6s	
00023F72 0000 0000                  		dc.w SME_QQU6s_74E-SME_QQU6s, SME_QQU6s_755-SME_QQU6s	
00023F76 0000 0000                  		dc.w SME_QQU6s_75C-SME_QQU6s, SME_QQU6s_763-SME_QQU6s	
00023F7A 0000 0000                  		dc.w SME_QQU6s_76A-SME_QQU6s, SME_QQU6s_771-SME_QQU6s	
00023F7E 0000 0000                  		dc.w SME_QQU6s_778-SME_QQU6s, SME_QQU6s_77F-SME_QQU6s	
00023F82 0000 0000                  		dc.w SME_QQU6s_786-SME_QQU6s, SME_QQU6s_78D-SME_QQU6s	
00023F86 0000 0000                  		dc.w SME_QQU6s_798-SME_QQU6s, SME_QQU6s_7A1-SME_QQU6s	
00023F8A 0000 0000                  		dc.w SME_QQU6s_7AA-SME_QQU6s, SME_QQU6s_7B3-SME_QQU6s	
00023F8E 0000 0000                  		dc.w SME_QQU6s_7BA-SME_QQU6s, SME_QQU6s_7C1-SME_QQU6s	
00023F92 0000 0000                  		dc.w SME_QQU6s_7C8-SME_QQU6s, SME_QQU6s_7D1-SME_QQU6s	
00023F96 0000 0000                  		dc.w SME_QQU6s_7DA-SME_QQU6s, SME_QQU6s_7E3-SME_QQU6s	
00023F9A 00                         SME_QQU6s_1AC:	dc.b 0	
00023F9B 0430 0030 0450 0850 0E     SME_QQU6s_1AD:	dc.b 4, $30, 0, $30, 4, $50, 8, $50, $E	
00023FA4 02B0 1450 20               SME_QQU6s_1B6:	dc.b 2, $B0, $14, $50, $20	
00023FA9 0430 2630 2A30 2E50 32     SME_QQU6s_1BB:	dc.b 4, $30, $26, $30, $2A, $30, $2E, $50, $32	
00023FB2 0430 2630 3830 2E50 32     SME_QQU6s_1C4:	dc.b 4, $30, $26, $30, $38, $30, $2E, $50, $32	
00023FBB 0530 2630 3830 2E10 3230+  SME_QQU6s_1CD:	dc.b 5, $30, $26, $30, $38, $30, $2E, $10, $32, $30, $3C	
00023FC6 0330 2670 4050 32          SME_QQU6s_1D8:	dc.b 3, $30, $26, $70, $40, $50, $32	
00023FCD 02B0 4810 54               SME_QQU6s_1DF:	dc.b 2, $B0, $48, $10, $54	
00023FD2 02B0 5630 62               SME_QQU6s_1E4:	dc.b 2, $B0, $56, $30, $62	
00023FD7 02B0 5630 66               SME_QQU6s_1E9:	dc.b 2, $B0, $56, $30, $66	
00023FDC 02B0 6A70 76               SME_QQU6s_1EE:	dc.b 2, $B0, $6A, $70, $76	
00023FE1 0430 7E30 8250 8650 0E     SME_QQU6s_1F3:	dc.b 4, $30, $7E, $30, $82, $50, $86, $50, $E	
00023FEA 0430 8C30 9030 9450 0E     SME_QQU6s_1FC:	dc.b 4, $30, $8C, $30, $90, $30, $94, $50, $E	
00023FF3 0370 9810 A0F0 A2          SME_QQU6s_205:	dc.b 3, $70, $98, $10, $A0, $F0, $A2	
00023FFA 0470 9810 B2B0 B410 C0     SME_QQU6s_20C:	dc.b 4, $70, $98, $10, $B2, $B0, $B4, $10, $C0	
00024003 0370 C250 CA30 D0          SME_QQU6s_215:	dc.b 3, $70, $C2, $50, $CA, $30, $D0	
0002400A 0250 D4F0 DA               SME_QQU6s_21C:	dc.b 2, $50, $D4, $F0, $DA	
0002400F 0350 D4F0 EA10 FA          SME_QQU6s_221:	dc.b 3, $50, $D4, $F0, $EA, $10, $FA	
00024016 0450 D410 FCB0 FE11 0A     SME_QQU6s_228:	dc.b 4, $50, $D4, $10, $FC, $B0, $FE, $11, $A	
0002401F 0370 C251 0C31 12          SME_QQU6s_231:	dc.b 3, $70, $C2, $51, $C, $31, $12	
00024026 0270 98B1 16               SME_QQU6s_238:	dc.b 2, $70, $98, $B1, $16	
0002402B 0451 2251 2831 2E11 32     SME_QQU6s_23D:	dc.b 4, $51, $22, $51, $28, $31, $2E, $11, $32	
00024034 0551 2211 3471 3631 3E11+  SME_QQU6s_246:	dc.b 5, $51, $22, $11, $34, $71, $36, $31, $3E, $11, $42	
0002403F 0471 4431 4C11 5031 52     SME_QQU6s_251:	dc.b 4, $71, $44, $31, $4C, $11, $50, $31, $52	
00024048 0451 5611 5C31 5EB1 62     SME_QQU6s_25A:	dc.b 4, $51, $56, $11, $5C, $31, $5E, $B1, $62	
00024051 0551 5611 6E71 7011 7831+  SME_QQU6s_263:	dc.b 5, $51, $56, $11, $6E, $71, $70, $11, $78, $31, $7A	
0002405C 0551 5611 7E71 8031 8811+  SME_QQU6s_26E:	dc.b 5, $51, $56, $11, $7E, $71, $80, $31, $88, $11, $8C	
00024067 0471 4431 8E11 9231 94     SME_QQU6s_279:	dc.b 4, $71, $44, $31, $8E, $11, $92, $31, $94	
00024070 0551 2251 9811 9E11 A031+  SME_QQU6s_282:	dc.b 5, $51, $22, $51, $98, $11, $9E, $11, $A0, $31, $A2	
0002407B 0371 A6B1 AE31 BA          SME_QQU6s_28D:	dc.b 3, $71, $A6, $B1, $AE, $31, $BA	
00024082 0371 A6B1 BE31 CA          SME_QQU6s_294:	dc.b 3, $71, $A6, $B1, $BE, $31, $CA	
00024089 0371 CE31 D631 DA          SME_QQU6s_29B:	dc.b 3, $71, $CE, $31, $D6, $31, $DA	
00024090 0271 DEB1 E6               SME_QQU6s_2A2:	dc.b 2, $71, $DE, $B1, $E6	
00024095 0371 DE31 F2B1 F6          SME_QQU6s_2A7:	dc.b 3, $71, $DE, $31, $F2, $B1, $F6	
0002409C 0371 DEB2 0232 0E          SME_QQU6s_2AE:	dc.b 3, $71, $DE, $B2, 2, $32, $E	
000240A3 0371 CE32 1232 16          SME_QQU6s_2B5:	dc.b 3, $71, $CE, $32, $12, $32, $16	
000240AA 0271 A6B2 1A               SME_QQU6s_2BC:	dc.b 2, $71, $A6, $B2, $1A	
000240AF 0432 2672 2A72 3212 3A     SME_QQU6s_2C1:	dc.b 4, $32, $26, $72, $2A, $72, $32, $12, $3A	
000240B8 0532 3C52 4072 2A72 4612+  SME_QQU6s_2CA:	dc.b 5, $32, $3C, $52, $40, $72, $2A, $72, $46, $12, $3A	
000240C3 0472 4E72 5632 5E12 62     SME_QQU6s_2D5:	dc.b 4, $72, $4E, $72, $56, $32, $5E, $12, $62	
000240CC 0472 6472 6C52 7412 7A     SME_QQU6s_2DE:	dc.b 4, $72, $64, $72, $6C, $52, $74, $12, $7A	
000240D5 0452 7C72 6C72 8212 7A     SME_QQU6s_2E7:	dc.b 4, $52, $7C, $72, $6C, $72, $82, $12, $7A	
000240DE 0532 8A52 8E72 6C72 9412+  SME_QQU6s_2F0:	dc.b 5, $32, $8A, $52, $8E, $72, $6C, $72, $94, $12, $7A	
000240E9 0472 9C72 5632 A412 62     SME_QQU6s_2FB:	dc.b 4, $72, $9C, $72, $56, $32, $A4, $12, $62	
000240F2 0472 A872 2A52 B012 3A     SME_QQU6s_304:	dc.b 4, $72, $A8, $72, $2A, $52, $B0, $12, $3A	
000240FB 0252 B6F2 BC               SME_QQU6s_30D:	dc.b 2, $52, $B6, $F2, $BC	
00024100 0252 CCF2 D2               SME_QQU6s_312:	dc.b 2, $52, $CC, $F2, $D2	
00024105 0252 B6F2 E2               SME_QQU6s_317:	dc.b 2, $52, $B6, $F2, $E2	
0002410A 0252 CCF2 F2               SME_QQU6s_31C:	dc.b 2, $52, $CC, $F2, $F2	
0002410F 0453 0213 0873 0A53 12     SME_QQU6s_321:	dc.b 4, $53, 2, $13, 8, $73, $A, $53, $12	
00024118 0373 1873 2053 28          SME_QQU6s_32A:	dc.b 3, $73, $18, $73, $20, $53, $28	
0002411F 0453 0213 2E73 3053 38     SME_QQU6s_331:	dc.b 4, $53, 2, $13, $2E, $73, $30, $53, $38	
00024128 0373 1873 3E53 46          SME_QQU6s_33A:	dc.b 3, $73, $18, $73, $3E, $53, $46	
0002412F 0273 4CB3 54               SME_QQU6s_341:	dc.b 2, $73, $4C, $B3, $54	
00024134 0273 60B3 68               SME_QQU6s_346:	dc.b 2, $73, $60, $B3, $68	
00024139 0273 4CB3 74               SME_QQU6s_34B:	dc.b 2, $73, $4C, $B3, $74	
0002413E 0273 60B3 80               SME_QQU6s_350:	dc.b 2, $73, $60, $B3, $80	
00024143 0313 8C73 8EB3 96          SME_QQU6s_355:	dc.b 3, $13, $8C, $73, $8E, $B3, $96	
0002414A 0273 A2B3 AA               SME_QQU6s_35C:	dc.b 2, $73, $A2, $B3, $AA	
0002414F 0313 B673 8EB3 C0          SME_QQU6s_361:	dc.b 3, $13, $B6, $73, $8E, $B3, $C0	
00024156 0273 A2B3 CC               SME_QQU6s_368:	dc.b 2, $73, $A2, $B3, $CC	
0002415B 01F4 00                    SME_QQU6s_36D:	dc.b 1, $F4, 0	
0002415E 01F4 10                    SME_QQU6s_370:	dc.b 1, $F4, $10	
00024161 01F4 20                    SME_QQU6s_373:	dc.b 1, $F4, $20	
00024164 01F4 30                    SME_QQU6s_376:	dc.b 1, $F4, $30	
00024167 01F4 40                    SME_QQU6s_379:	dc.b 1, $F4, $40	
0002416A 01F4 50                    SME_QQU6s_37C:	dc.b 1, $F4, $50	
0002416D 01F4 60                    SME_QQU6s_37F:	dc.b 1, $F4, $60	
00024170 01F4 70                    SME_QQU6s_382:	dc.b 1, $F4, $70	
00024173 01F4 80                    SME_QQU6s_385:	dc.b 1, $F4, $80	
00024176 01F4 90                    SME_QQU6s_388:	dc.b 1, $F4, $90	
00024179 01F4 A0                    SME_QQU6s_38B:	dc.b 1, $F4, $A0	
0002417C 0353 D853 DE73 E4          SME_QQU6s_38E:	dc.b 3, $53, $D8, $53, $DE, $73, $E4	
00024183 0353 D853 EC53 F2          SME_QQU6s_395:	dc.b 3, $53, $D8, $53, $EC, $53, $F2	
0002418A 0353 D853 DE73 B8          SME_QQU6s_39C:	dc.b 3, $53, $D8, $53, $DE, $73, $B8	
00024191 0353 D853 EC54 B0          SME_QQU6s_3A3:	dc.b 3, $53, $D8, $53, $EC, $54, $B0	
00024198 01B4 B6                    SME_QQU6s_3AA:	dc.b 1, $B4, $B6	
0002419B 01F4 C2                    SME_QQU6s_3AD:	dc.b 1, $F4, $C2	
0002419E 0214 D2F4 D4               SME_QQU6s_3B0:	dc.b 2, $14, $D2, $F4, $D4	
000241A3 0234 E4F4 E8               SME_QQU6s_3B5:	dc.b 2, $34, $E4, $F4, $E8	
000241A8 03F4 F815 0835 0A          SME_QQU6s_3BA:	dc.b 3, $F4, $F8, $15, 8, $35, $A	
000241AF 03F5 0E15 1E35 20          SME_QQU6s_3C1:	dc.b 3, $F5, $E, $15, $1E, $35, $20	
000241B6 02B5 2455 30               SME_QQU6s_3C8:	dc.b 2, $B5, $24, $55, $30	
000241BB 02B5 3655 42               SME_QQU6s_3CD:	dc.b 2, $B5, $36, $55, $42	
000241C0 0335 48B5 4C15 58          SME_QQU6s_3D2:	dc.b 3, $35, $48, $B5, $4C, $15, $58	
000241C7 0215 5A75 5C               SME_QQU6s_3D9:	dc.b 2, $15, $5A, $75, $5C	
000241CC 0335 48B5 4C15 58          SME_QQU6s_3DE:	dc.b 3, $35, $48, $B5, $4C, $15, $58	
000241D3 0315 64B5 6615 72          SME_QQU6s_3E5:	dc.b 3, $15, $64, $B5, $66, $15, $72	
000241DA 0315 64B5 6615 72          SME_QQU6s_3EC:	dc.b 3, $15, $64, $B5, $66, $15, $72	
000241E1 0335 74B5 7815 84          SME_QQU6s_3F3:	dc.b 3, $35, $74, $B5, $78, $15, $84	
000241E8 0355 86F5 8C15 9C          SME_QQU6s_3FA:	dc.b 3, $55, $86, $F5, $8C, $15, $9C	
000241EF 02B5 9E35 AA               SME_QQU6s_401:	dc.b 2, $B5, $9E, $35, $AA	
000241F4 0415 AEB5 B015 BC75 BE     SME_QQU6s_406:	dc.b 4, $15, $AE, $B5, $B0, $15, $BC, $75, $BE	
000241FD 0415 AEB5 C615 BC75 BE     SME_QQU6s_40F:	dc.b 4, $15, $AE, $B5, $C6, $15, $BC, $75, $BE	
00024206 0375 D215 DAB5 DC          SME_QQU6s_418:	dc.b 3, $75, $D2, $15, $DA, $B5, $DC	
0002420D 0355 E8B5 EE15 FA          SME_QQU6s_41F:	dc.b 3, $55, $E8, $B5, $EE, $15, $FA	
00024214 03B5 FC16 0836 0A          SME_QQU6s_426:	dc.b 3, $B5, $FC, $16, 8, $36, $A	
0002421B 02B6 0E16 1A               SME_QQU6s_42D:	dc.b 2, $B6, $E, $16, $1A	
00024220 01F6 1C                    SME_QQU6s_432:	dc.b 1, $F6, $1C	
00024223 02B6 2C16 38               SME_QQU6s_435:	dc.b 2, $B6, $2C, $16, $38	
00024228 0316 3AB6 3C16 48          SME_QQU6s_43A:	dc.b 3, $16, $3A, $B6, $3C, $16, $48	
0002422F 0356 4AB6 5036 5C          SME_QQU6s_441:	dc.b 3, $56, $4A, $B6, $50, $36, $5C	
00024236 0336 60B6 6416 70          SME_QQU6s_448:	dc.b 3, $36, $60, $B6, $64, $16, $70	
0002423D 02B6 7216 7E               SME_QQU6s_44F:	dc.b 2, $B6, $72, $16, $7E	
00024242 0216 80B6 82               SME_QQU6s_454:	dc.b 2, $16, $80, $B6, $82	
00024247 0336 8EB6 9216 9E          SME_QQU6s_459:	dc.b 3, $36, $8E, $B6, $92, $16, $9E	
0002424E 0236 A0F6 A4               SME_QQU6s_460:	dc.b 2, $36, $A0, $F6, $A4	
00024253 0376 B436 BC56 C0          SME_QQU6s_465:	dc.b 3, $76, $B4, $36, $BC, $56, $C0	
0002425A 0376 C636 BC56 CE          SME_QQU6s_46C:	dc.b 3, $76, $C6, $36, $BC, $56, $CE	
00024261 01B7 D6                    SME_QQU6s_473:	dc.b 1, $B7, $D6	
00024264 03B7 E217 EE57 F0          SME_QQU6s_476:	dc.b 3, $B7, $E2, $17, $EE, $57, $F0	
0002426B 0387 F60A 1888 00          SME_QQU6s_47D:	dc.b 3, $87, $F6, $A, $18, $88, 0	
00024272 0528 0918 0C38 0E88 1208+  SME_QQU6s_484:	dc.b 5, $28, 9, $18, $C, $38, $E, $88, $12, 8, $1B	
0002427D 0528 1C18 1F38 0E88 1208+  SME_QQU6s_48F:	dc.b 5, $28, $1C, $18, $1F, $38, $E, $88, $12, 8, $1B	
00024288 0288 2188 2A               SME_QQU6s_49A:	dc.b 2, $88, $21, $88, $2A	
0002428D 0288 3388 2A               SME_QQU6s_49F:	dc.b 2, $88, $33, $88, $2A	
00024292 0288 3C88 2A               SME_QQU6s_4A4:	dc.b 2, $88, $3C, $88, $2A	
00024297 03B6 D410 A0F0 A2          SME_QQU6s_4A9:	dc.b 3, $B6, $D4, $10, $A0, $F0, $A2	
0002429E 04B6 D410 B2B0 B410 C0     SME_QQU6s_4B0:	dc.b 4, $B6, $D4, $10, $B2, $B0, $B4, $10, $C0	
000242A7 03B6 E050 CA30 D0          SME_QQU6s_4B9:	dc.b 3, $B6, $E0, $50, $CA, $30, $D0	
000242AE 0286 ECF0 DA               SME_QQU6s_4C0:	dc.b 2, $86, $EC, $F0, $DA	
000242B3 0386 ECF0 EA10 FA          SME_QQU6s_4C5:	dc.b 3, $86, $EC, $F0, $EA, $10, $FA	
000242BA 0486 EC10 FCB0 FE11 0A     SME_QQU6s_4CC:	dc.b 4, $86, $EC, $10, $FC, $B0, $FE, $11, $A	
000242C3 03B6 E051 0C31 12          SME_QQU6s_4D5:	dc.b 3, $B6, $E0, $51, $C, $31, $12	
000242CA 02B6 D4B1 16               SME_QQU6s_4DC:	dc.b 2, $B6, $D4, $B1, $16	
000242CF 0476 F531 2E51 2811 32     SME_QQU6s_4E1:	dc.b 4, $76, $F5, $31, $2E, $51, $28, $11, $32	
000242D8 0576 F511 3471 3631 3E11+  SME_QQU6s_4EA:	dc.b 5, $76, $F5, $11, $34, $71, $36, $31, $3E, $11, $42	
000242E3 0586 FD31 4C07 0611 5031+  SME_QQU6s_4F5:	dc.b 5, $86, $FD, $31, $4C, 7, 6, $11, $50, $31, $52	
000242EE 0507 0777 0811 5C31 5EB1+  SME_QQU6s_500:	dc.b 5, 7, 7, $77, 8, $11, $5C, $31, $5E, $B1, $62	
000242F9 0607 0777 0811 6E11 7871+  SME_QQU6s_50B:	dc.b 6, 7, 7, $77, 8, $11, $6E, $11, $78, $71, $70, $31, $7A	
00024306 0607 0777 0811 7E71 8031+  SME_QQU6s_518:	dc.b 6, 7, 7, $77, 8, $11, $7E, $71, $80, $31, $88, $11, $8C	
00024313 0586 FD31 8E07 0611 9231+  SME_QQU6s_525:	dc.b 5, $86, $FD, $31, $8E, 7, 6, $11, $92, $31, $94	
0002431E 0576 F511 9E51 9801 A031+  SME_QQU6s_530:	dc.b 5, $76, $F5, $11, $9E, $51, $98, 1, $A0, $31, $A2	
00024329 03B7 10B1 AE31 BA          SME_QQU6s_53B:	dc.b 3, $B7, $10, $B1, $AE, $31, $BA	
00024330 03B7 10B1 BE31 CA          SME_QQU6s_542:	dc.b 3, $B7, $10, $B1, $BE, $31, $CA	
00024337 03B7 1C31 D631 DA          SME_QQU6s_549:	dc.b 3, $B7, $1C, $31, $D6, $31, $DA	
0002433E 0287 28B1 E6               SME_QQU6s_550:	dc.b 2, $87, $28, $B1, $E6	
00024343 0387 2831 F2B1 F6          SME_QQU6s_555:	dc.b 3, $87, $28, $31, $F2, $B1, $F6	
0002434A 0387 28B2 0232 0E          SME_QQU6s_55C:	dc.b 3, $87, $28, $B2, 2, $32, $E	
00024351 03B7 1C32 1232 16          SME_QQU6s_563:	dc.b 3, $B7, $1C, $32, $12, $32, $16	
00024358 02B7 10B2 1A               SME_QQU6s_56A:	dc.b 2, $B7, $10, $B2, $1A	
0002435D 0432 2677 3172 3207 39     SME_QQU6s_56F:	dc.b 4, $32, $26, $77, $31, $72, $32, 7, $39	
00024366 0532 3C52 4077 3172 4607+  SME_QQU6s_578:	dc.b 5, $32, $3C, $52, $40, $77, $31, $72, $46, 7, $39	
00024371 0472 4E77 3A32 5E17 42     SME_QQU6s_583:	dc.b 4, $72, $4E, $77, $3A, $32, $5E, $17, $42	
0002437A 0472 64B7 4452 7407 50     SME_QQU6s_58C:	dc.b 4, $72, $64, $B7, $44, $52, $74, 7, $50	
00024383 0452 7CB7 4472 8207 50     SME_QQU6s_595:	dc.b 4, $52, $7C, $B7, $44, $72, $82, 7, $50	
0002438C 0532 8A52 8EB7 4472 9407+  SME_QQU6s_59E:	dc.b 5, $32, $8A, $52, $8E, $B7, $44, $72, $94, 7, $50	
00024397 0472 9C77 3A32 A417 42     SME_QQU6s_5A9:	dc.b 4, $72, $9C, $77, $3A, $32, $A4, $17, $42	
000243A0 0472 A877 3152 B007 39     SME_QQU6s_5B2:	dc.b 4, $72, $A8, $77, $31, $52, $B0, 7, $39	
000243A9 03B7 5110 A0F0 A2          SME_QQU6s_5BB:	dc.b 3, $B7, $51, $10, $A0, $F0, $A2	
000243B0 04B7 5110 B2B0 B410 C0     SME_QQU6s_5C2:	dc.b 4, $B7, $51, $10, $B2, $B0, $B4, $10, $C0	
000243B9 03B7 5D50 CA30 D0          SME_QQU6s_5CB:	dc.b 3, $B7, $5D, $50, $CA, $30, $D0	
000243C0 0287 69F0 DA               SME_QQU6s_5D2:	dc.b 2, $87, $69, $F0, $DA	
000243C5 0387 69F0 EA10 FA          SME_QQU6s_5D7:	dc.b 3, $87, $69, $F0, $EA, $10, $FA	
000243CC 0487 6910 FCB0 FE11 0A     SME_QQU6s_5DE:	dc.b 4, $87, $69, $10, $FC, $B0, $FE, $11, $A	
000243D5 03B7 5D51 0C31 12          SME_QQU6s_5E7:	dc.b 3, $B7, $5D, $51, $C, $31, $12	
000243DC 02B7 51B1 16               SME_QQU6s_5EE:	dc.b 2, $B7, $51, $B1, $16	
000243E1 0517 7277 7451 2831 2E11+  SME_QQU6s_5F3:	dc.b 5, $17, $72, $77, $74, $51, $28, $31, $2E, $11, $32	
000243EC 0617 7277 7411 3471 3631+  SME_QQU6s_5FE:	dc.b 6, $17, $72, $77, $74, $11, $34, $71, $36, $31, $3E, $11, $42	
000243F9 0557 7C37 8231 4C11 5031+  SME_QQU6s_60B:	dc.b 5, $57, $7C, $37, $82, $31, $4C, $11, $50, $31, $52	
00024404 0517 8677 8811 5C31 5EB1+  SME_QQU6s_616:	dc.b 5, $17, $86, $77, $88, $11, $5C, $31, $5E, $B1, $62	
0002440F 0617 8677 8811 6E11 7871+  SME_QQU6s_621:	dc.b 6, $17, $86, $77, $88, $11, $6E, $11, $78, $71, $70, $31, $7A	
0002441C 0617 8677 8811 7E71 8031+  SME_QQU6s_62E:	dc.b 6, $17, $86, $77, $88, $11, $7E, $71, $80, $31, $88, $11, $8C	
00024429 0557 7C37 8231 8E11 9231+  SME_QQU6s_63B:	dc.b 5, $57, $7C, $37, $82, $31, $8E, $11, $92, $31, $94	
00024434 0617 7277 7451 9811 9E31+  SME_QQU6s_646:	dc.b 6, $17, $72, $77, $74, $51, $98, $11, $9E, $31, $A2, $11, $A0	
00024441 03B7 90B1 AE31 BA          SME_QQU6s_653:	dc.b 3, $B7, $90, $B1, $AE, $31, $BA	
00024448 03B7 90B1 BE31 CA          SME_QQU6s_65A:	dc.b 3, $B7, $90, $B1, $BE, $31, $CA	
0002444F 03B7 9C31 D631 DA          SME_QQU6s_661:	dc.b 3, $B7, $9C, $31, $D6, $31, $DA	
00024456 0287 A8B1 E6               SME_QQU6s_668:	dc.b 2, $87, $A8, $B1, $E6	
0002445B 0387 A831 F2B1 F6          SME_QQU6s_66D:	dc.b 3, $87, $A8, $31, $F2, $B1, $F6	
00024462 0387 A8B2 0232 0E          SME_QQU6s_674:	dc.b 3, $87, $A8, $B2, 2, $32, $E	
00024469 03B7 9C32 1232 16          SME_QQU6s_67B:	dc.b 3, $B7, $9C, $32, $12, $32, $16	
00024470 02B7 90B2 1A               SME_QQU6s_682:	dc.b 2, $B7, $90, $B2, $1A	
00024475 0432 26B7 B172 3207 BD     SME_QQU6s_687:	dc.b 4, $32, $26, $B7, $B1, $72, $32, 7, $BD	
0002447E 0532 3C52 40B7 B172 4607+  SME_QQU6s_690:	dc.b 5, $32, $3C, $52, $40, $B7, $B1, $72, $46, 7, $BD	
00024489 0572 4E17 BE77 C032 5E07+  SME_QQU6s_69B:	dc.b 5, $72, $4E, $17, $BE, $77, $C0, $32, $5E, 7, $C8	
00024494 0472 64B7 C952 7407 D5     SME_QQU6s_6A6:	dc.b 4, $72, $64, $B7, $C9, $52, $74, 7, $D5	
0002449D 0452 7CB7 C972 8207 D5     SME_QQU6s_6AF:	dc.b 4, $52, $7C, $B7, $C9, $72, $82, 7, $D5	
000244A6 0532 8A52 8EB7 C972 9407+  SME_QQU6s_6B8:	dc.b 5, $32, $8A, $52, $8E, $B7, $C9, $72, $94, 7, $D5	
000244B1 0572 9C17 BE77 C032 A407+  SME_QQU6s_6C3:	dc.b 5, $72, $9C, $17, $BE, $77, $C0, $32, $A4, 7, $C8	
000244BC 0572 A817 B277 B552 B007+  SME_QQU6s_6CE:	dc.b 5, $72, $A8, $17, $B2, $77, $B5, $52, $B0, 7, $BD	
000244C7 0428 4508 4838 4958 4D     SME_QQU6s_6D9:	dc.b 4, $28, $45, 8, $48, $38, $49, $58, $4D	
000244D0 0418 53B8 5528 6118 64     SME_QQU6s_6E2:	dc.b 4, $18, $53, $B8, $55, $28, $61, $18, $64	
000244D9 0428 6638 6928 6D38 70     SME_QQU6s_6EB:	dc.b 4, $28, $66, $38, $69, $28, $6D, $38, $70	
000244E2 0528 7478 7738 7F18 8308+  SME_QQU6s_6F4:	dc.b 5, $28, $74, $78, $77, $38, $7F, $18, $83, 8, $85	
000244ED 0458 8608 8C38 4958 8D     SME_QQU6s_6FF:	dc.b 4, $58, $86, 8, $8C, $38, $49, $58, $8D	
000244F6 0418 93B8 9528 6108 A1     SME_QQU6s_708:	dc.b 4, $18, $93, $B8, $95, $28, $61, 8, $A1	
000244FF 0458 A238 6908 A858 A9     SME_QQU6s_711:	dc.b 4, $58, $A2, $38, $69, 8, $A8, $58, $A9	
00024508 0528 7478 AF38 B718 BB08+  SME_QQU6s_71A:	dc.b 5, $28, $74, $78, $AF, $38, $B7, $18, $BB, 8, $85	
00024513 0458 BD38 C338 C778 CB     SME_QQU6s_725:	dc.b 4, $58, $BD, $38, $C3, $38, $C7, $78, $CB	
0002451C 0458 D338 D938 C778 DD     SME_QQU6s_72E:	dc.b 4, $58, $D3, $38, $D9, $38, $C7, $78, $DD	
00024525 0458 BD38 C338 C778 E5     SME_QQU6s_737:	dc.b 4, $58, $BD, $38, $C3, $38, $C7, $78, $E5	
0002452E 0458 D338 D938 C778 ED     SME_QQU6s_740:	dc.b 4, $58, $D3, $38, $D9, $38, $C7, $78, $ED	
00024537 0228 F5B8 F8               SME_QQU6s_749:	dc.b 2, $28, $F5, $B8, $F8	
0002453C 0389 0429 0D39 10          SME_QQU6s_74E:	dc.b 3, $89, 4, $29, $D, $39, $10	
00024543 0388 3329 0D39 10          SME_QQU6s_755:	dc.b 3, $88, $33, $29, $D, $39, $10	
0002454A 0388 3C29 0D39 10          SME_QQU6s_75C:	dc.b 3, $88, $3C, $29, $D, $39, $10	
00024551 0389 0429 0D39 14          SME_QQU6s_763:	dc.b 3, $89, 4, $29, $D, $39, $14	
00024558 0388 3329 0D39 14          SME_QQU6s_76A:	dc.b 3, $88, $33, $29, $D, $39, $14	
0002455F 0388 3C29 0D39 14          SME_QQU6s_771:	dc.b 3, $88, $3C, $29, $D, $39, $14	
00024566 03B9 1839 2439 28          SME_QQU6s_778:	dc.b 3, $B9, $18, $39, $24, $39, $28	
0002456D 03B9 2C39 3839 28          SME_QQU6s_77F:	dc.b 3, $B9, $2C, $39, $38, $39, $28	
00024574 03B9 3C39 4839 28          SME_QQU6s_786:	dc.b 3, $B9, $3C, $39, $48, $39, $28	
0002457B 05B9 4C19 2419 5819 3A39+  SME_QQU6s_78D:	dc.b 5, $B9, $4C, $19, $24, $19, $58, $19, $3A, $39, $28	
00024586 0479 5A59 6239 6859 6C     SME_QQU6s_798:	dc.b 4, $79, $5A, $59, $62, $39, $68, $59, $6C	
0002458F 0479 7259 6239 7A59 7E     SME_QQU6s_7A1:	dc.b 4, $79, $72, $59, $62, $39, $7A, $59, $7E	
00024598 0479 8459 6259 8C59 92     SME_QQU6s_7AA:	dc.b 4, $79, $84, $59, $62, $59, $8C, $59, $92	
000245A1 0339 98B9 9C39 A8          SME_QQU6s_7B3:	dc.b 3, $39, $98, $B9, $9C, $39, $A8	
000245A8 0339 ACB9 B039 BC          SME_QQU6s_7BA:	dc.b 3, $39, $AC, $B9, $B0, $39, $BC	
000245AF 0339 C0B9 C439 BC          SME_QQU6s_7C1:	dc.b 3, $39, $C0, $B9, $C4, $39, $BC	
000245B6 0479 D079 D819 E039 E2     SME_QQU6s_7C8:	dc.b 4, $79, $D0, $79, $D8, $19, $E0, $39, $E2	
000245BF 0479 E679 EE19 E039 E2     SME_QQU6s_7D1:	dc.b 4, $79, $E6, $79, $EE, $19, $E0, $39, $E2	
000245C8 0479 F679 FE19 E039 E2     SME_QQU6s_7DA:	dc.b 4, $79, $F6, $79, $FE, $19, $E0, $39, $E2	
000245D1 025A 06BA 0C               SME_QQU6s_7E3:	dc.b 2, $5A, 6, $BA, $C	
000245D6                            		even
000245D6                            		even
000245D6                            
000245D6                            ; ---------------------------------------------------------------------------
000245D6                            ; Uncompressed graphics	- Sonic
000245D6                            ; ---------------------------------------------------------------------------
000245D6                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
000388F6                            		even
000388F6                            Art_Dust:	incbin	artunc\spindust.bin
0003A236                            		even
0003A236                            ; ---------------------------------------------------------------------------
0003A236                            ; Compressed graphics - various
0003A236                            ; ---------------------------------------------------------------------------
0003A236                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0003A33A                            		even
0003A33A                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0003A374                            		even
0003A374                            Nem_Shield:	incbin	artnem\shield.bin	; shield
0003A50A                            		even
0003A50A                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
0003A652                            		even
0003A652                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0003A75C                            		even
0003A75C                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
0003A7AE                            		even
0003A7AE                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0003A9F6                            		even
0003A9F6                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0003AB7C                            		even
0003AB7C                            ; ---------------------------------------------------------------------------
0003AB7C                            ; Sprite mappings - walls of the special stage
0003AB7C                            ; ---------------------------------------------------------------------------
0003AB7C                            Map_SSWalls:
0003AB7C                            	include "_maps\SSwalls.asm"
0003AB7C                            ; ---------------------------------------------------------------------------
0003AB7C                            ; Sprite mappings - walls of the special stage
0003AB7C                            ; ---------------------------------------------------------------------------
0003AB7C 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
0003AB80 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
0003AB84 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
0003AB88 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
0003AB8C 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
0003AB90 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
0003AB94 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
0003AB98 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
0003AB9C 01                         byte_2C584:	dc.b 1
0003AB9D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0003ABA2 01                         byte_2C58A:	dc.b 1
0003ABA3 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0003ABA8 01                         byte_2C590:	dc.b 1
0003ABA9 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0003ABAE 01                         byte_2C596:	dc.b 1
0003ABAF F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0003ABB4 01                         byte_2C59C:	dc.b 1
0003ABB5 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0003ABBA 01                         byte_2C5A2:	dc.b 1
0003ABBB F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0003ABC0 01                         byte_2C5A8:	dc.b 1
0003ABC1 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0003ABC6 01                         byte_2C5AE:	dc.b 1
0003ABC7 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0003ABCC 01                         byte_2C5B4:	dc.b 1
0003ABCD F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0003ABD2 01                         byte_2C5BA:	dc.b 1
0003ABD3 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0003ABD8 01                         byte_2C5C0:	dc.b 1
0003ABD9 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0003ABDE 01                         byte_2C5C6:	dc.b 1
0003ABDF F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0003ABE4 01                         byte_2C5CC:	dc.b 1
0003ABE5 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0003ABEA 01                         byte_2C5D2:	dc.b 1
0003ABEB F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0003ABF0 01                         byte_2C5D8:	dc.b 1
0003ABF1 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0003ABF6 01                         byte_2C5DE:	dc.b 1
0003ABF7 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0003ABFC                            		even
0003ABFC                            		even
0003ABFC                            ; ---------------------------------------------------------------------------
0003ABFC                            ; Compressed graphics - special stage
0003ABFC                            ; ---------------------------------------------------------------------------
0003ABFC                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
0003B534                            		even
0003B534                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
0003B668                            		even
0003B668                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
0003C2F8                            		even
0003C2F8                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
0003C5F8                            		even
0003C5F8                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
0003CAEC                            		even
0003CAEC                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
0003CBDA                            		even
0003CBDA                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
0003CCAA                            		even
0003CCAA                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
0003CDA0                            		even
0003CDA0                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
0003CDFE                            		even
0003CDFE                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
0003CE90                            		even
0003CE90                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
0003CF52                            		even
0003CF52                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
0003D020                            		even
0003D020                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
0003D0EC                            		even
0003D0EC                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
0003D1B4                            		even
0003D1B4                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
0003D27E                            		even
0003D27E                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
0003D34E                            		even
0003D34E                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
0003D542                            		even
0003D542                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
0003D6AA                            		even
0003D6AA                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
0003D75A                            		even
0003D75A                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
0003D834                            		even
0003D834                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
0003D8B8                            		even
0003D8B8                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
0003DA36                            		even
0003DA36                            ; ---------------------------------------------------------------------------
0003DA36                            ; Compressed graphics - GHZ stuff
0003DA36                            ; ---------------------------------------------------------------------------
0003DA36                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
0003DA80                            		even
0003DA80                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
0003DB9A                            		even
0003DB9A                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
0003DC86                            		even
0003DC86                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
0003DCCE                            		even
0003DCCE                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
0003DE6C                            		even
0003DE6C                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
0003DEE8                            		even
0003DEE8                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
0003E0FC                            		even
0003E0FC                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
0003E228                            		even
0003E228                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
0003E356                            		even
0003E356                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
0003E3F4                            		even
0003E3F4                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
0003E454                            		even
0003E454                            ; ---------------------------------------------------------------------------
0003E454                            ; Compressed graphics - LZ stuff
0003E454                            ; ---------------------------------------------------------------------------
0003E454                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
0003E578                            		even
0003E578                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
0003ED6C                            		even
0003ED6C                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
0003EEEC                            		even
0003EEEC                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
0003F056                            		even
0003F056                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
0003F6AC                            		even
0003F6AC                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
0003F762                            		even
0003F762                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
0003F804                            		even
0003F804                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
0003F960                            		even
0003F960                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
0003F9C4                            		even
0003F9C4                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
0003FB16                            		even
0003FB16                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
0003FFF8                            		even
0003FFF8                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00040168                            		even
00040168                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00040420                            		even
00040420                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00040558                            		even
00040558                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00040682                            		even
00040682                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00040792                            		even
00040792                            ; ---------------------------------------------------------------------------
00040792                            ; Compressed graphics - MZ stuff
00040792                            ; ---------------------------------------------------------------------------
00040792                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00040A20                            		even
00040A20                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00040ADE                            		even
00040ADE                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00040B96                            		even
00040B96                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00040BEA                            		even
00040BEA                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00040EC8                            		even
00040EC8                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
000417DE                            		even
000417DE                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
00041942                            		even
00041942                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
000419CA                            		even
000419CA                            ; ---------------------------------------------------------------------------
000419CA                            ; Compressed graphics - SLZ stuff
000419CA                            ; ---------------------------------------------------------------------------
000419CA                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00041C06                            		even
00041C06                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00041D4C                            		even
00041D4C                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00041F90                            		even
00041F90                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00041FF2                            		even
00041FF2                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
000420D4                            		even
000420D4                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
000422B6                            		even
000422B6                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
000423C2                            		even
000423C2                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00042466                            		even
00042466                            ; ---------------------------------------------------------------------------
00042466                            ; Compressed graphics - SYZ stuff
00042466                            ; ---------------------------------------------------------------------------
00042466                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
000425D0                            		even
000425D0                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00042632                            		even
00042632                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
00042714                            		even
00042714                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
000429A2                            		even
000429A2                            ; ---------------------------------------------------------------------------
000429A2                            ; Compressed graphics - SBZ stuff
000429A2                            ; ---------------------------------------------------------------------------
000429A2                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
000429F6                            		even
000429F6                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00042C92                            		even
00042C92                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00042E96                            		even
00042E96                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
00043034                            		even
00043034                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00043364                            		even
00043364                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
00043542                            		even
00043542                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
0004359A                            		even
0004359A                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0004371A                            		even
0004371A                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
00043818                            		even
00043818                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
000439A4                            		even
000439A4                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
000439F4                            		even
000439F4                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
00043A4C                            		even
00043A4C                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
00043B48                            		even
00043B48                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
00043C5E                            		even
00043C5E                            ; ---------------------------------------------------------------------------
00043C5E                            ; Compressed graphics - enemies
00043C5E                            ; ---------------------------------------------------------------------------
00043C5E                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0004401E                            		even
0004401E                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0004450C                            		even
0004450C                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
000448B2                            		even
000448B2                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
00044A9A                            		even
00044A9A                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
00045184                            		even
00045184                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
000453EC                            		even
000453EC                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
00045676                            		even
00045676                            Nem_Roller:	incbin	artnem\roller.bin	; roller
00045B9A                            		even
00045B9A                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
00045E24                            		even
00045E24                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
00046442                            		even
00046442                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0004682A                            		even
0004682A                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
00046B26                            		even
00046B26                            Nem_Splats:	incbin	artnem\splats.bin	; splats
00046D6E                            		even
00046D6E                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
00047006                            		even
00047006                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
000471E4                            		even
000471E4                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
00047372                            		even
00047372                            ; ---------------------------------------------------------------------------
00047372                            ; Compressed graphics - various
00047372                            ; ---------------------------------------------------------------------------
00047372                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
00047980                            		even
00047980                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
00047A76                            		even
00047A76                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
00047B7C                            		even
00047B7C                            Nem_Ring:	incbin	artnem\rings.bin	; rings
00047C70                            		even
00047C70                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
000480E2 00                         		even
000480E2                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
00048748                            		even
00048748                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
000487F8                            		even
000487F8                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0004898A                            		even
0004898A                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
00048A8C                            		even
00048A8C                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
00048B68                            		even
00048B68                            ArtNem_DignlSprng:	incbin	"artnem\Diagonal spring.bin" ; diagonal spring
00048D3C 00                         		even
00048D3C                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
000491B8                            		even
000491B8                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
00049278                            		even
00049278                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
000493EC                            		even
000493EC                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
000496EE                            		even
000496EE                            ; ---------------------------------------------------------------------------
000496EE                            ; Compressed graphics - continue screen
000496EE                            ; ---------------------------------------------------------------------------
000496EE                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0004999E                            		even
0004999E                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
00049BD8                            		even
00049BD8                            ; ---------------------------------------------------------------------------
00049BD8                            ; Compressed graphics - animals
00049BD8                            ; ---------------------------------------------------------------------------
00049BD8                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
00049D30                            		even
00049D30                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
00049E8C                            		even
00049E8C                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0004A008                            		even
0004A008                            Nem_Seal:	incbin	artnem\seal.bin		; seal
0004A124                            		even
0004A124                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0004A25A                            		even
0004A25A                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0004A394                            		even
0004A394                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0004A4F0                            		even
0004A4F0                            ; ---------------------------------------------------------------------------
0004A4F0                            ; Compressed graphics - primary patterns and block mappings
0004A4F0                            ; ---------------------------------------------------------------------------
0004A4F0                            Blk16_GHZ:	incbin	map16\ghz.bin
0004AE04                            		even
0004AE04                            Nem_GHZ:	incbin	artnem\8x8ghz.bin	; GHZ primary patterns
0004C416                            		even
0004C416                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; Title Screen and Ending only
0004DA76                            		even
0004DA76                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; Title Screen and Ending only
0004EE1E                            		even
0004EE1E                            Blk256_GHZ:	incbin	map256\ghz.bin
00050ED8                            		even
00050ED8                            Blk16_TS:	incbin	map16\ts.bin
00050FDA                            		even
00050FDA                            Nem_TS_1st:	incbin	artnem\8x8ts1.bin; GHZ primary patterns
00051C30                            		even
00051C30                            Blk256_TS:	incbin	map256\ts.bin
0005217E                            		even
0005217E                            Blk16_LZ:	incbin	map16\lz.bin
000524A8                            		even
000524A8                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00053FF0                            		even
00053FF0                            Blk256_LZ:	incbin	map256\lz.bin
000567E0                            		even
000567E0                            Blk16_MZ:	incbin	map16\mz.bin
00056FEA                            		even
00056FEA                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0005982E                            		even
0005982E                            Blk256_MZ:	incbin	map256\mz.bin
0005AFEE                            		even
0005AFEE                            Blk16_SLZ:	incbin	map16\slz.bin
0005B7D2                            		even
0005B7D2                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
0005F326                            		even
0005F326                            Blk256_SLZ:	incbin	map256\slz.bin
00061756                            		even
00061756                            Blk16_SYZ:	incbin	map16\syz.bin
000620C4                            		even
000620C4                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
000657F0                            		even
000657F0                            Blk256_SYZ:	incbin	map256\syz.bin
00067BA0                            		even
00067BA0                            Blk16_SBZ:	incbin	map16\sbz.bin
00068A3A                            		even
00068A3A                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0006B1E6                            		even
0006B1E6                            Blk256_SBZ:	incbin	map256\sbz.bin
0006DC36                            		even
0006DC36                            ; ---------------------------------------------------------------------------
0006DC36                            ; Compressed graphics - bosses and ending sequence
0006DC36                            ; ---------------------------------------------------------------------------
0006DC36                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
0006E49A                            		even
0006E49A                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
0006E784                            		even
0006E784                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0006F008                            		even
0006F008                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
0006F834                            		even
0006F834                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
0006FF9C                            		even
0006FF9C                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
0007051C                            		even
0007051C                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
0007063C                            		even
0007063C                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
0007083A                            		even
0007083A                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
00071A18                            		even
00071A18                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
0007235C                            		even
0007235C                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
00072732                            		even
00072732                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
00072CC2                            		even
00072CC2                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
00072F4A                            		even
00072F4A                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
00073548                            		even
00073548                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
000737D0                            		even
000737D0                            		incbin	misc\padding2.bin
000738D4                            		even
000738D4                            MenuslctrART:	incbin	"artkos\Menuslctr.bin"	; art for that soncc 4 menu selecting thingy 
00073A10                            		even
00073A10                            ;The Menu Selector uses the third palette line for the Title Screen.
00073A10                            ;Load it into Flex2, and select the title palette.
00073A10                            ;Change the palette lines to 3, and slide it to 0 in the palettes tab. 
00073A10                            ;The rest is is right here.
00073A10                            ; - Chron Delta
00073A10                            MenuslctrMappings:	incbin	"_maps\Menuslctr.asm"	; mappings for that soncc 4 menu selecting thingy
00073B96                            		even		
00073B96                            ; ---------------------------------------------------------------------------
00073B96                            ; Collision data
00073B96                            ; ---------------------------------------------------------------------------
00073B96                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
00073C96                            		even
00073C96                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00074C96                            		even
00074C96                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00075C96                            		even
00075C96                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
00075E4E 00                         		even
00075E4E                            Col_LZ:		incbin	collide\lz.bin		; LZ index
00075F16                            		even
00075F16                            Col_MZ:		incbin	collide\mz.bin		; MZ index
000760A6                            		even
000760A6                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
0007629A                            		even
0007629A                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
0007648E                            		even
0007648E                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
000766E6                            		even
000766E6                            ; ---------------------------------------------------------------------------
000766E6                            ; Special layouts
000766E6                            ; ---------------------------------------------------------------------------
000766E6                            SS_1:		incbin	sslayout\1.bin
00076960                            		even
00076960                            SS_2:		incbin	sslayout\2.bin
00076D72                            		even
00076D72                            SS_3:		incbin	sslayout\3.bin
000770CE                            		even
000770CE                            SS_4:		incbin	sslayout\4.bin
000775A8                            		even
000775A8                            SS_5:		incbin	sslayout\5.bin
00077A7A                            		even
00077A7A                            SS_6:		incbin	sslayout\6.bin
00077D8A                            		even
00077D8A                            ; ---------------------------------------------------------------------------
00077D8A                            ; Animated uncompressed graphics
00077D8A                            ; ---------------------------------------------------------------------------
00077D8A                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
00077F8A                            		even
00077F8A                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0007838A                            		even
0007838A                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0007880A                            		even
0007880A                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
00078B0A                            		even
00078B0A                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0007910A                            		even
0007910A                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0007940A                            		even
0007940A                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
00079E8A                            		even
00079E8A                            
00079E8A                            ; ---------------------------------------------------------------------------
00079E8A                            ; Level	layout index
00079E8A                            ; ---------------------------------------------------------------------------
00079E8A 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
00079E90 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
00079E96 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
00079E9C 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
00079EA2 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
00079EA8 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
00079EAE 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
00079EB4 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
00079EBA 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
00079EC0 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
00079EC6 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
00079ECC 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
00079ED2 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00079ED8 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00079EDE 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00079EE4 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
00079EEA 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
00079EF0 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
00079EF6 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
00079EFC 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
00079F02 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
00079F08 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
00079F0E 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
00079F14 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
00079F1A 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00079F20 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00079F26 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00079F2C 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00079F32                            
00079F32                            Level_GHZ1:	incbin	levels\ghz1.bin
0007A024                            		even
0007A024 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0007A028                            Level_GHZ2:	incbin	levels\ghz2.bin
0007A0F0                            		even
0007A0F0 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0007A0F4                            Level_GHZ3:	incbin	levels\ghz3.bin
0007A216                            		even
0007A216                            Level_GHZbg:	incbin	levels\ghzbg.bin
0007A238                            		even
0007A238 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0007A23C 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0007A240                            
0007A240                            Level_LZ1:	incbin	levels\lz1.bin
0007A342                            		even
0007A342                            Level_LZbg:	incbin	levels\lzbg.bin
0007A444                            		even
0007A444 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0007A448                            Level_LZ2:	incbin	levels\lz2.bin
0007A4E2                            		even
0007A4E2 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0007A4E6                            Level_LZ3:	incbin	levels\lz3.bin
0007A600                            		even
0007A600 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0007A604                            Level_SBZ3:	incbin	levels\sbz3.bin
0007A6BE                            		even
0007A6BE 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0007A6C2                            
0007A6C2                            Level_MZ1:	incbin	levels\mz1.bin
0007A760                            		even
0007A760                            Level_MZ1bg:	incbin	levels\mz1bg.bin
0007A7DA                            		even
0007A7DA                            Level_MZ2:	incbin	levels\mz2.bin
0007A87E                            		even
0007A87E                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0007A910                            		even
0007A910 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0007A914                            Level_MZ3:	incbin	levels\mz3.bin
0007A9F6                            		even
0007A9F6                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0007AA9A                            		even
0007AA9A 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0007AA9E 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0007AAA2                            
0007AAA2                            Level_SLZ1:	incbin	levels\slz1.bin
0007ABB4                            		even
0007ABB4                            Level_SLZbg:	incbin	levels\slzbg.bin
0007AC2E                            		even
0007AC2E                            Level_SLZ2:	incbin	levels\slz2.bin
0007AD1E                            		even
0007AD1E                            Level_SLZ3:	incbin	levels\slz3.bin
0007AE38                            		even
0007AE38 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0007AE3C                            
0007AE3C                            Level_SYZ1:	incbin	levels\syz1.bin
0007AEF8                            		even
0007AEF8                            Level_SYZbg:	incbin	levels\syzbg.bin
0007AF32                            		even
0007AF32 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0007AF36                            Level_SYZ2:	incbin	levels\syz2.bin
0007B03A                            		even
0007B03A 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0007B03E                            Level_SYZ3:	incbin	levels\syz3.bin
0007B198                            		even
0007B198 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0007B19C 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0007B1A0                            
0007B1A0                            Level_SBZ1:	incbin	levels\sbz1.bin
0007B2C2                            		even
0007B2C2                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0007B300                            		even
0007B300                            Level_SBZ2:	incbin	levels\sbz2.bin
0007B442                            		even
0007B442                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0007B5AC                            		even
0007B5AC 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0007B5B0 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0007B5B4                            Level_End:	incbin	levels\ending.bin
0007B5E4 00                         		even
0007B5E4 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0007B5E8                            
0007B5E8                            ; ---------------------------------------------------------------------------
0007B5E8                            ; Animated uncompressed giant ring graphics
0007B5E8                            ; ---------------------------------------------------------------------------
0007B5E8                            Art_BigRing:	incbin	artunc\bigring.bin
0007C228                            		even
0007C228                            
0007C228                            		incbin	misc\padding3.bin
0007C2C4                            		even
0007C2C4                            
0007C2C4                            ; ---------------------------------------------------------------------------
0007C2C4                            ; Sprite locations index
0007C2C4                            ; ---------------------------------------------------------------------------
0007C2C4 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C2C8 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C2CC 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C2D0 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C2D4 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C2D8 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C2DC 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C2E0 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C2E4 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C2E8 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C2EC 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C2F0 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C2F4 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C2F8 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C2FC 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C300 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C304 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C308 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C30C 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C310 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C314 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C318 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C31C 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C320 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C324 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C328 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C32C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C330 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C334 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0007C338 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0007C33C 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0007C340 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0007C344 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0007C348 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0007C34C 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0007C350 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0007C354 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0007C35A                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0007C864                            		even
0007C864                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0007CE22                            		even
0007CE22                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0007D4DC                            		even
0007D4DC                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0007D94A                            		even
0007D94A                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0007DC8C                            		even
0007DC8C                            ObjPos_LZ3:	incbin	objpos\lz3.bin
0007E26E                            		even
0007E26E                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
0007E706                            		even
0007E706                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
0007E738                            		even
0007E738                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
0007E76A                            		even
0007E76A                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
0007E79C                            		even
0007E79C                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
0007E7CE                            		even
0007E7CE                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
0007E818                            		even
0007E818                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
0007E856                            		even
0007E856                            ObjPos_MZ1:	incbin	objpos\mz1.bin
0007EBC2                            		even
0007EBC2                            ObjPos_MZ2:	incbin	objpos\mz2.bin
0007F06C                            		even
0007F06C                            ObjPos_MZ3:	incbin	objpos\mz3.bin
0007F5E2                            		even
0007F5E2                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
0007FB22                            		even
0007FB22                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
0007FF8A                            		even
0007FF8A                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
0008056C                            		even
0008056C                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
000809F8                            		even
000809F8                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
00080F62                            		even
00080F62                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
00081568                            		even
00081568                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
00081CA6                            		even
00081CA6                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
00082384                            		even
00082384                            ObjPos_FZ:	incbin	objpos\fz.bin
00082396                            		even
00082396                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
000823C8                            		even
000823C8                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
000823FA                            		even
000823FA                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
0008242C                            		even
0008242C                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
0008245E                            		even
0008245E                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
00082490                            		even
00082490                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
000824C8                            		even
000824C8                            ObjPos_End:	incbin	objpos\ending.bin
00082624                            		even
00082624 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
0008262A                            ; ---------------------------------------------------------------------------
0008262A                            		incbin	misc\padding4.bin
00082C54                            		even
00082C54                            
00082C54 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
00082C58 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
00082C5C 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
00082C60 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
00082C64 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
00082C68 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
00082C6C                            ; ---------------------------------------------------------------------------
00082C6C                            ; PSG instruments used in music
00082C6C                            ; ---------------------------------------------------------------------------
00082C6C 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
00082C78 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00082C84 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
00082C90                            PSG1:		incbin	sound\psg1.bin
00082CA7                            PSG2:		incbin	sound\psg2.bin
00082CAE                            PSG3:		incbin	sound\psg3.bin
00082CBF                            PSG4:		incbin	sound\psg4.bin
00082CCA                            PSG6:		incbin	sound\psg6.bin
00082CD9                            PSG5:		incbin	sound\psg5.bin
00082D03                            PSG7:		incbin	sound\psg7.bin
00082D1F                            PSG8:		incbin	sound\psg8.bin
00082D47                            PSG9:		incbin	sound\psg9.bin
00082D58                            
00082D58 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
00082D60                            ; ---------------------------------------------------------------------------
00082D60                            ; Music	Pointers
00082D60                            ; ---------------------------------------------------------------------------
00082D60 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
00082D68 0000 0000 0000 0000        		dc.l Music83, Music84
00082D70 0000 0000 0000 0000        		dc.l Music85, Music86
00082D78 0000 0000 0000 0000        		dc.l Music87, Music88
00082D80 0000 0000 0000 0000        		dc.l Music89, Music8A
00082D88 0000 0000 0000 0000        		dc.l Music8B, Music8C
00082D90 0000 0000 0000 0000        		dc.l Music8D, Music8E
00082D98 0000 0000 0000 0000        		dc.l Music8F, Music90
00082DA0 0000 0000 0000 0000        		dc.l Music91, Music92
00082DA8 0000 0000 0000 0000        		dc.l Music93, Music94
00082DB0 0000 0000 0000 0000        		dc.l Music95, Music96
00082DB8 0000 0000 0000 0000        		dc.l Music97, Music98
00082DC0 0000 0000 0000 0000        		dc.l Music99, Music9A
00082DC8 0000 0000 0000 0000        		dc.l Music9B, Music9C
00082DD0 0000 0000 0000 0000        		dc.l Music9D, Music9E
00082DD8 0000 0000                  		dc.l Music9F
00082DDC                            ; ---------------------------------------------------------------------------
00082DDC                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
00082DDC                            ; ---------------------------------------------------------------------------
00082DDC 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
00082DEC 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
00082DFC 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
00082E0C 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
00082E1C 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
00082E2C 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
00082E3C 9090 9090                  		dc.b $90, $90, $90, $90
00082E40                            
00082E40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00082E40                            
00082E40                            YM_Access_WaitRead:
00082E40 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop off (allow it to continue)
00082E48                            		rept	$10					; EXT: delay for a long enough time to allow the...
00082E48                            		nop						; EXT: '' ...68k pointer to be saved correctly.
00082E48 4E71 4E71 4E71 4E71 4E71+  		endr						; EXT: ''
00082E68                            
00082E68                            sub_71B4C:
00082E68 4DF9 00FF F000             		lea	($FFF000).l,a6
00082E6E                            
00082E6E 41F9 00A0 02EF             		lea	($A00000+YM_Access).l,a0		; EXT: load access address in Z80
00082E74 203C 00A0 0000             		move.l	#$A00000,d0				; EXT: prepare Z80 RAM address in d0 (i.e. start of Cue list address)
00082E7A 33FC 0100 00A1 1100 0839+  		StopZ80						; EXT: request Z80 stop on
00082E8C 4A18                       		tst.b	(a0)+					; EXT: is the Z80 accessing the 68k pointer?
00082E8E 66B0                       		bne.s	YM_Access_WaitRead			; EXT: if so, branch and wait for it to finish...
00082E90 1218                       		move.b	(a0)+,d1				; EXT: load lower byte of pointer
00082E92 1018                       		move.b	(a0)+,d0				; EXT: load upper byte of pointer
00082E94 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop off
00082E9C E148                       		lsl.w	#$08,d0					; EXT: shift upper byte up
00082E9E 1001                       		move.b	d1,d0					; EXT: put lower byte with it
00082EA0 2D40 0010                  		move.l	d0,$10(a6)				; EXT: store the cue address
00082EA4                            
00082EA4 422E 000E                  		clr.b	$E(a6)
00082EA8 4A2E 0003                  		tst.b	3(a6)		; is music paused?
00082EAC 6600 0000                  		bne.w	loc_71E50	; if yes, branch
00082EB0 532E 0001                  		subq.b	#1,1(a6)
00082EB4 6600                       		bne.s	loc_71B9E
00082EB6 4EBA 0000                  		jsr	sub_7260C(pc)
00082EBA                            
00082EBA                            loc_71B9E:
00082EBA 102E 0004                  		move.b	4(a6),d0
00082EBE 6700                       		beq.s	loc_71BA8
00082EC0 4EBA 0000                  		jsr	sub_72504(pc)
00082EC4                            
00082EC4                            loc_71BA8:
00082EC4 4A2E 0024                  		tst.b	$24(a6)
00082EC8 6700                       		beq.s	loc_71BB2
00082ECA 4EBA 0000                  		jsr	sub_7267C(pc)
00082ECE                            
00082ECE                            loc_71BB2:
00082ECE 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
00082ED2 6700                       		beq.s	loc_71BBC	; if not, branch
00082ED4 4EBA 0000                  		jsr	Sound_Play(pc)
00082ED8                            
00082ED8                            loc_71BBC:
00082ED8 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00082EDE 6700                       		beq.s	loc_71BC8
00082EE0 4EBA 0000                  		jsr	Sound_ChkValue(pc)
00082EE4                            
00082EE4                            loc_71BC8:
00082EE4 4BEE 0010                  		lea	$40-$30(a6),a5			; MJ: making correction for flow below
00082EE8 7E01                       		moveq	#2-1,d7				; MJ: set number of PCM channels to run
00082EEA 1D7C 007F 0008             		move.b	#$80-1,$08(a6)			; MJ: reset as PCM channel
00082EF0                            
00082EF0                            SD_NextPCM:
00082EF0 522E 0008                  		addq.b	#$01,$08(a6)			; MJ: advance PCM channel ID
00082EF4 4BED 0030                  		lea	$30(a5),a5			; MJ: advance to next channel
00082EF8 4A15                       		tst.b	(a5)
00082EFA 6A00                       		bpl.s	loc_71BD4
00082EFC 4EBA 0000                  		jsr	sub_71C4E(pc)
00082F00                            
00082F00                            loc_71BD4:
00082F00 51CF FFEE                  		dbf	d7,SD_NextPCM			; MJ: repeat for number of PCM channels available
00082F04 422E 0008                  		clr.b	8(a6)
00082F08 7E05                       		moveq	#5,d7
00082F0A                            
00082F0A                            loc_71BDA:
00082F0A DAFC 0030                  		adda.w	#$30,a5
00082F0E 4A15                       		tst.b	(a5)
00082F10 6A00                       		bpl.s	loc_71BE6
00082F12 4EBA 0000                  		jsr	sub_71CCA(pc)
00082F16                            
00082F16                            loc_71BE6:
00082F16 51CF FFF2                  		dbf	d7,loc_71BDA
00082F1A                            
00082F1A 7E02                       		moveq	#2,d7
00082F1C                            
00082F1C                            loc_71BEC:
00082F1C DAFC 0030                  		adda.w	#$30,a5
00082F20 4A15                       		tst.b	(a5)
00082F22 6A00                       		bpl.s	loc_71BF8
00082F24 4EBA 0000                  		jsr	sub_72850(pc)
00082F28                            
00082F28                            loc_71BF8:
00082F28 51CF FFF2                  		dbf	d7,loc_71BEC
00082F2C                            
00082F2C 1D7C 0080 000E             		move.b	#$80,$E(a6)
00082F32 7E02                       		moveq	#2,d7
00082F34                            
00082F34                            loc_71C04:
00082F34 DAFC 0030                  		adda.w	#$30,a5
00082F38 4A15                       		tst.b	(a5)
00082F3A 6A00                       		bpl.s	loc_71C10
00082F3C 4EBA 0000                  		jsr	sub_71CCA(pc)
00082F40                            
00082F40                            loc_71C10:
00082F40 51CF FFF2                  		dbf	d7,loc_71C04
00082F44                            
00082F44 7E02                       		moveq	#2,d7
00082F46                            
00082F46                            loc_71C16:
00082F46 DAFC 0030                  		adda.w	#$30,a5
00082F4A 4A15                       		tst.b	(a5)
00082F4C 6A00                       		bpl.s	loc_71C22
00082F4E 4EBA 0000                  		jsr	sub_72850(pc)
00082F52                            
00082F52                            loc_71C22:
00082F52 51CF FFF2                  		dbf	d7,loc_71C16
00082F56 1D7C 0040 000E             		move.b	#$40,$E(a6)
00082F5C DAFC 0030                  		adda.w	#$30,a5
00082F60 4A15                       		tst.b	(a5)
00082F62 6A00                       		bpl.s	loc_71C38
00082F64 4EBA 0000                  		jsr	sub_71CCA(pc)
00082F68                            
00082F68                            loc_71C38:
00082F68 DAFC 0030                  		adda.w	#$30,a5
00082F6C 4A15                       		tst.b	(a5)
00082F6E 6A00                       		bpl.s	loc_71C44
00082F70 4EBA 0000                  		jsr	sub_72850(pc)
00082F74                            
00082F74                            loc_71C44:
00082F74 6000                       		bra.s	YM_Access_TestWrite			; EXT: jump into the access loop
00082F76                            
00082F76                            YM_Access_WaitWrite:
00082F76 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop off (allow it to continue)
00082F7E                            		rept	$10					; EXT: delay for a long enough time to let the Z80...
00082F7E                            		nop						; EXT: '' ...finish writing the 68k pointer, so it doesn't...
00082F7E 4E71 4E71 4E71 4E71 4E71+  		endr						; EXT: '' ...clash with 68k's pointer writing.
00082F9E                            
00082F9E                            YM_Access_TestWrite:
00082F9E 41F9 00A0 02EF             		lea	($A00000+YM_Access).l,a0		; EXT: load access address in Z80
00082FA4 43EE 0013                  		lea	$13(a6),a1				; EXT: load the 68k's pointer finish location
00082FA8 33FC 0100 00A1 1100 0839+  		StopZ80						; EXT: request Z80 stop on
00082FBA 4A18                       		tst.b	(a0)+					; EXT: is the Z80 accessing the 68k pointer?
00082FBC 66B8                       		bne.s	YM_Access_WaitWrite			; EXT: if so, branch and wait for it to finish...
00082FBE 10D1                       		move.b	(a1),(a0)+				; EXT: save lower byte of pointer
00082FC0 10A1                       		move.b	-(a1),(a0)				; EXT: save upper byte of pointer
00082FC2 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop off
00082FCA                            
00082FCA 4E75                       		rts	
00082FCC                            
00082FCC                            ; End of function sub_71B4C
00082FCC                            
00082FCC                            
00082FCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00082FCC                            
00082FCC                            
00082FCC                            sub_71C4E:				; XREF: sub_71B4C
00082FCC 532D 000E                  		subq.b	#1,$E(a5)
00082FD0 6600 0000                  		bne.w	locret_71CAA
00082FD4 286D 0004                  		movea.l	4(a5),a4
00082FD8                            
00082FD8                            loc_71C5E:
00082FD8 7A00                       		moveq	#0,d5
00082FDA 1A1C                       		move.b	(a4)+,d5
00082FDC 0C05 00E0                  		cmpi.b	#-$20,d5
00082FE0 6500                       		bcs.s	loc_71C6E
00082FE2 4EBA 0000                  		jsr	sub_72A5A(pc)
00082FE6 60F0                       		bra.s	loc_71C5E
00082FE8                            ; ===========================================================================
00082FE8                            
00082FE8                            loc_71C6E:
00082FE8 4A05                       		tst.b	d5
00082FEA 6A00                       		bpl.s	loc_71C84
00082FEC 1B45 0010                  		move.b	d5,$10(a5)
00082FF0 1A1C                       		move.b	(a4)+,d5
00082FF2 6A00                       		bpl.s	loc_71C84
00082FF4 534C                       		subq.w	#1,a4
00082FF6 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00082FFC 6000                       		bra.s	loc_71C88
00082FFE                            ; ===========================================================================
00082FFE                            
00082FFE                            loc_71C84:
00082FFE 4EBA 0000                  		jsr	sub_71D40(pc)
00083002                            
00083002                            loc_71C88:
00083002 2B4C 0004                  		move.l	a4,4(a5)
00083006 0815 0002                  		btst	#2,(a5)
0008300A 6600                       		bne.s	locret_71CAA
0008300C 7000                       		moveq	#0,d0
0008300E 102D 0010                  		move.b	$10(a5),d0
00083012 0400 0080                  		subi.b	#$80,d0					; MJ: minus 80
00083016 D040                       		add.w	d0,d0					; MJ: multiply by 4 (long-word size)
00083018 D040                       		add.w	d0,d0					; MJ: ''
0008301A 48E7 00C0                  		movem.l	a0/a1,-(sp)				; MJ: store register data
0008301E 41F9 0000 0000             		lea	(SampleList).l,a0			; MJ: load sample list
00083024 2070 0000                  		move.l	(a0,d0.w),a0				; MJ: load correct sample z80 pointer address
00083028                            
00083028 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)				; MJ: is this PCM 1?
0008302E 6600                       		bne.s	WritePCM2				; MJ: if not, branch for PCM 2 writing
00083030                            
00083030                            	; --- Writing to PCM 1 ---
00083030                            
00083030 33FC 0100 00A1 1100 0839+  		StopZ80
00083042 43F9 00A0 02E6             		lea	($A00000+PCM1_Sample).l,a1			; MJ: load PCM 1 slot address
00083048 12D8                       		move.b	(a0)+,(a1)+					; MJ: set address of sample
0008304A 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
0008304C 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
0008304E 13FC 0064 00A0 0047        		move.b	#(CUPCM1_NewSample&$FF),($A00000+CU_Stack).l	; MJ: set routine to run
00083056 13FC 0002 00A0 0048        		move.b	#(CUPCM1_NewSample>>$08),($A00000+CU_Stack+1).l	; MJ: ''
0008305E 13FC 00C9 00A0 01D2        		move.b	#%11001001,($A00000+CUPCM1_RET).l		; MJ: change "NOP" to "RET"
00083066 33FC 0000 00A1 1100        		StartZ80
0008306E                            
0008306E 4CDF 0300                  		movem.l	(sp)+,a0/a1				; MJ: restore register data
00083072                            
00083072                            locret_71CAA:
00083072 4E75                       		rts						; MJ: return
00083074                            
00083074                            	; --- Writing to PCM 2 ---
00083074                            
00083074                            WritePCM2:
00083074 33FC 0100 00A1 1100 0839+  		StopZ80
00083086 43F9 00A0 02E9             		lea	($A00000+PCM2_Sample).l,a1			; MJ: load PCM 2 slot address
0008308C 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
0008308E 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00083090 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00083092 13FC 0028 00A0 01D3        		move.b	#%00101000,($A00000+CUPCM2_RET).l		; change "JR NZ" to "JR Z"
0008309A 33FC 0000 00A1 1100        		StartZ80
000830A2                            
000830A2 4CDF 0300                  		movem.l	(sp)+,a0/a1				; MJ: restore register data
000830A6 4E75                       		rts						; MJ: return
000830A8                            
000830A8                            ; ===========================================================================
000830A8                            
000830A8                            sub_71CCA:				; XREF: sub_71B4C
000830A8 532D 000E                  		subq.b	#1,$E(a5)
000830AC 6600                       		bne.s	loc_71CE0
000830AE 0895 0004                  		bclr	#4,(a5)
000830B2 4EBA 0000                  		jsr	sub_71CEC(pc)
000830B6 4EBA 0000                  		jsr	sub_71E18(pc)
000830BA 6000 0000                  		bra.w	loc_726E2
000830BE                            ; ===========================================================================
000830BE                            
000830BE                            loc_71CE0:
000830BE 4EBA 0000                  		jsr	sub_71D9E(pc)
000830C2 4EBA 0000                  		jsr	sub_71DC6(pc)
000830C6 6000 0000                  		bra.w	loc_71E24
000830CA                            ; End of function sub_71CCA
000830CA                            
000830CA                            
000830CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000830CA                            
000830CA                            
000830CA                            sub_71CEC:				; XREF: sub_71CCA
000830CA 286D 0004                  		movea.l	4(a5),a4
000830CE 0895 0001                  		bclr	#1,(a5)
000830D2                            
000830D2                            loc_71CF4:
000830D2 7A00                       		moveq	#0,d5
000830D4 1A1C                       		move.b	(a4)+,d5
000830D6 0C05 00E0                  		cmpi.b	#-$20,d5
000830DA 6500                       		bcs.s	loc_71D04
000830DC 4EBA 0000                  		jsr	sub_72A5A(pc)
000830E0 60F0                       		bra.s	loc_71CF4
000830E2                            ; ===========================================================================
000830E2                            
000830E2                            loc_71D04:
000830E2 4EBA 0000                  		jsr	sub_726FE(pc)
000830E6 4A05                       		tst.b	d5
000830E8 6A00                       		bpl.s	loc_71D1A
000830EA 4EBA 0000                  		jsr	sub_71D22(pc)
000830EE 1A1C                       		move.b	(a4)+,d5
000830F0 6A00                       		bpl.s	loc_71D1A
000830F2 534C                       		subq.w	#1,a4
000830F4 6000 0000                  		bra.w	sub_71D60
000830F8                            ; ===========================================================================
000830F8                            
000830F8                            loc_71D1A:
000830F8 4EBA 0000                  		jsr	sub_71D40(pc)
000830FC 6000 0000                  		bra.w	sub_71D60
00083100                            ; End of function sub_71CEC
00083100                            
00083100                            
00083100                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083100                            
00083100                            
00083100                            sub_71D22:				; XREF: sub_71CEC
00083100 0405 0080                  		subi.b	#$80,d5
00083104 6700                       		beq.s	loc_71D58
00083106 DA2D 0008                  		add.b	8(a5),d5
0008310A 0245 007F                  		andi.w	#$7F,d5
0008310E E34D                       		lsl.w	#1,d5
00083110 41FA 0000                  		lea	word_72790(pc),a0
00083114 3C30 5000                  		move.w	(a0,d5.w),d6
00083118 3B46 0010                  		move.w	d6,$10(a5)
0008311C 4E75                       		rts	
0008311E                            ; End of function sub_71D22
0008311E                            
0008311E                            
0008311E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008311E                            
0008311E                            
0008311E                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0008311E 1005                       		move.b	d5,d0
00083120 122D 0002                  		move.b	2(a5),d1
00083124                            
00083124                            loc_71D46:
00083124 5301                       		subq.b	#1,d1
00083126 6700                       		beq.s	loc_71D4E
00083128 D005                       		add.b	d5,d0
0008312A 60F8                       		bra.s	loc_71D46
0008312C                            ; ===========================================================================
0008312C                            
0008312C                            loc_71D4E:
0008312C 1B40 000F                  		move.b	d0,$F(a5)
00083130 1B40 000E                  		move.b	d0,$E(a5)
00083134 4E75                       		rts	
00083136                            ; End of function sub_71D40
00083136                            
00083136                            ; ===========================================================================
00083136                            
00083136                            loc_71D58:				; XREF: sub_71D22
00083136 08D5 0001                  		bset	#1,(a5)
0008313A 426D 0010                  		clr.w	$10(a5)
0008313E                            
0008313E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008313E                            
0008313E                            
0008313E                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
0008313E 2B4C 0004                  		move.l	a4,4(a5)
00083142 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00083148 0815 0004                  		btst	#4,(a5)
0008314C 6600                       		bne.s	locret_71D9C
0008314E 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
00083154 422D 000C                  		clr.b	$C(a5)
00083158 0815 0003                  		btst	#3,(a5)
0008315C 6700                       		beq.s	locret_71D9C
0008315E 206D 0014                  		movea.l	$14(a5),a0
00083162 1B58 0018                  		move.b	(a0)+,$18(a5)
00083166 1B58 0019                  		move.b	(a0)+,$19(a5)
0008316A 1B58 001A                  		move.b	(a0)+,$1A(a5)
0008316E 1018                       		move.b	(a0)+,d0
00083170 E208                       		lsr.b	#1,d0
00083172 1B40 001B                  		move.b	d0,$1B(a5)
00083176 426D 001C                  		clr.w	$1C(a5)
0008317A                            
0008317A                            locret_71D9C:
0008317A 4E75                       		rts	
0008317C                            ; End of function sub_71D60
0008317C                            
0008317C                            
0008317C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008317C                            
0008317C                            
0008317C                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
0008317C 4A2D 0012                  		tst.b	$12(a5)
00083180 6700                       		beq.s	locret_71DC4
00083182 532D 0012                  		subq.b	#1,$12(a5)
00083186 6600                       		bne.s	locret_71DC4
00083188 08D5 0001                  		bset	#1,(a5)
0008318C 4A2D 0001                  		tst.b	1(a5)
00083190 6B00 0000                  		bmi.w	loc_71DBE
00083194 4EBA 0000                  		jsr	sub_726FE(pc)
00083198 584F                       		addq.w	#4,sp
0008319A 4E75                       		rts	
0008319C                            ; ===========================================================================
0008319C                            
0008319C                            loc_71DBE:
0008319C 4EBA 0000                  		jsr	sub_729A0(pc)
000831A0 584F                       		addq.w	#4,sp
000831A2                            
000831A2                            locret_71DC4:
000831A2 4E75                       		rts	
000831A4                            ; End of function sub_71D9E
000831A4                            
000831A4                            
000831A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000831A4                            
000831A4                            
000831A4                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
000831A4 584F                       		addq.w	#4,sp
000831A6 0815 0003                  		btst	#3,(a5)
000831AA 6700                       		beq.s	locret_71E16
000831AC 4A2D 0018                  		tst.b	$18(a5)
000831B0 6700                       		beq.s	loc_71DDA
000831B2 532D 0018                  		subq.b	#1,$18(a5)
000831B6 4E75                       		rts	
000831B8                            ; ===========================================================================
000831B8                            
000831B8                            loc_71DDA:
000831B8 532D 0019                  		subq.b	#1,$19(a5)
000831BC 6700                       		beq.s	loc_71DE2
000831BE 4E75                       		rts	
000831C0                            ; ===========================================================================
000831C0                            
000831C0                            loc_71DE2:
000831C0 206D 0014                  		movea.l	$14(a5),a0
000831C4 1B68 0001 0019             		move.b	1(a0),$19(a5)
000831CA 4A2D 001B                  		tst.b	$1B(a5)
000831CE 6600                       		bne.s	loc_71DFE
000831D0 1B68 0003 001B             		move.b	3(a0),$1B(a5)
000831D6 442D 001A                  		neg.b	$1A(a5)
000831DA 4E75                       		rts	
000831DC                            ; ===========================================================================
000831DC                            
000831DC                            loc_71DFE:
000831DC 532D 001B                  		subq.b	#1,$1B(a5)
000831E0 1C2D 001A                  		move.b	$1A(a5),d6
000831E4 4886                       		ext.w	d6
000831E6 DC6D 001C                  		add.w	$1C(a5),d6
000831EA 3B46 001C                  		move.w	d6,$1C(a5)
000831EE DC6D 0010                  		add.w	$10(a5),d6
000831F2 594F                       		subq.w	#4,sp
000831F4                            
000831F4                            locret_71E16:
000831F4 4E75                       		rts	
000831F6                            ; End of function sub_71DC6
000831F6                            
000831F6                            
000831F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000831F6                            
000831F6                            
000831F6                            sub_71E18:				; XREF: sub_71CCA
000831F6 0815 0001                  		btst	#1,(a5)
000831FA 6600                       		bne.s	locret_71E48
000831FC 3C2D 0010                  		move.w	$10(a5),d6
00083200 6700                       		beq.s	loc_71E4A
00083202                            
00083202                            loc_71E24:				; XREF: sub_71CCA
00083202 102D 001E                  		move.b	$1E(a5),d0
00083206 4880                       		ext.w	d0
00083208 DC40                       		add.w	d0,d6
0008320A 0815 0002                  		btst	#2,(a5)
0008320E 6600                       		bne.s	locret_71E48
00083210 3206                       		move.w	d6,d1
00083212 E049                       		lsr.w	#8,d1
00083214 103C 00A4                  		move.b	#-$5C,d0
00083218 4EBA 0000                  		jsr	sub_72722(pc)
0008321C 1206                       		move.b	d6,d1
0008321E 103C 00A0                  		move.b	#-$60,d0
00083222 4EBA 0000                  		jsr	sub_72722(pc)
00083226                            
00083226                            locret_71E48:
00083226 4E75                       		rts	
00083228                            ; ===========================================================================
00083228                            
00083228                            loc_71E4A:
00083228 08D5 0001                  		bset	#1,(a5)
0008322C 4E75                       		rts	
0008322E                            ; End of function sub_71E18
0008322E                            
0008322E                            ; ===========================================================================
0008322E                            
0008322E                            loc_71E50:				; XREF: sub_71B4C
0008322E 6B00                       		bmi.s	loc_71E94
00083230 0C2E 0002 0003             		cmpi.b	#2,3(a6)
00083236 6700 0000                  		beq.w	loc_71EFE
0008323A 1D7C 0002 0003             		move.b	#2,3(a6)
00083240 7602                       		moveq	#2,d3
00083242 103C 00B4                  		move.b	#-$4C,d0
00083246 7200                       		moveq	#0,d1
00083248                            
00083248                            loc_71E6A:
00083248 4EBA 0000                  		jsr	sub_7272E(pc)
0008324C 4EBA 0000                  		jsr	sub_72764(pc)
00083250 5200                       		addq.b	#1,d0
00083252 51CB FFF4                  		dbf	d3,loc_71E6A
00083256                            
00083256 7602                       		moveq	#2,d3
00083258 7028                       		moveq	#$28,d0
0008325A                            
0008325A                            loc_71E7C:
0008325A 1203                       		move.b	d3,d1
0008325C 4EBA 0000                  		jsr	sub_7272E(pc)
00083260 5801                       		addq.b	#4,d1
00083262 4EBA 0000                  		jsr	sub_7272E(pc)
00083266 51CB FFF2                  		dbf	d3,loc_71E7C
0008326A                            
0008326A 4EBA 0000                  		jsr	sub_729B6(pc)
0008326E 6000 FD04                  		bra.w	loc_71C44
00083272                            ; ===========================================================================
00083272                            
00083272                            loc_71E94:				; XREF: loc_71E50
00083272 422E 0003                  		clr.b	3(a6)
00083276 7630                       		moveq	#$30,d3
00083278 4BEE 0040                  		lea	$40(a6),a5
0008327C 7807                       		moveq	#7,d4					; MJ: number of YM2612 based channels
0008327E                            
0008327E                            loc_71EA0:
0008327E 0815 0007                  		btst	#7,(a5)
00083282 6700                       		beq.s	loc_71EB8
00083284 0815 0002                  		btst	#2,(a5)
00083288 6600                       		bne.s	loc_71EB8
0008328A 103C 00B4                  		move.b	#-$4C,d0
0008328E 122D 000A                  		move.b	$A(a5),d1
00083292 4EBA 0000                  		jsr	sub_72722(pc)
00083296                            
00083296                            loc_71EB8:
00083296 DAC3                       		adda.w	d3,a5
00083298 51CC FFE4                  		dbf	d4,loc_71EA0
0008329C                            
0008329C 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
000832A0 7802                       		moveq	#2,d4
000832A2                            
000832A2                            loc_71EC4:
000832A2 0815 0007                  		btst	#7,(a5)
000832A6 6700                       		beq.s	loc_71EDC
000832A8 0815 0002                  		btst	#2,(a5)
000832AC 6600                       		bne.s	loc_71EDC
000832AE 103C 00B4                  		move.b	#-$4C,d0
000832B2 122D 000A                  		move.b	$A(a5),d1
000832B6 4EBA 0000                  		jsr	sub_72722(pc)
000832BA                            
000832BA                            loc_71EDC:
000832BA DAC3                       		adda.w	d3,a5
000832BC 51CC FFE4                  		dbf	d4,loc_71EC4
000832C0                            
000832C0 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000832C4 0815 0007                  		btst	#7,(a5)
000832C8 6700                       		beq.s	loc_71EFE
000832CA 0815 0002                  		btst	#2,(a5)
000832CE 6600                       		bne.s	loc_71EFE
000832D0 103C 00B4                  		move.b	#-$4C,d0
000832D4 122D 000A                  		move.b	$A(a5),d1
000832D8 4EBA 0000                  		jsr	sub_72722(pc)
000832DC                            
000832DC                            loc_71EFE:
000832DC 6000 FC96                  		bra.w	loc_71C44
000832E0                            
000832E0                            ; ---------------------------------------------------------------------------
000832E0                            ; Subroutine to	play a sound or	music track
000832E0                            ; ---------------------------------------------------------------------------
000832E0                            
000832E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000832E0                            
000832E0                            
000832E0                            Sound_Play:				; XREF: sub_71B4C
000832E0 2079 0008 2C54             		movea.l	(Go_SoundTypes).l,a0
000832E6 43EE 000A                  		lea	$A(a6),a1	; load music track number
000832EA 1616                       		move.b	0(a6),d3
000832EC 7802                       		moveq	#2,d4
000832EE                            
000832EE                            loc_71F12:
000832EE 1011                       		move.b	(a1),d0		; move track number to d0
000832F0 1200                       		move.b	d0,d1
000832F2 4219                       		clr.b	(a1)+
000832F4 0400 0081                  		subi.b	#$81,d0
000832F8 6500                       		bcs.s	loc_71F3E
000832FA 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00083300 6700                       		beq.s	loc_71F2C
00083302 1D41 000A                  		move.b	d1,$A(a6)
00083306 6000                       		bra.s	loc_71F3E
00083308                            ; ===========================================================================
00083308                            
00083308                            loc_71F2C:
00083308 0240 007F                  		andi.w	#$7F,d0
0008330C 1430 0000                  		move.b	(a0,d0.w),d2
00083310 B403                       		cmp.b	d3,d2
00083312 6500                       		bcs.s	loc_71F3E
00083314 1602                       		move.b	d2,d3
00083316 1D41 0009                  		move.b	d1,9(a6)	; set music flag
0008331A                            
0008331A                            loc_71F3E:
0008331A 51CC FFD2                  		dbf	d4,loc_71F12
0008331E                            
0008331E 4A03                       		tst.b	d3
00083320 6B00                       		bmi.s	locret_71F4A
00083322 1C83                       		move.b	d3,0(a6)
00083324                            
00083324                            locret_71F4A:
00083324 4E75                       		rts	
00083326                            ; End of function Sound_Play
00083326                            
00083326                            
00083326                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083326                            
00083326                            
00083326                            Sound_ChkValue:				; XREF: sub_71B4C
00083326 7E00                       		moveq	#0,d7
00083328 1E2E 0009                  		move.b	9(a6),d7
0008332C 6700 0000                  		beq.w	Sound_E4
00083330 6A00                       		bpl.s	locret_71F8C
00083332 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
00083338 0C07 009F                  		cmpi.b	#$9F,d7
0008333C 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
00083340 0C07 00A0                  		cmpi.b	#$A0,d7
00083344 6500 0000                  		bcs.w	locret_71F8C
00083348 0C07 00CF                  		cmpi.b	#$CF,d7
0008334C 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
00083350 0C07 00D0                  		cmpi.b	#$D0,d7
00083354 6500 0000                  		bcs.w	locret_71F8C
00083358 0C07 00D1                  		cmpi.b	#$D1,d7
0008335C 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
00083360 0C07 00DF                  		cmpi.b	#$DF,d7
00083364 6500 0000                  		blo.w	Sound_D1toDF	; sound	$D1-$DF
00083368 0C07 00E4                  		cmpi.b	#$E4,d7
0008336C 6300                       		bls.s	Sound_E0toE4	; sound	$E0-$E4
0008336E                            
0008336E                            locret_71F8C:
0008336E 4E75                       		rts	
00083370                            ; ===========================================================================
00083370                            
00083370                            Sound_E0toE4:				; XREF: Sound_ChkValue
00083370 0407 00E0                  		subi.b	#$E0,d7
00083374 E54F                       		lsl.w	#2,d7
00083376 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
0008337A                            ; ===========================================================================
0008337A                            
0008337A                            Sound_ExIndex:
0008337A 6000 0000                  		bra.w	Sound_E0
0008337E                            ; ===========================================================================
0008337E 6000 0000                  		bra.w	Sound_E1
00083382                            ; ===========================================================================
00083382 6000 0000                  		bra.w	Sound_E2
00083386                            ; ===========================================================================
00083386 6000 0000                  		bra.w	Sound_E3
0008338A                            ; ===========================================================================
0008338A 6000 0000                  		bra.w	Sound_E4
0008338E                            ; ===========================================================================
0008338E                            ; ---------------------------------------------------------------------------
0008338E                            ; Play "Say-gaa" PCM sound
0008338E                            ; ---------------------------------------------------------------------------
0008338E                            
0008338E                            Sound_E1:
0008338E 33FC 0100 00A1 1100 0839+  		StopZ80						; MJ: request Z80 stop "ON"
000833A0 45F9 0000 0000             		lea	(SegaPCM).l,a2				; MJ: load sample address
000833A6 47F9 00A0 4000             		lea	($A04000).l,a3				; MJ: load YM2612 port
000833AC 16FC 002A                  		move.b	#$2A,(a3)+				; MJ: set YM2612 address to the PCM data port
000833B0 283C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM)-$01,d4		; MJ: prepare size
000833B6 3604                       		move.w	d4,d3					; MJ: get lower word size
000833B8 4844                       		swap	d4					; MJ: get upper word size
000833BA                            
000833BA                            PlayPCM_Loop:
000833BA 169A                       		move.b	(a2)+,(a3)				; MJ: save sample data to port
000833BC 702B                       		moveq	#$2B,d0					; MJ: set delay time
000833BE 51C8 FFFE                  		dbf	d0,*					; MJ: delay...
000833C2 51CB FFF6                  		dbf	d3,PlayPCM_Loop				; MJ: repeat til done
000833C6 51CC FFF2                  		dbf	d4,PlayPCM_Loop				; MJ: ''
000833CA 16BC 0080                  		move.b	#$80,(a3)				; MJ: save mute data to port
000833CE 584F                       		addq.w	#$04,sp					; MJ: skip return address
000833D0 534B                       		subq.w	#$01,a3					; MJ: move back to address port
000833D2 4A13                       		tst.b	(a3)					; MJ: is the YM2612 busy?
000833D4 6BFC                       		bmi.s	*-$02					; MJ: if so, branch and recheck
000833D6 16BC 002A                  		move.b	#$2A,(a3)				; MJ: write address (set it back to DAC port for the Z80)
000833DA 33FC 0000 00A1 1100        		StartZ80					; MJ: request Z80 stop "OFF"
000833E2 4E75                       		rts						; MJ: return
000833E4                            
000833E4                            ; ===========================================================================
000833E4                            ; ---------------------------------------------------------------------------
000833E4                            ; Play music track $81-$9F
000833E4                            ; ---------------------------------------------------------------------------
000833E4                            
000833E4                            Sound_81to9F:				; XREF: Sound_ChkValue
000833E4                            
000833E4                            
000833E4 33FC 0100 00A1 1100 0839+  		StopZ80
000833F6 41F9 0000 0000             		lea	(StopSample).l,a0				; MJ: load stop sample address
000833FC 43F9 00A0 02E6             		lea	($A00000+PCM1_Sample).l,a1			; MJ: load PCM 1 slot address
00083402 12D8                       		move.b	(a0)+,(a1)+					; MJ: set address of sample
00083404 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00083406 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00083408 13FC 0064 00A0 0047        		move.b	#(CUPCM1_NewSample&$FF),($A00000+CU_Stack).l	; MJ: set routine to run
00083410 13FC 0002 00A0 0048        		move.b	#(CUPCM1_NewSample>>$08),($A00000+CU_Stack+1).l	; MJ: ''
00083418 13FC 00C9 00A0 01D2        		move.b	#%11001001,($A00000+CUPCM1_RET).l		; MJ: change "NOP" to "RET"
00083420 41F9 0000 0000             		lea	(StopSample).l,a0				; MJ: load stop sample address
00083426 43F9 00A0 02E9             		lea	($A00000+PCM2_Sample).l,a1			; MJ: load PCM 2 slot address
0008342C 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
0008342E 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00083430 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00083432 13FC 0028 00A0 01D3        		move.b	#%00101000,($A00000+CUPCM2_RET).l		; MJ: change "JR NZ" to "JR Z"
0008343A 33FC 0000 00A1 1100        		StartZ80
00083442                            
00083442                            
00083442                            
00083442 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
00083446 6600                       		bne.s	loc_72024	; if not, branch
00083448 4A2E 0027                  		tst.b	$27(a6)
0008344C 6600 0000                  		bne.w	loc_721B6
00083450 4BEE 0040                  		lea	$40(a6),a5
00083454 700A                       		moveq	#10,d0					; MJ: number of channels in total
00083456                            
00083456                            loc_71FE6:
00083456 0895 0002                  		bclr	#2,(a5)
0008345A DAFC 0030                  		adda.w	#$30,a5
0008345E 51C8 FFF6                  		dbf	d0,loc_71FE6
00083462                            
00083462 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
00083466 7005                       		moveq	#5,d0
00083468                            
00083468                            loc_71FF8:
00083468 0895 0007                  		bclr	#7,(a5)
0008346C DAFC 0030                  		adda.w	#$30,a5
00083470 51C8 FFF6                  		dbf	d0,loc_71FF8
00083474 4216                       		clr.b	0(a6)
00083476 204E                       		movea.l	a6,a0
00083478 43EE 03D0                  		lea	$3D0(a6),a1				; MJ: new SFX location
0008347C 303C 0087                  		move.w	#$87,d0
00083480                            
00083480                            loc_72012:
00083480 22D8                       		move.l	(a0)+,(a1)+
00083482 51C8 FFFC                  		dbf	d0,loc_72012
00083486                            
00083486 1D7C 0080 0027             		move.b	#$80,$27(a6)
0008348C 4216                       		clr.b	0(a6)
0008348E 6000                       		bra.s	loc_7202C
00083490                            ; ===========================================================================
00083490                            
00083490                            loc_72024:
00083490 422E 0027                  		clr.b	$27(a6)
00083494 422E 0026                  		clr.b	$26(a6)
00083498                            
00083498                            loc_7202C:
00083498 4EBA 0000                  		jsr	sub_725CA(pc)
0008349C 2879 0008 2C64             		movea.l	(off_719A0).l,a4
000834A2 0407 0081                  		subi.b	#$81,d7
000834A6 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
000834AC 2879 0008 2C5C             		movea.l	(Go_MusicIndex).l,a4
000834B2 E54F                       		lsl.w	#2,d7
000834B4 2874 7000                  		movea.l	(a4,d7.w),a4
000834B8 7000                       		moveq	#0,d0
000834BA 3014                       		move.w	(a4),d0
000834BC D08C                       		add.l	a4,d0
000834BE 2D40 0018                  		move.l	d0,$18(a6)
000834C2 102C 0005                  		move.b	5(a4),d0
000834C6 1D40 0028                  		move.b	d0,$28(a6)
000834CA 4A2E 002A                  		tst.b	$2A(a6)
000834CE 6700                       		beq.s	loc_72068
000834D0 102E 0029                  		move.b	$29(a6),d0
000834D4                            
000834D4                            loc_72068:
000834D4 1D40 0002                  		move.b	d0,2(a6)
000834D8 1D40 0001                  		move.b	d0,1(a6)
000834DC 7200                       		moveq	#0,d1
000834DE 264C                       		movea.l	a4,a3
000834E0 5C4C                       		addq.w	#6,a4
000834E2 7E00                       		moveq	#0,d7
000834E4 1E2B 0002                  		move.b	2(a3),d7
000834E8 6700 0000                  		beq.w	loc_72114
000834EC 5307                       		subq.b	#1,d7
000834EE 123C 00C0                  		move.b	#-$40,d1
000834F2 182B 0004                  		move.b	4(a3),d4
000834F6 7C30                       		moveq	#$30,d6
000834F8 1A3C 0001                  		move.b	#1,d5
000834FC 43EE 0040                  		lea	$40(a6),a1
00083500 45FA 0000                  		lea	byte_721BA(pc),a2
00083504                            
00083504                            loc_72098:
00083504 08D1 0007                  		bset	#7,(a1)
00083508 135A 0001                  		move.b	(a2)+,1(a1)
0008350C 1344 0002                  		move.b	d4,2(a1)
00083510 1346 000D                  		move.b	d6,$D(a1)
00083514 1341 000A                  		move.b	d1,$A(a1)
00083518 1345 000E                  		move.b	d5,$E(a1)
0008351C 7000                       		moveq	#0,d0
0008351E 3340 0010                  		move.w	d0,$10(a1)				; MJ: clear FM's frequency (ensures no frequency writing)
00083522 301C                       		move.w	(a4)+,d0
00083524 D08B                       		add.l	a3,d0
00083526 2340 0004                  		move.l	d0,4(a1)
0008352A 335C 0008                  		move.w	(a4)+,8(a1)
0008352E D2C6                       		adda.w	d6,a1
00083530 51CF FFD2                  		dbf	d7,loc_72098
00083534 702B                       		moveq	#$2B,d0					; MJ: set YM2612 address to DAC/FM6 switch
00083536 123C 0080                  		move.b	#%10000000,d1				; MJ: set to turn DAC on
0008353A 0C2B 0008 0002             		cmpi.b	#8,2(a3)				; MJ: changed to 8 (8 = 6FM channels, no DAC)
00083540 6600                       		bne.s	loc_720D8
00083542                            	;	moveq	#$2B,d0					; MJ: removed...
00083542 7200                       		moveq	#0,d1
00083544 4EBA 0000                  		jsr	sub_7272E(pc)
00083548 6000 0000                  		bra.w	loc_72114
0008354C                            ; ===========================================================================
0008354C                            
0008354C                            loc_720D8:
0008354C 4EBA 0000                  		jsr	sub_7272E(pc)				; MJ: added... (turn DAC on)
00083550 7028                       		moveq	#$28,d0
00083552 7206                       		moveq	#6,d1
00083554 4EBA 0000                  		jsr	sub_7272E(pc)
00083558 103C 0042                  		move.b	#$42,d0
0008355C 727F                       		moveq	#$7F,d1
0008355E 4EBA 0000                  		jsr	sub_72764(pc)
00083562 103C 004A                  		move.b	#$4A,d0
00083566 727F                       		moveq	#$7F,d1
00083568 4EBA 0000                  		jsr	sub_72764(pc)
0008356C 103C 0046                  		move.b	#$46,d0
00083570 727F                       		moveq	#$7F,d1
00083572 4EBA 0000                  		jsr	sub_72764(pc)
00083576 103C 004E                  		move.b	#$4E,d0
0008357A 727F                       		moveq	#$7F,d1
0008357C 4EBA 0000                  		jsr	sub_72764(pc)
00083580 103C 00B6                  		move.b	#-$4A,d0
00083584 123C 00C0                  		move.b	#-$40,d1
00083588 4EBA 0000                  		jsr	sub_72764(pc)
0008358C                            
0008358C                            loc_72114:
0008358C 7A02                       		moveq	#$02,d5					; EXT: set PSG to delay for 1 extra frame (This is to match the PSG with the FM/DAC which is delayed a frame by the Z80)
0008358E 7E00                       		moveq	#0,d7
00083590 1E2B 0003                  		move.b	3(a3),d7
00083594 6700                       		beq.s	loc_72154
00083596 5307                       		subq.b	#1,d7
00083598 43EE 01C0                  		lea	$1C0(a6),a1				; MJ: new BGM/SFX location
0008359C 45FA 0000                  		lea	byte_721C2(pc),a2
000835A0                            
000835A0                            loc_72126:
000835A0 08D1 0007                  		bset	#7,(a1)
000835A4 135A 0001                  		move.b	(a2)+,1(a1)
000835A8 1344 0002                  		move.b	d4,2(a1)
000835AC 1346 000D                  		move.b	d6,$D(a1)
000835B0 1345 000E                  		move.b	d5,$E(a1)
000835B4 337C FFFF 0010             		move.w	#$FFFF,$10(a1)				; MJ: clear PSG's frequency (ensures no frequency writing)
000835BA 137C 0001 0012             		move.b	#$01,$12(a1)				; MJ: set key release rate to 1
000835C0 7000                       		moveq	#0,d0
000835C2 301C                       		move.w	(a4)+,d0
000835C4 D08B                       		add.l	a3,d0
000835C6 2340 0004                  		move.l	d0,4(a1)
000835CA 335C 0008                  		move.w	(a4)+,8(a1)
000835CE 101C                       		move.b	(a4)+,d0
000835D0 135C 000B                  		move.b	(a4)+,$B(a1)
000835D4 D2C6                       		adda.w	d6,a1
000835D6 51CF FFC8                  		dbf	d7,loc_72126
000835DA                            
000835DA                            loc_72154:
000835DA 43EE 0250                  		lea	$250(a6),a1				; MJ: new SFX location
000835DE 7E05                       		moveq	#5,d7
000835E0                            
000835E0                            loc_7215A:
000835E0 4A11                       		tst.b	(a1)
000835E2 6A00 0000                  		bpl.w	loc_7217C
000835E6 7000                       		moveq	#0,d0
000835E8 1029 0001                  		move.b	1(a1),d0
000835EC 6B00                       		bmi.s	loc_7216E
000835EE 5500                       		subq.b	#2,d0
000835F0 E508                       		lsl.b	#2,d0
000835F2 6000                       		bra.s	loc_72170
000835F4                            ; ===========================================================================
000835F4                            
000835F4                            loc_7216E:
000835F4 E608                       		lsr.b	#3,d0
000835F6                            
000835F6                            loc_72170:
000835F6 41FA 0000                  		lea	dword_722CC(pc),a0
000835FA 2070 0000                  		movea.l	(a0,d0.w),a0
000835FE 08D0 0002                  		bset	#2,(a0)
00083602                            
00083602                            loc_7217C:
00083602 D2C6                       		adda.w	d6,a1
00083604 51CF FFDA                  		dbf	d7,loc_7215A
00083608                            
00083608 4A6E 0370                  		tst.w	$370(a6)				; MJ: new SFX location
0008360C 6A00                       		bpl.s	loc_7218E
0008360E 08EE 0002 0130             		bset	#2,$130(a6)				; MJ: new BGM location
00083614                            
00083614                            loc_7218E:
00083614 4A6E 03A0                  		tst.w	$3A0(a6)				; MJ: new SFX location
00083618 6A00                       		bpl.s	loc_7219A
0008361A 08EE 0002 0220             		bset	#2,$220(a6)				; MJ: new BGM location
00083620                            
00083620                            
00083620                            loc_7219A:
00083620 4BEE 00A0                  		lea	$A0(a6),a5				; MJ: new FM location
00083624 7805                       		moveq	#5,d4
00083626                            
00083626                            loc_721A0:
00083626 4EBA 0000                  		jsr	sub_726FE(pc)
0008362A DAC6                       		adda.w	d6,a5
0008362C 51CC FFF8                  		dbf	d4,loc_721A0
00083630 7802                       		moveq	#2,d4
00083632                            
00083632                            loc_721AC:
00083632 4EBA 0000                  		jsr	sub_729A0(pc)
00083636 DAC6                       		adda.w	d6,a5
00083638 51CC FFF8                  		dbf	d4,loc_721AC
0008363C                            
0008363C                            loc_721B6:
0008363C 584F                       		addq.w	#4,sp
0008363E 4E75                       		rts	
00083640                            ; ===========================================================================
00083640 0606 0001 0204 0506 00     byte_721BA:	dc.b 6,	6, 0, 1, 2, 4, 5, 6, 0			; MJ: extra 6 (for PCM 2)
0008364A 00                         		even
0008364A 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
0008364E                            		even
0008364E                            ; ===========================================================================
0008364E                            ; ---------------------------------------------------------------------------
0008364E                            ; Play normal sound effect
0008364E                            ; ---------------------------------------------------------------------------
0008364E                            
0008364E                            Sound_D1toDF:
0008364E 4A2E 0027                  		tst.b	$27(a6)
00083652 6600 0000                  		bne.w	loc_722C6
00083656 4A2E 0004                  		tst.b	4(a6)
0008365A 6600 0000                  		bne.w	loc_722C6
0008365E 4A2E 0024                  		tst.b	$24(a6)
00083662 6600 0000                  		bne.w	loc_722C6
00083666 4238 C900                  		clr.b	($FFFFC900).w
0008366A 0C07 00D1                  		cmp.b	#$D1,d7		; is this the Spin Dash sound?
0008366E 6600                       		bne.s	@cont3	; if not, branch
00083670 3F00                       		move.w	d0,-(sp)
00083672 1038 C902                  		move.b	($FFFFC902).w,d0	; store extra frequency
00083676 4A38 C901                  		tst.b	($FFFFC901).w	; is the Spin Dash timer active?
0008367A 6600                       		bne.s	@cont1		; if it is, branch
0008367C 103C 00FF                  		move.b	#-1,d0		; otherwise, reset frequency (becomes 0 on next line)
00083680                            		
00083680                            @cont1:
00083680 5200                       		addq.b	#1,d0
00083682 0C00 000C                  		cmp.b	#$C,d0		; has the limit been reached?
00083686 6400                       		bcc.s	@cont2		; if it has, branch
00083688 11C0 C902                  		move.b	d0,($FFFFC902).w	; otherwise, set new frequency
0008368C                            		
0008368C                            @cont2:
0008368C 11FC 0001 C900             		move.b	#1,($FFFFC900).w	; set flag
00083692 11FC 003C C901             		move.b	#60,($FFFFC901).w	; set timer
00083698 301F                       		move.w	(sp)+,d0
0008369A                            		
0008369A                            @cont3:
0008369A 2079 0008 2C60             		movea.l	(Go_SoundIndex).l,a0
000836A0 0407 00A1                  		sub.b	#$A1,d7
000836A4 6000 0000                  		bra	SoundEffects_Common
000836A8                            
000836A8                            Sound_A0toCF:				; XREF: Sound_ChkValue
000836A8 4A2E 0027                  		tst.b	$27(a6)
000836AC 6600 0000                  		bne.w	loc_722C6
000836B0 4A2E 0004                  		tst.b	4(a6)
000836B4 6600 0000                  		bne.w	loc_722C6
000836B8 4A2E 0024                  		tst.b	$24(a6)
000836BC 6600 0000                  		bne.w	loc_722C6
000836C0 4238 C900                  		clr.b	($FFFFC900).w		
000836C4 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
000836C8 6600                       		bne.s	Sound_notB5	; if not, branch
000836CA 4A2E 002B                  		tst.b	$2B(a6)
000836CE 6600                       		bne.s	loc_721EE
000836D0 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
000836D4                            
000836D4                            loc_721EE:
000836D4 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
000836DA                            
000836DA                            Sound_notB5:
000836DA 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
000836DE 6600                       		bne.s	Sound_notA7	; if not, branch
000836E0 4A2E 002C                  		tst.b	$2C(a6)
000836E4 6600 0000                  		bne.w	locret_722C4
000836E8 1D7C 0080 002C             		move.b	#$80,$2C(a6)
000836EE                            
000836EE                            Sound_notA7:
000836EE 2079 0008 2C60             		movea.l	(Go_SoundIndex).l,a0
000836F4 0407 00A0                  		subi.b	#$A0,d7
000836F8                            SoundEffects_Common:
000836F8 E54F                       		lsl.w	#2,d7
000836FA 2670 7000                  		movea.l	(a0,d7.w),a3
000836FE 224B                       		movea.l	a3,a1
00083700 7200                       		moveq	#0,d1
00083702 3219                       		move.w	(a1)+,d1
00083704 D28B                       		add.l	a3,d1
00083706 1A19                       		move.b	(a1)+,d5
00083708 1E19                       		move.b	(a1)+,d7
0008370A 5307                       		subq.b	#1,d7
0008370C 7C30                       		moveq	#$30,d6
0008370E                            
0008370E                            loc_72228:
0008370E 7600                       		moveq	#0,d3
00083710 1629 0001                  		move.b	1(a1),d3
00083714 7402                       		moveq	#$02,d2					; EXT: set PSG to delay for 1 extra frame (This is to match the PSG with the FM/DAC which is delayed a frame by the Z80)
00083716 1803                       		move.b	d3,d4
00083718 6B00                       		bmi.s	loc_72244
0008371A 143C 0001                  		move.b	#$01,d2					; EXT: set DAC/FM to delay for 0 frames like normal (these have an auto delay of 1 frame in the Z80)
0008371E 5543                       		subq.w	#2,d3
00083720 E54B                       		lsl.w	#2,d3
00083722 4BFA 0000                  		lea	dword_722CC(pc),a5
00083726 2A75 3000                  		movea.l	(a5,d3.w),a5
0008372A 08D5 0002                  		bset	#2,(a5)
0008372E 6000                       		bra.s	loc_7226E
00083730                            		
00083730                            ; ===========================================================================
00083730                            
00083730                            loc_72244:
00083730 E64B                       		lsr.w	#3,d3
00083732 4BFA 0000                  		lea	dword_722CC(pc),a5
00083736 2A75 3000                  		movea.l	(a5,d3.w),a5
0008373A 08D5 0002                  		bset	#2,(a5)
0008373E 0C04 00C0                  		cmpi.b	#$C0,d4
00083742 6600                       		bne.s	loc_7226E
00083744 1004                       		move.b	d4,d0
00083746 0000 001F                  		ori.b	#$1F,d0
0008374A 13C0 00C0 0011             		move.b	d0,($C00011).l
00083750 0840 0005                  		bchg	#5,d0
00083754 13C0 00C0 0011             		move.b	d0,($C00011).l
0008375A                            
0008375A                            loc_7226E:
0008375A 4BFA 0000                  		lea	dword_722EC(pc),a5
0008375E 2A75 3000                  		movea.l	(a5,d3.w),a5
00083762 244D                       		movea.l	a5,a2
00083764 700B                       		moveq	#$B,d0
00083766                            
00083766                            loc_72276:
00083766 429A                       		clr.l	(a2)+
00083768 51C8 FFFC                  		dbf	d0,loc_72276
0008376C                            
0008376C 3A99                       		move.w	(a1)+,(a5)
0008376E 1B45 0002                  		move.b	d5,2(a5)
00083772 7000                       		moveq	#0,d0
00083774 3019                       		move.w	(a1)+,d0
00083776 D08B                       		add.l	a3,d0
00083778 2B40 0004                  		move.l	d0,4(a5)
0008377C 3B59 0008                  		move.w	(a1)+,8(a5)
00083780 4A38 C900                  		tst.b	($FFFFC900).w	; is the Spin Dash sound playing?
00083784 6700                       		beq.s	@cont		; if not, branch
00083786 3F00                       		move.w	d0,-(sp)
00083788 1038 C902                  		move.b	($FFFFC902).w,d0
0008378C D12D 0008                  		add.b	d0,8(a5)
00083790 301F                       		move.w	(sp)+,d0
00083792                            		
00083792                            @cont:
00083792 1B42 000E                  		move.b	d2,$E(a5)				; EXT: moving d2 contents (1 for FM/4 for PSG)
00083796 1B46 000D                  		move.b	d6,$D(a5)
0008379A 4A04                       		tst.b	d4
0008379C 6B00                       		bmi.s	loc_722A8
0008379E 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000837A4 2B41 0020                  		move.l	d1,$20(a5)
000837A8                            
000837A8                            loc_722A8:
000837A8 51CF FF64                  		dbf	d7,loc_72228
000837AC                            
000837AC 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
000837B0 6A00                       		bpl.s	loc_722B8
000837B2 08EE 0002 0370             		bset	#2,$370(a6)				; MJ: new SFX location
000837B8                            
000837B8                            loc_722B8:
000837B8 4A2E 0340                  		tst.b	$340(a6)				; MJ: new SFX location
000837BC 6A00                       		bpl.s	locret_722C4
000837BE 08EE 0002 03A0             		bset	#2,$3A0(a6)				; MJ: new SFX location
000837C4                            
000837C4                            locret_722C4:
000837C4 4E75                       		rts	
000837C6                            ; ===========================================================================
000837C6                            
000837C6                            loc_722C6:
000837C6 4216                       		clr.b	0(a6)
000837C8 4E75                       		rts	
000837CA                            ; ===========================================================================
000837CA 00FF F100                  dword_722CC:	dc.l $FFF0D0+$30				; MJ: new locations (see all +$30)
000837CE 0000 0000                  		dc.l 0
000837D2 00FF F130                  		dc.l $FFF100+$30
000837D6 00FF F160                  		dc.l $FFF130+$30
000837DA 00FF F1C0                  		dc.l $FFF190+$30
000837DE 00FF F1F0                  		dc.l $FFF1C0+$30
000837E2 00FF F220                  		dc.l $FFF1F0+$30
000837E6 00FF F220                  		dc.l $FFF1F0+$30
000837EA 00FF F250                  dword_722EC:	dc.l $FFF220+$30
000837EE 0000 0000                  		dc.l 0
000837F2 00FF F280                  		dc.l $FFF250+$30
000837F6 00FF F2B0                  		dc.l $FFF280+$30
000837FA 00FF F2E0                  		dc.l $FFF2B0+$30
000837FE 00FF F310                  		dc.l $FFF2E0+$30
00083802 00FF F340                  		dc.l $FFF310+$30
00083806 00FF F340                  		dc.l $FFF310+$30
0008380A                            ; ===========================================================================
0008380A                            ; ---------------------------------------------------------------------------
0008380A                            ; Play GHZ waterfall sound
0008380A                            ; ---------------------------------------------------------------------------
0008380A                            
0008380A                            Sound_D0toDF:				; XREF: Sound_ChkValue
0008380A 4A2E 0027                  		tst.b	$27(a6)
0008380E 6600 0000                  		bne.w	locret_723C6
00083812 4A2E 0004                  		tst.b	4(a6)
00083816 6600 0000                  		bne.w	locret_723C6
0008381A 4A2E 0024                  		tst.b	$24(a6)
0008381E 6600 0000                  		bne.w	locret_723C6
00083822 2079 0008 2C58             		movea.l	(Go_SoundD0).l,a0
00083828 0407 00D0                  		subi.b	#$D0,d7
0008382C E54F                       		lsl.w	#2,d7
0008382E 2670 7000                  		movea.l	(a0,d7.w),a3
00083832 224B                       		movea.l	a3,a1
00083834 7000                       		moveq	#0,d0
00083836 3019                       		move.w	(a1)+,d0
00083838 D08B                       		add.l	a3,d0
0008383A 2D40 0020                  		move.l	d0,$20(a6)
0008383E 1A19                       		move.b	(a1)+,d5
00083840 1E19                       		move.b	(a1)+,d7
00083842 5307                       		subq.b	#1,d7
00083844 7C30                       		moveq	#$30,d6
00083846                            
00083846                            loc_72348:
00083846 1829 0001                  		move.b	1(a1),d4
0008384A 6B00                       		bmi.s	loc_7235A
0008384C 08EE 0002 0130             		bset	#2,$130(a6)				; MJ: new BGM location
00083852 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
00083856 6000                       		bra.s	loc_72364
00083858                            ; ===========================================================================
00083858                            
00083858                            loc_7235A:
00083858 08EE 0002 0220             		bset	#2,$220(a6)				; MJ: new BGM location
0008385E 4BEE 03A0                  		lea	$3A0(a6),a5				; MJ: new SFX location
00083862                            
00083862                            loc_72364:
00083862 244D                       		movea.l	a5,a2
00083864 700B                       		moveq	#$B,d0
00083866                            
00083866                            loc_72368:
00083866 429A                       		clr.l	(a2)+
00083868 51C8 FFFC                  		dbf	d0,loc_72368
0008386C                            
0008386C 3A99                       		move.w	(a1)+,(a5)
0008386E 1B45 0002                  		move.b	d5,2(a5)
00083872 7000                       		moveq	#0,d0
00083874 3019                       		move.w	(a1)+,d0
00083876 D08B                       		add.l	a3,d0
00083878 2B40 0004                  		move.l	d0,4(a5)
0008387C 3B59 0008                  		move.w	(a1)+,8(a5)
00083880 1B7C 0001 000E             		move.b	#1,$E(a5)
00083886 1B46 000D                  		move.b	d6,$D(a5)
0008388A 4A04                       		tst.b	d4
0008388C 6B00                       		bmi.s	loc_72396
0008388E 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00083894                            
00083894                            loc_72396:
00083894 51CF FFB0                  		dbf	d7,loc_72348
00083898                            
00083898 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
0008389C 6A00                       		bpl.s	loc_723A6
0008389E 08EE 0002 0370             		bset	#2,$370(a6)				; MJ: new SFX location
000838A4                            
000838A4                            loc_723A6:
000838A4 4A2E 0340                  		tst.b	$340(a6)				; MJ: new SFX location
000838A8 6A00                       		bpl.s	locret_723C6
000838AA 08EE 0002 03A0             		bset	#2,$3A0(a6)				; MJ: new SFX location
000838B0 0004 001F                  		ori.b	#$1F,d4
000838B4 13C4 00C0 0011             		move.b	d4,($C00011).l
000838BA 0844 0005                  		bchg	#5,d4
000838BE 13C4 00C0 0011             		move.b	d4,($C00011).l
000838C4                            
000838C4                            locret_723C6:
000838C4 4E75                       		rts	
000838C6                            ; End of function Sound_ChkValue
000838C6                            
000838C6                            ; ===========================================================================
000838C6 00FF F130                  		dc.l $FFF100+$30				; MJ: new channel locations (see +$30)
000838CA 00FF F220                  		dc.l $FFF1F0+$30
000838CE 00FF F280                  		dc.l $FFF250+$30
000838D2 00FF F340                  		dc.l $FFF310+$30
000838D6 00FF F370                  		dc.l $FFF340+$30
000838DA 00FF F3A0                  		dc.l $FFF370+$30
000838DE                            
000838DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000838DE                            
000838DE                            
000838DE                            Snd_FadeOut1:				; XREF: Sound_E0
000838DE 4216                       		clr.b	0(a6)
000838E0 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
000838E4 7E05                       		moveq	#5,d7
000838E6                            
000838E6                            loc_723EA:
000838E6 4A15                       		tst.b	(a5)
000838E8 6A00 0000                  		bpl.w	loc_72472
000838EC 0895 0007                  		bclr	#7,(a5)
000838F0 7600                       		moveq	#0,d3
000838F2 162D 0001                  		move.b	1(a5),d3
000838F6 6B00                       		bmi.s	loc_7243C
000838F8 4EBA 0000                  		jsr	sub_726FE(pc)
000838FC 0C03 0004                  		cmpi.b	#4,d3
00083900 6600                       		bne.s	loc_72416
00083902 4A2E 0370                  		tst.b	$370(a6)				; MJ: new SFX location
00083906 6A00                       		bpl.s	loc_72416
00083908 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
0008390C 226E 0020                  		movea.l	$20(a6),a1
00083910 6000                       		bra.s	loc_72428
00083912                            ; ===========================================================================
00083912                            
00083912                            loc_72416:
00083912 5503                       		subq.b	#2,d3
00083914 E50B                       		lsl.b	#2,d3
00083916 41FA FEB2                  		lea	dword_722CC(pc),a0
0008391A 264D                       		movea.l	a5,a3
0008391C 2A70 3000                  		movea.l	(a0,d3.w),a5
00083920 226E 0018                  		movea.l	$18(a6),a1
00083924                            
00083924                            loc_72428:
00083924 0895 0002                  		bclr	#2,(a5)
00083928 08D5 0001                  		bset	#1,(a5)
0008392C 102D 000B                  		move.b	$B(a5),d0
00083930 4EBA 0000                  		jsr	sub_72C4E(pc)
00083934 2A4B                       		movea.l	a3,a5
00083936 6000                       		bra.s	loc_72472
00083938                            ; ===========================================================================
00083938                            
00083938                            loc_7243C:
00083938 4EBA 0000                  		jsr	sub_729A0(pc)
0008393C 41EE 03A0                  		lea	$3A0(a6),a0				; MJ: new SFX location
00083940 0C03 00E0                  		cmpi.b	#$E0,d3
00083944 6700                       		beq.s	loc_7245A
00083946 0C03 00C0                  		cmpi.b	#$C0,d3
0008394A 6700                       		beq.s	loc_7245A
0008394C E60B                       		lsr.b	#3,d3
0008394E 41FA FE7A                  		lea	dword_722CC(pc),a0
00083952 2070 3000                  		movea.l	(a0,d3.w),a0
00083956                            
00083956                            loc_7245A:
00083956 0890 0002                  		bclr	#2,(a0)
0008395A 08D0 0001                  		bset	#1,(a0)
0008395E 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00083964 6600                       		bne.s	loc_72472
00083966 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0008396E                            
0008396E                            loc_72472:
0008396E DAFC 0030                  		adda.w	#$30,a5
00083972 51CF FF72                  		dbf	d7,loc_723EA
00083976                            
00083976 4E75                       		rts	
00083978                            ; End of function Snd_FadeOut1
00083978                            
00083978                            
00083978                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083978                            
00083978                            
00083978                            Snd_FadeOut2:				; XREF: Sound_E0
00083978 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
0008397C 4A15                       		tst.b	(a5)
0008397E 6A00                       		bpl.s	loc_724AE
00083980 0895 0007                  		bclr	#7,(a5)
00083984 0815 0002                  		btst	#2,(a5)
00083988 6600                       		bne.s	loc_724AE
0008398A 4EBA 0000                  		jsr	loc_7270A(pc)
0008398E 4BEE 0130                  		lea	$130(a6),a5				; MJ: new BGM location
00083992 0895 0002                  		bclr	#2,(a5)
00083996 08D5 0001                  		bset	#1,(a5)
0008399A 4A15                       		tst.b	(a5)
0008399C 6A00                       		bpl.s	loc_724AE
0008399E 226E 0018                  		movea.l	$18(a6),a1
000839A2 102D 000B                  		move.b	$B(a5),d0
000839A6 4EBA 0000                  		jsr	sub_72C4E(pc)
000839AA                            
000839AA                            loc_724AE:
000839AA 4BEE 03A0                  		lea	$3A0(a6),a5				; MJ: new SFX location
000839AE 4A15                       		tst.b	(a5)
000839B0 6A00                       		bpl.s	locret_724E4
000839B2 0895 0007                  		bclr	#7,(a5)
000839B6 0815 0002                  		btst	#2,(a5)
000839BA 6600                       		bne.s	locret_724E4
000839BC 4EBA 0000                  		jsr	loc_729A6(pc)
000839C0 4BEE 0220                  		lea	$220(a6),a5				; MJ: new BGM location
000839C4 0895 0002                  		bclr	#2,(a5)
000839C8 08D5 0001                  		bset	#1,(a5)
000839CC 4A15                       		tst.b	(a5)
000839CE 6A00                       		bpl.s	locret_724E4
000839D0 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
000839D6 6600                       		bne.s	locret_724E4
000839D8 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
000839E0                            
000839E0                            locret_724E4:
000839E0 4E75                       		rts	
000839E2                            ; End of function Snd_FadeOut2
000839E2                            
000839E2                            ; ===========================================================================
000839E2                            ; ---------------------------------------------------------------------------
000839E2                            ; Fade out music
000839E2                            ; ---------------------------------------------------------------------------
000839E2                            
000839E2                            Sound_E0:				; XREF: Sound_ExIndex
000839E2 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
000839E6 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
000839EA 1D7C 0003 0006             		move.b	#3,6(a6)
000839F0 1D7C 0028 0004             		move.b	#$28,4(a6)
000839F6 422E 0040                  		clr.b	$40(a6)
000839FA 422E 0070                  		clr.b	$70(a6)					; MJ: stop PCM 2 as well
000839FE 422E 002A                  		clr.b	$2A(a6)
00083A02 4E75                       		rts	
00083A04                            
00083A04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083A04                            
00083A04                            
00083A04                            sub_72504:				; XREF: sub_71B4C
00083A04 102E 0006                  		move.b	6(a6),d0
00083A08 6700                       		beq.s	loc_72510
00083A0A 532E 0006                  		subq.b	#1,6(a6)
00083A0E 4E75                       		rts	
00083A10                            ; ===========================================================================
00083A10                            
00083A10                            loc_72510:
00083A10 532E 0004                  		subq.b	#1,4(a6)
00083A14 6700 0000                  		beq.w	Sound_E4
00083A18 1D7C 0003 0006             		move.b	#3,6(a6)
00083A1E 4BEE 00A0                  		lea	$A0(a6),a5				; MJ: new FM location
00083A22 7E05                       		moveq	#5,d7
00083A24                            
00083A24                            loc_72524:
00083A24 4A15                       		tst.b	(a5)
00083A26 6A00                       		bpl.s	loc_72538
00083A28 522D 0009                  		addq.b	#1,9(a5)
00083A2C 6A00                       		bpl.s	loc_72534
00083A2E 0895 0007                  		bclr	#7,(a5)
00083A32 6000                       		bra.s	loc_72538
00083A34                            ; ===========================================================================
00083A34                            
00083A34                            loc_72534:
00083A34 4EBA 0000                  		jsr	sub_72CB4(pc)
00083A38                            
00083A38                            loc_72538:
00083A38 DAFC 0030                  		adda.w	#$30,a5
00083A3C 51CF FFE6                  		dbf	d7,loc_72524
00083A40                            
00083A40 7E02                       		moveq	#2,d7
00083A42                            
00083A42                            loc_72542:
00083A42 4A15                       		tst.b	(a5)
00083A44 6A00                       		bpl.s	loc_72560
00083A46 522D 0009                  		addq.b	#1,9(a5)
00083A4A 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
00083A50 6500                       		bcs.s	loc_72558
00083A52 0895 0007                  		bclr	#7,(a5)
00083A56 6000                       		bra.s	loc_72560
00083A58                            ; ===========================================================================
00083A58                            
00083A58                            loc_72558:
00083A58 1C2D 0009                  		move.b	9(a5),d6
00083A5C 4EBA 0000                  		jsr	sub_7296A(pc)
00083A60                            
00083A60                            loc_72560:
00083A60 DAFC 0030                  		adda.w	#$30,a5
00083A64 51CF FFDC                  		dbf	d7,loc_72542
00083A68                            
00083A68 4E75                       		rts	
00083A6A                            ; End of function sub_72504
00083A6A                            
00083A6A                            
00083A6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083A6A                            
00083A6A                            
00083A6A                            sub_7256A:				; XREF: Sound_E4; sub_725CA
00083A6A 7602                       		moveq	#2,d3
00083A6C 7028                       		moveq	#$28,d0
00083A6E                            
00083A6E                            loc_7256E:
00083A6E 1203                       		move.b	d3,d1
00083A70 4EBA 0000                  		jsr	sub_7272E(pc)
00083A74 5801                       		addq.b	#4,d1
00083A76 4EBA 0000                  		jsr	sub_7272E(pc)
00083A7A 51CB FFF2                  		dbf	d3,loc_7256E
00083A7E                            
00083A7E 7040                       		moveq	#$40,d0
00083A80 727F                       		moveq	#$7F,d1
00083A82 7802                       		moveq	#2,d4
00083A84                            
00083A84                            loc_72584:
00083A84 7603                       		moveq	#3,d3
00083A86                            
00083A86                            loc_72586:
00083A86 4EBA 0000                  		jsr	sub_7272E(pc)
00083A8A 4EBA 0000                  		jsr	sub_72764(pc)
00083A8E 5840                       		addq.w	#4,d0
00083A90 51CB FFF4                  		dbf	d3,loc_72586
00083A94                            
00083A94 0400 000F                  		subi.b	#$F,d0
00083A98 51CC FFEA                  		dbf	d4,loc_72584
00083A9C                            
00083A9C 4E75                       		rts	
00083A9E                            ; End of function sub_7256A
00083A9E                            
00083A9E                            ; ===========================================================================
00083A9E                            ; ---------------------------------------------------------------------------
00083A9E                            ; Stop music
00083A9E                            ; ---------------------------------------------------------------------------
00083A9E                            
00083A9E                            Sound_E4:
00083A9E 33FC 0100 00A1 1100 0839+  		StopZ80
00083AB0 41F9 0000 0000             		lea	(StopSample).l,a0				; EXT: load stop sample address
00083AB6 43F9 00A0 02E6             		lea	($A00000+PCM1_Sample).l,a1			; EXT: load PCM 1 slot address
00083ABC 12D8                       		move.b	(a0)+,(a1)+					; EXT: set address of sample
00083ABE 12D8                       		move.b	(a0)+,(a1)+					; EXT: ''
00083AC0 12D8                       		move.b	(a0)+,(a1)+					; EXT: ''
00083AC2 13FC 0064 00A0 0047        		move.b	#(CUPCM1_NewSample&$FF),($A00000+CU_Stack).l	; EXT: set routine to run
00083ACA 13FC 0002 00A0 0048        		move.b	#(CUPCM1_NewSample>>$08),($A00000+CU_Stack+1).l	; EXT: ''
00083AD2 13FC 00C9 00A0 01D2        		move.b	#%11001001,($A00000+CUPCM1_RET).l		; EXT: change "NOP" to "RET"
00083ADA 41F9 0000 0000             		lea	(StopSample).l,a0				; EXT: load stop sample address
00083AE0 43F9 00A0 02E9             		lea	($A00000+PCM2_Sample).l,a1			; EXT: load PCM 2 slot address
00083AE6 12D8                       		move.b	(a0)+,(a1)+					; EXT: ''
00083AE8 12D8                       		move.b	(a0)+,(a1)+					; EXT: ''
00083AEA 12D8                       		move.b	(a0)+,(a1)+					; EXT: ''
00083AEC 13FC 0028 00A0 01D3        		move.b	#%00101000,($A00000+CUPCM2_RET).l		; EXT: change "JR NZ" to "JR Z"
00083AF4 33FC 0000 00A1 1100        		StartZ80
00083AFC                            
00083AFC 702B                       		moveq	#$2B,d0
00083AFE 123C 0080                  		move.b	#$80,d1
00083B02 4EBA 0000                  		jsr	sub_7272E(pc)
00083B06 7027                       		moveq	#$27,d0
00083B08 7200                       		moveq	#0,d1
00083B0A 4EBA 0000                  		jsr	sub_7272E(pc)
00083B0E 204E                       		movea.l	a6,a0
00083B10 2C2E 0010                  		move.l	$10(a6),d6					; EXT: store YM Cue list pointer
00083B14 303C 00EF                  		move.w	#$EF,d0						; MJ: new size of data to clear
00083B18                            
00083B18                            loc_725B6:
00083B18 4298                       		clr.l	(a0)+
00083B1A 51C8 FFFC                  		dbf	d0,loc_725B6
00083B1E                            
00083B1E 2D46 0010                  		move.l	d6,$10(a6)					; EXT: restore YM Cue list pointer
00083B22 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
00083B28 4EBA FF40                  		jsr	sub_7256A(pc)
00083B2C 6000 0000                  		bra.w	sub_729B6
00083B30                            
00083B30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083B30                            
00083B30                            
00083B30                            sub_725CA:				; XREF: Sound_ChkValue
00083B30 204E                       		movea.l	a6,a0
00083B32 1216                       		move.b	0(a6),d1
00083B34 142E 0027                  		move.b	$27(a6),d2
00083B38 162E 002A                  		move.b	$2A(a6),d3
00083B3C 182E 0026                  		move.b	$26(a6),d4
00083B40 3A2E 000A                  		move.w	$A(a6),d5
00083B44 2C2E 0010                  		move.l	$10(a6),d6					; EXT: store YM Cue list pointer
00083B48 303C 0093                  		move.w	#$93,d0						; MJ: new size
00083B4C                            
00083B4C                            loc_725E4:
00083B4C 4298                       		clr.l	(a0)+
00083B4E 51C8 FFFC                  		dbf	d0,loc_725E4
00083B52                            
00083B52 1C81                       		move.b	d1,0(a6)
00083B54 1D42 0027                  		move.b	d2,$27(a6)
00083B58 1D43 002A                  		move.b	d3,$2A(a6)
00083B5C 1D44 0026                  		move.b	d4,$26(a6)
00083B60 3D45 000A                  		move.w	d5,$A(a6)
00083B64 2D46 0010                  		move.l	d6,$10(a6)					; EXT: restore YM Cue list pointer
00083B68 1D7C 0080 0009             		move.b	#$80,9(a6)
00083B6E 4EBA FEFA                  		jsr	sub_7256A(pc)
00083B72 6000 0000                  		bra.w	sub_729B6
00083B76                            ; End of function sub_725CA
00083B76                            
00083B76                            
00083B76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083B76                            
00083B76                            
00083B76                            sub_7260C:				; XREF: sub_71B4C
00083B76 1D6E 0002 0001             		move.b	2(a6),1(a6)
00083B7C 41EE 004E                  		lea	$4E(a6),a0
00083B80 7030                       		moveq	#$30,d0
00083B82 720A                       		moveq	#10,d1				; MJ: new number of channels
00083B84                            
00083B84                            loc_7261A:
00083B84 5210                       		addq.b	#1,(a0)
00083B86 D0C0                       		adda.w	d0,a0
00083B88 51C9 FFFA                  		dbf	d1,loc_7261A
00083B8C                            
00083B8C 4E75                       		rts	
00083B8E                            ; End of function sub_7260C
00083B8E                            
00083B8E                            ; ===========================================================================
00083B8E                            ; ---------------------------------------------------------------------------
00083B8E                            ; Speed	up music
00083B8E                            ; ---------------------------------------------------------------------------
00083B8E                            
00083B8E                            Sound_E2:				; XREF: Sound_ExIndex
00083B8E 4A2E 0027                  		tst.b	$27(a6)
00083B92 6600                       		bne.s	loc_7263E
00083B94 1D6E 0029 0002             		move.b	$29(a6),2(a6)
00083B9A 1D6E 0029 0001             		move.b	$29(a6),1(a6)
00083BA0 1D7C 0080 002A             		move.b	#$80,$2A(a6)
00083BA6 4E75                       		rts	
00083BA8                            ; ===========================================================================
00083BA8                            
00083BA8                            loc_7263E:
00083BA8 1D6E 03F9 03D2             		move.b	$3F9(a6),$3D2(a6)			; MJ: new location
00083BAE 1D6E 03F9 03D1             		move.b	$3F9(a6),$3D1(a6)			; MJ: new location
00083BB4 1D7C 0080 03FA             		move.b	#$80,$3FA(a6)
00083BBA 4E75                       		rts	
00083BBC                            ; ===========================================================================
00083BBC                            ; ---------------------------------------------------------------------------
00083BBC                            ; Change music back to normal speed
00083BBC                            ; ---------------------------------------------------------------------------
00083BBC                            
00083BBC                            Sound_E3:				; XREF: Sound_ExIndex
00083BBC 4A2E 0027                  		tst.b	$27(a6)
00083BC0 6600                       		bne.s	loc_7266A
00083BC2 1D6E 0028 0002             		move.b	$28(a6),2(a6)
00083BC8 1D6E 0028 0001             		move.b	$28(a6),1(a6)
00083BCE 422E 002A                  		clr.b	$2A(a6)
00083BD2 4E75                       		rts	
00083BD4                            ; ===========================================================================
00083BD4                            
00083BD4                            loc_7266A:
00083BD4 1D6E 03F8 03D2             		move.b	$3F8(a6),$3D2(a6)
00083BDA 1D6E 03F8 03D1             		move.b	$3F8(a6),$3D1(a6)
00083BE0 422E 03FA                  		clr.b	$3FA(a6)
00083BE4 4E75                       		rts	
00083BE6                            
00083BE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083BE6                            
00083BE6                            
00083BE6                            sub_7267C:				; XREF: sub_71B4C
00083BE6 4A2E 0025                  		tst.b	$25(a6)
00083BEA 6700                       		beq.s	loc_72688
00083BEC 532E 0025                  		subq.b	#1,$25(a6)
00083BF0 4E75                       		rts	
00083BF2                            ; ===========================================================================
00083BF2                            
00083BF2                            loc_72688:
00083BF2 4A2E 0026                  		tst.b	$26(a6)
00083BF6 6700                       		beq.s	loc_726D6
00083BF8 532E 0026                  		subq.b	#1,$26(a6)
00083BFC 1D7C 0002 0025             		move.b	#2,$25(a6)
00083C02 4BEE 00A0                  		lea	$A0(a6),a5				; MJ: new SFX location
00083C06 7E05                       		moveq	#5,d7
00083C08                            
00083C08                            loc_7269E:
00083C08 4A15                       		tst.b	(a5)
00083C0A 6A00                       		bpl.s	loc_726AA
00083C0C 532D 0009                  		subq.b	#1,9(a5)
00083C10 4EBA 0000                  		jsr	sub_72CB4(pc)
00083C14                            
00083C14                            loc_726AA:
00083C14 DAFC 0030                  		adda.w	#$30,a5
00083C18 51CF FFEE                  		dbf	d7,loc_7269E
00083C1C 7E02                       		moveq	#2,d7
00083C1E                            
00083C1E                            loc_726B4:
00083C1E 4A15                       		tst.b	(a5)
00083C20 6A00                       		bpl.s	loc_726CC
00083C22 532D 0009                  		subq.b	#1,9(a5)
00083C26 1C2D 0009                  		move.b	9(a5),d6
00083C2A 0C06 0010                  		cmpi.b	#$10,d6
00083C2E 6500                       		bcs.s	loc_726C8
00083C30 7C0F                       		moveq	#$F,d6
00083C32                            
00083C32                            loc_726C8:
00083C32 4EBA 0000                  		jsr	sub_7296A(pc)
00083C36                            
00083C36                            loc_726CC:
00083C36 DAFC 0030                  		adda.w	#$30,a5
00083C3A 51CF FFE2                  		dbf	d7,loc_726B4
00083C3E 4E75                       		rts	
00083C40                            ; ===========================================================================
00083C40                            
00083C40                            loc_726D6:
00083C40 08AE 0002 0040             		bclr	#2,$40(a6)
00083C46 08AE 0002 0070             		bclr	#2,$70(a6)				; MJ: do PCM 2 as well...
00083C4C 422E 0024                  		clr.b	$24(a6)
00083C50 4E75                       		rts	
00083C52                            ; End of function sub_7267C
00083C52                            
00083C52                            ; ===========================================================================
00083C52                            
00083C52                            loc_726E2:				; XREF: sub_71CCA
00083C52 0815 0001                  		btst	#1,(a5)
00083C56 6600                       		bne.s	locret_726FC
00083C58 0815 0002                  		btst	#2,(a5)
00083C5C 6600                       		bne.s	locret_726FC
00083C5E 7028                       		moveq	#$28,d0
00083C60 122D 0001                  		move.b	1(a5),d1
00083C64 0001 00F0                  		ori.b	#-$10,d1
00083C68 6000 0000                  		bra.w	sub_7272E
00083C6C                            ; ===========================================================================
00083C6C                            
00083C6C                            locret_726FC:
00083C6C 4E75                       		rts	
00083C6E                            
00083C6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083C6E                            
00083C6E                            
00083C6E                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
00083C6E 0815 0004                  		btst	#4,(a5)
00083C72 6600                       		bne.s	locret_72714
00083C74 0815 0002                  		btst	#2,(a5)
00083C78 6600                       		bne.s	locret_72714
00083C7A                            
00083C7A                            loc_7270A:				; XREF: Snd_FadeOut2
00083C7A 7028                       		moveq	#$28,d0
00083C7C 122D 0001                  		move.b	1(a5),d1
00083C80 6000 0000                  		bra.w	sub_7272E
00083C84                            ; ===========================================================================
00083C84                            
00083C84                            locret_72714:
00083C84 4E75                       		rts	
00083C86                            ; End of function sub_726FE
00083C86                            
00083C86                            ; ===========================================================================
00083C86                            
00083C86                            loc_72716:				; XREF: sub_72A5A
00083C86 0815 0002                  		btst	#2,(a5)
00083C8A 6600                       		bne.s	locret_72720
00083C8C 6000 0000                  		bra.w	sub_72722
00083C90                            ; ===========================================================================
00083C90                            
00083C90                            locret_72720:
00083C90 4E75                       		rts
00083C92                            
00083C92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083C92                            
00083C92                            
00083C92                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
00083C92 082D 0002 0001             		btst	#2,1(a5)
00083C98 6600                       		bne.s	loc_7275A
00083C9A D02D 0001                  		add.b	1(a5),d0
00083C9E                            ; End of function sub_72722
00083C9E                            
00083C9E                            
00083C9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083C9E                            
00083C9E                            sub_7272E:
00083C9E 48E7 2080                  		movem.l	d2/a0,-(sp)				; EXT: store register data
00083CA2 206E 0010                  		movea.l	$10(a6),a0				; EXT: load Cue pointer
00083CA6 5248                       		addq.w	#$01,a0					; EXT: skip $40
00083CA8 143C 0000                  		move.b	#$00,d2					; EXT: prepare d2 for YM2612 port address ($4000 - $4001)
00083CAC 33FC 0100 00A1 1100 0839+  		StopZ80						; EXT: request Z80 stop "ON"
00083CBE 10C2                       		move.b	d2,(a0)+				; EXT: write YM2612 port address
00083CC0 10C1                       		move.b	d1,(a0)+				; EXT: write YM2612 data
00083CC2 10C0                       		move.b	d0,(a0)+				; EXT: write YM2612 address
00083CC4 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop "OFF"
00083CCC 3408                       		move.w	a0,d2					; EXT: load Cue pointer
00083CCE 0242 0FFF                  		andi.w	#$0FFF,d2				; EXT: wrap it
00083CD2 0042 1000                  		ori.w	#$1000,d2				; EXT: ''
00083CD6 3D42 0012                  		move.w	d2,$12(a6)				; EXT: update it
00083CDA 4CDF 0104                  		movem.l	(sp)+,d2/a0				; EXT: restore register data
00083CDE 4E75                       		rts						; EXT: return
00083CE0                            
00083CE0                            ; ===========================================================================
00083CE0                            
00083CE0                            loc_7275A:				; XREF: sub_72722
00083CE0 142D 0001                  		move.b	1(a5),d2
00083CE4 0882 0002                  		bclr	#2,d2
00083CE8 D002                       		add.b	d2,d0
00083CEA                            
00083CEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083CEA                            
00083CEA                            
00083CEA                            sub_72764:
00083CEA 48E7 2080                  		movem.l	d2/a0,-(sp)				; EXT: store register data
00083CEE 206E 0010                  		movea.l	$10(a6),a0				; EXT: load Cue pointer
00083CF2 5248                       		addq.w	#$01,a0					; EXT: skip $40
00083CF4 143C 0002                  		move.b	#$02,d2					; EXT: prepare d2 for YM2612 port address ($4002 - $4003)
00083CF8 33FC 0100 00A1 1100 0839+  		StopZ80						; EXT: request Z80 stop "ON"
00083D0A 10C2                       		move.b	d2,(a0)+				; EXT: write YM2612 port address
00083D0C 10C1                       		move.b	d1,(a0)+				; EXT: write YM2612 data
00083D0E 10C0                       		move.b	d0,(a0)+				; EXT: write YM2612 address
00083D10 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop "OFF"
00083D18 3408                       		move.w	a0,d2					; EXT: load Cue pointer
00083D1A 0242 0FFF                  		andi.w	#$0FFF,d2				; EXT: wrap it
00083D1E 0042 1000                  		ori.w	#$1000,d2				; EXT: ''
00083D22 3D42 0012                  		move.w	d2,$12(a6)				; EXT: update it
00083D26 4CDF 0104                  		movem.l	(sp)+,d2/a0				; EXT: restore register data
00083D2A 4E75                       		rts						; EXT: return
00083D2C                            
00083D2C                            ; ===========================================================================
00083D2C 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
00083D3E 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
00083D50 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
00083D60 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
00083D70 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
00083D80 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
00083D90 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
00083DA0 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
00083DB0 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
00083DC0 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
00083DD0 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
00083DE0 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
00083DEC                            
00083DEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083DEC                            
00083DEC                            
00083DEC                            sub_72850:				; XREF: sub_71B4C
00083DEC 532D 000E                  		subq.b	#1,$E(a5)
00083DF0 6600                       		bne.s	loc_72866
00083DF2 0895 0004                  		bclr	#4,(a5)
00083DF6 4EBA 0000                  		jsr	sub_72878(pc)
00083DFA 4EBA 0000                  		jsr	sub_728DC(pc)
00083DFE 6000 0000                  		bra.w	loc_7292E
00083E02                            ; ===========================================================================
00083E02                            
00083E02                            loc_72866:
00083E02 4EBA F378                  		jsr	sub_71D9E(pc)
00083E06 4EBA 0000                  		jsr	sub_72926(pc)
00083E0A 4EBA F398                  		jsr	sub_71DC6(pc)
00083E0E 4EBA 0000                  		jsr	sub_728E2(pc)
00083E12 4E75                       		rts	
00083E14                            ; End of function sub_72850
00083E14                            
00083E14                            
00083E14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083E14                            
00083E14                            
00083E14                            sub_72878:				; XREF: sub_72850
00083E14 0895 0001                  		bclr	#1,(a5)
00083E18 286D 0004                  		movea.l	4(a5),a4
00083E1C                            
00083E1C                            loc_72880:
00083E1C 7A00                       		moveq	#0,d5
00083E1E 1A1C                       		move.b	(a4)+,d5
00083E20 0C05 00E0                  		cmpi.b	#$E0,d5
00083E24 6500                       		bcs.s	loc_72890
00083E26 4EBA 0000                  		jsr	sub_72A5A(pc)
00083E2A 60F0                       		bra.s	loc_72880
00083E2C                            ; ===========================================================================
00083E2C                            
00083E2C                            loc_72890:
00083E2C 4A05                       		tst.b	d5
00083E2E 6A00                       		bpl.s	loc_728A4
00083E30 4EBA 0000                  		jsr	sub_728AC(pc)
00083E34 1A1C                       		move.b	(a4)+,d5
00083E36 4A05                       		tst.b	d5
00083E38 6A00                       		bpl.s	loc_728A4
00083E3A 534C                       		subq.w	#1,a4
00083E3C 6000 F300                  		bra.w	sub_71D60
00083E40                            ; ===========================================================================
00083E40                            
00083E40                            loc_728A4:
00083E40 4EBA F2DC                  		jsr	sub_71D40(pc)
00083E44 6000 F2F8                  		bra.w	sub_71D60
00083E48                            ; End of function sub_72878
00083E48                            
00083E48                            
00083E48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083E48                            
00083E48                            
00083E48                            sub_728AC:				; XREF: sub_72878
00083E48 0405 0081                  		subi.b	#$81,d5
00083E4C 6500                       		bcs.s	loc_728CA
00083E4E DA2D 0008                  		add.b	8(a5),d5
00083E52 0245 007F                  		andi.w	#$7F,d5
00083E56 E34D                       		lsl.w	#1,d5
00083E58 41FA 0000                  		lea	word_729CE(pc),a0
00083E5C 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
00083E62 6000 F2DA                  		bra.w	sub_71D60
00083E66                            ; ===========================================================================
00083E66                            
00083E66                            loc_728CA:
00083E66 08D5 0001                  		bset	#1,(a5)
00083E6A 3B7C FFFF 0010             		move.w	#-1,$10(a5)
00083E70 4EBA F2CC                  		jsr	sub_71D60(pc)
00083E74 6000 0000                  		bra.w	sub_729A0
00083E78                            ; End of function sub_728AC
00083E78                            
00083E78                            
00083E78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083E78                            
00083E78                            
00083E78                            sub_728DC:				; XREF: sub_72850
00083E78 3C2D 0010                  		move.w	$10(a5),d6
00083E7C 6B00                       		bmi.s	loc_72920
00083E7E                            ; End of function sub_728DC
00083E7E                            
00083E7E                            
00083E7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083E7E                            
00083E7E                            
00083E7E                            sub_728E2:				; XREF: sub_72850
00083E7E 102D 001E                  		move.b	$1E(a5),d0
00083E82 4880                       		ext.w	d0
00083E84 DC40                       		add.w	d0,d6
00083E86 0815 0002                  		btst	#2,(a5)
00083E8A 6600                       		bne.s	locret_7291E
00083E8C 0815 0001                  		btst	#1,(a5)
00083E90 6600                       		bne.s	locret_7291E
00083E92 102D 0001                  		move.b	1(a5),d0
00083E96 0C00 00E0                  		cmpi.b	#$E0,d0
00083E9A 6600                       		bne.s	loc_72904
00083E9C 103C 00C0                  		move.b	#$C0,d0
00083EA0                            
00083EA0                            loc_72904:
00083EA0 3206                       		move.w	d6,d1
00083EA2 0201 000F                  		andi.b	#$F,d1
00083EA6 8001                       		or.b	d1,d0
00083EA8 E84E                       		lsr.w	#4,d6
00083EAA 0206 003F                  		andi.b	#$3F,d6
00083EAE 13C0 00C0 0011             		move.b	d0,($C00011).l
00083EB4 13C6 00C0 0011             		move.b	d6,($C00011).l
00083EBA                            
00083EBA                            locret_7291E:
00083EBA 4E75                       		rts	
00083EBC                            ; End of function sub_728E2
00083EBC                            
00083EBC                            ; ===========================================================================
00083EBC                            
00083EBC                            loc_72920:				; XREF: sub_728DC
00083EBC 08D5 0001                  		bset	#1,(a5)
00083EC0 4E75                       		rts	
00083EC2                            
00083EC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083EC2                            
00083EC2                            
00083EC2                            sub_72926:				; XREF: sub_72850
00083EC2 4A2D 000B                  		tst.b	$B(a5)
00083EC6 6700 0000                  		beq.w	locret_7298A
00083ECA                            
00083ECA                            loc_7292E:				; XREF: sub_72850
00083ECA 1C2D 0009                  		move.b	9(a5),d6
00083ECE 7000                       		moveq	#0,d0
00083ED0 102D 000B                  		move.b	$B(a5),d0
00083ED4 6700                       		beq.s	sub_7296A
00083ED6 2079 0008 2C68             		movea.l	(Go_PSGIndex).l,a0
00083EDC 5340                       		subq.w	#1,d0
00083EDE E548                       		lsl.w	#2,d0
00083EE0 2070 0000                  		movea.l	(a0,d0.w),a0
00083EE4 102D 000C                  		move.b	$C(a5),d0
00083EE8 1030 0000                  		move.b	(a0,d0.w),d0
00083EEC 522D 000C                  		addq.b	#1,$C(a5)
00083EF0 0800 0007                  		btst	#7,d0
00083EF4 6700                       		beq.s	loc_72960
00083EF6 0C00 0080                  		cmpi.b	#$80,d0
00083EFA 6700                       		beq.s	loc_7299A
00083EFC                            
00083EFC                            loc_72960:
00083EFC DC40                       		add.w	d0,d6
00083EFE 0C06 0010                  		cmpi.b	#$10,d6
00083F02 6500                       		bcs.s	sub_7296A
00083F04 7C0F                       		moveq	#$F,d6
00083F06                            ; End of function sub_72926
00083F06                            
00083F06                            
00083F06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083F06                            
00083F06                            
00083F06                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
00083F06 0815 0001                  		btst	#1,(a5)
00083F0A 6600                       		bne.s	locret_7298A
00083F0C 0815 0002                  		btst	#2,(a5)
00083F10 6600                       		bne.s	locret_7298A
00083F12 0815 0004                  		btst	#4,(a5)
00083F16 6600                       		bne.s	loc_7298C
00083F18                            
00083F18                            loc_7297C:
00083F18 8C2D 0001                  		or.b	1(a5),d6
00083F1C 0606 0010                  		addi.b	#$10,d6
00083F20 13C6 00C0 0011             		move.b	d6,($C00011).l
00083F26                            
00083F26                            locret_7298A:
00083F26 4E75                       		rts	
00083F28                            ; ===========================================================================
00083F28                            
00083F28                            loc_7298C:
00083F28 4A2D 0013                  		tst.b	$13(a5)
00083F2C 67EA                       		beq.s	loc_7297C
00083F2E 4A2D 0012                  		tst.b	$12(a5)
00083F32 66E4                       		bne.s	loc_7297C
00083F34 4E75                       		rts	
00083F36                            ; End of function sub_7296A
00083F36                            
00083F36                            ; ===========================================================================
00083F36                            
00083F36                            loc_7299A:				; XREF: sub_72926
00083F36 532D 000C                  		subq.b	#1,$C(a5)
00083F3A 4E75                       		rts	
00083F3C                            
00083F3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083F3C                            
00083F3C                            
00083F3C                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
00083F3C 0815 0002                  		btst	#2,(a5)
00083F40 6600                       		bne.s	locret_729B4
00083F42                            
00083F42                            loc_729A6:				; XREF: Snd_FadeOut2
00083F42 102D 0001                  		move.b	1(a5),d0
00083F46 0000 001F                  		ori.b	#$1F,d0
00083F4A 13C0 00C0 0011             		move.b	d0,($C00011).l
00083F50                            
00083F50                            locret_729B4:
00083F50 4E75                       		rts	
00083F52                            ; End of function sub_729A0
00083F52                            
00083F52                            
00083F52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083F52                            
00083F52                            
00083F52                            sub_729B6:				; XREF: loc_71E7C
00083F52 41F9 00C0 0011             		lea	($C00011).l,a0
00083F58 10BC 009F                  		move.b	#$9F,(a0)
00083F5C 10BC 00BF                  		move.b	#$BF,(a0)
00083F60 10BC 00DF                  		move.b	#$DF,(a0)
00083F64 10BC 00FF                  		move.b	#$FF,(a0)
00083F68 4E75                       		rts	
00083F6A                            ; End of function sub_729B6
00083F6A                            
00083F6A                            ; ===========================================================================
00083F6A 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
00083F7C 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
00083F8E 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
00083FA2 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
00083FB6 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
00083FCA 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
00083FDE 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
00083FF2 0011 0000                  		dc.w $11, 0
00083FF6                            
00083FF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083FF6                            
00083FF6                            
00083FF6                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00083FF6 0445 00E0                  		subi.w	#$E0,d5
00083FFA E54D                       		lsl.w	#2,d5
00083FFC 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
00084000                            ; End of function sub_72A5A
00084000                            
00084000                            ; ===========================================================================
00084000                            
00084000                            loc_72A64:
00084000 6000 0000                  		bra.w	loc_72ACC
00084004                            ; ===========================================================================
00084004 6000 0000                  		bra.w	loc_72AEC
00084008                            ; ===========================================================================
00084008 6000 0000                  		bra.w	loc_72AF2
0008400C                            ; ===========================================================================
0008400C 6000 0000                  		bra.w	loc_72AF8
00084010                            ; ===========================================================================
00084010 6000 0000                  		bra.w	loc_72B14
00084014                            ; ===========================================================================
00084014 6000 0000                  		bra.w	loc_72B9E
00084018                            ; ===========================================================================
00084018 6000 0000                  		bra.w	loc_72BA4
0008401C                            ; ===========================================================================
0008401C 6000 0000                  		bra.w	loc_72BAE
00084020                            ; ===========================================================================
00084020 6000 0000                  		bra.w	loc_72BB4
00084024                            ; ===========================================================================
00084024 6000 0000                  		bra.w	loc_72BBE
00084028                            ; ===========================================================================
00084028 6000 0000                  		bra.w	loc_72BC6
0008402C                            ; ===========================================================================
0008402C 6000 0000                  		bra.w	loc_72BD0
00084030                            ; ===========================================================================
00084030 6000 0000                  		bra.w	loc_72BE6
00084034                            ; ===========================================================================
00084034 6000 0000                  		bra.w	loc_72BEE
00084038                            ; ===========================================================================
00084038 6000 0000                  		bra.w	loc_72BF4
0008403C                            ; ===========================================================================
0008403C 6000 0000                  		bra.w	loc_72C26
00084040                            ; ===========================================================================
00084040 6000 0000                  		bra.w	loc_72D30
00084044                            ; ===========================================================================
00084044 6000 0000                  		bra.w	loc_72D52
00084048                            ; ===========================================================================
00084048 6000 0000                  		bra.w	loc_72D58
0008404C                            ; ===========================================================================
0008404C 6000 0000                  		bra.w	loc_72E06
00084050                            ; ===========================================================================
00084050 6000 0000                  		bra.w	loc_72E20
00084054                            ; ===========================================================================
00084054 6000 0000                  		bra.w	loc_72E26
00084058                            ; ===========================================================================
00084058 6000 0000                  		bra.w	loc_72E2C
0008405C                            ; ===========================================================================
0008405C 6000 0000                  		bra.w	loc_72E38
00084060                            ; ===========================================================================
00084060 6000 0000                  		bra.w	loc_72E52
00084064                            ; ===========================================================================
00084064 6000 0000                  		bra.w	loc_72E64
00084068                            ; ===========================================================================
00084068                            
00084068                            loc_72ACC:				; XREF: loc_72A64
00084068 121C                       		move.b	(a4)+,d1
0008406A 4A2D 0001                  		tst.b	1(a5)
0008406E 6B00                       		bmi.s	locret_72AEA
00084070 102D 000A                  		move.b	$A(a5),d0
00084074 0200 0037                  		andi.b	#$37,d0
00084078 8200                       		or.b	d0,d1
0008407A 1B41 000A                  		move.b	d1,$A(a5)
0008407E 103C 00B4                  		move.b	#$B4,d0
00084082 6000 FC02                  		bra.w	loc_72716
00084086                            ; ===========================================================================
00084086                            
00084086                            locret_72AEA:
00084086 4E75                       		rts	
00084088                            ; ===========================================================================
00084088                            
00084088                            loc_72AEC:				; XREF: loc_72A64
00084088 1B5C 001E                  		move.b	(a4)+,$1E(a5)
0008408C 4E75                       		rts	
0008408E                            ; ===========================================================================
0008408E                            
0008408E                            loc_72AF2:				; XREF: loc_72A64
0008408E 1D5C 0007                  		move.b	(a4)+,7(a6)
00084092 4E75                       		rts	
00084094                            ; ===========================================================================
00084094                            
00084094                            loc_72AF8:				; XREF: loc_72A64
00084094 7000                       		moveq	#0,d0
00084096 102D 000D                  		move.b	$D(a5),d0
0008409A 2875 0000                  		movea.l	(a5,d0.w),a4
0008409E 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
000840A6 544C                       		addq.w	#2,a4
000840A8 5800                       		addq.b	#4,d0
000840AA 1B40 000D                  		move.b	d0,$D(a5)
000840AE 4E75                       		rts	
000840B0                            ; ===========================================================================
000840B0                            
000840B0                            loc_72B14:				; XREF: loc_72A64
000840B0 204E                       		movea.l	a6,a0
000840B2 43EE 03D0                  		lea	$3D0(a6),a1				; MJ: new SFX location
000840B6 303C 0093                  		move.w	#$93,d0					; MJ: new size to store
000840BA                            
000840BA                            loc_72B1E:
000840BA 20D9                       		move.l	(a1)+,(a0)+
000840BC 51C8 FFFC                  		dbf	d0,loc_72B1E
000840C0                            
000840C0 08EE 0002 0040             		bset	#2,$40(a6)
000840C6 08EE 0002 0070             		bset	#2,$70(a6)				; MJ: enable PCM 2
000840CC 264D                       		movea.l	a5,a3
000840CE 1C3C 0028                  		move.b	#$28,d6
000840D2 9C2E 0026                  		sub.b	$26(a6),d6
000840D6 7E05                       		moveq	#5,d7
000840D8 4BEE 00A0                  		lea	$A0(a6),a5				; MJ: new FM location
000840DC                            
000840DC                            loc_72B3A:
000840DC 0815 0007                  		btst	#7,(a5)
000840E0 6700                       		beq.s	loc_72B5C
000840E2 08D5 0001                  		bset	#1,(a5)
000840E6 DD2D 0009                  		add.b	d6,9(a5)
000840EA 0815 0002                  		btst	#2,(a5)
000840EE 6600                       		bne.s	loc_72B5C
000840F0 7000                       		moveq	#0,d0
000840F2 102D 000B                  		move.b	$B(a5),d0
000840F6 226E 0018                  		movea.l	$18(a6),a1
000840FA 4EBA 0000                  		jsr	sub_72C4E(pc)
000840FE                            
000840FE                            loc_72B5C:
000840FE DAFC 0030                  		adda.w	#$30,a5
00084102 51CF FFD8                  		dbf	d7,loc_72B3A
00084106                            
00084106 7E02                       		moveq	#2,d7
00084108                            
00084108                            loc_72B66:
00084108 0815 0007                  		btst	#7,(a5)
0008410C 6700                       		beq.s	loc_72B78
0008410E 08D5 0001                  		bset	#1,(a5)
00084112 4EBA FE28                  		jsr	sub_729A0(pc)
00084116 DD2D 0009                  		add.b	d6,9(a5)
0008411A                            
0008411A                            loc_72B78:
0008411A DAFC 0030                  		adda.w	#$30,a5
0008411E 51CF FFE8                  		dbf	d7,loc_72B66
00084122 2A4B                       		movea.l	a3,a5
00084124 1D7C 0080 0024             		move.b	#$80,$24(a6)
0008412A 1D7C 0028 0026             		move.b	#$28,$26(a6)
00084130 422E 0027                  		clr.b	$27(a6)
00084134 504F                       		addq.w	#8,sp
00084136 4E75                       		rts	
00084138                            ; ===========================================================================
00084138                            
00084138                            loc_72B9E:				; XREF: loc_72A64
00084138 1B5C 0002                  		move.b	(a4)+,2(a5)
0008413C 4E75                       		rts	
0008413E                            ; ===========================================================================
0008413E                            
0008413E                            loc_72BA4:				; XREF: loc_72A64
0008413E 101C                       		move.b	(a4)+,d0
00084140 D12D 0009                  		add.b	d0,9(a5)
00084144 6000 0000                  		bra.w	sub_72CB4
00084148                            ; ===========================================================================
00084148                            
00084148                            loc_72BAE:				; XREF: loc_72A64
00084148 08D5 0004                  		bset	#4,(a5)
0008414C 4E75                       		rts	
0008414E                            ; ===========================================================================
0008414E                            
0008414E                            loc_72BB4:				; XREF: loc_72A64
0008414E 1B54 0012                  		move.b	(a4),$12(a5)
00084152 1B5C 0013                  		move.b	(a4)+,$13(a5)
00084156 4E75                       		rts	
00084158                            ; ===========================================================================
00084158                            
00084158                            loc_72BBE:				; XREF: loc_72A64
00084158 101C                       		move.b	(a4)+,d0
0008415A D12D 0008                  		add.b	d0,8(a5)
0008415E 4E75                       		rts	
00084160                            ; ===========================================================================
00084160                            
00084160                            loc_72BC6:				; XREF: loc_72A64
00084160 1D54 0002                  		move.b	(a4),2(a6)
00084164 1D5C 0001                  		move.b	(a4)+,1(a6)
00084168 4E75                       		rts	
0008416A                            ; ===========================================================================
0008416A                            
0008416A                            loc_72BD0:				; XREF: loc_72A64
0008416A 41EE 0040                  		lea	$40(a6),a0
0008416E 101C                       		move.b	(a4)+,d0
00084170 7230                       		moveq	#$30,d1
00084172 740A                       		moveq	#10,d2				; MJ: extra channel
00084174                            
00084174                            loc_72BDA:
00084174 1140 0002                  		move.b	d0,2(a0)
00084178 D0C1                       		adda.w	d1,a0
0008417A 51CA FFF8                  		dbf	d2,loc_72BDA
0008417E                            
0008417E 4E75                       		rts	
00084180                            ; ===========================================================================
00084180                            
00084180                            loc_72BE6:				; XREF: loc_72A64
00084180 101C                       		move.b	(a4)+,d0
00084182 D12D 0009                  		add.b	d0,9(a5)
00084186 4E75                       		rts	
00084188                            ; ===========================================================================
00084188                            
00084188                            loc_72BEE:				; XREF: loc_72A64
00084188 422E 002C                  		clr.b	$2C(a6)
0008418C 4E75                       		rts	
0008418E                            ; ===========================================================================
0008418E                            
0008418E                            loc_72BF4:				; XREF: loc_72A64
0008418E 0895 0007                  		bclr	#7,(a5)
00084192 0895 0004                  		bclr	#4,(a5)
00084196 4EBA FAD6                  		jsr	sub_726FE(pc)
0008419A 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
0008419E 6B00                       		bmi.s	loc_72C22
000841A0 264D                       		movea.l	a5,a3
000841A2 4BEE 0130                  		lea	$130(a6),a5				; MJ: new BGM location
000841A6 226E 0018                  		movea.l	$18(a6),a1
000841AA 0895 0002                  		bclr	#2,(a5)
000841AE 08D5 0001                  		bset	#1,(a5)
000841B2 102D 000B                  		move.b	$B(a5),d0
000841B6 4EBA 0000                  		jsr	sub_72C4E(pc)
000841BA 2A4B                       		movea.l	a3,a5
000841BC                            
000841BC                            loc_72C22:
000841BC 504F                       		addq.w	#8,sp
000841BE 4E75                       		rts	
000841C0                            ; ===========================================================================
000841C0                            
000841C0                            loc_72C26:				; XREF: loc_72A64
000841C0 7000                       		moveq	#0,d0
000841C2 101C                       		move.b	(a4)+,d0
000841C4 1B40 000B                  		move.b	d0,$B(a5)
000841C8 0815 0002                  		btst	#2,(a5)
000841CC 6600 0000                  		bne.w	locret_72CAA
000841D0 226E 0018                  		movea.l	$18(a6),a1
000841D4 4A2E 000E                  		tst.b	$E(a6)
000841D8 6700                       		beq.s	sub_72C4E
000841DA 226D 0020                  		movea.l	$20(a5),a1
000841DE 4A2E 000E                  		tst.b	$E(a6)
000841E2 6B00                       		bmi.s	sub_72C4E
000841E4 226E 0020                  		movea.l	$20(a6),a1
000841E8                            
000841E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000841E8                            
000841E8                            
000841E8                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
000841E8 5340                       		subq.w	#1,d0
000841EA 6B00                       		bmi.s	loc_72C5C
000841EC 323C 0019                  		move.w	#$19,d1
000841F0                            
000841F0                            loc_72C56:
000841F0 D2C1                       		adda.w	d1,a1
000841F2 51C8 FFFC                  		dbf	d0,loc_72C56
000841F6                            
000841F6                            loc_72C5C:
000841F6 1219                       		move.b	(a1)+,d1
000841F8 1B41 001F                  		move.b	d1,$1F(a5)
000841FC 1801                       		move.b	d1,d4
000841FE 103C 00B0                  		move.b	#$B0,d0
00084202 4EBA FA8E                  		jsr	sub_72722(pc)
00084206 45FA 0000                  		lea	byte_72D18(pc),a2
0008420A 7613                       		moveq	#$13,d3
0008420C                            
0008420C                            loc_72C72:
0008420C 101A                       		move.b	(a2)+,d0
0008420E 1219                       		move.b	(a1)+,d1
00084210 4EBA FA80                  		jsr	sub_72722(pc)
00084214 51CB FFF6                  		dbf	d3,loc_72C72
00084218 7A03                       		moveq	#3,d5
0008421A 0244 0007                  		andi.w	#7,d4
0008421E 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
00084222 162D 0009                  		move.b	9(a5),d3
00084226                            
00084226                            loc_72C8C:
00084226 101A                       		move.b	(a2)+,d0
00084228 1219                       		move.b	(a1)+,d1
0008422A E20C                       		lsr.b	#1,d4
0008422C 6400                       		bcc.s	loc_72C96
0008422E D203                       		add.b	d3,d1
00084230                            
00084230                            loc_72C96:
00084230 4EBA FA60                  		jsr	sub_72722(pc)
00084234 51CD FFF0                  		dbf	d5,loc_72C8C
00084238 103C 00B4                  		move.b	#$B4,d0
0008423C 122D 000A                  		move.b	$A(a5),d1
00084240 4EBA FA50                  		jsr	sub_72722(pc)
00084244                            
00084244                            locret_72CAA:
00084244 4E75                       		rts	
00084246                            ; End of function sub_72C4E
00084246                            
00084246                            ; ===========================================================================
00084246 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
0008424E                            
0008424E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008424E                            
0008424E                            
0008424E                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
0008424E 0815 0002                  		btst	#2,(a5)
00084252 6600                       		bne.s	locret_72D16
00084254 7000                       		moveq	#0,d0
00084256 102D 000B                  		move.b	$B(a5),d0
0008425A 226E 0018                  		movea.l	$18(a6),a1
0008425E 4A2E 000E                  		tst.b	$E(a6)
00084262 6700                       		beq.s	loc_72CD8
00084264 226E 0020                  		movea.l	$20(a6),a1
00084268 4A2E 000E                  		tst.b	$E(a6)
0008426C 6B00                       		bmi.s	loc_72CD8
0008426E 226E 0020                  		movea.l	$20(a6),a1
00084272                            
00084272                            loc_72CD8:
00084272 5340                       		subq.w	#1,d0
00084274 6B00                       		bmi.s	loc_72CE6
00084276 323C 0019                  		move.w	#$19,d1
0008427A                            
0008427A                            loc_72CE0:
0008427A D2C1                       		adda.w	d1,a1
0008427C 51C8 FFFC                  		dbf	d0,loc_72CE0
00084280                            
00084280                            loc_72CE6:
00084280 D2FC 0015                  		adda.w	#$15,a1
00084284 45FA 0000                  		lea	byte_72D2C(pc),a2
00084288 102D 001F                  		move.b	$1F(a5),d0
0008428C 0240 0007                  		andi.w	#7,d0
00084290 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
00084294 162D 0009                  		move.b	9(a5),d3
00084298 6B00                       		bmi.s	locret_72D16
0008429A 7A03                       		moveq	#3,d5
0008429C                            
0008429C                            loc_72D02:
0008429C 101A                       		move.b	(a2)+,d0
0008429E 1219                       		move.b	(a1)+,d1
000842A0 E20C                       		lsr.b	#1,d4
000842A2 6400                       		bcc.s	loc_72D12
000842A4 D203                       		add.b	d3,d1
000842A6 6500                       		bcs.s	loc_72D12
000842A8 4EBA F9E8                  		jsr	sub_72722(pc)
000842AC                            
000842AC                            loc_72D12:
000842AC 51CD FFEE                  		dbf	d5,loc_72D02
000842B0                            
000842B0                            locret_72D16:
000842B0 4E75                       		rts	
000842B2                            ; End of function sub_72CB4
000842B2                            
000842B2                            ; ===========================================================================
000842B2 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
000842BC 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
000842C6 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
000842CA                            ; ===========================================================================
000842CA                            
000842CA                            loc_72D30:				; XREF: loc_72A64
000842CA 08D5 0003                  		bset	#3,(a5)
000842CE 2B4C 0014                  		move.l	a4,$14(a5)
000842D2 1B5C 0018                  		move.b	(a4)+,$18(a5)
000842D6 1B5C 0019                  		move.b	(a4)+,$19(a5)
000842DA 1B5C 001A                  		move.b	(a4)+,$1A(a5)
000842DE 101C                       		move.b	(a4)+,d0
000842E0 E208                       		lsr.b	#1,d0
000842E2 1B40 001B                  		move.b	d0,$1B(a5)
000842E6 426D 001C                  		clr.w	$1C(a5)
000842EA 4E75                       		rts	
000842EC                            ; ===========================================================================
000842EC                            
000842EC                            loc_72D52:				; XREF: loc_72A64
000842EC 08D5 0003                  		bset	#3,(a5)
000842F0 4E75                       		rts	
000842F2                            ; ===========================================================================
000842F2                            
000842F2                            loc_72D58:				; XREF: loc_72A64
000842F2 0895 0007                  		bclr	#7,(a5)
000842F6 0895 0004                  		bclr	#4,(a5)
000842FA 4A2D 0001                  		tst.b	1(a5)
000842FE 6B00                       		bmi.s	loc_72D74
00084300 4A2E 0008                  		tst.b	8(a6)
00084304 6B00 0000                  		bmi.w	loc_72E02
00084308 4EBA F964                  		jsr	sub_726FE(pc)
0008430C 6000                       		bra.s	loc_72D78
0008430E                            ; ===========================================================================
0008430E                            
0008430E                            loc_72D74:
0008430E 4EBA FC2C                  		jsr	sub_729A0(pc)
00084312                            
00084312                            loc_72D78:
00084312 4A2E 000E                  		tst.b	$E(a6)
00084316 6A00 0000                  		bpl.w	loc_72E02
0008431A 4216                       		clr.b	0(a6)
0008431C 7000                       		moveq	#0,d0
0008431E 102D 0001                  		move.b	1(a5),d0
00084322 6B00                       		bmi.s	loc_72DCC
00084324 41FA F4A4                  		lea	dword_722CC(pc),a0
00084328 264D                       		movea.l	a5,a3
0008432A 0C00 0004                  		cmpi.b	#4,d0
0008432E 6600                       		bne.s	loc_72DA8
00084330 4A2E 0370                  		tst.b	$370(a6)				; MJ: new SFX location
00084334 6A00                       		bpl.s	loc_72DA8
00084336 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
0008433A 226E 0020                  		movea.l	$20(a6),a1
0008433E 6000                       		bra.s	loc_72DB8
00084340                            ; ===========================================================================
00084340                            
00084340                            loc_72DA8:
00084340 5500                       		subq.b	#2,d0
00084342 E508                       		lsl.b	#2,d0
00084344 2A70 0000                  		movea.l	(a0,d0.w),a5
00084348 4A15                       		tst.b	(a5)
0008434A 6A00                       		bpl.s	loc_72DC8
0008434C 226E 0018                  		movea.l	$18(a6),a1
00084350                            
00084350                            loc_72DB8:
00084350 0895 0002                  		bclr	#2,(a5)
00084354 08D5 0001                  		bset	#1,(a5)
00084358 102D 000B                  		move.b	$B(a5),d0
0008435C 4EBA FE8A                  		jsr	sub_72C4E(pc)
00084360                            
00084360                            loc_72DC8:
00084360 2A4B                       		movea.l	a3,a5
00084362 6000                       		bra.s	loc_72E02
00084364                            ; ===========================================================================
00084364                            
00084364                            loc_72DCC:
00084364 41EE 03A0                  		lea	$3A0(a6),a0				; MJ: new SFX location
00084368 4A10                       		tst.b	(a0)
0008436A 6A00                       		bpl.s	loc_72DE0
0008436C 0C00 00E0                  		cmpi.b	#$E0,d0
00084370 6700                       		beq.s	loc_72DEA
00084372 0C00 00C0                  		cmpi.b	#$C0,d0
00084376 6700                       		beq.s	loc_72DEA
00084378                            
00084378                            loc_72DE0:
00084378 41FA F450                  		lea	dword_722CC(pc),a0
0008437C E608                       		lsr.b	#3,d0
0008437E 2070 0000                  		movea.l	(a0,d0.w),a0
00084382                            
00084382                            loc_72DEA:
00084382 0890 0002                  		bclr	#2,(a0)
00084386 08D0 0001                  		bset	#1,(a0)
0008438A 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00084390 6600                       		bne.s	loc_72E02
00084392 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0008439A                            
0008439A                            loc_72E02:
0008439A 584F                       		addq.w	#4,sp					; MJ: changed to 4 (go back, but not out of sound driver)
0008439C 4A2E 0008                  		tst.b	$08(a6)					; MJ: is this a PCM channel?
000843A0 6600                       		bne.s	FlagF2_NoWaitFrame			; MJ: if so, branch
000843A2 584F                       		addq.w	#4,sp					; MJ: go back outside the sound driver like normal
000843A4                            
000843A4                            FlagF2_NoWaitFrame:
000843A4 4E75                       		rts	
000843A6                            ; ===========================================================================
000843A6                            
000843A6                            loc_72E06:				; XREF: loc_72A64
000843A6 1B7C 00E0 0001             		move.b	#$E0,1(a5)
000843AC 1B5C 001F                  		move.b	(a4)+,$1F(a5)
000843B0 0815 0002                  		btst	#2,(a5)
000843B4 6600                       		bne.s	locret_72E1E 
000843B6 102C FFFF                  		move.b	-1(a4),d0				; MJ: reload F3 setting to d0
000843BA 13C0 00C0 0011             		move.b	d0,($C00011).l				; MJ: save F3 setting (should be EX (PSG 4) related)
000843C0 0200 0003                  		andi.b	#%00000011,d0				; MJ: get only frequency mode bits
000843C4 0C00 0003                  		cmpi.b	#%00000011,d0				; MJ: has it been set to use PSG 3's frequency?
000843C8 6600                       		bne.s	locret_72E1E				; MJ: if not, branch
000843CA 13FC 00DF 00C0 0011        		move.b	#%11011111,($C00011).l			; MJ: mute PSG 3's volume
000843D2                            
000843D2                            locret_72E1E:
000843D2 4E75                       		rts	
000843D4                            ; ===========================================================================
000843D4                            
000843D4                            loc_72E20:				; XREF: loc_72A64
000843D4 0895 0003                  		bclr	#3,(a5)
000843D8 4E75                       		rts	
000843DA                            ; ===========================================================================
000843DA                            
000843DA                            loc_72E26:				; XREF: loc_72A64
000843DA 1B5C 000B                  		move.b	(a4)+,$B(a5)
000843DE 4E75                       		rts	
000843E0                            ; ===========================================================================
000843E0                            
000843E0                            loc_72E2C:				; XREF: loc_72A64
000843E0 101C                       		move.b	(a4)+,d0
000843E2 E148                       		lsl.w	#8,d0
000843E4 101C                       		move.b	(a4)+,d0
000843E6 D8C0                       		adda.w	d0,a4
000843E8 534C                       		subq.w	#1,a4
000843EA 4E75                       		rts	
000843EC                            ; ===========================================================================
000843EC                            
000843EC                            loc_72E38:				; XREF: loc_72A64
000843EC 7000                       		moveq	#0,d0
000843EE 101C                       		move.b	(a4)+,d0
000843F0 121C                       		move.b	(a4)+,d1
000843F2 4A35 0024                  		tst.b	$24(a5,d0.w)
000843F6 6600                       		bne.s	loc_72E48
000843F8 1B81 0024                  		move.b	d1,$24(a5,d0.w)
000843FC                            
000843FC                            loc_72E48:
000843FC 5335 0024                  		subq.b	#1,$24(a5,d0.w)
00084400 66DE                       		bne.s	loc_72E2C
00084402 544C                       		addq.w	#2,a4
00084404 4E75                       		rts	
00084406                            ; ===========================================================================
00084406                            
00084406                            loc_72E52:				; XREF: loc_72A64
00084406 7000                       		moveq	#0,d0
00084408 102D 000D                  		move.b	$D(a5),d0
0008440C 5900                       		subq.b	#4,d0
0008440E 2B8C 0000                  		move.l	a4,(a5,d0.w)
00084412 1B40 000D                  		move.b	d0,$D(a5)
00084416 60C8                       		bra.s	loc_72E2C
00084418                            ; ===========================================================================
00084418                            
00084418                            loc_72E64:				; XREF: loc_72A64
00084418 103C 0088                  		move.b	#$88,d0
0008441C 123C 000F                  		move.b	#$F,d1
00084420 4EBA F87C                  		jsr	sub_7272E(pc)
00084424 103C 008C                  		move.b	#$8C,d0
00084428 123C 000F                  		move.b	#$F,d1
0008442C 6000 F870                  		bra.w	sub_7272E
00084430                            ; ===========================================================================
00084430                            Z80ROM:		incbin	"Dual PCM\Z80.bin"
00086430                            Z80ROM_End:	even
00086430                            Music81:	incbin	sound\music81.bin
000877FE 00                         		even
000877FE                            Music82:	incbin	sound\music82.bin
0008D328                            		even
0008D328                            Music83:	incbin	sound\music83.bin
0008E7F0 00                         		even
0008E7F0                            Music84:	incbin	sound\music84.bin
0008FEC0 00                         		even
0008FEC0                            Music85:	incbin	sound\music85.bin
00090DEC                            		even
00090DEC                            Music86:	incbin	sound\music86.bin
0009400E 00                         		even
0009400E                            Music87:	incbin	sound\music87.bin
000941FA 00                         		even
000941FA                            Music88:	incbin	sound\music88.bin
000942EE 00                         		even
000942EE                            Music89:	incbin	sound\music89.bin
00095672 00                         		even
00095672                            Music8A:	incbin	sound\music8A.bin
000A7DB2 00                         		even
000A7DB2                            Music8B:	incbin	sound\music8B.bin
000A8E92 00                         		even
000A8E92                            Music8C:	incbin	sound\music8C.bin
000ABCC8 00                         		even
000ABCC8                            Music8D:	incbin	sound\music8D.bin
000ACC5A 00                         		even
000ACC5A                            Music8E:	incbin	sound\music8E.bin
000ACF6C 00                         		even
000ACF6C                            Music8F:	incbin	sound\music8F.bin
000AD0C2 00                         		even
000AD0C2                            Music90:	incbin	sound\music90.bin
000AD226 00                         		even
000AD226                            Music91:	incbin	sound\music91.bin
000BAA22 00                         		even
000BAA22                            Music92:	incbin	sound\music92.bin
000BAB52 00                         		even
000BAB52                            Music93:	incbin	sound\music93.bin
000BAC26 00                         		even
000BAC26                            Music94:	incbin	sound\music94.bin
000BC8C0                            		even
000BC8C0                            Music95:	incbin	sound\music95.bin
000BF668 00                         		even
000BF668                            Music96:	incbin	sound\music96.bin
000C0D58 00                         		even
000C0D58                            Music97:	incbin	sound\music97.bin
000C7172 00                         		even
000C7172                            Music98:	incbin	sound\music98.bin
000CAF34 00                         		even
000CAF34                            Music99:	incbin	sound\music92.bin
000CB064 00                         		even
000CB064                            Music9A:	incbin	sound\music9A.bin
000CD032                            		even
000CD032                            Music9B:	incbin	sound\music9B.bin
000D33E4                            		even
000D33E4                            Music9C:	incbin	sound\music9C.bin
000D583A                            		even
000D583A                            Music9D:	incbin	sound\music9D.bin
000D89CC                            		even
000D89CC                            Music9E:	incbin	sound\music9E.bin
000DF57C 00                         		even
000DF57C                            Music9F:	incbin	sound\music9F.bin
000E669C 00                         		even
000E669C                            ; ---------------------------------------------------------------------------
000E669C                            ; Sound	effect pointers
000E669C                            ; ---------------------------------------------------------------------------
000E669C 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000E66A8 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000E66B4 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000E66C0 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000E66CC 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000E66D8 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000E66E4 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000E66F0 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000E66FC 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000E6708 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000E6714 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000E6720 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000E672C 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000E6738 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000E6744 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000E6750 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000E675C 0000 0000                  		dc.l SoundD1
000E6760                            
000E6760 0000 0000                  SoundD0Index:	dc.l SoundD0
000E6764                            SoundA0:	incbin	sound\soundA0.bin
000E677A                            		even
000E677A                            SoundA1:	incbin	sound\soundA1.bin
000E67A4                            		even
000E67A4                            SoundA2:	incbin	sound\soundA2.bin
000E67C4                            		even
000E67C4                            SoundA3:	incbin	sound\soundA3.bin
000E67F6                            		even
000E67F6                            SoundA4:	incbin	sound\soundA4.bin
000E682C                            		even
000E682C                            SoundA5:	incbin	sound\soundA5.bin
000E6858                            		even
000E6858                            SoundA6:	incbin	sound\soundA6.bin
000E6888                            		even
000E6888                            SoundA7:	incbin	sound\soundA7.bin
000E68B8                            		even
000E68B8                            SoundA8:	incbin	sound\soundA8.bin
000E68EC                            		even
000E68EC                            SoundA9:	incbin	sound\soundA9.bin
000E68FE                            		even
000E68FE                            SoundAA:	incbin	sound\soundAA.bin
000E6940                            		even
000E6940                            SoundAB:	incbin	sound\soundAB.bin
000E6960                            		even
000E6960                            SoundAC:	incbin	sound\soundAC.bin
000E6994                            		even
000E6994                            SoundAD:	incbin	sound\soundAD.bin
000E69CA                            		even
000E69CA                            SoundAE:	incbin	sound\soundAE.bin
000E6A14                            		even
000E6A14                            SoundAF:	incbin	sound\soundAF.bin
000E6A42                            		even
000E6A42                            SoundB0:	incbin	sound\soundB0.bin
000E6A74                            		even
000E6A74                            SoundB1:	incbin	sound\soundB1.bin
000E6AA0                            		even
000E6AA0                            SoundB2:	incbin	sound\soundB2.bin
000E6AF0                            		even
000E6AF0                            SoundB3:	incbin	sound\soundB3.bin
000E6B3A                            		even
000E6B3A                            SoundB4:	incbin	sound\soundB4.bin
000E6B96                            		even
000E6B96                            SoundB5:	incbin	sound\soundB5.bin
000E6BC4                            		even
000E6BC4                            SoundB6:	incbin	sound\soundB6.bin
000E6BE2                            		even
000E6BE2                            SoundB7:	incbin	sound\soundB7.bin
000E6C1E                            		even
000E6C1E                            SoundB8:	incbin	sound\soundB8.bin
000E6C3C                            		even
000E6C3C                            SoundB9:	incbin	sound\soundB9.bin
000E6CA0                            		even
000E6CA0                            SoundBA:	incbin	sound\soundBA.bin
000E6CC8                            		even
000E6CC8                            SoundBB:	incbin	sound\soundBB.bin
000E6CF4                            		even
000E6CF4                            SoundBC:	incbin	sound\soundBC.bin
000E6D36                            		even
000E6D36                            SoundBD:	incbin	sound\soundBD.bin
000E6D8A                            		even
000E6D8A                            SoundBE:	incbin	sound\soundBE.bin
000E6DC4                            		even
000E6DC4                            SoundBF:	incbin	sound\soundBF.bin
000E6E36                            		even
000E6E36                            SoundC0:	incbin	sound\soundC0.bin
000E6E64                            		even
000E6E64                            SoundC1:	incbin	sound\soundC1.bin
000E6E9E                            		even
000E6E9E                            SoundC2:	incbin	sound\soundC2.bin
000E6EC8                            		even
000E6EC8                            SoundC3:	incbin	sound\soundC3.bin
000E6F42                            		even
000E6F42                            SoundC4:	incbin	sound\soundC4.bin
000E6F6A                            		even
000E6F6A                            SoundC5:	incbin	sound\soundC5.bin
000E6FD2                            		even
000E6FD2                            SoundC6:	incbin	sound\soundC6.bin
000E7014                            		even
000E7014                            SoundC7:	incbin	sound\soundC7.bin
000E7042                            		even
000E7042                            SoundC8:	incbin	sound\soundC8.bin
000E7054                            		even
000E7054                            SoundC9:	incbin	sound\soundC9.bin
000E7082                            		even
000E7082                            SoundCA:	incbin	sound\soundCA.bin
000E70B0                            		even
000E70B0                            SoundCB:	incbin	sound\soundCB.bin
000E70FC                            		even
000E70FC                            SoundCC:	incbin	sound\soundCC.bin
000E7136                            		even
000E7136                            SoundCD:	incbin	sound\soundCD.bin
000E7144                            		even
000E7144                            SoundCE:	incbin	sound\soundCE.bin
000E7172                            		even
000E7172                            SoundCF:	incbin	sound\soundCF.bin
000E71AA                            		even
000E71AA                            SoundD0:	incbin	sound\soundD0.bin
000E71E4                            		even
000E71E4                            SoundD1:	incbin	sound\soundD1.bin
000E7220                            		even			
000E7220                            SegaPCM:	incbin	sound\segapcm.wav,$3A
000F88A6 00                         SegaPCM_End:	even
000F88A6                            
000F88A6                            ; ===========================================================================
000F88A6                            ; ---------------------------------------------------------------------------
000F88A6                            ; Sample 68k PCM list
000F88A6                            ; ---------------------------------------------------------------------------
000F88A6                            
000F88A6 0000 0000                  SampleList:		dc.l	StopSample			; 80 (THIS IS A REST NOTE, DO NOT EDIT...)
000F88AA 0000 0000                  			dc.l	Sonic1Kick			; 81
000F88AE 0000 0000                  			dc.l	Sonic1Snare			; 82
000F88B2 0000 0000                  			dc.l	Sonic1TimpaniLow		; 83
000F88B6 0000 0000                  			dc.l	ChaotixCrash			; 84
000F88BA 0000 0000                   			dc.l	ChaotixSplash			; 85
000F88BE 0000 0000                  			dc.l	ChaotixTom1			; 86
000F88C2 0000 0000                  			dc.l	ChaotixTom2			; 87
000F88C6 0000 0000                  			dc.l	Sonic1TimpaniHigh		; 88
000F88CA 0000 0000                  			dc.l	Sonic1TimpaniMid		; 89
000F88CE 0000 0000                  			dc.l	Sonic1TimpaniLow		; 8A
000F88D2 0000 0000                  			dc.l	Sonic1TimpaniLower		; 8B
000F88D6 0000 0000                  			dc.l	Sonic3CleanSnare		; 8C
000F88DA 0000 0000                  			dc.l	KSTHi		; 8D
000F88DE 0000 0000                  			dc.l	KSTLo		; 8E
000F88E2 0000 0000                  			dc.l	MainCrash		; 8F
000F88E6 0000 0000                  			dc.l	RideCymbal		; 90
000F88EA 0000 0000                  			dc.l	Sonic1SnareSonic3Kick		; 91
000F88EE 0000 0000                  			dc.l	Sonic3Kick		; 92
000F88F2 0000 0000                  			dc.l	Tom1		; 93
000F88F6 0000 0000                  			dc.l	Tom2		; 94
000F88FA 0000 0000                  			dc.l	Tom3		; 95
000F88FE 0000 0000                  			dc.l	Tom4		; 96
000F8902 0000 0000                  			dc.l	Sonic2Clap		; 97
000F8906 0000 0000                  			dc.l	Sonic1SnareSonic2Clap		; 98
000F890A 0000 0000                  			dc.l	S1STom1		; 99	
000F890E 0000 0000                  			dc.l	S1STom2		; 9A			
000F8912 0000 0000                  			dc.l	S1STom3		; 9B
000F8916 0000 0000                  			dc.l	S1STom4		; 9C			
000F891A 0000 0000                  			dc.l	S1SLLZK		; 9D
000F891E 0000 0000                  			dc.l	LLZK		; 9E			
000F8922 0000 0000                  			dc.l	Bongo1		; 9F
000F8926 0000 0000                  			dc.l	Bongo2		; A0
000F892A 0000 0000                  			dc.l	S1SnareCrash	;A1
000F892E 0000 0000                  			dc.l	S1SnareKick	;A2
000F8932 0000 0000                  			dc.l	MainCrashWoo	;A3
000F8936 0000 0000                  			dc.l	Woo		;A4
000F893A 0000 0000                  			dc.l	GoS1Snare	;A5
000F893E 0000 0000                  			dc.l	CmonRoll	;A6
000F8942 0000 0000                  			dc.l	ReverseCymbal	;A7
000F8946 0000 0000                  			dc.l	Cutscene1	;A8
000F894A 0000 0000                  			dc.l	Cutscene2	;A9
000F894E 0000 0000                  			dc.l	Snare3	;AA
000F8952 0000 0000                  			dc.l	Snare3Crash	;AB
000F8956 0000 0000                  			dc.l	EGGStation	;AC
000F895A                            ; ---------------------------------------------------------------------------
000F895A                            ; Sample z80 pointers
000F895A                            ; ---------------------------------------------------------------------------
000F895A                            
000F895A 0000 00                    StopSample:		dcz80	SWF_StopSample
000F895D 0000 00                    Sonic1Kick:		dcz80	SWF_S1Kick
000F8960 0000 00                    Sonic1Snare:		dcz80	SWF_S1Snare
000F8963 0000 00                    Sonic1TimpaniHigh:	dcz80	SWF_S1TimpaniHigh
000F8966 0000 00                    Sonic1TimpaniMid:	dcz80	SWF_S1TimpaniMid
000F8969 0000 00                    Sonic1TimpaniLow:	dcz80	SWF_S1TimpaniLow
000F896C 0000 00                    Sonic1TimpaniLower:	dcz80	SWF_S1TimpaniLower
000F896F 0000 00                    ChaotixCrash:	dcz80	SWF_ChaotixCrash
000F8972 0000 00                    ChaotixSplash:	dcz80	SWF_ChaotixSplash
000F8975 0000 00                    ChaotixTom1:	dcz80	SWF_ChaotixTom1
000F8978 0000 00                    ChaotixTom2:	dcz80	SWF_ChaotixTom2
000F897B 0000 00                    Sonic3CleanSnare:	dcz80	SWF_Sonic3CleanSnare
000F897E 0000 00                    KSTHi:	dcz80	SWF_KSTHi
000F8981 0000 00                    KSTLo:	dcz80	SWF_KSTLo
000F8984 0000 00                    MainCrash:	dcz80	SWF_MainCrash
000F8987 0000 00                    RideCymbal:	dcz80	SWF_RideCymbal
000F898A 0000 00                    Sonic1SnareSonic3Kick:	dcz80	SWF_Sonic1SnareSonic3Kick
000F898D 0000 00                    Sonic3Kick:	dcz80	SWF_Sonic3Kick
000F8990 0000 00                    Tom1:	dcz80	SWF_Tom1
000F8993 0000 00                    Tom2:	dcz80	SWF_Tom2
000F8996 0000 00                    Tom3:	dcz80	SWF_Tom3
000F8999 0000 00                    Tom4:	dcz80	SWF_Tom4
000F899C 0000 00                    Sonic2Clap:	dcz80	SWF_Sonic2Clap
000F899F 0000 00                    Sonic1SnareSonic2Clap:	dcz80	SWF_Sonic1SnareSonic2Clap
000F89A2 0000 00                    S1STom1:	dcz80	SWF_S1STom1
000F89A5 0000 00                    S1STom2:	dcz80	SWF_S1STom2
000F89A8 0000 00                    S1STom3:	dcz80	SWF_S1STom3
000F89AB 0000 00                    S1STom4:	dcz80	SWF_S1STom4
000F89AE 0000 00                    LLZK:	dcz80	SWF_LLZK
000F89B1 0000 00                    S1SLLZK:	dcz80	SWF_S1SLLZK
000F89B4 0000 00                    Bongo1:	dcz80	SWF_Bongo1
000F89B7 0000 00                    Bongo2:	dcz80	SWF_Bongo2
000F89BA 0000 00                    S1SnareCrash: dcz80 SWF_S1SnareCrash
000F89BD 0000 00                    S1SnareKick: dcz80 SWF_S1SnareKick
000F89C0 0000 00                    MainCrashWoo: dcz80 SWF_MainCrashWoo
000F89C3 0000 00                    Woo: dcz80 SWF_Woo
000F89C6 0000 00                    GoS1Snare: dcz80 SWF_GoS1Snare
000F89C9 0000 00                    CmonRoll: dcz80 SWF_CmonRoll
000F89CC 0000 00                    ReverseCymbal: dcz80 SWF_ReverseCymbal
000F89CF 0000 00                    Cutscene1: dcz80 SWF_Cutscene1
000F89D2 0000 00                    Cutscene2: dcz80 SWF_Cutscene2
000F89D5 0000 00                    Snare3: dcz80 SWF_Snare3
000F89D8 0000 00                    Snare3Crash: dcz80 SWF_Snare3Crash
000F89DB 0000 00                    EGGStation: dcz80 SWF_EGGStation
000F89DE                            ; ---------------------------------------------------------------------------
000F89DE                            ; Sample file includes
000F89DE                            ; ---------------------------------------------------------------------------
000F89DE 0000                       			align	$20,$FF
000F89E0                            SWF_StopSample:		dcb.b	$7FFF,$00
001009DF 80                         			dc.b	$80
001009E0                            ; ---------------------------------------------------------------------------
001009E0                            SWF_S1Kick:		incbin	"Dual PCM\Samples\incswf\Sonic 1 Kick.swf"
00101B00                            SWF_S1Snare:		incbin	"Dual PCM\Samples\incswf\Sonic 1 Snare.swf"
00102840                            SWF_S1TimpaniHigh:	incbin	"Dual PCM\Samples\incswf\Sonic 1 Timpani High.swf"
00106EE0                            SWF_S1TimpaniMid:	incbin	"Dual PCM\Samples\incswf\Sonic 1 Timpani Mid.swf"
0010BE20                            SWF_S1TimpaniLow:	incbin	"Dual PCM\Samples\incswf\Sonic 1 Timpani Low.swf"
00111C60                            SWF_S1TimpaniLower:	incbin	"Dual PCM\Samples\incswf\Sonic 1 Timpani Lower.swf"
00118040                            SWF_ChaotixCrash:	incbin	"Dual PCM\Samples\incswf\Knuckles Chaotix Crash Cymbal.swf"
0011F840                            SWF_ChaotixSplash:	incbin	"Dual PCM\Samples\incswf\Knuckles Chaotix Splash Cymbal.swf"
00121EE0                            SWF_ChaotixTom1:	incbin	"Dual PCM\Samples\incswf\Knuckles Chaotix Tom 1.swf"
00128F20                            SWF_ChaotixTom2:	incbin	"Dual PCM\Samples\incswf\Knuckles Chaotix Tom 2.swf"
0012A080                            SWF_Sonic3CleanSnare:	incbin	"Dual PCM\Samples\incswf\Sonic 3 Cleaner Snare.swf"
0012AF60                            SWF_KSTHi:	incbin	"Dual PCM\Samples\incswf\KSTHi.swf"
0012F600                            SWF_KSTLo:	incbin	"Dual PCM\Samples\incswf\KSTLo.swf"
00135440                            SWF_MainCrash:	incbin	"Dual PCM\Samples\incswf\MainCrash.swf"
0013A380                            SWF_RideCymbal:	incbin	"Dual PCM\Samples\incswf\RideCymbal.swf"
0013C1E0                            SWF_Sonic1SnareSonic3Kick:	incbin	"Dual PCM\Samples\incswf\Sonic 1 Snare and Sonic 3 Kick.swf"
0013CF00                            SWF_Sonic3Kick:	incbin	"Dual PCM\Samples\incswf\Sonic 3 Kick.swf"
0013D520                            SWF_Tom1:	incbin	"Dual PCM\Samples\incswf\Tom1.swf"
0013E400                            SWF_Tom2:	incbin	"Dual PCM\Samples\incswf\Tom2.swf"
0013F5E0                            SWF_Tom3:	incbin	"Dual PCM\Samples\incswf\Tom3.swf"
00140BC0                            SWF_Tom4:	incbin	"Dual PCM\Samples\incswf\Tom4.swf"
00142B60                            SWF_Sonic2Clap:	incbin	"Dual PCM\Samples\incswf\Sonic 2 Clap.swf"
00143880                            SWF_Sonic1SnareSonic2Clap:	incbin	"Dual PCM\Samples\incswf\Sonic 1 Snare and Sonic 2 Clap.swf"
001445C0                            SWF_S1STom1:	incbin	"Dual PCM\Samples\incswf\S1STom1.swf"
001454A0                            SWF_S1STom2:	incbin	"Dual PCM\Samples\incswf\S1STom2.swf"
00146680                            SWF_S1STom3:	incbin	"Dual PCM\Samples\incswf\S1STom3.swf"
00147C60                            SWF_S1STom4:	incbin	"Dual PCM\Samples\incswf\S1STom4.swf"
00149C00                            SWF_LLZK:	incbin	"Dual PCM\Samples\incswf\LLZK.swf"
0014B680                            SWF_S1SLLZK:	incbin	"Dual PCM\Samples\incswf\S1SLLZK.swf"
0014D100                            SWF_Bongo1:	incbin	"Dual PCM\Samples\incswf\Bongo1.swf"
0014DAA0                            SWF_Bongo2:	incbin	"Dual PCM\Samples\incswf\Bongo2.swf"
0014E7E0                            SWF_S1SnareCrash:	incbin	"Dual PCM\Samples\incswf\S1Snare and MainCrash.swf"
00153700                            SWF_S1SnareKick:	incbin	"Dual PCM\Samples\incswf\S1SnareKick.swf"
00154820                            SWF_MainCrashWoo:	incbin	"Dual PCM\Samples\incswf\MainCrashWoo.swf"
00159740                            SWF_Woo:	incbin	"Dual PCM\Samples\incswf\Woo.swf"
0015AC80                            SWF_GoS1Snare:	incbin	"Dual PCM\Samples\incswf\GoS1Snare.swf"
0015C080                            SWF_CmonRoll:	incbin	"Dual PCM\Samples\incswf\CmonRoll.swf"
0015EDC0                            SWF_ReverseCymbal:	incbin	"Dual PCM\Samples\incswf\Reverse cymbal.swf"
00162640                            SWF_Cutscene1:	incbin	"Dual PCM\Samples\incswf\Cutscene1.swf"
00167560                            SWF_Cutscene2:	incbin	"Dual PCM\Samples\incswf\Cutscene2.swf"
0016C480                            SWF_Snare3:	incbin	"Dual PCM\Samples\incswf\Snare3.swf"
0016D980                            SWF_Snare3Crash:	incbin	"Dual PCM\Samples\incswf\Snare3Crash.swf"
001728A0                            SWF_EGGStation:	incbin	"Dual PCM\Samples\incswf\EGGStation.swf"
001777C0                            ; ===============================================================
001777C0                            ; ---------------------------------------------------------------
001777C0                            ; Error handling module
001777C0                            ; ---------------------------------------------------------------
001777C0                             
001777C0 4EBA 0000                  BusError:   jsr ErrorHandler(pc)
001777C4 4255 5320 4552 524F 5200           dc.b    "BUS ERROR",0           ; text
001777CE 01                                 dc.b    1               ; extended stack frame
001777D0 00                                 even
001777D0                             
001777D0 4EBA 0000                  AddressError:   jsr ErrorHandler(pc)
001777D4 4144 4452 4553 5320 4552+          dc.b    "ADDRESS ERROR",0       ; text
001777E2 01                                 dc.b    1               ; extended stack frame
001777E4 00                                 even
001777E4                             
001777E4 4EBA 0000                  IllegalInstr:   jsr ErrorHandler(pc)
001777E8 494C 4C45 4741 4C20 494E+          dc.b    "ILLEGAL INSTRUCTION",0     ; text
001777FC 00                                 dc.b    0               ; extended stack frame
001777FE 00                                 even
001777FE                             
001777FE 4EBA 0000                  ZeroDivide: jsr ErrorHandler(pc)
00177802 5A45 524F 2044 4956 4944+          dc.b    "ZERO DIVIDE",0         ; text
0017780E 00                                 dc.b    0               ; extended stack frame
00177810 00                                 even
00177810                             
00177810 4EBA 0000                  ChkInstr:   jsr ErrorHandler(pc)
00177814 4348 4B20 494E 5354 5255+          dc.b    "CHK INSTRUCTION",0         ; text
00177824 00                                 dc.b    0               ; extended stack frame
00177826 00                                 even
00177826                             
00177826 4EBA 0000                  TrapvInstr: jsr ErrorHandler(pc)
0017782A 5452 4150 5620 494E 5354+          dc.b    "TRAPV INSTRUCTION",0       ; text
0017783C 00                                 dc.b    0               ; extended stack frame
0017783E 00                                 even
0017783E                             
0017783E 4EBA 0000                  PrivilegeViol:  jsr ErrorHandler(pc)
00177842 5052 4956 494C 4547 4520+          dc.b    "PRIVILEGE VIOLATION",0     ; text
00177856 00                                 dc.b    0               ; extended stack frame
00177858 00                                 even
00177858                             
00177858 4EBA 0000                  Trace:      jsr ErrorHandler(pc)
0017785C 5452 4143 4500                     dc.b    "TRACE",0           ; text
00177862 00                                 dc.b    0               ; extended stack frame
00177864 00                                 even
00177864                             
00177864 4EBA 0000                  Line1010Emu:    jsr ErrorHandler(pc)
00177868 4C49 4E45 2031 3031 3020+          dc.b    "LINE 1010 EMULATOR",0      ; text
0017787B 00                                 dc.b    0               ; extended stack frame
0017787C                                    even
0017787C                             
0017787C 4EBA 0000                  Line1111Emu:    jsr ErrorHandler(pc)
00177880 4C49 4E45 2031 3131 3120+          dc.b    "LINE 1111 EMULATOR",0      ; text
00177893 00                                 dc.b    0               ; extended stack frame
00177894                                    even
00177894                             
00177894 4EBA 0000                  ErrorExcept:    jsr ErrorHandler(pc)
00177898 4552 524F 5220 4558 4345+          dc.b    "ERROR EXCEPTION",0         ; text
001778A8 00                                 dc.b    0               ; extended stack frame
001778AA 00                                 even
001778AA                             
001778AA                            ErrorHandler:   incbin  "ErrorHandler.bin"
0017808E                            
0017808E                            	include	"s2_menu.asm"	; Sonic 2 level select
0017808E                            ;===============================================================================
0017808E                            ; Menu do Sonic 2 No Sonic 1 reprogramado por Esrael L. G. Neto
0017808E                            ; [ In�cio ]
0017808E                            ;
0017808E                            ; O c�digo deste menu foi desenvolvido para funcionar com
0017808E                            ; o disassembly do Sonic 1 feito por -> drx (www.hacking-cult.org)
0017808E                            ; 
0017808E                            ; Se estiver usando um disassembly diferente modifique os jumps no final do 
0017808E                            ; c�digo para que aponte para as rotinas equivalentes.
0017808E                            ; 
0017808E                            ; Para pode utilizar este menu basta fazer a seguinte modifica��o no c�digo 
0017808E                            ; original:
0017808E                            ; Localize o label  -> loc_3242 adicione -> jmp     Level_Select_Menu
0017808E                            ; O c�digo deve ficar como abaixo
0017808E                            ;               ......................
0017808E                            ; loc_3242:
0017808E                            ;		tst.b	($FFFFFFE0).w
0017808E                            ;		beq.w	PlayLevel	
0017808E                            ;		btst	#6,($FFFFF604).w 
0017808E                            ;		beq.w	PlayLevel	  		
0017808E                            ;		jmp     Level_Select_Menu ; <- Carrega o Menu do Sonic 2	
0017808E                            ;		moveq	#2,d0		
0017808E                            ;		bsr.w	PalLoad		 
0017808E                            ;               ...............
0017808E                            ;
0017808E                            ; N�o esque�a de incluir este asm em seu c�digo com a diretiva include:
0017808E                            ;               include 's2_menu.asm'
0017808E                            ;===============================================================================  
0017808E =FFFFFFE1                  Slow_Motion_Flag      equ $FFFFFFE1
0017808E =FFFFFFE2                  Debug_Mode_Flag       equ $FFFFFFE2
0017808E                            
0017808E =00000083                  Level_Select_Menu_snd   = $0083
0017808E =00000093                  Emerald_Snd             = $0093
0017808E =000000B5                  Ring_Snd                = $00B5
0017808E =000000E0                  Volume_Down             = $00E0
0017808E =000000E4                  Stop_Sound              = $00E4
0017808E                            ;-------------------------------------------------------------------------------
0017808E                            Level_Select_Menu:
0017808E 103C 00E4                                  move.b  #Stop_Sound, D0
00178092 6100 0000                                  bsr     Menu_Play_Music
00178096 6100 0000                                  bsr     Menu_Pal_FadeFrom
0017809A 46FC 2700                                  move    #$2700, SR
0017809E 3038 F60C                                  move.w  ($FFFFF60C).w, D0
001780A2 0200 00BF                                  andi.b  #$BF, D0
001780A6 33C0 00C0 0004                             move.w  D0, ($00C00004)
001780AC 6100 0000                                  bsr     Menu_ClearScreen
001780B0 4DF9 00C0 0004                             lea     ($00C00004), A6
001780B6 3CBC 8004                                  move.w  #$8004, (A6)
001780BA 3CBC 8230                                  move.w  #$8230, (A6)
001780BE 3CBC 8407                                  move.w  #$8407, (A6)
001780C2 3CBC 8230                                  move.w  #$8230, (A6)
001780C6 3CBC 8700                                  move.w  #$8700, (A6)
001780CA 3CBC 8C81                                  move.w  #$8C81, (A6)
001780CE 3CBC 9001                                  move.w  #$9001, (A6)
001780D2 43F8 AC00                                  lea     ($FFFFAC00).w, A1
001780D6 7000                                       moveq   #$00, D0
001780D8 323C 00FF                                  move.w  #$00FF, D1
001780DC                            Offset_0x026ACA:
001780DC 22C0                                       move.l  D0, (A1)+
001780DE 51C9 FFFC                                  dbra    D1, Offset_0x026ACA
001780E2 43F8 B000                                  lea     ($FFFFB000).w, A1
001780E6 7000                                       moveq   #$00, D0
001780E8 323C 07FF                                  move.w  #$07FF, D1
001780EC                            Offset_0x026ADA:
001780EC 22C0                                       move.l  D0, (A1)+
001780EE 51C9 FFFC                                  dbra    D1, Offset_0x026ADA
001780F2 4278 DC00                                  clr.w   ($FFFFDC00).w
001780F6 21FC FFFF DC00 DCFC                        move.l  #$FFFFDC00, ($FFFFDCFC).w
001780FE 23FC 4200 0000 00C0 0004                   move.l  #$42000000, ($00C00004)
00178108 41F9 0000 0000                             lea     (Menu_Font), A0
0017810E 6100 0000                                  bsr     Menu_NemesisDec
00178112 23FC 5200 0000 00C0 0004                   move.l  #$52000000, ($00C00004)
0017811C 41F9 0000 0000                             lea     (Level_Icons), A0
00178122 4EB9 0000 0000                             jsr     Menu_NemesisDec
00178128                            ;-------------------------------------------------------------------------------                
00178128                            ; Carrega o Mapeamento do Fundo Sonic/Miles               
00178128                            ;-------------------------------------------------------------------------------
00178128 43F9 FFFF 0000                             lea     ($FFFF0000), A1
0017812E 41F9 0000 0000                             lea     (Menu_Mappings), A0
00178134 303C 6000                                  move.w  #$6000, D0
00178138 6100 0000                                  bsr     Menu_EnigmaDec
0017813C 43F9 FFFF 0000                             lea     ($FFFF0000), A1
00178142 203C 6000 0003                             move.l  #$60000003, D0
00178148 7227                                       moveq   #$27, D1
0017814A 741B                                       moveq   #$1B, D2
0017814C 6100 0000                                  bsr     Menu_ShowVDPGraphics
00178150                            ;-------------------------------------------------------------------------------                
00178150                            ; Carrega o Texto do Menu de Seleзгo de Fases               
00178150                            ;-------------------------------------------------------------------------------
00178150 47F9 FFFF 0000             		lea		($FFFF0000),a3
00178156 323C 045F                  		move.w	#$045F,d1
0017815A                            
0017815A                            Offset_0x026B4E:
0017815A 36FC 0000                  		move.w	#$0000,(a3)+
0017815E 51C9 FFFA                  		dbra	d1,Offset_0x026B4E
00178162 47F9 FFFF 0000             		lea		($FFFF0000),a3
00178168 43F9 0000 0000             		lea		(Menu_Level_Select_Text),a1
0017816E 4BF9 0000 0000             		lea		(Menu_Text_Positions),a5
00178174 7000                       		moveq	#$00,d0
00178176 323C 0009                  		move.w	#$0009,d1	; Quantidade de textos a ser carregada e posiзгo do Sound Test
0017817A                            
0017817A                            Menu_Loop_Load_Text:
0017817A 361D                       		move.w	(a5)+,d3
0017817C 45F3 3000                  		lea		$00(a3,d3),a2
00178180 7400                       		moveq	#$00,d2
00178182 1419                       		move.b	(a1)+,d2
00178184 3602                       		move.w	d2,d3
00178186                            
00178186                            Offset_0x026B7A:
00178186 1019                       		move.b	(a1)+,d0
00178188 34C0                       		move.w	d0,(a2)+
0017818A 51CA FFFA                  		dbra	d2,Offset_0x026B7A
0017818E 343C 000D                  		move.w	#$000D,d2
00178192 9443                       		sub.w	d3,d2
00178194 6500                       		bcs.s	Offset_0x026B92
00178196                            
00178196                            Offset_0x026B8A:
00178196 34FC 0000                  		move.w	#$0000,(a2)+
0017819A 51CA FFFA                  		dbra	d2,Offset_0x026B8A
0017819E                            
0017819E                            Offset_0x026B92:
0017819E 34BC 0011                  		move.w	#$0011,(a2) 	 	 	 ; Load "1"
001781A2 45EA 0050                  		lea		$0050(a2),a2
001781A6 34BC 0012                  		move.w	#$0012,(a2) 	 	 	 ; Load "2"
001781AA 45EA 0050                  		lea		$0050(a2),a2
001781AE 34BC 0013                  		move.w	#$0013,(a2) 	 	 	 ; Load "3"
001781B2 51C9 FFC6                  		dbra	d1,Menu_Loop_Load_Text
001781B6                            ;-------------------------------------------------------------------------------
001781B6 720E                       		moveq	#$0E,d1
001781B8 45EA FBA0                  		lea		$FFFFFBA0(a2),a2
001781BC                            
001781BC                            Menu_Clear_Act_x:						; Limpa os nъmeros dos acts nгo usados e carrega o "*" do Sound Test
001781BC 34BC 0000                  		move.w	#$0000,(a2)				; Load " "
001781C0 45EA 0050                  		lea		$0050(a2),a2
001781C4 51C9 FFF6                  		dbra	d1,Menu_Clear_Act_x
001781C8                            ;		lea     $FF10(a2), a2
001781C8                            ;		move.w  #$001A, (a2)          ; Load "*"
001781C8                            ;-------------------------------------------------------------------------------
001781C8                            ; Carrega o Mapeamento das Asas onde s�o mostrados os �cones
001781C8                            ;------------------------------------------------------------------------------- 
001781C8 41F9 0000 0000                             lea     (Wings_Mappings), A0
001781CE 43F9 FFFF 0670                             lea     ($FFFF0670), A1
001781D4 323C 0006                                  move     #$06, D1
001781D8                            Menu_Loop_Next_Line:
001781D8 303C 0009                                  move     #$09, D0
001781DC                            Menu_Loop_Load_Wings:
001781DC 32D8                                       move.w   (A0)+, (A1)+
001781DE 51C8 FFFC                                  dbra     D0, Menu_Loop_Load_Wings
001781E2 D2FC 003C                                  add.w    #$3C, A1
001781E6 51C9 FFF0                                  dbra     D1, Menu_Loop_Next_Line
001781EA                            ;-------------------------------------------------------------------------------                
001781EA                            ; Carrega o Mapeamento dos �cones               
001781EA                            ;-------------------------------------------------------------------------------                                    
001781EA 43F9 FFFF 08C0                             lea     ($FFFF08C0), A1
001781F0 41F9 0000 0000                             lea     (Icons_Mappings), A0
001781F6 303C 0090                                  move.w  #$0090, D0
001781FA 6100 0000                                  bsr     Menu_EnigmaDec
001781FE 43F9 FFFF 0000                             lea     ($FFFF0000), A1
00178204 203C 4000 0003                             move.l  #$40000003, D0
0017820A 7227                                       moveq   #$27, D1
0017820C 741B                                       moveq   #$1B, D2
0017820E 6100 0000                                  bsr     Menu_ShowVDPGraphics
00178212                            ;-------------------------------------------------------------------------------                
00178212 7600                                       moveq   #$00, D3
00178214 6100 0000                                  bsr     Offset_0x027040
00178218 4278 FF70                                  clr.w   ($FFFFFF70).w
0017821C 4278 FE40                                  clr.w   ($FFFFFE40).w
00178220 4238 F711                                  clr.b   ($FFFFF711).w
00178224 4278 F7F0                                  clr.w   ($FFFFF7F0).w
00178228                            ;------------------------------------------------------------------------------- 
00178228 31FC 0000 F7B8                             move.w  #$0000, ($FFFFF7B8).w  ; Inicializa os quadros das anima��es do menu
0017822E 31FC 0000 F7DA                             move.w  #$0000, ($FFFFF7DA).w  ; Inicializa o contador das anima��es do menu 
00178234 4EB9 0000 0000                             jsr     Dynamic_Menu           ; Chama a rotina de anima��o
0017823A                            ;-------------------------------------------------------------------------------
0017823A                            
0017823A 7014                                       moveq   #$14, D0
0017823C 6100 0000                                  bsr     Menu_PalLoad1
00178240 43F8 FB40                                  lea     ($FFFFFB40).w, A1
00178244 45F8 FBC0                                  lea     ($FFFFFBC0).w, A2
00178248 7207                                       moveq   #$07, D1
0017824A                            Offset_0x026C26:
0017824A 24D1                                       move.l  (A1), (A2)+
0017824C 4299                                       clr.l   (A1)+
0017824E 51C9 FFFA                                  dbra    D1, Offset_0x026C26
00178252 103C 0083                                  move.b  #Level_Select_Menu_snd, D0
00178256 6100 0000                                  bsr     Menu_Play_Music
0017825A 7000                                       moveq   #$00, D0
0017825C 4EB9 0000 0000                             jsr     Menu_LoadPLC2
00178262 31FC 0707 F614                             move.w  #$0707, ($FFFFF614).w
00178268 4278 FFDC                                  clr.w   ($FFFFFFDC).w
0017826C 42B8 EE00                                  clr.l   ($FFFFEE00).w
00178270 42B8 EE04                                  clr.l   ($FFFFEE04).w
00178274 4278 FF0C                                  clr.w   ($FFFFFF0C).w
00178278 4278 FF0E                                  clr.w   ($FFFFFF0E).w
0017827C 11FC 0018 F62A                             move.b  #$18, ($FFFFF62A).w
00178282 6100 0000                                  bsr     Menu_DelayProgram
00178286 3038 F60C                                  move.w  ($FFFFF60C).w, D0
0017828A 0000 0040                                  ori.b   #$40, D0
0017828E 33C0 00C0 0004                             move.w  D0, ($00C00004)
00178294 6100 0000                                  bsr     Menu_Pal_FadeTo
00178298                            Menu_Main_Loop:
00178298 11FC 0018 F62A                             move.b  #$18, ($FFFFF62A).w
0017829E 6100 0000                                  bsr     Menu_DelayProgram
001782A2 46FC 2700                                  move    #$2700, SR
001782A6 7600                                       moveq   #$00, D3
001782A8 6100 0000                                  bsr     Offset_0x026ED8
001782AC 6100 0000                                  bsr     Offset_0x026DEC
001782B0 363C 6000                                  move.w  #$6000, D3
001782B4 6100 0000                                  bsr     Offset_0x027048
001782B8 46FC 2300                                  move    #$2300, SR
001782BC 4EB9 0000 0000                             jsr     Dynamic_Menu
001782C2 6100 0000                                  bsr     Menu_RunPLC
001782C6 0838 0004 F604                             btst    #$04, ($FFFFF604).w
001782CC 6700                                       beq.s   Offset_0x026CC6
001782CE 31FC 0001 FFD8                             move.w  #$0001, ($FFFFFFD8).w
001782D4                            Offset_0x026CC6:
001782D4 1038 F605                                  move.b  ($FFFFF605).w, D0
001782D8 8038 F607                                  or.b    ($FFFFF607).w, D0
001782DC 0200 0080                                  andi.b  #$80, D0
001782E0 6600                                       bne.s   Offset_0x026CD8
001782E2 60B4                                       bra     Menu_Main_Loop
001782E4                            Offset_0x026CD8:
001782E4 3038 FF82                                  move.w  ($FFFFFF82).w, D0
001782E8 D040                                       add.w   D0, D0
001782EA 303B 0000                                  move.w  Menu_Level_Select_Array(PC, D0), D0
001782EE 6B00 0000                                  bmi     Menu_Game_Reset
001782F2 0C40 0600                                  cmpi.w  #$0600, D0
001782F6 6700 0000                                  beq     Menu_Ending_Sequence
001782FA 0C40 5555                                  cmpi.w  #$5555, D0
001782FE 6798                                       beq     Menu_Main_Loop
00178300 0C40 4000                                  cmpi.w  #$4000, D0
00178304 6600 0000                                  bne     Menu_Load_Level
00178308 11FC 0010 F600                             move.b  #$10, ($FFFFF600).w
0017830E 4278 FE10                                  clr.w   ($FFFFFE10).w
00178312 11FC 0003 FE12                             move.b  #$03, ($FFFFFE12).w
00178318 11FC 0003 FEC6                             move.b  #$03, ($FFFFFEC6).w
0017831E 7000                                       moveq   #$00, D0
00178320 31C0 FE20                                  move.w  D0, ($FFFFFE20).w
00178324 21C0 FE22                                  move.l  D0, ($FFFFFE22).w
00178328 21C0 FE26                                  move.l  D0, ($FFFFFE26).w
0017832C 31C0 FED0                                  move.w  D0, ($FFFFFED0).w
00178330 21C0 FED2                                  move.l  D0, ($FFFFFED2).w
00178334 21C0 FED6                                  move.l  D0, ($FFFFFED6).w
00178338 21FC 0000 1388 FFC0                        move.l  #$00001388, ($FFFFFFC0).w
00178340 21FC 0000 1388 FFC4                        move.l  #$00001388, ($FFFFFFC4).w
00178348 31F8 FF72 FF70                             move.w  ($FFFFFF72).w, ($FFFFFF70).w
0017834E 4E75                                       rts
00178350                            Menu_Game_Reset:
00178350 11FC 0000 F600                             move.b  #$0000, ($FFFFF600).w
00178356 4E75                                       rts
00178358                            Menu_Ending_Sequence:
00178358 11FC 0018 F600                             move.b	#$0018,($FFFFF600).w
0017835E 31FC 0600 FE10             		move.w	#$0600,($FFFFFE10).w
00178364 4E75                       		rts
00178366                            Menu_Level_Select_Array:
00178366 0000 0001 0002                             dc.w    $0000, $0001, $0002	;GHZ
0017836C 0200 0201 0202                             dc.w    $0200, $0201, $0202	;MZ
00178372 0400 0401 0402                             dc.w    $0400, $0401, $0402	;SYZ				
00178378 0100 0101 0102                             dc.w    $0100, $0101, $0102 ;LZ
0017837E 0300 0301 0302                             dc.w    $0300, $0301, $0302	;SLZ
00178384 0500 0501 0103                             dc.w    $0500, $0501, $0103	;SBZ
0017838A 0502 4000 0600                             dc.w    $0502, $4000, $0600	
00178390 FFFF                                       dc.w    $FFFF
00178392                            Menu_Load_Level:
00178392 0240 3FFF                                  andi.w  #$3FFF, D0
00178396 31C0 FE10                                  move.w  D0, ($FFFFFE10).w
0017839A 11FC 000C F600                             move.b  #$0C, ($FFFFF600).w
001783A0 11FC 0003 FE12                             move.b  #$03, ($FFFFFE12).w
001783A6 11FC 0003 FEC6                             move.b  #$03, ($FFFFFEC6).w
001783AC 7000                                       moveq   #$00, D0
001783AE 31C0 FE20                                  move.w  D0, ($FFFFFE20).w
001783B2 21C0 FE22                                  move.l  D0, ($FFFFFE22).w
001783B6 21C0 FE26                                  move.l  D0, ($FFFFFE26).w
001783BA 31C0 FED0                                  move.w  D0, ($FFFFFED0).w
001783BE 21C0 FED2                                  move.l  D0, ($FFFFFED2).w
001783C2 21C0 FED6                                  move.l  D0, ($FFFFFED6).w
001783C6 4E71                                       nop
001783C8 4E71                                       nop
001783CA 21FC 0000 1388 FFC0                        move.l  #$00001388, ($FFFFFFC0).w
001783D2 21FC 0000 1388 FFC4                        move.l  #$00001388, ($FFFFFFC4).w
001783DA 103C 00E0                                  move.b  #Volume_Down, D0
001783DE 6100 0000                                  bsr     Menu_Play_Music     
001783E2 7000                                       moveq   #$00, D0
001783E4 31C0 FF8A                                  move.w  D0, ($FFFFFF8A).w
001783E8 31C0 FFDC                                  move.w  D0, ($FFFFFFDC).w
001783EC 4E75                                       rts
001783EE                            Offset_0x026DEC:
001783EE 1238 F605                                  move.b  ($FFFFF605).w, D1
001783F2 0201 0003                                  andi.b  #$03, D1
001783F6 6600                                       bne.s   Offset_0x026DFC
001783F8 5378 FF80                                  subq.w  #$01, ($FFFFFF80).w
001783FC 6A00                                       bpl.s   Offset_0x026E32
001783FE                            Offset_0x026DFC:
001783FE 31FC 000B FF80                             move.w  #$000B, ($FFFFFF80).w
00178404 1238 F604                                  move.b  ($FFFFF604).w, D1
00178408 0201 0003                                  andi.b  #$03, D1
0017840C 6700                                       beq.s   Offset_0x026E32
0017840E 3038 FF82                                  move.w  ($FFFFFF82).w, D0
00178412 0801 0000                                  btst    #$00, D1
00178416 6700                                       beq.s   Offset_0x026E1C
00178418 5340                                       subq.w  #$01, D0
0017841A 6400                                       bcc.s   Offset_0x026E1C
0017841C 7015                                       moveq   #$15, D0     ; �ltimo item ap�s apertar para cima
0017841E                            Offset_0x026E1C:
0017841E 0801 0001                                  btst    #$01, D1
00178422 6700                                       beq.s   Offset_0x026E2C
00178424 5240                                       addq.w  #$01, D0
00178426 0C40 0016                                  cmpi.w  #$0016, D0   ; Verifica qual o �ltimo item da lista
0017842A 6500                                       bcs.s   Offset_0x026E2C
0017842C 7000                                       moveq   #$00, D0
0017842E                            Offset_0x026E2C:
0017842E 31C0 FF82                                  move.w  D0, ($FFFFFF82).w
00178432 4E75                                       rts
00178434                            Offset_0x026E32:
00178434 0C78 0015 FF82                             cmpi.w  #$0015, ($FFFFFF82).w ; se o item for igual muda as fun��es de esquerda e direita 
0017843A 6600                                       bne.s   Offset_0x026E9C
0017843C 3038 FF84                                  move.w  ($FFFFFF84).w, D0
00178440 1238 F605                                  move.b  ($FFFFF605).w, D1
00178444 0801 0002                                  btst    #$02, D1
00178448 6700                                       beq.s   Offset_0x026E4E
0017844A 5300                                       subq.b  #$01, D0
0017844C 6400                                       bcc.s   Offset_0x026E4E
0017844E 707F                                       moveq   #$7F, D0
00178450                            Offset_0x026E4E:
00178450 0801 0003                                  btst    #$03, D1
00178454 6700                                       beq.s   Offset_0x026E5E
00178456 5200                                       addq.b  #$01, D0
00178458 0C40 0080                                  cmpi.w  #$0080, D0
0017845C 6500                                       bcs.s   Offset_0x026E5E
0017845E 7000                                       moveq   #$00, D0
00178460                            Offset_0x026E5E:
00178460 0801 0006                                  btst    #$06, D1
00178464 6700                                       beq.s   Offset_0x026E6C
00178466 0600 0010                                  addi.b  #$10, D0
0017846A 0200 007F                                  andi.b  #$7F, D0
0017846E                            Offset_0x026E6C:
0017846E 31C0 FF84                                  move.w  D0, ($FFFFFF84).w
00178472 0241 0030                                  andi.w  #$0030, D1
00178476 6700                                       beq.s   Offset_0x026E9A
00178478 3038 FF84                                  move.w  ($FFFFFF84).w, D0
0017847C 0640 0080                                  addi.w  #$0080, D0
00178480 6100 0000                                  bsr     Menu_Play_Music 
00178484 41F9 0000 0000                             lea     (Code_Debug_Mode), A0   
0017848A 45F9 0000 0000                             lea     (Code_All_Emeralds), A2 
00178490 43F8 FF0A                                  lea     ($FFFFFF0A).w, A1
00178494 7401                                       moveq   #$01, D2
00178496 6100 0000                                  bsr     Menu_Code_Test 
0017849A                            Offset_0x026E9A:
0017849A 4E75                                       rts
0017849C                            Offset_0x026E9C:
0017849C 1238 F605                                  move.b  ($FFFFF605).w, D1
001784A0 0201 000C                                  andi.b  #$0C, D1
001784A4 6700                                       beq.s   Offset_0x026EB2
001784A6 3038 FF82                                  move.w  ($FFFFFF82).w, D0
001784AA 103B 0000                                  move.b  Menu_Left_Right_Select(PC, D0), D0
001784AE 31C0 FF82                                  move.w  D0, ($FFFFFF82).w
001784B2                            Offset_0x026EB2:
001784B2 4E75                                       rts
001784B4                            Menu_Left_Right_Select:                   
001784B4 0F10 1112 1212 1313 1314+                  dc.b    $0F, $10, $11, $12, $12, $12, $13, $13, $13, $14, $14, $14, $15, $15, $15
001784C3 0001 0203 0609 0C                          dc.b    $00, $01, $02, $03, $06, $09, $0C
001784CA                            Offset_0x026ED8:
001784CA 49F9 FFFF 0000                             lea     ($FFFF0000), A4
001784D0 4BF9 0000 0000                             lea     (Menu_Text_Highlight), A5
001784D6 4DF9 00C0 0000                             lea     ($00C00000), A6
001784DC 7000                                       moveq   #$00, D0
001784DE 3038 FF82                                  move.w  ($FFFFFF82).w, D0
001784E2 E548                                       lsl.w   #$02, D0
001784E4 47F5 0000                                  lea     $00(A5, D0), A3
001784E8 7000                                       moveq   #$00, D0
001784EA 1013                                       move.b  (A3), D0
001784EC C0FC 0050                                  mulu.w  #$0050, D0
001784F0 7200                                       moveq   #$00, D1
001784F2 122B 0001                                  move.b  $0001(A3), D1
001784F6 D041                                       add.w   D1, D0
001784F8 43F4 0000                                  lea     $00(A4, D0), A1
001784FC 7200                                       moveq   #$00, D1
001784FE 1213                                       move.b  (A3), D1
00178500 EF49                                       lsl.w   #$07, D1
00178502 D22B 0001                                  add.b   $0001(A3), D1
00178506 0641 C000                                  addi.w  #$C000, D1
0017850A E589                                       lsl.l   #$02, D1
0017850C E449                                       lsr.w   #$02, D1
0017850E 0041 4000                                  ori.w   #$4000, D1
00178512 4841                                       swap.w  D1
00178514 2D41 0004                                  move.l  D1, $0004(A6)
00178518 740E                                       moveq   #$0E, D2    ; Quantidade de letras a selecionar (Highlight)
0017851A                            Offset_0x026F28:                
0017851A 3019                                       move.w  (A1)+, D0
0017851C D043                                       add.w   D3, D0
0017851E 3C80                                       move.w  D0, (A6)
00178520 51CA FFF8                                  dbra    D2, Offset_0x026F28
00178524 544B                                       addq.w  #$02, A3
00178526 7000                                       moveq   #$00, D0
00178528 1013                                       move.b  (A3), D0
0017852A 6700                                       beq.s   Offset_0x026F6C
0017852C C0FC 0050                                  mulu.w  #$0050, D0
00178530 7200                                       moveq   #$00, D1
00178532 122B 0001                                  move.b  $0001(A3), D1
00178536 D041                                       add.w   D1, D0
00178538 43F4 0000                                  lea     $00(A4, D0), A1
0017853C 7200                                       moveq   #$00, D1
0017853E 1213                                       move.b  (A3), D1
00178540 EF49                                       lsl.w   #$07, D1
00178542 D22B 0001                                  add.b   $0001(A3), D1
00178546 0641 C000                                  addi.w  #$C000, D1
0017854A E589                                       lsl.l   #$02, D1
0017854C E449                                       lsr.w   #$02, D1
0017854E 0041 4000                                  ori.w   #$4000, D1
00178552 4841                                       swap.w  D1
00178554 2D41 0004                                  move.l  D1, $0004(A6)
00178558 3019                                       move.w  (A1)+, D0
0017855A D043                                       add.w   D3, D0
0017855C 3C80                                       move.w  D0, (A6)
0017855E                            Offset_0x026F6C:
0017855E 0C78 0015 FF82                             cmpi.w  #$0015, ($FFFFFF82).w  ; Se for igual seleciona o n�mero do Sound Test
00178564 6600                                       bne.s   Offset_0x026F78
00178566 6100 0000                                  bsr     Offset_0x026F7A
0017856A                            Offset_0x026F78:
0017856A 4E75                                       rts
0017856C                            Offset_0x026F7A:
0017856C 23FC 49C6 0003 00C0 0004                   move.l  #$49C60003, ($00C00004) ; Posi��o dos n�meros do Sound Test
00178576 3038 FF84                                  move.w  ($FFFFFF84).w, D0
0017857A 1400                                       move.b  D0, D2
0017857C E808                                       lsr.b   #$04, D0
0017857E 6100                                       bsr.s   Offset_0x026F90
00178580 1002                                       move.b  D2, D0
00178582                            Offset_0x026F90:
00178582 0240 000F                                  andi.w  #$000F, D0
00178586 0C00 000A                                  cmpi.b  #$0A, D0
0017858A 6500                                       bcs.s   Offset_0x026F9E
0017858C 5800                                       addi.b  #$04, D0
0017858E                            Offset_0x026F9E:
0017858E 0600 0010                                  addi.b  #$10, D0
00178592 D043                                       add.w   D3, D0
00178594 3C80                                       move.w  D0, (A6)
00178596 4E75                                       rts
00178598                            ;-------------------------------------------------------------------------------                
00178598                            Menu_Code_Test: 
00178598 3038 FF0C                                  move.w  ($FFFFFF0C).w, D0
0017859C D0C0                                       adda.w  D0, A0
0017859E 3038 FF84                                  move.w  ($FFFFFF84).w, D0
001785A2 B010                                       cmp.b   (A0), D0
001785A4 6600                                       bne.s   Menu_Reset_Debug_Mode_Code_Counter
001785A6 5278 FF0C                                  addq.w  #$01, ($FFFFFF0C).w
001785AA 4A28 0001                                  tst.b   $0001(A0)
001785AE 6A00                                       bpl.s   Menu_All_Emeralds_Code_Test 
001785B0 32BC 0101                                  move.w  #$0101, (A1)
001785B4 6000 0000                                  bra     Menu_Set_Debug_Flag 
001785B8                            Menu_Reset_Debug_Mode_Code_Counter: 
001785B8 31FC 0000 FF0C                             move.w  #$0000, ($FFFFFF0C).w
001785BE                            Menu_All_Emeralds_Code_Test: 
001785BE 3038 FF0E                                  move.w  ($FFFFFF0E).w, D0
001785C2 D4C0                                       adda.w  D0, A2
001785C4 3038 FF84                                  move.w  ($FFFFFF84).w, D0
001785C8 B012                                       cmp.b   (A2), D0
001785CA 6600                                       bne.s   Menu_Reset_All_Emerald_Code_Counter 
001785CC 5278 FF0E                                  addq.w  #$01, ($FFFFFF0E).w
001785D0 4A2A 0001                                  tst.b   $0001(A2)
001785D4 6A00                                       bpl.s   Menu_Code_Not_0xFF 
001785D6 4A42                                       tst.w   D2
001785D8 6600                                       bne.s   Menu_Set_All_Emeralds 
001785DA                            Menu_Set_Debug_Flag: 
001785DA 11FC 0001 FFE1                             move.b  #$01, (Slow_Motion_Flag).w
001785E0 11FC 0001 FFE2                             move.b  #$01, (Debug_Mode_Flag).w
001785E6 103C 00B5                                  move.b  #Ring_Snd, D0
001785EA 6100 0000                                  bsr     Menu_Play_Music 
001785EE 6000                                       bra.s   Menu_Reset_All_Emerald_Code_Counter 
001785F0                            Menu_Set_All_Emeralds: 
001785F0 31FC 0006 FE56                             move.w  #$0006, ($FFFFFE56).w
001785F6 103C 0093                                  move.b  #Emerald_Snd, D0
001785FA 6100 0000                                  bsr     Menu_Play_Music 
001785FE                            Menu_Reset_All_Emerald_Code_Counter: 
001785FE 31FC 0000 FF0E                             move.w  #$0000, ($FFFFFF0E).w
00178604                            Menu_Code_Not_0xFF: 
00178604 4E75                                       rts               
00178606                            Code_Debug_Mode: 
00178606 0109 0902 0101 0204 FF                     dc.b    $01, $09, $09, $02, $01, $01, $02, $04, $FF
0017860F                            Code_All_Emeralds: 
0017860F 0401 0206 FF                               dc.b    $04, $01, $02, $06, $FF
00178614                            ;-------------------------------------------------------------------------------                 
00178614                            Offset_0x027040:
00178614 6100 FF56                                  bsr     Offset_0x026F7A
00178618 6000 0000                                  bra     Offset_0x027050
0017861C                            Offset_0x027048:
0017861C 6100 FEAC                                  bsr     Offset_0x026ED8
00178620 6000 0000                                  bra     Offset_0x027050
00178624                            Offset_0x027050:
00178624 3038 FF82                                  move.w  ($FFFFFF82).w, D0
00178628 47F9 0000 0000                             lea     (Menu_Icon_List), A3
0017862E 47F3 0000                                  lea     $00(A3, D0), A3
00178632 43F9 FFFF 08C0                             lea     ($FFFF08C0), A1
00178638 7000                                       moveq   #$00, D0
0017863A 1013                                       move.b  (A3), D0
0017863C E748                                       lsl.w   #$03, D0
0017863E 3200                                       move.w  D0, D1
00178640 D040                                       add.w   D0, D0
00178642 D041                                       add.w   D1, D0
00178644 43F1 0000                                  lea     $00(A1, D0), A1
00178648 203C 4B36 0003                             move.l  #$4B360003, D0        ; Posi��o Horizontal dos �cones
0017864E 7203                                       moveq   #$03, D1
00178650 7402                                       moveq   #$02, D2
00178652 6100 0000                                  bsr     Menu_ShowVDPGraphics 
00178656 43F9 0000 0000                             lea     (Icon_Palettes), A1  
0017865C 7000                                       moveq   #$00, D0
0017865E 1013                                       move.b  (A3), D0
00178660 EB48                                       lsl.w   #$05, D0
00178662 43F1 0000                                  lea     $00(A1, D0), A1
00178666 45F8 FB40                                  lea     ($FFFFFB40).w, A2
0017866A 7207                                       moveq   #$07, D1
0017866C                            Offset_0x027098:                
0017866C 24D9                                       move.l  (A1)+, (A2)+
0017866E 51C9 FFFC                                  dbra    D1, Offset_0x027098
00178672 4E75                                       rts
00178674                            ;-------------------------------------------------------------------------------                            
00178674                            Dynamic_Menu:                           
00178674 5338 F7DA                                  subq.b  #$01, ($FFFFF7DA).w          ; Decrementa em 1 o Tempo
00178678 6A00                                       bpl.s   Exit_Dinamic_Menu            ; Se for maior ou igual a 0 sai da fun��o
0017867A 11FC 0007 F7DA                             move.b  #$07, ($FFFFF7DA).w          ; Inicializa o tempo de dura��o de cada frame
00178680 1038 F7B8                                  move.b  ($FFFFF7B8).w, D0            ; Carrega o Id do Frame Atual em D0
00178684 5238 F7B8                                  addq.b  #$01, ($FFFFF7B8).w          ; Carrega o pr�ximo frame em $FFFFFFB8
00178688 0240 001F                                  andi.w  #$001F, D0
0017868C 103B 0000                                  move.b  Sonic_Miles_Frame_Select(PC, D0), D0  ; Carrega o Id do frame em D0
00178690                                          ; muls.w  #$0140, D0                   ; Multiplica o Id pelo tamanho em bytes de cada frame
00178690 ED48                                       lsl.w   #$06, D0
00178692 4DF9 00C0 0000                             lea     ($00C00000), A6
00178698 2D7C 4020 0000 0004                        move.l  #$40200000, $0004(A6)
001786A0 43F9 0000 0000                             lea     (Sonic_Miles_Spr), A1
001786A6 43F1 0000                                  lea     $00(A1, D0), A1
001786AA 303C 0009                                  move.w  #$0009, D0                   ; Tiles-1 a serem carregados por vez 
001786AE                            Menu_Loop_Load_Tiles:
001786AE 2C99                                       move.l  (A1)+, (A6)
001786B0 2C99                                       move.l  (A1)+, (A6)     
001786B2 2C99                                       move.l  (A1)+, (A6)     
001786B4 2C99                                       move.l  (A1)+, (A6)     
001786B6 2C99                                       move.l  (A1)+, (A6)     
001786B8 2C99                                       move.l  (A1)+, (A6)
001786BA 2C99                                       move.l  (A1)+, (A6)
001786BC 2C99                                       move.l  (A1)+, (A6)
001786BE 51C8 FFEE                                  dbra    D0, Menu_Loop_Load_Tiles
001786C2                            Exit_Dinamic_Menu:                
001786C2 4E75                                       rts              
001786C4                            Sonic_Miles_Frame_Select:     
001786C4 0000 0000 0000 0000 0000+                  dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
001786D2 050A                                       dc.b    $05, $0A
001786D4 0F0F 0F0F 0F0F 0F0F 0F0F+                  dc.b    $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F
001786E2 0A05                                       dc.b    $0A, $05   
001786E4                                            ; 0 = 0000000000  ; 1 = 0101000000  ; 2 = 1010000000 ; 3 = 1111000000
001786E4                            ;------------------------------------------------------------------------------                  
001786E4 =00000000                  __ = $00
001786E4 =0000001E                  _A = $1E
001786E4 =0000001F                  _B = $1F
001786E4 =00000020                  _C = $20
001786E4 =00000021                  _D = $21
001786E4 =00000022                  _E = $22    
001786E4 =00000023                  _F = $23
001786E4 =00000024                  _G = $24
001786E4 =00000025                  _H = $25
001786E4 =00000026                  _I = $26
001786E4 =00000027                  _J = $27
001786E4 =00000028                  _K = $28
001786E4 =00000029                  _L = $29
001786E4 =0000002A                  _M = $2A
001786E4 =0000002B                  _N = $2B
001786E4 =0000002C                  _O = $2C
001786E4 =0000002D                  _P = $2D
001786E4 =0000002E                  _Q = $2E
001786E4 =0000002F                  _R = $2F
001786E4 =00000030                  _S = $30
001786E4 =00000031                  _T = $31
001786E4 =00000032                  _U = $32
001786E4 =00000033                  _V = $33
001786E4 =00000034                  _W = $34
001786E4 =00000035                  _X = $35
001786E4 =00000036                  _Y = $36
001786E4 =00000037                  _Z = $37
001786E4 =0000001A                  _st = $1A
001786E4                            ;-------------------------------------------------------------------------------  
001786E4                            Icon_Palettes: 
001786E4 0000 0000 0048 006A 008E+                  dc.w    $0000, $0000, $0048, $006A, $008E, $00CE, $0EEE, $00E0
001786F4 00A4 0082 0062 0000 0E86+                  dc.w    $00A4, $0082, $0062, $0000, $0E86, $0026, $0E42, $0C00
00178704 0000 0000 0420 0820 0C00+                  dc.w    $0000, $0000, $0420, $0820, $0C00, $0E60, $0A00, $0000
00178714 0E00 0000 0000 0000 0444+                  dc.w    $0E00, $0000, $0000, $0000, $0444, $0666, $0AAA, $0EEE
00178724 0000 0204 0026 0248 046A+                  dc.w    $0000, $0204, $0026, $0248, $046A, $048C, $06CE, $0002
00178734 0000 0220 0040 0060 0080+                  dc.w    $0000, $0220, $0040, $0060, $0080, $02A0, $06E0, $0A0C
00178744 0000 0000 0A00 0660 0C80+                  dc.w    $0000, $0000, $0A00, $0660, $0C80, $0EC0, $006A, $0008
00178754 028A 00AE 004C 006E 0060+                  dc.w    $028A, $00AE, $004C, $006E, $0060, $0066, $00C0, $00CA
00178764 0000 0000 0CE2 0000 0480+                  dc.w    $0000, $0000, $0CE2, $0000, $0480, $0240, $0EEE, $04AC
00178774 006A 0026 0842 0620 0400+                  dc.w    $006A, $0026, $0842, $0620, $0400, $0000, $0000, $0000
00178784 0000 0000 0EEE 0ECA 0E86+                  dc.w    $0000, $0000, $0EEE, $0ECA, $0E86, $0E64, $0E42, $06AE
00178794 048A 0268 0246 0024 0888+                  dc.w    $048A, $0268, $0246, $0024, $0888, $0444, $000E, $0008
001787A4 0000 0000 0A26 0C48 0E8C+                  dc.w    $0000, $0000, $0A26, $0C48, $0E8C, $00CE, $00C4, $0080
001787B4 0C00 0000 0EEE 0EEA 0EC8+                  dc.w    $0C00, $0000, $0EEE, $0EEA, $0EC8, $006E, $004A, $0028
001787C4 0000 0000 0048 006A 008E+                  dc.w    $0000, $0000, $0048, $006A, $008E, $00CE, $0EEE, $00E0
001787D4 00A4 0082 0062 0808 0A4A+                  dc.w    $00A4, $0082, $0062, $0808, $0A4A, $0026, $0626, $0404
001787E4 0000 0000 0EEE 0ECA 0E86+                  dc.w    $0000, $0000, $0EEE, $0ECA, $0E86, $0E64, $0E42, $06AE
001787F4 048A 0268 0246 0024 0888+                  dc.w    $048A, $0268, $0246, $0024, $0888, $0444, $000E, $0008
00178804 0000 0000 0048 006A 008E+                  dc.w    $0000, $0000, $0048, $006A, $008E, $00CE, $0EEE, $00E0
00178814 00A4 0082 0062 0400 0E86+                  dc.w    $00A4, $0082, $0062, $0400, $0E86, $006E, $0E42, $0C00
00178824 0000 0000 0CE2 08C0 0480+                  dc.w    $0000, $0000, $0CE2, $08C0, $0480, $0240, $0EEE, $02AC
00178834 006A 0026 0AA6 0000 060A+                  dc.w    $006A, $0026, $0AA6, $0000, $060A, $0408, $0204, $0000
00178844 0000 0000 0C06 0C0A 0C6E+                  dc.w    $0000, $0000, $0C06, $0C0A, $0C6E, $0068, $008A, $0000
00178854 02CE 00EC 00AE 006E 0EEE+                  dc.w    $02CE, $00EC, $00AE, $006E, $0EEE, $0000, $000E, $00C4
00178864 0000 0000 0EEE 0AAA 0000+                  dc.w    $0000, $0000, $0EEE, $0AAA, $0000, $0666, $0444, $0E40
00178874 0C00 0800 00CE 028E 000E+                  dc.w    $0C00, $0800, $00CE, $028E, $000E, $0084, $0062, $0020
00178884 0000 0000 0004 0044 0084+                  dc.w    $0000, $0000, $0004, $0044, $0084, $0088, $00A8, $00AC
00178894 006C 002C 0028 0006 0666+                  dc.w    $006C, $002C, $0028, $0006, $0666, $0888, $0CCC, $0EEE
001788A4 0000 0000 06CE 04AC 028A+                  dc.w    $0000, $0000, $06CE, $04AC, $028A, $0068, $0046, $00E8
001788B4 00C4 0080 0040 0EEE 0C00+                  dc.w    $00C4, $0080, $0040, $0EEE, $0C00, $0EC0, $0860, $0000
001788C4 0000 0000 0E64 0E86 0EA8+                  dc.w    $0000, $0000, $0E64, $0E86, $0EA8, $0ECA, $0EEE, $0000
001788D4 00AE 006E 0E22 00E0 0000+                  dc.w    $00AE, $006E, $0E22, $00E0, $0000, $0000, $0000, $0000
001788E4 0000 0E20 004E 006E 0048+                  dc.w    $0000, $0E20, $004E, $006E, $0048, $008C, $00CE, $08EE
001788F4 0800 0400 0000 0EE8 0E80+                  dc.w    $0800, $0400, $0000, $0EE8, $0E80, $0E60, $0000, $0000
00178904 0000 0000 0A22 0C42 0000+                  dc.w    $0000, $0000, $0A22, $0C42, $0000, $0E66, $0EEE, $0AAA
00178914 0888 0444 08AE 046A 000E+                  dc.w    $0888, $0444, $08AE, $046A, $000E, $0000, $00EE, $0000
00178924 0000 0000 0A22 0C42 0000+                  dc.w    $0000, $0000, $0A22, $0C42, $0000, $0E66, $0EEE, $0AAA
00178934 0888 0444 08AE 046A 000E+                  dc.w    $0888, $0444, $08AE, $046A, $000E, $0000, $00EE, $0000
00178944                            ;-------------------------------------------------------------------------------  
00178944                            Menu_Icon_List: 
00178944 0000 000E 0E0E 0606 060B+                  dc.b    $00, $00, $00, $0E, $0E, $0E, $06, $06, $06, $0B, $0B, $0B, $0D, $0D, $0D, $09
00178954 0909 0410 0F11                             dc.b    $09, $09, $04, $10, $0F, $11
0017895A                            ;-------------------------------------------------------------------------------                 
0017895A                            Menu_Text_Highlight:                  
0017895A 0306 0324 0306 0424 0306+                  dc.w    $0306, $0324, $0306, $0424, $0306, $0524, $0706, $0724
0017896A 0706 0824 0706 0924 0B06+                  dc.w    $0706, $0824, $0706, $0924, $0B06, $0B24, $0B06, $0C24
0017897A 0B06 0D24 0F06 0F24 0F06+                  dc.w    $0B06, $0D24, $0F06, $0F24, $0F06, $1024, $0F06, $1124
0017898A 1306 1324 1306 1424 1306+                  dc.w    $1306, $1324, $1306, $1424, $1306, $1524, $032C, $034A
0017899A 032C 044A 032C 054A 072C+                  dc.w    $032C, $044A, $032C, $054A, $072C, $0000, $0B2C, $0000
001789AA 0F2C 0000 132C 134A                        dc.w    $0F2C, $0000, $132C, $134A
001789B2                            ;-------------------------------------------------------------------------------                
001789B2                            Menu_Text_Positions:                   
001789B2 00F6 0236 0376 04B6 05F6+                  dc.w    $00F6, $0236, $0376, $04B6, $05F6, $011C, $025C, $039C
001789C2 04DC 061C                                  dc.w    $04DC, $061C
001789C6                            ;-------------------------------------------------------------------------------                          
001789C6                            Menu_Level_Select_Text: 
001789C6 0E30 2D29 1E30 2500 2526+                  dc.b    $0E, _S, _P, _L, _A, _S, _H, __, _H, _I, _L, _L, __, __, __, __
001789D6 0E2A 222B 3200 0000 0000+                  dc.b    $0E, _M, _E, _N, _U, __, __, __, __, __, __, __, __, __, __, __
001789E6 0E20 1E30 262B 2C00 3031+                  dc.b    $0E, _C, _A, _S, _I, _N, _O, __, _S, _T, _R, _E, _E, _T, __, __
001789F6 0E29 2C30 3100 291E 1F36+                  dc.b    $0E, _L, _O, _S, _T, __, _L, _A, _B, _Y, _R, _I, _N, _T, _H, __
00178A06 0E34 2C2F 2921 002A 1E2D+                  dc.b    $0E, _W, _O, _R, _L, _D, __, _M, _A, _P, __, __, __, __, __, __
00178A16 0E2A 1E21 0024 221E 2F00+                  dc.b    $0E, _M, _A, _D, __, _G, _E, _A, _R, __, __, __, __, __, __, __
00178A26 0E22 2424 0030 311E 3126+                  dc.b    $0E, _E, _G, _G, __, _S, _T, _A, _T, _I, _O, _N, __, __, __, __   
00178A36 0E30 2D22 2026 1E29 0030+                  dc.b    $0E, _S, _P, _E, _C, _I, _A, _L, __, _S, _T, _A, _G, _E, __, __
00178A46 0E22 2B21 262B 2400 3022+                  dc.b    $0E, _E, _N, _D, _I, _N, _G, __, _S, _E, _Q, _U, _E, _N, _C, _E
00178A56 0E30 2C32 2B21 0031 2230+                  dc.b    $0E, _S, _O, _U, _N, _D, __, _T, _E, _S, _T, __, __, _st,__, __
00178A66                            ;-------------------------------------------------------------------------------
00178A66                            Wings_Mappings: 
00178A66 6000 6000 6000 604D 604E+                  dc.w    $6000, $6000, $6000, $604D, $604E, $684E, $684D, $6000, $6000, $6000   
00178A7A                            ;Wings_Line_1:                 
00178A7A 604F 6050 6051 6052 6053+                  dc.w    $604F, $6050, $6051, $6052, $6053, $6853, $6852, $6851, $6850, $684F
00178A8E                            ;Wings_Line_2:
00178A8E 6054 6055 6056 6057 6057+                  dc.w    $6054, $6055, $6056, $6057, $6057, $6057, $6057, $6856, $6855, $6854
00178AA2                            ;Wings_Line_3:
00178AA2 6058 6059 605A 6057 6057+                  dc.w    $6058, $6059, $605A, $6057, $6057, $6057, $6057, $685A, $6859, $6858
00178AB6                            ;Wings_Line_4:
00178AB6 605B 605C 605D 6057 6057+                  dc.w    $605B, $605C, $605D, $6057, $6057, $6057, $6057, $685D, $685C, $685B
00178ACA                            ;Wings_Line_5:
00178ACA 6000 605E 605F 6060 6061+                  dc.w    $6000, $605E, $605F, $6060, $6061, $6062, $6063, $6064, $685E, $6000
00178ADE                            ;Wings_Line_6:
00178ADE 6000 6000 6065 6066 6067+                  dc.w    $6000, $6000, $6065, $6066, $6067, $6867, $6866, $6865, $6000, $6000 
00178AF2                            ;-------------------------------------------------------------------------------    
00178AF2                            Menu_Palette:
00178AF2                                            incbin  'data\menu\menu.pal'            
00178B72                            Menu_ClearScreen:
00178B72 4EF8 1380                                  jmp     ClearScreen
00178B76                            Menu_ShowVDPGraphics:                
00178B76 4EF8 14FA                                  jmp     ShowVDPGraphics                
00178B7A                            Menu_NemesisDec: 
00178B7A 4EF8 15AA                                  jmp     NemDec  
00178B7E                            Menu_LoadPLC2:      
00178B7E 4EF8 171C                                  jmp     LoadPLC2
00178B82                            Menu_RunPLC:                    
00178B82 4EF8 1756                                  jmp     RunPLC_RAM                           
00178B86                            Menu_EnigmaDec
00178B86 4EF8 1888                                  jmp     EniDec
00178B8A                            Menu_Pal_FadeTo:
00178B8A 4EF8 20CA                                  jmp     Pal_FadeTo
00178B8E                            Menu_Pal_FadeFrom:
00178B8E 4EF8 2180                                  jmp     Pal_FadeFrom     
00178B92                            Menu_Play_Music:
00178B92 4EF8 1470                                  jmp     PlaySound  
00178B96                            Menu_PalLoad1:
00178B96 4EF8 242E                                  jmp     PalLoad1
00178B9A                            Menu_DelayProgram:
00178B9A 4EF8 33A2                                  jmp     DelayProgram
00178B9E                            ;-------------------------------------------------------------------------------
00178B9E                            Menu_Font:
00178B9E                                            incbin  'data\menu\menufont.nem' 
00179112                            Level_Icons:
00179112                                            incbin  'data\menu\levelico.nem'   
0017A40E                            Menu_Mappings:
0017A40E                                            incbin  'data\menu\menubg.eni'
0017A5BA                            Icons_Mappings:
0017A5BA                                            incbin  'data\menu\iconsmap.eni'
0017A5D0                            Sonic_Miles_Spr:                                         
0017A5D0                                            incbin  'data\menu\soncmils.dat'   
0017AAD0                            ;===============================================================================
0017AAD0                            ; Menu do Sonic 2 No Sonic 1 reprogramado por Esrael L. G. Neto
0017AAD0                            ; [ Fim ]
0017AAD0                            ;===============================================================================
0017AAD0                            ;===============================================================================
0017AAD0                            ; end of 'ROM'
0017AAD0                            EndOfRom:
0017AAD0                            
0017AAD0                            
