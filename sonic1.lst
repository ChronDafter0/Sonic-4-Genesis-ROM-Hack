00000000                            ; /=========================================================================\
00000000                            ; �	This file is generated by The Interactive Disassembler (IDA)	    �
00000000                            ; �	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    �
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            		include	"Equz80.asm"
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; ListEqu.exe generated from "Dual PCM\Z80.lst"
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00000E80                  E_BuffStart = $E80 ; Start of the buffer (ALWAYS keep it multiples of 20)
00000000 =00000FFF                  E_BuffFinish = $FFF ; End of the buffer (keep in multiples of 100 - 1, e.g. 0FFF, 0EFF, 0DFF, 0CFF, etc)
00000000 =00000020                  E_BuffSize = $20 ; Number of bytes to buffer ahead of time (keep at POT) (part of it is done manually, so just changing this value won't do it all).
00000000 =00001000                  E_CueStart = $1000 ; Start of the cue, (ALWAYS keep in multiples of 10)
00000000 =00002000                  E_CueFinish = $2000 ; End of the cue (keep in multiples of 10)
00000000 =00000300                  E_CueSize = $300 ; Number of bytes for the 68k to cue ahead (keep in multiples of 100)
00000000 =00000000                  M_Flush = $0 
00000000 =00000000                  Start = $0 
00000000 =00000008                  Switch_PCM = $8 
00000000 =0000000E                  SD_NextBit = $E 
00000000 =0000001F                  CUPCM1_Switch = $1F 
00000000 =0000002D                  CUPCM1_SwStack = $2D 
00000000 =00000031                  CUPCM2_Switch = $31 
00000000 =0000003F                  CUPCM2_SwStack = $3F 
00000000 =00000047                  CU_Stack = $47 
00000000 =00000049                  InitRout = $49 
00000000 =000000E0                  CUPCM1_Reset = $E0 
00000000 =000000F8                  CUPCM1_Mute = $F8 
00000000 =0000011B                  CatchUp_Exx = $11B 
00000000 =0000011C                  CatchUp = $11C 
00000000 =0000011C                  CUPCM1_Switch0 = $11C 
00000000 =0000011D                  CUPCM1_Switch1 = $11D 
00000000 =0000011E                  CUPCM1_Switch2 = $11E 
00000000 =0000011F                  CUPCM1_Switch3 = $11F 
00000000 =00000120                  CUPCM1_Switch4 = $120 
00000000 =00000121                  CUPCM1_Switch5 = $121 
00000000 =00000122                  CUPCM1_Switch6 = $122 
00000000 =00000123                  CUPCM1_Switch7 = $123 
00000000 =00000124                  CUPCM1_Switch8 = $124 
00000000 =00000132                  CUPCM1_Load = $132 
00000000 =0000015B                  CUPCM1_ResRet = $15B 
00000000 =0000015E                  CUPCM1_MuteRet = $15E 
00000000 =0000015F                  CUPCM2_Switch0 = $15F 
00000000 =00000160                  CUPCM2_Switch1 = $160 
00000000 =00000161                  CUPCM2_Switch2 = $161 
00000000 =00000162                  CUPCM2_Switch3 = $162 
00000000 =00000163                  CUPCM2_Switch4 = $163 
00000000 =00000164                  CUPCM2_Switch5 = $164 
00000000 =00000165                  CUPCM2_Switch6 = $165 
00000000 =00000166                  CUPCM2_Switch7 = $166 
00000000 =00000167                  CUPCM2_Switch8 = $167 
00000000 =00000173                  CUPCM2_Load = $173 
00000000 =000001B8                  CUPCM2_ResRet = $1B8 
00000000 =000001BB                  CUPCM2_MuteRet = $1BB 
00000000 =000001BE                  CU_ResBufINRet = $1BE 
00000000 =000001C3                  CU_ResBufOTRet = $1C3 
00000000 =000001D2                  CUPCM1_RET = $1D2 
00000000 =000001D3                  CUPCM2_RET = $1D3 
00000000 =000001D6                  Flush = $1D6 
00000000 =000001D9                  FL_Return = $1D9 
00000000 =000001DD                  BM_ResBufOTRet = $1DD 
00000000 =000001DD                  FL_FlushSwitch = $1DD 
00000000 =000001E0                  CUPCM2_Mute = $1E0 
00000000 =00000202                  CUPCM2_Reset = $202 
00000000 =0000021A                  CU_ResetBufferIN = $21A 
00000000 =00000227                  CU_ResetBufferOUT = $227 
00000000 =00000234                  BM_ResetBufferOUT = $234 
00000000 =00000241                  CUPCM2_NewSample = $241 
00000000 =00000264                  CUPCM1_NewSample = $264 
00000000 =00000287                  FL_Loop = $287 
00000000 =0000028D                  BM_NextByte = $28D 
00000000 =000002BE                  Valid = $2BE 
00000000 =000002D7                  OutRange = $2D7 
00000000 =000002E0                  PCM1_SampCur = $2E0 
00000000 =000002E2                  PCM1_BankCur = $2E2 
00000000 =000002E3                  PCM2_SampCur = $2E3 
00000000 =000002E5                  PCM2_BankCur = $2E5 
00000000 =000002E6                  PCM1_Sample = $2E6 
00000000 =000002E8                  PCM1_Bank = $2E8 
00000000 =000002E9                  PCM2_Sample = $2E9 
00000000 =000002EB                  PCM2_Bank = $2EB 
00000000 =000002EC                  MuteSample = $2EC 
00000000 =000002EF                  YM_Access = $2EF 
00000000 =000002F0                  YM_Point68k = $2F0 
00000000 =000002F2                  YM_PointZ80 = $2F2 
00000000 =00001000                  YM_List = $1000 
00000000                            
00000000                            ; ===========================================================================
00000000                            ; ===========================================================================
00000000                            		include	"Macros.asm"
00000000 =FFFFD000                  v_objspace:	equ $FFFFD000	; object variable space ($40 bytes per object) ($2000 bytes)
00000000 =FFFFD000                  v_player:	equ v_objspace	; object variable space for Sonic ($40 bytes)
00000000 =FFFFF700                  v_screenposx:	equ $FFFFF700
00000000 =FFFFFC00                  v_objstate:	equ $FFFFFC00
00000000                            
00000000                            ; Object variables
00000000 =00000001                  obRender:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  obGfx:		equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  obMap:		equ 4	; mappings address (4 bytes)
00000000 =00000008                  obX:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000A                  obScreenY:	equ $A	; y-axis position for screen-fixed items (2 bytes)
00000000 =0000000C                  obY:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  obVelX:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  obVelY:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000014                  obInertia:	equ $14	; potential speed (2 bytes)
00000000 =00000016                  obHeight:	equ $16	; height/2
00000000 =00000017                  obWidth:	equ $17	; width/2
00000000 =00000018                  obPriority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000019                  obActWid:	equ $19	; action width
00000000 =0000001A                  obFrame:	equ $1A	; current frame displayed
00000000 =0000001B                  obAniFrame:	equ $1B	; current frame in animation script
00000000 =0000001C                  obAnim:		equ $1C	; current animation
00000000 =0000001D                  obNextAni:	equ $1D	; next animation
00000000 =0000001E                  obTimeFrame:	equ $1E	; time to next frame
00000000 =0000001F                  obDelayAni:	equ $1F	; time to delay animation
00000000 =00000020                  obColType:	equ $20	; collision response type
00000000 =00000021                  obColProp:	equ $21	; collision extra property
00000000 =00000022                  obStatus:	equ $22	; orientation or mode
00000000 =00000023                  obRespawnNo:	equ $23	; respawn list index number
00000000 =00000024                  obRoutine:	equ $24	; routine number
00000000 =00000025                  ob2ndRout:	equ $25	; secondary routine number
00000000 =00000026                  obAngle:	equ $26	; angle
00000000 =00000028                  obSubtype:	equ $28	; object subtype
00000000 =00000025                  obSolid:	equ ob2ndRout ; solid status flag
00000000                            out_of_range:	macro exit,pos
00000000                            		if (narg=2)
00000000                            		move.w	pos,d0		; get object position (if specified as not obX)
00000000                            		else
00000000                            		move.w	obX(a0),d0	; get object position
00000000                            		endc
00000000                            		andi.w	#$FF80,d0	; round down to nearest $80
00000000                            		move.w	(v_screenposx).w,d1 ; get screen position
00000000                            		subi.w	#128,d1
00000000                            		andi.w	#$FF80,d1
00000000                            		sub.w	d1,d0		; approx distance between object and screen
00000000                            		cmpi.w	#128+320+192,d0
00000000                            		bhi.\0	exit
00000000                            		endm
00000000                            ; ===========================================================================
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Macros
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            	; --- Alignment ---
00000000                            
00000000                            align		macro	Size,Value
00000000                            		dcb.b	Size-(*%Size),Value
00000000                            		endm
00000000                            
00000000                            	; --- Stop Z80 ---
00000000                            
00000000                            StopZ80		macro
00000000                            		move.w	#$0100,($A11100).l			; request Z80 stop (ON)
00000000                            		btst.b	#$00,($A11100).l			; has the Z80 stopped yet?
00000000                            		bne.s	*-$08					; if not, branch
00000000                            		endm
00000000                            
00000000                            	; --- Start Z80 ---
00000000                            
00000000                            StartZ80	macro
00000000                            		move.w	#$0000,($A11100).l			; request Z80 stop (OFF)
00000000                            		endm
00000000                            
00000000                            	; --- Turning DMA mode on ---
00000000                            
00000000                            Z80DMA_ON	macro
00000000                            		StopZ80
00000000                            		move.b	#(Flush&$FF),($A00000+FL_FlushSwitch+1).l	; change the "jp" instruction address to "Flush" routine loop
00000000                            		StartZ80
00000000                            		move.w	#$0180,d7				; set delay time (give z80 time to get out of the "CatchUp" routine...
00000000                            		nop						; ...and into the "Flush" routine, so the 68k doesn't start DMA before...
00000000                            		nop						; ...the z80 has a chance to stop reading from the window
00000000                            		dbf	d7,*-$04				; loop back and perform the nops again...
00000000                            		endm
00000000                            
00000000                            	; --- Turning DMA mode off ---
00000000                            
00000000                            Z80DMA_OFF	macro
00000000                            		StopZ80
00000000                            		move.b	#(CatchUp&$FF),($A00000+FL_FlushSwitch+1).l	; change the "jp" instruction address to "CatchUp" routine loop
00000000                            		StartZ80
00000000                            		endm
00000000                            
00000000                            
00000000                            	; --- Storing 68k address for Z80 as dc ---
00000000                            
00000000                            dcz80		macro	Sample
00000000                            		dc.b	(Sample&$FF)
00000000                            		dc.b	(((Sample>>$08)&$7F)|$80)
00000000                            		dc.b	((Sample&$7F8000)>>$0F)
00000000                            		endm
00000000                            
00000000                            ; =============
00000000                            ;Sonic 2 Macros
00000000                            ; =============
00000000                            
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            ; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
00000000                            ; Equates section - Names for variables.
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; size variables - you'll get an informational error if you need to change these...
00000000                            ; they are all in units of bytes
00000000 =00002F00                  Size_of_DAC_samples =		$2F00
00000000 =00006174                  Size_of_SEGA_sound =		$6174
00000000 =00000F64                  Size_of_Snd_driver_guess =	$F64 ; approximate post-compressed size of the Z80 sound driver
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Object Status Table offsets (for everything between Object_RAM and Primary_Collision)
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; universally followed object conventions:
00000000 =00000001                  render_flags =		  1 ; bitfield ; bit 7 = onscreen flag, bit 0 = x mirror, bit 1 = y mirror, bit 2 = coordinate system
00000000 =00000002                  art_tile =		  2 ; and 3 ; start of sprite's art
00000000 =00000004                  mappings =		  4 ; and 5 and 6 and 7
00000000 =00000008                  x_pos =			  8 ; and 9 ... some objects use $A and $B as well when extra precision is required (see ObjectMove) ... for screen-space objects this is called x_pixel instead
00000000 =0000000C                  y_pos =			 $C ; and $D ... some objects use $E and $F as well when extra precision is required ... screen-space objects use y_pixel instead
00000000 =00000018                  priority =		$18 ; 0 = front
00000000 =00000019                  width_pixels =		$19
00000000 =0000001A                  mapping_frame =		$1A
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions followed by most objects:
00000000 =00000010                  x_vel =			$10 ; and $11 ; horizontal velocity
00000000 =00000012                  y_vel =			$12 ; and $13 ; vertical velocity
00000000 =00000016                  y_radius =		$16 ; collision width / 2
00000000 =00000017                  x_radius =		$17 ; collision height / 2
00000000 =0000001B                  anim_frame =		$1B
00000000 =0000001C                  anim =			$1C
00000000 =0000001D                  next_anim =		$1D
00000000 =0000001E                  anim_frame_duration =	$1E
00000000 =00000022                  status =		$22 ; note: exact meaning depends on the object... for sonic/tails: bit 0: leftfacing. bit 1: inair. bit 2: spinning. bit 3: onobject. bit 4: rolljumping. bit 5: pushing. bit 6: underwater.
00000000 =00000024                  routine =		$24
00000000 =00000025                  routine_secondary =	$25
00000000 =00000026                  angle =			$26 ; angle about the z=0 axis (360 degrees = 256)
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions followed by many objects but NOT sonic/tails:
00000000 =00000020                  collision_flags =	$20
00000000 =00000021                  collision_property =	$21
00000000 =00000023                  respawn_index =		$23
00000000 =00000028                  subtype =		$28
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions specific to sonic/tails (Obj01, Obj02, and ObjDB):
00000000                            ; note: $1F, $20, and $21 are unused and available
00000000 =00000014                  inertia =		$14 ; and $15 ; directionless representation of speed... not updated in the air
00000000 =00000027                  flip_angle =		$27 ; angle about the x=0 axis (360 degrees = 256) (twist/tumble)
00000000 =00000028                  air_left =		$28
00000000 =00000029                  flip_turned =		$29 ; 0 for normal, 1 to invert flipping (it's a 180 degree rotation about the axis of Sonic's spine, so he stays in the same position but looks turned around)
00000000 =0000002A                  obj_control =		$2A ; 0 for normal, 1 for hanging or for resting on a flipper, $81 for going through CNZ/OOZ/MTZ tubes or stopped in CNZ cages or stoppers or flying if Tails
00000000 =0000002B                  status_secondary =	$2B
00000000 =0000002C                  flips_remaining =	$2C ; number of flip revolutions remaining
00000000 =0000002D                  flip_speed =		$2D ; number of flip revolutions per frame / 256
00000000 =0000002E                  move_lock =		$2E ; and $2F ; horizontal control lock, counts down to 0
00000000 =00000030                  invulnerable_time =	$30 ; and $31 ; time remaining until you stop blinking
00000000 =00000032                  invincibility_time =	$32 ; and $33 ; remaining
00000000 =00000034                  speedshoes_time =	$34 ; and $35 ; remaining
00000000 =00000036                  next_tilt =		$36 ; angle on ground in front of sprite
00000000 =00000037                  tilt =			$37 ; angle on ground
00000000 =00000038                  stick_to_convex =	$38 ; 0 for normal, 1 to make Sonic stick to convex surfaces like the rotating discs in Sonic 1 and 3 (unused in Sonic 2 but fully functional)
00000000 =00000039                  spindash_flag =		$39 ; 0 for normal, 1 for charging a spindash or forced rolling
00000000 =0000003A                  spindash_counter =	$3A ; and $3B
00000000 =0000003C                  jumping =		$3C
00000000 =0000003D                  interact =		$3D ; RAM address of the last object Sonic stood on, minus $FFFFB000 and divided by $40
00000000 =0000003E                  layer =			$3E ; collision plane, track switching...
00000000 =0000003F                  layer_plus =		$3F ; always same as layer+1 ?? used for collision somehow
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; conventions followed by several objects but NOT sonic/tails:
00000000 =0000000A                  y_pixel =		2+x_pos ; and 3+x_pos ; y coordinate for objects using screen-space coordinate system
00000000 =00000008                  x_pixel =		x_pos ; and 1+x_pos ; x coordinate for objects using screen-space coordinate system
00000000 =0000003E                  parent =		$3E ; and $3F ; address of object that owns or spawned this one, if applicable
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; unknown or inconsistently used offsets that are not applicable to sonic/tails:
00000000                            ; (provided because rearrangement of the above values sometimes requires making space in here too)
00000000 =0000000A                  objoff_A =		2+x_pos ; note: x_pos can be 4 bytes, but sometimes the last 2 bytes of x_pos are used for other unrelated things
00000000 =0000000B                  objoff_B =		3+x_pos
00000000 =0000000E                  objoff_E =		2+y_pos
00000000 =0000000F                  objoff_F =		3+y_pos
00000000 =00000014                  objoff_14 =		$14
00000000 =00000015                  objoff_15 =		$15
00000000 =0000001F                  objoff_1F =		$1F
00000000 =00000027                  objoff_27 =		$27
00000000 =00000028                  objoff_28 =		$28 ; overlaps subtype, but a few objects use it for other things anyway
00000000 =00000029                  objoff_29 =		$29
00000000 =0000002A                  objoff_2A =		$2A
00000000 =0000002B                  objoff_2B =		$2B
00000000 =0000002C                  objoff_2C =		$2C
00000000 =0000002D                  objoff_2D =		$2D
00000000 =0000002E                  objoff_2E =		$2E
00000000 =0000002F                  objoff_2F =		$2F
00000000 =00000030                  objoff_30 =		$30
00000000 =00000031                  objoff_31 =		$31
00000000 =00000032                  objoff_32 =		$32
00000000 =00000033                  objoff_33 =		$33
00000000 =00000034                  objoff_34 =		$34
00000000 =00000035                  objoff_35 =		$35
00000000 =00000036                  objoff_36 =		$36
00000000 =00000037                  objoff_37 =		$37
00000000 =00000038                  objoff_38 =		$38
00000000 =00000039                  objoff_39 =		$39
00000000 =0000003A                  objoff_3A =		$3A
00000000 =0000003B                  objoff_3B =		$3B
00000000 =0000003C                  objoff_3C =		$3C
00000000 =0000003D                  objoff_3D =		$3D
00000000 =0000003E                  objoff_3E =		$3E
00000000 =0000003F                  objoff_3F =		$3F
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; property of all objects:
00000000 =00000040                  next_object =		$40 ; the size of an object
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; RAM variables
00000000 =FFFF0000                  RAM_Start =			$FFFF0000
00000000 =FFFF0000                  Metablock_Table =		$FFFF0000
00000000 =FFFF8000                  Level_Layout =			$FFFF8000
00000000 =FFFF9000                  Block_Table =			$FFFF9000
00000000 =FFFFAA00                  Decomp_Buffer =			$FFFFAA00
00000000 =FFFFAC00                  Sprite_Table_Input = 		$FFFFAC00 ; in custom format before being converted and stored in Sprite_Table/Sprite_Table_2
00000000 =FFFFB000                  Object_RAM =			$FFFFB000 ; through $FFFFD5FF
00000000 =FFFFB000                  MainCharacter =			$FFFFB000 ; first object (usually Sonic except in a Tails Alone game)
00000000 =FFFFB040                  Sidekick =			$FFFFB040 ; second object (Tails in a Sonic and Tails game)
00000000 =FFFFD000                  Tails_Tails =			$FFFFD000 ; address of the Tail's Tails object
00000000 =FFFFD100                  Sonic_Dust =			$FFFFD100
00000000 =FFFFD140                  Tails_Dust =			$FFFFD140
00000000                            
00000000 =FFFFD000                  PNT_Buffer =			$FFFFD000 ; in special stage
00000000 =FFFFD600                  Primary_Collision =		$FFFFD600
00000000 =FFFFD700                  Horiz_Scroll_Buf_2 =		$FFFFD700 ; in special stage
00000000 =FFFFD900                  Secondary_Collision =		$FFFFD900
00000000 =FFFFDC00                  VDP_Command_Buffer =		$FFFFDC00 ; stores VDP commands to issue the next time ProcessDMAQueue is called
00000000 =FFFFDCFC                  VDP_Command_Buffer_Slot =	$FFFFDCFC ; stores the address of the next open slot for a queued VDP command
00000000 =FFFFDD00                  Sprite_Table_2 =		$FFFFDD00 ; Sprite attribute table buffer for the bottom split screen in 2-player mode
00000000 =FFFFE000                  Horiz_Scroll_Buf =		$FFFFE000
00000000 =FFFFE400                  Sonic_Stat_Record_Buf =		$FFFFE400
00000000 =FFFFE500                  Sonic_Pos_Record_Buf =		$FFFFE500
00000000 =FFFFE600                  Tails_Pos_Record_Buf =		$FFFFE600
00000000 =FFFFE800                  Ring_Positions =		$FFFFE800
00000000 =FFFFEE00                  Camera_RAM =			$FFFFEE00
00000000 =FFFFEE00                  Camera_X_pos =			$FFFFEE00
00000000 =FFFFEE04                  Camera_Y_pos =			$FFFFEE04
00000000 =FFFFEEC6                  Camera_Max_Y_pos =		$FFFFEEC6
00000000 =FFFFEEC8                  Camera_Min_X_pos =		$FFFFEEC8
00000000 =FFFFEECA                  Camera_Max_X_pos =		$FFFFEECA
00000000 =FFFFEECC                  Camera_Min_Y_pos =		$FFFFEECC
00000000 =FFFFEECE                  Camera_Max_Y_pos_now =		$FFFFEECE ; was "Camera_max_scroll_spd"...
00000000 =FFFFEED2                  Sonic_Pos_Record_Index =	$FFFFEED2 ; into Sonic_Pos_Record_Buf and Sonic_Stat_Record_Buf
00000000 =FFFFEED6                  Tails_Pos_Record_Index =	$FFFFEED6 ; into Tails_Pos_Record_Buf
00000000 =FFFFEED8                  Camera_Y_pos_bias =		$FFFFEED8 ; added to y position for lookup/lookdown, $60 is center
00000000 =FFFFEEDA                  Camera_Y_pos_bias_2P =		$FFFFEEDA ; for Tails
00000000 =FFFFEEDF                  Dynamic_Resize_Routine =	$FFFFEEDF
00000000 =FFFFEEF8                  Tails_Min_X_pos =		$FFFFEEF8
00000000 =FFFFEEFA                  Tails_Max_X_pos =		$FFFFEEFA
00000000 =FFFFEEFE                  Tails_Max_Y_pos =		$FFFFEEFE
00000000                            
00000000 =FFFFF000                  Underwater_palette_2 = 		$FFFFF000 ; not sure what it's used for but it's only used when there's water
00000000 =FFFFF080                  Underwater_palette = 		$FFFFF080 ; main palette for underwater parts of the screen
00000000 =FFFFF0E0                  Underwater_palette_line4 = 	$FFFFF0E0
00000000                            
00000000 =FFFFF600                  Game_Mode =			$FFFFF600 ; 1 byte ; see GameModesArray (master level trigger, Mstr_Lvl_Trigger)
00000000 =FFFFF602                  Ctrl_1_Logical =		$FFFFF602 ; 2 bytes
00000000 =FFFFF602                  Ctrl_1_Held_Logical =		$FFFFF602 ; 1 byte
00000000 =FFFFF603                  Ctrl_1_Press_Logical =		$FFFFF603 ; 1 byte
00000000 =FFFFF604                  Ctrl_1 =			$FFFFF604 ; 2 bytes
00000000 =FFFFF604                  Ctrl_1_Held =			$FFFFF604 ; 1 byte ; (pressed and held were switched around before)
00000000 =FFFFF605                  Ctrl_1_Press =			$FFFFF605 ; 1 byte
00000000 =FFFFF606                  Ctrl_2 =			$FFFFF606 ; 2 bytes
00000000 =FFFFF606                  Ctrl_2_Held =			$FFFFF606 ; 1 byte
00000000 =FFFFF607                  Ctrl_2_Press =			$FFFFF607 ; 1 byte
00000000 =FFFFF614                  Demo_Time_left =		$FFFFF614 ; 2 bytes
00000000                            
00000000 =FFFFF616                  Vscroll_Factor =		$FFFFF616
00000000 =FFFFF624                  Hint_counter_reserve =		$FFFFF624 ; Must contain a VDP command word, preferably a write to register $0A. Executed every V-INT.
00000000 =FFFFF62A                  Delay_Time =			$FFFFF62A ; number of frames to delay the game
00000000 =FFFFF636                  RNG_seed =			$FFFFF636 ; used for random number generation
00000000 =FFFFF63A                  Game_paused =			$FFFFF63A
00000000 =FFFFF640                  DMA_data_thunk =		$FFFFF640 ; Used as a RAM holder for the final DMA command word. Data will NOT be preserved across V-INTs, so consider this space reserved.
00000000                            
00000000 =FFFFF646                  Water_Level_1 =			$FFFFF646
00000000 =FFFFF648                  Water_Level_2 =			$FFFFF648
00000000 =FFFFF64A                  Water_Level_3 =			$FFFFF64A
00000000 =FFFFF64D                  Water_routine =			$FFFFF64D
00000000 =FFFFF64E                  Water_move =			$FFFFF64E
00000000 =FFFFF64C                  Water_on =			$FFFFF64C ; is set based on Water_flag
00000000 =FFFFF650                  New_Water_Level =		$FFFFF650
00000000 =FFFFF652                  Water_change_speed =		$FFFFF652
00000000 =FFFFF65E                  Palette_frame_count =		$FFFFF65E
00000000                            
00000000 =FFFFF66A                  Ctrl_2_Logical =		$FFFFF66A ; 2 bytes
00000000 =FFFFF66A                  Ctrl_2_Held_Logical =		$FFFFF66A ; 1 byte
00000000 =FFFFF66B                  Ctrl_2_Press_Logical =		$FFFFF66B ; 1 byte
00000000 =FFFFF66C                  Sonic_Look_delay_counter = 	$FFFFF66C ; 2 bytes
00000000 =FFFFF66E                  Tails_Look_delay_counter = 	$FFFFF66E ; 2 bytes
00000000 =FFFFF670                  Super_Sonic_frame_count =	$FFFFF670
00000000 =FFFFF680                  Plc_Buffer =			$FFFFF680 ; Pattern load queue
00000000                            
00000000 =FFFFF700                  Misc_Variables =		$FFFFF700
00000000                            
00000000                            ; extra variables for the second player (CPU) in 1-player mode
00000000 =FFFFF702                  Tails_control_counter =		$FFFFF702 ; how long until the CPU takes control
00000000 =FFFFF704                  Tails_respawn_counter =		$FFFFF704
00000000 =FFFFF708                  Tails_CPU_routine =		$FFFFF708
00000000 =FFFFF70A                  Tails_CPU_target_x =		$FFFFF70A
00000000 =FFFFF70C                  Tails_CPU_target_y =		$FFFFF70C
00000000 =FFFFF70E                  Tails_interact_ID =		$FFFFF70E ; object ID of last object stood on
00000000                            
00000000 =FFFFF711                  Level_started_flag =		$FFFFF711
00000000 =FFFFF71A                  CNZ_Bumper_routine =		$FFFFF71A
00000000 =FFFFF72C                  Dirty_flag =			$FFFFF72C ; if whole screen needs to redraw
00000000 =FFFFF730                  Water_flag =			$FFFFF730 ; if the level has water or oil
00000000                            
00000000 =FFFFF760                  Sonic_top_speed =		$FFFFF760
00000000 =FFFFF762                  Sonic_acceleration =		$FFFFF762
00000000 =FFFFF764                  Sonic_deceleration =		$FFFFF764
00000000 =FFFFF76C                  Obj_placement_routine =		$FFFFF76C
00000000 =FFFFF770                  Obj_load_addr_0 =		$FFFFF770
00000000 =FFFFF774                  Obj_load_addr_1 =		$FFFFF774
00000000 =FFFFF778                  Obj_load_addr_2 =		$FFFFF778
00000000 =FFFFF77C                  Obj_load_addr_3 =		$FFFFF77C
00000000 =FFFFF790                  Demo_button_index =		$FFFFF790 ; index into button press demo data, for player 1
00000000 =FFFFF792                  Demo_press_counter =		$FFFFF792 ; frames remaining until next button press, for player 1
00000000 =FFFFF732                  Demo_button_index_2P =		$FFFFF732 ; index into button press demo data, for player 2
00000000 =FFFFF734                  Demo_press_counter_2P =		$FFFFF734 ; frames remaining until next button press, for player 2
00000000 =FFFFF796                  Collision_addr =		$FFFFF796
00000000 =FFFFF7AA                  Current_Boss_ID =		$FFFFF7AA
00000000 =FFFFF7CC                  Control_Locked =		$FFFFF7CC
00000000 =FFFFF7D0                  Chain_Bonus_counter =		$FFFFF7D0 ; counts up when you destroy things that give points, resets when you touch the ground
00000000 =FFFFF7D2                  Bonus_Countdown_1 =		$FFFFF7D2 ; level results time bonus or special stage sonic ring bonus
00000000 =FFFFF7D4                  Bonus_Countdown_2 =		$FFFFF7D4 ; level results ring bonus or special stage tails ring bonus
00000000 =FFFFF7D6                  Update_Bonus_score =		$FFFFF7D6
00000000 =FFFFF7DA                  Camera_X_pos_coarse =		$FFFFF7DA ; (Camera_X_pos - 128) / 256
00000000                            
00000000 =FFFFF800                  Sprite_Table =			$FFFFF800 ; Sprite attribute table buffer
00000000                            
00000000 =FFFFFB00                  Normal_palette =		$FFFFFB00
00000000 =FFFFFB20                  Normal_palette_line2 =		$FFFFFB20
00000000 =FFFFFB40                  Normal_palette_line3 =		$FFFFFB40
00000000 =FFFFFB60                  Normal_palette_line4 =		$FFFFFB60
00000000 =FFFFFB80                  Second_palette =		$FFFFFB80
00000000 =FFFFFBA0                  Second_palette_line2 =		$FFFFFBA0
00000000 =FFFFFBC0                  Second_palette_line3 =		$FFFFFBC0
00000000 =FFFFFBE0                  Second_palette_line4 =		$FFFFFBE0
00000000                            
00000000 =FFFFFC00                  Object_Respawn_Table =		$FFFFFC00
00000000 =FFFFFE00                  System_Stack =			$FFFFFE00
00000000 =FFFFFE02                  Level_Inactive_flag = 		$FFFFFE02 ; (2 bytes)
00000000 =FFFFFE04                  Timer_frames =			$FFFFFE04 ; (2 bytes)
00000000 =FFFFFE06                  Debug_object =			$FFFFFE06
00000000 =FFFFFE08                  Debug_placement_mode =		$FFFFFE08
00000000 =FFFFFE10                  Current_ZoneAndAct =		$FFFFFE10 ; 2 bytes
00000000 =FFFFFE10                  Current_Zone =			$FFFFFE10 ; 1 byte
00000000 =FFFFFE11                  Current_Act =			$FFFFFE11 ; 1 byte
00000000 =FFFFFE12                  Life_count =			$FFFFFE12
00000000 =FFFFFE16                  Current_Special_Stage =		$FFFFFE16
00000000 =FFFFFE18                  Continue_count =		$FFFFFE18
00000000 =FFFFFE19                  Super_Sonic_flag =		$FFFFFE19
00000000 =FFFFFE1A                  Time_Over_flag =		$FFFFFE1A
00000000 =FFFFFE1B                  Extra_life_flags =		$FFFFFE1B
00000000                            
00000000                            ; If set, the respective HUD element will be updated.
00000000 =FFFFFE1C                  Update_HUD_lives =		$FFFFFE1C
00000000 =FFFFFE1D                  Update_HUD_rings =		$FFFFFE1D
00000000 =FFFFFE1E                  Update_HUD_timer =		$FFFFFE1E
00000000 =FFFFFE1F                  Update_HUD_score =		$FFFFFE1F
00000000                            
00000000 =FFFFFE20                  Ring_count =			$FFFFFE20 ; 2 bytes
00000000 =FFFFFE22                  Timer =				$FFFFFE22 ; 4 bytes
00000000 =FFFFFE22                  Timer_minute_word =		$FFFFFE22 ; 2 bytes
00000000 =FFFFFE23                  Timer_minute =			$FFFFFE23 ; 1 byte
00000000 =FFFFFE24                  Timer_second =			$FFFFFE24 ; 1 byte
00000000 =FFFFFE25                  Timer_centisecond =		$FFFFFE25 ; 1 byte
00000000 =FFFFFE26                  Score =				$FFFFFE26 ; 4 bytes
00000000 =FFFFFE30                  Last_star_pole_hit =		$FFFFFE30 ; 1 byte -- max activated starpole ID in this act
00000000                            
00000000 =FFFFFE31                  Saved_Last_star_pole_hit =	$FFFFFE31
00000000 =FFFFFE32                  Saved_x_pos =			$FFFFFE32
00000000 =FFFFFE34                  Saved_y_pos =			$FFFFFE34
00000000 =FFFFFE36                  Saved_Ring_count =		$FFFFFE36
00000000 =FFFFFE38                  Saved_Timer =			$FFFFFE38
00000000 =FFFFFE3C                  Saved_art_tile =		$FFFFFE3C
00000000 =FFFFFE3E                  Saved_layer =			$FFFFFE3E
00000000 =FFFFFE40                  Saved_Camera_X_pos =		$FFFFFE40
00000000 =FFFFFE42                  Saved_Camera_Y_pos =		$FFFFFE42
00000000 =FFFFFE50                  Saved_Water_Level =		$FFFFFE50
00000000 =FFFFFE52                  Saved_Water_routine =		$FFFFFE52
00000000 =FFFFFE53                  Saved_Water_move =		$FFFFFE53
00000000 =FFFFFE54                  Saved_Extra_life_flags =	$FFFFFE54
00000000 =FFFFFE55                  Saved_Extra_life_flags_2P =	$FFFFFE55
00000000 =FFFFFE56                  Saved_Camera_Max_Y_pos =	$FFFFFE56
00000000 =FFFFFE58                  Saved_Dynamic_Resize_Routine =	$FFFFFE58
00000000                            
00000000 =FFFFFEA0                  Logspike_anim_counter =		$FFFFFEA0
00000000 =FFFFFEA1                  Logspike_anim_frame =		$FFFFFEA1
00000000 =FFFFFEA2                  Rings_anim_counter =		$FFFFFEA2
00000000 =FFFFFEA3                  Rings_anim_frame =		$FFFFFEA3
00000000 =FFFFFEA4                  Unknown_anim_counter =		$FFFFFEA4 ; I think this was $FFFFFEC4 in the alpha
00000000 =FFFFFEA5                  Unknown_anim_frame =		$FFFFFEA5
00000000 =FFFFFEA6                  Ring_spill_anim_counter =	$FFFFFEA6 ; scattered rings
00000000 =FFFFFEA7                  Ring_spill_anim_frame =		$FFFFFEA7
00000000 =FFFFFEA8                  Ring_spill_anim_accum =		$FFFFFEA8
00000000                            
00000000                            ; values for the second player (some of these only apply to 2-player games)
00000000 =FFFFFEC0                  Tails_top_speed =		$FFFFFEC0 ; Tails_max_vel
00000000 =FFFFFEC2                  Tails_acceleration =		$FFFFFEC2
00000000 =FFFFFEC4                  Tails_deceleration =		$FFFFFEC4
00000000 =FFFFFEC6                  Life_count_2P =			$FFFFFEC6
00000000 =FFFFFEC7                  Extra_life_flags_2P =		$FFFFFEC7
00000000 =FFFFFEC8                  Update_HUD_lives_2P =		$FFFFFEC8
00000000 =FFFFFEC9                  Update_HUD_rings_2P =		$FFFFFEC9
00000000 =FFFFFECA                  Update_HUD_timer_2P =		$FFFFFECA
00000000 =FFFFFECB                  Update_HUD_score_2P =		$FFFFFECB ; mostly unused
00000000 =FFFFFECC                  Time_Over_flag_2P =		$FFFFFECC
00000000 =FFFFFED0                  Ring_count_2P =			$FFFFFED0
00000000 =FFFFFED2                  Timer_2P =			$FFFFFED2 ; 4 bytes
00000000 =FFFFFED2                  Timer_minute_word_2P =		$FFFFFED2 ; 2 bytes
00000000 =FFFFFED3                  Timer_minute_2P =		$FFFFFED3 ; 1 byte
00000000 =FFFFFED4                  Timer_second_2P =		$FFFFFED4 ; 1 byte
00000000 =FFFFFED5                  Timer_centisecond_2P =		$FFFFFED5 ; 1 byte
00000000 =FFFFFED6                  Score_2P =			$FFFFFED6
00000000 =FFFFFEE0                  Last_star_pole_hit_2P =		$FFFFFEE0
00000000                            
00000000 =FFFFFEE1                  Saved_Last_star_pole_hit_2P =	$FFFFFEE1
00000000 =FFFFFEE2                  Saved_x_pos_2P =		$FFFFFEE2
00000000 =FFFFFEE4                  Saved_y_pos_2P =		$FFFFFEE4
00000000 =FFFFFEE6                  Saved_Ring_count_2P =		$FFFFFEE6
00000000 =FFFFFEE8                  Saved_Timer_2P =		$FFFFFEE8
00000000 =FFFFFEEC                  Saved_art_tile_2P =		$FFFFFEEC
00000000 =FFFFFEEE                  Saved_layer_2P =		$FFFFFEEE
00000000                            
00000000 =FFFFFEF8                  Loser_Time_Left =		$FFFFFEF8
00000000 =FFFFFF10                  Results_Screen_2P =		$FFFFFF10 ; 0 = act, 1 = zone, 2 = game, 3 = SS, 4 = SS all
00000000 =FFFFFF20                  Results_Data_2P =		$FFFFFF20 ; $18 bytes
00000000 =FFFFFF20                  EHZ_Results_2P =		$FFFFFF20 ; 6 bytes
00000000 =FFFFFF26                  MCZ_Results_2P =		$FFFFFF26 ; 6 bytes
00000000 =FFFFFF2C                  CNZ_Results_2P =		$FFFFFF2C ; 6 bytes
00000000 =FFFFFF32                  SS_Results_2P =			$FFFFFF32 ; 6 bytes
00000000 =FFFFFF38                  SS_Total_Won =			$FFFFFF38 ; 2 bytes (player 1 then player 2)
00000000 =FFFFFF40                  Perfect_rings_left =		$FFFFFF40
00000000 =FFFFFF70                  Player_mode =			$FFFFFF70 ; 0 = Sonic and Tails, 1 = Sonic, 2 = Tails
00000000 =FFFFFF72                  Player_option =			$FFFFFF72 ; 0 = Sonic and Tails, 1 = Sonic, 2 = Tails
00000000                            
00000000 =FFFFFF74                  Two_player_items =		$FFFFFF74
00000000 =FFFFFF82                  Level_select_zone =		$FFFFFF82
00000000 =FFFFFF84                  Sound_test_sound =		$FFFFFF84
00000000 =FFFFFF86                  Title_screen_option =		$FFFFFF86
00000000 =FFFFFF88                  Current_Zone_2P =		$FFFFFF88
00000000 =FFFFFF89                  Current_Act_2P =		$FFFFFF89
00000000 =FFFFFF8A                  Two_player_mode_copy =		$FFFFFF8A
00000000 =FFFFFF8C                  Options_menu_box =		$FFFFFF8C
00000000 =FFFFFF90                  Level_Music =			$FFFFFF90
00000000 =FFFFFF98                  Game_Over_2P =			$FFFFFF98
00000000 =FFFFFFB0                  Got_Emerald =			$FFFFFFB0
00000000 =FFFFFFB1                  Emerald_count =			$FFFFFFB1
00000000 =FFFFFFB2                  Got_Emeralds_array =		$FFFFFFB2 ; 7 bytes
00000000 =FFFFFFC0                  Next_Extra_life_score =		$FFFFFFC0
00000000 =FFFFFFC4                  Next_Extra_life_score_2P =	$FFFFFFC4
00000000 =FFFFFFC8                  Level_Has_Signpost =		$FFFFFFC8 ; 1 byte ; 1 = signpost, 0 = boss or nothing
00000000 =FFFFFFD0                  Level_select_flag =		$FFFFFFD0
00000000 =FFFFFFD4                  Correct_cheat_entries =		$FFFFFFD4
00000000 =FFFFFFD6                  Correct_cheat_entries_2 =	$FFFFFFD6 ; for 14 continues or 7 emeralds codes
00000000 =FFFFFFD8                  Two_player_mode =		$FFFFFFD8 ; flag (0 for main game)
00000000                            
00000000                            ; Values in these variables are passed to the sound driver during V-INT.
00000000                            ; They use a playlist index, not a sound test index.
00000000 =FFFFFFE0                  Music_to_play =			$FFFFFFE0
00000000 =FFFFFFE1                  SFX_to_play =			$FFFFFFE1 ; normal
00000000 =FFFFFFE2                  SFX_to_play_2 =			$FFFFFFE2 ; alternating stereo
00000000 =FFFFFFE4                  Music_to_play_2 =		$FFFFFFE4 ; alternate (higher priority?) slot
00000000                            
00000000 =FFFFFFF0                  Demo_mode_flag =		$FFFFFFF0 ; 1 if a demo is playing (2 bytes)
00000000 =FFFFFFF2                  Demo_number =			$FFFFFFF2 ; which demo will play next (2 bytes)
00000000 =FFFFFFF8                  Graphics_Flags =		$FFFFFFF8 ; misc. bitfield
00000000 =FFFFFFFC                  Checksum_fourcc =		$FFFFFFFC ; (4 bytes)
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; VDP addressses
00000000 =00C00000                  VDP_data_port =			$C00000 ; (8=r/w, 16=r/w)
00000000 =00C00004                  VDP_control_port =		$C00004 ; (8=r/w, 16=r/w)
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Z80 addresses
00000000 =00A00000                  Z80_RAM =			$A00000 ; start of Z80 RAM
00000000 =00A02000                  Z80_RAM_End =			$A02000 ; end of non-reserved Z80 RAM
00000000 =00A10001                  Z80_Version =			$A10001
00000000 =00A10002                  Z80_Port_1_Data =		$A10002
00000000 =00A10008                  Z80_Port_1_Control =		$A10008
00000000 =00A1000A                  Z80_Port_2_Control =		$A1000A
00000000 =00A1000C                  Z80_Expansion_Control =		$A1000C
00000000 =00A11100                  Z80_Bus_Request =		$A11100
00000000 =00A11200                  Z80_Reset =			$A11200
00000000                            
00000000 =00A14000                  Security_Addr =			$A14000	
00000000 =00A14000                  Security_Addr =			$A14000	
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:    dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+          dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+          dc.l PrivilegeViol, Trace, Line1010Emu, Line1111Emu
00000030 0000 0000 0000 0000 0000+          dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+          dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+          dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+          dc.l ErrorExcept, ErrorTrap, ErrorTrap, ErrorTrap
00000070 0000 0000 0000 0000 0000+          dc.l PalToCRAM,    ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+          dc.l ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
00000100                            
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2953 4547 4120 3139+  Date:		dc.b '(C)SEGA 1991.APR' ; Release date
00000120 534F 4E49 4320 5448 4520+  Title_Local:	dc.b 'SONIC THE               HEDGEHOG 4 EPISODE I    ' ; Domestic name
00000150 534F 4E49 4320 5448 4520+  Title_Int:	dc.b 'SONIC THE               HEDGEHOG 4 EPISODE I    ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            jmp_DisplaySprite:
00000300 4EF9 0000 0000             	jmp DisplaySprite
00000306                            
00000306                            GameProgram:
00000306 4A79 00C0 0004             		tst.w	($C00004).l
0000030C 0839 0006 00A1 000D        		btst	#6,($A1000D).l
00000314 6700                       		beq.s	CheckSumCheck
00000316 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
0000031E 6700 0000                  		beq.w	GameInit	; if yes, branch
00000322                            
00000322                            CheckSumCheck:
00000322 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000328 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
0000032E 2011                       		move.l	(a1),d0
00000330 7200                       		moveq	#0,d1
00000332                            
00000332                            loc_32C:
00000332 D258                       		add.w	(a0)+,d1
00000334 B088                       		cmp.l	a0,d0
00000336 64FA                       		bcc.s	loc_32C
00000338 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
0000033E                            	;	cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033E                            	;	bne.w	CheckSumError	; if they don't match, branch
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            
00000348                            loc_348:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,loc_348
0000034E 1039 00A1 0001             		move.b	($A10001).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            
00000370                            GameClrRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000376 6100 0000                  		bsr.w	VDPSetupGame
0000037A 6100 0000                  		bsr.w	SoundDriverLoad
0000037E 6100 0000                  		bsr.w	JoypadInit
00000382 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000388                            
00000388                            MainGameLoop:
00000388 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000038C 0240 001C                  		andi.w	#$1C,d0
00000390 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000394 60F2                       		bra.s	MainGameLoop
00000396                            ; ===========================================================================
00000396                            ; ---------------------------------------------------------------------------
00000396                            ; Main game mode array
00000396                            ; ---------------------------------------------------------------------------
00000396                            
00000396                            GameModeArray:
00000396 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000039A                            ; ===========================================================================
0000039A 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000039E                            ; ===========================================================================
0000039E 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A2                            ; ===========================================================================
000003A2 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003A6                            ; ===========================================================================
000003A6 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003AA                            ; ===========================================================================
000003AA 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003AE                            ; ===========================================================================
000003AE 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003B2                            ; ===========================================================================
000003B2 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003B6                            ; ===========================================================================
000003B6 4E75                       		rts	
000003B8                            ; ===========================================================================
000003B8                            
000003B8                            CheckSumError:
000003B8 6100 0000                  		bsr.w	VDPSetupGame
000003BC 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003C6 7E3F                       		moveq	#$3F,d7
000003C8                            
000003C8                            CheckSum_Red:
000003C8 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003D0 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003D4                            
000003D4                            CheckSum_Loop:
000003D4 60FE                       		bra.s	CheckSum_Loop
000003D6                            ; ===========================================================================
000003D6                            
000003D6                            loc_43A:
000003D6 46FC 2700                  		move	#$2700,sr
000003DA 544F                       		addq.w	#2,sp
000003DC 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
000003E0 544F                       		addq.w	#2,sp
000003E2 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
000003E8 6100 0000                  		bsr.w	ShowErrorMsg
000003EC 202F 0002                  		move.l	2(sp),d0
000003F0 6100 0000                  		bsr.w	sub_5BA
000003F4 2038 FC40                  		move.l	($FFFFFC40).w,d0
000003F8 6100 0000                  		bsr.w	sub_5BA
000003FC 6000                       		bra.s	loc_478
000003FE                            ; ===========================================================================
000003FE                            
000003FE                            loc_462:
000003FE 46FC 2700                  		move	#$2700,sr
00000402 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000408 6100 0000                  		bsr.w	ShowErrorMsg
0000040C 202F 0002                  		move.l	2(sp),d0
00000410 6100 0000                  		bsr.w	sub_5BA
00000414                            
00000414                            loc_478:
00000414 6100 0000                  		bsr.w	ErrorWaitForC
00000418 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
0000041E 46FC 2300                  		move	#$2300,sr
00000422 4E73                       		rte	
00000424                            
00000424                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000424                            
00000424                            
00000424                            ShowErrorMsg:				; XREF: loc_43A; loc_462
00000424 4DF9 00C0 0000             		lea	($C00000).l,a6
0000042A 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
00000434 41F9 0000 0000             		lea	(Art_Text).l,a0
0000043A 323C 027F                  		move.w	#$27F,d1
0000043E                            
0000043E                            Error_LoadGfx:
0000043E 3C98                       		move.w	(a0)+,(a6)
00000440 51C9 FFFC                  		dbf	d1,Error_LoadGfx
00000444 7000                       		moveq	#0,d0		; clear	d0
00000446 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
0000044A 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
0000044E 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
00000452 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
0000045C 7212                       		moveq	#$12,d1		; number of characters
0000045E                            
0000045E                            Error_LoopChars:
0000045E 7000                       		moveq	#0,d0
00000460 1018                       		move.b	(a0)+,d0
00000462 0640 0790                  		addi.w	#$790,d0
00000466 3C80                       		move.w	d0,(a6)
00000468 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
0000046C 4E75                       		rts	
0000046E                            ; End of function ShowErrorMsg
0000046E                            
0000046E                            ; ===========================================================================
0000046E 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
00000472 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
00000476 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
0000047A 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
0000047E 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
00000482 0000                       		dc.w asc_5A6-ErrorText
00000484 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
00000497 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
000004AA 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
000004BD 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
000004D0 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
000004E3 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
000004F6 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
00000509 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
0000051C 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
0000052F 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
00000542 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
00000556 00                         		even
00000556                            
00000556                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000556                            
00000556                            
00000556                            sub_5BA:				; XREF: loc_43A; loc_462
00000556 3CBC 07CA                  		move.w	#$7CA,(a6)
0000055A 7407                       		moveq	#7,d2
0000055C                            
0000055C                            loc_5C0:
0000055C E998                       		rol.l	#4,d0
0000055E 6100                       		bsr.s	sub_5CA
00000560 51CA FFFA                  		dbf	d2,loc_5C0
00000564 4E75                       		rts	
00000566                            ; End of function sub_5BA
00000566                            
00000566                            
00000566                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000566                            
00000566                            
00000566                            sub_5CA:				; XREF: sub_5BA
00000566 3200                       		move.w	d0,d1
00000568 0241 000F                  		andi.w	#$F,d1
0000056C 0C41 000A                  		cmpi.w	#$A,d1
00000570 6500                       		bcs.s	loc_5D8
00000572 5E41                       		addq.w	#7,d1
00000574                            
00000574                            loc_5D8:
00000574 0641 07C0                  		addi.w	#$7C0,d1
00000578 3C81                       		move.w	d1,(a6)
0000057A 4E75                       		rts	
0000057C                            ; End of function sub_5CA
0000057C                            
0000057C                            
0000057C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000057C                            
0000057C                            
0000057C                            ErrorWaitForC:				; XREF: loc_478
0000057C 6100 0000                  		bsr.w	ReadJoypads
00000580 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
00000586 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
0000058A 4E75                       		rts	
0000058C                            ; End of function ErrorWaitForC
0000058C                            
0000058C                            ; ===========================================================================
0000058C                            
0000058C                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000AAC                            		even
00000AAC                            
00000AAC                            ; ===========================================================================
00000AAC                            
00000AAC                            loc_B10:				; XREF: Vectors
00000AAC 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000AB0 4A38 F62A                  		tst.b	($FFFFF62A).w
00000AB4 6700                       		beq.s	loc_B88
00000AB6 3039 00C0 0004             		move.w	($C00004).l,d0
00000ABC 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000AC6 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000ACE 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000AD4 6700                       		beq.s	loc_B42
00000AD6 303C 0700                  		move.w	#$700,d0
00000ADA                            
00000ADA                            loc_B3E:
00000ADA 51C8 FFFE                  		dbf	d0,loc_B3E
00000ADE                            
00000ADE                            loc_B42:
00000ADE 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000AE2 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000AE8 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000AEE 0240 003E                  		andi.w	#$3E,d0
00000AF2 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000AF6 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000AFA                            
00000AFA                            loc_B5E:				; XREF: loc_B88
00000AFA 4EB9 0000 0000             		jsr	sub_71B4C
00000B00                            
00000B00                            loc_B64:				; XREF: loc_D50
00000B00 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000B04 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B08 4E73                       		rte	
00000B0A                            ; ===========================================================================
00000B0A 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000B0E 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000B12 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000B16 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000B1A 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000B1E 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000B22 0000                       		dc.w loc_E72-off_B6E
00000B24                            ; ===========================================================================
00000B24                            
00000B24                            loc_B88:				; XREF: loc_B10; off_B6E
00000B24 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000B2A 6700                       		beq.s	loc_B9A
00000B2C 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000B32 6600 FFC6                  		bne.w	loc_B5E
00000B36                            
00000B36                            loc_B9A:
00000B36 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000B3C 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000B40 3039 00C0 0004             		move.w	($C00004).l,d0
00000B46 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000B4C 6700                       		beq.s	loc_BBA
00000B4E 303C 0700                  		move.w	#$700,d0
00000B52                            
00000B52                            loc_BB6:
00000B52 51C8 FFFE                  		dbf	d0,loc_BB6
00000B56                            
00000B56                            loc_BBA:
00000B56 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000B5C 33FC 0100 00A1 1100 0839+  	Z80DMA_ON
00000B8A 4A38 F64E                  		tst.b	($FFFFF64E).w
00000B8E 6600                       		bne.s	loc_BFE
00000B90 4BF9 00C0 0004             		lea	($C00004).l,a5
00000B96 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000B9C 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000BA2 3ABC 977F                  		move.w	#$977F,(a5)
00000BA6 3ABC C000                  		move.w	#$C000,(a5)
00000BAA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BB0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BB4 6000                       		bra.s	loc_C22
00000BB6                            ; ===========================================================================
00000BB6                            
00000BB6                            loc_BFE:				; XREF: loc_BC8
00000BB6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BBC 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000BC2 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000BC8 3ABC 977F                  		move.w	#$977F,(a5)
00000BCC 3ABC C000                  		move.w	#$C000,(a5)
00000BD0 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BD6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BDA                            
00000BDA                            loc_C22:				; XREF: loc_BC8
00000BDA 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000BDE 33FC 0100 00A1 1100 0839+  	Z80DMA_OFF
00000C00 6000 FEF8                  		bra.w	loc_B5E
00000C04                            ; ===========================================================================
00000C04                            
00000C04                            loc_C32:				; XREF: off_B6E
00000C04 6100 0000                  		bsr.w	sub_106E
00000C08                            
00000C08                            loc_C36:				; XREF: off_B6E
00000C08 4A78 F614                  		tst.w	($FFFFF614).w
00000C0C 6700 0000                  		beq.w	locret_C42
00000C10 5378 F614                  		subq.w	#1,($FFFFF614).w
00000C14                            
00000C14                            locret_C42:
00000C14 4E75                       		rts	
00000C16                            ; ===========================================================================
00000C16                            
00000C16                            loc_C44:				; XREF: off_B6E
00000C16 6100 0000                  		bsr.w	sub_106E
00000C1A 6100 0000                  		bsr.w	sub_6886
00000C1E 6100 0000                  		bsr.w	sub_1642
00000C22 4A78 F614                  		tst.w	($FFFFF614).w
00000C26 6700 0000                  		beq.w	locret_C5C
00000C2A 5378 F614                  		subq.w	#1,($FFFFF614).w
00000C2E                            
00000C2E                            locret_C5C:
00000C2E 4E75                       		rts	
00000C30                            ; ===========================================================================
00000C30                            
00000C30                            loc_C5E:				; XREF: off_B6E
00000C30 6100 0000                  		bsr.w	sub_106E
00000C34 4E75                       		rts
00000C36                            
00000C36                            Return:
00000C36 6100 0000                  		bsr.w	ReadJoypads
00000C3A 4E75                       		rts	
00000C3C                            ; ===========================================================================
00000C3C                            
00000C3C                            loc_C64:				; XREF: off_B6E
00000C3C 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000C42 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000C46                            
00000C46                            loc_C6E:				; XREF: off_B6E
00000C46 33FC 0100 00A1 1100 0839+  	Z80DMA_ON
00000C74 6100 0000                  		bsr.w	ReadJoypads
00000C78 4A38 F64E                  		tst.b	($FFFFF64E).w
00000C7C 6600                       		bne.s	loc_CB0
00000C7E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C84 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C8A 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000C90 3ABC 977F                  		move.w	#$977F,(a5)
00000C94 3ABC C000                  		move.w	#$C000,(a5)
00000C98 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C9E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CA2 6000                       		bra.s	loc_CD4
00000CA4                            ; ===========================================================================
00000CA4                            
00000CA4                            loc_CB0:				; XREF: loc_C76
00000CA4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CAA 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000CB0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000CB6 3ABC 977F                  		move.w	#$977F,(a5)
00000CBA 3ABC C000                  		move.w	#$C000,(a5)
00000CBE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000CC4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CC8                            
00000CC8                            loc_CD4:				; XREF: loc_C76
00000CC8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000CCC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CD2 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000CD8 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000CDE 3ABC 977F                  		move.w	#$977F,(a5)
00000CE2 3ABC 7C00                  		move.w	#$7C00,(a5)
00000CE6 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000CEC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CF0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CF6 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000CFC 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000D02 3ABC 977F                  		move.w	#$977F,(a5)
00000D06 3ABC 7800                  		move.w	#$7800,(a5)
00000D0A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D10 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D14 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000D1A                            
00000D1A                            loc_D50:
00000D1A 33FC 0100 00A1 1100 0839+  	Z80DMA_OFF
00000D3C 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000D42 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000D48 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000D4E 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000D54 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000D5A 6400                       		bcc.s	Demo_Time
00000D5C 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000D62 588F                       		addq.l	#4,sp
00000D64 6000 FD9A                  		bra.w	loc_B64
00000D68                            
00000D68                            ; ---------------------------------------------------------------------------
00000D68                            ; Subroutine to	run a demo for an amount of time
00000D68                            ; ---------------------------------------------------------------------------
00000D68                            
00000D68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000D68                            
00000D68                            
00000D68                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000D68 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000D6C 4EB9 0000 0000             		jsr	AniArt_Load
00000D72 4EB9 0000 0000             		jsr	HudUpdate
00000D78 6100 0000                  		bsr.w	sub_165E
00000D7C 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000D80 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000D84 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000D88                            
00000D88                            Demo_TimeEnd:
00000D88 4E75                       		rts	
00000D8A                            ; End of function Demo_Time
00000D8A                            
00000D8A                            ; ===========================================================================
00000D8A                            
00000D8A                            loc_DA6:				; XREF: off_B6E
00000D8A 6100 0000                  		bsr.w	ReadJoypads
00000D8E 33FC 0100 00A1 1100 0839+  	Z80DMA_ON
00000DBC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DC2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000DC8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000DCE 3ABC 977F                  		move.w	#$977F,(a5)
00000DD2 3ABC C000                  		move.w	#$C000,(a5)
00000DD6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DDC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DE0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DE6 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000DEC 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000DF2 3ABC 977F                  		move.w	#$977F,(a5)
00000DF6 3ABC 7800                  		move.w	#$7800,(a5)
00000DFA 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E00 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E04 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E0A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000E10 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000E16 3ABC 977F                  		move.w	#$977F,(a5)
00000E1A 3ABC 7C00                  		move.w	#$7C00,(a5)
00000E1E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E24 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E28 6100 0000                  		bsr.w	PalCycle_SS
00000E2C 4A38 F767                  		tst.b	($FFFFF767).w
00000E30 6700                       		beq.s	loc_E64
00000E32 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E38 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000E3E 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000E44 3ABC 977F                  		move.w	#$977F,(a5)
00000E48 3ABC 7000                  		move.w	#$7000,(a5)
00000E4C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E52 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E56 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000E5C                            
00000E5C                            loc_E64:
00000E5C 33FC 0100 00A1 1100 0839+  	Z80DMA_OFF
00000E7E 4A78 F614                  		tst.w	($FFFFF614).w
00000E82 6700 0000                  		beq.w	locret_E70
00000E86 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E8A                            
00000E8A                            locret_E70:
00000E8A 4E75                       		rts	
00000E8C                            ; ===========================================================================
00000E8C                            
00000E8C                            loc_E72:				; XREF: off_B6E
00000E8C 6100 0000                  		bsr.w	ReadJoypads
00000E90 33FC 0100 00A1 1100 0839+  	Z80DMA_ON
00000EBE 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EC2 6600                       		bne.s	loc_EB4
00000EC4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000ECA 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000ED0 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000ED6 3ABC 977F                  		move.w	#$977F,(a5)
00000EDA 3ABC C000                  		move.w	#$C000,(a5)
00000EDE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EE4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EE8 6000                       		bra.s	loc_ED8
00000EEA                            ; ===========================================================================
00000EEA                            
00000EEA                            loc_EB4:				; XREF: loc_E7A
00000EEA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EF0 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EF6 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EFC 3ABC 977F                  		move.w	#$977F,(a5)
00000F00 3ABC C000                  		move.w	#$C000,(a5)
00000F04 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000F0A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F0E                            
00000F0E                            loc_ED8:				; XREF: loc_E7A
00000F0E 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000F12 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F18 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F1E 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F24                            
00000F24                            loc_EEE:
00000F24 3ABC 977F                  		move.w	#$977F,(a5)
00000F28 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F2C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F32 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F36 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F3C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F42 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F48 3ABC 977F                  		move.w	#$977F,(a5)
00000F4C 3ABC 7800                  		move.w	#$7800,(a5)
00000F50 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F56 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F5A 4A38 F767                  		tst.b	($FFFFF767).w
00000F5E 6700                       		beq.s	loc_F54
00000F60 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F66 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F6C 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F72 3ABC 977F                  		move.w	#$977F,(a5)
00000F76 3ABC 7000                  		move.w	#$7000,(a5)
00000F7A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F80 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F84 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F8A                            
00000F8A                            loc_F54:
00000F8A 33FC 0100 00A1 1100 0839+  	Z80DMA_OFF
00000FAC 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000FB2 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000FB8 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000FBE 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000FC4 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000FC8 4EB9 0000 0000             		jsr	AniArt_Load
00000FCE 4EB9 0000 0000             		jsr	HudUpdate
00000FD4 6100 0000                  		bsr.w	sub_1642
00000FD8 4E75                       		rts	
00000FDA                            ; ===========================================================================
00000FDA                            
00000FDA                            loc_F8A:				; XREF: off_B6E
00000FDA 6100 0000                  		bsr.w	sub_106E
00000FDE 5238 F628                  		addq.b	#1,($FFFFF628).w
00000FE2 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00000FE8 4E75                       		rts	
00000FEA                            ; ===========================================================================
00000FEA                            
00000FEA                            loc_F9A:				; XREF: off_B6E
00000FEA 6100 0000                  		bsr.w	sub_106E
00000FEE 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000FF2 6000 0000                  		bra.w	sub_1642
00000FF6                            ; ===========================================================================
00000FF6                            
00000FF6                            loc_FA6:				; XREF: off_B6E
00000FF6 6100 0000                  		bsr.w	ReadJoypads
00000FFA 33FC 0100 00A1 1100 0839+  	Z80DMA_ON
00001028 4BF9 00C0 0004             		lea	($C00004).l,a5
0000102E 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001034 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
0000103A 3ABC 977F                  		move.w	#$977F,(a5)
0000103E 3ABC C000                  		move.w	#$C000,(a5)
00001042 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001048 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000104C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001052 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001058 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
0000105E 3ABC 977F                  		move.w	#$977F,(a5)
00001062 3ABC 7800                  		move.w	#$7800,(a5)
00001066 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000106C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001070 4BF9 00C0 0004             		lea	($C00004).l,a5
00001076 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
0000107C 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001082 3ABC 977F                  		move.w	#$977F,(a5)
00001086 3ABC 7C00                  		move.w	#$7C00,(a5)
0000108A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001090 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001094 4A38 F767                  		tst.b	($FFFFF767).w
00001098 6700                       		beq.s	loc_1060
0000109A 4BF9 00C0 0004             		lea	($C00004).l,a5
000010A0 2ABC 9401 9370             		move.l	#$94019370,(a5)
000010A6 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
000010AC 3ABC 977F                  		move.w	#$977F,(a5)
000010B0 3ABC 7000                  		move.w	#$7000,(a5)
000010B4 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000010BA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010BE 11FC 0000 F767             		move.b	#0,($FFFFF767).w
000010C4                            
000010C4                            loc_1060:
000010C4 33FC 0100 00A1 1100 0839+  	Z80DMA_OFF
000010E6 4A78 F614                  		tst.w	($FFFFF614).w
000010EA 6700 0000                  		beq.w	locret_106C
000010EE 5378 F614                  		subq.w	#1,($FFFFF614).w
000010F2                            
000010F2                            locret_106C:
000010F2 4E75                       		rts	
000010F4                            
000010F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010F4                            
000010F4                            
000010F4                            sub_106E:				; XREF: loc_C32; et al
000010F4 6100 0000                  		bsr.w	ReadJoypads
000010F8 33FC 0100 00A1 1100 0839+  	Z80DMA_ON
00001126 4A38 F64E                  		tst.b	($FFFFF64E).w
0000112A 6600                       		bne.s	loc_10B0
0000112C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001132 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001138 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
0000113E 3ABC 977F                  		move.w	#$977F,(a5)
00001142 3ABC C000                  		move.w	#$C000,(a5)
00001146 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
0000114C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001150                            
00001150                            PAL1_LOAD:
00001150 6000                       		bra.s	loc_10D4
00001152                            ; ===========================================================================
00001152                            
00001152                            loc_10B0:
00001152 4BF9 00C0 0004             		lea	($C00004).l,a5
00001158 2ABC 9400 9340             		move.l	#$94009340,(a5)
0000115E 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00001164 3ABC 977F                  		move.w	#$977F,(a5)
00001168 3ABC C000                  		move.w	#$C000,(a5)
0000116C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001172 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001176                            loc_10D4:
00001176 4BF9 00C0 0004             		lea	($C00004).l,a5
0000117C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001182 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001188 3ABC 977F                  		move.w	#$977F,(a5)
0000118C 3ABC 7800                  		move.w	#$7800,(a5)
00001190 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001196 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000119A 4BF9 00C0 0004             		lea	($C00004).l,a5
000011A0 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
000011A6 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
000011AC 3ABC 977F                  		move.w	#$977F,(a5)
000011B0 3ABC 7C00                  		move.w	#$7C00,(a5)
000011B4 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000011BA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000011BE 33FC 0100 00A1 1100 0839+  	Z80DMA_OFF
000011E0 4E75                       		rts	
000011E2                            ; End of function sub_106E
000011E2                            
000011E2                            ; ---------------------------------------------------------------------------
000011E2                            ; Subroutine to	move pallets from the RAM to CRAM
000011E2                            ; ---------------------------------------------------------------------------
000011E2                            
000011E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011E2                            
000011E2                            
000011E2                            PalToCRAM:
000011E2 46FC 2700                  		move	#$2700,sr
000011E6 4A78 F644                  		tst.w	($FFFFF644).w
000011EA 6700                       		beq.s	locret_119C
000011EC 31FC 0000 F644             		move.w	#0,($FFFFF644).w
000011F2 48E7 00C0                  		movem.l	a0-a1,-(sp)
000011F6 43F9 00C0 0000             		lea	($C00000).l,a1
000011FC 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001200 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001208 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
0000120A 2298                       		move.l	(a0)+,(a1)
0000120C 2298                       		move.l	(a0)+,(a1)
0000120E 2298                       		move.l	(a0)+,(a1)
00001210 2298                       		move.l	(a0)+,(a1)
00001212 2298                       		move.l	(a0)+,(a1)
00001214 2298                       		move.l	(a0)+,(a1)
00001216 2298                       		move.l	(a0)+,(a1)
00001218 2298                       		move.l	(a0)+,(a1)
0000121A 2298                       		move.l	(a0)+,(a1)
0000121C 2298                       		move.l	(a0)+,(a1)
0000121E 2298                       		move.l	(a0)+,(a1)
00001220 2298                       		move.l	(a0)+,(a1)
00001222 2298                       		move.l	(a0)+,(a1)
00001224 2298                       		move.l	(a0)+,(a1)
00001226 2298                       		move.l	(a0)+,(a1)
00001228 2298                       		move.l	(a0)+,(a1)
0000122A 2298                       		move.l	(a0)+,(a1)
0000122C 2298                       		move.l	(a0)+,(a1)
0000122E 2298                       		move.l	(a0)+,(a1)
00001230 2298                       		move.l	(a0)+,(a1)
00001232 2298                       		move.l	(a0)+,(a1)
00001234 2298                       		move.l	(a0)+,(a1)
00001236 2298                       		move.l	(a0)+,(a1)
00001238 2298                       		move.l	(a0)+,(a1)
0000123A 2298                       		move.l	(a0)+,(a1)
0000123C 2298                       		move.l	(a0)+,(a1)
0000123E 2298                       		move.l	(a0)+,(a1)
00001240 2298                       		move.l	(a0)+,(a1)
00001242 2298                       		move.l	(a0)+,(a1)
00001244 2298                       		move.l	(a0)+,(a1)
00001246 2298                       		move.l	(a0)+,(a1)
00001248 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
0000124E 4CDF 0300                  		movem.l	(sp)+,a0-a1
00001252 4A38 F64F                  		tst.b	($FFFFF64F).w
00001256 6600                       		bne.s	loc_119E
00001258                            
00001258                            locret_119C:
00001258 4E73                       		rte	
0000125A                            ; ===========================================================================
0000125A                            
0000125A                            loc_119E:				; XREF: PalToCRAM
0000125A 4238 F64F                  		clr.b	($FFFFF64F).w
0000125E 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00001262 6100 FB04                  		bsr.w	Demo_Time
00001266 4EB9 0000 0000             		jsr	sub_71B4C
0000126C 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00001270 4E73                       		rte	
00001272                            ; End of function PalToCRAM
00001272                            
00001272                            ; ---------------------------------------------------------------------------
00001272                            ; Subroutine to	initialise joypads
00001272                            ; ---------------------------------------------------------------------------
00001272                            
00001272                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001272                            
00001272                            
00001272                            JoypadInit:				; XREF: GameClrRAM
00001272 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000127A                            
0000127A                            Joypad_WaitZ80:
0000127A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
00001282 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
00001284 7040                       		moveq	#$40,d0
00001286 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
0000128C 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00001292 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00001298 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000012A0 4E75                       		rts	
000012A2                            ; End of function JoypadInit
000012A2                            
000012A2                            ; ---------------------------------------------------------------------------
000012A2                            ; Subroutine to	read joypad input, and send it to the RAM
000012A2                            ; ---------------------------------------------------------------------------
000012A2                            
000012A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012A2                            
000012A2                            
000012A2                            ReadJoypads:
000012A2 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
000012A6 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000012AC 6100                       		bsr.s	Joypad_Read	; do the first joypad
000012AE 5449                       		addq.w	#2,a1		; do the second	joypad
000012B0                            
000012B0                            Joypad_Read:
000012B0 12BC 0000                  		move.b	#0,(a1)
000012B4 4E71                       		nop	
000012B6 4E71                       		nop	
000012B8 1011                       		move.b	(a1),d0
000012BA E508                       		lsl.b	#2,d0
000012BC 0200 00C0                  		andi.b	#$C0,d0
000012C0 12BC 0040                  		move.b	#$40,(a1)
000012C4 4E71                       		nop	
000012C6 4E71                       		nop	
000012C8 1211                       		move.b	(a1),d1
000012CA 0201 003F                  		andi.b	#$3F,d1
000012CE 8001                       		or.b	d1,d0
000012D0 4600                       		not.b	d0
000012D2 1210                       		move.b	(a0),d1
000012D4 B101                       		eor.b	d0,d1
000012D6 10C0                       		move.b	d0,(a0)+
000012D8 C200                       		and.b	d0,d1
000012DA 10C1                       		move.b	d1,(a0)+
000012DC 4E75                       		rts	
000012DE                            ; End of function ReadJoypads
000012DE                            
000012DE                            
000012DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012DE                            
000012DE                            
000012DE                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
000012DE 41F9 00C0 0004             		lea	($C00004).l,a0
000012E4 43F9 00C0 0000             		lea	($C00000).l,a1
000012EA 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
000012F0 7E12                       		moveq	#$12,d7
000012F2                            
000012F2                            VDP_Loop:
000012F2 309A                       		move.w	(a2)+,(a0)
000012F4 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
000012F8                            
000012F8 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
000012FE 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001302 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001308 7000                       		moveq	#0,d0
0000130A 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001314 3E3C 003F                  		move.w	#$3F,d7
00001318                            
00001318                            VDP_ClrCRAM:
00001318 3280                       		move.w	d0,(a1)
0000131A 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
0000131E                            
0000131E 42B8 F616                  		clr.l	($FFFFF616).w
00001322 42B8 F61A                  		clr.l	($FFFFF61A).w
00001326 2F01                       		move.l	d1,-(sp)
00001328 4BF9 00C0 0004             		lea	($C00004).l,a5
0000132E 3ABC 8F01                  		move.w	#$8F01,(a5)
00001332 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
00001338 3ABC 9780                  		move.w	#$9780,(a5)
0000133C 2ABC 4000 0080             		move.l	#$40000080,(a5)
00001342 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
0000134A                            
0000134A                            loc_128E:
0000134A 3215                       		move.w	(a5),d1
0000134C 0801 0001                  		btst	#1,d1
00001350 66F8                       		bne.s	loc_128E
00001352                            
00001352 3ABC 8F02                  		move.w	#$8F02,(a5)
00001356 221F                       		move.l	(sp)+,d1
00001358 4E75                       		rts	
0000135A                            ; End of function VDPSetupGame
0000135A                            
0000135A                            ; ===========================================================================
0000135A 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
00001362 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
0000136A 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
00001372 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
0000137A 9001 9100 9200             		dc.w $9001, $9100, $9200
00001380                            
00001380                            ; ---------------------------------------------------------------------------
00001380                            ; Subroutine to	clear the screen
00001380                            ; ---------------------------------------------------------------------------
00001380                            
00001380                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001380                            
00001380                            
00001380                            ClearScreen:
00001380 4BF9 00C0 0004             		lea	($C00004).l,a5
00001386 3ABC 8F01                  		move.w	#$8F01,(a5)
0000138A 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001390 3ABC 9780                  		move.w	#$9780,(a5)
00001394 2ABC 4000 0083             		move.l	#$40000083,(a5)
0000139A 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000013A2                            
000013A2                            loc_12E6:
000013A2 3215                       		move.w	(a5),d1
000013A4 0801 0001                  		btst	#1,d1
000013A8 66F8                       		bne.s	loc_12E6
000013AA                            
000013AA 3ABC 8F02                  		move.w	#$8F02,(a5)
000013AE 4BF9 00C0 0004             		lea	($C00004).l,a5
000013B4 3ABC 8F01                  		move.w	#$8F01,(a5)
000013B8 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000013BE 3ABC 9780                  		move.w	#$9780,(a5)
000013C2 2ABC 6000 0083             		move.l	#$60000083,(a5)
000013C8 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000013D0                            
000013D0                            loc_1314:
000013D0 3215                       		move.w	(a5),d1
000013D2 0801 0001                  		btst	#1,d1
000013D6 66F8                       		bne.s	loc_1314
000013D8                            
000013D8 3ABC 8F02                  		move.w	#$8F02,(a5)
000013DC 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
000013E4 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
000013EC 43F8 F800                  		lea	($FFFFF800).w,a1
000013F0 7000                       		moveq	#0,d0
000013F2 323C 00A0                  		move.w	#$A0,d1
000013F6                            
000013F6                            loc_133A:
000013F6 22C0                       		move.l	d0,(a1)+
000013F8 51C9 FFFC                  		dbf	d1,loc_133A
000013FC                            
000013FC 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001400 7000                       		moveq	#0,d0
00001402 323C 0100                  		move.w	#$100,d1
00001406                            
00001406                            loc_134A:
00001406 22C0                       		move.l	d0,(a1)+
00001408 51C9 FFFC                  		dbf	d1,loc_134A
0000140C 4E75                       		rts	
0000140E                            ; End of function ClearScreen
0000140E                            
0000140E                            ; ---------------------------------------------------------------------------
0000140E                            ; Subroutine to	load the sound driver
0000140E                            ; ---------------------------------------------------------------------------
0000140E                            
0000140E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000140E                            
0000140E                            
0000140E                            SoundDriverLoad:
0000140E 41F9 0000 0000             		lea	(Z80ROM).l,a0				; load Z80 ROM data
00001414 43F9 00A0 0000             		lea	($A00000).l,a1				; load Z80 RAM space address
0000141A 323C 0000                  		move.w	#(Z80ROM_End-Z80ROM)-$01,d1		; set repeat times
0000141E 33FC 0100 00A1 1100        		move.w	#$0100,($A11100).l			; request Z80 stop (ON)
00001426 33FC 0100 00A1 1200        		move.w	#$0100,($A11200).l			; request Z80 reset (OFF)
0000142E 0839 0000 00A1 1100        		btst.b	#$00,($A11100).l			; has the Z80 stopped yet?
00001436 66F6                       		bne.s	*-$08					; if not, branch
00001438                            
00001438                            SM_LoadZ80:
00001438 12D8                       		move.b	(a0)+,(a1)+				; dump Z80 data to Z80 space
0000143A 51C9 FFFC                  		dbf	d1,SM_LoadZ80				; repeat til done
0000143E 41F9 0000 0000             		lea	(StopSample).l,a0			; load stop/mute sample address
00001444 43F9 00A0 02EC             		lea	($A00000+MuteSample).l,a1		; load Z80 RAM space where the pointer is to be stored
0000144A 12D8                       		move.b	(a0)+,(a1)+				; copy pointer over into Z80
0000144C 12D8                       		move.b	(a0)+,(a1)+				; ''
0000144E 12D8                       		move.b	(a0)+,(a1)+				; ''
00001450 33FC 0000 00A1 1200        		move.w	#$0000,($A11200).l			; request Z80 reset (ON)
00001458 727F                       		moveq	#$7F,d1					; set repeat times
0000145A 51C9 FFFE                  		dbf	d1,*					; there's no way of checking for reset, so a manual delay is necessary
0000145E 33FC 0000 00A1 1100        		move.w	#$0000,($A11100).l			; request Z80 stop (OFF)
00001466 33FC 0100 00A1 1200        		move.w	#$0100,($A11200).l			; request Z80 reset (OFF)
0000146E 4E75                       		rts						; return
00001470                            
00001470                            ; ---------------------------------------------------------------------------
00001470                            ; Subroutine to	play a sound or	music track
00001470                            ; ---------------------------------------------------------------------------
00001470                            
00001470                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001470                            
00001470                            
00001470                            PlaySound:
00001470 11C0 F00A                  		move.b	d0,($FFFFF00A).w
00001474 4E75                       		rts	
00001476                            ; End of function PlaySound
00001476                            
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; Subroutine to	play a special sound/music (E0-E4)
00001476                            ;
00001476                            ; E0 - Fade out
00001476                            ; E1 - Sega
00001476                            ; E2 - Speed up
00001476                            ; E3 - Normal speed
00001476                            ; E4 - Stop
00001476                            ; ---------------------------------------------------------------------------
00001476                            
00001476                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001476                            
00001476                            
00001476                            PlaySound_Special:
00001476 11C0 F00B                  		move.b	d0,($FFFFF00B).w
0000147A 4E75                       		rts	
0000147C                            ; End of function PlaySound_Special
0000147C                            
0000147C                            ; ===========================================================================
0000147C                            ; ---------------------------------------------------------------------------
0000147C                            ; Unused sound/music subroutine
0000147C                            ; ---------------------------------------------------------------------------
0000147C                            
0000147C                            PlaySound_Unk:
0000147C 11C0 F00C                  		move.b	d0,($FFFFF00C).w
00001480 4E75                       		rts	
00001482                            
00001482                            ; ---------------------------------------------------------------------------
00001482                            ; Subroutine to	pause the game
00001482                            ; ---------------------------------------------------------------------------
00001482                            
00001482                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001482                            
00001482                            
00001482                            PauseGame:				; XREF: Level_MainLoop; et al
00001482 4E71                       		nop	
00001484 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
00001488 6700                       		beq.s	Unpause		; if not, branch
0000148A 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
0000148E 6600                       		bne.s	loc_13BE	; if yes, branch
00001490 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001496 6700                       		beq.s	Pause_DoNothing	; if not, branch
00001498                            
00001498                            loc_13BE:
00001498 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
0000149E 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000014A4                            
000014A4                            loc_13CA:
000014A4 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000014AA 6100 0000                  		bsr.w	DelayProgram
000014AE 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000014B2 6700                       		beq.s	Pause_ChkStart	; if not, branch
000014B4 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
000014BA 6700                       		beq.s	Pause_ChkBC	; if not, branch
000014BC 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
000014C2 4E71                       		nop	
000014C4 6000                       		bra.s	loc_1404
000014C6                            ; ===========================================================================
000014C6                            
000014C6                            Pause_ChkBC:				; XREF: PauseGame
000014C6 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
000014CC 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000014CE 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
000014D4 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000014D6                            
000014D6                            Pause_ChkStart:				; XREF: PauseGame
000014D6 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000014DC 67C6                       		beq.s	loc_13CA	; if not, branch
000014DE                            
000014DE                            loc_1404:				; XREF: PauseGame
000014DE 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
000014E4                            
000014E4                            Unpause:				; XREF: PauseGame
000014E4 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
000014EA                            
000014EA                            Pause_DoNothing:			; XREF: PauseGame
000014EA 4E75                       		rts	
000014EC                            ; ===========================================================================
000014EC                            
000014EC                            Pause_SlowMo:				; XREF: PauseGame
000014EC 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
000014F2 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
000014F8 4E75                       		rts	
000014FA                            ; End of function PauseGame
000014FA                            
000014FA                            ; ---------------------------------------------------------------------------
000014FA                            ; Subroutine to	display	patterns via the VDP
000014FA                            ; ---------------------------------------------------------------------------
000014FA                            
000014FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014FA                            
000014FA                            
000014FA                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
000014FA 4DF9 00C0 0000             		lea	($C00000).l,a6
00001500 283C 0080 0000             		move.l	#$800000,d4
00001506                            
00001506                            loc_142C:
00001506 2D40 0004                  		move.l	d0,4(a6)
0000150A 3601                       		move.w	d1,d3
0000150C                            
0000150C                            loc_1432:
0000150C 3C99                       		move.w	(a1)+,(a6)
0000150E 51CB FFFC                  		dbf	d3,loc_1432
00001512 D084                       		add.l	d4,d0
00001514 51CA FFF0                  		dbf	d2,loc_142C
00001518 4E75                       		rts	
0000151A                            ; End of function ShowVDPGraphics
0000151A                            
0000151A                            ; ---------------------------------------------------------------------------
0000151A                            ; Subroutine for queueing VDP commands (seems to only queue transfers to VRAM),
0000151A                            ; to be issued the next time ProcessDMAQueue is called.
0000151A                            ; Can be called a maximum of 18 times before the buffer needs to be cleared
0000151A                            ; by issuing the commands (this subroutine DOES check for overflow)
0000151A                            ; ---------------------------------------------------------------------------
0000151A                            ; In case you wish to use this queue system outside of the spin dash, this is the
0000151A                            ; registers in which it expects data in:
0000151A                            ; d1.l: Address to data (In 68k address space)
0000151A                            ; d2.w: Destination in VRAM
0000151A                            ; d3.w: Length of data
0000151A                            ; ---------------------------------------------------------------------------
0000151A                            
0000151A                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000151A                            
0000151A                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand: Add_To_DMA_Queue:
0000151A                            QueueDMATransfer:
0000151A 2278 C8FC                  		movea.l	($FFFFC8FC).w,a1
0000151E B2FC C8FC                  		cmpa.w	#$C8FC,a1
00001522 6700                       		beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
00001524                            
00001524                            		; piece together some VDP commands and store them for later...
00001524 303C 9300                  		move.w	#$9300,d0 ; command to specify DMA transfer length & $00FF
00001528 1003                       		move.b	d3,d0
0000152A 32C0                       		move.w	d0,(a1)+ ; store command
0000152C                            
0000152C 303C 9400                  		move.w	#$9400,d0 ; command to specify DMA transfer length & $FF00
00001530 E04B                       		lsr.w	#8,d3
00001532 1003                       		move.b	d3,d0
00001534 32C0                       		move.w	d0,(a1)+ ; store command
00001536                            
00001536 303C 9500                  		move.w	#$9500,d0 ; command to specify source address & $0001FE
0000153A E289                       		lsr.l	#1,d1
0000153C 1001                       		move.b	d1,d0
0000153E 32C0                       		move.w	d0,(a1)+ ; store command
00001540                            
00001540 303C 9600                  		move.w	#$9600,d0 ; command to specify source address & $01FE00
00001544 E089                       		lsr.l	#8,d1
00001546 1001                       		move.b	d1,d0
00001548 32C0                       		move.w	d0,(a1)+ ; store command
0000154A                            
0000154A 303C 9700                  		move.w	#$9700,d0 ; command to specify source address & $FE0000
0000154E E089                       		lsr.l	#8,d1
00001550 1001                       		move.b	d1,d0
00001552 32C0                       		move.w	d0,(a1)+ ; store command
00001554                            
00001554 0282 0000 FFFF             		andi.l	#$FFFF,d2 ; command to specify destination address and begin DMA
0000155A E58A                       		lsl.l	#2,d2
0000155C E44A                       		lsr.w	#2,d2
0000155E 4842                       		swap	d2
00001560 0082 4000 0080             		ori.l	#$40000080,d2 ; set bits to specify VRAM transfer
00001566 22C2                       		move.l	d2,(a1)+ ; store command
00001568                            
00001568 21C9 C8FC                  		move.l	a1,($FFFFC8FC).w ; set the next free slot address
0000156C B2FC C8FC                  		cmpa.w	#$C8FC,a1
00001570 6700                       		beq.s	QueueDMATransfer_Done ; return if there's no more room in the buffer
00001572 32BC 0000                  		move.w	#0,(a1) ; put a stop token at the end of the used part of the buffer
00001576                            ; return_14AA:
00001576                            QueueDMATransfer_Done:
00001576 4E75                       		rts
00001578                            ; End of function QueueDMATransfer
00001578                            
00001578                            
00001578                            ; ---------------------------------------------------------------------------
00001578                            ; Subroutine for issuing all VDP commands that were queued
00001578                            ; (by earlier calls to QueueDMATransfer)
00001578                            ; Resets the queue when it's done
00001578                            ; ---------------------------------------------------------------------------
00001578                            
00001578                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001578                            
00001578                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA: Process_DMA_Queue:
00001578                            ProcessDMAQueue:
00001578 4BF9 00C0 0004             		lea	($C00004).l,a5
0000157E 43F8 C800                  		lea	($FFFFC800).w,a1
00001582                            ; loc_14B6:
00001582                            ProcessDMAQueue_Loop:
00001582 3019                       		move.w	(a1)+,d0
00001584 6700                       		beq.s	ProcessDMAQueue_Done ; branch if we reached a stop token
00001586                            		; issue a set of VDP commands...
00001586 3A80                       		move.w	d0,(a5)		; transfer length
00001588 3A99                       		move.w	(a1)+,(a5)	; transfer length
0000158A 3A99                       		move.w	(a1)+,(a5)	; source address
0000158C 3A99                       		move.w	(a1)+,(a5)	; source address
0000158E 3A99                       		move.w	(a1)+,(a5)	; source address
00001590 3A99                       		move.w	(a1)+,(a5)	; destination
00001592 3A99                       		move.w	(a1)+,(a5)	; destination
00001594 B2FC C8FC                  		cmpa.w	#$C8FC,a1
00001598 66E8                       		bne.s	ProcessDMAQueue_Loop ; loop if we haven't reached the end of the buffer
0000159A                            ; loc_14CE:
0000159A                            ProcessDMAQueue_Done:
0000159A 31FC 0000 C800             		move.w	#0,($FFFFC800).w
000015A0 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
000015A8 4E75                       		rts
000015AA                            ; End of function ProcessDMAQueue
000015AA                            
000015AA                            ; ---------------------------------------------------------------------------
000015AA                            ; Nemesis decompression	algorithm
000015AA                            ; ---------------------------------------------------------------------------
000015AA                            
000015AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015AA                            
000015AA                            
000015AA                            NemDec:
000015AA 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
000015AE 47F9 0000 0000             		lea	(loc_1502).l,a3
000015B4 49F9 00C0 0000             		lea	($C00000).l,a4
000015BA 6000                       		bra.s	loc_145C
000015BC                            ; ===========================================================================
000015BC 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
000015C0 47F9 0000 0000             		lea	(loc_1518).l,a3
000015C6                            
000015C6                            loc_145C:				; XREF: NemDec
000015C6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000015CA 3418                       		move.w	(a0)+,d2
000015CC E34A                       		lsl.w	#1,d2
000015CE 6400                       		bcc.s	loc_146A
000015D0 D6FC 000A                  		adda.w	#$A,a3
000015D4                            
000015D4                            loc_146A:
000015D4 E54A                       		lsl.w	#2,d2
000015D6 3A42                       		movea.w	d2,a5
000015D8 7608                       		moveq	#8,d3
000015DA 7400                       		moveq	#0,d2
000015DC 7800                       		moveq	#0,d4
000015DE 6100 0000                  		bsr.w	NemDec4
000015E2 1A18                       		move.b	(a0)+,d5
000015E4 E145                       		asl.w	#8,d5
000015E6 1A18                       		move.b	(a0)+,d5
000015E8 3C3C 0010                  		move.w	#$10,d6
000015EC 6100                       		bsr.s	NemDec2
000015EE 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000015F2 4E75                       		rts	
000015F4                            ; End of function NemDec
000015F4                            
000015F4                            
000015F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015F4                            
000015F4                            
000015F4                            NemDec2:				; XREF: NemDec
000015F4 3E06                       		move.w	d6,d7
000015F6 5147                       		subq.w	#8,d7
000015F8 3205                       		move.w	d5,d1
000015FA EE69                       		lsr.w	d7,d1
000015FC 0C01 00FC                  		cmpi.b	#-4,d1
00001600 6400                       		bcc.s	loc_14D6
00001602 0241 00FF                  		andi.w	#$FF,d1
00001606 D241                       		add.w	d1,d1
00001608 1031 1000                  		move.b	(a1,d1.w),d0
0000160C 4880                       		ext.w	d0
0000160E 9C40                       		sub.w	d0,d6
00001610 0C46 0009                  		cmpi.w	#9,d6
00001614 6400                       		bcc.s	loc_14B2
00001616 5046                       		addq.w	#8,d6
00001618 E145                       		asl.w	#8,d5
0000161A 1A18                       		move.b	(a0)+,d5
0000161C                            
0000161C                            loc_14B2:
0000161C 1231 1001                  		move.b	1(a1,d1.w),d1
00001620 3001                       		move.w	d1,d0
00001622 0241 000F                  		andi.w	#$F,d1
00001626 0240 00F0                  		andi.w	#$F0,d0
0000162A                            
0000162A                            loc_14C0:				; XREF: NemDec3
0000162A E848                       		lsr.w	#4,d0
0000162C                            
0000162C                            loc_14C2:				; XREF: NemDec3
0000162C E98C                       		lsl.l	#4,d4
0000162E 8801                       		or.b	d1,d4
00001630 5343                       		subq.w	#1,d3
00001632 6600                       		bne.s	loc_14D0
00001634 4ED3                       		jmp	(a3)
00001636                            ; End of function NemDec2
00001636                            
00001636                            
00001636                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001636                            
00001636                            
00001636                            NemDec3:				; XREF: loc_1502
00001636 7800                       		moveq	#0,d4
00001638 7608                       		moveq	#8,d3
0000163A                            
0000163A                            loc_14D0:				; XREF: NemDec2
0000163A 51C8 FFF0                  		dbf	d0,loc_14C2
0000163E 60B4                       		bra.s	NemDec2
00001640                            ; ===========================================================================
00001640                            
00001640                            loc_14D6:				; XREF: NemDec2
00001640 5D46                       		subq.w	#6,d6
00001642 0C46 0009                  		cmpi.w	#9,d6
00001646 6400                       		bcc.s	loc_14E4
00001648 5046                       		addq.w	#8,d6
0000164A E145                       		asl.w	#8,d5
0000164C 1A18                       		move.b	(a0)+,d5
0000164E                            
0000164E                            loc_14E4:				; XREF: NemDec3
0000164E 5F46                       		subq.w	#7,d6
00001650 3205                       		move.w	d5,d1
00001652 EC69                       		lsr.w	d6,d1
00001654 3001                       		move.w	d1,d0
00001656 0241 000F                  		andi.w	#$F,d1
0000165A 0240 0070                  		andi.w	#$70,d0
0000165E 0C46 0009                  		cmpi.w	#9,d6
00001662 64C6                       		bcc.s	loc_14C0
00001664 5046                       		addq.w	#8,d6
00001666 E145                       		asl.w	#8,d5
00001668 1A18                       		move.b	(a0)+,d5
0000166A 60BE                       		bra.s	loc_14C0
0000166C                            ; End of function NemDec3
0000166C                            
0000166C                            ; ===========================================================================
0000166C                            
0000166C                            loc_1502:				; XREF: NemDec
0000166C 2884                       		move.l	d4,(a4)
0000166E 534D                       		subq.w	#1,a5
00001670 380D                       		move.w	a5,d4
00001672 66C2                       		bne.s	NemDec3
00001674 4E75                       		rts	
00001676                            ; ===========================================================================
00001676 B982                       		eor.l	d4,d2
00001678 2882                       		move.l	d2,(a4)
0000167A 534D                       		subq.w	#1,a5
0000167C 380D                       		move.w	a5,d4
0000167E 66B6                       		bne.s	NemDec3
00001680 4E75                       		rts	
00001682                            ; ===========================================================================
00001682                            
00001682                            loc_1518:				; XREF: NemDec
00001682 28C4                       		move.l	d4,(a4)+
00001684 534D                       		subq.w	#1,a5
00001686 380D                       		move.w	a5,d4
00001688 66AC                       		bne.s	NemDec3
0000168A 4E75                       		rts	
0000168C                            ; ===========================================================================
0000168C B982                       		eor.l	d4,d2
0000168E 28C2                       		move.l	d2,(a4)+
00001690 534D                       		subq.w	#1,a5
00001692 380D                       		move.w	a5,d4
00001694 66A0                       		bne.s	NemDec3
00001696 4E75                       		rts	
00001698                            
00001698                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001698                            
00001698                            
00001698                            NemDec4:				; XREF: NemDec
00001698 1018                       		move.b	(a0)+,d0
0000169A                            
0000169A                            loc_1530:
0000169A 0C00 00FF                  		cmpi.b	#-1,d0
0000169E 6600                       		bne.s	loc_1538
000016A0 4E75                       		rts	
000016A2                            ; ===========================================================================
000016A2                            
000016A2                            loc_1538:				; XREF: NemDec4
000016A2 3E00                       		move.w	d0,d7
000016A4                            
000016A4                            loc_153A:
000016A4 1018                       		move.b	(a0)+,d0
000016A6 0C00 0080                  		cmpi.b	#$80,d0
000016AA 64EE                       		bcc.s	loc_1530
000016AC 1200                       		move.b	d0,d1
000016AE 0247 000F                  		andi.w	#$F,d7
000016B2 0241 0070                  		andi.w	#$70,d1
000016B6 8E41                       		or.w	d1,d7
000016B8 0240 000F                  		andi.w	#$F,d0
000016BC 1200                       		move.b	d0,d1
000016BE E149                       		lsl.w	#8,d1
000016C0 8E41                       		or.w	d1,d7
000016C2 7208                       		moveq	#8,d1
000016C4 9240                       		sub.w	d0,d1
000016C6 6600                       		bne.s	loc_1568
000016C8 1018                       		move.b	(a0)+,d0
000016CA D040                       		add.w	d0,d0
000016CC 3387 0000                  		move.w	d7,(a1,d0.w)
000016D0 60D2                       		bra.s	loc_153A
000016D2                            ; ===========================================================================
000016D2                            
000016D2                            loc_1568:				; XREF: NemDec4
000016D2 1018                       		move.b	(a0)+,d0
000016D4 E368                       		lsl.w	d1,d0
000016D6 D040                       		add.w	d0,d0
000016D8 7A01                       		moveq	#1,d5
000016DA E36D                       		lsl.w	d1,d5
000016DC 5345                       		subq.w	#1,d5
000016DE                            
000016DE                            loc_1574:
000016DE 3387 0000                  		move.w	d7,(a1,d0.w)
000016E2 5440                       		addq.w	#2,d0
000016E4 51CD FFF8                  		dbf	d5,loc_1574
000016E8 60BA                       		bra.s	loc_153A
000016EA                            ; End of function NemDec4
000016EA                            
000016EA                            ; ---------------------------------------------------------------------------
000016EA                            ; Subroutine to	load pattern load cues
000016EA                            ; ---------------------------------------------------------------------------
000016EA                            
000016EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016EA                            
000016EA                            
000016EA                            LoadPLC:
000016EA 48E7 0060                  		movem.l	a1-a2,-(sp)
000016EE 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000016F4 D040                       		add.w	d0,d0
000016F6 3031 0000                  		move.w	(a1,d0.w),d0
000016FA 43F1 0000                  		lea	(a1,d0.w),a1
000016FE 45F8 F680                  		lea	($FFFFF680).w,a2
00001702                            
00001702                            loc_1598:
00001702 4A92                       		tst.l	(a2)
00001704 6700                       		beq.s	loc_15A0
00001706 5C4A                       		addq.w	#6,a2
00001708 60F8                       		bra.s	loc_1598
0000170A                            ; ===========================================================================
0000170A                            
0000170A                            loc_15A0:				; XREF: LoadPLC
0000170A 3019                       		move.w	(a1)+,d0
0000170C 6B00                       		bmi.s	loc_15AC
0000170E                            
0000170E                            loc_15A4:
0000170E 24D9                       		move.l	(a1)+,(a2)+
00001710 34D9                       		move.w	(a1)+,(a2)+
00001712 51C8 FFFA                  		dbf	d0,loc_15A4
00001716                            
00001716                            loc_15AC:
00001716 4CDF 0600                  		movem.l	(sp)+,a1-a2
0000171A 4E75                       		rts	
0000171C                            ; End of function LoadPLC
0000171C                            
0000171C                            
0000171C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000171C                            
0000171C                            
0000171C                            LoadPLC2:
0000171C 48E7 0060                  		movem.l	a1-a2,-(sp)
00001720 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001726 D040                       		add.w	d0,d0
00001728 3031 0000                  		move.w	(a1,d0.w),d0
0000172C 43F1 0000                  		lea	(a1,d0.w),a1
00001730 6100                       		bsr.s	ClearPLC
00001732 45F8 F680                  		lea	($FFFFF680).w,a2
00001736 3019                       		move.w	(a1)+,d0
00001738 6B00                       		bmi.s	loc_15D8
0000173A                            
0000173A                            loc_15D0:
0000173A 24D9                       		move.l	(a1)+,(a2)+
0000173C 34D9                       		move.w	(a1)+,(a2)+
0000173E 51C8 FFFA                  		dbf	d0,loc_15D0
00001742                            
00001742                            loc_15D8:
00001742 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001746 4E75                       		rts	
00001748                            ; End of function LoadPLC2
00001748                            
00001748                            ; ---------------------------------------------------------------------------
00001748                            ; Subroutine to	clear the pattern load cues
00001748                            ; ---------------------------------------------------------------------------
00001748                            
00001748                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001748                            
00001748                            
00001748                            ClearPLC:				; XREF: LoadPLC2
00001748 45F8 F680                  		lea	($FFFFF680).w,a2
0000174C 701F                       		moveq	#$1F,d0
0000174E                            
0000174E                            ClearPLC_Loop:
0000174E 429A                       		clr.l	(a2)+
00001750 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
00001754 4E75                       		rts	
00001756                            ; End of function ClearPLC
00001756                            
00001756                            ; ---------------------------------------------------------------------------
00001756                            ; Subroutine to	use graphics listed in a pattern load cue
00001756                            ; ---------------------------------------------------------------------------
00001756                            
00001756                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001756                            
00001756                            
00001756                            RunPLC_RAM:				; XREF: Pal_FadeTo
00001756 4AB8 F680                  		tst.l	($FFFFF680).w
0000175A 6700                       		beq.s	locret_1640
0000175C 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001760 6600                       		bne.s	locret_1640
00001762 2078 F680                  		movea.l	($FFFFF680).w,a0
00001766 47F9 0000 166C             		lea	(loc_1502).l,a3
0000176C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001770 3418                       		move.w	(a0)+,d2
00001772 6A00                       		bpl.s	loc_160E
00001774 D6FC 000A                  		adda.w	#$A,a3
00001778                            
00001778                            loc_160E:
00001778 0242 7FFF                  		andi.w	#$7FFF,d2
0000177C 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001780 6100 FF16                  		bsr.w	NemDec4
00001784 1A18                       		move.b	(a0)+,d5
00001786 E145                       		asl.w	#8,d5
00001788 1A18                       		move.b	(a0)+,d5
0000178A 7C10                       		moveq	#$10,d6
0000178C 7000                       		moveq	#0,d0
0000178E 21C8 F680                  		move.l	a0,($FFFFF680).w
00001792 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001796 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
0000179A 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
0000179E 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
000017A2 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000017A6 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000017AA                            
000017AA                            locret_1640:
000017AA 4E75                       		rts	
000017AC                            ; End of function RunPLC_RAM
000017AC                            
000017AC                            
000017AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017AC                            
000017AC                            
000017AC                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
000017AC 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000017B0 6700 0000                  		beq.w	locret_16DA
000017B4 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
000017BA 7000                       		moveq	#0,d0
000017BC 3038 F684                  		move.w	($FFFFF684).w,d0
000017C0 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
000017C6 6000                       		bra.s	loc_1676
000017C8                            ; End of function sub_1642
000017C8                            
000017C8                            
000017C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017C8                            
000017C8                            
000017C8                            sub_165E:				; XREF: Demo_Time
000017C8 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000017CC 6700                       		beq.s	locret_16DA
000017CE 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
000017D4 7000                       		moveq	#0,d0
000017D6 3038 F684                  		move.w	($FFFFF684).w,d0
000017DA 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
000017E0                            
000017E0                            loc_1676:				; XREF: sub_1642
000017E0 49F9 00C0 0004             		lea	($C00004).l,a4
000017E6 E588                       		lsl.l	#2,d0
000017E8 E448                       		lsr.w	#2,d0
000017EA 0040 4000                  		ori.w	#$4000,d0
000017EE 4840                       		swap	d0
000017F0 2880                       		move.l	d0,(a4)
000017F2 594C                       		subq.w	#4,a4
000017F4 2078 F680                  		movea.l	($FFFFF680).w,a0
000017F8 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000017FC 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001800 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00001804 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
00001808 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
0000180C 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
00001810 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001814                            
00001814                            loc_16AA:				; XREF: sub_165E
00001814 3A7C 0008                  		movea.w	#8,a5
00001818 6100 FE1C                  		bsr.w	NemDec3
0000181C 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
00001820 6700                       		beq.s	loc_16DC
00001822 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
00001826 66EC                       		bne.s	loc_16AA
00001828 21C8 F680                  		move.l	a0,($FFFFF680).w
0000182C 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001830 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001834 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00001838 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
0000183C 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001840 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001844                            
00001844                            locret_16DA:				; XREF: sub_1642
00001844 4E75                       		rts	
00001846                            ; ===========================================================================
00001846                            
00001846                            loc_16DC:				; XREF: sub_165E
00001846 41F8 F680                  		lea	($FFFFF680).w,a0
0000184A 7015                       		moveq	#$15,d0
0000184C                            
0000184C                            loc_16E2:				; XREF: sub_165E
0000184C 20E8 0006                  		move.l	6(a0),(a0)+
00001850 51C8 FFFA                  		dbf	d0,loc_16E2
00001854 4E75                       		rts	
00001856                            ; End of function sub_165E
00001856                            
00001856                            ; ---------------------------------------------------------------------------
00001856                            ; Subroutine to	execute	the pattern load cue
00001856                            ; ---------------------------------------------------------------------------
00001856                            
00001856                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001856                            
00001856                            
00001856                            RunPLC_ROM:
00001856 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
0000185C D040                       		add.w	d0,d0
0000185E 3031 0000                  		move.w	(a1,d0.w),d0
00001862 43F1 0000                  		lea	(a1,d0.w),a1
00001866 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00001868                            
00001868                            RunPLC_Loop:
00001868 2059                       		movea.l	(a1)+,a0	; get art pointer
0000186A 7000                       		moveq	#0,d0
0000186C 3019                       		move.w	(a1)+,d0	; get VRAM address
0000186E E588                       		lsl.l	#2,d0		; divide address by $20
00001870 E448                       		lsr.w	#2,d0
00001872 0040 4000                  		ori.w	#$4000,d0
00001876 4840                       		swap	d0
00001878 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
0000187E 6100 FD2A                  		bsr.w	NemDec		; decompress
00001882 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
00001886 4E75                       		rts	
00001888                            ; End of function RunPLC_ROM
00001888                            
00001888                            ; ---------------------------------------------------------------------------
00001888                            ; Enigma decompression algorithm
00001888                            ; ---------------------------------------------------------------------------
00001888                            
00001888                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001888                            
00001888                            
00001888                            EniDec:
00001888 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
0000188C 3640                       		movea.w	d0,a3
0000188E 1018                       		move.b	(a0)+,d0
00001890 4880                       		ext.w	d0
00001892 3A40                       		movea.w	d0,a5
00001894 1818                       		move.b	(a0)+,d4
00001896 E70C                       		lsl.b	#3,d4
00001898 3458                       		movea.w	(a0)+,a2
0000189A D4CB                       		adda.w	a3,a2
0000189C 3858                       		movea.w	(a0)+,a4
0000189E D8CB                       		adda.w	a3,a4
000018A0 1A18                       		move.b	(a0)+,d5
000018A2 E145                       		asl.w	#8,d5
000018A4 1A18                       		move.b	(a0)+,d5
000018A6 7C10                       		moveq	#$10,d6
000018A8                            
000018A8                            loc_173E:				; XREF: loc_1768
000018A8 7007                       		moveq	#7,d0
000018AA 3E06                       		move.w	d6,d7
000018AC 9E40                       		sub.w	d0,d7
000018AE 3205                       		move.w	d5,d1
000018B0 EE69                       		lsr.w	d7,d1
000018B2 0241 007F                  		andi.w	#$7F,d1
000018B6 3401                       		move.w	d1,d2
000018B8 0C41 0040                  		cmpi.w	#$40,d1
000018BC 6400                       		bcc.s	loc_1758
000018BE 7006                       		moveq	#6,d0
000018C0 E24A                       		lsr.w	#1,d2
000018C2                            
000018C2                            loc_1758:
000018C2 6100 0000                  		bsr.w	sub_188C
000018C6 0242 000F                  		andi.w	#$F,d2
000018CA E849                       		lsr.w	#4,d1
000018CC D241                       		add.w	d1,d1
000018CE 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
000018D2                            ; End of function EniDec
000018D2                            
000018D2                            ; ===========================================================================
000018D2                            
000018D2                            loc_1768:				; XREF: loc_17B4
000018D2 32CA                       		move.w	a2,(a1)+
000018D4 524A                       		addq.w	#1,a2
000018D6 51CA FFFA                  		dbf	d2,loc_1768
000018DA 60CC                       		bra.s	loc_173E
000018DC                            ; ===========================================================================
000018DC                            
000018DC                            loc_1772:				; XREF: loc_17B4
000018DC 32CC                       		move.w	a4,(a1)+
000018DE 51CA FFFC                  		dbf	d2,loc_1772
000018E2 60C4                       		bra.s	loc_173E
000018E4                            ; ===========================================================================
000018E4                            
000018E4                            loc_177A:				; XREF: loc_17B4
000018E4 6100 0000                  		bsr.w	loc_17DC
000018E8                            
000018E8                            loc_177E:
000018E8 32C1                       		move.w	d1,(a1)+
000018EA 51CA FFFC                  		dbf	d2,loc_177E
000018EE 60B8                       		bra.s	loc_173E
000018F0                            ; ===========================================================================
000018F0                            
000018F0                            loc_1786:				; XREF: loc_17B4
000018F0 6100 0000                  		bsr.w	loc_17DC
000018F4                            
000018F4                            loc_178A:
000018F4 32C1                       		move.w	d1,(a1)+
000018F6 5241                       		addq.w	#1,d1
000018F8 51CA FFFA                  		dbf	d2,loc_178A
000018FC 60AA                       		bra.s	loc_173E
000018FE                            ; ===========================================================================
000018FE                            
000018FE                            loc_1794:				; XREF: loc_17B4
000018FE 6100 0000                  		bsr.w	loc_17DC
00001902                            
00001902                            loc_1798:
00001902 32C1                       		move.w	d1,(a1)+
00001904 5341                       		subq.w	#1,d1
00001906 51CA FFFA                  		dbf	d2,loc_1798
0000190A 609C                       		bra.s	loc_173E
0000190C                            ; ===========================================================================
0000190C                            
0000190C                            loc_17A2:				; XREF: loc_17B4
0000190C 0C42 000F                  		cmpi.w	#$F,d2
00001910 6700                       		beq.s	loc_17C4
00001912                            
00001912                            loc_17A8:
00001912 6100 0000                  		bsr.w	loc_17DC
00001916 32C1                       		move.w	d1,(a1)+
00001918 51CA FFF8                  		dbf	d2,loc_17A8
0000191C 608A                       		bra.s	loc_173E
0000191E                            ; ===========================================================================
0000191E                            
0000191E                            loc_17B4:				; XREF: EniDec
0000191E 60B2                       		bra.s	loc_1768
00001920                            ; ===========================================================================
00001920 60B0                       		bra.s	loc_1768
00001922                            ; ===========================================================================
00001922 60B8                       		bra.s	loc_1772
00001924                            ; ===========================================================================
00001924 60B6                       		bra.s	loc_1772
00001926                            ; ===========================================================================
00001926 60BC                       		bra.s	loc_177A
00001928                            ; ===========================================================================
00001928 60C6                       		bra.s	loc_1786
0000192A                            ; ===========================================================================
0000192A 60D2                       		bra.s	loc_1794
0000192C                            ; ===========================================================================
0000192C 60DE                       		bra.s	loc_17A2
0000192E                            ; ===========================================================================
0000192E                            
0000192E                            loc_17C4:				; XREF: loc_17A2
0000192E 5348                       		subq.w	#1,a0
00001930 0C46 0010                  		cmpi.w	#$10,d6
00001934 6600                       		bne.s	loc_17CE
00001936 5348                       		subq.w	#1,a0
00001938                            
00001938                            loc_17CE:
00001938 3008                       		move.w	a0,d0
0000193A E248                       		lsr.w	#1,d0
0000193C 6400                       		bcc.s	loc_17D6
0000193E 5248                       		addq.w	#1,a0
00001940                            
00001940                            loc_17D6:
00001940 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
00001944 4E75                       		rts	
00001946                            ; ===========================================================================
00001946                            
00001946                            loc_17DC:				; XREF: loc_17A2
00001946 360B                       		move.w	a3,d3
00001948 1204                       		move.b	d4,d1
0000194A D201                       		add.b	d1,d1
0000194C 6400                       		bcc.s	loc_17EE
0000194E 5346                       		subq.w	#1,d6
00001950 0D05                       		btst	d6,d5
00001952 6700                       		beq.s	loc_17EE
00001954 0043 8000                  		ori.w	#-$8000,d3
00001958                            
00001958                            loc_17EE:
00001958 D201                       		add.b	d1,d1
0000195A 6400                       		bcc.s	loc_17FC
0000195C 5346                       		subq.w	#1,d6
0000195E 0D05                       		btst	d6,d5
00001960 6700                       		beq.s	loc_17FC
00001962 0643 4000                  		addi.w	#$4000,d3
00001966                            
00001966                            loc_17FC:
00001966 D201                       		add.b	d1,d1
00001968 6400                       		bcc.s	loc_180A
0000196A 5346                       		subq.w	#1,d6
0000196C 0D05                       		btst	d6,d5
0000196E 6700                       		beq.s	loc_180A
00001970 0643 2000                  		addi.w	#$2000,d3
00001974                            
00001974                            loc_180A:
00001974 D201                       		add.b	d1,d1
00001976 6400                       		bcc.s	loc_1818
00001978 5346                       		subq.w	#1,d6
0000197A 0D05                       		btst	d6,d5
0000197C 6700                       		beq.s	loc_1818
0000197E 0043 1000                  		ori.w	#$1000,d3
00001982                            
00001982                            loc_1818:
00001982 D201                       		add.b	d1,d1
00001984 6400                       		bcc.s	loc_1826
00001986 5346                       		subq.w	#1,d6
00001988 0D05                       		btst	d6,d5
0000198A 6700                       		beq.s	loc_1826
0000198C 0043 0800                  		ori.w	#$800,d3
00001990                            
00001990                            loc_1826:
00001990 3205                       		move.w	d5,d1
00001992 3E06                       		move.w	d6,d7
00001994 9E4D                       		sub.w	a5,d7
00001996 6400                       		bcc.s	loc_1856
00001998 3C07                       		move.w	d7,d6
0000199A 0646 0010                  		addi.w	#$10,d6
0000199E 4447                       		neg.w	d7
000019A0 EF69                       		lsl.w	d7,d1
000019A2 1A10                       		move.b	(a0),d5
000019A4 EF3D                       		rol.b	d7,d5
000019A6 DE47                       		add.w	d7,d7
000019A8 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
000019AC D245                       		add.w	d5,d1
000019AE                            
000019AE                            loc_1844:				; XREF: loc_1868
000019AE 300D                       		move.w	a5,d0
000019B0 D040                       		add.w	d0,d0
000019B2 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
000019B6 D243                       		add.w	d3,d1
000019B8 1A18                       		move.b	(a0)+,d5
000019BA E14D                       		lsl.w	#8,d5
000019BC 1A18                       		move.b	(a0)+,d5
000019BE 4E75                       		rts	
000019C0                            ; ===========================================================================
000019C0                            
000019C0                            loc_1856:				; XREF: loc_1826
000019C0 6700                       		beq.s	loc_1868
000019C2 EE69                       		lsr.w	d7,d1
000019C4 300D                       		move.w	a5,d0
000019C6 D040                       		add.w	d0,d0
000019C8 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
000019CC D243                       		add.w	d3,d1
000019CE 300D                       		move.w	a5,d0
000019D0 6000                       		bra.s	sub_188C
000019D2                            ; ===========================================================================
000019D2                            
000019D2                            loc_1868:				; XREF: loc_1856
000019D2 7C10                       		moveq	#$10,d6
000019D4                            
000019D4                            loc_186A:
000019D4 60D8                       		bra.s	loc_1844
000019D6                            ; ===========================================================================
000019D6 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
000019EC 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
000019F6                            
000019F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000019F6                            
000019F6                            
000019F6                            sub_188C:				; XREF: EniDec
000019F6 9C40                       		sub.w	d0,d6
000019F8 0C46 0009                  		cmpi.w	#9,d6
000019FC 6400                       		bcc.s	locret_189A
000019FE 5046                       		addq.w	#8,d6
00001A00 E145                       		asl.w	#8,d5
00001A02 1A18                       		move.b	(a0)+,d5
00001A04                            
00001A04                            locret_189A:
00001A04 4E75                       		rts	
00001A06                            ; End of function sub_188C
00001A06                            
00001A06                            ; ---------------------------------------------------------------------------
00001A06                            ; Kosinski decompression algorithm
00001A06                            ; ---------------------------------------------------------------------------
00001A06                            
00001A06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A06                            
00001A06                            
00001A06                            KosDec:
00001A06                            
00001A06 =FFFFFFFE                  var_2		= -2
00001A06 =FFFFFFFF                  var_1		= -1
00001A06                            
00001A06 558F                       		subq.l	#2,sp
00001A08 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001A0C 1E98                       		move.b	(a0)+,(sp)
00001A0E 3A17                       		move.w	(sp),d5
00001A10 780F                       		moveq	#$F,d4
00001A12                            
00001A12                            loc_18A8:
00001A12 E24D                       		lsr.w	#1,d5
00001A14 40C6                       		move	sr,d6
00001A16 51CC 0000                  		dbf	d4,loc_18BA
00001A1A 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001A1E 1E98                       		move.b	(a0)+,(sp)
00001A20 3A17                       		move.w	(sp),d5
00001A22 780F                       		moveq	#$F,d4
00001A24                            
00001A24                            loc_18BA:
00001A24 44C6                       		move	d6,ccr
00001A26 6400                       		bcc.s	loc_18C2
00001A28 12D8                       		move.b	(a0)+,(a1)+
00001A2A 60E6                       		bra.s	loc_18A8
00001A2C                            ; ===========================================================================
00001A2C                            
00001A2C                            loc_18C2:				; XREF: KosDec
00001A2C 7600                       		moveq	#0,d3
00001A2E E24D                       		lsr.w	#1,d5
00001A30 40C6                       		move	sr,d6
00001A32 51CC 0000                  		dbf	d4,loc_18D6
00001A36 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001A3A 1E98                       		move.b	(a0)+,(sp)
00001A3C 3A17                       		move.w	(sp),d5
00001A3E 780F                       		moveq	#$F,d4
00001A40                            
00001A40                            loc_18D6:
00001A40 44C6                       		move	d6,ccr
00001A42 6500                       		bcs.s	loc_1906
00001A44 E24D                       		lsr.w	#1,d5
00001A46 51CC 0000                  		dbf	d4,loc_18EA
00001A4A 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001A4E 1E98                       		move.b	(a0)+,(sp)
00001A50 3A17                       		move.w	(sp),d5
00001A52 780F                       		moveq	#$F,d4
00001A54                            
00001A54                            loc_18EA:
00001A54 E353                       		roxl.w	#1,d3
00001A56 E24D                       		lsr.w	#1,d5
00001A58 51CC 0000                  		dbf	d4,loc_18FC
00001A5C 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001A60 1E98                       		move.b	(a0)+,(sp)
00001A62 3A17                       		move.w	(sp),d5
00001A64 780F                       		moveq	#$F,d4
00001A66                            
00001A66                            loc_18FC:
00001A66 E353                       		roxl.w	#1,d3
00001A68 5243                       		addq.w	#1,d3
00001A6A 74FF                       		moveq	#-1,d2
00001A6C 1418                       		move.b	(a0)+,d2
00001A6E 6000                       		bra.s	loc_191C
00001A70                            ; ===========================================================================
00001A70                            
00001A70                            loc_1906:				; XREF: loc_18C2
00001A70 1018                       		move.b	(a0)+,d0
00001A72 1218                       		move.b	(a0)+,d1
00001A74 74FF                       		moveq	#-1,d2
00001A76 1401                       		move.b	d1,d2
00001A78 EB4A                       		lsl.w	#5,d2
00001A7A 1400                       		move.b	d0,d2
00001A7C 0241 0007                  		andi.w	#7,d1
00001A80 6700                       		beq.s	loc_1928
00001A82 1601                       		move.b	d1,d3
00001A84 5243                       		addq.w	#1,d3
00001A86                            
00001A86                            loc_191C:
00001A86 1031 2000                  		move.b	(a1,d2.w),d0
00001A8A 12C0                       		move.b	d0,(a1)+
00001A8C 51CB FFF8                  		dbf	d3,loc_191C
00001A90 6080                       		bra.s	loc_18A8
00001A92                            ; ===========================================================================
00001A92                            
00001A92                            loc_1928:				; XREF: loc_1906
00001A92 1218                       		move.b	(a0)+,d1
00001A94 6700                       		beq.s	loc_1938
00001A96 0C01 0001                  		cmpi.b	#1,d1
00001A9A 6700 FF76                  		beq.w	loc_18A8
00001A9E 1601                       		move.b	d1,d3
00001AA0 60E4                       		bra.s	loc_191C
00001AA2                            ; ===========================================================================
00001AA2                            
00001AA2                            loc_1938:				; XREF: loc_1928
00001AA2 548F                       		addq.l	#2,sp
00001AA4 4E75                       		rts	
00001AA6                            ; End of function KosDec
00001AA6                            
00001AA6                            ; ---------------------------------------------------------------------------
00001AA6                            ; Pallet cycling routine loading subroutine
00001AA6                            ; ---------------------------------------------------------------------------
00001AA6                            
00001AA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AA6                            
00001AA6                            
00001AA6                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001AA6 4EB9 0000 0000                 	jsr    PalCycle_SuperSonic
00001AAC 7400                       		moveq	#0,d2
00001AAE 7000                       		moveq	#0,d0
00001AB0 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001AB4 D040                       		add.w	d0,d0		; multiply by 2
00001AB6 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001ABA 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001ABE                            ; End of function PalCycle_Load
00001ABE                            
00001ABE                            ; ===========================================================================
00001ABE                            ; ---------------------------------------------------------------------------
00001ABE                            ; Pallet cycling routines
00001ABE                            ; ---------------------------------------------------------------------------
00001ABE 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001AC0 0000                       		dc.w PalCycle_LZ-PalCycle
00001AC2 0000                       		dc.w PalCycle_MZ-PalCycle
00001AC4 0000                       		dc.w PalCycle_SLZ-PalCycle
00001AC6 0000                       		dc.w PalCycle_SYZ-PalCycle
00001AC8 0000                       		dc.w PalCycle_SBZ-PalCycle
00001ACA 0000                       		dc.w PalCycle_GHZ-PalCycle
00001ACC                            
00001ACC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ACC                            
00001ACC                            
00001ACC                            PalCycle_Title:				; XREF: TitleScreen
00001ACC 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001AD2 6000                       		bra.s	loc_196A
00001AD4                            ; ===========================================================================
00001AD4                            
00001AD4                            PalCycle_GHZ:				; XREF: PalCycle
00001AD4 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001ADA                            
00001ADA                            loc_196A:				; XREF: PalCycle_Title
00001ADA 5378 F634                  		subq.w	#1,($FFFFF634).w
00001ADE 6A00                       		bpl.s	locret_1990
00001AE0 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001AE6 3038 F632                  		move.w	($FFFFF632).w,d0
00001AEA 5278 F632                  		addq.w	#1,($FFFFF632).w
00001AEE 0240 0003                  		andi.w	#3,d0
00001AF2 E748                       		lsl.w	#3,d0
00001AF4 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001AF8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001AFC 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B00                            
00001B00                            locret_1990:
00001B00 4E75                       		rts	
00001B02                            ; End of function PalCycle_Title
00001B02                            
00001B02                            
00001B02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B02                            
00001B02                            
00001B02                            PalCycle_LZ:				; XREF: PalCycle
00001B02 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B06 6A00                       		bpl.s	loc_19D8
00001B08 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001B0E 3038 F632                  		move.w	($FFFFF632).w,d0
00001B12 5278 F632                  		addq.w	#1,($FFFFF632).w
00001B16 0240 0003                  		andi.w	#3,d0
00001B1A E748                       		lsl.w	#3,d0
00001B1C 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001B22 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001B28 6600                       		bne.s	loc_19C0
00001B2A 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001B30                            
00001B30                            loc_19C0:
00001B30 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001B34 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B38 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B3C 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001B40 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B44 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B48                            
00001B48                            loc_19D8:
00001B48 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001B4C 0240 0007                  		andi.w	#7,d0
00001B50 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001B54 6700                       		beq.s	locret_1A3A
00001B56 7201                       		moveq	#1,d1
00001B58 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001B5C 6700                       		beq.s	loc_19F0
00001B5E 4441                       		neg.w	d1
00001B60                            
00001B60                            loc_19F0:
00001B60 3038 F650                  		move.w	($FFFFF650).w,d0
00001B64 0240 0003                  		andi.w	#3,d0
00001B68 D041                       		add.w	d1,d0
00001B6A 0C40 0003                  		cmpi.w	#3,d0
00001B6E 6500                       		bcs.s	loc_1A0A
00001B70 3200                       		move.w	d0,d1
00001B72 7000                       		moveq	#0,d0
00001B74 4A41                       		tst.w	d1
00001B76 6A00                       		bpl.s	loc_1A0A
00001B78 7002                       		moveq	#2,d0
00001B7A                            
00001B7A                            loc_1A0A:
00001B7A 31C0 F650                  		move.w	d0,($FFFFF650).w
00001B7E D040                       		add.w	d0,d0
00001B80 3200                       		move.w	d0,d1
00001B82 D040                       		add.w	d0,d0
00001B84 D041                       		add.w	d1,d0
00001B86 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001B8C 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001B90 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B94 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001B98 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001B9E 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001BA2 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BA6 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001BAA                            
00001BAA                            locret_1A3A:
00001BAA 4E75                       		rts	
00001BAC                            ; End of function PalCycle_LZ
00001BAC                            
00001BAC                            ; ===========================================================================
00001BAC 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001BB4                            ; ===========================================================================
00001BB4                            
00001BB4                            PalCycle_MZ:				; XREF: PalCycle
00001BB4 4E75                       		rts	
00001BB6                            
00001BB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BB6                            
00001BB6                            
00001BB6                            PalCycle_SLZ:				; XREF: PalCycle
00001BB6 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BBA 6A00                       		bpl.s	locret_1A80
00001BBC 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001BC2 3038 F632                  		move.w	($FFFFF632).w,d0
00001BC6 5240                       		addq.w	#1,d0
00001BC8 0C40 0006                  		cmpi.w	#6,d0
00001BCC 6500                       		bcs.s	loc_1A60
00001BCE 7000                       		moveq	#0,d0
00001BD0                            
00001BD0                            loc_1A60:
00001BD0 31C0 F632                  		move.w	d0,($FFFFF632).w
00001BD4 3200                       		move.w	d0,d1
00001BD6 D241                       		add.w	d1,d1
00001BD8 D041                       		add.w	d1,d0
00001BDA D040                       		add.w	d0,d0
00001BDC 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001BE2 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BE6 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001BEA 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001BF0                            
00001BF0                            locret_1A80:
00001BF0 4E75                       		rts	
00001BF2                            ; End of function PalCycle_SLZ
00001BF2                            
00001BF2                            
00001BF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BF2                            
00001BF2                            
00001BF2                            PalCycle_SYZ:				; XREF: PalCycle
00001BF2 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BF6 6A00                       		bpl.s	locret_1AC6
00001BF8 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001BFE 3038 F632                  		move.w	($FFFFF632).w,d0
00001C02 5278 F632                  		addq.w	#1,($FFFFF632).w
00001C06 0240 0003                  		andi.w	#3,d0
00001C0A E548                       		lsl.w	#2,d0
00001C0C 3200                       		move.w	d0,d1
00001C0E D040                       		add.w	d0,d0
00001C10 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001C16 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001C1A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C1E 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C22 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001C28 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C2C 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001C30 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001C36                            
00001C36                            locret_1AC6:
00001C36 4E75                       		rts	
00001C38                            ; End of function PalCycle_SYZ
00001C38                            
00001C38                            
00001C38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C38                            
00001C38                            
00001C38                            PalCycle_SBZ:				; XREF: PalCycle
00001C38 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001C3E 4A38 FE11                  		tst.b	($FFFFFE11).w
00001C42 6700                       		beq.s	loc_1ADA
00001C44 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001C4A                            
00001C4A                            loc_1ADA:
00001C4A 43F8 F650                  		lea	($FFFFF650).w,a1
00001C4E 321A                       		move.w	(a2)+,d1
00001C50                            
00001C50                            loc_1AE0:
00001C50 5311                       		subq.b	#1,(a1)
00001C52 6B00                       		bmi.s	loc_1AEA
00001C54 5489                       		addq.l	#2,a1
00001C56 5C8A                       		addq.l	#6,a2
00001C58 6000                       		bra.s	loc_1B06
00001C5A                            ; ===========================================================================
00001C5A                            
00001C5A                            loc_1AEA:				; XREF: PalCycle_SBZ
00001C5A 12DA                       		move.b	(a2)+,(a1)+
00001C5C 1011                       		move.b	(a1),d0
00001C5E 5200                       		addq.b	#1,d0
00001C60 B01A                       		cmp.b	(a2)+,d0
00001C62 6500                       		bcs.s	loc_1AF6
00001C64 7000                       		moveq	#0,d0
00001C66                            
00001C66                            loc_1AF6:
00001C66 12C0                       		move.b	d0,(a1)+
00001C68 0240 000F                  		andi.w	#$F,d0
00001C6C D040                       		add.w	d0,d0
00001C6E 305A                       		movea.w	(a2)+,a0
00001C70 365A                       		movea.w	(a2)+,a3
00001C72 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001C76                            
00001C76                            loc_1B06:				; XREF: PalCycle_SBZ
00001C76 51C9 FFD8                  		dbf	d1,loc_1AE0
00001C7A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C7E 6A00                       		bpl.s	locret_1B64
00001C80 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001C86 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001C8C 4A38 FE11                  		tst.b	($FFFFFE11).w
00001C90 6700                       		beq.s	loc_1B2E
00001C92 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001C98 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001C9E                            
00001C9E                            loc_1B2E:
00001C9E 72FF                       		moveq	#-1,d1
00001CA0 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001CA4 6700                       		beq.s	loc_1B38
00001CA6 4441                       		neg.w	d1
00001CA8                            
00001CA8                            loc_1B38:
00001CA8 3038 F632                  		move.w	($FFFFF632).w,d0
00001CAC 0240 0003                  		andi.w	#3,d0
00001CB0 D041                       		add.w	d1,d0
00001CB2 0C40 0003                  		cmpi.w	#3,d0
00001CB6 6500                       		bcs.s	loc_1B52
00001CB8 3200                       		move.w	d0,d1
00001CBA 7000                       		moveq	#0,d0
00001CBC 4A41                       		tst.w	d1
00001CBE 6A00                       		bpl.s	loc_1B52
00001CC0 7002                       		moveq	#2,d0
00001CC2                            
00001CC2                            loc_1B52:
00001CC2 31C0 F632                  		move.w	d0,($FFFFF632).w
00001CC6 D040                       		add.w	d0,d0
00001CC8 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001CCC 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001CD0 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001CD4                            
00001CD4                            locret_1B64:
00001CD4 4E75                       		rts	
00001CD6                            ; End of function PalCycle_SBZ
00001CD6                            
00001CD6 =FFFFFFC4                  Palette_frame equ   $FFFFFFC4   ; < free RAM word (make sure its even or youll get errors!!!!)
00001CD6 =FFFFF65F                  Super_Sonic_palette equ $FFFFF65F    ; < free RAM byte
00001CD6 =FFFFF65C                  Palette_timer equ $FFFFF65C  ; < free RAM byte
00001CD6                            
00001CD6                            PalCycle_SuperSonic:
00001CD6 1038 F65F                          move.b    ($FFFFF65F).w,d0
00001CDA 6700                               beq.s    return_2186
00001CDC 6B00 0000                          bmi.w    loc_21E6
00001CE0 5300                               subq.b    #1,d0
00001CE2 6600                               bne.s    loc_2188
00001CE4 5338 F65E                          subq.b    #1,($FFFFF65E).w
00001CE8 6A00                               bpl.s    return_2186
00001CEA 11FC 0003 F65E                     move.b    #3,($FFFFF65E).w
00001CF0 41F9 0000 0000                     lea    (Pal_2246).l,a0
00001CF6 3038 F65C                          move.w    ($FFFFF65C).w,d0
00001CFA 5C78 F65C                          addq.w    #6,($FFFFF65C).w ; was 8
00001CFE 0C78 0030 F65C                     cmpi.w    #$30,($FFFFF65C).w
00001D04 6500                               bcs.s    PalCycleSS_1
00001D06 11FC 00FF F65F                     move.b    #-1,($FFFFF65F).w
00001D0C 11FC 0000 F7F2                     move.b    #0,($FFFFF7C8+$2A).w
00001D12                            
00001D12                            PalCycleSS_1:
00001D12 43F8 FB04                          lea    ($FFFFFB04).w,a1 ; 04
00001D16 22F0 0000                          move.l    (a0,d0.w),(a1)+ ; there was +
00001D1A 22B0 0004                          move.l    4(a0,d0.w),(a1)
00001D1E                            
00001D1E                            return_2186:
00001D1E 4E75                               rts
00001D20                            ; ===========================================================================
00001D20                            
00001D20                            loc_2188:
00001D20 5338 F65E                          subq.b    #1,($FFFFF65E).w
00001D24 6AF8                               bpl.s    return_2186
00001D26 11FC 0003 F65E                     move.b    #3,($FFFFF65E).w
00001D2C 41F9 0000 0000                     lea    (Pal_2246).l,a0
00001D32 3038 F65C                          move.w    ($FFFFF65C).w,d0
00001D36 5D78 F65C                          subq.w    #$6,($FFFFF65C).w ; it was 8
00001D3A 6400                               bcc.s     loc_21B0
00001D3C 11FC 0000 F65C                     move.b    #0,($FFFFF65C).w
00001D42 11FC 0000 F65F                     move.b    #0,($FFFFF65F).w
00001D48 4278 FB02                          clr.w 	  ($FFFFFB02).w
00001D4C 4278 FB04                          clr.w 	  ($FFFFFB04).w
00001D50 4E75                               rts
00001D52                            
00001D52                            loc_21B0:
00001D52 43F8 FB04                          lea    ($FFFFFB04).w,a1
00001D56 22F0 0000                          move.l    (a0,d0.w),(a1)+ ; there was +
00001D5A 22B0 0004                          move.l    4(a0,d0.w),(a1)
00001D5E 0C38 0001 FE10                     cmpi.b    #$1,($FFFFFE10).w
00001D64 6700                               beq.s    PalCycleSS_2
00001D66 4E75                               rts
00001D68                            ; ===========================================================================
00001D68                            
00001D68                            PalCycleSS_2:
00001D68 43F8 F084                          lea    ($FFFFF084).w,a1
00001D6C 22F0 0000                          move.l    (a0,d0.w),(a1)+
00001D70 22B0 0004                          move.l    4(a0,d0.w),(a1)
00001D74 4E75                               rts
00001D76                            ; ===========================================================================
00001D76                            
00001D76                            loc_21E6:
00001D76 5338 F65E                          subq.b    #1,($FFFFF65E).w
00001D7A 6AA2                               bpl.s    return_2186
00001D7C 11FC 0007 F65E                     move.b    #7,($FFFFF65E).w
00001D82 41F9 0000 0000                     lea    (Pal_2246).l,a0
00001D88 3038 F65C                          move.w    ($FFFFF65C).w,d0
00001D8C 5078 F65C                          addq.w    #8,($FFFFF65C).w ; it was 8
00001D90 0C78 0078 F65C                     cmpi.w    #$78,($FFFFF65C).w
00001D96 6500                               bcs.s    PalCycleSS_3
00001D98 31FC 0030 F65C                     move.w    #$30,($FFFFF65C).w
00001D9E                            
00001D9E                            PalCycleSS_3:
00001D9E 43F8 FB04                          lea    ($FFFFFB04).w,a1
00001DA2 22F0 0000                          move.l    (a0,d0.w),(a1)+ ; there was +
00001DA6 22B0 0004                          move.l    4(a0,d0.w),(a1)
00001DAA                            ;		cmpi.b  #$02,($FFFFFFBB).w ; is it Shadow?
00001DAA                            ;		beq.s   PalCycle_SSEnd ; if not, branch
00001DAA                            ;        lea    ($FFFFFB02).w,a1 ; it was 04
00001DAA                            ;        move.w    (a0,d0.w),(a1) ; there was +
00001DAA                            ;        move.w    4(a0,d0.w),(a1)
00001DAA 0C38 0001 FE10                     cmpi.b    #$1,($FFFFFE10).w
00001DB0 6700                               beq.s    PalCycleSS_4
00001DB2 4E75                               rts
00001DB4                            ; ===========================================================================
00001DB4                            PalCycleSS_4:
00001DB4 43F8 F084                          lea    ($FFFFF084).w,a1
00001DB8 22F0 0000                          move.l    (a0,d0.w),(a1)+
00001DBC 22B0 0004                          move.l    4(a0,d0.w),(a1)
00001DC0 4E75                               rts
00001DC2                            
00001DC2                            PalCycle_SSEnd:
00001DC2 4E75                       		rts
00001DC4                            ; End of function PalCycle_SuperSonic
00001DC4                            
00001DC4                            ; ===========================================================================
00001DC4                            ;----------------------------------------------------------------------------
00001DC4                            ;Palette for transformation to Super Sonic
00001DC4                            ;----------------------------------------------------------------------------
00001DC4                            Pal_2246:
00001DC4                            	incbin  "pallet/SuperSonic.bin"
00001E44                                even
00001E44                            ;----------------------------------------------------------------------------
00001E44                            ;Palette for transformation to Super Sonic while underwater in CPZ
00001E44                            ;----------------------------------------------------------------------------
00001E44                            ; Pal_22C6:
00001E44                            CyclingPal_CPZUWTransformation:
00001E44                            	incbin  "pallet/CPZWater SS transformation.bin"
00001E64                                even
00001E64                            ;----------------------------------------------------------------------------
00001E64                            ;Palette for transformation to Super Sonic while underwater in ARZ
00001E64                            ;----------------------------------------------------------------------------
00001E64                            ; Pal_2346:
00001E64                            CyclingPal_ARZUWTransformation:
00001E64                                incbin  "pallet/ARZWater SS transformation.bin"
00001E84                                even
00001E84                            
00001E84                            ; ===========================================================================
00001E84                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001EA4                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001EC4                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001EE4                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001EF6                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001F08                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001F70                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001F94                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001FB4                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001FC4                            
00001FC4                            Pal_SBZCycList:
00001FC4                            	include "_inc\SBZ pallet script 1.asm"
00001FC4                            ; ---------------------------------------------------------------------------
00001FC4                            ; Scrap Brain Zone 1 pallet cycling script
00001FC4                            ; ---------------------------------------------------------------------------
00001FC4 0008                       	dc.w 8			; number of entries - 1
00001FC6 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001FC8 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001FCA FB50                       	dc.w $FB50		; RAM address
00001FCC 0D08                       	dc.b $D, 8
00001FCE 0000                       	dc.w Pal_SBZCyc2
00001FD0 FB52                       	dc.w $FB52
00001FD2 0E08                       	dc.b $E, 8
00001FD4 0000                       	dc.w Pal_SBZCyc3
00001FD6 FB6E                       	dc.w $FB6E
00001FD8 0B08                       	dc.b $B, 8
00001FDA 0000                       	dc.w Pal_SBZCyc5
00001FDC FB70                       	dc.w $FB70
00001FDE 0708                       	dc.b 7,	8
00001FE0 0000                       	dc.w Pal_SBZCyc6
00001FE2 FB72                       	dc.w $FB72
00001FE4 1C10                       	dc.b $1C, $10
00001FE6 0000                       	dc.w Pal_SBZCyc7
00001FE8 FB7E                       	dc.w $FB7E
00001FEA 0303                       	dc.b 3,	3
00001FEC 0000                       	dc.w Pal_SBZCyc8
00001FEE FB78                       	dc.w $FB78
00001FF0 0303                       	dc.b 3,	3
00001FF2 0000                       	dc.w Pal_SBZCyc8+2
00001FF4 FB7A                       	dc.w $FB7A
00001FF6 0303                       	dc.b 3,	3
00001FF8 0000                       	dc.w Pal_SBZCyc8+4
00001FFA FB7C                       	dc.w $FB7C
00001FFC                            	even
00001FFC                            	even
00001FFC                            
00001FFC                            Pal_SBZCycList2:
00001FFC                            	include "_inc\SBZ pallet script 2.asm"
00001FFC                            ; ---------------------------------------------------------------------------
00001FFC                            ; Scrap Brain Zone 2 pallet cycling script
00001FFC                            ; ---------------------------------------------------------------------------
00001FFC 0006                       	dc.w 6
00001FFE 0708                       	dc.b 7,	8
00002000 0000                       	dc.w Pal_SBZCyc1
00002002 FB50                       	dc.w $FB50
00002004 0D08                       	dc.b $D, 8
00002006 0000                       	dc.w Pal_SBZCyc2
00002008 FB52                       	dc.w $FB52
0000200A 0908                       	dc.b 9,	8
0000200C 0000                       	dc.w Pal_SBZCyc9
0000200E FB70                       	dc.w $FB70
00002010 0708                       	dc.b 7,	8
00002012 0000                       	dc.w Pal_SBZCyc6
00002014 FB72                       	dc.w $FB72
00002016 0303                       	dc.b 3,	3
00002018 0000                       	dc.w Pal_SBZCyc8
0000201A FB78                       	dc.w $FB78
0000201C 0303                       	dc.b 3,	3
0000201E 0000                       	dc.w Pal_SBZCyc8+2
00002020 FB7A                       	dc.w $FB7A
00002022 0303                       	dc.b 3,	3
00002024 0000                       	dc.w Pal_SBZCyc8+4
00002026 FB7C                       	dc.w $FB7C
00002028                            	even
00002028                            	even
00002028                            
00002028                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00002038                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00002048                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00002058                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00002064                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00002074                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00002084                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
000020A4                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
000020AE                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
000020BE                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
000020CA                            ; ---------------------------------------------------------------------------
000020CA                            ; Subroutine to	fade out and fade in
000020CA                            ; ---------------------------------------------------------------------------
000020CA                            
000020CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020CA                            
000020CA                            
000020CA                            Pal_FadeTo:
000020CA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020D0                            
000020D0                            Pal_FadeTo2:
000020D0 7000                       		moveq	#0,d0
000020D2 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020D6 1038 F626                  		move.b	($FFFFF626).w,d0
000020DA D0C0                       		adda.w	d0,a0
000020DC 7200                       		moveq	#0,d1
000020DE 1038 F627                  		move.b	($FFFFF627).w,d0
000020E2                            
000020E2                            Pal_ToBlack:
000020E2 30C1                       		move.w	d1,(a0)+
000020E4 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
000020E8 780E                       		moveq	#$0E,d4					; MJ: prepare maximum colour check
000020EA 7C00                       		moveq	#$00,d6					; MJ: clear d6
000020EC                            
000020EC                            loc_1DCE:
000020EC 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000020F2 6100 0000                  		bsr.w	DelayProgram
000020F6 0846 0000                  		bchg	#$00,d6					; MJ: change delay counter
000020FA 67F0                       		beq	loc_1DCE				; MJ: if null, delay a frame
000020FC 6100                       		bsr.s	Pal_FadeIn
000020FE 6100 F656                  		bsr.w	RunPLC_RAM
00002102 5504                       		subq.b	#$02,d4					; MJ: decrease colour check
00002104 66E6                       		bne	loc_1DCE				; MJ: if it has not reached null, branch
00002106 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w			; MJ: wait for V-blank again (so colours transfer)
0000210C 6000 0000                  		bra	DelayProgram				; MJ: ''
00002110                            
00002110                            ; End of function Pal_FadeTo
00002110                            
00002110                            ; ---------------------------------------------------------------------------
00002110                            ; Pallet fade-in subroutine
00002110                            ; ---------------------------------------------------------------------------
00002110                            
00002110                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002110                            
00002110                            
00002110                            Pal_FadeIn:				; XREF: Pal_FadeTo
00002110 7000                       		moveq	#0,d0
00002112 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002116 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000211A 1038 F626                  		move.b	($FFFFF626).w,d0
0000211E D0C0                       		adda.w	d0,a0
00002120 D2C0                       		adda.w	d0,a1
00002122 1038 F627                  		move.b	($FFFFF627).w,d0
00002126                            
00002126                            loc_1DFA:
00002126 6100                       		bsr.s	Pal_AddColor
00002128 51C8 FFFC                  		dbf	d0,loc_1DFA
0000212C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002132 6600                       		bne.s	locret_1E24
00002134 7000                       		moveq	#0,d0
00002136 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000213A 43F8 FA00                  		lea	($FFFFFA00).w,a1
0000213E 1038 F626                  		move.b	($FFFFF626).w,d0
00002142 D0C0                       		adda.w	d0,a0
00002144 D2C0                       		adda.w	d0,a1
00002146 1038 F627                  		move.b	($FFFFF627).w,d0
0000214A                            
0000214A                            loc_1E1E:
0000214A 6100                       		bsr.s	Pal_AddColor
0000214C 51C8 FFFC                  		dbf	d0,loc_1E1E
00002150                            
00002150                            locret_1E24:
00002150 4E75                       		rts	
00002152                            ; End of function Pal_FadeIn
00002152                            
00002152                            
00002152                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002152                            
00002152                            
00002152                            Pal_AddColor:				; XREF: Pal_FadeIn
00002152 1A11                       		move.b	(a1),d5					; MJ: load blue
00002154 3219                       		move.w	(a1)+,d1				; MJ: load green and red
00002156 1401                       		move.b	d1,d2					; MJ: load red
00002158 E809                       		lsr.b	#$04,d1					; MJ: get only green
0000215A 0202 000E                  		andi.b	#$0E,d2					; MJ: get only red
0000215E 3610                       		move.w	(a0),d3					; MJ: load current colour in buffer
00002160 B805                       		cmp.b	d5,d4					; MJ: is it time for blue to fade?
00002162 6200 0000                  		bhi	FCI_NoBlue				; MJ: if not, branch
00002166 0643 0200                  		addi.w	#$0200,d3				; MJ: increase blue
0000216A                            
0000216A                            FCI_NoBlue:
0000216A B801                       		cmp.b	d1,d4					; MJ: is it time for green to fade?
0000216C 6200 0000                  		bhi	FCI_NoGreen				; MJ: if not, branch
00002170 0603 0020                  		addi.b	#$20,d3					; MJ: increase green
00002174                            
00002174                            FCI_NoGreen:
00002174 B802                       		cmp.b	d2,d4					; MJ: is it time for red to fade?
00002176 6200 0000                  		bhi	FCI_NoRed				; MJ: if not, branch
0000217A 5403                       		addq.b	#$02,d3					; MJ: increase red
0000217C                            
0000217C                            FCI_NoRed:
0000217C 30C3                       		move.w	d3,(a0)+				; MJ: save colour
0000217E 4E75                       		rts						; MJ: return
00002180                            
00002180                            ; End of function Pal_AddColor
00002180                            
00002180                            
00002180                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002180                            
00002180                            
00002180                            Pal_FadeFrom:
00002180 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002186 7807                       		moveq	#$07,d4					; MJ: set repeat times
00002188 7C00                       		moveq	#$00,d6					; MJ: clear d6
0000218A                            
0000218A                            loc_1E5C:
0000218A 6100 F5CA                  		bsr.w	RunPLC_RAM
0000218E 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002194 6100 0000                  		bsr.w	DelayProgram
00002198 0846 0000                  		bchg	#$00,d6					; MJ: change delay counter
0000219C 67EC                       		beq	loc_1E5C				; MJ: if null, delay a frame
0000219E 6100                       		bsr.s	Pal_FadeOut
000021A0 51CC FFE8                  		dbf	d4,loc_1E5C
000021A4 4E75                       		rts	
000021A6                            ; End of function Pal_FadeFrom
000021A6                            
000021A6                            ; ---------------------------------------------------------------------------
000021A6                            ; Pallet fade-out subroutine
000021A6                            ; ---------------------------------------------------------------------------
000021A6                            
000021A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021A6                            
000021A6                            
000021A6                            Pal_FadeOut:				; XREF: Pal_FadeFrom
000021A6 7000                       		moveq	#0,d0
000021A8 41F8 FB00                  		lea	($FFFFFB00).w,a0
000021AC 1038 F626                  		move.b	($FFFFF626).w,d0
000021B0 D0C0                       		adda.w	d0,a0
000021B2 1038 F627                  		move.b	($FFFFF627).w,d0
000021B6                            
000021B6                            loc_1E82:
000021B6 6100                       		bsr.s	Pal_DecColor
000021B8 51C8 FFFC                  		dbf	d0,loc_1E82
000021BC                            
000021BC 7000                       		moveq	#0,d0
000021BE 41F8 FA80                  		lea	($FFFFFA80).w,a0
000021C2 1038 F626                  		move.b	($FFFFF626).w,d0
000021C6 D0C0                       		adda.w	d0,a0
000021C8 1038 F627                  		move.b	($FFFFF627).w,d0
000021CC                            
000021CC                            loc_1E98:
000021CC 6100                       		bsr.s	Pal_DecColor
000021CE 51C8 FFFC                  		dbf	d0,loc_1E98
000021D2 4E75                       		rts	
000021D4                            ; End of function Pal_FadeOut
000021D4                            
000021D4                            
000021D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021D4                            
000021D4                            
000021D4                            Pal_DecColor:				; XREF: Pal_FadeOut
000021D4 3A10                       		move.w	(a0),d5					; MJ: load colour
000021D6 3205                       		move.w	d5,d1					; MJ: copy to d1
000021D8 1401                       		move.b	d1,d2					; MJ: load green and red
000021DA 1601                       		move.b	d1,d3					; MJ: load red
000021DC 0241 0E00                  		andi.w	#$0E00,d1				; MJ: get only blue
000021E0 6700 0000                  		beq	FCO_NoBlue				; MJ: if blue is finished, branch
000021E4 0445 0200                  		subi.w	#$0200,d5				; MJ: decrease blue
000021E8                            
000021E8                            FCO_NoBlue:
000021E8 0242 00E0                  		andi.w	#$00E0,d2				; MJ: get only green (needs to be word)
000021EC 6700 0000                  		beq	FCO_NoGreen				; MJ: if green is finished, branch
000021F0 0405 0020                  		subi.b	#$20,d5					; MJ: decrease green
000021F4                            
000021F4                            FCO_NoGreen:
000021F4 0203 000E                  		andi.b	#$0E,d3					; MJ: get only red
000021F8 6700 0000                  		beq	FCO_NoRed				; MJ: if red is finished, branch
000021FC 5505                       		subq.b	#$02,d5					; MJ: decrease red
000021FE                            
000021FE                            FCO_NoRed:
000021FE 30C5                       		move.w	d5,(a0)+				; MJ: save new colour
00002200 4E75                       		rts						; MJ: return
00002202                            
00002202                            ; End of function Pal_DecColor
00002202                            
00002202                            ; ---------------------------------------------------------------------------
00002202                            ; Subroutine to	fill the pallet	with white (special stage)
00002202                            ; ---------------------------------------------------------------------------
00002202                            
00002202                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002202                            
00002202                            
00002202                            Pal_MakeWhite:				; XREF: SpecialStage
00002202 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002208 7000                       		moveq	#0,d0
0000220A 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000220E 1038 F626                  		move.b	($FFFFF626).w,d0
00002212 D0C0                       		adda.w	d0,a0
00002214 323C 0EEE                  		move.w	#$EEE,d1
00002218 1038 F627                  		move.b	($FFFFF627).w,d0
0000221C                            
0000221C                            PalWhite_Loop:
0000221C 30C1                       		move.w	d1,(a0)+
0000221E 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00002222 383C 0015                  		move.w	#$15,d4
00002226                            
00002226                            loc_1EF4:
00002226 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000222C 6100 0000                  		bsr.w	DelayProgram
00002230 6100                       		bsr.s	Pal_WhiteToBlack
00002232 6100 F522                  		bsr.w	RunPLC_RAM
00002236 51CC FFEE                  		dbf	d4,loc_1EF4
0000223A 4E75                       		rts	
0000223C                            ; End of function Pal_MakeWhite
0000223C                            
0000223C                            
0000223C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000223C                            
0000223C                            
0000223C                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
0000223C 7000                       		moveq	#0,d0
0000223E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002242 43F8 FB80                  		lea	($FFFFFB80).w,a1
00002246 1038 F626                  		move.b	($FFFFF626).w,d0
0000224A D0C0                       		adda.w	d0,a0
0000224C D2C0                       		adda.w	d0,a1
0000224E 1038 F627                  		move.b	($FFFFF627).w,d0
00002252                            
00002252                            loc_1F20:
00002252 6100                       		bsr.s	Pal_DecColor2
00002254 51C8 FFFC                  		dbf	d0,loc_1F20
00002258                            
00002258 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000225E 6600                       		bne.s	locret_1F4A
00002260 7000                       		moveq	#0,d0
00002262 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002266 43F8 FA00                  		lea	($FFFFFA00).w,a1
0000226A 1038 F626                  		move.b	($FFFFF626).w,d0
0000226E D0C0                       		adda.w	d0,a0
00002270 D2C0                       		adda.w	d0,a1
00002272 1038 F627                  		move.b	($FFFFF627).w,d0
00002276                            
00002276                            loc_1F44:
00002276 6100                       		bsr.s	Pal_DecColor2
00002278 51C8 FFFC                  		dbf	d0,loc_1F44
0000227C                            
0000227C                            locret_1F4A:
0000227C 4E75                       		rts	
0000227E                            ; End of function Pal_WhiteToBlack
0000227E                            
0000227E                            
0000227E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000227E                            
0000227E                            
0000227E                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
0000227E 3419                       		move.w	(a1)+,d2
00002280 3610                       		move.w	(a0),d3
00002282 B642                       		cmp.w	d2,d3
00002284 6700                       		beq.s	loc_1F78
00002286 3203                       		move.w	d3,d1
00002288 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
0000228C 6500                       		bcs.s	loc_1F64
0000228E B242                       		cmp.w	d2,d1
00002290 6500                       		bcs.s	loc_1F64
00002292 30C1                       		move.w	d1,(a0)+
00002294 4E75                       		rts	
00002296                            ; ===========================================================================
00002296                            
00002296                            loc_1F64:				; XREF: Pal_DecColor2
00002296 3203                       		move.w	d3,d1
00002298 0441 0020                  		subi.w	#$20,d1		; decrease green value
0000229C 6500                       		bcs.s	loc_1F74
0000229E B242                       		cmp.w	d2,d1
000022A0 6500                       		bcs.s	loc_1F74
000022A2 30C1                       		move.w	d1,(a0)+
000022A4 4E75                       		rts	
000022A6                            ; ===========================================================================
000022A6                            
000022A6                            loc_1F74:				; XREF: loc_1F64
000022A6 5558                       		subq.w	#2,(a0)+	; decrease red value
000022A8 4E75                       		rts	
000022AA                            ; ===========================================================================
000022AA                            
000022AA                            loc_1F78:				; XREF: Pal_DecColor2
000022AA 5448                       		addq.w	#2,a0
000022AC 4E75                       		rts	
000022AE                            ; End of function Pal_DecColor2
000022AE                            
000022AE                            ; ---------------------------------------------------------------------------
000022AE                            ; Subroutine to	make a white flash when	you enter a special stage
000022AE                            ; ---------------------------------------------------------------------------
000022AE                            
000022AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022AE                            
000022AE                            
000022AE                            Pal_MakeFlash:				; XREF: SpecialStage
000022AE 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000022B4 383C 0015                  		move.w	#$15,d4
000022B8                            
000022B8                            loc_1F86:
000022B8 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000022BE 6100 0000                  		bsr.w	DelayProgram
000022C2 6100                       		bsr.s	Pal_ToWhite
000022C4 6100 F490                  		bsr.w	RunPLC_RAM
000022C8 51CC FFEE                  		dbf	d4,loc_1F86
000022CC 4E75                       		rts	
000022CE                            ; End of function Pal_MakeFlash
000022CE                            
000022CE                            
000022CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022CE                            
000022CE                            
000022CE                            Pal_ToWhite:				; XREF: Pal_MakeFlash
000022CE 7000                       		moveq	#0,d0
000022D0 41F8 FB00                  		lea	($FFFFFB00).w,a0
000022D4 1038 F626                  		move.b	($FFFFF626).w,d0
000022D8 D0C0                       		adda.w	d0,a0
000022DA 1038 F627                  		move.b	($FFFFF627).w,d0
000022DE                            
000022DE                            loc_1FAC:
000022DE 6100                       		bsr.s	Pal_AddColor2
000022E0 51C8 FFFC                  		dbf	d0,loc_1FAC
000022E4 7000                       		moveq	#0,d0
000022E6 41F8 FA80                  		lea	($FFFFFA80).w,a0
000022EA 1038 F626                  		move.b	($FFFFF626).w,d0
000022EE D0C0                       		adda.w	d0,a0
000022F0 1038 F627                  		move.b	($FFFFF627).w,d0
000022F4                            
000022F4                            loc_1FC2:
000022F4 6100                       		bsr.s	Pal_AddColor2
000022F6 51C8 FFFC                  		dbf	d0,loc_1FC2
000022FA 4E75                       		rts	
000022FC                            ; End of function Pal_ToWhite
000022FC                            
000022FC                            
000022FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022FC                            
000022FC                            
000022FC                            Pal_AddColor2:				; XREF: Pal_ToWhite
000022FC 3410                       		move.w	(a0),d2
000022FE 0C42 0EEE                  		cmpi.w	#$EEE,d2
00002302 6700                       		beq.s	loc_2006
00002304 3202                       		move.w	d2,d1
00002306 0241 000E                  		andi.w	#$E,d1
0000230A 0C41 000E                  		cmpi.w	#$E,d1
0000230E 6700                       		beq.s	loc_1FE2
00002310 5458                       		addq.w	#2,(a0)+	; increase red value
00002312 4E75                       		rts	
00002314                            ; ===========================================================================
00002314                            
00002314                            loc_1FE2:				; XREF: Pal_AddColor2
00002314 3202                       		move.w	d2,d1
00002316 0241 00E0                  		andi.w	#$E0,d1
0000231A 0C41 00E0                  		cmpi.w	#$E0,d1
0000231E 6700                       		beq.s	loc_1FF4
00002320 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00002324 4E75                       		rts	
00002326                            ; ===========================================================================
00002326                            
00002326                            loc_1FF4:				; XREF: loc_1FE2
00002326 3202                       		move.w	d2,d1
00002328 0241 0E00                  		andi.w	#$E00,d1
0000232C 0C41 0E00                  		cmpi.w	#$E00,d1
00002330 6700                       		beq.s	loc_2006
00002332 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002336 4E75                       		rts	
00002338                            ; ===========================================================================
00002338                            
00002338                            loc_2006:				; XREF: Pal_AddColor2
00002338 5448                       		addq.w	#2,a0
0000233A 4E75                       		rts	
0000233C                            ; End of function Pal_AddColor2
0000233C                            
0000233C                            ; ---------------------------------------------------------------------------
0000233C                            ; Pallet cycling routine - Sega	logo
0000233C                            ; ---------------------------------------------------------------------------
0000233C                            
0000233C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000233C                            
0000233C                            
0000233C                            PalCycle_Sega:				; XREF: SegaScreen
0000233C 4A38 F635                  		tst.b	($FFFFF635).w
00002340 6600                       		bne.s	loc_206A
00002342 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002346 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000234C 7205                       		moveq	#5,d1
0000234E 3038 F632                  		move.w	($FFFFF632).w,d0
00002352                            
00002352                            loc_2020:
00002352 6A00                       		bpl.s	loc_202A
00002354 5448                       		addq.w	#2,a0
00002356 5341                       		subq.w	#1,d1
00002358 5440                       		addq.w	#2,d0
0000235A 60F6                       		bra.s	loc_2020
0000235C                            ; ===========================================================================
0000235C                            
0000235C                            loc_202A:				; XREF: PalCycle_Sega
0000235C 3400                       		move.w	d0,d2
0000235E 0242 001E                  		andi.w	#$1E,d2
00002362 6600                       		bne.s	loc_2034
00002364 5440                       		addq.w	#2,d0
00002366                            
00002366                            loc_2034:
00002366 0C40 0060                  		cmpi.w	#$60,d0
0000236A 6400                       		bcc.s	loc_203E
0000236C 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002370                            
00002370                            loc_203E:
00002370 5440                       		addq.w	#2,d0
00002372 51C9 FFE8                  		dbf	d1,loc_202A
00002376 3038 F632                  		move.w	($FFFFF632).w,d0
0000237A 5440                       		addq.w	#2,d0
0000237C 3400                       		move.w	d0,d2
0000237E 0242 001E                  		andi.w	#$1E,d2
00002382 6600                       		bne.s	loc_2054
00002384 5440                       		addq.w	#2,d0
00002386                            
00002386                            loc_2054:
00002386 0C40 0064                  		cmpi.w	#$64,d0
0000238A 6D00                       		blt.s	loc_2062
0000238C 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002392 70F4                       		moveq	#-$C,d0
00002394                            
00002394                            loc_2062:
00002394 31C0 F632                  		move.w	d0,($FFFFF632).w
00002398 7001                       		moveq	#1,d0
0000239A 4E75                       		rts	
0000239C                            ; ===========================================================================
0000239C                            
0000239C                            loc_206A:				; XREF: loc_202A
0000239C 5338 F634                  		subq.b	#1,($FFFFF634).w
000023A0 6A00                       		bpl.s	loc_20BC
000023A2 11FC 0004 F634             		move.b	#4,($FFFFF634).w
000023A8 3038 F632                  		move.w	($FFFFF632).w,d0
000023AC 0640 000C                  		addi.w	#$C,d0
000023B0 0C40 0030                  		cmpi.w	#$30,d0
000023B4 6500                       		bcs.s	loc_2088
000023B6 7000                       		moveq	#0,d0
000023B8 4E75                       		rts	
000023BA                            ; ===========================================================================
000023BA                            
000023BA                            loc_2088:				; XREF: loc_206A
000023BA 31C0 F632                  		move.w	d0,($FFFFF632).w
000023BE 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
000023C4 41F0 0000                  		lea	(a0,d0.w),a0
000023C8 43F8 FB04                  		lea	($FFFFFB04).w,a1
000023CC 22D8                       		move.l	(a0)+,(a1)+
000023CE 22D8                       		move.l	(a0)+,(a1)+
000023D0 3298                       		move.w	(a0)+,(a1)
000023D2 43F8 FB20                  		lea	($FFFFFB20).w,a1
000023D6 7000                       		moveq	#0,d0
000023D8 722C                       		moveq	#$2C,d1
000023DA                            
000023DA                            loc_20A8:
000023DA 3400                       		move.w	d0,d2
000023DC 0242 001E                  		andi.w	#$1E,d2
000023E0 6600                       		bne.s	loc_20B2
000023E2 5440                       		addq.w	#2,d0
000023E4                            
000023E4                            loc_20B2:
000023E4 3390 0000                  		move.w	(a0),(a1,d0.w)
000023E8 5440                       		addq.w	#2,d0
000023EA 51C9 FFEE                  		dbf	d1,loc_20A8
000023EE                            
000023EE                            loc_20BC:
000023EE 7001                       		moveq	#1,d0
000023F0 4E75                       		rts	
000023F2                            ; End of function PalCycle_Sega
000023F2                            
000023F2                            ; ===========================================================================
000023F2                            
000023F2                            Pal_Sega1:	incbin	pallet\sega1.bin
000023FE                            Pal_Sega2:	incbin	pallet\sega2.bin
0000242E                            	
0000242E                            ; ---------------------------------------------------------------------------
0000242E                            ; Subroutines to load pallets
0000242E                            ; ---------------------------------------------------------------------------
0000242E                            
0000242E                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000242E                            
0000242E                            PalLoad1:
0000242E 1238 FE11                  		move.b ($FFFFFE11),d1
00002432 43F9 0000 0000             		lea (PalPointers).l,a1
00002438 0C01 0000                  		cmp.b #0,d1
0000243C 6700 0000                  		beq.w PalLoad1_Continue
00002440 43F9 0000 0000             		lea (PalPointers2).l,a1
00002446 0C01 0001                  		cmp.b #1,d1
0000244A 6700 0000                  		beq.w PalLoad1_Continue
0000244E 43F9 0000 0000             		lea (PalPointers3).l,a1
00002454                            
00002454                            PalLoad1_Continue:
00002454 E748                       		lsl.w #3,d0
00002456 D2C0                       		adda.w d0,a1
00002458 2459                       		movea.l (a1)+,a2
0000245A 3659                       		movea.w (a1)+,a3
0000245C D6FC 0080                  		adda.w #$80,a3
00002460 3E19                       		move.w (a1)+,d7
00002462                            
00002462                            loc_2110:
00002462 26DA                       		move.l (a2)+,(a3)+
00002464 51CF FFFC                  		dbf d7,loc_2110
00002468 4E75                       		rts
0000246A                             ; End of function PalLoad1
0000246A                            
0000246A                            
0000246A                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000246A                            
0000246A                            PalLoad2:
0000246A 1238 FE11                  		move.b ($FFFFFE11),d1
0000246E 43F9 0000 0000             		lea (PalPointers).l,a1
00002474 0C01 0000                  		cmp.b #0,d1
00002478 6700 0000                  		beq.w PalLoad2_Continue
0000247C 43F9 0000 0000             		lea (PalPointers2).l,a1
00002482 0C01 0001                  		cmp.b #1,d1
00002486 6700 0000                  		beq.w PalLoad2_Continue
0000248A 43F9 0000 0000             		lea (PalPointers3).l,a1
00002490                            
00002490                            
00002490                            PalLoad2_Continue:
00002490 E748                       		lsl.w #3,d0
00002492 D2C0                       		adda.w d0,a1
00002494 2459                       		movea.l (a1)+,a2
00002496 3659                       		movea.w (a1)+,a3
00002498 3E19                       		move.w (a1)+,d7
0000249A                            
0000249A                            loc_2128:
0000249A 26DA                       		move.l (a2)+,(a3)+
0000249C 51CF FFFC                  		dbf d7,loc_2128
000024A0 4E75                       		rts
000024A2                            ; End of function PalLoad2
000024A2                            
000024A2                            
000024A2                            ; ---------------------------------------------------------------------------
000024A2                            ; Underwater pallet loading subroutine
000024A2                            ; ---------------------------------------------------------------------------
000024A2                            
000024A2                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000024A2                            
000024A2                            PalLoad3_Water:
000024A2 1238 FE11                  		move.b ($FFFFFE11),d1
000024A6 43F9 0000 0000             		lea (PalPointers).l,a1
000024AC 0C01 0000                  		cmp.b #0,d1
000024B0 6700 0000                  		beq.w PalLoad3_Continue
000024B4 43F9 0000 0000             		lea (PalPointers2).l,a1
000024BA 0C01 0001                  		cmp.b #1,d1
000024BE 6700 0000                  		beq.w PalLoad3_Continue
000024C2 43F9 0000 0000             		lea (PalPointers3).l,a1
000024C8                            
000024C8                            PalLoad3_Continue:
000024C8 E748                       		lsl.w #3,d0
000024CA D2C0                       		adda.w d0,a1
000024CC 2459                       		movea.l (a1)+,a2
000024CE 3659                       		movea.w (a1)+,a3
000024D0 96FC 0080                  		suba.w #$80,a3
000024D4 3E19                       		move.w (a1)+,d7
000024D6                            
000024D6                            loc_2144:
000024D6 26DA                       		move.l (a2)+,(a3)+
000024D8 51CF FFFC                  		dbf d7,loc_2144
000024DC 4E75                       		rts
000024DE                            ; End of function PalLoad3_Water
000024DE                            
000024DE                            
000024DE                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000024DE                            
000024DE                            
000024DE                            PalLoad4_Water:
000024DE 1238 FE11                  		move.b ($FFFFFE11),d1
000024E2 43F9 0000 0000             		lea (PalPointers).l,a1
000024E8 0C01 0000                  		cmp.b #0,d1
000024EC 6700 0000                  		beq.w PalLoad4_Continue
000024F0 43F9 0000 0000             		lea (PalPointers2).l,a1
000024F6 0C01 0001                  		cmp.b #1,d1
000024FA 6700 0000                  		beq.w PalLoad4_Continue
000024FE 43F9 0000 0000             		lea (PalPointers3).l,a1
00002504                            
00002504                            PalLoad4_Continue:
00002504 E748                       		lsl.w #3,d0
00002506 D2C0                       		adda.w d0,a1
00002508 2459                       		movea.l (a1)+,a2
0000250A 3659                       		movea.w (a1)+,a3
0000250C 96FC 0100                  		suba.w #$100,a3
00002510 3E19                       		move.w (a1)+,d7
00002512                            loc_2160:
00002512 26DA                       		move.l (a2)+,(a3)+
00002514 51CF FFFC                  		dbf d7,loc_2160
00002518 4E75                       		rts
0000251A                             ; End of function PalLoad4_Water
0000251A                            
0000251A                            ; ===========================================================================
0000251A                            ; ---------------------------------------------------------------------------
0000251A                            ; Pallet pointers
0000251A                            ; ---------------------------------------------------------------------------
0000251A                            PalPointers:
0000251A                            	include "_inc\Pallet pointers.asm"
0000251A                            ; ---------------------------------------------------------------------------
0000251A                            ; Pallet pointers
0000251A                            ; ---------------------------------------------------------------------------
0000251A 0000 0000                  	dc.l Pal_SegaBG		; pallet address
0000251E FB00                       	dc.w $FB00		; RAM address
00002520 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002522 0000 0000                  	dc.l Pal_Title
00002526 FB00                       	dc.w $FB00
00002528 001F                       	dc.w $1F
0000252A 0000 0000                  	dc.l Pal_LevelSel
0000252E FB00                       	dc.w $FB00
00002530 001F                       	dc.w $1F
00002532 0000 0000                  	dc.l Pal_Sonic
00002536 FB00                       	dc.w $FB00
00002538 0007                       	dc.w 7
0000253A 0000 0000                  	dc.l Pal_GHZ
0000253E FB20                       	dc.w $FB20
00002540 0017                       	dc.w $17
00002542 0000 0000                  	dc.l Pal_LZ
00002546 FB20                       	dc.w $FB20
00002548 0017                       	dc.w $17
0000254A 0000 0000                  	dc.l Pal_MZ
0000254E FB20                       	dc.w $FB20
00002550 0017                       	dc.w $17
00002552 0000 0000                  	dc.l Pal_SLZ
00002556 FB20                       	dc.w $FB20
00002558 0017                       	dc.w $17
0000255A 0000 0000                  	dc.l Pal_SYZ
0000255E FB20                       	dc.w $FB20
00002560 0017                       	dc.w $17
00002562 0000 0000                  	dc.l Pal_SBZ1
00002566 FB20                       	dc.w $FB20
00002568 0017                       	dc.w $17
0000256A 0000 0000                  	dc.l Pal_Special
0000256E FB00                       	dc.w $FB00
00002570 001F                       	dc.w $1F
00002572 0000 0000                  	dc.l Pal_LZWater
00002576 FB00                       	dc.w $FB00
00002578 001F                       	dc.w $1F
0000257A 0000 0000                  	dc.l Pal_SBZ3
0000257E FB20                       	dc.w $FB20
00002580 0017                       	dc.w $17
00002582 0000 0000                  	dc.l Pal_SBZ3Water
00002586 FB00                       	dc.w $FB00
00002588 001F                       	dc.w $1F
0000258A 0000 0000                  	dc.l Pal_SBZ2
0000258E FB20                       	dc.w $FB20
00002590 0017                       	dc.w $17
00002592 0000 0000                  	dc.l Pal_LZSonWater
00002596 FB00                       	dc.w $FB00
00002598 0007                       	dc.w 7
0000259A 0000 0000                  	dc.l Pal_SBZ3SonWat
0000259E FB00                       	dc.w $FB00
000025A0 0007                       	dc.w 7
000025A2 0000 0000                  	dc.l Pal_SpeResult
000025A6 FB00                       	dc.w $FB00
000025A8 001F                       	dc.w $1F
000025AA 0000 0000                  	dc.l Pal_SpeContinue
000025AE FB00                       	dc.w $FB00
000025B0 000F                       	dc.w $F
000025B2 0000 0000                  	dc.l Pal_Ending
000025B6 FB00                       	dc.w $FB00
000025B8 001F                       	dc.w $1F
000025BA 0000 0000                  	dc.l Menu_Palette; pallet address
000025BE FB00                       	dc.w $FB00	; RAM address
000025C0 001F                       	dc.w $1F	; (pallet length / 2) - 1	
000025C0 001F                       	dc.w $1F	; (pallet length / 2) - 1	
000025C2                            PalPointers2:
000025C2                            		include "_inc\Pallet pointers2.asm"
000025C2                            	
000025C2                            ; ---------------------------------------------------------------------------
000025C2                            ; Pallet pointers 2
000025C2                            ; ---------------------------------------------------------------------------
000025C2 0000 0000                  	dc.l Pal_SegaBG		; pallet address
000025C6 FB00                       	dc.w $FB00		; RAM address
000025C8 001F                       	dc.w $1F		; (pallet length / 2) - 1
000025CA 0000 0000                  	dc.l Pal_Title
000025CE FB00                       	dc.w $FB00
000025D0 001F                       	dc.w $1F
000025D2 0000 0000                  	dc.l Pal_LevelSel
000025D6 FB00                       	dc.w $FB00
000025D8 001F                       	dc.w $1F
000025DA 0000 0000                  	dc.l Pal_Sonic
000025DE FB00                       	dc.w $FB00
000025E0 0007                       	dc.w 7
000025E2 0000 0000                  	dc.l Pal_GHZ2
000025E6 FB20                       	dc.w $FB20
000025E8 0017                       	dc.w $17
000025EA 0000 0000                  	dc.l Pal_LZ2
000025EE FB20                       	dc.w $FB20
000025F0 0017                       	dc.w $17
000025F2 0000 0000                  	dc.l Pal_MZ2
000025F6 FB20                       	dc.w $FB20
000025F8 0017                       	dc.w $17
000025FA 0000 0000                  	dc.l Pal_SLZ2
000025FE FB20                       	dc.w $FB20
00002600 0017                       	dc.w $17
00002602 0000 0000                  	dc.l Pal_SYZ2
00002606 FB20                       	dc.w $FB20
00002608 0017                       	dc.w $17
0000260A 0000 0000                  	dc.l Pal_SBZ1
0000260E FB20                       	dc.w $FB20
00002610 0017                       	dc.w $17
00002612 0000 0000                  	dc.l Pal_Special
00002616 FB00                       	dc.w $FB00
00002618 001F                       	dc.w $1F
0000261A 0000 0000                  	dc.l Pal_LZWater2
0000261E FB00                       	dc.w $FB00
00002620 001F                       	dc.w $1F
00002622 0000 0000                  	dc.l Pal_SBZ3
00002626 FB20                       	dc.w $FB20
00002628 0017                       	dc.w $17
0000262A 0000 0000                  	dc.l Pal_SBZ3Water
0000262E FB00                       	dc.w $FB00
00002630 001F                       	dc.w $1F
00002632 0000 0000                  	dc.l Pal_SBZ2
00002636 FB20                       	dc.w $FB20
00002638 0017                       	dc.w $17
0000263A 0000 0000                  	dc.l Pal_LZSonWater2
0000263E FB00                       	dc.w $FB00
00002640 0007                       	dc.w 7
00002642 0000 0000                  	dc.l Pal_SBZ3SonWat
00002646 FB00                       	dc.w $FB00
00002648 0007                       	dc.w 7
0000264A 0000 0000                  	dc.l Pal_SpeResult
0000264E FB00                       	dc.w $FB00
00002650 001F                       	dc.w $1F
00002652 0000 0000                  	dc.l Pal_SpeContinue
00002656 FB00                       	dc.w $FB00
00002658 000F                       	dc.w $F
0000265A 0000 0000                  	dc.l Pal_Ending
0000265E FB00                       	dc.w $FB00
00002660 001F                       	dc.w $1F
00002660 001F                       	dc.w $1F
00002662                            PalPointers3:
00002662                            		include "_inc\Pallet pointers3.asm"
00002662                            	
00002662                            ; ---------------------------------------------------------------------------
00002662                            ; Pallet pointers 3
00002662                            ; ---------------------------------------------------------------------------
00002662 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002666 FB00                       	dc.w $FB00		; RAM address
00002668 001F                       	dc.w $1F		; (pallet length / 2) - 1
0000266A 0000 0000                  	dc.l Pal_Title
0000266E FB00                       	dc.w $FB00
00002670 001F                       	dc.w $1F
00002672 0000 0000                  	dc.l Pal_LevelSel
00002676 FB00                       	dc.w $FB00
00002678 001F                       	dc.w $1F
0000267A 0000 0000                  	dc.l Pal_Sonic
0000267E FB00                       	dc.w $FB00
00002680 0007                       	dc.w 7
00002682 0000 0000                  	dc.l Pal_GHZ3
00002686 FB20                       	dc.w $FB20
00002688 0017                       	dc.w $17
0000268A 0000 0000                  	dc.l Pal_LZ3
0000268E FB20                       	dc.w $FB20
00002690 0017                       	dc.w $17
00002692 0000 0000                  	dc.l Pal_MZ3
00002696 FB20                       	dc.w $FB20
00002698 0017                       	dc.w $17
0000269A 0000 0000                  	dc.l Pal_SLZ3
0000269E FB20                       	dc.w $FB20
000026A0 0017                       	dc.w $17
000026A2 0000 0000                  	dc.l Pal_SYZ3
000026A6 FB20                       	dc.w $FB20
000026A8 0017                       	dc.w $17
000026AA 0000 0000                  	dc.l Pal_SBZ1
000026AE FB20                       	dc.w $FB20
000026B0 0017                       	dc.w $17
000026B2 0000 0000                  	dc.l Pal_Special
000026B6 FB00                       	dc.w $FB00
000026B8 001F                       	dc.w $1F
000026BA 0000 0000                  	dc.l Pal_LZWater3
000026BE FB00                       	dc.w $FB00
000026C0 001F                       	dc.w $1F
000026C2 0000 0000                  	dc.l Pal_SBZ3
000026C6 FB20                       	dc.w $FB20
000026C8 0017                       	dc.w $17
000026CA 0000 0000                  	dc.l Pal_SBZ3Water
000026CE FB00                       	dc.w $FB00
000026D0 001F                       	dc.w $1F
000026D2 0000 0000                  	dc.l Pal_SBZ2
000026D6 FB20                       	dc.w $FB20
000026D8 0017                       	dc.w $17
000026DA 0000 0000                  	dc.l Pal_LZSonWater3
000026DE FB00                       	dc.w $FB00
000026E0 0007                       	dc.w 7
000026E2 0000 0000                  	dc.l Pal_SBZ3SonWat
000026E6 FB00                       	dc.w $FB00
000026E8 0007                       	dc.w 7
000026EA 0000 0000                  	dc.l Pal_SpeResult
000026EE FB00                       	dc.w $FB00
000026F0 001F                       	dc.w $1F
000026F2 0000 0000                  	dc.l Pal_SpeContinue
000026F6 FB00                       	dc.w $FB00
000026F8 000F                       	dc.w $F
000026FA 0000 0000                  	dc.l Pal_Ending
000026FE FB00                       	dc.w $FB00
00002700 001F                       	dc.w $1F
00002700 001F                       	dc.w $1F
00002702                            ; ---------------------------------------------------------------------------
00002702                            ; Pallet data
00002702                            ; ---------------------------------------------------------------------------
00002702                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
00002782                            Pal_Title:	incbin	pallet\title.bin
00002802                            Pal_LevelSel:	incbin	pallet\levelsel.bin
00002882                            Pal_Sonic:	incbin	pallet\sonic.bin
000028A2                            Pal_GHZ:	incbin	pallet\ghz.bin
00002902                            Pal_GHZ2: incbin pallet\ghz2.bin
00002962                            Pal_GHZ3: incbin pallet\ghz3.bin
000029C2                            Pal_LZ:		incbin	pallet\lz.bin
00002A22                            Pal_LZ2: incbin pallet\lz2.bin
00002A82                            Pal_LZ3: incbin pallet\lz3.bin
00002AE2                            Pal_LZWater: incbin pallet\lz_uw.bin; LZ underwater pallets
00002B62                            Pal_LZWater2: incbin pallet\lz_uw2.bin; LZ underwater pallets
00002BE2                            Pal_LZWater3: incbin pallet\lz_uw3.bin; LZ underwater pallets
00002C62                            Pal_MZ:		incbin	pallet\mz.bin
00002CC2                            Pal_MZ2: incbin pallet\mz2.bin
00002D22                            Pal_MZ3: incbin pallet\mz3.bin
00002D82                            Pal_SLZ:	incbin	pallet\slz.bin
00002DE2                            Pal_SLZ2: incbin pallet\slz2.bin
00002E42                            Pal_SLZ3: incbin pallet\slz3.bin
00002EA2                            Pal_SYZ:	incbin	pallet\syz.bin
00002F02                            Pal_SYZ2: incbin pallet\syz2.bin
00002F62                            Pal_SYZ3: incbin pallet\syz3.bin
00002FC2                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00003022                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
00003082                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00003102                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
00003162                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
000031E2                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00003202                            Pal_LZSonWater2:	incbin	pallet\son_lzuw2.bin	; Sonic (underwater in LZ) pallet
00003222                            Pal_LZSonWater3:	incbin	pallet\son_lzuw3.bin	; Sonic (underwater in LZ) pallet
00003242                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00003262                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
000032E2                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00003322                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
000033A2                            
000033A2                            ; ---------------------------------------------------------------------------
000033A2                            ; Subroutine to	delay the program by ($FFFFF62A) frames
000033A2                            ; ---------------------------------------------------------------------------
000033A2                            
000033A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000033A2                            
000033A2                            
000033A2                            DelayProgram:				; XREF: PauseGame
000033A2 46FC 2300                  		move	#$2300,sr
000033A6                            
000033A6                            loc_29AC:
000033A6 4A38 F62A                  		tst.b	($FFFFF62A).w
000033AA 66FA                       		bne.s	loc_29AC
000033AC 4E75                       		rts	
000033AE                            ; End of function DelayProgram
000033AE                            
000033AE                            ; ---------------------------------------------------------------------------
000033AE                            ; Subroutine to	generate a pseudo-random number	in d0
000033AE                            ; ---------------------------------------------------------------------------
000033AE                            
000033AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000033AE                            
000033AE                            
000033AE                            RandomNumber:
000033AE 2238 F636                  		move.l	($FFFFF636).w,d1
000033B2 6600                       		bne.s	loc_29C0
000033B4 223C 2A6D 365A             		move.l	#$2A6D365A,d1
000033BA                            
000033BA                            loc_29C0:
000033BA 2001                       		move.l	d1,d0
000033BC E581                       		asl.l	#2,d1
000033BE D280                       		add.l	d0,d1
000033C0 E781                       		asl.l	#3,d1
000033C2 D280                       		add.l	d0,d1
000033C4 3001                       		move.w	d1,d0
000033C6 4841                       		swap	d1
000033C8 D041                       		add.w	d1,d0
000033CA 3200                       		move.w	d0,d1
000033CC 4841                       		swap	d1
000033CE 21C1 F636                  		move.l	d1,($FFFFF636).w
000033D2 4E75                       		rts	
000033D4                            ; End of function RandomNumber
000033D4                            
000033D4                            
000033D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000033D4                            
000033D4                            
000033D4                            CalcSine:				; XREF: SS_BGAnimate; et al
000033D4 0240 00FF                  		andi.w	#$FF,d0
000033D8 D040                       		add.w	d0,d0
000033DA 0640 0080                  		addi.w	#$80,d0
000033DE 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
000033E2 0440 0080                  		subi.w	#$80,d0
000033E6 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
000033EA 4E75                       		rts	
000033EC                            ; End of function CalcSine
000033EC                            
000033EC                            ; ===========================================================================
000033EC                            
000033EC                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360� sine wave
0000366C                            
0000366C                            ; ===========================================================================
0000366C 48E7 6000                  		movem.l	d1-d2,-(sp)
00003670 3200                       		move.w	d0,d1
00003672 4841                       		swap	d1
00003674 7000                       		moveq	#0,d0
00003676 3200                       		move.w	d0,d1
00003678 7407                       		moveq	#7,d2
0000367A                            
0000367A                            loc_2C80:
0000367A E599                       		rol.l	#2,d1
0000367C D040                       		add.w	d0,d0
0000367E 5240                       		addq.w	#1,d0
00003680 9240                       		sub.w	d0,d1
00003682 6400                       		bcc.s	loc_2C9A
00003684 D240                       		add.w	d0,d1
00003686 5340                       		subq.w	#1,d0
00003688 51CA FFF0                  		dbf	d2,loc_2C80
0000368C E248                       		lsr.w	#1,d0
0000368E 4CDF 0006                  		movem.l	(sp)+,d1-d2
00003692 4E75                       		rts	
00003694                            ; ===========================================================================
00003694                            
00003694                            loc_2C9A:
00003694 5240                       		addq.w	#1,d0
00003696 51CA FFE2                  		dbf	d2,loc_2C80
0000369A E248                       		lsr.w	#1,d0
0000369C 4CDF 0006                  		movem.l	(sp)+,d1-d2
000036A0 4E75                       		rts	
000036A2                            
000036A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000036A2                            
000036A2                            
000036A2                            CalcAngle:
000036A2 48E7 1800                  		movem.l	d3-d4,-(sp)
000036A6 7600                       		moveq	#0,d3
000036A8 7800                       		moveq	#0,d4
000036AA 3601                       		move.w	d1,d3
000036AC 3802                       		move.w	d2,d4
000036AE 8843                       		or.w	d3,d4
000036B0 6700                       		beq.s	loc_2D04
000036B2 3802                       		move.w	d2,d4
000036B4 4A43                       		tst.w	d3
000036B6 6A00 0000                  		bpl.w	loc_2CC2
000036BA 4443                       		neg.w	d3
000036BC                            
000036BC                            loc_2CC2:
000036BC 4A44                       		tst.w	d4
000036BE 6A00 0000                  		bpl.w	loc_2CCA
000036C2 4444                       		neg.w	d4
000036C4                            
000036C4                            loc_2CCA:
000036C4 B843                       		cmp.w	d3,d4
000036C6 6400 0000                  		bcc.w	loc_2CDC
000036CA E18C                       		lsl.l	#8,d4
000036CC 88C3                       		divu.w	d3,d4
000036CE 7000                       		moveq	#0,d0
000036D0 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
000036D4 6000                       		bra.s	loc_2CE6
000036D6                            ; ===========================================================================
000036D6                            
000036D6                            loc_2CDC:				; XREF: CalcAngle
000036D6 E18B                       		lsl.l	#8,d3
000036D8 86C4                       		divu.w	d4,d3
000036DA 7040                       		moveq	#$40,d0
000036DC 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
000036E0                            
000036E0                            loc_2CE6:
000036E0 4A41                       		tst.w	d1
000036E2 6A00 0000                  		bpl.w	loc_2CF2
000036E6 4440                       		neg.w	d0
000036E8 0640 0080                  		addi.w	#$80,d0
000036EC                            
000036EC                            loc_2CF2:
000036EC 4A42                       		tst.w	d2
000036EE 6A00 0000                  		bpl.w	loc_2CFE
000036F2 4440                       		neg.w	d0
000036F4 0640 0100                  		addi.w	#$100,d0
000036F8                            
000036F8                            loc_2CFE:
000036F8 4CDF 0018                  		movem.l	(sp)+,d3-d4
000036FC 4E75                       		rts	
000036FE                            ; ===========================================================================
000036FE                            
000036FE                            loc_2D04:				; XREF: CalcAngle
000036FE 303C 0040                  		move.w	#$40,d0
00003702 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003706 4E75                       		rts	
00003708                            ; End of function CalcAngle
00003708                            
00003708                            ; ===========================================================================
00003708                            
00003708                            Angle_Data:	incbin	misc\angles.bin
0000380A                            
0000380A                            ; ===========================================================================
0000380A                            
0000380A                            ; ---------------------------------------------------------------------------
0000380A                            ; Sega screen
0000380A                            ; ---------------------------------------------------------------------------
0000380A                            
0000380A                            SegaScreen:				; XREF: GameModeArray
0000380A 103C 00E4                  		move.b	#$E4,d0
0000380E 6100 DC66                  		bsr.w	PlaySound_Special ; stop music
00003812 6100 DF34                  		bsr.w	ClearPLC
00003816 6100 EA96                  		bsr.w	Pal_MakeFlash
0000381A 4DF9 00C0 0004             		lea	($C00004).l,a6
00003820 3CBC 8004                  		move.w	#$8004,(a6)
00003824 3CBC 8230                  		move.w	#$8230,(a6)
00003828 3CBC 8407                  		move.w	#$8407,(a6)
0000382C 3CBC 8700                  		move.w	#$8700,(a6)
00003830 3CBC 8B00                  		move.w	#$8B00,(a6)
00003834 4238 F64E                  		clr.b	($FFFFF64E).w
00003838 46FC 2700                  		move	#$2700,sr
0000383C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003840 0200 00BF                  		andi.b	#$BF,d0
00003844 33C0 00C0 0004             		move.w	d0,($C00004).l
0000384A 6100 DB34                  		bsr.w	ClearScreen
0000384E 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003858 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
0000385E 6100 DD4A                  		bsr.w	NemDec
00003862 43F9 00FF 0000             		lea	($FF0000).l,a1
00003868 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
0000386E 303C 0000                  		move.w	#0,d0
00003872 6100 E014                  		bsr.w	EniDec
00003876 43F9 00FF 0000             		lea	($FF0000).l,a1
0000387C 203C 6510 0003             		move.l	#$65100003,d0
00003882 7217                       		moveq	#$17,d1
00003884 7407                       		moveq	#7,d2
00003886 6100 DC72                  		bsr.w	ShowVDPGraphics
0000388A 43F9 00FF 0180             		lea	($FF0180).l,a1
00003890 203C 4000 0003             		move.l	#$40000003,d0
00003896 7227                       		moveq	#$27,d1
00003898 741B                       		moveq	#$1B,d2
0000389A 6100 DC5E                  		bsr.w	ShowVDPGraphics
0000389E 7000                       		moveq	#0,d0
000038A0 6100 EBC8                  		bsr.w	PalLoad2	; load Sega logo pallet
000038A4 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
000038AA 31FC 0000 F634             		move.w	#0,($FFFFF634).w
000038B0 31FC 0000 F662             		move.w	#0,($FFFFF662).w
000038B6 31FC 0000 F660             		move.w	#0,($FFFFF660).w
000038BC 3038 F60C                  		move.w	($FFFFF60C).w,d0
000038C0 0000 0040                  		ori.b	#$40,d0
000038C4 33C0 00C0 0004             		move.w	d0,($C00004).l
000038CA                            
000038CA                            Sega_WaitPallet:
000038CA 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000038D0 6100 FAD0                  		bsr.w	DelayProgram
000038D4 6100 EA66                  		bsr.w	PalCycle_Sega
000038D8 66F0                       		bne.s	Sega_WaitPallet
000038DA                            
000038DA 103C 00E1                  		move.b	#$E1,d0
000038DE 6100 DB96                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
000038E2 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
000038E8 6100 FAB8                  		bsr.w	DelayProgram
000038EC 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000038F2                            
000038F2                            Sega_WaitEnd:
000038F2 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000038F8 6100 FAA8                  		bsr.w	DelayProgram
000038FC 4A78 F614                  		tst.w	($FFFFF614).w
00003900 6700                       		beq.s	Sega_GotoTitle
00003902 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003908 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
0000390A                            
0000390A                            Sega_GotoTitle:
0000390A 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00003910 4E75                       		rts	
00003912                            ; ===========================================================================
00003912                            
00003912                            ; ---------------------------------------------------------------------------
00003912                            ; Title	screen
00003912                            ; ---------------------------------------------------------------------------
00003912                            
00003912                            TitleScreen:				; XREF: GameModeArray
00003912 103C 00E4                  		move.b	#$E4,d0
00003916 6100 DB5E                  		bsr.w	PlaySound_Special ; stop music
0000391A 6100 DE2C                  		bsr.w	ClearPLC
0000391E 6100 E860                  		bsr.w	Pal_FadeFrom
00003922 46FC 2700                  		move	#$2700,sr
00003926 6100 DAE6                  		bsr.w	SoundDriverLoad
0000392A 4DF9 00C0 0004             		lea	($C00004).l,a6
00003930 3CBC 8004                  		move.w	#$8004,(a6)
00003934 3CBC 8230                  		move.w	#$8230,(a6)
00003938 3CBC 8407                  		move.w	#$8407,(a6)
0000393C 3CBC 9001                  		move.w	#$9001,(a6)
00003940 3CBC 9200                  		move.w	#$9200,(a6)
00003944 3CBC 8B03                  		move.w	#$8B03,(a6)
00003948 3CBC 8720                  		move.w	#$8720,(a6)
0000394C 4238 F64E                  		clr.b	($FFFFF64E).w
00003950 6100 DA2E                  		bsr.w	ClearScreen
00003954 43F8 D000                  		lea	($FFFFD000).w,a1
00003958 7000                       		moveq	#0,d0
0000395A 323C 07FF                  		move.w	#$7FF,d1
0000395E                            
0000395E                            Title_ClrObjRam:
0000395E 22C0                       		move.l	d0,(a1)+
00003960 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
00003964                            
00003964 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000396E 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00003974 6100 DC34                  		bsr.w	NemDec
00003978 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00003982 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00003988 6100 DC20                  		bsr.w	NemDec
0000398C 43F9 00FF 0000             		lea	($FF0000).l,a1
00003992 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00003998 303C 0000                  		move.w	#0,d0
0000399C 6100 DEEA                  		bsr.w	EniDec
000039A0 43F9 00FF 0000             		lea	($FF0000).l,a1
000039A6 203C 4000 0003             		move.l	#$40000003,d0
000039AC 7227                       		moveq	#$27,d1
000039AE 741B                       		moveq	#$1B,d2
000039B0 6100 DB48                  		bsr.w	ShowVDPGraphics
000039B4 43F8 FB80                  		lea	($FFFFFB80).w,a1
000039B8 7000                       		moveq	#0,d0
000039BA 323C 001F                  		move.w	#$1F,d1
000039BE                            
000039BE                            Title_ClrPallet:
000039BE 22C0                       		move.l	d0,(a1)+
000039C0 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
000039C4                            
000039C4 7003                       		moveq	#3,d0		; load Sonic's pallet
000039C6 6100 EA66                  		bsr.w	PalLoad1
000039CA 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
000039D0 4EB9 0000 0000             		jsr	ObjectsLoad
000039D6 4EB9 0000 0000             		jsr	BuildSprites
000039DC 6100 E6EC                  		bsr.w	Pal_FadeTo
000039E0 46FC 2700                  		move	#$2700,sr
000039E4 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
000039EE 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
000039F4 6100 DBB4                  		bsr.w	NemDec
000039F8 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00003A02 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00003A08 6100 DBA0                  		bsr.w	NemDec
00003A0C 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00003A16 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
00003A1C 6100 DB8C                  		bsr.w	NemDec
00003A20 4DF9 00C0 0000             		lea	($C00000).l,a6
00003A26 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
00003A2E 4BF9 0000 058C             		lea	(Art_Text).l,a5
00003A34 323C 028F                  		move.w	#$28F,d1
00003A38                            
00003A38                            Title_LoadText:
00003A38 3C9D                       		move.w	(a5)+,(a6)
00003A3A 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00003A3E                            
00003A3E 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00003A44 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003A4A 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00003A50 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
00003A56 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
00003A5C 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00003A62 6100 0000                  		bsr.w	LevelSizeLoad
00003A66 6100 0000                  		bsr.w	DeformBgLayer
00003A6A 43F8 B000                  		lea	($FFFFB000).w,a1
00003A6E 41F9 0000 0000             		lea	(Blk16_TS).l,a0 ; load TS 16x16 mappings
00003A74 303C 0000                  		move.w	#0,d0
00003A78 6100 DE0E                  		bsr.w	EniDec
00003A7C 41F9 0000 0000             		lea	(Blk256_TS).l,a0 ; load TS 256x256 mappings
00003A82 43F9 00FF 0000             		lea	($FF0000).l,a1
00003A88 6100 DF7C                  		bsr.w	KosDec
00003A8C 6100 0000                  		bsr.w	LevelLayoutLoad
00003A90 6100 E6EE                  		bsr.w	Pal_FadeFrom
00003A94 46FC 2700                  		move	#$2700,sr
00003A98 6100 D8E6                  		bsr.w	ClearScreen
00003A9C 4BF9 00C0 0004             		lea	($C00004).l,a5
00003AA2 4DF9 00C0 0000             		lea	($C00000).l,a6
00003AA8 47F8 F708                  		lea	($FFFFF708).w,a3
00003AAC 49F8 A440                  		lea	($FFFFA440).w,a4
00003AB0 343C 6000                  		move.w	#$6000,d2
00003AB4 6100 0000                  		bsr.w	LoadTilesFromStart2
00003AB8 43F9 00FF 0000             		lea	($FF0000).l,a1
00003ABE 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003AC4 303C 0000                  		move.w	#0,d0
00003AC8 6100 DDBE                  		bsr.w	EniDec
00003ACC 43F9 00FF 0000             		lea	($FF0000).l,a1
00003AD2 203C 4208 0003             		move.l	#$42080003,d0
00003AD8 7221                       		moveq	#$21,d1
00003ADA 7415                       		moveq	#$15,d2
00003ADC 6100 DA1C                  		bsr.w	ShowVDPGraphics
00003AE0 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003AEA 41F9 0000 0000             		lea	(Nem_TS_1st).l,a0 ; load TS patterns
00003AF0 6100 DAB8                  		bsr.w	NemDec
00003AF4 7001                       		moveq	#1,d0		; load title screen pallet
00003AF6 6100 E936                  		bsr.w	PalLoad1
00003AFA 103C 008A                  		move.b	#$8A,d0		; play title screen music
00003AFE 6100 D976                  		bsr.w	PlaySound_Special
00003B02 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00003B08 31FC 0578 F614             		move.w	#$578,($FFFFF614).w ; run title	screen for 578 frames
00003B0E 43F8 D080                  		lea	($FFFFD080).w,a1
00003B12 7000                       		moveq	#0,d0
00003B14 323C 000F                  		move.w	#$F,d1	; ($40 / 4) - 1
00003B18                            
00003B18                            Title_ClrObjRam2:
00003B18 22C0                       		move.l	d0,(a1)+
00003B1A 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00003B1E                            
00003B1E 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
00003B24 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00003B2A 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
00003B30 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00003B36 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00003B3C 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003B42 4EB9 0000 0000             		jsr	ObjectsLoad
00003B48 6100 0000                  		bsr.w	DeformBgLayer
00003B4C 4EB9 0000 0000             		jsr	BuildSprites
00003B52 7000                       		moveq	#0,d0
00003B54 6100 DBC6                  		bsr.w	LoadPLC2
00003B58 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003B5E 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
00003B64 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003B68 0000 0040                  		ori.b	#$40,d0
00003B6C 33C0 00C0 0004             		move.w	d0,($C00004).l
00003B72 6100 E556                  		bsr.w	Pal_FadeTo
00003B76                            
00003B76                            loc_317C:
00003B76 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003B7C 6100 F824                  		bsr.w	DelayProgram
00003B80 4EB9 0000 0000             		jsr	ObjectsLoad
00003B86 6100 0000                  		bsr.w	DeformBgLayer
00003B8A 4EB9 0000 0000             		jsr	BuildSprites
00003B90 6100 DF3A                  		bsr.w	PalCycle_Title
00003B94 6100 DBC0                  		bsr.w	RunPLC_RAM
00003B98 3038 D008                  		move.w	($FFFFD008).w,d0
00003B9C 5440                       		addq.w	#2,d0
00003B9E 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00003BA2 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
00003BA6 6500                       		bcs.s	Title_ChkRegion	; if not, branch
00003BA8 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003BAE 4E75                       		rts	
00003BB0                            ; ===========================================================================
00003BB0                            
00003BB0                            Title_ChkRegion:
00003BB0 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003BB4 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00003BB6 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
00003BBC 6000                       		bra.s	Title_EnterCheat
00003BBE                            ; ===========================================================================
00003BBE                            
00003BBE                            Title_RegionJ:				; XREF: Title_ChkRegion
00003BBE 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003BC4                            
00003BC4                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003BC4 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00003BC8 D0C0                       		adda.w	d0,a0
00003BCA 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
00003BCE 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003BD2 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003BD4 6600                       		bne.s	loc_3210	; if not, branch
00003BD6 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00003BDA 4A00                       		tst.b	d0
00003BDC 6600                       		bne.s	Title_CountC
00003BDE 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00003BE2 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
00003BE6 E249                       		lsr.w	#1,d1
00003BE8 0241 0003                  		andi.w	#3,d1
00003BEC 6700                       		beq.s	Title_PlayRing
00003BEE 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00003BF2 6A00                       		bpl.s	Title_PlayRing
00003BF4 7201                       		moveq	#1,d1
00003BF6 1181 1001                  		move.b	d1,1(a0,d1.w)
00003BFA                            
00003BFA                            Title_PlayRing:
00003BFA 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00003C00 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003C04 6100 D870                  		bsr.w	PlaySound_Special
00003C08 6000                       		bra.s	Title_CountC
00003C0A                            ; ===========================================================================
00003C0A                            
00003C0A                            loc_3210:				; XREF: Title_EnterCheat
00003C0A 4A00                       		tst.b	d0
00003C0C 6700                       		beq.s	Title_CountC
00003C0E 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
00003C14 6700                       		beq.s	Title_CountC
00003C16 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003C1C                            
00003C1C                            Title_CountC:
00003C1C 1038 F605                  		move.b	($FFFFF605).w,d0
00003C20 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
00003C24 6700                       		beq.s	loc_3230	; if not, branch
00003C26 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003C2A                            
00003C2A                            loc_3230:
00003C2A 4A78 F614                  		tst.w	($FFFFF614).w
00003C2E 6700 0000                  		beq.w	Demo
00003C32 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00003C38 6700 FF3C                  		beq.w	loc_317C	; if not, branch
00003C3C                            
00003C3C                            Title_ChkLevSel:
00003C3C 4A38 FFE0                  		tst.b	($FFFFFFE0).w		; check	if level select	code is	on
00003C40 6700 0000                  		beq.w	PlayLevel		; if not, play level
00003C44 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00003C4A 6700 0000                  		beq.w	PlayLevel		; if not, play level
00003C4E 4EF9 0000 0000             		jmp	Level_Select_Menu	; if yes, goto Sonic 2 level select	
00003C54 7002                       		moveq	#2,d0
00003C56 43F8 CC00                  		lea	($FFFFCC00).w,a1
00003C5A 7000                       		moveq	#0,d0
00003C5C 323C 00DF                  		move.w	#$DF,d1
00003C60                            
00003C60                            Title_ClrScroll:
00003C60 22C0                       		move.l	d0,(a1)+
00003C62 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00003C66                            
00003C66 21C0 F616                  		move.l	d0,($FFFFF616).w
00003C6A 46FC 2700                  		move	#$2700,sr
00003C6E 4DF9 00C0 0000             		lea	($C00000).l,a6
00003C74 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003C7E 323C 03FF                  		move.w	#$3FF,d1
00003C82                            
00003C82                            Title_ClrVram:
00003C82 2C80                       		move.l	d0,(a6)
00003C84 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
00003C88                            
00003C88 6100 0000                  		bsr.w	LevSelTextLoad
00003C8C                            
00003C8C                            ; ---------------------------------------------------------------------------
00003C8C                            ; Level	Select
00003C8C                            ; ---------------------------------------------------------------------------
00003C8C                            
00003C8C                            LevelSelect:
00003C8C 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003C92 6100 F70E                  		bsr.w	DelayProgram
00003C96 6100 0000                  		bsr.w	LevSelControls
00003C9A 6100 DABA                  		bsr.w	RunPLC_RAM
00003C9E 4AB8 F680                  		tst.l	($FFFFF680).w
00003CA2 66E8                       		bne.s	LevelSelect
00003CA4 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00003CAA 67E0                       		beq.s	LevelSelect	; if not, branch
00003CAC 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003CB0 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
00003CB4 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00003CB6 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003CBA 0640 0080                  		addi.w	#$80,d0
00003CBE 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is Japanese Credits cheat on?
00003CC2 6700                       		beq.s	LevSel_NoCheat	; if not, branch
00003CC4 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
00003CC8 6700                       		beq.s	LevSel_Ending	; if yes, branch
00003CCA 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
00003CCE 6700                       		beq.s	LevSel_Credits	; if yes, branch
00003CD0                            
00003CD0                            LevSel_NoCheat:
00003CD0 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $80-$94 being played?
00003CD4 6500                       		bcs.s	LevSel_PlaySnd	; if yes, branch
00003CD6 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
00003CDA 65B0                       		bcs.s	LevelSelect	; if yes, branch
00003CDC                            
00003CDC                            LevSel_PlaySnd:
00003CDC 6100 D798                  		bsr.w	PlaySound_Special
00003CE0 60AA                       		bra.s	LevelSelect
00003CE2                            ; ===========================================================================
00003CE2                            
00003CE2                            LevSel_Ending:				; XREF: LevelSelect
00003CE2 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00003CE8 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
00003CEE 4E75                       		rts	
00003CF0                            ; ===========================================================================
00003CF0                            
00003CF0                            LevSel_Credits:				; XREF: LevelSelect
00003CF0 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00003CF6 103C 0091                  		move.b	#$91,d0
00003CFA 6100 D77A                  		bsr.w	PlaySound_Special ; play credits music
00003CFE 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00003D04 4E75                       		rts	
00003D06                            ; ===========================================================================
00003D06                            
00003D06                            LevSel_Level_SS:			; XREF: LevelSelect
00003D06 D040                       		add.w	d0,d0
00003D08 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00003D0C 6B00 FF7E                  		bmi.w	LevelSelect
00003D10 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
00003D14 6600                       		bne.s	LevSel_Level	; if not, branch
00003D16 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003D1C 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00003D20 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003D26 7000                       		moveq	#0,d0
00003D28 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003D2C 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003D30 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003D34 4E75                       		rts	
00003D36                            ; ===========================================================================
00003D36                            
00003D36                            LevSel_Level:				; XREF: LevSel_Level_SS
00003D36 0240 3FFF                  		andi.w	#$3FFF,d0
00003D3A 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00003D3E                            
00003D3E                            PlayLevel:				; XREF: ROM:00003246j ...
00003D3E 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00003D44 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003D4A 7000                       		moveq	#0,d0
00003D4C 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003D50 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003D54 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003D58 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00003D5C 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00003D60 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00003D64 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
00003D68 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003D6C 103C 00E0                  		move.b	#$E0,d0
00003D70 6100 D704                  		bsr.w	PlaySound_Special ; fade out music
00003D74 4E75                       		rts	
00003D76                            ; ===========================================================================
00003D76                            ; ---------------------------------------------------------------------------
00003D76                            ; Level	select - level pointers
00003D76                            ; ---------------------------------------------------------------------------
00003D76                            LSelectPointers:
00003D76                            		incbin	misc\ls_point.bin
00003DA0                            		even
00003DA0                            ; ---------------------------------------------------------------------------
00003DA0                            ; Level	select codes
00003DA0                            ; ---------------------------------------------------------------------------
00003DA0                            LevelSelectCode_J:
00003DA0                            		incbin	misc\ls_jcode.bin
00003DA6                            		even
00003DA6                            
00003DA6                            LevelSelectCode_US:
00003DA6                            		incbin	misc\ls_ucode.bin
00003DAC                            		even
00003DAC                            ; ===========================================================================
00003DAC                            
00003DAC                            ; ---------------------------------------------------------------------------
00003DAC                            ; Demo mode
00003DAC                            ; ---------------------------------------------------------------------------
00003DAC                            
00003DAC                            Demo:					; XREF: TitleScreen
00003DAC 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003DB2                            
00003DB2                            loc_33B6:				; XREF: loc_33E4
00003DB2 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003DB8 6100 F5E8                  		bsr.w	DelayProgram
00003DBC 6100 0000                  		bsr.w	DeformBgLayer
00003DC0 6100 DCE4                  		bsr.w	PalCycle_Load
00003DC4 6100 D990                  		bsr.w	RunPLC_RAM
00003DC8 3038 D008                  		move.w	($FFFFD008).w,d0
00003DCC 5440                       		addq.w	#2,d0
00003DCE 31C0 D008                  		move.w	d0,($FFFFD008).w
00003DD2 0C40 1C00                  		cmpi.w	#$1C00,d0
00003DD6 6500                       		bcs.s	loc_33E4
00003DD8 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00003DDE 4E75                       		rts	
00003DE0                            ; ===========================================================================
00003DE0                            
00003DE0                            loc_33E4:				; XREF: Demo
00003DE0 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003DE6 6600 FE54                  		bne.w	Title_ChkLevSel	; if yes, branch
00003DEA 4A78 F614                  		tst.w	($FFFFF614).w
00003DEE 6600 FFC2                  		bne.w	loc_33B6
00003DF2 103C 00E0                  		move.b	#$E0,d0
00003DF6 6100 D67E                  		bsr.w	PlaySound_Special ; fade out music
00003DFA 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00003DFE 0240 0007                  		andi.w	#7,d0
00003E02 D040                       		add.w	d0,d0
00003E04 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00003E08 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00003E0C 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00003E10 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00003E16 6500                       		bcs.s	loc_3422	; if yes, branch
00003E18 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00003E1E                            
00003E1E                            loc_3422:
00003E1E 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00003E24 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00003E2A 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00003E2E 6600                       		bne.s	Demo_Level	; if not, branch
00003E30 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003E36 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00003E3A 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00003E3E                            
00003E3E                            Demo_Level:
00003E3E 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003E44 7000                       		moveq	#0,d0
00003E46 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003E4A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003E4E 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003E52 4E75                       		rts	
00003E54                            ; ===========================================================================
00003E54                            ; ---------------------------------------------------------------------------
00003E54                            ; Levels used in demos
00003E54                            ; ---------------------------------------------------------------------------
00003E54                            Demo_Levels:	incbin	misc\dm_ord1.bin
00003E5C                            		even
00003E5C                            
00003E5C                            ; ---------------------------------------------------------------------------
00003E5C                            ; Subroutine to	change what you're selecting in the level select
00003E5C                            ; ---------------------------------------------------------------------------
00003E5C                            
00003E5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003E5C                            
00003E5C                            
00003E5C                            LevSelControls:				; XREF: LevelSelect
00003E5C 1238 F605                  		move.b	($FFFFF605).w,d1
00003E60 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003E64 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00003E66 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003E6A 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00003E6C                            
00003E6C                            LevSel_UpDown:
00003E6C 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003E72 1238 F604                  		move.b	($FFFFF604).w,d1
00003E76 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00003E7A 6700                       		beq.s	LevSel_SndTest	; if not, branch
00003E7C 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003E80 0801 0000                  		btst	#0,d1		; is up	pressed?
00003E84 6700                       		beq.s	LevSel_Down	; if not, branch
00003E86 5340                       		subq.w	#1,d0		; move up 1 selection
00003E88 6400                       		bcc.s	LevSel_Down
00003E8A 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00003E8C                            
00003E8C                            LevSel_Down:
00003E8C 0801 0001                  		btst	#1,d1		; is down pressed?
00003E90 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003E92 5240                       		addq.w	#1,d0		; move down 1 selection
00003E94 0C40 0015                  		cmpi.w	#$15,d0
00003E98 6500                       		bcs.s	LevSel_Refresh
00003E9A 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
00003E9C                            
00003E9C                            LevSel_Refresh:
00003E9C 31C0 FF82                  		move.w	d0,($FFFFFF82).w ; set new selection
00003EA0 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00003EA4 4E75                       		rts	
00003EA6                            ; ===========================================================================
00003EA6                            
00003EA6                            LevSel_SndTest:				; XREF: LevSelControls
00003EA6 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
00003EAC 6600                       		bne.s	LevSel_NoMove	; if not, branch
00003EAE 1238 F605                  		move.b	($FFFFF605).w,d1
00003EB2 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
00003EB6 6700                       		beq.s	LevSel_NoMove	; if not, branch
00003EB8 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003EBC 0801 0002                  		btst	#2,d1		; is left pressed?
00003EC0 6700                       		beq.s	LevSel_Right	; if not, branch
00003EC2 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
00003EC4 6400                       		bcc.s	LevSel_Right
00003EC6 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
00003EC8                            
00003EC8                            LevSel_Right:
00003EC8 0801 0003                  		btst	#3,d1		; is right pressed?
00003ECC 6700                       		beq.s	LevSel_Refresh2	; if not, branch
00003ECE 5240                       		addq.w	#1,d0		; add 1	to sound test
00003ED0 0C40 0050                  		cmpi.w	#$50,d0
00003ED4 6500                       		bcs.s	LevSel_Refresh2
00003ED6 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
00003ED8                            
00003ED8                            LevSel_Refresh2:
00003ED8 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
00003EDC 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
00003EE0                            
00003EE0                            LevSel_NoMove:
00003EE0 4E75                       		rts	
00003EE2                            ; End of function LevSelControls
00003EE2                            
00003EE2                            ; ---------------------------------------------------------------------------
00003EE2                            ; Subroutine to load level select text
00003EE2                            ; ---------------------------------------------------------------------------
00003EE2                            
00003EE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003EE2                            
00003EE2                            
00003EE2                            LevSelTextLoad:				; XREF: TitleScreen
00003EE2 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003EE8 4DF9 00C0 0000             		lea	($C00000).l,a6
00003EEE 283C 6210 0003             		move.l	#$62100003,d4	; screen position (text)
00003EF4 363C E680                  		move.w	#$E680,d3	; VRAM setting
00003EF8 7214                       		moveq	#$14,d1		; number of lines of text
00003EFA                            
00003EFA                            loc_34FE:				; XREF: LevSelTextLoad+26j
00003EFA 2D44 0004                  		move.l	d4,4(a6)
00003EFE 6100 0000                  		bsr.w	LevSel_ChgLine
00003F02 0684 0080 0000             		addi.l	#$800000,d4
00003F08 51C9 FFF0                  		dbf	d1,loc_34FE
00003F0C 7000                       		moveq	#0,d0
00003F0E 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003F12 3200                       		move.w	d0,d1
00003F14 283C 6210 0003             		move.l	#$62100003,d4
00003F1A EF48                       		lsl.w	#7,d0
00003F1C 4840                       		swap	d0
00003F1E D880                       		add.l	d0,d4
00003F20 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003F26 E749                       		lsl.w	#3,d1
00003F28 3001                       		move.w	d1,d0
00003F2A D241                       		add.w	d1,d1
00003F2C D240                       		add.w	d0,d1
00003F2E D2C1                       		adda.w	d1,a1
00003F30 363C C680                  		move.w	#$C680,d3
00003F34 2D44 0004                  		move.l	d4,4(a6)
00003F38 6100 0000                  		bsr.w	LevSel_ChgLine
00003F3C 363C E680                  		move.w	#$E680,d3
00003F40 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
00003F46 6600                       		bne.s	loc_3550
00003F48 363C C680                  		move.w	#$C680,d3
00003F4C                            
00003F4C                            loc_3550:
00003F4C 23FC 6C30 0003 00C0 0004   		move.l	#$6C300003,($C00004).l ; screen	position (sound	test)
00003F56 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003F5A 0640 0080                  		addi.w	#$80,d0
00003F5E 1400                       		move.b	d0,d2
00003F60 E808                       		lsr.b	#4,d0
00003F62 6100 0000                  		bsr.w	LevSel_ChgSnd
00003F66 1002                       		move.b	d2,d0
00003F68 6100 0000                  		bsr.w	LevSel_ChgSnd
00003F6C 4E75                       		rts	
00003F6E                            ; End of function LevSelTextLoad
00003F6E                            
00003F6E                            
00003F6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003F6E                            
00003F6E                            
00003F6E                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00003F6E 0240 000F                  		andi.w	#$F,d0
00003F72 0C00 000A                  		cmpi.b	#$A,d0
00003F76 6500                       		bcs.s	loc_3580
00003F78 5E00                       		addi.b	#7,d0
00003F7A                            
00003F7A                            loc_3580:
00003F7A D043                       		add.w	d3,d0
00003F7C 3C80                       		move.w	d0,(a6)
00003F7E 4E75                       		rts	
00003F80                            ; End of function LevSel_ChgSnd
00003F80                            
00003F80                            
00003F80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003F80                            
00003F80                            
00003F80                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003F80 7417                       		moveq	#$17,d2		; number of characters per line
00003F82                            
00003F82                            loc_3588:
00003F82 7000                       		moveq	#0,d0
00003F84 1019                       		move.b	(a1)+,d0
00003F86 6A00                       		bpl.s	loc_3598
00003F88 3CBC 0000                  		move.w	#0,(a6)
00003F8C 51CA FFF4                  		dbf	d2,loc_3588
00003F90 4E75                       		rts	
00003F92                            ; ===========================================================================
00003F92                            
00003F92                            loc_3598:				; XREF: LevSel_ChgLine
00003F92 D043                       		add.w	d3,d0
00003F94 3C80                       		move.w	d0,(a6)
00003F96 51CA FFEA                  		dbf	d2,loc_3588
00003F9A 4E75                       		rts	
00003F9C                            ; End of function LevSel_ChgLine
00003F9C                            
00003F9C                            ; ===========================================================================
00003F9C                            ; ---------------------------------------------------------------------------
00003F9C                            ; Level	select menu text
00003F9C                            ; ---------------------------------------------------------------------------
00003F9C                            LevelMenuText:	incbin	misc\menutext.bin
00004194                            		even
00004194                            ; ---------------------------------------------------------------------------
00004194                            ; Music	playlist
00004194                            ; ---------------------------------------------------------------------------
00004194                            MusicList1:	incbin	misc\muslist1.bin
0000419A                            		even
0000419A                            MusicList2:	incbin	misc\muslist2.bin
000041A0                            		even
000041A0                            MusicList3:	incbin	misc\muslist3.bin
000041A6                            		even
000041A6                            MusicList4:	incbin	misc\muslist4.bin
000041AC                            		even						
000041AC                            ; ===========================================================================
000041AC                            
000041AC                            ; ---------------------------------------------------------------------------
000041AC                            ; Level
000041AC                            ; ---------------------------------------------------------------------------
000041AC                            
000041AC                            Level:					; XREF: GameModeArray
000041AC 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
000041B2 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000041B6 6B00                       		bmi.s	loc_37B6
000041B8 103C 00E0                  		move.b	#$E0,d0
000041BC 6100 D2B8                  		bsr.w	PlaySound_Special ; fade out music
000041C0                            
000041C0                            loc_37B6:
000041C0 6100 D586                  		bsr.w	ClearPLC
000041C4 6100 DFBA                  		bsr.w	Pal_FadeFrom
000041C8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000041CC 6B00                       		bmi.s	Level_ClrRam
000041CE 46FC 2700                  		move	#$2700,sr
000041D2 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000041DC 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000041E2 6100 D3C6                  		bsr.w	NemDec
000041E6 46FC 2300                  		move	#$2300,sr
000041EA 7000                       		moveq	#0,d0
000041EC 1038 FE10                  		move.b	($FFFFFE10).w,d0
000041F0 E948                       		lsl.w	#4,d0
000041F2 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000041F8 45F2 0000                  		lea	(a2,d0.w),a2
000041FC 7000                       		moveq	#0,d0
000041FE 1012                       		move.b	(a2),d0
00004200 6700                       		beq.s	loc_37FC
00004202 6100 D4E6                  		bsr.w	LoadPLC		; load level patterns
00004206                            
00004206                            loc_37FC:
00004206 7001                       		moveq	#1,d0
00004208 6100 D4E0                  		bsr.w	LoadPLC		; load standard	patterns
0000420C                            
0000420C                            Level_ClrRam:
0000420C 43F8 D000                  		lea	($FFFFD000).w,a1
00004210 7000                       		moveq	#0,d0
00004212 323C 07FF                  		move.w	#$7FF,d1
00004216                            
00004216                            Level_ClrObjRam:
00004216 22C0                       		move.l	d0,(a1)+
00004218 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
0000421C                            
0000421C 43F8 F628                  		lea	($FFFFF628).w,a1
00004220 7000                       		moveq	#0,d0
00004222 323C 0015                  		move.w	#$15,d1
00004226                            
00004226                            Level_ClrVars:
00004226 22C0                       		move.l	d0,(a1)+
00004228 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
0000422C                            
0000422C 43F8 F700                  		lea	($FFFFF700).w,a1
00004230 7000                       		moveq	#0,d0
00004232 323C 003F                  		move.w	#$3F,d1
00004236                            
00004236                            Level_ClrVars2:
00004236 22C0                       		move.l	d0,(a1)+
00004238 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
0000423C                            
0000423C 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004240 7000                       		moveq	#0,d0
00004242 323C 0047                  		move.w	#$47,d1
00004246                            
00004246                            Level_ClrVars3:
00004246 22C0                       		move.l	d0,(a1)+
00004248 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
0000424C                            
0000424C 46FC 2700                  		move	#$2700,sr
00004250 6100 D12E                  		bsr.w	ClearScreen
00004254 4DF9 00C0 0004             		lea	($C00004).l,a6
0000425A 3CBC 8B03                  		move.w	#$8B03,(a6)
0000425E 3CBC 8230                  		move.w	#$8230,(a6)
00004262 3CBC 8407                  		move.w	#$8407,(a6)
00004266 3CBC 857C                  		move.w	#$857C,(a6)
0000426A 3CBC 9001                  		move.w	#$9001,(a6)
0000426E 3CBC 8004                  		move.w	#$8004,(a6)
00004272 3CBC 8720                  		move.w	#$8720,(a6)
00004276 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000427C 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00004280 4278 C800                  		clr.w	($FFFFC800).w
00004284 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
0000428C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00004292 6600                       		bne.s	Level_LoadPal	; if not, branch
00004294 3CBC 8014                  		move.w	#$8014,(a6)
00004298 7000                       		moveq	#0,d0
0000429A 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000429E D040                       		add.w	d0,d0
000042A0 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
000042A6 3031 0000                  		move.w	(a1,d0.w),d0
000042AA 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
000042AE 31C0 F648                  		move.w	d0,($FFFFF648).w
000042B2 31C0 F64A                  		move.w	d0,($FFFFF64A).w
000042B6 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
000042BA 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
000042BE 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
000042C4                            
000042C4                            Level_LoadPal:
000042C4 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000042CA 46FC 2300                  		move	#$2300,sr
000042CE 7003                       		moveq	#3,d0
000042D0 6100 E198                  		bsr.w	PalLoad2	; load Sonic's pallet line
000042D4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000042DA 6600                       		bne.s	Level_GetBgm	; if not, branch
000042DC 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
000042DE 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
000042E4 6600                       		bne.s	Level_WaterPal	; if not, branch
000042E6 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
000042E8                            
000042E8                            Level_WaterPal:
000042E8 6100 E1B8                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
000042EC 4A38 FE30                  		tst.b	($FFFFFE30).w
000042F0 6700                       		beq.s	Level_GetBgm
000042F2 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000042F8                            
000042F8                            ; NineKode begins here - How to play different songs on different acts
000042F8                             
000042F8                            Level_GetBgm:
000042F8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000042FC 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00004300 7000                       		moveq	#0,d0
00004302 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004306                             
00004306 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
0000430C 6600                       		bne.s	Level_GetBgm2	; if not, branch
0000430E 43F9 0000 4194             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00004314 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00004316                             
00004316                            Level_GetBgm2:
00004316 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
0000431C 6600                       		bne.s	Level_GetBgm3	; if not, branch
0000431E 43F9 0000 419A             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00004324 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00004326                             
00004326                            Level_GetBgm3:
00004326 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
0000432C 6600                       		bne.s	Level_GetBgm4	; if not, branch
0000432E 43F9 0000 41A0             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00004334 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00004336                             
00004336                            Level_GetBgm4:
00004336 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
0000433C 6600                       		bne.s	Level_PlayBgm	; if not, branch
0000433E 43F9 0000 41A6             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00004344                             
00004344                            Level_PlayBgm:
00004344 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00004348 6100 D126                  		bsr.w	PlaySound	; play music
0000434C 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00004352                             
00004352                            ; NineKode ends here
00004352                            
00004352                            Level_TtlCard:
00004352 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004358 6100 F048                  		bsr.w	DelayProgram
0000435C 4EB9 0000 0000             		jsr	ObjectsLoad
00004362 4EB9 0000 0000             		jsr	BuildSprites
00004368 6100 D3EC                  		bsr.w	RunPLC_RAM
0000436C 3038 D108                  		move.w	($FFFFD108).w,d0
00004370 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00004374 66DC                       		bne.s	Level_TtlCard	; if not, branch
00004376 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
0000437A 66D6                       		bne.s	Level_TtlCard	; if yes, branch
0000437C 4EB9 0000 0000             		jsr	Hud_Base
00004382                            
00004382                            loc_3946:
00004382 7003                       		moveq	#3,d0
00004384 6100 E0A8                  		bsr.w	PalLoad1	; load Sonic's pallet line
00004388 6100 0000                  		bsr.w	LevelSizeLoad
0000438C 6100 0000                  		bsr.w	DeformBgLayer
00004390 08F8 0002 F754             		bset	#2,($FFFFF754).w
00004396 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
0000439A 6100 0000                  		bsr.w	LoadTilesFromStart
0000439E 4EB9 0000 0000             		jsr	FloorLog_Unk
000043A4 6100 0000                  		bsr.w	ColIndexLoad
000043A8 6100 0000                  		bsr.w	LZWaterEffects
000043AC 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000043B2 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000043B6 6B00                       		bmi.s	Level_ChkDebug
000043B8 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
000043BE                            
000043BE                            Level_ChkDebug:
000043BE 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
000043C2 6700                       		beq.s	Level_ChkWater	; if not, branch
000043C4 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
000043CA 6700                       		beq.s	Level_ChkWater	; if not, branch
000043CC 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000043D2                            
000043D2                            Level_ChkWater:
000043D2 31FC 0000 F602             		move.w	#0,($FFFFF602).w
000043D8 31FC 0000 F604             		move.w	#0,($FFFFF604).w
000043DE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000043E4 6600                       		bne.s	Level_LoadObj	; if not, branch
000043E6 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
000043EC 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
000043F2 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
000043F8 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
000043FE                            
000043FE                            Level_LoadObj:
000043FE 4EB9 0000 0000             		jsr	ObjPosLoad
00004404 4EB9 0000 0000             		jsr	ObjectsLoad
0000440A 4EB9 0000 0000             		jsr	BuildSprites
00004410 7000                       		moveq	#0,d0
00004412 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00004416 6600                       		bne.s	loc_39E8	; if yes, branch
00004418 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000441C 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004420 11C0 FEBF                          move.b  d0,($FFFFFEBF).w ; value used to increment centiseconds
00004424 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00004428                            
00004428                            loc_39E8:
00004428 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
0000442C 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00004430 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00004434 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00004438 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000443C 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00004440 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00004444 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00004448 6100 0000                  		bsr.w	OscillateNumInit
0000444C 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004452 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00004458 31FC 0000 F790             		move.w	#0,($FFFFF790).w
0000445E 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00004464 7000                       		moveq	#0,d0
00004466 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000446A E548                       		lsl.w	#2,d0
0000446C 2271 0000                  		movea.l	(a1,d0.w),a1
00004470 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004474 6A00                       		bpl.s	Level_Demo	; if yes, branch
00004476 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
0000447C 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00004480 5340                       		subq.w	#1,d0
00004482 E548                       		lsl.w	#2,d0
00004484 2271 0000                  		movea.l	(a1,d0.w),a1
00004488                            
00004488                            Level_Demo:
00004488 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
0000448E 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00004492 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004498 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000449C 6A00                       		bpl.s	Level_ChkWaterPal
0000449E 31FC 021C F614             		move.w	#540,($FFFFF614).w
000044A4 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
000044AA 6600                       		bne.s	Level_ChkWaterPal
000044AC 31FC 01FE F614             		move.w	#510,($FFFFF614).w
000044B2                            
000044B2                            Level_ChkWaterPal:
000044B2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
000044B8 6600                       		bne.s	Level_Delay	; if not, branch
000044BA 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
000044BC 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
000044C2 6600                       		bne.s	Level_WaterPal2	; if not, branch
000044C4 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
000044C6                            
000044C6                            Level_WaterPal2:
000044C6 6100 E016                  		bsr.w	PalLoad4_Water
000044CA                            
000044CA                            Level_Delay:
000044CA 323C 0003                  		move.w	#3,d1
000044CE                            
000044CE                            Level_DelayLoop:
000044CE 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
000044D4 6100 EECC                  		bsr.w	DelayProgram
000044D8 51C9 FFF4                  		dbf	d1,Level_DelayLoop
000044DC                            
000044DC 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
000044E2 6100 DBEC                  		bsr.w	Pal_FadeTo2
000044E6 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000044EA 6B00                       		bmi.s	Level_ClrCardArt
000044EC 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
000044F0 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
000044F4 5838 D124                  		addq.b	#4,($FFFFD124).w
000044F8 5838 D164                  		addq.b	#4,($FFFFD164).w
000044FC 6000                       		bra.s	Level_StartGame
000044FE                            ; ===========================================================================
000044FE                            
000044FE                            Level_ClrCardArt:
000044FE 7002                       		moveq	#2,d0
00004500 4EB9 0000 16EA             		jsr	(LoadPLC).l	; load explosion patterns
00004506 7000                       		moveq	#0,d0
00004508 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000450C 0640 0015                  		addi.w	#$15,d0
00004510 4EB9 0000 16EA             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00004516                            
00004516                            Level_StartGame:
00004516 11FC 0001 FE1E                     move.b    #1,($FFFFFE1E).w ; update time counter
0000451C 08B8 0007 F600                     bclr    #7,($FFFFF600).w ; subtract 80 from screen mode
00004522                            
00004522                            ; ---------------------------------------------------------------------------
00004522                            ; Main level loop (when	all title card and loading sequences are finished)
00004522                            ; ---------------------------------------------------------------------------
00004522                            
00004522                            Level_MainLoop:
00004522 6100 CF5E                  		bsr.w	PauseGame
00004526 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000452C 6100 EE74                  		bsr.w	DelayProgram
00004530 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00004534 6100 0000                  		bsr.w	MoveSonicInDemo
00004538 6100 0000                  		bsr.w	LZWaterEffects
0000453C 4EB9 0000 0000             		jsr	ObjectsLoad
00004542 4A78 FE08                  		tst.w	($FFFFFE08).w
00004546 6600                       		bne.s	loc_3B10
00004548 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000454E 6400                       		bcc.s	loc_3B14
00004550                            
00004550                            loc_3B10:
00004550 6100 0000                  		bsr.w	DeformBgLayer
00004554                            
00004554                            loc_3B14:
00004554 4EB9 0000 0000             		jsr	BuildSprites
0000455A 4EB9 0000 0000             		jsr	ObjPosLoad
00004560 6100 D544                  		bsr.w	PalCycle_Load
00004564 6100 D1F0                  		bsr.w	RunPLC_RAM
00004568 6100 0000                  		bsr.w	OscillateNumDo
0000456C 6100 0000                  		bsr.w	ChangeRingFrame
00004570 6100 0000                  		bsr.w	SignpostArtLoad
00004574 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
0000457A 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
0000457C 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00004580 6600 FC2A                  		bne.w	Level		; if yes, branch
00004584 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
0000458A 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
0000458E 4E75                       		rts	
00004590                            ; ===========================================================================
00004590                            
00004590                            Level_ChkDemo:				; XREF: Level_MainLoop
00004590 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00004594 6600                       		bne.s	Level_EndDemo	; if yes, branch
00004596 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
0000459A 6700                       		beq.s	Level_EndDemo	; if not, branch
0000459C 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000045A2 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
000045A6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000045AC 4E75                       		rts	
000045AE                            ; ===========================================================================
000045AE                            
000045AE                            Level_EndDemo:				; XREF: Level_ChkDemo
000045AE 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
000045B4 6600                       		bne.s	loc_3B88	; if not, branch
000045B6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000045BC 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000045C0 6A00                       		bpl.s	loc_3B88	; if yes, branch
000045C2 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
000045C8                            
000045C8                            loc_3B88:
000045C8 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
000045CE 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000045D4 4278 F794                  		clr.w	($FFFFF794).w
000045D8                            
000045D8                            loc_3B98:
000045D8 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
000045DE 6100 EDC2                  		bsr.w	DelayProgram
000045E2 6100 0000                  		bsr.w	MoveSonicInDemo
000045E6 4EB9 0000 0000             		jsr	ObjectsLoad
000045EC 4EB9 0000 0000             		jsr	BuildSprites
000045F2 4EB9 0000 0000             		jsr	ObjPosLoad
000045F8 5378 F794                  		subq.w	#1,($FFFFF794).w
000045FC 6A00                       		bpl.s	loc_3BC8
000045FE 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004604 6100 DBA0                  		bsr.w	Pal_FadeOut
00004608                            
00004608                            loc_3BC8:
00004608 4A78 F614                  		tst.w	($FFFFF614).w
0000460C 66CA                       		bne.s	loc_3B98
0000460E 4E75                       		rts	
00004610                            ; ===========================================================================
00004610                            ; ---------------------------------------------------------------------------
00004610                            ; Subroutine to	do special water effects in Labyrinth Zone
00004610                            ; ---------------------------------------------------------------------------
00004610                            
00004610                            LZWaterEffects:				; XREF: Level
00004610 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00004616 6600                       		bne.s	locret_3C28	; if not, branch
00004618 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000461E 6400                       		bcc.s	LZMoveWater
00004620 6100 0000                  		bsr.w	LZWindTunnels
00004624 6100 0000                  		bsr.w	LZWaterSlides
00004628 6100 0000                  		bsr.w	LZDynamicWater
0000462C                            
0000462C                            LZMoveWater:
0000462C 4238 F64E                  		clr.b	($FFFFF64E).w
00004630 7000                       		moveq	#0,d0
00004632 1038 FE60                  		move.b	($FFFFFE60).w,d0
00004636 E248                       		lsr.w	#1,d0
00004638 D078 F648                  		add.w	($FFFFF648).w,d0
0000463C 31C0 F646                  		move.w	d0,($FFFFF646).w
00004640 3038 F646                  		move.w	($FFFFF646).w,d0
00004644 9078 F704                  		sub.w	($FFFFF704).w,d0
00004648 6400                       		bcc.s	loc_3C1A
0000464A 4A40                       		tst.w	d0
0000464C 6A00                       		bpl.s	loc_3C1A
0000464E 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00004654 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
0000465A                            
0000465A                            loc_3C1A:
0000465A 0C40 00DF                  		cmpi.w	#$DF,d0
0000465E 6500                       		bcs.s	loc_3C24
00004660 303C 00DF                  		move.w	#$DF,d0
00004664                            
00004664                            loc_3C24:
00004664 11C0 F625                  		move.b	d0,($FFFFF625).w
00004668                            
00004668                            locret_3C28:
00004668 4E75                       		rts	
0000466A                            ; ===========================================================================
0000466A                            ; ---------------------------------------------------------------------------
0000466A                            ; Labyrinth default water heights
0000466A                            ; ---------------------------------------------------------------------------
0000466A                            WaterHeight:	incbin	misc\lz_heigh.bin
00004672                            		even
00004672                            
00004672                            ; ===========================================================================
00004672                            
00004672                            ; ---------------------------------------------------------------------------
00004672                            ; Labyrinth dynamic water routines
00004672                            ; ---------------------------------------------------------------------------
00004672                            
00004672                            LZDynamicWater:				; XREF: LZWaterEffects
00004672 7000                       		moveq	#0,d0
00004674 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004678 D040                       		add.w	d0,d0
0000467A 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
0000467E 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004682 7200                       		moveq	#0,d1
00004684 1238 F64C                  		move.b	($FFFFF64C).w,d1
00004688 3038 F64A                  		move.w	($FFFFF64A).w,d0
0000468C 9078 F648                  		sub.w	($FFFFF648).w,d0
00004690 6700                       		beq.s	locret_3C5A
00004692 6400                       		bcc.s	loc_3C56
00004694 4441                       		neg.w	d1
00004696                            
00004696                            loc_3C56:
00004696 D378 F648                  		add.w	d1,($FFFFF648).w
0000469A                            
0000469A                            locret_3C5A:
0000469A 4E75                       		rts	
0000469C                            ; ===========================================================================
0000469C 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
0000469E 0000                       		dc.w DynWater_LZ2-DynWater_Index
000046A0 0000                       		dc.w DynWater_LZ3-DynWater_Index
000046A2 0000                       		dc.w DynWater_SBZ3-DynWater_Index
000046A4                            ; ===========================================================================
000046A4                            
000046A4                            DynWater_LZ1:				; XREF: DynWater_Index
000046A4 3038 F700                  		move.w	($FFFFF700).w,d0
000046A8 1438 F64D                  		move.b	($FFFFF64D).w,d2
000046AC 6600                       		bne.s	loc_3CD0
000046AE 323C 00B8                  		move.w	#$B8,d1
000046B2 0C40 0600                  		cmpi.w	#$600,d0
000046B6 6500                       		bcs.s	loc_3CB4
000046B8 323C 0108                  		move.w	#$108,d1
000046BC 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
000046C2 6500                       		bcs.s	loc_3CBA
000046C4 0C40 0C00                  		cmpi.w	#$C00,d0
000046C8 6500                       		bcs.s	loc_3CB4
000046CA 323C 0318                  		move.w	#$318,d1
000046CE 0C40 1080                  		cmpi.w	#$1080,d0
000046D2 6500                       		bcs.s	loc_3CB4
000046D4 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
000046DA 323C 05C8                  		move.w	#$5C8,d1
000046DE 0C40 1380                  		cmpi.w	#$1380,d0
000046E2 6500                       		bcs.s	loc_3CB4
000046E4 323C 03A8                  		move.w	#$3A8,d1
000046E8 B278 F648                  		cmp.w	($FFFFF648).w,d1
000046EC 6600                       		bne.s	loc_3CB4
000046EE 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
000046F4                            
000046F4                            loc_3CB4:
000046F4 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000046F8 4E75                       		rts	
000046FA                            ; ===========================================================================
000046FA                            
000046FA                            loc_3CBA:				; XREF: DynWater_LZ1
000046FA 0C40 0C80                  		cmpi.w	#$C80,d0
000046FE 65F4                       		bcs.s	loc_3CB4
00004700 323C 00E8                  		move.w	#$E8,d1
00004704 0C40 1500                  		cmpi.w	#$1500,d0
00004708 65EA                       		bcs.s	loc_3CB4
0000470A 323C 0108                  		move.w	#$108,d1
0000470E 60E4                       		bra.s	loc_3CB4
00004710                            ; ===========================================================================
00004710                            
00004710                            loc_3CD0:				; XREF: DynWater_LZ1
00004710 5302                       		subq.b	#1,d2
00004712 6600                       		bne.s	locret_3CF4
00004714 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
0000471A 6400                       		bcc.s	locret_3CF4
0000471C 323C 03A8                  		move.w	#$3A8,d1
00004720 0C40 1300                  		cmpi.w	#$1300,d0
00004724 6500                       		bcs.s	loc_3CF0
00004726 323C 0108                  		move.w	#$108,d1
0000472A 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004730                            
00004730                            loc_3CF0:
00004730 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004734                            
00004734                            locret_3CF4:
00004734 4E75                       		rts	
00004736                            ; ===========================================================================
00004736                            
00004736                            DynWater_LZ2:				; XREF: DynWater_Index
00004736 3038 F700                  		move.w	($FFFFF700).w,d0
0000473A 323C 0328                  		move.w	#$328,d1
0000473E 0C40 0500                  		cmpi.w	#$500,d0
00004742 6500                       		bcs.s	loc_3D12
00004744 323C 03C8                  		move.w	#$3C8,d1
00004748 0C40 0B00                  		cmpi.w	#$B00,d0
0000474C 6500                       		bcs.s	loc_3D12
0000474E 323C 0428                  		move.w	#$428,d1
00004752                            
00004752                            loc_3D12:
00004752 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004756 4E75                       		rts	
00004758                            ; ===========================================================================
00004758                            
00004758                            DynWater_LZ3:				; XREF: DynWater_Index
00004758 3038 F700                  		move.w	($FFFFF700).w,d0
0000475C 1438 F64D                  		move.b	($FFFFF64D).w,d2
00004760 6600                       		bne.s	loc_3D5E
00004762 323C 0900                  		move.w	#$900,d1
00004766 0C40 0600                  		cmpi.w	#$600,d0
0000476A 6500                       		bcs.s	loc_3D54
0000476C 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
00004772 6500                       		bcs.s	loc_3D54
00004774 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
0000477A 6400                       		bcc.s	loc_3D54
0000477C 323C 04C8                  		move.w	#$4C8,d1
00004780 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
00004786 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
0000478C 303C 00B7                  		move.w	#$B7,d0
00004790 6100 CCE4                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
00004794                            
00004794                            loc_3D54:
00004794 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004798 31C1 F648                  		move.w	d1,($FFFFF648).w
0000479C 4E75                       		rts	
0000479E                            ; ===========================================================================
0000479E                            
0000479E                            loc_3D5E:				; XREF: DynWater_LZ3
0000479E 5302                       		subq.b	#1,d2
000047A0 6600                       		bne.s	loc_3DA8
000047A2 323C 04C8                  		move.w	#$4C8,d1
000047A6 0C40 0770                  		cmpi.w	#$770,d0
000047AA 6500                       		bcs.s	loc_3DA2
000047AC 323C 0308                  		move.w	#$308,d1
000047B0 0C40 1400                  		cmpi.w	#$1400,d0
000047B4 6500                       		bcs.s	loc_3DA2
000047B6 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
000047BC 6700                       		beq.s	loc_3D8E
000047BE 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000047C4 6400                       		bcc.s	loc_3D8E
000047C6 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
000047CC 6400                       		bcc.s	loc_3DA2
000047CE                            
000047CE                            loc_3D8E:
000047CE 323C 0508                  		move.w	#$508,d1
000047D2 31C1 F648                  		move.w	d1,($FFFFF648).w
000047D6 0C40 1770                  		cmpi.w	#$1770,d0
000047DA 6500                       		bcs.s	loc_3DA2
000047DC 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000047E2                            
000047E2                            loc_3DA2:
000047E2 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000047E6 4E75                       		rts	
000047E8                            ; ===========================================================================
000047E8                            
000047E8                            loc_3DA8:
000047E8 5302                       		subq.b	#1,d2
000047EA 6600                       		bne.s	loc_3DD2
000047EC 323C 0508                  		move.w	#$508,d1
000047F0 0C40 1860                  		cmpi.w	#$1860,d0
000047F4 6500                       		bcs.s	loc_3DCC
000047F6 323C 0188                  		move.w	#$188,d1
000047FA 0C40 1AF0                  		cmpi.w	#$1AF0,d0
000047FE 6400                       		bcc.s	loc_3DC6
00004800 B278 F648                  		cmp.w	($FFFFF648).w,d1
00004804 6600                       		bne.s	loc_3DCC
00004806                            
00004806                            loc_3DC6:
00004806 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
0000480C                            
0000480C                            loc_3DCC:
0000480C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004810 4E75                       		rts	
00004812                            ; ===========================================================================
00004812                            
00004812                            loc_3DD2:
00004812 5302                       		subq.b	#1,d2
00004814 6600                       		bne.s	loc_3E0E
00004816 323C 0188                  		move.w	#$188,d1
0000481A 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000481E 6500                       		bcs.s	loc_3E04
00004820 323C 0900                  		move.w	#$900,d1
00004824 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004828 6500                       		bcs.s	loc_3E04
0000482A 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00004830 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00004836 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
0000483C 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00004842 4E75                       		rts	
00004844                            ; ===========================================================================
00004844                            
00004844                            loc_3E04:
00004844 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004848 31C1 F648                  		move.w	d1,($FFFFF648).w
0000484C 4E75                       		rts	
0000484E                            ; ===========================================================================
0000484E                            
0000484E                            loc_3E0E:
0000484E 0C40 1E00                  		cmpi.w	#$1E00,d0
00004852 6500                       		bcs.s	locret_3E1A
00004854 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
0000485A                            
0000485A                            locret_3E1A:
0000485A 4E75                       		rts	
0000485C                            ; ===========================================================================
0000485C                            
0000485C                            DynWater_SBZ3:				; XREF: DynWater_Index
0000485C 323C 0228                  		move.w	#$228,d1
00004860 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00004866 6500                       		bcs.s	loc_3E2C
00004868 323C 04C8                  		move.w	#$4C8,d1
0000486C                            
0000486C                            loc_3E2C:
0000486C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004870 4E75                       		rts
00004872                            
00004872                            ; ---------------------------------------------------------------------------
00004872                            ; Labyrinth Zone "wind tunnels"	subroutine
00004872                            ; ---------------------------------------------------------------------------
00004872                            
00004872                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004872                            
00004872                            
00004872                            LZWindTunnels:				; XREF: LZWaterEffects
00004872 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004876 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
0000487A 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00004880 7000                       		moveq	#0,d0
00004882 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004886 E748                       		lsl.w	#3,d0
00004888 D4C0                       		adda.w	d0,a2
0000488A 7200                       		moveq	#0,d1
0000488C 4A38 FE11                  		tst.b	($FFFFFE11).w
00004890 6600                       		bne.s	loc_3E56
00004892 7201                       		moveq	#1,d1
00004894 514A                       		subq.w	#8,a2
00004896                            
00004896                            loc_3E56:
00004896 43F8 D000                  		lea	($FFFFD000).w,a1
0000489A                            
0000489A                            LZWind_Loop:
0000489A 3029 0008                  		move.w	8(a1),d0
0000489E B052                       		cmp.w	(a2),d0
000048A0 6500 0000                  		bcs.w	loc_3EF4
000048A4 B06A 0004                  		cmp.w	4(a2),d0
000048A8 6400 0000                  		bcc.w	loc_3EF4
000048AC 3429 000C                  		move.w	$C(a1),d2
000048B0 B46A 0002                  		cmp.w	2(a2),d2
000048B4 6500                       		bcs.s	loc_3EF4
000048B6 B46A 0006                  		cmp.w	6(a2),d2
000048BA 6400                       		bcc.s	loc_3EF4
000048BC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000048C0 0200 003F                  		andi.b	#$3F,d0
000048C4 6600                       		bne.s	loc_3E90
000048C6 303C 00D0                  		move.w	#$D0,d0
000048CA 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play rushing water sound
000048D0                            
000048D0                            loc_3E90:
000048D0 4A38 F7C9                  		tst.b	($FFFFF7C9).w
000048D4 6600 0000                  		bne.w	locret_3F0A
000048D8 0C29 0004 0024             		cmpi.b	#4,$24(a1)
000048DE 6400                       		bcc.s	loc_3F06
000048E0 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
000048E6 0440 0080                  		subi.w	#$80,d0
000048EA B052                       		cmp.w	(a2),d0
000048EC 6400                       		bcc.s	LZWind_Move
000048EE 7002                       		moveq	#2,d0
000048F0 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
000048F6 6600                       		bne.s	loc_3EBA
000048F8 4440                       		neg.w	d0
000048FA                            
000048FA                            loc_3EBA:
000048FA D169 000C                  		add.w	d0,$C(a1)
000048FE                            
000048FE                            LZWind_Move:
000048FE 5869 0008                  		addq.w	#4,8(a1)
00004902 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00004908 337C 0000 0012             		move.w	#0,$12(a1)
0000490E 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00004914 08E9 0001 0022             		bset	#1,$22(a1)
0000491A 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00004920 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00004922 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00004926                            
00004926                            LZWind_MoveDown:
00004926 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0000492C 6700                       		beq.s	locret_3EF2	; if not, branch
0000492E 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00004932                            
00004932                            locret_3EF2:
00004932 4E75                       		rts	
00004934                            ; ===========================================================================
00004934                            
00004934                            loc_3EF4:				; XREF: LZWindTunnels
00004934 504A                       		addq.w	#8,a2
00004936 51C9 FF62                  		dbf	d1,LZWind_Loop
0000493A 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0000493E 6700                       		beq.s	locret_3F0A
00004940 137C 0000 001C             		move.b	#0,$1C(a1)
00004946                            
00004946                            loc_3F06:
00004946 4238 F7C7                  		clr.b	($FFFFF7C7).w
0000494A                            
0000494A                            locret_3F0A:
0000494A 4E75                       		rts	
0000494C                            ; End of function LZWindTunnels
0000494C                            
0000494C                            ; ===========================================================================
0000494C 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00004954 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00004966 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00004974                            					; XREF: LZWindTunnels
00004974                            		even
00004974                            
00004974                            ; ---------------------------------------------------------------------------
00004974                            ; Labyrinth Zone water slide subroutine
00004974                            ; ---------------------------------------------------------------------------
00004974                            
00004974                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004974                            
00004974                            
00004974                            LZWaterSlides:				; XREF: LZWaterEffects
00004974 43F8 D000                  		lea	($FFFFD000).w,a1
00004978 0829 0001 0022             		btst	#1,$22(a1)
0000497E 6600                       		bne.s	loc_3F6A
00004980 3029 000C                  		move.w	$C(a1),d0
00004984 E248                       		lsr.w	#1,d0
00004986 0240 0380                  		andi.w	#$380,d0
0000498A 1229 0008                  		move.b	8(a1),d1
0000498E 0241 007F                  		andi.w	#$7F,d1
00004992 D041                       		add.w	d1,d0
00004994 45F8 A400                  		lea	($FFFFA400).w,a2
00004998 1032 0000                  		move.b	(a2,d0.w),d0
0000499C 45FA 0000                  		lea	byte_3FCF(pc),a2
000049A0 7206                       		moveq	#6,d1
000049A2                            
000049A2                            loc_3F62:
000049A2 B022                       		cmp.b	-(a2),d0
000049A4 57C9 FFFC                  		dbeq	d1,loc_3F62
000049A8 6700                       		beq.s	LZSlide_Move
000049AA                            
000049AA                            loc_3F6A:
000049AA 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000049AE 6700                       		beq.s	locret_3F7A
000049B0 337C 0005 003E             		move.w	#5,$3E(a1)
000049B6 4238 F7CA                  		clr.b	($FFFFF7CA).w
000049BA                            
000049BA                            locret_3F7A:
000049BA 4E75                       		rts	
000049BC                            ; ===========================================================================
000049BC                            
000049BC                            LZSlide_Move:				; XREF: LZWaterSlides
000049BC 0C41 0003                  		cmpi.w	#3,d1
000049C0 6400                       		bcc.s	loc_3F84
000049C2 4E71                       		nop	
000049C4                            
000049C4                            loc_3F84:
000049C4 08A9 0000 0022             		bclr	#0,$22(a1)
000049CA 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
000049CE 1340 0014                  		move.b	d0,$14(a1)
000049D2 6A00                       		bpl.s	loc_3F9A
000049D4 08E9 0000 0022             		bset	#0,$22(a1)
000049DA                            
000049DA                            loc_3F9A:
000049DA 4229 0015                  		clr.b	$15(a1)
000049DE 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
000049E4 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
000049EA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000049EE 0200 001F                  		andi.b	#$1F,d0
000049F2 6600                       		bne.s	locret_3FBE
000049F4 303C 00D0                  		move.w	#$D0,d0
000049F8 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play water sound
000049FE                            
000049FE                            locret_3FBE:
000049FE 4E75                       		rts	
00004A00                            ; End of function LZWaterSlides
00004A00                            
00004A00                            ; ===========================================================================
00004A00 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00004A0F 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00004A10                            		even
00004A10                            
00004A10                            ; ---------------------------------------------------------------------------
00004A10                            ; Subroutine to	move Sonic in demo mode
00004A10                            ; ---------------------------------------------------------------------------
00004A10                            
00004A10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004A10                            
00004A10                            
00004A10                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00004A10 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004A14 6600                       		bne.s	MoveDemo_On	; if yes, branch
00004A16 4E75                       		rts	
00004A18                            ; ===========================================================================
00004A18                            
00004A18                            ; This is an unused subroutine for recording a demo
00004A18                            
00004A18                            MoveDemo_Record:
00004A18 43F9 0008 0000             		lea	($80000).l,a1
00004A1E 3038 F790                  		move.w	($FFFFF790).w,d0
00004A22 D2C0                       		adda.w	d0,a1
00004A24 1038 F604                  		move.b	($FFFFF604).w,d0
00004A28 B011                       		cmp.b	(a1),d0
00004A2A 6600                       		bne.s	loc_3FFA
00004A2C 5229 0001                  		addq.b	#1,1(a1)
00004A30 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004A36 6700                       		beq.s	loc_3FFA
00004A38 4E75                       		rts	
00004A3A                            ; ===========================================================================
00004A3A                            
00004A3A                            loc_3FFA:				; XREF: MoveDemo_Record
00004A3A 1340 0002                  		move.b	d0,2(a1)
00004A3E 137C 0000 0003             		move.b	#0,3(a1)
00004A44 5478 F790                  		addq.w	#2,($FFFFF790).w
00004A48 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
00004A4E 4E75                       		rts	
00004A50                            ; ===========================================================================
00004A50                            
00004A50                            MoveDemo_On:				; XREF: MoveSonicInDemo
00004A50 4A38 F604                  		tst.b	($FFFFF604).w
00004A54 6A00                       		bpl.s	loc_4022
00004A56 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004A5A 6B00                       		bmi.s	loc_4022
00004A5C 11FC 0004 F600             		move.b	#4,($FFFFF600).w
00004A62                            
00004A62                            loc_4022:
00004A62 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004A68 7000                       		moveq	#0,d0
00004A6A 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004A6E 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004A74 6600                       		bne.s	loc_4038
00004A76 7006                       		moveq	#6,d0
00004A78                            
00004A78                            loc_4038:
00004A78 E548                       		lsl.w	#2,d0
00004A7A 2271 0000                  		movea.l	(a1,d0.w),a1
00004A7E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004A82 6A00                       		bpl.s	loc_4056
00004A84 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00004A8A 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00004A8E 5340                       		subq.w	#1,d0
00004A90 E548                       		lsl.w	#2,d0
00004A92 2271 0000                  		movea.l	(a1,d0.w),a1
00004A96                            
00004A96                            loc_4056:
00004A96 3038 F790                  		move.w	($FFFFF790).w,d0
00004A9A D2C0                       		adda.w	d0,a1
00004A9C 1011                       		move.b	(a1),d0
00004A9E 41F8 F604                  		lea	($FFFFF604).w,a0
00004AA2 1200                       		move.b	d0,d1
00004AA4 1410                       		move.b	(a0),d2
00004AA6 B500                       		eor.b	d2,d0
00004AA8 10C1                       		move.b	d1,(a0)+
00004AAA C001                       		and.b	d1,d0
00004AAC 10C0                       		move.b	d0,(a0)+
00004AAE 5338 F792                  		subq.b	#1,($FFFFF792).w
00004AB2 6400                       		bcc.s	locret_407E
00004AB4 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
00004ABA 5478 F790                  		addq.w	#2,($FFFFF790).w
00004ABE                            
00004ABE                            locret_407E:
00004ABE 4E75                       		rts	
00004AC0                            ; End of function MoveSonicInDemo
00004AC0                            
00004AC0                            ; ===========================================================================
00004AC0                            ; ---------------------------------------------------------------------------
00004AC0                            ; Demo sequence	pointers
00004AC0                            ; ---------------------------------------------------------------------------
00004AC0                            Demo_Index:
00004AC0                            	include "_inc\Demo pointers for intro.asm"
00004AC0                            ; ---------------------------------------------------------------------------
00004AC0                            ; Demo sequence	pointers
00004AC0                            ; ---------------------------------------------------------------------------
00004AC0 0000 0000                  	dc.l Demo_GHZ
00004AC4 0000 0000                  	dc.l Demo_GHZ
00004AC8 0000 0000                  	dc.l Demo_MZ
00004ACC 0000 0000                  	dc.l Demo_MZ
00004AD0 0000 0000                  	dc.l Demo_SYZ
00004AD4 0000 0000                  	dc.l Demo_SYZ
00004AD8 0000 0000                  	dc.l Demo_SS
00004ADC 0000 0000                  	dc.l Demo_SS
00004ADC 0000 0000                  	dc.l Demo_SS
00004AE0                            
00004AE0                            Demo_EndIndex:
00004AE0                            	include "_inc\Demo pointers for ending.asm"
00004AE0                            ; ---------------------------------------------------------------------------
00004AE0                            ; Demo (ending) sequence pointers
00004AE0                            ; ---------------------------------------------------------------------------
00004AE0 0000 0000                  	dc.l Demo_EndGHZ1
00004AE4 0000 0000                  	dc.l Demo_EndMZ
00004AE8 0000 0000                  	dc.l Demo_EndSYZ
00004AEC 0000 0000                  	dc.l Demo_EndLZ
00004AF0 0000 0000                  	dc.l Demo_EndSLZ
00004AF4 0000 0000                  	dc.l Demo_EndSBZ1
00004AF8 0000 0000                  	dc.l Demo_EndSBZ2
00004AFC 0000 0000                  	dc.l Demo_EndGHZ2
00004AFC 0000 0000                  	dc.l Demo_EndGHZ2
00004B00                            
00004B00 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00004B10 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00004B20 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004B30                            		even
00004B30                            
00004B30                            ; ---------------------------------------------------------------------------
00004B30                            ; Collision index loading subroutine
00004B30                            ; ---------------------------------------------------------------------------
00004B30                            
00004B30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004B30                            
00004B30                            
00004B30                            ColIndexLoad:				; XREF: Level
00004B30 7000                       		moveq	#0,d0
00004B32 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004B36 E548                       		lsl.w	#2,d0
00004B38 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
00004B3E 4E75                       		rts	
00004B40                            ; End of function ColIndexLoad
00004B40                            
00004B40                            ; ===========================================================================
00004B40                            ; ---------------------------------------------------------------------------
00004B40                            ; Collision index pointers
00004B40                            ; ---------------------------------------------------------------------------
00004B40                            ColPointers:
00004B40                            	include "_inc\Collision index pointers.asm"
00004B40                            ; ---------------------------------------------------------------------------
00004B40                            ; Collision index pointers
00004B40                            ; ---------------------------------------------------------------------------
00004B40 0000 0000                  	dc.l Col_GHZ
00004B44 0000 0000                  	dc.l Col_LZ
00004B48 0000 0000                  	dc.l Col_MZ
00004B4C 0000 0000                  	dc.l Col_SLZ
00004B50 0000 0000                  	dc.l Col_SYZ
00004B54 0000 0000                  	dc.l Col_SBZ
00004B54 0000 0000                  	dc.l Col_SBZ
00004B58                            
00004B58                            ; ---------------------------------------------------------------------------
00004B58                            ; Oscillating number subroutine
00004B58                            ; ---------------------------------------------------------------------------
00004B58                            
00004B58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004B58                            
00004B58                            
00004B58                            OscillateNumInit:			; XREF: Level
00004B58 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004B5C 45F9 0000 0000             		lea	(Osc_Data).l,a2
00004B62 7220                       		moveq	#$20,d1
00004B64                            
00004B64                            Osc_Loop:
00004B64 32DA                       		move.w	(a2)+,(a1)+
00004B66 51C9 FFFC                  		dbf	d1,Osc_Loop
00004B6A 4E75                       		rts	
00004B6C                            ; End of function OscillateNumInit
00004B6C                            
00004B6C                            ; ===========================================================================
00004B6C 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00004B70 0000 0080                  		dc.w 0,	$80
00004B74 0000 0080                  		dc.w 0,	$80
00004B78 0000 0080                  		dc.w 0,	$80
00004B7C 0000 0080                  		dc.w 0,	$80
00004B80 0000 0080                  		dc.w 0,	$80
00004B84 0000 0080                  		dc.w 0,	$80
00004B88 0000 0080                  		dc.w 0,	$80
00004B8C 0000 0080                  		dc.w 0,	$80
00004B90 0000 50F0                  		dc.w 0,	$50F0
00004B94 011E 2080                  		dc.w $11E, $2080
00004B98 00B4 3080                  		dc.w $B4, $3080
00004B9C 010E 5080                  		dc.w $10E, $5080
00004BA0 01C2 7080                  		dc.w $1C2, $7080
00004BA4 0276 0080                  		dc.w $276, $80
00004BA8 0000 0080                  		dc.w 0,	$80
00004BAC 0000                       		dc.w 0
00004BAE                            		even
00004BAE                            
00004BAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004BAE                            
00004BAE                            
00004BAE                            OscillateNumDo:				; XREF: Level
00004BAE 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004BB4 6400                       		bcc.s	locret_41C4
00004BB6 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004BBA 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00004BC0 3619                       		move.w	(a1)+,d3
00004BC2 720F                       		moveq	#$F,d1
00004BC4                            
00004BC4                            loc_4184:
00004BC4 341A                       		move.w	(a2)+,d2
00004BC6 381A                       		move.w	(a2)+,d4
00004BC8 0303                       		btst	d1,d3
00004BCA 6600                       		bne.s	loc_41A4
00004BCC 3029 0002                  		move.w	2(a1),d0
00004BD0 D042                       		add.w	d2,d0
00004BD2 3340 0002                  		move.w	d0,2(a1)
00004BD6 D151                       		add.w	d0,0(a1)
00004BD8 B811                       		cmp.b	0(a1),d4
00004BDA 6200                       		bhi.s	loc_41BA
00004BDC 03C3                       		bset	d1,d3
00004BDE 6000                       		bra.s	loc_41BA
00004BE0                            ; ===========================================================================
00004BE0                            
00004BE0                            loc_41A4:				; XREF: OscillateNumDo
00004BE0 3029 0002                  		move.w	2(a1),d0
00004BE4 9042                       		sub.w	d2,d0
00004BE6 3340 0002                  		move.w	d0,2(a1)
00004BEA D151                       		add.w	d0,0(a1)
00004BEC B811                       		cmp.b	0(a1),d4
00004BEE 6300                       		bls.s	loc_41BA
00004BF0 0383                       		bclr	d1,d3
00004BF2                            
00004BF2                            loc_41BA:
00004BF2 5849                       		addq.w	#4,a1
00004BF4 51C9 FFCE                  		dbf	d1,loc_4184
00004BF8 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00004BFC                            
00004BFC                            locret_41C4:
00004BFC 4E75                       		rts	
00004BFE                            ; End of function OscillateNumDo
00004BFE                            
00004BFE                            ; ===========================================================================
00004BFE 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
00004C02 0002 0018                  		dc.w 2,	$18
00004C06 0002 0020                  		dc.w 2,	$20
00004C0A 0002 0030                  		dc.w 2,	$30
00004C0E 0004 0020                  		dc.w 4,	$20
00004C12 0008 0008                  		dc.w 8,	8
00004C16 0008 0040                  		dc.w 8,	$40
00004C1A 0004 0040                  		dc.w 4,	$40
00004C1E 0002 0050                  		dc.w 2,	$50
00004C22 0002 0050                  		dc.w 2,	$50
00004C26 0002 0020                  		dc.w 2,	$20
00004C2A 0003 0030                  		dc.w 3,	$30
00004C2E 0005 0050                  		dc.w 5,	$50
00004C32 0007 0070                  		dc.w 7,	$70
00004C36 0002 0010                  		dc.w 2,	$10
00004C3A 0002 0010                  		dc.w 2,	$10
00004C3E                            		even
00004C3E                            
00004C3E                            ; ---------------------------------------------------------------------------
00004C3E                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00004C3E                            ; ---------------------------------------------------------------------------
00004C3E                            
00004C3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004C3E                            
00004C3E                            
00004C3E                            ChangeRingFrame:			; XREF: Level
00004C3E 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004C42 6A00                       		bpl.s	loc_421C
00004C44 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00004C4A 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00004C4E 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004C54                            
00004C54                            loc_421C:
00004C54 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00004C58 6A00                       		bpl.s	loc_4232
00004C5A 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00004C60 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004C64 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00004C6A                            
00004C6A                            loc_4232:
00004C6A 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00004C6E 6A00                       		bpl.s	loc_4250
00004C70 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004C76 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00004C7A 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00004C80 6500                       		bcs.s	loc_4250
00004C82 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00004C88                            
00004C88                            loc_4250:
00004C88 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00004C8C 6700                       		beq.s	locret_4272
00004C8E 7000                       		moveq	#0,d0
00004C90 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00004C94 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00004C98 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
00004C9C EF58                       		rol.w	#7,d0
00004C9E 0240 0003                  		andi.w	#3,d0
00004CA2 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00004CA6 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
00004CAA                            
00004CAA                            locret_4272:
00004CAA 4E75                       		rts	
00004CAC                            ; End of function ChangeRingFrame
00004CAC                            
00004CAC                            ; ---------------------------------------------------------------------------
00004CAC                            ; End-of-act signpost pattern loading subroutine
00004CAC                            ; ---------------------------------------------------------------------------
00004CAC                            
00004CAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004CAC                            
00004CAC                            
00004CAC                            SignpostArtLoad:			; XREF: Level
00004CAC 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004CB0 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00004CB4 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
00004CBA 6700                       		beq.s	Signpost_Exit	; if yes, branch
00004CBC 3038 F700                  		move.w	($FFFFF700).w,d0
00004CC0 3238 F72A                  		move.w	($FFFFF72A).w,d1
00004CC4 0441 0100                  		subi.w	#$100,d1
00004CC8 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00004CCA 6D00                       		blt.s	Signpost_Exit	; if not, branch
00004CCC 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00004CD0 6700                       		beq.s	Signpost_Exit
00004CD2 B278 F728                  		cmp.w	($FFFFF728).w,d1
00004CD6 6700                       		beq.s	Signpost_Exit
00004CD8 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
00004CDC 7012                       		moveq	#$12,d0
00004CDE 6000 CA3C                  		bra.w	LoadPLC2	; load signpost	patterns
00004CE2                            ; ===========================================================================
00004CE2                            
00004CE2                            Signpost_Exit:
00004CE2 4E75                       		rts	
00004CE4                            ; End of function SignpostArtLoad
00004CE4                            
00004CE4                            ; ===========================================================================
00004CE4                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004D64                            Demo_MZ:	incbin	demodata\i_mz.bin
00004E94                            Demo_SYZ:	incbin	demodata\i_syz.bin
00004F14                            Demo_SS:	incbin	demodata\i_ss.bin
00005014                            ; ===========================================================================
00005014                            
00005014                            ; ---------------------------------------------------------------------------
00005014                            ; Special Stage
00005014                            ; ---------------------------------------------------------------------------
00005014                            
00005014                            SpecialStage:				; XREF: GameModeArray
00005014 303C 00CA                  		move.w	#$CA,d0
00005018 6100 C45C                  		bsr.w	PlaySound_Special ; play special stage entry sound
0000501C 6100 D290                  		bsr.w	Pal_MakeFlash
00005020 46FC 2700                  		move	#$2700,sr
00005024 4DF9 00C0 0004             		lea	($C00004).l,a6
0000502A 3CBC 8B03                  		move.w	#$8B03,(a6)
0000502E 3CBC 8004                  		move.w	#$8004,(a6)
00005032 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00005038 3CBC 9011                  		move.w	#$9011,(a6)
0000503C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005040 0200 00BF                  		andi.b	#$BF,d0
00005044 33C0 00C0 0004             		move.w	d0,($C00004).l
0000504A 6100 C334                  		bsr.w	ClearScreen
0000504E 46FC 2300                  		move	#$2300,sr
00005052 4BF9 00C0 0004             		lea	($C00004).l,a5
00005058 3ABC 8F01                  		move.w	#$8F01,(a5)
0000505C 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00005062 3ABC 9780                  		move.w	#$9780,(a5)
00005066 2ABC 5000 0081             		move.l	#$50000081,(a5)
0000506C 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00005074                            
00005074                            loc_463C:
00005074 3215                       		move.w	(a5),d1
00005076 0801 0001                  		btst	#1,d1
0000507A 66F8                       		bne.s	loc_463C
0000507C 3ABC 8F02                  		move.w	#$8F02,(a5)
00005080 6100 0000                  		bsr.w	SS_BGLoad
00005084 7014                       		moveq	#$14,d0
00005086 6100 C7CE                  		bsr.w	RunPLC_ROM	; load special stage patterns
0000508A 43F8 D000                  		lea	($FFFFD000).w,a1
0000508E 7000                       		moveq	#0,d0
00005090 323C 07FF                  		move.w	#$7FF,d1
00005094                            
00005094                            SS_ClrObjRam:
00005094 22C0                       		move.l	d0,(a1)+
00005096 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
0000509A                            
0000509A 43F8 F700                  		lea	($FFFFF700).w,a1
0000509E 7000                       		moveq	#0,d0
000050A0 323C 003F                  		move.w	#$3F,d1
000050A4                            
000050A4                            SS_ClrRam:
000050A4 22C0                       		move.l	d0,(a1)+
000050A6 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
000050AA                            
000050AA 43F8 FE60                  		lea	($FFFFFE60).w,a1
000050AE 7000                       		moveq	#0,d0
000050B0 323C 0027                  		move.w	#$27,d1
000050B4                            
000050B4                            SS_ClrRam2:
000050B4 22C0                       		move.l	d0,(a1)+
000050B6 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
000050BA                            
000050BA 43F8 AA00                  		lea	($FFFFAA00).w,a1
000050BE 7000                       		moveq	#0,d0
000050C0 323C 007F                  		move.w	#$7F,d1
000050C4                            
000050C4                            SS_ClrNemRam:
000050C4 22C0                       		move.l	d0,(a1)+
000050C6 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
000050CA                            
000050CA 4238 F64E                  		clr.b	($FFFFF64E).w
000050CE 4278 FE02                  		clr.w	($FFFFFE02).w
000050D2 700A                       		moveq	#$A,d0
000050D4 6100 D358                  		bsr.w	PalLoad1	; load special stage pallet
000050D8 4EB9 0000 0000             		jsr	SS_Load
000050DE 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
000050E6 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
000050EE 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
000050F4 6100 0000                  		bsr.w	PalCycle_SS
000050F8 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
000050FC 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
00005102 303C 0089                  		move.w	#$89,d0
00005106 6100 C368                  		bsr.w	PlaySound	; play special stage BG	music
0000510A 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00005110 43F9 0000 4AC0             		lea	(Demo_Index).l,a1
00005116 7006                       		moveq	#6,d0
00005118 E548                       		lsl.w	#2,d0
0000511A 2271 0000                  		movea.l	(a1,d0.w),a1
0000511E 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00005124 5338 F792                  		subq.b	#1,($FFFFF792).w
00005128 4278 FE20                  		clr.w	($FFFFFE20).w
0000512C 4238 FE1B                  		clr.b	($FFFFFE1B).w
00005130 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00005136 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
0000513C 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00005140 6700                       		beq.s	SS_NoDebug	; if not, branch
00005142 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00005148 6700                       		beq.s	SS_NoDebug	; if not, branch
0000514A 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005150                            
00005150                            SS_NoDebug:
00005150 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005154 0000 0040                  		ori.b	#$40,d0
00005158 33C0 00C0 0004             		move.w	d0,($C00004).l
0000515E 6100 D0A2                  		bsr.w	Pal_MakeWhite
00005162                            
00005162                            ; ---------------------------------------------------------------------------
00005162                            ; Main Special Stage loop
00005162                            ; ---------------------------------------------------------------------------
00005162                            
00005162                            SS_MainLoop:
00005162 6100 C31E                  		bsr.w	PauseGame
00005166 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
0000516C 6100 E234                  		bsr.w	DelayProgram
00005170 6100 F89E                  		bsr.w	MoveSonicInDemo
00005174 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
0000517A 4EB9 0000 0000             		jsr	ObjectsLoad
00005180 4EB9 0000 0000             		jsr	BuildSprites
00005186 4EB9 0000 0000             		jsr	SS_ShowLayout
0000518C 6100 0000                  		bsr.w	SS_BGAnimate
00005190 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00005194 6700                       		beq.s	SS_ChkEnd	; if not, branch
00005196 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
0000519A 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
0000519E                            
0000519E                            SS_ChkEnd:
0000519E 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
000051A4 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
000051A8                            
000051A8 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000051AC 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
000051B0 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000051B6 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
000051BC 6500                       		bcs.s	SS_End		; if not, branch
000051BE 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
000051C2                            
000051C2                            SS_End:
000051C2 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
000051C8 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000051CE 4278 F794                  		clr.w	($FFFFF794).w
000051D2                            
000051D2                            SS_EndLoop:
000051D2 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
000051D8 6100 E1C8                  		bsr.w	DelayProgram
000051DC 6100 F832                  		bsr.w	MoveSonicInDemo
000051E0 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
000051E6 4EB9 0000 0000             		jsr	ObjectsLoad
000051EC 4EB9 0000 0000             		jsr	BuildSprites
000051F2 4EB9 0000 0000             		jsr	SS_ShowLayout
000051F8 6100 0000                  		bsr.w	SS_BGAnimate
000051FC 5378 F794                  		subq.w	#1,($FFFFF794).w
00005200 6A00                       		bpl.s	loc_47D4
00005202 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005208 6100 D0C4                  		bsr.w	Pal_ToWhite
0000520C                            
0000520C                            loc_47D4:
0000520C 4A78 F614                  		tst.w	($FFFFF614).w
00005210 66C0                       		bne.s	SS_EndLoop
00005212                            
00005212 46FC 2700                  		move	#$2700,sr
00005216 4DF9 00C0 0004             		lea	($C00004).l,a6
0000521C 3CBC 8230                  		move.w	#$8230,(a6)
00005220 3CBC 8407                  		move.w	#$8407,(a6)
00005224 3CBC 9001                  		move.w	#$9001,(a6)
00005228 6100 C156                  		bsr.w	ClearScreen
0000522C 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00005236 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000523C 6100 C36C                  		bsr.w	NemDec
00005240 4EB9 0000 0000             		jsr	Hud_Base
00005246 4278 C800                  		clr.w	($FFFFC800).w
0000524A 21FC FFFF C800 C8FC        		move.l	#$FFFFC800,($FFFFC8FC).w
00005252 46FC 2300                  		move	#$2300,sr
00005256 7011                       		moveq	#$11,d0
00005258 6100 D210                  		bsr.w	PalLoad2	; load results screen pallet
0000525C 7000                       		moveq	#0,d0
0000525E 6100 C4BC                  		bsr.w	LoadPLC2
00005262 701B                       		moveq	#$1B,d0
00005264 6100 C484                  		bsr.w	LoadPLC		; load results screen patterns
00005268 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
0000526E 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00005274 3038 FE20                  		move.w	($FFFFFE20).w,d0
00005278 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
0000527C 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00005280 303C 008E                  		move.w	#$8E,d0
00005284 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play end-of-level music
0000528A 43F8 D000                  		lea	($FFFFD000).w,a1
0000528E 7000                       		moveq	#0,d0
00005290 323C 07FF                  		move.w	#$7FF,d1
00005294                            
00005294                            SS_EndClrObjRam:
00005294 22C0                       		move.l	d0,(a1)+
00005296 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
0000529A                            
0000529A 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
000052A0                            
000052A0                            SS_NormalExit:
000052A0 6100 C1E0                  		bsr.w	PauseGame
000052A4 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
000052AA 6100 E0F6                  		bsr.w	DelayProgram
000052AE 4EB9 0000 0000             		jsr	ObjectsLoad
000052B4 4EB9 0000 0000             		jsr	BuildSprites
000052BA 6100 C49A                  		bsr.w	RunPLC_RAM
000052BE 4A78 FE02                  		tst.w	($FFFFFE02).w
000052C2 67DC                       		beq.s	SS_NormalExit
000052C4 4AB8 F680                  		tst.l	($FFFFF680).w
000052C8 66D6                       		bne.s	SS_NormalExit
000052CA 303C 00CA                  		move.w	#$CA,d0
000052CE 6100 C1A6                  		bsr.w	PlaySound_Special ; play special stage exit sound
000052D2 6100 CFDA                  		bsr.w	Pal_MakeFlash
000052D6 4E75                       		rts	
000052D8                            ; ===========================================================================
000052D8                            
000052D8                            SS_ToSegaScreen:
000052D8 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
000052DE 4E75                       		rts
000052E0                            
000052E0                            ; ---------------------------------------------------------------------------
000052E0                            ; Special stage	background loading subroutine
000052E0                            ; ---------------------------------------------------------------------------
000052E0                            
000052E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000052E0                            
000052E0                            
000052E0                            SS_BGLoad:				; XREF: SpecialStage
000052E0 43F9 00FF 0000             		lea	($FF0000).l,a1
000052E6 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
000052EC 303C 4051                  		move.w	#$4051,d0
000052F0 6100 C596                  		bsr.w	EniDec
000052F4 263C 5000 0001             		move.l	#$50000001,d3
000052FA 45F9 00FF 0080             		lea	($FF0080).l,a2
00005300 7E06                       		moveq	#6,d7
00005302                            
00005302                            loc_48BE:
00005302 2003                       		move.l	d3,d0
00005304 7C03                       		moveq	#3,d6
00005306 7800                       		moveq	#0,d4
00005308 0C47 0003                  		cmpi.w	#3,d7
0000530C 6400                       		bcc.s	loc_48CC
0000530E 7801                       		moveq	#1,d4
00005310                            
00005310                            loc_48CC:
00005310 7A07                       		moveq	#7,d5
00005312                            
00005312                            loc_48CE:
00005312 224A                       		movea.l	a2,a1
00005314 0A04 0001                  		eori.b	#1,d4
00005318 6600                       		bne.s	loc_48E2
0000531A 0C47 0006                  		cmpi.w	#6,d7
0000531E 6600                       		bne.s	loc_48F2
00005320 43F9 00FF 0000             		lea	($FF0000).l,a1
00005326                            
00005326                            loc_48E2:
00005326 48E7 F800                  		movem.l	d0-d4,-(sp)
0000532A 7207                       		moveq	#7,d1
0000532C 7407                       		moveq	#7,d2
0000532E 6100 C1CA                  		bsr.w	ShowVDPGraphics
00005332 4CDF 001F                  		movem.l	(sp)+,d0-d4
00005336                            
00005336                            loc_48F2:
00005336 0680 0010 0000             		addi.l	#$100000,d0
0000533C 51CD FFD4                  		dbf	d5,loc_48CE
00005340 0680 0380 0000             		addi.l	#$3800000,d0
00005346 0A04 0001                  		eori.b	#1,d4
0000534A 51CE FFC4                  		dbf	d6,loc_48CC
0000534E 0683 1000 0000             		addi.l	#$10000000,d3
00005354 6A00                       		bpl.s	loc_491C
00005356 4843                       		swap	d3
00005358 0683 0000 C000             		addi.l	#$C000,d3
0000535E 4843                       		swap	d3
00005360                            
00005360                            loc_491C:
00005360 D4FC 0080                  		adda.w	#$80,a2
00005364 51CF FF9C                  		dbf	d7,loc_48BE
00005368 43F9 00FF 0000             		lea	($FF0000).l,a1
0000536E 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00005374 303C 4000                  		move.w	#$4000,d0
00005378 6100 C50E                  		bsr.w	EniDec
0000537C 43F9 00FF 0000             		lea	($FF0000).l,a1
00005382 203C 4000 0003             		move.l	#$40000003,d0
00005388 723F                       		moveq	#$3F,d1
0000538A 741F                       		moveq	#$1F,d2
0000538C 6100 C16C                  		bsr.w	ShowVDPGraphics
00005390 43F9 00FF 0000             		lea	($FF0000).l,a1
00005396 203C 5000 0003             		move.l	#$50000003,d0
0000539C 723F                       		moveq	#$3F,d1
0000539E 743F                       		moveq	#$3F,d2
000053A0 6100 C158                  		bsr.w	ShowVDPGraphics
000053A4 4E75                       		rts	
000053A6                            ; End of function SS_BGLoad
000053A6                            
000053A6                            ; ---------------------------------------------------------------------------
000053A6                            ; Pallet cycling routine - special stage
000053A6                            ; ---------------------------------------------------------------------------
000053A6                            
000053A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000053A6                            
000053A6                            
000053A6                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
000053A6 4A78 F63A                  		tst.w	($FFFFF63A).w
000053AA 6600                       		bne.s	locret_49E6
000053AC 5378 F79C                  		subq.w	#1,($FFFFF79C).w
000053B0 6A00                       		bpl.s	locret_49E6
000053B2 4DF9 00C0 0004             		lea	($C00004).l,a6
000053B8 3038 F79A                  		move.w	($FFFFF79A).w,d0
000053BC 5278 F79A                  		addq.w	#1,($FFFFF79A).w
000053C0 0240 001F                  		andi.w	#$1F,d0
000053C4 E548                       		lsl.w	#2,d0
000053C6 41F9 0000 0000             		lea	(byte_4A3C).l,a0
000053CC D0C0                       		adda.w	d0,a0
000053CE 1018                       		move.b	(a0)+,d0
000053D0 6A00                       		bpl.s	loc_4992
000053D2 303C 01FF                  		move.w	#$1FF,d0
000053D6                            
000053D6                            loc_4992:
000053D6 31C0 F79C                  		move.w	d0,($FFFFF79C).w
000053DA 7000                       		moveq	#0,d0
000053DC 1018                       		move.b	(a0)+,d0
000053DE 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
000053E2 43F9 0000 0000             		lea	(byte_4ABC).l,a1
000053E8 43F1 0000                  		lea	(a1,d0.w),a1
000053EC 303C 8200                  		move.w	#-$7E00,d0
000053F0 1019                       		move.b	(a1)+,d0
000053F2 3C80                       		move.w	d0,(a6)
000053F4 11D1 F616                  		move.b	(a1),($FFFFF616).w
000053F8 303C 8400                  		move.w	#-$7C00,d0
000053FC 1018                       		move.b	(a0)+,d0
000053FE 3C80                       		move.w	d0,(a6)
00005400 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
0000540A 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00005412 7000                       		moveq	#0,d0
00005414 1018                       		move.b	(a0)+,d0
00005416 6B00                       		bmi.s	loc_49E8
00005418 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
0000541E D2C0                       		adda.w	d0,a1
00005420 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00005424 24D9                       		move.l	(a1)+,(a2)+
00005426 24D9                       		move.l	(a1)+,(a2)+
00005428 24D9                       		move.l	(a1)+,(a2)+
0000542A                            
0000542A                            locret_49E6:
0000542A 4E75                       		rts	
0000542C                            ; ===========================================================================
0000542C                            
0000542C                            loc_49E8:				; XREF: PalCycle_SS
0000542C 3238 F79E                  		move.w	($FFFFF79E).w,d1
00005430 0C40 008A                  		cmpi.w	#$8A,d0
00005434 6500                       		bcs.s	loc_49F4
00005436 5241                       		addq.w	#1,d1
00005438                            
00005438                            loc_49F4:
00005438 C2FC 002A                  		mulu.w	#$2A,d1
0000543C 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00005442 D2C1                       		adda.w	d1,a1
00005444 0240 007F                  		andi.w	#$7F,d0
00005448 0880 0000                  		bclr	#0,d0
0000544C 6700                       		beq.s	loc_4A18
0000544E 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00005452 24D1                       		move.l	(a1),(a2)+
00005454 24E9 0004                  		move.l	4(a1),(a2)+
00005458 24E9 0008                  		move.l	8(a1),(a2)+
0000545C                            
0000545C                            loc_4A18:
0000545C D2FC 000C                  		adda.w	#$C,a1
00005460 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00005464 0C40 000A                  		cmpi.w	#$A,d0
00005468 6500                       		bcs.s	loc_4A2E
0000546A 0440 000A                  		subi.w	#$A,d0
0000546E 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00005472                            
00005472                            loc_4A2E:
00005472 3200                       		move.w	d0,d1
00005474 D040                       		add.w	d0,d0
00005476 D041                       		add.w	d1,d0
00005478 D2C0                       		adda.w	d0,a1
0000547A 24D9                       		move.l	(a1)+,(a2)+
0000547C 34D9                       		move.w	(a1)+,(a2)+
0000547E 4E75                       		rts	
00005480                            ; End of function PalCycle_SS
00005480                            
00005480                            ; ===========================================================================
00005480 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00005490                            					; XREF: PalCycle_SS
00005490 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
000054A0 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
000054B0 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
000054C0 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
000054D0 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
000054E0 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
000054F0 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00005500                            		even
00005500 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
0000550E                            					; XREF: PalCycle_SS
0000550E                            		even
0000550E                            
0000550E                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00005556                            		even
00005556                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00005628                            		even
00005628                            
00005628                            ; ---------------------------------------------------------------------------
00005628                            ; Subroutine to	make the special stage background animated
00005628                            ; ---------------------------------------------------------------------------
00005628                            
00005628                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005628                            
00005628                            
00005628                            SS_BGAnimate:				; XREF: SpecialStage
00005628 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
0000562C 6600                       		bne.s	loc_4BF6
0000562E 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00005634 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000563A                            
0000563A                            loc_4BF6:
0000563A 0C40 0008                  		cmpi.w	#8,d0
0000563E 6400                       		bcc.s	loc_4C4E
00005640 0C40 0006                  		cmpi.w	#6,d0
00005644 6600                       		bne.s	loc_4C10
00005646 5278 F718                  		addq.w	#1,($FFFFF718).w
0000564A 5278 F70C                  		addq.w	#1,($FFFFF70C).w
0000564E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005654                            
00005654                            loc_4C10:
00005654 7000                       		moveq	#0,d0
00005656 3038 F708                  		move.w	($FFFFF708).w,d0
0000565A 4440                       		neg.w	d0
0000565C 4840                       		swap	d0
0000565E 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00005664 47F8 AA00                  		lea	($FFFFAA00).w,a3
00005668 7609                       		moveq	#9,d3
0000566A                            
0000566A                            loc_4C26:
0000566A 302B 0002                  		move.w	2(a3),d0
0000566E 6100 DD64                  		bsr.w	CalcSine
00005672 7400                       		moveq	#0,d2
00005674 1419                       		move.b	(a1)+,d2
00005676 C1C2                       		muls.w	d2,d0
00005678 E080                       		asr.l	#8,d0
0000567A 36C0                       		move.w	d0,(a3)+
0000567C 1419                       		move.b	(a1)+,d2
0000567E 4882                       		ext.w	d2
00005680 D55B                       		add.w	d2,(a3)+
00005682 51CB FFE6                  		dbf	d3,loc_4C26
00005686 47F8 AA00                  		lea	($FFFFAA00).w,a3
0000568A 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00005690 6000                       		bra.s	loc_4C7E
00005692                            ; ===========================================================================
00005692                            
00005692                            loc_4C4E:				; XREF: SS_BGAnimate
00005692 0C40 000C                  		cmpi.w	#$C,d0
00005696 6600                       		bne.s	loc_4C74
00005698 5378 F718                  		subq.w	#1,($FFFFF718).w
0000569C 47F8 AB00                  		lea	($FFFFAB00).w,a3
000056A0 243C 0001 8000             		move.l	#$18000,d2
000056A6 7206                       		moveq	#6,d1
000056A8                            
000056A8                            loc_4C64:
000056A8 2013                       		move.l	(a3),d0
000056AA 9082                       		sub.l	d2,d0
000056AC 26C0                       		move.l	d0,(a3)+
000056AE 0482 0000 2000             		subi.l	#$2000,d2
000056B4 51C9 FFF2                  		dbf	d1,loc_4C64
000056B8                            
000056B8                            loc_4C74:
000056B8 47F8 AB00                  		lea	($FFFFAB00).w,a3
000056BC 45F9 0000 0000             		lea	(byte_4CC4).l,a2
000056C2                            
000056C2                            loc_4C7E:
000056C2 43F8 CC00                  		lea	($FFFFCC00).w,a1
000056C6 3038 F718                  		move.w	($FFFFF718).w,d0
000056CA 4440                       		neg.w	d0
000056CC 4840                       		swap	d0
000056CE 7600                       		moveq	#0,d3
000056D0 161A                       		move.b	(a2)+,d3
000056D2 3438 F70C                  		move.w	($FFFFF70C).w,d2
000056D6 4442                       		neg.w	d2
000056D8 0242 00FF                  		andi.w	#$FF,d2
000056DC E54A                       		lsl.w	#2,d2
000056DE                            
000056DE                            loc_4C9A:
000056DE 301B                       		move.w	(a3)+,d0
000056E0 544B                       		addq.w	#2,a3
000056E2 7200                       		moveq	#0,d1
000056E4 121A                       		move.b	(a2)+,d1
000056E6 5341                       		subq.w	#1,d1
000056E8                            
000056E8                            loc_4CA4:
000056E8 2380 2000                  		move.l	d0,(a1,d2.w)
000056EC 5842                       		addq.w	#4,d2
000056EE 0242 03FC                  		andi.w	#$3FC,d2
000056F2 51C9 FFF4                  		dbf	d1,loc_4CA4
000056F6 51CB FFE6                  		dbf	d3,loc_4C9A
000056FA 4E75                       		rts	
000056FC                            ; End of function SS_BGAnimate
000056FC                            
000056FC                            ; ===========================================================================
000056FC 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005708                            		even
00005708 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005710                            		even
00005710 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005724                            		even
00005724                            					; XREF: SS_BGAnimate
00005724                            ; ===========================================================================
00005724                            
00005724                            ; ---------------------------------------------------------------------------
00005724                            ; Continue screen
00005724                            ; ---------------------------------------------------------------------------
00005724                            
00005724                            ContinueScreen:				; XREF: GameModeArray
00005724 6100 CA5A                  		bsr.w	Pal_FadeFrom
00005728 46FC 2700                  		move	#$2700,sr
0000572C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005730 0200 00BF                  		andi.b	#$BF,d0
00005734 33C0 00C0 0004             		move.w	d0,($C00004).l
0000573A 4DF9 00C0 0004             		lea	($C00004).l,a6
00005740 3CBC 8004                  		move.w	#$8004,(a6)
00005744 3CBC 8700                  		move.w	#$8700,(a6)
00005748 6100 BC36                  		bsr.w	ClearScreen
0000574C 43F8 D000                  		lea	($FFFFD000).w,a1
00005750 7000                       		moveq	#0,d0
00005752 323C 07FF                  		move.w	#$7FF,d1
00005756                            
00005756                            Cont_ClrObjRam:
00005756 22C0                       		move.l	d0,(a1)+
00005758 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
0000575C                            
0000575C 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00005766 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000576C 6100 BE3C                  		bsr.w	NemDec
00005770 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
0000577A 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005780 6100 BE28                  		bsr.w	NemDec
00005784 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
0000578E 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005794 6100 BE14                  		bsr.w	NemDec
00005798 720A                       		moveq	#10,d1
0000579A 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
000057A0 7012                       		moveq	#$12,d0
000057A2 6100 CC8A                  		bsr.w	PalLoad1	; load continue	screen pallet
000057A6 103C 0090                  		move.b	#$90,d0
000057AA 6100 BCC4                  		bsr.w	PlaySound	; play continue	music
000057AE 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
000057B4 42B8 F700                  		clr.l	($FFFFF700).w
000057B8 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
000057C0 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
000057C6 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
000057CC 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
000057D2 11FC 0003 D098             		move.b	#3,($FFFFD098).w
000057D8 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
000057DE 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
000057E4 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
000057EA 4EB9 0000 0000             		jsr	ObjectsLoad
000057F0 4EB9 0000 0000             		jsr	BuildSprites
000057F6 3038 F60C                  		move.w	($FFFFF60C).w,d0
000057FA 0000 0040                  		ori.b	#$40,d0
000057FE 33C0 00C0 0004             		move.w	d0,($C00004).l
00005804 6100 C8C4                  		bsr.w	Pal_FadeTo
00005808                            
00005808                            ; ---------------------------------------------------------------------------
00005808                            ; Continue screen main loop
00005808                            ; ---------------------------------------------------------------------------
00005808                            
00005808                            Cont_MainLoop:
00005808 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
0000580E 6100 DB92                  		bsr.w	DelayProgram
00005812 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005818 6400                       		bcc.s	loc_4DF2
0000581A 46FC 2700                  		move	#$2700,sr
0000581E 3238 F614                  		move.w	($FFFFF614).w,d1
00005822 82FC 003C                  		divu.w	#$3C,d1
00005826 0281 0000 000F             		andi.l	#$F,d1
0000582C 4EB9 0000 0000             		jsr	ContScrCounter
00005832 46FC 2300                  		move	#$2300,sr
00005836                            
00005836                            loc_4DF2:
00005836 4EB9 0000 0000             		jsr	ObjectsLoad
0000583C 4EB9 0000 0000             		jsr	BuildSprites
00005842 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00005848 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
0000584A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005850 64B6                       		bcc.s	Cont_MainLoop
00005852 4A78 F614                  		tst.w	($FFFFF614).w
00005856 6600 FFB0                  		bne.w	Cont_MainLoop
0000585A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005860 4E75                       		rts	
00005862                            ; ===========================================================================
00005862                            
00005862                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00005862 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00005868 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000586E 7000                       		moveq	#0,d0
00005870 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005874 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005878 11C0 FEBF                          move.b    d0,($FFFFFEBF).w ; value used to increment centiseconds
0000587C 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005880 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00005884 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00005888 4E75                       		rts	
0000588A                            ; ===========================================================================
0000588A                            
0000588A                            ; ---------------------------------------------------------------------------
0000588A                            ; Object 80 - Continue screen elements
0000588A                            ; ---------------------------------------------------------------------------
0000588A                            
0000588A                            Obj80:					; XREF: Obj_Index
0000588A 7000                       		moveq	#0,d0
0000588C 1028 0024                  		move.b	$24(a0),d0
00005890 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00005894 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00005898                            ; ===========================================================================
00005898 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
0000589A 0000                       		dc.w Obj80_Display-Obj80_Index
0000589C 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
0000589E 0000                       		dc.w Obj80_ChkType-Obj80_Index
000058A0                            ; ===========================================================================
000058A0                            
000058A0                            Obj80_Main:				; XREF: Obj80_Index
000058A0 5428 0024                  		addq.b	#2,$24(a0)
000058A4 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000058AC 317C 8500 0002             		move.w	#$8500,2(a0)
000058B2 117C 0000 0001             		move.b	#0,1(a0)
000058B8 117C 003C 0019             		move.b	#$3C,$19(a0)
000058BE 317C 0120 0008             		move.w	#$120,8(a0)
000058C4 317C 00C0 000A             		move.w	#$C0,$A(a0)
000058CA 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
000058D0                            
000058D0                            Obj80_Display:				; XREF: Obj80_Index
000058D0 4EF9 0000 0000             		jmp	DisplaySprite
000058D6                            ; ===========================================================================
000058D6                            Obj80_MiniSonicPos:
000058D6 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
000058E8 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
000058F4                            ; ===========================================================================
000058F4                            
000058F4                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
000058F4 2248                       		movea.l	a0,a1
000058F6 45F9 0000 58D6             		lea	(Obj80_MiniSonicPos).l,a2
000058FC 7200                       		moveq	#0,d1
000058FE 1238 FE18                  		move.b	($FFFFFE18).w,d1
00005902 5501                       		subq.b	#2,d1
00005904 6400                       		bcc.s	loc_4EC4
00005906 4EF9 0000 0000             		jmp	DeleteObject
0000590C                            ; ===========================================================================
0000590C                            
0000590C                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
0000590C 7601                       		moveq	#1,d3
0000590E 0C01 000E                  		cmpi.b	#$E,d1
00005912 6500                       		bcs.s	loc_4ED0
00005914 7600                       		moveq	#0,d3
00005916 720E                       		moveq	#$E,d1
00005918                            
00005918                            loc_4ED0:
00005918 1401                       		move.b	d1,d2
0000591A 0202 0001                  		andi.b	#1,d2
0000591E                            
0000591E                            Obj80_MiniSonLoop:
0000591E 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
00005922 335A 0008                  		move.w	(a2)+,8(a1)
00005926 4A02                       		tst.b	d2
00005928 6700                       		beq.s	loc_4EEA
0000592A 0469 000A 0008             		subi.w	#$A,8(a1)
00005930                            
00005930                            loc_4EEA:
00005930 337C 00D0 000A             		move.w	#$D0,$A(a1)
00005936 137C 0006 001A             		move.b	#6,$1A(a1)
0000593C 137C 0006 0024             		move.b	#6,$24(a1)
00005942 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
0000594A 337C 8551 0002             		move.w	#$8551,2(a1)
00005950 137C 0000 0001             		move.b	#0,1(a1)
00005956 43E9 0040                  		lea	$40(a1),a1
0000595A 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
0000595E 43E9 FFC0                  		lea	-$40(a1),a1
00005962 1343 0028                  		move.b	d3,$28(a1)
00005966                            
00005966                            Obj80_ChkType:				; XREF: Obj80_Index
00005966 4A28 0028                  		tst.b	$28(a0)
0000596A 6700                       		beq.s	loc_4F40
0000596C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005972 6500                       		bcs.s	loc_4F40
00005974 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005978 0200 0001                  		andi.b	#1,d0
0000597C 6600                       		bne.s	loc_4F40
0000597E 4A78 D010                  		tst.w	($FFFFD010).w
00005982 6600                       		bne.s	Obj80_Delete
00005984 4E75                       		rts	
00005986                            ; ===========================================================================
00005986                            
00005986                            loc_4F40:				; XREF: Obj80_ChkType
00005986 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000598A 0200 000F                  		andi.b	#$F,d0
0000598E 6600                       		bne.s	Obj80_Display2
00005990 0868 0000 001A             		bchg	#0,$1A(a0)
00005996                            
00005996                            Obj80_Display2:
00005996 4EF9 0000 0000             		jmp	DisplaySprite
0000599C                            ; ===========================================================================
0000599C                            
0000599C                            Obj80_Delete:				; XREF: Obj80_ChkType
0000599C 4EF9 0000 0000             		jmp	DeleteObject
000059A2                            ; ===========================================================================
000059A2                            
000059A2                            ; ---------------------------------------------------------------------------
000059A2                            ; Object 81 - Sonic on the continue screen
000059A2                            ; ---------------------------------------------------------------------------
000059A2                            
000059A2                            Obj81:					; XREF: Obj_Index
000059A2 7000                       		moveq	#0,d0
000059A4 1028 0024                  		move.b	$24(a0),d0
000059A8 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
000059AC 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
000059B0 4EF9 0000 0000             		jmp	DisplaySprite
000059B6                            ; ===========================================================================
000059B6 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
000059B8 0000                       		dc.w Obj81_ChkLand-Obj81_Index
000059BA 0000                       		dc.w Obj81_Animate-Obj81_Index
000059BC 0000                       		dc.w Obj81_Run-Obj81_Index
000059BE                            ; ===========================================================================
000059BE                            
000059BE                            Obj81_Main:				; XREF: Obj81_Index
000059BE 5428 0024                  		addq.b	#2,$24(a0)
000059C2 317C 00A0 0008             		move.w	#$A0,8(a0)
000059C8 317C 00C0 000C             		move.w	#$C0,$C(a0)
000059CE 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000059D6 317C 0780 0002             		move.w	#$780,2(a0)
000059DC 117C 0004 0001             		move.b	#4,1(a0)
000059E2 117C 0002 0018             		move.b	#2,$18(a0)
000059E8 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
000059EE 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
000059F4                            
000059F4                            Obj81_ChkLand:				; XREF: Obj81_Index
000059F4 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
000059FA 6600                       		bne.s	Obj81_ShowFall	; if not, branch
000059FC 5428 0024                  		addq.b	#2,$24(a0)
00005A00 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00005A04 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005A0C 317C 8500 0002             		move.w	#$8500,2(a0)
00005A12 117C 0000 001C             		move.b	#0,$1C(a0)
00005A18 6000                       		bra.s	Obj81_Animate
00005A1A                            ; ===========================================================================
00005A1A                            
00005A1A                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005A1A 4EB9 0000 0000             		jsr	SpeedToPos
00005A20 4EB9 0000 0000             		jsr	Sonic_Animate
00005A26 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005A2C                            ; ===========================================================================
00005A2C                            
00005A2C                            Obj81_Animate:				; XREF: Obj81_Index
00005A2C 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
00005A30 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00005A32 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00005A38 4EF9 0000 0000             		jmp	AnimateSprite
00005A3E                            ; ===========================================================================
00005A3E                            
00005A3E                            Obj81_GetUp:				; XREF: Obj81_Animate
00005A3E 5428 0024                  		addq.b	#2,$24(a0)
00005A42 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005A4A 317C 0780 0002             		move.w	#$780,2(a0)
00005A50 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005A56 4268 0014                  		clr.w	$14(a0)
00005A5A 5168 000C                  		subq.w	#8,$C(a0)
00005A5E 103C 00E0                  		move.b	#$E0,d0
00005A62 6100 BA12                  		bsr.w	PlaySound_Special ; fade out music
00005A66                            
00005A66                            Obj81_Run:				; XREF: Obj81_Index
00005A66 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
00005A6C 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
00005A6E 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005A74 6000                       		bra.s	Obj81_ShowRun
00005A76                            ; ===========================================================================
00005A76                            
00005A76                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005A76 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
00005A7C                            
00005A7C                            Obj81_ShowRun:				; XREF: Obj81_Run
00005A7C 4EB9 0000 0000             		jsr	SpeedToPos
00005A82 4EB9 0000 0000             		jsr	Sonic_Animate
00005A88 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005A8E                            ; ===========================================================================
00005A8E                            Ani_obj81:
00005A8E                            	include "_anim\obj81.asm"
00005A8E                            ; ---------------------------------------------------------------------------
00005A8E                            ; Animation script - Sonic on the continue screen
00005A8E                            ; ---------------------------------------------------------------------------
00005A8E 0000                       		dc.w byte_504A-Ani_obj81
00005A90 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
00005A9C 00                         		even
00005A9C 00                         		even
00005A9C                            
00005A9C                            ; ---------------------------------------------------------------------------
00005A9C                            ; Sprite mappings - Continue screen
00005A9C                            ; ---------------------------------------------------------------------------
00005A9C                            Map_obj80:
00005A9C                            	include "_maps\obj80.asm"
00005A9C                            ; ---------------------------------------------------------------------------
00005A9C                            ; Sprite mappings - Continue screen
00005A9C                            ; ---------------------------------------------------------------------------
00005A9C 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
00005AA0 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
00005AA4 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00005AA8 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
00005AAC 0B                         byte_5066:	dc.b $B
00005AAD F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00005AB2 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00005AB7 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
00005ABC F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00005AC1 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00005AC6 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00005ACB F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
00005AD0 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00005AD5 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
00005ADA 3805 2021 08               		dc.b $38, 5, $20, $21, 8
00005ADF 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00005AE4 03                         byte_509E:	dc.b 3
00005AE5 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
00005AEA F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005AEF F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005AF4 03                         byte_50AE:	dc.b 3
00005AF5 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
00005AFA F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005AFF F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005B04 03                         byte_50BE:	dc.b 3
00005B05 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005B0A F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005B0F F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005B14 02                         byte_50CE:	dc.b 2
00005B15 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005B1A 6009 2800 00               		dc.b $60, 9, $28, 0, 0
00005B1F 01                         byte_50D9:	dc.b 1
00005B20 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00005B25 01                         byte_50DF:	dc.b 1
00005B26 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00005B2C 00                         		even
00005B2C 00                         		even
00005B2C                            
00005B2C                            ; ===========================================================================
00005B2C                            ; ---------------------------------------------------------------------------
00005B2C                            ; Ending sequence in Green Hill	Zone
00005B2C                            ; ---------------------------------------------------------------------------
00005B2C                            
00005B2C                            EndingSequence:				; XREF: GameModeArray
00005B2C 103C 00E4                  		move.b	#$E4,d0
00005B30 6100 B944                  		bsr.w	PlaySound_Special ; stop music
00005B34 6100 C64A                  		bsr.w	Pal_FadeFrom
00005B38 43F8 D000                  		lea	($FFFFD000).w,a1
00005B3C 7000                       		moveq	#0,d0
00005B3E 323C 07FF                  		move.w	#$7FF,d1
00005B42                            
00005B42                            End_ClrObjRam:
00005B42 22C0                       		move.l	d0,(a1)+
00005B44 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00005B48                            
00005B48 43F8 F628                  		lea	($FFFFF628).w,a1
00005B4C 7000                       		moveq	#0,d0
00005B4E 323C 0015                  		move.w	#$15,d1
00005B52                            
00005B52                            End_ClrRam:
00005B52 22C0                       		move.l	d0,(a1)+
00005B54 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005B58                            
00005B58 43F8 F700                  		lea	($FFFFF700).w,a1
00005B5C 7000                       		moveq	#0,d0
00005B5E 323C 003F                  		move.w	#$3F,d1
00005B62                            
00005B62                            End_ClrRam2:
00005B62 22C0                       		move.l	d0,(a1)+
00005B64 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005B68                            
00005B68 43F8 FE60                  		lea	($FFFFFE60).w,a1
00005B6C 7000                       		moveq	#0,d0
00005B6E 323C 0047                  		move.w	#$47,d1
00005B72                            
00005B72                            End_ClrRam3:
00005B72 22C0                       		move.l	d0,(a1)+
00005B74 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005B78                            
00005B78 46FC 2700                  		move	#$2700,sr
00005B7C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005B80 0200 00BF                  		andi.b	#$BF,d0
00005B84 33C0 00C0 0004             		move.w	d0,($C00004).l
00005B8A 6100 B7F4                  		bsr.w	ClearScreen
00005B8E 4DF9 00C0 0004             		lea	($C00004).l,a6
00005B94 3CBC 8B03                  		move.w	#$8B03,(a6)
00005B98 3CBC 8230                  		move.w	#$8230,(a6)
00005B9C 3CBC 8407                  		move.w	#$8407,(a6)
00005BA0 3CBC 857C                  		move.w	#$857C,(a6)
00005BA4 3CBC 9001                  		move.w	#$9001,(a6)
00005BA8 3CBC 8004                  		move.w	#$8004,(a6)
00005BAC 3CBC 8720                  		move.w	#$8720,(a6)
00005BB0 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00005BB6 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00005BBA 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00005BC0 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00005BC6 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005BCC 6700                       		beq.s	End_LoadData	; if yes, branch
00005BCE 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
00005BD4                            
00005BD4                            End_LoadData:
00005BD4 701C                       		moveq	#$1C,d0
00005BD6 6100 BC7E                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
00005BDA 4EB9 0000 0000             		jsr	Hud_Base
00005BE0 6100 0000                  		bsr.w	LevelSizeLoad
00005BE4 6100 0000                  		bsr.w	DeformBgLayer
00005BE8 08F8 0002 F754             		bset	#2,($FFFFF754).w
00005BEE 6100 0000                  		bsr.w	MainLoadBlockLoad
00005BF2 6100 0000                  		bsr.w	LoadTilesFromStart
00005BF6 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
00005BFE 46FC 2300                  		move	#$2300,sr
00005C02 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005C08 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00005C0C 6100 BDF8                  		bsr.w	KosDec
00005C10 7003                       		moveq	#3,d0
00005C12 6100 C81A                  		bsr.w	PalLoad1	; load Sonic's pallet
00005C16 303C 008B                  		move.w	#$8B,d0
00005C1A 6100 B854                  		bsr.w	PlaySound	; play ending sequence music
00005C1E 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00005C24 6700                       		beq.s	End_LoadSonic	; if not, branch
00005C26 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005C2C                            
00005C2C                            End_LoadSonic:
00005C2C 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00005C32 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00005C38 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00005C3E 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00005C44 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00005C4A 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00005C50 4EB9 0000 0000             		jsr	ObjPosLoad
00005C56 4EB9 0000 0000             		jsr	ObjectsLoad
00005C5C 4EB9 0000 0000             		jsr	BuildSprites
00005C62 7000                       		moveq	#0,d0
00005C64 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00005C68 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00005C6C 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
00005C70 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005C74 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00005C78 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00005C7C 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00005C80 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005C84 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005C88 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005C8C 6100 EECA                  		bsr.w	OscillateNumInit
00005C90 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005C96 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00005C9C 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00005CA2 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00005CA8 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005CAE 6100 D6F2                  		bsr.w	DelayProgram
00005CB2 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005CB6 0000 0040                  		ori.b	#$40,d0
00005CBA 33C0 00C0 0004             		move.w	d0,($C00004).l
00005CC0 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005CC6 6100 C402                  		bsr.w	Pal_FadeTo
00005CCA                            
00005CCA                            ; ---------------------------------------------------------------------------
00005CCA                            ; Main ending sequence loop
00005CCA                            ; ---------------------------------------------------------------------------
00005CCA                            
00005CCA                            End_MainLoop:
00005CCA 6100 B7B6                  		bsr.w	PauseGame
00005CCE 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005CD4 6100 D6CC                  		bsr.w	DelayProgram
00005CD8 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005CDC 6100 0000                  		bsr.w	End_MoveSonic
00005CE0 4EB9 0000 0000             		jsr	ObjectsLoad
00005CE6 6100 0000                  		bsr.w	DeformBgLayer
00005CEA 4EB9 0000 0000             		jsr	BuildSprites
00005CF0 4EB9 0000 0000             		jsr	ObjPosLoad
00005CF6 6100 BDAE                  		bsr.w	PalCycle_Load
00005CFA 6100 EEB2                  		bsr.w	OscillateNumDo
00005CFE 6100 EF3E                  		bsr.w	ChangeRingFrame
00005D02 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00005D08 6700                       		beq.s	loc_52DA	; if yes, branch
00005D0A 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
00005D10 103C 0091                  		move.b	#$91,d0
00005D14 6100 B760                  		bsr.w	PlaySound_Special ; play credits music
00005D18 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
00005D1E 4E75                       		rts	
00005D20                            ; ===========================================================================
00005D20                            
00005D20                            loc_52DA:
00005D20 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00005D24 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
00005D28                            
00005D28 4278 FE02                  		clr.w	($FFFFFE02).w
00005D2C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005D32 4278 F794                  		clr.w	($FFFFF794).w
00005D36                            
00005D36                            End_AllEmlds:				; XREF: loc_5334
00005D36 6100 B74A                  		bsr.w	PauseGame
00005D3A 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005D40 6100 D660                  		bsr.w	DelayProgram
00005D44 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005D48 6100 0000                  		bsr.w	End_MoveSonic
00005D4C 4EB9 0000 0000             		jsr	ObjectsLoad
00005D52 6100 0000                  		bsr.w	DeformBgLayer
00005D56 4EB9 0000 0000             		jsr	BuildSprites
00005D5C 4EB9 0000 0000             		jsr	ObjPosLoad
00005D62 6100 EE4A                  		bsr.w	OscillateNumDo
00005D66 6100 EED6                  		bsr.w	ChangeRingFrame
00005D6A 5378 F794                  		subq.w	#1,($FFFFF794).w
00005D6E 6A00                       		bpl.s	loc_5334
00005D70 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005D76 6100 C556                  		bsr.w	Pal_ToWhite
00005D7A                            
00005D7A                            loc_5334:
00005D7A 4A78 FE02                  		tst.w	($FFFFFE02).w
00005D7E 6700 FFB6                  		beq.w	End_AllEmlds
00005D82 4278 FE02                  		clr.w	($FFFFFE02).w
00005D86 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00005D8C 4BF9 00C0 0004             		lea	($C00004).l,a5
00005D92 4DF9 00C0 0000             		lea	($C00000).l,a6
00005D98 47F8 F700                  		lea	($FFFFF700).w,a3
00005D9C 49F8 A400                  		lea	($FFFFA400).w,a4
00005DA0 343C 4000                  		move.w	#$4000,d2
00005DA4 6100 0000                  		bsr.w	LoadTilesFromStart2
00005DA8 7013                       		moveq	#$13,d0
00005DAA 6100 C682                  		bsr.w	PalLoad1	; load ending pallet
00005DAE 6100 C452                  		bsr.w	Pal_MakeWhite
00005DB2 6000 FF16                  		bra.w	End_MainLoop
00005DB6                            
00005DB6                            ; ---------------------------------------------------------------------------
00005DB6                            ; Subroutine controlling Sonic on the ending sequence
00005DB6                            ; ---------------------------------------------------------------------------
00005DB6                            
00005DB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005DB6                            
00005DB6                            
00005DB6                            End_MoveSonic:				; XREF: End_MainLoop
00005DB6 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
00005DBA 6600                       		bne.s	End_MoveSonic2
00005DBC 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
00005DC2 6400                       		bcc.s	End_MoveSonExit	; if not, branch
00005DC4 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005DC8 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
00005DCE 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
00005DD4 4E75                       		rts	
00005DD6                            ; ===========================================================================
00005DD6                            
00005DD6                            End_MoveSonic2:				; XREF: End_MoveSonic
00005DD6 5500                       		subq.b	#2,d0
00005DD8 6600                       		bne.s	End_MoveSonic3
00005DDA 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
00005DE0 6500                       		bcs.s	End_MoveSonExit	; if not, branch
00005DE2 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005DE6 7000                       		moveq	#0,d0
00005DE8 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
00005DEC 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
00005DF0 31C0 D014                  		move.w	d0,($FFFFD014).w
00005DF4 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
00005DFA 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
00005E00 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00005E06 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00005E0C 4E75                       		rts	
00005E0E                            ; ===========================================================================
00005E0E                            
00005E0E                            End_MoveSonic3:				; XREF: End_MoveSonic
00005E0E 5500                       		subq.b	#2,d0
00005E10 6600                       		bne.s	End_MoveSonExit
00005E12 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005E16 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00005E1C 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00005E22 4278 D024                  		clr.w	($FFFFD024).w
00005E26                            
00005E26                            End_MoveSonExit:
00005E26 4E75                       		rts	
00005E28                            ; End of function End_MoveSonic
00005E28                            
00005E28                            ; ===========================================================================
00005E28                            ; ---------------------------------------------------------------------------
00005E28                            ; Object 87 - Sonic on ending sequence
00005E28                            ; ---------------------------------------------------------------------------
00005E28                            
00005E28                            Obj87:					; XREF: Obj_Index
00005E28 7000                       		moveq	#0,d0
00005E2A 1028 0025                  		move.b	$25(a0),d0
00005E2E 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00005E32 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005E36 4EF9 0000 0000             		jmp	DisplaySprite
00005E3C                            ; ===========================================================================
00005E3C 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00005E40 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005E44 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00005E48 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00005E4C 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00005E50                            ; ===========================================================================
00005E50                            
00005E50                            Obj87_Main:				; XREF: Obj87_Index
00005E50 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005E56 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005E58 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00005E5E 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005E64 4E75                       		rts	
00005E66                            ; ===========================================================================
00005E66                            
00005E66                            Obj87_Main2:				; XREF: Obj87_Main
00005E66 5428 0025                  		addq.b	#2,$25(a0)
00005E6A 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005E72 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005E78 117C 0004 0001             		move.b	#4,1(a0)
00005E7E 4228 0022                  		clr.b	$22(a0)
00005E82 117C 0002 0018             		move.b	#2,$18(a0)
00005E88 117C 0000 001A             		move.b	#0,$1A(a0)
00005E8E 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005E94                            
00005E94                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005E94 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005E98 6600                       		bne.s	Obj87_Wait
00005E9A 5428 0025                  		addq.b	#2,$25(a0)
00005E9E 317C 0001 001C             		move.w	#1,$1C(a0)
00005EA4 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00005EAA                            
00005EAA                            Obj87_Wait:
00005EAA 4E75                       		rts	
00005EAC                            ; ===========================================================================
00005EAC                            
00005EAC                            Obj87_LookUp:				; XREF: Obj87_Index
00005EAC 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005EB4 6600                       		bne.s	locret_5480
00005EB6 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00005EBC 317C 005A 0030             		move.w	#$5A,$30(a0)
00005EC2 5428 0025                  		addq.b	#2,$25(a0)
00005EC6                            
00005EC6                            locret_5480:
00005EC6 4E75                       		rts	
00005EC8                            ; ===========================================================================
00005EC8                            
00005EC8                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00005EC8 5368 0030                  		subq.w	#1,$30(a0)
00005ECC 6600                       		bne.s	Obj87_Wait2
00005ECE 43F8 D400                  		lea	($FFFFD400).w,a1
00005ED2 323C 00FF                  		move.w	#$FF,d1
00005ED6                            
00005ED6                            Obj87_ClrLoop:
00005ED6 4299                       		clr.l	(a1)+
00005ED8 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00005EDC 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00005EE2 5428 0025                  		addq.b	#2,$25(a0)
00005EE6 117C 0001 001C             		move.b	#1,$1C(a0)
00005EEC 317C 003C 0030             		move.w	#$3C,$30(a0)
00005EF2                            
00005EF2                            Obj87_Wait2:
00005EF2 4E75                       		rts	
00005EF4                            ; ===========================================================================
00005EF4                            
00005EF4                            Obj87_MakeLogo:				; XREF: Obj87_Index
00005EF4 5368 0030                  		subq.w	#1,$30(a0)
00005EF8 6600                       		bne.s	Obj87_Wait3
00005EFA 5428 0025                  		addq.b	#2,$25(a0)
00005EFE 317C 00B4 0030             		move.w	#$B4,$30(a0)
00005F04 117C 0002 001C             		move.b	#2,$1C(a0)
00005F0A 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005F10                            
00005F10                            Obj87_Wait3:
00005F10 4E75                       		rts	
00005F12                            ; ===========================================================================
00005F12                            
00005F12                            Obj87_Animate:				; XREF: Obj87_Index
00005F12 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00005F18 4EF9 0000 0000             		jmp	AnimateSprite
00005F1E                            ; ===========================================================================
00005F1E                            
00005F1E                            Obj87_Leap:				; XREF: Obj87_Index
00005F1E 5368 0030                  		subq.w	#1,$30(a0)
00005F22 6600                       		bne.s	Obj87_Wait4
00005F24 5428 0025                  		addq.b	#2,$25(a0)
00005F28 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005F30 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005F36 117C 0004 0001             		move.b	#4,1(a0)
00005F3C 4228 0022                  		clr.b	$22(a0)
00005F40 117C 0002 0018             		move.b	#2,$18(a0)
00005F46 117C 0005 001A             		move.b	#5,$1A(a0)
00005F4C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005F52 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005F58 60B8                       		bra.s	Obj87_Animate
00005F5A                            ; ===========================================================================
00005F5A                            
00005F5A                            Obj87_Wait4:				; XREF: Obj87_Leap
00005F5A 4E75                       		rts	
00005F5C                            ; ===========================================================================
00005F5C                            Ani_obj87:
00005F5C                            	include "_anim\obj87.asm"
00005F5C                            ; ---------------------------------------------------------------------------
00005F5C                            ; Animation script - Sonic on the ending sequence
00005F5C                            ; ---------------------------------------------------------------------------
00005F5C 0000                       		dc.w byte_551C-Ani_obj87
00005F5E 0000                       		dc.w byte_552A-Ani_obj87
00005F60 0000                       		dc.w byte_5534-Ani_obj87
00005F62 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00005F70 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005F7A 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005F82                            		even
00005F82                            		even
00005F82                            
00005F82                            ; ===========================================================================
00005F82                            ; ---------------------------------------------------------------------------
00005F82                            ; Object 88 - chaos emeralds on	the ending sequence
00005F82                            ; ---------------------------------------------------------------------------
00005F82                            
00005F82                            Obj88:					; XREF: Obj_Index
00005F82 7000                       		moveq	#0,d0
00005F84 1028 0024                  		move.b	$24(a0),d0
00005F88 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005F8C 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005F90 4EF9 0000 0000             		jmp	DisplaySprite
00005F96                            ; ===========================================================================
00005F96 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005F98 0000                       		dc.w Obj88_Move-Obj88_Index
00005F9A                            ; ===========================================================================
00005F9A                            
00005F9A                            Obj88_Main:				; XREF: Obj88_Index
00005F9A 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005FA0 6700                       		beq.s	Obj88_Main2
00005FA2 588F                       		addq.l	#4,sp
00005FA4 4E75                       		rts	
00005FA6                            ; ===========================================================================
00005FA6                            
00005FA6                            Obj88_Main2:				; XREF: Obj88_Main
00005FA6 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00005FAC 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005FB2 2248                       		movea.l	a0,a1
00005FB4 7600                       		moveq	#0,d3
00005FB6 7401                       		moveq	#1,d2
00005FB8 7205                       		moveq	#5,d1
00005FBA                            
00005FBA                            Obj88_MainLoop:
00005FBA 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00005FBE 5429 0024                  		addq.b	#2,$24(a1)
00005FC2 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00005FCA 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005FD0 137C 0004 0001             		move.b	#4,1(a1)
00005FD6 137C 0001 0018             		move.b	#1,$18(a1)
00005FDC 3368 0008 0038             		move.w	8(a0),$38(a1)
00005FE2 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00005FE8 1342 001C                  		move.b	d2,$1C(a1)
00005FEC 1342 001A                  		move.b	d2,$1A(a1)
00005FF0 5202                       		addq.b	#1,d2
00005FF2 1343 0026                  		move.b	d3,$26(a1)
00005FF6 0603 002A                  		addi.b	#$2A,d3
00005FFA 43E9 0040                  		lea	$40(a1),a1
00005FFE 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00006002                            
00006002                            Obj88_Move:				; XREF: Obj88_Index
00006002 3028 003E                  		move.w	$3E(a0),d0
00006006 D168 0026                  		add.w	d0,$26(a0)
0000600A 1028 0026                  		move.b	$26(a0),d0
0000600E 4EB9 0000 33D4             		jsr	(CalcSine).l
00006014 7800                       		moveq	#0,d4
00006016 1828 003C                  		move.b	$3C(a0),d4
0000601A C3C4                       		muls.w	d4,d1
0000601C E081                       		asr.l	#8,d1
0000601E C1C4                       		muls.w	d4,d0
00006020 E080                       		asr.l	#8,d0
00006022 D268 0038                  		add.w	$38(a0),d1
00006026 D068 003A                  		add.w	$3A(a0),d0
0000602A 3141 0008                  		move.w	d1,8(a0)
0000602E 3140 000C                  		move.w	d0,$C(a0)
00006032 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00006038 6700                       		beq.s	loc_55FA
0000603A 0668 0020 003C             		addi.w	#$20,$3C(a0)
00006040                            
00006040                            loc_55FA:
00006040 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00006046 6700                       		beq.s	loc_5608
00006048 0668 0020 003E             		addi.w	#$20,$3E(a0)
0000604E                            
0000604E                            loc_5608:
0000604E 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00006054 6700                       		beq.s	locret_5614
00006056 5368 003A                  		subq.w	#1,$3A(a0)
0000605A                            
0000605A                            locret_5614:
0000605A 4E75                       		rts	
0000605C                            ; ===========================================================================
0000605C                            ; ---------------------------------------------------------------------------
0000605C                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
0000605C                            ; ---------------------------------------------------------------------------
0000605C                            
0000605C                            Obj89:					; XREF: Obj_Index
0000605C 7000                       		moveq	#0,d0
0000605E 1028 0024                  		move.b	$24(a0),d0
00006062 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00006066 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
0000606A                            ; ===========================================================================
0000606A 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
0000606C 0000                       		dc.w Obj89_Move-Obj89_Index
0000606E 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00006070                            ; ===========================================================================
00006070                            
00006070                            Obj89_Main:				; XREF: Obj89_Index
00006070 5428 0024                  		addq.b	#2,$24(a0)
00006074 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
0000607A 317C 00D8 000A             		move.w	#$D8,$A(a0)
00006080 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00006088 317C 05C5 0002             		move.w	#$5C5,2(a0)
0000608E 117C 0000 0001             		move.b	#0,1(a0)
00006094 117C 0000 0018             		move.b	#0,$18(a0)
0000609A                            
0000609A                            Obj89_Move:				; XREF: Obj89_Index
0000609A 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
000060A0 6700                       		beq.s	Obj89_Delay	; if yes, branch
000060A2 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
000060A8 6000 A256                  		bra.w	jmp_DisplaySprite
000060AC                            ; ===========================================================================
000060AC                            
000060AC                            Obj89_Delay:				; XREF: Obj89_Move
000060AC 5428 0024                  		addq.b	#2,$24(a0)
000060B0 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
000060B6                            
000060B6                            Obj89_GotoCredits:			; XREF: Obj89_Index
000060B6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
000060BA 6A00                       		bpl.s	Obj89_Display
000060BC 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
000060C2                            
000060C2                            Obj89_Display:
000060C2 6000 A23C                  		bra.w	jmp_DisplaySprite
000060C6                            ; ===========================================================================
000060C6                            ; ---------------------------------------------------------------------------
000060C6                            ; Sprite mappings - Sonic on the ending	sequence
000060C6                            ; ---------------------------------------------------------------------------
000060C6                            Map_obj87:
000060C6                            	include "_maps\obj87.asm"
000060C6                            ; ---------------------------------------------------------------------------
000060C6                            ; Sprite mappings - Sonic on the ending	sequence
000060C6                            ; ---------------------------------------------------------------------------
000060C6 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
000060CA 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
000060CE 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
000060D2 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
000060D6 02                         byte_5690:	dc.b 2
000060D7 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
000060DC 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000060E1 03                         byte_569B:	dc.b 3
000060E2 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
000060E7 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
000060EC 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000060F1 02                         byte_56AB:	dc.b 2
000060F2 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
000060F7 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000060FC 02                         byte_56B6:	dc.b 2
000060FD EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00006102 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00006107 02                         byte_56C1:	dc.b 2
00006108 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
0000610D FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00006112 03                         byte_56CC:	dc.b 3
00006113 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00006118 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
0000611D 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00006122 07                         byte_56DC:	dc.b 7
00006123 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00006128 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
0000612D BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00006132 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00006137 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
0000613C E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00006141 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00006146 18                         byte_5700:	dc.b $18
00006147 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
0000614C 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00006151 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00006156 980B 0098 30               		dc.b $98, $B, 0, $98, $30
0000615B A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00006160 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00006165 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
0000616A A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
0000616F B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00006174 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00006179 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
0000617E C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00006183 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00006188 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
0000618D B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00006192 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00006197 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
0000619C D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
000061A1 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
000061A6 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
000061AB D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
000061B0 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
000061B5 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
000061BA F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
000061C0 00                         		even
000061C0 00                         		even
000061C0                            
000061C0                            ; ---------------------------------------------------------------------------
000061C0                            ; Sprite mappings - chaos emeralds on the ending sequence
000061C0                            ; ---------------------------------------------------------------------------
000061C0                            Map_obj88:
000061C0                            	include "_maps\obj88.asm"
000061C0                            ; ---------------------------------------------------------------------------
000061C0                            ; Sprite mappings - chaos emeralds on the ending sequence
000061C0                            ; ---------------------------------------------------------------------------
000061C0 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
000061C4 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
000061C8 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
000061CC 0000                       		dc.w byte_57AC-Map_obj88
000061CE 01                         byte_5788:	dc.b 1
000061CF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000061D4 01                         byte_578E:	dc.b 1
000061D5 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
000061DA 01                         byte_5794:	dc.b 1
000061DB F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
000061E0 01                         byte_579A:	dc.b 1
000061E1 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
000061E6 01                         byte_57A0:	dc.b 1
000061E7 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
000061EC 01                         byte_57A6:	dc.b 1
000061ED F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000061F2 01                         byte_57AC:	dc.b 1
000061F3 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000061F8                            		even
000061F8                            		even
000061F8                            
000061F8                            ; ---------------------------------------------------------------------------
000061F8                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000061F8                            ; ---------------------------------------------------------------------------
000061F8                            Map_obj89:
000061F8                            	include "_maps\obj89.asm"
000061F8                            ; ---------------------------------------------------------------------------
000061F8                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000061F8                            ; ---------------------------------------------------------------------------
000061F8 0000                       		dc.w byte_57B4-Map_obj89
000061FA 03                         byte_57B4:	dc.b 3
000061FB F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00006200 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00006205 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
0000620A                            		even
0000620A                            		even
0000620A                            
0000620A                            ; ===========================================================================
0000620A                            ; ---------------------------------------------------------------------------
0000620A                            ; Credits ending sequence
0000620A                            ; ---------------------------------------------------------------------------
0000620A                            
0000620A                            Credits:				; XREF: GameModeArray
0000620A 6100 B53C                  		bsr.w	ClearPLC
0000620E 6100 BF70                  		bsr.w	Pal_FadeFrom
00006212 4DF9 00C0 0004             		lea	($C00004).l,a6
00006218 3CBC 8004                  		move.w	#$8004,(a6)
0000621C 3CBC 8230                  		move.w	#$8230,(a6)
00006220 3CBC 8407                  		move.w	#$8407,(a6)
00006224 3CBC 9001                  		move.w	#$9001,(a6)
00006228 3CBC 9200                  		move.w	#$9200,(a6)
0000622C 3CBC 8B03                  		move.w	#$8B03,(a6)
00006230 3CBC 8720                  		move.w	#$8720,(a6)
00006234 4238 F64E                  		clr.b	($FFFFF64E).w
00006238 6100 B146                  		bsr.w	ClearScreen
0000623C 43F8 D000                  		lea	($FFFFD000).w,a1
00006240 7000                       		moveq	#0,d0
00006242 323C 07FF                  		move.w	#$7FF,d1
00006246                            
00006246                            Cred_ClrObjRam:
00006246 22C0                       		move.l	d0,(a1)+
00006248 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
0000624C                            
0000624C 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00006256 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
0000625C 6100 B34C                  		bsr.w	NemDec
00006260 43F8 FB80                  		lea	($FFFFFB80).w,a1
00006264 7000                       		moveq	#0,d0
00006266 323C 001F                  		move.w	#$1F,d1
0000626A                            
0000626A                            Cred_ClrPallet:
0000626A 22C0                       		move.l	d0,(a1)+
0000626C 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00006270                            
00006270 7003                       		moveq	#3,d0
00006272 6100 C1BA                  		bsr.w	PalLoad1	; load Sonic's pallet
00006276 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
0000627C 4EB9 0000 0000             		jsr	ObjectsLoad
00006282 4EB9 0000 0000             		jsr	BuildSprites
00006288 6100 0000                  		bsr.w	EndingDemoLoad
0000628C 7000                       		moveq	#0,d0
0000628E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006292 E948                       		lsl.w	#4,d0
00006294 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
0000629A 45F2 0000                  		lea	(a2,d0.w),a2
0000629E 7000                       		moveq	#0,d0
000062A0 1012                       		move.b	(a2),d0
000062A2 6700                       		beq.s	loc_5862
000062A4 6100 B444                  		bsr.w	LoadPLC		; load level patterns
000062A8                            
000062A8                            loc_5862:
000062A8 7001                       		moveq	#1,d0
000062AA 6100 B43E                  		bsr.w	LoadPLC		; load standard	level patterns
000062AE 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
000062B4 6100 BE14                  		bsr.w	Pal_FadeTo
000062B8                            
000062B8                            Cred_WaitLoop:
000062B8 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000062BE 6100 D0E2                  		bsr.w	DelayProgram
000062C2 6100 B492                  		bsr.w	RunPLC_RAM
000062C6 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
000062CA 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
000062CC 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
000062D0 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
000062D2 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
000062D8 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
000062DC 4E75                       		rts	
000062DE                            
000062DE                            ; ---------------------------------------------------------------------------
000062DE                            ; Ending sequence demo loading subroutine
000062DE                            ; ---------------------------------------------------------------------------
000062DE                            
000062DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000062DE                            
000062DE                            
000062DE                            EndingDemoLoad:				; XREF: Credits
000062DE 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000062E2 0240 000F                  		andi.w	#$F,d0
000062E6 D040                       		add.w	d0,d0
000062E8 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
000062EC 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
000062F0 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
000062F4 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
000062FA 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
000062FC 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00006302 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00006308 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000630E 7000                       		moveq	#0,d0
00006310 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00006314 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00006318 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000631C 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00006320 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00006326 6600                       		bne.s	EndDemo_Exit	; if not, branch
00006328 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
0000632E 45F8 FE30                  		lea	($FFFFFE30).w,a2
00006332 303C 0008                  		move.w	#8,d0
00006336                            
00006336                            EndDemo_LampLoad:
00006336 24D9                       		move.l	(a1)+,(a2)+
00006338 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
0000633C                            
0000633C                            EndDemo_Exit:
0000633C 4E75                       		rts	
0000633E                            ; End of function EndingDemoLoad
0000633E                            
0000633E                            ; ===========================================================================
0000633E                            ; ---------------------------------------------------------------------------
0000633E                            ; Levels used in the end sequence demos
0000633E                            ; ---------------------------------------------------------------------------
0000633E                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
0000634E                            
0000634E                            ; ---------------------------------------------------------------------------
0000634E                            ; Lamppost variables in the end sequence demo (Star Light Zone)
0000634E                            ; ---------------------------------------------------------------------------
0000634E                            EndDemo_LampVar:
0000634E 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00006350 0A00 062C 000D             		dc.w $A00, $62C, $D
00006356 0000 0000                  		dc.l 0
0000635A 0000                       		dc.b 0,	0
0000635C 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00006370 0101                       		dc.b 1,	1
00006372                            ; ===========================================================================
00006372                            ; ---------------------------------------------------------------------------
00006372                            ; "TRY AGAIN" and "END"	screens
00006372                            ; ---------------------------------------------------------------------------
00006372                            
00006372                            TryAgainEnd:				; XREF: Credits
00006372 6100 B3D4                  		bsr.w	ClearPLC
00006376 6100 BE08                  		bsr.w	Pal_FadeFrom
0000637A 4DF9 00C0 0004             		lea	($C00004).l,a6
00006380 3CBC 8004                  		move.w	#$8004,(a6)
00006384 3CBC 8230                  		move.w	#$8230,(a6)
00006388 3CBC 8407                  		move.w	#$8407,(a6)
0000638C 3CBC 9001                  		move.w	#$9001,(a6)
00006390 3CBC 9200                  		move.w	#$9200,(a6)
00006394 3CBC 8B03                  		move.w	#$8B03,(a6)
00006398 3CBC 8720                  		move.w	#$8720,(a6)
0000639C 4238 F64E                  		clr.b	($FFFFF64E).w
000063A0 6100 AFDE                  		bsr.w	ClearScreen
000063A4 43F8 D000                  		lea	($FFFFD000).w,a1
000063A8 7000                       		moveq	#0,d0
000063AA 323C 07FF                  		move.w	#$7FF,d1
000063AE                            
000063AE                            TryAg_ClrObjRam:
000063AE 22C0                       		move.l	d0,(a1)+
000063B0 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
000063B4                            
000063B4 701D                       		moveq	#$1D,d0
000063B6 6100 B49E                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
000063BA 43F8 FB80                  		lea	($FFFFFB80).w,a1
000063BE 7000                       		moveq	#0,d0
000063C0 323C 001F                  		move.w	#$1F,d1
000063C4                            
000063C4                            TryAg_ClrPallet:
000063C4 22C0                       		move.l	d0,(a1)+
000063C6 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
000063CA                            
000063CA 7013                       		moveq	#$13,d0
000063CC 6100 C060                  		bsr.w	PalLoad1	; load ending pallet
000063D0 4278 FBC0                  		clr.w	($FFFFFBC0).w
000063D4 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
000063DA 4EB9 0000 0000             		jsr	ObjectsLoad
000063E0 4EB9 0000 0000             		jsr	BuildSprites
000063E6 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
000063EC 6100 BCDC                  		bsr.w	Pal_FadeTo
000063F0                            
000063F0                            ; ---------------------------------------------------------------------------
000063F0                            ; "TRY AGAIN" and "END"	screen main loop
000063F0                            ; ---------------------------------------------------------------------------
000063F0                            TryAg_MainLoop:
000063F0 6100 B090                  		bsr.w	PauseGame
000063F4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000063FA 6100 CFA6                  		bsr.w	DelayProgram
000063FE 4EB9 0000 0000             		jsr	ObjectsLoad
00006404 4EB9 0000 0000             		jsr	BuildSprites
0000640A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00006410 6600                       		bne.s	TryAg_Exit	; if yes, branch
00006412 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00006416 6700                       		beq.s	TryAg_Exit	; if yes, branch
00006418 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
0000641E 67D0                       		beq.s	TryAg_MainLoop
00006420                            
00006420                            TryAg_Exit:
00006420 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00006426 4E75                       		rts	
00006428                            
00006428                            ; ===========================================================================
00006428                            ; ---------------------------------------------------------------------------
00006428                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00006428                            ; ---------------------------------------------------------------------------
00006428                            
00006428                            Obj8B:					; XREF: Obj_Index
00006428 7000                       		moveq	#0,d0
0000642A 1028 0024                  		move.b	$24(a0),d0
0000642E 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00006432 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00006436 4EF9 0000 0000             		jmp	DisplaySprite
0000643C                            ; ===========================================================================
0000643C 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
0000643E 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00006440 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00006442 0000                       		dc.w loc_5A8E-Obj8B_Index
00006444                            ; ===========================================================================
00006444                            
00006444                            Obj8B_Main:				; XREF: Obj8B_Index
00006444 5428 0024                  		addq.b	#2,$24(a0)
00006448 317C 0120 0008             		move.w	#$120,8(a0)
0000644E 317C 00F4 000A             		move.w	#$F4,$A(a0)
00006454 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
0000645C 317C 03E1 0002             		move.w	#$3E1,2(a0)
00006462 117C 0000 0001             		move.b	#0,1(a0)
00006468 117C 0002 0018             		move.b	#2,$18(a0)
0000646E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00006474 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000647A 6700                       		beq.s	Obj8B_Animate	; if yes, branch
0000647C 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00006482 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00006488 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
0000648E 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00006494                            
00006494                            Obj8B_Animate:				; XREF: Obj8B_Index
00006494 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
0000649A 4EF9 0000 0000             		jmp	AnimateSprite
000064A0                            ; ===========================================================================
000064A0                            
000064A0                            Obj8B_Juggle:				; XREF: Obj8B_Index
000064A0 5428 0024                  		addq.b	#2,$24(a0)
000064A4 7002                       		moveq	#2,d0
000064A6 0828 0000 001C             		btst	#0,$1C(a0)
000064AC 6700                       		beq.s	loc_5A6A
000064AE 4440                       		neg.w	d0
000064B0                            
000064B0                            loc_5A6A:
000064B0 43F8 D800                  		lea	($FFFFD800).w,a1
000064B4 7205                       		moveq	#5,d1
000064B6                            
000064B6                            loc_5A70:
000064B6 1340 003E                  		move.b	d0,$3E(a1)
000064BA 3400                       		move.w	d0,d2
000064BC E742                       		asl.w	#3,d2
000064BE D529 0026                  		add.b	d2,$26(a1)
000064C2 43E9 0040                  		lea	$40(a1),a1
000064C6 51C9 FFEE                  		dbf	d1,loc_5A70
000064CA 5228 001A                  		addq.b	#1,$1A(a0)
000064CE 317C 0070 0030             		move.w	#112,$30(a0)
000064D4                            
000064D4                            loc_5A8E:				; XREF: Obj8B_Index
000064D4 5368 0030                  		subq.w	#1,$30(a0)
000064D8 6A00                       		bpl.s	locret_5AA0
000064DA 0868 0000 001C             		bchg	#0,$1C(a0)
000064E0 117C 0002 0024             		move.b	#2,$24(a0)
000064E6                            
000064E6                            locret_5AA0:
000064E6 4E75                       		rts	
000064E8                            ; ===========================================================================
000064E8                            Ani_obj8B:
000064E8                            	include "_anim\obj8B.asm"
000064E8                            ; ---------------------------------------------------------------------------
000064E8                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
000064E8                            ; ---------------------------------------------------------------------------
000064E8 0000                       		dc.w byte_5AA8-Ani_obj8B
000064EA 0000                       		dc.w byte_5AAC-Ani_obj8B
000064EC 0000                       		dc.w byte_5AB0-Ani_obj8B
000064EE 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
000064F2 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
000064F6 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00006508                            		even
00006508                            		even
00006508                            
00006508                            ; ===========================================================================
00006508                            ; ---------------------------------------------------------------------------
00006508                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00006508                            ; ---------------------------------------------------------------------------
00006508                            
00006508                            Obj8C:					; XREF: Obj_Index
00006508 7000                       		moveq	#0,d0
0000650A 1028 0024                  		move.b	$24(a0),d0
0000650E 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00006512 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00006516 4EF9 0000 0000             		jmp	DisplaySprite
0000651C                            ; ===========================================================================
0000651C 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
0000651E 0000                       		dc.w Obj8C_Move-Obj8C_Index
00006520                            ; ===========================================================================
00006520                            
00006520                            Obj8C_Main:				; XREF: Obj8C_Index
00006520 2248                       		movea.l	a0,a1
00006522 7400                       		moveq	#0,d2
00006524 7600                       		moveq	#0,d3
00006526 7205                       		moveq	#5,d1
00006528 9238 FE57                  		sub.b	($FFFFFE57).w,d1
0000652C                            
0000652C                            Obj8C_MakeEms:				; XREF: loc_5B42
0000652C 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00006530 5429 0024                  		addq.b	#2,$24(a1)
00006534 237C 0000 61C0 0004        		move.l	#Map_obj88,4(a1)
0000653C 337C 03C5 0002             		move.w	#$3C5,2(a1)
00006542 137C 0000 0001             		move.b	#0,1(a1)
00006548 137C 0001 0018             		move.b	#1,$18(a1)
0000654E 337C 0104 0008             		move.w	#$104,8(a1)
00006554 337C 0120 0038             		move.w	#$120,$38(a1)
0000655A 337C 00EC 000A             		move.w	#$EC,$A(a1)
00006560 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00006566 137C 001C 003C             		move.b	#$1C,$3C(a1)
0000656C 47F8 FE58                  		lea	($FFFFFE58).w,a3
00006570                            
00006570                            Obj8C_ChkEms:
00006570 7000                       		moveq	#0,d0
00006572 1038 FE57                  		move.b	($FFFFFE57).w,d0
00006576 5340                       		subq.w	#1,d0
00006578 6500                       		bcs.s	loc_5B42
0000657A                            
0000657A                            Obj8C_ChkEmLoop:
0000657A B433 0000                  		cmp.b	(a3,d0.w),d2
0000657E 6600                       		bne.s	loc_5B3E
00006580 5202                       		addq.b	#1,d2
00006582 60EC                       		bra.s	Obj8C_ChkEms
00006584                            ; ===========================================================================
00006584                            
00006584                            loc_5B3E:
00006584 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00006588                            
00006588                            loc_5B42:
00006588 1342 001A                  		move.b	d2,$1A(a1)
0000658C 5229 001A                  		addq.b	#1,$1A(a1)
00006590 5202                       		addq.b	#1,d2
00006592 137C 0080 0026             		move.b	#$80,$26(a1)
00006598 1343 001E                  		move.b	d3,$1E(a1)
0000659C 1343 001F                  		move.b	d3,$1F(a1)
000065A0 0643 000A                  		addi.w	#$A,d3
000065A4 43E9 0040                  		lea	$40(a1),a1
000065A8 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
000065AC                            
000065AC                            Obj8C_Move:				; XREF: Obj8C_Index
000065AC 4A68 003E                  		tst.w	$3E(a0)
000065B0 6700                       		beq.s	locret_5BBA
000065B2 4A28 001E                  		tst.b	$1E(a0)
000065B6 6700                       		beq.s	loc_5B78
000065B8 5328 001E                  		subq.b	#1,$1E(a0)
000065BC 6600                       		bne.s	loc_5B80
000065BE                            
000065BE                            loc_5B78:
000065BE 3028 003E                  		move.w	$3E(a0),d0
000065C2 D168 0026                  		add.w	d0,$26(a0)
000065C6                            
000065C6                            loc_5B80:
000065C6 1028 0026                  		move.b	$26(a0),d0
000065CA 6700                       		beq.s	loc_5B8C
000065CC 0C00 0080                  		cmpi.b	#$80,d0
000065D0 6600                       		bne.s	loc_5B96
000065D2                            
000065D2                            loc_5B8C:
000065D2 4268 003E                  		clr.w	$3E(a0)
000065D6 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000065DC                            
000065DC                            loc_5B96:
000065DC 4EB9 0000 33D4             		jsr	(CalcSine).l
000065E2 7800                       		moveq	#0,d4
000065E4 1828 003C                  		move.b	$3C(a0),d4
000065E8 C3C4                       		muls.w	d4,d1
000065EA E081                       		asr.l	#8,d1
000065EC C1C4                       		muls.w	d4,d0
000065EE E080                       		asr.l	#8,d0
000065F0 D268 0038                  		add.w	$38(a0),d1
000065F4 D068 003A                  		add.w	$3A(a0),d0
000065F8 3141 0008                  		move.w	d1,8(a0)
000065FC 3140 000A                  		move.w	d0,$A(a0)
00006600                            
00006600                            locret_5BBA:
00006600 4E75                       		rts	
00006602                            ; ===========================================================================
00006602                            ; ---------------------------------------------------------------------------
00006602                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00006602                            ; ---------------------------------------------------------------------------
00006602                            Map_obj8B:
00006602                            	include "_maps\obj8B.asm"
00006602                            ; ---------------------------------------------------------------------------
00006602                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00006602                            ; ---------------------------------------------------------------------------
00006602 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00006606 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
0000660A 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
0000660E 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00006612 08                         byte_5BCC:	dc.b 8
00006613 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006618 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
0000661D E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006622 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006627 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
0000662C 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006631 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006636 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000663B 08                         byte_5BF5:	dc.b 8
0000663C E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006641 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006646 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
0000664B F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006650 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006655 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
0000665A 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000665F 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006664 08                         byte_5C1E:	dc.b 8
00006665 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
0000666A F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
0000666F E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00006674 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00006679 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
0000667E 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006683 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006688 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000668D 08                         byte_5C47:	dc.b 8
0000668E E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006693 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00006698 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
0000669D F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
000066A2 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
000066A7 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
000066AC 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000066B1 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000066B6 0C                         byte_5C70:	dc.b $C
000066B7 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
000066BC F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
000066C1 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
000066C6 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
000066CB ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
000066D0 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
000066D5 0504 0835 00               		dc.b 5,	4, 8, $35, 0
000066DA 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
000066DF 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
000066E4 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
000066E9 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000066EE 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000066F3 0A                         byte_5CAD:	dc.b $A
000066F4 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
000066F9 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
000066FE F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006703 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006708 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
0000670D F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006712 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006717 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000671C 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006721 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006726 0A                         byte_5CE0:	dc.b $A
00006727 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
0000672C E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006731 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006736 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
0000673B E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006740 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006745 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
0000674A 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000674F 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006754 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006759 0C                         byte_5D13:	dc.b $C
0000675A F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
0000675F FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006764 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006769 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
0000676E F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006773 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006778 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
0000677D 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006782 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006787 180C 0087 00               		dc.b $18, $C, 0, $87, 0
0000678C 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006791 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006796                            		even
00006796                            		even
00006796                            
00006796                            ; ---------------------------------------------------------------------------
00006796                            ; Ending sequence demos
00006796                            ; ---------------------------------------------------------------------------
00006796                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
000067C4                            		even
000067C4                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00006804                            		even
00006804                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00006834                            		even
00006834                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00006864                            		even
00006864                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00006884                            		even
00006884                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
000068A4                            		even
000068A4                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
000068D4                            		even
000068D4                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00006904                            		even
00006904                            
00006904                            ; ---------------------------------------------------------------------------
00006904                            ; Subroutine to	load level boundaries and start	locations
00006904                            ; ---------------------------------------------------------------------------
00006904                            
00006904                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006904                            
00006904                            
00006904                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00006904 7000                       		moveq	#0,d0
00006906 11C0 F740                  		move.b	d0,($FFFFF740).w
0000690A 11C0 F741                  		move.b	d0,($FFFFF741).w
0000690E 11C0 F746                  		move.b	d0,($FFFFF746).w
00006912 11C0 F748                  		move.b	d0,($FFFFF748).w
00006916 11C0 F742                  		move.b	d0,($FFFFF742).w
0000691A 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000691E ED08                       		lsl.b	#6,d0
00006920 E848                       		lsr.w	#4,d0
00006922 3200                       		move.w	d0,d1
00006924 D040                       		add.w	d0,d0
00006926 D041                       		add.w	d1,d0
00006928 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
0000692C 3018                       		move.w	(a0)+,d0
0000692E 31C0 F730                  		move.w	d0,($FFFFF730).w
00006932 2018                       		move.l	(a0)+,d0
00006934 21C0 F728                  		move.l	d0,($FFFFF728).w
00006938 21C0 F720                  		move.l	d0,($FFFFF720).w
0000693C 2018                       		move.l	(a0)+,d0
0000693E 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00006942 21C0 F724                  		move.l	d0,($FFFFF724).w
00006946 3038 F728                  		move.w	($FFFFF728).w,d0
0000694A 0640 0240                  		addi.w	#$240,d0
0000694E 31C0 F732                  		move.w	d0,($FFFFF732).w
00006952 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006958 3018                       		move.w	(a0)+,d0
0000695A 31C0 F73E                  		move.w	d0,($FFFFF73E).w
0000695E 6000 0000                  		bra.w	LevSz_ChkLamp
00006962                            ; ===========================================================================
00006962                            ; ---------------------------------------------------------------------------
00006962                            ; Level size array and ending start location array
00006962                            ; ---------------------------------------------------------------------------
00006962                            LevelSizeArray:	incbin	misc\lvl_size.bin
00006AB2                            		even
00006AB2                            
00006AB2                            EndingStLocArray:
00006AB2                            		incbin	misc\sloc_end.bin
00006AD2                            		even
00006AD2                            
00006AD2                            ; ===========================================================================
00006AD2                            
00006AD2                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
00006AD2 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
00006AD6 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006AD8 4EB9 0000 0000             		jsr	Obj79_LoadInfo
00006ADE 3238 D008                  		move.w	($FFFFD008).w,d1
00006AE2 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006AE6 6000                       		bra.s	loc_60D0
00006AE8                            ; ===========================================================================
00006AE8                            
00006AE8                            LevSz_StartLoc:				; XREF: LevelSizeLoad
00006AE8 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006AEC ED08                       		lsl.b	#6,d0
00006AEE E848                       		lsr.w	#4,d0
00006AF0 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006AF4 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006AF8 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00006AFA 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00006AFE 5340                       		subq.w	#1,d0
00006B00 E548                       		lsl.w	#2,d0
00006B02 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006B06                            
00006B06                            LevSz_SonicPos:
00006B06 7200                       		moveq	#0,d1
00006B08 3219                       		move.w	(a1)+,d1
00006B0A 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
00006B0E 7000                       		moveq	#0,d0
00006B10 3011                       		move.w	(a1),d0
00006B12 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00006B16                            
00006B16                            loc_60D0:				; XREF: LevSz_ChkLamp
00006B16 4278 F7A8                  		clr.w	($FFFFF7A8).w		; reset Sonic's position tracking index
00006B1A 45F8 CB00                  		lea	($FFFFCB00).w,a2	; load the tracking array into a2
00006B1E 743F                       		moveq	#63,d2				; begin a 64-step loop
00006B20                            @looppoint:
00006B20 34C1                       		move.w	d1,(a2)+			; fill in X
00006B22 34C0                       		move.w	d0,(a2)+			; fill in Y
00006B24 51CA FFFA                  		dbf	d2,@looppoint		; loop
00006B28 0441 00A0                  		subi.w	#$A0,d1
00006B2C 6400                       		bcc.s	loc_60D8
00006B2E 7200                       		moveq	#0,d1
00006B30                            
00006B30                            loc_60D8:
00006B30 3438 F72A                  		move.w	($FFFFF72A).w,d2
00006B34 B242                       		cmp.w	d2,d1
00006B36 6500                       		bcs.s	loc_60E2
00006B38 3202                       		move.w	d2,d1
00006B3A                            
00006B3A                            loc_60E2:
00006B3A 31C1 F700                  		move.w	d1,($FFFFF700).w
00006B3E 0440 0060                  		subi.w	#$60,d0
00006B42 6400                       		bcc.s	loc_60EE
00006B44 7000                       		moveq	#0,d0
00006B46                            
00006B46                            loc_60EE:
00006B46 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006B4A 6D00                       		blt.s	loc_60F8
00006B4C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00006B50                            
00006B50                            loc_60F8:
00006B50 31C0 F704                  		move.w	d0,($FFFFF704).w
00006B54 6100 0000                  		bsr.w	BgScrollSpeed
00006B58 7000                       		moveq	#0,d0
00006B5A 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006B5E E508                       		lsl.b	#2,d0
00006B60 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00006B66 6000 0000                  		bra.w	LevSz_Unk
00006B6A                            ; ===========================================================================
00006B6A                            ; ---------------------------------------------------------------------------
00006B6A                            ; Sonic	start location array
00006B6A                            ; ---------------------------------------------------------------------------
00006B6A                            StartLocArray:	incbin	misc\sloc_lev.bin
00006BDA                            		even
00006BDA                            
00006BDA                            ; ---------------------------------------------------------------------------
00006BDA                            ; Which	256x256	tiles contain loops or roll-tunnels
00006BDA                            ; ---------------------------------------------------------------------------
00006BDA                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00006BDA                            ; loop,	loop, tunnel, tunnel
00006BDA                            ; ---------------------------------------------------------------------------
00006BDA                            LoopTileNums:	incbin	misc\loopnums.bin
00006BF6                            		even
00006BF6                            
00006BF6                            ; ===========================================================================
00006BF6                            
00006BF6                            LevSz_Unk:				; XREF: LevelSizeLoad
00006BF6 7000                       		moveq	#0,d0
00006BF8 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006BFC E748                       		lsl.w	#3,d0
00006BFE 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
00006C02 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
00006C06 24D9                       		move.l	(a1)+,(a2)+
00006C08 24D9                       		move.l	(a1)+,(a2)+
00006C0A 4E75                       		rts	
00006C0C                            ; End of function LevelSizeLoad
00006C0C                            
00006C0C                            ; ===========================================================================
00006C0C 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00006C14 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006C1C 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006C24 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006C2C 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006C34 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006C3C 0070 0100 0100 0100        		dc.l $700100, $1000100
00006C44                            
00006C44                            ; ---------------------------------------------------------------------------
00006C44                            ; Subroutine to	set scroll speed of some backgrounds
00006C44                            ; ---------------------------------------------------------------------------
00006C44                            
00006C44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C44                            
00006C44                            
00006C44                            BgScrollSpeed:				; XREF: LevelSizeLoad
00006C44 4A38 FE30                  		tst.b	($FFFFFE30).w
00006C48 6600                       		bne.s	loc_6206
00006C4A 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006C4E 31C0 F714                  		move.w	d0,($FFFFF714).w
00006C52 31C1 F708                  		move.w	d1,($FFFFF708).w
00006C56 31C1 F710                  		move.w	d1,($FFFFF710).w
00006C5A 31C1 F718                  		move.w	d1,($FFFFF718).w
00006C5E                            
00006C5E                            loc_6206:
00006C5E 7400                       		moveq	#0,d2
00006C60 1438 FE10                  		move.b	($FFFFFE10).w,d2
00006C64 D442                       		add.w	d2,d2
00006C66 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00006C6A 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00006C6E                            ; End of function BgScrollSpeed
00006C6E                            
00006C6E                            ; ===========================================================================
00006C6E 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006C72 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00006C76 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00006C7A 0000                       		dc.w BgScroll_End-BgScroll_Index
00006C7C                            ; ===========================================================================
00006C7C                            
00006C7C                            BgScroll_GHZ:				; XREF: BgScroll_Index
00006C7C 6000 0000                  		bra.w	Deform_GHZ
00006C80                            ; ===========================================================================
00006C80                            
00006C80                            BgScroll_LZ:				; XREF: BgScroll_Index
00006C80 E280                       		asr.l	#1,d0
00006C82 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006C86 4E75                       		rts	
00006C88                            ; ===========================================================================
00006C88                            
00006C88                            BgScroll_MZ:				; XREF: BgScroll_Index
00006C88 4E75                       		rts	
00006C8A                            ; ===========================================================================
00006C8A                            
00006C8A                            BgScroll_SLZ:				; XREF: BgScroll_Index
00006C8A E280                       		asr.l	#1,d0
00006C8C 0640 00C0                  		addi.w	#$C0,d0
00006C90 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006C94 4E75                       		rts	
00006C96                            ; ===========================================================================
00006C96                            
00006C96                            BgScroll_SYZ:				; XREF: BgScroll_Index
00006C96 E980                       		asl.l	#4,d0
00006C98 2400                       		move.l	d0,d2
00006C9A E380                       		asl.l	#1,d0
00006C9C D082                       		add.l	d2,d0
00006C9E E080                       		asr.l	#8,d0
00006CA0 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006CA4 31C0 F714                  		move.w	d0,($FFFFF714).w
00006CA8 4E75                       		rts	
00006CAA                            ; ===========================================================================
00006CAA                            
00006CAA                            BgScroll_SBZ:				; XREF: BgScroll_Index
00006CAA E980                       		asl.l	#4,d0
00006CAC E380                       		asl.l	#1,d0
00006CAE E080                       		asr.l	#8,d0
00006CB0 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006CB4 4E75                       		rts	
00006CB6                            ; ===========================================================================
00006CB6                            
00006CB6                            BgScroll_End:				; XREF: BgScroll_Index
00006CB6 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006CBC 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006CC2 4E75                       		rts	
00006CC4                            ; ===========================================================================
00006CC4 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
00006CCA 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006CD0 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
00006CD6 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006CDC 4E75                       		rts
00006CDE                            
00006CDE                            ; ---------------------------------------------------------------------------
00006CDE                            ; Background layer deformation subroutines
00006CDE                            ; ---------------------------------------------------------------------------
00006CDE                            
00006CDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CDE                            
00006CDE                            
00006CDE                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00006CDE 4A38 F744                  		tst.b	($FFFFF744).w
00006CE2 6700                       		beq.s	loc_628E
00006CE4 4E75                       		rts	
00006CE6                            ; ===========================================================================
00006CE6                            
00006CE6                            loc_628E:
00006CE6 4278 F754                  		clr.w	($FFFFF754).w
00006CEA 4278 F756                  		clr.w	($FFFFF756).w
00006CEE 4278 F758                  		clr.w	($FFFFF758).w
00006CF2 4278 F75A                  		clr.w	($FFFFF75A).w
00006CF6 6100 0000                  		bsr.w	ScrollHoriz
00006CFA 6100 0000                  		bsr.w	ScrollVertical
00006CFE 6100 0000                  		bsr.w	DynScrResizeLoad
00006D02 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
00006D08 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
00006D0E 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00006D14 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006D1A 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
00006D20 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00006D26 7000                       		moveq	#0,d0
00006D28 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006D2C D040                       		add.w	d0,d0
00006D2E 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00006D32 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00006D36                            ; End of function DeformBgLayer
00006D36                            
00006D36                            ; ===========================================================================
00006D36                            ; ---------------------------------------------------------------------------
00006D36                            ; Offset index for background layer deformation	code
00006D36                            ; ---------------------------------------------------------------------------
00006D36 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00006D3A 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00006D3E 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00006D42 0000                       		dc.w Deform_GHZ-Deform_Index
00006D44                            ; ---------------------------------------------------------------------------
00006D44                            ; Green	Hill Zone background layer deformation code
00006D44                            ; ---------------------------------------------------------------------------
00006D44                            
00006D44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D44                            
00006D44                            
00006D44                            Deform_GHZ:				; XREF: Deform_Index
00006D44 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006D48 48C4                       		ext.l	d4
00006D4A EB84                       		asl.l	#5,d4
00006D4C 2204                       		move.l	d4,d1
00006D4E E384                       		asl.l	#1,d4
00006D50 D881                       		add.l	d1,d4
00006D52 7A00                       		moveq	#0,d5
00006D54 6100 0000                  		bsr.w	ScrollBlock1
00006D58 6100 0000                  		bsr.w	ScrollBlock4
00006D5C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006D60 3038 F704                  		move.w	($FFFFF704).w,d0
00006D64 0240 07FF                  		andi.w	#$7FF,d0
00006D68 EA48                       		lsr.w	#5,d0
00006D6A 4440                       		neg.w	d0
00006D6C 0640 0026                  		addi.w	#$26,d0
00006D70 31C0 F714                  		move.w	d0,($FFFFF714).w
00006D74 3800                       		move.w	d0,d4
00006D76 6100 0000                  		bsr.w	ScrollBlock3
00006D7A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006D80 323C 006F                  		move.w	#$6F,d1
00006D84 9244                       		sub.w	d4,d1
00006D86 3038 F700                  		move.w	($FFFFF700).w,d0
00006D8A 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00006D90 6600                       		bne.s	loc_633C
00006D92 7000                       		moveq	#0,d0
00006D94                            
00006D94                            loc_633C:
00006D94 4440                       		neg.w	d0
00006D96 4840                       		swap	d0
00006D98 3038 F708                  		move.w	($FFFFF708).w,d0
00006D9C 4440                       		neg.w	d0
00006D9E                            
00006D9E                            loc_6346:
00006D9E 22C0                       		move.l	d0,(a1)+
00006DA0 51C9 FFFC                  		dbf	d1,loc_6346
00006DA4 323C 0027                  		move.w	#$27,d1
00006DA8 3038 F710                  		move.w	($FFFFF710).w,d0
00006DAC 4440                       		neg.w	d0
00006DAE                            
00006DAE                            loc_6356:
00006DAE 22C0                       		move.l	d0,(a1)+
00006DB0 51C9 FFFC                  		dbf	d1,loc_6356
00006DB4 3038 F710                  		move.w	($FFFFF710).w,d0
00006DB8 0640 0000                  		addi.w	#0,d0
00006DBC 3438 F700                  		move.w	($FFFFF700).w,d2
00006DC0 0642 FE00                  		addi.w	#-$200,d2
00006DC4 9440                       		sub.w	d0,d2
00006DC6 48C2                       		ext.l	d2
00006DC8 E182                       		asl.l	#8,d2
00006DCA 85FC 0068                  		divs.w	#$68,d2
00006DCE 48C2                       		ext.l	d2
00006DD0 E182                       		asl.l	#8,d2
00006DD2 7600                       		moveq	#0,d3
00006DD4 3600                       		move.w	d0,d3
00006DD6 323C 0047                  		move.w	#$47,d1
00006DDA D244                       		add.w	d4,d1
00006DDC                            
00006DDC                            loc_6384:
00006DDC 3003                       		move.w	d3,d0
00006DDE 4440                       		neg.w	d0
00006DE0 22C0                       		move.l	d0,(a1)+
00006DE2 4843                       		swap	d3
00006DE4 D682                       		add.l	d2,d3
00006DE6 4843                       		swap	d3
00006DE8 51C9 FFF2                  		dbf	d1,loc_6384
00006DEC 4E75                       		rts	
00006DEE                            ; End of function Deform_GHZ
00006DEE                            
00006DEE                            ; ---------------------------------------------------------------------------
00006DEE                            ; Labyrinth Zone background layer deformation code
00006DEE                            ; ---------------------------------------------------------------------------
00006DEE                            
00006DEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DEE                            
00006DEE                            
00006DEE                            Deform_LZ:				; XREF: Deform_Index
00006DEE 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006DF2 48C4                       		ext.l	d4
00006DF4 EF84                       		asl.l	#7,d4
00006DF6 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006DFA 48C5                       		ext.l	d5
00006DFC EF85                       		asl.l	#7,d5
00006DFE 6100 0000                  		bsr.w	ScrollBlock1
00006E02 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006E08 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006E0C 323C 00DF                  		move.w	#$DF,d1
00006E10 3038 F700                  		move.w	($FFFFF700).w,d0
00006E14 4440                       		neg.w	d0
00006E16 4840                       		swap	d0
00006E18 3038 F708                  		move.w	($FFFFF708).w,d0
00006E1C 4440                       		neg.w	d0
00006E1E                            
00006E1E                            loc_63C6:
00006E1E 22C0                       		move.l	d0,(a1)+
00006E20 51C9 FFFC                  		dbf	d1,loc_63C6
00006E24 3038 F646                  		move.w	($FFFFF646).w,d0
00006E28 9078 F704                  		sub.w	($FFFFF704).w,d0
00006E2C 4E75                       		rts	
00006E2E                            ; End of function Deform_LZ
00006E2E                            
00006E2E                            ; ---------------------------------------------------------------------------
00006E2E                            ; Marble Zone background layer deformation code
00006E2E                            ; ---------------------------------------------------------------------------
00006E2E                            
00006E2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E2E                            
00006E2E                            
00006E2E                            Deform_MZ:				; XREF: Deform_Index
00006E2E 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006E32 48C4                       		ext.l	d4
00006E34 ED84                       		asl.l	#6,d4
00006E36 2204                       		move.l	d4,d1
00006E38 E384                       		asl.l	#1,d4
00006E3A D881                       		add.l	d1,d4
00006E3C 7A00                       		moveq	#0,d5
00006E3E 6100 0000                  		bsr.w	ScrollBlock1
00006E42 303C 0200                  		move.w	#$200,d0
00006E46 3238 F704                  		move.w	($FFFFF704).w,d1
00006E4A 0441 01C8                  		subi.w	#$1C8,d1
00006E4E 6500                       		bcs.s	loc_6402
00006E50 3401                       		move.w	d1,d2
00006E52 D241                       		add.w	d1,d1
00006E54 D242                       		add.w	d2,d1
00006E56 E441                       		asr.w	#2,d1
00006E58 D041                       		add.w	d1,d0
00006E5A                            
00006E5A                            loc_6402:
00006E5A 31C0 F714                  		move.w	d0,($FFFFF714).w
00006E5E 6100 0000                  		bsr.w	ScrollBlock3
00006E62 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006E68 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006E6C 323C 00DF                  		move.w	#$DF,d1
00006E70 3038 F700                  		move.w	($FFFFF700).w,d0
00006E74 4440                       		neg.w	d0
00006E76 4840                       		swap	d0
00006E78 3038 F708                  		move.w	($FFFFF708).w,d0
00006E7C 4440                       		neg.w	d0
00006E7E                            
00006E7E                            loc_6426:
00006E7E 22C0                       		move.l	d0,(a1)+
00006E80 51C9 FFFC                  		dbf	d1,loc_6426
00006E84 4E75                       		rts	
00006E86                            ; End of function Deform_MZ
00006E86                            
00006E86                            ; ---------------------------------------------------------------------------
00006E86                            ; Star Light Zone background layer deformation code
00006E86                            ; ---------------------------------------------------------------------------
00006E86                            
00006E86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E86                            
00006E86                            
00006E86                            Deform_SLZ:				; XREF: Deform_Index
00006E86 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006E8A 48C4                       		ext.l	d4
00006E8C EF84                       		asl.l	#7,d4
00006E8E 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006E92 48C5                       		ext.l	d5
00006E94 EF85                       		asl.l	#7,d5
00006E96 6100 0000                  		bsr.w	ScrollBlock2
00006E9A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006EA0 6100 0000                  		bsr.w	Deform_SLZ_2
00006EA4 45F8 A800                  		lea	($FFFFA800).w,a2
00006EA8 3038 F70C                  		move.w	($FFFFF70C).w,d0
00006EAC 3400                       		move.w	d0,d2
00006EAE 0440 00C0                  		subi.w	#$C0,d0
00006EB2 0240 03F0                  		andi.w	#$3F0,d0
00006EB6 E648                       		lsr.w	#3,d0
00006EB8 45F2 0000                  		lea	(a2,d0.w),a2
00006EBC 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006EC0 323C 000E                  		move.w	#$E,d1
00006EC4 3038 F700                  		move.w	($FFFFF700).w,d0
00006EC8 4440                       		neg.w	d0
00006ECA 4840                       		swap	d0
00006ECC 0242 000F                  		andi.w	#$F,d2
00006ED0 D442                       		add.w	d2,d2
00006ED2 301A                       		move.w	(a2)+,d0
00006ED4 4EFB 2000                  		jmp	loc_6482(pc,d2.w)
00006ED8                            ; ===========================================================================
00006ED8                            
00006ED8                            loc_6480:				; XREF: Deform_SLZ
00006ED8 301A                       		move.w	(a2)+,d0
00006EDA                            
00006EDA                            loc_6482:
00006EDA 22C0                       		move.l	d0,(a1)+
00006EDC 22C0                       		move.l	d0,(a1)+
00006EDE 22C0                       		move.l	d0,(a1)+
00006EE0 22C0                       		move.l	d0,(a1)+
00006EE2 22C0                       		move.l	d0,(a1)+
00006EE4 22C0                       		move.l	d0,(a1)+
00006EE6 22C0                       		move.l	d0,(a1)+
00006EE8 22C0                       		move.l	d0,(a1)+
00006EEA 22C0                       		move.l	d0,(a1)+
00006EEC 22C0                       		move.l	d0,(a1)+
00006EEE 22C0                       		move.l	d0,(a1)+
00006EF0 22C0                       		move.l	d0,(a1)+
00006EF2 22C0                       		move.l	d0,(a1)+
00006EF4 22C0                       		move.l	d0,(a1)+
00006EF6 22C0                       		move.l	d0,(a1)+
00006EF8 22C0                       		move.l	d0,(a1)+
00006EFA 51C9 FFDC                  		dbf	d1,loc_6480
00006EFE 4E75                       		rts	
00006F00                            ; End of function Deform_SLZ
00006F00                            
00006F00                            
00006F00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F00                            
00006F00                            
00006F00                            Deform_SLZ_2:				; XREF: Deform_SLZ
00006F00 43F8 A800                  		lea	($FFFFA800).w,a1
00006F04 3438 F700                  		move.w	($FFFFF700).w,d2
00006F08 4442                       		neg.w	d2
00006F0A 3002                       		move.w	d2,d0
00006F0C E640                       		asr.w	#3,d0
00006F0E 9042                       		sub.w	d2,d0
00006F10 48C0                       		ext.l	d0
00006F12 E980                       		asl.l	#4,d0
00006F14 81FC 001C                  		divs.w	#$1C,d0
00006F18 48C0                       		ext.l	d0
00006F1A E980                       		asl.l	#4,d0
00006F1C E180                       		asl.l	#8,d0
00006F1E 7600                       		moveq	#0,d3
00006F20 3602                       		move.w	d2,d3
00006F22 323C 001B                  		move.w	#$1B,d1
00006F26                            
00006F26                            loc_64CE:
00006F26 32C3                       		move.w	d3,(a1)+
00006F28 4843                       		swap	d3
00006F2A D680                       		add.l	d0,d3
00006F2C 4843                       		swap	d3
00006F2E 51C9 FFF6                  		dbf	d1,loc_64CE
00006F32 3002                       		move.w	d2,d0
00006F34 E640                       		asr.w	#3,d0
00006F36 323C 0004                  		move.w	#4,d1
00006F3A                            
00006F3A                            loc_64E2:
00006F3A 32C0                       		move.w	d0,(a1)+
00006F3C 51C9 FFFC                  		dbf	d1,loc_64E2
00006F40 3002                       		move.w	d2,d0
00006F42 E440                       		asr.w	#2,d0
00006F44 323C 0004                  		move.w	#4,d1
00006F48                            
00006F48                            loc_64F0:
00006F48 32C0                       		move.w	d0,(a1)+
00006F4A 51C9 FFFC                  		dbf	d1,loc_64F0
00006F4E 3002                       		move.w	d2,d0
00006F50 E240                       		asr.w	#1,d0
00006F52 323C 001D                  		move.w	#$1D,d1
00006F56                            
00006F56                            loc_64FE:
00006F56 32C0                       		move.w	d0,(a1)+
00006F58 51C9 FFFC                  		dbf	d1,loc_64FE
00006F5C 4E75                       		rts	
00006F5E                            ; End of function Deform_SLZ_2
00006F5E                            
00006F5E                            ; ---------------------------------------------------------------------------
00006F5E                            ; Spring Yard Zone background layer deformation	code
00006F5E                            ; ---------------------------------------------------------------------------
00006F5E                            
00006F5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F5E                            
00006F5E                            
00006F5E                            Deform_SYZ:				; XREF: Deform_Index
00006F5E 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006F62 48C4                       		ext.l	d4
00006F64 ED84                       		asl.l	#6,d4
00006F66 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006F6A 48C5                       		ext.l	d5
00006F6C E985                       		asl.l	#4,d5
00006F6E 2205                       		move.l	d5,d1
00006F70 E385                       		asl.l	#1,d5
00006F72 DA81                       		add.l	d1,d5
00006F74 6100 0000                  		bsr.w	ScrollBlock1
00006F78 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006F7E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006F82 323C 00DF                  		move.w	#$DF,d1
00006F86 3038 F700                  		move.w	($FFFFF700).w,d0
00006F8A 4440                       		neg.w	d0
00006F8C 4840                       		swap	d0
00006F8E 3038 F708                  		move.w	($FFFFF708).w,d0
00006F92 4440                       		neg.w	d0
00006F94                            
00006F94                            loc_653C:
00006F94 22C0                       		move.l	d0,(a1)+
00006F96 51C9 FFFC                  		dbf	d1,loc_653C
00006F9A 4E75                       		rts	
00006F9C                            ; End of function Deform_SYZ
00006F9C                            
00006F9C                            ; ---------------------------------------------------------------------------
00006F9C                            ; Scrap	Brain Zone background layer deformation	code
00006F9C                            ; ---------------------------------------------------------------------------
00006F9C                            
00006F9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F9C                            
00006F9C                            
00006F9C                            Deform_SBZ:				; XREF: Deform_Index
00006F9C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006FA0 48C4                       		ext.l	d4
00006FA2 ED84                       		asl.l	#6,d4
00006FA4 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006FA8 48C5                       		ext.l	d5
00006FAA E985                       		asl.l	#4,d5
00006FAC E385                       		asl.l	#1,d5
00006FAE 6100 0000                  		bsr.w	ScrollBlock1
00006FB2 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006FB8 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006FBC 323C 00DF                  		move.w	#$DF,d1
00006FC0 3038 F700                  		move.w	($FFFFF700).w,d0
00006FC4 4440                       		neg.w	d0
00006FC6 4840                       		swap	d0
00006FC8 3038 F708                  		move.w	($FFFFF708).w,d0
00006FCC 4440                       		neg.w	d0
00006FCE                            
00006FCE                            loc_6576:
00006FCE 22C0                       		move.l	d0,(a1)+
00006FD0 51C9 FFFC                  		dbf	d1,loc_6576
00006FD4 4E75                       		rts	
00006FD6                            ; End of function Deform_SBZ
00006FD6                            
00006FD6                            ; ---------------------------------------------------------------------------
00006FD6                            ; Subroutine to	scroll the level horizontally as Sonic moves
00006FD6                            ; ---------------------------------------------------------------------------
00006FD6                            
00006FD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FD6                            
00006FD6                            
00006FD6                            ScrollHoriz:				; XREF: DeformBgLayer
00006FD6 3838 F700                  		move.w	($FFFFF700).w,d4
00006FDA 6100                       		bsr.s	ScrollHoriz2
00006FDC 3038 F700                  		move.w	($FFFFF700).w,d0
00006FE0 0240 0010                  		andi.w	#$10,d0
00006FE4 1238 F74A                  		move.b	($FFFFF74A).w,d1
00006FE8 B300                       		eor.b	d1,d0
00006FEA 6600                       		bne.s	locret_65B0
00006FEC 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00006FF2 3038 F700                  		move.w	($FFFFF700).w,d0
00006FF6 9044                       		sub.w	d4,d0
00006FF8 6A00                       		bpl.s	loc_65AA
00006FFA 08F8 0002 F754             		bset	#2,($FFFFF754).w
00007000 4E75                       		rts	
00007002                            ; ===========================================================================
00007002                            
00007002                            loc_65AA:
00007002 08F8 0003 F754             		bset	#3,($FFFFF754).w
00007008                            
00007008                            locret_65B0:
00007008 4E75                       		rts	
0000700A                            ; End of function ScrollHoriz
0000700A                            
0000700A                            
0000700A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000700A                            
0000700A                            
0000700A                            ScrollHoriz2:				; XREF: ScrollHoriz
0000700A 3238 C904                  		move.w	($FFFFC904).w,d1
0000700E 6700                       		beq.s	@cont1
00007010 0441 0100                  		sub.w	#$100,d1
00007014 31C1 C904                  		move.w	d1,($FFFFC904).w
00007018 7200                       		moveq	#0,d1
0000701A 1238 C904                  		move.b	($FFFFC904).w,d1
0000701E E509                       		lsl.b	#2,d1
00007020 5801                       		addq.b	#4,d1
00007022 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007026 9001                       		sub.b	d1,d0
00007028 43F8 CB00                  		lea	($FFFFCB00).w,a1
0000702C 3031 0000                  		move.w	(a1,d0.w),d0
00007030 0240 3FFF                  		and.w	#$3FFF,d0
00007034 6000                       		bra.s	@cont2
00007036                            		
00007036                            @cont1:
00007036 3038 D008                  		move.w	($FFFFD008).w,d0
0000703A                            		
0000703A                            @cont2:
0000703A 9078 F700                  		sub.w	($FFFFF700).w,d0
0000703E 0440 0090                  		subi.w	#$90,d0
00007042 6500                       		bcs.s	loc_65F6
00007044 0440 0010                  		subi.w	#$10,d0
00007048 6400                       		bcc.s	loc_65CC
0000704A 4278 F73A                  		clr.w	($FFFFF73A).w
0000704E 4E75                       		rts	
00007050                            ; ===========================================================================
00007050                            
00007050                            loc_65CC:
00007050 0C40 0010                  		cmpi.w	#$10,d0
00007054 6500                       		bcs.s	loc_65D6
00007056 303C 0010                  		move.w	#$10,d0
0000705A                            
0000705A                            loc_65D6:
0000705A D078 F700                  		add.w	($FFFFF700).w,d0
0000705E B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00007062 6D00                       		blt.s	loc_65E4
00007064 3038 F72A                  		move.w	($FFFFF72A).w,d0
00007068                            
00007068                            loc_65E4:
00007068 3200                       		move.w	d0,d1
0000706A 9278 F700                  		sub.w	($FFFFF700).w,d1
0000706E E141                       		asl.w	#8,d1
00007070 31C0 F700                  		move.w	d0,($FFFFF700).w
00007074 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00007078 4E75                       		rts	
0000707A                            ; ===========================================================================
0000707A                            
0000707A                            loc_65F6:				; XREF: ScrollHoriz2
0000707A 0C40 FFF0                  		cmpi.w	#-$10,d0
0000707E 6E00                       		bgt.s	@cont
00007080 303C FFF0                  		move.w	#-$10,d0	
00007084                            		
00007084                            @cont:
00007084 D078 F700                  		add.w	($FFFFF700).w,d0
00007088 B078 F728                  		cmp.w	($FFFFF728).w,d0
0000708C 6EDA                       		bgt.s	loc_65E4
0000708E 3038 F728                  		move.w	($FFFFF728).w,d0
00007092 60D4                       		bra.s	loc_65E4
00007094                            ; End of function ScrollHoriz2
00007094                            
00007094                            ; ===========================================================================
00007094 4A40                       		tst.w	d0
00007096 6A00                       		bpl.s	loc_6610
00007098 303C FFFE                  		move.w	#-2,d0
0000709C 60DC                       		bra.s	loc_65F6
0000709E                            ; ===========================================================================
0000709E                            
0000709E                            loc_6610:
0000709E 303C 0002                  		move.w	#2,d0
000070A2 60AC                       		bra.s	loc_65CC
000070A4                            
000070A4                            ; ---------------------------------------------------------------------------
000070A4                            ; Subroutine to	scroll the level vertically as Sonic moves
000070A4                            ; ---------------------------------------------------------------------------
000070A4                            
000070A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070A4                            
000070A4                            
000070A4                            ScrollVertical:				; XREF: DeformBgLayer
000070A4 7200                       		moveq	#0,d1
000070A6 3038 D00C                  		move.w	($FFFFD00C).w,d0
000070AA 9078 F704                  		sub.w	($FFFFF704).w,d0
000070AE 0838 0002 D022             		btst	#2,($FFFFD022).w
000070B4 6700                       		beq.s	loc_662A
000070B6 5B40                       		subq.w	#5,d0
000070B8                            
000070B8                            loc_662A:
000070B8 0838 0001 D022             		btst	#1,($FFFFD022).w
000070BE 6700                       		beq.s	loc_664A
000070C0 0640 0020                  		addi.w	#$20,d0
000070C4 9078 F73E                  		sub.w	($FFFFF73E).w,d0
000070C8 6500                       		bcs.s	loc_6696
000070CA 0440 0040                  		subi.w	#$40,d0
000070CE 6400                       		bcc.s	loc_6696
000070D0 4A38 F75C                  		tst.b	($FFFFF75C).w
000070D4 6600                       		bne.s	loc_66A8
000070D6 6000                       		bra.s	loc_6656
000070D8                            ; ===========================================================================
000070D8                            
000070D8                            loc_664A:
000070D8 9078 F73E                  		sub.w	($FFFFF73E).w,d0
000070DC 6600                       		bne.s	loc_665C
000070DE 4A38 F75C                  		tst.b	($FFFFF75C).w
000070E2 6600                       		bne.s	loc_66A8
000070E4                            
000070E4                            loc_6656:
000070E4 4278 F73C                  		clr.w	($FFFFF73C).w
000070E8 4E75                       		rts	
000070EA                            ; ===========================================================================
000070EA                            
000070EA                            loc_665C:
000070EA 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
000070F0 6600                       		bne.s	loc_6684
000070F2 3238 D014                  		move.w	($FFFFD014).w,d1
000070F6 6A00                       		bpl.s	loc_666C
000070F8 4441                       		neg.w	d1
000070FA                            
000070FA                            loc_666C:
000070FA 0C41 0800                  		cmpi.w	#$800,d1
000070FE 6400                       		bcc.s	loc_6696
00007100 323C 0600                  		move.w	#$600,d1
00007104 0C40 0006                  		cmpi.w	#6,d0
00007108 6E00                       		bgt.s	loc_66F6
0000710A 0C40 FFFA                  		cmpi.w	#-6,d0
0000710E 6D00                       		blt.s	loc_66C0
00007110 6000                       		bra.s	loc_66AE
00007112                            ; ===========================================================================
00007112                            
00007112                            loc_6684:
00007112 323C 0200                  		move.w	#$200,d1
00007116 0C40 0002                  		cmpi.w	#2,d0
0000711A 6E00                       		bgt.s	loc_66F6
0000711C 0C40 FFFE                  		cmpi.w	#-2,d0
00007120 6D00                       		blt.s	loc_66C0
00007122 6000                       		bra.s	loc_66AE
00007124                            ; ===========================================================================
00007124                            
00007124                            loc_6696:
00007124 323C 1000                  		move.w	#$1000,d1
00007128 0C40 0010                  		cmpi.w	#$10,d0
0000712C 6E00                       		bgt.s	loc_66F6
0000712E 0C40 FFF0                  		cmpi.w	#-$10,d0
00007132 6D00                       		blt.s	loc_66C0
00007134 6000                       		bra.s	loc_66AE
00007136                            ; ===========================================================================
00007136                            
00007136                            loc_66A8:
00007136 7000                       		moveq	#0,d0
00007138 11C0 F75C                  		move.b	d0,($FFFFF75C).w
0000713C                            
0000713C                            loc_66AE:
0000713C 7200                       		moveq	#0,d1
0000713E 3200                       		move.w	d0,d1
00007140 D278 F704                  		add.w	($FFFFF704).w,d1
00007144 4A40                       		tst.w	d0
00007146 6A00 0000                  		bpl.w	loc_6700
0000714A 6000 0000                  		bra.w	loc_66CC
0000714E                            ; ===========================================================================
0000714E                            
0000714E                            loc_66C0:
0000714E 4441                       		neg.w	d1
00007150 48C1                       		ext.l	d1
00007152 E181                       		asl.l	#8,d1
00007154 D2B8 F704                  		add.l	($FFFFF704).w,d1
00007158 4841                       		swap	d1
0000715A                            
0000715A                            loc_66CC:
0000715A B278 F72C                  		cmp.w	($FFFFF72C).w,d1
0000715E 6E00                       		bgt.s	loc_6724
00007160 0C41 FF00                  		cmpi.w	#-$100,d1
00007164 6E00                       		bgt.s	loc_66F0
00007166 0241 07FF                  		andi.w	#$7FF,d1
0000716A 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00007170 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00007176 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0000717C 6000                       		bra.s	loc_6724
0000717E                            ; ===========================================================================
0000717E                            
0000717E                            loc_66F0:
0000717E 3238 F72C                  		move.w	($FFFFF72C).w,d1
00007182 6000                       		bra.s	loc_6724
00007184                            ; ===========================================================================
00007184                            
00007184                            loc_66F6:
00007184 48C1                       		ext.l	d1
00007186 E181                       		asl.l	#8,d1
00007188 D2B8 F704                  		add.l	($FFFFF704).w,d1
0000718C 4841                       		swap	d1
0000718E                            
0000718E                            loc_6700:
0000718E B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00007192 6D00                       		blt.s	loc_6724
00007194 0441 0800                  		subi.w	#$800,d1
00007198 6500                       		bcs.s	loc_6720
0000719A 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
000071A0 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
000071A6 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
000071AC 6000                       		bra.s	loc_6724
000071AE                            ; ===========================================================================
000071AE                            
000071AE                            loc_6720:
000071AE 3238 F72E                  		move.w	($FFFFF72E).w,d1
000071B2                            
000071B2                            loc_6724:
000071B2 3838 F704                  		move.w	($FFFFF704).w,d4
000071B6 4841                       		swap	d1
000071B8 2601                       		move.l	d1,d3
000071BA 96B8 F704                  		sub.l	($FFFFF704).w,d3
000071BE E09B                       		ror.l	#8,d3
000071C0 31C3 F73C                  		move.w	d3,($FFFFF73C).w
000071C4 21C1 F704                  		move.l	d1,($FFFFF704).w
000071C8 3038 F704                  		move.w	($FFFFF704).w,d0
000071CC 0240 0010                  		andi.w	#$10,d0
000071D0 1238 F74B                  		move.b	($FFFFF74B).w,d1
000071D4 B300                       		eor.b	d1,d0
000071D6 6600                       		bne.s	locret_6766
000071D8 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
000071DE 3038 F704                  		move.w	($FFFFF704).w,d0
000071E2 9044                       		sub.w	d4,d0
000071E4 6A00                       		bpl.s	loc_6760
000071E6 08F8 0000 F754             		bset	#0,($FFFFF754).w
000071EC 4E75                       		rts	
000071EE                            ; ===========================================================================
000071EE                            
000071EE                            loc_6760:
000071EE 08F8 0001 F754             		bset	#1,($FFFFF754).w
000071F4                            
000071F4                            locret_6766:
000071F4 4E75                       		rts	
000071F6                            ; End of function ScrollVertical
000071F6                            
000071F6                            
000071F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071F6                            
000071F6                            
000071F6                            ScrollBlock1:				; XREF: Deform_GHZ; et al
000071F6 2438 F708                  		move.l	($FFFFF708).w,d2
000071FA 2002                       		move.l	d2,d0
000071FC D084                       		add.l	d4,d0
000071FE 21C0 F708                  		move.l	d0,($FFFFF708).w
00007202 2200                       		move.l	d0,d1
00007204 4841                       		swap	d1
00007206 0241 0010                  		andi.w	#$10,d1
0000720A 1638 F74C                  		move.b	($FFFFF74C).w,d3
0000720E B701                       		eor.b	d3,d1
00007210 6600                       		bne.s	loc_679C
00007212 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00007218 9082                       		sub.l	d2,d0
0000721A 6A00                       		bpl.s	loc_6796
0000721C 08F8 0002 F756             		bset	#2,($FFFFF756).w
00007222 6000                       		bra.s	loc_679C
00007224                            ; ===========================================================================
00007224                            
00007224                            loc_6796:
00007224 08F8 0003 F756             		bset	#3,($FFFFF756).w
0000722A                            
0000722A                            loc_679C:
0000722A 2638 F70C                  		move.l	($FFFFF70C).w,d3
0000722E 2003                       		move.l	d3,d0
00007230 D085                       		add.l	d5,d0
00007232 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00007236 2200                       		move.l	d0,d1
00007238 4841                       		swap	d1
0000723A 0241 0010                  		andi.w	#$10,d1
0000723E 1438 F74D                  		move.b	($FFFFF74D).w,d2
00007242 B501                       		eor.b	d2,d1
00007244 6600                       		bne.s	locret_67D0
00007246 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
0000724C 9083                       		sub.l	d3,d0
0000724E 6A00                       		bpl.s	loc_67CA
00007250 08F8 0000 F756             		bset	#0,($FFFFF756).w
00007256 4E75                       		rts	
00007258                            ; ===========================================================================
00007258                            
00007258                            loc_67CA:
00007258 08F8 0001 F756             		bset	#1,($FFFFF756).w
0000725E                            
0000725E                            locret_67D0:
0000725E 4E75                       		rts	
00007260                            ; End of function ScrollBlock1
00007260                            
00007260                            
00007260                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007260                            
00007260                            
00007260                            ScrollBlock2:				; XREF: Deform_SLZ
00007260 2438 F708                  		move.l	($FFFFF708).w,d2
00007264 2002                       		move.l	d2,d0
00007266 D084                       		add.l	d4,d0
00007268 21C0 F708                  		move.l	d0,($FFFFF708).w
0000726C 2638 F70C                  		move.l	($FFFFF70C).w,d3
00007270 2003                       		move.l	d3,d0
00007272 D085                       		add.l	d5,d0
00007274 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00007278 2200                       		move.l	d0,d1
0000727A 4841                       		swap	d1
0000727C 0241 0010                  		andi.w	#$10,d1
00007280 1438 F74D                  		move.b	($FFFFF74D).w,d2
00007284 B501                       		eor.b	d2,d1
00007286 6600                       		bne.s	locret_6812
00007288 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
0000728E 9083                       		sub.l	d3,d0
00007290 6A00                       		bpl.s	loc_680C
00007292 08F8 0000 F756             		bset	#0,($FFFFF756).w
00007298 4E75                       		rts	
0000729A                            ; ===========================================================================
0000729A                            
0000729A                            loc_680C:
0000729A 08F8 0001 F756             		bset	#1,($FFFFF756).w
000072A0                            
000072A0                            locret_6812:
000072A0 4E75                       		rts	
000072A2                            ; End of function ScrollBlock2
000072A2                            
000072A2                            
000072A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072A2                            
000072A2                            
000072A2                            ScrollBlock3:				; XREF: Deform_GHZ; et al
000072A2 3638 F70C                  		move.w	($FFFFF70C).w,d3
000072A6 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000072AA 3200                       		move.w	d0,d1
000072AC 0241 0010                  		andi.w	#$10,d1
000072B0 1438 F74D                  		move.b	($FFFFF74D).w,d2
000072B4 B501                       		eor.b	d2,d1
000072B6 6600                       		bne.s	locret_6842
000072B8 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000072BE 9043                       		sub.w	d3,d0
000072C0 6A00                       		bpl.s	loc_683C
000072C2 08F8 0000 F756             		bset	#0,($FFFFF756).w
000072C8 4E75                       		rts	
000072CA                            ; ===========================================================================
000072CA                            
000072CA                            loc_683C:
000072CA 08F8 0001 F756             		bset	#1,($FFFFF756).w
000072D0                            
000072D0                            locret_6842:
000072D0 4E75                       		rts	
000072D2                            ; End of function ScrollBlock3
000072D2                            
000072D2                            
000072D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072D2                            
000072D2                            
000072D2                            ScrollBlock4:				; XREF: Deform_GHZ
000072D2 3438 F710                  		move.w	($FFFFF710).w,d2
000072D6 3638 F714                  		move.w	($FFFFF714).w,d3
000072DA 3038 F73A                  		move.w	($FFFFF73A).w,d0
000072DE 48C0                       		ext.l	d0
000072E0 EF80                       		asl.l	#7,d0
000072E2 D1B8 F710                  		add.l	d0,($FFFFF710).w
000072E6 3038 F710                  		move.w	($FFFFF710).w,d0
000072EA 0240 0010                  		andi.w	#$10,d0
000072EE 1238 F74E                  		move.b	($FFFFF74E).w,d1
000072F2 B300                       		eor.b	d1,d0
000072F4 6600                       		bne.s	locret_6884
000072F6 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
000072FC 3038 F710                  		move.w	($FFFFF710).w,d0
00007300 9042                       		sub.w	d2,d0
00007302 6A00                       		bpl.s	loc_687E
00007304 08F8 0002 F758             		bset	#2,($FFFFF758).w
0000730A 6000                       		bra.s	locret_6884
0000730C                            ; ===========================================================================
0000730C                            
0000730C                            loc_687E:
0000730C 08F8 0003 F758             		bset	#3,($FFFFF758).w
00007312                            
00007312                            locret_6884:
00007312 4E75                       		rts	
00007314                            ; End of function ScrollBlock4
00007314                            
00007314                            
00007314                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007314                            
00007314                            
00007314                            sub_6886:				; XREF: loc_C44
00007314 4BF9 00C0 0004             		lea	($C00004).l,a5
0000731A 4DF9 00C0 0000             		lea	($C00000).l,a6
00007320 45F8 F756                  		lea	($FFFFF756).w,a2
00007324 47F8 F708                  		lea	($FFFFF708).w,a3
00007328 49F8 A440                  		lea	($FFFFA440).w,a4
0000732C 343C 6000                  		move.w	#$6000,d2
00007330 6100 0000                  		bsr.w	sub_6954
00007334 45F8 F758                  		lea	($FFFFF758).w,a2
00007338 47F8 F710                  		lea	($FFFFF710).w,a3
0000733C 6000 0000                  		bra.w	sub_69F4
00007340                            ; End of function sub_6886
00007340                            
00007340                            ; ---------------------------------------------------------------------------
00007340                            ; Subroutine to	display	correct	tiles as you move
00007340                            ; ---------------------------------------------------------------------------
00007340                            
00007340                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007340                            
00007340                            
00007340                            LoadTilesAsYouMove:			; XREF: Demo_Time
00007340 4BF9 00C0 0004             		lea	($C00004).l,a5
00007346 4DF9 00C0 0000             		lea	($C00000).l,a6
0000734C 45F8 FF32                  		lea	($FFFFFF32).w,a2
00007350 47F8 FF18                  		lea	($FFFFFF18).w,a3
00007354 49F8 A440                  		lea	($FFFFA440).w,a4
00007358 343C 6000                  		move.w	#$6000,d2
0000735C 6100 0000                  		bsr.w	sub_6954
00007360 45F8 FF34                  		lea	($FFFFFF34).w,a2
00007364 47F8 FF20                  		lea	($FFFFFF20).w,a3
00007368 6100 0000                  		bsr.w	sub_69F4
0000736C 45F8 FF30                  		lea	($FFFFFF30).w,a2
00007370 47F8 FF10                  		lea	($FFFFFF10).w,a3
00007374 49F8 A400                  		lea	($FFFFA400).w,a4
00007378 343C 4000                  		move.w	#$4000,d2
0000737C 4A12                       		tst.b	(a2)
0000737E 6700                       		beq.s	locret_6952
00007380 0892 0000                  		bclr	#0,(a2)
00007384 6700                       		beq.s	loc_6908
00007386 78F0                       		moveq	#-$10,d4
00007388 7AF0                       		moveq	#-$10,d5
0000738A 6100 0000                  		bsr.w	sub_6C20
0000738E 78F0                       		moveq	#-$10,d4
00007390 7AF0                       		moveq	#-$10,d5
00007392 6100 0000                  		bsr.w	sub_6AD8
00007396                            
00007396                            loc_6908:
00007396 0892 0001                  		bclr	#1,(a2)
0000739A 6700                       		beq.s	loc_6922
0000739C 383C 00E0                  		move.w	#$E0,d4
000073A0 7AF0                       		moveq	#-$10,d5
000073A2 6100 0000                  		bsr.w	sub_6C20
000073A6 383C 00E0                  		move.w	#$E0,d4
000073AA 7AF0                       		moveq	#-$10,d5
000073AC 6100 0000                  		bsr.w	sub_6AD8
000073B0                            
000073B0                            loc_6922:
000073B0 0892 0002                  		bclr	#2,(a2)
000073B4 6700                       		beq.s	loc_6938
000073B6 78F0                       		moveq	#-$10,d4
000073B8 7AF0                       		moveq	#-$10,d5
000073BA 6100 0000                  		bsr.w	sub_6C20
000073BE 78F0                       		moveq	#-$10,d4
000073C0 7AF0                       		moveq	#-$10,d5
000073C2 6100 0000                  		bsr.w	sub_6B04
000073C6                            
000073C6                            loc_6938:
000073C6 0892 0003                  		bclr	#3,(a2)
000073CA 6700                       		beq.s	locret_6952
000073CC 78F0                       		moveq	#-$10,d4
000073CE 3A3C 0140                  		move.w	#$140,d5
000073D2 6100 0000                  		bsr.w	sub_6C20
000073D6 78F0                       		moveq	#-$10,d4
000073D8 3A3C 0140                  		move.w	#$140,d5
000073DC 6100 0000                  		bsr.w	sub_6B04
000073E0                            
000073E0                            locret_6952:
000073E0 4E75                       		rts	
000073E2                            ; End of function LoadTilesAsYouMove
000073E2                            
000073E2                            
000073E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000073E2                            
000073E2                            
000073E2                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
000073E2 4A12                       		tst.b	(a2)
000073E4 6700 0000                  		beq.w	locret_69F2
000073E8 0892 0000                  		bclr	#0,(a2)
000073EC 6700                       		beq.s	loc_6972
000073EE 78F0                       		moveq	#-$10,d4
000073F0 7AF0                       		moveq	#-$10,d5
000073F2 6100 0000                  		bsr.w	sub_6C20
000073F6 78F0                       		moveq	#-$10,d4
000073F8 7AF0                       		moveq	#-$10,d5
000073FA 7C1F                       		moveq	#$1F,d6
000073FC 6100 0000                  		bsr.w	sub_6ADA
00007400                            
00007400                            loc_6972:
00007400 0892 0001                  		bclr	#1,(a2)
00007404 6700                       		beq.s	loc_698E
00007406 383C 00E0                  		move.w	#$E0,d4
0000740A 7AF0                       		moveq	#-$10,d5
0000740C 6100 0000                  		bsr.w	sub_6C20
00007410 383C 00E0                  		move.w	#$E0,d4
00007414 7AF0                       		moveq	#-$10,d5
00007416 7C1F                       		moveq	#$1F,d6
00007418 6100 0000                  		bsr.w	sub_6ADA
0000741C                            
0000741C                            loc_698E:
0000741C 0892 0002                  		bclr	#2,(a2)
00007420 6700                       		beq.s	loc_69BE
00007422 78F0                       		moveq	#-$10,d4
00007424 7AF0                       		moveq	#-$10,d5
00007426 6100 0000                  		bsr.w	sub_6C20
0000742A 78F0                       		moveq	#-$10,d4
0000742C 7AF0                       		moveq	#-$10,d5
0000742E 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007432 322B 0004                  		move.w	4(a3),d1
00007436 0241 FFF0                  		andi.w	#-$10,d1
0000743A 9C41                       		sub.w	d1,d6
0000743C 6D00                       		blt.s	loc_69BE
0000743E E84E                       		lsr.w	#4,d6
00007440 0C46 000F                  		cmpi.w	#$F,d6
00007444 6500                       		bcs.s	loc_69BA
00007446 7C0F                       		moveq	#$F,d6
00007448                            
00007448                            loc_69BA:
00007448 6100 0000                  		bsr.w	sub_6B06
0000744C                            
0000744C                            loc_69BE:
0000744C 0892 0003                  		bclr	#3,(a2)
00007450 6700                       		beq.s	locret_69F2
00007452 78F0                       		moveq	#-$10,d4
00007454 3A3C 0140                  		move.w	#$140,d5
00007458 6100 0000                  		bsr.w	sub_6C20
0000745C 78F0                       		moveq	#-$10,d4
0000745E 3A3C 0140                  		move.w	#$140,d5
00007462 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007466 322B 0004                  		move.w	4(a3),d1
0000746A 0241 FFF0                  		andi.w	#-$10,d1
0000746E 9C41                       		sub.w	d1,d6
00007470 6D00                       		blt.s	locret_69F2
00007472 E84E                       		lsr.w	#4,d6
00007474 0C46 000F                  		cmpi.w	#$F,d6
00007478 6500                       		bcs.s	loc_69EE
0000747A 7C0F                       		moveq	#$F,d6
0000747C                            
0000747C                            loc_69EE:
0000747C 6100 0000                  		bsr.w	sub_6B06
00007480                            
00007480                            locret_69F2:
00007480 4E75                       		rts	
00007482                            ; End of function sub_6954
00007482                            
00007482                            
00007482                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007482                            
00007482                            
00007482                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00007482 4A12                       		tst.b	(a2)
00007484 6700 0000                  		beq.w	locret_6A80
00007488 0892 0002                  		bclr	#2,(a2)
0000748C 6700                       		beq.s	loc_6A3E
0000748E 0C53 0010                  		cmpi.w	#$10,(a3)
00007492 6500                       		bcs.s	loc_6A3E
00007494 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00007498 322B 0004                  		move.w	4(a3),d1
0000749C 0241 FFF0                  		andi.w	#-$10,d1
000074A0 9841                       		sub.w	d1,d4
000074A2 3F04                       		move.w	d4,-(sp)
000074A4 7AF0                       		moveq	#-$10,d5
000074A6 6100 0000                  		bsr.w	sub_6C20
000074AA 381F                       		move.w	(sp)+,d4
000074AC 7AF0                       		moveq	#-$10,d5
000074AE 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000074B2 322B 0004                  		move.w	4(a3),d1
000074B6 0241 FFF0                  		andi.w	#-$10,d1
000074BA 9C41                       		sub.w	d1,d6
000074BC 6D00                       		blt.s	loc_6A3E
000074BE E84E                       		lsr.w	#4,d6
000074C0 0446 000E                  		subi.w	#$E,d6
000074C4 6400                       		bcc.s	loc_6A3E
000074C6 4446                       		neg.w	d6
000074C8 6100 0000                  		bsr.w	sub_6B06
000074CC                            
000074CC                            loc_6A3E:
000074CC 0892 0003                  		bclr	#3,(a2)
000074D0 6700                       		beq.s	locret_6A80
000074D2 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
000074D6 322B 0004                  		move.w	4(a3),d1
000074DA 0241 FFF0                  		andi.w	#-$10,d1
000074DE 9841                       		sub.w	d1,d4
000074E0 3F04                       		move.w	d4,-(sp)
000074E2 3A3C 0140                  		move.w	#$140,d5
000074E6 6100 0000                  		bsr.w	sub_6C20
000074EA 381F                       		move.w	(sp)+,d4
000074EC 3A3C 0140                  		move.w	#$140,d5
000074F0 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000074F4 322B 0004                  		move.w	4(a3),d1
000074F8 0241 FFF0                  		andi.w	#-$10,d1
000074FC 9C41                       		sub.w	d1,d6
000074FE 6D00                       		blt.s	locret_6A80
00007500 E84E                       		lsr.w	#4,d6
00007502 0446 000E                  		subi.w	#$E,d6
00007506 6400                       		bcc.s	locret_6A80
00007508 4446                       		neg.w	d6
0000750A 6100 0000                  		bsr.w	sub_6B06
0000750E                            
0000750E                            locret_6A80:
0000750E 4E75                       		rts	
00007510                            ; End of function sub_69F4
00007510                            
00007510                            ; ===========================================================================
00007510 4A12                       		tst.b	(a2)
00007512 6700                       		beq.s	locret_6AD6
00007514 0892 0002                  		bclr	#2,(a2)
00007518 6700                       		beq.s	loc_6AAC
0000751A 383C 00D0                  		move.w	#$D0,d4
0000751E 322B 0004                  		move.w	4(a3),d1
00007522 0241 FFF0                  		andi.w	#-$10,d1
00007526 9841                       		sub.w	d1,d4
00007528 3F04                       		move.w	d4,-(sp)
0000752A 7AF0                       		moveq	#-$10,d5
0000752C 6100 0000                  		bsr.w	sub_6C3C
00007530 381F                       		move.w	(sp)+,d4
00007532 7AF0                       		moveq	#-$10,d5
00007534 7C02                       		moveq	#2,d6
00007536 6100 0000                  		bsr.w	sub_6B06
0000753A                            
0000753A                            loc_6AAC:
0000753A 0892 0003                  		bclr	#3,(a2)
0000753E 6700                       		beq.s	locret_6AD6
00007540 383C 00D0                  		move.w	#$D0,d4
00007544 322B 0004                  		move.w	4(a3),d1
00007548 0241 FFF0                  		andi.w	#-$10,d1
0000754C 9841                       		sub.w	d1,d4
0000754E 3F04                       		move.w	d4,-(sp)
00007550 3A3C 0140                  		move.w	#$140,d5
00007554 6100 0000                  		bsr.w	sub_6C3C
00007558 381F                       		move.w	(sp)+,d4
0000755A 3A3C 0140                  		move.w	#$140,d5
0000755E 7C02                       		moveq	#2,d6
00007560 6100 0000                  		bsr.w	sub_6B06
00007564                            
00007564                            locret_6AD6:
00007564 4E75                       		rts	
00007566                            
00007566                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007566                            
00007566                            
00007566                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00007566 7C15                       		moveq	#$15,d6
00007568                            ; End of function sub_6AD8
00007568                            
00007568                            
00007568                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007568                            
00007568                            
00007568                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00007568 2E3C 0080 0000             		move.l	#$800000,d7
0000756E 2200                       		move.l	d0,d1
00007570                            
00007570                            loc_6AE2:
00007570 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007574 6100 0000                  		bsr.w	sub_6BD6
00007578 2001                       		move.l	d1,d0
0000757A 6100 0000                  		bsr.w	sub_6B32
0000757E 5801                       		addq.b	#4,d1
00007580 0201 007F                  		andi.b	#$7F,d1
00007584 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007588 0645 0010                  		addi.w	#$10,d5
0000758C 51CE FFE2                  		dbf	d6,loc_6AE2
00007590 4E75                       		rts	
00007592                            ; End of function sub_6ADA
00007592                            
00007592                            
00007592                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007592                            
00007592                            
00007592                            sub_6B04:				; XREF: LoadTilesAsYouMove
00007592 7C0F                       		moveq	#$F,d6
00007594                            ; End of function sub_6B04
00007594                            
00007594                            
00007594                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007594                            
00007594                            
00007594                            sub_6B06:				; XREF: sub_6954
00007594 2E3C 0080 0000             		move.l	#$800000,d7
0000759A 2200                       		move.l	d0,d1
0000759C                            
0000759C                            loc_6B0E:
0000759C 48E7 0C00                  		movem.l	d4-d5,-(sp)
000075A0 6100 0000                  		bsr.w	sub_6BD6
000075A4 2001                       		move.l	d1,d0
000075A6 6100 0000                  		bsr.w	sub_6B32
000075AA 0641 0100                  		addi.w	#$100,d1
000075AE 0241 0FFF                  		andi.w	#$FFF,d1
000075B2 4CDF 0030                  		movem.l	(sp)+,d4-d5
000075B6 0644 0010                  		addi.w	#$10,d4
000075BA 51CE FFE0                  		dbf	d6,loc_6B0E
000075BE 4E75                       		rts	
000075C0                            ; End of function sub_6B06
000075C0                            
000075C0                            
000075C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000075C0                            
000075C0                            
000075C0                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
000075C0 8042                       		or.w	d2,d0
000075C2 4840                       		swap	d0
000075C4 0810 0004                  		btst	#4,(a0)
000075C8 6600                       		bne.s	loc_6B6E
000075CA 0810 0003                  		btst	#3,(a0)
000075CE 6600                       		bne.s	loc_6B4E
000075D0 2A80                       		move.l	d0,(a5)
000075D2 2C99                       		move.l	(a1)+,(a6)
000075D4 D087                       		add.l	d7,d0
000075D6 2A80                       		move.l	d0,(a5)
000075D8 2C99                       		move.l	(a1)+,(a6)
000075DA 4E75                       		rts	
000075DC                            ; ===========================================================================
000075DC                            
000075DC                            loc_6B4E:
000075DC 2A80                       		move.l	d0,(a5)
000075DE 2819                       		move.l	(a1)+,d4
000075E0 0A84 0800 0800             		eori.l	#$8000800,d4
000075E6 4844                       		swap	d4
000075E8 2C84                       		move.l	d4,(a6)
000075EA D087                       		add.l	d7,d0
000075EC 2A80                       		move.l	d0,(a5)
000075EE 2819                       		move.l	(a1)+,d4
000075F0 0A84 0800 0800             		eori.l	#$8000800,d4
000075F6 4844                       		swap	d4
000075F8 2C84                       		move.l	d4,(a6)
000075FA 4E75                       		rts	
000075FC                            ; ===========================================================================
000075FC                            
000075FC                            loc_6B6E:
000075FC 0810 0003                  		btst	#3,(a0)
00007600 6600                       		bne.s	loc_6B90
00007602 2A80                       		move.l	d0,(a5)
00007604 2A19                       		move.l	(a1)+,d5
00007606 2819                       		move.l	(a1)+,d4
00007608 0A84 1000 1000             		eori.l	#$10001000,d4
0000760E 2C84                       		move.l	d4,(a6)
00007610 D087                       		add.l	d7,d0
00007612 2A80                       		move.l	d0,(a5)
00007614 0A85 1000 1000             		eori.l	#$10001000,d5
0000761A 2C85                       		move.l	d5,(a6)
0000761C 4E75                       		rts	
0000761E                            ; ===========================================================================
0000761E                            
0000761E                            loc_6B90:
0000761E 2A80                       		move.l	d0,(a5)
00007620 2A19                       		move.l	(a1)+,d5
00007622 2819                       		move.l	(a1)+,d4
00007624 0A84 1800 1800             		eori.l	#$18001800,d4
0000762A 4844                       		swap	d4
0000762C 2C84                       		move.l	d4,(a6)
0000762E D087                       		add.l	d7,d0
00007630 2A80                       		move.l	d0,(a5)
00007632 0A85 1800 1800             		eori.l	#$18001800,d5
00007638 4845                       		swap	d5
0000763A 2C85                       		move.l	d5,(a6)
0000763C 4E75                       		rts	
0000763E                            ; End of function sub_6B32
0000763E                            
0000763E                            ; ===========================================================================
0000763E 4E75                       		rts	
00007640                            ; ===========================================================================
00007640 2A80                       		move.l	d0,(a5)
00007642 3A3C 2000                  		move.w	#$2000,d5
00007646 3819                       		move.w	(a1)+,d4
00007648 D845                       		add.w	d5,d4
0000764A 3C84                       		move.w	d4,(a6)
0000764C 3819                       		move.w	(a1)+,d4
0000764E D845                       		add.w	d5,d4
00007650 3C84                       		move.w	d4,(a6)
00007652 D087                       		add.l	d7,d0
00007654 2A80                       		move.l	d0,(a5)
00007656 3819                       		move.w	(a1)+,d4
00007658 D845                       		add.w	d5,d4
0000765A 3C84                       		move.w	d4,(a6)
0000765C 3819                       		move.w	(a1)+,d4
0000765E D845                       		add.w	d5,d4
00007660 3C84                       		move.w	d4,(a6)
00007662 4E75                       		rts	
00007664                            
00007664                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007664                            
00007664                            
00007664                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00007664 43F8 B000                  		lea	($FFFFB000).w,a1
00007668 D86B 0004                  		add.w	4(a3),d4
0000766C DA53                       		add.w	(a3),d5
0000766E 3604                       		move.w	d4,d3
00007670 E24B                       		lsr.w	#1,d3
00007672 0243 0380                  		andi.w	#$380,d3
00007676 E64D                       		lsr.w	#3,d5
00007678 3005                       		move.w	d5,d0
0000767A EA48                       		lsr.w	#5,d0
0000767C 0240 007F                  		andi.w	#$7F,d0
00007680 D043                       		add.w	d3,d0
00007682 76FF                       		moveq	#-1,d3
00007684 1634 0000                  		move.b	(a4,d0.w),d3
00007688 6700                       		beq.s	locret_6C1E
0000768A 5303                       		subq.b	#1,d3
0000768C 0243 007F                  		andi.w	#$7F,d3
00007690 EE5B                       		ror.w	#7,d3
00007692 D844                       		add.w	d4,d4
00007694 0244 01E0                  		andi.w	#$1E0,d4
00007698 0245 001E                  		andi.w	#$1E,d5
0000769C D644                       		add.w	d4,d3
0000769E D645                       		add.w	d5,d3
000076A0 2043                       		movea.l	d3,a0
000076A2 3610                       		move.w	(a0),d3
000076A4 0243 03FF                  		andi.w	#$3FF,d3
000076A8 E74B                       		lsl.w	#3,d3
000076AA D2C3                       		adda.w	d3,a1
000076AC                            
000076AC                            locret_6C1E:
000076AC 4E75                       		rts	
000076AE                            ; End of function sub_6BD6
000076AE                            
000076AE                            
000076AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076AE                            
000076AE                            
000076AE                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
000076AE D86B 0004                  		add.w	4(a3),d4
000076B2 DA53                       		add.w	(a3),d5
000076B4 0244 00F0                  		andi.w	#$F0,d4
000076B8 0245 01F0                  		andi.w	#$1F0,d5
000076BC E94C                       		lsl.w	#4,d4
000076BE E44D                       		lsr.w	#2,d5
000076C0 D845                       		add.w	d5,d4
000076C2 7003                       		moveq	#3,d0
000076C4 4840                       		swap	d0
000076C6 3004                       		move.w	d4,d0
000076C8 4E75                       		rts	
000076CA                            ; End of function sub_6C20
000076CA                            
000076CA                            
000076CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076CA                            ; not used
000076CA                            
000076CA                            
000076CA                            sub_6C3C:
000076CA D86B 0004                  		add.w	4(a3),d4
000076CE DA53                       		add.w	(a3),d5
000076D0 0244 00F0                  		andi.w	#$F0,d4
000076D4 0245 01F0                  		andi.w	#$1F0,d5
000076D8 E94C                       		lsl.w	#4,d4
000076DA E44D                       		lsr.w	#2,d5
000076DC D845                       		add.w	d5,d4
000076DE 7002                       		moveq	#2,d0
000076E0 4840                       		swap	d0
000076E2 3004                       		move.w	d4,d0
000076E4 4E75                       		rts	
000076E6                            ; End of function sub_6C3C
000076E6                            
000076E6                            ; ---------------------------------------------------------------------------
000076E6                            ; Subroutine to	load tiles as soon as the level	appears
000076E6                            ; ---------------------------------------------------------------------------
000076E6                            
000076E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076E6                            
000076E6                            
000076E6                            LoadTilesFromStart:			; XREF: Level; EndingSequence
000076E6 4BF9 00C0 0004             		lea	($C00004).l,a5
000076EC 4DF9 00C0 0000             		lea	($C00000).l,a6
000076F2 47F8 F700                  		lea	($FFFFF700).w,a3
000076F6 49F8 A400                  		lea	($FFFFA400).w,a4
000076FA 343C 4000                  		move.w	#$4000,d2
000076FE 6100                       		bsr.s	LoadTilesFromStart2
00007700 47F8 F708                  		lea	($FFFFF708).w,a3
00007704 49F8 A440                  		lea	($FFFFA440).w,a4
00007708 343C 6000                  		move.w	#$6000,d2
0000770C                            ; End of function LoadTilesFromStart
0000770C                            
0000770C                            
0000770C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000770C                            
0000770C                            
0000770C                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
0000770C 78F0                       		moveq	#-$10,d4
0000770E 7C0F                       		moveq	#$F,d6
00007710                            
00007710                            loc_6C82:
00007710 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007714 7A00                       		moveq	#0,d5
00007716 3204                       		move.w	d4,d1
00007718 6100 FF94                  		bsr.w	sub_6C20
0000771C 3801                       		move.w	d1,d4
0000771E 7A00                       		moveq	#0,d5
00007720 7C1F                       		moveq	#$1F,d6
00007722 6100 FE44                  		bsr.w	sub_6ADA
00007726 4CDF 0070                  		movem.l	(sp)+,d4-d6
0000772A 0644 0010                  		addi.w	#$10,d4
0000772E 51CE FFE0                  		dbf	d6,loc_6C82
00007732 4E75                       		rts	
00007734                            ; End of function LoadTilesFromStart2
00007734                            
00007734                            ; ---------------------------------------------------------------------------
00007734                            ; Main Load Block loading subroutine
00007734                            ; ---------------------------------------------------------------------------
00007734                            
00007734                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007734                            
00007734                            
00007734                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00007734 7000                       		moveq	#0,d0
00007736 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000773A E948                       		lsl.w	#4,d0
0000773C 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00007742 45F2 0000                  		lea	(a2,d0.w),a2
00007746 2F0A                       		move.l	a2,-(sp)
00007748 588A                       		addq.l	#4,a2
0000774A 205A                       		movea.l	(a2)+,a0
0000774C 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00007750 303C 0000                  		move.w	#0,d0
00007754 6100 A132                  		bsr.w	EniDec
00007758 205A                       		movea.l	(a2)+,a0
0000775A 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00007760 6100 A2A4                  		bsr.w	KosDec
00007764 6100 0000                  		bsr.w	LevelLayoutLoad
00007768 301A                       		move.w	(a2)+,d0
0000776A 3012                       		move.w	(a2),d0
0000776C 0240 00FF                  		andi.w	#$FF,d0
00007770 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00007776 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00007778 700C                       		moveq	#$C,d0		; use SB3 pallet
0000777A                            
0000777A                            MLB_ChkSBZPal:
0000777A 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00007780 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00007782 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00007788 6600                       		bne.s	MLB_NormalPal	; if not, branch
0000778A                            
0000778A                            MLB_UsePal0E:
0000778A 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
0000778C                            
0000778C                            MLB_NormalPal:
0000778C 6100 ACA0                  		bsr.w	PalLoad1	; load pallet (based on	d0)
00007790 245F                       		movea.l	(sp)+,a2
00007792 584A                       		addq.w	#4,a2
00007794 7000                       		moveq	#0,d0
00007796 1012                       		move.b	(a2),d0
00007798 6700                       		beq.s	locret_6D10
0000779A 6100 9F4E                  		bsr.w	LoadPLC		; load pattern load cues
0000779E                            
0000779E                            locret_6D10:
0000779E 4E75                       		rts	
000077A0                            ; End of function MainLoadBlockLoad
000077A0                            
000077A0                            ; ---------------------------------------------------------------------------
000077A0                            ; Level	layout loading subroutine
000077A0                            ; ---------------------------------------------------------------------------
000077A0                            
000077A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000077A0                            
000077A0                            
000077A0                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
000077A0 47F8 A400                  		lea	($FFFFA400).w,a3
000077A4 323C 01FF                  		move.w	#$1FF,d1
000077A8 7000                       		moveq	#0,d0
000077AA                            
000077AA                            LevLoad_ClrRam:
000077AA 26C0                       		move.l	d0,(a3)+
000077AC 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
000077B0                            
000077B0 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
000077B4 7200                       		moveq	#0,d1
000077B6 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
000077BA 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
000077BE 7202                       		moveq	#2,d1
000077C0                            ; End of function LevelLayoutLoad
000077C0                            
000077C0                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
000077C0                            
000077C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000077C0                            
000077C0                            
000077C0                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
000077C0 3038 FE10                  		move.w	($FFFFFE10).w,d0
000077C4 ED08                       		lsl.b	#6,d0
000077C6 EA48                       		lsr.w	#5,d0
000077C8 3400                       		move.w	d0,d2
000077CA D040                       		add.w	d0,d0
000077CC D042                       		add.w	d2,d0
000077CE D041                       		add.w	d1,d0
000077D0 43F9 0000 0000             		lea	(Level_Index).l,a1
000077D6 3031 0000                  		move.w	(a1,d0.w),d0
000077DA 43F1 0000                  		lea	(a1,d0.w),a1
000077DE 7200                       		moveq	#0,d1
000077E0 3401                       		move.w	d1,d2
000077E2 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
000077E4 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
000077E6                            
000077E6                            LevLoad_NumRows:
000077E6 3001                       		move.w	d1,d0
000077E8 204B                       		movea.l	a3,a0
000077EA                            
000077EA                            LevLoad_Row:
000077EA 10D9                       		move.b	(a1)+,(a0)+
000077EC 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
000077F0 47EB 0080                  		lea	$80(a3),a3	; do next row
000077F4 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
000077F8 4E75                       		rts	
000077FA                            ; End of function LevelLayoutLoad2
000077FA                            
000077FA                            ; ---------------------------------------------------------------------------
000077FA                            ; Dynamic screen resize	loading	subroutine
000077FA                            ; ---------------------------------------------------------------------------
000077FA                            
000077FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000077FA                            
000077FA                            
000077FA                            DynScrResizeLoad:			; XREF: DeformBgLayer
000077FA 7000                       		moveq	#0,d0
000077FC 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007800 D040                       		add.w	d0,d0
00007802 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00007806 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
0000780A 7202                       		moveq	#2,d1
0000780C 3038 F726                  		move.w	($FFFFF726).w,d0
00007810 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00007814 6700                       		beq.s	locret_6DAA
00007816 6400                       		bcc.s	loc_6DAC
00007818 4441                       		neg.w	d1
0000781A 3038 F704                  		move.w	($FFFFF704).w,d0
0000781E B078 F726                  		cmp.w	($FFFFF726).w,d0
00007822 6300                       		bls.s	loc_6DA0
00007824 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00007828 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
0000782E                            
0000782E                            loc_6DA0:
0000782E D378 F72E                  		add.w	d1,($FFFFF72E).w
00007832 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007838                            
00007838                            locret_6DAA:
00007838 4E75                       		rts	
0000783A                            ; ===========================================================================
0000783A                            
0000783A                            loc_6DAC:				; XREF: DynScrResizeLoad
0000783A 3038 F704                  		move.w	($FFFFF704).w,d0
0000783E 5040                       		addq.w	#8,d0
00007840 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007844 6500                       		bcs.s	loc_6DC4
00007846 0838 0001 D022             		btst	#1,($FFFFD022).w
0000784C 6700                       		beq.s	loc_6DC4
0000784E D241                       		add.w	d1,d1
00007850 D241                       		add.w	d1,d1
00007852                            
00007852                            loc_6DC4:
00007852 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007856 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
0000785C 4E75                       		rts	
0000785E                            ; End of function DynScrResizeLoad
0000785E                            
0000785E                            ; ===========================================================================
0000785E                            ; ---------------------------------------------------------------------------
0000785E                            ; Offset index for dynamic screen resizing
0000785E                            ; ---------------------------------------------------------------------------
0000785E 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00007862 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00007866 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
0000786A 0000                       		dc.w Resize_Ending-Resize_Index
0000786C                            ; ===========================================================================
0000786C                            ; ---------------------------------------------------------------------------
0000786C                            ; Green	Hill Zone dynamic screen resizing
0000786C                            ; ---------------------------------------------------------------------------
0000786C                            
0000786C                            Resize_GHZ:				; XREF: Resize_Index
0000786C 7000                       		moveq	#0,d0
0000786E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007872 D040                       		add.w	d0,d0
00007874 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00007878 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
0000787C                            ; ===========================================================================
0000787C 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
0000787E 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00007880 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00007882                            ; ===========================================================================
00007882                            
00007882                            Resize_GHZ1:
00007882 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00007888 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
0000788E 6500                       		bcs.s	locret_6E08	; if not, branch
00007890 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00007896                            
00007896                            locret_6E08:
00007896 4E75                       		rts	
00007898                            ; ===========================================================================
00007898                            
00007898                            Resize_GHZ2:
00007898 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000789E 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
000078A4 6500                       		bcs.s	locret_6E3A
000078A6 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000078AC 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
000078B2 6500                       		bcs.s	locret_6E3A
000078B4 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
000078BA 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
000078C0 6500                       		bcs.s	locret_6E3A
000078C2 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000078C8                            
000078C8                            locret_6E3A:
000078C8 4E75                       		rts	
000078CA                            ; ===========================================================================
000078CA                            
000078CA                            Resize_GHZ3:
000078CA 7000                       		moveq	#0,d0
000078CC 1038 F742                  		move.b	($FFFFF742).w,d0
000078D0 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
000078D4 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
000078D8                            ; ===========================================================================
000078D8 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
000078DA 0000                       		dc.w Resize_GHZ3boss-off_6E4A
000078DC 0000                       		dc.w Resize_GHZ3end-off_6E4A
000078DE                            ; ===========================================================================
000078DE                            
000078DE                            Resize_GHZ3main:
000078DE 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000078E4 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
000078EA 6500                       		bcs.s	locret_6E96
000078EC 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
000078F2 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000078F8 6500                       		bcs.s	locret_6E96
000078FA 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00007900 6500                       		bcs.s	loc_6E98
00007902 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007908 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
0000790E 6400                       		bcc.s	loc_6E8E
00007910 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00007916 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
0000791C                            
0000791C                            loc_6E8E:
0000791C 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007922 6400                       		bcc.s	loc_6E98
00007924                            
00007924                            locret_6E96:
00007924 4E75                       		rts	
00007926                            ; ===========================================================================
00007926                            
00007926                            loc_6E98:
00007926 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000792C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007930 4E75                       		rts	
00007932                            ; ===========================================================================
00007932                            
00007932                            Resize_GHZ3boss:
00007932 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007938 6400                       		bcc.s	loc_6EB0
0000793A 5538 F742                  		subq.b	#2,($FFFFF742).w
0000793E                            
0000793E                            loc_6EB0:
0000793E 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00007944 6500                       		bcs.s	locret_6EE8
00007946 6100 0000                  		bsr.w	SingleObjLoad
0000794A 6600                       		bne.s	loc_6ED0
0000794C 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00007950 337C 2A60 0008             		move.w	#$2A60,8(a1)
00007956 337C 0280 000C             		move.w	#$280,$C(a1)
0000795C                            
0000795C                            loc_6ED0:
0000795C 303C 008C                  		move.w	#$8C,d0
00007960 6100 9B0E                  		bsr.w	PlaySound	; play boss music
00007964 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000796A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000796E 7011                       		moveq	#$11,d0
00007970 6000 9D78                  		bra.w	LoadPLC		; load boss patterns
00007974                            ; ===========================================================================
00007974                            
00007974                            locret_6EE8:
00007974 4E75                       		rts	
00007976                            ; ===========================================================================
00007976                            
00007976                            Resize_GHZ3end:
00007976 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000797C 4E75                       		rts	
0000797E                            ; ===========================================================================
0000797E                            ; ---------------------------------------------------------------------------
0000797E                            ; Labyrinth Zone dynamic screen	resizing
0000797E                            ; ---------------------------------------------------------------------------
0000797E                            
0000797E                            Resize_LZ:				; XREF: Resize_Index
0000797E 7000                       		moveq	#0,d0
00007980 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007984 D040                       		add.w	d0,d0
00007986 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
0000798A 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
0000798E                            ; ===========================================================================
0000798E 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
00007990 0000                       		dc.w Resize_LZ12-Resize_LZx
00007992 0000                       		dc.w Resize_LZ3-Resize_LZx
00007994 0000                       		dc.w Resize_SBZ3-Resize_LZx
00007996                            ; ===========================================================================
00007996                            
00007996                            Resize_LZ12:
00007996 4E75                       		rts	
00007998                            ; ===========================================================================
00007998                            
00007998                            Resize_LZ3:
00007998 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
0000799C 6700                       		beq.s	loc_6F28	; if not, branch
0000799E 43F8 A506                  		lea	($FFFFA506).w,a1
000079A2 0C11 0007                  		cmpi.b	#7,(a1)
000079A6 6700                       		beq.s	loc_6F28
000079A8 12BC 0007                  		move.b	#7,(a1)		; modify level layout
000079AC 303C 00B7                  		move.w	#$B7,d0
000079B0 6100 9AC4                  		bsr.w	PlaySound_Special ; play rumbling sound
000079B4                            
000079B4                            loc_6F28:
000079B4 4A38 F742                  		tst.b	($FFFFF742).w
000079B8 6600                       		bne.s	locret_6F64
000079BA 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
000079C0 6500                       		bcs.s	locret_6F62
000079C2 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
000079C8 6400                       		bcc.s	locret_6F62
000079CA 6100 0000                  		bsr.w	SingleObjLoad
000079CE 6600                       		bne.s	loc_6F4A
000079D0 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
000079D4                            
000079D4                            loc_6F4A:
000079D4 303C 008C                  		move.w	#$8C,d0
000079D8 6100 9A96                  		bsr.w	PlaySound	; play boss music
000079DC 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000079E2 5438 F742                  		addq.b	#2,($FFFFF742).w
000079E6 7011                       		moveq	#$11,d0
000079E8 6000 9D00                  		bra.w	LoadPLC		; load boss patterns
000079EC                            ; ===========================================================================
000079EC                            
000079EC                            locret_6F62:
000079EC 4E75                       		rts	
000079EE                            ; ===========================================================================
000079EE                            
000079EE                            locret_6F64:
000079EE 4E75                       		rts	
000079F0                            ; ===========================================================================
000079F0                            
000079F0                            Resize_SBZ3:
000079F0 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000079F6 6500                       		bcs.s	locret_6F8C
000079F8 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
000079FE 6400                       		bcc.s	locret_6F8C	; if not, branch
00007A00 4238 FE30                  		clr.b	($FFFFFE30).w
00007A04 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
00007A0A 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00007A10 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00007A16                            
00007A16                            locret_6F8C:
00007A16 4E75                       		rts	
00007A18                            ; ===========================================================================
00007A18                            ; ---------------------------------------------------------------------------
00007A18                            ; Marble Zone dynamic screen resizing
00007A18                            ; ---------------------------------------------------------------------------
00007A18                            
00007A18                            Resize_MZ:				; XREF: Resize_Index
00007A18 7000                       		moveq	#0,d0
00007A1A 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007A1E D040                       		add.w	d0,d0
00007A20 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00007A24 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
00007A28                            ; ===========================================================================
00007A28 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
00007A2A 0000                       		dc.w Resize_MZ2-Resize_MZx
00007A2C 0000                       		dc.w Resize_MZ3-Resize_MZx
00007A2E                            ; ===========================================================================
00007A2E                            
00007A2E                            Resize_MZ1:
00007A2E 7000                       		moveq	#0,d0
00007A30 1038 F742                  		move.b	($FFFFF742).w,d0
00007A34 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00007A38 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
00007A3C                            ; ===========================================================================
00007A3C 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
00007A3E 0000                       		dc.w loc_6FEA-off_6FB2
00007A40 0000                       		dc.w loc_702E-off_6FB2
00007A42 0000                       		dc.w loc_7050-off_6FB2
00007A44                            ; ===========================================================================
00007A44                            
00007A44                            loc_6FBA:
00007A44 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
00007A4A 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
00007A50 6500                       		bcs.s	locret_6FE8
00007A52 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00007A58 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007A5E 6500                       		bcs.s	locret_6FE8
00007A60 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007A66 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007A6C 6500                       		bcs.s	locret_6FE8
00007A6E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007A72                            
00007A72                            locret_6FE8:
00007A72 4E75                       		rts	
00007A74                            ; ===========================================================================
00007A74                            
00007A74                            loc_6FEA:
00007A74 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007A7A 6400                       		bcc.s	loc_6FF8
00007A7C 5538 F742                  		subq.b	#2,($FFFFF742).w
00007A80 4E75                       		rts	
00007A82                            ; ===========================================================================
00007A82                            
00007A82                            loc_6FF8:
00007A82 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007A88 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00007A8E 6400                       		bcc.s	locret_702C
00007A90 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00007A96 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007A9C 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007AA2 6400                       		bcc.s	locret_702C
00007AA4 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007AAA 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007AB0 6500                       		bcs.s	locret_702C
00007AB2 5438 F742                  		addq.b	#2,($FFFFF742).w
00007AB6                            
00007AB6                            locret_702C:
00007AB6 4E75                       		rts	
00007AB8                            ; ===========================================================================
00007AB8                            
00007AB8                            loc_702E:
00007AB8 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007ABE 6400                       		bcc.s	loc_703C
00007AC0 5538 F742                  		subq.b	#2,($FFFFF742).w
00007AC4 4E75                       		rts	
00007AC6                            ; ===========================================================================
00007AC6                            
00007AC6                            loc_703C:
00007AC6 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00007ACC 6500                       		bcs.s	locret_704E
00007ACE 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00007AD4 5438 F742                  		addq.b	#2,($FFFFF742).w
00007AD8                            
00007AD8                            locret_704E:
00007AD8 4E75                       		rts	
00007ADA                            ; ===========================================================================
00007ADA                            
00007ADA                            loc_7050:
00007ADA 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00007AE0 6500                       		bcs.s	locret_7072
00007AE2 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007AE8 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007AEE 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00007AF4 6500                       		bcs.s	locret_7072
00007AF6 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007AFC                            
00007AFC                            locret_7072:
00007AFC 4E75                       		rts	
00007AFE                            ; ===========================================================================
00007AFE                            
00007AFE                            Resize_MZ2:
00007AFE 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007B04 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007B0A 6500                       		bcs.s	locret_7088
00007B0C 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007B12                            
00007B12                            locret_7088:
00007B12 4E75                       		rts	
00007B14                            ; ===========================================================================
00007B14                            
00007B14                            Resize_MZ3:
00007B14 7000                       		moveq	#0,d0
00007B16 1038 F742                  		move.b	($FFFFF742).w,d0
00007B1A 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00007B1E 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00007B22                            ; ===========================================================================
00007B22 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00007B24 0000                       		dc.w Resize_MZ3end-off_7098
00007B26                            ; ===========================================================================
00007B26                            
00007B26                            Resize_MZ3boss:
00007B26 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007B2C 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00007B32 6500                       		bcs.s	locret_70E8
00007B34 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007B3A 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
00007B40 6500                       		bcs.s	locret_70E8
00007B42 6100 0000                  		bsr.w	SingleObjLoad
00007B46 6600                       		bne.s	loc_70D0
00007B48 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
00007B4C 337C 19F0 0008             		move.w	#$19F0,8(a1)
00007B52 337C 022C 000C             		move.w	#$22C,$C(a1)
00007B58                            
00007B58                            loc_70D0:
00007B58 303C 008C                  		move.w	#$8C,d0
00007B5C 6100 9912                  		bsr.w	PlaySound	; play boss music
00007B60 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007B66 5438 F742                  		addq.b	#2,($FFFFF742).w
00007B6A 7011                       		moveq	#$11,d0
00007B6C 6000 9B7C                  		bra.w	LoadPLC		; load boss patterns
00007B70                            ; ===========================================================================
00007B70                            
00007B70                            locret_70E8:
00007B70 4E75                       		rts	
00007B72                            ; ===========================================================================
00007B72                            
00007B72                            Resize_MZ3end:
00007B72 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007B78 4E75                       		rts	
00007B7A                            ; ===========================================================================
00007B7A                            ; ---------------------------------------------------------------------------
00007B7A                            ; Star Light Zone dynamic screen resizing
00007B7A                            ; ---------------------------------------------------------------------------
00007B7A                            
00007B7A                            Resize_SLZ:				; XREF: Resize_Index
00007B7A 7000                       		moveq	#0,d0
00007B7C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007B80 D040                       		add.w	d0,d0
00007B82 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00007B86 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
00007B8A                            ; ===========================================================================
00007B8A 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
00007B8C 0000                       		dc.w Resize_SLZ12-Resize_SLZx
00007B8E 0000                       		dc.w Resize_SLZ3-Resize_SLZx
00007B90                            ; ===========================================================================
00007B90                            
00007B90                            Resize_SLZ12:
00007B90 4E75                       		rts	
00007B92                            ; ===========================================================================
00007B92                            
00007B92                            Resize_SLZ3:
00007B92 7000                       		moveq	#0,d0
00007B94 1038 F742                  		move.b	($FFFFF742).w,d0
00007B98 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00007B9C 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00007BA0                            ; ===========================================================================
00007BA0 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00007BA2 0000                       		dc.w Resize_SLZ3boss-off_7118
00007BA4 0000                       		dc.w Resize_SLZ3end-off_7118
00007BA6                            ; ===========================================================================
00007BA6                            
00007BA6                            Resize_SLZ3main:
00007BA6 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
00007BAC 6500                       		bcs.s	locret_7130
00007BAE 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007BB4 5438 F742                  		addq.b	#2,($FFFFF742).w
00007BB8                            
00007BB8                            locret_7130:
00007BB8 4E75                       		rts	
00007BBA                            ; ===========================================================================
00007BBA                            
00007BBA                            Resize_SLZ3boss:
00007BBA 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007BC0 6500                       		bcs.s	locret_715C
00007BC2 6100 0000                  		bsr.w	SingleObjLoad
00007BC6 6600                       		bne.s	loc_7144
00007BC8 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00007BCC                            
00007BCC                            loc_7144:
00007BCC 303C 008C                  		move.w	#$8C,d0
00007BD0 6100 989E                  		bsr.w	PlaySound	; play boss music
00007BD4 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007BDA 5438 F742                  		addq.b	#2,($FFFFF742).w
00007BDE 7011                       		moveq	#$11,d0
00007BE0 6000 9B08                  		bra.w	LoadPLC		; load boss patterns
00007BE4                            ; ===========================================================================
00007BE4                            
00007BE4                            locret_715C:
00007BE4 4E75                       		rts	
00007BE6                            ; ===========================================================================
00007BE6                            
00007BE6                            Resize_SLZ3end:
00007BE6 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007BEC 4E75                       		rts
00007BEE 4E75                       		rts
00007BF0                            ; ===========================================================================
00007BF0                            ; ---------------------------------------------------------------------------
00007BF0                            ; Spring Yard Zone dynamic screen resizing
00007BF0                            ; ---------------------------------------------------------------------------
00007BF0                            
00007BF0                            Resize_SYZ:				; XREF: Resize_Index
00007BF0 7000                       		moveq	#0,d0
00007BF2 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007BF6 D040                       		add.w	d0,d0
00007BF8 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00007BFC 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00007C00                            ; ===========================================================================
00007C00 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
00007C02 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00007C04 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00007C06                            ; ===========================================================================
00007C06                            
00007C06                            Resize_SYZ1:
00007C06 4E75                       		rts	
00007C08                            ; ===========================================================================
00007C08                            
00007C08                            Resize_SYZ2:
00007C08 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007C0E 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00007C14 6500                       		bcs.s	locret_71A2
00007C16 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
00007C1C 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
00007C22 6500                       		bcs.s	locret_71A2
00007C24 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007C2A                            
00007C2A                            locret_71A2:
00007C2A 4E75                       		rts	
00007C2C                            ; ===========================================================================
00007C2C                            
00007C2C                            Resize_SYZ3:
00007C2C 7000                       		moveq	#0,d0
00007C2E 1038 F742                  		move.b	($FFFFF742).w,d0
00007C32 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00007C36 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00007C3A                            ; ===========================================================================
00007C3A 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
00007C3C 0000                       		dc.w Resize_SYZ3boss-off_71B2
00007C3E 0000                       		dc.w Resize_SYZ3end-off_71B2
00007C40                            ; ===========================================================================
00007C40                            
00007C40                            Resize_SYZ3main:
00007C40 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00007C46 6500                       		bcs.s	locret_71CE
00007C48 6100 0000                  		bsr.w	SingleObjLoad
00007C4C 6600                       		bne.s	locret_71CE
00007C4E 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
00007C52 5438 F742                  		addq.b	#2,($FFFFF742).w
00007C56                            
00007C56                            locret_71CE:
00007C56 4E75                       		rts	
00007C58                            ; ===========================================================================
00007C58                            
00007C58                            Resize_SYZ3boss:
00007C58 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
00007C5E 6500                       		bcs.s	locret_7200
00007C60 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00007C66 6100 0000                  		bsr.w	SingleObjLoad
00007C6A 6600                       		bne.s	loc_71EC
00007C6C 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
00007C70 5438 F742                  		addq.b	#2,($FFFFF742).w
00007C74                            
00007C74                            loc_71EC:
00007C74 303C 008C                  		move.w	#$8C,d0
00007C78 6100 97F6                  		bsr.w	PlaySound	; play boss music
00007C7C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007C82 7011                       		moveq	#$11,d0
00007C84 6000 9A64                  		bra.w	LoadPLC		; load boss patterns
00007C88                            ; ===========================================================================
00007C88                            
00007C88                            locret_7200:
00007C88 4E75                       		rts	
00007C8A                            ; ===========================================================================
00007C8A                            
00007C8A                            Resize_SYZ3end:
00007C8A 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007C90 4E75                       		rts	
00007C92                            ; ===========================================================================
00007C92                            ; ---------------------------------------------------------------------------
00007C92                            ; Scrap	Brain Zone dynamic screen resizing
00007C92                            ; ---------------------------------------------------------------------------
00007C92                            
00007C92                            Resize_SBZ:				; XREF: Resize_Index
00007C92 7000                       		moveq	#0,d0
00007C94 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007C98 D040                       		add.w	d0,d0
00007C9A 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00007C9E 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00007CA2                            ; ===========================================================================
00007CA2 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00007CA4 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00007CA6 0000                       		dc.w Resize_FZ-Resize_SBZx
00007CA8                            ; ===========================================================================
00007CA8                            
00007CA8                            Resize_SBZ1:
00007CA8 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007CAE 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00007CB4 6500                       		bcs.s	locret_7242
00007CB6 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00007CBC 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007CC2 6500                       		bcs.s	locret_7242
00007CC4 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00007CCA                            
00007CCA                            locret_7242:
00007CCA 4E75                       		rts	
00007CCC                            ; ===========================================================================
00007CCC                            
00007CCC                            Resize_SBZ2:
00007CCC 7000                       		moveq	#0,d0
00007CCE 1038 F742                  		move.b	($FFFFF742).w,d0
00007CD2 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00007CD6 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00007CDA                            ; ===========================================================================
00007CDA 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00007CDC 0000                       		dc.w Resize_SBZ2boss-off_7252
00007CDE 0000                       		dc.w Resize_SBZ2boss2-off_7252
00007CE0 0000                       		dc.w Resize_SBZ2end-off_7252
00007CE2                            ; ===========================================================================
00007CE2                            
00007CE2                            Resize_SBZ2main:
00007CE2 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00007CE8 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00007CEE 6500                       		bcs.s	locret_727A
00007CF0 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00007CF6 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00007CFC 6500                       		bcs.s	locret_727A
00007CFE 5438 F742                  		addq.b	#2,($FFFFF742).w
00007D02                            
00007D02                            locret_727A:
00007D02 4E75                       		rts	
00007D04                            ; ===========================================================================
00007D04                            
00007D04                            Resize_SBZ2boss:
00007D04 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
00007D0A 6500                       		bcs.s	locret_7298
00007D0C 6100 0000                  		bsr.w	SingleObjLoad
00007D10 6600                       		bne.s	locret_7298
00007D12 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00007D16 5438 F742                  		addq.b	#2,($FFFFF742).w
00007D1A 701E                       		moveq	#$1E,d0
00007D1C 6000 99CC                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
00007D20                            ; ===========================================================================
00007D20                            
00007D20                            locret_7298:
00007D20 4E75                       		rts	
00007D22                            ; ===========================================================================
00007D22                            
00007D22                            Resize_SBZ2boss2:
00007D22 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
00007D28 6500                       		bcs.s	loc_72B6
00007D2A 6100 0000                  		bsr.w	SingleObjLoad
00007D2E 6600                       		bne.s	loc_72B0
00007D30 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00007D34 5438 F742                  		addq.b	#2,($FFFFF742).w
00007D38                            
00007D38                            loc_72B0:
00007D38 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007D3E                            
00007D3E                            loc_72B6:
00007D3E 6000                       		bra.s	loc_72C2
00007D40                            ; ===========================================================================
00007D40                            
00007D40                            Resize_SBZ2end:
00007D40 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00007D46 6500                       		bcs.s	loc_72C2
00007D48 4E75                       		rts	
00007D4A                            ; ===========================================================================
00007D4A                            
00007D4A                            loc_72C2:
00007D4A 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007D50 4E75                       		rts	
00007D52                            ; ===========================================================================
00007D52                            
00007D52                            Resize_FZ:
00007D52 7000                       		moveq	#0,d0
00007D54 1038 F742                  		move.b	($FFFFF742).w,d0
00007D58 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00007D5C 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00007D60                            ; ===========================================================================
00007D60 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00007D64 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00007D68 0000                       		dc.w Resize_FZend2-off_72D8
00007D6A                            ; ===========================================================================
00007D6A                            
00007D6A                            Resize_FZmain:
00007D6A 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
00007D70 6500                       		bcs.s	loc_72F4
00007D72 5438 F742                  		addq.b	#2,($FFFFF742).w
00007D76 701F                       		moveq	#$1F,d0
00007D78 6100 9970                  		bsr.w	LoadPLC		; load FZ boss patterns
00007D7C                            
00007D7C                            loc_72F4:
00007D7C 60CC                       		bra.s	loc_72C2
00007D7E                            ; ===========================================================================
00007D7E                            
00007D7E                            Resize_FZboss:
00007D7E 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00007D84 6500                       		bcs.s	loc_7312
00007D86 6100 0000                  		bsr.w	SingleObjLoad
00007D8A 6600                       		bne.s	loc_7312
00007D8C 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
00007D90 5438 F742                  		addq.b	#2,($FFFFF742).w
00007D94 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007D9A                            
00007D9A                            loc_7312:
00007D9A 60AE                       		bra.s	loc_72C2
00007D9C                            ; ===========================================================================
00007D9C                            
00007D9C                            Resize_FZend:
00007D9C 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00007DA2 6500                       		bcs.s	loc_7320
00007DA4 5438 F742                  		addq.b	#2,($FFFFF742).w
00007DA8                            
00007DA8                            loc_7320:
00007DA8 60A0                       		bra.s	loc_72C2
00007DAA                            ; ===========================================================================
00007DAA                            
00007DAA                            locret_7322:
00007DAA 4E75                       		rts	
00007DAC                            ; ===========================================================================
00007DAC                            
00007DAC                            Resize_FZend2:
00007DAC 609C                       		bra.s	loc_72C2
00007DAE                            ; ===========================================================================
00007DAE                            ; ---------------------------------------------------------------------------
00007DAE                            ; Ending sequence dynamic screen resizing (empty)
00007DAE                            ; ---------------------------------------------------------------------------
00007DAE                            
00007DAE                            Resize_Ending:				; XREF: Resize_Index
00007DAE 4E75                       		rts	
00007DB0                            ; ===========================================================================
00007DB0                            ; ---------------------------------------------------------------------------
00007DB0                            ; Object 11 - GHZ bridge
00007DB0                            ; ---------------------------------------------------------------------------
00007DB0                            
00007DB0                            Obj11:					; XREF: Obj_Index
00007DB0 7000                       		moveq	#0,d0
00007DB2 1028 0024                  		move.b	$24(a0),d0
00007DB6 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00007DBA 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00007DBE                            ; ===========================================================================
00007DBE 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007DC2 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007DC6 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00007DCA                            ; ===========================================================================
00007DCA                            
00007DCA                            Obj11_Main:				; XREF: Obj11_Index
00007DCA 5428 0024                  		addq.b	#2,$24(a0)
00007DCE 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00007DD6 317C 438E 0002             		move.w	#$438E,2(a0)
00007DDC 117C 0004 0001             		move.b	#4,1(a0)
00007DE2 117C 0003 0018             		move.b	#3,$18(a0)
00007DE8 117C 0080 0019             		move.b	#$80,$19(a0)
00007DEE 3428 000C                  		move.w	$C(a0),d2
00007DF2 3628 0008                  		move.w	8(a0),d3
00007DF6 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00007DF8 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00007DFC 7200                       		moveq	#0,d1
00007DFE 1212                       		move.b	(a2),d1		; copy a2 to d1
00007E00 14FC 0000                  		move.b	#0,(a2)+
00007E04 3001                       		move.w	d1,d0
00007E06 E248                       		lsr.w	#1,d0
00007E08 E948                       		lsl.w	#4,d0
00007E0A 9640                       		sub.w	d0,d3
00007E0C 5501                       		subq.b	#2,d1
00007E0E 6500                       		bcs.s	Obj11_Action
00007E10                            
00007E10                            Obj11_MakeBdg:
00007E10 6100 0000                  		bsr.w	SingleObjLoad
00007E14 6600                       		bne.s	Obj11_Action
00007E16 5228 0028                  		addq.b	#1,$28(a0)
00007E1A B668 0008                  		cmp.w	8(a0),d3
00007E1E 6600                       		bne.s	loc_73B8
00007E20 0643 0010                  		addi.w	#$10,d3
00007E24 3142 000C                  		move.w	d2,$C(a0)
00007E28 3142 003C                  		move.w	d2,$3C(a0)
00007E2C 3A08                       		move.w	a0,d5
00007E2E 0445 D000                  		subi.w	#-$3000,d5
00007E32 EC4D                       		lsr.w	#6,d5
00007E34 0245 007F                  		andi.w	#$7F,d5
00007E38 14C5                       		move.b	d5,(a2)+
00007E3A 5228 0028                  		addq.b	#1,$28(a0)
00007E3E                            
00007E3E                            loc_73B8:				; XREF: ROM:00007398j
00007E3E 3A09                       		move.w	a1,d5
00007E40 0445 D000                  		subi.w	#-$3000,d5
00007E44 EC4D                       		lsr.w	#6,d5
00007E46 0245 007F                  		andi.w	#$7F,d5
00007E4A 14C5                       		move.b	d5,(a2)+
00007E4C 137C 000A 0024             		move.b	#$A,$24(a1)
00007E52 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00007E54 3342 000C                  		move.w	d2,$C(a1)
00007E58 3342 003C                  		move.w	d2,$3C(a1)
00007E5C 3343 0008                  		move.w	d3,8(a1)
00007E60 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007E68 337C 438E 0002             		move.w	#$438E,2(a1)
00007E6E 137C 0004 0001             		move.b	#4,1(a1)
00007E74 137C 0003 0018             		move.b	#3,$18(a1)
00007E7A 137C 0008 0019             		move.b	#8,$19(a1)
00007E80 0643 0010                  		addi.w	#$10,d3
00007E84 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007E88                            
00007E88                            Obj11_Action:				; XREF: Obj11_Index
00007E88 6100                       		bsr.s	Obj11_Solid
00007E8A 4A28 003E                  		tst.b	$3E(a0)
00007E8E 6700                       		beq.s	Obj11_Display
00007E90 5928 003E                  		subq.b	#4,$3E(a0)
00007E94 6100 0000                  		bsr.w	Obj11_Bend
00007E98                            
00007E98                            Obj11_Display:
00007E98 6100 0000                  		bsr.w	DisplaySprite
00007E9C 6000 0000                  		bra.w	Obj11_ChkDel
00007EA0                            
00007EA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007EA0                            
00007EA0                            
00007EA0                            Obj11_Solid:				; XREF: Obj11_Action
00007EA0 7200                       		moveq	#0,d1
00007EA2 1228 0028                  		move.b	$28(a0),d1
00007EA6 E749                       		lsl.w	#3,d1
00007EA8 3401                       		move.w	d1,d2
00007EAA 5041                       		addq.w	#8,d1
00007EAC D442                       		add.w	d2,d2
00007EAE 43F8 D000                  		lea	($FFFFD000).w,a1
00007EB2 4A69 0012                  		tst.w	$12(a1)
00007EB6 6B00 0000                  		bmi.w	locret_751E
00007EBA 3029 0008                  		move.w	8(a1),d0
00007EBE 9068 0008                  		sub.w	8(a0),d0
00007EC2 D041                       		add.w	d1,d0
00007EC4 6B00 0000                  		bmi.w	locret_751E
00007EC8 B042                       		cmp.w	d2,d0
00007ECA 6400 0000                  		bcc.w	locret_751E
00007ECE 6000                       		bra.s	Platform2
00007ED0                            ; End of function Obj11_Solid
00007ED0                            
00007ED0                            ; ---------------------------------------------------------------------------
00007ED0                            ; Platform subroutine
00007ED0                            ; ---------------------------------------------------------------------------
00007ED0                            
00007ED0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007ED0                            
00007ED0                            
00007ED0                            PlatformObject:
00007ED0 43F8 D000                  		lea	($FFFFD000).w,a1
00007ED4 4A69 0012                  		tst.w	$12(a1)
00007ED8 6B00 0000                  		bmi.w	locret_751E
00007EDC 3029 0008                  		move.w	8(a1),d0
00007EE0 9068 0008                  		sub.w	8(a0),d0
00007EE4 D041                       		add.w	d1,d0
00007EE6 6B00 0000                  		bmi.w	locret_751E
00007EEA D241                       		add.w	d1,d1
00007EEC B041                       		cmp.w	d1,d0
00007EEE 6400 0000                  		bcc.w	locret_751E
00007EF2                            
00007EF2                            Platform2:
00007EF2 3028 000C                  		move.w	$C(a0),d0
00007EF6 5140                       		subq.w	#8,d0
00007EF8                            
00007EF8                            Platform3:
00007EF8 3429 000C                  		move.w	$C(a1),d2
00007EFC 1229 0016                  		move.b	$16(a1),d1
00007F00 4881                       		ext.w	d1
00007F02 D242                       		add.w	d2,d1
00007F04 5841                       		addq.w	#4,d1
00007F06 9041                       		sub.w	d1,d0
00007F08 6200 0000                  		bhi.w	locret_751E
00007F0C 0C40 FFF0                  		cmpi.w	#-$10,d0
00007F10 6500 0000                  		bcs.w	locret_751E
00007F14 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007F18 6B00 0000                  		bmi.w	locret_751E
00007F1C 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00007F22 6400 0000                  		bcc.w	locret_751E
00007F26 D440                       		add.w	d0,d2
00007F28 5642                       		addq.w	#3,d2
00007F2A 3342 000C                  		move.w	d2,$C(a1)
00007F2E 5428 0024                  		addq.b	#2,$24(a0)
00007F32                            
00007F32                            loc_74AE:
00007F32 0829 0003 0022             		btst	#3,$22(a1)
00007F38 6700                       		beq.s	loc_74DC
00007F3A 7000                       		moveq	#0,d0
00007F3C 1029 003D                  		move.b	$3D(a1),d0
00007F40 ED48                       		lsl.w	#6,d0
00007F42 0680 00FF D000             		addi.l	#$FFD000,d0
00007F48 2440                       		movea.l	d0,a2
00007F4A 08AA 0003 0022             		bclr	#3,$22(a2)
00007F50 422A 0025                  		clr.b	$25(a2)
00007F54 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007F5A 6600                       		bne.s	loc_74DC
00007F5C 552A 0024                  		subq.b	#2,$24(a2)
00007F60                            
00007F60                            loc_74DC:
00007F60 3008                       		move.w	a0,d0
00007F62 0440 D000                  		subi.w	#-$3000,d0
00007F66 EC48                       		lsr.w	#6,d0
00007F68 0240 007F                  		andi.w	#$7F,d0
00007F6C 1340 003D                  		move.b	d0,$3D(a1)
00007F70 137C 0000 0026             		move.b	#0,$26(a1)
00007F76 337C 0000 0012             		move.w	#0,$12(a1)
00007F7C 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007F82 0829 0001 0022             		btst	#1,$22(a1)
00007F88 6700                       		beq.s	loc_7512
00007F8A 2F08                       		move.l	a0,-(sp)
00007F8C 2049                       		movea.l	a1,a0
00007F8E 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007F94 205F                       		movea.l	(sp)+,a0
00007F96                            
00007F96                            loc_7512:
00007F96 08E9 0003 0022             		bset	#3,$22(a1)
00007F9C 08E8 0003 0022             		bset	#3,$22(a0)
00007FA2                            
00007FA2                            locret_751E:
00007FA2 4E75                       		rts	
00007FA4                            ; End of function PlatformObject
00007FA4                            
00007FA4                            ; ---------------------------------------------------------------------------
00007FA4                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007FA4                            ; ---------------------------------------------------------------------------
00007FA4                            
00007FA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FA4                            
00007FA4                            
00007FA4                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007FA4 43F8 D000                  		lea	($FFFFD000).w,a1
00007FA8 4A69 0012                  		tst.w	$12(a1)
00007FAC 6B00 FFF4                  		bmi.w	locret_751E
00007FB0 3029 0008                  		move.w	8(a1),d0
00007FB4 9068 0008                  		sub.w	8(a0),d0
00007FB8 D041                       		add.w	d1,d0
00007FBA 6BE6                       		bmi.s	locret_751E
00007FBC D241                       		add.w	d1,d1
00007FBE B041                       		cmp.w	d1,d0
00007FC0 64E0                       		bcc.s	locret_751E
00007FC2 0828 0000 0001             		btst	#0,1(a0)
00007FC8 6700                       		beq.s	loc_754A
00007FCA 4640                       		not.w	d0
00007FCC D041                       		add.w	d1,d0
00007FCE                            
00007FCE                            loc_754A:
00007FCE E248                       		lsr.w	#1,d0
00007FD0 7600                       		moveq	#0,d3
00007FD2 1632 0000                  		move.b	(a2,d0.w),d3
00007FD6 3028 000C                  		move.w	$C(a0),d0
00007FDA 9043                       		sub.w	d3,d0
00007FDC 6000 FF1A                  		bra.w	Platform3
00007FE0                            ; End of function SlopeObject
00007FE0                            
00007FE0                            
00007FE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FE0                            
00007FE0                            
00007FE0                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007FE0 43F8 D000                  		lea	($FFFFD000).w,a1
00007FE4 4A69 0012                  		tst.w	$12(a1)
00007FE8 6B00 FFB8                  		bmi.w	locret_751E
00007FEC 3029 0008                  		move.w	8(a1),d0
00007FF0 9068 0008                  		sub.w	8(a0),d0
00007FF4 D041                       		add.w	d1,d0
00007FF6 6B00 FFAA                  		bmi.w	locret_751E
00007FFA D241                       		add.w	d1,d1
00007FFC B041                       		cmp.w	d1,d0
00007FFE 6400 FFA2                  		bcc.w	locret_751E
00008002 3028 000C                  		move.w	$C(a0),d0
00008006 9043                       		sub.w	d3,d0
00008008 6000 FEEE                  		bra.w	Platform3
0000800C                            ; End of function Obj15_Solid
0000800C                            
0000800C                            ; ===========================================================================
0000800C                            
0000800C                            Obj11_Action2:				; XREF: Obj11_Index
0000800C 6100                       		bsr.s	Obj11_WalkOff
0000800E 6100 0000                  		bsr.w	DisplaySprite
00008012 6000 0000                  		bra.w	Obj11_ChkDel
00008016                            
00008016                            ; ---------------------------------------------------------------------------
00008016                            ; Subroutine allowing Sonic to walk off a bridge
00008016                            ; ---------------------------------------------------------------------------
00008016                            
00008016                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008016                            
00008016                            
00008016                            Obj11_WalkOff:				; XREF: Obj11_Action2
00008016 7200                       		moveq	#0,d1
00008018 1228 0028                  		move.b	$28(a0),d1
0000801C E749                       		lsl.w	#3,d1
0000801E 3401                       		move.w	d1,d2
00008020 5041                       		addq.w	#8,d1
00008022 6100                       		bsr.s	ExitPlatform2
00008024 6400                       		bcc.s	locret_75BE
00008026 E848                       		lsr.w	#4,d0
00008028 1140 003F                  		move.b	d0,$3F(a0)
0000802C 1028 003E                  		move.b	$3E(a0),d0
00008030 0C00 0040                  		cmpi.b	#$40,d0
00008034 6700                       		beq.s	loc_75B6
00008036 5828 003E                  		addq.b	#4,$3E(a0)
0000803A                            
0000803A                            loc_75B6:
0000803A 6100 0000                  		bsr.w	Obj11_Bend
0000803E 6100 0000                  		bsr.w	Obj11_MoveSonic
00008042                            
00008042                            locret_75BE:
00008042 4E75                       		rts	
00008044                            ; End of function Obj11_WalkOff
00008044                            
00008044                            ; ---------------------------------------------------------------------------
00008044                            ; Subroutine allowing Sonic to walk or jump off	a platform
00008044                            ; ---------------------------------------------------------------------------
00008044                            
00008044                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008044                            
00008044                            
00008044                            ExitPlatform:
00008044 3401                       		move.w	d1,d2
00008046                            
00008046                            ExitPlatform2:
00008046 D442                       		add.w	d2,d2
00008048 43F8 D000                  		lea	($FFFFD000).w,a1
0000804C 0829 0001 0022             		btst	#1,$22(a1)
00008052 6600                       		bne.s	loc_75E0
00008054 3029 0008                  		move.w	8(a1),d0
00008058 9068 0008                  		sub.w	8(a0),d0
0000805C D041                       		add.w	d1,d0
0000805E 6B00                       		bmi.s	loc_75E0
00008060 B042                       		cmp.w	d2,d0
00008062 6500                       		bcs.s	locret_75F2
00008064                            
00008064                            loc_75E0:
00008064 08A9 0003 0022             		bclr	#3,$22(a1)
0000806A 117C 0002 0024             		move.b	#2,$24(a0)
00008070 08A8 0003 0022             		bclr	#3,$22(a0)
00008076                            
00008076                            locret_75F2:
00008076 4E75                       		rts	
00008078                            ; End of function ExitPlatform
00008078                            
00008078                            
00008078                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008078                            
00008078                            
00008078                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00008078 7000                       		moveq	#0,d0
0000807A 1028 003F                  		move.b	$3F(a0),d0
0000807E 1030 0029                  		move.b	$29(a0,d0.w),d0
00008082 ED48                       		lsl.w	#6,d0
00008084 0680 00FF D000             		addi.l	#$FFD000,d0
0000808A 2440                       		movea.l	d0,a2
0000808C 43F8 D000                  		lea	($FFFFD000).w,a1
00008090 302A 000C                  		move.w	$C(a2),d0
00008094 5140                       		subq.w	#8,d0
00008096 7200                       		moveq	#0,d1
00008098 1229 0016                  		move.b	$16(a1),d1
0000809C 9041                       		sub.w	d1,d0
0000809E 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
000080A2 4E75                       		rts	
000080A4                            ; End of function Obj11_MoveSonic
000080A4                            
000080A4                            
000080A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000080A4                            
000080A4                            
000080A4                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
000080A4 1028 003E                  		move.b	$3E(a0),d0
000080A8 6100 B32A                  		bsr.w	CalcSine
000080AC 3800                       		move.w	d0,d4
000080AE 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
000080B4 7000                       		moveq	#0,d0
000080B6 1028 0028                  		move.b	$28(a0),d0
000080BA E948                       		lsl.w	#4,d0
000080BC 7600                       		moveq	#0,d3
000080BE 1628 003F                  		move.b	$3F(a0),d3
000080C2 3403                       		move.w	d3,d2
000080C4 D640                       		add.w	d0,d3
000080C6 7A00                       		moveq	#0,d5
000080C8 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
000080CE 1A35 3000                  		move.b	(a5,d3.w),d5
000080D2 0243 000F                  		andi.w	#$F,d3
000080D6 E94B                       		lsl.w	#4,d3
000080D8 47F4 3000                  		lea	(a4,d3.w),a3
000080DC 45E8 0029                  		lea	$29(a0),a2
000080E0                            
000080E0                            loc_765C:
000080E0 7000                       		moveq	#0,d0
000080E2 101A                       		move.b	(a2)+,d0
000080E4 ED48                       		lsl.w	#6,d0
000080E6 0680 00FF D000             		addi.l	#$FFD000,d0
000080EC 2240                       		movea.l	d0,a1
000080EE 7000                       		moveq	#0,d0
000080F0 101B                       		move.b	(a3)+,d0
000080F2 5240                       		addq.w	#1,d0
000080F4 C0C5                       		mulu.w	d5,d0
000080F6 C0C4                       		mulu.w	d4,d0
000080F8 4840                       		swap	d0
000080FA D069 003C                  		add.w	$3C(a1),d0
000080FE 3340 000C                  		move.w	d0,$C(a1)
00008102 51CA FFDC                  		dbf	d2,loc_765C
00008106 7000                       		moveq	#0,d0
00008108 1028 0028                  		move.b	$28(a0),d0
0000810C 7600                       		moveq	#0,d3
0000810E 1628 003F                  		move.b	$3F(a0),d3
00008112 5203                       		addq.b	#1,d3
00008114 9600                       		sub.b	d0,d3
00008116 4403                       		neg.b	d3
00008118 6B00                       		bmi.s	locret_76CA
0000811A 3403                       		move.w	d3,d2
0000811C E94B                       		lsl.w	#4,d3
0000811E 47F4 3000                  		lea	(a4,d3.w),a3
00008122 D6C2                       		adda.w	d2,a3
00008124 5342                       		subq.w	#1,d2
00008126 6500                       		bcs.s	locret_76CA
00008128                            
00008128                            loc_76A4:
00008128 7000                       		moveq	#0,d0
0000812A 101A                       		move.b	(a2)+,d0
0000812C ED48                       		lsl.w	#6,d0
0000812E 0680 00FF D000             		addi.l	#$FFD000,d0
00008134 2240                       		movea.l	d0,a1
00008136 7000                       		moveq	#0,d0
00008138 1023                       		move.b	-(a3),d0
0000813A 5240                       		addq.w	#1,d0
0000813C C0C5                       		mulu.w	d5,d0
0000813E C0C4                       		mulu.w	d4,d0
00008140 4840                       		swap	d0
00008142 D069 003C                  		add.w	$3C(a1),d0
00008146 3340 000C                  		move.w	d0,$C(a1)
0000814A 51CA FFDC                  		dbf	d2,loc_76A4
0000814E                            
0000814E                            locret_76CA:
0000814E 4E75                       		rts	
00008150                            ; End of function Obj11_Bend
00008150                            
00008150                            ; ===========================================================================
00008150                            ; ---------------------------------------------------------------------------
00008150                            ; GHZ bridge-bending data
00008150                            ; (Defines how the bridge bends	when Sonic walks across	it)
00008150                            ; ---------------------------------------------------------------------------
00008150                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00008260                            		even
00008260                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00008360                            		even
00008360                            
00008360                            ; ===========================================================================
00008360                            
00008360                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00008360 3028 0008                  		move.w	8(a0),d0
00008364 0240 FF80                  		andi.w	#$FF80,d0
00008368 3238 F700                  		move.w	($FFFFF700).w,d1
0000836C 0441 0080                  		subi.w	#$80,d1
00008370 0241 FF80                  		andi.w	#$FF80,d1
00008374 9041                       		sub.w	d1,d0
00008376 0C40 0280                  		cmpi.w	#$280,d0
0000837A 6200 0000                  		bhi.w	Obj11_DelAll
0000837E 4E75                       		rts	
00008380                            ; ===========================================================================
00008380                            
00008380                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00008380 7400                       		moveq	#0,d2
00008382 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00008386 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00008388 5302                       		subq.b	#1,d2		; subtract 1
0000838A 6500                       		bcs.s	Obj11_Delete
0000838C                            
0000838C                            Obj11_DelLoop:
0000838C 7000                       		moveq	#0,d0
0000838E 101A                       		move.b	(a2)+,d0
00008390 ED48                       		lsl.w	#6,d0
00008392 0680 00FF D000             		addi.l	#$FFD000,d0
00008398 2240                       		movea.l	d0,a1
0000839A B048                       		cmp.w	a0,d0
0000839C 6700                       		beq.s	loc_791E
0000839E 6100 0000                  		bsr.w	DeleteObject2
000083A2                            
000083A2                            loc_791E:
000083A2 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
000083A6                            
000083A6                            Obj11_Delete:
000083A6 6100 0000                  		bsr.w	DeleteObject
000083AA 4E75                       		rts	
000083AC                            ; ===========================================================================
000083AC                            
000083AC                            Obj11_Delete2:				; XREF: Obj11_Index
000083AC 6100 0000                  		bsr.w	DeleteObject
000083B0 4E75                       		rts	
000083B2                            ; ===========================================================================
000083B2                            
000083B2                            Obj11_Display2:				; XREF: Obj11_Index
000083B2 6100 0000                  		bsr.w	DisplaySprite
000083B6 4E75                       		rts	
000083B8                            ; ===========================================================================
000083B8                            ; ---------------------------------------------------------------------------
000083B8                            ; Sprite mappings - GHZ	bridge
000083B8                            ; ---------------------------------------------------------------------------
000083B8                            Map_obj11:
000083B8                            	include "_maps\obj11.asm"
000083B8                            ; ---------------------------------------------------------------------------
000083B8                            ; Sprite mappings - GHZ	bridge
000083B8                            ; ---------------------------------------------------------------------------
000083B8 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
000083BC 0000                       		dc.w byte_794B-Map_obj11
000083BE 01                         byte_793A:	dc.b 1
000083BF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000083C4 02                         byte_7940:	dc.b 2
000083C5 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
000083CA 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
000083CF 01                         byte_794B:	dc.b 1
000083D0 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
000083D6 00                         		even
000083D6 00                         		even
000083D6                            
000083D6                            ; ===========================================================================
000083D6                            ; ---------------------------------------------------------------------------
000083D6                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
000083D6                            ;	    - spiked ball on a chain (SBZ)
000083D6                            ; ---------------------------------------------------------------------------
000083D6                            
000083D6                            Obj15:					; XREF: Obj_Index
000083D6 7000                       		moveq	#0,d0
000083D8 1028 0024                  		move.b	$24(a0),d0
000083DC 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
000083E0 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
000083E4                            ; ===========================================================================
000083E4 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
000083E8 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
000083EC 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
000083F0 0000                       		dc.w Obj15_Action-Obj15_Index
000083F2                            ; ===========================================================================
000083F2                            
000083F2                            Obj15_Main:				; XREF: Obj15_Index
000083F2 5428 0024                  		addq.b	#2,$24(a0)
000083F6 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
000083FE 317C 4380 0002             		move.w	#$4380,2(a0)
00008404 117C 0004 0001             		move.b	#4,1(a0)
0000840A 117C 0003 0018             		move.b	#3,$18(a0)
00008410 117C 0018 0019             		move.b	#$18,$19(a0)
00008416 117C 0008 0016             		move.b	#8,$16(a0)
0000841C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00008422 3168 0008 003A             		move.w	8(a0),$3A(a0)
00008428 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000842E 6600                       		bne.s	Obj15_NotSLZ
00008430 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00008438 317C 43DC 0002             		move.w	#$43DC,2(a0)
0000843E 117C 0020 0019             		move.b	#$20,$19(a0)
00008444 117C 0010 0016             		move.b	#$10,$16(a0)
0000844A 117C 0099 0020             		move.b	#$99,$20(a0)
00008450                            
00008450                            Obj15_NotSLZ:
00008450 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008456 6600                       		bne.s	Obj15_SetLength
00008458 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00008460 317C 0391 0002             		move.w	#$391,2(a0)
00008466 117C 0018 0019             		move.b	#$18,$19(a0)
0000846C 117C 0018 0016             		move.b	#$18,$16(a0)
00008472 117C 0086 0020             		move.b	#$86,$20(a0)
00008478 117C 000C 0024             		move.b	#$C,$24(a0)
0000847E                            
0000847E                            Obj15_SetLength:
0000847E 1810                       		move.b	0(a0),d4
00008480 7200                       		moveq	#0,d1
00008482 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00008486 1212                       		move.b	(a2),d1		; move a2 to d1
00008488 3F01                       		move.w	d1,-(sp)
0000848A 0241 000F                  		andi.w	#$F,d1
0000848E 14FC 0000                  		move.b	#0,(a2)+
00008492 3601                       		move.w	d1,d3
00008494 E94B                       		lsl.w	#4,d3
00008496 5003                       		addq.b	#8,d3
00008498 1143 003C                  		move.b	d3,$3C(a0)
0000849C 5103                       		subq.b	#8,d3
0000849E 4A28 001A                  		tst.b	$1A(a0)
000084A2 6700                       		beq.s	Obj15_MakeChain
000084A4 5003                       		addq.b	#8,d3
000084A6 5341                       		subq.w	#1,d1
000084A8                            
000084A8                            Obj15_MakeChain:
000084A8 6100 0000                  		bsr.w	SingleObjLoad
000084AC 6600                       		bne.s	loc_7A92
000084AE 5228 0028                  		addq.b	#1,$28(a0)
000084B2 3A09                       		move.w	a1,d5
000084B4 0445 D000                  		subi.w	#-$3000,d5
000084B8 EC4D                       		lsr.w	#6,d5
000084BA 0245 007F                  		andi.w	#$7F,d5
000084BE 14C5                       		move.b	d5,(a2)+
000084C0 137C 000A 0024             		move.b	#$A,$24(a1)
000084C6 1284                       		move.b	d4,0(a1)	; load swinging	object
000084C8 2368 0004 0004             		move.l	4(a0),4(a1)
000084CE 3368 0002 0002             		move.w	2(a0),2(a1)
000084D4 08A9 0006 0002             		bclr	#6,2(a1)
000084DA 137C 0004 0001             		move.b	#4,1(a1)
000084E0 137C 0004 0018             		move.b	#4,$18(a1)
000084E6 137C 0008 0019             		move.b	#8,$19(a1)
000084EC 137C 0001 001A             		move.b	#1,$1A(a1)
000084F2 1343 003C                  		move.b	d3,$3C(a1)
000084F6 0403 0010                  		subi.b	#$10,d3
000084FA 6400                       		bcc.s	loc_7A8E
000084FC 137C 0002 001A             		move.b	#2,$1A(a1)
00008502 137C 0003 0018             		move.b	#3,$18(a1)
00008508 08E9 0006 0002             		bset	#6,2(a1)
0000850E                            
0000850E                            loc_7A8E:
0000850E 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00008512                            
00008512                            loc_7A92:
00008512 3A08                       		move.w	a0,d5
00008514 0445 D000                  		subi.w	#-$3000,d5
00008518 EC4D                       		lsr.w	#6,d5
0000851A 0245 007F                  		andi.w	#$7F,d5
0000851E 14C5                       		move.b	d5,(a2)+
00008520 317C 4080 0026             		move.w	#$4080,$26(a0)
00008526 317C FE00 003E             		move.w	#-$200,$3E(a0)
0000852C 321F                       		move.w	(sp)+,d1
0000852E 0801 0004                  		btst	#4,d1		; is object type $8X ?
00008532 6700                       		beq.s	loc_7AD4	; if not, branch
00008534 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
0000853C 317C 43AA 0002             		move.w	#$43AA,2(a0)
00008542 117C 0001 001A             		move.b	#1,$1A(a0)
00008548 117C 0002 0018             		move.b	#2,$18(a0)
0000854E 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00008554                            
00008554                            loc_7AD4:
00008554 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
0000855A 6700                       		beq.s	Obj15_Action	; if yes, branch
0000855C                            
0000855C                            Obj15_SetSolid:				; XREF: Obj15_Index
0000855C 7200                       		moveq	#0,d1
0000855E 1228 0019                  		move.b	$19(a0),d1
00008562 7600                       		moveq	#0,d3
00008564 1628 0016                  		move.b	$16(a0),d3
00008568 6100 FA76                  		bsr.w	Obj15_Solid
0000856C                            
0000856C                            Obj15_Action:				; XREF: Obj15_Index
0000856C 6100 0000                  		bsr.w	Obj15_Move
00008570 6100 0000                  		bsr.w	DisplaySprite
00008574 6000 0000                  		bra.w	Obj15_ChkDel
00008578                            ; ===========================================================================
00008578                            
00008578                            Obj15_Action2:				; XREF: Obj15_Index
00008578 7200                       		moveq	#0,d1
0000857A 1228 0019                  		move.b	$19(a0),d1
0000857E 6100 FAC4                  		bsr.w	ExitPlatform
00008582 3F28 0008                  		move.w	8(a0),-(sp)
00008586 6100 0000                  		bsr.w	Obj15_Move
0000858A 341F                       		move.w	(sp)+,d2
0000858C 7600                       		moveq	#0,d3
0000858E 1628 0016                  		move.b	$16(a0),d3
00008592 5203                       		addq.b	#1,d3
00008594 6100 0000                  		bsr.w	MvSonicOnPtfm
00008598 6100 0000                  		bsr.w	DisplaySprite
0000859C 6000 0000                  		bra.w	Obj15_ChkDel
000085A0                            
000085A0 4E75                       		rts
000085A2                            
000085A2                            ; ---------------------------------------------------------------------------
000085A2                            ; Subroutine to	change Sonic's position with a platform
000085A2                            ; ---------------------------------------------------------------------------
000085A2                            
000085A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085A2                            
000085A2                            
000085A2                            MvSonicOnPtfm:
000085A2 43F8 D000                  		lea	($FFFFD000).w,a1
000085A6 3028 000C                  		move.w	$C(a0),d0
000085AA 9043                       		sub.w	d3,d0
000085AC 6000                       		bra.s	MvSonic2
000085AE                            ; End of function MvSonicOnPtfm
000085AE                            
000085AE                            ; ---------------------------------------------------------------------------
000085AE                            ; Subroutine to	change Sonic's position with a platform
000085AE                            ; ---------------------------------------------------------------------------
000085AE                            
000085AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085AE                            
000085AE                            
000085AE                            MvSonicOnPtfm2:
000085AE 43F8 D000                  		lea	($FFFFD000).w,a1
000085B2 3028 000C                  		move.w	$C(a0),d0
000085B6 0440 0009                  		subi.w	#9,d0
000085BA                            
000085BA                            MvSonic2:
000085BA 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000085BE 6B00                       		bmi.s	locret_7B62
000085C0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000085C6 6400                       		bcc.s	locret_7B62
000085C8 4A78 FE08                  		tst.w	($FFFFFE08).w
000085CC 6600                       		bne.s	locret_7B62
000085CE 7200                       		moveq	#0,d1
000085D0 1229 0016                  		move.b	$16(a1),d1
000085D4 9041                       		sub.w	d1,d0
000085D6 3340 000C                  		move.w	d0,$C(a1)
000085DA 9468 0008                  		sub.w	8(a0),d2
000085DE 9569 0008                  		sub.w	d2,8(a1)
000085E2                            
000085E2                            locret_7B62:
000085E2 4E75                       		rts	
000085E4                            ; End of function MvSonicOnPtfm2
000085E4                            
000085E4                            
000085E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085E4                            
000085E4                            
000085E4                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
000085E4 1038 FE78                  		move.b	($FFFFFE78).w,d0
000085E8 323C 0080                  		move.w	#$80,d1
000085EC 0828 0000 0022             		btst	#0,$22(a0)
000085F2 6700                       		beq.s	loc_7B78
000085F4 4440                       		neg.w	d0
000085F6 D041                       		add.w	d1,d0
000085F8                            
000085F8                            loc_7B78:
000085F8 6000                       		bra.s	Obj15_Move2
000085FA                            ; End of function Obj15_Move
000085FA                            
000085FA                            
000085FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085FA                            
000085FA                            
000085FA                            Obj48_Move:				; XREF: Obj48_Display2
000085FA 4A28 003D                  		tst.b	$3D(a0)
000085FE 6600                       		bne.s	loc_7B9C
00008600 3028 003E                  		move.w	$3E(a0),d0
00008604 5040                       		addq.w	#8,d0
00008606 3140 003E                  		move.w	d0,$3E(a0)
0000860A D168 0026                  		add.w	d0,$26(a0)
0000860E 0C40 0200                  		cmpi.w	#$200,d0
00008612 6600                       		bne.s	loc_7BB6
00008614 117C 0001 003D             		move.b	#1,$3D(a0)
0000861A 6000                       		bra.s	loc_7BB6
0000861C                            ; ===========================================================================
0000861C                            
0000861C                            loc_7B9C:
0000861C 3028 003E                  		move.w	$3E(a0),d0
00008620 5140                       		subq.w	#8,d0
00008622 3140 003E                  		move.w	d0,$3E(a0)
00008626 D168 0026                  		add.w	d0,$26(a0)
0000862A 0C40 FE00                  		cmpi.w	#-$200,d0
0000862E 6600                       		bne.s	loc_7BB6
00008630 117C 0000 003D             		move.b	#0,$3D(a0)
00008636                            
00008636                            loc_7BB6:
00008636 1028 0026                  		move.b	$26(a0),d0
0000863A                            ; End of function Obj48_Move
0000863A                            
0000863A                            
0000863A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000863A                            
0000863A                            
0000863A                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
0000863A 6100 AD98                  		bsr.w	CalcSine
0000863E 3428 0038                  		move.w	$38(a0),d2
00008642 3628 003A                  		move.w	$3A(a0),d3
00008646 45E8 0028                  		lea	$28(a0),a2
0000864A 7C00                       		moveq	#0,d6
0000864C 1C1A                       		move.b	(a2)+,d6
0000864E                            
0000864E                            loc_7BCE:
0000864E 7800                       		moveq	#0,d4
00008650 181A                       		move.b	(a2)+,d4
00008652 ED4C                       		lsl.w	#6,d4
00008654 0684 00FF D000             		addi.l	#$FFD000,d4
0000865A 2244                       		movea.l	d4,a1
0000865C 7800                       		moveq	#0,d4
0000865E 1829 003C                  		move.b	$3C(a1),d4
00008662 2A04                       		move.l	d4,d5
00008664 C9C0                       		muls.w	d0,d4
00008666 E084                       		asr.l	#8,d4
00008668 CBC1                       		muls.w	d1,d5
0000866A E085                       		asr.l	#8,d5
0000866C D842                       		add.w	d2,d4
0000866E DA43                       		add.w	d3,d5
00008670 3344 000C                  		move.w	d4,$C(a1)
00008674 3345 0008                  		move.w	d5,8(a1)
00008678 51CE FFD4                  		dbf	d6,loc_7BCE
0000867C 4E75                       		rts	
0000867E                            ; End of function Obj15_Move2
0000867E                            
0000867E                            ; ===========================================================================
0000867E                            
0000867E                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
0000867E 3028 003A                  		move.w	$3A(a0),d0
00008682 0240 FF80                  		andi.w	#$FF80,d0
00008686 3238 F700                  		move.w	($FFFFF700).w,d1
0000868A 0441 0080                  		subi.w	#$80,d1
0000868E 0241 FF80                  		andi.w	#$FF80,d1
00008692 9041                       		sub.w	d1,d0
00008694 0C40 0280                  		cmpi.w	#$280,d0
00008698 6200 0000                  		bhi.w	Obj15_DelAll
0000869C 4E75                       		rts	
0000869E                            ; ===========================================================================
0000869E                            
0000869E                            Obj15_DelAll:				; XREF: Obj15_ChkDel
0000869E 7400                       		moveq	#0,d2
000086A0 45E8 0028                  		lea	$28(a0),a2
000086A4 141A                       		move.b	(a2)+,d2
000086A6                            
000086A6                            Obj15_DelLoop:
000086A6 7000                       		moveq	#0,d0
000086A8 101A                       		move.b	(a2)+,d0
000086AA ED48                       		lsl.w	#6,d0
000086AC 0680 00FF D000             		addi.l	#$FFD000,d0
000086B2 2240                       		movea.l	d0,a1
000086B4 6100 0000                  		bsr.w	DeleteObject2
000086B8 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
000086BC 4E75                       		rts	
000086BE                            ; ===========================================================================
000086BE                            
000086BE                            Obj15_Delete:				; XREF: Obj15_Index
000086BE 6100 0000                  		bsr.w	DeleteObject
000086C2 4E75                       		rts	
000086C4                            ; ===========================================================================
000086C4                            
000086C4                            Obj15_Display:				; XREF: Obj15_Index
000086C4 6000 0000                  		bra.w	DisplaySprite
000086C8                            ; ===========================================================================
000086C8                            ; ---------------------------------------------------------------------------
000086C8                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000086C8                            ; ---------------------------------------------------------------------------
000086C8                            Map_obj15:
000086C8                            	include "_maps\obj15ghz.asm"
000086C8                            ; ---------------------------------------------------------------------------
000086C8                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000086C8                            ; ---------------------------------------------------------------------------
000086C8 0000                       		dc.w byte_7C4E-Map_obj15
000086CA 0000                       		dc.w byte_7C59-Map_obj15
000086CC 0000                       		dc.w byte_7C5F-Map_obj15
000086CE 02                         byte_7C4E:	dc.b 2
000086CF F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
000086D4 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
000086D9 01                         byte_7C59:	dc.b 1
000086DA F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000086DF 01                         byte_7C5F:	dc.b 1
000086E0 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
000086E6 00                         		even
000086E6 00                         		even
000086E6                            
000086E6                            ; ---------------------------------------------------------------------------
000086E6                            ; Sprite mappings - SLZ	swinging platforms
000086E6                            ; ---------------------------------------------------------------------------
000086E6                            Map_obj15a:
000086E6                            	include "_maps\obj15slz.asm"
000086E6                            ; ---------------------------------------------------------------------------
000086E6                            ; Sprite mappings - SLZ	swinging platforms
000086E6                            ; ---------------------------------------------------------------------------
000086E6 0000                       		dc.w byte_7C6C-Map_obj15a
000086E8 0000                       		dc.w byte_7C95-Map_obj15a
000086EA 0000                       		dc.w byte_7C9B-Map_obj15a
000086EC 08                         byte_7C6C:	dc.b 8
000086ED F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
000086F2 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
000086F7 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
000086FC F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00008701 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00008706 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
0000870B 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00008710 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00008715 01                         byte_7C95:	dc.b 1
00008716 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
0000871B 01                         byte_7C9B:	dc.b 1
0000871C F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00008722 00                         		even
00008722 00                         		even
00008722                            
00008722                            ; ===========================================================================
00008722                            ; ---------------------------------------------------------------------------
00008722                            ; Object 17 - helix of spikes on a pole	(GHZ)
00008722                            ; ---------------------------------------------------------------------------
00008722                            
00008722                            Obj17:					; XREF: Obj_Index
00008722 7000                       		moveq	#0,d0
00008724 1028 0024                  		move.b	$24(a0),d0
00008728 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
0000872C 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00008730                            ; ===========================================================================
00008730 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00008732 0000                       		dc.w Obj17_Action-Obj17_Index
00008734 0000                       		dc.w Obj17_Action-Obj17_Index
00008736 0000                       		dc.w Obj17_Delete-Obj17_Index
00008738 0000                       		dc.w Obj17_Display-Obj17_Index
0000873A                            ; ===========================================================================
0000873A                            
0000873A                            Obj17_Main:				; XREF: Obj17_Index
0000873A 5428 0024                  		addq.b	#2,$24(a0)
0000873E 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00008746 317C 4398 0002             		move.w	#$4398,2(a0)
0000874C 117C 0007 0022             		move.b	#7,$22(a0)
00008752 117C 0004 0001             		move.b	#4,1(a0)
00008758 117C 0003 0018             		move.b	#3,$18(a0)
0000875E 117C 0008 0019             		move.b	#8,$19(a0)
00008764 3428 000C                  		move.w	$C(a0),d2
00008768 3628 0008                  		move.w	8(a0),d3
0000876C 1810                       		move.b	0(a0),d4
0000876E 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008772 7200                       		moveq	#0,d1
00008774 1212                       		move.b	(a2),d1		; move a2 to d1
00008776 14FC 0000                  		move.b	#0,(a2)+
0000877A 3001                       		move.w	d1,d0
0000877C E248                       		lsr.w	#1,d0
0000877E E948                       		lsl.w	#4,d0
00008780 9640                       		sub.w	d0,d3
00008782 5501                       		subq.b	#2,d1
00008784 6500                       		bcs.s	Obj17_Action
00008786 7C00                       		moveq	#0,d6
00008788                            
00008788                            Obj17_MakeHelix:
00008788 6100 0000                  		bsr.w	SingleObjLoad
0000878C 6600                       		bne.s	Obj17_Action
0000878E 5228 0028                  		addq.b	#1,$28(a0)
00008792 3A09                       		move.w	a1,d5
00008794 0445 D000                  		subi.w	#$D000,d5
00008798 EC4D                       		lsr.w	#6,d5
0000879A 0245 007F                  		andi.w	#$7F,d5
0000879E 14C5                       		move.b	d5,(a2)+
000087A0 137C 0008 0024             		move.b	#8,$24(a1)
000087A6 1284                       		move.b	d4,0(a1)
000087A8 3342 000C                  		move.w	d2,$C(a1)
000087AC 3343 0008                  		move.w	d3,8(a1)
000087B0 2368 0004 0004             		move.l	4(a0),4(a1)
000087B6 337C 4398 0002             		move.w	#$4398,2(a1)
000087BC 137C 0004 0001             		move.b	#4,1(a1)
000087C2 137C 0003 0018             		move.b	#3,$18(a1)
000087C8 137C 0008 0019             		move.b	#8,$19(a1)
000087CE 1346 003E                  		move.b	d6,$3E(a1)
000087D2 5206                       		addq.b	#1,d6
000087D4 0206 0007                  		andi.b	#7,d6
000087D8 0643 0010                  		addi.w	#$10,d3
000087DC B668 0008                  		cmp.w	8(a0),d3
000087E0 6600                       		bne.s	loc_7D78
000087E2 1146 003E                  		move.b	d6,$3E(a0)
000087E6 5206                       		addq.b	#1,d6
000087E8 0206 0007                  		andi.b	#7,d6
000087EC 0643 0010                  		addi.w	#$10,d3
000087F0 5228 0028                  		addq.b	#1,$28(a0)
000087F4                            
000087F4                            loc_7D78:
000087F4 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
000087F8                            
000087F8                            Obj17_Action:				; XREF: Obj17_Index
000087F8 6100 0000                  		bsr.w	Obj17_RotateSpikes
000087FC 6100 0000                  		bsr.w	DisplaySprite
00008800 6000 0000                  		bra.w	Obj17_ChkDel
00008804                            
00008804                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008804                            
00008804                            
00008804                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00008804 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00008808 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
0000880E D028 003E                  		add.b	$3E(a0),d0
00008812 0200 0007                  		andi.b	#7,d0
00008816 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
0000881A 6600                       		bne.s	locret_7DA6
0000881C 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00008822                            
00008822                            locret_7DA6:
00008822 4E75                       		rts	
00008824                            ; End of function Obj17_RotateSpikes
00008824                            
00008824                            ; ===========================================================================
00008824                            
00008824                            Obj17_ChkDel:				; XREF: Obj17_Action
00008824 3028 0008                  		move.w	8(a0),d0
00008828 0240 FF80                  		andi.w	#$FF80,d0
0000882C 3238 F700                  		move.w	($FFFFF700).w,d1
00008830 0441 0080                  		subi.w	#$80,d1
00008834 0241 FF80                  		andi.w	#$FF80,d1
00008838 9041                       		sub.w	d1,d0
0000883A 0C40 0280                  		cmpi.w	#$280,d0
0000883E 6200 0000                  		bhi.w	Obj17_DelAll
00008842 4E75                       		rts	
00008844                            ; ===========================================================================
00008844                            
00008844                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00008844 7400                       		moveq	#0,d2
00008846 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
0000884A 141A                       		move.b	(a2)+,d2	; move a2 to d2
0000884C 5502                       		subq.b	#2,d2
0000884E 6500                       		bcs.s	Obj17_Delete
00008850                            
00008850                            Obj17_DelLoop:
00008850 7000                       		moveq	#0,d0
00008852 101A                       		move.b	(a2)+,d0
00008854 ED48                       		lsl.w	#6,d0
00008856 0680 00FF D000             		addi.l	#$FFD000,d0
0000885C 2240                       		movea.l	d0,a1
0000885E 6100 0000                  		bsr.w	DeleteObject2	; delete object
00008862 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00008866                            
00008866                            Obj17_Delete:				; XREF: Obj17_Index
00008866 6100 0000                  		bsr.w	DeleteObject
0000886A 4E75                       		rts	
0000886C                            ; ===========================================================================
0000886C                            
0000886C                            Obj17_Display:				; XREF: Obj17_Index
0000886C 6100 FF96                  		bsr.w	Obj17_RotateSpikes
00008870 6000 0000                  		bra.w	DisplaySprite
00008874                            ; ===========================================================================
00008874                            ; ---------------------------------------------------------------------------
00008874                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008874                            ; ---------------------------------------------------------------------------
00008874                            Map_obj17:
00008874                            	include "_maps\obj17.asm"
00008874                            ; ---------------------------------------------------------------------------
00008874                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008874                            ; ---------------------------------------------------------------------------
00008874 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00008878 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
0000887C 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
00008880 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00008884 01                         byte_7E08:	dc.b 1
00008885 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
0000888A 01                         byte_7E0E:	dc.b 1
0000888B F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00008890 01                         byte_7E14:	dc.b 1
00008891 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00008896 01                         byte_7E1A:	dc.b 1
00008897 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
0000889C 01                         byte_7E20:	dc.b 1
0000889D 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
000088A2 01                         byte_7E26:	dc.b 1
000088A3 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
000088A8 01                         byte_7E2C:	dc.b 1
000088A9 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
000088AE                            		even
000088AE                            		even
000088AE                            
000088AE                            ; ===========================================================================
000088AE                            ; ---------------------------------------------------------------------------
000088AE                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
000088AE                            ; ---------------------------------------------------------------------------
000088AE                            
000088AE                            Obj18:					; XREF: Obj_Index
000088AE 7000                       		moveq	#0,d0
000088B0 1028 0024                  		move.b	$24(a0),d0
000088B4 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
000088B8 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
000088BC                            ; ===========================================================================
000088BC 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
000088BE 0000                       		dc.w Obj18_Solid-Obj18_Index
000088C0 0000                       		dc.w Obj18_Action2-Obj18_Index
000088C2 0000                       		dc.w Obj18_Delete-Obj18_Index
000088C4 0000                       		dc.w Obj18_Action-Obj18_Index
000088C6                            ; ===========================================================================
000088C6                            
000088C6                            Obj18_Main:				; XREF: Obj18_Index
000088C6 5428 0024                  		addq.b	#2,$24(a0)
000088CA 317C 4000 0002             		move.w	#$4000,2(a0)
000088D0 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
000088D8 117C 0020 0019             		move.b	#$20,$19(a0)
000088DE 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
000088E4 6600                       		bne.s	Obj18_NotSYZ
000088E6 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
000088EE 117C 0020 0019             		move.b	#$20,$19(a0)
000088F4                            
000088F4                            Obj18_NotSYZ:
000088F4 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000088FA 6600                       		bne.s	Obj18_NotSLZ
000088FC 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00008904 117C 0020 0019             		move.b	#$20,$19(a0)
0000890A 317C 4000 0002             		move.w	#$4000,2(a0)
00008910 117C 0003 0028             		move.b	#3,$28(a0)
00008916                            
00008916                            Obj18_NotSLZ:
00008916 117C 0004 0001             		move.b	#4,1(a0)
0000891C 117C 0004 0018             		move.b	#4,$18(a0)
00008922 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00008928 3168 000C 0034             		move.w	$C(a0),$34(a0)
0000892E 3168 0008 0032             		move.w	8(a0),$32(a0)
00008934 317C 0080 0026             		move.w	#$80,$26(a0)
0000893A 7200                       		moveq	#0,d1
0000893C 1028 0028                  		move.b	$28(a0),d0
00008940 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00008944 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00008946 5201                       		addq.b	#1,d1		; use frame #1
00008948 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
0000894E                            
0000894E                            Obj18_SetFrame:
0000894E 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00008952                            
00008952                            Obj18_Solid:				; XREF: Obj18_Index
00008952 4A28 0038                  		tst.b	$38(a0)
00008956 6700                       		beq.s	loc_7EE0
00008958 5928 0038                  		subq.b	#4,$38(a0)
0000895C                            
0000895C                            loc_7EE0:
0000895C 7200                       		moveq	#0,d1
0000895E 1228 0019                  		move.b	$19(a0),d1
00008962 6100 F56C                  		bsr.w	PlatformObject
00008966                            
00008966                            Obj18_Action:				; XREF: Obj18_Index
00008966 6100 0000                  		bsr.w	Obj18_Move
0000896A 6100 0000                  		bsr.w	Obj18_Nudge
0000896E 6100 0000                  		bsr.w	DisplaySprite
00008972 6000 0000                  		bra.w	Obj18_ChkDel
00008976                            ; ===========================================================================
00008976                            
00008976                            Obj18_Action2:				; XREF: Obj18_Index
00008976 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
0000897C 6700                       		beq.s	loc_7F06
0000897E 5828 0038                  		addq.b	#4,$38(a0)
00008982                            
00008982                            loc_7F06:
00008982 7200                       		moveq	#0,d1
00008984 1228 0019                  		move.b	$19(a0),d1
00008988 6100 F6BA                  		bsr.w	ExitPlatform
0000898C 3F28 0008                  		move.w	8(a0),-(sp)
00008990 6100 0000                  		bsr.w	Obj18_Move
00008994 6100 0000                  		bsr.w	Obj18_Nudge
00008998 341F                       		move.w	(sp)+,d2
0000899A 6100 FC12                  		bsr.w	MvSonicOnPtfm2
0000899E 6100 0000                  		bsr.w	DisplaySprite
000089A2 6000 0000                  		bra.w	Obj18_ChkDel
000089A6                            
000089A6 4E75                       		rts
000089A8                            
000089A8                            ; ---------------------------------------------------------------------------
000089A8                            ; Subroutine to	move platform slightly when you	stand on it
000089A8                            ; ---------------------------------------------------------------------------
000089A8                            
000089A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089A8                            
000089A8                            
000089A8                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
000089A8 1028 0038                  		move.b	$38(a0),d0
000089AC 6100 AA26                  		bsr.w	CalcSine
000089B0 323C 0400                  		move.w	#$400,d1
000089B4 C1C1                       		muls.w	d1,d0
000089B6 4840                       		swap	d0
000089B8 D068 002C                  		add.w	$2C(a0),d0
000089BC 3140 000C                  		move.w	d0,$C(a0)
000089C0 4E75                       		rts	
000089C2                            ; End of function Obj18_Nudge
000089C2                            
000089C2                            ; ---------------------------------------------------------------------------
000089C2                            ; Subroutine to	move platforms
000089C2                            ; ---------------------------------------------------------------------------
000089C2                            
000089C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089C2                            
000089C2                            
000089C2                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
000089C2 7000                       		moveq	#0,d0
000089C4 1028 0028                  		move.b	$28(a0),d0
000089C8 0240 000F                  		andi.w	#$F,d0
000089CC D040                       		add.w	d0,d0
000089CE 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
000089D2 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
000089D6                            ; End of function Obj18_Move
000089D6                            
000089D6                            ; ===========================================================================
000089D6 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
000089DA 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
000089DE 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
000089E2 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
000089E6 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
000089EA 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
000089EE 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
000089F0                            ; ===========================================================================
000089F0                            
000089F0                            Obj18_Type00:
000089F0 4E75                       		rts			; platform 00 doesn't move
000089F2                            ; ===========================================================================
000089F2                            
000089F2                            Obj18_Type05:
000089F2 3028 0032                  		move.w	$32(a0),d0
000089F6 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000089FA 4401                       		neg.b	d1		; reverse platform-motion
000089FC 0601 0040                  		addi.b	#$40,d1
00008A00 6000                       		bra.s	Obj18_01_Move
00008A02                            ; ===========================================================================
00008A02                            
00008A02                            Obj18_Type01:
00008A02 3028 0032                  		move.w	$32(a0),d0
00008A06 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008A0A 0401 0040                  		subi.b	#$40,d1
00008A0E                            
00008A0E                            Obj18_01_Move:
00008A0E 4881                       		ext.w	d1
00008A10 D041                       		add.w	d1,d0
00008A12 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
00008A16 6000 0000                  		bra.w	Obj18_ChgMotion
00008A1A                            ; ===========================================================================
00008A1A                            
00008A1A                            Obj18_Type0C:
00008A1A 3028 0034                  		move.w	$34(a0),d0
00008A1E 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008A22 4401                       		neg.b	d1		; reverse platform-motion
00008A24 0601 0030                  		addi.b	#$30,d1
00008A28 6000                       		bra.s	Obj18_02_Move
00008A2A                            ; ===========================================================================
00008A2A                            
00008A2A                            Obj18_Type0B:
00008A2A 3028 0034                  		move.w	$34(a0),d0
00008A2E 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008A32 0401 0030                  		subi.b	#$30,d1
00008A36 6000                       		bra.s	Obj18_02_Move
00008A38                            ; ===========================================================================
00008A38                            
00008A38                            Obj18_Type06:
00008A38 3028 0034                  		move.w	$34(a0),d0
00008A3C 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008A40 4401                       		neg.b	d1		; reverse platform-motion
00008A42 0601 0040                  		addi.b	#$40,d1
00008A46 6000                       		bra.s	Obj18_02_Move
00008A48                            ; ===========================================================================
00008A48                            
00008A48                            Obj18_Type02:
00008A48 3028 0034                  		move.w	$34(a0),d0
00008A4C 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008A50 0401 0040                  		subi.b	#$40,d1
00008A54                            
00008A54                            Obj18_02_Move:
00008A54 4881                       		ext.w	d1
00008A56 D041                       		add.w	d1,d0
00008A58 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008A5C 6000 0000                  		bra.w	Obj18_ChgMotion
00008A60                            ; ===========================================================================
00008A60                            
00008A60                            Obj18_Type03:
00008A60 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008A64 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00008A66 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
00008A6C 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
00008A6E 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00008A74                            
00008A74                            Obj18_03_NoMove:
00008A74 4E75                       		rts	
00008A76                            ; ===========================================================================
00008A76                            
00008A76                            Obj18_03_Wait:
00008A76 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00008A7A 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
00008A7C 317C 0020 003A             		move.w	#32,$3A(a0)
00008A82 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00008A86 4E75                       		rts	
00008A88                            ; ===========================================================================
00008A88                            
00008A88                            Obj18_Type04:
00008A88 4A68 003A                  		tst.w	$3A(a0)
00008A8C 6700                       		beq.s	loc_8048
00008A8E 5368 003A                  		subq.w	#1,$3A(a0)
00008A92 6600                       		bne.s	loc_8048
00008A94 0828 0003 0022             		btst	#3,$22(a0)
00008A9A 6700                       		beq.s	loc_8042
00008A9C 08E9 0001 0022             		bset	#1,$22(a1)
00008AA2 08A9 0003 0022             		bclr	#3,$22(a1)
00008AA8 137C 0002 0024             		move.b	#2,$24(a1)
00008AAE 08A8 0003 0022             		bclr	#3,$22(a0)
00008AB4 4228 0025                  		clr.b	$25(a0)
00008AB8 3368 0012 0012             		move.w	$12(a0),$12(a1)
00008ABE                            
00008ABE                            loc_8042:
00008ABE 117C 0008 0024             		move.b	#8,$24(a0)
00008AC4                            
00008AC4                            loc_8048:
00008AC4 2628 002C                  		move.l	$2C(a0),d3
00008AC8 3028 0012                  		move.w	$12(a0),d0
00008ACC 48C0                       		ext.l	d0
00008ACE E180                       		asl.l	#8,d0
00008AD0 D680                       		add.l	d0,d3
00008AD2 2143 002C                  		move.l	d3,$2C(a0)
00008AD6 0668 0038 0012             		addi.w	#$38,$12(a0)
00008ADC 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008AE0 0640 00E0                  		addi.w	#$E0,d0
00008AE4 B068 002C                  		cmp.w	$2C(a0),d0
00008AE8 6400                       		bcc.s	locret_8074
00008AEA 117C 0006 0024             		move.b	#6,$24(a0)
00008AF0                            
00008AF0                            locret_8074:
00008AF0 4E75                       		rts	
00008AF2                            ; ===========================================================================
00008AF2                            
00008AF2                            Obj18_Type07:
00008AF2 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008AF6 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
00008AF8 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00008AFC 7000                       		moveq	#0,d0
00008AFE 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
00008B02 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00008B04 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00008B08 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
00008B0A 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00008B10                            
00008B10                            Obj18_07_NoMove:
00008B10 4E75                       		rts	
00008B12                            ; ===========================================================================
00008B12                            
00008B12                            Obj18_07_Wait:
00008B12 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00008B16 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
00008B18 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
00008B1C 4E75                       		rts	
00008B1E                            ; ===========================================================================
00008B1E                            
00008B1E                            Obj18_Type08:
00008B1E 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00008B22 3028 0034                  		move.w	$34(a0),d0
00008B26 0440 0200                  		subi.w	#$200,d0
00008B2A B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00008B2E 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
00008B30 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00008B34                            
00008B34                            Obj18_08_NoStop:
00008B34 4E75                       		rts	
00008B36                            ; ===========================================================================
00008B36                            
00008B36                            Obj18_Type0A:
00008B36 3028 0034                  		move.w	$34(a0),d0
00008B3A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008B3E 0401 0040                  		subi.b	#$40,d1
00008B42 4881                       		ext.w	d1
00008B44 E241                       		asr.w	#1,d1
00008B46 D041                       		add.w	d1,d0
00008B48 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008B4C                            
00008B4C                            Obj18_ChgMotion:
00008B4C 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00008B52 4E75                       		rts	
00008B54                            ; ===========================================================================
00008B54                            
00008B54                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00008B54 3028 0032                  		move.w	$32(a0),d0
00008B58 0240 FF80                  		andi.w	#$FF80,d0
00008B5C 3238 F700                  		move.w	($FFFFF700).w,d1
00008B60 0441 0080                  		subi.w	#$80,d1
00008B64 0241 FF80                  		andi.w	#$FF80,d1
00008B68 9041                       		sub.w	d1,d0
00008B6A 0C40 0280                  		cmpi.w	#$280,d0
00008B6E 6200                       		bhi.s	Obj18_Delete
00008B70 4E75                       		rts	
00008B72                            ; ===========================================================================
00008B72                            
00008B72                            Obj18_Delete:				; XREF: Obj18_Index
00008B72 6000 0000                  		bra.w	DeleteObject
00008B76                            ; ===========================================================================
00008B76                            ; ---------------------------------------------------------------------------
00008B76                            ; Sprite mappings - unused
00008B76                            ; ---------------------------------------------------------------------------
00008B76                            Map_obj18x:
00008B76                            	include "_maps\obj18x.asm"
00008B76                            ; ---------------------------------------------------------------------------
00008B76                            ; Sprite mappings - unused
00008B76                            ; ---------------------------------------------------------------------------
00008B76 0000                       		dc.w byte_80FE-Map_obj18x
00008B78 0000                       		dc.w byte_8109-Map_obj18x
00008B7A 02                         byte_80FE:	dc.b 2
00008B7B F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00008B80 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00008B85 0A                         byte_8109:	dc.b $A
00008B86 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00008B8B 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00008B90 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00008B95 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00008B9A 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00008B9F F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00008BA4 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00008BA9 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00008BAE 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00008BB3 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00008BB8                            		even
00008BB8                            		even
00008BB8                            
00008BB8                            ; ---------------------------------------------------------------------------
00008BB8                            ; Sprite mappings - GHZ	platforms
00008BB8                            ; ---------------------------------------------------------------------------
00008BB8                            Map_obj18:
00008BB8                            	include "_maps\obj18ghz.asm"
00008BB8                            ; ---------------------------------------------------------------------------
00008BB8                            ; Sprite mappings - GHZ	platforms
00008BB8                            ; ---------------------------------------------------------------------------
00008BB8 0000                       		dc.w byte_8140-Map_obj18
00008BBA 0000                       		dc.w byte_8155-Map_obj18
00008BBC 04                         byte_8140:	dc.b 4
00008BBD F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00008BC2 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00008BC7 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00008BCC F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00008BD1 0A                         byte_8155:	dc.b $A
00008BD2 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00008BD7 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00008BDC 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00008BE1 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00008BE6 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00008BEB F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00008BF0 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00008BF5 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00008BFA 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00008BFF 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00008C04                            		even
00008C04                            		even
00008C04                            
00008C04                            ; ---------------------------------------------------------------------------
00008C04                            ; Sprite mappings - SYZ	platforms
00008C04                            ; ---------------------------------------------------------------------------
00008C04                            Map_obj18a:
00008C04                            	include "_maps\obj18syz.asm"
00008C04                            ; ---------------------------------------------------------------------------
00008C04                            ; Sprite mappings - SYZ	platforms
00008C04                            ; ---------------------------------------------------------------------------
00008C04 0000                       		dc.w byte_818A-Map_obj18a
00008C06 03                         byte_818A:	dc.b 3
00008C07 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00008C0C F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00008C11 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00008C16                            		even
00008C16                            		even
00008C16                            
00008C16                            ; ---------------------------------------------------------------------------
00008C16                            ; Sprite mappings - SLZ	platforms
00008C16                            ; ---------------------------------------------------------------------------
00008C16                            Map_obj18b:
00008C16                            	include "_maps\obj18slz.asm"
00008C16                            ; ---------------------------------------------------------------------------
00008C16                            ; Sprite mappings - SLZ	platforms
00008C16                            ; ---------------------------------------------------------------------------
00008C16 0000                       		dc.w byte_819C-Map_obj18b
00008C18 02                         byte_819C:	dc.b 2
00008C19 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00008C1E F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00008C24 00                         		even
00008C24 00                         		even
00008C24                            
00008C24                            ; ===========================================================================
00008C24                            ; ---------------------------------------------------------------------------
00008C24                            ; Object 19 - blank
00008C24                            ; ---------------------------------------------------------------------------
00008C24                            
00008C24                            Obj19:					; XREF: Obj_Index
00008C24 4E75                       		rts	
00008C26                            ; ===========================================================================
00008C26                            ; ---------------------------------------------------------------------------
00008C26                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008C26                            ; ---------------------------------------------------------------------------
00008C26                            Map_obj48:
00008C26                            	include "_maps\obj48.asm"
00008C26                            ; ---------------------------------------------------------------------------
00008C26                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008C26                            ; ---------------------------------------------------------------------------
00008C26 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
00008C2A 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
00008C2E 06                         byte_81B2:	dc.b 6
00008C2F F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00008C34 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00008C39 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00008C3E E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00008C43 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00008C48 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00008C4D 04                         byte_81D1:	dc.b 4
00008C4E E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00008C53 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00008C58 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00008C5D 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00008C62 04                         byte_81E6:	dc.b 4
00008C63 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00008C68 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00008C6D 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00008C72 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00008C77 04                         byte_81FB:	dc.b 4
00008C78 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00008C7D E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00008C82 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00008C87 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00008C8C                            		even
00008C8C                            		even
00008C8C                            
00008C8C                            ; ===========================================================================
00008C8C                            ; ---------------------------------------------------------------------------
00008C8C                            ; Object 1A - GHZ collapsing ledge
00008C8C                            ; ---------------------------------------------------------------------------
00008C8C                            
00008C8C                            Obj1A:					; XREF: Obj_Index
00008C8C 7000                       		moveq	#0,d0
00008C8E 1028 0024                  		move.b	$24(a0),d0
00008C92 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00008C96 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00008C9A                            ; ===========================================================================
00008C9A 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
00008C9E 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00008CA2 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00008CA6                            ; ===========================================================================
00008CA6                            
00008CA6                            Obj1A_Main:				; XREF: Obj1A_Index
00008CA6 5428 0024                  		addq.b	#2,$24(a0)
00008CAA 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008CB2 317C 4000 0002             		move.w	#$4000,2(a0)
00008CB8 0028 0004 0001             		ori.b	#4,1(a0)
00008CBE 117C 0004 0018             		move.b	#4,$18(a0)
00008CC4 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00008CCA 117C 0064 0019             		move.b	#$64,$19(a0)
00008CD0 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00008CD6 117C 0038 0016             		move.b	#$38,$16(a0)
00008CDC 08E8 0004 0001             		bset	#4,1(a0)
00008CE2                            
00008CE2                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00008CE2 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00008CE6 6700                       		beq.s	Obj1A_Slope	; if not, branch
00008CE8 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00008CEC 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00008CF0 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008CF4                            
00008CF4                            Obj1A_Slope:
00008CF4 323C 0030                  		move.w	#$30,d1
00008CF8 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008CFE 6100 F2A4                  		bsr.w	SlopeObject
00008D02 6000 0000                  		bra.w	MarkObjGone
00008D06                            ; ===========================================================================
00008D06                            
00008D06                            Obj1A_Touch:				; XREF: Obj1A_Index
00008D06 4A28 0038                  		tst.b	$38(a0)
00008D0A 6700 0000                  		beq.w	loc_847A
00008D0E 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008D14 5328 0038                  		subq.b	#1,$38(a0)
00008D18                            
00008D18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D18                            
00008D18                            
00008D18                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00008D18 323C 0030                  		move.w	#$30,d1
00008D1C 6100 F326                  		bsr.w	ExitPlatform
00008D20 323C 0030                  		move.w	#$30,d1
00008D24 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008D2A 3428 0008                  		move.w	8(a0),d2
00008D2E 6100 0000                  		bsr.w	SlopeObject2
00008D32 6000 0000                  		bra.w	MarkObjGone
00008D36                            ; End of function Obj1A_WalkOff
00008D36                            
00008D36                            ; ===========================================================================
00008D36                            
00008D36                            Obj1A_Display:				; XREF: Obj1A_Index
00008D36 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008D3A 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00008D3C 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008D40 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00008D44 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008D48 6000 0000                  		bra.w	DisplaySprite
00008D4C                            ; ===========================================================================
00008D4C                            
00008D4C                            loc_82D0:				; XREF: Obj1A_Display
00008D4C 5328 0038                  		subq.b	#1,$38(a0)
00008D50 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00008D54 43F8 D000                  		lea	($FFFFD000).w,a1
00008D58 0829 0003 0022             		btst	#3,$22(a1)
00008D5E 6700                       		beq.s	loc_82FC
00008D60 4A28 0038                  		tst.b	$38(a0)
00008D64 6600                       		bne.s	locret_8308
00008D66 08A9 0003 0022             		bclr	#3,$22(a1)
00008D6C 08A9 0005 0022             		bclr	#5,$22(a1)
00008D72 137C 0001 001D             		move.b	#1,$1D(a1)
00008D78                            
00008D78                            loc_82FC:
00008D78 117C 0000 003A             		move.b	#0,$3A(a0)
00008D7E 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00008D84                            
00008D84                            locret_8308:
00008D84 4E75                       		rts	
00008D86                            ; ===========================================================================
00008D86                            
00008D86                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00008D86 6100 0000                  		bsr.w	ObjectFall
00008D8A 6100 0000                  		bsr.w	DisplaySprite
00008D8E 4A28 0001                  		tst.b	1(a0)
00008D92 6A00                       		bpl.s	Obj1A_Delete
00008D94 4E75                       		rts	
00008D96                            ; ===========================================================================
00008D96                            
00008D96                            Obj1A_Delete:				; XREF: Obj1A_Index
00008D96 6100 0000                  		bsr.w	DeleteObject
00008D9A 4E75                       		rts	
00008D9C                            ; ===========================================================================
00008D9C                            ; ---------------------------------------------------------------------------
00008D9C                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00008D9C                            ; ---------------------------------------------------------------------------
00008D9C                            
00008D9C                            Obj53:					; XREF: Obj_Index
00008D9C 7000                       		moveq	#0,d0
00008D9E 1028 0024                  		move.b	$24(a0),d0
00008DA2 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008DA6 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00008DAA                            ; ===========================================================================
00008DAA 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00008DAE 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008DB2 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008DB6                            ; ===========================================================================
00008DB6                            
00008DB6                            Obj53_Main:				; XREF: Obj53_Index
00008DB6 5428 0024                  		addq.b	#2,$24(a0)
00008DBA 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008DC2 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008DC8 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008DCE 6600                       		bne.s	Obj53_NotSLZ
00008DD0 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008DD6 5428 001A                  		addq.b	#2,$1A(a0)
00008DDA                            
00008DDA                            Obj53_NotSLZ:
00008DDA 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008DE0 6600                       		bne.s	Obj53_NotSBZ
00008DE2 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00008DE8                            
00008DE8                            Obj53_NotSBZ:
00008DE8 0028 0004 0001             		ori.b	#4,1(a0)
00008DEE 117C 0004 0018             		move.b	#4,$18(a0)
00008DF4 117C 0007 0038             		move.b	#7,$38(a0)
00008DFA 117C 0044 0019             		move.b	#$44,$19(a0)
00008E00                            
00008E00                            Obj53_ChkTouch:				; XREF: Obj53_Index
00008E00 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008E04 6700                       		beq.s	Obj53_Solid	; if not, branch
00008E06 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008E0A 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00008E0E 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008E12                            
00008E12                            Obj53_Solid:
00008E12 323C 0020                  		move.w	#$20,d1
00008E16 6100 F0B8                  		bsr.w	PlatformObject
00008E1A 4A28 0028                  		tst.b	$28(a0)
00008E1E 6A00                       		bpl.s	Obj53_MarkAsGone
00008E20 0829 0003 0022             		btst	#3,$22(a1)
00008E26 6700                       		beq.s	Obj53_MarkAsGone
00008E28 08A8 0000 0001             		bclr	#0,1(a0)
00008E2E 3029 0008                  		move.w	8(a1),d0
00008E32 9068 0008                  		sub.w	8(a0),d0
00008E36 6400                       		bcc.s	Obj53_MarkAsGone
00008E38 08E8 0000 0001             		bset	#0,1(a0)
00008E3E                            
00008E3E                            Obj53_MarkAsGone:
00008E3E 6000 0000                  		bra.w	MarkObjGone
00008E42                            ; ===========================================================================
00008E42                            
00008E42                            Obj53_Touch:				; XREF: Obj53_Index
00008E42 4A28 0038                  		tst.b	$38(a0)
00008E46 6700 0000                  		beq.w	loc_8458
00008E4A 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008E50 5328 0038                  		subq.b	#1,$38(a0)
00008E54                            
00008E54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008E54                            
00008E54                            
00008E54                            Obj53_WalkOff:				; XREF: Obj53_Index
00008E54 323C 0020                  		move.w	#$20,d1
00008E58 6100 F1EA                  		bsr.w	ExitPlatform
00008E5C 3428 0008                  		move.w	8(a0),d2
00008E60 6100 F74C                  		bsr.w	MvSonicOnPtfm2
00008E64 6000 0000                  		bra.w	MarkObjGone
00008E68                            ; End of function Obj53_WalkOff
00008E68                            
00008E68                            ; ===========================================================================
00008E68                            
00008E68                            Obj53_Display:				; XREF: Obj53_Index
00008E68 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008E6C 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00008E6E 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008E72 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008E76 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008E7A 6000 0000                  		bra.w	DisplaySprite
00008E7E                            ; ===========================================================================
00008E7E                            
00008E7E                            loc_8402:
00008E7E 5328 0038                  		subq.b	#1,$38(a0)
00008E82 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008E86 43F8 D000                  		lea	($FFFFD000).w,a1
00008E8A 0829 0003 0022             		btst	#3,$22(a1)
00008E90 6700                       		beq.s	loc_842E
00008E92 4A28 0038                  		tst.b	$38(a0)
00008E96 6600                       		bne.s	locret_843A
00008E98 08A9 0003 0022             		bclr	#3,$22(a1)
00008E9E 08A9 0005 0022             		bclr	#5,$22(a1)
00008EA4 137C 0001 001D             		move.b	#1,$1D(a1)
00008EAA                            
00008EAA                            loc_842E:
00008EAA 117C 0000 003A             		move.b	#0,$3A(a0)
00008EB0 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008EB6                            
00008EB6                            locret_843A:
00008EB6 4E75                       		rts	
00008EB8                            ; ===========================================================================
00008EB8                            
00008EB8                            Obj53_TimeZero:				; XREF: Obj53_Display
00008EB8 6100 0000                  		bsr.w	ObjectFall
00008EBC 6100 0000                  		bsr.w	DisplaySprite
00008EC0 4A28 0001                  		tst.b	1(a0)
00008EC4 6A00                       		bpl.s	Obj53_Delete
00008EC6 4E75                       		rts	
00008EC8                            ; ===========================================================================
00008EC8                            
00008EC8                            Obj53_Delete:				; XREF: Obj53_Index
00008EC8 6100 0000                  		bsr.w	DeleteObject
00008ECC 4E75                       		rts	
00008ECE                            ; ===========================================================================
00008ECE                            
00008ECE                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008ECE 117C 0000 003A             		move.b	#0,$3A(a0)
00008ED4                            
00008ED4                            loc_8458:				; XREF: Obj53_Touch
00008ED4 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00008EDA 0828 0000 0028             		btst	#0,$28(a0)
00008EE0 6700                       		beq.s	loc_846C
00008EE2 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008EE8                            
00008EE8                            loc_846C:
00008EE8 7207                       		moveq	#7,d1
00008EEA 5228 001A                  		addq.b	#1,$1A(a0)
00008EEE 6000                       		bra.s	loc_8486
00008EF0                            ; ===========================================================================
00008EF0                            
00008EF0                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008EF0 117C 0000 003A             		move.b	#0,$3A(a0)
00008EF6                            
00008EF6                            loc_847A:				; XREF: Obj1A_Touch
00008EF6 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00008EFC 7218                       		moveq	#$18,d1
00008EFE 5428 001A                  		addq.b	#2,$1A(a0)
00008F02                            
00008F02                            loc_8486:				; XREF: Obj53_Collapse
00008F02 7000                       		moveq	#0,d0
00008F04 1028 001A                  		move.b	$1A(a0),d0
00008F08 D040                       		add.w	d0,d0
00008F0A 2668 0004                  		movea.l	4(a0),a3
00008F0E D6F3 0000                  		adda.w	(a3,d0.w),a3
00008F12 524B                       		addq.w	#1,a3
00008F14 08E8 0005 0001             		bset	#5,1(a0)
00008F1A 1810                       		move.b	0(a0),d4
00008F1C 1A28 0001                  		move.b	1(a0),d5
00008F20 2248                       		movea.l	a0,a1
00008F22 6000                       		bra.s	loc_84B2
00008F24                            ; ===========================================================================
00008F24                            
00008F24                            loc_84AA:
00008F24 6100 0000                  		bsr.w	SingleObjLoad
00008F28 6600                       		bne.s	loc_84F2
00008F2A 5A4B                       		addq.w	#5,a3
00008F2C                            
00008F2C                            loc_84B2:
00008F2C 137C 0006 0024             		move.b	#6,$24(a1)
00008F32 1284                       		move.b	d4,0(a1)
00008F34 234B 0004                  		move.l	a3,4(a1)
00008F38 1345 0001                  		move.b	d5,1(a1)
00008F3C 3368 0008 0008             		move.w	8(a0),8(a1)
00008F42 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008F48 3368 0002 0002             		move.w	2(a0),2(a1)
00008F4E 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008F54 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008F5A 135C 0038                  		move.b	(a4)+,$38(a1)
00008F5E B3C8                       		cmpa.l	a0,a1
00008F60 6400                       		bcc.s	loc_84EE
00008F62 6100 0000                  		bsr.w	DisplaySprite2
00008F66                            
00008F66                            loc_84EE:
00008F66 51C9 FFBC                  		dbf	d1,loc_84AA
00008F6A                            
00008F6A                            loc_84F2:
00008F6A 6100 0000                  		bsr.w	DisplaySprite
00008F6E 303C 00B9                  		move.w	#$B9,d0
00008F72 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008F78                            ; ===========================================================================
00008F78                            ; ---------------------------------------------------------------------------
00008F78                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008F78                            ; ---------------------------------------------------------------------------
00008F78 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008F88 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008F92 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008F9A 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008FA2                            
00008FA2                            ; ---------------------------------------------------------------------------
00008FA2                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008FA2                            ; ---------------------------------------------------------------------------
00008FA2                            
00008FA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008FA2                            
00008FA2                            
00008FA2                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008FA2 43F8 D000                  		lea	($FFFFD000).w,a1
00008FA6 0829 0003 0022             		btst	#3,$22(a1)
00008FAC 6700                       		beq.s	locret_856E
00008FAE 3029 0008                  		move.w	8(a1),d0
00008FB2 9068 0008                  		sub.w	8(a0),d0
00008FB6 D041                       		add.w	d1,d0
00008FB8 E248                       		lsr.w	#1,d0
00008FBA 0828 0000 0001             		btst	#0,1(a0)
00008FC0 6700                       		beq.s	loc_854E
00008FC2 4640                       		not.w	d0
00008FC4 D041                       		add.w	d1,d0
00008FC6                            
00008FC6                            loc_854E:
00008FC6 7200                       		moveq	#0,d1
00008FC8 1232 0000                  		move.b	(a2,d0.w),d1
00008FCC 3028 000C                  		move.w	$C(a0),d0
00008FD0 9041                       		sub.w	d1,d0
00008FD2 7200                       		moveq	#0,d1
00008FD4 1229 0016                  		move.b	$16(a1),d1
00008FD8 9041                       		sub.w	d1,d0
00008FDA 3340 000C                  		move.w	d0,$C(a1)
00008FDE 9468 0008                  		sub.w	8(a0),d2
00008FE2 9569 0008                  		sub.w	d2,8(a1)
00008FE6                            
00008FE6                            locret_856E:
00008FE6 4E75                       		rts	
00008FE8                            ; End of function SlopeObject2
00008FE8                            
00008FE8                            ; ===========================================================================
00008FE8                            ; ---------------------------------------------------------------------------
00008FE8                            ; Collision data for GHZ collapsing ledge
00008FE8                            ; ---------------------------------------------------------------------------
00008FE8                            Obj1A_SlopeData:
00008FE8                            		incbin	misc\ghzledge.bin
00009018                            		even
00009018                            
00009018                            ; ---------------------------------------------------------------------------
00009018                            ; Sprite mappings - GHZ	collapsing ledge
00009018                            ; ---------------------------------------------------------------------------
00009018                            Map_obj1A:
00009018                            	include "_maps\obj1A.asm"
00009018                            ; ---------------------------------------------------------------------------
00009018                            ; Sprite mappings - GHZ	collapsing ledge
00009018                            ; ---------------------------------------------------------------------------
00009018 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
0000901C 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00009020 10                         byte_85A8:	dc.b $10
00009021 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00009026 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000902B E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009030 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009035 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000903A D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000903F F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009044 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009049 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000904E F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009053 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009058 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000905D 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009062 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009067 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000906C 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009071 10                         byte_85F9:	dc.b $10
00009072 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00009077 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000907C E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00009081 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009086 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000908B D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009090 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009095 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000909A F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000909F F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
000090A4 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
000090A9 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000090AE 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
000090B3 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
000090B8 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
000090BD 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000090C2 19                         byte_864A:	dc.b $19
000090C3 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
000090C8 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
000090CD D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
000090D2 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
000090D7 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
000090DC E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
000090E1 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
000090E6 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
000090EB D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000090F0 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
000090F5 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
000090FA F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
000090FF F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009104 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009109 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000910E F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009113 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00009118 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000911D 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009122 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00009127 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000912C 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009131 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00009136 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000913B 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00009140 19                         byte_86C8:	dc.b $19
00009141 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00009146 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000914B D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00009150 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009155 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000915A E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000915F E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009164 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00009169 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000916E D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009173 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009178 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000917D F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009182 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009187 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000918C F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00009191 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00009196 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000919B 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000091A0 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
000091A5 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
000091AA 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
000091AF 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
000091B4 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
000091B9 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000091BE                            		even
000091BE                            		even
000091BE                            
000091BE                            ; ---------------------------------------------------------------------------
000091BE                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
000091BE                            ; ---------------------------------------------------------------------------
000091BE                            Map_obj53:
000091BE                            	include "_maps\obj53.asm"
000091BE                            ; ---------------------------------------------------------------------------
000091BE                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
000091BE                            ; ---------------------------------------------------------------------------
000091BE 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
000091C2 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
000091C6 04                         byte_874E:	dc.b 4
000091C7 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
000091CC 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
000091D1 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
000091D6 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
000091DB 08                         byte_8763:	dc.b 8
000091DC F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
000091E1 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
000091E6 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
000091EB F805 0000 10               		dc.b $F8, 5, 0,	0, $10
000091F0 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
000091F5 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
000091FA 0805 0000 00               		dc.b 8,	5, 0, 0, 0
000091FF 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00009204 04                         byte_878C:	dc.b 4
00009205 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
0000920A 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
0000920F F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00009214 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00009219 08                         byte_87A1:	dc.b 8
0000921A F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000921F F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00009224 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00009229 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
0000922E 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00009233 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00009238 0805 0008 00               		dc.b 8,	5, 0, 8, 0
0000923D 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00009242                            		even
00009242                            		even
00009242                            
00009242                            ; ===========================================================================
00009242                            ; ---------------------------------------------------------------------------
00009242                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00009242                            ; ---------------------------------------------------------------------------
00009242                            
00009242                            Obj1C:					; XREF: Obj_Index
00009242 7000                       		moveq	#0,d0
00009244 1028 0024                  		move.b	$24(a0),d0
00009248 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
0000924C 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00009250                            ; ===========================================================================
00009250 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00009252 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00009254                            ; ===========================================================================
00009254                            
00009254                            Obj1C_Main:				; XREF: Obj1C_Index
00009254 5428 0024                  		addq.b	#2,$24(a0)
00009258 7000                       		moveq	#0,d0
0000925A 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
0000925E C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00009262 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00009266 2159 0004                  		move.l	(a1)+,4(a0)
0000926A 3159 0002                  		move.w	(a1)+,2(a0)
0000926E 0028 0004 0001             		ori.b	#4,1(a0)
00009274 1159 001A                  		move.b	(a1)+,$1A(a0)
00009278 1159 0019                  		move.b	(a1)+,$19(a0)
0000927C 1159 0018                  		move.b	(a1)+,$18(a0)
00009280 1159 0020                  		move.b	(a1)+,$20(a0)
00009284                            
00009284                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00009284 3028 0008                  		move.w	8(a0),d0
00009288 0240 FF80                  		andi.w	#$FF80,d0
0000928C 3238 F700                  		move.w	($FFFFF700).w,d1
00009290 0441 0080                  		subi.w	#$80,d1
00009294 0241 FF80                  		andi.w	#$FF80,d1
00009298 9041                       		sub.w	d1,d0
0000929A 0C40 0280                  		cmpi.w	#$280,d0
0000929E 6200 0000                  		bhi.w	DeleteObject
000092A2 6000 0000                  		bra.w	DisplaySprite
000092A6                            ; ===========================================================================
000092A6                            ; ---------------------------------------------------------------------------
000092A6                            ; Variables for	object $1C are stored in an array
000092A6                            ; ---------------------------------------------------------------------------
000092A6 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
000092AA 44D8                       		dc.w $44D8		; VRAM setting
000092AC 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
000092B0 0000 0000                  		dc.l Map_obj1C
000092B4 44D8                       		dc.w $44D8
000092B6 0008 0200                  		dc.b 0,	8, 2, 0
000092BA 0000 0000                  		dc.l Map_obj1C
000092BE 44D8                       		dc.w $44D8
000092C0 0008 0200                  		dc.b 0,	8, 2, 0
000092C4 0000 83B8                  		dc.l Map_obj11
000092C8 438E                       		dc.w $438E
000092CA 0110 0100                  		dc.b 1,	$10, 1,	0
000092CE                            ; ---------------------------------------------------------------------------
000092CE                            ; Sprite mappings - SLZ	lava thrower
000092CE                            ; ---------------------------------------------------------------------------
000092CE                            Map_obj1C:
000092CE                            	include "_maps\obj1C.asm"
000092CE                            ; ---------------------------------------------------------------------------
000092CE                            ; Sprite mappings - SLZ	lava thrower
000092CE                            ; ---------------------------------------------------------------------------
000092CE 0000                       		dc.w byte_8858-Map_obj1C
000092D0 01                         byte_8858:	dc.b 1
000092D1 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000092D6                            		even
000092D6                            		even
000092D6                            
000092D6                            ; ===========================================================================
000092D6                            ; ---------------------------------------------------------------------------
000092D6                            ; Object 1D - switch that activates when Sonic touches it
000092D6                            ; (this	is not used anywhere in	the game)
000092D6                            ; ---------------------------------------------------------------------------
000092D6                            
000092D6                            Obj1D:					; XREF: Obj_Index
000092D6 7000                       		moveq	#0,d0
000092D8 1028 0024                  		move.b	$24(a0),d0
000092DC 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
000092E0 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
000092E4                            ; ===========================================================================
000092E4 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
000092E6 0000                       		dc.w Obj1D_Action-Obj1D_Index
000092E8 0000                       		dc.w Obj1D_Delete-Obj1D_Index
000092EA                            ; ===========================================================================
000092EA                            
000092EA                            Obj1D_Main:				; XREF: Obj1D_Index
000092EA 5428 0024                  		addq.b	#2,$24(a0)
000092EE 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
000092F6 317C 4000 0002             		move.w	#$4000,2(a0)
000092FC 117C 0004 0001             		move.b	#4,1(a0)
00009302 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00009308 117C 0010 0019             		move.b	#$10,$19(a0)
0000930E 117C 0005 0018             		move.b	#5,$18(a0)
00009314                            
00009314                            Obj1D_Action:				; XREF: Obj1D_Index
00009314 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
0000931A 323C 0010                  		move.w	#$10,d1
0000931E 6100 0000                  		bsr.w	Obj1D_ChkTouch
00009322 6700                       		beq.s	Obj1D_ChkDel
00009324 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00009328 7001                       		moveq	#1,d0
0000932A 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
0000932E                            
0000932E                            Obj1D_ChkDel:
0000932E 6100 0000                  		bsr.w	DisplaySprite
00009332 3028 0008                  		move.w	8(a0),d0
00009336 0240 FF80                  		andi.w	#$FF80,d0
0000933A 3238 F700                  		move.w	($FFFFF700).w,d1
0000933E 0441 0080                  		subi.w	#$80,d1
00009342 0241 FF80                  		andi.w	#$FF80,d1
00009346 9041                       		sub.w	d1,d0
00009348 0C40 0280                  		cmpi.w	#$280,d0
0000934C 6200 0000                  		bhi.w	Obj1D_Delete
00009350 4E75                       		rts	
00009352                            ; ===========================================================================
00009352                            
00009352                            Obj1D_Delete:				; XREF: Obj1D_Index
00009352 6100 0000                  		bsr.w	DeleteObject
00009356 4E75                       		rts	
00009358                            ; ---------------------------------------------------------------------------
00009358                            ; Subroutine to	check if Sonic touches the object
00009358                            ; ---------------------------------------------------------------------------
00009358                            
00009358                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009358                            
00009358                            
00009358                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00009358 43F8 D000                  		lea	($FFFFD000).w,a1
0000935C 3029 0008                  		move.w	8(a1),d0
00009360 9068 0008                  		sub.w	8(a0),d0
00009364 D041                       		add.w	d1,d0
00009366 6B00                       		bmi.s	loc_8918
00009368 D241                       		add.w	d1,d1
0000936A B041                       		cmp.w	d1,d0
0000936C 6400                       		bcc.s	loc_8918
0000936E 3429 000C                  		move.w	$C(a1),d2
00009372 1229 0016                  		move.b	$16(a1),d1
00009376 4881                       		ext.w	d1
00009378 D242                       		add.w	d2,d1
0000937A 3028 000C                  		move.w	$C(a0),d0
0000937E 0440 0010                  		subi.w	#$10,d0
00009382 9041                       		sub.w	d1,d0
00009384 6200                       		bhi.s	loc_8918
00009386 0C40 FFF0                  		cmpi.w	#-$10,d0
0000938A 6500                       		bcs.s	loc_8918
0000938C 70FF                       		moveq	#-1,d0
0000938E 4E75                       		rts	
00009390                            ; ===========================================================================
00009390                            
00009390                            loc_8918:
00009390 7000                       		moveq	#0,d0
00009392 4E75                       		rts	
00009394                            ; End of function Obj1D_ChkTouch
00009394                            
00009394                            ; ===========================================================================
00009394                            ; ---------------------------------------------------------------------------
00009394                            ; Sprite mappings - object 1D
00009394                            ; ---------------------------------------------------------------------------
00009394                            Map_obj1D:
00009394                            	include "_maps\obj1D.asm"
00009394                            ; ---------------------------------------------------------------------------
00009394                            ; Sprite mappings - object 1D
00009394                            ; ---------------------------------------------------------------------------
00009394 0000                       		dc.w byte_891E-Map_obj1D
00009396 04                         byte_891E:	dc.b 4
00009397 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0000939C 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
000093A1 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
000093A6 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
000093AC 00                         		even
000093AC 00                         		even
000093AC                            
000093AC                            ; ===========================================================================
000093AC                            ; ---------------------------------------------------------------------------
000093AC                            ; Object 2A - doors (SBZ)
000093AC                            ; ---------------------------------------------------------------------------
000093AC                            
000093AC                            Obj2A:					; XREF: Obj_Index
000093AC 7000                       		moveq	#0,d0
000093AE 1028 0024                  		move.b	$24(a0),d0
000093B2 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
000093B6 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
000093BA                            ; ===========================================================================
000093BA 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
000093BC 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
000093BE                            ; ===========================================================================
000093BE                            
000093BE                            Obj2A_Main:				; XREF: Obj2A_Index
000093BE 5428 0024                  		addq.b	#2,$24(a0)
000093C2 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
000093CA 317C 42E8 0002             		move.w	#$42E8,2(a0)
000093D0 0028 0004 0001             		ori.b	#4,1(a0)
000093D6 117C 0008 0019             		move.b	#8,$19(a0)
000093DC 117C 0004 0018             		move.b	#4,$18(a0)
000093E2                            
000093E2                            Obj2A_OpenShut:				; XREF: Obj2A_Index
000093E2 323C 0040                  		move.w	#$40,d1
000093E6 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
000093EA 3038 D008                  		move.w	($FFFFD008).w,d0
000093EE D041                       		add.w	d1,d0
000093F0 B068 0008                  		cmp.w	8(a0),d0
000093F4 6500                       		bcs.s	Obj2A_Animate
000093F6 9041                       		sub.w	d1,d0
000093F8 9041                       		sub.w	d1,d0
000093FA B068 0008                  		cmp.w	8(a0),d0
000093FE 6400                       		bcc.s	Obj2A_Animate
00009400 D041                       		add.w	d1,d0
00009402 B068 0008                  		cmp.w	8(a0),d0
00009406 6400                       		bcc.s	loc_899A
00009408 0828 0000 0022             		btst	#0,$22(a0)
0000940E 6600                       		bne.s	Obj2A_Animate
00009410 6000                       		bra.s	Obj2A_Open
00009412                            ; ===========================================================================
00009412                            
00009412                            loc_899A:				; XREF: Obj2A_OpenShut
00009412 0828 0000 0022             		btst	#0,$22(a0)
00009418 6700                       		beq.s	Obj2A_Animate
0000941A                            
0000941A                            Obj2A_Open:				; XREF: Obj2A_OpenShut
0000941A 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00009420                            
00009420                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00009420 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00009426 6100 0000                  		bsr.w	AnimateSprite
0000942A 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
0000942E 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00009430 323C 0011                  		move.w	#$11,d1
00009434 343C 0020                  		move.w	#$20,d2
00009438 3602                       		move.w	d2,d3
0000943A 5243                       		addq.w	#1,d3
0000943C 3828 0008                  		move.w	8(a0),d4
00009440 6100 0000                  		bsr.w	SolidObject
00009444                            
00009444                            Obj2A_MarkAsUsed:
00009444 6000 0000                  		bra.w	MarkObjGone
00009448                            ; ===========================================================================
00009448                            Ani_obj2A:
00009448                            	include "_anim\obj2A.asm"
00009448                            ; ---------------------------------------------------------------------------
00009448                            ; Animation script - doors (SBZ)
00009448                            ; ---------------------------------------------------------------------------
00009448 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
0000944A 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
0000944C 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00009458 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00009464                            		even
00009464                            		even
00009464                            
00009464                            ; ---------------------------------------------------------------------------
00009464                            ; Sprite mappings - doors (SBZ)
00009464                            ; ---------------------------------------------------------------------------
00009464                            Map_obj2A:
00009464                            	include "_maps\obj2A.asm"
00009464                            ; ---------------------------------------------------------------------------
00009464                            ; Sprite mappings - doors (SBZ)
00009464                            ; ---------------------------------------------------------------------------
00009464 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00009468 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
0000946C 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00009470 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00009474 0000                       		dc.w byte_8A56-Map_obj2A
00009476 02                         byte_89FE:	dc.b 2
00009477 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
0000947C 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00009481 02                         byte_8A09:	dc.b 2
00009482 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00009487 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
0000948C 02                         byte_8A14:	dc.b 2
0000948D D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00009492 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00009497 02                         byte_8A1F:	dc.b 2
00009498 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
0000949D 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
000094A2 02                         byte_8A2A:	dc.b 2
000094A3 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
000094A8 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
000094AD 02                         byte_8A35:	dc.b 2
000094AE CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
000094B3 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
000094B8 02                         byte_8A40:	dc.b 2
000094B9 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
000094BE 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
000094C3 02                         byte_8A4B:	dc.b 2
000094C4 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
000094C9 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
000094CE 02                         byte_8A56:	dc.b 2
000094CF C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
000094D4 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
000094DA 00                         		even
000094DA 00                         		even
000094DA                            
000094DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000094DA                            
000094DA                            
000094DA                            Obj44_SolidWall:			; XREF: Obj44_Solid
000094DA 6100 0000                  		bsr.w	Obj44_SolidWall2
000094DE 6700                       		beq.s	loc_8AA8
000094E0 6B00 0000                  		bmi.w	loc_8AC4
000094E4 4A40                       		tst.w	d0
000094E6 6700 0000                  		beq.w	loc_8A92
000094EA 6B00                       		bmi.s	loc_8A7C
000094EC 4A69 0010                  		tst.w	$10(a1)
000094F0 6B00                       		bmi.s	loc_8A92
000094F2 6000                       		bra.s	loc_8A82
000094F4                            ; ===========================================================================
000094F4                            
000094F4                            loc_8A7C:
000094F4 4A69 0010                  		tst.w	$10(a1)
000094F8 6A00                       		bpl.s	loc_8A92
000094FA                            
000094FA                            loc_8A82:
000094FA 9169 0008                  		sub.w	d0,8(a1)
000094FE 337C 0000 0014             		move.w	#0,$14(a1)
00009504 337C 0000 0010             		move.w	#0,$10(a1)
0000950A                            
0000950A                            loc_8A92:
0000950A 0829 0001 0022             		btst	#1,$22(a1)
00009510 6600                       		bne.s	loc_8AB6
00009512 08E9 0005 0022             		bset	#5,$22(a1)
00009518 08E8 0005 0022             		bset	#5,$22(a0)
0000951E 4E75                       		rts	
00009520                            ; ===========================================================================
00009520                            
00009520                            loc_8AA8:
00009520 0828 0005 0022             		btst	#5,$22(a0)
00009526 6700                       		beq.s	locret_8AC2
00009528 337C 0001 001C             		move.w	#1,$1C(a1)
0000952E                            
0000952E                            loc_8AB6:
0000952E 08A8 0005 0022             		bclr	#5,$22(a0)
00009534 08A9 0005 0022             		bclr	#5,$22(a1)
0000953A                            
0000953A                            locret_8AC2:
0000953A 4E75                       		rts	
0000953C                            ; ===========================================================================
0000953C                            
0000953C                            loc_8AC4:
0000953C 4A69 0012                  		tst.w	$12(a1)
00009540 6A00                       		bpl.s	locret_8AD8
00009542 4A43                       		tst.w	d3
00009544 6A00                       		bpl.s	locret_8AD8
00009546 9769 000C                  		sub.w	d3,$C(a1)
0000954A 337C 0000 0012             		move.w	#0,$12(a1)
00009550                            
00009550                            locret_8AD8:
00009550 4E75                       		rts	
00009552                            ; End of function Obj44_SolidWall
00009552                            
00009552                            
00009552                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009552                            
00009552                            
00009552                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00009552 43F8 D000                  		lea	($FFFFD000).w,a1
00009556 3029 0008                  		move.w	8(a1),d0
0000955A 9068 0008                  		sub.w	8(a0),d0
0000955E D041                       		add.w	d1,d0
00009560 6B00                       		bmi.s	loc_8B48
00009562 3601                       		move.w	d1,d3
00009564 D643                       		add.w	d3,d3
00009566 B043                       		cmp.w	d3,d0
00009568 6200                       		bhi.s	loc_8B48
0000956A 1629 0016                  		move.b	$16(a1),d3
0000956E 4883                       		ext.w	d3
00009570 D443                       		add.w	d3,d2
00009572 3629 000C                  		move.w	$C(a1),d3
00009576 9668 000C                  		sub.w	$C(a0),d3
0000957A D642                       		add.w	d2,d3
0000957C 6B00                       		bmi.s	loc_8B48
0000957E 3802                       		move.w	d2,d4
00009580 D844                       		add.w	d4,d4
00009582 B644                       		cmp.w	d4,d3
00009584 6400                       		bcc.s	loc_8B48
00009586 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000958A 6B00                       		bmi.s	loc_8B48
0000958C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00009592 6400                       		bcc.s	loc_8B48
00009594 4A78 FE08                  		tst.w	($FFFFFE08).w
00009598 6600                       		bne.s	loc_8B48
0000959A 3A00                       		move.w	d0,d5
0000959C B240                       		cmp.w	d0,d1
0000959E 6400                       		bcc.s	loc_8B30
000095A0 D241                       		add.w	d1,d1
000095A2 9041                       		sub.w	d1,d0
000095A4 3A00                       		move.w	d0,d5
000095A6 4445                       		neg.w	d5
000095A8                            
000095A8                            loc_8B30:
000095A8 3203                       		move.w	d3,d1
000095AA B443                       		cmp.w	d3,d2
000095AC 6400                       		bcc.s	loc_8B3C
000095AE 9644                       		sub.w	d4,d3
000095B0 3203                       		move.w	d3,d1
000095B2 4441                       		neg.w	d1
000095B4                            
000095B4                            loc_8B3C:
000095B4 BA41                       		cmp.w	d1,d5
000095B6 6200                       		bhi.s	loc_8B44
000095B8 7801                       		moveq	#1,d4
000095BA 4E75                       		rts	
000095BC                            ; ===========================================================================
000095BC                            
000095BC                            loc_8B44:
000095BC 78FF                       		moveq	#-1,d4
000095BE 4E75                       		rts	
000095C0                            ; ===========================================================================
000095C0                            
000095C0                            loc_8B48:
000095C0 7800                       		moveq	#0,d4
000095C2 4E75                       		rts	
000095C4                            ; End of function Obj44_SolidWall2
000095C4                            
000095C4                            ; ===========================================================================
000095C4                            ; ---------------------------------------------------------------------------
000095C4                            ; Object 1E - Ball Hog enemy (SBZ)
000095C4                            ; ---------------------------------------------------------------------------
000095C4                            
000095C4                            Obj1E:					; XREF: Obj_Index
000095C4 7000                       		moveq	#0,d0
000095C6 1028 0024                  		move.b	$24(a0),d0
000095CA 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
000095CE 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
000095D2                            ; ===========================================================================
000095D2 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
000095D4 0000                       		dc.w Obj1E_Action-Obj1E_Index
000095D6                            ; ===========================================================================
000095D6                            
000095D6                            Obj1E_Main:				; XREF: Obj1E_Index
000095D6 117C 0013 0016             		move.b	#$13,$16(a0)
000095DC 117C 0008 0017             		move.b	#8,$17(a0)
000095E2 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
000095EA 317C 2302 0002             		move.w	#$2302,2(a0)
000095F0 117C 0004 0001             		move.b	#4,1(a0)
000095F6 117C 0004 0018             		move.b	#4,$18(a0)
000095FC 117C 0005 0020             		move.b	#5,$20(a0)
00009602 117C 000C 0019             		move.b	#$C,$19(a0)
00009608 6100 0000                  		bsr.w	ObjectFall
0000960C 4EB9 0000 0000             		jsr	ObjHitFloor
00009612 4A41                       		tst.w	d1
00009614 6A00                       		bpl.s	locret_8BAC
00009616 D368 000C                  		add.w	d1,$C(a0)
0000961A 317C 0000 0012             		move.w	#0,$12(a0)
00009620 5428 0024                  		addq.b	#2,$24(a0)
00009624                            
00009624                            locret_8BAC:
00009624 4E75                       		rts	
00009626                            ; ===========================================================================
00009626                            
00009626                            Obj1E_Action:				; XREF: Obj1E_Index
00009626 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
0000962C 6100 0000                  		bsr.w	AnimateSprite
00009630 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00009636 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00009638 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
0000963C 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
0000963E 6000                       		bra.s	Obj1E_MarkAsGone
00009640                            ; ===========================================================================
00009640                            
00009640                            Obj1E_SetBall:				; XREF: Obj1E_Action
00009640 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00009644                            
00009644                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00009644 6000 0000                  		bra.w	MarkObjGone
00009648                            ; ===========================================================================
00009648                            
00009648                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00009648 117C 0001 0032             		move.b	#1,$32(a0)
0000964E 6100 0000                  		bsr.w	SingleObjLoad
00009652 6600                       		bne.s	loc_8C1A
00009654 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00009658 3368 0008 0008             		move.w	8(a0),8(a1)
0000965E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009664 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
0000966A 337C 0000 0012             		move.w	#0,$12(a1)
00009670 70FC                       		moveq	#-4,d0
00009672 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00009678 6700                       		beq.s	loc_8C0A	; if not, branch
0000967A 4440                       		neg.w	d0
0000967C 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
00009680                            
00009680                            loc_8C0A:
00009680 D169 0008                  		add.w	d0,8(a1)
00009684 0669 000C 000C             		addi.w	#$C,$C(a1)
0000968A 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
00009690                            
00009690                            loc_8C1A:
00009690 60B2                       		bra.s	Obj1E_MarkAsGone
00009692                            ; ===========================================================================
00009692                            ; ---------------------------------------------------------------------------
00009692                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00009692                            ; ---------------------------------------------------------------------------
00009692                            
00009692                            Obj20:					; XREF: Obj_Index
00009692 7000                       		moveq	#0,d0
00009694 1028 0024                  		move.b	$24(a0),d0
00009698 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
0000969C 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
000096A0                            ; ===========================================================================
000096A0 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
000096A2 0000                       		dc.w Obj20_Bounce-Obj20_Index
000096A4                            ; ===========================================================================
000096A4                            
000096A4                            Obj20_Main:				; XREF: Obj20_Index
000096A4 5428 0024                  		addq.b	#2,$24(a0)
000096A8 117C 0007 0016             		move.b	#7,$16(a0)
000096AE 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
000096B6 317C 2302 0002             		move.w	#$2302,2(a0)
000096BC 117C 0004 0001             		move.b	#4,1(a0)
000096C2 117C 0003 0018             		move.b	#3,$18(a0)
000096C8 117C 0087 0020             		move.b	#$87,$20(a0)
000096CE 117C 0008 0019             		move.b	#8,$19(a0)
000096D4 7000                       		moveq	#0,d0
000096D6 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
000096DA C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
000096DE 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
000096E2 117C 0004 001A             		move.b	#4,$1A(a0)
000096E8                            
000096E8                            Obj20_Bounce:				; XREF: Obj20_Index
000096E8 4EB9 0000 0000             		jsr	ObjectFall
000096EE 4A68 0012                  		tst.w	$12(a0)
000096F2 6B00                       		bmi.s	Obj20_ChkExplode
000096F4 4EB9 0000 0000             		jsr	ObjHitFloor
000096FA 4A41                       		tst.w	d1
000096FC 6A00                       		bpl.s	Obj20_ChkExplode
000096FE D368 000C                  		add.w	d1,$C(a0)
00009702 317C FD00 0012             		move.w	#-$300,$12(a0)
00009708 4A03                       		tst.b	d3
0000970A 6700                       		beq.s	Obj20_ChkExplode
0000970C 6B00                       		bmi.s	loc_8CA4
0000970E 4A68 0010                  		tst.w	$10(a0)
00009712 6A00                       		bpl.s	Obj20_ChkExplode
00009714 4468 0010                  		neg.w	$10(a0)
00009718 6000                       		bra.s	Obj20_ChkExplode
0000971A                            ; ===========================================================================
0000971A                            
0000971A                            loc_8CA4:				; XREF: Obj20_Bounce
0000971A 4A68 0010                  		tst.w	$10(a0)
0000971E 6B00                       		bmi.s	Obj20_ChkExplode
00009720 4468 0010                  		neg.w	$10(a0)
00009724                            
00009724                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
00009724 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
00009728 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
0000972A 10BC 0024                  		move.b	#$24,0(a0)
0000972E 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00009732 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00009738 6000 0000                  		bra.w	Obj3F		; jump to explosion code
0000973C                            ; ===========================================================================
0000973C                            
0000973C                            Obj20_Animate:				; XREF: Obj20_ChkExplode
0000973C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009740 6A00                       		bpl.s	Obj20_Display
00009742 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00009748 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0000974E                            
0000974E                            Obj20_Display:
0000974E 6100 0000                  		bsr.w	DisplaySprite
00009752 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009756 0640 00E0                  		addi.w	#$E0,d0
0000975A B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
0000975E 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00009762 4E75                       		rts	
00009764                            ; ===========================================================================
00009764                            ; ---------------------------------------------------------------------------
00009764                            ; Object 24 - explosion	from a destroyed monitor
00009764                            ; ---------------------------------------------------------------------------
00009764                            
00009764                            Obj24:					; XREF: Obj_Index
00009764 7000                       		moveq	#0,d0
00009766 1028 0024                  		move.b	$24(a0),d0
0000976A 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
0000976E 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00009772                            ; ===========================================================================
00009772 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
00009774 0000                       		dc.w Obj24_Animate-Obj24_Index
00009776                            ; ===========================================================================
00009776                            
00009776                            Obj24_Main:				; XREF: Obj24_Index
00009776 5428 0024                  		addq.b	#2,$24(a0)
0000977A 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00009782 317C 041C 0002             		move.w	#$41C,2(a0)
00009788 117C 0004 0001             		move.b	#4,1(a0)
0000978E 117C 0001 0018             		move.b	#1,$18(a0)
00009794 117C 0000 0020             		move.b	#0,$20(a0)
0000979A 117C 000C 0019             		move.b	#$C,$19(a0)
000097A0 117C 0009 001E             		move.b	#9,$1E(a0)
000097A6 117C 0000 001A             		move.b	#0,$1A(a0)
000097AC 303C 00A5                  		move.w	#$A5,d0
000097B0 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play explosion sound
000097B6                            
000097B6                            Obj24_Animate:				; XREF: Obj24_Index
000097B6 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000097BA 6A00                       		bpl.s	Obj24_Display
000097BC 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
000097C2 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
000097C6 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
000097CC 6700 0000                  		beq.w	DeleteObject	; if yes, branch
000097D0                            
000097D0                            Obj24_Display:
000097D0 6000 0000                  		bra.w	DisplaySprite
000097D4                            ; ===========================================================================
000097D4                            ; ---------------------------------------------------------------------------
000097D4                            ; Object 27 - explosion	from a destroyed enemy
000097D4                            ; ---------------------------------------------------------------------------
000097D4                            
000097D4                            Obj27:					; XREF: Obj_Index
000097D4 7000                       		moveq	#0,d0
000097D6 1028 0024                  		move.b	$24(a0),d0
000097DA 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
000097DE 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
000097E2                            ; ===========================================================================
000097E2 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
000097E4 0000                       		dc.w Obj27_Main-Obj27_Index
000097E6 0000                       		dc.w Obj27_Animate-Obj27_Index
000097E8                            ; ===========================================================================
000097E8                            
000097E8                            Obj27_LoadAnimal:			; XREF: Obj27_Index
000097E8 5428 0024                  		addq.b	#2,$24(a0)
000097EC 6100 0000                  		bsr.w	SingleObjLoad
000097F0 6600                       		bne.s	Obj27_Main
000097F2 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
000097F6 3368 0008 0008             		move.w	8(a0),8(a1)
000097FC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009802 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
00009808                            
00009808                            Obj27_Main:				; XREF: Obj27_Index
00009808 5428 0024                  		addq.b	#2,$24(a0)
0000980C 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
00009814 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000981A 117C 0004 0001             		move.b	#4,1(a0)
00009820 117C 0001 0018             		move.b	#1,$18(a0)
00009826 117C 0000 0020             		move.b	#0,$20(a0)
0000982C 117C 000C 0019             		move.b	#$C,$19(a0)
00009832 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009838 117C 0000 001A             		move.b	#0,$1A(a0)
0000983E 303C 00C1                  		move.w	#$C1,d0
00009842 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00009848                            
00009848                            Obj27_Animate:				; XREF: Obj27_Index
00009848 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000984C 6A00                       		bpl.s	Obj27_Display
0000984E 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009854 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009858 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
0000985E 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009862                            
00009862                            Obj27_Display:
00009862 6000 0000                  		bra.w	DisplaySprite
00009866                            ; ===========================================================================
00009866                            ; ---------------------------------------------------------------------------
00009866                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00009866                            ; ---------------------------------------------------------------------------
00009866                            
00009866                            Obj3F:					; XREF: Obj_Index
00009866 7000                       		moveq	#0,d0
00009868 1028 0024                  		move.b	$24(a0),d0
0000986C 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
00009870 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00009874                            ; ===========================================================================
00009874 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00009876 FFD4                       		dc.w Obj27_Animate-Obj3F_Index
00009878                            ; ===========================================================================
00009878                            
00009878                            Obj3F_Main:				; XREF: Obj3F_Index
00009878 5428 0024                  		addq.b	#2,$24(a0)
0000987C 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
00009884 317C 05A0 0002             		move.w	#$5A0,2(a0)
0000988A 117C 0004 0001             		move.b	#4,1(a0)
00009890 117C 0001 0018             		move.b	#1,$18(a0)
00009896 117C 0000 0020             		move.b	#0,$20(a0)
0000989C 117C 000C 0019             		move.b	#$C,$19(a0)
000098A2 117C 0007 001E             		move.b	#7,$1E(a0)
000098A8 117C 0000 001A             		move.b	#0,$1A(a0)
000098AE 303C 00C4                  		move.w	#$C4,d0
000098B2 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
000098B8                            ; ===========================================================================
000098B8                            Ani_obj1E:
000098B8                            	include "_anim\obj1E.asm"
000098B8                            ; ---------------------------------------------------------------------------
000098B8                            ; Animation script - doors (SBZ)
000098B8                            ; ---------------------------------------------------------------------------
000098B8 0000                       		dc.w byte_8E4A-Ani_obj1E
000098BA 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
000098D2 00                         		even
000098D2 00                         		even
000098D2                            
000098D2                            ; ---------------------------------------------------------------------------
000098D2                            ; Sprite mappings - Ball Hog enemy (SBZ)
000098D2                            ; ---------------------------------------------------------------------------
000098D2                            Map_obj1E:
000098D2                            	include "_maps\obj1E.asm"
000098D2                            ; ---------------------------------------------------------------------------
000098D2                            ; Sprite mappings - Ball Hog enemy (SBZ)
000098D2                            ; ---------------------------------------------------------------------------
000098D2 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
000098D6 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
000098DA 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
000098DE 02                         byte_8E6E:	dc.b 2
000098DF EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
000098E4 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
000098E9 02                         byte_8E79:	dc.b 2
000098EA EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
000098EF FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
000098F4 02                         byte_8E84:	dc.b 2
000098F5 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
000098FA 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
000098FF 02                         byte_8E8F:	dc.b 2
00009900 E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
00009905 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
0000990A 01                         byte_8E9A:	dc.b 1
0000990B F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
00009910 01                         byte_8EA0:	dc.b 1
00009911 F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
00009916                            		even
00009916                            		even
00009916                            
00009916                            ; ---------------------------------------------------------------------------
00009916                            ; Sprite mappings - explosion
00009916                            ; ---------------------------------------------------------------------------
00009916                            Map_obj24:
00009916                            	include "_maps\obj24.asm"
00009916                            ; ---------------------------------------------------------------------------
00009916                            ; Sprite mappings - explosion
00009916                            ; ---------------------------------------------------------------------------
00009916 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
0000991A 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
0000991E 01                         byte_8EAE:	dc.b 1
0000991F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00009924 01                         byte_8EB4:	dc.b 1
00009925 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000992A 01                         byte_8EBA:	dc.b 1
0000992B F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00009930 01                         byte_8EC0:	dc.b 1
00009931 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
00009936                            		even
00009936                            		even
00009936                            
00009936                            ; ---------------------------------------------------------------------------
00009936                            ; Sprite mappings - explosion
00009936                            ; ---------------------------------------------------------------------------
00009936 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
0000993A 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
0000993E 0000                       		dc.w byte_8EF7-Map_obj27
00009940 01                         byte_8ED0:	dc.b 1
00009941 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
00009946 01                         byte_8ED6:	dc.b 1
00009947 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000994C 01                         byte_8EDC:	dc.b 1
0000994D F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
00009952 04                         byte_8EE2:	dc.b 4
00009953 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00009958 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000995D 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00009962 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00009967 04                         byte_8EF7:	dc.b 4
00009968 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000996D EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00009972 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00009977 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000997C                            		even
0000997C                            ; ---------------------------------------------------------------------------
0000997C                            ; Sprite mappings - explosion from when	a boss is destroyed
0000997C                            ; ---------------------------------------------------------------------------
0000997C FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
0000997E 0000                       		dc.w byte_8F16-Map_obj3F
00009980 0000                       		dc.w byte_8F1C-Map_obj3F
00009982 FFD6                       		dc.w byte_8EE2-Map_obj3F
00009984 FFEB                       		dc.w byte_8EF7-Map_obj3F
00009986 01                         byte_8F16:	dc.b 1
00009987 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000998C 01                         byte_8F1C:	dc.b 1
0000998D F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
00009992                            		even
00009992                            ; ===========================================================================
00009992                            ; ---------------------------------------------------------------------------
00009992                            ; Object 28 - animals
00009992                            ; ---------------------------------------------------------------------------
00009992                            
00009992                            Obj28:					; XREF: Obj_Index
00009992 7000                       		moveq	#0,d0
00009994 1028 0024                  		move.b	$24(a0),d0
00009998 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
0000999C 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
000099A0                            ; ===========================================================================
000099A0 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
000099A4 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000099A8 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
000099AC 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000099B0 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
000099B4 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
000099B8 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
000099BC 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000099C0 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000099C4 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
000099C8 0000                       		dc.w loc_92D6-Obj28_Index
000099CA                            
000099CA 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
000099D6                            
000099D6 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
000099DA 0000 0000                  		dc.l Map_obj28
000099DE FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
000099E2 0000 0000                  		dc.l Map_obj28a		; mappings address
000099E6 FE80 FD00                  		dc.w $FE80, $FD00
000099EA 0000 0000                  		dc.l Map_obj28
000099EE FEC0 FE80                  		dc.w $FEC0, $FE80
000099F2 0000 0000                  		dc.l Map_obj28a
000099F6 FE40 FD00                  		dc.w $FE40, $FD00
000099FA 0000 0000                  		dc.l Map_obj28b
000099FE FD00 FC00                  		dc.w $FD00, $FC00
00009A02 0000 0000                  		dc.l Map_obj28a
00009A06 FD80 FC80                  		dc.w $FD80, $FC80
00009A0A 0000 0000                  		dc.l Map_obj28b
00009A0E                            
00009A0E FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
00009A1E FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
00009A2E FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
00009A3A                            
00009A3A 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
00009A4E 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00009A62 0000 0000                  		dc.l Map_obj28b
00009A66                            
00009A66 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
00009A78 0565 05B3                  		dc.w $565, $5B3
00009A7C                            ; ===========================================================================
00009A7C                            
00009A7C                            Obj28_Ending:				; XREF: Obj28_Index
00009A7C 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
00009A80 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
00009A84 7000                       		moveq	#0,d0
00009A86 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009A8A D040                       		add.w	d0,d0		; multiply d0 by 2
00009A8C 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
00009A90 0440 0014                  		subi.w	#$14,d0
00009A94 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
00009A9A D040                       		add.w	d0,d0
00009A9C 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
00009AA2 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
00009AA6 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
00009AAC 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
00009AB2 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
00009AB8 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
00009ABE 117C 000C 0016             		move.b	#$C,$16(a0)
00009AC4 117C 0004 0001             		move.b	#4,1(a0)
00009ACA 08E8 0000 0001             		bset	#0,1(a0)
00009AD0 117C 0006 0018             		move.b	#6,$18(a0)
00009AD6 117C 0008 0019             		move.b	#8,$19(a0)
00009ADC 117C 0007 001E             		move.b	#7,$1E(a0)
00009AE2 6000 0000                  		bra.w	DisplaySprite
00009AE6                            ; ===========================================================================
00009AE6                            
00009AE6                            Obj28_FromEnemy:			; XREF: Obj28_Ending
00009AE6 5428 0024                  		addq.b	#2,$24(a0)
00009AEA 6100 98C2                  		bsr.w	RandomNumber
00009AEE 0240 0001                  		andi.w	#1,d0
00009AF2 7200                       		moveq	#0,d1
00009AF4 1238 FE10                  		move.b	($FFFFFE10).w,d1
00009AF8 D241                       		add.w	d1,d1
00009AFA D240                       		add.w	d0,d1
00009AFC 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
00009B00 1031 1000                  		move.b	(a1,d1.w),d0
00009B04 1140 0030                  		move.b	d0,$30(a0)
00009B08 E748                       		lsl.w	#3,d0
00009B0A 43FA FECA                  		lea	Obj28_Variables(pc),a1
00009B0E D2C0                       		adda.w	d0,a1
00009B10 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
00009B14 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
00009B18 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
00009B1C 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
00009B22 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
00009B28 6700                       		beq.s	loc_90C0	; if yes, branch
00009B2A 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
00009B30                            
00009B30                            loc_90C0:
00009B30 117C 000C 0016             		move.b	#$C,$16(a0)
00009B36 117C 0004 0001             		move.b	#4,1(a0)
00009B3C 08E8 0000 0001             		bset	#0,1(a0)
00009B42 117C 0006 0018             		move.b	#6,$18(a0)
00009B48 117C 0008 0019             		move.b	#8,$19(a0)
00009B4E 117C 0007 001E             		move.b	#7,$1E(a0)
00009B54 117C 0002 001A             		move.b	#2,$1A(a0)
00009B5A 317C FC00 0012             		move.w	#-$400,$12(a0)
00009B60 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009B64 6600                       		bne.s	loc_911C
00009B66 6100 0000                  		bsr.w	SingleObjLoad
00009B6A 6600                       		bne.s	Obj28_Display
00009B6C 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00009B70 3368 0008 0008             		move.w	8(a0),8(a1)
00009B76 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009B7C 3028 003E                  		move.w	$3E(a0),d0
00009B80 E248                       		lsr.w	#1,d0
00009B82 1340 001A                  		move.b	d0,$1A(a1)
00009B86                            
00009B86                            Obj28_Display:
00009B86 6000 0000                  		bra.w	DisplaySprite
00009B8A                            ; ===========================================================================
00009B8A                            
00009B8A                            loc_911C:
00009B8A 117C 0012 0024             		move.b	#$12,$24(a0)
00009B90 4268 0010                  		clr.w	$10(a0)
00009B94 6000 0000                  		bra.w	DisplaySprite
00009B98                            ; ===========================================================================
00009B98                            
00009B98                            loc_912A:				; XREF: Obj28_Index
00009B98 4A28 0001                  		tst.b	1(a0)
00009B9C 6A00 0000                  		bpl.w	DeleteObject
00009BA0 6100 0000                  		bsr.w	ObjectFall
00009BA4 4A68 0012                  		tst.w	$12(a0)
00009BA8 6B00                       		bmi.s	loc_9180
00009BAA 4EB9 0000 0000             		jsr	ObjHitFloor
00009BB0 4A41                       		tst.w	d1
00009BB2 6A00                       		bpl.s	loc_9180
00009BB4 D368 000C                  		add.w	d1,$C(a0)
00009BB8 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009BBE 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009BC4 117C 0001 001A             		move.b	#1,$1A(a0)
00009BCA 1028 0030                  		move.b	$30(a0),d0
00009BCE D000                       		add.b	d0,d0
00009BD0 5800                       		addq.b	#4,d0
00009BD2 1140 0024                  		move.b	d0,$24(a0)
00009BD6 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009BDA 6700                       		beq.s	loc_9180
00009BDC 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009BE2 6700                       		beq.s	loc_9180
00009BE4 4468 0010                  		neg.w	$10(a0)
00009BE8 0868 0000 0001             		bchg	#0,1(a0)
00009BEE                            
00009BEE                            loc_9180:
00009BEE 6000 0000                  		bra.w	DisplaySprite
00009BF2                            ; ===========================================================================
00009BF2                            
00009BF2                            loc_9184:				; XREF: Obj28_Index
00009BF2 6100 0000                  		bsr.w	ObjectFall
00009BF6 117C 0001 001A             		move.b	#1,$1A(a0)
00009BFC 4A68 0012                  		tst.w	$12(a0)
00009C00 6B00                       		bmi.s	loc_91AE
00009C02 117C 0000 001A             		move.b	#0,$1A(a0)
00009C08 4EB9 0000 0000             		jsr	ObjHitFloor
00009C0E 4A41                       		tst.w	d1
00009C10 6A00                       		bpl.s	loc_91AE
00009C12 D368 000C                  		add.w	d1,$C(a0)
00009C16 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009C1C                            
00009C1C                            loc_91AE:
00009C1C 4A28 0028                  		tst.b	$28(a0)
00009C20 6600                       		bne.s	loc_9224
00009C22 4A28 0001                  		tst.b	1(a0)
00009C26 6A00 0000                  		bpl.w	DeleteObject
00009C2A 6000 0000                  		bra.w	DisplaySprite
00009C2E                            ; ===========================================================================
00009C2E                            
00009C2E                            loc_91C0:				; XREF: Obj28_Index
00009C2E 6100 0000                  		bsr.w	SpeedToPos
00009C32 0668 0018 0012             		addi.w	#$18,$12(a0)
00009C38 4A68 0012                  		tst.w	$12(a0)
00009C3C 6B00                       		bmi.s	loc_91FC
00009C3E 4EB9 0000 0000             		jsr	ObjHitFloor
00009C44 4A41                       		tst.w	d1
00009C46 6A00                       		bpl.s	loc_91FC
00009C48 D368 000C                  		add.w	d1,$C(a0)
00009C4C 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009C52 4A28 0028                  		tst.b	$28(a0)
00009C56 6700                       		beq.s	loc_91FC
00009C58 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
00009C5E 6700                       		beq.s	loc_91FC
00009C60 4468 0010                  		neg.w	$10(a0)
00009C64 0868 0000 0001             		bchg	#0,1(a0)
00009C6A                            
00009C6A                            loc_91FC:
00009C6A 5328 001E                  		subq.b	#1,$1E(a0)
00009C6E 6A00                       		bpl.s	loc_9212
00009C70 117C 0001 001E             		move.b	#1,$1E(a0)
00009C76 5228 001A                  		addq.b	#1,$1A(a0)
00009C7A 0228 0001 001A             		andi.b	#1,$1A(a0)
00009C80                            
00009C80                            loc_9212:
00009C80 4A28 0028                  		tst.b	$28(a0)
00009C84 6600                       		bne.s	loc_9224
00009C86 4A28 0001                  		tst.b	1(a0)
00009C8A 6A00 0000                  		bpl.w	DeleteObject
00009C8E 6000 0000                  		bra.w	DisplaySprite
00009C92                            ; ===========================================================================
00009C92                            
00009C92                            loc_9224:				; XREF: Obj28_Index
00009C92 3028 0008                  		move.w	8(a0),d0
00009C96 9078 D008                  		sub.w	($FFFFD008).w,d0
00009C9A 6500                       		bcs.s	loc_923C
00009C9C 0440 0180                  		subi.w	#$180,d0
00009CA0 6A00                       		bpl.s	loc_923C
00009CA2 4A28 0001                  		tst.b	1(a0)
00009CA6 6A00 0000                  		bpl.w	DeleteObject
00009CAA                            
00009CAA                            loc_923C:
00009CAA 6000 0000                  		bra.w	DisplaySprite
00009CAE                            ; ===========================================================================
00009CAE                            
00009CAE                            loc_9240:				; XREF: Obj28_Index
00009CAE 4A28 0001                  		tst.b	1(a0)
00009CB2 6A00 0000                  		bpl.w	DeleteObject
00009CB6 5368 0036                  		subq.w	#1,$36(a0)
00009CBA 6600 0000                  		bne.w	loc_925C
00009CBE 117C 0002 0024             		move.b	#2,$24(a0)
00009CC4 117C 0003 0018             		move.b	#3,$18(a0)
00009CCA                            
00009CCA                            loc_925C:
00009CCA 6000 0000                  		bra.w	DisplaySprite
00009CCE                            ; ===========================================================================
00009CCE                            
00009CCE                            loc_9260:				; XREF: Obj28_Index
00009CCE 6100 0000                  		bsr.w	sub_9404
00009CD2 6400                       		bcc.s	loc_927C
00009CD4 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009CDA 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009CE0 117C 000E 0024             		move.b	#$E,$24(a0)
00009CE6 6000 FF46                  		bra.w	loc_91C0
00009CEA                            ; ===========================================================================
00009CEA                            
00009CEA                            loc_927C:
00009CEA 6000 FFA6                  		bra.w	loc_9224
00009CEE                            ; ===========================================================================
00009CEE                            
00009CEE                            loc_9280:				; XREF: Obj28_Index
00009CEE 6100 0000                  		bsr.w	sub_9404
00009CF2 6A00                       		bpl.s	loc_92B6
00009CF4 4268 0010                  		clr.w	$10(a0)
00009CF8 4268 0032                  		clr.w	$32(a0)
00009CFC 6100 0000                  		bsr.w	SpeedToPos
00009D00 0668 0018 0012             		addi.w	#$18,$12(a0)
00009D06 6100 0000                  		bsr.w	loc_93C4
00009D0A 6100 0000                  		bsr.w	loc_93EC
00009D0E 5328 001E                  		subq.b	#1,$1E(a0)
00009D12 6A00                       		bpl.s	loc_92B6
00009D14 117C 0001 001E             		move.b	#1,$1E(a0)
00009D1A 5228 001A                  		addq.b	#1,$1A(a0)
00009D1E 0228 0001 001A             		andi.b	#1,$1A(a0)
00009D24                            
00009D24                            loc_92B6:
00009D24 6000 FF6C                  		bra.w	loc_9224
00009D28                            ; ===========================================================================
00009D28                            
00009D28                            loc_92BA:				; XREF: Obj28_Index
00009D28 6100 0000                  		bsr.w	sub_9404
00009D2C 6A00                       		bpl.s	loc_9310
00009D2E 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009D34 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009D3A 117C 0004 0024             		move.b	#4,$24(a0)
00009D40 6000 FEB0                  		bra.w	loc_9184
00009D44                            ; ===========================================================================
00009D44                            
00009D44                            loc_92D6:				; XREF: Obj28_Index
00009D44 6100 0000                  		bsr.w	ObjectFall
00009D48 117C 0001 001A             		move.b	#1,$1A(a0)
00009D4E 4A68 0012                  		tst.w	$12(a0)
00009D52 6B00                       		bmi.s	loc_9310
00009D54 117C 0000 001A             		move.b	#0,$1A(a0)
00009D5A 4EB9 0000 0000             		jsr	ObjHitFloor
00009D60 4A41                       		tst.w	d1
00009D62 6A00                       		bpl.s	loc_9310
00009D64 4628 0029                  		not.b	$29(a0)
00009D68 6600                       		bne.s	loc_9306
00009D6A 4468 0010                  		neg.w	$10(a0)
00009D6E 0868 0000 0001             		bchg	#0,1(a0)
00009D74                            
00009D74                            loc_9306:
00009D74 D368 000C                  		add.w	d1,$C(a0)
00009D78 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009D7E                            
00009D7E                            loc_9310:
00009D7E 6000 FF12                  		bra.w	loc_9224
00009D82                            ; ===========================================================================
00009D82                            
00009D82                            loc_9314:				; XREF: Obj28_Index
00009D82 6100 0000                  		bsr.w	sub_9404
00009D86 6A00                       		bpl.s	loc_932E
00009D88 4268 0010                  		clr.w	$10(a0)
00009D8C 4268 0032                  		clr.w	$32(a0)
00009D90 6100 0000                  		bsr.w	ObjectFall
00009D94 6100 0000                  		bsr.w	loc_93C4
00009D98 6100 0000                  		bsr.w	loc_93EC
00009D9C                            
00009D9C                            loc_932E:
00009D9C 6000 FEF4                  		bra.w	loc_9224
00009DA0                            ; ===========================================================================
00009DA0                            
00009DA0                            loc_9332:				; XREF: Obj28_Index
00009DA0 6100 0000                  		bsr.w	sub_9404
00009DA4 6A00                       		bpl.s	loc_936C
00009DA6 6100 0000                  		bsr.w	ObjectFall
00009DAA 117C 0001 001A             		move.b	#1,$1A(a0)
00009DB0 4A68 0012                  		tst.w	$12(a0)
00009DB4 6B00                       		bmi.s	loc_936C
00009DB6 117C 0000 001A             		move.b	#0,$1A(a0)
00009DBC 4EB9 0000 0000             		jsr	ObjHitFloor
00009DC2 4A41                       		tst.w	d1
00009DC4 6A00                       		bpl.s	loc_936C
00009DC6 4468 0010                  		neg.w	$10(a0)
00009DCA 0868 0000 0001             		bchg	#0,1(a0)
00009DD0 D368 000C                  		add.w	d1,$C(a0)
00009DD4 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009DDA                            
00009DDA                            loc_936C:
00009DDA 6000 FEB6                  		bra.w	loc_9224
00009DDE                            ; ===========================================================================
00009DDE                            
00009DDE                            loc_9370:				; XREF: Obj28_Index
00009DDE 6100 0000                  		bsr.w	sub_9404
00009DE2 6A00                       		bpl.s	loc_93C0
00009DE4 6100 0000                  		bsr.w	SpeedToPos
00009DE8 0668 0018 0012             		addi.w	#$18,$12(a0)
00009DEE 4A68 0012                  		tst.w	$12(a0)
00009DF2 6B00                       		bmi.s	loc_93AA
00009DF4 4EB9 0000 0000             		jsr	ObjHitFloor
00009DFA 4A41                       		tst.w	d1
00009DFC 6A00                       		bpl.s	loc_93AA
00009DFE 4628 0029                  		not.b	$29(a0)
00009E02 6600                       		bne.s	loc_93A0
00009E04 4468 0010                  		neg.w	$10(a0)
00009E08 0868 0000 0001             		bchg	#0,1(a0)
00009E0E                            
00009E0E                            loc_93A0:
00009E0E D368 000C                  		add.w	d1,$C(a0)
00009E12 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009E18                            
00009E18                            loc_93AA:
00009E18 5328 001E                  		subq.b	#1,$1E(a0)
00009E1C 6A00                       		bpl.s	loc_93C0
00009E1E 117C 0001 001E             		move.b	#1,$1E(a0)
00009E24 5228 001A                  		addq.b	#1,$1A(a0)
00009E28 0228 0001 001A             		andi.b	#1,$1A(a0)
00009E2E                            
00009E2E                            loc_93C0:
00009E2E 6000 FE62                  		bra.w	loc_9224
00009E32                            ; ===========================================================================
00009E32                            
00009E32                            loc_93C4:
00009E32 117C 0001 001A             		move.b	#1,$1A(a0)
00009E38 4A68 0012                  		tst.w	$12(a0)
00009E3C 6B00                       		bmi.s	locret_93EA
00009E3E 117C 0000 001A             		move.b	#0,$1A(a0)
00009E44 4EB9 0000 0000             		jsr	ObjHitFloor
00009E4A 4A41                       		tst.w	d1
00009E4C 6A00                       		bpl.s	locret_93EA
00009E4E D368 000C                  		add.w	d1,$C(a0)
00009E52 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009E58                            
00009E58                            locret_93EA:
00009E58 4E75                       		rts	
00009E5A                            ; ===========================================================================
00009E5A                            
00009E5A                            loc_93EC:
00009E5A 08E8 0000 0001             		bset	#0,1(a0)
00009E60 3028 0008                  		move.w	8(a0),d0
00009E64 9078 D008                  		sub.w	($FFFFD008).w,d0
00009E68 6400                       		bcc.s	locret_9402
00009E6A 08A8 0000 0001             		bclr	#0,1(a0)
00009E70                            
00009E70                            locret_9402:
00009E70 4E75                       		rts	
00009E72                            
00009E72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009E72                            
00009E72                            
00009E72                            sub_9404:
00009E72 3038 D008                  		move.w	($FFFFD008).w,d0
00009E76 9068 0008                  		sub.w	8(a0),d0
00009E7A 0440 00B8                  		subi.w	#$B8,d0
00009E7E 4E75                       		rts	
00009E80                            ; End of function sub_9404
00009E80                            
00009E80                            ; ===========================================================================
00009E80                            ; ---------------------------------------------------------------------------
00009E80                            ; Object 29 - points that appear when you destroy something
00009E80                            ; ---------------------------------------------------------------------------
00009E80                            
00009E80                            Obj29:					; XREF: Obj_Index
00009E80 7000                       		moveq	#0,d0
00009E82 1028 0024                  		move.b	$24(a0),d0
00009E86 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00009E8A 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009E8E 6000 0000                  		bra.w	DisplaySprite
00009E92                            ; ===========================================================================
00009E92 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009E94 0000                       		dc.w Obj29_Slower-Obj29_Index
00009E96                            ; ===========================================================================
00009E96                            
00009E96                            Obj29_Main:				; XREF: Obj29_Index
00009E96 5428 0024                  		addq.b	#2,$24(a0)
00009E9A 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009EA2 317C 2797 0002             		move.w	#$2797,2(a0)
00009EA8 117C 0004 0001             		move.b	#4,1(a0)
00009EAE 117C 0001 0018             		move.b	#1,$18(a0)
00009EB4 117C 0008 0019             		move.b	#8,$19(a0)
00009EBA 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009EC0                            
00009EC0                            Obj29_Slower:				; XREF: Obj29_Index
00009EC0 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009EC4 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009EC8 6100 0000                  		bsr.w	SpeedToPos
00009ECC 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009ED2 4E75                       		rts	
00009ED4                            ; ===========================================================================
00009ED4                            ; ---------------------------------------------------------------------------
00009ED4                            ; Sprite mappings - animals
00009ED4                            ; ---------------------------------------------------------------------------
00009ED4                            Map_obj28:
00009ED4                            	include "_maps\obj28.asm"
00009ED4                            ; ---------------------------------------------------------------------------
00009ED4                            ; Sprite mappings - animals
00009ED4                            ; ---------------------------------------------------------------------------
00009ED4 0000                       		dc.w byte_9472-Map_obj28
00009ED6 0000                       		dc.w byte_9478-Map_obj28
00009ED8 0000                       		dc.w byte_946C-Map_obj28
00009EDA 01                         byte_946C:	dc.b 1
00009EDB F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009EE0 01                         byte_9472:	dc.b 1
00009EE1 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009EE6 01                         byte_9478:	dc.b 1
00009EE7 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009EEC                            		even
00009EEC                            		even
00009EEC                            
00009EEC                            Map_obj28a:
00009EEC                            	include "_maps\obj28a.asm"
00009EEC                            ; ---------------------------------------------------------------------------
00009EEC                            ; Sprite mappings - animals
00009EEC                            ; ---------------------------------------------------------------------------
00009EEC 0000                       		dc.w byte_948A-Map_obj28a
00009EEE 0000                       		dc.w byte_9490-Map_obj28a
00009EF0 0000                       		dc.w byte_9484-Map_obj28a
00009EF2 01                         byte_9484:	dc.b 1
00009EF3 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009EF8 01                         byte_948A:	dc.b 1
00009EF9 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009EFE 01                         byte_9490:	dc.b 1
00009EFF FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009F04                            		even
00009F04                            		even
00009F04                            
00009F04                            Map_obj28b:
00009F04                            	include "_maps\obj28b.asm"
00009F04                            ; ---------------------------------------------------------------------------
00009F04                            ; Sprite mappings - animals
00009F04                            ; ---------------------------------------------------------------------------
00009F04 0000                       		dc.w byte_94A2-Map_obj28b
00009F06 0000                       		dc.w byte_94A8-Map_obj28b
00009F08 0000                       		dc.w byte_949C-Map_obj28b
00009F0A 01                         byte_949C:	dc.b 1
00009F0B F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009F10 01                         byte_94A2:	dc.b 1
00009F11 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009F16 01                         byte_94A8:	dc.b 1
00009F17 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009F1C                            		even
00009F1C                            		even
00009F1C                            
00009F1C                            ; ---------------------------------------------------------------------------
00009F1C                            ; Sprite mappings - points that	appear when you	destroy	something
00009F1C                            ; ---------------------------------------------------------------------------
00009F1C                            Map_obj29:
00009F1C                            	include "_maps\obj29.asm"
00009F1C                            ; ---------------------------------------------------------------------------
00009F1C                            ; Sprite mappings - points that	appear when you	destroy	something
00009F1C                            ; ---------------------------------------------------------------------------
00009F1C 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00009F20 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009F24 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009F28 0000                       		dc.w byte_94E5-Map_obj29
00009F2A 01                         byte_94BC:	dc.b 1
00009F2B FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
00009F30 01                         byte_94C2:	dc.b 1
00009F31 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009F36 01                         byte_94C8:	dc.b 1
00009F37 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
00009F3C 01                         byte_94CE:	dc.b 1
00009F3D FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009F42 01                         byte_94D4:	dc.b 1
00009F43 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009F48 02                         byte_94DA:	dc.b 2
00009F49 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
00009F4E FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009F53 02                         byte_94E5:	dc.b 2
00009F54 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009F59 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
00009F5E                            		even
00009F5E                            		even
00009F5E                            
00009F5E                            ; ===========================================================================
00009F5E                            ; ---------------------------------------------------------------------------
00009F5E                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
00009F5E                            ; ---------------------------------------------------------------------------
00009F5E                            
00009F5E                            Obj1F:					; XREF: Obj_Index
00009F5E 7000                       		moveq	#0,d0
00009F60 1028 0024                  		move.b	$24(a0),d0
00009F64 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009F68 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
00009F6C                            ; ===========================================================================
00009F6C 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
00009F6E 0000                       		dc.w Obj1F_Action-Obj1F_Index
00009F70 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009F72 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009F74 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009F76                            ; ===========================================================================
00009F76                            
00009F76                            Obj1F_Main:				; XREF: Obj1F_Index
00009F76 117C 0010 0016             		move.b	#$10,$16(a0)
00009F7C 117C 0008 0017             		move.b	#8,$17(a0)
00009F82 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009F8A 317C 0400 0002             		move.w	#$400,2(a0)
00009F90 117C 0004 0001             		move.b	#4,1(a0)
00009F96 117C 0003 0018             		move.b	#3,$18(a0)
00009F9C 117C 0006 0020             		move.b	#6,$20(a0)
00009FA2 117C 0015 0019             		move.b	#$15,$19(a0)
00009FA8 6100 0000                  		bsr.w	ObjectFall
00009FAC 4EB9 0000 0000             		jsr	ObjHitFloor
00009FB2 4A41                       		tst.w	d1
00009FB4 6A00                       		bpl.s	locret_955A
00009FB6 D368 000C                  		add.w	d1,$C(a0)
00009FBA 1143 0026                  		move.b	d3,$26(a0)
00009FBE 317C 0000 0012             		move.w	#0,$12(a0)
00009FC4 5428 0024                  		addq.b	#2,$24(a0)
00009FC8                            
00009FC8                            locret_955A:
00009FC8 4E75                       		rts	
00009FCA                            ; ===========================================================================
00009FCA                            
00009FCA                            Obj1F_Action:				; XREF: Obj1F_Index
00009FCA 7000                       		moveq	#0,d0
00009FCC 1028 0025                  		move.b	$25(a0),d0
00009FD0 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009FD4 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
00009FD8 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009FDE 6100 0000                  		bsr.w	AnimateSprite
00009FE2 6000 0000                  		bra.w	MarkObjGone
00009FE6                            ; ===========================================================================
00009FE6 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009FE8 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009FEA                            ; ===========================================================================
00009FEA                            
00009FEA                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009FEA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009FEE 6A00                       		bpl.s	locret_95B6
00009FF0 4A28 0001                  		tst.b	1(a0)
00009FF4 6A00                       		bpl.s	Obj1F_Move
00009FF6 0868 0001 0032             		bchg	#1,$32(a0)
00009FFC 6600                       		bne.s	Obj1F_MakeFire
00009FFE                            
00009FFE                            Obj1F_Move:
00009FFE 5428 0025                  		addq.b	#2,$25(a0)
0000A002 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
0000A008 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
0000A00E 6100 0000                  		bsr.w	Obj1F_SetAni
0000A012 5600                       		addq.b	#3,d0
0000A014 1140 001C                  		move.b	d0,$1C(a0)
0000A018 0868 0000 0022             		bchg	#0,$22(a0)
0000A01E 6600                       		bne.s	locret_95B6
0000A020 4468 0010                  		neg.w	$10(a0)		; change direction
0000A024                            
0000A024                            locret_95B6:
0000A024 4E75                       		rts	
0000A026                            ; ===========================================================================
0000A026                            
0000A026                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
0000A026 317C 003B 0030             		move.w	#$3B,$30(a0)
0000A02C 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
0000A032 6100 0000                  		bsr.w	SingleObjLoad
0000A036 6600                       		bne.s	Obj1F_MakeFire2
0000A038 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
0000A03C 137C 0006 0024             		move.b	#6,$24(a1)
0000A042 3368 0008 0008             		move.w	8(a0),8(a1)
0000A048 0469 0010 0008             		subi.w	#$10,8(a1)
0000A04E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A054 337C FF00 0010             		move.w	#-$100,$10(a1)
0000A05A                            
0000A05A                            Obj1F_MakeFire2:
0000A05A 6100 0000                  		bsr.w	SingleObjLoad
0000A05E 6600                       		bne.s	locret_9618
0000A060 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
0000A064 137C 0006 0024             		move.b	#6,$24(a1)
0000A06A 3368 0008 0008             		move.w	8(a0),8(a1)
0000A070 0669 0010 0008             		addi.w	#$10,8(a1)
0000A076 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A07C 337C 0100 0010             		move.w	#$100,$10(a1)
0000A082                            
0000A082                            locret_9618:
0000A082 4E75                       		rts	
0000A084                            ; ===========================================================================
0000A084                            
0000A084                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
0000A084 5368 0030                  		subq.w	#1,$30(a0)
0000A088 6B00                       		bmi.s	loc_966E
0000A08A 6100 0000                  		bsr.w	SpeedToPos
0000A08E 0868 0000 0032             		bchg	#0,$32(a0)
0000A094 6600                       		bne.s	loc_9654
0000A096 3628 0008                  		move.w	8(a0),d3
0000A09A 0643 0010                  		addi.w	#$10,d3
0000A09E 0828 0000 0022             		btst	#0,$22(a0)
0000A0A4 6700                       		beq.s	loc_9640
0000A0A6 0443 0020                  		subi.w	#$20,d3
0000A0AA                            
0000A0AA                            loc_9640:
0000A0AA 4EB9 0000 0000             		jsr	ObjHitFloor2
0000A0B0 0C41 FFF8                  		cmpi.w	#-8,d1
0000A0B4 6D00                       		blt.s	loc_966E
0000A0B6 0C41 000C                  		cmpi.w	#$C,d1
0000A0BA 6C00                       		bge.s	loc_966E
0000A0BC 4E75                       		rts	
0000A0BE                            ; ===========================================================================
0000A0BE                            
0000A0BE                            loc_9654:				; XREF: Obj1F_WalkOnFloor
0000A0BE 4EB9 0000 0000             		jsr	ObjHitFloor
0000A0C4 D368 000C                  		add.w	d1,$C(a0)
0000A0C8 1143 0026                  		move.b	d3,$26(a0)
0000A0CC 6100 0000                  		bsr.w	Obj1F_SetAni
0000A0D0 5600                       		addq.b	#3,d0
0000A0D2 1140 001C                  		move.b	d0,$1C(a0)
0000A0D6 4E75                       		rts	
0000A0D8                            ; ===========================================================================
0000A0D8                            
0000A0D8                            loc_966E:				; XREF: Obj1F_WalkOnFloor
0000A0D8 5528 0025                  		subq.b	#2,$25(a0)
0000A0DC 317C 003B 0030             		move.w	#59,$30(a0)
0000A0E2 317C 0000 0010             		move.w	#0,$10(a0)
0000A0E8 6100 0000                  		bsr.w	Obj1F_SetAni
0000A0EC 1140 001C                  		move.b	d0,$1C(a0)
0000A0F0 4E75                       		rts	
0000A0F2                            ; ---------------------------------------------------------------------------
0000A0F2                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000A0F2                            ; ---------------------------------------------------------------------------
0000A0F2                            
0000A0F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A0F2                            
0000A0F2                            
0000A0F2                            Obj1F_SetAni:				; XREF: loc_966E
0000A0F2 7000                       		moveq	#0,d0
0000A0F4 1628 0026                  		move.b	$26(a0),d3
0000A0F8 6B00                       		bmi.s	loc_96A4
0000A0FA 0C03 0006                  		cmpi.b	#6,d3
0000A0FE 6500                       		bcs.s	locret_96A2
0000A100 7001                       		moveq	#1,d0
0000A102 0828 0000 0022             		btst	#0,$22(a0)
0000A108 6600                       		bne.s	locret_96A2
0000A10A 7002                       		moveq	#2,d0
0000A10C                            
0000A10C                            locret_96A2:
0000A10C 4E75                       		rts	
0000A10E                            ; ===========================================================================
0000A10E                            
0000A10E                            loc_96A4:				; XREF: Obj1F_SetAni
0000A10E 0C03 00FA                  		cmpi.b	#-6,d3
0000A112 6200                       		bhi.s	locret_96B6
0000A114 7002                       		moveq	#2,d0
0000A116 0828 0000 0022             		btst	#0,$22(a0)
0000A11C 6600                       		bne.s	locret_96B6
0000A11E 7001                       		moveq	#1,d0
0000A120                            
0000A120                            locret_96B6:
0000A120 4E75                       		rts	
0000A122                            ; End of function Obj1F_SetAni
0000A122                            
0000A122                            ; ===========================================================================
0000A122                            
0000A122                            Obj1F_Delete:				; XREF: Obj1F_Index
0000A122 6100 0000                  		bsr.w	DeleteObject
0000A126 4E75                       		rts	
0000A128                            ; ===========================================================================
0000A128                            ; ---------------------------------------------------------------------------
0000A128                            ; Sub-object - missile that the	Crabmeat throws
0000A128                            ; ---------------------------------------------------------------------------
0000A128                            
0000A128                            Obj1F_BallMain:				; XREF: Obj1F_Index
0000A128 5428 0024                  		addq.b	#2,$24(a0)
0000A12C 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000A134 317C 0400 0002             		move.w	#$400,2(a0)
0000A13A 117C 0004 0001             		move.b	#4,1(a0)
0000A140 117C 0003 0018             		move.b	#3,$18(a0)
0000A146 117C 0087 0020             		move.b	#$87,$20(a0)
0000A14C 117C 0008 0019             		move.b	#8,$19(a0)
0000A152 317C FC00 0012             		move.w	#-$400,$12(a0)
0000A158 117C 0007 001C             		move.b	#7,$1C(a0)
0000A15E                            
0000A15E                            Obj1F_BallMove:				; XREF: Obj1F_Index
0000A15E 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000A164 6100 0000                  		bsr.w	AnimateSprite
0000A168 6100 0000                  		bsr.w	ObjectFall
0000A16C 6100 0000                  		bsr.w	DisplaySprite
0000A170 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A174 0640 00E0                  		addi.w	#$E0,d0
0000A178 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A17C 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
0000A17E 4E75                       		rts	
0000A180                            ; ===========================================================================
0000A180                            
0000A180                            Obj1F_Delete2:
0000A180 6000 0000                  		bra.w	DeleteObject
0000A184                            ; ===========================================================================
0000A184                            Ani_obj1F:
0000A184                            	include "_anim\obj1F.asm"
0000A184                            ; ---------------------------------------------------------------------------
0000A184                            ; Animation script - Crabmeat enemy
0000A184                            ; ---------------------------------------------------------------------------
0000A184 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
0000A18A 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
0000A190 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
0000A194 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
0000A198 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
0000A19C 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
0000A1A0 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
0000A1A6 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
0000A1AC 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
0000A1B2 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
0000A1B6 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
0000A1BA                            		even
0000A1BA                            		even
0000A1BA                            
0000A1BA                            ; ---------------------------------------------------------------------------
0000A1BA                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000A1BA                            ; ---------------------------------------------------------------------------
0000A1BA                            Map_obj1F:
0000A1BA                            	include "_maps\obj1F.asm"
0000A1BA                            ; ---------------------------------------------------------------------------
0000A1BA                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000A1BA                            ; ---------------------------------------------------------------------------
0000A1BA 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
0000A1BE 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
0000A1C2 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
0000A1C6 0000                       		dc.w byte_97D7-Map_obj1F
0000A1C8 04                         byte_975E:	dc.b 4
0000A1C9 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
0000A1CE F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000A1D3 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000A1D8 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000A1DD 04                         byte_9773:	dc.b 4
0000A1DE F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
0000A1E3 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000A1E8 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000A1ED 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000A1F2 04                         byte_9788:	dc.b 4
0000A1F3 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
0000A1F8 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000A1FD FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000A202 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000A207 04                         byte_979D:	dc.b 4
0000A208 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
0000A20D EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000A212 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000A217 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000A21C 06                         byte_97B2:	dc.b 6
0000A21D F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
0000A222 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000A227 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000A22C F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000A231 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000A236 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000A23B 01                         byte_97D1:	dc.b 1
0000A23C F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
0000A241 01                         byte_97D7:	dc.b 1
0000A242 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
0000A248 00                         		even
0000A248 00                         		even
0000A248                            
0000A248                            ; ===========================================================================
0000A248                            ; ---------------------------------------------------------------------------
0000A248                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000A248                            ; ---------------------------------------------------------------------------
0000A248                            
0000A248                            Obj22:					; XREF: Obj_Index
0000A248 7000                       		moveq	#0,d0
0000A24A 1028 0024                  		move.b	$24(a0),d0
0000A24E 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0000A252 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0000A256                            ; ===========================================================================
0000A256 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
0000A258 0000                       		dc.w Obj22_Action-Obj22_Index
0000A25A 0000                       		dc.w Obj22_Delete-Obj22_Index
0000A25C                            ; ===========================================================================
0000A25C                            
0000A25C                            Obj22_Main:				; XREF: Obj22_Index
0000A25C 5428 0024                  		addq.b	#2,$24(a0)
0000A260 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
0000A268 317C 0444 0002             		move.w	#$444,2(a0)
0000A26E 117C 0004 0001             		move.b	#4,1(a0)
0000A274 117C 0003 0018             		move.b	#3,$18(a0)
0000A27A 117C 0008 0020             		move.b	#8,$20(a0)
0000A280 117C 0018 0019             		move.b	#$18,$19(a0)
0000A286                            
0000A286                            Obj22_Action:				; XREF: Obj22_Index
0000A286 7000                       		moveq	#0,d0
0000A288 1028 0025                  		move.b	$25(a0),d0
0000A28C 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000A290 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000A294 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000A29A 6100 0000                  		bsr.w	AnimateSprite
0000A29E 6000 0000                  		bra.w	MarkObjGone
0000A2A2                            ; ===========================================================================
0000A2A2 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000A2A4 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000A2A6                            ; ===========================================================================
0000A2A6                            
0000A2A6                            Obj22_Move:				; XREF: Obj22_Index2
0000A2A6 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A2AA 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000A2AC 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000A2B2 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000A2B4 5428 0025                  		addq.b	#2,$25(a0)
0000A2B8 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000A2BE 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000A2C4 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000A2CA 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A2D0 6600                       		bne.s	locret_986C	; if not, branch
0000A2D2 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000A2D6                            
0000A2D6                            locret_986C:
0000A2D6 4E75                       		rts	
0000A2D8                            ; ===========================================================================
0000A2D8                            
0000A2D8                            Obj22_Fire:				; XREF: Obj22_Move
0000A2D8 6100 0000                  		bsr.w	SingleObjLoad
0000A2DC 6600                       		bne.s	locret_98D0
0000A2DE 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000A2E2 3368 0008 0008             		move.w	8(a0),8(a1)
0000A2E8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A2EE 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000A2F4 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000A2FA 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000A300 303C 0018                  		move.w	#$18,d0
0000A304 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A30A 6600                       		bne.s	loc_98AA	; if not, branch
0000A30C 4440                       		neg.w	d0
0000A30E 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000A312                            
0000A312                            loc_98AA:
0000A312 D169 0008                  		add.w	d0,8(a1)
0000A316 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000A31C 337C 000E 0032             		move.w	#$E,$32(a1)
0000A322 2348 003C                  		move.l	a0,$3C(a1)
0000A326 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000A32C 317C 003B 0032             		move.w	#$3B,$32(a0)
0000A332 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000A338                            
0000A338                            locret_98D0:
0000A338 4E75                       		rts	
0000A33A                            ; ===========================================================================
0000A33A                            
0000A33A                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000A33A 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A33E 6B00                       		bmi.s	Obj22_ChgDir
0000A340 6100 0000                  		bsr.w	SpeedToPos
0000A344 4A28 0034                  		tst.b	$34(a0)
0000A348 6600                       		bne.s	locret_992A
0000A34A 3038 D008                  		move.w	($FFFFD008).w,d0
0000A34E 9068 0008                  		sub.w	8(a0),d0
0000A352 6A00                       		bpl.s	Obj22_SetNrSonic
0000A354 4440                       		neg.w	d0
0000A356                            
0000A356                            Obj22_SetNrSonic:
0000A356 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000A35A 6400                       		bcc.s	locret_992A	; if not, branch
0000A35C 4A28 0001                  		tst.b	1(a0)
0000A360 6A00                       		bpl.s	locret_992A
0000A362 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000A368 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000A36E 6000                       		bra.s	Obj22_Stop
0000A370                            ; ===========================================================================
0000A370                            
0000A370                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000A370 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000A376 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000A37C 317C 003B 0032             		move.w	#59,$32(a0)
0000A382                            
0000A382                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000A382 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000A386 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000A38C 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000A392                            
0000A392                            locret_992A:
0000A392 4E75                       		rts	
0000A394                            ; ===========================================================================
0000A394                            
0000A394                            Obj22_Delete:				; XREF: Obj22_Index
0000A394 6100 0000                  		bsr.w	DeleteObject
0000A398 4E75                       		rts	
0000A39A                            ; ===========================================================================
0000A39A                            ; ---------------------------------------------------------------------------
0000A39A                            ; Object 23 - missile that Buzz	Bomber throws
0000A39A                            ; ---------------------------------------------------------------------------
0000A39A                            
0000A39A                            Obj23:					; XREF: Obj_Index
0000A39A 7000                       		moveq	#0,d0
0000A39C 1028 0024                  		move.b	$24(a0),d0
0000A3A0 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000A3A4 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000A3A8                            ; ===========================================================================
0000A3A8 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000A3AA 0000                       		dc.w Obj23_Animate-Obj23_Index
0000A3AC 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000A3AE 0000                       		dc.w Obj23_Delete-Obj23_Index
0000A3B0 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000A3B2                            ; ===========================================================================
0000A3B2                            
0000A3B2                            Obj23_Main:				; XREF: Obj23_Index
0000A3B2 5368 0032                  		subq.w	#1,$32(a0)
0000A3B6 6A00                       		bpl.s	Obj23_ChkCancel
0000A3B8 5428 0024                  		addq.b	#2,$24(a0)
0000A3BC 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000A3C4 317C 2444 0002             		move.w	#$2444,2(a0)
0000A3CA 117C 0004 0001             		move.b	#4,1(a0)
0000A3D0 117C 0003 0018             		move.b	#3,$18(a0)
0000A3D6 117C 0008 0019             		move.b	#8,$19(a0)
0000A3DC 0228 0003 0022             		andi.b	#3,$22(a0)
0000A3E2 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000A3E6 6700                       		beq.s	Obj23_Animate	; if not, branch
0000A3E8 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000A3EE 117C 0087 0020             		move.b	#$87,$20(a0)
0000A3F4 117C 0001 001C             		move.b	#1,$1C(a0)
0000A3FA 6000                       		bra.s	Obj23_Animate2
0000A3FC                            ; ===========================================================================
0000A3FC                            
0000A3FC                            Obj23_Animate:				; XREF: Obj23_Index
0000A3FC 6100                       		bsr.s	Obj23_ChkCancel
0000A3FE 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A404 6100 0000                  		bsr.w	AnimateSprite
0000A408 6000 0000                  		bra.w	DisplaySprite
0000A40C                            ; ---------------------------------------------------------------------------
0000A40C                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000A40C                            ; destroyed, and if it has, then cancel	the missile
0000A40C                            ; ---------------------------------------------------------------------------
0000A40C                            
0000A40C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A40C                            
0000A40C                            
0000A40C                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000A40C 2268 003C                  		movea.l	$3C(a0),a1
0000A410 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000A414 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000A416 4E75                       		rts	
0000A418                            ; End of function Obj23_ChkCancel
0000A418                            
0000A418                            ; ===========================================================================
0000A418                            
0000A418                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000A418 0828 0007 0022             		btst	#7,$22(a0)
0000A41E 6600                       		bne.s	Obj23_Explode
0000A420 117C 0087 0020             		move.b	#$87,$20(a0)
0000A426 117C 0001 001C             		move.b	#1,$1C(a0)
0000A42C 6100 0000                  		bsr.w	SpeedToPos
0000A430 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A436 6100 0000                  		bsr.w	AnimateSprite
0000A43A 6100 0000                  		bsr.w	DisplaySprite
0000A43E 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A442 0640 00E0                  		addi.w	#$E0,d0
0000A446 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A44A 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000A44C 4E75                       		rts	
0000A44E                            ; ===========================================================================
0000A44E                            
0000A44E                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000A44E 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000A452 117C 0000 0024             		move.b	#0,$24(a0)
0000A458 6000 F30A                  		bra.w	Obj24
0000A45C                            ; ===========================================================================
0000A45C                            
0000A45C                            Obj23_Delete:				; XREF: Obj23_Index
0000A45C 6100 0000                  		bsr.w	DeleteObject
0000A460 4E75                       		rts	
0000A462                            ; ===========================================================================
0000A462                            
0000A462                            Obj23_FromNewt:				; XREF: Obj23_Index
0000A462 4A28 0001                  		tst.b	1(a0)
0000A466 6AF4                       		bpl.s	Obj23_Delete
0000A468 6100 0000                  		bsr.w	SpeedToPos
0000A46C                            
0000A46C                            Obj23_Animate2:				; XREF: Obj23_Main
0000A46C 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A472 6100 0000                  		bsr.w	AnimateSprite
0000A476 6100 0000                  		bsr.w	DisplaySprite
0000A47A 4E75                       		rts	
0000A47C                            ; ===========================================================================
0000A47C                            Ani_obj22:
0000A47C                            	include "_anim\obj22.asm"
0000A47C                            ; ---------------------------------------------------------------------------
0000A47C                            ; Animation script - Buzz Bomber enemy
0000A47C                            ; ---------------------------------------------------------------------------
0000A47C 0000                       		dc.w byte_9A1E-Ani_obj22
0000A47E 0000                       		dc.w byte_9A22-Ani_obj22
0000A480 0000                       		dc.w byte_9A26-Ani_obj22
0000A482 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000A486 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000A48A 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000A48E                            		even
0000A48E                            		even
0000A48E                            
0000A48E                            Ani_obj23:
0000A48E                            	include "_anim\obj23.asm"
0000A48E                            ; ---------------------------------------------------------------------------
0000A48E                            ; Animation script - missile that Buzz Bomber throws
0000A48E                            ; ---------------------------------------------------------------------------
0000A48E 0000                       		dc.w byte_9A2E-Ani_obj23
0000A490 0000                       		dc.w byte_9A32-Ani_obj23
0000A492 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000A496 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000A49A                            		even
0000A49A                            		even
0000A49A                            
0000A49A                            ; ---------------------------------------------------------------------------
0000A49A                            ; Sprite mappings - Buzz Bomber	enemy
0000A49A                            ; ---------------------------------------------------------------------------
0000A49A                            Map_obj22:
0000A49A                            	include "_maps\obj22.asm"
0000A49A                            ; ---------------------------------------------------------------------------
0000A49A                            ; Sprite mappings - Buzz Bomber	enemy
0000A49A                            ; ---------------------------------------------------------------------------
0000A49A 0000 0000                  		dc.w byte_9A42-Map_obj22, byte_9A61-Map_obj22
0000A49E 0000 0000                  		dc.w byte_9A80-Map_obj22, byte_9AA4-Map_obj22
0000A4A2 0000 0000                  		dc.w byte_9AC8-Map_obj22, byte_9AE7-Map_obj22
0000A4A6 06                         byte_9A42:	dc.b 6
0000A4A7 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000A4AC F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000A4B1 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000A4B6 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000A4BB F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000A4C0 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000A4C5 06                         byte_9A61:	dc.b 6
0000A4C6 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000A4CB F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000A4D0 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000A4D5 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000A4DA F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000A4DF F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000A4E4 07                         byte_9A80:	dc.b 7
0000A4E5 0400 0030 0C               		dc.b 4,	0, 0, $30, $C
0000A4EA F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000A4EF F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000A4F4 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000A4F9 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000A4FE F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000A503 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000A508 07                         byte_9AA4:	dc.b 7
0000A509 0404 0031 0C               		dc.b 4,	4, 0, $31, $C
0000A50E F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000A513 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000A518 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000A51D 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000A522 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000A527 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000A52C 06                         byte_9AC8:	dc.b 6
0000A52D F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000A532 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000A537 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000A53C 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000A541 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000A546 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000A54B 04                         byte_9AE7:	dc.b 4
0000A54C F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000A551 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000A556 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000A55B 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000A560 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000A565 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000A56A                            		even
0000A56A                            		even
0000A56A                            
0000A56A                            ; ---------------------------------------------------------------------------
0000A56A                            ; Sprite mappings - missile that Buzz Bomber throws
0000A56A                            ; ---------------------------------------------------------------------------
0000A56A                            Map_obj23:
0000A56A                            	include "_maps\obj23.asm"
0000A56A                            ; ---------------------------------------------------------------------------
0000A56A                            ; Sprite mappings - missile that Buzz Bomber throws
0000A56A                            ; ---------------------------------------------------------------------------
0000A56A 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000A56E 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000A572 01                         byte_9B0E:	dc.b 1
0000A573 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000A578 01                         byte_9B14:	dc.b 1
0000A579 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000A57E 01                         byte_9B1A:	dc.b 1
0000A57F F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000A584 01                         byte_9B20:	dc.b 1
0000A585 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000A58A                            		even
0000A58A                            		even
0000A58A                            
0000A58A                            ; ===========================================================================
0000A58A                            ; ---------------------------------------------------------------------------
0000A58A                            ; Object 25 - rings
0000A58A                            ; ---------------------------------------------------------------------------
0000A58A                            
0000A58A                            Obj25:					; XREF: Obj_Index
0000A58A 7000                       		moveq	#0,d0
0000A58C 1028 0024                  		move.b	$24(a0),d0
0000A590 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000A594 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000A598                            ; ===========================================================================
0000A598 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000A59A 0000                       		dc.w Obj25_Animate-Obj25_Index
0000A59C 0000                       		dc.w Obj25_Collect-Obj25_Index
0000A59E 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000A5A0 0000                       		dc.w Obj25_Delete-Obj25_Index
0000A5A2                            ; ---------------------------------------------------------------------------
0000A5A2                            ; Distances between rings (format: horizontal, vertical)
0000A5A2                            ; ---------------------------------------------------------------------------
0000A5A2 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000A5A4 1800                       		dc.b $18, 0		; horizontal normal
0000A5A6 2000                       		dc.b $20, 0		; horizontal wide
0000A5A8 0010                       		dc.b 0,	$10		; vertical tight
0000A5AA 0018                       		dc.b 0,	$18		; vertical normal
0000A5AC 0020                       		dc.b 0,	$20		; vertical wide
0000A5AE 1010                       		dc.b $10, $10		; diagonal
0000A5B0 1818                       		dc.b $18, $18
0000A5B2 2020                       		dc.b $20, $20
0000A5B4 F010                       		dc.b $F0, $10
0000A5B6 E818                       		dc.b $E8, $18
0000A5B8 E020                       		dc.b $E0, $20
0000A5BA 1008                       		dc.b $10, 8
0000A5BC 1810                       		dc.b $18, $10
0000A5BE F008                       		dc.b $F0, 8
0000A5C0 E810                       		dc.b $E8, $10
0000A5C2                            ; ===========================================================================
0000A5C2                            
0000A5C2                            Obj25_Main:				; XREF: Obj25_Index
0000A5C2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A5C6 7000                       		moveq	#0,d0
0000A5C8 1028 0023                  		move.b	$23(a0),d0
0000A5CC 45F2 0002                  		lea	2(a2,d0.w),a2
0000A5D0 1812                       		move.b	(a2),d4
0000A5D2 1228 0028                  		move.b	$28(a0),d1
0000A5D6 1001                       		move.b	d1,d0
0000A5D8 0241 0007                  		andi.w	#7,d1
0000A5DC 0C41 0007                  		cmpi.w	#7,d1
0000A5E0 6600                       		bne.s	loc_9B80
0000A5E2 7206                       		moveq	#6,d1
0000A5E4                            
0000A5E4                            loc_9B80:
0000A5E4 4841                       		swap	d1
0000A5E6 323C 0000                  		move.w	#0,d1
0000A5EA E808                       		lsr.b	#4,d0
0000A5EC D040                       		add.w	d0,d0
0000A5EE 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A5F2 4885                       		ext.w	d5
0000A5F4 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A5F8 4886                       		ext.w	d6
0000A5FA 2248                       		movea.l	a0,a1
0000A5FC 3428 0008                  		move.w	8(a0),d2
0000A600 3628 000C                  		move.w	$C(a0),d3
0000A604 E20C                       		lsr.b	#1,d4
0000A606 6500                       		bcs.s	loc_9C02
0000A608 0892 0007                  		bclr	#7,(a2)
0000A60C 6000                       		bra.s	loc_9BBA
0000A60E                            ; ===========================================================================
0000A60E                            
0000A60E                            Obj25_MakeRings:
0000A60E 4841                       		swap	d1
0000A610 E20C                       		lsr.b	#1,d4
0000A612 6500                       		bcs.s	loc_9C02
0000A614 0892 0007                  		bclr	#7,(a2)
0000A618 6100 0000                  		bsr.w	SingleObjLoad
0000A61C 6600                       		bne.s	loc_9C0E
0000A61E                            
0000A61E                            loc_9BBA:				; XREF: Obj25_Main
0000A61E 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A622 5429 0024                  		addq.b	#2,$24(a1)
0000A626 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A62A 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A630 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A634 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A63C 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A642 137C 0004 0001             		move.b	#4,1(a1)
0000A648 137C 0002 0018             		move.b	#2,$18(a1)
0000A64E 137C 0047 0020             		move.b	#$47,$20(a1)
0000A654 137C 0008 0019             		move.b	#8,$19(a1)
0000A65A 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A660 1341 0034                  		move.b	d1,$34(a1)
0000A664                            
0000A664                            loc_9C02:
0000A664 5241                       		addq.w	#1,d1
0000A666 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A668 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A66A 4841                       		swap	d1
0000A66C 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A670                            
0000A670                            loc_9C0E:
0000A670 0812 0000                  		btst	#0,(a2)
0000A674 6600 0000                  		bne.w	DeleteObject
0000A678                            
0000A678                            Obj25_Animate:				; XREF: Obj25_Index
0000A678 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A67E 6100 0000                  		bsr.w	DisplaySprite
0000A682 3028 0032                  		move.w	$32(a0),d0
0000A686 0240 FF80                  		andi.w	#$FF80,d0
0000A68A 3238 F700                  		move.w	($FFFFF700).w,d1
0000A68E 0441 0080                  		subi.w	#$80,d1
0000A692 0241 FF80                  		andi.w	#$FF80,d1
0000A696 9041                       		sub.w	d1,d0
0000A698 0C40 0280                  		cmpi.w	#$280,d0
0000A69C 6200                       		bhi.s	Obj25_Delete
0000A69E 4E75                       		rts	
0000A6A0                            ; ===========================================================================
0000A6A0                            
0000A6A0                            Obj25_Collect:				; XREF: Obj25_Index
0000A6A0 5428 0024                  		addq.b	#2,$24(a0)
0000A6A4 117C 0000 0020             		move.b	#0,$20(a0)
0000A6AA 117C 0001 0018             		move.b	#1,$18(a0)
0000A6B0 6100 0000                  		bsr.w	CollectRing
0000A6B4 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A6B8 7000                       		moveq	#0,d0
0000A6BA 1028 0023                  		move.b	$23(a0),d0
0000A6BE 1228 0034                  		move.b	$34(a0),d1
0000A6C2 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A6C6                            
0000A6C6                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A6C6 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A6CC 6100 0000                  		bsr.w	AnimateSprite
0000A6D0 6000 0000                  		bra.w	DisplaySprite
0000A6D4                            ; ===========================================================================
0000A6D4                            
0000A6D4                            Obj25_Delete:				; XREF: Obj25_Index
0000A6D4 6000 0000                  		bra.w	DeleteObject
0000A6D8                            
0000A6D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A6D8                            
0000A6D8                            
0000A6D8                            CollectRing:				; XREF: Obj25_Collect
0000A6D8 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A6DC 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A6E2 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A6E6 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A6EC 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A6EE 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A6F4 6700                       		beq.s	loc_9CA4
0000A6F6 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A6FC 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A6FE 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A704 6600                       		bne.s	Obj25_PlaySnd
0000A706                            
0000A706                            loc_9CA4:
0000A706 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A70A 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A70E 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A712                            
0000A712                            Obj25_PlaySnd:
0000A712 4EF9 0000 1476             		jmp	(PlaySound_Special).l
0000A718                            ; End of function CollectRing
0000A718                            
0000A718                            ; ===========================================================================
0000A718                            ; ---------------------------------------------------------------------------
0000A718                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A718                            ; ---------------------------------------------------------------------------
0000A718                            
0000A718                            Obj37:					; XREF: Obj_Index
0000A718 7000                       		moveq	#0,d0
0000A71A 1028 0024                  		move.b	$24(a0),d0
0000A71E 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A722 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A726                            ; ===========================================================================
0000A726 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A728 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A72A 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A72C 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A72E 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A730                            ; ===========================================================================
0000A730                            
0000A730                            Obj37_CountRings:			; XREF: Obj37_Index
0000A730 2248                       		movea.l	a0,a1
0000A732 7A00                       		moveq	#0,d5
0000A734 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A738 7020                       		moveq	#32,d0
0000A73A BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A73C 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A73E 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A740                            
0000A740                            loc_9CDE:
0000A740 5345                       		subq.w	#1,d5
0000A742 383C 0288                  		move.w	#$288,d4
0000A746 6000                       		bra.s	Obj37_MakeRings
0000A748                            ; ===========================================================================
0000A748                            
0000A748                            Obj37_Loop:
0000A748 6100 0000                  		bsr.w	SingleObjLoad
0000A74C 6600 0000                  		bne.w	Obj37_ResetCounter
0000A750                            
0000A750                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A750 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A754 5429 0024                  		addq.b	#2,$24(a1)
0000A758 137C 0008 0016             		move.b	#8,$16(a1)
0000A75E 137C 0008 0017             		move.b	#8,$17(a1)
0000A764 3368 0008 0008             		move.w	8(a0),8(a1)
0000A76A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A770 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A778 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A77E 137C 0004 0001             		move.b	#4,1(a1)
0000A784 137C 0003 0018             		move.b	#3,$18(a1)
0000A78A 137C 0047 0020             		move.b	#$47,$20(a1)
0000A790 137C 0008 0019             		move.b	#8,$19(a1)
0000A796 4A44                       		tst.w	d4
0000A798 6B00                       		bmi.s	loc_9D62
0000A79A 3004                       		move.w	d4,d0
0000A79C 6100 8C36                  		bsr.w	CalcSine
0000A7A0 3404                       		move.w	d4,d2
0000A7A2 E04A                       		lsr.w	#8,d2
0000A7A4 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000A7A8 6700                       		beq.s	@skiphalvingvel		; If not, branch and skip underwater checks
0000A7AA 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000A7AE BC68 000C                  		cmp.w	$C(a0),d6		; Is the ring object underneath the water level?
0000A7B2 6E00                       		bgt.s	@skiphalvingvel		; If not, branch and skip underwater commands
0000A7B4 E240                       		asr.w	d0			; Half d0. Makes the ring's x_vel bounce to the left/right slower
0000A7B6 E241                       		asr.w	d1			; Half d1. Makes the ring's y_vel bounce up/down slower
0000A7B8                            
0000A7B8                            @skiphalvingvel:		
0000A7B8 E560                       		asl.w	d2,d0
0000A7BA E561                       		asl.w	d2,d1
0000A7BC 3400                       		move.w	d0,d2
0000A7BE 3601                       		move.w	d1,d3
0000A7C0 0604 0010                  		addi.b	#$10,d4
0000A7C4 6400                       		bcc.s	loc_9D62
0000A7C6 0444 0080                  		subi.w	#$80,d4
0000A7CA 6400                       		bcc.s	loc_9D62
0000A7CC 383C 0288                  		move.w	#$288,d4
0000A7D0                            
0000A7D0                            loc_9D62:
0000A7D0 3342 0010                  		move.w	d2,$10(a1)
0000A7D4 3343 0012                  		move.w	d3,$12(a1)
0000A7D8 4442                       		neg.w	d2
0000A7DA 4444                       		neg.w	d4
0000A7DC 51CD FF6A                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A7E0                            
0000A7E0                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A7E0 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A7E6 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A7EC 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A7F2 70FF                       		moveq	#-1,d0			; Move #-1 to d0
0000A7F4 1140 001F                  		move.b	d0,$1F(a0)	; Move d0 to new timer
0000A7F8 11C0 FEC6                  		move.b	d0,($FFFFFEC6).w	; Move d0 to old timer (for animated purposes)
0000A7FC 303C 00C6                  		move.w	#$C6,d0
0000A800 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A806                            
0000A806                            Obj37_Bounce:				; XREF: Obj37_Index
0000A806 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A80C 6100 0000                  		bsr.w	SpeedToPos
0000A810 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A816 6B00                       		bmi.s	Obj37_ChkDel
0000A818 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000A81C 6700                       		beq.s	@skipbounceslow		; If not, branch and skip underwater checks
0000A81E 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000A822 BC68 000C                  		cmp.w	$C(a0),d6		; Is the ring object underneath the water level?
0000A826 6E00                       		bgt.s	@skipbounceslow		; If not, branch and skip underwater commands
0000A828 0468 000E 0012             		subi.w	#$E,$12(a0)		; Reduce gravity by $E ($18-$E=$A), giving the underwater effect
0000A82E                            
0000A82E                            @skipbounceslow:
0000A82E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A832 D007                       		add.b	d7,d0
0000A834 0200 0003                  		andi.b	#3,d0
0000A838 6600                       		bne.s	Obj37_ChkDel
0000A83A 4EB9 0000 0000             		jsr	ObjHitFloor
0000A840 4A41                       		tst.w	d1
0000A842 6A00                       		bpl.s	Obj37_ChkDel
0000A844 D368 000C                  		add.w	d1,$C(a0)
0000A848 3028 0012                  		move.w	$12(a0),d0
0000A84C E440                       		asr.w	#2,d0
0000A84E 9168 0012                  		sub.w	d0,$12(a0)
0000A852 4468 0012                  		neg.w	$12(a0)
0000A856                            
0000A856                            Obj37_ChkDel:
0000A856 5328 001F                  		subq.b  #1,$1F(a0)  ; Subtract 1   ; RHS Ring Timer fix
0000A85A 6700 0000                                  beq.w   DeleteObject       ; If 0, delete ; RHS Ring Timer fix
0000A85E 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A862 0640 00E0                  		addi.w	#$E0,d0
0000A866 B068 000C                  		cmp.w	$C(a0),d0	   ; has object moved below level boundary?
0000A86A 6500                       		bcs.s	Obj37_Delete	   ; if yes, branch	
0000A86C                            ;Mercury Lost Rings Flash
0000A86C 0828 0000 001F             		btst	#0, $1F(a0) ; Test the first bit of the timer, so rings flash every other frame.
0000A872 6700 0000                  		beq.w	DisplaySprite      ; If the bit is 0, the ring will appear.
0000A876 0C28 0050 001F             		cmpi.b	#80,$1F(a0) ; Rings will flash during last 80 steps of their life.
0000A87C 6200 0000                  		bhi.w	DisplaySprite      ; If the timer is higher than 80, obviously the rings will STAY visible.
0000A880 4E75                       		rts
0000A882                            ;end Lost Rings Flash
0000A882                            ; ===========================================================================
0000A882                            
0000A882                            Obj37_Collect:				; XREF: Obj37_Index
0000A882 5428 0024                  		addq.b	#2,$24(a0)
0000A886 117C 0000 0020             		move.b	#0,$20(a0)
0000A88C 117C 0001 0018             		move.b	#1,$18(a0)
0000A892 6100 FE44                  		bsr.w	CollectRing
0000A896                            
0000A896                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A896 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A89C 6100 0000                  		bsr.w	AnimateSprite
0000A8A0 6000 0000                  		bra.w	DisplaySprite
0000A8A4                            ; ===========================================================================
0000A8A4                            
0000A8A4                            Obj37_Delete:				; XREF: Obj37_Index
0000A8A4 6000 0000                  		bra.w	DeleteObject
0000A8A8                            ; ===========================================================================
0000A8A8                            ; ---------------------------------------------------------------------------
0000A8A8                            ; Object 4B - giant ring for entry to special stage
0000A8A8                            ; ---------------------------------------------------------------------------
0000A8A8                            
0000A8A8                            Obj4B:					; XREF: Obj_Index
0000A8A8 7000                       		moveq	#0,d0
0000A8AA 1028 0024                  		move.b	$24(a0),d0
0000A8AE 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A8B2 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A8B6                            ; ===========================================================================
0000A8B6 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A8B8 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A8BA 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A8BC 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A8BE                            ; ===========================================================================
0000A8BE                            
0000A8BE                            Obj4B_Main:				; XREF: Obj4B_Index
0000A8BE 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A8C6 317C 2400 0002             		move.w	#$2400,2(a0)
0000A8CC 0028 0004 0001             		ori.b	#4,1(a0)
0000A8D2 117C 0040 0019             		move.b	#$40,$19(a0)
0000A8D8 4A28 0001                  		tst.b	1(a0)
0000A8DC 6A00                       		bpl.s	Obj4B_Animate
0000A8DE 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A8E4 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A8E8 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A8EE 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A8F0 4E75                       		rts	
0000A8F2                            ; ===========================================================================
0000A8F2                            
0000A8F2                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A8F2 5428 0024                  		addq.b	#2,$24(a0)
0000A8F6 117C 0002 0018             		move.b	#2,$18(a0)
0000A8FC 117C 0052 0020             		move.b	#$52,$20(a0)
0000A902 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A908                            
0000A908                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A908 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A90E 3028 0008                  		move.w	8(a0),d0
0000A912 0240 FF80                  		andi.w	#$FF80,d0
0000A916 3238 F700                  		move.w	($FFFFF700).w,d1
0000A91A 0441 0080                  		subi.w	#$80,d1
0000A91E 0241 FF80                  		andi.w	#$FF80,d1
0000A922 9041                       		sub.w	d1,d0
0000A924 0C40 0280                  		cmpi.w	#$280,d0
0000A928 6200 0000                  		bhi.w	DeleteObject
0000A92C 6000 0000                  		bra.w	DisplaySprite
0000A930                            ; ===========================================================================
0000A930                            
0000A930                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A930 5528 0024                  		subq.b	#2,$24(a0)
0000A934 117C 0000 0020             		move.b	#0,$20(a0)
0000A93A 6100 0000                  		bsr.w	SingleObjLoad
0000A93E 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A942 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A946 3368 0008 0008             		move.w	8(a0),8(a1)
0000A94C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A952 2348 003C                  		move.l	a0,$3C(a1)
0000A956 3038 D008                  		move.w	($FFFFD008).w,d0
0000A95A B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A95E 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A960 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A966                            
0000A966                            Obj4B_PlaySnd:
0000A966 303C 00C3                  		move.w	#$C3,d0
0000A96A 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A970 6096                       		bra.s	Obj4B_Animate
0000A972                            ; ===========================================================================
0000A972                            
0000A972                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A972 6000 0000                  		bra.w	DeleteObject
0000A976                            ; ===========================================================================
0000A976                            ; ---------------------------------------------------------------------------
0000A976                            ; Object 7C - flash effect when	you collect the	giant ring
0000A976                            ; ---------------------------------------------------------------------------
0000A976                            
0000A976                            Obj7C:					; XREF: Obj_Index
0000A976 7000                       		moveq	#0,d0
0000A978 1028 0024                  		move.b	$24(a0),d0
0000A97C 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A980 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A984                            ; ===========================================================================
0000A984 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A986 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A988 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A98A                            ; ===========================================================================
0000A98A                            
0000A98A                            Obj7C_Main:				; XREF: Obj7C_Index
0000A98A 5428 0024                  		addq.b	#2,$24(a0)
0000A98E 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A996 317C 2462 0002             		move.w	#$2462,2(a0)
0000A99C 0028 0004 0001             		ori.b	#4,1(a0)
0000A9A2 117C 0000 0018             		move.b	#0,$18(a0)
0000A9A8 117C 0020 0019             		move.b	#$20,$19(a0)
0000A9AE 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A9B4                            
0000A9B4                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A9B4 6100                       		bsr.s	Obj7C_Collect
0000A9B6 3028 0008                  		move.w	8(a0),d0
0000A9BA 0240 FF80                  		andi.w	#$FF80,d0
0000A9BE 3238 F700                  		move.w	($FFFFF700).w,d1
0000A9C2 0441 0080                  		subi.w	#$80,d1
0000A9C6 0241 FF80                  		andi.w	#$FF80,d1
0000A9CA 9041                       		sub.w	d1,d0
0000A9CC 0C40 0280                  		cmpi.w	#$280,d0
0000A9D0 6200 0000                  		bhi.w	DeleteObject
0000A9D4 6000 0000                  		bra.w	DisplaySprite
0000A9D8                            
0000A9D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A9D8                            
0000A9D8                            
0000A9D8                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A9D8 5328 001E                  		subq.b	#1,$1E(a0)
0000A9DC 6A00                       		bpl.s	locret_9F76
0000A9DE 117C 0001 001E             		move.b	#1,$1E(a0)
0000A9E4 5228 001A                  		addq.b	#1,$1A(a0)
0000A9E8 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A9EE 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A9F0 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A9F6 6600                       		bne.s	locret_9F76	; if not, branch
0000A9F8 2268 003C                  		movea.l	$3C(a0),a1
0000A9FC 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000AA02 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000AA08 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000AA0E 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000AA12 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000AA16                            
0000AA16                            locret_9F76:
0000AA16 4E75                       		rts	
0000AA18                            ; ===========================================================================
0000AA18                            
0000AA18                            Obj7C_End:				; XREF: Obj7C_Collect
0000AA18 5428 0024                  		addq.b	#2,$24(a0)
0000AA1C 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000AA22 588F                       		addq.l	#4,sp
0000AA24 4E75                       		rts	
0000AA26                            ; End of function Obj7C_Collect
0000AA26                            
0000AA26                            ; ===========================================================================
0000AA26                            
0000AA26                            Obj7C_Delete:				; XREF: Obj7C_Index
0000AA26 6000 0000                  		bra.w	DeleteObject
0000AA2A                            ; ===========================================================================
0000AA2A                            Ani_obj25:
0000AA2A                            	include "_anim\obj25.asm"
0000AA2A                            ; ---------------------------------------------------------------------------
0000AA2A                            ; Animation script - ring
0000AA2A                            ; ---------------------------------------------------------------------------
0000AA2A 0000                       		dc.w byte_9F8C-Ani_obj25
0000AA2C 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000AA32                            		even
0000AA32                            		even
0000AA32                            
0000AA32                            ; ---------------------------------------------------------------------------
0000AA32                            ; Sprite mappings - rings
0000AA32                            ; ---------------------------------------------------------------------------
0000AA32                            Map_obj25:
0000AA32                            	include "_maps\obj25.asm"
0000AA32                            ; ---------------------------------------------------------------------------
0000AA32                            ; Sprite mappings - rings
0000AA32                            ; ---------------------------------------------------------------------------
0000AA32 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000AA36 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000AA3A 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000AA3E 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000AA42 01                         byte_9FA2:	dc.b 1
0000AA43 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000AA48 01                         byte_9FA8:	dc.b 1
0000AA49 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000AA4E 01                         byte_9FAE:	dc.b 1
0000AA4F F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000AA54 01                         byte_9FB4:	dc.b 1
0000AA55 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000AA5A 01                         byte_9FBA:	dc.b 1
0000AA5B F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000AA60 01                         byte_9FC0:	dc.b 1
0000AA61 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000AA66 01                         byte_9FC6:	dc.b 1
0000AA67 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000AA6C 01                         byte_9FCC:	dc.b 1
0000AA6D F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000AA72                            		even
0000AA72                            		even
0000AA72                            
0000AA72                            ; ---------------------------------------------------------------------------
0000AA72                            ; Sprite mappings - giant ring
0000AA72                            ; ---------------------------------------------------------------------------
0000AA72                            Map_obj4B:
0000AA72                            	include "_maps\obj4B.asm"
0000AA72                            ; ---------------------------------------------------------------------------
0000AA72                            ; Sprite mappings - giant ring
0000AA72                            ; ---------------------------------------------------------------------------
0000AA72 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000AA76 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000AA7A 0A                         byte_9FDA:	dc.b $A
0000AA7B E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000AA80 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000AA85 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000AA8A E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000AA8F F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000AA94 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000AA99 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000AA9E 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000AAA3 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000AAA8 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000AAAD 08                         byte_A00D:	dc.b 8
0000AAAE E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000AAB3 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000AAB8 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000AABD F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000AAC2 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000AAC7 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000AACC 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000AAD1 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000AAD6 04                         byte_A036:	dc.b 4
0000AAD7 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000AADC E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000AAE1 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000AAE6 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000AAEB 08                         byte_A04B:	dc.b 8
0000AAEC E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000AAF1 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000AAF6 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000AAFB F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000AB00 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000AB05 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000AB0A 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000AB0F 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000AB14                            		even
0000AB14                            		even
0000AB14                            
0000AB14                            ; ---------------------------------------------------------------------------
0000AB14                            ; Sprite mappings - flash effect when you collect the giant ring
0000AB14                            ; ---------------------------------------------------------------------------
0000AB14                            Map_obj7C:
0000AB14                            	include "_maps\obj7C.asm"
0000AB14                            ; ---------------------------------------------------------------------------
0000AB14                            ; Sprite mappings - flash effect when you collect the giant ring
0000AB14                            ; ---------------------------------------------------------------------------
0000AB14 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000AB18 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000AB1C 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000AB20 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000AB24 02                         byte_A084:	dc.b 2
0000AB25 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000AB2A 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000AB2F 04                         byte_A08F:	dc.b 4
0000AB30 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000AB35 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000AB3A 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000AB3F 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000AB44 04                         byte_A0A4:	dc.b 4
0000AB45 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000AB4A E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000AB4F 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000AB54 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000AB59 04                         byte_A0B9:	dc.b 4
0000AB5A E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000AB5F E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000AB64 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000AB69 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000AB6E 04                         byte_A0CE:	dc.b 4
0000AB6F E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000AB74 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000AB79 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000AB7E 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000AB83 04                         byte_A0E3:	dc.b 4
0000AB84 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000AB89 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000AB8E 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000AB93 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000AB98 02                         byte_A0F8:	dc.b 2
0000AB99 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000AB9E 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000ABA3 04                         byte_A103:	dc.b 4
0000ABA4 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000ABA9 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000ABAE 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000ABB3 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000ABB8                            		even
0000ABB8                            		even
0000ABB8                            
0000ABB8                            ; ===========================================================================
0000ABB8                            ; ---------------------------------------------------------------------------
0000ABB8                            ; Object 26 - monitors
0000ABB8                            ; ---------------------------------------------------------------------------
0000ABB8                            
0000ABB8                            Obj26:					; XREF: Obj_Index
0000ABB8 7000                       		moveq	#0,d0
0000ABBA 1028 0024                  		move.b	$24(a0),d0
0000ABBE 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000ABC2 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000ABC6                            ; ===========================================================================
0000ABC6 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000ABC8 0000                       		dc.w Obj26_Solid-Obj26_Index
0000ABCA 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000ABCC 0000                       		dc.w Obj26_Animate-Obj26_Index
0000ABCE 0000                       		dc.w Obj26_Display-Obj26_Index
0000ABD0                            ; ===========================================================================
0000ABD0                            
0000ABD0                            Obj26_Main:				; XREF: Obj26_Index
0000ABD0 5428 0024                  		addq.b	#2,$24(a0)
0000ABD4 117C 000E 0016             		move.b	#$E,$16(a0)
0000ABDA 117C 000E 0017             		move.b	#$E,$17(a0)
0000ABE0 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000ABE8 317C 0680 0002             		move.w	#$680,2(a0)
0000ABEE 117C 0004 0001             		move.b	#4,1(a0)
0000ABF4 117C 0003 0018             		move.b	#3,$18(a0)
0000ABFA 117C 000F 0019             		move.b	#$F,$19(a0)
0000AC00 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000AC04 7000                       		moveq	#0,d0
0000AC06 1028 0023                  		move.b	$23(a0),d0
0000AC0A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000AC10 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000AC16 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000AC18 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000AC1E 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000AC24 4E75                       		rts	
0000AC26                            ; ===========================================================================
0000AC26                            
0000AC26                            Obj26_NotBroken:			; XREF: Obj26_Main
0000AC26 117C 0046 0020             		move.b	#$46,$20(a0)
0000AC2C 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000AC32                            
0000AC32                            Obj26_Solid:				; XREF: Obj26_Index
0000AC32 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000AC36 6700                       		beq.s	loc_A1EC	; if not, branch
0000AC38 5500                       		subq.b	#2,d0
0000AC3A 6600                       		bne.s	Obj26_Fall
0000AC3C 7200                       		moveq	#0,d1
0000AC3E 1228 0019                  		move.b	$19(a0),d1
0000AC42 0641 000B                  		addi.w	#$B,d1
0000AC46 6100 D3FC                  		bsr.w	ExitPlatform
0000AC4A 0829 0003 0022             		btst	#3,$22(a1)
0000AC50 6600 0000                  		bne.w	loc_A1BC
0000AC54 4228 0025                  		clr.b	$25(a0)
0000AC58 6000 0000                  		bra.w	Obj26_Animate
0000AC5C                            ; ===========================================================================
0000AC5C                            
0000AC5C                            loc_A1BC:				; XREF: Obj26_Solid
0000AC5C 363C 0010                  		move.w	#$10,d3
0000AC60 3428 0008                  		move.w	8(a0),d2
0000AC64 6100 D93C                  		bsr.w	MvSonicOnPtfm
0000AC68 6000 0000                  		bra.w	Obj26_Animate
0000AC6C                            ; ===========================================================================
0000AC6C                            
0000AC6C                            Obj26_Fall:				; XREF: Obj26_Solid
0000AC6C 6100 0000                  		bsr.w	ObjectFall
0000AC70 4EB9 0000 0000             		jsr	ObjHitFloor
0000AC76 4A41                       		tst.w	d1
0000AC78 6A00 0000                  		bpl.w	Obj26_Animate
0000AC7C D368 000C                  		add.w	d1,$C(a0)
0000AC80 4268 0012                  		clr.w	$12(a0)
0000AC84 4228 0025                  		clr.b	$25(a0)
0000AC88 6000 0000                  		bra.w	Obj26_Animate
0000AC8C                            ; ===========================================================================
0000AC8C                            
0000AC8C                            loc_A1EC:				; XREF: Obj26_Solid
0000AC8C 323C 001A                  		move.w	#$1A,d1
0000AC90 343C 000F                  		move.w	#$F,d2
0000AC94 6100 0000                  		bsr.w	Obj26_SolidSides
0000AC98 6700 0000                  		beq.w	loc_A25C
0000AC9C 4A69 0012                  		tst.w	$12(a1)
0000ACA0 6B00                       		bmi.s	loc_A20A
0000ACA2 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000ACA8 6700                       		beq.s	loc_A25C	; if yes, branch
0000ACAA 0C29 001F 001C             		cmpi.b	#$1F,$1C(a1)	; is Sonic spin-dashing?
0000ACB0 6700                       		beq.s	loc_A25C	; if yes, branch
0000ACB2                            
0000ACB2                            loc_A20A:
0000ACB2 4A41                       		tst.w	d1
0000ACB4 6A00                       		bpl.s	loc_A220
0000ACB6 9769 000C                  		sub.w	d3,$C(a1)
0000ACBA 6100 D276                  		bsr.w	loc_74AE
0000ACBE 117C 0002 0025             		move.b	#2,$25(a0)
0000ACC4 6000 0000                  		bra.w	Obj26_Animate
0000ACC8                            ; ===========================================================================
0000ACC8                            
0000ACC8                            loc_A220:
0000ACC8 4A40                       		tst.w	d0
0000ACCA 6700 0000                  		beq.w	loc_A246
0000ACCE 6B00                       		bmi.s	loc_A230
0000ACD0 4A69 0010                  		tst.w	$10(a1)
0000ACD4 6B00                       		bmi.s	loc_A246
0000ACD6 6000                       		bra.s	loc_A236
0000ACD8                            ; ===========================================================================
0000ACD8                            
0000ACD8                            loc_A230:
0000ACD8 4A69 0010                  		tst.w	$10(a1)
0000ACDC 6A00                       		bpl.s	loc_A246
0000ACDE                            
0000ACDE                            loc_A236:
0000ACDE 9169 0008                  		sub.w	d0,8(a1)
0000ACE2 337C 0000 0014             		move.w	#0,$14(a1)
0000ACE8 337C 0000 0010             		move.w	#0,$10(a1)
0000ACEE                            
0000ACEE                            loc_A246:
0000ACEE 0829 0001 0022             		btst	#1,$22(a1)
0000ACF4 6600                       		bne.s	loc_A26A
0000ACF6 08E9 0005 0022             		bset	#5,$22(a1)
0000ACFC 08E8 0005 0022             		bset	#5,$22(a0)
0000AD02 6000                       		bra.s	Obj26_Animate
0000AD04                            ; ===========================================================================
0000AD04                            
0000AD04                            loc_A25C:
0000AD04 0828 0005 0022             		btst	#5,$22(a0)
0000AD0A 6700                       		beq.s	Obj26_Animate
0000AD0C 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
0000AD12 6700                       		beq.s	loc_A26A
0000AD14 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
0000AD1A 6700                       		beq.s	loc_A26A
0000AD1C 337C 0001 001C             		move.w	#1,$1C(a1)
0000AD22                            
0000AD22                            loc_A26A:
0000AD22 08A8 0005 0022             		bclr	#5,$22(a0)
0000AD28 08A9 0005 0022             		bclr	#5,$22(a1)
0000AD2E                            
0000AD2E                            Obj26_Animate:				; XREF: Obj26_Index
0000AD2E 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000AD34 6100 0000                  		bsr.w	AnimateSprite
0000AD38                            
0000AD38                            Obj26_Display:				; XREF: Obj26_Index
0000AD38 6100 0000                  		bsr.w	DisplaySprite
0000AD3C 3028 0008                  		move.w	8(a0),d0
0000AD40 0240 FF80                  		andi.w	#$FF80,d0
0000AD44 3238 F700                  		move.w	($FFFFF700).w,d1
0000AD48 0441 0080                  		subi.w	#$80,d1
0000AD4C 0241 FF80                  		andi.w	#$FF80,d1
0000AD50 9041                       		sub.w	d1,d0
0000AD52 0C40 0280                  		cmpi.w	#$280,d0
0000AD56 6200 0000                  		bhi.w	DeleteObject
0000AD5A 4E75                       		rts	
0000AD5C                            ; ===========================================================================
0000AD5C                            
0000AD5C                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000AD5C 5428 0024                  		addq.b	#2,$24(a0)
0000AD60 117C 0000 0020             		move.b	#0,$20(a0)
0000AD66 6100 0000                  		bsr.w	SingleObjLoad
0000AD6A 6600                       		bne.s	Obj26_Explode
0000AD6C 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000AD70 3368 0008 0008             		move.w	8(a0),8(a1)
0000AD76 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AD7C 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000AD82                            
0000AD82                            Obj26_Explode:
0000AD82 6100 0000                  		bsr.w	SingleObjLoad
0000AD86 6600                       		bne.s	Obj26_SetBroken
0000AD88 12BC 0027                  		move.b	#$27,0(a1)	; load explosion object
0000AD8C 5429 0024                  		addq.b	#2,$24(a1)
0000AD90 3368 0008 0008             		move.w	8(a0),8(a1)
0000AD96 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AD9C                            
0000AD9C                            Obj26_SetBroken:
0000AD9C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000ADA0 7000                       		moveq	#0,d0
0000ADA2 1028 0023                  		move.b	$23(a0),d0
0000ADA6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000ADAC 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000ADB2 6000 0000                  		bra.w	DisplaySprite
0000ADB6                            ; ===========================================================================
0000ADB6                            ; ---------------------------------------------------------------------------
0000ADB6                            ; Object 2E - contents of monitors
0000ADB6                            ; ---------------------------------------------------------------------------
0000ADB6                            
0000ADB6                            Obj2E:					; XREF: Obj_Index
0000ADB6 7000                       		moveq	#0,d0
0000ADB8 1028 0024                  		move.b	$24(a0),d0
0000ADBC 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000ADC0 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000ADC4 6000 0000                  		bra.w	DisplaySprite
0000ADC8                            ; ===========================================================================
0000ADC8 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000ADCA 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000ADCC 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000ADCE                            ; ===========================================================================
0000ADCE                            
0000ADCE                            Obj2E_Main:				; XREF: Obj2E_Index
0000ADCE 5428 0024                  		addq.b	#2,$24(a0)
0000ADD2 317C 0680 0002             		move.w	#$680,2(a0)
0000ADD8 117C 0024 0001             		move.b	#$24,1(a0)
0000ADDE 117C 0003 0018             		move.b	#3,$18(a0)
0000ADE4 117C 0008 0019             		move.b	#8,$19(a0)
0000ADEA 317C FD00 0012             		move.w	#-$300,$12(a0)
0000ADF0 7000                       		moveq	#0,d0
0000ADF2 1028 001C                  		move.b	$1C(a0),d0
0000ADF6 5400                       		addq.b	#2,d0
0000ADF8 1140 001A                  		move.b	d0,$1A(a0)
0000ADFC 227C 0000 0000             		movea.l	#Map_obj26,a1
0000AE02 D000                       		add.b	d0,d0
0000AE04 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000AE08 5249                       		addq.w	#1,a1
0000AE0A 2149 0004                  		move.l	a1,4(a0)
0000AE0E                            
0000AE0E                            Obj2E_Move:				; XREF: Obj2E_Index
0000AE0E 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000AE12 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000AE16 6100 0000                  		bsr.w	SpeedToPos
0000AE1A 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000AE20 4E75                       		rts	
0000AE22                            ; ===========================================================================
0000AE22                            
0000AE22                            Obj2E_ChkEggman:    ; XREF: Obj2E_Move
0000AE22 5428 0024                          addq.b    #2,$24(a0)
0000AE26 317C 001D 001E                     move.w    #29,$1E(a0)
0000AE2C 1028 001C                          move.b    $1C(a0),d0
0000AE30 0C00 0001                          cmpi.b    #1,d0; does monitor contain Eggman?
0000AE34 6600                               bne.s    Obj2E_ChkSonic ; if not, go and check for the next monitor type (1-up icon)
0000AE36 2248                               move.l    a0,a1 ; move a0 to a1, because Touch_ChkHurt wants the damaging object to be in a1
0000AE38 2F08                               move.l    a0,-(sp) ; push a0 on the stack, and decrement stack pointer
0000AE3A 41F8 D000                          lea    ($FFFFD000).w,a0 ; put Sonic's ram address in a0, because Touch_ChkHurt wants the damaged object to be in a0
0000AE3E 4EB9 0000 0000                     jsr    Sonic_CheckGoSuper ; run the Touch_ChkHurt routine
0000AE44 205F                               move.l    (sp)+,a0 ; pop the previous value of a0 from the stack, and increment stack pointer
0000AE46 4E75                               rts ; The Eggman monitor now does something!
0000AE48                            
0000AE48                            ; ===========================================================================
0000AE48                            
0000AE48                            Obj2E_ChkSonic:
0000AE48 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000AE4C 6600                       		bne.s	Obj2E_ChkShoes
0000AE4E                            
0000AE4E                            ExtraLife:
0000AE4E 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000AE52 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000AE56 303C 0088                  		move.w	#$88,d0
0000AE5A 4EF9 0000 1470             		jmp	(PlaySound).l	; play extra life music
0000AE60                            ; ===========================================================================
0000AE60                            
0000AE60                            Obj2E_ChkShoes:
0000AE60 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000AE64 6600                       		bne.s	Obj2E_ChkShield
0000AE66 0C38 0001 FE19             		cmpi.b #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
0000AE6C 6700 0000                                  beq Obj2E_NoMusic		
0000AE70 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000AE76 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000AE7C 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000AE82 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000AE88 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000AE8E 303C 009E                  		move.w	#$9E,d0
0000AE92 4EF9 0000 1470             		jmp	(PlaySound).l	; Speed	up the music
0000AE98                            ; ===========================================================================
0000AE98                            
0000AE98                            Obj2E_ChkShield:
0000AE98 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000AE9C 6600                       		bne.s	Obj2E_ChkInvinc
0000AE9E 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000AEA4 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000AEAA 303C 00AF                  		move.w	#$AF,d0
0000AEAE 4EF9 0000 1470             		jmp	(PlaySound).l	; play shield sound
0000AEB4                            ; ===========================================================================
0000AEB4                            
0000AEB4                            Obj2E_ChkInvinc:
0000AEB4 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000AEB8 6600                       		bne.s	Obj2E_ChkRings
0000AEBA 0C38 0001 FE19             		cmpi.b #1,(Super_Sonic_Flag).w ; Prevent Sonic from getting (invincibility, shoes) if Super
0000AEC0 6700 0000                                  beq Obj2E_NoMusic		
0000AEC4 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000AECA 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000AED0 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000AED6 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000AEDC 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000AEE2 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000AEE8 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000AEEE 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000AEF4 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000AEFA 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000AF00 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000AF04 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000AF06 303C 0087                  		move.w	#$87,d0
0000AF0A 4EF9 0000 1470             		jmp	(PlaySound).l	; play invincibility music
0000AF10                            ; ===========================================================================
0000AF10                            
0000AF10                            Obj2E_NoMusic:
0000AF10 4E75                       		rts	
0000AF12                            ; ===========================================================================
0000AF12                            
0000AF12                            Obj2E_ChkRings:
0000AF12 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000AF16 6600                       		bne.s	Obj2E_ChkS
0000AF18 0678 004A FE20             		addi.w	#$4A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000AF1E 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000AF24 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000AF2A 6500                       		bcs.s	Obj2E_RingSound
0000AF2C 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000AF32 6700 FF1A                  		beq.w	ExtraLife
0000AF36 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000AF3C 6500                       		bcs.s	Obj2E_RingSound
0000AF3E 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000AF44 6700 FF08                  		beq.w	ExtraLife
0000AF48                            
0000AF48                            Obj2E_RingSound:
0000AF48 303C 00B5                  		move.w	#$B5,d0
0000AF4C 4EF9 0000 1470             		jmp	(PlaySound).l	; play ring sound
0000AF52                            ; ===========================================================================
0000AF52                            
0000AF52                            Obj2E_ChkS:
0000AF52 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000AF56 6600                       		bne.s	Obj2E_ChkEnd
0000AF58 4E71                       		nop	
0000AF5A                            
0000AF5A                            Obj2E_ChkEnd:
0000AF5A 4E75                       		rts			; 'S' and goggles monitors do nothing
0000AF5C                            ; ===========================================================================
0000AF5C                            
0000AF5C                            Obj2E_Delete:				; XREF: Obj2E_Index
0000AF5C 5368 001E                  		subq.w	#1,$1E(a0)
0000AF60 6B00 0000                  		bmi.w	DeleteObject
0000AF64 4E75                       		rts	
0000AF66                            ; ---------------------------------------------------------------------------
0000AF66                            ; Subroutine to	make the sides of a monitor solid
0000AF66                            ; ---------------------------------------------------------------------------
0000AF66                            
0000AF66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AF66                            
0000AF66                            
0000AF66                            Obj26_SolidSides:			; XREF: loc_A1EC
0000AF66 43F8 D000                  		lea	($FFFFD000).w,a1
0000AF6A 3029 0008                  		move.w	8(a1),d0
0000AF6E 9068 0008                  		sub.w	8(a0),d0
0000AF72 D041                       		add.w	d1,d0
0000AF74 6B00                       		bmi.s	loc_A4E6
0000AF76 3601                       		move.w	d1,d3
0000AF78 D643                       		add.w	d3,d3
0000AF7A B043                       		cmp.w	d3,d0
0000AF7C 6200                       		bhi.s	loc_A4E6
0000AF7E 1629 0016                  		move.b	$16(a1),d3
0000AF82 4883                       		ext.w	d3
0000AF84 D443                       		add.w	d3,d2
0000AF86 3629 000C                  		move.w	$C(a1),d3
0000AF8A 9668 000C                  		sub.w	$C(a0),d3
0000AF8E D642                       		add.w	d2,d3
0000AF90 6B00                       		bmi.s	loc_A4E6
0000AF92 D442                       		add.w	d2,d2
0000AF94 B642                       		cmp.w	d2,d3
0000AF96 6400                       		bcc.s	loc_A4E6
0000AF98 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000AF9C 6B00                       		bmi.s	loc_A4E6
0000AF9E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000AFA4 6400                       		bcc.s	loc_A4E6
0000AFA6 4A78 FE08                  		tst.w	($FFFFFE08).w
0000AFAA 6600                       		bne.s	loc_A4E6
0000AFAC B240                       		cmp.w	d0,d1
0000AFAE 6400                       		bcc.s	loc_A4DC
0000AFB0 D241                       		add.w	d1,d1
0000AFB2 9041                       		sub.w	d1,d0
0000AFB4                            
0000AFB4                            loc_A4DC:
0000AFB4 0C43 0010                  		cmpi.w	#$10,d3
0000AFB8 6500                       		bcs.s	loc_A4EA
0000AFBA                            
0000AFBA                            loc_A4E2:
0000AFBA 7201                       		moveq	#1,d1
0000AFBC 4E75                       		rts	
0000AFBE                            ; ===========================================================================
0000AFBE                            
0000AFBE                            loc_A4E6:
0000AFBE 7200                       		moveq	#0,d1
0000AFC0 4E75                       		rts	
0000AFC2                            ; ===========================================================================
0000AFC2                            
0000AFC2                            loc_A4EA:
0000AFC2 7200                       		moveq	#0,d1
0000AFC4 1228 0019                  		move.b	$19(a0),d1
0000AFC8 5841                       		addq.w	#4,d1
0000AFCA 3401                       		move.w	d1,d2
0000AFCC D442                       		add.w	d2,d2
0000AFCE D269 0008                  		add.w	8(a1),d1
0000AFD2 9268 0008                  		sub.w	8(a0),d1
0000AFD6 6BE2                       		bmi.s	loc_A4E2
0000AFD8 B242                       		cmp.w	d2,d1
0000AFDA 64DE                       		bcc.s	loc_A4E2
0000AFDC 72FF                       		moveq	#-1,d1
0000AFDE 4E75                       		rts	
0000AFE0                            ; End of function Obj26_SolidSides
0000AFE0                            
0000AFE0                            ; ===========================================================================
0000AFE0                            Ani_obj26:
0000AFE0                            	include "_anim\obj26.asm"
0000AFE0                            ; ---------------------------------------------------------------------------
0000AFE0                            ; Animation script - monitors
0000AFE0                            ; ---------------------------------------------------------------------------
0000AFE0 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000AFE6 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000AFEC 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000AFF2 0000                       		dc.w byte_A582-Ani_obj26
0000AFF4 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000AFFA 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000B006 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000B012 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000B01E 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000B02A 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000B036 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000B042 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000B04E 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000B05A 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000B062                            		even
0000B062                            		even
0000B062                            
0000B062                            ; ---------------------------------------------------------------------------
0000B062                            ; Sprite mappings - monitors
0000B062                            ; ---------------------------------------------------------------------------
0000B062                            Map_obj26:
0000B062                            	include "_maps\obj26.asm"
0000B062                            ; ---------------------------------------------------------------------------
0000B062                            ; Sprite mappings - monitors (Optimized) Ported by -paranoimia-
0000B062                            ; ---------------------------------------------------------------------------
0000B062 0000 0000                  		dc.w byte_A5A2-Map_obj26, byte_A5A8-Map_obj26
0000B066 0000 0000                  		dc.w byte_A5B3-Map_obj26, byte_A5BE-Map_obj26
0000B06A 0000 0000                  		dc.w byte_A5C9-Map_obj26, byte_A5D4-Map_obj26
0000B06E 0000 0000                  		dc.w byte_A5DF-Map_obj26, byte_A5EA-Map_obj26
0000B072 0000 0000                  		dc.w byte_A5F5-Map_obj26, byte_A600-Map_obj26
0000B076 0000 0000                  		dc.w byte_A60B-Map_obj26, byte_A616-Map_obj26
0000B07A 01                         byte_A5A2:	dc.b 1			; static monitor
0000B07B EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B080 02                         byte_A5A8:	dc.b 2			; static monitor
0000B081 F505 0010 F8               		dc.b $F5, 5, 0,	$10, $F8
0000B086 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B08B 02                         byte_A5B3:	dc.b 2			; static monitor
0000B08C F505 0014 F8               		dc.b $F5, 5, 0,	$14, $F8
0000B091 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B096 02                         byte_A5BE:	dc.b 2			; Eggman monitor
0000B097 F505 0018 F8               		dc.b $F5, 5, 0,	$18, $F8
0000B09C EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0A1 02                         byte_A5C9:	dc.b 2			; Sonic	monitor
0000B0A2 F505 001C F8               		dc.b $F5, 5, 0,	$1C, $F8
0000B0A7 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0AC 02                         byte_A5D4:	dc.b 2			; speed	shoes monitor
0000B0AD F505 0024 F8               		dc.b $F5, 5, 0,	$24, $F8
0000B0B2 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0B7 02                         byte_A5DF:	dc.b 2			; shield monitor
0000B0B8 F505 0028 F8               		dc.b $F5, 5, 0,	$28, $F8
0000B0BD EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0C2 02                         byte_A5EA:	dc.b 2			; invincibility	monitor
0000B0C3 F505 002C F8               		dc.b $F5, 5, 0,	$2C, $F8
0000B0C8 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0CD 02                         byte_A5F5:	dc.b 2			; 10 rings monitor
0000B0CE F505 0020 F8               		dc.b $F5, 5, 0,	$20, $F8
0000B0D3 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0D8 02                         byte_A600:	dc.b 2			; 'S' monitor
0000B0D9 F505 003C F8               		dc.b $F5, 5, 0,	$3C, $F8
0000B0DE EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0E3 02                         byte_A60B:	dc.b 2			; goggles monitor
0000B0E4 F505 0038 F8               		dc.b $F5, 5, 0,	$38, $F8
0000B0E9 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000B0EE 01                         byte_A616:	dc.b 1			; broken monitor
0000B0EF FF0D 0030 F0               		dc.b $FF, $D, 0, $30, $F0
0000B0F4                            		even
0000B0F4                            		even
0000B0F4                            
0000B0F4                            ; ===========================================================================
0000B0F4                            ; ---------------------------------------------------------------------------
0000B0F4                            ; Object 0E - Sonic on the title screen
0000B0F4                            ; ---------------------------------------------------------------------------
0000B0F4                            
0000B0F4                            Obj0E:					; XREF: Obj_Index
0000B0F4 7000                       		moveq	#0,d0
0000B0F6 1028 0024                  		move.b	$24(a0),d0
0000B0FA 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000B0FE 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000B102                            ; ===========================================================================
0000B102 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000B104 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000B106 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000B108 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000B10A                            ; ===========================================================================
0000B10A                            
0000B10A                            Obj0E_Main:				; XREF: Obj0E_Index
0000B10A 5428 0024                  		addq.b	#2,$24(a0)
0000B10E 317C 00F8 0008             		move.w	#$F8,8(a0)
0000B114 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000B11A 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000B122 317C 2300 0002             		move.w	#$2300,2(a0)
0000B128 117C 0001 0018             		move.b	#1,$18(a0)
0000B12E 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000B134 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B13A 6100 0000                  		bsr.w	AnimateSprite
0000B13E                            
0000B13E                            Obj0E_Delay:				; XREF: Obj0E_Index
0000B13E 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000B142 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000B144 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000B148 6000 0000                  		bra.w	DisplaySprite
0000B14C                            ; ===========================================================================
0000B14C                            
0000B14C                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000B14C 4E75                       		rts	
0000B14E                            ; ===========================================================================
0000B14E                            
0000B14E                            Obj0E_Move:				; XREF: Obj0E_Index
0000B14E 5168 000A                  		subq.w	#8,$A(a0)
0000B152 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000B158 6600                       		bne.s	Obj0E_Display
0000B15A 5428 0024                  		addq.b	#2,$24(a0)
0000B15E                            
0000B15E                            Obj0E_Display:
0000B15E 6000 0000                  		bra.w	DisplaySprite
0000B162                            ; ===========================================================================
0000B162 4E75                       		rts	
0000B164                            ; ===========================================================================
0000B164                            
0000B164                            Obj0E_Animate:				; XREF: Obj0E_Index
0000B164 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B16A 6100 0000                  		bsr.w	AnimateSprite
0000B16E 6000 0000                  		bra.w	DisplaySprite
0000B172                            ; ===========================================================================
0000B172 4E75                       		rts	
0000B174                            ; ===========================================================================
0000B174                            ; ---------------------------------------------------------------------------
0000B174                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000B174                            ; ---------------------------------------------------------------------------
0000B174                            
0000B174                            Obj0F:					; XREF: Obj_Index
0000B174 7000                       		moveq	#0,d0
0000B176 1028 0024                  		move.b	$24(a0),d0
0000B17A 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000B17E 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000B182 6000 0000                  		bra.w	DisplaySprite
0000B186                            ; ===========================================================================
0000B186 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000B188 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000B18A 0000                       		dc.w locret_A6F8-Obj0F_Index
0000B18C                            ; ===========================================================================
0000B18C                            
0000B18C                            Obj0F_Main:				; XREF: Obj0F_Index
0000B18C 5428 0024                  		addq.b	#2,$24(a0)
0000B190 317C 00D8 0008             		move.w	#$D8,8(a0)
0000B196 317C 0130 000A             		move.w	#$130,$A(a0)
0000B19C 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000B1A4 317C 0200 0002             		move.w	#$200,2(a0)
0000B1AA 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000B1B0 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000B1B2 5428 0024                  		addq.b	#2,$24(a0)
0000B1B6 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000B1BC 6600                       		bne.s	locret_A6F8	; if not, branch
0000B1BE 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000B1C4 317C 0178 0008             		move.w	#$178,8(a0)
0000B1CA 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000B1D0                            
0000B1D0                            locret_A6F8:				; XREF: Obj0F_Index
0000B1D0 4E75                       		rts	
0000B1D2                            ; ===========================================================================
0000B1D2                            
0000B1D2                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000B1D2 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000B1D8 6000 0000                  		bra.w	AnimateSprite
0000B1DC                            ; ===========================================================================
0000B1DC                            Ani_obj0E:
0000B1DC                            	include "_anim\obj0E.asm"
0000B1DC                            ; ---------------------------------------------------------------------------
0000B1DC                            ; Animation script - Sonic on the title screen
0000B1DC                            ; ---------------------------------------------------------------------------
0000B1DC 0000                       		dc.w byte_A706-Ani_obj0E
0000B1DE 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000B1EA                            		even
0000B1EA                            		even
0000B1EA                            
0000B1EA                            Ani_obj0F:
0000B1EA                            	include "_anim\obj0F.asm"
0000B1EA                            ; ---------------------------------------------------------------------------
0000B1EA                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000B1EA                            ; ---------------------------------------------------------------------------
0000B1EA 0000                       		dc.w byte_A714-Ani_obj0F
0000B1EC 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000B1F0                            		even
0000B1F0                            		even
0000B1F0                            
0000B1F0                            ; ---------------------------------------------------------------------------
0000B1F0                            ; Subroutine to	animate	a sprite using an animation script
0000B1F0                            ; ---------------------------------------------------------------------------
0000B1F0                            
0000B1F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B1F0                            
0000B1F0                            
0000B1F0                            AnimateSprite:
0000B1F0 7000                       		moveq	#0,d0
0000B1F2 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000B1F6 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000B1FA 6700                       		beq.s	Anim_Run	; if not, branch
0000B1FC 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000B200 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B206 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000B20C                            
0000B20C                            Anim_Run:
0000B20C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000B210 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000B212 D040                       		add.w	d0,d0
0000B214 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000B218 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000B21C 7200                       		moveq	#0,d1
0000B21E 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000B222 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000B226 0C00 00FA                  		cmp.b	#$FA,d0					; MJ: is it a flag from FA to FF?
0000B22A 6400 0000                  		bhs	Anim_End_FF				; MJ: if so, branch to flag routines
0000B22E                            
0000B22E                            Anim_Next:
0000B22E 1200                       		move.b	d0,d1
0000B230 0200 001F                  		andi.b	#$1F,d0
0000B234 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000B238 1028 0022                  		move.b	$22(a0),d0
0000B23C E719                       		rol.b	#3,d1
0000B23E B101                       		eor.b	d0,d1
0000B240 0201 0003                  		andi.b	#3,d1
0000B244 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000B24A 8328 0001                  		or.b	d1,1(a0)
0000B24E 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000B252                            
0000B252                            Anim_Wait:
0000B252 4E75                       		rts	
0000B254                            ; ===========================================================================
0000B254                            
0000B254                            Anim_End_FF:
0000B254 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000B256 6600                       		bne.s	Anim_End_FE	; if not, branch
0000B258 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000B25E 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000B262 60CA                       		bra.s	Anim_Next
0000B264                            ; ===========================================================================
0000B264                            
0000B264                            Anim_End_FE:
0000B264 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000B266 6600                       		bne.s	Anim_End_FD	; if not, branch
0000B268 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000B26C 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000B270 9200                       		sub.b	d0,d1
0000B272 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000B276 60B6                       		bra.s	Anim_Next
0000B278                            ; ===========================================================================
0000B278                            
0000B278                            Anim_End_FD:
0000B278 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000B27A 6600                       		bne.s	Anim_End_FC	; if not, branch
0000B27C 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000B282                            
0000B282                            Anim_End_FC:
0000B282 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000B284 6600                       		bne.s	Anim_End_FB	; if not, branch
0000B286 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000B28A                            
0000B28A                            Anim_End_FB:
0000B28A 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000B28C 6600                       		bne.s	Anim_End_FA	; if not, branch
0000B28E 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B294 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000B298                            
0000B298                            Anim_End_FA:
0000B298 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000B29A 6600                       		bne.s	Anim_End	; if not, branch
0000B29C 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000B2A0                            
0000B2A0                            Anim_End:
0000B2A0 4E75                       		rts	
0000B2A2                            ; End of function AnimateSprite
0000B2A2                            
0000B2A2                            ; ===========================================================================
0000B2A2                            ; ---------------------------------------------------------------------------
0000B2A2                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B2A2                            ; ---------------------------------------------------------------------------
0000B2A2                            Map_obj0F:
0000B2A2                            	include "_maps\obj0F.asm"
0000B2A2                            ; ---------------------------------------------------------------------------
0000B2A2                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B2A2                            ; ---------------------------------------------------------------------------
0000B2A2 0000                       		dc.w byte_A7CD-Map_obj0F
0000B2A4 0000                       		dc.w byte_A7CC-Map_obj0F
0000B2A6 0000                       		dc.w byte_A7EB-Map_obj0F
0000B2A8 0000                       		dc.w byte_A882-Map_obj0F
0000B2AA 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000B2AB 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000B2B0 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000B2B5 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000B2BA 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000B2BF 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000B2C4 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000B2C9 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000B2CA B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B2CF B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B2D4 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B2D9 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B2DE B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B2E3 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B2E8 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B2ED B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B2F2 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B2F7 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B2FC D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B301 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B306 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B30B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B310 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B315 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B31A D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B31F D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B324 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B329 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B32E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B333 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B338 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B33D F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B342 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B347 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B34C F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B351 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B356 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B35B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B360 01                         byte_A882:	dc.b 1			; "TM"
0000B361 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000B366                            		even
0000B366                            		even
0000B366                            
0000B366                            ; ---------------------------------------------------------------------------
0000B366                            ; Sprite mappings - Sonic on the title screen
0000B366                            ; ---------------------------------------------------------------------------
0000B366                            Map_obj0E:
0000B366                            	include "_maps\obj0E.asm"
0000B366                            ; ---------------------------------------------------------------------------
0000B366                            ; Sprite mappings - Sonic on the title screen
0000B366                            ; ---------------------------------------------------------------------------
0000B366 0000                       		dc.w byte_A898-Map_obj0E
0000B368 0000                       		dc.w byte_A8CB-Map_obj0E
0000B36A 0000                       		dc.w byte_A917-Map_obj0E
0000B36C 0000                       		dc.w byte_A96D-Map_obj0E
0000B36E 0000                       		dc.w byte_A9AF-Map_obj0E
0000B370 0000                       		dc.w byte_A9E7-Map_obj0E
0000B372 0000                       		dc.w byte_AA47-Map_obj0E
0000B374 0000                       		dc.w byte_AAB1-Map_obj0E
0000B376 0A                         byte_A898:	dc.b $A
0000B377 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000B37C 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000B381 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000B386 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000B38B 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000B390 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000B395 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000B39A 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000B39F 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000B3A4 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000B3A9 0F                         byte_A8CB:	dc.b $F
0000B3AA 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000B3AF 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000B3B4 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000B3B9 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000B3BE 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000B3C3 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000B3C8 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000B3CD 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000B3D2 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000B3D7 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000B3DC 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000B3E1 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000B3E6 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000B3EB 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000B3F0 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000B3F5 11                         byte_A917:	dc.b $11
0000B3F6 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000B3FB 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000B400 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000B405 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000B40A 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000B40F 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000B414 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000B419 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000B41E 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000B423 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000B428 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000B42D 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000B432 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000B437 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000B43C 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000B441 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000B446 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000B44B 0D                         byte_A96D:	dc.b $D
0000B44C 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000B451 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000B456 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000B45B 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000B460 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000B465 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000B46A 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000B46F 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000B474 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000B479 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000B47E 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000B483 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000B488 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000B48D 0B                         byte_A9AF:	dc.b $B
0000B48E 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000B493 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000B498 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000B49D 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000B4A2 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000B4A7 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000B4AC 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000B4B1 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000B4B6 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000B4BB 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000B4C0 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000B4C5 13                         byte_A9E7:	dc.b $13
0000B4C6 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000B4CB 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000B4D0 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000B4D5 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000B4DA 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000B4DF 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000B4E4 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000B4E9 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000B4EE 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000B4F3 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000B4F8 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000B4FD 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000B502 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000B507 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000B50C 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000B511 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000B516 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000B51B 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000B520 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000B525 15                         byte_AA47:	dc.b $15
0000B526 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000B52B 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000B530 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000B535 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000B53A 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000B53F 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000B544 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000B549 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000B54E 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000B553 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000B558 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000B55D 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000B562 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000B567 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000B56C 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000B571 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000B576 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000B57B 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000B580 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000B585 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000B58A 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000B58F 16                         byte_AAB1:	dc.b $16
0000B590 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000B595 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000B59A 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000B59F 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000B5A4 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000B5A9 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000B5AE 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000B5B3 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000B5B8 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000B5BD 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000B5C2 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000B5C7 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000B5CC 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000B5D1 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000B5D6 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000B5DB 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000B5E0 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000B5E5 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000B5EA 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000B5EF 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000B5F4 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000B5F9 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000B5FE                            		even
0000B5FE                            		even
0000B5FE                            
0000B5FE                            ; ===========================================================================
0000B5FE                            ; ---------------------------------------------------------------------------
0000B5FE                            ; Object 2B - Chopper enemy (GHZ)
0000B5FE                            ; ---------------------------------------------------------------------------
0000B5FE                            
0000B5FE                            Obj2B:					; XREF: Obj_Index
0000B5FE 7000                       		moveq	#0,d0
0000B600 1028 0024                  		move.b	$24(a0),d0
0000B604 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B608 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B60C 6000 0000                  		bra.w	MarkObjGone
0000B610                            ; ===========================================================================
0000B610 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B612 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B614                            ; ===========================================================================
0000B614                            
0000B614                            Obj2B_Main:				; XREF: Obj2B_Index
0000B614 5428 0024                  		addq.b	#2,$24(a0)
0000B618 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B620 317C 047B 0002             		move.w	#$47B,2(a0)
0000B626 117C 0004 0001             		move.b	#4,1(a0)
0000B62C 117C 0004 0018             		move.b	#4,$18(a0)
0000B632 117C 0009 0020             		move.b	#9,$20(a0)
0000B638 117C 0010 0019             		move.b	#$10,$19(a0)
0000B63E 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B644 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B64A                            
0000B64A                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B64A 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B650 6100 FB9E                  		bsr.w	AnimateSprite
0000B654 6100 0000                  		bsr.w	SpeedToPos
0000B658 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B65E 3028 0030                  		move.w	$30(a0),d0
0000B662 B068 000C                  		cmp.w	$C(a0),d0
0000B666 6400                       		bcc.s	Obj2B_ChgAni
0000B668 3140 000C                  		move.w	d0,$C(a0)
0000B66C 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B672                            
0000B672                            Obj2B_ChgAni:
0000B672 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B678 0440 00C0                  		subi.w	#$C0,d0
0000B67C B068 000C                  		cmp.w	$C(a0),d0
0000B680 6400                       		bcc.s	locret_ABB6
0000B682 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B688 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B68C 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B68E 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B694                            
0000B694                            locret_ABB6:
0000B694 4E75                       		rts	
0000B696                            ; ===========================================================================
0000B696                            Ani_obj2B:
0000B696                            	include "_anim\obj2B.asm"
0000B696                            ; ---------------------------------------------------------------------------
0000B696                            ; Animation script - Chopper enemy
0000B696                            ; ---------------------------------------------------------------------------
0000B696 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B698 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B69A 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B69C 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B6A0 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B6A4 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B6A8 00                         		even
0000B6A8 00                         		even
0000B6A8                            
0000B6A8                            ; ---------------------------------------------------------------------------
0000B6A8                            ; Sprite mappings - Chopper enemy (GHZ)
0000B6A8                            ; ---------------------------------------------------------------------------
0000B6A8                            Map_obj2B:
0000B6A8                            	include "_maps\obj2B.asm"
0000B6A8                            ; ---------------------------------------------------------------------------
0000B6A8                            ; Sprite mappings - Chopper enemy (GHZ)
0000B6A8                            ; ---------------------------------------------------------------------------
0000B6A8 0000                       		dc.w byte_ABCE-Map_obj2B
0000B6AA 0000                       		dc.w byte_ABD4-Map_obj2B
0000B6AC 01                         byte_ABCE:	dc.b 1
0000B6AD F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000B6B2 01                         byte_ABD4:	dc.b 1
0000B6B3 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000B6B8                            		even
0000B6B8                            		even
0000B6B8                            
0000B6B8                            ; ===========================================================================
0000B6B8                            ; ---------------------------------------------------------------------------
0000B6B8                            ; Object 2C - Jaws enemy (LZ)
0000B6B8                            ; ---------------------------------------------------------------------------
0000B6B8                            
0000B6B8                            Obj2C:					; XREF: Obj_Index
0000B6B8 7000                       		moveq	#0,d0
0000B6BA 1028 0024                  		move.b	$24(a0),d0
0000B6BE 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B6C2 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B6C6                            ; ===========================================================================
0000B6C6 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B6C8 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B6CA                            ; ===========================================================================
0000B6CA                            
0000B6CA                            Obj2C_Main:				; XREF: Obj2C_Index
0000B6CA 5428 0024                  		addq.b	#2,$24(a0)
0000B6CE 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B6D6 317C 2486 0002             		move.w	#$2486,2(a0)
0000B6DC 0028 0004 0001             		ori.b	#4,1(a0)
0000B6E2 117C 000A 0020             		move.b	#$A,$20(a0)
0000B6E8 117C 0004 0018             		move.b	#4,$18(a0)
0000B6EE 117C 0010 0019             		move.b	#$10,$19(a0)
0000B6F4 7000                       		moveq	#0,d0
0000B6F6 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B6FA ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B6FC 5340                       		subq.w	#1,d0
0000B6FE 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B702 3140 0032                  		move.w	d0,$32(a0)
0000B706 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B70C 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B712 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B714 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B718                            
0000B718                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B718 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B71C 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B71E 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B724 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B728 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B72E 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B734                            
0000B734                            Obj2C_Animate:
0000B734 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B73A 6100 FAB4                  		bsr.w	AnimateSprite
0000B73E 6100 0000                  		bsr.w	SpeedToPos
0000B742 6000 0000                  		bra.w	MarkObjGone
0000B746                            ; ===========================================================================
0000B746                            Ani_obj2C:
0000B746                            	include "_anim\obj2C.asm"
0000B746                            ; ---------------------------------------------------------------------------
0000B746                            ; Animation script - Jaws enemy
0000B746                            ; ---------------------------------------------------------------------------
0000B746 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B748 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B74E                            		even
0000B74E                            		even
0000B74E                            
0000B74E                            ; ---------------------------------------------------------------------------
0000B74E                            ; Sprite mappings - Jaws enemy (LZ)
0000B74E                            ; ---------------------------------------------------------------------------
0000B74E                            Map_obj2C:
0000B74E                            	include "_maps\obj2C.asm"
0000B74E                            ; ---------------------------------------------------------------------------
0000B74E                            ; Sprite mappings - Jaws enemy (LZ)
0000B74E                            ; ---------------------------------------------------------------------------
0000B74E 0000                       		dc.w byte_AC78-Map_obj2C
0000B750 0000                       		dc.w byte_AC83-Map_obj2C
0000B752 0000                       		dc.w byte_AC8E-Map_obj2C
0000B754 0000                       		dc.w byte_AC99-Map_obj2C
0000B756 02                         byte_AC78:	dc.b 2
0000B757 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B75C F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B761 02                         byte_AC83:	dc.b 2
0000B762 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B767 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B76C 02                         byte_AC8E:	dc.b 2
0000B76D F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B772 F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B777 02                         byte_AC99:	dc.b 2
0000B778 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B77D F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B782                            		even
0000B782                            		even
0000B782                            
0000B782                            ; ===========================================================================
0000B782                            ; ---------------------------------------------------------------------------
0000B782                            ; Object 2D - Burrobot enemy (LZ)
0000B782                            ; ---------------------------------------------------------------------------
0000B782                            
0000B782                            Obj2D:					; XREF: Obj_Index
0000B782 7000                       		moveq	#0,d0
0000B784 1028 0024                  		move.b	$24(a0),d0
0000B788 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B78C 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B790                            ; ===========================================================================
0000B790 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B792 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B794                            ; ===========================================================================
0000B794                            
0000B794                            Obj2D_Main:				; XREF: Obj2D_Index
0000B794 5428 0024                  		addq.b	#2,$24(a0)
0000B798 117C 0013 0016             		move.b	#$13,$16(a0)
0000B79E 117C 0008 0017             		move.b	#8,$17(a0)
0000B7A4 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B7AC 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B7B2 0028 0004 0001             		ori.b	#4,1(a0)
0000B7B8 117C 0004 0018             		move.b	#4,$18(a0)
0000B7BE 117C 0005 0020             		move.b	#5,$20(a0)
0000B7C4 117C 000C 0019             		move.b	#$C,$19(a0)
0000B7CA 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B7CE 117C 0002 001C             		move.b	#2,$1C(a0)
0000B7D4                            
0000B7D4                            Obj2D_Action:				; XREF: Obj2D_Index
0000B7D4 7000                       		moveq	#0,d0
0000B7D6 1028 0025                  		move.b	$25(a0),d0
0000B7DA 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B7DE 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B7E2 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B7E8 6100 FA06                  		bsr.w	AnimateSprite
0000B7EC 6000 0000                  		bra.w	MarkObjGone
0000B7F0                            ; ===========================================================================
0000B7F0 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B7F2 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B7F4 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B7F6 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B7F8                            ; ===========================================================================
0000B7F8                            
0000B7F8                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B7F8 5368 0030                  		subq.w	#1,$30(a0)
0000B7FC 6A00                       		bpl.s	locret_AD42
0000B7FE 5428 0025                  		addq.b	#2,$25(a0)
0000B802 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B808 317C 0080 0010             		move.w	#$80,$10(a0)
0000B80E 117C 0001 001C             		move.b	#1,$1C(a0)
0000B814 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B81A 6700                       		beq.s	locret_AD42
0000B81C 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B820                            
0000B820                            locret_AD42:
0000B820 4E75                       		rts	
0000B822                            ; ===========================================================================
0000B822                            
0000B822                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B822 5368 0030                  		subq.w	#1,$30(a0)
0000B826 6B00                       		bmi.s	loc_AD84
0000B828 6100 0000                  		bsr.w	SpeedToPos
0000B82C 0868 0000 0032             		bchg	#0,$32(a0)
0000B832 6600                       		bne.s	loc_AD78
0000B834 3628 0008                  		move.w	8(a0),d3
0000B838 0643 000C                  		addi.w	#$C,d3
0000B83C 0828 0000 0022             		btst	#0,$22(a0)
0000B842 6600                       		bne.s	loc_AD6A
0000B844 0443 0018                  		subi.w	#$18,d3
0000B848                            
0000B848                            loc_AD6A:
0000B848 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B84E 0C41 000C                  		cmpi.w	#$C,d1
0000B852 6C00                       		bge.s	loc_AD84
0000B854 4E75                       		rts	
0000B856                            ; ===========================================================================
0000B856                            
0000B856                            loc_AD78:				; XREF: Obj2D_Move
0000B856 4EB9 0000 0000             		jsr	ObjHitFloor
0000B85C D368 000C                  		add.w	d1,$C(a0)
0000B860 4E75                       		rts	
0000B862                            ; ===========================================================================
0000B862                            
0000B862                            loc_AD84:				; XREF: Obj2D_Move
0000B862 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B868 6700                       		beq.s	loc_ADA4
0000B86A 5528 0025                  		subq.b	#2,$25(a0)
0000B86E 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B874 317C 0000 0010             		move.w	#0,$10(a0)
0000B87A 117C 0000 001C             		move.b	#0,$1C(a0)
0000B880 4E75                       		rts	
0000B882                            ; ===========================================================================
0000B882                            
0000B882                            loc_ADA4:
0000B882 5428 0025                  		addq.b	#2,$25(a0)
0000B886 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B88C 117C 0002 001C             		move.b	#2,$1C(a0)
0000B892 4E75                       		rts	
0000B894                            ; ===========================================================================
0000B894                            
0000B894                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B894 6100 0000                  		bsr.w	SpeedToPos
0000B898 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B89E 6B00                       		bmi.s	locret_ADF0
0000B8A0 117C 0003 001C             		move.b	#3,$1C(a0)
0000B8A6 4EB9 0000 0000             		jsr	ObjHitFloor
0000B8AC 4A41                       		tst.w	d1
0000B8AE 6A00                       		bpl.s	locret_ADF0
0000B8B0 D368 000C                  		add.w	d1,$C(a0)
0000B8B4 317C 0000 0012             		move.w	#0,$12(a0)
0000B8BA 117C 0001 001C             		move.b	#1,$1C(a0)
0000B8C0 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B8C6 5528 0025                  		subq.b	#2,$25(a0)
0000B8CA 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B8CE                            
0000B8CE                            locret_ADF0:
0000B8CE 4E75                       		rts	
0000B8D0                            ; ===========================================================================
0000B8D0                            
0000B8D0                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B8D0 343C 0060                  		move.w	#$60,d2
0000B8D4 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B8D8 6400                       		bcc.s	locret_AE20
0000B8DA 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B8DE 9068 000C                  		sub.w	$C(a0),d0
0000B8E2 6400                       		bcc.s	locret_AE20
0000B8E4 0C40 FF80                  		cmpi.w	#-$80,d0
0000B8E8 6500                       		bcs.s	locret_AE20
0000B8EA 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B8EE 6600                       		bne.s	locret_AE20
0000B8F0 5528 0025                  		subq.b	#2,$25(a0)
0000B8F4 3141 0010                  		move.w	d1,$10(a0)
0000B8F8 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B8FE                            
0000B8FE                            locret_AE20:
0000B8FE 4E75                       		rts	
0000B900                            
0000B900                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B900                            
0000B900                            
0000B900                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B900 323C 0080                  		move.w	#$80,d1
0000B904 08E8 0000 0022             		bset	#0,$22(a0)
0000B90A 3038 D008                  		move.w	($FFFFD008).w,d0
0000B90E 9068 0008                  		sub.w	8(a0),d0
0000B912 6400                       		bcc.s	loc_AE40
0000B914 4440                       		neg.w	d0
0000B916 4441                       		neg.w	d1
0000B918 08A8 0000 0022             		bclr	#0,$22(a0)
0000B91E                            
0000B91E                            loc_AE40:
0000B91E B042                       		cmp.w	d2,d0
0000B920 4E75                       		rts	
0000B922                            ; End of function Obj2D_ChkSonic2
0000B922                            
0000B922                            ; ===========================================================================
0000B922                            Ani_obj2D:
0000B922                            	include "_anim\obj2D.asm"
0000B922                            ; ---------------------------------------------------------------------------
0000B922                            ; Animation script - Burrobot enemy
0000B922                            ; ---------------------------------------------------------------------------
0000B922 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B924 0000                       		dc.w byte_AE50-Ani_obj2D
0000B926 0000                       		dc.w byte_AE54-Ani_obj2D
0000B928 0000                       		dc.w byte_AE58-Ani_obj2D
0000B92A 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0000B92E 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
0000B932 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000B936 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B93A 00                         		even
0000B93A 00                         		even
0000B93A                            
0000B93A                            ; ---------------------------------------------------------------------------
0000B93A                            ; Sprite mappings - Burrobot enemy (LZ)
0000B93A                            ; ---------------------------------------------------------------------------
0000B93A                            Map_obj2D:
0000B93A                            	include "_maps\obj2D.asm"
0000B93A                            ; ---------------------------------------------------------------------------
0000B93A                            ; Sprite mappings - Burrobot enemy (LZ)
0000B93A                            ; ---------------------------------------------------------------------------
0000B93A 0000                       		dc.w byte_AE6A-Map_obj2D
0000B93C 0000                       		dc.w byte_AE75-Map_obj2D
0000B93E 0000                       		dc.w byte_AE80-Map_obj2D
0000B940 0000                       		dc.w byte_AE8B-Map_obj2D
0000B942 0000                       		dc.w byte_AE96-Map_obj2D
0000B944 0000                       		dc.w byte_AEA1-Map_obj2D
0000B946 0000                       		dc.w byte_AEAC-Map_obj2D
0000B948 02                         byte_AE6A:	dc.b 2
0000B949 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
0000B94E 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000B953 02                         byte_AE75:	dc.b 2
0000B954 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000B959 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000B95E 02                         byte_AE80:	dc.b 2
0000B95F E80A 001E F4               		dc.b $E8, $A, 0, $1E, $F4
0000B964 000A 0027 F4               		dc.b 0,	$A, 0, $27, $F4
0000B969 02                         byte_AE8B:	dc.b 2
0000B96A E80A 0030 F4               		dc.b $E8, $A, 0, $30, $F4
0000B96F 000A 0039 F4               		dc.b 0,	$A, 0, $39, $F4
0000B974 02                         byte_AE96:	dc.b 2
0000B975 E80A 000F F0               		dc.b $E8, $A, 0, $F, $F0
0000B97A 000A 0042 F4               		dc.b 0,	$A, 0, $42, $F4
0000B97F 02                         byte_AEA1:	dc.b 2
0000B980 F406 004B E8               		dc.b $F4, 6, 0,	$4B, $E8
0000B985 F40A 0051 F8               		dc.b $F4, $A, 0, $51, $F8
0000B98A 02                         byte_AEAC:	dc.b 2
0000B98B EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000B990 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000B996 00                         		even
0000B996 00                         		even
0000B996                            
0000B996                            ; ===========================================================================
0000B996                            ; ---------------------------------------------------------------------------
0000B996                            ; Object 2F - large moving platforms (MZ)
0000B996                            ; ---------------------------------------------------------------------------
0000B996                            
0000B996                            Obj2F:					; XREF: Obj_Index
0000B996 7000                       		moveq	#0,d0
0000B998 1028 0024                  		move.b	$24(a0),d0
0000B99C 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B9A0 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B9A4                            ; ===========================================================================
0000B9A4 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B9A6 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B9A8                            
0000B9A8 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B9AA 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B9AC 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B9AE 0140                       		dc.b 1,	$40
0000B9B0 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B9B2 0220                       		dc.b 2,	$20
0000B9B4                            ; ===========================================================================
0000B9B4                            
0000B9B4                            Obj2F_Main:				; XREF: Obj2F_Index
0000B9B4 5428 0024                  		addq.b	#2,$24(a0)
0000B9B8 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B9C0 317C C000 0002             		move.w	#$C000,2(a0)
0000B9C6 117C 0004 0001             		move.b	#4,1(a0)
0000B9CC 117C 0005 0018             		move.b	#5,$18(a0)
0000B9D2 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B9D8 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B9DE 7000                       		moveq	#0,d0
0000B9E0 1028 0028                  		move.b	$28(a0),d0
0000B9E4 E448                       		lsr.w	#2,d0
0000B9E6 0240 001C                  		andi.w	#$1C,d0
0000B9EA 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B9EE 3019                       		move.w	(a1)+,d0
0000B9F0 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B9F4 214A 0030                  		move.l	a2,$30(a0)
0000B9F8 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B9FC 1151 0019                  		move.b	(a1),$19(a0)
0000BA00 0228 000F 0028             		andi.b	#$F,$28(a0)
0000BA06 117C 0040 0016             		move.b	#$40,$16(a0)
0000BA0C 08E8 0004 0001             		bset	#4,1(a0)
0000BA12                            
0000BA12                            Obj2F_Action:				; XREF: Obj2F_Index
0000BA12 6100 0000                  		bsr.w	Obj2F_Types
0000BA16 4A28 0025                  		tst.b	$25(a0)
0000BA1A 6700                       		beq.s	Obj2F_Solid
0000BA1C 7200                       		moveq	#0,d1
0000BA1E 1228 0019                  		move.b	$19(a0),d1
0000BA22 0641 000B                  		addi.w	#$B,d1
0000BA26 6100 C61C                  		bsr.w	ExitPlatform
0000BA2A 0829 0003 0022             		btst	#3,$22(a1)
0000BA30 6600 0000                  		bne.w	Obj2F_Slope
0000BA34 4228 0025                  		clr.b	$25(a0)
0000BA38 6000                       		bra.s	Obj2F_Display
0000BA3A                            ; ===========================================================================
0000BA3A                            
0000BA3A                            Obj2F_Slope:				; XREF: Obj2F_Action
0000BA3A 7200                       		moveq	#0,d1
0000BA3C 1228 0019                  		move.b	$19(a0),d1
0000BA40 0641 000B                  		addi.w	#$B,d1
0000BA44 2468 0030                  		movea.l	$30(a0),a2
0000BA48 3428 0008                  		move.w	8(a0),d2
0000BA4C 6100 D554                  		bsr.w	SlopeObject2
0000BA50 6000                       		bra.s	Obj2F_Display
0000BA52                            ; ===========================================================================
0000BA52                            
0000BA52                            Obj2F_Solid:				; XREF: Obj2F_Action
0000BA52 7200                       		moveq	#0,d1
0000BA54 1228 0019                  		move.b	$19(a0),d1
0000BA58 0641 000B                  		addi.w	#$B,d1
0000BA5C 343C 0020                  		move.w	#$20,d2
0000BA60 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000BA66 6600                       		bne.s	loc_AF8E
0000BA68 343C 0030                  		move.w	#$30,d2
0000BA6C                            
0000BA6C                            loc_AF8E:
0000BA6C 2468 0030                  		movea.l	$30(a0),a2
0000BA70 6100 0000                  		bsr.w	SolidObject2F
0000BA74                            
0000BA74                            Obj2F_Display:				; XREF: Obj2F_Action
0000BA74 6100 0000                  		bsr.w	DisplaySprite
0000BA78 6000 0000                  		bra.w	Obj2F_ChkDel
0000BA7C                            
0000BA7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BA7C                            
0000BA7C                            
0000BA7C                            Obj2F_Types:				; XREF: Obj2F_Action
0000BA7C 7000                       		moveq	#0,d0
0000BA7E 1028 0028                  		move.b	$28(a0),d0
0000BA82 0240 0007                  		andi.w	#7,d0
0000BA86 D040                       		add.w	d0,d0
0000BA88 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000BA8C 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000BA90                            ; End of function Obj2F_Types
0000BA90                            
0000BA90                            ; ===========================================================================
0000BA90 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000BA92 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000BA94 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000BA96 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000BA98 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000BA9A 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000BA9C                            ; ===========================================================================
0000BA9C                            
0000BA9C                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000BA9C 4E75                       		rts			; type 00 platform doesn't move
0000BA9E                            ; ===========================================================================
0000BA9E                            
0000BA9E                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000BA9E 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000BAA2 323C 0020                  		move.w	#$20,d1
0000BAA6 6000                       		bra.s	Obj2F_Move
0000BAA8                            ; ===========================================================================
0000BAA8                            
0000BAA8                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000BAA8 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000BAAC 323C 0030                  		move.w	#$30,d1
0000BAB0 6000                       		bra.s	Obj2F_Move
0000BAB2                            ; ===========================================================================
0000BAB2                            
0000BAB2                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000BAB2 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000BAB6 323C 0040                  		move.w	#$40,d1
0000BABA 6000                       		bra.s	Obj2F_Move
0000BABC                            ; ===========================================================================
0000BABC                            
0000BABC                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000BABC 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000BAC0 323C 0060                  		move.w	#$60,d1
0000BAC4                            
0000BAC4                            Obj2F_Move:
0000BAC4 0828 0003 0028             		btst	#3,$28(a0)
0000BACA 6700                       		beq.s	loc_AFF2
0000BACC 4440                       		neg.w	d0
0000BACE D041                       		add.w	d1,d0
0000BAD0                            
0000BAD0                            loc_AFF2:
0000BAD0 3228 002C                  		move.w	$2C(a0),d1
0000BAD4 9240                       		sub.w	d0,d1
0000BAD6 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000BADA 4E75                       		rts	
0000BADC                            ; ===========================================================================
0000BADC                            
0000BADC                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000BADC 1028 0034                  		move.b	$34(a0),d0
0000BAE0 4A28 0025                  		tst.b	$25(a0)
0000BAE4 6600                       		bne.s	loc_B010
0000BAE6 5500                       		subq.b	#2,d0
0000BAE8 6400                       		bcc.s	loc_B01C
0000BAEA 7000                       		moveq	#0,d0
0000BAEC 6000                       		bra.s	loc_B01C
0000BAEE                            ; ===========================================================================
0000BAEE                            
0000BAEE                            loc_B010:
0000BAEE 5800                       		addq.b	#4,d0
0000BAF0 0C00 0040                  		cmpi.b	#$40,d0
0000BAF4 6500                       		bcs.s	loc_B01C
0000BAF6 103C 0040                  		move.b	#$40,d0
0000BAFA                            
0000BAFA                            loc_B01C:
0000BAFA 1140 0034                  		move.b	d0,$34(a0)
0000BAFE 4EB9 0000 33D4             		jsr	(CalcSine).l
0000BB04 E848                       		lsr.w	#4,d0
0000BB06 3200                       		move.w	d0,d1
0000BB08 D068 002C                  		add.w	$2C(a0),d0
0000BB0C 3140 000C                  		move.w	d0,$C(a0)
0000BB10 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000BB16 6600                       		bne.s	loc_B07A
0000BB18 4A28 0035                  		tst.b	$35(a0)
0000BB1C 6600                       		bne.s	loc_B07A
0000BB1E 117C 0001 0035             		move.b	#1,$35(a0)
0000BB24 6100 0000                  		bsr.w	SingleObjLoad2
0000BB28 6600                       		bne.s	loc_B07A
0000BB2A 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000BB2E 3368 0008 0008             		move.w	8(a0),8(a1)
0000BB34 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000BB3A 5069 002C                  		addq.w	#8,$2C(a1)
0000BB3E 5769 002C                  		subq.w	#3,$2C(a1)
0000BB42 0469 0040 0008             		subi.w	#$40,8(a1)
0000BB48 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000BB4E 2348 0038                  		move.l	a0,$38(a1)
0000BB52 2448                       		movea.l	a0,a2
0000BB54 6100                       		bsr.s	sub_B09C
0000BB56                            
0000BB56                            loc_B07A:
0000BB56 7400                       		moveq	#0,d2
0000BB58 45E8 0036                  		lea	$36(a0),a2
0000BB5C 141A                       		move.b	(a2)+,d2
0000BB5E 5302                       		subq.b	#1,d2
0000BB60 6500                       		bcs.s	locret_B09A
0000BB62                            
0000BB62                            loc_B086:
0000BB62 7000                       		moveq	#0,d0
0000BB64 101A                       		move.b	(a2)+,d0
0000BB66 ED48                       		lsl.w	#6,d0
0000BB68 0640 D000                  		addi.w	#-$3000,d0
0000BB6C 3240                       		movea.w	d0,a1
0000BB6E 3341 003C                  		move.w	d1,$3C(a1)
0000BB72 51CA FFEE                  		dbf	d2,loc_B086
0000BB76                            
0000BB76                            locret_B09A:
0000BB76 4E75                       		rts	
0000BB78                            
0000BB78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BB78                            
0000BB78                            
0000BB78                            sub_B09C:
0000BB78 45EA 0036                  		lea	$36(a2),a2
0000BB7C 7000                       		moveq	#0,d0
0000BB7E 1012                       		move.b	(a2),d0
0000BB80 5212                       		addq.b	#1,(a2)
0000BB82 45F2 0001                  		lea	1(a2,d0.w),a2
0000BB86 3009                       		move.w	a1,d0
0000BB88 0440 D000                  		subi.w	#-$3000,d0
0000BB8C EC48                       		lsr.w	#6,d0
0000BB8E 0240 007F                  		andi.w	#$7F,d0
0000BB92 1480                       		move.b	d0,(a2)
0000BB94 4E75                       		rts	
0000BB96                            ; End of function sub_B09C
0000BB96                            
0000BB96                            ; ===========================================================================
0000BB96                            
0000BB96                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000BB96 4A28 0035                  		tst.b	$35(a0)
0000BB9A 6700                       		beq.s	loc_B0C6
0000BB9C 4A28 0001                  		tst.b	1(a0)
0000BBA0 6A00                       		bpl.s	Obj2F_DelFlames
0000BBA2                            
0000BBA2                            loc_B0C6:
0000BBA2 3028 002A                  		move.w	$2A(a0),d0
0000BBA6 0240 FF80                  		andi.w	#$FF80,d0
0000BBAA 3238 F700                  		move.w	($FFFFF700).w,d1
0000BBAE 0441 0080                  		subi.w	#$80,d1
0000BBB2 0241 FF80                  		andi.w	#$FF80,d1
0000BBB6 9041                       		sub.w	d1,d0
0000BBB8 0C40 0280                  		cmpi.w	#$280,d0
0000BBBC 6200 0000                  		bhi.w	DeleteObject
0000BBC0 4E75                       		rts	
0000BBC2                            ; ===========================================================================
0000BBC2                            
0000BBC2                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000BBC2 7400                       		moveq	#0,d2
0000BBC4                            
0000BBC4                            loc_B0E8:
0000BBC4 45E8 0036                  		lea	$36(a0),a2
0000BBC8 1412                       		move.b	(a2),d2
0000BBCA 421A                       		clr.b	(a2)+
0000BBCC 5302                       		subq.b	#1,d2
0000BBCE 6500                       		bcs.s	locret_B116
0000BBD0                            
0000BBD0                            loc_B0F4:
0000BBD0 7000                       		moveq	#0,d0
0000BBD2 1012                       		move.b	(a2),d0
0000BBD4 421A                       		clr.b	(a2)+
0000BBD6 ED48                       		lsl.w	#6,d0
0000BBD8 0640 D000                  		addi.w	#-$3000,d0
0000BBDC 3240                       		movea.w	d0,a1
0000BBDE 6100 0000                  		bsr.w	DeleteObject2
0000BBE2 51CA FFEC                  		dbf	d2,loc_B0F4
0000BBE6 117C 0000 0035             		move.b	#0,$35(a0)
0000BBEC 117C 0000 0034             		move.b	#0,$34(a0)
0000BBF2                            
0000BBF2                            locret_B116:
0000BBF2 4E75                       		rts	
0000BBF4                            ; ===========================================================================
0000BBF4                            ; ---------------------------------------------------------------------------
0000BBF4                            ; Collision data for large moving platforms (MZ)
0000BBF4                            ; ---------------------------------------------------------------------------
0000BBF4                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000BC40                            		even
0000BC40                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000BC6C                            		even
0000BC6C                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000BCB8                            		even
0000BCB8                            ; ===========================================================================
0000BCB8                            ; ---------------------------------------------------------------------------
0000BCB8                            ; Object 35 - fireball that sits on the	floor (MZ)
0000BCB8                            ; (appears when	you walk on sinking platforms)
0000BCB8                            ; ---------------------------------------------------------------------------
0000BCB8                            
0000BCB8                            Obj35:					; XREF: Obj_Index
0000BCB8 7000                       		moveq	#0,d0
0000BCBA 1028 0024                  		move.b	$24(a0),d0
0000BCBE 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000BCC2 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000BCC6                            ; ===========================================================================
0000BCC6 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000BCC8 0000                       		dc.w loc_B238-Obj35_Index
0000BCCA 0000                       		dc.w Obj35_Move-Obj35_Index
0000BCCC                            ; ===========================================================================
0000BCCC                            
0000BCCC                            Obj35_Main:				; XREF: Obj35_Index
0000BCCC 5428 0024                  		addq.b	#2,$24(a0)
0000BCD0 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000BCD8 317C 0345 0002             		move.w	#$345,2(a0)
0000BCDE 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000BCE4 117C 0004 0001             		move.b	#4,1(a0)
0000BCEA 117C 0001 0018             		move.b	#1,$18(a0)
0000BCF0 117C 008B 0020             		move.b	#$8B,$20(a0)
0000BCF6 117C 0008 0019             		move.b	#8,$19(a0)
0000BCFC 303C 00C8                  		move.w	#$C8,d0
0000BD00 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play flame sound
0000BD06 4A28 0028                  		tst.b	$28(a0)
0000BD0A 6700                       		beq.s	loc_B238
0000BD0C 5428 0024                  		addq.b	#2,$24(a0)
0000BD10 6000 0000                  		bra.w	Obj35_Move
0000BD14                            ; ===========================================================================
0000BD14                            
0000BD14                            loc_B238:				; XREF: Obj35_Index
0000BD14 2268 0030                  		movea.l	$30(a0),a1
0000BD18 3228 0008                  		move.w	8(a0),d1
0000BD1C 9268 002A                  		sub.w	$2A(a0),d1
0000BD20 0641 000C                  		addi.w	#$C,d1
0000BD24 3001                       		move.w	d1,d0
0000BD26 E248                       		lsr.w	#1,d0
0000BD28 1031 0000                  		move.b	(a1,d0.w),d0
0000BD2C 4440                       		neg.w	d0
0000BD2E D068 002C                  		add.w	$2C(a0),d0
0000BD32 3400                       		move.w	d0,d2
0000BD34 D068 003C                  		add.w	$3C(a0),d0
0000BD38 3140 000C                  		move.w	d0,$C(a0)
0000BD3C 0C41 0084                  		cmpi.w	#$84,d1
0000BD40 6400                       		bcc.s	loc_B2B0
0000BD42 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000BD4A 0C41 0080                  		cmpi.w	#$80,d1
0000BD4E 6400                       		bcc.s	loc_B2B0
0000BD50 2028 0008                  		move.l	8(a0),d0
0000BD54 0680 0008 0000             		addi.l	#$80000,d0
0000BD5A 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000BD60 6600                       		bne.s	loc_B2B0
0000BD62 6100 0000                  		bsr.w	SingleObjLoad2
0000BD66 6600                       		bne.s	loc_B2B0
0000BD68 12BC 0035                  		move.b	#$35,0(a1)
0000BD6C 3368 0008 0008             		move.w	8(a0),8(a1)
0000BD72 3342 002C                  		move.w	d2,$2C(a1)
0000BD76 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000BD7C 137C 0001 0028             		move.b	#1,$28(a1)
0000BD82 2468 0038                  		movea.l	$38(a0),a2
0000BD86 6100 FDF0                  		bsr.w	sub_B09C
0000BD8A                            
0000BD8A                            loc_B2B0:
0000BD8A 6000                       		bra.s	Obj35_Animate
0000BD8C                            ; ===========================================================================
0000BD8C                            
0000BD8C                            Obj35_Move:				; XREF: Obj35_Index
0000BD8C 3028 002C                  		move.w	$2C(a0),d0
0000BD90 D068 003C                  		add.w	$3C(a0),d0
0000BD94 3140 000C                  		move.w	d0,$C(a0)
0000BD98                            
0000BD98                            Obj35_Animate:				; XREF: loc_B238
0000BD98 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000BD9E 6100 F450                  		bsr.w	AnimateSprite
0000BDA2 6000 0000                  		bra.w	DisplaySprite
0000BDA6                            ; ===========================================================================
0000BDA6                            Ani_obj35:
0000BDA6                            	include "_anim\obj35.asm"
0000BDA6                            ; ---------------------------------------------------------------------------
0000BDA6                            ; Animation script - fireball that sits on the	floor (MZ)
0000BDA6                            ; ---------------------------------------------------------------------------
0000BDA6 0000                       		dc.w byte_B2CE-Ani_obj35
0000BDA8 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000BDAE                            		even
0000BDAE                            		even
0000BDAE                            
0000BDAE                            ; ---------------------------------------------------------------------------
0000BDAE                            ; Sprite mappings - large moving platforms (MZ)
0000BDAE                            ; ---------------------------------------------------------------------------
0000BDAE                            Map_obj2F:
0000BDAE                            	include "_maps\obj2F.asm"
0000BDAE                            ; ---------------------------------------------------------------------------
0000BDAE                            ; Sprite mappings - large moving platforms (MZ)
0000BDAE                            ; ---------------------------------------------------------------------------
0000BDAE 0000                       		dc.w byte_B2DA-Map_obj2F
0000BDB0 0000                       		dc.w byte_B31C-Map_obj2F
0000BDB2 0000                       		dc.w byte_B34F-Map_obj2F
0000BDB4 0D                         byte_B2DA:	dc.b $D
0000BDB5 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000BDBA F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000BDBF 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BDC4 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000BDC9 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000BDCE F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BDD3 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000BDD8 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000BDDD F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000BDE2 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BDE7 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000BDEC D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000BDF1 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000BDF6 0A                         byte_B31C:	dc.b $A
0000BDF7 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000BDFC F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000BE01 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BE06 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000BE0B E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000BE10 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BE15 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000BE1A E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000BE1F C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000BE24 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000BE29 06                         byte_B34F:	dc.b 6
0000BE2A D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000BE2F F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BE34 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000BE39 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000BE3E F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BE43 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000BE48                            		even
0000BE48                            		even
0000BE48                            
0000BE48                            ; ---------------------------------------------------------------------------
0000BE48                            ; Sprite mappings - lava balls (MZ, SLZ)
0000BE48                            ; ---------------------------------------------------------------------------
0000BE48                            Map_obj14:
0000BE48                            	include "_maps\obj14.asm"
0000BE48                            ; ---------------------------------------------------------------------------
0000BE48                            ; Sprite mappings - lava balls (MZ, SLZ)
0000BE48                            ; ---------------------------------------------------------------------------
0000BE48 0000                       		dc.w byte_B37A-Map_obj14
0000BE4A 0000                       		dc.w byte_B380-Map_obj14
0000BE4C 0000                       		dc.w byte_B386-Map_obj14
0000BE4E 0000                       		dc.w byte_B38C-Map_obj14
0000BE50 0000                       		dc.w byte_B392-Map_obj14
0000BE52 0000                       		dc.w byte_B398-Map_obj14
0000BE54 01                         byte_B37A:	dc.b 1
0000BE55 E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000BE5A 01                         byte_B380:	dc.b 1
0000BE5B E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000BE60 01                         byte_B386:	dc.b 1
0000BE61 F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000BE66 01                         byte_B38C:	dc.b 1
0000BE67 F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000BE6C 01                         byte_B392:	dc.b 1
0000BE6D F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000BE72 01                         byte_B398:	dc.b 1
0000BE73 F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000BE78                            		even
0000BE78                            		even
0000BE78                            
0000BE78                            ; ===========================================================================
0000BE78                            ; ---------------------------------------------------------------------------
0000BE78                            ; Object 30 - large green glassy blocks	(MZ)
0000BE78                            ; ---------------------------------------------------------------------------
0000BE78                            
0000BE78                            Obj30:					; XREF: Obj_Index
0000BE78 7000                       		moveq	#0,d0
0000BE7A 1028 0024                  		move.b	$24(a0),d0
0000BE7E 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000BE82 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000BE86 3028 0008                  		move.w	8(a0),d0
0000BE8A 0240 FF80                  		andi.w	#$FF80,d0
0000BE8E 3238 F700                  		move.w	($FFFFF700).w,d1
0000BE92 0441 0080                  		subi.w	#$80,d1
0000BE96 0241 FF80                  		andi.w	#$FF80,d1
0000BE9A 9041                       		sub.w	d1,d0
0000BE9C 0C40 0280                  		cmpi.w	#$280,d0
0000BEA0 6200 0000                  		bhi.w	Obj30_Delete
0000BEA4 6000 0000                  		bra.w	DisplaySprite
0000BEA8                            ; ===========================================================================
0000BEA8                            
0000BEA8                            Obj30_Delete:
0000BEA8 6000 0000                  		bra.w	DeleteObject
0000BEAC                            ; ===========================================================================
0000BEAC 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000BEAE 0000                       		dc.w Obj30_Block012-Obj30_Index
0000BEB0 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000BEB2 0000                       		dc.w Obj30_Block34-Obj30_Index
0000BEB4 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000BEB6                            
0000BEB6 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000BEB9 0400 01                    		dc.b 4,	0, 1
0000BEBC 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000BEBF 0800 01                    		dc.b 8,	0, 1
0000BEC2                            ; ===========================================================================
0000BEC2                            
0000BEC2                            Obj30_Main:				; XREF: Obj30_Index
0000BEC2 45F9 0000 BEB6             		lea	(Obj30_Vars1).l,a2
0000BEC8 7201                       		moveq	#1,d1
0000BECA 117C 0048 0016             		move.b	#$48,$16(a0)
0000BED0 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000BED6 6500                       		bcs.s	loc_B40C	; if yes, branch
0000BED8 45F9 0000 BEBC             		lea	(Obj30_Vars2).l,a2
0000BEDE 7201                       		moveq	#1,d1
0000BEE0 117C 0038 0016             		move.b	#$38,$16(a0)
0000BEE6                            
0000BEE6                            loc_B40C:
0000BEE6 2248                       		movea.l	a0,a1
0000BEE8 6000                       		bra.s	Obj30_Load	; load main object
0000BEEA                            ; ===========================================================================
0000BEEA                            
0000BEEA                            Obj30_Loop:
0000BEEA 6100 0000                  		bsr.w	SingleObjLoad2
0000BEEE 6600                       		bne.s	loc_B480
0000BEF0                            
0000BEF0                            Obj30_Load:				; XREF: Obj30_Main
0000BEF0 135A 0024                  		move.b	(a2)+,$24(a1)
0000BEF4 12BC 0030                  		move.b	#$30,0(a1)
0000BEF8 3368 0008 0008             		move.w	8(a0),8(a1)
0000BEFE 101A                       		move.b	(a2)+,d0
0000BF00 4880                       		ext.w	d0
0000BF02 D068 000C                  		add.w	$C(a0),d0
0000BF06 3340 000C                  		move.w	d0,$C(a1)
0000BF0A 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000BF12 337C C38E 0002             		move.w	#$C38E,2(a1)
0000BF18 137C 0004 0001             		move.b	#4,1(a1)
0000BF1E 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BF24 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BF2A 137C 0020 0019             		move.b	#$20,$19(a1)
0000BF30 137C 0004 0018             		move.b	#4,$18(a1)
0000BF36 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BF3A 2348 003C                  		move.l	a0,$3C(a1)
0000BF3E 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000BF42                            
0000BF42 137C 0010 0019             		move.b	#$10,$19(a1)
0000BF48 137C 0003 0018             		move.b	#3,$18(a1)
0000BF4E 5029 0028                  		addq.b	#8,$28(a1)
0000BF52 0229 000F 0028             		andi.b	#$F,$28(a1)
0000BF58                            
0000BF58                            loc_B480:
0000BF58 317C 0090 0032             		move.w	#$90,$32(a0)
0000BF5E 08E8 0004 0001             		bset	#4,1(a0)
0000BF64                            
0000BF64                            Obj30_Block012:				; XREF: Obj30_Index
0000BF64 6100 0000                  		bsr.w	Obj30_Types
0000BF68 323C 002B                  		move.w	#$2B,d1
0000BF6C 343C 0048                  		move.w	#$48,d2
0000BF70 363C 0049                  		move.w	#$49,d3
0000BF74 3828 0008                  		move.w	8(a0),d4
0000BF78 6000 0000                  		bra.w	SolidObject
0000BF7C                            ; ===========================================================================
0000BF7C                            
0000BF7C                            Obj30_Reflect012:			; XREF: Obj30_Index
0000BF7C 2268 003C                  		movea.l	$3C(a0),a1
0000BF80 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BF86 6000 0000                  		bra.w	Obj30_Types
0000BF8A                            ; ===========================================================================
0000BF8A                            
0000BF8A                            Obj30_Block34:				; XREF: Obj30_Index
0000BF8A 6100 0000                  		bsr.w	Obj30_Types
0000BF8E 323C 002B                  		move.w	#$2B,d1
0000BF92 343C 0038                  		move.w	#$38,d2
0000BF96 363C 0039                  		move.w	#$39,d3
0000BF9A 3828 0008                  		move.w	8(a0),d4
0000BF9E 6000 0000                  		bra.w	SolidObject
0000BFA2                            ; ===========================================================================
0000BFA2                            
0000BFA2                            Obj30_Reflect34:			; XREF: Obj30_Index
0000BFA2 2268 003C                  		movea.l	$3C(a0),a1
0000BFA6 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BFAC 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000BFB2 6000 0002                  		bra.w	*+4
0000BFB6                            
0000BFB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BFB6                            
0000BFB6                            
0000BFB6                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000BFB6 7000                       		moveq	#0,d0
0000BFB8 1028 0028                  		move.b	$28(a0),d0
0000BFBC 0240 0007                  		andi.w	#7,d0
0000BFC0 D040                       		add.w	d0,d0
0000BFC2 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000BFC6 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000BFCA                            ; End of function Obj30_Types
0000BFCA                            
0000BFCA                            ; ===========================================================================
0000BFCA 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000BFCC 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000BFCE 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000BFD0 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000BFD2 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000BFD4                            ; ===========================================================================
0000BFD4                            
0000BFD4                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000BFD4 4E75                       		rts	
0000BFD6                            ; ===========================================================================
0000BFD6                            
0000BFD6                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000BFD6 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BFDA 323C 0040                  		move.w	#$40,d1
0000BFDE 6000                       		bra.s	loc_B514
0000BFE0                            ; ===========================================================================
0000BFE0                            
0000BFE0                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000BFE0 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BFE4 323C 0040                  		move.w	#$40,d1
0000BFE8 4440                       		neg.w	d0
0000BFEA D041                       		add.w	d1,d0
0000BFEC                            
0000BFEC                            loc_B514:				; XREF: Obj30_Type01
0000BFEC 0828 0003 0028             		btst	#3,$28(a0)
0000BFF2 6700                       		beq.s	loc_B526
0000BFF4 4440                       		neg.w	d0
0000BFF6 D041                       		add.w	d1,d0
0000BFF8 E208                       		lsr.b	#1,d0
0000BFFA 0640 0020                  		addi.w	#$20,d0
0000BFFE                            
0000BFFE                            loc_B526:
0000BFFE 6000 0000                  		bra.w	loc_B5EE
0000C002                            ; ===========================================================================
0000C002                            
0000C002                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000C002 0828 0003 0028             		btst	#3,$28(a0)
0000C008 6700                       		beq.s	loc_B53E
0000C00A 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C00E 0440 0010                  		subi.w	#$10,d0
0000C012 6000 0000                  		bra.w	loc_B5EE
0000C016                            ; ===========================================================================
0000C016                            
0000C016                            loc_B53E:
0000C016 0828 0003 0022             		btst	#3,$22(a0)
0000C01C 6600                       		bne.s	loc_B54E
0000C01E 08A8 0000 0034             		bclr	#0,$34(a0)
0000C024 6000                       		bra.s	loc_B582
0000C026                            ; ===========================================================================
0000C026                            
0000C026                            loc_B54E:
0000C026 4A28 0034                  		tst.b	$34(a0)
0000C02A 6600                       		bne.s	loc_B582
0000C02C 117C 0001 0034             		move.b	#1,$34(a0)
0000C032 08E8 0000 0035             		bset	#0,$35(a0)
0000C038 6700                       		beq.s	loc_B582
0000C03A 08E8 0007 0034             		bset	#7,$34(a0)
0000C040 317C 0010 0036             		move.w	#$10,$36(a0)
0000C046 117C 000A 0038             		move.b	#$A,$38(a0)
0000C04C 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000C052 6600                       		bne.s	loc_B582
0000C054 317C 0040 0036             		move.w	#$40,$36(a0)
0000C05A                            
0000C05A                            loc_B582:
0000C05A 4A28 0034                  		tst.b	$34(a0)
0000C05E 6A00                       		bpl.s	loc_B5AA
0000C060 4A28 0038                  		tst.b	$38(a0)
0000C064 6700                       		beq.s	loc_B594
0000C066 5328 0038                  		subq.b	#1,$38(a0)
0000C06A 6600                       		bne.s	loc_B5AA
0000C06C                            
0000C06C                            loc_B594:
0000C06C 4A68 0032                  		tst.w	$32(a0)
0000C070 6700                       		beq.s	loc_B5A4
0000C072 5368 0032                  		subq.w	#1,$32(a0)
0000C076 5368 0036                  		subq.w	#1,$36(a0)
0000C07A 6600                       		bne.s	loc_B5AA
0000C07C                            
0000C07C                            loc_B5A4:
0000C07C 08A8 0007 0034             		bclr	#7,$34(a0)
0000C082                            
0000C082                            loc_B5AA:
0000C082 3028 0032                  		move.w	$32(a0),d0
0000C086 6000                       		bra.s	loc_B5EE
0000C088                            ; ===========================================================================
0000C088                            
0000C088                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000C088 0828 0003 0028             		btst	#3,$28(a0)
0000C08E 6700                       		beq.s	Obj30_ChkSwitch
0000C090 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C094 0440 0010                  		subi.w	#$10,d0
0000C098 6000                       		bra.s	loc_B5EE
0000C09A                            ; ===========================================================================
0000C09A                            
0000C09A                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000C09A 4A28 0034                  		tst.b	$34(a0)
0000C09E 6600                       		bne.s	loc_B5E0
0000C0A0 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000C0A4 7000                       		moveq	#0,d0
0000C0A6 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000C0AA E848                       		lsr.w	#4,d0		; read only the	first nybble
0000C0AC 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000C0B0 6700                       		beq.s	loc_B5EA	; if not, branch
0000C0B2 117C 0001 0034             		move.b	#1,$34(a0)
0000C0B8                            
0000C0B8                            loc_B5E0:
0000C0B8 4A68 0032                  		tst.w	$32(a0)
0000C0BC 6700                       		beq.s	loc_B5EA
0000C0BE 5568 0032                  		subq.w	#2,$32(a0)
0000C0C2                            
0000C0C2                            loc_B5EA:
0000C0C2 3028 0032                  		move.w	$32(a0),d0
0000C0C6                            
0000C0C6                            loc_B5EE:
0000C0C6 3228 0030                  		move.w	$30(a0),d1
0000C0CA 9240                       		sub.w	d0,d1
0000C0CC 3141 000C                  		move.w	d1,$C(a0)
0000C0D0 4E75                       		rts	
0000C0D2                            ; ===========================================================================
0000C0D2                            ; ---------------------------------------------------------------------------
0000C0D2                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C0D2                            ; ---------------------------------------------------------------------------
0000C0D2                            Map_obj30:
0000C0D2                            	include "_maps\obj30.asm"
0000C0D2                            ; ---------------------------------------------------------------------------
0000C0D2                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C0D2                            ; ---------------------------------------------------------------------------
0000C0D2 0000                       		dc.w byte_B600-Map_obj30
0000C0D4 0000                       		dc.w byte_B63D-Map_obj30
0000C0D6 0000                       		dc.w byte_B648-Map_obj30
0000C0D8 0C                         byte_B600:	dc.b $C
0000C0D9 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000C0DE B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000C0E3 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000C0E8 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000C0ED E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000C0F2 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000C0F7 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000C0FC 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000C101 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000C106 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000C10B 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000C110 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000C115 02                         byte_B63D:	dc.b 2
0000C116 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000C11B 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000C120 0A                         byte_B648:	dc.b $A
0000C121 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000C126 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000C12B D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000C130 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000C135 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000C13A F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000C13F 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000C144 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000C149 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000C14E 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000C154 00                         		even
0000C154 00                         		even
0000C154                            
0000C154                            ; ===========================================================================
0000C154                            ; ---------------------------------------------------------------------------
0000C154                            ; Object 31 - stomping metal blocks on chains (MZ)
0000C154                            ; ---------------------------------------------------------------------------
0000C154                            
0000C154                            Obj31:					; XREF: Obj_Index
0000C154 7000                       		moveq	#0,d0
0000C156 1028 0024                  		move.b	$24(a0),d0
0000C15A 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000C15E 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000C162                            ; ===========================================================================
0000C162 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000C164 0000                       		dc.w loc_B798-Obj31_Index
0000C166 0000                       		dc.w loc_B7FE-Obj31_Index
0000C168 0000                       		dc.w Obj31_Display2-Obj31_Index
0000C16A 0000                       		dc.w loc_B7E2-Obj31_Index
0000C16C                            
0000C16C 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000C16E 0100                       		dc.b 1,	0
0000C170                            
0000C170 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000C173 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000C176 08CC 03                    		dc.b 8,	$CC, 3
0000C179 06F0 02                    		dc.b 6,	$F0, 2
0000C17C                            
0000C17C 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000C180 5000 7800                  		dc.w $5000, $7800
0000C184 3800 5800                  		dc.w $3800, $5800
0000C188 B800                       		dc.w $B800
0000C18A                            ; ===========================================================================
0000C18A                            
0000C18A                            Obj31_Main:				; XREF: Obj31_Index
0000C18A 7000                       		moveq	#0,d0
0000C18C 1028 0028                  		move.b	$28(a0),d0
0000C190 6A00                       		bpl.s	loc_B6CE
0000C192 0240 007F                  		andi.w	#$7F,d0
0000C196 D040                       		add.w	d0,d0
0000C198 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000C19C 115A 003A                  		move.b	(a2)+,$3A(a0)
0000C1A0 101A                       		move.b	(a2)+,d0
0000C1A2 1140 0028                  		move.b	d0,$28(a0)
0000C1A6                            
0000C1A6                            loc_B6CE:
0000C1A6 0200 000F                  		andi.b	#$F,d0
0000C1AA D040                       		add.w	d0,d0
0000C1AC 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000C1B0 4A40                       		tst.w	d0
0000C1B2 6600                       		bne.s	loc_B6E0
0000C1B4 3142 0032                  		move.w	d2,$32(a0)
0000C1B8                            
0000C1B8                            loc_B6E0:
0000C1B8 45F9 0000 C170             		lea	(Obj31_Var).l,a2
0000C1BE 2248                       		movea.l	a0,a1
0000C1C0 7203                       		moveq	#3,d1
0000C1C2 6000                       		bra.s	Obj31_MakeStomper
0000C1C4                            ; ===========================================================================
0000C1C4                            
0000C1C4                            Obj31_Loop:
0000C1C4 6100 0000                  		bsr.w	SingleObjLoad2
0000C1C8 6600 0000                  		bne.w	Obj31_SetSize
0000C1CC                            
0000C1CC                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000C1CC 135A 0024                  		move.b	(a2)+,$24(a1)
0000C1D0 12BC 0031                  		move.b	#$31,0(a1)
0000C1D4 3368 0008 0008             		move.w	8(a0),8(a1)
0000C1DA 101A                       		move.b	(a2)+,d0
0000C1DC 4880                       		ext.w	d0
0000C1DE D068 000C                  		add.w	$C(a0),d0
0000C1E2 3340 000C                  		move.w	d0,$C(a1)
0000C1E6 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000C1EE 337C 0300 0002             		move.w	#$300,2(a1)
0000C1F4 137C 0004 0001             		move.b	#4,1(a1)
0000C1FA 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000C200 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C206 137C 0010 0019             		move.b	#$10,$19(a1)
0000C20C 3342 0034                  		move.w	d2,$34(a1)
0000C210 137C 0004 0018             		move.b	#4,$18(a1)
0000C216 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C21A 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000C220 6600                       		bne.s	loc_B76A
0000C222 5341                       		subq.w	#1,d1
0000C224 1028 0028                  		move.b	$28(a0),d0
0000C228 0240 00F0                  		andi.w	#$F0,d0
0000C22C 0C40 0020                  		cmpi.w	#$20,d0
0000C230 679A                       		beq.s	Obj31_MakeStomper
0000C232 137C 0038 0019             		move.b	#$38,$19(a1)
0000C238 137C 0090 0020             		move.b	#$90,$20(a1)
0000C23E 5241                       		addq.w	#1,d1
0000C240                            
0000C240                            loc_B76A:
0000C240 2348 003C                  		move.l	a0,$3C(a1)
0000C244 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000C248                            
0000C248 137C 0003 0018             		move.b	#3,$18(a1)
0000C24E                            
0000C24E                            Obj31_SetSize:
0000C24E 7000                       		moveq	#0,d0
0000C250 1028 0028                  		move.b	$28(a0),d0
0000C254 E648                       		lsr.w	#3,d0
0000C256 0200 000E                  		andi.b	#$E,d0
0000C25A 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000C25E 115A 0019                  		move.b	(a2)+,$19(a0)
0000C262 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C266 6000                       		bra.s	loc_B798
0000C268                            ; ===========================================================================
0000C268 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000C26A 3009                       		dc.b $30, 9
0000C26C 100A                       		dc.b $10, $A
0000C26E                            ; ===========================================================================
0000C26E                            
0000C26E                            loc_B798:				; XREF: Obj31_Index
0000C26E 6100 0000                  		bsr.w	Obj31_Types
0000C272 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000C278 7200                       		moveq	#0,d1
0000C27A 1228 0019                  		move.b	$19(a0),d1
0000C27E 0641 000B                  		addi.w	#$B,d1
0000C282 343C 000C                  		move.w	#$C,d2
0000C286 363C 000D                  		move.w	#$D,d3
0000C28A 3828 0008                  		move.w	8(a0),d4
0000C28E 6100 0000                  		bsr.w	SolidObject
0000C292 0828 0003 0022             		btst	#3,$22(a0)
0000C298 6700                       		beq.s	Obj31_Display
0000C29A 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C2A0 6400                       		bcc.s	Obj31_Display
0000C2A2 2448                       		movea.l	a0,a2
0000C2A4 41F8 D000                  		lea	($FFFFD000).w,a0
0000C2A8 4EB9 0000 0000             		jsr	KillSonic
0000C2AE 204A                       		movea.l	a2,a0
0000C2B0                            
0000C2B0                            Obj31_Display:
0000C2B0 6100 0000                  		bsr.w	DisplaySprite
0000C2B4 6000 0000                  		bra.w	Obj31_ChkDel
0000C2B8                            ; ===========================================================================
0000C2B8                            
0000C2B8                            loc_B7E2:				; XREF: Obj31_Index
0000C2B8 117C 0080 0016             		move.b	#$80,$16(a0)
0000C2BE 08E8 0004 0001             		bset	#4,1(a0)
0000C2C4 2268 003C                  		movea.l	$3C(a0),a1
0000C2C8 1029 0032                  		move.b	$32(a1),d0
0000C2CC EA08                       		lsr.b	#5,d0
0000C2CE 5600                       		addq.b	#3,d0
0000C2D0 1140 001A                  		move.b	d0,$1A(a0)
0000C2D4                            
0000C2D4                            loc_B7FE:				; XREF: Obj31_Index
0000C2D4 2268 003C                  		movea.l	$3C(a0),a1
0000C2D8 7000                       		moveq	#0,d0
0000C2DA 1029 0032                  		move.b	$32(a1),d0
0000C2DE D068 0030                  		add.w	$30(a0),d0
0000C2E2 3140 000C                  		move.w	d0,$C(a0)
0000C2E6                            
0000C2E6                            Obj31_Display2:				; XREF: Obj31_Index
0000C2E6 6100 0000                  		bsr.w	DisplaySprite
0000C2EA                            
0000C2EA                            Obj31_ChkDel:				; XREF: Obj31_Display
0000C2EA 3028 0008                  		move.w	8(a0),d0
0000C2EE 0240 FF80                  		andi.w	#$FF80,d0
0000C2F2 3238 F700                  		move.w	($FFFFF700).w,d1
0000C2F6 0441 0080                  		subi.w	#$80,d1
0000C2FA 0241 FF80                  		andi.w	#$FF80,d1
0000C2FE 9041                       		sub.w	d1,d0
0000C300 0C40 0280                  		cmpi.w	#$280,d0
0000C304 6200 0000                  		bhi.w	DeleteObject
0000C308 4E75                       		rts	
0000C30A                            ; ===========================================================================
0000C30A                            
0000C30A                            Obj31_Types:				; XREF: loc_B798
0000C30A 1028 0028                  		move.b	$28(a0),d0
0000C30E 0240 000F                  		andi.w	#$F,d0
0000C312 D040                       		add.w	d0,d0
0000C314 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000C318 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000C31C                            ; ===========================================================================
0000C31C 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000C31E 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C320 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C322 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C324 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C326 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C328 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C32A                            ; ===========================================================================
0000C32A                            
0000C32A                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000C32A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000C32E 7000                       		moveq	#0,d0
0000C330 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000C334 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000C338 6700                       		beq.s	loc_B8A8	; if not, branch
0000C33A 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000C33E 6A00                       		bpl.s	loc_B872
0000C340 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C346 6700                       		beq.s	loc_B8A0
0000C348                            
0000C348                            loc_B872:
0000C348 4A68 0032                  		tst.w	$32(a0)
0000C34C 6700                       		beq.s	loc_B8A0
0000C34E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C352 0200 000F                  		andi.b	#$F,d0
0000C356 6600                       		bne.s	loc_B892
0000C358 4A28 0001                  		tst.b	1(a0)
0000C35C 6A00                       		bpl.s	loc_B892
0000C35E 303C 00C7                  		move.w	#$C7,d0
0000C362 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C368                            
0000C368                            loc_B892:
0000C368 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C36E 6400                       		bcc.s	Obj31_Restart
0000C370 317C 0000 0032             		move.w	#0,$32(a0)
0000C376                            
0000C376                            loc_B8A0:
0000C376 317C 0000 0012             		move.w	#0,$12(a0)
0000C37C 6000                       		bra.s	Obj31_Restart
0000C37E                            ; ===========================================================================
0000C37E                            
0000C37E                            loc_B8A8:				; XREF: Obj31_Type00
0000C37E 3228 0034                  		move.w	$34(a0),d1
0000C382 B268 0032                  		cmp.w	$32(a0),d1
0000C386 6700                       		beq.s	Obj31_Restart
0000C388 3028 0012                  		move.w	$12(a0),d0
0000C38C 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C392 D168 0032                  		add.w	d0,$32(a0)
0000C396 B268 0032                  		cmp.w	$32(a0),d1
0000C39A 6200                       		bhi.s	Obj31_Restart
0000C39C 3141 0032                  		move.w	d1,$32(a0)
0000C3A0 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C3A6 4A28 0001                  		tst.b	1(a0)
0000C3AA 6A00                       		bpl.s	Obj31_Restart
0000C3AC 303C 00BD                  		move.w	#$BD,d0
0000C3B0 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C3B6                            
0000C3B6                            Obj31_Restart:
0000C3B6 7000                       		moveq	#0,d0
0000C3B8 1028 0032                  		move.b	$32(a0),d0
0000C3BC D068 0030                  		add.w	$30(a0),d0
0000C3C0 3140 000C                  		move.w	d0,$C(a0)
0000C3C4 4E75                       		rts	
0000C3C6                            ; ===========================================================================
0000C3C6                            
0000C3C6                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000C3C6 4A68 0036                  		tst.w	$36(a0)
0000C3CA 6700                       		beq.s	loc_B938
0000C3CC 4A68 0038                  		tst.w	$38(a0)
0000C3D0 6700                       		beq.s	loc_B902
0000C3D2 5368 0038                  		subq.w	#1,$38(a0)
0000C3D6 6000                       		bra.s	loc_B97C
0000C3D8                            ; ===========================================================================
0000C3D8                            
0000C3D8                            loc_B902:
0000C3D8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C3DC 0200 000F                  		andi.b	#$F,d0
0000C3E0 6600                       		bne.s	loc_B91C
0000C3E2 4A28 0001                  		tst.b	1(a0)
0000C3E6 6A00                       		bpl.s	loc_B91C
0000C3E8 303C 00C7                  		move.w	#$C7,d0
0000C3EC 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C3F2                            
0000C3F2                            loc_B91C:
0000C3F2 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C3F8 6400                       		bcc.s	loc_B97C
0000C3FA 317C 0000 0032             		move.w	#0,$32(a0)
0000C400 317C 0000 0012             		move.w	#0,$12(a0)
0000C406 317C 0000 0036             		move.w	#0,$36(a0)
0000C40C 6000                       		bra.s	loc_B97C
0000C40E                            ; ===========================================================================
0000C40E                            
0000C40E                            loc_B938:				; XREF: Obj31_Type01
0000C40E 3228 0034                  		move.w	$34(a0),d1
0000C412 B268 0032                  		cmp.w	$32(a0),d1
0000C416 6700                       		beq.s	loc_B97C
0000C418 3028 0012                  		move.w	$12(a0),d0
0000C41C 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C422 D168 0032                  		add.w	d0,$32(a0)
0000C426 B268 0032                  		cmp.w	$32(a0),d1
0000C42A 6200                       		bhi.s	loc_B97C
0000C42C 3141 0032                  		move.w	d1,$32(a0)
0000C430 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C436 317C 0001 0036             		move.w	#1,$36(a0)
0000C43C 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C442 4A28 0001                  		tst.b	1(a0)
0000C446 6A00                       		bpl.s	loc_B97C
0000C448 303C 00BD                  		move.w	#$BD,d0
0000C44C 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C452                            
0000C452                            loc_B97C:
0000C452 6000 FF62                  		bra.w	Obj31_Restart
0000C456                            ; ===========================================================================
0000C456                            
0000C456                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000C456 3038 D008                  		move.w	($FFFFD008).w,d0
0000C45A 9068 0008                  		sub.w	8(a0),d0
0000C45E 6400                       		bcc.s	loc_B98C
0000C460 4440                       		neg.w	d0
0000C462                            
0000C462                            loc_B98C:
0000C462 0C40 0090                  		cmpi.w	#$90,d0
0000C466 6400                       		bcc.s	loc_B996
0000C468 5228 0028                  		addq.b	#1,$28(a0)
0000C46C                            
0000C46C                            loc_B996:
0000C46C 6000 FF48                  		bra.w	Obj31_Restart
0000C470                            ; ===========================================================================
0000C470                            ; ---------------------------------------------------------------------------
0000C470                            ; Object 45 - spiked metal block from beta version (MZ)
0000C470                            ; ---------------------------------------------------------------------------
0000C470                            
0000C470                            Obj45:					; XREF: Obj_Index
0000C470 7000                       		moveq	#0,d0
0000C472 1028 0024                  		move.b	$24(a0),d0
0000C476 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000C47A 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000C47E                            ; ===========================================================================
0000C47E 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000C480 0000                       		dc.w Obj45_Solid-Obj45_Index
0000C482 0000                       		dc.w loc_BA8E-Obj45_Index
0000C484 0000                       		dc.w Obj45_Display-Obj45_Index
0000C486 0000                       		dc.w loc_BA7A-Obj45_Index
0000C488                            
0000C488 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000C48B 04E4 01                    		dc.b	4, $E4,	  1
0000C48E 0834 03                    		dc.b	8, $34,	  3
0000C491 0628 02                    		dc.b	6, $28,	  2
0000C494                            
0000C494 3800                       word_B9BE:	dc.w $3800
0000C496 A000                       		dc.w -$6000
0000C498 5000                       		dc.w $5000
0000C49A                            ; ===========================================================================
0000C49A                            
0000C49A                            Obj45_Main:				; XREF: Obj45_Index
0000C49A 7000                       		moveq	#0,d0
0000C49C 1028 0028                  		move.b	$28(a0),d0
0000C4A0 D040                       		add.w	d0,d0
0000C4A2 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000C4A6 45F9 0000 C488             		lea	(Obj45_Var).l,a2
0000C4AC 2248                       		movea.l	a0,a1
0000C4AE 7203                       		moveq	#3,d1
0000C4B0 6000                       		bra.s	Obj45_Load
0000C4B2                            ; ===========================================================================
0000C4B2                            
0000C4B2                            Obj45_Loop:
0000C4B2 6100 0000                  		bsr.w	SingleObjLoad2
0000C4B6 6600                       		bne.s	loc_BA52
0000C4B8                            
0000C4B8                            Obj45_Load:				; XREF: Obj45_Main
0000C4B8 135A 0024                  		move.b	(a2)+,$24(a1)
0000C4BC 12BC 0045                  		move.b	#$45,0(a1)
0000C4C0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C4C6 101A                       		move.b	(a2)+,d0
0000C4C8 4880                       		ext.w	d0
0000C4CA D068 0008                  		add.w	8(a0),d0
0000C4CE 3340 0008                  		move.w	d0,8(a1)
0000C4D2 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000C4DA 337C 0300 0002             		move.w	#$300,2(a1)
0000C4E0 137C 0004 0001             		move.b	#4,1(a1)
0000C4E6 3369 0008 0030             		move.w	8(a1),$30(a1)
0000C4EC 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000C4F2 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C4F8 137C 0020 0019             		move.b	#$20,$19(a1)
0000C4FE 3342 0034                  		move.w	d2,$34(a1)
0000C502 137C 0004 0018             		move.b	#4,$18(a1)
0000C508 0C12 0001                  		cmpi.b	#1,(a2)
0000C50C 6600                       		bne.s	loc_BA40
0000C50E 137C 0091 0020             		move.b	#$91,$20(a1)
0000C514                            
0000C514                            loc_BA40:
0000C514 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C518 2348 003C                  		move.l	a0,$3C(a1)
0000C51C 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000C520                            
0000C520 137C 0003 0018             		move.b	#3,$18(a1)
0000C526                            
0000C526                            loc_BA52:
0000C526 117C 0010 0019             		move.b	#$10,$19(a0)
0000C52C                            
0000C52C                            Obj45_Solid:				; XREF: Obj45_Index
0000C52C 3F28 0008                  		move.w	8(a0),-(sp)
0000C530 6100 0000                  		bsr.w	Obj45_Move
0000C534 323C 0017                  		move.w	#$17,d1
0000C538 343C 0020                  		move.w	#$20,d2
0000C53C 363C 0020                  		move.w	#$20,d3
0000C540 381F                       		move.w	(sp)+,d4
0000C542 6100 0000                  		bsr.w	SolidObject
0000C546 6100 0000                  		bsr.w	DisplaySprite
0000C54A 6000 0000                  		bra.w	Obj45_ChkDel
0000C54E                            ; ===========================================================================
0000C54E                            
0000C54E                            loc_BA7A:				; XREF: Obj45_Index
0000C54E 2268 003C                  		movea.l	$3C(a0),a1
0000C552 1029 0032                  		move.b	$32(a1),d0
0000C556 0600 0010                  		addi.b	#$10,d0
0000C55A EA08                       		lsr.b	#5,d0
0000C55C 5600                       		addq.b	#3,d0
0000C55E 1140 001A                  		move.b	d0,$1A(a0)
0000C562                            
0000C562                            loc_BA8E:				; XREF: Obj45_Index
0000C562 2268 003C                  		movea.l	$3C(a0),a1
0000C566 7000                       		moveq	#0,d0
0000C568 1029 0032                  		move.b	$32(a1),d0
0000C56C 4440                       		neg.w	d0
0000C56E D068 0030                  		add.w	$30(a0),d0
0000C572 3140 0008                  		move.w	d0,8(a0)
0000C576                            
0000C576                            Obj45_Display:				; XREF: Obj45_Index
0000C576 6100 0000                  		bsr.w	DisplaySprite
0000C57A                            
0000C57A                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000C57A 3028 003A                  		move.w	$3A(a0),d0
0000C57E 0240 FF80                  		andi.w	#$FF80,d0
0000C582 3238 F700                  		move.w	($FFFFF700).w,d1
0000C586 0441 0080                  		subi.w	#$80,d1
0000C58A 0241 FF80                  		andi.w	#$FF80,d1
0000C58E 9041                       		sub.w	d1,d0
0000C590 0C40 0280                  		cmpi.w	#$280,d0
0000C594 6200 0000                  		bhi.w	DeleteObject
0000C598 4E75                       		rts	
0000C59A                            
0000C59A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C59A                            
0000C59A                            
0000C59A                            Obj45_Move:				; XREF: Obj45_Solid
0000C59A 7000                       		moveq	#0,d0
0000C59C 1028 0028                  		move.b	$28(a0),d0
0000C5A0 D040                       		add.w	d0,d0
0000C5A2 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000C5A6 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000C5AA                            ; End of function Obj45_Move
0000C5AA                            
0000C5AA                            ; ===========================================================================
0000C5AA 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000C5AC 0000                       		dc.w loc_BADA-off_BAD6
0000C5AE                            ; ===========================================================================
0000C5AE                            
0000C5AE                            loc_BADA:				; XREF: off_BAD6
0000C5AE 4A68 0036                  		tst.w	$36(a0)
0000C5B2 6700                       		beq.s	loc_BB08
0000C5B4 4A68 0038                  		tst.w	$38(a0)
0000C5B8 6700                       		beq.s	loc_BAEC
0000C5BA 5368 0038                  		subq.w	#1,$38(a0)
0000C5BE 6000                       		bra.s	loc_BB3C
0000C5C0                            ; ===========================================================================
0000C5C0                            
0000C5C0                            loc_BAEC:
0000C5C0 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C5C6 6400                       		bcc.s	loc_BB3C
0000C5C8 317C 0000 0032             		move.w	#0,$32(a0)
0000C5CE 317C 0000 0010             		move.w	#0,$10(a0)
0000C5D4 317C 0000 0036             		move.w	#0,$36(a0)
0000C5DA 6000                       		bra.s	loc_BB3C
0000C5DC                            ; ===========================================================================
0000C5DC                            
0000C5DC                            loc_BB08:				; XREF: loc_BADA
0000C5DC 3228 0034                  		move.w	$34(a0),d1
0000C5E0 B268 0032                  		cmp.w	$32(a0),d1
0000C5E4 6700                       		beq.s	loc_BB3C
0000C5E6 3028 0010                  		move.w	$10(a0),d0
0000C5EA 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C5F0 D168 0032                  		add.w	d0,$32(a0)
0000C5F4 B268 0032                  		cmp.w	$32(a0),d1
0000C5F8 6200                       		bhi.s	loc_BB3C
0000C5FA 3141 0032                  		move.w	d1,$32(a0)
0000C5FE 317C 0000 0010             		move.w	#0,$10(a0)
0000C604 317C 0001 0036             		move.w	#1,$36(a0)
0000C60A 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C610                            
0000C610                            loc_BB3C:
0000C610 7000                       		moveq	#0,d0
0000C612 1028 0032                  		move.b	$32(a0),d0
0000C616 4440                       		neg.w	d0
0000C618 D068 0030                  		add.w	$30(a0),d0
0000C61C 3140 0008                  		move.w	d0,8(a0)
0000C620 4E75                       		rts	
0000C622                            ; ===========================================================================
0000C622                            ; ---------------------------------------------------------------------------
0000C622                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C622                            ; ---------------------------------------------------------------------------
0000C622                            Map_obj31:
0000C622                            	include "_maps\obj31.asm"
0000C622                            ; ---------------------------------------------------------------------------
0000C622                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C622                            ; ---------------------------------------------------------------------------
0000C622 0000                       		dc.w byte_BB64-Map_obj31
0000C624 0000                       		dc.w byte_BB7E-Map_obj31
0000C626 0000                       		dc.w byte_BB98-Map_obj31
0000C628 0000                       		dc.w byte_BB9E-Map_obj31
0000C62A 0000                       		dc.w byte_BBA9-Map_obj31
0000C62C 0000                       		dc.w byte_BBBE-Map_obj31
0000C62E 0000                       		dc.w byte_BBDD-Map_obj31
0000C630 0000                       		dc.w byte_BC06-Map_obj31
0000C632 0000                       		dc.w byte_BC06-Map_obj31
0000C634 0000                       		dc.w byte_BC39-Map_obj31
0000C636 0000                       		dc.w byte_BC53-Map_obj31
0000C638 05                         byte_BB64:	dc.b 5
0000C639 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C63E F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C643 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C648 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C64D F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C652 05                         byte_BB7E:	dc.b 5
0000C653 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C658 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C65D F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C662 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C667 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C66C 01                         byte_BB98:	dc.b 1
0000C66D DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C672 02                         byte_BB9E:	dc.b 2
0000C673 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C678 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C67D 04                         byte_BBA9:	dc.b 4
0000C67E E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C683 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C688 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C68D 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C692 06                         byte_BBBE:	dc.b 6
0000C693 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C698 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C69D E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C6A2 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C6A7 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C6AC 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C6B1 08                         byte_BBDD:	dc.b 8
0000C6B2 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C6B7 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C6BC C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C6C1 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C6C6 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C6CB F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C6D0 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C6D5 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C6DA 0A                         byte_BC06:	dc.b $A
0000C6DB 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C6E0 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C6E5 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C6EA B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C6EF C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C6F4 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C6F9 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C6FE F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C703 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C708 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C70D 05                         byte_BC39:	dc.b 5
0000C70E F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C713 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C718 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C71D F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C722 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C727 01                         byte_BC53:	dc.b 1
0000C728 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C72E 00                         		even
0000C72E 00                         		even
0000C72E                            
0000C72E                            ; ---------------------------------------------------------------------------
0000C72E                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C72E                            ; ---------------------------------------------------------------------------
0000C72E                            Map_obj45:
0000C72E                            	include "_maps\obj45.asm"
0000C72E                            ; ---------------------------------------------------------------------------
0000C72E                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C72E                            ; ---------------------------------------------------------------------------
0000C72E 0000                       		dc.w byte_BC6C-Map_obj45
0000C730 0000                       		dc.w byte_BC7C-Map_obj45
0000C732 0000                       		dc.w byte_BC8C-Map_obj45
0000C734 0000                       		dc.w byte_BC92-Map_obj45
0000C736 0000                       		dc.w byte_BC9D-Map_obj45
0000C738 0000                       		dc.w byte_BCB2-Map_obj45
0000C73A 0000                       		dc.w byte_BCD1-Map_obj45
0000C73C 0000                       		dc.w byte_BCFA-Map_obj45
0000C73E 0000                       		dc.w byte_BCFA-Map_obj45
0000C740 03                         byte_BC6C:	dc.b 3
0000C741 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C746 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C74B F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C750 03                         byte_BC7C:	dc.b 3
0000C751 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C756 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C75B 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C760 01                         byte_BC8C:	dc.b 1
0000C761 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C766 02                         byte_BC92:	dc.b 2
0000C767 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C76C F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C771 04                         byte_BC9D:	dc.b 4
0000C772 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C777 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C77C F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C781 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C786 06                         byte_BCB2:	dc.b 6
0000C787 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C78C F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C791 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C796 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C79B F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C7A0 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C7A5 08                         byte_BCD1:	dc.b 8
0000C7A6 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C7AB F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C7B0 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C7B5 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C7BA F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C7BF F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C7C4 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C7C9 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C7CE 08                         byte_BCFA:	dc.b 8
0000C7CF F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C7D4 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C7D9 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C7DE F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C7E3 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C7E8 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C7ED F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C7F2 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C7F7 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C7FC F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C802 00                         		even
0000C802 00                         		even
0000C802                            
0000C802                            ; ===========================================================================
0000C802                            ; ---------------------------------------------------------------------------
0000C802                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C802                            ; ---------------------------------------------------------------------------
0000C802                            
0000C802                            Obj32:					; XREF: Obj_Index
0000C802 7000                       		moveq	#0,d0
0000C804 1028 0024                  		move.b	$24(a0),d0
0000C808 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C80C 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C810                            ; ===========================================================================
0000C810 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C812 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C814                            ; ===========================================================================
0000C814                            
0000C814                            Obj32_Main:				; XREF: Obj32_Index
0000C814 5428 0024                  		addq.b	#2,$24(a0)
0000C818 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C820 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C826 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C82C 6700                       		beq.s	loc_BD60
0000C82E 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C834                            
0000C834                            loc_BD60:
0000C834 117C 0004 0001             		move.b	#4,1(a0)
0000C83A 117C 0010 0019             		move.b	#$10,$19(a0)
0000C840 117C 0004 0018             		move.b	#4,$18(a0)
0000C846 5668 000C                  		addq.w	#3,$C(a0)
0000C84A                            
0000C84A                            Obj32_Pressed:				; XREF: Obj32_Index
0000C84A 4A28 0001                  		tst.b	1(a0)
0000C84E 6A00                       		bpl.s	Obj32_Display
0000C850 323C 001B                  		move.w	#$1B,d1
0000C854 343C 0005                  		move.w	#5,d2
0000C858 363C 0005                  		move.w	#5,d3
0000C85C 3828 0008                  		move.w	8(a0),d4
0000C860 6100 0000                  		bsr.w	SolidObject
0000C864 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C86A 1028 0028                  		move.b	$28(a0),d0
0000C86E 0240 000F                  		andi.w	#$F,d0
0000C872 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C876 47F3 0000                  		lea	(a3,d0.w),a3
0000C87A 7600                       		moveq	#0,d3
0000C87C 0828 0006 0028             		btst	#6,$28(a0)
0000C882 6700                       		beq.s	loc_BDB2
0000C884 7607                       		moveq	#7,d3
0000C886                            
0000C886                            loc_BDB2:
0000C886 4A28 0028                  		tst.b	$28(a0)
0000C88A 6A00                       		bpl.s	loc_BDBE
0000C88C 6100 0000                  		bsr.w	Obj32_MZBlock
0000C890 6600                       		bne.s	loc_BDC8
0000C892                            
0000C892                            loc_BDBE:
0000C892 4A28 0025                  		tst.b	$25(a0)
0000C896 6600                       		bne.s	loc_BDC8
0000C898 0793                       		bclr	d3,(a3)
0000C89A 6000                       		bra.s	loc_BDDE
0000C89C                            ; ===========================================================================
0000C89C                            
0000C89C                            loc_BDC8:
0000C89C 4A13                       		tst.b	(a3)
0000C89E 6600                       		bne.s	loc_BDD6
0000C8A0 303C 00CD                  		move.w	#$CD,d0
0000C8A4 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play switch sound
0000C8AA                            
0000C8AA                            loc_BDD6:
0000C8AA 07D3                       		bset	d3,(a3)
0000C8AC 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C8B2                            
0000C8B2                            loc_BDDE:
0000C8B2 0828 0005 0028             		btst	#5,$28(a0)
0000C8B8 6700                       		beq.s	Obj32_Display
0000C8BA 5328 001E                  		subq.b	#1,$1E(a0)
0000C8BE 6A00                       		bpl.s	Obj32_Display
0000C8C0 117C 0007 001E             		move.b	#7,$1E(a0)
0000C8C6 0868 0001 001A             		bchg	#1,$1A(a0)
0000C8CC                            
0000C8CC                            Obj32_Display:
0000C8CC 6100 0000                  		bsr.w	DisplaySprite
0000C8D0 3028 0008                  		move.w	8(a0),d0
0000C8D4 0240 FF80                  		andi.w	#$FF80,d0
0000C8D8 3238 F700                  		move.w	($FFFFF700).w,d1
0000C8DC 0441 0080                  		subi.w	#$80,d1
0000C8E0 0241 FF80                  		andi.w	#$FF80,d1
0000C8E4 9041                       		sub.w	d1,d0
0000C8E6 0C40 0280                  		cmpi.w	#$280,d0
0000C8EA 6200 0000                  		bhi.w	Obj32_Delete
0000C8EE 4E75                       		rts	
0000C8F0                            ; ===========================================================================
0000C8F0                            
0000C8F0                            Obj32_Delete:
0000C8F0 6100 0000                  		bsr.w	DeleteObject
0000C8F4 4E75                       		rts	
0000C8F6                            
0000C8F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C8F6                            
0000C8F6                            
0000C8F6                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C8F6 3F03                       		move.w	d3,-(sp)
0000C8F8 3428 0008                  		move.w	8(a0),d2
0000C8FC 3628 000C                  		move.w	$C(a0),d3
0000C900 0442 0010                  		subi.w	#$10,d2
0000C904 5143                       		subq.w	#8,d3
0000C906 383C 0020                  		move.w	#$20,d4
0000C90A 3A3C 0010                  		move.w	#$10,d5
0000C90E 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C912 3C3C 005F                  		move.w	#$5F,d6
0000C916                            
0000C916                            Obj32_MZLoop:
0000C916 4A29 0001                  		tst.b	1(a1)
0000C91A 6A00                       		bpl.s	loc_BE4E
0000C91C 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C920 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C922                            
0000C922                            loc_BE4E:
0000C922 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C926 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C92A                            
0000C92A 361F                       		move.w	(sp)+,d3
0000C92C 7000                       		moveq	#0,d0
0000C92E                            
0000C92E                            locret_BE5A:
0000C92E 4E75                       		rts	
0000C930                            ; ===========================================================================
0000C930 1010                       Obj32_MZData:	dc.b $10, $10
0000C932                            ; ===========================================================================
0000C932                            
0000C932                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C932 7001                       		moveq	#1,d0
0000C934 0240 003F                  		andi.w	#$3F,d0
0000C938 D040                       		add.w	d0,d0
0000C93A 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C93E 121A                       		move.b	(a2)+,d1
0000C940 4881                       		ext.w	d1
0000C942 3029 0008                  		move.w	8(a1),d0
0000C946 9041                       		sub.w	d1,d0
0000C948 9042                       		sub.w	d2,d0
0000C94A 6400                       		bcc.s	loc_BE80
0000C94C D241                       		add.w	d1,d1
0000C94E D041                       		add.w	d1,d0
0000C950 6500                       		bcs.s	loc_BE84
0000C952 60CE                       		bra.s	loc_BE4E
0000C954                            ; ===========================================================================
0000C954                            
0000C954                            loc_BE80:
0000C954 B044                       		cmp.w	d4,d0
0000C956 62CA                       		bhi.s	loc_BE4E
0000C958                            
0000C958                            loc_BE84:
0000C958 121A                       		move.b	(a2)+,d1
0000C95A 4881                       		ext.w	d1
0000C95C 3029 000C                  		move.w	$C(a1),d0
0000C960 9041                       		sub.w	d1,d0
0000C962 9043                       		sub.w	d3,d0
0000C964 6400                       		bcc.s	loc_BE9A
0000C966 D241                       		add.w	d1,d1
0000C968 D041                       		add.w	d1,d0
0000C96A 6500                       		bcs.s	loc_BE9E
0000C96C 60B4                       		bra.s	loc_BE4E
0000C96E                            ; ===========================================================================
0000C96E                            
0000C96E                            loc_BE9A:
0000C96E B045                       		cmp.w	d5,d0
0000C970 62B0                       		bhi.s	loc_BE4E
0000C972                            
0000C972                            loc_BE9E:
0000C972 361F                       		move.w	(sp)+,d3
0000C974 7001                       		moveq	#1,d0
0000C976 4E75                       		rts	
0000C978                            ; End of function Obj32_MZBlock
0000C978                            
0000C978                            ; ===========================================================================
0000C978                            ; ---------------------------------------------------------------------------
0000C978                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C978                            ; ---------------------------------------------------------------------------
0000C978                            Map_obj32:
0000C978                            	include "_maps\obj32.asm"
0000C978                            ; ---------------------------------------------------------------------------
0000C978                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C978                            ; ---------------------------------------------------------------------------
0000C978 0000                       		dc.w byte_BEAC-Map_obj32
0000C97A 0000                       		dc.w byte_BEB7-Map_obj32
0000C97C 0000                       		dc.w byte_BEC2-Map_obj32
0000C97E 0000                       		dc.w byte_BEB7-Map_obj32
0000C980 02                         byte_BEAC:	dc.b 2
0000C981 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C986 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C98B 02                         byte_BEB7:	dc.b 2
0000C98C F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C991 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C996 02                         byte_BEC2:	dc.b 2
0000C997 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C99C F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C9A1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C9A6                            		even
0000C9A6                            		even
0000C9A6                            
0000C9A6                            ; ===========================================================================
0000C9A6                            ; ---------------------------------------------------------------------------
0000C9A6                            ; Object 33 - pushable blocks (MZ, LZ)
0000C9A6                            ; ---------------------------------------------------------------------------
0000C9A6                            
0000C9A6                            Obj33:					; XREF: Obj_Index
0000C9A6 7000                       		moveq	#0,d0
0000C9A8 1028 0024                  		move.b	$24(a0),d0
0000C9AC 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C9B0 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C9B4                            ; ===========================================================================
0000C9B4 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C9B6 0000                       		dc.w loc_BF6E-Obj33_Index
0000C9B8 0000                       		dc.w loc_C02C-Obj33_Index
0000C9BA                            
0000C9BA 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C9BC 4001                       		dc.b $40, 1
0000C9BE                            ; ===========================================================================
0000C9BE                            
0000C9BE                            Obj33_Main:				; XREF: Obj33_Index
0000C9BE 5428 0024                  		addq.b	#2,$24(a0)
0000C9C2 117C 000F 0016             		move.b	#$F,$16(a0)
0000C9C8 117C 000F 0017             		move.b	#$F,$17(a0)
0000C9CE 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C9D6 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C9DC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C9E2 6600                       		bne.s	loc_BF16
0000C9E4 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C9EA                            
0000C9EA                            loc_BF16:
0000C9EA 117C 0004 0001             		move.b	#4,1(a0)
0000C9F0 117C 0003 0018             		move.b	#3,$18(a0)
0000C9F6 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C9FC 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000CA02 7000                       		moveq	#0,d0
0000CA04 1028 0028                  		move.b	$28(a0),d0
0000CA08 D040                       		add.w	d0,d0
0000CA0A 0240 000E                  		andi.w	#$E,d0
0000CA0E 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000CA12 115A 0019                  		move.b	(a2)+,$19(a0)
0000CA16 115A 001A                  		move.b	(a2)+,$1A(a0)
0000CA1A 4A28 0028                  		tst.b	$28(a0)
0000CA1E 6700                       		beq.s	Obj33_ChkGone
0000CA20 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000CA26                            
0000CA26                            Obj33_ChkGone:
0000CA26 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000CA2A 7000                       		moveq	#0,d0
0000CA2C 1028 0023                  		move.b	$23(a0),d0
0000CA30 6700                       		beq.s	loc_BF6E
0000CA32 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000CA38 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000CA3E 6600 0000                  		bne.w	DeleteObject
0000CA42                            
0000CA42                            loc_BF6E:				; XREF: Obj33_Index
0000CA42 4A28 0032                  		tst.b	$32(a0)
0000CA46 6600 0000                  		bne.w	loc_C046
0000CA4A 7200                       		moveq	#0,d1
0000CA4C 1228 0019                  		move.b	$19(a0),d1
0000CA50 0641 000B                  		addi.w	#$B,d1
0000CA54 343C 0010                  		move.w	#$10,d2
0000CA58 363C 0011                  		move.w	#$11,d3
0000CA5C 3828 0008                  		move.w	8(a0),d4
0000CA60 6100 0000                  		bsr.w	loc_C186
0000CA64 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000CA6A 6600                       		bne.s	loc_BFC6	; if not, branch
0000CA6C 08A8 0007 0028             		bclr	#7,$28(a0)
0000CA72 3028 0008                  		move.w	8(a0),d0
0000CA76 0C40 0A20                  		cmpi.w	#$A20,d0
0000CA7A 6500                       		bcs.s	loc_BFC6
0000CA7C 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000CA80 6400                       		bcc.s	loc_BFC6
0000CA82 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000CA86 0440 001C                  		subi.w	#$1C,d0
0000CA8A 3140 000C                  		move.w	d0,$C(a0)
0000CA8E 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000CA94 08E8 0007 0028             		bset	#7,$28(a0)
0000CA9A                            
0000CA9A                            loc_BFC6:
0000CA9A 3028 0008                  		move.w	8(a0),d0
0000CA9E 0240 FF80                  		andi.w	#$FF80,d0
0000CAA2 3238 F700                  		move.w	($FFFFF700).w,d1
0000CAA6 0441 0080                  		subi.w	#$80,d1
0000CAAA 0241 FF80                  		andi.w	#$FF80,d1
0000CAAE 9041                       		sub.w	d1,d0
0000CAB0 0C40 0280                  		cmpi.w	#$280,d0
0000CAB4 6200                       		bhi.s	loc_BFE6
0000CAB6 6000 0000                  		bra.w	DisplaySprite
0000CABA                            ; ===========================================================================
0000CABA                            
0000CABA                            loc_BFE6:
0000CABA 3028 0034                  		move.w	$34(a0),d0
0000CABE 0240 FF80                  		andi.w	#$FF80,d0
0000CAC2 3238 F700                  		move.w	($FFFFF700).w,d1
0000CAC6 0441 0080                  		subi.w	#$80,d1
0000CACA 0241 FF80                  		andi.w	#$FF80,d1
0000CACE 9041                       		sub.w	d1,d0
0000CAD0 0C40 0280                  		cmpi.w	#$280,d0
0000CAD4 6200                       		bhi.s	loc_C016
0000CAD6 3168 0034 0008             		move.w	$34(a0),8(a0)
0000CADC 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000CAE2 117C 0004 0024             		move.b	#4,$24(a0)
0000CAE8 6000                       		bra.s	loc_C02C
0000CAEA                            ; ===========================================================================
0000CAEA                            
0000CAEA                            loc_C016:
0000CAEA 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000CAEE 7000                       		moveq	#0,d0
0000CAF0 1028 0023                  		move.b	$23(a0),d0
0000CAF4 6700                       		beq.s	loc_C028
0000CAF6 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000CAFC                            
0000CAFC                            loc_C028:
0000CAFC 6000 0000                  		bra.w	DeleteObject
0000CB00                            ; ===========================================================================
0000CB00                            
0000CB00                            loc_C02C:				; XREF: Obj33_Index
0000CB00 6100 0000                  		bsr.w	ChkObjOnScreen2
0000CB04 6700                       		beq.s	locret_C044
0000CB06 117C 0002 0024             		move.b	#2,$24(a0)
0000CB0C 4228 0032                  		clr.b	$32(a0)
0000CB10 4268 0010                  		clr.w	$10(a0)
0000CB14 4268 0012                  		clr.w	$12(a0)
0000CB18                            
0000CB18                            locret_C044:
0000CB18 4E75                       		rts	
0000CB1A                            ; ===========================================================================
0000CB1A                            
0000CB1A                            loc_C046:				; XREF: loc_BF6E
0000CB1A 3F28 0008                  		move.w	8(a0),-(sp)
0000CB1E 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000CB24 6400                       		bcc.s	loc_C056
0000CB26 6100 0000                  		bsr.w	SpeedToPos
0000CB2A                            
0000CB2A                            loc_C056:
0000CB2A 0828 0001 0022             		btst	#1,$22(a0)
0000CB30 6700                       		beq.s	loc_C0A0
0000CB32 0668 0018 0012             		addi.w	#$18,$12(a0)
0000CB38 4EB9 0000 0000             		jsr	ObjHitFloor
0000CB3E 4A41                       		tst.w	d1
0000CB40 6A00 0000                  		bpl.w	loc_C09E
0000CB44 D368 000C                  		add.w	d1,$C(a0)
0000CB48 4268 0012                  		clr.w	$12(a0)
0000CB4C 08A8 0001 0022             		bclr	#1,$22(a0)
0000CB52 3011                       		move.w	(a1),d0
0000CB54 0240 03FF                  		andi.w	#$3FF,d0
0000CB58 0C40 016A                  		cmpi.w	#$16A,d0
0000CB5C 6500                       		bcs.s	loc_C09E
0000CB5E 3028 0030                  		move.w	$30(a0),d0
0000CB62 E640                       		asr.w	#3,d0
0000CB64 3140 0010                  		move.w	d0,$10(a0)
0000CB68 117C 0001 0032             		move.b	#1,$32(a0)
0000CB6E 4268 000E                  		clr.w	$E(a0)
0000CB72                            
0000CB72                            loc_C09E:
0000CB72 6000                       		bra.s	loc_C0E6
0000CB74                            ; ===========================================================================
0000CB74                            
0000CB74                            loc_C0A0:
0000CB74 4A68 0010                  		tst.w	$10(a0)
0000CB78 6700 0000                  		beq.w	loc_C0D6
0000CB7C 6B00                       		bmi.s	loc_C0BC
0000CB7E 7600                       		moveq	#0,d3
0000CB80 1628 0019                  		move.b	$19(a0),d3
0000CB84 4EB9 0000 0000             		jsr	ObjHitWallRight
0000CB8A 4A41                       		tst.w	d1		; has block touched a wall?
0000CB8C 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000CB8E 6000                       		bra.s	loc_C0E6
0000CB90                            ; ===========================================================================
0000CB90                            
0000CB90                            loc_C0BC:
0000CB90 7600                       		moveq	#0,d3
0000CB92 1628 0019                  		move.b	$19(a0),d3
0000CB96 4643                       		not.w	d3
0000CB98 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000CB9E 4A41                       		tst.w	d1		; has block touched a wall?
0000CBA0 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000CBA2 6000                       		bra.s	loc_C0E6
0000CBA4                            ; ===========================================================================
0000CBA4                            
0000CBA4                            Obj33_StopPush:
0000CBA4 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000CBA8 6000                       		bra.s	loc_C0E6
0000CBAA                            ; ===========================================================================
0000CBAA                            
0000CBAA                            loc_C0D6:
0000CBAA 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000CBB2 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000CBB8 6400                       		bcc.s	loc_C104
0000CBBA                            
0000CBBA                            loc_C0E6:
0000CBBA 7200                       		moveq	#0,d1
0000CBBC 1228 0019                  		move.b	$19(a0),d1
0000CBC0 0641 000B                  		addi.w	#$B,d1
0000CBC4 343C 0010                  		move.w	#$10,d2
0000CBC8 363C 0011                  		move.w	#$11,d3
0000CBCC 381F                       		move.w	(sp)+,d4
0000CBCE 6100 0000                  		bsr.w	loc_C186
0000CBD2 6100                       		bsr.s	Obj33_ChkLava
0000CBD4 6000 FEC4                  		bra.w	loc_BFC6
0000CBD8                            ; ===========================================================================
0000CBD8                            
0000CBD8                            loc_C104:
0000CBD8 381F                       		move.w	(sp)+,d4
0000CBDA 43F8 D000                  		lea	($FFFFD000).w,a1
0000CBDE 08A9 0003 0022             		bclr	#3,$22(a1)
0000CBE4 08A8 0003 0022             		bclr	#3,$22(a0)
0000CBEA 6000 FECE                  		bra.w	loc_BFE6
0000CBEE                            ; ===========================================================================
0000CBEE                            
0000CBEE                            Obj33_ChkLava:
0000CBEE 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000CBF4 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000CBF6 343C FFE0                  		move.w	#-$20,d2
0000CBFA 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000CC00 6700                       		beq.s	Obj33_LoadLava
0000CC02 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000CC08 6700                       		beq.s	Obj33_LoadLava
0000CC0A 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000CC10 6700                       		beq.s	Obj33_LoadLava
0000CC12 4E75                       		rts	
0000CC14                            ; ===========================================================================
0000CC14                            
0000CC14                            Obj33_ChkLava2:
0000CC14 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000CC1A 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000CC1C 343C 0020                  		move.w	#$20,d2
0000CC20 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000CC26 6700                       		beq.s	Obj33_LoadLava
0000CC28 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000CC2E 6700                       		beq.s	Obj33_LoadLava
0000CC30                            
0000CC30                            Obj33_NoLava:
0000CC30 4E75                       		rts	
0000CC32                            ; ===========================================================================
0000CC32                            
0000CC32                            Obj33_LoadLava:
0000CC32 6100 0000                  		bsr.w	SingleObjLoad
0000CC36 6600                       		bne.s	locret_C184
0000CC38 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000CC3C 3368 0008 0008             		move.w	8(a0),8(a1)
0000CC42 D569 0008                  		add.w	d2,8(a1)
0000CC46 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CC4C 0669 0010 000C             		addi.w	#$10,$C(a1)
0000CC52 2348 003C                  		move.l	a0,$3C(a1)
0000CC56                            
0000CC56                            locret_C184:
0000CC56 4E75                       		rts	
0000CC58                            ; ===========================================================================
0000CC58                            
0000CC58                            loc_C186:				; XREF: loc_BF6E
0000CC58 1028 0025                  		move.b	$25(a0),d0
0000CC5C 6700 0000                  		beq.w	loc_C218
0000CC60 5500                       		subq.b	#2,d0
0000CC62 6600                       		bne.s	loc_C1AA
0000CC64 6100 B3DE                  		bsr.w	ExitPlatform
0000CC68 0829 0003 0022             		btst	#3,$22(a1)
0000CC6E 6600                       		bne.s	loc_C1A4
0000CC70 4228 0025                  		clr.b	$25(a0)
0000CC74 4E75                       		rts	
0000CC76                            ; ===========================================================================
0000CC76                            
0000CC76                            loc_C1A4:
0000CC76 3404                       		move.w	d4,d2
0000CC78 6000 B928                  		bra.w	MvSonicOnPtfm
0000CC7C                            ; ===========================================================================
0000CC7C                            
0000CC7C                            loc_C1AA:
0000CC7C 5500                       		subq.b	#2,d0
0000CC7E 6600                       		bne.s	loc_C1F2
0000CC80 6100 0000                  		bsr.w	SpeedToPos
0000CC84 0668 0018 0012             		addi.w	#$18,$12(a0)
0000CC8A 4EB9 0000 0000             		jsr	ObjHitFloor
0000CC90 4A41                       		tst.w	d1
0000CC92 6A00 0000                  		bpl.w	locret_C1F0
0000CC96 D368 000C                  		add.w	d1,$C(a0)
0000CC9A 4268 0012                  		clr.w	$12(a0)
0000CC9E 4228 0025                  		clr.b	$25(a0)
0000CCA2 3011                       		move.w	(a1),d0
0000CCA4 0240 03FF                  		andi.w	#$3FF,d0
0000CCA8 0C40 016A                  		cmpi.w	#$16A,d0
0000CCAC 6500                       		bcs.s	locret_C1F0
0000CCAE 3028 0030                  		move.w	$30(a0),d0
0000CCB2 E640                       		asr.w	#3,d0
0000CCB4 3140 0010                  		move.w	d0,$10(a0)
0000CCB8 117C 0001 0032             		move.b	#1,$32(a0)
0000CCBE 4268 000E                  		clr.w	$E(a0)
0000CCC2                            
0000CCC2                            locret_C1F0:
0000CCC2 4E75                       		rts	
0000CCC4                            ; ===========================================================================
0000CCC4                            
0000CCC4                            loc_C1F2:
0000CCC4 6100 0000                  		bsr.w	SpeedToPos
0000CCC8 3028 0008                  		move.w	8(a0),d0
0000CCCC 0240 000C                  		andi.w	#$C,d0
0000CCD0 6600 0000                  		bne.w	locret_C2E4
0000CCD4 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000CCDA 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000CCE0 4268 0010                  		clr.w	$10(a0)
0000CCE4 5528 0025                  		subq.b	#2,$25(a0)
0000CCE8 4E75                       		rts	
0000CCEA                            ; ===========================================================================
0000CCEA                            
0000CCEA                            loc_C218:
0000CCEA 6100 0000                  		bsr.w	loc_FAC8
0000CCEE 4A44                       		tst.w	d4
0000CCF0 6700 0000                  		beq.w	locret_C2E4
0000CCF4 6B00 0000                  		bmi.w	locret_C2E4
0000CCF8 4A28 0032                  		tst.b	$32(a0)
0000CCFC 6700                       		beq.s	loc_C230
0000CCFE 6000 0000                  		bra.w	locret_C2E4
0000CD02                            ; ===========================================================================
0000CD02                            
0000CD02                            loc_C230:
0000CD02 4A40                       		tst.w	d0
0000CD04 6700 0000                  		beq.w	locret_C2E4
0000CD08 6B00                       		bmi.s	loc_C268
0000CD0A 0829 0000 0022             		btst	#0,$22(a1)
0000CD10 6600 0000                  		bne.w	locret_C2E4
0000CD14 3F00                       		move.w	d0,-(sp)
0000CD16 7600                       		moveq	#0,d3
0000CD18 1628 0019                  		move.b	$19(a0),d3
0000CD1C 4EB9 0000 0000             		jsr	ObjHitWallRight
0000CD22 301F                       		move.w	(sp)+,d0
0000CD24 4A41                       		tst.w	d1
0000CD26 6B00 0000                  		bmi.w	locret_C2E4
0000CD2A 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000CD32 7001                       		moveq	#1,d0
0000CD34 323C 0040                  		move.w	#$40,d1
0000CD38 6000                       		bra.s	loc_C294
0000CD3A                            ; ===========================================================================
0000CD3A                            
0000CD3A                            loc_C268:
0000CD3A 0829 0000 0022             		btst	#0,$22(a1)
0000CD40 6700                       		beq.s	locret_C2E4
0000CD42 3F00                       		move.w	d0,-(sp)
0000CD44 7600                       		moveq	#0,d3
0000CD46 1628 0019                  		move.b	$19(a0),d3
0000CD4A 4643                       		not.w	d3
0000CD4C 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000CD52 301F                       		move.w	(sp)+,d0
0000CD54 4A41                       		tst.w	d1
0000CD56 6B00                       		bmi.s	locret_C2E4
0000CD58 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000CD60 70FF                       		moveq	#-1,d0
0000CD62 323C FFC0                  		move.w	#-$40,d1
0000CD66                            
0000CD66                            loc_C294:
0000CD66 43F8 D000                  		lea	($FFFFD000).w,a1
0000CD6A D169 0008                  		add.w	d0,8(a1)
0000CD6E 3341 0014                  		move.w	d1,$14(a1)
0000CD72 337C 0000 0010             		move.w	#0,$10(a1)
0000CD78 3F00                       		move.w	d0,-(sp)
0000CD7A 303C 00A7                  		move.w	#$A7,d0
0000CD7E 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play pushing sound
0000CD84 301F                       		move.w	(sp)+,d0
0000CD86 4A28 0028                  		tst.b	$28(a0)
0000CD8A 6B00                       		bmi.s	locret_C2E4
0000CD8C 3F00                       		move.w	d0,-(sp)
0000CD8E 4EB9 0000 0000             		jsr	ObjHitFloor
0000CD94 301F                       		move.w	(sp)+,d0
0000CD96 0C41 0004                  		cmpi.w	#4,d1
0000CD9A 6F00                       		ble.s	loc_C2E0
0000CD9C 317C 0400 0010             		move.w	#$400,$10(a0)
0000CDA2 4A40                       		tst.w	d0
0000CDA4 6A00                       		bpl.s	loc_C2D8
0000CDA6 4468 0010                  		neg.w	$10(a0)
0000CDAA                            
0000CDAA                            loc_C2D8:
0000CDAA 117C 0006 0025             		move.b	#6,$25(a0)
0000CDB0 6000                       		bra.s	locret_C2E4
0000CDB2                            ; ===========================================================================
0000CDB2                            
0000CDB2                            loc_C2E0:
0000CDB2 D368 000C                  		add.w	d1,$C(a0)
0000CDB6                            
0000CDB6                            locret_C2E4:
0000CDB6 4E75                       		rts	
0000CDB8                            ; ===========================================================================
0000CDB8                            ; ---------------------------------------------------------------------------
0000CDB8                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CDB8                            ; ---------------------------------------------------------------------------
0000CDB8                            Map_obj33:
0000CDB8                            	include "_maps\obj33.asm"
0000CDB8                            ; ---------------------------------------------------------------------------
0000CDB8                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CDB8                            ; ---------------------------------------------------------------------------
0000CDB8 0000                       		dc.w byte_C2EA-Map_obj33
0000CDBA 0000                       		dc.w byte_C2F0-Map_obj33
0000CDBC 01                         byte_C2EA:	dc.b 1
0000CDBD F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000CDC2 04                         byte_C2F0:	dc.b 4
0000CDC3 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000CDC8 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000CDCD F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000CDD2 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000CDD8 00                         		even
0000CDD8 00                         		even
0000CDD8                            
0000CDD8                            ; ===========================================================================
0000CDD8                            ; ---------------------------------------------------------------------------
0000CDD8                            ; Object 34 - zone title cards
0000CDD8                            ; ---------------------------------------------------------------------------
0000CDD8                            
0000CDD8                            Obj34:					; XREF: Obj_Index
0000CDD8 7000                       		moveq	#0,d0
0000CDDA 1028 0024                  		move.b	$24(a0),d0
0000CDDE 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000CDE2 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000CDE6                            ; ===========================================================================
0000CDE6 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000CDE8 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000CDEA 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CDEC 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CDEE                            ; ===========================================================================
0000CDEE                            
0000CDEE                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000CDEE 2248                       		movea.l	a0,a1
0000CDF0 7000                       		moveq	#0,d0
0000CDF2 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CDF6 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000CDFC 6600                       		bne.s	Obj34_CheckFZ
0000CDFE 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000CE00                            
0000CE00                            Obj34_CheckFZ:
0000CE00 3400                       		move.w	d0,d2
0000CE02 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000CE08 6600                       		bne.s	Obj34_LoadConfig
0000CE0A 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000CE0C 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000CE0E                            
0000CE0E                            Obj34_LoadConfig:
0000CE0E 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000CE14 E948                       		lsl.w	#4,d0
0000CE16 D6C0                       		adda.w	d0,a3
0000CE18 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000CE1E 7203                       		moveq	#3,d1
0000CE20                            
0000CE20                            Obj34_Loop:
0000CE20 12BC 0034                  		move.b	#$34,0(a1)
0000CE24 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000CE28 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000CE2C 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000CE30 335A 000A                  		move.w	(a2)+,$A(a1)
0000CE34 135A 0024                  		move.b	(a2)+,$24(a1)
0000CE38 101A                       		move.b	(a2)+,d0
0000CE3A 6600                       		bne.s	Obj34_ActNumber
0000CE3C 1002                       		move.b	d2,d0
0000CE3E                            
0000CE3E                            Obj34_ActNumber:
0000CE3E 0C00 0007                  		cmpi.b	#7,d0
0000CE42 6600                       		bne.s	Obj34_MakeSprite
0000CE44 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000CE48 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000CE4E 6600                       		bne.s	Obj34_MakeSprite
0000CE50 5300                       		subq.b	#1,d0
0000CE52                            
0000CE52                            Obj34_MakeSprite:
0000CE52 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000CE56 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000CE5E 337C 8580 0002             		move.w	#$8580,2(a1)
0000CE64 137C 0078 0019             		move.b	#$78,$19(a1)
0000CE6A 137C 0000 0001             		move.b	#0,1(a1)
0000CE70 137C 0000 0018             		move.b	#0,$18(a1)
0000CE76 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000CE7C 43E9 0040                  		lea	$40(a1),a1	; next object
0000CE80 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000CE84                            
0000CE84                            Obj34_ChkPos:				; XREF: Obj34_Index
0000CE84 7210                       		moveq	#$10,d1		; set horizontal speed
0000CE86 3028 0030                  		move.w	$30(a0),d0
0000CE8A B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000CE8E 6700                       		beq.s	loc_C3C8	; if yes, branch
0000CE90 6C00                       		bge.s	Obj34_Move
0000CE92 4441                       		neg.w	d1
0000CE94                            
0000CE94                            Obj34_Move:
0000CE94 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CE98                            
0000CE98                            loc_C3C8:
0000CE98 3028 0008                  		move.w	8(a0),d0
0000CE9C 6B00                       		bmi.s	locret_C3D8
0000CE9E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CEA2 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000CEA4 6000 0000                  		bra.w	DisplaySprite
0000CEA8                            ; ===========================================================================
0000CEA8                            
0000CEA8                            locret_C3D8:
0000CEA8 4E75                       		rts	
0000CEAA                            ; ===========================================================================
0000CEAA                            
0000CEAA                            Obj34_Wait:				; XREF: Obj34_Index
0000CEAA 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000CEAE 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000CEB0 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000CEB4 6000 0000                  		bra.w	DisplaySprite
0000CEB8                            ; ===========================================================================
0000CEB8                            
0000CEB8                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000CEB8 4A28 0001                  		tst.b	1(a0)
0000CEBC 6A00                       		bpl.s	Obj34_ChangeArt
0000CEBE 7220                       		moveq	#$20,d1
0000CEC0 3028 0032                  		move.w	$32(a0),d0
0000CEC4 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000CEC8 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000CECA 6C00                       		bge.s	Obj34_Move2
0000CECC 4441                       		neg.w	d1
0000CECE                            
0000CECE                            Obj34_Move2:
0000CECE D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CED2 3028 0008                  		move.w	8(a0),d0
0000CED6 6B00                       		bmi.s	locret_C412
0000CED8 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CEDC 6400                       		bcc.s	locret_C412	; if yes, branch
0000CEDE 6000 0000                  		bra.w	DisplaySprite
0000CEE2                            ; ===========================================================================
0000CEE2                            
0000CEE2                            locret_C412:
0000CEE2 4E75                       		rts	
0000CEE4                            ; ===========================================================================
0000CEE4                            
0000CEE4                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000CEE4 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000CEEA 6600                       		bne.s	Obj34_Delete
0000CEEC 7002                       		moveq	#2,d0
0000CEEE 4EB9 0000 16EA             		jsr	(LoadPLC).l	; load explosion patterns
0000CEF4 7000                       		moveq	#0,d0
0000CEF6 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CEFA 0640 0015                  		addi.w	#$15,d0
0000CEFE 4EB9 0000 16EA             		jsr	(LoadPLC).l	; load animal patterns
0000CF04                            
0000CF04                            Obj34_Delete:
0000CF04 6000 0000                  		bra.w	DeleteObject
0000CF08                            ; ===========================================================================
0000CF08 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000CF0A 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000CF0C 00E4                       		dc.w $E4
0000CF0E 0206                       		dc.b 2,	6
0000CF10 00EA                       		dc.w $EA
0000CF12 0207                       		dc.b 2,	7
0000CF14 00E0                       		dc.w $E0
0000CF16 020A                       		dc.b 2,	$A
0000CF18                            ; ---------------------------------------------------------------------------
0000CF18                            ; Title	card configuration data
0000CF18                            ; Format:
0000CF18                            ; 4 bytes per item (YYYY XXXX)
0000CF18                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000CF18                            ; ---------------------------------------------------------------------------
0000CF18 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CF28 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000CF38 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000CF48 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000CF58 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000CF68 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000CF78 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000CF88                            ; ===========================================================================
0000CF88                            ; ---------------------------------------------------------------------------
0000CF88                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000CF88                            ; ---------------------------------------------------------------------------
0000CF88                            
0000CF88                            Obj39:					; XREF: Obj_Index
0000CF88 7000                       		moveq	#0,d0
0000CF8A 1028 0024                  		move.b	$24(a0),d0
0000CF8E 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000CF92 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000CF96                            ; ===========================================================================
0000CF96 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000CF98 0000                       		dc.w loc_C50C-Obj39_Index
0000CF9A 0000                       		dc.w Obj39_Wait-Obj39_Index
0000CF9C                            ; ===========================================================================
0000CF9C                            
0000CF9C                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000CF9C 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CFA0 6700                       		beq.s	Obj39_Main	; if yes, branch
0000CFA2 4E75                       		rts	
0000CFA4                            ; ===========================================================================
0000CFA4                            
0000CFA4                            Obj39_Main:
0000CFA4 5428 0024                  		addq.b	#2,$24(a0)
0000CFA8 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000CFAE 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000CFB4 6700                       		beq.s	loc_C4EC	; if not, branch
0000CFB6 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000CFBC                            
0000CFBC                            loc_C4EC:
0000CFBC 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000CFC2 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000CFCA 317C 855E 0002             		move.w	#$855E,2(a0)
0000CFD0 117C 0000 0001             		move.b	#0,1(a0)
0000CFD6 117C 0000 0018             		move.b	#0,$18(a0)
0000CFDC                            
0000CFDC                            loc_C50C:				; XREF: Obj39_Index
0000CFDC 7210                       		moveq	#$10,d1		; set horizontal speed
0000CFDE 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000CFE4 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000CFE6 6500                       		bcs.s	Obj39_Move
0000CFE8 4441                       		neg.w	d1
0000CFEA                            
0000CFEA                            Obj39_Move:
0000CFEA D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CFEE 6000 0000                  		bra.w	DisplaySprite
0000CFF2                            ; ===========================================================================
0000CFF2                            
0000CFF2                            Obj39_SetWait:				; XREF: Obj39_Main
0000CFF2 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000CFF8 5428 0024                  		addq.b	#2,$24(a0)
0000CFFC 4E75                       		rts	
0000CFFE                            ; ===========================================================================
0000CFFE                            
0000CFFE                            Obj39_Wait:				; XREF: Obj39_Index
0000CFFE 1038 F605                  		move.b	($FFFFF605).w,d0
0000D002 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000D006 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000D008 0828 0000 001A             		btst	#0,$1A(a0)
0000D00E 6600                       		bne.s	Obj39_Display
0000D010 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000D014 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000D016 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D01A 6000 0000                  		bra.w	DisplaySprite
0000D01E                            ; ===========================================================================
0000D01E                            
0000D01E                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000D01E 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000D022 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000D024 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000D02A 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000D02E 6600                       		bne.s	Obj39_Display	; if yes, branch
0000D030 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000D036 6000                       		bra.s	Obj39_Display
0000D038                            ; ===========================================================================
0000D038                            
0000D038                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000D038 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D03E                            
0000D03E                            Obj39_Display:				; XREF: Obj39_ChgMode
0000D03E 6000 0000                  		bra.w	DisplaySprite
0000D042                            ; ===========================================================================
0000D042                            ; ---------------------------------------------------------------------------
0000D042                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000D042                            ; ---------------------------------------------------------------------------
0000D042                            
0000D042                            Obj3A:					; XREF: Obj_Index
0000D042 7000                       		moveq	#0,d0
0000D044 1028 0024                  		move.b	$24(a0),d0
0000D048 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000D04C 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000D050                            ; ===========================================================================
0000D050 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000D052 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000D054 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D056 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000D058 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D05A 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000D05C 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D05E 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000D060 0000                       		dc.w loc_C766-Obj3A_Index
0000D062                            ; ===========================================================================
0000D062                            
0000D062                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000D062 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D066 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000D068 4E75                       		rts	
0000D06A                            ; ===========================================================================
0000D06A                            
0000D06A                            Obj3A_Main:
0000D06A 2248                       		movea.l	a0,a1
0000D06C 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000D072 7206                       		moveq	#6,d1
0000D074                            
0000D074                            Obj3A_Loop:
0000D074 12BC 003A                  		move.b	#$3A,0(a1)
0000D078 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000D07C 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000D080 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D084 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D088 135A 0024                  		move.b	(a2)+,$24(a1)
0000D08C 101A                       		move.b	(a2)+,d0
0000D08E 0C00 0006                  		cmpi.b	#6,d0
0000D092 6600                       		bne.s	loc_C5CA
0000D094 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000D098                            
0000D098                            loc_C5CA:
0000D098 1340 001A                  		move.b	d0,$1A(a1)
0000D09C 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000D0A4 337C 8580 0002             		move.w	#$8580,2(a1)
0000D0AA 137C 0000 0001             		move.b	#0,1(a1)
0000D0B0 43E9 0040                  		lea	$40(a1),a1
0000D0B4 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000D0B8                            
0000D0B8                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000D0B8 7210                       		moveq	#$10,d1		; set horizontal speed
0000D0BA 3028 0030                  		move.w	$30(a0),d0
0000D0BE B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D0C2 6700                       		beq.s	loc_C61A	; if yes, branch
0000D0C4 6C00                       		bge.s	Obj3A_Move
0000D0C6 4441                       		neg.w	d1
0000D0C8                            
0000D0C8                            Obj3A_Move:
0000D0C8 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D0CC                            
0000D0CC                            loc_C5FE:				; XREF: loc_C61A
0000D0CC 3028 0008                  		move.w	8(a0),d0
0000D0D0 6B00                       		bmi.s	locret_C60E
0000D0D2 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D0D6 6400                       		bcc.s	locret_C60E	; if yes, branch
0000D0D8 6000 0000                  		bra.w	DisplaySprite
0000D0DC                            ; ===========================================================================
0000D0DC                            
0000D0DC                            locret_C60E:
0000D0DC 4E75                       		rts	
0000D0DE                            ; ===========================================================================
0000D0DE                            
0000D0DE                            loc_C610:				; XREF: loc_C61A
0000D0DE 117C 000E 0024             		move.b	#$E,$24(a0)
0000D0E4 6000 0000                  		bra.w	Obj3A_ChkPos2
0000D0E8                            ; ===========================================================================
0000D0E8                            
0000D0E8                            loc_C61A:				; XREF: Obj3A_ChkPos
0000D0E8 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000D0EE 67EE                       		beq.s	loc_C610
0000D0F0 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D0F6 66D4                       		bne.s	loc_C5FE
0000D0F8 5428 0024                  		addq.b	#2,$24(a0)
0000D0FC 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D102                            
0000D102                            Obj3A_Wait:				; XREF: Obj3A_Index
0000D102 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D106 6600                       		bne.s	Obj3A_Display
0000D108 5428 0024                  		addq.b	#2,$24(a0)
0000D10C                            
0000D10C                            Obj3A_Display:
0000D10C 6000 0000                  		bra.w	DisplaySprite
0000D110                            ; ===========================================================================
0000D110                            
0000D110                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000D110 6100 0000                  		bsr.w	DisplaySprite
0000D114 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000D11A 7000                       		moveq	#0,d0
0000D11C 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000D120 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000D122 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D126 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000D12C                            
0000D12C                            Obj3A_RingBonus:
0000D12C 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D130 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000D132 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D136 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D13C                            
0000D13C                            Obj3A_ChkBonus:
0000D13C 4A40                       		tst.w	d0		; is there any bonus?
0000D13E 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000D140 303C 00C5                  		move.w	#$C5,d0
0000D144 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D14A 5428 0024                  		addq.b	#2,$24(a0)
0000D14E 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000D154 6600                       		bne.s	Obj3A_SetDelay
0000D156 5828 0024                  		addq.b	#4,$24(a0)
0000D15A                            
0000D15A                            Obj3A_SetDelay:
0000D15A 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D160                            
0000D160                            locret_C692:
0000D160 4E75                       		rts	
0000D162                            ; ===========================================================================
0000D162                            
0000D162                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000D162 4EB9 0000 0000             		jsr	AddPoints
0000D168 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D16C 0200 0003                  		andi.b	#3,d0
0000D170 66EE                       		bne.s	locret_C692
0000D172 303C 00CD                  		move.w	#$CD,d0
0000D176 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D17C                            ; ===========================================================================
0000D17C                            
0000D17C                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000D17C 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D180 0240 0007                  		andi.w	#7,d0
0000D184 E748                       		lsl.w	#3,d0
0000D186 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000D18A 0241 0003                  		andi.w	#3,d1
0000D18E D241                       		add.w	d1,d1
0000D190 D041                       		add.w	d1,d0
0000D192 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000D196 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000D19A 4A40                       		tst.w	d0
0000D19C 6600                       		bne.s	Obj3A_ChkSS
0000D19E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000D1A4 6000                       		bra.s	Obj3A_Display2
0000D1A6                            ; ===========================================================================
0000D1A6                            
0000D1A6                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000D1A6 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000D1AA 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000D1AE 6700                       		beq.s	loc_C6EA	; if not, branch
0000D1B0 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000D1B6 6000                       		bra.s	Obj3A_Display2
0000D1B8                            ; ===========================================================================
0000D1B8                            
0000D1B8                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000D1B8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D1BE                            
0000D1BE                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000D1BE 6000 0000                  		bra.w	DisplaySprite
0000D1C2                            ; ===========================================================================
0000D1C2                            ; ---------------------------------------------------------------------------
0000D1C2                            ; Level	order array
0000D1C2                            ; ---------------------------------------------------------------------------
0000D1C2                            LevelOrder:	incbin	misc\lvl_ord.bin
0000D1F2                            		even
0000D1F2                            ; ===========================================================================
0000D1F2                            
0000D1F2                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000D1F2 7220                       		moveq	#$20,d1		; set horizontal speed
0000D1F4 3028 0032                  		move.w	$32(a0),d0
0000D1F8 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000D1FC 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000D1FE 6C00                       		bge.s	Obj3A_Move2
0000D200 4441                       		neg.w	d1
0000D202                            
0000D202                            Obj3A_Move2:
0000D202 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D206 3028 0008                  		move.w	8(a0),d0
0000D20A 6B00                       		bmi.s	locret_C748
0000D20C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D210 6400                       		bcc.s	locret_C748	; if yes, branch
0000D212 6000 0000                  		bra.w	DisplaySprite
0000D216                            ; ===========================================================================
0000D216                            
0000D216                            locret_C748:
0000D216 4E75                       		rts	
0000D218                            ; ===========================================================================
0000D218                            
0000D218                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000D218 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D21E 6600 0000                  		bne.w	DeleteObject
0000D222 5428 0024                  		addq.b	#2,$24(a0)
0000D226 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000D22A 303C 008D                  		move.w	#$8D,d0
0000D22E 4EF9 0000 1470             		jmp	(PlaySound).l	; play FZ music
0000D234                            ; ===========================================================================
0000D234                            
0000D234                            loc_C766:				; XREF: Obj3A_Index
0000D234 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000D238 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000D23E 6700 0000                  		beq.w	DeleteObject
0000D242 4E75                       		rts	
0000D244                            ; ===========================================================================
0000D244 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000D24A 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000D24C FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000D252 0201                       		dc.b 2,	1
0000D254 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000D25A 0206                       		dc.b 2,	6
0000D25C 0520 0120 00EC             		dc.w $520, $120, $EC
0000D262 0202                       		dc.b 2,	2
0000D264 0540 0120 00FC             		dc.w $540, $120, $FC
0000D26A 0203                       		dc.b 2,	3
0000D26C 0560 0120 010C             		dc.w $560, $120, $10C
0000D272 0204                       		dc.b 2,	4
0000D274 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000D27A 0205                       		dc.b 2,	5
0000D27C                            ; ===========================================================================
0000D27C                            ; ---------------------------------------------------------------------------
0000D27C                            ; Object 7E - special stage results screen
0000D27C                            ; ---------------------------------------------------------------------------
0000D27C                            
0000D27C                            Obj7E:					; XREF: Obj_Index
0000D27C 7000                       		moveq	#0,d0
0000D27E 1028 0024                  		move.b	$24(a0),d0
0000D282 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000D286 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000D28A                            ; ===========================================================================
0000D28A 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000D28C 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000D28E 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D290 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000D292 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D294 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D296 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D298 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000D29A 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D29C 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D29E 0000                       		dc.w loc_C91A-Obj7E_Index
0000D2A0                            ; ===========================================================================
0000D2A0                            
0000D2A0                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000D2A0 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D2A4 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000D2A6 4E75                       		rts	
0000D2A8                            ; ===========================================================================
0000D2A8                            
0000D2A8                            Obj7E_Main:
0000D2A8 2248                       		movea.l	a0,a1
0000D2AA 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000D2B0 7203                       		moveq	#3,d1
0000D2B2 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000D2B8 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000D2BA 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000D2BC                            
0000D2BC                            Obj7E_Loop:
0000D2BC 12BC 007E                  		move.b	#$7E,0(a1)
0000D2C0 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000D2C4 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D2C8 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D2CC 135A 0024                  		move.b	(a2)+,$24(a1)
0000D2D0 135A 001A                  		move.b	(a2)+,$1A(a1)
0000D2D4 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000D2DC 337C 8580 0002             		move.w	#$8580,2(a1)
0000D2E2 137C 0000 0001             		move.b	#0,1(a1)
0000D2E8 43E9 0040                  		lea	$40(a1),a1
0000D2EC 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000D2F0                            
0000D2F0 7007                       		moveq	#7,d0
0000D2F2 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000D2F6 6700                       		beq.s	loc_C842
0000D2F8 7000                       		moveq	#0,d0
0000D2FA 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000D2FE 6600                       		bne.s	loc_C842	; if not, branch
0000D300 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000D302 317C 0018 0008             		move.w	#$18,8(a0)
0000D308 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000D30E                            
0000D30E                            loc_C842:
0000D30E 1140 001A                  		move.b	d0,$1A(a0)
0000D312                            
0000D312                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000D312 7210                       		moveq	#$10,d1		; set horizontal speed
0000D314 3028 0030                  		move.w	$30(a0),d0
0000D318 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D31C 6700                       		beq.s	loc_C86C	; if yes, branch
0000D31E 6C00                       		bge.s	Obj7E_Move
0000D320 4441                       		neg.w	d1
0000D322                            
0000D322                            Obj7E_Move:
0000D322 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D326                            
0000D326                            loc_C85A:				; XREF: loc_C86C
0000D326 3028 0008                  		move.w	8(a0),d0
0000D32A 6B00                       		bmi.s	locret_C86A
0000D32C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D330 6400                       		bcc.s	locret_C86A	; if yes, branch
0000D332 6000 0000                  		bra.w	DisplaySprite
0000D336                            ; ===========================================================================
0000D336                            
0000D336                            locret_C86A:
0000D336 4E75                       		rts	
0000D338                            ; ===========================================================================
0000D338                            
0000D338                            loc_C86C:				; XREF: Obj7E_ChkPos
0000D338 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000D33E 66E6                       		bne.s	loc_C85A
0000D340 5428 0024                  		addq.b	#2,$24(a0)
0000D344 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D34A 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000D350                            
0000D350                            Obj7E_Wait:				; XREF: Obj7E_Index
0000D350 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D354 6600                       		bne.s	Obj7E_Display
0000D356 5428 0024                  		addq.b	#2,$24(a0)
0000D35A                            
0000D35A                            Obj7E_Display:
0000D35A 6000 0000                  		bra.w	DisplaySprite
0000D35E                            ; ===========================================================================
0000D35E                            
0000D35E                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000D35E 6100 0000                  		bsr.w	DisplaySprite
0000D362 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000D368 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D36C 6700                       		beq.s	loc_C8C4	; if yes, branch
0000D36E 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D374 700A                       		moveq	#10,d0		; add 10 to score
0000D376 4EB9 0000 0000             		jsr	AddPoints
0000D37C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D380 0200 0003                  		andi.b	#3,d0
0000D384 6600                       		bne.s	locret_C8EA
0000D386 303C 00CD                  		move.w	#$CD,d0
0000D38A 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D390                            ; ===========================================================================
0000D390                            
0000D390                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000D390 303C 00C5                  		move.w	#$C5,d0
0000D394 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D39A 5428 0024                  		addq.b	#2,$24(a0)
0000D39E 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D3A4 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000D3AA 6500                       		bcs.s	locret_C8EA	; if not, branch
0000D3AC 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000D3B2 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000D3B6                            
0000D3B6                            locret_C8EA:
0000D3B6 4E75                       		rts	
0000D3B8                            ; ===========================================================================
0000D3B8                            
0000D3B8                            Obj7E_Exit:				; XREF: Obj7E_Index
0000D3B8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D3BE 6000 0000                  		bra.w	DisplaySprite
0000D3C2                            ; ===========================================================================
0000D3C2                            
0000D3C2                            Obj7E_Continue:				; XREF: Obj7E_Index
0000D3C2 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000D3C8 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000D3CE 303C 00BF                  		move.w	#$BF,d0
0000D3D2 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play continues music
0000D3D8 5428 0024                  		addq.b	#2,$24(a0)
0000D3DC 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000D3E2 6000 0000                  		bra.w	DisplaySprite
0000D3E6                            ; ===========================================================================
0000D3E6                            
0000D3E6                            loc_C91A:				; XREF: Obj7E_Index
0000D3E6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D3EA 0200 000F                  		andi.b	#$F,d0
0000D3EE 6600                       		bne.s	Obj7E_Display2
0000D3F0 0868 0000 001A             		bchg	#0,$1A(a0)
0000D3F6                            
0000D3F6                            Obj7E_Display2:
0000D3F6 6000 0000                  		bra.w	DisplaySprite
0000D3FA                            ; ===========================================================================
0000D3FA 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000D400 0200                       		dc.b 2,	0		; rountine number, frame number
0000D402 0320 0120 0118             		dc.w $320, $120, $118
0000D408 0201                       		dc.b 2,	1
0000D40A 0360 0120 0128             		dc.w $360, $120, $128
0000D410 0202                       		dc.b 2,	2
0000D412 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000D418 0203                       		dc.b 2,	3
0000D41A 03A0 0120 0138             		dc.w $3A0, $120, $138
0000D420 0206                       		dc.b 2,	6
0000D422                            ; ===========================================================================
0000D422                            ; ---------------------------------------------------------------------------
0000D422                            ; Object 7F - chaos emeralds from the special stage results screen
0000D422                            ; ---------------------------------------------------------------------------
0000D422                            
0000D422                            Obj7F:					; XREF: Obj_Index
0000D422 7000                       		moveq	#0,d0
0000D424 1028 0024                  		move.b	$24(a0),d0
0000D428 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000D42C 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000D430                            ; ===========================================================================
0000D430 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000D432 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000D434                            
0000D434                            ; ---------------------------------------------------------------------------
0000D434                            ; X-axis positions for chaos emeralds
0000D434                            ; ---------------------------------------------------------------------------
0000D434 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000D440                            ; ===========================================================================
0000D440                            
0000D440                            Obj7F_Main:				; XREF: Obj7F_Index
0000D440 2248                       		movea.l	a0,a1
0000D442 45F9 0000 D434             		lea	(Obj7F_PosData).l,a2
0000D448 7400                       		moveq	#0,d2
0000D44A 7200                       		moveq	#0,d1
0000D44C 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000D450 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000D452 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000D456                            
0000D456                            Obj7F_Loop:
0000D456 12BC 007F                  		move.b	#$7F,0(a1)
0000D45A 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000D45E 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000D464 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000D468 1633 2000                  		move.b	(a3,d2.w),d3
0000D46C 1343 001A                  		move.b	d3,$1A(a1)
0000D470 1343 001C                  		move.b	d3,$1C(a1)
0000D474 5202                       		addq.b	#1,d2
0000D476 5429 0024                  		addq.b	#2,$24(a1)
0000D47A 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000D482 337C 8541 0002             		move.w	#$8541,2(a1)
0000D488 137C 0000 0001             		move.b	#0,1(a1)
0000D48E 43E9 0040                  		lea	$40(a1),a1	; next object
0000D492 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000D496                            
0000D496                            Obj7F_Flash:				; XREF: Obj7F_Index
0000D496 1028 001A                  		move.b	$1A(a0),d0
0000D49A 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000D4A0 0C00 0006                  		cmpi.b	#6,d0
0000D4A4 6600                       		bne.s	Obj7F_Display
0000D4A6 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000D4AC                            
0000D4AC                            Obj7F_Display:
0000D4AC 6000 0000                  		bra.w	DisplaySprite
0000D4B0                            ; ===========================================================================
0000D4B0                            ; ---------------------------------------------------------------------------
0000D4B0                            ; Sprite mappings - zone title cards
0000D4B0                            ; ---------------------------------------------------------------------------
0000D4B0                            Map_obj34:
0000D4B0                            	include "_maps\obj34.asm"
0000D4B0                            ; ---------------------------------------------------------------------------
0000D4B0                            ; Sprite mappings - zone title cards
0000D4B0                            ; ---------------------------------------------------------------------------
0000D4B0 0000                           	dc.w byte_C9FE-Map_obj34
0000D4B2 0000                       		dc.w byte_CA2C-Map_obj34
0000D4B4 0000                       		dc.w byte_CA5A-Map_obj34
0000D4B6 0000                       		dc.w byte_CA7A-Map_obj34
0000D4B8 0000                       		dc.w byte_CAA8-Map_obj34
0000D4BA 0000                       		dc.w byte_CADC-Map_obj34
0000D4BC 0000                       		dc.w byte_CB10-Map_obj34
0000D4BE 0000                       		dc.w byte_CB26-Map_obj34
0000D4C0 0000                       		dc.w byte_CB31-Map_obj34
0000D4C2 0000                       		dc.w byte_CB3C-Map_obj34
0000D4C4 0000                       		dc.w byte_CB47-Map_obj34
0000D4C6 0000                       		dc.w byte_CB8A-Map_obj34
0000D4C8 09                         byte_C9FE:	dc.b 9 			; GREEN HILL
0000D4C9 F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000D4CE F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000D4D3 F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000D4D8 F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000D4DD F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D4E2 F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000D4E7 F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000D4EC F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000D4F1 F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000D4F6 09                         byte_CA2C:	dc.b 9			; LABYRINTH
0000D4F7 F805 0026 BC               		dc.b $F8, 5, 0,	$26, $BC
0000D4FC F805 0000 CC               		dc.b $F8, 5, 0,	0, $CC
0000D501 F805 0004 DC               		dc.b $F8, 5, 0,	4, $DC
0000D506 F805 004A EC               		dc.b $F8, 5, 0,	$4A, $EC
0000D50B F805 003A FC               		dc.b $F8, 5, 0,	$3A, $FC
0000D510 F801 0020 0C               		dc.b $F8, 1, 0,	$20, $C
0000D515 F805 002E 14               		dc.b $F8, 5, 0,	$2E, $14
0000D51A F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D51F F805 001C 34               		dc.b $F8, 5, 0,	$1C, $34
0000D524 06                         byte_CA5A:	dc.b 6			; MARBLE
0000D525 F805 002A CF               		dc.b $F8, 5, 0,	$2A, $CF
0000D52A F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D52F F805 003A F0               		dc.b $F8, 5, 0,	$3A, $F0
0000D534 F805 0004 00               		dc.b $F8, 5, 0,	4, 0
0000D539 F805 0026 10               		dc.b $F8, 5, 0,	$26, $10
0000D53E F805 0010 20               		dc.b $F8, 5, 0,	$10, $20
0000D543 00                         		dc.b 0
0000D544 09                         byte_CA7A:	dc.b 9			; STAR	LIGHT
0000D545 F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000D54A F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000D54F F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000D554 F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000D559 F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000D55E F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000D563 F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000D568 F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000D56D F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000D572 0A                         byte_CAA8:	dc.b $A			; SPRING YARD
0000D573 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000D578 F805 0036 BC               		dc.b $F8, 5, 0,	$36, $BC
0000D57D F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000D582 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D587 F805 002E E4               		dc.b $F8, 5, 0,	$2E, $E4
0000D58C F805 0018 F4               		dc.b $F8, 5, 0,	$18, $F4
0000D591 F805 004A 14               		dc.b $F8, 5, 0,	$4A, $14
0000D596 F805 0000 24               		dc.b $F8, 5, 0,	0, $24
0000D59B F805 003A 34               		dc.b $F8, 5, 0,	$3A, $34
0000D5A0 F805 000C 44               		dc.b $F8, 5, 0,	$C, $44
0000D5A5 00                         		dc.b 0
0000D5A6 0A                         byte_CADC:	dc.b $A			; SCRAP BRAIN
0000D5A7 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000D5AC F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000D5B1 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000D5B6 F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000D5BB F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000D5C0 F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000D5C5 F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000D5CA F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000D5CF F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000D5D4 F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000D5D9 00                         		dc.b 0
0000D5DA 04                         byte_CB10:	dc.b 4			; ZONE
0000D5DB F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000D5E0 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000D5E5 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000D5EA F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D5EF 00                         		dc.b 0
0000D5F0 02                         byte_CB26:	dc.b 2			; ACT 1
0000D5F1 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D5F6 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000D5FB 02                         byte_CB31:	dc.b 2			; ACT 2
0000D5FC 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D601 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000D606 02                         byte_CB3C:	dc.b 2			; ACT 3
0000D607 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D60C F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000D611 0D                         byte_CB47:	dc.b $D			; Oval
0000D612 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000D617 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000D61C EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000D621 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000D626 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000D62B 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000D630 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000D635 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000D63A EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000D63F F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000D644 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000D649 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000D64E 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000D653 00                         		dc.b 0
0000D654 05                         byte_CB8A:	dc.b 5			; FINAL
0000D655 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000D65A F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000D65F F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D664 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000D669 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000D66E                            		even
0000D66E                            		even
0000D66E                            ; ---------------------------------------------------------------------------
0000D66E                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D66E                            ; ---------------------------------------------------------------------------
0000D66E                            Map_obj39:
0000D66E                            	include "_maps\obj39.asm"
0000D66E                            ; ---------------------------------------------------------------------------
0000D66E                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D66E                            ; ---------------------------------------------------------------------------
0000D66E 0000                       		dc.w byte_CBAC-Map_obj39
0000D670 0000                       		dc.w byte_CBB7-Map_obj39
0000D672 0000                       		dc.w byte_CBC2-Map_obj39
0000D674 0000                       		dc.w byte_CBCD-Map_obj39
0000D676 02                         byte_CBAC:	dc.b 2
0000D677 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D67C F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D681 02                         byte_CBB7:	dc.b 2
0000D682 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D687 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D68C 02                         byte_CBC2:	dc.b 2
0000D68D F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D692 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D697 02                         byte_CBCD:	dc.b 2
0000D698 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D69D F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D6A2                            		even
0000D6A2                            		even
0000D6A2                            
0000D6A2                            ; ---------------------------------------------------------------------------
0000D6A2                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D6A2                            ; ---------------------------------------------------------------------------
0000D6A2 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D6A4 0000                       		dc.w byte_CC13-Map_obj3A
0000D6A6 0000                       		dc.w byte_CC32-Map_obj3A
0000D6A8 0000                       		dc.w byte_CC51-Map_obj3A
0000D6AA 0000                       		dc.w byte_CC75-Map_obj3A
0000D6AC FF6F                       		dc.w byte_CB47-Map_obj3A
0000D6AE FF4E                       		dc.w byte_CB26-Map_obj3A
0000D6B0 FF59                       		dc.w byte_CB31-Map_obj3A
0000D6B2 FF64                       		dc.w byte_CB3C-Map_obj3A
0000D6B4 08                         byte_CBEA:	dc.b 8			; SONIC HAS
0000D6B5 F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000D6BA F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000D6BF F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000D6C4 F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000D6C9 F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000D6CE F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000D6D3 F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000D6D8 F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000D6DD 06                         byte_CC13:	dc.b 6			; PASSED
0000D6DE F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D6E3 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D6E8 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D6ED F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D6F2 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D6F7 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D6FC 06                         byte_CC32:	dc.b 6			; SCORE
0000D6FD F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D702 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D707 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D70C F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D711 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D716 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D71B 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D71C F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D721 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D726 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D72B F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D730 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D735 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D73A F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D73F 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D740 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D745 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D74A F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D74F F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D754 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D759 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D75E F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D764 00                         		even
0000D764                            ; ---------------------------------------------------------------------------
0000D764                            ; Sprite mappings - special stage results screen
0000D764                            ; ---------------------------------------------------------------------------
0000D764 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D766 0000                       		dc.w byte_CCEE-Map_obj7E
0000D768 0000                       		dc.w byte_CD0D-Map_obj7E
0000D76A FEAD                       		dc.w byte_CB47-Map_obj7E
0000D76C 0000                       		dc.w byte_CD31-Map_obj7E
0000D76E 0000                       		dc.w byte_CD46-Map_obj7E
0000D770 0000                       		dc.w byte_CD5B-Map_obj7E
0000D772 0000                       		dc.w byte_CD6B-Map_obj7E
0000D774 0000                       		dc.w byte_CDA8-Map_obj7E
0000D776 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D777 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D77C F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D781 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D786 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D78B F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D790 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D795 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D79A F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D79F F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D7A4 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D7A9 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D7AE F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D7B3 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D7B8 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D7B9 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D7BE F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D7C3 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D7C8 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D7CD F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D7D2 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D7D7 07                         byte_CD0D:	dc.b 7
0000D7D8 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D7DD F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D7E2 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D7E7 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D7EC FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D7F1 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D7F6 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D7FB 04                         byte_CD31:	dc.b 4
0000D7FC F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D801 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D806 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D80B F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D810 04                         byte_CD46:	dc.b 4
0000D811 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D816 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D81B F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D820 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D825 03                         byte_CD5B:	dc.b 3
0000D826 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D82B F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D830 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D835 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D836 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D83B F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D840 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D845 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D84A F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D84F F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D854 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D859 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D85E F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D863 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D868 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D86D F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D872 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D873 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D878 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D87D F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D882 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D887 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D88C F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D891 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D896 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D89B F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D8A0 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D8A5 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D8AA F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D8AF F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D8B4 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D8B9 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D8BE                            		even
0000D8BE                            ; ---------------------------------------------------------------------------
0000D8BE                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D8BE                            ; ---------------------------------------------------------------------------
0000D8BE                            Map_obj7F:
0000D8BE                            	include "_maps\obj7F.asm"
0000D8BE                            ; ---------------------------------------------------------------------------
0000D8BE                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D8BE                            ; ---------------------------------------------------------------------------
0000D8BE 0000                       		dc.w byte_CE02-Map_obj7F
0000D8C0 0000                       		dc.w byte_CE08-Map_obj7F
0000D8C2 0000                       		dc.w byte_CE0E-Map_obj7F
0000D8C4 0000                       		dc.w byte_CE14-Map_obj7F
0000D8C6 0000                       		dc.w byte_CE1A-Map_obj7F
0000D8C8 0000                       		dc.w byte_CE20-Map_obj7F
0000D8CA 0000                       		dc.w byte_CE26-Map_obj7F
0000D8CC 01                         byte_CE02:	dc.b 1
0000D8CD F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D8D2 01                         byte_CE08:	dc.b 1
0000D8D3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D8D8 01                         byte_CE0E:	dc.b 1
0000D8D9 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D8DE 01                         byte_CE14:	dc.b 1
0000D8DF F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D8E4 01                         byte_CE1A:	dc.b 1
0000D8E5 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D8EA 01                         byte_CE20:	dc.b 1
0000D8EB F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D8F0 00                         byte_CE26:	dc.b 0			; Blank frame
0000D8F2 00                         		even
0000D8F2 00                         		even
0000D8F2                            
0000D8F2                            ; ===========================================================================
0000D8F2                            ; ---------------------------------------------------------------------------
0000D8F2                            ; Object 36 - spikes
0000D8F2                            ; ---------------------------------------------------------------------------
0000D8F2                            
0000D8F2                            Obj36:					; XREF: Obj_Index
0000D8F2 7000                       		moveq	#0,d0
0000D8F4 1028 0024                  		move.b	$24(a0),d0
0000D8F8 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D8FC 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D900                            ; ===========================================================================
0000D900 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D902 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D904                            
0000D904 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D906 0110                       		dc.b 1,	$10
0000D908 0204                       		dc.b 2,	4
0000D90A 031C                       		dc.b 3,	$1C
0000D90C 0440                       		dc.b 4,	$40
0000D90E 0510                       		dc.b 5,	$10
0000D910                            ; ===========================================================================
0000D910                            
0000D910                            Obj36_Main:				; XREF: Obj36_Index
0000D910 5428 0024                  		addq.b	#2,$24(a0)
0000D914 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D91C 317C 051B 0002             		move.w	#$51B,2(a0)
0000D922 0028 0004 0001             		ori.b	#4,1(a0)
0000D928 117C 0004 0018             		move.b	#4,$18(a0)
0000D92E 1028 0028                  		move.b	$28(a0),d0
0000D932 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D938 0240 00F0                  		andi.w	#$F0,d0
0000D93C 43F9 0000 D904             		lea	(Obj36_Var).l,a1
0000D942 E648                       		lsr.w	#3,d0
0000D944 D2C0                       		adda.w	d0,a1
0000D946 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D94A 1159 0019                  		move.b	(a1)+,$19(a0)
0000D94E 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D954 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D95A                            
0000D95A                            Obj36_Solid:				; XREF: Obj36_Index
0000D95A 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D95E 343C 0004                  		move.w	#4,d2
0000D962 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D968 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D96A 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D970 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D972 343C 0014                  		move.w	#$14,d2
0000D976                            
0000D976                            ; Spikes types $1x and $5x face	sideways
0000D976                            
0000D976                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D976 323C 001B                  		move.w	#$1B,d1
0000D97A 3602                       		move.w	d2,d3
0000D97C 5243                       		addq.w	#1,d3
0000D97E 3828 0008                  		move.w	8(a0),d4
0000D982 6100 0000                  		bsr.w	SolidObject
0000D986 0828 0003 0022             		btst	#3,$22(a0)
0000D98C 6600                       		bne.s	Obj36_Display
0000D98E 0C44 0001                  		cmpi.w	#1,d4
0000D992 6700                       		beq.s	Obj36_Hurt
0000D994 6000                       		bra.s	Obj36_Display
0000D996                            ; ===========================================================================
0000D996                            
0000D996                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D996                            
0000D996                            Obj36_Upright:				; XREF: Obj36_Solid
0000D996 7200                       		moveq	#0,d1
0000D998 1228 0019                  		move.b	$19(a0),d1
0000D99C 0641 000B                  		addi.w	#$B,d1
0000D9A0 343C 0010                  		move.w	#$10,d2
0000D9A4 363C 0011                  		move.w	#$11,d3
0000D9A8 3828 0008                  		move.w	8(a0),d4
0000D9AC 6100 0000                  		bsr.w	SolidObject
0000D9B0 0828 0003 0022             		btst	#3,$22(a0)
0000D9B6 6600                       		bne.s	Obj36_Hurt
0000D9B8 4A44                       		tst.w	d4
0000D9BA 6A00                       		bpl.s	Obj36_Display
0000D9BC                            
0000D9BC                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D9BC 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D9C0 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D9C2 4A78 D030                  		tst.w	($FFFFD030).w	; +++ is Sonic invulnerable?
0000D9C6 6600                       		bne.s	Obj36_Display	; +++ if yes, branch
0000D9C8 2F08                       		move.l	a0,-(sp)
0000D9CA 2448                       		movea.l	a0,a2
0000D9CC 41F8 D000                  		lea	($FFFFD000).w,a0
0000D9D0 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D9D6 6400                       		bcc.s	loc_CF20
0000D9D8 2628 000C                  		move.l	$C(a0),d3
0000D9DC 3028 0012                  		move.w	$12(a0),d0
0000D9E0 48C0                       		ext.l	d0
0000D9E2 E180                       		asl.l	#8,d0
0000D9E4 9680                       		sub.l	d0,d3
0000D9E6 2143 000C                  		move.l	d3,$C(a0)
0000D9EA 4EB9 0000 0000             		jsr	HurtSonic
0000D9F0                            
0000D9F0                            loc_CF20:
0000D9F0 205F                       		movea.l	(sp)+,a0
0000D9F2                            
0000D9F2                            Obj36_Display:
0000D9F2 6100 0000                  		bsr.w	DisplaySprite
0000D9F6 3028 0030                  		move.w	$30(a0),d0
0000D9FA 0240 FF80                  		andi.w	#$FF80,d0
0000D9FE 3238 F700                  		move.w	($FFFFF700).w,d1
0000DA02 0441 0080                  		subi.w	#$80,d1
0000DA06 0241 FF80                  		andi.w	#$FF80,d1
0000DA0A 9041                       		sub.w	d1,d0
0000DA0C 0C40 0280                  		cmpi.w	#$280,d0
0000DA10 6200 0000                  		bhi.w	DeleteObject
0000DA14 4E75                       		rts	
0000DA16                            ; ===========================================================================
0000DA16                            
0000DA16                            Obj36_Type0x:				; XREF: Obj36_Solid
0000DA16 7000                       		moveq	#0,d0
0000DA18 1028 0028                  		move.b	$28(a0),d0
0000DA1C D040                       		add.w	d0,d0
0000DA1E 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000DA22 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000DA26                            ; ===========================================================================
0000DA26 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000DA28 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000DA2A 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000DA2C                            ; ===========================================================================
0000DA2C                            
0000DA2C                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000DA2C 4E75                       		rts			; don't move the object
0000DA2E                            ; ===========================================================================
0000DA2E                            
0000DA2E                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000DA2E 6100 0000                  		bsr.w	Obj36_Wait
0000DA32 7000                       		moveq	#0,d0
0000DA34 1028 0034                  		move.b	$34(a0),d0
0000DA38 D068 0032                  		add.w	$32(a0),d0
0000DA3C 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000DA40 4E75                       		rts	
0000DA42                            ; ===========================================================================
0000DA42                            
0000DA42                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000DA42 6100 0000                  		bsr.w	Obj36_Wait
0000DA46 7000                       		moveq	#0,d0
0000DA48 1028 0034                  		move.b	$34(a0),d0
0000DA4C D068 0030                  		add.w	$30(a0),d0
0000DA50 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000DA54 4E75                       		rts	
0000DA56                            ; ===========================================================================
0000DA56                            
0000DA56                            Obj36_Wait:
0000DA56 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000DA5A 6700                       		beq.s	loc_CFA4	; if yes, branch
0000DA5C 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000DA60 6600                       		bne.s	locret_CFE6
0000DA62 4A28 0001                  		tst.b	1(a0)
0000DA66 6A00                       		bpl.s	locret_CFE6
0000DA68 303C 00B6                  		move.w	#$B6,d0
0000DA6C 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000DA72 6000                       		bra.s	locret_CFE6
0000DA74                            ; ===========================================================================
0000DA74                            
0000DA74                            loc_CFA4:
0000DA74 4A68 0036                  		tst.w	$36(a0)
0000DA78 6700                       		beq.s	loc_CFC6
0000DA7A 0468 0800 0034             		subi.w	#$800,$34(a0)
0000DA80 6400                       		bcc.s	locret_CFE6
0000DA82 317C 0000 0034             		move.w	#0,$34(a0)
0000DA88 317C 0000 0036             		move.w	#0,$36(a0)
0000DA8E 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000DA94 6000                       		bra.s	locret_CFE6
0000DA96                            ; ===========================================================================
0000DA96                            
0000DA96                            loc_CFC6:
0000DA96 0668 0800 0034             		addi.w	#$800,$34(a0)
0000DA9C 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000DAA2 6500                       		bcs.s	locret_CFE6
0000DAA4 317C 2000 0034             		move.w	#$2000,$34(a0)
0000DAAA 317C 0001 0036             		move.w	#1,$36(a0)
0000DAB0 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000DAB6                            
0000DAB6                            locret_CFE6:
0000DAB6 4E75                       		rts	
0000DAB8                            ; ===========================================================================
0000DAB8                            ; ---------------------------------------------------------------------------
0000DAB8                            ; Sprite mappings - spikes
0000DAB8                            ; ---------------------------------------------------------------------------
0000DAB8                            Map_obj36:
0000DAB8                            	include "_maps\obj36.asm"
0000DAB8                            ; ---------------------------------------------------------------------------
0000DAB8                            ; Sprite mappings - spikes
0000DAB8                            ; ---------------------------------------------------------------------------
0000DAB8 0000                       		dc.w byte_CFF4-Map_obj36
0000DABA 0000                       		dc.w byte_D004-Map_obj36
0000DABC 0000                       		dc.w byte_D014-Map_obj36
0000DABE 0000                       		dc.w byte_D01A-Map_obj36
0000DAC0 0000                       		dc.w byte_D02A-Map_obj36
0000DAC2 0000                       		dc.w byte_D049-Map_obj36
0000DAC4 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000DAC5 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000DACA F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000DACF F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000DAD4 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000DAD5 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000DADA FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000DADF 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000DAE4 01                         byte_D014:	dc.b 1			; 1 spike
0000DAE5 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000DAEA 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000DAEB F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000DAF0 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000DAF5 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000DAFA 06                         byte_D02A:	dc.b 6			; 6 spikes
0000DAFB F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000DB00 F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000DB05 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000DB0A F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000DB0F F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000DB14 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000DB19 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000DB1A FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000DB20 00                         		even
0000DB20 00                         		even
0000DB20                            
0000DB20                            ; ===========================================================================
0000DB20                            ; ---------------------------------------------------------------------------
0000DB20                            ; Object 3B - purple rock (GHZ)
0000DB20                            ; ---------------------------------------------------------------------------
0000DB20                            
0000DB20                            Obj3B:					; XREF: Obj_Index
0000DB20 7000                       		moveq	#0,d0
0000DB22 1028 0024                  		move.b	$24(a0),d0
0000DB26 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000DB2A 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000DB2E                            ; ===========================================================================
0000DB2E 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000DB30 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000DB32                            ; ===========================================================================
0000DB32                            
0000DB32                            Obj3B_Main:				; XREF: Obj3B_Index
0000DB32 5428 0024                  		addq.b	#2,$24(a0)
0000DB36 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000DB3E 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000DB44 117C 0004 0001             		move.b	#4,1(a0)
0000DB4A 117C 0013 0019             		move.b	#$13,$19(a0)
0000DB50 117C 0004 0018             		move.b	#4,$18(a0)
0000DB56                            
0000DB56                            Obj3B_Solid:				; XREF: Obj3B_Index
0000DB56 323C 001B                  		move.w	#$1B,d1
0000DB5A 343C 0010                  		move.w	#$10,d2
0000DB5E 363C 0010                  		move.w	#$10,d3
0000DB62 3828 0008                  		move.w	8(a0),d4
0000DB66 6100 0000                  		bsr.w	SolidObject
0000DB6A 6100 0000                  		bsr.w	DisplaySprite
0000DB6E 3028 0008                  		move.w	8(a0),d0
0000DB72 0240 FF80                  		andi.w	#$FF80,d0
0000DB76 3238 F700                  		move.w	($FFFFF700).w,d1
0000DB7A 0441 0080                  		subi.w	#$80,d1
0000DB7E 0241 FF80                  		andi.w	#$FF80,d1
0000DB82 9041                       		sub.w	d1,d0
0000DB84 0C40 0280                  		cmpi.w	#$280,d0
0000DB88 6200 0000                  		bhi.w	DeleteObject
0000DB8C 4E75                       		rts
0000DB8E                            ; ===========================================================================
0000DB8E                            ; ---------------------------------------------------------------------------
0000DB8E                            ; Object 49 - waterfall	sound effect (GHZ)
0000DB8E                            ; ---------------------------------------------------------------------------
0000DB8E                            
0000DB8E                            Obj49:					; XREF: Obj_Index
0000DB8E 7000                       		moveq	#0,d0
0000DB90 1028 0024                  		move.b	$24(a0),d0
0000DB94 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000DB98 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000DB9C                            ; ===========================================================================
0000DB9C 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000DB9E 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000DBA0                            ; ===========================================================================
0000DBA0                            
0000DBA0                            Obj49_Main:				; XREF: Obj49_Index
0000DBA0 5428 0024                  		addq.b	#2,$24(a0)
0000DBA4 117C 0004 0001             		move.b	#4,1(a0)
0000DBAA                            
0000DBAA                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000DBAA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000DBAE 0200 003F                  		andi.b	#$3F,d0
0000DBB2 6600                       		bne.s	Obj49_ChkDel
0000DBB4 303C 00D0                  		move.w	#$D0,d0
0000DBB8 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000DBBE                            
0000DBBE                            Obj49_ChkDel:
0000DBBE 3028 0008                  		move.w	8(a0),d0
0000DBC2 0240 FF80                  		andi.w	#$FF80,d0
0000DBC6 3238 F700                  		move.w	($FFFFF700).w,d1
0000DBCA 0441 0080                  		subi.w	#$80,d1
0000DBCE 0241 FF80                  		andi.w	#$FF80,d1
0000DBD2 9041                       		sub.w	d1,d0
0000DBD4 0C40 0280                  		cmpi.w	#$280,d0
0000DBD8 6200 0000                  		bhi.w	DeleteObject
0000DBDC 4E75                       		rts	
0000DBDE                            ; ===========================================================================
0000DBDE                            ; ---------------------------------------------------------------------------
0000DBDE                            ; Sprite mappings - purple rock	(GHZ)
0000DBDE                            ; ---------------------------------------------------------------------------
0000DBDE                            Map_obj3B:
0000DBDE                            	include "_maps\obj3B.asm"
0000DBDE                            ; ---------------------------------------------------------------------------
0000DBDE                            ; Sprite mappings - purple rock	(GHZ)
0000DBDE                            ; ---------------------------------------------------------------------------
0000DBDE 0000                       		dc.w byte_D110-Map_obj3B
0000DBE0 02                         byte_D110:	dc.b 2
0000DBE1 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000DBE6 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000DBEC 00                         		even
0000DBEC 00                         		even
0000DBEC                            
0000DBEC                            ; ===========================================================================
0000DBEC                            ; ---------------------------------------------------------------------------
0000DBEC                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000DBEC                            ; ---------------------------------------------------------------------------
0000DBEC                            
0000DBEC                            Obj3C:					; XREF: Obj_Index
0000DBEC 7000                       		moveq	#0,d0
0000DBEE 1028 0024                  		move.b	$24(a0),d0
0000DBF2 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000DBF6 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000DBFA 6000 0000                  		bra.w	MarkObjGone
0000DBFE                            ; ===========================================================================
0000DBFE 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000DC00 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000DC02 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000DC04                            ; ===========================================================================
0000DC04                            
0000DC04                            Obj3C_Main:				; XREF: Obj3C_Index
0000DC04 5428 0024                  		addq.b	#2,$24(a0)
0000DC08 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000DC10 317C 450F 0002             		move.w	#$450F,2(a0)
0000DC16 117C 0004 0001             		move.b	#4,1(a0)
0000DC1C 117C 0010 0019             		move.b	#$10,$19(a0)
0000DC22 117C 0004 0018             		move.b	#4,$18(a0)
0000DC28 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000DC2E                            
0000DC2E                            Obj3C_Solid:				; XREF: Obj3C_Index
0000DC2E 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000DC34 323C 001B                  		move.w	#$1B,d1
0000DC38 343C 0020                  		move.w	#$20,d2
0000DC3C 363C 0020                  		move.w	#$20,d3
0000DC40 3828 0008                  		move.w	8(a0),d4
0000DC44 6100 0000                  		bsr.w	SolidObject
0000DC48 0828 0005 0022             		btst	#5,$22(a0)
0000DC4E 6600                       		bne.s	Obj3C_ChkRoll
0000DC50                            
0000DC50                            locret_D180:
0000DC50 4E75                       		rts
0000DC52                            ; ===========================================================================
0000DC52                            
0000DC52                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000DC52 4A38 FE19                                  tst.b   (Super_Sonic_flag).w
0000DC56 6600                                       bne.s   ObjBreakeAnyways
0000DC58 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000DC5E 66F0                       		bne.s	locret_D180	; if not, branch
0000DC60 3028 0030                  		move.w	$30(a0),d0
0000DC64 6A00                       		bpl.s	Obj3C_ChkSpeed
0000DC66 4440                       		neg.w	d0
0000DC68                            
0000DC68                            Obj3C_ChkSpeed:
0000DC68 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000DC6C 65E2                       		bcs.s	locret_D180	; if not, branch
0000DC6E                            ObjBreakeAnyways:		
0000DC6E 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000DC74 5869 0008                  		addq.w	#4,8(a1)
0000DC78 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000DC7E 3028 0008                  		move.w	8(a0),d0
0000DC82 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000DC86 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000DC88 5169 0008                  		subq.w	#8,8(a1)
0000DC8C 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000DC92                            
0000DC92                            Obj3C_Smash:
0000DC92 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000DC98 08A8 0005 0022             		bclr	#5,$22(a0)
0000DC9E 08A9 0005 0022             		bclr	#5,$22(a1)
0000DCA4 7207                       		moveq	#7,d1		; load 8 fragments
0000DCA6 343C 0070                  		move.w	#$70,d2
0000DCAA 6100                       		bsr.s	SmashObject
0000DCAC                            
0000DCAC                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000DCAC 6100 0000                  		bsr.w	SpeedToPos
0000DCB0 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000DCB6 6100 0000                  		bsr.w	DisplaySprite
0000DCBA 4A28 0001                  		tst.b	1(a0)
0000DCBE 6A00 0000                  		bpl.w	DeleteObject
0000DCC2 4E75                       		rts
0000DCC4                            
0000DCC4                            ; ---------------------------------------------------------------------------
0000DCC4                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000DCC4                            ; ---------------------------------------------------------------------------
0000DCC4                            
0000DCC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DCC4                            
0000DCC4                            
0000DCC4                            SmashObject:				; XREF: Obj3C_Smash
0000DCC4 7000                       		moveq	#0,d0
0000DCC6 1028 001A                  		move.b	$1A(a0),d0
0000DCCA D040                       		add.w	d0,d0
0000DCCC 2668 0004                  		movea.l	4(a0),a3
0000DCD0 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000DCD4 524B                       		addq.w	#1,a3
0000DCD6 08E8 0005 0001             		bset	#5,1(a0)
0000DCDC 1810                       		move.b	0(a0),d4
0000DCDE 1A28 0001                  		move.b	1(a0),d5
0000DCE2 2248                       		movea.l	a0,a1
0000DCE4 6000                       		bra.s	Smash_LoadFrag
0000DCE6                            ; ===========================================================================
0000DCE6                            
0000DCE6                            Smash_Loop:
0000DCE6 6100 0000                  		bsr.w	SingleObjLoad
0000DCEA 6600                       		bne.s	Smash_PlaySnd
0000DCEC 5A4B                       		addq.w	#5,a3
0000DCEE                            
0000DCEE                            Smash_LoadFrag:				; XREF: SmashObject
0000DCEE 137C 0004 0024             		move.b	#4,$24(a1)
0000DCF4 1284                       		move.b	d4,0(a1)
0000DCF6 234B 0004                  		move.l	a3,4(a1)
0000DCFA 1345 0001                  		move.b	d5,1(a1)
0000DCFE 3368 0008 0008             		move.w	8(a0),8(a1)
0000DD04 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DD0A 3368 0002 0002             		move.w	2(a0),2(a1)
0000DD10 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000DD16 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000DD1C 335C 0010                  		move.w	(a4)+,$10(a1)
0000DD20 335C 0012                  		move.w	(a4)+,$12(a1)
0000DD24 B3C8                       		cmpa.l	a0,a1
0000DD26 6400                       		bcc.s	loc_D268
0000DD28 2F08                       		move.l	a0,-(sp)
0000DD2A 2049                       		movea.l	a1,a0
0000DD2C 6100 0000                  		bsr.w	SpeedToPos
0000DD30 D568 0012                  		add.w	d2,$12(a0)
0000DD34 205F                       		movea.l	(sp)+,a0
0000DD36 6100 0000                  		bsr.w	DisplaySprite2
0000DD3A                            
0000DD3A                            loc_D268:
0000DD3A 51C9 FFAA                  		dbf	d1,Smash_Loop
0000DD3E                            
0000DD3E                            Smash_PlaySnd:
0000DD3E 303C 00CB                  		move.w	#$CB,d0
0000DD42 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play smashing sound
0000DD48                            ; End of function SmashObject
0000DD48                            
0000DD48                            ; ===========================================================================
0000DD48                            ; Smashed block	fragment speeds
0000DD48                            ;
0000DD48 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000DD4C 0600 FF00                  		dc.w $600, $FF00
0000DD50 0600 0100                  		dc.w $600, $100
0000DD54 0400 0500                  		dc.w $400, $500
0000DD58 0600 FA00                  		dc.w $600, $FA00
0000DD5C 0800 FE00                  		dc.w $800, $FE00
0000DD60 0800 0200                  		dc.w $800, $200
0000DD64 0600 0600                  		dc.w $600, $600
0000DD68                            
0000DD68 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000DD6C F800 FE00                  		dc.w $F800, $FE00
0000DD70 F800 0200                  		dc.w $F800, $200
0000DD74 FA00 0600                  		dc.w $FA00, $600
0000DD78 FC00 FB00                  		dc.w $FC00, $FB00
0000DD7C FA00 FF00                  		dc.w $FA00, $FF00
0000DD80 FA00 0100                  		dc.w $FA00, $100
0000DD84 FC00 0500                  		dc.w $FC00, $500
0000DD88                            ; ---------------------------------------------------------------------------
0000DD88                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DD88                            ; ---------------------------------------------------------------------------
0000DD88                            Map_obj3C:
0000DD88                            	include "_maps\obj3C.asm"
0000DD88                            ; ---------------------------------------------------------------------------
0000DD88                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DD88                            ; ---------------------------------------------------------------------------
0000DD88 0000                       		dc.w byte_D2BC-Map_obj3C
0000DD8A 0000                       		dc.w byte_D2E5-Map_obj3C
0000DD8C 0000                       		dc.w byte_D30E-Map_obj3C
0000DD8E 08                         byte_D2BC:	dc.b 8
0000DD8F E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000DD94 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000DD99 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000DD9E 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000DDA3 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DDA8 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DDAD 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DDB2 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DDB7 08                         byte_D2E5:	dc.b 8
0000DDB8 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DDBD F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DDC2 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DDC7 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DDCC E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DDD1 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DDD6 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DDDB 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DDE0 08                         byte_D30E:	dc.b 8
0000DDE1 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DDE6 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DDEB 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DDF0 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DDF5 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000DDFA F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000DDFF 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000DE04 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000DE0A 00                         		even
0000DE0A 00                         		even
0000DE0A                            
0000DE0A                            ; ---------------------------------------------------------------------------
0000DE0A                            ; Object code loading subroutine
0000DE0A                            ; ---------------------------------------------------------------------------
0000DE0A                            
0000DE0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE0A                            
0000DE0A                            
0000DE0A                            ObjectsLoad:				; XREF: TitleScreen; et al
0000DE0A 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000DE0E 7E7F                       		moveq	#$7F,d7
0000DE10 7000                       		moveq	#0,d0
0000DE12 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000DE18 6400                       		bcc.s	loc_D362
0000DE1A                            
0000DE1A                            loc_D348:
0000DE1A 1010                       		move.b	(a0),d0		; load object number from RAM
0000DE1C 6700                       		beq.s	loc_D358
0000DE1E D040                       		add.w	d0,d0
0000DE20 D040                       		add.w	d0,d0
0000DE22 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000DE26 4E91                       		jsr	(a1)		; run the object's code
0000DE28 7000                       		moveq	#0,d0
0000DE2A                            
0000DE2A                            loc_D358:
0000DE2A 41E8 0040                  		lea	$40(a0),a0	; next object
0000DE2E 51CF FFEA                  		dbf	d7,loc_D348
0000DE32 4E75                       		rts	
0000DE34                            ; ===========================================================================
0000DE34                            
0000DE34                            loc_D362:
0000DE34 0C38 000A D024             		cmpi.b	#$A,($FFFFD000+$24).w	; Has Sonic drowned?
0000DE3A 67DE                       		beq.s	loc_D348				; If so, run objects a little longer
0000DE3C 7E1F                       		moveq	#$1F,d7
0000DE3E 61DA                       		bsr.s	loc_D348
0000DE40 7E5F                       		moveq	#$5F,d7
0000DE42                            
0000DE42                            loc_D368:
0000DE42 7000                       		moveq	#0,d0
0000DE44 1010                       		move.b	(a0),d0
0000DE46 6700                       		beq.s	loc_D378
0000DE48 4A28 0001                  		tst.b	1(a0)
0000DE4C 6A00                       		bpl.s	loc_D378
0000DE4E 6100 0000                  		bsr.w	DisplaySprite
0000DE52                            
0000DE52                            loc_D378:
0000DE52 41E8 0040                  		lea	$40(a0),a0
0000DE56                            
0000DE56                            loc_D37C:
0000DE56 51CF FFEA                  		dbf	d7,loc_D368
0000DE5A 4E75                       		rts	
0000DE5C                            ; End of function ObjectsLoad
0000DE5C                            
0000DE5C                            ; ===========================================================================
0000DE5C                            ; ---------------------------------------------------------------------------
0000DE5C                            ; Object pointers
0000DE5C                            ; ---------------------------------------------------------------------------
0000DE5C                            Obj_Index:
0000DE5C                            	include "_inc\Object pointers.asm"
0000DE5C                            ; ---------------------------------------------------------------------------
0000DE5C                            ; Object pointers
0000DE5C                            ; ---------------------------------------------------------------------------
0000DE5C 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000DE6C 0000 0000 0000 0000 0000+  	dc.l SpinDash_dust, speedboosters, ObjectFall, Obj08
0000DE7C 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000DE8C 0000 0000 0000 B0F4 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000DE9C 0000 7DB0 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000DEAC 0000 83D6 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000DEBC 0000 8C24 0000 8C8C 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000DECC 0000 92D6 0000 95C4 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000DEDC 0000 0000 0000 A248 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000DEEC 0000 A58A 0000 ABB8 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000DEFC 0000 9E80 0000 93AC 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000DF0C 0000 B782 0000 ADB6 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000DF1C 0000 C154 0000 C802 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000DF2C 0000 BCB8 0000 D8F2 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000DF3C 0000 CF88 0000 D042 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000DF4C 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000DF5C 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DF6C 0000 C470 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DF7C 0000 DB8E 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DF8C 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DF9C 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DFAC 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DFBC 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DFCC 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DFDC 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DFEC 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000DFFC 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000E00C 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000E01C 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000E02C 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000E03C 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000E04C 0000 0000 0000 D27C 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000E05C 0000 59A2 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000E06C 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000E07C 0000 605C 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E07C 0000 605C 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E08C                            
0000E08C                            ; ---------------------------------------------------------------------------
0000E08C                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000E08C                            ; ---------------------------------------------------------------------------
0000E08C                            
0000E08C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E08C                            
0000E08C                            
0000E08C                            ObjectFall:
0000E08C 2428 0008                  		move.l	8(a0),d2
0000E090 2628 000C                  		move.l	$C(a0),d3
0000E094 3028 0010                  		move.w	$10(a0),d0
0000E098 48C0                       		ext.l	d0
0000E09A E180                       		asl.l	#8,d0
0000E09C D480                       		add.l	d0,d2
0000E09E 3028 0012                  		move.w	$12(a0),d0
0000E0A2 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000E0A8 48C0                       		ext.l	d0
0000E0AA E180                       		asl.l	#8,d0
0000E0AC D680                       		add.l	d0,d3
0000E0AE 2142 0008                  		move.l	d2,8(a0)
0000E0B2 2143 000C                  		move.l	d3,$C(a0)
0000E0B6 4E75                       		rts	
0000E0B8                            ; End of function ObjectFall
0000E0B8                            
0000E0B8                            ; ---------------------------------------------------------------------------
0000E0B8                            ; Subroutine translating object	speed to update	object position
0000E0B8                            ; ---------------------------------------------------------------------------
0000E0B8                            
0000E0B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E0B8                            
0000E0B8                            
0000E0B8                            SpeedToPos:
0000E0B8 2428 0008                  		move.l	8(a0),d2
0000E0BC 2628 000C                  		move.l	$C(a0),d3
0000E0C0 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000E0C4 48C0                       		ext.l	d0
0000E0C6 E180                       		asl.l	#8,d0		; multiply speed by $100
0000E0C8 D480                       		add.l	d0,d2		; add to x-axis	position
0000E0CA 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000E0CE 48C0                       		ext.l	d0
0000E0D0 E180                       		asl.l	#8,d0		; multiply by $100
0000E0D2 D680                       		add.l	d0,d3		; add to y-axis	position
0000E0D4 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000E0D8 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000E0DC 4E75                       		rts	
0000E0DE                            ; End of function SpeedToPos
0000E0DE                            
0000E0DE                            ; ---------------------------------------------------------------------------
0000E0DE                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000E0DE                            ; ---------------------------------------------------------------------------
0000E0DE                            
0000E0DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E0DE                            
0000E0DE                            
0000E0DE                            DisplaySprite:
0000E0DE 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000E0E2 3028 0018                  		move.w	$18(a0),d0
0000E0E6 E248                       		lsr.w	#1,d0
0000E0E8 0240 0380                  		andi.w	#$380,d0
0000E0EC D2C0                       		adda.w	d0,a1
0000E0EE 0C51 007E                  		cmpi.w	#$7E,(a1)
0000E0F2 6400                       		bcc.s	locret_D620
0000E0F4 5451                       		addq.w	#2,(a1)
0000E0F6 D2D1                       		adda.w	(a1),a1
0000E0F8 3288                       		move.w	a0,(a1)
0000E0FA                            
0000E0FA                            locret_D620:
0000E0FA 4E75                       		rts	
0000E0FC                            ; End of function DisplaySprite
0000E0FC                            
0000E0FC                            ; ---------------------------------------------------------------------------
0000E0FC                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000E0FC                            ; ---------------------------------------------------------------------------
0000E0FC                            
0000E0FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E0FC                            
0000E0FC                            
0000E0FC                            DisplaySprite2:
0000E0FC 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000E100 3029 0018                  		move.w	$18(a1),d0
0000E104 E248                       		lsr.w	#1,d0
0000E106 0240 0380                  		andi.w	#$380,d0
0000E10A D4C0                       		adda.w	d0,a2
0000E10C 0C52 007E                  		cmpi.w	#$7E,(a2)
0000E110 6400                       		bcc.s	locret_D63E
0000E112 5452                       		addq.w	#2,(a2)
0000E114 D4D2                       		adda.w	(a2),a2
0000E116 3489                       		move.w	a1,(a2)
0000E118                            
0000E118                            locret_D63E:
0000E118 4E75                       		rts
0000E11A                            ; End of function DisplaySprite2
0000E11A                            
0000E11A                            ; ---------------------------------------------------------------------------
0000E11A                            ; Subroutine to	delete an object
0000E11A                            ; ---------------------------------------------------------------------------
0000E11A                            
0000E11A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E11A                            
0000E11A                            
0000E11A                            DeleteObject:
0000E11A 2248                       		movea.l	a0,a1
0000E11C                            
0000E11C                            DeleteObject2:
0000E11C 7200                       		moveq	#0,d1
0000E11E 700F                       		moveq	#$F,d0
0000E120                            
0000E120                            loc_D646:
0000E120 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000E122 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000E126 4E75                       		rts
0000E128                            ; End of function DeleteObject
0000E128                            
0000E128                            ; ===========================================================================
0000E128 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000E12C 00FF F700                  		dc.l $FFF700		; main screen x-position
0000E130 00FF F708                  		dc.l $FFF708		; background x-position	1
0000E134 00FF F718                  		dc.l $FFF718		; background x-position	2
0000E138                            ; ---------------------------------------------------------------------------
0000E138                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000E138                            ; ---------------------------------------------------------------------------
0000E138                            
0000E138                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E138                            
0000E138                            
0000E138                            BuildSprites:				; XREF: TitleScreen; et al
0000E138 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000E13C 7A00                       		moveq	#0,d5
0000E13E 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000E142 7E07                       		moveq	#7,d7
0000E144                            
0000E144                            loc_D66A:
0000E144 4A54                       		tst.w	(a4)
0000E146 6700 0000                  		beq.w	loc_D72E
0000E14A 7C02                       		moveq	#2,d6
0000E14C                            
0000E14C                            loc_D672:
0000E14C 3074 6000                  		movea.w	(a4,d6.w),a0
0000E150 4A10                       		tst.b	(a0)
0000E152 6700 0000                  		beq.w	loc_D726
0000E156 08A8 0007 0001             		bclr	#7,1(a0)
0000E15C 1028 0001                  		move.b	1(a0),d0
0000E160 1800                       		move.b	d0,d4
0000E162 0240 000C                  		andi.w	#$C,d0
0000E166 6700                       		beq.s	loc_D6DE
0000E168 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000E16C 7000                       		moveq	#0,d0
0000E16E 1028 0019                  		move.b	$19(a0),d0
0000E172 3628 0008                  		move.w	8(a0),d3
0000E176 9651                       		sub.w	(a1),d3
0000E178 3203                       		move.w	d3,d1
0000E17A D240                       		add.w	d0,d1
0000E17C 6B00 0000                  		bmi.w	loc_D726
0000E180 3203                       		move.w	d3,d1
0000E182 9240                       		sub.w	d0,d1
0000E184 0C41 0140                  		cmpi.w	#$140,d1
0000E188 6C00                       		bge.s	loc_D726
0000E18A 0643 0080                  		addi.w	#$80,d3
0000E18E 0804 0004                  		btst	#4,d4
0000E192 6700                       		beq.s	loc_D6E8
0000E194 7000                       		moveq	#0,d0
0000E196 1028 0016                  		move.b	$16(a0),d0
0000E19A 3428 000C                  		move.w	$C(a0),d2
0000E19E 9469 0004                  		sub.w	4(a1),d2
0000E1A2 3202                       		move.w	d2,d1
0000E1A4 D240                       		add.w	d0,d1
0000E1A6 6B00                       		bmi.s	loc_D726
0000E1A8 3202                       		move.w	d2,d1
0000E1AA 9240                       		sub.w	d0,d1
0000E1AC 0C41 00E0                  		cmpi.w	#$E0,d1
0000E1B0 6C00                       		bge.s	loc_D726
0000E1B2 0642 0080                  		addi.w	#$80,d2
0000E1B6 6000                       		bra.s	loc_D700
0000E1B8                            ; ===========================================================================
0000E1B8                            
0000E1B8                            loc_D6DE:
0000E1B8 3428 000A                  		move.w	$A(a0),d2
0000E1BC 3628 0008                  		move.w	8(a0),d3
0000E1C0 6000                       		bra.s	loc_D700
0000E1C2                            ; ===========================================================================
0000E1C2                            
0000E1C2                            loc_D6E8:
0000E1C2 3428 000C                  		move.w	$C(a0),d2
0000E1C6 9469 0004                  		sub.w	4(a1),d2
0000E1CA 0642 0080                  		addi.w	#$80,d2
0000E1CE 0C42 0060                  		cmpi.w	#$60,d2
0000E1D2 6500                       		bcs.s	loc_D726
0000E1D4 0C42 0180                  		cmpi.w	#$180,d2
0000E1D8 6400                       		bcc.s	loc_D726
0000E1DA                            
0000E1DA                            loc_D700:
0000E1DA 2268 0004                  		movea.l	4(a0),a1
0000E1DE 7200                       		moveq	#0,d1
0000E1E0 0804 0005                  		btst	#5,d4
0000E1E4 6600                       		bne.s	loc_D71C
0000E1E6 1228 001A                  		move.b	$1A(a0),d1
0000E1EA D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
0000E1EC D2F1 1000                  		adda.w	(a1,d1.w),a1
0000E1F0 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
0000E1F2 1219                       		move.b	(a1)+,d1
0000E1F4 5301                       		subq.b	#1,d1
0000E1F6 6B00                       		bmi.s	loc_D720
0000E1F8                            
0000E1F8                            loc_D71C:
0000E1F8 6100 0000                  		bsr.w	sub_D750
0000E1FC                            
0000E1FC                            loc_D720:
0000E1FC 08E8 0007 0001             		bset	#7,1(a0)
0000E202                            
0000E202                            loc_D726:
0000E202 5446                       		addq.w	#2,d6
0000E204 5554                       		subq.w	#2,(a4)
0000E206 6600 FF44                  		bne.w	loc_D672
0000E20A                            
0000E20A                            loc_D72E:
0000E20A 49EC 0080                  		lea	$80(a4),a4
0000E20E 51CF FF34                  		dbf	d7,loc_D66A
0000E212 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000E216 0C05 0050                  		cmpi.b	#$50,d5
0000E21A 6700                       		beq.s	loc_D748
0000E21C 24BC 0000 0000             		move.l	#0,(a2)
0000E222 4E75                       		rts	
0000E224                            ; ===========================================================================
0000E224                            
0000E224                            loc_D748:
0000E224 157C 0000 FFFB             		move.b	#0,-5(a2)
0000E22A 4E75                       		rts	
0000E22C                            ; End of function BuildSprites
0000E22C                            
0000E22C                            
0000E22C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E22C                            
0000E22C                            
0000E22C                            sub_D750:				; XREF: BuildSprites
0000E22C 3668 0002                  		movea.w	2(a0),a3
0000E230 0804 0000                  		btst	#0,d4
0000E234 6600                       		bne.s	loc_D796
0000E236 0804 0001                  		btst	#1,d4
0000E23A 6600 0000                  		bne.w	loc_D7E4
0000E23E                            ; End of function sub_D750
0000E23E                            
0000E23E                            
0000E23E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E23E                            
0000E23E                            
0000E23E                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000E23E 0C05 0050                  		cmpi.b	#$50,d5
0000E242 6700                       		beq.s	locret_D794
0000E244 1019                       		move.b	(a1)+,d0
0000E246 4880                       		ext.w	d0
0000E248 D042                       		add.w	d2,d0
0000E24A 34C0                       		move.w	d0,(a2)+
0000E24C 14D9                       		move.b	(a1)+,(a2)+
0000E24E 5205                       		addq.b	#1,d5
0000E250 14C5                       		move.b	d5,(a2)+
0000E252 1019                       		move.b	(a1)+,d0
0000E254 E148                       		lsl.w	#8,d0
0000E256 1019                       		move.b	(a1)+,d0
0000E258 D04B                       		add.w	a3,d0
0000E25A 34C0                       		move.w	d0,(a2)+
0000E25C 1019                       		move.b	(a1)+,d0
0000E25E 4880                       		ext.w	d0
0000E260 D043                       		add.w	d3,d0
0000E262 0240 01FF                  		andi.w	#$1FF,d0
0000E266 6600                       		bne.s	loc_D78E
0000E268 5240                       		addq.w	#1,d0
0000E26A                            
0000E26A                            loc_D78E:
0000E26A 34C0                       		move.w	d0,(a2)+
0000E26C 51C9 FFD0                  		dbf	d1,sub_D762
0000E270                            
0000E270                            locret_D794:
0000E270 4E75                       		rts	
0000E272                            ; End of function sub_D762
0000E272                            
0000E272                            ; ===========================================================================
0000E272                            
0000E272                            loc_D796:
0000E272 0804 0001                  		btst	#1,d4
0000E276 6600 0000                  		bne.w	loc_D82A
0000E27A                            
0000E27A                            loc_D79E:
0000E27A 0C05 0050                  		cmpi.b	#$50,d5
0000E27E 6700                       		beq.s	locret_D7E2
0000E280 1019                       		move.b	(a1)+,d0
0000E282 4880                       		ext.w	d0
0000E284 D042                       		add.w	d2,d0
0000E286 34C0                       		move.w	d0,(a2)+
0000E288 1819                       		move.b	(a1)+,d4
0000E28A 14C4                       		move.b	d4,(a2)+
0000E28C 5205                       		addq.b	#1,d5
0000E28E 14C5                       		move.b	d5,(a2)+
0000E290 1019                       		move.b	(a1)+,d0
0000E292 E148                       		lsl.w	#8,d0
0000E294 1019                       		move.b	(a1)+,d0
0000E296 D04B                       		add.w	a3,d0
0000E298 0A40 0800                  		eori.w	#$800,d0
0000E29C 34C0                       		move.w	d0,(a2)+
0000E29E 1019                       		move.b	(a1)+,d0
0000E2A0 4880                       		ext.w	d0
0000E2A2 4440                       		neg.w	d0
0000E2A4 D804                       		add.b	d4,d4
0000E2A6 0244 0018                  		andi.w	#$18,d4
0000E2AA 5044                       		addq.w	#8,d4
0000E2AC 9044                       		sub.w	d4,d0
0000E2AE D043                       		add.w	d3,d0
0000E2B0 0240 01FF                  		andi.w	#$1FF,d0
0000E2B4 6600                       		bne.s	loc_D7DC
0000E2B6 5240                       		addq.w	#1,d0
0000E2B8                            
0000E2B8                            loc_D7DC:
0000E2B8 34C0                       		move.w	d0,(a2)+
0000E2BA 51C9 FFBE                  		dbf	d1,loc_D79E
0000E2BE                            
0000E2BE                            locret_D7E2:
0000E2BE 4E75                       		rts	
0000E2C0                            ; ===========================================================================
0000E2C0                            
0000E2C0                            loc_D7E4:				; XREF: sub_D750
0000E2C0 0C05 0050                  		cmpi.b	#$50,d5
0000E2C4 6700                       		beq.s	locret_D828
0000E2C6 1019                       		move.b	(a1)+,d0
0000E2C8 1811                       		move.b	(a1),d4
0000E2CA 4880                       		ext.w	d0
0000E2CC 4440                       		neg.w	d0
0000E2CE E70C                       		lsl.b	#3,d4
0000E2D0 0244 0018                  		andi.w	#$18,d4
0000E2D4 5044                       		addq.w	#8,d4
0000E2D6 9044                       		sub.w	d4,d0
0000E2D8 D042                       		add.w	d2,d0
0000E2DA 34C0                       		move.w	d0,(a2)+
0000E2DC 14D9                       		move.b	(a1)+,(a2)+
0000E2DE 5205                       		addq.b	#1,d5
0000E2E0 14C5                       		move.b	d5,(a2)+
0000E2E2 1019                       		move.b	(a1)+,d0
0000E2E4 E148                       		lsl.w	#8,d0
0000E2E6 1019                       		move.b	(a1)+,d0
0000E2E8 D04B                       		add.w	a3,d0
0000E2EA 0A40 1000                  		eori.w	#$1000,d0
0000E2EE 34C0                       		move.w	d0,(a2)+
0000E2F0 1019                       		move.b	(a1)+,d0
0000E2F2 4880                       		ext.w	d0
0000E2F4 D043                       		add.w	d3,d0
0000E2F6 0240 01FF                  		andi.w	#$1FF,d0
0000E2FA 6600                       		bne.s	loc_D822
0000E2FC 5240                       		addq.w	#1,d0
0000E2FE                            
0000E2FE                            loc_D822:
0000E2FE 34C0                       		move.w	d0,(a2)+
0000E300 51C9 FFBE                  		dbf	d1,loc_D7E4
0000E304                            
0000E304                            locret_D828:
0000E304 4E75                       		rts	
0000E306                            ; ===========================================================================
0000E306                            
0000E306                            loc_D82A:
0000E306 0C05 0050                  		cmpi.b	#$50,d5
0000E30A 6700                       		beq.s	locret_D87C
0000E30C 1019                       		move.b	(a1)+,d0
0000E30E 1811                       		move.b	(a1),d4
0000E310 4880                       		ext.w	d0
0000E312 4440                       		neg.w	d0
0000E314 E70C                       		lsl.b	#3,d4
0000E316 0244 0018                  		andi.w	#$18,d4
0000E31A 5044                       		addq.w	#8,d4
0000E31C 9044                       		sub.w	d4,d0
0000E31E D042                       		add.w	d2,d0
0000E320 34C0                       		move.w	d0,(a2)+
0000E322 1819                       		move.b	(a1)+,d4
0000E324 14C4                       		move.b	d4,(a2)+
0000E326 5205                       		addq.b	#1,d5
0000E328 14C5                       		move.b	d5,(a2)+
0000E32A 1019                       		move.b	(a1)+,d0
0000E32C E148                       		lsl.w	#8,d0
0000E32E 1019                       		move.b	(a1)+,d0
0000E330 D04B                       		add.w	a3,d0
0000E332 0A40 1800                  		eori.w	#$1800,d0
0000E336 34C0                       		move.w	d0,(a2)+
0000E338 1019                       		move.b	(a1)+,d0
0000E33A 4880                       		ext.w	d0
0000E33C 4440                       		neg.w	d0
0000E33E D804                       		add.b	d4,d4
0000E340 0244 0018                  		andi.w	#$18,d4
0000E344 5044                       		addq.w	#8,d4
0000E346 9044                       		sub.w	d4,d0
0000E348 D043                       		add.w	d3,d0
0000E34A 0240 01FF                  		andi.w	#$1FF,d0
0000E34E 6600                       		bne.s	loc_D876
0000E350 5240                       		addq.w	#1,d0
0000E352                            
0000E352                            loc_D876:
0000E352 34C0                       		move.w	d0,(a2)+
0000E354 51C9 FFB0                  		dbf	d1,loc_D82A
0000E358                            
0000E358                            locret_D87C:
0000E358 4E75                       		rts	
0000E35A                            ; ---------------------------------------------------------------------------
0000E35A                            ; Subroutine to	check if an object is on the screen
0000E35A                            ; ---------------------------------------------------------------------------
0000E35A                            
0000E35A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E35A                            
0000E35A                            
0000E35A                            ChkObjOnScreen:
0000E35A 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000E35E 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000E362 6B00                       		bmi.s	NotOnScreen
0000E364 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000E368 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E36A                            
0000E36A 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000E36E 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000E372 6B00                       		bmi.s	NotOnScreen
0000E374 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000E378 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E37A                            
0000E37A 7000                       		moveq	#0,d0		; set flag to 0
0000E37C 4E75                       		rts	
0000E37E                            ; ===========================================================================
0000E37E                            
0000E37E                            NotOnScreen:				; XREF: ChkObjOnScreen
0000E37E 7001                       		moveq	#1,d0		; set flag to 1
0000E380 4E75                       		rts	
0000E382                            ; End of function ChkObjOnScreen
0000E382                            
0000E382                            
0000E382                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E382                            
0000E382                            
0000E382                            ChkObjOnScreen2:
0000E382 7200                       		moveq	#0,d1
0000E384 1228 0019                  		move.b	$19(a0),d1
0000E388 3028 0008                  		move.w	8(a0),d0
0000E38C 9078 F700                  		sub.w	($FFFFF700).w,d0
0000E390 D041                       		add.w	d1,d0
0000E392 6B00                       		bmi.s	NotOnScreen2
0000E394 D241                       		add.w	d1,d1
0000E396 9041                       		sub.w	d1,d0
0000E398 0C40 0140                  		cmpi.w	#320,d0
0000E39C 6C00                       		bge.s	NotOnScreen2
0000E39E                            
0000E39E 3228 000C                  		move.w	$C(a0),d1
0000E3A2 9278 F704                  		sub.w	($FFFFF704).w,d1
0000E3A6 6B00                       		bmi.s	NotOnScreen2
0000E3A8 0C41 00E0                  		cmpi.w	#224,d1
0000E3AC 6C00                       		bge.s	NotOnScreen2
0000E3AE                            
0000E3AE 7000                       		moveq	#0,d0
0000E3B0 4E75                       		rts	
0000E3B2                            ; ===========================================================================
0000E3B2                            
0000E3B2                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000E3B2 7001                       		moveq	#1,d0
0000E3B4 4E75                       		rts	
0000E3B6                            ; End of function ChkObjOnScreen2
0000E3B6                            
0000E3B6                            ; ---------------------------------------------------------------------------
0000E3B6                            ; Subroutine to	load a level's objects
0000E3B6                            ; ---------------------------------------------------------------------------
0000E3B6                            
0000E3B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E3B6                            
0000E3B6                            
0000E3B6                            ObjPosLoad:				; XREF: Level; et al
0000E3B6 7000                       		moveq	#0,d0
0000E3B8 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000E3BC 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000E3C0 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000E3C4                            ; End of function ObjPosLoad
0000E3C4                            
0000E3C4                            ; ===========================================================================
0000E3C4 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000E3C6 0000                       		dc.w OPL_Next-OPL_Index
0000E3C8                            ; ===========================================================================
0000E3C8                            
0000E3C8                            OPL_Main:				; XREF: OPL_Index
0000E3C8 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000E3CC 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000E3D0 ED08                       		lsl.b	#6,d0
0000E3D2 E848                       		lsr.w	#4,d0
0000E3D4 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000E3DA 2248                       		movea.l	a0,a1
0000E3DC D0F0 0000                  		adda.w	(a0,d0.w),a0
0000E3E0 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E3E4 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E3E8 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000E3EC 21C9 F778                  		move.l	a1,($FFFFF778).w
0000E3F0 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000E3F4 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E3F8 34FC 0101                  		move.w	#$101,(a2)+
0000E3FC 303C 005E                  		move.w	#$5E,d0
0000E400                            
0000E400                            OPL_ClrList:
0000E400 429A                       		clr.l	(a2)+
0000E402 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000E406                            
0000E406 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E40A 7400                       		moveq	#0,d2
0000E40C 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E410 0446 0080                  		subi.w	#$80,d6
0000E414 6400                       		bcc.s	loc_D93C
0000E416 7C00                       		moveq	#0,d6
0000E418                            
0000E418                            loc_D93C:
0000E418 0246 FF80                  		andi.w	#$FF80,d6
0000E41C 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E420                            
0000E420                            loc_D944:
0000E420 BC50                       		cmp.w	(a0),d6
0000E422 6300                       		bls.s	loc_D956
0000E424 4A28 0004                  		tst.b	4(a0)
0000E428 6A00                       		bpl.s	loc_D952
0000E42A 1412                       		move.b	(a2),d2
0000E42C 5212                       		addq.b	#1,(a2)
0000E42E                            
0000E42E                            loc_D952:
0000E42E 5C48                       		addq.w	#6,a0
0000E430 60EE                       		bra.s	loc_D944
0000E432                            ; ===========================================================================
0000E432                            
0000E432                            loc_D956:
0000E432 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E436 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E43A 0446 0080                  		subi.w	#$80,d6
0000E43E 6500                       		bcs.s	loc_D976
0000E440                            
0000E440                            loc_D964:
0000E440 BC50                       		cmp.w	(a0),d6
0000E442 6300                       		bls.s	loc_D976
0000E444 4A28 0004                  		tst.b	4(a0)
0000E448 6A00                       		bpl.s	loc_D972
0000E44A 522A 0001                  		addq.b	#1,1(a2)
0000E44E                            
0000E44E                            loc_D972:
0000E44E 5C48                       		addq.w	#6,a0
0000E450 60EE                       		bra.s	loc_D964
0000E452                            ; ===========================================================================
0000E452                            
0000E452                            loc_D976:
0000E452 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E456 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000E45C                            
0000E45C                            OPL_Next:				; XREF: OPL_Index
0000E45C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E460 7400                       		moveq	#0,d2
0000E462 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E466 0246 FF80                  		andi.w	#$FF80,d6
0000E46A BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000E46E 6700 0000                  		beq.w	locret_DA3A
0000E472 6C00                       		bge.s	loc_D9F6
0000E474 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E478 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E47C 0446 0080                  		subi.w	#$80,d6
0000E480 6500                       		bcs.s	loc_D9D2
0000E482                            
0000E482                            loc_D9A6:
0000E482 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E486 6C00                       		bge.s	loc_D9D2
0000E488 5D48                       		subq.w	#6,a0
0000E48A 4A28 0004                  		tst.b	4(a0)
0000E48E 6A00                       		bpl.s	loc_D9BC
0000E490 532A 0001                  		subq.b	#1,1(a2)
0000E494 142A 0001                  		move.b	1(a2),d2
0000E498                            
0000E498                            loc_D9BC:
0000E498 6100 0000                  		bsr.w	loc_DA3C
0000E49C 6600                       		bne.s	loc_D9C6
0000E49E 5D48                       		subq.w	#6,a0
0000E4A0 60E0                       		bra.s	loc_D9A6
0000E4A2                            ; ===========================================================================
0000E4A2                            
0000E4A2                            loc_D9C6:
0000E4A2 4A28 0004                  		tst.b	4(a0)
0000E4A6 6A00                       		bpl.s	loc_D9D0
0000E4A8 522A 0001                  		addq.b	#1,1(a2)
0000E4AC                            
0000E4AC                            loc_D9D0:
0000E4AC 5C48                       		addq.w	#6,a0
0000E4AE                            
0000E4AE                            loc_D9D2:
0000E4AE 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E4B2 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E4B6 0646 0300                  		addi.w	#$300,d6
0000E4BA                            
0000E4BA                            loc_D9DE:
0000E4BA BC68 FFFA                  		cmp.w	-6(a0),d6
0000E4BE 6E00                       		bgt.s	loc_D9F0
0000E4C0 4A28 FFFE                  		tst.b	-2(a0)
0000E4C4 6A00                       		bpl.s	loc_D9EC
0000E4C6 5312                       		subq.b	#1,(a2)
0000E4C8                            
0000E4C8                            loc_D9EC:
0000E4C8 5D48                       		subq.w	#6,a0
0000E4CA 60EE                       		bra.s	loc_D9DE
0000E4CC                            ; ===========================================================================
0000E4CC                            
0000E4CC                            loc_D9F0:
0000E4CC 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E4D0 4E75                       		rts	
0000E4D2                            ; ===========================================================================
0000E4D2                            
0000E4D2                            loc_D9F6:
0000E4D2 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E4D6 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E4DA 0646 0280                  		addi.w	#$280,d6
0000E4DE                            
0000E4DE                            loc_DA02:
0000E4DE BC50                       		cmp.w	(a0),d6
0000E4E0 6300                       		bls.s	loc_DA16
0000E4E2 4A28 0004                  		tst.b	4(a0)
0000E4E6 6A00                       		bpl.s	loc_DA10
0000E4E8 1412                       		move.b	(a2),d2
0000E4EA 5212                       		addq.b	#1,(a2)
0000E4EC                            
0000E4EC                            loc_DA10:
0000E4EC 6100 0000                  		bsr.w	loc_DA3C
0000E4F0 67EC                       		beq.s	loc_DA02
0000E4F2 4A28 0004                  		tst.b	$04(a0)		; was this object a remember state?
0000E4F6 6A00                       		bpl.s	loc_DA16	; if not, branch
0000E4F8 5312                       		subq.b	#$01,(a2)	; move right counter back		
0000E4FA                            
0000E4FA                            loc_DA16:
0000E4FA 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E4FE 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E502 0446 0300                  		subi.w	#$300,d6
0000E506 6500                       		bcs.s	loc_DA36
0000E508                            
0000E508                            loc_DA24:
0000E508 BC50                       		cmp.w	(a0),d6
0000E50A 6300                       		bls.s	loc_DA36
0000E50C 4A28 0004                  		tst.b	4(a0)
0000E510 6A00                       		bpl.s	loc_DA32
0000E512 522A 0001                  		addq.b	#1,1(a2)
0000E516                            
0000E516                            loc_DA32:
0000E516 5C48                       		addq.w	#6,a0
0000E518 60EE                       		bra.s	loc_DA24
0000E51A                            ; ===========================================================================
0000E51A                            
0000E51A                            loc_DA36:
0000E51A 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E51E                            
0000E51E                            locret_DA3A:
0000E51E 4E75                       		rts	
0000E520                            ; ===========================================================================
0000E520                            
0000E520                            loc_DA3C:
0000E520 4A28 0004                  		tst.b	4(a0)
0000E524 6A00                       		bpl.s	OPL_MakeItem
0000E526 0832 0007 2002             		btst	#7,2(a2,d2.w)
0000E52C 6700                       		beq.s	OPL_MakeItem
0000E52E 5C48                       		addq.w	#6,a0
0000E530 7000                       		moveq	#0,d0
0000E532 4E75                       		rts	
0000E534                            ; ===========================================================================
0000E534                            
0000E534                            OPL_MakeItem:
0000E534 6100 0000                  		bsr.w	SingleObjLoad
0000E538 6600                       		bne.s	locret_DA8A
0000E53A 3358 0008                  		move.w	(a0)+,8(a1)
0000E53E 3018                       		move.w	(a0)+,d0
0000E540 3200                       		move.w	d0,d1
0000E542 0240 0FFF                  		andi.w	#$FFF,d0
0000E546 3340 000C                  		move.w	d0,$C(a1)
0000E54A E559                       		rol.w	#2,d1
0000E54C 0201 0003                  		andi.b	#3,d1
0000E550 1341 0001                  		move.b	d1,1(a1)
0000E554 1341 0022                  		move.b	d1,$22(a1)
0000E558 1018                       		move.b	(a0)+,d0
0000E55A 6A00                       		bpl.s	loc_DA80
0000E55C 08F2 0007 2002             		bset	#$07,$02(a2,d2.w)	; set as removed
0000E562 0200 007F                  		andi.b	#$7F,d0
0000E566 1342 0023                  		move.b	d2,$23(a1)
0000E56A                            
0000E56A                            loc_DA80:
0000E56A 1280                       		move.b	d0,0(a1)
0000E56C 1358 0028                  		move.b	(a0)+,$28(a1)
0000E570 7000                       		moveq	#0,d0
0000E572                            
0000E572                            locret_DA8A:
0000E572 4E75                       		rts	
0000E574                            ; ---------------------------------------------------------------------------
0000E574                            ; Single object	loading	subroutine
0000E574                            ; ---------------------------------------------------------------------------
0000E574                            
0000E574                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E574                            
0000E574                            
0000E574                            SingleObjLoad:
0000E574 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E578 303C 005F                  		move.w	#$5F,d0
0000E57C                            
0000E57C                            loc_DA94:
0000E57C 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E57E 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E580 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E584 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E588                            
0000E588                            locret_DAA0:
0000E588 4E75                       		rts	
0000E58A                            ; End of function SingleObjLoad
0000E58A                            
0000E58A                            
0000E58A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E58A                            
0000E58A                            
0000E58A                            SingleObjLoad2:
0000E58A 2248                       		movea.l	a0,a1
0000E58C 303C F000                  		move.w	#-$1000,d0
0000E590 9048                       		sub.w	a0,d0
0000E592 EC48                       		lsr.w	#6,d0
0000E594 5340                       		subq.w	#1,d0
0000E596 6500                       		bcs.s	locret_DABC
0000E598                            
0000E598                            loc_DAB0:
0000E598 4A11                       		tst.b	(a1)
0000E59A 6700                       		beq.s	locret_DABC
0000E59C 43E9 0040                  		lea	$40(a1),a1
0000E5A0 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E5A4                            
0000E5A4                            locret_DABC:
0000E5A4 4E75                       		rts	
0000E5A6                            ; End of function SingleObjLoad2
0000E5A6                            
0000E5A6                            ; ===========================================================================
0000E5A6                            ; ---------------------------------------------------------------------------
0000E5A6                            ; Object 41 - springs
0000E5A6                            ; ---------------------------------------------------------------------------
0000E5A6                            
0000E5A6                            Obj41:					; XREF: Obj_Index
0000E5A6 7000                       		moveq	#0,d0
0000E5A8 1028 0024                  		move.b	$24(a0),d0
0000E5AC 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E5B0 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E5B4 6100 FB28                  		bsr.w	DisplaySprite
0000E5B8 3028 0008                  		move.w	8(a0),d0
0000E5BC 0240 FF80                  		andi.w	#$FF80,d0
0000E5C0 3238 F700                  		move.w	($FFFFF700).w,d1
0000E5C4 0441 0080                  		subi.w	#$80,d1
0000E5C8 0241 FF80                  		andi.w	#$FF80,d1
0000E5CC 9041                       		sub.w	d1,d0
0000E5CE 0C40 0280                  		cmpi.w	#$280,d0
0000E5D2 6200 FB46                  		bhi.w	DeleteObject
0000E5D6 4E75                       		rts	
0000E5D8                            ; ===========================================================================
0000E5D8 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E5DA 0000                       		dc.w Obj41_Up-Obj41_Index
0000E5DC 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E5DE 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E5E0 0000                       		dc.w Obj41_LR-Obj41_Index
0000E5E2 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E5E4 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E5E6 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E5E8 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E5EA 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E5EC                            
0000E5EC F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E5EE F600                       		dc.w -$A00		; power	of yellow spring
0000E5F0                            ; ===========================================================================
0000E5F0                            
0000E5F0                            Obj41_Main:				; XREF: Obj41_Index
0000E5F0 5428 0024                  		addq.b	#2,$24(a0)
0000E5F4 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E5FC 317C 0523 0002             		move.w	#$523,2(a0)
0000E602 0028 0004 0001             		ori.b	#4,1(a0)
0000E608 117C 0010 0019             		move.b	#$10,$19(a0)
0000E60E 117C 0004 0018             		move.b	#4,$18(a0)
0000E614 1028 0028                  		move.b	$28(a0),d0
0000E618 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E61C 6700                       		beq.s	loc_DB54	; if not, branch
0000E61E 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E624 117C 0001 001C             		move.b	#1,$1C(a0)
0000E62A 117C 0003 001A             		move.b	#3,$1A(a0)
0000E630 317C 0533 0002             		move.w	#$533,2(a0)
0000E636 117C 0008 0019             		move.b	#8,$19(a0)
0000E63C                            
0000E63C                            loc_DB54:
0000E63C 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E640 6700                       		beq.s	loc_DB66	; if not, branch
0000E642 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E648 08E8 0001 0022             		bset	#1,$22(a0)
0000E64E                            
0000E64E                            loc_DB66:
0000E64E 0800 0001                  		btst	#1,d0
0000E652 6700                       		beq.s	loc_DB72
0000E654 08E8 0005 0002             		bset	#5,2(a0)
0000E65A                            
0000E65A                            loc_DB72:
0000E65A 0240 000F                  		andi.w	#$F,d0
0000E65E 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E664 4E75                       		rts	
0000E666                            ; ===========================================================================
0000E666                            
0000E666                            Obj41_Up:				; XREF: Obj41_Index
0000E666 323C 001B                  		move.w	#$1B,d1
0000E66A 343C 0008                  		move.w	#8,d2
0000E66E 363C 0010                  		move.w	#$10,d3
0000E672 3828 0008                  		move.w	8(a0),d4
0000E676 6100 0000                  		bsr.w	SolidObject
0000E67A 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E67E 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E680 4E75                       		rts	
0000E682                            ; ===========================================================================
0000E682                            
0000E682                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E682 5428 0024                  		addq.b	#2,$24(a0)
0000E686 5069 000C                  		addq.w	#8,$C(a1)
0000E68A 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E690 08E9 0001 0022             		bset	#1,$22(a1)
0000E696 08A9 0003 0022             		bclr	#3,$22(a1)
0000E69C 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E6A2 137C 0002 0024             		move.b	#2,$24(a1)
0000E6A8 08A8 0003 0022             		bclr	#3,$22(a0)
0000E6AE 4228 0025                  		clr.b	$25(a0)
0000E6B2 303C 00CC                  		move.w	#$CC,d0
0000E6B6 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play spring sound
0000E6BC                            
0000E6BC                            Obj41_AniUp:				; XREF: Obj41_Index
0000E6BC 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E6C2 6000 CB2C                  		bra.w	AnimateSprite
0000E6C6                            ; ===========================================================================
0000E6C6                            
0000E6C6                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E6C6 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E6CC 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E6D0 4E75                       		rts	
0000E6D2                            ; ===========================================================================
0000E6D2                            
0000E6D2                            Obj41_LR:				; XREF: Obj41_Index
0000E6D2 323C 0013                  		move.w	#$13,d1
0000E6D6 343C 000E                  		move.w	#$E,d2
0000E6DA 363C 000F                  		move.w	#$F,d3
0000E6DE 3828 0008                  		move.w	8(a0),d4
0000E6E2 6100 0000                  		bsr.w	SolidObject
0000E6E6 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E6EC 6600                       		bne.s	loc_DC0C
0000E6EE 117C 0008 0024             		move.b	#8,$24(a0)
0000E6F4                            
0000E6F4                            loc_DC0C:
0000E6F4 0828 0005 0022             		btst	#5,$22(a0)
0000E6FA 6600                       		bne.s	Obj41_BounceLR
0000E6FC 4E75                       		rts	
0000E6FE                            ; ===========================================================================
0000E6FE                            
0000E6FE                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E6FE 5428 0024                  		addq.b	#2,$24(a0)
0000E702 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E708 5069 0008                  		addq.w	#8,8(a1)
0000E70C 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E712 6600                       		bne.s	loc_DC36	; if yes, branch
0000E714 0469 0010 0008             		subi.w	#$10,8(a1)
0000E71A 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E71E                            
0000E71E                            loc_DC36:
0000E71E 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E724 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E72A 0869 0000 0022             		bchg	#0,$22(a1)
0000E730 0829 0002 0022             		btst	#2,$22(a1)
0000E736 6600                       		bne.s	loc_DC56
0000E738 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E73E                            
0000E73E                            loc_DC56:
0000E73E 08A8 0005 0022             		bclr	#5,$22(a0)
0000E744 08A9 0005 0022             		bclr	#5,$22(a1)
0000E74A 303C 00CC                  		move.w	#$CC,d0
0000E74E 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play spring sound
0000E754                            
0000E754                            Obj41_AniLR:				; XREF: Obj41_Index
0000E754 4278 C904                  		clr.w	($FFFFC904).w	; clear screen delay counter
0000E758 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E75E 6000 CA90                  		bra.w	AnimateSprite
0000E762                            ; ===========================================================================
0000E762                            
0000E762                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E762 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E768 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E76C 4E75                       		rts	
0000E76E                            ; ===========================================================================
0000E76E                            
0000E76E                            Obj41_Dwn:				; XREF: Obj41_Index
0000E76E 323C 001B                  		move.w	#$1B,d1
0000E772 343C 0008                  		move.w	#8,d2
0000E776 363C 0010                  		move.w	#$10,d3
0000E77A 3828 0008                  		move.w	8(a0),d4
0000E77E 6100 0000                  		bsr.w	SolidObject
0000E782 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E788 6600                       		bne.s	loc_DCA4
0000E78A 117C 000E 0024             		move.b	#$E,$24(a0)
0000E790                            
0000E790                            loc_DCA4:
0000E790 4A28 0025                  		tst.b	$25(a0)
0000E794 6600                       		bne.s	locret_DCAE
0000E796 4A44                       		tst.w	d4
0000E798 6B00                       		bmi.s	Obj41_BounceDwn
0000E79A                            
0000E79A                            locret_DCAE:
0000E79A 4E75                       		rts	
0000E79C                            ; ===========================================================================
0000E79C                            
0000E79C                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E79C 5428 0024                  		addq.b	#2,$24(a0)
0000E7A0 5169 000C                  		subq.w	#8,$C(a1)
0000E7A4 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E7AA 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E7AE 08E9 0001 0022             		bset	#1,$22(a1)
0000E7B4 08A9 0003 0022             		bclr	#3,$22(a1)
0000E7BA 137C 0002 0024             		move.b	#2,$24(a1)
0000E7C0 08A8 0003 0022             		bclr	#3,$22(a0)
0000E7C6 4228 0025                  		clr.b	$25(a0)
0000E7CA 303C 00CC                  		move.w	#$CC,d0
0000E7CE 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play spring sound
0000E7D4                            
0000E7D4                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E7D4 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E7DA 6000 CA14                  		bra.w	AnimateSprite
0000E7DE                            ; ===========================================================================
0000E7DE                            
0000E7DE                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E7DE 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E7E4 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E7E8 4E75                       		rts	
0000E7EA                            ; ===========================================================================
0000E7EA                            Ani_obj41:
0000E7EA                            	include "_anim\obj41.asm"
0000E7EA                            ; ---------------------------------------------------------------------------
0000E7EA                            ; Animation script - springs
0000E7EA                            ; ---------------------------------------------------------------------------
0000E7EA 0000                       		dc.w byte_DD02-Ani_obj41
0000E7EC 0000                       		dc.w byte_DD0E-Ani_obj41
0000E7EE 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E7FA 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E806                            		even
0000E806                            		even
0000E806                            
0000E806                            ; ---------------------------------------------------------------------------
0000E806                            ; Sprite mappings - springs
0000E806                            ; ---------------------------------------------------------------------------
0000E806                            Map_obj41:
0000E806                            	include "_maps\obj41.asm"
0000E806                            ; ---------------------------------------------------------------------------
0000E806                            ; Sprite mappings - springs
0000E806                            ; ---------------------------------------------------------------------------
0000E806 0000                       		dc.w byte_DD26-Map_obj41
0000E808 0000                       		dc.w byte_DD31-Map_obj41
0000E80A 0000                       		dc.w byte_DD37-Map_obj41
0000E80C 0000                       		dc.w byte_DD47-Map_obj41
0000E80E 0000                       		dc.w byte_DD4D-Map_obj41
0000E810 0000                       		dc.w byte_DD53-Map_obj41
0000E812 02                         byte_DD26:	dc.b 2
0000E813 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E818 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E81D 01                         byte_DD31:	dc.b 1
0000E81E 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E823 03                         byte_DD37:	dc.b 3
0000E824 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E829 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E82E 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E833 01                         byte_DD47:	dc.b 1
0000E834 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E839 01                         byte_DD4D:	dc.b 1
0000E83A F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E83F 04                         byte_DD53:	dc.b 4
0000E840 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E845 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E84A F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E84F 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E854                            		even
0000E854                            		even
0000E854                            
0000E854                            ; ===========================================================================
0000E854                            ; ---------------------------------------------------------------------------
0000E854                            ; Object 42 - Newtron enemy (GHZ)
0000E854                            ; ---------------------------------------------------------------------------
0000E854                            
0000E854                            Obj42:					; XREF: Obj_Index
0000E854 7000                       		moveq	#0,d0
0000E856 1028 0024                  		move.b	$24(a0),d0
0000E85A 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E85E 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E862                            ; ===========================================================================
0000E862 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E864 0000                       		dc.w Obj42_Action-Obj42_Index
0000E866 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E868                            ; ===========================================================================
0000E868                            
0000E868                            Obj42_Main:				; XREF: Obj42_Index
0000E868 5428 0024                  		addq.b	#2,$24(a0)
0000E86C 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E874 317C 049B 0002             		move.w	#$49B,2(a0)
0000E87A 117C 0004 0001             		move.b	#4,1(a0)
0000E880 117C 0004 0018             		move.b	#4,$18(a0)
0000E886 117C 0014 0019             		move.b	#$14,$19(a0)
0000E88C 117C 0010 0016             		move.b	#$10,$16(a0)
0000E892 117C 0008 0017             		move.b	#8,$17(a0)
0000E898                            
0000E898                            Obj42_Action:				; XREF: Obj42_Index
0000E898 7000                       		moveq	#0,d0
0000E89A 1028 0025                  		move.b	$25(a0),d0
0000E89E 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E8A2 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E8A6 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E8AC 6100 C942                  		bsr.w	AnimateSprite
0000E8B0 6000 0000                  		bra.w	MarkObjGone
0000E8B4                            ; ===========================================================================
0000E8B4 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E8B6 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E8B8 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E8BA 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E8BC 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E8BE                            ; ===========================================================================
0000E8BE                            
0000E8BE                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E8BE 08E8 0000 0022             		bset	#0,$22(a0)
0000E8C4 3038 D008                  		move.w	($FFFFD008).w,d0
0000E8C8 9068 0008                  		sub.w	8(a0),d0
0000E8CC 6400                       		bcc.s	loc_DDEA
0000E8CE 4440                       		neg.w	d0
0000E8D0 08A8 0000 0022             		bclr	#0,$22(a0)
0000E8D6                            
0000E8D6                            loc_DDEA:
0000E8D6 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E8DA 6400                       		bcc.s	locret_DE12	; if not, branch
0000E8DC 5428 0025                  		addq.b	#2,$25(a0)
0000E8E0 117C 0001 001C             		move.b	#1,$1C(a0)
0000E8E6 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E8EA 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E8EC 317C 249B 0002             		move.w	#$249B,2(a0)
0000E8F2 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E8F8 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E8FE                            
0000E8FE                            locret_DE12:
0000E8FE 4E75                       		rts	
0000E900                            ; ===========================================================================
0000E900                            
0000E900                            Obj42_Type00:				; XREF: Obj42_Index2
0000E900 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E906 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E908 08E8 0000 0022             		bset	#0,$22(a0)
0000E90E 3038 D008                  		move.w	($FFFFD008).w,d0
0000E912 9068 0008                  		sub.w	8(a0),d0
0000E916 6400                       		bcc.s	locret_DE32
0000E918 08A8 0000 0022             		bclr	#0,$22(a0)
0000E91E                            
0000E91E                            locret_DE32:
0000E91E 4E75                       		rts	
0000E920                            ; ===========================================================================
0000E920                            
0000E920                            Obj42_Fall:				; XREF: Obj42_Type00
0000E920 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E926 6600                       		bne.s	loc_DE42
0000E928 117C 000C 0020             		move.b	#$C,$20(a0)
0000E92E                            
0000E92E                            loc_DE42:
0000E92E 6100 F75C                  		bsr.w	ObjectFall
0000E932 6100 0000                  		bsr.w	ObjHitFloor
0000E936 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E938 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E93A D368 000C                  		add.w	d1,$C(a0)
0000E93E 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E944 5428 0025                  		addq.b	#2,$25(a0)
0000E948 117C 0002 001C             		move.b	#2,$1C(a0)
0000E94E 0828 0005 0002             		btst	#5,2(a0)
0000E954 6700                       		beq.s	Obj42_Move
0000E956 5228 001C                  		addq.b	#1,$1C(a0)
0000E95A                            
0000E95A                            Obj42_Move:
0000E95A 117C 000D 0020             		move.b	#$D,$20(a0)
0000E960 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E966 0828 0000 0022             		btst	#0,$22(a0)
0000E96C 6600                       		bne.s	locret_DE86
0000E96E 4468 0010                  		neg.w	$10(a0)
0000E972                            
0000E972                            locret_DE86:
0000E972 4E75                       		rts	
0000E974                            ; ===========================================================================
0000E974                            
0000E974                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E974 6100 F742                  		bsr.w	SpeedToPos
0000E978 6100 0000                  		bsr.w	ObjHitFloor
0000E97C 0C41 FFF8                  		cmpi.w	#-8,d1
0000E980 6D00                       		blt.s	loc_DEA2
0000E982 0C41 000C                  		cmpi.w	#$C,d1
0000E986 6C00                       		bge.s	loc_DEA2
0000E988 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E98C 4E75                       		rts	
0000E98E                            ; ===========================================================================
0000E98E                            
0000E98E                            loc_DEA2:
0000E98E 5428 0025                  		addq.b	#2,$25(a0)
0000E992 4E75                       		rts	
0000E994                            ; ===========================================================================
0000E994                            
0000E994                            Obj42_Speed:				; XREF: Obj42_Index2
0000E994 6100 F722                  		bsr.w	SpeedToPos
0000E998 4E75                       		rts	
0000E99A                            ; ===========================================================================
0000E99A                            
0000E99A                            Obj42_Type01:				; XREF: Obj42_Index2
0000E99A 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E9A0 6600                       		bne.s	Obj42_FireMissile
0000E9A2 117C 000C 0020             		move.b	#$C,$20(a0)
0000E9A8                            
0000E9A8                            Obj42_FireMissile:
0000E9A8 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E9AE 6600                       		bne.s	locret_DF14
0000E9B0 4A28 0032                  		tst.b	$32(a0)
0000E9B4 6600                       		bne.s	locret_DF14
0000E9B6 117C 0001 0032             		move.b	#1,$32(a0)
0000E9BC 6100 FBB6                  		bsr.w	SingleObjLoad
0000E9C0 6600                       		bne.s	locret_DF14
0000E9C2 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E9C6 3368 0008 0008             		move.w	8(a0),8(a1)
0000E9CC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E9D2 5169 000C                  		subq.w	#8,$C(a1)
0000E9D6 337C 0200 0010             		move.w	#$200,$10(a1)
0000E9DC 303C 0014                  		move.w	#$14,d0
0000E9E0 0828 0000 0022             		btst	#0,$22(a0)
0000E9E6 6600                       		bne.s	loc_DF04
0000E9E8 4440                       		neg.w	d0
0000E9EA 4469 0010                  		neg.w	$10(a1)
0000E9EE                            
0000E9EE                            loc_DF04:
0000E9EE D169 0008                  		add.w	d0,8(a1)
0000E9F2 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E9F8 137C 0001 0028             		move.b	#1,$28(a1)
0000E9FE                            
0000E9FE                            locret_DF14:
0000E9FE 4E75                       		rts	
0000EA00                            ; ===========================================================================
0000EA00                            
0000EA00                            Obj42_Delete:				; XREF: Obj42_Index
0000EA00 6000 F718                  		bra.w	DeleteObject
0000EA04                            ; ===========================================================================
0000EA04                            Ani_obj42:
0000EA04                            	include "_anim\obj42.asm"
0000EA04                            ; ---------------------------------------------------------------------------
0000EA04                            ; Animation script - Newtron enemy
0000EA04                            ; ---------------------------------------------------------------------------
0000EA04 0000                       		dc.w byte_DF24-Ani_obj42
0000EA06 0000                       		dc.w byte_DF28-Ani_obj42
0000EA08 0000                       		dc.w byte_DF30-Ani_obj42
0000EA0A 0000                       		dc.w byte_DF34-Ani_obj42
0000EA0C 0000                       		dc.w byte_DF38-Ani_obj42
0000EA0E 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000EA12 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000EA1A 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000EA1E 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000EA22 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000EA2C                            		even
0000EA2C                            		even
0000EA2C                            
0000EA2C                            ; ---------------------------------------------------------------------------
0000EA2C                            ; Sprite mappings - Newtron enemy (GHZ)
0000EA2C                            ; ---------------------------------------------------------------------------
0000EA2C                            Map_obj42:
0000EA2C                            	include "_maps\obj42.asm"
0000EA2C                            ; ---------------------------------------------------------------------------
0000EA2C                            ; Sprite mappings - Newtron enemy (GHZ)
0000EA2C                            ; ---------------------------------------------------------------------------
0000EA2C 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000EA30 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000EA34 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000EA38 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000EA3C 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000EA40 0000                       		dc.w byte_DFF8-Map_obj42
0000EA42 03                         byte_DF58:	dc.b 3
0000EA43 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000EA48 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000EA4D FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000EA52 03                         byte_DF68:	dc.b 3
0000EA53 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000EA58 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000EA5D FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000EA62 03                         byte_DF78:	dc.b 3
0000EA63 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000EA68 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000EA6D FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000EA72 04                         byte_DF88:	dc.b 4
0000EA73 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000EA78 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000EA7D FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000EA82 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000EA87 03                         byte_DF9D:	dc.b 3
0000EA88 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000EA8D FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000EA92 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000EA97 02                         byte_DFAD:	dc.b 2
0000EA98 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EA9D F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EAA2 03                         byte_DFB8:	dc.b 3
0000EAA3 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EAA8 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EAAD FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000EAB2 03                         byte_DFC8:	dc.b 3
0000EAB3 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EAB8 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EABD FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000EAC2 03                         byte_DFD8:	dc.b 3
0000EAC3 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EAC8 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EACD FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000EAD2 03                         byte_DFE8:	dc.b 3
0000EAD3 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EAD8 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EADD FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000EAE2 00                         byte_DFF8:	dc.b 0
0000EAE4 00                         		even
0000EAE4 00                         		even
0000EAE4                            
0000EAE4                            ; ===========================================================================
0000EAE4                            ; ---------------------------------------------------------------------------
0000EAE4                            ; Object 43 - Roller enemy (SYZ)
0000EAE4                            ; ---------------------------------------------------------------------------
0000EAE4                            
0000EAE4                            Obj43:					; XREF: Obj_Index
0000EAE4 7000                       		moveq	#0,d0
0000EAE6 1028 0024                  		move.b	$24(a0),d0
0000EAEA 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000EAEE 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000EAF2                            ; ===========================================================================
0000EAF2 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000EAF4 0000                       		dc.w Obj43_Action-Obj43_Index
0000EAF6                            ; ===========================================================================
0000EAF6                            
0000EAF6                            Obj43_Main:				; XREF: Obj43_Index
0000EAF6 117C 000E 0016             		move.b	#$E,$16(a0)
0000EAFC 117C 0008 0017             		move.b	#8,$17(a0)
0000EB02 6100 F588                  		bsr.w	ObjectFall
0000EB06 6100 0000                  		bsr.w	ObjHitFloor
0000EB0A 4A41                       		tst.w	d1
0000EB0C 6A00                       		bpl.s	locret_E052
0000EB0E D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000EB12 317C 0000 0012             		move.w	#0,$12(a0)
0000EB18 5428 0024                  		addq.b	#2,$24(a0)
0000EB1C 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000EB24 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000EB2A 117C 0004 0001             		move.b	#4,1(a0)
0000EB30 117C 0004 0018             		move.b	#4,$18(a0)
0000EB36 117C 0010 0019             		move.b	#$10,$19(a0)
0000EB3C                            
0000EB3C                            locret_E052:
0000EB3C 4E75                       		rts	
0000EB3E                            ; ===========================================================================
0000EB3E                            
0000EB3E                            Obj43_Action:				; XREF: Obj43_Index
0000EB3E 7000                       		moveq	#0,d0
0000EB40 1028 0025                  		move.b	$25(a0),d0
0000EB44 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000EB48 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000EB4C 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000EB52 6100 C69C                  		bsr.w	AnimateSprite
0000EB56 3028 0008                  		move.w	8(a0),d0
0000EB5A 0240 FF80                  		andi.w	#$FF80,d0
0000EB5E 3238 F700                  		move.w	($FFFFF700).w,d1
0000EB62 0441 0080                  		subi.w	#$80,d1
0000EB66 0241 FF80                  		andi.w	#$FF80,d1
0000EB6A 9041                       		sub.w	d1,d0
0000EB6C 0C40 0280                  		cmpi.w	#$280,d0
0000EB70 6E00 0000                  		bgt.w	Obj43_ChkGone
0000EB74 6000 F568                  		bra.w	DisplaySprite
0000EB78                            ; ===========================================================================
0000EB78                            
0000EB78                            Obj43_ChkGone:				; XREF: Obj43_Action
0000EB78 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EB7C 7000                       		moveq	#0,d0
0000EB7E 1028 0023                  		move.b	$23(a0),d0
0000EB82 6700                       		beq.s	Obj43_Delete
0000EB84 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000EB8A                            
0000EB8A                            Obj43_Delete:
0000EB8A 6000 F58E                  		bra.w	DeleteObject
0000EB8E                            ; ===========================================================================
0000EB8E 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000EB90 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000EB92 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000EB94 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000EB96                            ; ===========================================================================
0000EB96                            
0000EB96                            Obj43_RollChk:				; XREF: Obj43_Index2
0000EB96 3038 D008                  		move.w	($FFFFD008).w,d0
0000EB9A 0440 0100                  		subi.w	#$100,d0
0000EB9E 6500                       		bcs.s	loc_E0D2
0000EBA0 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000EBA4 6500                       		bcs.s	loc_E0D2
0000EBA6 5828 0025                  		addq.b	#4,$25(a0)
0000EBAA 117C 0002 001C             		move.b	#2,$1C(a0)
0000EBB0 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000EBB6 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000EBBC                            
0000EBBC                            loc_E0D2:
0000EBBC 588F                       		addq.l	#4,sp
0000EBBE 4E75                       		rts	
0000EBC0                            ; ===========================================================================
0000EBC0                            
0000EBC0                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000EBC0 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000EBC6 6700                       		beq.s	loc_E0F8
0000EBC8 5368 0030                  		subq.w	#1,$30(a0)
0000EBCC 6A00                       		bpl.s	locret_E0F6
0000EBCE 117C 0001 001C             		move.b	#1,$1C(a0)
0000EBD4 317C 0700 0010             		move.w	#$700,$10(a0)
0000EBDA 117C 008E 0020             		move.b	#$8E,$20(a0)
0000EBE0                            
0000EBE0                            locret_E0F6:
0000EBE0 4E75                       		rts	
0000EBE2                            ; ===========================================================================
0000EBE2                            
0000EBE2                            loc_E0F8:
0000EBE2 5428 0025                  		addq.b	#2,$25(a0)
0000EBE6 4E75                       		rts	
0000EBE8                            ; ===========================================================================
0000EBE8                            
0000EBE8                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000EBE8 6100 0000                  		bsr.w	Obj43_Stop
0000EBEC 6100 F4CA                  		bsr.w	SpeedToPos
0000EBF0 6100 0000                  		bsr.w	ObjHitFloor
0000EBF4 0C41 FFF8                  		cmpi.w	#-8,d1
0000EBF8 6D00                       		blt.s	Obj43_Jump
0000EBFA 0C41 000C                  		cmpi.w	#$C,d1
0000EBFE 6C00                       		bge.s	Obj43_Jump
0000EC00 D368 000C                  		add.w	d1,$C(a0)
0000EC04 4E75                       		rts	
0000EC06                            ; ===========================================================================
0000EC06                            
0000EC06                            Obj43_Jump:
0000EC06 5428 0025                  		addq.b	#2,$25(a0)
0000EC0A 08E8 0000 0032             		bset	#0,$32(a0)
0000EC10 6700                       		beq.s	locret_E12E
0000EC12 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000EC18                            
0000EC18                            locret_E12E:
0000EC18 4E75                       		rts	
0000EC1A                            ; ===========================================================================
0000EC1A                            
0000EC1A                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000EC1A 6100 F470                  		bsr.w	ObjectFall
0000EC1E 4A68 0012                  		tst.w	$12(a0)
0000EC22 6B00                       		bmi.s	locret_E150
0000EC24 6100 0000                  		bsr.w	ObjHitFloor
0000EC28 4A41                       		tst.w	d1
0000EC2A 6A00                       		bpl.s	locret_E150
0000EC2C D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000EC30 5528 0025                  		subq.b	#2,$25(a0)
0000EC34 317C 0000 0012             		move.w	#0,$12(a0)
0000EC3A                            
0000EC3A                            locret_E150:
0000EC3A 4E75                       		rts	
0000EC3C                            
0000EC3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EC3C                            
0000EC3C                            
0000EC3C                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000EC3C 4A28 0032                  		tst.b	$32(a0)
0000EC40 6B00                       		bmi.s	locret_E188
0000EC42 3038 D008                  		move.w	($FFFFD008).w,d0
0000EC46 0440 0030                  		subi.w	#$30,d0
0000EC4A 9068 0008                  		sub.w	8(a0),d0
0000EC4E 6400                       		bcc.s	locret_E188
0000EC50 117C 0000 001C             		move.b	#0,$1C(a0)
0000EC56 117C 000E 0020             		move.b	#$E,$20(a0)
0000EC5C 4268 0010                  		clr.w	$10(a0)
0000EC60 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000EC66 117C 0002 0025             		move.b	#2,$25(a0)
0000EC6C 08E8 0007 0032             		bset	#7,$32(a0)
0000EC72                            
0000EC72                            locret_E188:
0000EC72 4E75                       		rts	
0000EC74                            ; End of function Obj43_Stop
0000EC74                            
0000EC74                            ; ===========================================================================
0000EC74                            Ani_obj43:
0000EC74                            	include "_anim\obj43.asm"
0000EC74                            ; ---------------------------------------------------------------------------
0000EC74                            ; Animation script - Roller enemy
0000EC74                            ; ---------------------------------------------------------------------------
0000EC74 0000                       		dc.w byte_E190-Ani_obj43
0000EC76 0000                       		dc.w byte_E196-Ani_obj43
0000EC78 0000                       		dc.w byte_E19C-Ani_obj43
0000EC7A 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000EC80 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000EC86 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000EC8C 00                         		even
0000EC8C 00                         		even
0000EC8C                            
0000EC8C                            ; ---------------------------------------------------------------------------
0000EC8C                            ; Sprite mappings - Roller enemy (SYZ)
0000EC8C                            ; ---------------------------------------------------------------------------
0000EC8C                            Map_obj43:
0000EC8C                            	include "_maps\obj43.asm"
0000EC8C                            ; ---------------------------------------------------------------------------
0000EC8C                            ; Sprite mappings - Roller enemy (SYZ)
0000EC8C                            ; ---------------------------------------------------------------------------
0000EC8C 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0000EC90 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0000EC94 0000                       		dc.w byte_E1CE-Map_obj43
0000EC96 02                         byte_E1AC:	dc.b 2
0000EC97 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0000EC9C F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000ECA1 02                         byte_E1B7:	dc.b 2
0000ECA2 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0000ECA7 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000ECAC 01                         byte_E1C2:	dc.b 1
0000ECAD F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0000ECB2 01                         byte_E1C8:	dc.b 1
0000ECB3 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0000ECB8 01                         byte_E1CE:	dc.b 1
0000ECB9 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000ECBE                            		even
0000ECBE                            		even
0000ECBE                            
0000ECBE                            ; ===========================================================================
0000ECBE                            ; ---------------------------------------------------------------------------
0000ECBE                            ; Object 44 - walls (GHZ)
0000ECBE                            ; ---------------------------------------------------------------------------
0000ECBE                            
0000ECBE                            Obj44:					; XREF: Obj_Index
0000ECBE 7000                       		moveq	#0,d0
0000ECC0 1028 0024                  		move.b	$24(a0),d0
0000ECC4 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000ECC8 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000ECCC                            ; ===========================================================================
0000ECCC 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000ECCE 0000                       		dc.w Obj44_Solid-Obj44_Index
0000ECD0 0000                       		dc.w Obj44_Display-Obj44_Index
0000ECD2                            ; ===========================================================================
0000ECD2                            
0000ECD2                            Obj44_Main:				; XREF: Obj44_Index
0000ECD2 5428 0024                  		addq.b	#2,$24(a0)
0000ECD6 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000ECDE 317C 434C 0002             		move.w	#$434C,2(a0)
0000ECE4 0028 0004 0001             		ori.b	#4,1(a0)
0000ECEA 117C 0008 0019             		move.b	#8,$19(a0)
0000ECF0 117C 0006 0018             		move.b	#6,$18(a0)
0000ECF6 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000ECFC 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000ED02 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000ED04 5428 0024                  		addq.b	#2,$24(a0)
0000ED08 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000ED0A                            ; ===========================================================================
0000ED0A                            
0000ED0A                            Obj44_Solid:				; XREF: Obj44_Index
0000ED0A 323C 0013                  		move.w	#$13,d1
0000ED0E 343C 0028                  		move.w	#$28,d2
0000ED12 6100 A7C6                  		bsr.w	Obj44_SolidWall
0000ED16                            
0000ED16                            Obj44_Display:				; XREF: Obj44_Index
0000ED16 6100 F3C6                  		bsr.w	DisplaySprite
0000ED1A 3028 0008                  		move.w	8(a0),d0
0000ED1E 0240 FF80                  		andi.w	#$FF80,d0
0000ED22 3238 F700                  		move.w	($FFFFF700).w,d1
0000ED26 0441 0080                  		subi.w	#$80,d1
0000ED2A 0241 FF80                  		andi.w	#$FF80,d1
0000ED2E 9041                       		sub.w	d1,d0
0000ED30 0C40 0280                  		cmpi.w	#$280,d0
0000ED34 6200 F3E4                  		bhi.w	DeleteObject
0000ED38 4E75                       		rts	
0000ED3A                            ; ===========================================================================
0000ED3A                            ; ---------------------------------------------------------------------------
0000ED3A                            ; Sprite mappings - walls (GHZ)
0000ED3A                            ; ---------------------------------------------------------------------------
0000ED3A                            Map_obj44:
0000ED3A                            	include "_maps\obj44.asm"
0000ED3A                            ; ---------------------------------------------------------------------------
0000ED3A                            ; Sprite mappings - walls (GHZ)
0000ED3A                            ; ---------------------------------------------------------------------------
0000ED3A 0000                       		dc.w byte_E256-Map_obj44
0000ED3C 0000                       		dc.w byte_E26B-Map_obj44
0000ED3E 0000                       		dc.w byte_E280-Map_obj44
0000ED40 04                         byte_E256:	dc.b 4
0000ED41 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000ED46 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000ED4B 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000ED50 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000ED55 04                         byte_E26B:	dc.b 4
0000ED56 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000ED5B F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000ED60 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000ED65 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000ED6A 04                         byte_E280:	dc.b 4
0000ED6B E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000ED70 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000ED75 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000ED7A 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000ED80 00                         		even
0000ED80 00                         		even
0000ED80                            
0000ED80                            ; ===========================================================================
0000ED80                            ; ---------------------------------------------------------------------------
0000ED80                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000ED80                            ; ---------------------------------------------------------------------------
0000ED80                            
0000ED80                            Obj13:					; XREF: Obj_Index
0000ED80 7000                       		moveq	#0,d0
0000ED82 1028 0024                  		move.b	$24(a0),d0
0000ED86 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000ED8A 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000ED8E 6000 0000                  		bra.w	Obj14_ChkDel
0000ED92                            ; ===========================================================================
0000ED92 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000ED94 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000ED96                            ; ---------------------------------------------------------------------------
0000ED96                            ;
0000ED96                            ; Lava ball production rates
0000ED96                            ;
0000ED96 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000ED9C                            ; ===========================================================================
0000ED9C                            
0000ED9C                            Obj13_Main:				; XREF: Obj13_Index
0000ED9C 5428 0024                  		addq.b	#2,$24(a0)
0000EDA0 1028 0028                  		move.b	$28(a0),d0
0000EDA4 E848                       		lsr.w	#4,d0
0000EDA6 0240 000F                  		andi.w	#$F,d0
0000EDAA 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000EDB0 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000EDB6 0228 000F 0028             		andi.b	#$F,$28(a0)
0000EDBC                            
0000EDBC                            Obj13_MakeLava:				; XREF: Obj13_Index
0000EDBC 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000EDC0 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000EDC2 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000EDC8 6100 F590                  		bsr.w	ChkObjOnScreen
0000EDCC 6600                       		bne.s	locret_E302
0000EDCE 6100 F7A4                  		bsr.w	SingleObjLoad
0000EDD2 6600                       		bne.s	locret_E302
0000EDD4 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000EDD8 3368 0008 0008             		move.w	8(a0),8(a1)
0000EDDE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EDE4 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EDEA                            
0000EDEA                            locret_E302:
0000EDEA 4E75                       		rts	
0000EDEC                            ; ===========================================================================
0000EDEC                            ; ---------------------------------------------------------------------------
0000EDEC                            ; Object 14 - lava balls (MZ, SLZ)
0000EDEC                            ; ---------------------------------------------------------------------------
0000EDEC                            
0000EDEC                            Obj14:					; XREF: Obj_Index
0000EDEC 7000                       		moveq	#0,d0
0000EDEE 1028 0024                  		move.b	$24(a0),d0
0000EDF2 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000EDF6 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000EDFA 6000 F2E2                  		bra.w	DisplaySprite
0000EDFE                            ; ===========================================================================
0000EDFE 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000EE00 0000                       		dc.w Obj14_Action-Obj14_Index
0000EE02 0000                       		dc.w Obj14_Delete-Obj14_Index
0000EE04                            
0000EE04 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000EE0E 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000EE16                            ; ===========================================================================
0000EE16                            
0000EE16                            Obj14_Main:				; XREF: Obj14_Index
0000EE16 5428 0024                  		addq.b	#2,$24(a0)
0000EE1A 117C 0008 0016             		move.b	#8,$16(a0)
0000EE20 117C 0008 0017             		move.b	#8,$17(a0)
0000EE26 217C 0000 BE48 0004        		move.l	#Map_obj14,4(a0)
0000EE2E 317C 0345 0002             		move.w	#$345,2(a0)
0000EE34 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000EE3A 6600                       		bne.s	loc_E35A
0000EE3C 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000EE42                            
0000EE42                            loc_E35A:
0000EE42 117C 0004 0001             		move.b	#4,1(a0)
0000EE48 117C 0003 0018             		move.b	#3,$18(a0)
0000EE4E 117C 008B 0020             		move.b	#$8B,$20(a0)
0000EE54 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EE5A 4A28 0029                  		tst.b	$29(a0)
0000EE5E 6700                       		beq.s	Obj14_SetSpeed
0000EE60 5428 0018                  		addq.b	#2,$18(a0)
0000EE64                            
0000EE64                            Obj14_SetSpeed:
0000EE64 7000                       		moveq	#0,d0
0000EE66 1028 0028                  		move.b	$28(a0),d0
0000EE6A D040                       		add.w	d0,d0
0000EE6C 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000EE72 117C 0008 0019             		move.b	#8,$19(a0)
0000EE78 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000EE7E 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000EE80 117C 0010 0019             		move.b	#$10,$19(a0)
0000EE86 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000EE8C 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000EE92 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000EE98                            
0000EE98                            Obj14_PlaySnd:
0000EE98 303C 00AE                  		move.w	#$AE,d0
0000EE9C 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000EEA2                            
0000EEA2                            Obj14_Action:				; XREF: Obj14_Index
0000EEA2 7000                       		moveq	#0,d0
0000EEA4 1028 0028                  		move.b	$28(a0),d0
0000EEA8 D040                       		add.w	d0,d0
0000EEAA 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000EEAE 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000EEB2 6100 F204                  		bsr.w	SpeedToPos
0000EEB6 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000EEBC 6100 C332                  		bsr.w	AnimateSprite
0000EEC0                            
0000EEC0                            Obj14_ChkDel:				; XREF: Obj13
0000EEC0 3028 0008                  		move.w	8(a0),d0
0000EEC4 0240 FF80                  		andi.w	#$FF80,d0
0000EEC8 3238 F700                  		move.w	($FFFFF700).w,d1
0000EECC 0441 0080                  		subi.w	#$80,d1
0000EED0 0241 FF80                  		andi.w	#$FF80,d1
0000EED4 9041                       		sub.w	d1,d0
0000EED6 0C40 0280                  		cmpi.w	#$280,d0
0000EEDA 6200 F23E                  		bhi.w	DeleteObject
0000EEDE 4E75                       		rts	
0000EEE0                            ; ===========================================================================
0000EEE0 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EEE4 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EEE8 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000EEEC 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000EEF0 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000EEF2                            ; ===========================================================================
0000EEF2                            ; lavaball types 00-03 fly up and fall back down
0000EEF2                            
0000EEF2                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000EEF2 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000EEF8 3028 0030                  		move.w	$30(a0),d0
0000EEFC B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000EF00 6400                       		bcc.s	loc_E41E	; if not, branch
0000EF02 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000EF06                            
0000EF06                            loc_E41E:
0000EF06 08A8 0001 0022             		bclr	#1,$22(a0)
0000EF0C 4A68 0012                  		tst.w	$12(a0)
0000EF10 6A00                       		bpl.s	locret_E430
0000EF12 08E8 0001 0022             		bset	#1,$22(a0)
0000EF18                            
0000EF18                            locret_E430:
0000EF18 4E75                       		rts	
0000EF1A                            ; ===========================================================================
0000EF1A                            ; lavaball type	04 flies up until it hits the ceiling
0000EF1A                            
0000EF1A                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000EF1A 08E8 0001 0022             		bset	#1,$22(a0)
0000EF20 6100 0000                  		bsr.w	ObjHitCeiling
0000EF24 4A41                       		tst.w	d1
0000EF26 6A00                       		bpl.s	locret_E452
0000EF28 117C 0008 0028             		move.b	#8,$28(a0)
0000EF2E 117C 0001 001C             		move.b	#1,$1C(a0)
0000EF34 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000EF3A                            
0000EF3A                            locret_E452:
0000EF3A 4E75                       		rts	
0000EF3C                            ; ===========================================================================
0000EF3C                            ; lavaball type	05 falls down until it hits the	floor
0000EF3C                            
0000EF3C                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000EF3C 08A8 0001 0022             		bclr	#1,$22(a0)
0000EF42 6100 0000                  		bsr.w	ObjHitFloor
0000EF46 4A41                       		tst.w	d1
0000EF48 6A00                       		bpl.s	locret_E474
0000EF4A 117C 0008 0028             		move.b	#8,$28(a0)
0000EF50 117C 0001 001C             		move.b	#1,$1C(a0)
0000EF56 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000EF5C                            
0000EF5C                            locret_E474:
0000EF5C 4E75                       		rts	
0000EF5E                            ; ===========================================================================
0000EF5E                            ; lavaball types 06-07 move sideways
0000EF5E                            
0000EF5E                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000EF5E 08E8 0000 0022             		bset	#0,$22(a0)
0000EF64 76F8                       		moveq	#-8,d3
0000EF66 6100 0000                  		bsr.w	ObjHitWallLeft
0000EF6A 4A41                       		tst.w	d1
0000EF6C 6A00                       		bpl.s	locret_E498
0000EF6E 117C 0008 0028             		move.b	#8,$28(a0)
0000EF74 117C 0003 001C             		move.b	#3,$1C(a0)
0000EF7A 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EF80                            
0000EF80                            locret_E498:
0000EF80 4E75                       		rts	
0000EF82                            ; ===========================================================================
0000EF82                            
0000EF82                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000EF82 08A8 0000 0022             		bclr	#0,$22(a0)
0000EF88 7608                       		moveq	#8,d3
0000EF8A 6100 0000                  		bsr.w	ObjHitWallRight
0000EF8E 4A41                       		tst.w	d1
0000EF90 6A00                       		bpl.s	locret_E4BC
0000EF92 117C 0008 0028             		move.b	#8,$28(a0)
0000EF98 117C 0003 001C             		move.b	#3,$1C(a0)
0000EF9E 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EFA4                            
0000EFA4                            locret_E4BC:
0000EFA4 4E75                       		rts	
0000EFA6                            ; ===========================================================================
0000EFA6                            
0000EFA6                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000EFA6 4E75                       		rts	
0000EFA8                            ; ===========================================================================
0000EFA8                            
0000EFA8                            Obj14_Delete:				; XREF: Obj14_Index
0000EFA8 6000 F170                  		bra.w	DeleteObject
0000EFAC                            ; ===========================================================================
0000EFAC                            Ani_obj14:
0000EFAC                            	include "_anim\obj14.asm"
0000EFAC                            ; ---------------------------------------------------------------------------
0000EFAC                            ; Animation script - lava balls
0000EFAC                            ; ---------------------------------------------------------------------------
0000EFAC 0000                       		dc.w byte_E4CC-Ani_obj14
0000EFAE 0000                       		dc.w byte_E4D2-Ani_obj14
0000EFB0 0000                       		dc.w byte_E4D6-Ani_obj14
0000EFB2 0000                       		dc.w byte_E4DC-Ani_obj14
0000EFB4 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000EFBA 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000EFBE 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000EFC4 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000EFC8                            		even
0000EFC8                            		even
0000EFC8                            
0000EFC8                            ; ===========================================================================
0000EFC8                            ; ---------------------------------------------------------------------------
0000EFC8                            ; Object 6D - flame thrower (SBZ)
0000EFC8                            ; ---------------------------------------------------------------------------
0000EFC8                            
0000EFC8                            Obj6D:					; XREF: Obj_Index
0000EFC8 7000                       		moveq	#0,d0
0000EFCA 1028 0024                  		move.b	$24(a0),d0
0000EFCE 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000EFD2 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000EFD6                            ; ===========================================================================
0000EFD6 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000EFD8 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000EFDA                            ; ===========================================================================
0000EFDA                            
0000EFDA                            Obj6D_Main:				; XREF: Obj6D_Index
0000EFDA 5428 0024                  		addq.b	#2,$24(a0)
0000EFDE 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000EFE6 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000EFEC 0028 0004 0001             		ori.b	#4,1(a0)
0000EFF2 117C 0001 0018             		move.b	#1,$18(a0)
0000EFF8 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EFFE 117C 000C 0019             		move.b	#$C,$19(a0)
0000F004 1028 0028                  		move.b	$28(a0),d0
0000F008 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000F00C D040                       		add.w	d0,d0		; multiply by 2
0000F00E 3140 0030                  		move.w	d0,$30(a0)
0000F012 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000F016 1028 0028                  		move.b	$28(a0),d0
0000F01A 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000F01E EB48                       		lsl.w	#5,d0		; multiply by $20
0000F020 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000F024 117C 000A 0036             		move.b	#$A,$36(a0)
0000F02A 0828 0001 0022             		btst	#1,$22(a0)
0000F030 6700                       		beq.s	Obj6D_Action
0000F032 117C 0002 001C             		move.b	#2,$1C(a0)
0000F038 117C 0015 0036             		move.b	#$15,$36(a0)
0000F03E                            
0000F03E                            Obj6D_Action:				; XREF: Obj6D_Index
0000F03E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000F042 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000F044 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000F04A 0868 0000 001C             		bchg	#0,$1C(a0)
0000F050 6700                       		beq.s	loc_E57A
0000F052 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000F058 303C 00B3                  		move.w	#$B3,d0
0000F05C 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play flame sound
0000F062                            
0000F062                            loc_E57A:
0000F062 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000F068 6100 C186                  		bsr.w	AnimateSprite
0000F06C 117C 0000 0020             		move.b	#0,$20(a0)
0000F072 1028 0036                  		move.b	$36(a0),d0
0000F076 B028 001A                  		cmp.b	$1A(a0),d0
0000F07A 6600                       		bne.s	Obj6D_ChkDel
0000F07C 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000F082                            
0000F082                            Obj6D_ChkDel:
0000F082 3028 0008                  		move.w	8(a0),d0
0000F086 0240 FF80                  		andi.w	#$FF80,d0
0000F08A 3238 F700                  		move.w	($FFFFF700).w,d1
0000F08E 0441 0080                  		subi.w	#$80,d1
0000F092 0241 FF80                  		andi.w	#$FF80,d1
0000F096 9041                       		sub.w	d1,d0
0000F098 0C40 0280                  		cmpi.w	#$280,d0
0000F09C 6200 F07C                  		bhi.w	DeleteObject
0000F0A0 6000 F03C                  		bra.w	DisplaySprite
0000F0A4                            ; ===========================================================================
0000F0A4                            Ani_obj6D:
0000F0A4                            	include "_anim\obj6D.asm"
0000F0A4                            ; ---------------------------------------------------------------------------
0000F0A4                            ; Animation script - flamethrower (SBZ)
0000F0A4                            ; ---------------------------------------------------------------------------
0000F0A4 0000                       		dc.w byte_E5C4-Ani_obj6D
0000F0A6 0000                       		dc.w byte_E5D2-Ani_obj6D
0000F0A8 0000                       		dc.w byte_E5DC-Ani_obj6D
0000F0AA 0000                       		dc.w byte_E5EA-Ani_obj6D
0000F0AC 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000F0BA 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000F0C4 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000F0D2 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000F0DC                            		even
0000F0DC                            		even
0000F0DC                            
0000F0DC                            ; ---------------------------------------------------------------------------
0000F0DC                            ; Sprite mappings - flame thrower (SBZ)
0000F0DC                            ; ---------------------------------------------------------------------------
0000F0DC                            Map_obj6D:
0000F0DC                            	include "_maps\obj6D.asm"
0000F0DC                            ; ---------------------------------------------------------------------------
0000F0DC                            ; Sprite mappings - flame thrower (SBZ)
0000F0DC                            ; ---------------------------------------------------------------------------
0000F0DC 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000F0E0 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000F0E4 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000F0E8 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000F0EC 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000F0F0 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000F0F4 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000F0F8 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000F0FC 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000F100 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000F104 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000F108 01                         byte_E620:	dc.b 1
0000F109 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F10E 02                         byte_E626:	dc.b 2
0000F10F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F114 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F119 02                         byte_E631:	dc.b 2
0000F11A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F11F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F124 03                         byte_E63C:	dc.b 3
0000F125 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F12A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F12F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F134 03                         byte_E64C:	dc.b 3
0000F135 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F13A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F13F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F144 04                         byte_E65C:	dc.b 4
0000F145 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F14A 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F14F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F154 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F159 04                         byte_E671:	dc.b 4
0000F15A 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F15F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F164 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F169 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F16E 05                         byte_E686:	dc.b 5
0000F16F F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F174 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F179 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F17E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F183 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F188 05                         byte_E6A0:	dc.b 5
0000F189 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F18E 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F193 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F198 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F19D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F1A2 06                         byte_E6BA:	dc.b 6
0000F1A3 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F1A8 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F1AD 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F1B2 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F1B7 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F1BC 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F1C1 06                         byte_E6D9:	dc.b 6
0000F1C2 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F1C7 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F1CC 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F1D1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F1D6 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F1DB 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F1E0 01                         byte_E6F8:	dc.b 1
0000F1E1 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F1E6 02                         byte_E6FE:	dc.b 2
0000F1E7 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F1EC 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F1F1 02                         byte_E709:	dc.b 2
0000F1F2 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F1F7 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F1FC 03                         byte_E714:	dc.b 3
0000F1FD 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F202 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F207 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F20C 03                         byte_E724:	dc.b 3
0000F20D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F212 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F217 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F21C 04                         byte_E734:	dc.b 4
0000F21D 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F222 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F227 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F22C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F231 04                         byte_E749:	dc.b 4
0000F232 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F237 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F23C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F241 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F246 05                         byte_E75E:	dc.b 5
0000F247 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F24C 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F251 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F256 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F25B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F260 05                         byte_E778:	dc.b 5
0000F261 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F266 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F26B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F270 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F275 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F27A 06                         byte_E792:	dc.b 6
0000F27B E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F280 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F285 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F28A 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F28F 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F294 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F299 06                         byte_E7B1:	dc.b 6
0000F29A E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F29F F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F2A4 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F2A9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F2AE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F2B3 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F2B8                            		even
0000F2B8                            		even
0000F2B8                            
0000F2B8                            ; ===========================================================================
0000F2B8                            ; ---------------------------------------------------------------------------
0000F2B8                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000F2B8                            ; ---------------------------------------------------------------------------
0000F2B8                            
0000F2B8                            Obj46:					; XREF: Obj_Index
0000F2B8 7000                       		moveq	#0,d0
0000F2BA 1028 0024                  		move.b	$24(a0),d0
0000F2BE 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000F2C2 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000F2C6                            ; ===========================================================================
0000F2C6 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000F2C8 0000                       		dc.w Obj46_Action-Obj46_Index
0000F2CA                            ; ===========================================================================
0000F2CA                            
0000F2CA                            Obj46_Main:				; XREF: Obj46_Index
0000F2CA 5428 0024                  		addq.b	#2,$24(a0)
0000F2CE 117C 000F 0016             		move.b	#$F,$16(a0)
0000F2D4 117C 000F 0017             		move.b	#$F,$17(a0)
0000F2DA 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000F2E2 317C 4000 0002             		move.w	#$4000,2(a0)
0000F2E8 117C 0004 0001             		move.b	#4,1(a0)
0000F2EE 117C 0003 0018             		move.b	#3,$18(a0)
0000F2F4 117C 0010 0019             		move.b	#$10,$19(a0)
0000F2FA 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F300 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000F306                            
0000F306                            Obj46_Action:				; XREF: Obj46_Index
0000F306 4A28 0001                  		tst.b	1(a0)
0000F30A 6A00                       		bpl.s	Obj46_ChkDel
0000F30C 7000                       		moveq	#0,d0
0000F30E 1028 0028                  		move.b	$28(a0),d0	; get object type
0000F312 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000F316 D040                       		add.w	d0,d0
0000F318 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000F31C 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000F320 323C 001B                  		move.w	#$1B,d1
0000F324 343C 0010                  		move.w	#$10,d2
0000F328 363C 0011                  		move.w	#$11,d3
0000F32C 3828 0008                  		move.w	8(a0),d4
0000F330 6100 0000                  		bsr.w	SolidObject
0000F334                            
0000F334                            Obj46_ChkDel:
0000F334 6100 EDA8                  		bsr.w	DisplaySprite
0000F338 3028 0008                  		move.w	8(a0),d0
0000F33C 0240 FF80                  		andi.w	#$FF80,d0
0000F340 3238 F700                  		move.w	($FFFFF700).w,d1
0000F344 0441 0080                  		subi.w	#$80,d1
0000F348 0241 FF80                  		andi.w	#$FF80,d1
0000F34C 9041                       		sub.w	d1,d0
0000F34E 0C40 0280                  		cmpi.w	#$280,d0
0000F352 6200 EDC6                  		bhi.w	DeleteObject
0000F356 4E75                       		rts	
0000F358                            ; ===========================================================================
0000F358 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000F35A 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000F35C 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000F35E 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000F360 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000F362                            ; ===========================================================================
0000F362                            
0000F362                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000F362 4E75                       		rts	
0000F364                            ; ===========================================================================
0000F364                            
0000F364                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000F364 3038 D008                  		move.w	($FFFFD008).w,d0
0000F368 9068 0008                  		sub.w	8(a0),d0
0000F36C 6400                       		bcc.s	loc_E888
0000F36E 4440                       		neg.w	d0
0000F370                            
0000F370                            loc_E888:
0000F370 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000F374 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000F376 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000F37C                            
0000F37C                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000F37C 7000                       		moveq	#0,d0
0000F37E 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000F382 0828 0003 0028             		btst	#3,$28(a0)
0000F388 6700                       		beq.s	loc_E8A8
0000F38A 4440                       		neg.w	d0
0000F38C 0640 0010                  		addi.w	#$10,d0
0000F390                            
0000F390                            loc_E8A8:
0000F390 3228 0030                  		move.w	$30(a0),d1
0000F394 9240                       		sub.w	d0,d1
0000F396 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000F39A 4E75                       		rts	
0000F39C                            ; ===========================================================================
0000F39C                            
0000F39C                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000F39C 6100 ED1A                  		bsr.w	SpeedToPos
0000F3A0 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000F3A6 6100 0000                  		bsr.w	ObjHitFloor
0000F3AA 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000F3AC 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000F3B0 D368 000C                  		add.w	d1,$C(a0)
0000F3B4 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000F3B8 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F3BE 117C 0004 0028             		move.b	#4,$28(a0)
0000F3C4 3011                       		move.w	(a1),d0
0000F3C6 0240 03FF                  		andi.w	#$3FF,d0
0000F3CA 0C40 02E8                  		cmpi.w	#$2E8,d0
0000F3CE 6400                       		bcc.s	locret_E8EE
0000F3D0 117C 0000 0028             		move.b	#0,$28(a0)
0000F3D6                            
0000F3D6                            locret_E8EE:
0000F3D6 4E75                       		rts	
0000F3D8                            ; ===========================================================================
0000F3D8                            
0000F3D8                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000F3D8 7000                       		moveq	#0,d0
0000F3DA 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000F3DE E648                       		lsr.w	#3,d0
0000F3E0 3228 0030                  		move.w	$30(a0),d1
0000F3E4 9240                       		sub.w	d0,d1
0000F3E6 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000F3EA 4E75                       		rts	
0000F3EC                            ; ===========================================================================
0000F3EC                            ; ---------------------------------------------------------------------------
0000F3EC                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F3EC                            ; ---------------------------------------------------------------------------
0000F3EC                            Map_obj46:
0000F3EC                            	include "_maps\obj46.asm"
0000F3EC                            ; ---------------------------------------------------------------------------
0000F3EC                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F3EC                            ; ---------------------------------------------------------------------------
0000F3EC 0000                       		dc.w byte_E906-Map_obj46
0000F3EE 01                         byte_E906:	dc.b 1
0000F3EF F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000F3F4                            		even
0000F3F4                            		even
0000F3F4                            
0000F3F4                            ; ===========================================================================
0000F3F4                            ; ---------------------------------------------------------------------------
0000F3F4                            ; Object 12 - lamp (SYZ)
0000F3F4                            ; ---------------------------------------------------------------------------
0000F3F4                            
0000F3F4                            Obj12:					; XREF: Obj_Index
0000F3F4 7000                       		moveq	#0,d0
0000F3F6 1028 0024                  		move.b	$24(a0),d0
0000F3FA 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000F3FE 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000F402                            ; ===========================================================================
0000F402 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000F404 0000                       		dc.w Obj12_Animate-Obj12_Index
0000F406                            ; ===========================================================================
0000F406                            
0000F406                            Obj12_Main:				; XREF: Obj12_Index
0000F406 5428 0024                  		addq.b	#2,$24(a0)
0000F40A 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000F412 317C 0000 0002             		move.w	#0,2(a0)
0000F418 117C 0004 0001             		move.b	#4,1(a0)
0000F41E 117C 0010 0019             		move.b	#$10,$19(a0)
0000F424 117C 0006 0018             		move.b	#6,$18(a0)
0000F42A                            
0000F42A                            Obj12_Animate:				; XREF: Obj12_Index
0000F42A 5328 001E                  		subq.b	#1,$1E(a0)
0000F42E 6A00                       		bpl.s	Obj12_ChkDel
0000F430 117C 0007 001E             		move.b	#7,$1E(a0)
0000F436 5228 001A                  		addq.b	#1,$1A(a0)
0000F43A 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000F440 6500                       		bcs.s	Obj12_ChkDel
0000F442 117C 0000 001A             		move.b	#0,$1A(a0)
0000F448                            
0000F448                            Obj12_ChkDel:
0000F448 3028 0008                  		move.w	8(a0),d0
0000F44C 0240 FF80                  		andi.w	#$FF80,d0
0000F450 3238 F700                  		move.w	($FFFFF700).w,d1
0000F454 0441 0080                  		subi.w	#$80,d1
0000F458 0241 FF80                  		andi.w	#$FF80,d1
0000F45C 9041                       		sub.w	d1,d0
0000F45E 0C40 0280                  		cmpi.w	#$280,d0
0000F462 6200 ECB6                  		bhi.w	DeleteObject
0000F466 6000 EC76                  		bra.w	DisplaySprite
0000F46A                            ; ===========================================================================
0000F46A                            ; ---------------------------------------------------------------------------
0000F46A                            ; Sprite mappings - lamp (SYZ)
0000F46A                            ; ---------------------------------------------------------------------------
0000F46A                            Map_obj12:
0000F46A                            	include "_maps\obj12.asm"
0000F46A                            ; ---------------------------------------------------------------------------
0000F46A                            ; Sprite mappings - lamp (SYZ)
0000F46A                            ; ---------------------------------------------------------------------------
0000F46A 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000F46E 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000F472 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000F476 02                         byte_E98E:	dc.b 2
0000F477 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000F47C 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000F481 02                         byte_E999:	dc.b 2
0000F482 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000F487 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000F48C 02                         byte_E9A4:	dc.b 2
0000F48D F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000F492 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000F497 02                         byte_E9AF:	dc.b 2
0000F498 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000F49D 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000F4A2 02                         byte_E9BA:	dc.b 2
0000F4A3 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000F4A8 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000F4AD 02                         byte_E9C5:	dc.b 2
0000F4AE F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000F4B3 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000F4B8                            		even
0000F4B8                            		even
0000F4B8                            
0000F4B8                            ; ===========================================================================
0000F4B8                            ; ---------------------------------------------------------------------------
0000F4B8                            ; Object 47 - pinball bumper (SYZ)
0000F4B8                            ; ---------------------------------------------------------------------------
0000F4B8                            
0000F4B8                            Obj47:					; XREF: Obj_Index
0000F4B8 7000                       		moveq	#0,d0
0000F4BA 1028 0024                  		move.b	$24(a0),d0
0000F4BE 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000F4C2 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000F4C6                            ; ===========================================================================
0000F4C6 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000F4C8 0000                       		dc.w Obj47_Hit-Obj47_Index
0000F4CA                            ; ===========================================================================
0000F4CA                            
0000F4CA                            Obj47_Main:				; XREF: Obj47_Index
0000F4CA 5428 0024                  		addq.b	#2,$24(a0)
0000F4CE 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000F4D6 317C 0380 0002             		move.w	#$380,2(a0)
0000F4DC 117C 0004 0001             		move.b	#4,1(a0)
0000F4E2 117C 0010 0019             		move.b	#$10,$19(a0)
0000F4E8 117C 0001 0018             		move.b	#1,$18(a0)
0000F4EE 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000F4F4                            
0000F4F4                            Obj47_Hit:				; XREF: Obj47_Index
0000F4F4 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000F4F8 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000F4FC 4228 0021                  		clr.b	$21(a0)
0000F500 43F8 D000                  		lea	($FFFFD000).w,a1
0000F504 3228 0008                  		move.w	8(a0),d1
0000F508 3428 000C                  		move.w	$C(a0),d2
0000F50C 9269 0008                  		sub.w	8(a1),d1
0000F510 9469 000C                  		sub.w	$C(a1),d2
0000F514 4EB9 0000 36A2             		jsr	(CalcAngle).l
0000F51A 4EB9 0000 33D4             		jsr	(CalcSine).l
0000F520 C3FC F900                  		muls.w	#-$700,d1
0000F524 E081                       		asr.l	#8,d1
0000F526 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000F52A C1FC F900                  		muls.w	#-$700,d0
0000F52E E080                       		asr.l	#8,d0
0000F530 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000F534 08E9 0001 0022             		bset	#1,$22(a1)
0000F53A 08A9 0004 0022             		bclr	#4,$22(a1)
0000F540 08A9 0005 0022             		bclr	#5,$22(a1)
0000F546 4229 003C                  		clr.b	$3C(a1)
0000F54A 117C 0001 001C             		move.b	#1,$1C(a0)
0000F550 303C 00B4                  		move.w	#$B4,d0
0000F554 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F55A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F55E 7000                       		moveq	#0,d0
0000F560 1028 0023                  		move.b	$23(a0),d0
0000F564 6700                       		beq.s	Obj47_Score
0000F566 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F56C 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F56E 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F572                            
0000F572                            Obj47_Score:
0000F572 7001                       		moveq	#1,d0
0000F574 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F57A 6100 EFF8                  		bsr.w	SingleObjLoad
0000F57E 6600                       		bne.s	Obj47_Display
0000F580 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F584 3368 0008 0008             		move.w	8(a0),8(a1)
0000F58A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F590 137C 0004 001A             		move.b	#4,$1A(a1)
0000F596                            
0000F596                            Obj47_Display:
0000F596 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F59C 6100 BC52                  		bsr.w	AnimateSprite
0000F5A0 3028 0008                  		move.w	8(a0),d0
0000F5A4 0240 FF80                  		andi.w	#$FF80,d0
0000F5A8 3238 F700                  		move.w	($FFFFF700).w,d1
0000F5AC 0441 0080                  		subi.w	#$80,d1
0000F5B0 0241 FF80                  		andi.w	#$FF80,d1
0000F5B4 9041                       		sub.w	d1,d0
0000F5B6 0C40 0280                  		cmpi.w	#$280,d0
0000F5BA 6200                       		bhi.s	Obj47_ChkHit
0000F5BC 6000 EB20                  		bra.w	DisplaySprite
0000F5C0                            ; ===========================================================================
0000F5C0                            
0000F5C0                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F5C0 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F5C4 7000                       		moveq	#0,d0
0000F5C6 1028 0023                  		move.b	$23(a0),d0
0000F5CA 6700                       		beq.s	Obj47_Delete
0000F5CC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F5D2                            
0000F5D2                            Obj47_Delete:
0000F5D2 6000 EB46                  		bra.w	DeleteObject
0000F5D6                            ; ===========================================================================
0000F5D6                            Ani_obj47:
0000F5D6                            	include "_anim\obj47.asm"
0000F5D6                            ; ---------------------------------------------------------------------------
0000F5D6                            ; Animation script - flamethrower (SBZ)
0000F5D6                            ; ---------------------------------------------------------------------------
0000F5D6 0000                       		dc.w byte_EAF4-Ani_obj47
0000F5D8 0000                       		dc.w byte_EAF8-Ani_obj47
0000F5DA 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F5DE 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F5E6                            		even
0000F5E6                            		even
0000F5E6                            
0000F5E6                            ; ---------------------------------------------------------------------------
0000F5E6                            ; Sprite mappings - pinball bumper (SYZ)
0000F5E6                            ; ---------------------------------------------------------------------------
0000F5E6                            Map_obj47:
0000F5E6                            	include "_maps\obj47.asm"
0000F5E6                            ; ---------------------------------------------------------------------------
0000F5E6                            ; Sprite mappings - pinball bumper (SYZ)
0000F5E6                            ; ---------------------------------------------------------------------------
0000F5E6 0000                       		dc.w byte_EB06-Map_obj47
0000F5E8 0000                       		dc.w byte_EB11-Map_obj47
0000F5EA 0000                       		dc.w byte_EB1C-Map_obj47
0000F5EC 02                         byte_EB06:	dc.b 2
0000F5ED F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F5F2 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F5F7 02                         byte_EB11:	dc.b 2
0000F5F8 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F5FD F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F602 02                         byte_EB1C:	dc.b 2
0000F603 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F608 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F60E 00                         		even
0000F60E 00                         		even
0000F60E                            
0000F60E                            ; ===========================================================================
0000F60E                            ; ---------------------------------------------------------------------------
0000F60E                            ; Object 0D - signpost at the end of a level
0000F60E                            ; ---------------------------------------------------------------------------
0000F60E                            
0000F60E                            Obj0D:					; XREF: Obj_Index
0000F60E 7000                       		moveq	#0,d0
0000F610 1028 0024                  		move.b	$24(a0),d0
0000F614 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F618 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F61C 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F622 6100 BBCC                  		bsr.w	AnimateSprite
0000F626 6100 EAB6                  		bsr.w	DisplaySprite
0000F62A 3028 0008                  		move.w	8(a0),d0
0000F62E 0240 FF80                  		andi.w	#$FF80,d0
0000F632 3238 F700                  		move.w	($FFFFF700).w,d1
0000F636 0441 0080                  		subi.w	#$80,d1
0000F63A 0241 FF80                  		andi.w	#$FF80,d1
0000F63E 9041                       		sub.w	d1,d0
0000F640 0C40 0280                  		cmpi.w	#$280,d0
0000F644 6200 EAD4                  		bhi.w	DeleteObject
0000F648 4E75                       		rts	
0000F64A                            ; ===========================================================================
0000F64A 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F64C 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F64E 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F650 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F652 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F654                            ; ===========================================================================
0000F654                            
0000F654                            Obj0D_Main:				; XREF: Obj0D_Index
0000F654 5428 0024                  		addq.b	#2,$24(a0)
0000F658 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F660 317C 0680 0002             		move.w	#$680,2(a0)
0000F666 117C 0004 0001             		move.b	#4,1(a0)
0000F66C 117C 0018 0019             		move.b	#$18,$19(a0)
0000F672 117C 0004 0018             		move.b	#4,$18(a0)
0000F678                            
0000F678                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F678 3038 D008                  		move.w	($FFFFD008).w,d0
0000F67C 9068 0008                  		sub.w	8(a0),d0
0000F680 6500                       		bcs.s	locret_EBBA
0000F682 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F686 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F688 303C 00CF                  		move.w	#$CF,d0
0000F68C 4EB9 0000 1470             		jsr	(PlaySound).l	; play signpost	sound
0000F692 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F696 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F69C 5428 0024                  		addq.b	#2,$24(a0)
0000F6A0                            
0000F6A0                            locret_EBBA:
0000F6A0 4E75                       		rts	
0000F6A2                            ; ===========================================================================
0000F6A2                            
0000F6A2                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F6A2 4238 FE19                  		clr.b (Super_Sonic_Flag).w ; Revert Sonic to Normal
0000F6A6 31FC 0600 F760             		move.w #$600,(Sonic_top_speed).w ; Revert speeds
0000F6AC 31FC 000C F762             		move.w #$C,(Sonic_acceleration).w ; ^^^
0000F6B2 31FC 0080 F764             		move.w #$80,(Sonic_deceleration).w ; ^^^
0000F6B8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F6BC 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F6BE 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F6C4 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F6C8 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F6CE 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F6D0 5428 0024                  		addq.b	#2,$24(a0)
0000F6D4                            
0000F6D4                            Obj0D_Sparkle:
0000F6D4 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F6D8 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F6DA 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F6E0 7000                       		moveq	#0,d0
0000F6E2 1028 0034                  		move.b	$34(a0),d0
0000F6E6 5428 0034                  		addq.b	#2,$34(a0)
0000F6EA 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F6F0 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F6F4 6100 EE7E                  		bsr.w	SingleObjLoad
0000F6F8 6600                       		bne.s	locret_EC42
0000F6FA 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F6FE 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F704 101A                       		move.b	(a2)+,d0
0000F706 4880                       		ext.w	d0
0000F708 D068 0008                  		add.w	8(a0),d0
0000F70C 3340 0008                  		move.w	d0,8(a1)
0000F710 101A                       		move.b	(a2)+,d0
0000F712 4880                       		ext.w	d0
0000F714 D068 000C                  		add.w	$C(a0),d0
0000F718 3340 000C                  		move.w	d0,$C(a1)
0000F71C 237C 0000 AA32 0004        		move.l	#Map_obj25,4(a1)
0000F724 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F72A 137C 0004 0001             		move.b	#4,1(a1)
0000F730 137C 0002 0018             		move.b	#2,$18(a1)
0000F736 137C 0008 0019             		move.b	#8,$19(a1)
0000F73C                            
0000F73C                            locret_EC42:
0000F73C 4E75                       		rts	
0000F73E                            ; ===========================================================================
0000F73E E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F740 0808                       		dc.b	8,   8
0000F742 F000                       		dc.b -$10,   0
0000F744 18F8                       		dc.b  $18,  -8
0000F746 00F8                       		dc.b	0,  -8
0000F748 1000                       		dc.b  $10,   0
0000F74A E808                       		dc.b -$18,   8
0000F74C 1810                       		dc.b  $18, $10
0000F74E                            ; ===========================================================================
0000F74E                            
0000F74E                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F74E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F752 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F756 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F75C 6600                       		bne.s	loc_EC70
0000F75E 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F764 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F76A                            
0000F76A                            loc_EC70:
0000F76A 4A38 D000                  		tst.b	($FFFFD000).w
0000F76E 6700                       		beq.s	loc_EC86
0000F770 3038 D008                  		move.w	($FFFFD008).w,d0
0000F774 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F778 0641 0128                  		addi.w	#$128,d1
0000F77C B041                       		cmp.w	d1,d0
0000F77E 6500                       		bcs.s	locret_ECEE
0000F780                            
0000F780                            loc_EC86:
0000F780 5428 0024                  		addq.b	#2,$24(a0)
0000F784                            
0000F784                            ; ---------------------------------------------------------------------------
0000F784                            ; Subroutine to	set up bonuses at the end of an	act
0000F784                            ; ---------------------------------------------------------------------------
0000F784                            
0000F784                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F784                            
0000F784                            
0000F784                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F784 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F788 6600                       		bne.s	locret_ECEE
0000F78A 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F790 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F794 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F798 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F79E 7010                       		moveq	#$10,d0
0000F7A0 4EB9 0000 171C             		jsr	(LoadPLC2).l	; load title card patterns
0000F7A6 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F7AC 7000                       		moveq	#0,d0
0000F7AE 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F7B2 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F7B6 7200                       		moveq	#0,d1
0000F7B8 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F7BC D041                       		add.w	d1,d0		; add up your time
0000F7BE 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F7C2 7214                       		moveq	#$14,d1
0000F7C4 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F7C6 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F7C8 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F7CA                            
0000F7CA                            loc_ECD0:
0000F7CA D040                       		add.w	d0,d0
0000F7CC 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F7D2 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F7D6 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F7DA 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F7DE 303C 008E                  		move.w	#$8E,d0
0000F7E2 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F7E8                            
0000F7E8                            locret_ECEE:
0000F7E8 4E75                       		rts	
0000F7EA                            ; End of function GotThroughAct
0000F7EA                            
0000F7EA                            ; ===========================================================================
0000F7EA 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F7FE 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F814                            ; ===========================================================================
0000F814                            
0000F814                            locret_ED1A:				; XREF: Obj0D_Index
0000F814 4E75                       		rts	
0000F816                            ; ===========================================================================
0000F816                            Ani_obj0D:
0000F816                            	include "_anim\obj0D.asm"
0000F816                            ; ---------------------------------------------------------------------------
0000F816                            ; Animation script - signpost
0000F816                            ; ---------------------------------------------------------------------------
0000F816 0000                       		dc.w byte_ED24-Ani_obj0D
0000F818 0000                       		dc.w byte_ED28-Ani_obj0D
0000F81A 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F81C 0000                       		dc.w byte_ED34-Ani_obj0D
0000F81E 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F822 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F828 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F82E 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F832 00                         		even
0000F832 00                         		even
0000F832                            
0000F832                            ; ---------------------------------------------------------------------------
0000F832                            ; Sprite mappings - signpost
0000F832                            ; ---------------------------------------------------------------------------
0000F832                            Map_obj0D:
0000F832                            	include "_maps\obj0D.asm"
0000F832                            ; ---------------------------------------------------------------------------
0000F832                            ; Sprite mappings - signpost
0000F832                            ; ---------------------------------------------------------------------------
0000F832 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F836 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F83A 0000                       		dc.w byte_ED73-Map_obj0D
0000F83C 03                         byte_ED42:	dc.b 3
0000F83D F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F842 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F847 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F84C 02                         byte_ED52:	dc.b 2
0000F84D F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F852 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F857 02                         byte_ED5D:	dc.b 2
0000F858 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F85D 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F862 02                         byte_ED68:	dc.b 2
0000F863 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F868 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F86D 03                         byte_ED73:	dc.b 3
0000F86E F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F873 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F878 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F87E 00                         		even
0000F87E 00                         		even
0000F87E                            
0000F87E                            ; ===========================================================================
0000F87E                            ; ---------------------------------------------------------------------------
0000F87E                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F87E                            ; ---------------------------------------------------------------------------
0000F87E                            
0000F87E                            Obj4C:					; XREF: Obj_Index
0000F87E 7000                       		moveq	#0,d0
0000F880 1028 0024                  		move.b	$24(a0),d0
0000F884 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F888 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F88C 6000 0000                  		bra.w	Obj4D_ChkDel
0000F890                            ; ===========================================================================
0000F890 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F892 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F894 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F896 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F898 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F89A 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F89C                            ; ===========================================================================
0000F89C                            
0000F89C                            Obj4C_Main:				; XREF: Obj4C_Index
0000F89C 5428 0024                  		addq.b	#2,$24(a0)
0000F8A0 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F8A8 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F8AE 117C 0004 0001             		move.b	#4,1(a0)
0000F8B4 117C 0001 0018             		move.b	#1,$18(a0)
0000F8BA 117C 0038 0019             		move.b	#$38,$19(a0)
0000F8C0 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F8C6                            
0000F8C6                            loc_EDCC:				; XREF: Obj4C_Index
0000F8C6 5368 0032                  		subq.w	#1,$32(a0)
0000F8CA 6A00                       		bpl.s	locret_EDF0
0000F8CC 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F8D2 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F8D6 3228 000C                  		move.w	$C(a0),d1
0000F8DA B041                       		cmp.w	d1,d0
0000F8DC 6400                       		bcc.s	locret_EDF0
0000F8DE 0441 0170                  		subi.w	#$170,d1
0000F8E2 B041                       		cmp.w	d1,d0
0000F8E4 6500                       		bcs.s	locret_EDF0
0000F8E6 5428 0024                  		addq.b	#2,$24(a0)
0000F8EA                            
0000F8EA                            locret_EDF0:
0000F8EA 4E75                       		rts	
0000F8EC                            ; ===========================================================================
0000F8EC                            
0000F8EC                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F8EC 5428 0024                  		addq.b	#2,$24(a0)
0000F8F0 6100 EC98                  		bsr.w	SingleObjLoad2
0000F8F4 6600                       		bne.s	loc_EE18
0000F8F6 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F8FA 3368 0008 0008             		move.w	8(a0),8(a1)
0000F900 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F906 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F90C 2348 003C                  		move.l	a0,$3C(a1)
0000F910                            
0000F910                            loc_EE18:
0000F910 117C 0001 001C             		move.b	#1,$1C(a0)
0000F916 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F91A 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F91C 117C 0004 001C             		move.b	#4,$1C(a0)
0000F922 6000                       		bra.s	Obj4C_Display
0000F924                            ; ===========================================================================
0000F924                            
0000F924                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F924 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F928 08E9 0001 0022             		bset	#1,$22(a1)
0000F92E 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F934 6000                       		bra.s	Obj4C_Display
0000F936                            ; ===========================================================================
0000F936                            
0000F936                            loc_EE3E:				; XREF: Obj4C_Index
0000F936 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F93A 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F93C 5428 0024                  		addq.b	#2,$24(a0)
0000F940 4E75                       		rts	
0000F942                            ; ===========================================================================
0000F942                            
0000F942                            Obj4C_Display:				; XREF: Obj4C_Index
0000F942 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F948 6100 B8A6                  		bsr.w	AnimateSprite
0000F94C 6100 E790                  		bsr.w	DisplaySprite
0000F950 4E75                       		rts	
0000F952                            ; ===========================================================================
0000F952                            
0000F952                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F952 117C 0000 001C             		move.b	#0,$1C(a0)
0000F958 117C 0002 0024             		move.b	#2,$24(a0)
0000F95E 4A28 0028                  		tst.b	$28(a0)
0000F962 6700 E7B6                  		beq.w	DeleteObject
0000F966 4E75                       		rts	
0000F968                            ; ===========================================================================
0000F968                            ; ---------------------------------------------------------------------------
0000F968                            ; Object 4D - lava geyser / lavafall (MZ)
0000F968                            ; ---------------------------------------------------------------------------
0000F968                            
0000F968                            Obj4D:					; XREF: Obj_Index
0000F968 7000                       		moveq	#0,d0
0000F96A 1028 0024                  		move.b	$24(a0),d0
0000F96E 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F972 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F976 6000 E766                  		bra.w	DisplaySprite
0000F97A                            ; ===========================================================================
0000F97A 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F97C 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F97E 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F980 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F982                            
0000F982 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F986                            ; ===========================================================================
0000F986                            
0000F986                            Obj4D_Main:				; XREF: Obj4D_Index
0000F986 5428 0024                  		addq.b	#2,$24(a0)
0000F98A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F990 4A28 0028                  		tst.b	$28(a0)
0000F994 6700                       		beq.s	loc_EEA4
0000F996 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F99C                            
0000F99C                            loc_EEA4:
0000F99C 7000                       		moveq	#0,d0
0000F99E 1028 0028                  		move.b	$28(a0),d0
0000F9A2 D040                       		add.w	d0,d0
0000F9A4 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F9AA 2248                       		movea.l	a0,a1
0000F9AC 7201                       		moveq	#1,d1
0000F9AE 6100                       		bsr.s	Obj4D_MakeLava
0000F9B0 6000                       		bra.s	loc_EF10
0000F9B2                            ; ===========================================================================
0000F9B2                            
0000F9B2                            Obj4D_Loop:
0000F9B2 6100 EBD6                  		bsr.w	SingleObjLoad2
0000F9B6 6600                       		bne.s	loc_EF0A
0000F9B8                            
0000F9B8                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F9B8 12BC 004D                  		move.b	#$4D,0(a1)
0000F9BC 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F9C4 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F9CA 137C 0004 0001             		move.b	#4,1(a1)
0000F9D0 137C 0020 0019             		move.b	#$20,$19(a1)
0000F9D6 3368 0008 0008             		move.w	8(a0),8(a1)
0000F9DC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F9E2 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F9E8 137C 0001 0018             		move.b	#1,$18(a1)
0000F9EE 137C 0005 001C             		move.b	#5,$1C(a1)
0000F9F4 4A28 0028                  		tst.b	$28(a0)
0000F9F8 6700                       		beq.s	loc_EF0A
0000F9FA 137C 0002 001C             		move.b	#2,$1C(a1)
0000FA00                            
0000FA00                            loc_EF0A:
0000FA00 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000FA04 4E75                       		rts	
0000FA06                            ; ===========================================================================
0000FA06                            
0000FA06                            loc_EF10:				; XREF: Obj4D_Main
0000FA06 0669 0060 000C             		addi.w	#$60,$C(a1)
0000FA0C 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000FA12 0669 0060 0030             		addi.w	#$60,$30(a1)
0000FA18 137C 0093 0020             		move.b	#$93,$20(a1)
0000FA1E 137C 0080 0016             		move.b	#$80,$16(a1)
0000FA24 08E9 0004 0001             		bset	#4,1(a1)
0000FA2A 5829 0024                  		addq.b	#4,$24(a1)
0000FA2E 2348 003C                  		move.l	a0,$3C(a1)
0000FA32 4A28 0028                  		tst.b	$28(a0)
0000FA36 6700                       		beq.s	Obj4D_PlaySnd
0000FA38 7200                       		moveq	#0,d1
0000FA3A 6100 FF76                  		bsr.w	Obj4D_Loop
0000FA3E 5429 0024                  		addq.b	#2,$24(a1)
0000FA42 08E9 0004 0002             		bset	#4,2(a1)
0000FA48 0669 0100 000C             		addi.w	#$100,$C(a1)
0000FA4E 137C 0000 0018             		move.b	#0,$18(a1)
0000FA54 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000FA5A 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000FA60 117C 0000 0028             		move.b	#0,$28(a0)
0000FA66                            
0000FA66                            Obj4D_PlaySnd:
0000FA66 303C 00C8                  		move.w	#$C8,d0
0000FA6A 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play flame sound
0000FA70                            
0000FA70                            Obj4D_Action:				; XREF: Obj4D_Index
0000FA70 7000                       		moveq	#0,d0
0000FA72 1028 0028                  		move.b	$28(a0),d0
0000FA76 D040                       		add.w	d0,d0
0000FA78 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000FA7C 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000FA80 6100 E636                  		bsr.w	SpeedToPos
0000FA84 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000FA8A 6100 B764                  		bsr.w	AnimateSprite
0000FA8E                            
0000FA8E                            Obj4D_ChkDel:				; XREF: Obj4C
0000FA8E 3028 0008                  		move.w	8(a0),d0
0000FA92 0240 FF80                  		andi.w	#$FF80,d0
0000FA96 3238 F700                  		move.w	($FFFFF700).w,d1
0000FA9A 0441 0080                  		subi.w	#$80,d1
0000FA9E 0241 FF80                  		andi.w	#$FF80,d1
0000FAA2 9041                       		sub.w	d1,d0
0000FAA4 0C40 0280                  		cmpi.w	#$280,d0
0000FAA8 6200 E670                  		bhi.w	DeleteObject
0000FAAC 4E75                       		rts	
0000FAAE                            ; ===========================================================================
0000FAAE 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000FAB0 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000FAB2                            ; ===========================================================================
0000FAB2                            
0000FAB2                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000FAB2 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000FAB8 3028 0030                  		move.w	$30(a0),d0
0000FABC B068 000C                  		cmp.w	$C(a0),d0
0000FAC0 6400                       		bcc.s	locret_EFDA
0000FAC2 5828 0024                  		addq.b	#4,$24(a0)
0000FAC6 2268 003C                  		movea.l	$3C(a0),a1
0000FACA 137C 0003 001C             		move.b	#3,$1C(a1)
0000FAD0                            
0000FAD0                            locret_EFDA:
0000FAD0 4E75                       		rts	
0000FAD2                            ; ===========================================================================
0000FAD2                            
0000FAD2                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000FAD2 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000FAD8 3028 0030                  		move.w	$30(a0),d0
0000FADC B068 000C                  		cmp.w	$C(a0),d0
0000FAE0 6400                       		bcc.s	locret_EFFA
0000FAE2 5828 0024                  		addq.b	#4,$24(a0)
0000FAE6 2268 003C                  		movea.l	$3C(a0),a1
0000FAEA 137C 0001 001C             		move.b	#1,$1C(a1)
0000FAF0                            
0000FAF0                            locret_EFFA:
0000FAF0 4E75                       		rts	
0000FAF2                            ; ===========================================================================
0000FAF2                            
0000FAF2                            loc_EFFC:				; XREF: Obj4D_Index
0000FAF2 2268 003C                  		movea.l	$3C(a0),a1
0000FAF6 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000FAFC 6700 0000                  		beq.w	Obj4D_Delete
0000FB00 3029 000C                  		move.w	$C(a1),d0
0000FB04 0640 0060                  		addi.w	#$60,d0
0000FB08 3140 000C                  		move.w	d0,$C(a0)
0000FB0C 9068 0030                  		sub.w	$30(a0),d0
0000FB10 4440                       		neg.w	d0
0000FB12 7208                       		moveq	#8,d1
0000FB14 0C40 0040                  		cmpi.w	#$40,d0
0000FB18 6C00                       		bge.s	loc_F026
0000FB1A 720B                       		moveq	#$B,d1
0000FB1C                            
0000FB1C                            loc_F026:
0000FB1C 0C40 0080                  		cmpi.w	#$80,d0
0000FB20 6F00                       		ble.s	loc_F02E
0000FB22 720E                       		moveq	#$E,d1
0000FB24                            
0000FB24                            loc_F02E:
0000FB24 5328 001E                  		subq.b	#1,$1E(a0)
0000FB28 6A00                       		bpl.s	loc_F04C
0000FB2A 117C 0007 001E             		move.b	#7,$1E(a0)
0000FB30 5228 001B                  		addq.b	#1,$1B(a0)
0000FB34 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000FB3A 6500                       		bcs.s	loc_F04C
0000FB3C 117C 0000 001B             		move.b	#0,$1B(a0)
0000FB42                            
0000FB42                            loc_F04C:
0000FB42 1028 001B                  		move.b	$1B(a0),d0
0000FB46 D001                       		add.b	d1,d0
0000FB48 1140 001A                  		move.b	d0,$1A(a0)
0000FB4C 6000 FF40                  		bra.w	Obj4D_ChkDel
0000FB50                            ; ===========================================================================
0000FB50                            
0000FB50                            Obj4D_Delete:				; XREF: Obj4D_Index
0000FB50 6000 E5C8                  		bra.w	DeleteObject
0000FB54                            ; ===========================================================================
0000FB54                            ; ---------------------------------------------------------------------------
0000FB54                            ; Object 4E - advancing	wall of	lava (MZ)
0000FB54                            ; ---------------------------------------------------------------------------
0000FB54                            
0000FB54                            Obj4E:					; XREF: Obj_Index
0000FB54 7000                       		moveq	#0,d0
0000FB56 1028 0024                  		move.b	$24(a0),d0
0000FB5A 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000FB5E 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000FB62                            ; ===========================================================================
0000FB62 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000FB64 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000FB66 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000FB68 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000FB6A 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000FB6C                            ; ===========================================================================
0000FB6C                            
0000FB6C                            Obj4E_Main:				; XREF: Obj4E_Index
0000FB6C 5828 0024                  		addq.b	#4,$24(a0)
0000FB70 2248                       		movea.l	a0,a1
0000FB72 7201                       		moveq	#1,d1
0000FB74 6000                       		bra.s	Obj4E_Main2
0000FB76                            ; ===========================================================================
0000FB76                            
0000FB76                            Obj4E_Loop:
0000FB76 6100 EA12                  		bsr.w	SingleObjLoad2
0000FB7A 6600                       		bne.s	loc_F0C8
0000FB7C                            
0000FB7C                            Obj4E_Main2:				; XREF: Obj4E_Main
0000FB7C 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000FB80 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000FB88 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000FB8E 137C 0004 0001             		move.b	#4,1(a1)
0000FB94 137C 0050 0019             		move.b	#$50,$19(a1)
0000FB9A 3368 0008 0008             		move.w	8(a0),8(a1)
0000FBA0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FBA6 137C 0001 0018             		move.b	#1,$18(a1)
0000FBAC 137C 0000 001C             		move.b	#0,$1C(a1)
0000FBB2 137C 0094 0020             		move.b	#$94,$20(a1)
0000FBB8 2348 003C                  		move.l	a0,$3C(a1)
0000FBBC                            
0000FBBC                            loc_F0C8:
0000FBBC 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000FBC0                            
0000FBC0 5C29 0024                  		addq.b	#6,$24(a1)
0000FBC4 137C 0004 001A             		move.b	#4,$1A(a1)
0000FBCA                            
0000FBCA                            Obj4E_Action:				; XREF: Obj4E_Index
0000FBCA 3038 D008                  		move.w	($FFFFD008).w,d0
0000FBCE 9068 0008                  		sub.w	8(a0),d0
0000FBD2 6400                       		bcc.s	Obj4E_ChkSonic
0000FBD4 4440                       		neg.w	d0
0000FBD6                            
0000FBD6                            Obj4E_ChkSonic:
0000FBD6 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000FBDA 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000FBDC 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000FBE0 9068 000C                  		sub.w	$C(a0),d0
0000FBE4 6400                       		bcc.s	loc_F0F4
0000FBE6 4440                       		neg.w	d0
0000FBE8                            
0000FBE8                            loc_F0F4:
0000FBE8 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000FBEC 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000FBEE 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000FBF4 6000                       		bra.s	Obj4E_Solid
0000FBF6                            ; ===========================================================================
0000FBF6                            
0000FBF6                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000FBF6 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000FBFA 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000FBFC 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000FC02 5528 0024                  		subq.b	#2,$24(a0)
0000FC06                            
0000FC06                            Obj4E_Solid:				; XREF: Obj4E_Index
0000FC06 323C 002B                  		move.w	#$2B,d1
0000FC0A 343C 0018                  		move.w	#$18,d2
0000FC0E 3602                       		move.w	d2,d3
0000FC10 5243                       		addq.w	#1,d3
0000FC12 3828 0008                  		move.w	8(a0),d4
0000FC16 1028 0024                  		move.b	$24(a0),d0
0000FC1A 3F00                       		move.w	d0,-(sp)
0000FC1C 6100 0000                  		bsr.w	SolidObject
0000FC20 301F                       		move.w	(sp)+,d0
0000FC22 1140 0024                  		move.b	d0,$24(a0)
0000FC26 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000FC2C 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000FC2E 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000FC32 4228 0036                  		clr.b	$36(a0)
0000FC36                            
0000FC36                            Obj4E_Animate:
0000FC36 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000FC3C 6100 B5B2                  		bsr.w	AnimateSprite
0000FC40 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000FC46 6400                       		bcc.s	Obj4E_ChkDel
0000FC48 6100 E46E                  		bsr.w	SpeedToPos
0000FC4C                            
0000FC4C                            Obj4E_ChkDel:
0000FC4C 6100 E490                  		bsr.w	DisplaySprite
0000FC50 4A28 0036                  		tst.b	$36(a0)
0000FC54 6600                       		bne.s	locret_F17E
0000FC56 3028 0008                  		move.w	8(a0),d0
0000FC5A 0240 FF80                  		andi.w	#$FF80,d0
0000FC5E 3238 F700                  		move.w	($FFFFF700).w,d1
0000FC62 0441 0080                  		subi.w	#$80,d1
0000FC66 0241 FF80                  		andi.w	#$FF80,d1
0000FC6A 9041                       		sub.w	d1,d0
0000FC6C 0C40 0280                  		cmpi.w	#$280,d0
0000FC70 6200                       		bhi.s	Obj4E_ChkGone
0000FC72                            
0000FC72                            locret_F17E:
0000FC72 4E75                       		rts	
0000FC74                            ; ===========================================================================
0000FC74                            
0000FC74                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000FC74 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FC78 7000                       		moveq	#0,d0
0000FC7A 1028 0023                  		move.b	$23(a0),d0
0000FC7E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FC84 117C 0008 0024             		move.b	#8,$24(a0)
0000FC8A 4E75                       		rts	
0000FC8C                            ; ===========================================================================
0000FC8C                            
0000FC8C                            Obj4E_Move2:				; XREF: Obj4E_Index
0000FC8C 2268 003C                  		movea.l	$3C(a0),a1
0000FC90 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000FC96 6700                       		beq.s	Obj4E_Delete
0000FC98 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000FC9E 0468 0080 0008             		subi.w	#$80,8(a0)
0000FCA4 6000 E438                  		bra.w	DisplaySprite
0000FCA8                            ; ===========================================================================
0000FCA8                            
0000FCA8                            Obj4E_Delete:				; XREF: Obj4E_Index
0000FCA8 6000 E470                  		bra.w	DeleteObject
0000FCAC                            ; ===========================================================================
0000FCAC                            ; ---------------------------------------------------------------------------
0000FCAC                            ; Object 54 - invisible	lava tag (MZ)
0000FCAC                            ; ---------------------------------------------------------------------------
0000FCAC                            
0000FCAC                            Obj54:					; XREF: Obj_Index
0000FCAC 7000                       		moveq	#0,d0
0000FCAE 1028 0024                  		move.b	$24(a0),d0
0000FCB2 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000FCB6 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000FCBA                            ; ===========================================================================
0000FCBA 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000FCBC 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000FCBE                            
0000FCBE 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000FCC2                            ; ===========================================================================
0000FCC2                            
0000FCC2                            Obj54_Main:				; XREF: Obj54_Index
0000FCC2 5428 0024                  		addq.b	#2,$24(a0)
0000FCC6 7000                       		moveq	#0,d0
0000FCC8 1028 0028                  		move.b	$28(a0),d0
0000FCCC 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000FCD2 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000FCDA 117C 0084 0001             		move.b	#$84,1(a0)
0000FCE0                            
0000FCE0                            Obj54_ChkDel:				; XREF: Obj54_Index
0000FCE0 3028 0008                  		move.w	8(a0),d0
0000FCE4 0240 FF80                  		andi.w	#$FF80,d0
0000FCE8 3238 F700                  		move.w	($FFFFF700).w,d1
0000FCEC 0441 0080                  		subi.w	#$80,d1
0000FCF0 0241 FF80                  		andi.w	#$FF80,d1
0000FCF4 9041                       		sub.w	d1,d0
0000FCF6 6B00 E422                  		bmi.w	DeleteObject
0000FCFA 0C40 0280                  		cmpi.w	#$280,d0
0000FCFE 6200 E41A                  		bhi.w	DeleteObject
0000FD02 4E75                       		rts	
0000FD04                            ; ===========================================================================
0000FD04                            ; ---------------------------------------------------------------------------
0000FD04                            ; Sprite mappings - invisible lava tag (MZ)
0000FD04                            ; ---------------------------------------------------------------------------
0000FD04                            Map_obj54:
0000FD04                            	include "_maps\obj54.asm"
0000FD04                            ; ---------------------------------------------------------------------------
0000FD04                            ; Sprite mappings - invisible lava tag (MZ)
0000FD04                            ; ---------------------------------------------------------------------------
0000FD04 0000                       		dc.w byte_F212-Map_obj54
0000FD06 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000FD08 00                         		even
0000FD08 00                         		even
0000FD08                            
0000FD08                            Ani_obj4C:
0000FD08                            	include "_anim\obj4C.asm"
0000FD08                            ; ---------------------------------------------------------------------------
0000FD08                            ; Animation script - geyser of lava (MZ)
0000FD08                            ; ---------------------------------------------------------------------------
0000FD08 0000                       		dc.w byte_F220-Ani_obj4C
0000FD0A 0000                       		dc.w byte_F22A-Ani_obj4C
0000FD0C 0000                       		dc.w byte_F22E-Ani_obj4C
0000FD0E 0000                       		dc.w byte_F232-Ani_obj4C
0000FD10 0000                       		dc.w byte_F23A-Ani_obj4C
0000FD12 0000                       		dc.w byte_F23E-Ani_obj4C
0000FD14 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000FD1E 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000FD22 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000FD26 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000FD2E 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000FD32 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000FD36                            		even
0000FD36                            		even
0000FD36                            
0000FD36                            Ani_obj4E:
0000FD36                            	include "_anim\obj4E.asm"
0000FD36                            ; ---------------------------------------------------------------------------
0000FD36                            ; Animation script - advancing wall of lava (MZ)
0000FD36                            ; ---------------------------------------------------------------------------
0000FD36 0000                       		dc.w byte_F244-Ani_obj4E
0000FD38 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000FD3E                            		even
0000FD3E                            		even
0000FD3E                            
0000FD3E                            ; ---------------------------------------------------------------------------
0000FD3E                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FD3E                            ; ---------------------------------------------------------------------------
0000FD3E                            Map_obj4C:
0000FD3E                            	include "_maps\obj4C.asm"
0000FD3E                            ; ---------------------------------------------------------------------------
0000FD3E                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FD3E                            ; ---------------------------------------------------------------------------
0000FD3E 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000FD42 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000FD46 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000FD4A 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000FD4E 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000FD52 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000FD56 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000FD5A 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000FD5E 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000FD62 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000FD66 02                         byte_F272:	dc.b 2
0000FD67 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000FD6C EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000FD71 02                         byte_F27D:	dc.b 2
0000FD72 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000FD77 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000FD7C 04                         byte_F288:	dc.b 4
0000FD7D EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FD82 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FD87 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FD8C EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FD91 04                         byte_F29D:	dc.b 4
0000FD92 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FD97 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FD9C F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FDA1 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FDA6 06                         byte_F2B2:	dc.b 6
0000FDA7 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FDAC F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FDB1 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FDB6 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FDBB E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000FDC0 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000FDC5 06                         byte_F2D1:	dc.b 6
0000FDC6 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FDCB F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FDD0 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FDD5 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FDDA E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000FDDF E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000FDE4 02                         byte_F2F0:	dc.b 2
0000FDE5 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000FDEA E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000FDEF 02                         byte_F2FB:	dc.b 2
0000FDF0 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000FDF5 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000FDFA 0A                         byte_F306:	dc.b $A
0000FDFB 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FE00 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FE05 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FE0A B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FE0F D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FE14 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FE19 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FE1E F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FE23 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FE28 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FE2D 0A                         byte_F339:	dc.b $A
0000FE2E 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FE33 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FE38 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FE3D B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FE42 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FE47 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FE4C F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FE51 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FE56 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FE5B 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FE60 0A                         byte_F36C:	dc.b $A
0000FE61 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FE66 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FE6B B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FE70 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FE75 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FE7A D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FE7F F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FE84 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FE89 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FE8E 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FE93 06                         byte_F39F:	dc.b 6
0000FE94 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FE99 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FE9E B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FEA3 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FEA8 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FEAD D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FEB2 06                         byte_F3BE:	dc.b 6
0000FEB3 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FEB8 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FEBD B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FEC2 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FEC7 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FECC D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FED1 06                         byte_F3DD:	dc.b 6
0000FED2 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FED7 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FEDC B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FEE1 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FEE6 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FEEB D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FEF0 10                         byte_F3FC:	dc.b $10
0000FEF1 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FEF6 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FEFB B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FF00 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FF05 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FF0A D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FF0F F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FF14 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FF19 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FF1E 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FF23 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000FF28 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000FF2D 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000FF32 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000FF37 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000FF3C 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000FF41 10                         byte_F44D:	dc.b $10
0000FF42 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FF47 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FF4C B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FF51 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FF56 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FF5B D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FF60 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FF65 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FF6A 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FF6F 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FF74 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FF79 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FF7E 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FF83 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FF88 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FF8D 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FF92 10                         byte_F49E:	dc.b $10
0000FF93 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FF98 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FF9D B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FFA2 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FFA7 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FFAC D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FFB1 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FFB6 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FFBB 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FFC0 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FFC5 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FFCA 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FFCF 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FFD4 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FFD9 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FFDE 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FFE3 06                         byte_F4EF:	dc.b 6
0000FFE4 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FFE9 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FFEE E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FFF3 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FFF8 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FFFD D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
00010002 06                         byte_F50E:	dc.b 6
00010003 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
00010008 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0001000D E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
00010012 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
00010017 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0001001C D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
00010021 00                         byte_F52D:	dc.b 0
00010022                            		even
00010022                            		even
00010022                            
00010022                            ; ---------------------------------------------------------------------------
00010022                            ; Sprite mappings - advancing wall of lava (MZ)
00010022                            ; ---------------------------------------------------------------------------
00010022                            Map_obj4E:
00010022                            	include "_maps\obj4E.asm"
00010022                            ; ---------------------------------------------------------------------------
00010022                            ; Sprite mappings - advancing wall of lava (MZ)
00010022                            ; ---------------------------------------------------------------------------
00010022 0000                       		dc.w byte_F538-Map_obj4E
00010024 0000                       		dc.w byte_F566-Map_obj4E
00010026 0000                       		dc.w byte_F594-Map_obj4E
00010028 0000                       		dc.w byte_F5C2-Map_obj4E
0001002A 0000                       		dc.w byte_F5F0-Map_obj4E
0001002C 09                         byte_F538:	dc.b 9
0001002D E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
00010032 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
00010037 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0001003C E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010041 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010046 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0001004B 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010050 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010055 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0001005A 09                         byte_F566:	dc.b 9
0001005B E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00010060 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
00010065 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0001006A E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0001006F 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010074 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010079 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0001007E E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010083 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010088 09                         byte_F594:	dc.b 9
00010089 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0001008E 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
00010093 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010098 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0001009D 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000100A2 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000100A7 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000100AC E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000100B1 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000100B6 09                         byte_F5C2:	dc.b 9
000100B7 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
000100BC 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
000100C1 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000100C6 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000100CB 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000100D0 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000100D5 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000100DA E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000100DF 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000100E4 08                         byte_F5F0:	dc.b 8
000100E5 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
000100EA 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000100EF E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000100F4 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000100F9 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000100FE 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010103 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010108 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0001010E 00                         		even
0001010E 00                         		even
0001010E                            
0001010E                            ; ===========================================================================
0001010E                            ; ---------------------------------------------------------------------------
0001010E                            ; Object 40 - Moto Bug enemy (GHZ)
0001010E                            ; ---------------------------------------------------------------------------
0001010E                            
0001010E                            Obj40:					; XREF: Obj_Index
0001010E 7000                       		moveq	#0,d0
00010110 1028 0024                  		move.b	$24(a0),d0
00010114 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
00010118 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0001011C                            ; ===========================================================================
0001011C 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0001011E 0000                       		dc.w Obj40_Action-Obj40_Index
00010120 0000                       		dc.w Obj40_Animate-Obj40_Index
00010122 0000                       		dc.w Obj40_Delete-Obj40_Index
00010124                            ; ===========================================================================
00010124                            
00010124                            Obj40_Main:				; XREF: Obj40_Index
00010124 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0001012C 317C 04F0 0002             		move.w	#$4F0,2(a0)
00010132 117C 0004 0001             		move.b	#4,1(a0)
00010138 117C 0004 0018             		move.b	#4,$18(a0)
0001013E 117C 0014 0019             		move.b	#$14,$19(a0)
00010144 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
00010148 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0001014A 117C 000E 0016             		move.b	#$E,$16(a0)
00010150 117C 0008 0017             		move.b	#8,$17(a0)
00010156 117C 000C 0020             		move.b	#$C,$20(a0)
0001015C 6100 DF2E                  		bsr.w	ObjectFall
00010160 4EB9 0000 0000             		jsr	ObjHitFloor
00010166 4A41                       		tst.w	d1
00010168 6A00                       		bpl.s	locret_F68A
0001016A D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0001016E 317C 0000 0012             		move.w	#0,$12(a0)
00010174 5428 0024                  		addq.b	#2,$24(a0)
00010178 0868 0000 0022             		bchg	#0,$22(a0)
0001017E                            
0001017E                            locret_F68A:
0001017E 4E75                       		rts	
00010180                            ; ===========================================================================
00010180                            
00010180                            Obj40_SetSmoke:				; XREF: Obj40_Main
00010180 5828 0024                  		addq.b	#4,$24(a0)
00010184 6000 0000                  		bra.w	Obj40_Animate
00010188                            ; ===========================================================================
00010188                            
00010188                            Obj40_Action:				; XREF: Obj40_Index
00010188 7000                       		moveq	#0,d0
0001018A 1028 0025                  		move.b	$25(a0),d0
0001018E 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
00010192 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
00010196 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0001019C 6100 B052                  		bsr.w	AnimateSprite
000101A0                            
000101A0                            ; ---------------------------------------------------------------------------
000101A0                            ; Routine to mark an enemy/monitor/ring	as destroyed
000101A0                            ; ---------------------------------------------------------------------------
000101A0                            
000101A0                            MarkObjGone:
000101A0 3028 0008                  		move.w	8(a0),d0
000101A4 0240 FF80                  		andi.w	#$FF80,d0
000101A8 3238 F700                  		move.w	($FFFFF700).w,d1
000101AC 0441 0080                  		subi.w	#$80,d1
000101B0 0241 FF80                  		andi.w	#$FF80,d1
000101B4 9041                       		sub.w	d1,d0
000101B6 0C40 0280                  		cmpi.w	#$280,d0
000101BA 6200 0000                  		bhi.w	Mark_ChkGone
000101BE 6000 DF1E                  		bra.w	DisplaySprite
000101C2                            ; ===========================================================================
000101C2                            
000101C2                            Mark_ChkGone:
000101C2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000101C6 7000                       		moveq	#0,d0
000101C8 1028 0023                  		move.b	$23(a0),d0
000101CC 6700                       		beq.s	Mark_Delete
000101CE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000101D4                            
000101D4                            Mark_Delete:
000101D4 6000 DF44                  		bra.w	DeleteObject
000101D8                            
000101D8                            ; ===========================================================================
000101D8 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
000101DA 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
000101DC                            ; ===========================================================================
000101DC                            
000101DC                            Obj40_Move:				; XREF: Obj40_Index2
000101DC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
000101E0 6A00                       		bpl.s	locret_F70A	; if time remains, branch
000101E2 5428 0025                  		addq.b	#2,$25(a0)
000101E6 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
000101EC 117C 0001 001C             		move.b	#1,$1C(a0)
000101F2 0868 0000 0022             		bchg	#0,$22(a0)
000101F8 6600                       		bne.s	locret_F70A
000101FA 4468 0010                  		neg.w	$10(a0)		; change direction
000101FE                            
000101FE                            locret_F70A:
000101FE 4E75                       		rts	
00010200                            ; ===========================================================================
00010200                            
00010200                            Obj40_FixToFloor:			; XREF: Obj40_Index2
00010200 6100 DEB6                  		bsr.w	SpeedToPos
00010204 4EB9 0000 0000             		jsr	ObjHitFloor
0001020A 0C41 FFF8                  		cmpi.w	#-8,d1
0001020E 6D00                       		blt.s	Obj40_Pause
00010210 0C41 000C                  		cmpi.w	#$C,d1
00010214 6C00                       		bge.s	Obj40_Pause
00010216 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0001021A 5328 0033                  		subq.b	#1,$33(a0)
0001021E 6A00                       		bpl.s	locret_F756
00010220 117C 000F 0033             		move.b	#$F,$33(a0)
00010226 6100 E34C                  		bsr.w	SingleObjLoad
0001022A 6600                       		bne.s	locret_F756
0001022C 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
00010230 3368 0008 0008             		move.w	8(a0),8(a1)
00010236 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001023C 1368 0022 0022             		move.b	$22(a0),$22(a1)
00010242 137C 0002 001C             		move.b	#2,$1C(a1)
00010248                            
00010248                            locret_F756:
00010248 4E75                       		rts	
0001024A                            ; ===========================================================================
0001024A                            
0001024A                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0001024A 5528 0025                  		subq.b	#2,$25(a0)
0001024E 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00010254 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0001025A 117C 0000 001C             		move.b	#0,$1C(a0)
00010260 4E75                       		rts	
00010262                            ; ===========================================================================
00010262                            
00010262                            Obj40_Animate:				; XREF: Obj40_Index
00010262 43F9 0000 0000             		lea	(Ani_obj40).l,a1
00010268 6100 AF86                  		bsr.w	AnimateSprite
0001026C 6000 DE70                  		bra.w	DisplaySprite
00010270                            ; ===========================================================================
00010270                            
00010270                            Obj40_Delete:				; XREF: Obj40_Index
00010270 6000 DEA8                  		bra.w	DeleteObject
00010274                            ; ===========================================================================
00010274                            Ani_obj40:
00010274                            	include "_anim\obj40.asm"
00010274                            ; ---------------------------------------------------------------------------
00010274                            ; Animation script - Motobug enemy
00010274                            ; ---------------------------------------------------------------------------
00010274 0000                       		dc.w byte_F788-Ani_obj40
00010276 0000                       		dc.w byte_F78C-Ani_obj40
00010278 0000                       		dc.w byte_F792-Ani_obj40
0001027A 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0001027E 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
00010284 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
00010292                            		even
00010292                            		even
00010292                            
00010292                            ; ---------------------------------------------------------------------------
00010292                            ; Sprite mappings - Moto Bug enemy (GHZ)
00010292                            ; ---------------------------------------------------------------------------
00010292                            Map_obj40:
00010292                            	include "_maps\obj40.asm"
00010292                            ; ---------------------------------------------------------------------------
00010292                            ; Sprite mappings - Moto Bug enemy (GHZ)
00010292                            ; ---------------------------------------------------------------------------
00010292 0000 0000                  		dc.w byte_F7AE-Map_obj40, byte_F7C3-Map_obj40
00010296 0000 0000                  		dc.w byte_F7D8-Map_obj40, byte_F7F2-Map_obj40
0001029A 0000 0000                  		dc.w byte_F7F8-Map_obj40, byte_F7FE-Map_obj40
0001029E 0000                       		dc.w byte_F804-Map_obj40
000102A0 04                         byte_F7AE:	dc.b 4
000102A1 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
000102A6 000C 0008 EC               		dc.b 0,	$C, 0, 8, $EC
000102AB F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
000102B0 0808 000E F4               		dc.b 8,	8, 0, $E, $F4
000102B5 04                         byte_F7C3:	dc.b 4
000102B6 F10D 0000 EC               		dc.b $F1, $D, 0, 0, $EC
000102BB 010C 0008 EC               		dc.b 1,	$C, 0, 8, $EC
000102C0 F901 000C 0C               		dc.b $F9, 1, 0,	$C, $C
000102C5 0908 0011 F4               		dc.b 9,	8, 0, $11, $F4
000102CA 05                         byte_F7D8:	dc.b 5
000102CB F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
000102D0 000C 0014 EC               		dc.b 0,	$C, 0, $14, $EC
000102D5 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
000102DA 0804 0018 EC               		dc.b 8,	4, 0, $18, $EC
000102DF 0804 0012 FC               		dc.b 8,	4, 0, $12, $FC
000102E4 01                         byte_F7F2:	dc.b 1
000102E5 FA00 001A 10               		dc.b $FA, 0, 0,	$1A, $10
000102EA 01                         byte_F7F8:	dc.b 1
000102EB FA00 001B 10               		dc.b $FA, 0, 0,	$1B, $10
000102F0 01                         byte_F7FE:	dc.b 1
000102F1 FA00 001C 10               		dc.b $FA, 0, 0,	$1C, $10
000102F6 00                         byte_F804:	dc.b 0
000102F8 00                         		even
000102F8 00                         		even
000102F8                            
000102F8                            ; ===========================================================================
000102F8                            ; ---------------------------------------------------------------------------
000102F8                            ; Object 4F - blank
000102F8                            ; ---------------------------------------------------------------------------
000102F8                            
000102F8                            Obj4F:					; XREF: Obj_Index
000102F8 4E75                       		rts	
000102FA                            
000102FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000102FA                            
000102FA                            
000102FA                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
000102FA 3038 FE04                  		move.w	($FFFFFE04).w,d0
000102FE D047                       		add.w	d7,d0
00010300 0240 0003                  		andi.w	#3,d0
00010304 6600                       		bne.s	loc_F836
00010306 7600                       		moveq	#0,d3
00010308 1628 0019                  		move.b	$19(a0),d3
0001030C 4A68 0010                  		tst.w	$10(a0)
00010310 6B00                       		bmi.s	loc_F82C
00010312 6100 0000                  		bsr.w	ObjHitWallRight
00010316 4A41                       		tst.w	d1
00010318 6A00                       		bpl.s	loc_F836
0001031A                            
0001031A                            loc_F828:
0001031A 7001                       		moveq	#1,d0
0001031C 4E75                       		rts	
0001031E                            ; ===========================================================================
0001031E                            
0001031E                            loc_F82C:
0001031E 4643                       		not.w	d3
00010320 6100 0000                  		bsr.w	ObjHitWallLeft
00010324 4A41                       		tst.w	d1
00010326 6BF2                       		bmi.s	loc_F828
00010328                            
00010328                            loc_F836:
00010328 7000                       		moveq	#0,d0
0001032A 4E75                       		rts	
0001032C                            ; End of function Obj50_ChkWall
0001032C                            
0001032C                            ; ===========================================================================
0001032C                            ; ---------------------------------------------------------------------------
0001032C                            ; Object 50 - Yadrin enemy (SYZ)
0001032C                            ; ---------------------------------------------------------------------------
0001032C                            
0001032C                            Obj50:					; XREF: Obj_Index
0001032C 7000                       		moveq	#0,d0
0001032E 1028 0024                  		move.b	$24(a0),d0
00010332 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
00010336 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0001033A                            ; ===========================================================================
0001033A 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0001033C 0000                       		dc.w Obj50_Action-Obj50_Index
0001033E                            ; ===========================================================================
0001033E                            
0001033E                            Obj50_Main:				; XREF: Obj50_Index
0001033E 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
00010346 317C 247B 0002             		move.w	#$247B,2(a0)
0001034C 117C 0004 0001             		move.b	#4,1(a0)
00010352 117C 0004 0018             		move.b	#4,$18(a0)
00010358 117C 0014 0019             		move.b	#$14,$19(a0)
0001035E 117C 0011 0016             		move.b	#$11,$16(a0)
00010364 117C 0008 0017             		move.b	#8,$17(a0)
0001036A 117C 00CC 0020             		move.b	#$CC,$20(a0)
00010370 6100 DD1A                  		bsr.w	ObjectFall
00010374 6100 0000                  		bsr.w	ObjHitFloor
00010378 4A41                       		tst.w	d1
0001037A 6A00                       		bpl.s	locret_F89E
0001037C D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010380 317C 0000 0012             		move.w	#0,$12(a0)
00010386 5428 0024                  		addq.b	#2,$24(a0)
0001038A 0868 0000 0022             		bchg	#0,$22(a0)
00010390                            
00010390                            locret_F89E:
00010390 4E75                       		rts	
00010392                            ; ===========================================================================
00010392                            
00010392                            Obj50_Action:				; XREF: Obj50_Index
00010392 7000                       		moveq	#0,d0
00010394 1028 0025                  		move.b	$25(a0),d0
00010398 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
0001039C 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
000103A0 43F9 0000 0000             		lea	(Ani_obj50).l,a1
000103A6 6100 AE48                  		bsr.w	AnimateSprite
000103AA 6000 FDF4                  		bra.w	MarkObjGone
000103AE                            ; ===========================================================================
000103AE 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
000103B0 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
000103B2                            ; ===========================================================================
000103B2                            
000103B2                            Obj50_Move:				; XREF: Obj50_Index2
000103B2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
000103B6 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
000103B8 5428 0025                  		addq.b	#2,$25(a0)
000103BC 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
000103C2 117C 0001 001C             		move.b	#1,$1C(a0)
000103C8 0868 0000 0022             		bchg	#0,$22(a0)
000103CE 6600                       		bne.s	locret_F8E2
000103D0 4468 0010                  		neg.w	$10(a0)		; change direction
000103D4                            
000103D4                            locret_F8E2:
000103D4 4E75                       		rts	
000103D6                            ; ===========================================================================
000103D6                            
000103D6                            Obj50_FixToFloor:			; XREF: Obj50_Index2
000103D6 6100 DCE0                  		bsr.w	SpeedToPos
000103DA 6100 0000                  		bsr.w	ObjHitFloor
000103DE 0C41 FFF8                  		cmpi.w	#-8,d1
000103E2 6D00                       		blt.s	Obj50_Pause
000103E4 0C41 000C                  		cmpi.w	#$C,d1
000103E8 6C00                       		bge.s	Obj50_Pause
000103EA D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
000103EE 6100 FF0A                  		bsr.w	Obj50_ChkWall
000103F2 6600                       		bne.s	Obj50_Pause
000103F4 4E75                       		rts	
000103F6                            ; ===========================================================================
000103F6                            
000103F6                            Obj50_Pause:				; XREF: Obj50_FixToFloor
000103F6 5528 0025                  		subq.b	#2,$25(a0)
000103FA 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00010400 317C 0000 0010             		move.w	#0,$10(a0)
00010406 117C 0000 001C             		move.b	#0,$1C(a0)
0001040C 4E75                       		rts	
0001040E                            ; ===========================================================================
0001040E                            Ani_obj50:
0001040E                            	include "_anim\obj50.asm"
0001040E                            ; ---------------------------------------------------------------------------
0001040E                            ; Animation script - Yadrin enemy
0001040E                            ; ---------------------------------------------------------------------------
0001040E 0000                       		dc.w byte_F920-Ani_obj50
00010410 0000                       		dc.w byte_F924-Ani_obj50
00010412 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
00010416 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
00010420                            		even
00010420                            		even
00010420                            
00010420                            ; ---------------------------------------------------------------------------
00010420                            ; Sprite mappings - Yadrin enemy (SYZ)
00010420                            ; ---------------------------------------------------------------------------
00010420                            Map_obj50:
00010420                            	include "_maps\obj50.asm"
00010420                            ; ---------------------------------------------------------------------------
00010420                            ; Sprite mappings - Yadrin enemy (SYZ)
00010420                            ; ---------------------------------------------------------------------------
00010420 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
00010424 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
00010428 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
0001042C 05                         byte_F93A:	dc.b 5
0001042D F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
00010432 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
00010437 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0001043C F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00010441 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00010446 05                         byte_F954:	dc.b 5
00010447 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0001044C FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
00010451 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00010456 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0001045B 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00010460 05                         byte_F96E:	dc.b 5
00010461 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
00010466 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0001046B EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00010470 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00010475 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0001047A 05                         byte_F988:	dc.b 5
0001047B F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
00010480 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
00010485 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0001048A F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0001048F 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
00010494 05                         byte_F9A2:	dc.b 5
00010495 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0001049A FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0001049F EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000104A4 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000104A9 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
000104AE 05                         byte_F9BC:	dc.b 5
000104AF F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
000104B4 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
000104B9 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
000104BE F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
000104C3 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
000104C8                            		even
000104C8                            		even
000104C8                            
000104C8                            ; ---------------------------------------------------------------------------
000104C8                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
000104C8                            ;
000104C8                            ; variables:
000104C8                            ; d1 = width
000104C8                            ; d2 = height /	2 (when	jumping)
000104C8                            ; d3 = height /	2 (when	walking)
000104C8                            ; d4 = x-axis position
000104C8                            ; ---------------------------------------------------------------------------
000104C8                            
000104C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000104C8                            
000104C8                            
000104C8                            SolidObject:
000104C8 4A28 0025                  		tst.b	$25(a0)
000104CC 6700 0000                  		beq.w	loc_FAC8
000104D0 3401                       		move.w	d1,d2
000104D2 D442                       		add.w	d2,d2
000104D4 43F8 D000                  		lea	($FFFFD000).w,a1
000104D8 0829 0001 0022             		btst	#1,$22(a1)
000104DE 6600                       		bne.s	loc_F9FE
000104E0 3029 0008                  		move.w	8(a1),d0
000104E4 9068 0008                  		sub.w	8(a0),d0
000104E8 D041                       		add.w	d1,d0
000104EA 6B00                       		bmi.s	loc_F9FE
000104EC B042                       		cmp.w	d2,d0
000104EE 6500                       		bcs.s	loc_FA12
000104F0                            
000104F0                            loc_F9FE:
000104F0 08A9 0003 0022             		bclr	#3,$22(a1)
000104F6 08A8 0003 0022             		bclr	#3,$22(a0)
000104FC 4228 0025                  		clr.b	$25(a0)
00010500 7800                       		moveq	#0,d4
00010502 4E75                       		rts	
00010504                            ; ===========================================================================
00010504                            
00010504                            loc_FA12:
00010504 3404                       		move.w	d4,d2
00010506 6100 809A                  		bsr.w	MvSonicOnPtfm
0001050A 7800                       		moveq	#0,d4
0001050C 4E75                       		rts	
0001050E                            ; ===========================================================================
0001050E                            
0001050E                            SolidObject71:				; XREF: Obj71_Solid
0001050E 4A28 0025                  		tst.b	$25(a0)
00010512 6700 0000                  		beq.w	loc_FAD0
00010516 3401                       		move.w	d1,d2
00010518 D442                       		add.w	d2,d2
0001051A 43F8 D000                  		lea	($FFFFD000).w,a1
0001051E 0829 0001 0022             		btst	#1,$22(a1)
00010524 6600                       		bne.s	loc_FA44
00010526 3029 0008                  		move.w	8(a1),d0
0001052A 9068 0008                  		sub.w	8(a0),d0
0001052E D041                       		add.w	d1,d0
00010530 6B00                       		bmi.s	loc_FA44
00010532 B042                       		cmp.w	d2,d0
00010534 6500                       		bcs.s	loc_FA58
00010536                            
00010536                            loc_FA44:
00010536 08A9 0003 0022             		bclr	#3,$22(a1)
0001053C 08A8 0003 0022             		bclr	#3,$22(a0)
00010542 4228 0025                  		clr.b	$25(a0)
00010546 7800                       		moveq	#0,d4
00010548 4E75                       		rts	
0001054A                            ; ===========================================================================
0001054A                            
0001054A                            loc_FA58:
0001054A 3404                       		move.w	d4,d2
0001054C 6100 8054                  		bsr.w	MvSonicOnPtfm
00010550 7800                       		moveq	#0,d4
00010552 4E75                       		rts	
00010554                            ; ===========================================================================
00010554                            
00010554                            SolidObject2F:				; XREF: Obj2F_Solid
00010554 43F8 D000                  		lea	($FFFFD000).w,a1
00010558 4A28 0001                  		tst.b	1(a0)
0001055C 6A00 0000                  		bpl.w	loc_FB92
00010560 3029 0008                  		move.w	8(a1),d0
00010564 9068 0008                  		sub.w	8(a0),d0
00010568 D041                       		add.w	d1,d0
0001056A 6B00 0000                  		bmi.w	loc_FB92
0001056E 3601                       		move.w	d1,d3
00010570 D643                       		add.w	d3,d3
00010572 B043                       		cmp.w	d3,d0
00010574 6200 0000                  		bhi.w	loc_FB92
00010578 3A00                       		move.w	d0,d5
0001057A 0828 0000 0001             		btst	#0,1(a0)
00010580 6700                       		beq.s	loc_FA94
00010582 4645                       		not.w	d5
00010584 DA43                       		add.w	d3,d5
00010586                            
00010586                            loc_FA94:
00010586 E24D                       		lsr.w	#1,d5
00010588 7600                       		moveq	#0,d3
0001058A 1632 5000                  		move.b	(a2,d5.w),d3
0001058E 9612                       		sub.b	(a2),d3
00010590 3A28 000C                  		move.w	$C(a0),d5
00010594 9A43                       		sub.w	d3,d5
00010596 1629 0016                  		move.b	$16(a1),d3
0001059A 4883                       		ext.w	d3
0001059C D443                       		add.w	d3,d2
0001059E 3629 000C                  		move.w	$C(a1),d3
000105A2 9645                       		sub.w	d5,d3
000105A4 5843                       		addq.w	#4,d3
000105A6 D642                       		add.w	d2,d3
000105A8 6B00 0000                  		bmi.w	loc_FB92
000105AC 3802                       		move.w	d2,d4
000105AE D844                       		add.w	d4,d4
000105B0 B644                       		cmp.w	d4,d3
000105B2 6400 0000                  		bcc.w	loc_FB92
000105B6 6000 0000                  		bra.w	loc_FB0E
000105BA                            ; ===========================================================================
000105BA                            
000105BA                            loc_FAC8:
000105BA 4A28 0001                  		tst.b	1(a0)
000105BE 6A00 0000                  		bpl.w	loc_FB92
000105C2                            
000105C2                            loc_FAD0:
000105C2 43F8 D000                  		lea	($FFFFD000).w,a1
000105C6 3029 0008                  		move.w	8(a1),d0
000105CA 9068 0008                  		sub.w	8(a0),d0
000105CE D041                       		add.w	d1,d0
000105D0 6B00 0000                  		bmi.w	loc_FB92
000105D4 3601                       		move.w	d1,d3
000105D6 D643                       		add.w	d3,d3
000105D8 B043                       		cmp.w	d3,d0
000105DA 6200 0000                  		bhi.w	loc_FB92
000105DE 1629 0016                  		move.b	$16(a1),d3
000105E2 4883                       		ext.w	d3
000105E4 D443                       		add.w	d3,d2
000105E6 3629 000C                  		move.w	$C(a1),d3
000105EA 9668 000C                  		sub.w	$C(a0),d3
000105EE 5843                       		addq.w	#4,d3
000105F0 D642                       		add.w	d2,d3
000105F2 6B00 0000                  		bmi.w	loc_FB92
000105F6 3802                       		move.w	d2,d4
000105F8 D844                       		add.w	d4,d4
000105FA B644                       		cmp.w	d4,d3
000105FC 6400 0000                  		bcc.w	loc_FB92
00010600                            
00010600                            loc_FB0E:
00010600 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00010604 6B00 0000                  		bmi.w	loc_FB92
00010608 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0001060E 6400 0000                  		bcc.w	loc_FB92
00010612 4A78 FE08                  		tst.w	($FFFFFE08).w
00010616 6600 0000                  		bne.w	loc_FBAC
0001061A 3A00                       		move.w	d0,d5
0001061C B240                       		cmp.w	d0,d1
0001061E 6400                       		bcc.s	loc_FB36
00010620 D241                       		add.w	d1,d1
00010622 9041                       		sub.w	d1,d0
00010624 3A00                       		move.w	d0,d5
00010626 4445                       		neg.w	d5
00010628                            
00010628                            loc_FB36:
00010628 3203                       		move.w	d3,d1
0001062A B443                       		cmp.w	d3,d2
0001062C 6400                       		bcc.s	loc_FB44
0001062E 5943                       		subq.w	#4,d3
00010630 9644                       		sub.w	d4,d3
00010632 3203                       		move.w	d3,d1
00010634 4441                       		neg.w	d1
00010636                            
00010636                            loc_FB44:
00010636 BA41                       		cmp.w	d1,d5
00010638 6200 0000                  		bhi.w	loc_FBB0
0001063C 0C41 0004                  		cmpi.w	#4,d1
00010640 6300                       		bls.s	loc_FB8C
00010642 4A40                       		tst.w	d0
00010644 6700                       		beq.s	loc_FB70
00010646 6B00                       		bmi.s	loc_FB5E
00010648 4A69 0010                  		tst.w	$10(a1)
0001064C 6B00                       		bmi.s	loc_FB70
0001064E 6000                       		bra.s	loc_FB64
00010650                            ; ===========================================================================
00010650                            
00010650                            loc_FB5E:
00010650 4A69 0010                  		tst.w	$10(a1)
00010654 6A00                       		bpl.s	loc_FB70
00010656                            
00010656                            loc_FB64:
00010656 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
0001065C 337C 0000 0010             		move.w	#0,$10(a1)
00010662                            
00010662                            loc_FB70:
00010662 9169 0008                  		sub.w	d0,8(a1)
00010666 0829 0001 0022             		btst	#1,$22(a1)
0001066C 6600                       		bne.s	loc_FB8C
0001066E 08E9 0005 0022             		bset	#5,$22(a1)
00010674 08E8 0005 0022             		bset	#5,$22(a0)
0001067A 7801                       		moveq	#1,d4
0001067C 4E75                       		rts	
0001067E                            ; ===========================================================================
0001067E                            
0001067E                            loc_FB8C:
0001067E 6100                       		bsr.s	loc_FBA0
00010680 7801                       		moveq	#1,d4
00010682 4E75                       		rts	
00010684                            ; ===========================================================================
00010684                            
00010684                            loc_FB92:
00010684 0828 0005 0022             		btst	#5,$22(a0)
0001068A 6700                       		beq.s	loc_FBAC
0001068C 0C29 0002 001C             		cmp.b	#2,$1C(a1)	; check if in jumping/rolling animation
00010692 6700                       		beq.s	loc_FBA0
00010694 0C29 0017 001C             		cmp.b	#$17,$1C(a1)	; check if in drowning animation
0001069A 6700                       		beq.s	loc_FBA0
0001069C 0C29 001A 001C             		cmp.b	#$1A,$1C(a1)	; check if in hurt animation
000106A2 6700                       		beq.s	loc_FBA0
000106A4 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
000106AA                            
000106AA                            loc_FBA0:
000106AA 08A8 0005 0022             		bclr	#5,$22(a0)
000106B0                            
000106B0 08A9 0005 0022             		bclr	#5,$22(a1)
000106B6                            
000106B6                            loc_FBAC:
000106B6 7800                       		moveq	#0,d4
000106B8 4E75                       		rts	
000106BA                            ; ===========================================================================
000106BA                            
000106BA                            loc_FBB0:
000106BA 4A43                       		tst.w	d3
000106BC 6B00                       		bmi.s	loc_FBBC
000106BE 0C43 0010                  		cmpi.w	#$10,d3
000106C2 6500                       		bcs.s	loc_FBEE
000106C4 60BE                       		bra.s	loc_FB92
000106C6                            ; ===========================================================================
000106C6                            
000106C6                            loc_FBBC:
000106C6 4A69 0012                  		tst.w	$12(a1)
000106CA 6700                       		beq.s	loc_FBD6
000106CC 6A00                       		bpl.s	loc_FBD2
000106CE 4A43                       		tst.w	d3
000106D0 6A00                       		bpl.s	loc_FBD2
000106D2 9769 000C                  		sub.w	d3,$C(a1)
000106D6 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
000106DC                            
000106DC                            loc_FBD2:
000106DC 78FF                       		moveq	#-1,d4
000106DE 4E75                       		rts	
000106E0                            ; ===========================================================================
000106E0                            
000106E0                            loc_FBD6:
000106E0 0829 0001 0022             		btst	#1,$22(a1)
000106E6 66F4                       		bne.s	loc_FBD2
000106E8 2F08                       		move.l	a0,-(sp)
000106EA 2049                       		movea.l	a1,a0
000106EC 4EB9 0000 0000             		jsr	KillSonic
000106F2 205F                       		movea.l	(sp)+,a0
000106F4 78FF                       		moveq	#-1,d4
000106F6 4E75                       		rts	
000106F8                            ; ===========================================================================
000106F8                            
000106F8                            loc_FBEE:
000106F8 5943                       		subq.w	#4,d3
000106FA 7200                       		moveq	#0,d1
000106FC 1228 0019                  		move.b	$19(a0),d1
00010700 3401                       		move.w	d1,d2
00010702 D442                       		add.w	d2,d2
00010704 D269 0008                  		add.w	8(a1),d1
00010708 9268 0008                  		sub.w	8(a0),d1
0001070C 6B00                       		bmi.s	loc_FC28
0001070E B242                       		cmp.w	d2,d1
00010710 6400                       		bcc.s	loc_FC28
00010712 4A69 0012                  		tst.w	$12(a1)
00010716 6B00                       		bmi.s	loc_FC28
00010718 9769 000C                  		sub.w	d3,$C(a1)
0001071C 5369 000C                  		subq.w	#1,$C(a1)
00010720 6100                       		bsr.s	sub_FC2C
00010722 117C 0002 0025             		move.b	#2,$25(a0)
00010728 08E8 0003 0022             		bset	#3,$22(a0)
0001072E 78FF                       		moveq	#-1,d4
00010730 4E75                       		rts	
00010732                            ; ===========================================================================
00010732                            
00010732                            loc_FC28:
00010732 7800                       		moveq	#0,d4
00010734 4E75                       		rts	
00010736                            ; End of function SolidObject
00010736                            
00010736                            
00010736                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010736                            
00010736                            
00010736                            sub_FC2C:				; XREF: SolidObject
00010736 0829 0003 0022             		btst	#3,$22(a1)
0001073C 6700                       		beq.s	loc_FC4E
0001073E 7000                       		moveq	#0,d0
00010740 1029 003D                  		move.b	$3D(a1),d0
00010744 ED48                       		lsl.w	#6,d0
00010746 0680 00FF D000             		addi.l	#$FFD000,d0
0001074C 2440                       		movea.l	d0,a2
0001074E 08AA 0003 0022             		bclr	#3,$22(a2)
00010754 422A 0025                  		clr.b	$25(a2)
00010758                            
00010758                            loc_FC4E:
00010758 3008                       		move.w	a0,d0
0001075A 0440 D000                  		subi.w	#-$3000,d0
0001075E EC48                       		lsr.w	#6,d0
00010760 0240 007F                  		andi.w	#$7F,d0
00010764 1340 003D                  		move.b	d0,$3D(a1)
00010768 137C 0000 0026             		move.b	#0,$26(a1)
0001076E 337C 0000 0012             		move.w	#0,$12(a1)
00010774 3369 0010 0014             		move.w	$10(a1),$14(a1)
0001077A 0829 0001 0022             		btst	#1,$22(a1)
00010780 6700                       		beq.s	loc_FC84
00010782 2F08                       		move.l	a0,-(sp)
00010784 2049                       		movea.l	a1,a0
00010786 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0001078C 205F                       		movea.l	(sp)+,a0
0001078E                            
0001078E                            loc_FC84:
0001078E 08E9 0003 0022             		bset	#3,$22(a1)
00010794 08E8 0003 0022             		bset	#3,$22(a0)
0001079A 4E75                       		rts	
0001079C                            ; End of function sub_FC2C
0001079C                            
0001079C                            ; ===========================================================================
0001079C                            ; ---------------------------------------------------------------------------
0001079C                            ; Object 51 - smashable	green block (MZ)
0001079C                            ; ---------------------------------------------------------------------------
0001079C                            
0001079C                            Obj51:					; XREF: Obj_Index
0001079C 7000                       		moveq	#0,d0
0001079E 1028 0024                  		move.b	$24(a0),d0
000107A2 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
000107A6 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
000107AA 6000 F9F4                  		bra.w	MarkObjGone
000107AE                            ; ===========================================================================
000107AE 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
000107B0 0000                       		dc.w Obj51_Solid-Obj51_Index
000107B2 0000                       		dc.w Obj51_Display-Obj51_Index
000107B4                            ; ===========================================================================
000107B4                            
000107B4                            Obj51_Main:				; XREF: Obj51_Index
000107B4 5428 0024                  		addq.b	#2,$24(a0)
000107B8 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
000107C0 317C 42B8 0002             		move.w	#$42B8,2(a0)
000107C6 117C 0004 0001             		move.b	#4,1(a0)
000107CC 117C 0010 0019             		move.b	#$10,$19(a0)
000107D2 117C 0004 0018             		move.b	#4,$18(a0)
000107D8 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000107DE                            
000107DE                            Obj51_Solid:				; XREF: Obj51_Index
000107DE 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
000107E4 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
000107EA 323C 001B                  		move.w	#$1B,d1
000107EE 343C 0010                  		move.w	#$10,d2
000107F2 363C 0011                  		move.w	#$11,d3
000107F6 3828 0008                  		move.w	8(a0),d4
000107FA 6100 FCCC                  		bsr.w	SolidObject
000107FE 0828 0003 0022             		btst	#3,$22(a0)
00010804 6600                       		bne.s	Obj51_Smash
00010806                            
00010806                            locret_FCFC:
00010806 4E75                       		rts	
00010808                            ; ===========================================================================
00010808                            
00010808                            Obj51_Smash:				; XREF: Obj51_Solid
00010808 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
0001080E 66F6                       		bne.s	locret_FCFC	; if not, branch
00010810 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
00010816 08E9 0002 0022             		bset	#2,$22(a1)
0001081C 137C 000E 0016             		move.b	#$E,$16(a1)
00010822 137C 0007 0017             		move.b	#7,$17(a1)
00010828 137C 0002 001C             		move.b	#2,$1C(a1)
0001082E 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
00010834 08E9 0001 0022             		bset	#1,$22(a1)
0001083A 08A9 0003 0022             		bclr	#3,$22(a1)
00010840 137C 0002 0024             		move.b	#2,$24(a1)
00010846 08A8 0003 0022             		bclr	#3,$22(a0)
0001084C 4228 0025                  		clr.b	$25(a0)
00010850 117C 0001 001A             		move.b	#1,$1A(a0)
00010856 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
0001085C 7203                       		moveq	#3,d1		; set number of	fragments to 4
0001085E 343C 0038                  		move.w	#$38,d2
00010862 6100 D460                  		bsr.w	SmashObject
00010866 6100 DD0C                  		bsr.w	SingleObjLoad
0001086A 6600                       		bne.s	Obj51_Display
0001086C 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00010870 3368 0008 0008             		move.w	8(a0),8(a1)
00010876 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001087C 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
00010880 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
00010884 0C42 0006                  		cmpi.w	#6,d2
00010888 6500                       		bcs.s	Obj51_Bonus
0001088A 7406                       		moveq	#6,d2
0001088C                            
0001088C                            Obj51_Bonus:
0001088C 7000                       		moveq	#0,d0
0001088E 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
00010892 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
00010898 6500                       		bcs.s	loc_FD98	; if not, branch
0001089A 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
0001089E 740A                       		moveq	#10,d2
000108A0                            
000108A0                            loc_FD98:
000108A0 4EB9 0000 0000             		jsr	AddPoints
000108A6 E24A                       		lsr.w	#1,d2
000108A8 1342 001A                  		move.b	d2,$1A(a1)
000108AC                            
000108AC                            Obj51_Display:				; XREF: Obj51_Index
000108AC 6100 D80A                  		bsr.w	SpeedToPos
000108B0 0668 0038 0012             		addi.w	#$38,$12(a0)
000108B6 6100 D826                  		bsr.w	DisplaySprite
000108BA 4A28 0001                  		tst.b	1(a0)
000108BE 6A00 D85A                  		bpl.w	DeleteObject
000108C2 4E75                       		rts	
000108C4                            ; ===========================================================================
000108C4 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
000108C8 FF00 FF00                  		dc.w $FF00, $FF00
000108CC 0200 FE00                  		dc.w $200, $FE00
000108D0 0100 FF00                  		dc.w $100, $FF00
000108D4                            
000108D4 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
000108DC                            ; ---------------------------------------------------------------------------
000108DC                            ; Sprite mappings - smashable green block (MZ)
000108DC                            ; ---------------------------------------------------------------------------
000108DC                            Map_obj51:
000108DC                            	include "_maps\obj51.asm"
000108DC                            ; ---------------------------------------------------------------------------
000108DC                            ; Sprite mappings - smashable green block (MZ)
000108DC                            ; ---------------------------------------------------------------------------
000108DC 0000                       		dc.w byte_FDD8-Map_obj51
000108DE 0000                       		dc.w byte_FDE3-Map_obj51
000108E0 02                         byte_FDD8:	dc.b 2
000108E1 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
000108E6 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
000108EB 04                         byte_FDE3:	dc.b 4
000108EC F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
000108F1 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
000108F6 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
000108FB 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00010900                            		even
00010900                            		even
00010900                            
00010900                            ; ===========================================================================
00010900                            ; ---------------------------------------------------------------------------
00010900                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00010900                            ; ---------------------------------------------------------------------------
00010900                            
00010900                            Obj52:					; XREF: Obj_Index
00010900 7000                       		moveq	#0,d0
00010902 1028 0024                  		move.b	$24(a0),d0
00010906 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
0001090A 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
0001090E                            ; ===========================================================================
0001090E 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
00010910 0000                       		dc.w Obj52_Platform-Obj52_Index
00010912 0000                       		dc.w Obj52_StandOn-Obj52_Index
00010914                            
00010914 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
00010916 2001                       		dc.b $20, 1
00010918 2002                       		dc.b $20, 2
0001091A 4003                       		dc.b $40, 3
0001091C 3004                       		dc.b $30, 4
0001091E                            ; ===========================================================================
0001091E                            
0001091E                            Obj52_Main:				; XREF: Obj52_Index
0001091E 5428 0024                  		addq.b	#2,$24(a0)
00010922 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
0001092A 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010930 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010936 6600                       		bne.s	loc_FE44
00010938 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00010940 317C 43BC 0002             		move.w	#$43BC,2(a0)
00010946 117C 0007 0016             		move.b	#7,$16(a0)
0001094C                            
0001094C                            loc_FE44:
0001094C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00010952 6600                       		bne.s	loc_FE60
00010954 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
0001095A 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
00010960 6700                       		beq.s	loc_FE60	; if yes, branch
00010962 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
00010968                            
00010968                            loc_FE60:
00010968 117C 0004 0001             		move.b	#4,1(a0)
0001096E 7000                       		moveq	#0,d0
00010970 1028 0028                  		move.b	$28(a0),d0
00010974 E648                       		lsr.w	#3,d0
00010976 0240 001E                  		andi.w	#$1E,d0
0001097A 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
0001097E 115A 0019                  		move.b	(a2)+,$19(a0)
00010982 115A 001A                  		move.b	(a2)+,$1A(a0)
00010986 117C 0004 0018             		move.b	#4,$18(a0)
0001098C 3168 0008 0030             		move.w	8(a0),$30(a0)
00010992 3168 000C 0032             		move.w	$C(a0),$32(a0)
00010998 0228 000F 0028             		andi.b	#$F,$28(a0)
0001099E                            
0001099E                            Obj52_Platform:				; XREF: Obj52_Index
0001099E 6100 0000                  		bsr.w	Obj52_Move
000109A2 7200                       		moveq	#0,d1
000109A4 1228 0019                  		move.b	$19(a0),d1
000109A8 4EB9 0000 7ED0             		jsr	(PlatformObject).l
000109AE 6000                       		bra.s	Obj52_ChkDel
000109B0                            ; ===========================================================================
000109B0                            
000109B0                            Obj52_StandOn:				; XREF: Obj52_Index
000109B0 7200                       		moveq	#0,d1
000109B2 1228 0019                  		move.b	$19(a0),d1
000109B6 4EB9 0000 8044             		jsr	(ExitPlatform).l
000109BC 3F28 0008                  		move.w	8(a0),-(sp)
000109C0 6100 0000                  		bsr.w	Obj52_Move
000109C4 341F                       		move.w	(sp)+,d2
000109C6 4EB9 0000 85AE             		jsr	(MvSonicOnPtfm2).l
000109CC                            
000109CC                            Obj52_ChkDel:				; XREF: Obj52_Platform
000109CC 3028 0030                  		move.w	$30(a0),d0
000109D0 0240 FF80                  		andi.w	#$FF80,d0
000109D4 3238 F700                  		move.w	($FFFFF700).w,d1
000109D8 0441 0080                  		subi.w	#$80,d1
000109DC 0241 FF80                  		andi.w	#$FF80,d1
000109E0 9041                       		sub.w	d1,d0
000109E2 0C40 0280                  		cmpi.w	#$280,d0
000109E6 6200 D732                  		bhi.w	DeleteObject
000109EA 6000 D6F2                  		bra.w	DisplaySprite
000109EE                            ; ===========================================================================
000109EE                            
000109EE                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
000109EE 7000                       		moveq	#0,d0
000109F0 1028 0028                  		move.b	$28(a0),d0
000109F4 0240 000F                  		andi.w	#$F,d0
000109F8 D040                       		add.w	d0,d0
000109FA 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
000109FE 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
00010A02                            ; ===========================================================================
00010A02 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00010A06 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
00010A0A 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
00010A0E 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00010A12 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00010A16 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00010A18                            ; ===========================================================================
00010A18                            
00010A18                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00010A18 4E75                       		rts	
00010A1A                            ; ===========================================================================
00010A1A                            
00010A1A                            Obj52_Type01:				; XREF: Obj52_TypeIndex
00010A1A 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010A1E 323C 0060                  		move.w	#$60,d1
00010A22 0828 0000 0022             		btst	#0,$22(a0)
00010A28 6700                       		beq.s	loc_FF26
00010A2A 4440                       		neg.w	d0
00010A2C D041                       		add.w	d1,d0
00010A2E                            
00010A2E                            loc_FF26:
00010A2E 3228 0030                  		move.w	$30(a0),d1
00010A32 9240                       		sub.w	d0,d1
00010A34 3141 0008                  		move.w	d1,8(a0)
00010A38 4E75                       		rts	
00010A3A                            ; ===========================================================================
00010A3A                            
00010A3A                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00010A3A 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00010A40 6600                       		bne.s	Obj52_02_Wait
00010A42 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00010A46                            
00010A46                            Obj52_02_Wait:
00010A46 4E75                       		rts	
00010A48                            ; ===========================================================================
00010A48                            
00010A48                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00010A48 7600                       		moveq	#0,d3
00010A4A 1628 0019                  		move.b	$19(a0),d3
00010A4E 6100 0000                  		bsr.w	ObjHitWallRight
00010A52 4A41                       		tst.w	d1		; has the platform hit a wall?
00010A54 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00010A56 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010A5A 3168 0008 0030             		move.w	8(a0),$30(a0)
00010A60 4E75                       		rts	
00010A62                            ; ===========================================================================
00010A62                            
00010A62                            Obj52_03_End:
00010A62 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
00010A66 4E75                       		rts	
00010A68                            ; ===========================================================================
00010A68                            
00010A68                            Obj52_Type05:				; XREF: Obj52_TypeIndex
00010A68 7600                       		moveq	#0,d3
00010A6A 1628 0019                  		move.b	$19(a0),d3
00010A6E 6100 0000                  		bsr.w	ObjHitWallRight
00010A72 4A41                       		tst.w	d1		; has the platform hit a wall?
00010A74 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
00010A76 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010A7A 3168 0008 0030             		move.w	8(a0),$30(a0)
00010A80 4E75                       		rts	
00010A82                            ; ===========================================================================
00010A82                            
00010A82                            Obj52_05_End:
00010A82 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
00010A86 4E75                       		rts	
00010A88                            ; ===========================================================================
00010A88                            
00010A88                            Obj52_Type06:				; XREF: Obj52_TypeIndex
00010A88 6100 D62E                  		bsr.w	SpeedToPos
00010A8C 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
00010A92 6100 0000                  		bsr.w	ObjHitFloor
00010A96 4A41                       		tst.w	d1		; has platform hit the floor?
00010A98 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00010A9C D368 000C                  		add.w	d1,$C(a0)
00010AA0 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00010AA4 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
00010AA8                            
00010AA8                            locret_FFA0:
00010AA8 4E75                       		rts	
00010AAA                            ; ===========================================================================
00010AAA                            
00010AAA                            Obj52_Type07:				; XREF: Obj52_TypeIndex
00010AAA 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
00010AAE 6700                       		beq.s	Obj52_07_ChkDel
00010AB0 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
00010AB4                            
00010AB4                            Obj52_07_ChkDel:
00010AB4 588F                       		addq.l	#4,sp
00010AB6 3028 0030                  		move.w	$30(a0),d0
00010ABA 0240 FF80                  		andi.w	#$FF80,d0
00010ABE 3238 F700                  		move.w	($FFFFF700).w,d1
00010AC2 0441 0080                  		subi.w	#$80,d1
00010AC6 0241 FF80                  		andi.w	#$FF80,d1
00010ACA 9041                       		sub.w	d1,d0
00010ACC 0C40 0280                  		cmpi.w	#$280,d0
00010AD0 6200 D648                  		bhi.w	DeleteObject
00010AD4 4E75                       		rts	
00010AD6                            ; ===========================================================================
00010AD6                            
00010AD6                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00010AD6 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010ADA 323C 0080                  		move.w	#$80,d1
00010ADE 0828 0000 0022             		btst	#0,$22(a0)
00010AE4 6700                       		beq.s	loc_FFE2
00010AE6 4440                       		neg.w	d0
00010AE8 D041                       		add.w	d1,d0
00010AEA                            
00010AEA                            loc_FFE2:
00010AEA 3228 0032                  		move.w	$32(a0),d1
00010AEE 9240                       		sub.w	d0,d1
00010AF0 3141 000C                  		move.w	d1,$C(a0)
00010AF4 4E75                       		rts	
00010AF6                            ; ===========================================================================
00010AF6                            
00010AF6                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00010AF6 7600                       		moveq	#0,d3
00010AF8 1628 0019                  		move.b	$19(a0),d3
00010AFC D643                       		add.w	d3,d3
00010AFE 7208                       		moveq	#8,d1
00010B00 0828 0000 0022             		btst	#0,$22(a0)
00010B06 6700                       		beq.s	loc_10004
00010B08 4441                       		neg.w	d1
00010B0A 4443                       		neg.w	d3
00010B0C                            
00010B0C                            loc_10004:
00010B0C 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00010B10 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00010B12 3028 0008                  		move.w	8(a0),d0
00010B16 9068 0030                  		sub.w	$30(a0),d0
00010B1A B043                       		cmp.w	d3,d0
00010B1C 6700                       		beq.s	Obj52_0A_Wait
00010B1E D368 0008                  		add.w	d1,8(a0)	; move platform
00010B22 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00010B28 4E75                       		rts	
00010B2A                            ; ===========================================================================
00010B2A                            
00010B2A                            Obj52_0A_Wait:
00010B2A 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00010B2E 6600                       		bne.s	locret_1002E	; if time remains, branch
00010B30 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00010B36                            
00010B36                            locret_1002E:
00010B36 4E75                       		rts	
00010B38                            ; ===========================================================================
00010B38                            
00010B38                            Obj52_0A_Back:
00010B38 3028 0008                  		move.w	8(a0),d0
00010B3C 9068 0030                  		sub.w	$30(a0),d0
00010B40 6700                       		beq.s	Obj52_0A_Reset
00010B42 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00010B46 4E75                       		rts	
00010B48                            ; ===========================================================================
00010B48                            
00010B48                            Obj52_0A_Reset:
00010B48 4268 0036                  		clr.w	$36(a0)
00010B4C 5328 0028                  		subq.b	#1,$28(a0)
00010B50 4E75                       		rts	
00010B52                            ; ===========================================================================
00010B52                            ; ---------------------------------------------------------------------------
00010B52                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010B52                            ; ---------------------------------------------------------------------------
00010B52                            Map_obj52:
00010B52                            	include "_maps\obj52mz.asm"
00010B52                            ; ---------------------------------------------------------------------------
00010B52                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010B52                            ; ---------------------------------------------------------------------------
00010B52 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00010B56 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00010B5A 0000                       		dc.w byte_1008F-Map_obj52
00010B5C 01                         byte_10054:	dc.b 1
00010B5D F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010B62 02                         byte_1005A:	dc.b 2
00010B63 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00010B68 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00010B6D 04                         byte_10065:	dc.b 4
00010B6E F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00010B73 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00010B78 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00010B7D 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00010B82 04                         byte_1007A:	dc.b 4
00010B83 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00010B88 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00010B8D F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00010B92 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00010B97 03                         byte_1008F:	dc.b 3
00010B98 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00010B9D F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010BA2 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00010BA8 00                         		even
00010BA8 00                         		even
00010BA8                            
00010BA8                            ; ---------------------------------------------------------------------------
00010BA8                            ; Sprite mappings - moving block (LZ)
00010BA8                            ; ---------------------------------------------------------------------------
00010BA8                            Map_obj52a:
00010BA8                            	include "_maps\obj52lz.asm"
00010BA8                            ; ---------------------------------------------------------------------------
00010BA8                            ; Sprite mappings - moving block (LZ)
00010BA8                            ; ---------------------------------------------------------------------------
00010BA8 0000                       		dc.w byte_100A2-Map_obj52a
00010BAA 01                         byte_100A2:	dc.b 1
00010BAB F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00010BB0                            		even
00010BB0                            		even
00010BB0                            
00010BB0                            ; ===========================================================================
00010BB0                            ; ---------------------------------------------------------------------------
00010BB0                            ; Object 55 - Basaran enemy (MZ)
00010BB0                            ; ---------------------------------------------------------------------------
00010BB0                            
00010BB0                            Obj55:					; XREF: Obj_Index
00010BB0 7000                       		moveq	#0,d0
00010BB2 1028 0024                  		move.b	$24(a0),d0
00010BB6 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00010BBA 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00010BBE                            ; ===========================================================================
00010BBE 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00010BC0 0000                       		dc.w Obj55_Action-Obj55_Index
00010BC2                            ; ===========================================================================
00010BC2                            
00010BC2                            Obj55_Main:				; XREF: Obj55_Index
00010BC2 5428 0024                  		addq.b	#2,$24(a0)
00010BC6 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00010BCE 317C 84B8 0002             		move.w	#$84B8,2(a0)
00010BD4 117C 0004 0001             		move.b	#4,1(a0)
00010BDA 117C 000C 0016             		move.b	#$C,$16(a0)
00010BE0 117C 0002 0018             		move.b	#2,$18(a0)
00010BE6 117C 000B 0020             		move.b	#$B,$20(a0)
00010BEC 117C 0010 0019             		move.b	#$10,$19(a0)
00010BF2                            
00010BF2                            Obj55_Action:				; XREF: Obj55_Index
00010BF2 7000                       		moveq	#0,d0
00010BF4 1028 0025                  		move.b	$25(a0),d0
00010BF8 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00010BFC 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00010C00 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00010C06 6100 A5E8                  		bsr.w	AnimateSprite
00010C0A 6000 F594                  		bra.w	MarkObjGone
00010C0E                            ; ===========================================================================
00010C0E 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00010C10 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00010C12 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00010C14 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00010C16                            ; ===========================================================================
00010C16                            
00010C16                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00010C16 343C 0080                  		move.w	#$80,d2
00010C1A 6100 0000                  		bsr.w	Obj55_ChkSonic
00010C1E 6400                       		bcc.s	Obj55_NoDrop
00010C20 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010C24 3140 0036                  		move.w	d0,$36(a0)
00010C28 9068 000C                  		sub.w	$C(a0),d0
00010C2C 6500                       		bcs.s	Obj55_NoDrop
00010C2E 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00010C32 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00010C34 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00010C38 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00010C3A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010C3E D007                       		add.b	d7,d0
00010C40 0200 0007                  		andi.b	#7,d0
00010C44 6600                       		bne.s	Obj55_NoDrop
00010C46 117C 0001 001C             		move.b	#1,$1C(a0)
00010C4C 5428 0025                  		addq.b	#2,$25(a0)
00010C50                            
00010C50                            Obj55_NoDrop:
00010C50 4E75                       		rts	
00010C52                            ; ===========================================================================
00010C52                            
00010C52                            Obj55_DropFly:				; XREF: Obj55_Index2
00010C52 6100 D464                  		bsr.w	SpeedToPos
00010C56 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
00010C5C 343C 0080                  		move.w	#$80,d2
00010C60 6100 0000                  		bsr.w	Obj55_ChkSonic
00010C64 3028 0036                  		move.w	$36(a0),d0
00010C68 9068 000C                  		sub.w	$C(a0),d0
00010C6C 6500                       		bcs.s	Obj55_ChkDel
00010C6E 0C40 0010                  		cmpi.w	#$10,d0
00010C72 6400                       		bcc.s	locret_10180
00010C74 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00010C78 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00010C7E 117C 0002 001C             		move.b	#2,$1C(a0)
00010C84 5428 0025                  		addq.b	#2,$25(a0)
00010C88                            
00010C88                            locret_10180:
00010C88 4E75                       		rts	
00010C8A                            ; ===========================================================================
00010C8A                            
00010C8A                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00010C8A 4A28 0001                  		tst.b	1(a0)
00010C8E 6A00 D48A                  		bpl.w	DeleteObject
00010C92 4E75                       		rts	
00010C94                            ; ===========================================================================
00010C94                            
00010C94                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00010C94 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010C98 0200 000F                  		andi.b	#$F,d0
00010C9C 6600                       		bne.s	loc_101A0
00010C9E 303C 00C0                  		move.w	#$C0,d0
00010CA2 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play flapping sound
00010CA8                            
00010CA8                            loc_101A0:
00010CA8 6100 D40E                  		bsr.w	SpeedToPos
00010CAC 3038 D008                  		move.w	($FFFFD008).w,d0
00010CB0 9068 0008                  		sub.w	8(a0),d0
00010CB4 6400                       		bcc.s	loc_101B0
00010CB6 4440                       		neg.w	d0
00010CB8                            
00010CB8                            loc_101B0:
00010CB8 0C40 0080                  		cmpi.w	#$80,d0
00010CBC 6500                       		bcs.s	locret_101C6
00010CBE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010CC2 D007                       		add.b	d7,d0
00010CC4 0200 0007                  		andi.b	#7,d0
00010CC8 6600                       		bne.s	locret_101C6
00010CCA 5428 0025                  		addq.b	#2,$25(a0)
00010CCE                            
00010CCE                            locret_101C6:
00010CCE 4E75                       		rts	
00010CD0                            ; ===========================================================================
00010CD0                            
00010CD0                            Obj55_FlyUp:				; XREF: Obj55_Index2
00010CD0 6100 D3E6                  		bsr.w	SpeedToPos
00010CD4 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00010CDA 6100 0000                  		bsr.w	ObjHitCeiling
00010CDE 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00010CE0 6A00                       		bpl.s	locret_101F4	; if not, branch
00010CE2 9368 000C                  		sub.w	d1,$C(a0)
00010CE6 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010CEC 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00010CF0 4268 0012                  		clr.w	$12(a0)
00010CF4 4228 001C                  		clr.b	$1C(a0)
00010CF8 4228 0025                  		clr.b	$25(a0)
00010CFC                            
00010CFC                            locret_101F4:
00010CFC 4E75                       		rts	
00010CFE                            ; ===========================================================================
00010CFE                            
00010CFE                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00010CFE 323C 0100                  		move.w	#$100,d1
00010D02 08E8 0000 0022             		bset	#0,$22(a0)
00010D08 3038 D008                  		move.w	($FFFFD008).w,d0
00010D0C 9068 0008                  		sub.w	8(a0),d0
00010D10 6400                       		bcc.s	loc_10214
00010D12 4440                       		neg.w	d0
00010D14 4441                       		neg.w	d1
00010D16 08A8 0000 0022             		bclr	#0,$22(a0)
00010D1C                            
00010D1C                            loc_10214:
00010D1C B042                       		cmp.w	d2,d0
00010D1E 4E75                       		rts	
00010D20                            ; ===========================================================================
00010D20 6100 D396                  		bsr.w	SpeedToPos
00010D24 6100 D3B8                  		bsr.w	DisplaySprite
00010D28 4A28 0001                  		tst.b	1(a0)
00010D2C 6A00 D3EC                  		bpl.w	DeleteObject
00010D30 4E75                       		rts	
00010D32                            ; ===========================================================================
00010D32                            Ani_obj55:
00010D32                            	include "_anim\obj55.asm"
00010D32                            ; ---------------------------------------------------------------------------
00010D32                            ; Animation script - Basaran enemy
00010D32                            ; ---------------------------------------------------------------------------
00010D32 0000                       		dc.w byte_10230-Ani_obj55
00010D34 0000                       		dc.w byte_10234-Ani_obj55
00010D36 0000                       		dc.w byte_10238-Ani_obj55
00010D38 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00010D3C 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00010D40 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00010D46                            		even
00010D46                            		even
00010D46                            
00010D46                            ; ---------------------------------------------------------------------------
00010D46                            ; Sprite mappings - Basaran enemy (MZ)
00010D46                            ; ---------------------------------------------------------------------------
00010D46                            Map_obj55:
00010D46                            	include "_maps\obj55.asm"
00010D46                            ; ---------------------------------------------------------------------------
00010D46                            ; Sprite mappings - Basaran enemy (MZ)
00010D46                            ; ---------------------------------------------------------------------------
00010D46 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00010D4A 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00010D4E 01                         byte_10246:	dc.b 1
00010D4F F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00010D54 03                         byte_1024C:	dc.b 3
00010D55 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00010D5A 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00010D5F 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00010D64 04                         byte_1025C:	dc.b 4
00010D65 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00010D6A 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00010D6F 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00010D74 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00010D79 04                         byte_10271:	dc.b 4
00010D7A F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00010D7F 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00010D84 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00010D89 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00010D8E                            		even
00010D8E                            		even
00010D8E                            
00010D8E                            ; ===========================================================================
00010D8E                            ; ---------------------------------------------------------------------------
00010D8E                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00010D8E                            ; ---------------------------------------------------------------------------
00010D8E                            
00010D8E                            Obj56:					; XREF: Obj_Index
00010D8E 7000                       		moveq	#0,d0
00010D90 1028 0024                  		move.b	$24(a0),d0
00010D94 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010D98 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010D9C                            ; ===========================================================================
00010D9C 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00010D9E 0000                       		dc.w Obj56_Action-Obj56_Index
00010DA0                            
00010DA0 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00010DA2 2020                       		dc.b  $20, $20
00010DA4 1020                       		dc.b  $10, $20
00010DA6 201A                       		dc.b  $20, $1A
00010DA8 1027                       		dc.b  $10, $27
00010DAA 1010                       		dc.b  $10, $10
00010DAC 0820                       		dc.b	8, $20
00010DAE 4010                       		dc.b  $40, $10
00010DB0                            ; ===========================================================================
00010DB0                            
00010DB0                            Obj56_Main:				; XREF: Obj56_Index
00010DB0 5428 0024                  		addq.b	#2,$24(a0)
00010DB4 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010DBC 317C 4000 0002             		move.w	#$4000,2(a0)
00010DC2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010DC8 6600                       		bne.s	loc_102C8
00010DCA 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010DD0                            
00010DD0                            loc_102C8:
00010DD0 117C 0004 0001             		move.b	#4,1(a0)
00010DD6 117C 0003 0018             		move.b	#3,$18(a0)
00010DDC 7000                       		moveq	#0,d0
00010DDE 1028 0028                  		move.b	$28(a0),d0
00010DE2 E648                       		lsr.w	#3,d0
00010DE4 0240 000E                  		andi.w	#$E,d0
00010DE8 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010DEC 115A 0019                  		move.b	(a2)+,$19(a0)
00010DF0 1152 0016                  		move.b	(a2),$16(a0)
00010DF4 E248                       		lsr.w	#1,d0
00010DF6 1140 001A                  		move.b	d0,$1A(a0)
00010DFA 3168 0008 0034             		move.w	8(a0),$34(a0)
00010E00 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010E06 7000                       		moveq	#0,d0
00010E08 1012                       		move.b	(a2),d0
00010E0A D040                       		add.w	d0,d0
00010E0C 3140 003A                  		move.w	d0,$3A(a0)
00010E10 7000                       		moveq	#0,d0
00010E12 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010E18 6700                       		beq.s	loc_10332
00010E1A 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010E1E 0240 000F                  		andi.w	#$F,d0
00010E22 5140                       		subq.w	#8,d0
00010E24 6500                       		bcs.s	loc_10332
00010E26 E548                       		lsl.w	#2,d0
00010E28 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010E2C 45F2 0000                  		lea	(a2,d0.w),a2
00010E30 4A52                       		tst.w	(a2)
00010E32 6A00                       		bpl.s	loc_10332
00010E34 0868 0000 0022             		bchg	#0,$22(a0)
00010E3A                            
00010E3A                            loc_10332:
00010E3A 1028 0028                  		move.b	$28(a0),d0
00010E3E 6A00                       		bpl.s	Obj56_Action
00010E40 0200 000F                  		andi.b	#$F,d0
00010E44 1140 003C                  		move.b	d0,$3C(a0)
00010E48 117C 0005 0028             		move.b	#5,$28(a0)
00010E4E 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00010E54 6600                       		bne.s	Obj56_ChkGone
00010E56 117C 000C 0028             		move.b	#$C,$28(a0)
00010E5C 317C 0080 003A             		move.w	#$80,$3A(a0)
00010E62                            
00010E62                            Obj56_ChkGone:
00010E62 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010E66 7000                       		moveq	#0,d0
00010E68 1028 0023                  		move.b	$23(a0),d0
00010E6C 6700                       		beq.s	Obj56_Action
00010E6E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010E74 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010E7A 6700                       		beq.s	Obj56_Action
00010E7C 5228 0028                  		addq.b	#1,$28(a0)
00010E80 4268 003A                  		clr.w	$3A(a0)
00010E84                            
00010E84                            Obj56_Action:				; XREF: Obj56_Index
00010E84 3F28 0008                  		move.w	8(a0),-(sp)
00010E88 7000                       		moveq	#0,d0
00010E8A 1028 0028                  		move.b	$28(a0),d0	; get object type
00010E8E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010E92 D040                       		add.w	d0,d0
00010E94 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010E98 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010E9C 381F                       		move.w	(sp)+,d4
00010E9E 4A28 0001                  		tst.b	1(a0)
00010EA2 6A00                       		bpl.s	Obj56_ChkDel
00010EA4 7200                       		moveq	#0,d1
00010EA6 1228 0019                  		move.b	$19(a0),d1
00010EAA 0641 000B                  		addi.w	#$B,d1
00010EAE 7400                       		moveq	#0,d2
00010EB0 1428 0016                  		move.b	$16(a0),d2
00010EB4 3602                       		move.w	d2,d3
00010EB6 5243                       		addq.w	#1,d3
00010EB8 6100 F60E                  		bsr.w	SolidObject
00010EBC                            
00010EBC                            Obj56_ChkDel:
00010EBC 3028 0034                  		move.w	$34(a0),d0
00010EC0 0240 FF80                  		andi.w	#$FF80,d0
00010EC4 3238 F700                  		move.w	($FFFFF700).w,d1
00010EC8 0441 0080                  		subi.w	#$80,d1
00010ECC 0241 FF80                  		andi.w	#$FF80,d1
00010ED0 9041                       		sub.w	d1,d0
00010ED2 0C40 0280                  		cmpi.w	#$280,d0
00010ED6 6200 D242                  		bhi.w	DeleteObject
00010EDA 6000 D202                  		bra.w	DisplaySprite
00010EDE                            ; ===========================================================================
00010EDE 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010EE2 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010EE6 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010EEA 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010EEE 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010EF2 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010EF6 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010EFA                            ; ===========================================================================
00010EFA                            
00010EFA                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010EFA 4E75                       		rts	
00010EFC                            ; ===========================================================================
00010EFC                            
00010EFC                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010EFC 323C 0040                  		move.w	#$40,d1
00010F00 7000                       		moveq	#0,d0
00010F02 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010F06 6000                       		bra.s	Obj56_Move_LR
00010F08                            ; ===========================================================================
00010F08                            
00010F08                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010F08 323C 0080                  		move.w	#$80,d1
00010F0C 7000                       		moveq	#0,d0
00010F0E 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010F12                            
00010F12                            Obj56_Move_LR:
00010F12 0828 0000 0022             		btst	#0,$22(a0)
00010F18 6700                       		beq.s	loc_10416
00010F1A 4440                       		neg.w	d0
00010F1C D041                       		add.w	d1,d0
00010F1E                            
00010F1E                            loc_10416:
00010F1E 3228 0034                  		move.w	$34(a0),d1
00010F22 9240                       		sub.w	d0,d1
00010F24 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010F28 4E75                       		rts	
00010F2A                            ; ===========================================================================
00010F2A                            
00010F2A                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010F2A 323C 0040                  		move.w	#$40,d1
00010F2E 7000                       		moveq	#0,d0
00010F30 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010F34 6000                       		bra.s	Obj56_Move_UD
00010F36                            ; ===========================================================================
00010F36                            
00010F36                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00010F36 323C 0080                  		move.w	#$80,d1
00010F3A 7000                       		moveq	#0,d0
00010F3C 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010F40                            
00010F40                            Obj56_Move_UD:
00010F40 0828 0000 0022             		btst	#0,$22(a0)
00010F46 6700                       		beq.s	loc_10444
00010F48 4440                       		neg.w	d0
00010F4A D041                       		add.w	d1,d0
00010F4C                            
00010F4C                            loc_10444:
00010F4C 3228 0030                  		move.w	$30(a0),d1
00010F50 9240                       		sub.w	d0,d1
00010F52 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010F56 4E75                       		rts	
00010F58                            ; ===========================================================================
00010F58                            
00010F58                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00010F58 4A28 0038                  		tst.b	$38(a0)
00010F5C 6600                       		bne.s	loc_104A4
00010F5E 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010F64 6600                       		bne.s	loc_1047A	; if not, branch
00010F66 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010F6C 6600                       		bne.s	loc_1047A
00010F6E 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010F72 3038 D008                  		move.w	($FFFFD008).w,d0
00010F76 B068 0008                  		cmp.w	8(a0),d0
00010F7A 6400                       		bcc.s	loc_1047A
00010F7C 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010F82                            
00010F82                            loc_1047A:
00010F82 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010F86 7000                       		moveq	#0,d0
00010F88 1028 003C                  		move.b	$3C(a0),d0
00010F8C 0832 0000 0000             		btst	#0,(a2,d0.w)
00010F92 6700                       		beq.s	loc_104AE
00010F94 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010F9A 6600                       		bne.s	loc_1049E	; if not, branch
00010F9C 0C00 0003                  		cmpi.b	#3,d0
00010FA0 6600                       		bne.s	loc_1049E
00010FA2 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010FA6                            
00010FA6                            loc_1049E:
00010FA6 117C 0001 0038             		move.b	#1,$38(a0)
00010FAC                            
00010FAC                            loc_104A4:
00010FAC 4A68 003A                  		tst.w	$3A(a0)
00010FB0 6700                       		beq.s	loc_104C8
00010FB2 5568 003A                  		subq.w	#2,$3A(a0)
00010FB6                            
00010FB6                            loc_104AE:
00010FB6 3028 003A                  		move.w	$3A(a0),d0
00010FBA 0828 0000 0022             		btst	#0,$22(a0)
00010FC0 6700                       		beq.s	loc_104BC
00010FC2 4440                       		neg.w	d0
00010FC4                            
00010FC4                            loc_104BC:
00010FC4 3228 0030                  		move.w	$30(a0),d1
00010FC8 D240                       		add.w	d0,d1
00010FCA 3141 000C                  		move.w	d1,$C(a0)
00010FCE 4E75                       		rts	
00010FD0                            ; ===========================================================================
00010FD0                            
00010FD0                            loc_104C8:
00010FD0 5228 0028                  		addq.b	#1,$28(a0)
00010FD4 4228 0038                  		clr.b	$38(a0)
00010FD8 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010FDC 7000                       		moveq	#0,d0
00010FDE 1028 0023                  		move.b	$23(a0),d0
00010FE2 67D2                       		beq.s	loc_104AE
00010FE4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010FEA 60CA                       		bra.s	loc_104AE
00010FEC                            ; ===========================================================================
00010FEC                            
00010FEC                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010FEC 4A28 0038                  		tst.b	$38(a0)
00010FF0 6600                       		bne.s	loc_10500
00010FF2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010FF6 7000                       		moveq	#0,d0
00010FF8 1028 003C                  		move.b	$3C(a0),d0
00010FFC 4A32 0000                  		tst.b	(a2,d0.w)
00011000 6A00                       		bpl.s	loc_10512
00011002 117C 0001 0038             		move.b	#1,$38(a0)
00011008                            
00011008                            loc_10500:
00011008 7000                       		moveq	#0,d0
0001100A 1028 0016                  		move.b	$16(a0),d0
0001100E D040                       		add.w	d0,d0
00011010 B068 003A                  		cmp.w	$3A(a0),d0
00011014 6700                       		beq.s	loc_1052C
00011016 5468 003A                  		addq.w	#2,$3A(a0)
0001101A                            
0001101A                            loc_10512:
0001101A 3028 003A                  		move.w	$3A(a0),d0
0001101E 0828 0000 0022             		btst	#0,$22(a0)
00011024 6700                       		beq.s	loc_10520
00011026 4440                       		neg.w	d0
00011028                            
00011028                            loc_10520:
00011028 3228 0030                  		move.w	$30(a0),d1
0001102C D240                       		add.w	d0,d1
0001102E 3141 000C                  		move.w	d1,$C(a0)
00011032 4E75                       		rts	
00011034                            ; ===========================================================================
00011034                            
00011034                            loc_1052C:
00011034 5328 0028                  		subq.b	#1,$28(a0)
00011038 4228 0038                  		clr.b	$38(a0)
0001103C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011040 7000                       		moveq	#0,d0
00011042 1028 0023                  		move.b	$23(a0),d0
00011046 67D2                       		beq.s	loc_10512
00011048 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001104E 60CA                       		bra.s	loc_10512
00011050                            ; ===========================================================================
00011050                            
00011050                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00011050 4A28 0038                  		tst.b	$38(a0)
00011054 6600                       		bne.s	loc_1055E
00011056 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
0001105A 6700                       		beq.s	locret_10578
0001105C 117C 0001 0038             		move.b	#1,$38(a0)
00011062 4268 003A                  		clr.w	$3A(a0)
00011066                            
00011066                            loc_1055E:
00011066 5268 0008                  		addq.w	#1,8(a0)
0001106A 3168 0008 0034             		move.w	8(a0),$34(a0)
00011070 5268 003A                  		addq.w	#1,$3A(a0)
00011074 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
0001107A 6600                       		bne.s	locret_10578
0001107C 4228 0028                  		clr.b	$28(a0)
00011080                            
00011080                            locret_10578:
00011080 4E75                       		rts	
00011082                            ; ===========================================================================
00011082                            
00011082                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00011082 4A28 0038                  		tst.b	$38(a0)
00011086 6600                       		bne.s	loc_10598
00011088 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001108C 7000                       		moveq	#0,d0
0001108E 1028 003C                  		move.b	$3C(a0),d0
00011092 0832 0000 0000             		btst	#0,(a2,d0.w)
00011098 6700                       		beq.s	loc_105A2
0001109A 117C 0001 0038             		move.b	#1,$38(a0)
000110A0                            
000110A0                            loc_10598:
000110A0 4A68 003A                  		tst.w	$3A(a0)
000110A4 6700                       		beq.s	loc_105C0
000110A6 5568 003A                  		subq.w	#2,$3A(a0)
000110AA                            
000110AA                            loc_105A2:
000110AA 3028 003A                  		move.w	$3A(a0),d0
000110AE 0828 0000 0022             		btst	#0,$22(a0)
000110B4 6700                       		beq.s	loc_105B4
000110B6 4440                       		neg.w	d0
000110B8 0640 0080                  		addi.w	#$80,d0
000110BC                            
000110BC                            loc_105B4:
000110BC 3228 0034                  		move.w	$34(a0),d1
000110C0 D240                       		add.w	d0,d1
000110C2 3141 0008                  		move.w	d1,8(a0)
000110C6 4E75                       		rts	
000110C8                            ; ===========================================================================
000110C8                            
000110C8                            loc_105C0:
000110C8 5228 0028                  		addq.b	#1,$28(a0)
000110CC 4228 0038                  		clr.b	$38(a0)
000110D0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000110D4 7000                       		moveq	#0,d0
000110D6 1028 0023                  		move.b	$23(a0),d0
000110DA 67CE                       		beq.s	loc_105A2
000110DC 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000110E2 60C6                       		bra.s	loc_105A2
000110E4                            ; ===========================================================================
000110E4                            
000110E4                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
000110E4 4A28 0038                  		tst.b	$38(a0)
000110E8 6600                       		bne.s	loc_105F8
000110EA 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000110EE 7000                       		moveq	#0,d0
000110F0 1028 003C                  		move.b	$3C(a0),d0
000110F4 4A32 0000                  		tst.b	(a2,d0.w)
000110F8 6A00                       		bpl.s	loc_10606
000110FA 117C 0001 0038             		move.b	#1,$38(a0)
00011100                            
00011100                            loc_105F8:
00011100 303C 0080                  		move.w	#$80,d0
00011104 B068 003A                  		cmp.w	$3A(a0),d0
00011108 6700                       		beq.s	loc_10624
0001110A 5468 003A                  		addq.w	#2,$3A(a0)
0001110E                            
0001110E                            loc_10606:
0001110E 3028 003A                  		move.w	$3A(a0),d0
00011112 0828 0000 0022             		btst	#0,$22(a0)
00011118 6700                       		beq.s	loc_10618
0001111A 4440                       		neg.w	d0
0001111C 0640 0080                  		addi.w	#$80,d0
00011120                            
00011120                            loc_10618:
00011120 3228 0034                  		move.w	$34(a0),d1
00011124 D240                       		add.w	d0,d1
00011126 3141 0008                  		move.w	d1,8(a0)
0001112A 4E75                       		rts	
0001112C                            ; ===========================================================================
0001112C                            
0001112C                            loc_10624:
0001112C 5328 0028                  		subq.b	#1,$28(a0)
00011130 4228 0038                  		clr.b	$38(a0)
00011134 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011138 7000                       		moveq	#0,d0
0001113A 1028 0023                  		move.b	$23(a0),d0
0001113E 67CE                       		beq.s	loc_10606
00011140 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00011146 60C6                       		bra.s	loc_10606
00011148                            ; ===========================================================================
00011148                            
00011148                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00011148 323C 0010                  		move.w	#$10,d1
0001114C 7000                       		moveq	#0,d0
0001114E 1038 FE88                  		move.b	($FFFFFE88).w,d0
00011152 E248                       		lsr.w	#1,d0
00011154 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00011158 6000                       		bra.s	Obj56_Move_Sqr
0001115A                            ; ===========================================================================
0001115A                            
0001115A                            Obj56_Type09:				; XREF: Obj56_TypeIndex
0001115A 323C 0030                  		move.w	#$30,d1
0001115E 7000                       		moveq	#0,d0
00011160 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00011164 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00011168 6000                       		bra.s	Obj56_Move_Sqr
0001116A                            ; ===========================================================================
0001116A                            
0001116A                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
0001116A 323C 0050                  		move.w	#$50,d1
0001116E 7000                       		moveq	#0,d0
00011170 1038 FE90                  		move.b	($FFFFFE90).w,d0
00011174 3638 FE92                  		move.w	($FFFFFE92).w,d3
00011178 6000                       		bra.s	Obj56_Move_Sqr
0001117A                            ; ===========================================================================
0001117A                            
0001117A                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
0001117A 323C 0070                  		move.w	#$70,d1
0001117E 7000                       		moveq	#0,d0
00011180 1038 FE94                  		move.b	($FFFFFE94).w,d0
00011184 3638 FE96                  		move.w	($FFFFFE96).w,d3
00011188                            
00011188                            Obj56_Move_Sqr:
00011188 4A43                       		tst.w	d3
0001118A 6600                       		bne.s	loc_1068E
0001118C 5228 0022                  		addq.b	#1,$22(a0)
00011190 0228 0003 0022             		andi.b	#3,$22(a0)
00011196                            
00011196                            loc_1068E:
00011196 1428 0022                  		move.b	$22(a0),d2
0001119A 0202 0003                  		andi.b	#3,d2
0001119E 6600                       		bne.s	loc_106AE
000111A0 9041                       		sub.w	d1,d0
000111A2 D068 0034                  		add.w	$34(a0),d0
000111A6 3140 0008                  		move.w	d0,8(a0)
000111AA 4441                       		neg.w	d1
000111AC D268 0030                  		add.w	$30(a0),d1
000111B0 3141 000C                  		move.w	d1,$C(a0)
000111B4 4E75                       		rts	
000111B6                            ; ===========================================================================
000111B6                            
000111B6                            loc_106AE:
000111B6 5302                       		subq.b	#1,d2
000111B8 6600                       		bne.s	loc_106CC
000111BA 5341                       		subq.w	#1,d1
000111BC 9041                       		sub.w	d1,d0
000111BE 4440                       		neg.w	d0
000111C0 D068 0030                  		add.w	$30(a0),d0
000111C4 3140 000C                  		move.w	d0,$C(a0)
000111C8 5241                       		addq.w	#1,d1
000111CA D268 0034                  		add.w	$34(a0),d1
000111CE 3141 0008                  		move.w	d1,8(a0)
000111D2 4E75                       		rts	
000111D4                            ; ===========================================================================
000111D4                            
000111D4                            loc_106CC:
000111D4 5302                       		subq.b	#1,d2
000111D6 6600                       		bne.s	loc_106EA
000111D8 5341                       		subq.w	#1,d1
000111DA 9041                       		sub.w	d1,d0
000111DC 4440                       		neg.w	d0
000111DE D068 0034                  		add.w	$34(a0),d0
000111E2 3140 0008                  		move.w	d0,8(a0)
000111E6 5241                       		addq.w	#1,d1
000111E8 D268 0030                  		add.w	$30(a0),d1
000111EC 3141 000C                  		move.w	d1,$C(a0)
000111F0 4E75                       		rts	
000111F2                            ; ===========================================================================
000111F2                            
000111F2                            loc_106EA:
000111F2 9041                       		sub.w	d1,d0
000111F4 D068 0030                  		add.w	$30(a0),d0
000111F8 3140 000C                  		move.w	d0,$C(a0)
000111FC 4441                       		neg.w	d1
000111FE D268 0034                  		add.w	$34(a0),d1
00011202 3141 0008                  		move.w	d1,8(a0)
00011206 4E75                       		rts	
00011208                            ; ===========================================================================
00011208                            ; ---------------------------------------------------------------------------
00011208                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00011208                            ; ---------------------------------------------------------------------------
00011208                            Map_obj56:
00011208                            	include "_maps\obj56.asm"
00011208                            ; ---------------------------------------------------------------------------
00011208                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00011208                            ; ---------------------------------------------------------------------------
00011208 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
0001120C 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00011210 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00011214 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00011218 01                         byte_10710:	dc.b 1
00011219 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
0001121E 04                         byte_10716:	dc.b 4
0001121F E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00011224 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00011229 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
0001122E 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00011233 02                         byte_1072B:	dc.b 2
00011234 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00011239 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
0001123E 04                         byte_10736:	dc.b 4
0001123F E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00011244 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00011249 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
0001124E 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00011253 03                         byte_1074B:	dc.b 3
00011254 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00011259 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
0001125E 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00011263 01                         byte_1075B:	dc.b 1
00011264 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00011269 02                         byte_10761:	dc.b 2
0001126A E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
0001126F 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011274 04                         byte_1076C:	dc.b 4
00011275 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
0001127A F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
0001127F F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00011284 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
0001128A 00                         		even
0001128A 00                         		even
0001128A                            
0001128A                            ; ===========================================================================
0001128A                            ; ---------------------------------------------------------------------------
0001128A                            ; Object 57 - spiked balls (SYZ, LZ)
0001128A                            ; ---------------------------------------------------------------------------
0001128A                            
0001128A                            Obj57:					; XREF: Obj_Index
0001128A 7000                       		moveq	#0,d0
0001128C 1028 0024                  		move.b	$24(a0),d0
00011290 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00011294 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00011298                            ; ===========================================================================
00011298 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
0001129A 0000                       		dc.w Obj57_Move-Obj57_Index
0001129C 0000                       		dc.w Obj57_Display-Obj57_Index
0001129E                            ; ===========================================================================
0001129E                            
0001129E                            Obj57_Main:				; XREF: Obj57_Index
0001129E 5428 0024                  		addq.b	#2,$24(a0)
000112A2 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
000112AA 317C 03BA 0002             		move.w	#$3BA,2(a0)
000112B0 117C 0004 0001             		move.b	#4,1(a0)
000112B6 117C 0004 0018             		move.b	#4,$18(a0)
000112BC 117C 0008 0019             		move.b	#8,$19(a0)
000112C2 3168 0008 003A             		move.w	8(a0),$3A(a0)
000112C8 3168 000C 0038             		move.w	$C(a0),$38(a0)
000112CE 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
000112D4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000112DA 6600                       		bne.s	loc_107E8
000112DC 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
000112E2 317C 0310 0002             		move.w	#$310,2(a0)
000112E8 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
000112F0                            
000112F0                            loc_107E8:
000112F0 1228 0028                  		move.b	$28(a0),d1	; get object type
000112F4 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000112F8 4881                       		ext.w	d1
000112FA E741                       		asl.w	#3,d1		; multiply by 8
000112FC 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00011300 1028 0022                  		move.b	$22(a0),d0
00011304 E418                       		ror.b	#2,d0
00011306 0200 00C0                  		andi.b	#-$40,d0
0001130A 1140 0026                  		move.b	d0,$26(a0)
0001130E 45E8 0029                  		lea	$29(a0),a2
00011312 1228 0028                  		move.b	$28(a0),d1	; get object type
00011316 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
0001131A 14FC 0000                  		move.b	#0,(a2)+
0001131E 3601                       		move.w	d1,d3
00011320 E94B                       		lsl.w	#4,d3
00011322 1143 003C                  		move.b	d3,$3C(a0)
00011326 5341                       		subq.w	#1,d1		; set chain length (type-1)
00011328 6500                       		bcs.s	loc_10894
0001132A 0828 0003 0028             		btst	#3,$28(a0)
00011330 6700                       		beq.s	Obj57_MakeChain
00011332 5341                       		subq.w	#1,d1
00011334 6500                       		bcs.s	loc_10894
00011336                            
00011336                            Obj57_MakeChain:
00011336 6100 D23C                  		bsr.w	SingleObjLoad
0001133A 6600                       		bne.s	loc_10894
0001133C 5228 0029                  		addq.b	#1,$29(a0)
00011340 3A09                       		move.w	a1,d5
00011342 0445 D000                  		subi.w	#-$3000,d5
00011346 EC4D                       		lsr.w	#6,d5
00011348 0245 007F                  		andi.w	#$7F,d5
0001134C 14C5                       		move.b	d5,(a2)+
0001134E 137C 0004 0024             		move.b	#4,$24(a1)
00011354 1290                       		move.b	0(a0),0(a1)
00011356 2368 0004 0004             		move.l	4(a0),4(a1)
0001135C 3368 0002 0002             		move.w	2(a0),2(a1)
00011362 1368 0001 0001             		move.b	1(a0),1(a1)
00011368 1368 0018 0018             		move.b	$18(a0),$18(a1)
0001136E 1368 0019 0019             		move.b	$19(a0),$19(a1)
00011374 1368 0020 0020             		move.b	$20(a0),$20(a1)
0001137A 0403 0010                  		subi.b	#$10,d3
0001137E 1343 003C                  		move.b	d3,$3C(a1)
00011382 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00011388 6600                       		bne.s	loc_10890
0001138A 4A03                       		tst.b	d3
0001138C 6600                       		bne.s	loc_10890
0001138E 137C 0002 001A             		move.b	#2,$1A(a1)
00011394                            
00011394                            loc_10890:
00011394 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00011398                            
00011398                            loc_10894:
00011398 3A08                       		move.w	a0,d5
0001139A 0445 D000                  		subi.w	#-$3000,d5
0001139E EC4D                       		lsr.w	#6,d5
000113A0 0245 007F                  		andi.w	#$7F,d5
000113A4 14C5                       		move.b	d5,(a2)+
000113A6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000113AC 6600                       		bne.s	Obj57_Move
000113AE 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
000113B4 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
000113BA                            
000113BA                            Obj57_Move:				; XREF: Obj57_Index
000113BA 6100 0000                  		bsr.w	Obj57_MoveSub
000113BE 6000 0000                  		bra.w	Obj57_ChkDel
000113C2                            ; ===========================================================================
000113C2                            
000113C2                            Obj57_MoveSub:				; XREF: Obj57_Move
000113C2 3028 003E                  		move.w	$3E(a0),d0
000113C6 D168 0026                  		add.w	d0,$26(a0)
000113CA 1028 0026                  		move.b	$26(a0),d0
000113CE 4EB9 0000 33D4             		jsr	(CalcSine).l
000113D4 3428 0038                  		move.w	$38(a0),d2
000113D8 3628 003A                  		move.w	$3A(a0),d3
000113DC 45E8 0029                  		lea	$29(a0),a2
000113E0 7C00                       		moveq	#0,d6
000113E2 1C1A                       		move.b	(a2)+,d6
000113E4                            
000113E4                            Obj57_MoveLoop:
000113E4 7800                       		moveq	#0,d4
000113E6 181A                       		move.b	(a2)+,d4
000113E8 ED4C                       		lsl.w	#6,d4
000113EA 0684 00FF D000             		addi.l	#$FFD000,d4
000113F0 2244                       		movea.l	d4,a1
000113F2 7800                       		moveq	#0,d4
000113F4 1829 003C                  		move.b	$3C(a1),d4
000113F8 2A04                       		move.l	d4,d5
000113FA C9C0                       		muls.w	d0,d4
000113FC E084                       		asr.l	#8,d4
000113FE CBC1                       		muls.w	d1,d5
00011400 E085                       		asr.l	#8,d5
00011402 D842                       		add.w	d2,d4
00011404 DA43                       		add.w	d3,d5
00011406 3344 000C                  		move.w	d4,$C(a1)
0001140A 3345 0008                  		move.w	d5,8(a1)
0001140E 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00011412 4E75                       		rts	
00011414                            ; ===========================================================================
00011414                            
00011414                            Obj57_ChkDel:				; XREF: Obj57_Move
00011414 3028 003A                  		move.w	$3A(a0),d0
00011418 0240 FF80                  		andi.w	#$FF80,d0
0001141C 3238 F700                  		move.w	($FFFFF700).w,d1
00011420 0441 0080                  		subi.w	#$80,d1
00011424 0241 FF80                  		andi.w	#$FF80,d1
00011428 9041                       		sub.w	d1,d0
0001142A 0C40 0280                  		cmpi.w	#$280,d0
0001142E 6200 0000                  		bhi.w	Obj57_Delete
00011432 6000 CCAA                  		bra.w	DisplaySprite
00011436                            ; ===========================================================================
00011436                            
00011436                            Obj57_Delete:				; XREF: Obj57_ChkDel
00011436 7400                       		moveq	#0,d2
00011438 45E8 0029                  		lea	$29(a0),a2
0001143C 141A                       		move.b	(a2)+,d2
0001143E                            
0001143E                            Obj57_DelLoop:
0001143E 7000                       		moveq	#0,d0
00011440 101A                       		move.b	(a2)+,d0
00011442 ED48                       		lsl.w	#6,d0
00011444 0680 00FF D000             		addi.l	#$FFD000,d0
0001144A 2240                       		movea.l	d0,a1
0001144C 6100 CCCE                  		bsr.w	DeleteObject2
00011450 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00011454                            
00011454 4E75                       		rts	
00011456                            ; ===========================================================================
00011456                            
00011456                            Obj57_Display:				; XREF: Obj57_Index
00011456 6000 CC86                  		bra.w	DisplaySprite
0001145A                            ; ===========================================================================
0001145A                            ; ---------------------------------------------------------------------------
0001145A                            ; Sprite mappings - chain of spiked balls (SYZ)
0001145A                            ; ---------------------------------------------------------------------------
0001145A                            Map_obj57:
0001145A                            	include "_maps\obj57syz.asm"
0001145A                            ; ---------------------------------------------------------------------------
0001145A                            ; Sprite mappings - chain of spiked balls (SYZ)
0001145A                            ; ---------------------------------------------------------------------------
0001145A 0000                       		dc.w byte_10958-Map_obj57
0001145C 01                         byte_10958:	dc.b 1
0001145D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00011462                            		even
00011462                            		even
00011462                            
00011462                            ; ---------------------------------------------------------------------------
00011462                            ; Sprite mappings - spiked ball	on a chain (LZ)
00011462                            ; ---------------------------------------------------------------------------
00011462                            Map_obj57a:
00011462                            	include "_maps\obj57lz.asm"
00011462                            ; ---------------------------------------------------------------------------
00011462                            ; Sprite mappings - spiked ball	on a chain (LZ)
00011462                            ; ---------------------------------------------------------------------------
00011462 0000                       		dc.w byte_10964-Map_obj57a
00011464 0000                       		dc.w byte_1096A-Map_obj57a
00011466 0000                       		dc.w byte_10970-Map_obj57a
00011468 01                         byte_10964:	dc.b 1
00011469 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001146E 01                         byte_1096A:	dc.b 1
0001146F F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00011474 01                         byte_10970:	dc.b 1
00011475 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
0001147A                            		even
0001147A                            		even
0001147A                            
0001147A                            ; ===========================================================================
0001147A                            ; ---------------------------------------------------------------------------
0001147A                            ; Object 58 - giant spiked balls (SYZ)
0001147A                            ; ---------------------------------------------------------------------------
0001147A                            
0001147A                            Obj58:					; XREF: Obj_Index
0001147A 7000                       		moveq	#0,d0
0001147C 1028 0024                  		move.b	$24(a0),d0
00011480 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00011484 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00011488                            ; ===========================================================================
00011488 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
0001148A 0000                       		dc.w Obj58_Move-Obj58_Index
0001148C                            ; ===========================================================================
0001148C                            
0001148C                            Obj58_Main:				; XREF: Obj58_Index
0001148C 5428 0024                  		addq.b	#2,$24(a0)
00011490 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00011498 317C 0396 0002             		move.w	#$396,2(a0)
0001149E 117C 0004 0001             		move.b	#4,1(a0)
000114A4 117C 0004 0018             		move.b	#4,$18(a0)
000114AA 117C 0018 0019             		move.b	#$18,$19(a0)
000114B0 3168 0008 003A             		move.w	8(a0),$3A(a0)
000114B6 3168 000C 0038             		move.w	$C(a0),$38(a0)
000114BC 117C 0086 0020             		move.b	#$86,$20(a0)
000114C2 1228 0028                  		move.b	$28(a0),d1	; get object type
000114C6 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000114CA 4881                       		ext.w	d1
000114CC E741                       		asl.w	#3,d1		; multiply by 8
000114CE 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
000114D2 1028 0022                  		move.b	$22(a0),d0
000114D6 E418                       		ror.b	#2,d0
000114D8 0200 00C0                  		andi.b	#$C0,d0
000114DC 1140 0026                  		move.b	d0,$26(a0)
000114E0 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
000114E6                            
000114E6                            Obj58_Move:				; XREF: Obj58_Index
000114E6 7000                       		moveq	#0,d0
000114E8 1028 0028                  		move.b	$28(a0),d0	; get object type
000114EC 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
000114F0 D040                       		add.w	d0,d0
000114F2 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
000114F6 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
000114FA 3028 003A                  		move.w	$3A(a0),d0
000114FE 0240 FF80                  		andi.w	#$FF80,d0
00011502 3238 F700                  		move.w	($FFFFF700).w,d1
00011506 0441 0080                  		subi.w	#$80,d1
0001150A 0241 FF80                  		andi.w	#$FF80,d1
0001150E 9041                       		sub.w	d1,d0
00011510 0C40 0280                  		cmpi.w	#$280,d0
00011514 6200 CC04                  		bhi.w	DeleteObject
00011518 6000 CBC4                  		bra.w	DisplaySprite
0001151C                            ; ===========================================================================
0001151C 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
0001151E 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00011520 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00011522 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00011524                            ; ===========================================================================
00011524                            
00011524                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00011524 4E75                       		rts	
00011526                            ; ===========================================================================
00011526                            
00011526                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00011526 323C 0060                  		move.w	#$60,d1
0001152A 7000                       		moveq	#0,d0
0001152C 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011530 0828 0000 0022             		btst	#0,$22(a0)
00011536 6700                       		beq.s	loc_10A38
00011538 4440                       		neg.w	d0
0001153A D041                       		add.w	d1,d0
0001153C                            
0001153C                            loc_10A38:
0001153C 3228 003A                  		move.w	$3A(a0),d1
00011540 9240                       		sub.w	d0,d1
00011542 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011546 4E75                       		rts	
00011548                            ; ===========================================================================
00011548                            
00011548                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00011548 323C 0060                  		move.w	#$60,d1
0001154C 7000                       		moveq	#0,d0
0001154E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011552 0828 0000 0022             		btst	#0,$22(a0)
00011558 6700                       		beq.s	loc_10A5C
0001155A 4440                       		neg.w	d0
0001155C 0640 0080                  		addi.w	#$80,d0
00011560                            
00011560                            loc_10A5C:
00011560 3228 0038                  		move.w	$38(a0),d1
00011564 9240                       		sub.w	d0,d1
00011566 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
0001156A 4E75                       		rts	
0001156C                            ; ===========================================================================
0001156C                            
0001156C                            Obj58_Type03:				; XREF: Obj58_TypeIndex
0001156C 3028 003E                  		move.w	$3E(a0),d0
00011570 D168 0026                  		add.w	d0,$26(a0)
00011574 1028 0026                  		move.b	$26(a0),d0
00011578 4EB9 0000 33D4             		jsr	(CalcSine).l
0001157E 3428 0038                  		move.w	$38(a0),d2
00011582 3628 003A                  		move.w	$3A(a0),d3
00011586 7800                       		moveq	#0,d4
00011588 1828 003C                  		move.b	$3C(a0),d4
0001158C 2A04                       		move.l	d4,d5
0001158E C9C0                       		muls.w	d0,d4
00011590 E084                       		asr.l	#8,d4
00011592 CBC1                       		muls.w	d1,d5
00011594 E085                       		asr.l	#8,d5
00011596 D842                       		add.w	d2,d4
00011598 DA43                       		add.w	d3,d5
0001159A 3144 000C                  		move.w	d4,$C(a0)
0001159E 3145 0008                  		move.w	d5,8(a0)
000115A2 4E75                       		rts	
000115A4                            ; ===========================================================================
000115A4                            ; ---------------------------------------------------------------------------
000115A4                            ; Sprite mappings - SBZ	spiked ball on a chain
000115A4                            ; ---------------------------------------------------------------------------
000115A4                            Map_obj15b:
000115A4                            	include "_maps\obj15sbz.asm"
000115A4                            ; ---------------------------------------------------------------------------
000115A4                            ; Sprite mappings - spiked ball on a chain (SBZ)
000115A4                            ; ---------------------------------------------------------------------------
000115A4 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
000115A8 0000                       		dc.w byte_10AC6-Map_obj15b
000115AA 05                         byte_10AA6:	dc.b 5
000115AB E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
000115B0 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
000115B5 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
000115BA F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
000115BF 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
000115C4 01                         byte_10AC0:	dc.b 1
000115C5 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
000115CA 02                         byte_10AC6:	dc.b 2
000115CB F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
000115D0 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
000115D6 00                         		even
000115D6 00                         		even
000115D6                            
000115D6                            ; ===========================================================================
000115D6                            ; ---------------------------------------------------------------------------
000115D6                            ; Object 59 - platforms	that move when you stand on them (SLZ)
000115D6                            ; ---------------------------------------------------------------------------
000115D6                            
000115D6                            Obj59:					; XREF: Obj_Index
000115D6 7000                       		moveq	#0,d0
000115D8 1028 0024                  		move.b	$24(a0),d0
000115DC 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
000115E0 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
000115E4 3028 0032                  		move.w	$32(a0),d0
000115E8 0240 FF80                  		andi.w	#$FF80,d0
000115EC 3238 F700                  		move.w	($FFFFF700).w,d1
000115F0 0441 0080                  		subi.w	#$80,d1
000115F4 0241 FF80                  		andi.w	#$FF80,d1
000115F8 9041                       		sub.w	d1,d0
000115FA 0C40 0280                  		cmpi.w	#$280,d0
000115FE 6200 CB1A                  		bhi.w	DeleteObject
00011602 6000 CADA                  		bra.w	DisplaySprite
00011606                            ; ===========================================================================
00011606 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00011608 0000                       		dc.w Obj59_Platform-Obj59_Index
0001160A 0000                       		dc.w Obj59_Action-Obj59_Index
0001160C 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
0001160E                            
0001160E 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00011610                            
00011610 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00011612 2001                       		dc.b $20, 1
00011614 3401                       		dc.b $34, 1
00011616 1003                       		dc.b $10, 3
00011618 2003                       		dc.b $20, 3
0001161A 3403                       		dc.b $34, 3
0001161C 1401                       		dc.b $14, 1
0001161E 2401                       		dc.b $24, 1
00011620 2C01                       		dc.b $2C, 1
00011622 1403                       		dc.b $14, 3
00011624 2403                       		dc.b $24, 3
00011626 2C03                       		dc.b $2C, 3
00011628 2005                       		dc.b $20, 5
0001162A 2007                       		dc.b $20, 7
0001162C 3009                       		dc.b $30, 9
0001162E                            ; ===========================================================================
0001162E                            
0001162E                            Obj59_Main:				; XREF: Obj59_Index
0001162E 5428 0024                  		addq.b	#2,$24(a0)
00011632 7000                       		moveq	#0,d0
00011634 1028 0028                  		move.b	$28(a0),d0
00011638 6A00                       		bpl.s	Obj59_Main2
0001163A 5828 0024                  		addq.b	#4,$24(a0)
0001163E 0240 007F                  		andi.w	#$7F,d0
00011642 C0FC 0006                  		mulu.w	#6,d0
00011646 3140 003C                  		move.w	d0,$3C(a0)
0001164A 3140 003E                  		move.w	d0,$3E(a0)
0001164E 588F                       		addq.l	#4,sp
00011650 4E75                       		rts	
00011652                            ; ===========================================================================
00011652                            
00011652                            Obj59_Main2:
00011652 E648                       		lsr.w	#3,d0
00011654 0240 001E                  		andi.w	#$1E,d0
00011658 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
0001165C 115A 0019                  		move.b	(a2)+,$19(a0)
00011660 115A 001A                  		move.b	(a2)+,$1A(a0)
00011664 7000                       		moveq	#0,d0
00011666 1028 0028                  		move.b	$28(a0),d0
0001166A D040                       		add.w	d0,d0
0001166C 0240 001E                  		andi.w	#$1E,d0
00011670 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
00011674 101A                       		move.b	(a2)+,d0
00011676 E548                       		lsl.w	#2,d0
00011678 3140 003C                  		move.w	d0,$3C(a0)
0001167C 115A 0028                  		move.b	(a2)+,$28(a0)
00011680 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
00011688 317C 4000 0002             		move.w	#$4000,2(a0)
0001168E 117C 0004 0001             		move.b	#4,1(a0)
00011694 117C 0004 0018             		move.b	#4,$18(a0)
0001169A 3168 0008 0032             		move.w	8(a0),$32(a0)
000116A0 3168 000C 0030             		move.w	$C(a0),$30(a0)
000116A6                            
000116A6                            Obj59_Platform:				; XREF: Obj59_Index
000116A6 7200                       		moveq	#0,d1
000116A8 1228 0019                  		move.b	$19(a0),d1
000116AC 4EB9 0000 7ED0             		jsr	(PlatformObject).l
000116B2 6000 0000                  		bra.w	Obj59_Types
000116B6                            ; ===========================================================================
000116B6                            
000116B6                            Obj59_Action:				; XREF: Obj59_Index
000116B6 7200                       		moveq	#0,d1
000116B8 1228 0019                  		move.b	$19(a0),d1
000116BC 4EB9 0000 8044             		jsr	(ExitPlatform).l
000116C2 3F28 0008                  		move.w	8(a0),-(sp)
000116C6 6100 0000                  		bsr.w	Obj59_Types
000116CA 341F                       		move.w	(sp)+,d2
000116CC 4A10                       		tst.b	0(a0)
000116CE 6700                       		beq.s	locret_10BD4
000116D0 4EF9 0000 85AE             		jmp	(MvSonicOnPtfm2).l
000116D6                            ; ===========================================================================
000116D6                            
000116D6                            locret_10BD4:
000116D6 4E75                       		rts	
000116D8                            ; ===========================================================================
000116D8                            
000116D8                            Obj59_Types:
000116D8 7000                       		moveq	#0,d0
000116DA 1028 0028                  		move.b	$28(a0),d0
000116DE 0240 000F                  		andi.w	#$F,d0
000116E2 D040                       		add.w	d0,d0
000116E4 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
000116E8 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
000116EC                            ; ===========================================================================
000116EC 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000116F0 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000116F4 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000116F8 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000116FC 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00011700                            ; ===========================================================================
00011700                            
00011700                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00011700 4E75                       		rts	
00011702                            ; ===========================================================================
00011702                            
00011702                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00011702 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00011708 6600                       		bne.s	locret_10C0C
0001170A 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001170E                            
0001170E                            locret_10C0C:
0001170E 4E75                       		rts	
00011710                            ; ===========================================================================
00011710                            
00011710                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00011710 6100 0000                  		bsr.w	Obj59_Move
00011714 3028 0034                  		move.w	$34(a0),d0
00011718 4440                       		neg.w	d0
0001171A D068 0030                  		add.w	$30(a0),d0
0001171E 3140 000C                  		move.w	d0,$C(a0)
00011722 4E75                       		rts	
00011724                            ; ===========================================================================
00011724                            
00011724                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00011724 6100 0000                  		bsr.w	Obj59_Move
00011728 3028 0034                  		move.w	$34(a0),d0
0001172C D068 0030                  		add.w	$30(a0),d0
00011730 3140 000C                  		move.w	d0,$C(a0)
00011734 4E75                       		rts	
00011736                            ; ===========================================================================
00011736                            
00011736                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00011736 6100 0000                  		bsr.w	Obj59_Move
0001173A 3028 0034                  		move.w	$34(a0),d0
0001173E E240                       		asr.w	#1,d0
00011740 4440                       		neg.w	d0
00011742 D068 0030                  		add.w	$30(a0),d0
00011746 3140 000C                  		move.w	d0,$C(a0)
0001174A 3028 0034                  		move.w	$34(a0),d0
0001174E D068 0032                  		add.w	$32(a0),d0
00011752 3140 0008                  		move.w	d0,8(a0)
00011756 4E75                       		rts	
00011758                            ; ===========================================================================
00011758                            
00011758                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00011758 6100 0000                  		bsr.w	Obj59_Move
0001175C 3028 0034                  		move.w	$34(a0),d0
00011760 E240                       		asr.w	#1,d0
00011762 D068 0030                  		add.w	$30(a0),d0
00011766 3140 000C                  		move.w	d0,$C(a0)
0001176A 3028 0034                  		move.w	$34(a0),d0
0001176E 4440                       		neg.w	d0
00011770 D068 0032                  		add.w	$32(a0),d0
00011774 3140 0008                  		move.w	d0,8(a0)
00011778 4E75                       		rts	
0001177A                            ; ===========================================================================
0001177A                            
0001177A                            Obj59_Type09:				; XREF: Obj59_TypeIndex
0001177A 6100 0000                  		bsr.w	Obj59_Move
0001177E 3028 0034                  		move.w	$34(a0),d0
00011782 4440                       		neg.w	d0
00011784 D068 0030                  		add.w	$30(a0),d0
00011788 3140 000C                  		move.w	d0,$C(a0)
0001178C 4A28 0028                  		tst.b	$28(a0)
00011790 6700 0000                  		beq.w	loc_10C94
00011794 4E75                       		rts	
00011796                            ; ===========================================================================
00011796                            
00011796                            loc_10C94:
00011796 0828 0003 0022             		btst	#3,$22(a0)
0001179C 6700                       		beq.s	Obj59_Delete
0001179E 08E9 0001 0022             		bset	#1,$22(a1)
000117A4 08A9 0003 0022             		bclr	#3,$22(a1)
000117AA 137C 0002 0024             		move.b	#2,$24(a1)
000117B0                            
000117B0                            Obj59_Delete:
000117B0 6000 C968                  		bra.w	DeleteObject
000117B4                            
000117B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000117B4                            
000117B4                            
000117B4                            Obj59_Move:				; XREF: Obj59_Type02; et al
000117B4 3028 0038                  		move.w	$38(a0),d0
000117B8 4A28 003A                  		tst.b	$3A(a0)
000117BC 6600                       		bne.s	loc_10CC8
000117BE 0C40 0800                  		cmpi.w	#$800,d0
000117C2 6400                       		bcc.s	loc_10CD0
000117C4 0640 0010                  		addi.w	#$10,d0
000117C8 6000                       		bra.s	loc_10CD0
000117CA                            ; ===========================================================================
000117CA                            
000117CA                            loc_10CC8:
000117CA 4A40                       		tst.w	d0
000117CC 6700                       		beq.s	loc_10CD0
000117CE 0440 0010                  		subi.w	#$10,d0
000117D2                            
000117D2                            loc_10CD0:
000117D2 3140 0038                  		move.w	d0,$38(a0)
000117D6 48C0                       		ext.l	d0
000117D8 E180                       		asl.l	#8,d0
000117DA D0A8 0034                  		add.l	$34(a0),d0
000117DE 2140 0034                  		move.l	d0,$34(a0)
000117E2 4840                       		swap	d0
000117E4 3428 003C                  		move.w	$3C(a0),d2
000117E8 B042                       		cmp.w	d2,d0
000117EA 6300                       		bls.s	loc_10CF0
000117EC 117C 0001 003A             		move.b	#1,$3A(a0)
000117F2                            
000117F2                            loc_10CF0:
000117F2 D442                       		add.w	d2,d2
000117F4 B042                       		cmp.w	d2,d0
000117F6 6600                       		bne.s	locret_10CFA
000117F8 4228 0028                  		clr.b	$28(a0)
000117FC                            
000117FC                            locret_10CFA:
000117FC 4E75                       		rts	
000117FE                            ; End of function Obj59_Move
000117FE                            
000117FE                            ; ===========================================================================
000117FE                            
000117FE                            Obj59_MakeMulti:			; XREF: Obj59_Index
000117FE 5368 003C                  		subq.w	#1,$3C(a0)
00011802 6600                       		bne.s	Obj59_ChkDel
00011804 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
0001180A 6100 CD68                  		bsr.w	SingleObjLoad
0001180E 6600                       		bne.s	Obj59_ChkDel
00011810 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00011814 3368 0008 0008             		move.w	8(a0),8(a1)
0001181A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011820 137C 000E 0028             		move.b	#$E,$28(a1)
00011826                            
00011826                            Obj59_ChkDel:
00011826 588F                       		addq.l	#4,sp
00011828 3028 0008                  		move.w	8(a0),d0
0001182C 0240 FF80                  		andi.w	#$FF80,d0
00011830 3238 F700                  		move.w	($FFFFF700).w,d1
00011834 0441 0080                  		subi.w	#$80,d1
00011838 0241 FF80                  		andi.w	#$FF80,d1
0001183C 9041                       		sub.w	d1,d0
0001183E 0C40 0280                  		cmpi.w	#$280,d0
00011842 6200 C8D6                  		bhi.w	DeleteObject
00011846 4E75                       		rts	
00011848                            ; ===========================================================================
00011848                            ; ---------------------------------------------------------------------------
00011848                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011848                            ; ---------------------------------------------------------------------------
00011848                            Map_obj59:
00011848                            	include "_maps\obj59.asm"
00011848                            ; ---------------------------------------------------------------------------
00011848                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011848                            ; ---------------------------------------------------------------------------
00011848 0000                       		dc.w byte_10D4A-Map_obj59
0001184A 03                         byte_10D4A:	dc.b 3
0001184B F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00011850 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00011855 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
0001185A                            		even
0001185A                            		even
0001185A                            
0001185A                            ; ===========================================================================
0001185A                            ; ---------------------------------------------------------------------------
0001185A                            ; Object 5A - platforms	moving in circles (SLZ)
0001185A                            ; ---------------------------------------------------------------------------
0001185A                            
0001185A                            Obj5A:					; XREF: Obj_Index
0001185A 7000                       		moveq	#0,d0
0001185C 1028 0024                  		move.b	$24(a0),d0
00011860 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
00011864 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
00011868 3028 0032                  		move.w	$32(a0),d0
0001186C 0240 FF80                  		andi.w	#$FF80,d0
00011870 3238 F700                  		move.w	($FFFFF700).w,d1
00011874 0441 0080                  		subi.w	#$80,d1
00011878 0241 FF80                  		andi.w	#$FF80,d1
0001187C 9041                       		sub.w	d1,d0
0001187E 0C40 0280                  		cmpi.w	#$280,d0
00011882 6200 C896                  		bhi.w	DeleteObject
00011886 6000 C856                  		bra.w	DisplaySprite
0001188A                            ; ===========================================================================
0001188A 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
0001188C 0000                       		dc.w Obj5A_Platform-Obj5A_Index
0001188E 0000                       		dc.w Obj5A_Action-Obj5A_Index
00011890                            ; ===========================================================================
00011890                            
00011890                            Obj5A_Main:				; XREF: Obj5A_Index
00011890 5428 0024                  		addq.b	#2,$24(a0)
00011894 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
0001189C 317C 4000 0002             		move.w	#$4000,2(a0)
000118A2 117C 0004 0001             		move.b	#4,1(a0)
000118A8 117C 0004 0018             		move.b	#4,$18(a0)
000118AE 117C 0018 0019             		move.b	#$18,$19(a0)
000118B4 3168 0008 0032             		move.w	8(a0),$32(a0)
000118BA 3168 000C 0030             		move.w	$C(a0),$30(a0)
000118C0                            
000118C0                            Obj5A_Platform:				; XREF: Obj5A_Index
000118C0 7200                       		moveq	#0,d1
000118C2 1228 0019                  		move.b	$19(a0),d1
000118C6 4EB9 0000 7ED0             		jsr	(PlatformObject).l
000118CC 6000 0000                  		bra.w	Obj5A_Types
000118D0                            ; ===========================================================================
000118D0                            
000118D0                            Obj5A_Action:				; XREF: Obj5A_Index
000118D0 7200                       		moveq	#0,d1
000118D2 1228 0019                  		move.b	$19(a0),d1
000118D6 4EB9 0000 8044             		jsr	(ExitPlatform).l
000118DC 3F28 0008                  		move.w	8(a0),-(sp)
000118E0 6100 0000                  		bsr.w	Obj5A_Types
000118E4 341F                       		move.w	(sp)+,d2
000118E6 4EF9 0000 85AE             		jmp	(MvSonicOnPtfm2).l
000118EC                            ; ===========================================================================
000118EC                            
000118EC                            Obj5A_Types:
000118EC 7000                       		moveq	#0,d0
000118EE 1028 0028                  		move.b	$28(a0),d0
000118F2 0240 000C                  		andi.w	#$C,d0
000118F6 E248                       		lsr.w	#1,d0
000118F8 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
000118FC 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00011900                            ; ===========================================================================
00011900 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00011902 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00011904                            ; ===========================================================================
00011904                            
00011904                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00011904 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011908 0401 0050                  		subi.b	#$50,d1
0001190C 4881                       		ext.w	d1
0001190E 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011912 0402 0050                  		subi.b	#$50,d2
00011916 4882                       		ext.w	d2
00011918 0828 0000 0028             		btst	#0,$28(a0)
0001191E 6700                       		beq.s	loc_10E24
00011920 4441                       		neg.w	d1
00011922 4442                       		neg.w	d2
00011924                            
00011924                            loc_10E24:
00011924 0828 0001 0028             		btst	#1,$28(a0)
0001192A 6700                       		beq.s	loc_10E30
0001192C 4441                       		neg.w	d1
0001192E C342                       		exg	d1,d2
00011930                            
00011930                            loc_10E30:
00011930 D268 0032                  		add.w	$32(a0),d1
00011934 3141 0008                  		move.w	d1,8(a0)
00011938 D468 0030                  		add.w	$30(a0),d2
0001193C 3142 000C                  		move.w	d2,$C(a0)
00011940 4E75                       		rts	
00011942                            ; ===========================================================================
00011942                            
00011942                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00011942 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011946 0401 0050                  		subi.b	#$50,d1
0001194A 4881                       		ext.w	d1
0001194C 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011950 0402 0050                  		subi.b	#$50,d2
00011954 4882                       		ext.w	d2
00011956 0828 0000 0028             		btst	#0,$28(a0)
0001195C 6700                       		beq.s	loc_10E62
0001195E 4441                       		neg.w	d1
00011960 4442                       		neg.w	d2
00011962                            
00011962                            loc_10E62:
00011962 0828 0001 0028             		btst	#1,$28(a0)
00011968 6700                       		beq.s	loc_10E6E
0001196A 4441                       		neg.w	d1
0001196C C342                       		exg	d1,d2
0001196E                            
0001196E                            loc_10E6E:
0001196E 4441                       		neg.w	d1
00011970 D268 0032                  		add.w	$32(a0),d1
00011974 3141 0008                  		move.w	d1,8(a0)
00011978 D468 0030                  		add.w	$30(a0),d2
0001197C 3142 000C                  		move.w	d2,$C(a0)
00011980 4E75                       		rts	
00011982                            ; ===========================================================================
00011982                            ; ---------------------------------------------------------------------------
00011982                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011982                            ; ---------------------------------------------------------------------------
00011982                            Map_obj5A:
00011982                            	include "_maps\obj5A.asm"
00011982                            ; ---------------------------------------------------------------------------
00011982                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011982                            ; ---------------------------------------------------------------------------
00011982 0000                       		dc.w byte_10E84-Map_obj5A
00011984 02                         byte_10E84:	dc.b 2
00011985 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
0001198A F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00011990 00                         		even
00011990 00                         		even
00011990                            
00011990                            ; ===========================================================================
00011990                            ; ---------------------------------------------------------------------------
00011990                            ; Object 5B - blocks that form a staircase (SLZ)
00011990                            ; ---------------------------------------------------------------------------
00011990                            
00011990                            Obj5B:					; XREF: Obj_Index
00011990 7000                       		moveq	#0,d0
00011992 1028 0024                  		move.b	$24(a0),d0
00011996 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
0001199A 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
0001199E 3028 0030                  		move.w	$30(a0),d0
000119A2 0240 FF80                  		andi.w	#$FF80,d0
000119A6 3238 F700                  		move.w	($FFFFF700).w,d1
000119AA 0441 0080                  		subi.w	#$80,d1
000119AE 0241 FF80                  		andi.w	#$FF80,d1
000119B2 9041                       		sub.w	d1,d0
000119B4 0C40 0280                  		cmpi.w	#$280,d0
000119B8 6200 C760                  		bhi.w	DeleteObject
000119BC 6000 C720                  		bra.w	DisplaySprite
000119C0                            ; ===========================================================================
000119C0 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
000119C2 0000                       		dc.w Obj5B_Move-Obj5B_Index
000119C4 0000                       		dc.w Obj5B_Solid-Obj5B_Index
000119C6                            ; ===========================================================================
000119C6                            
000119C6                            Obj5B_Main:				; XREF: Obj5B_Index
000119C6 5428 0024                  		addq.b	#2,$24(a0)
000119CA 7638                       		moveq	#$38,d3
000119CC 7801                       		moveq	#1,d4
000119CE 0828 0000 0022             		btst	#0,$22(a0)
000119D4 6700                       		beq.s	loc_10EDA
000119D6 763B                       		moveq	#$3B,d3
000119D8 78FF                       		moveq	#-1,d4
000119DA                            
000119DA                            loc_10EDA:
000119DA 3428 0008                  		move.w	8(a0),d2
000119DE 2248                       		movea.l	a0,a1
000119E0 7203                       		moveq	#3,d1
000119E2 6000                       		bra.s	Obj5B_MakeBlocks
000119E4                            ; ===========================================================================
000119E4                            
000119E4                            Obj5B_Loop:
000119E4 6100 CBA4                  		bsr.w	SingleObjLoad2
000119E8 6600 0000                  		bne.w	Obj5B_Move
000119EC 137C 0004 0024             		move.b	#4,$24(a1)
000119F2                            
000119F2                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
000119F2 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
000119F6 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
000119FE 337C 4000 0002             		move.w	#$4000,2(a1)
00011A04 137C 0004 0001             		move.b	#4,1(a1)
00011A0A 137C 0003 0018             		move.b	#3,$18(a1)
00011A10 137C 0010 0019             		move.b	#$10,$19(a1)
00011A16 1368 0028 0028             		move.b	$28(a0),$28(a1)
00011A1C 3342 0008                  		move.w	d2,8(a1)
00011A20 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011A26 3368 0008 0030             		move.w	8(a0),$30(a1)
00011A2C 3369 000C 0032             		move.w	$C(a1),$32(a1)
00011A32 0642 0020                  		addi.w	#$20,d2
00011A36 1343 0037                  		move.b	d3,$37(a1)
00011A3A 2348 003C                  		move.l	a0,$3C(a1)
00011A3E D604                       		add.b	d4,d3
00011A40 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00011A44                            
00011A44                            Obj5B_Move:				; XREF: Obj5B_Index
00011A44 7000                       		moveq	#0,d0
00011A46 1028 0028                  		move.b	$28(a0),d0
00011A4A 0240 0007                  		andi.w	#7,d0
00011A4E D040                       		add.w	d0,d0
00011A50 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00011A54 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00011A58                            
00011A58                            Obj5B_Solid:				; XREF: Obj5B_Index
00011A58 2468 003C                  		movea.l	$3C(a0),a2
00011A5C 7000                       		moveq	#0,d0
00011A5E 1028 0037                  		move.b	$37(a0),d0
00011A62 1032 0000                  		move.b	(a2,d0.w),d0
00011A66 D068 0032                  		add.w	$32(a0),d0
00011A6A 3140 000C                  		move.w	d0,$C(a0)
00011A6E 7200                       		moveq	#0,d1
00011A70 1228 0019                  		move.b	$19(a0),d1
00011A74 0641 000B                  		addi.w	#$B,d1
00011A78 343C 0010                  		move.w	#$10,d2
00011A7C 363C 0011                  		move.w	#$11,d3
00011A80 3828 0008                  		move.w	8(a0),d4
00011A84 6100 EA42                  		bsr.w	SolidObject
00011A88 4A04                       		tst.b	d4
00011A8A 6A00                       		bpl.s	loc_10F92
00011A8C 1544 0036                  		move.b	d4,$36(a2)
00011A90                            
00011A90                            loc_10F92:
00011A90 0828 0003 0022             		btst	#3,$22(a0)
00011A96 6700                       		beq.s	locret_10FA0
00011A98 157C 0001 0036             		move.b	#1,$36(a2)
00011A9E                            
00011A9E                            locret_10FA0:
00011A9E 4E75                       		rts	
00011AA0                            ; ===========================================================================
00011AA0 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00011AA2 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011AA4 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00011AA6 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011AA8                            ; ===========================================================================
00011AA8                            
00011AA8                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00011AA8 4A68 0034                  		tst.w	$34(a0)
00011AAC 6600                       		bne.s	loc_10FC0
00011AAE 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00011AB4 6600                       		bne.s	locret_10FBE
00011AB6 317C 001E 0034             		move.w	#$1E,$34(a0)
00011ABC                            
00011ABC                            locret_10FBE:
00011ABC 4E75                       		rts	
00011ABE                            ; ===========================================================================
00011ABE                            
00011ABE                            loc_10FC0:
00011ABE 5368 0034                  		subq.w	#1,$34(a0)
00011AC2 66F8                       		bne.s	locret_10FBE
00011AC4 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011AC8 4E75                       		rts	
00011ACA                            ; ===========================================================================
00011ACA                            
00011ACA                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00011ACA 4A68 0034                  		tst.w	$34(a0)
00011ACE 6600                       		bne.s	loc_10FE0
00011AD0 4A28 0036                  		tst.b	$36(a0)
00011AD4 6A00                       		bpl.s	locret_10FDE
00011AD6 317C 003C 0034             		move.w	#$3C,$34(a0)
00011ADC                            
00011ADC                            locret_10FDE:
00011ADC 4E75                       		rts	
00011ADE                            ; ===========================================================================
00011ADE                            
00011ADE                            loc_10FE0:
00011ADE 5368 0034                  		subq.w	#1,$34(a0)
00011AE2 6600                       		bne.s	loc_10FEC
00011AE4 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011AE8 4E75                       		rts	
00011AEA                            ; ===========================================================================
00011AEA                            
00011AEA                            loc_10FEC:
00011AEA 43E8 0038                  		lea	$38(a0),a1
00011AEE 3028 0034                  		move.w	$34(a0),d0
00011AF2 E408                       		lsr.b	#2,d0
00011AF4 0200 0001                  		andi.b	#1,d0
00011AF8 12C0                       		move.b	d0,(a1)+
00011AFA 0A00 0001                  		eori.b	#1,d0
00011AFE 12C0                       		move.b	d0,(a1)+
00011B00 0A00 0001                  		eori.b	#1,d0
00011B04 12C0                       		move.b	d0,(a1)+
00011B06 0A00 0001                  		eori.b	#1,d0
00011B0A 12C0                       		move.b	d0,(a1)+
00011B0C 4E75                       		rts	
00011B0E                            ; ===========================================================================
00011B0E                            
00011B0E                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00011B0E 43E8 0038                  		lea	$38(a0),a1
00011B12 0C11 0080                  		cmpi.b	#$80,(a1)
00011B16 6700                       		beq.s	locret_11038
00011B18 5211                       		addq.b	#1,(a1)
00011B1A 7200                       		moveq	#0,d1
00011B1C 1219                       		move.b	(a1)+,d1
00011B1E 4841                       		swap	d1
00011B20 E289                       		lsr.l	#1,d1
00011B22 2401                       		move.l	d1,d2
00011B24 E289                       		lsr.l	#1,d1
00011B26 2601                       		move.l	d1,d3
00011B28 D682                       		add.l	d2,d3
00011B2A 4841                       		swap	d1
00011B2C 4842                       		swap	d2
00011B2E 4843                       		swap	d3
00011B30 12C3                       		move.b	d3,(a1)+
00011B32 12C2                       		move.b	d2,(a1)+
00011B34 12C1                       		move.b	d1,(a1)+
00011B36                            
00011B36                            locret_11038:
00011B36 4E75                       		rts	
00011B38 4E75                       		rts	
00011B3A                            ; ===========================================================================
00011B3A                            ; ---------------------------------------------------------------------------
00011B3A                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011B3A                            ; ---------------------------------------------------------------------------
00011B3A                            Map_obj5B:
00011B3A                            	include "_maps\obj5B.asm"
00011B3A                            ; ---------------------------------------------------------------------------
00011B3A                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011B3A                            ; ---------------------------------------------------------------------------
00011B3A 0000                       		dc.w byte_1103E-Map_obj5B
00011B3C 01                         byte_1103E:	dc.b 1
00011B3D F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00011B42                            		even
00011B42                            		even
00011B42                            
00011B42                            ; ===========================================================================
00011B42                            ; ---------------------------------------------------------------------------
00011B42                            ; Object 5C - metal girders in foreground (SLZ)
00011B42                            ; ---------------------------------------------------------------------------
00011B42                            
00011B42                            Obj5C:					; XREF: Obj_Index
00011B42 7000                       		moveq	#0,d0
00011B44 1028 0024                  		move.b	$24(a0),d0
00011B48 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00011B4C 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00011B50                            ; ===========================================================================
00011B50 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00011B52 0000                       		dc.w Obj5C_Display-Obj5C_Index
00011B54                            ; ===========================================================================
00011B54                            
00011B54                            Obj5C_Main:				; XREF: Obj5C_Index
00011B54 5428 0024                  		addq.b	#2,$24(a0)
00011B58 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00011B60 317C 83CC 0002             		move.w	#$83CC,2(a0)
00011B66 117C 0010 0019             		move.b	#$10,$19(a0)
00011B6C                            
00011B6C                            Obj5C_Display:				; XREF: Obj5C_Index
00011B6C 2238 F700                  		move.l	($FFFFF700).w,d1
00011B70 D281                       		add.l	d1,d1
00011B72 4841                       		swap	d1
00011B74 4441                       		neg.w	d1
00011B76 3141 0008                  		move.w	d1,8(a0)
00011B7A 2238 F704                  		move.l	($FFFFF704).w,d1
00011B7E D281                       		add.l	d1,d1
00011B80 4841                       		swap	d1
00011B82 0241 003F                  		andi.w	#$3F,d1
00011B86 4441                       		neg.w	d1
00011B88 0641 0100                  		addi.w	#$100,d1
00011B8C 3141 000A                  		move.w	d1,$A(a0)
00011B90 6000 C54C                  		bra.w	DisplaySprite
00011B94                            ; ===========================================================================
00011B94                            ; ---------------------------------------------------------------------------
00011B94                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011B94                            ; ---------------------------------------------------------------------------
00011B94                            Map_obj5C:
00011B94                            	include "_maps\obj5C.asm"
00011B94                            ; ---------------------------------------------------------------------------
00011B94                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011B94                            ; ---------------------------------------------------------------------------
00011B94 0000                       		dc.w byte_11098-Map_obj5C
00011B96 09                         byte_11098:	dc.b 9
00011B97 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00011B9C A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00011BA1 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00011BA6 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00011BAB 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00011BB0 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00011BB5 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00011BBA 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00011BBF 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00011BC4                            		even
00011BC4                            		even
00011BC4                            
00011BC4                            ; ===========================================================================
00011BC4                            ; ---------------------------------------------------------------------------
00011BC4                            ; Object 1B - water surface (LZ)
00011BC4                            ; ---------------------------------------------------------------------------
00011BC4                            
00011BC4                            Obj1B:					; XREF: Obj_Index
00011BC4 7000                       		moveq	#0,d0
00011BC6 1028 0024                  		move.b	$24(a0),d0
00011BCA 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00011BCE 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00011BD2                            ; ===========================================================================
00011BD2 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00011BD4 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011BD6                            ; ===========================================================================
00011BD6                            
00011BD6                            Obj1B_Main:				; XREF: Obj1B_Index
00011BD6 5428 0024                  		addq.b	#2,$24(a0)
00011BDA 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00011BE2 317C C300 0002             		move.w	#$C300,2(a0)
00011BE8 117C 0004 0001             		move.b	#4,1(a0)
00011BEE 117C 0080 0019             		move.b	#$80,$19(a0)
00011BF4 3168 0008 0030             		move.w	8(a0),$30(a0)
00011BFA                            
00011BFA                            Obj1B_Action:				; XREF: Obj1B_Index
00011BFA 3238 F700                  		move.w	($FFFFF700).w,d1
00011BFE 0241 FFE0                  		andi.w	#$FFE0,d1
00011C02 D268 0030                  		add.w	$30(a0),d1
00011C06 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00011C0C 6700                       		beq.s	loc_11114
00011C0E 0641 0020                  		addi.w	#$20,d1
00011C12                            
00011C12                            loc_11114:
00011C12 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00011C16 3238 F646                  		move.w	($FFFFF646).w,d1
00011C1A 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00011C1E 4A28 0032                  		tst.b	$32(a0)
00011C22 6600                       		bne.s	Obj1B_Animate
00011C24 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00011C2A 6700                       		beq.s	loc_1114A	; if not, branch
00011C2C 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00011C30 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00011C36 6000                       		bra.s	Obj1B_Display
00011C38                            ; ===========================================================================
00011C38                            
00011C38                            Obj1B_Animate:				; XREF: loc_11114
00011C38 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00011C3C 6600                       		bne.s	Obj1B_Display	; if yes, branch
00011C3E 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00011C44 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00011C48                            
00011C48                            loc_1114A:				; XREF: loc_11114
00011C48 5328 001E                  		subq.b	#1,$1E(a0)
00011C4C 6A00                       		bpl.s	Obj1B_Display
00011C4E 117C 0007 001E             		move.b	#7,$1E(a0)
00011C54 5228 001A                  		addq.b	#1,$1A(a0)
00011C58 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00011C5E 6500                       		bcs.s	Obj1B_Display
00011C60 117C 0000 001A             		move.b	#0,$1A(a0)
00011C66                            
00011C66                            Obj1B_Display:
00011C66 6000 C476                  		bra.w	DisplaySprite
00011C6A                            ; ===========================================================================
00011C6A                            ; ---------------------------------------------------------------------------
00011C6A                            ; Sprite mappings - water surface (LZ)
00011C6A                            ; ---------------------------------------------------------------------------
00011C6A                            Map_obj1B:
00011C6A                            	include "_maps\obj1B.asm"
00011C6A                            ; ---------------------------------------------------------------------------
00011C6A                            ; Sprite mappings - water surface (LZ)
00011C6A                            ; ---------------------------------------------------------------------------
00011C6A 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00011C6E 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00011C72 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00011C76 03                         byte_11178:	dc.b 3
00011C77 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011C7C FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011C81 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011C86 03                         byte_11188:	dc.b 3
00011C87 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011C8C FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011C91 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011C96 03                         byte_11198:	dc.b 3
00011C97 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011C9C FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011CA1 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011CA6 06                         byte_111A8:	dc.b 6
00011CA7 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011CAC FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00011CB1 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011CB6 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00011CBB FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011CC0 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00011CC5 06                         byte_111C7:	dc.b 6
00011CC6 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011CCB FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00011CD0 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011CD5 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011CDA FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011CDF FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00011CE4 06                         byte_111E6:	dc.b 6
00011CE5 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011CEA FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00011CEF FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011CF4 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00011CF9 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011CFE FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00011D04 00                         		even
00011D04 00                         		even
00011D04                            
00011D04                            ; ===========================================================================
00011D04                            ; ---------------------------------------------------------------------------
00011D04                            ; Object 0B - pole that	breaks (LZ)
00011D04                            ; ---------------------------------------------------------------------------
00011D04                            
00011D04                            Obj0B:					; XREF: Obj_Index
00011D04 7000                       		moveq	#0,d0
00011D06 1028 0024                  		move.b	$24(a0),d0
00011D0A 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00011D0E 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00011D12                            ; ===========================================================================
00011D12 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00011D14 0000                       		dc.w Obj0B_Action-Obj0B_Index
00011D16 0000                       		dc.w Obj0B_Display-Obj0B_Index
00011D18                            ; ===========================================================================
00011D18                            
00011D18                            Obj0B_Main:				; XREF: Obj0B_Index
00011D18 5428 0024                  		addq.b	#2,$24(a0)
00011D1C 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00011D24 317C 43DE 0002             		move.w	#$43DE,2(a0)
00011D2A 117C 0004 0001             		move.b	#4,1(a0)
00011D30 117C 0008 0019             		move.b	#8,$19(a0)
00011D36 117C 0004 0018             		move.b	#4,$18(a0)
00011D3C 117C 00E1 0020             		move.b	#$E1,$20(a0)
00011D42 7000                       		moveq	#0,d0
00011D44 1028 0028                  		move.b	$28(a0),d0	; get object type
00011D48 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011D4C 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00011D50                            
00011D50                            Obj0B_Action:				; XREF: Obj0B_Index
00011D50 4A28 0032                  		tst.b	$32(a0)
00011D54 6700                       		beq.s	Obj0B_Grab
00011D56 4A68 0030                  		tst.w	$30(a0)
00011D5A 6700                       		beq.s	Obj0B_MoveUp
00011D5C 5368 0030                  		subq.w	#1,$30(a0)
00011D60 6600                       		bne.s	Obj0B_MoveUp
00011D62 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00011D68 6000                       		bra.s	Obj0B_Release
00011D6A                            ; ===========================================================================
00011D6A                            
00011D6A                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00011D6A 43F8 D000                  		lea	($FFFFD000).w,a1
00011D6E 3028 000C                  		move.w	$C(a0),d0
00011D72 0440 0018                  		subi.w	#$18,d0
00011D76 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00011D7C 6700                       		beq.s	Obj0B_MoveDown
00011D7E 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00011D82 B069 000C                  		cmp.w	$C(a1),d0
00011D86 6500                       		bcs.s	Obj0B_MoveDown
00011D88 3340 000C                  		move.w	d0,$C(a1)
00011D8C                            
00011D8C                            Obj0B_MoveDown:
00011D8C 0640 0024                  		addi.w	#$24,d0
00011D90 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011D96 6700                       		beq.s	Obj0B_LetGo
00011D98 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011D9C B069 000C                  		cmp.w	$C(a1),d0
00011DA0 6400                       		bcc.s	Obj0B_LetGo
00011DA2 3340 000C                  		move.w	d0,$C(a1)
00011DA6                            
00011DA6                            Obj0B_LetGo:
00011DA6 1038 F603                  		move.b	($FFFFF603).w,d0
00011DAA 0240 0070                  		andi.w	#$70,d0
00011DAE 6700                       		beq.s	Obj0B_Display
00011DB0                            
00011DB0                            Obj0B_Release:				; XREF: Obj0B_Action
00011DB0 4228 0020                  		clr.b	$20(a0)
00011DB4 5428 0024                  		addq.b	#2,$24(a0)
00011DB8 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011DBC 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011DC0 4228 0032                  		clr.b	$32(a0)
00011DC4 6000                       		bra.s	Obj0B_Display
00011DC6                            ; ===========================================================================
00011DC6                            
00011DC6                            Obj0B_Grab:				; XREF: Obj0B_Action
00011DC6 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011DCA 6700                       		beq.s	Obj0B_Display	; if not, branch
00011DCC 43F8 D000                  		lea	($FFFFD000).w,a1
00011DD0 3028 0008                  		move.w	8(a0),d0
00011DD4 0640 0014                  		addi.w	#$14,d0
00011DD8 B069 0008                  		cmp.w	8(a1),d0
00011DDC 6400                       		bcc.s	Obj0B_Display
00011DDE 4228 0021                  		clr.b	$21(a0)
00011DE2 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011DE8 6400                       		bcc.s	Obj0B_Display
00011DEA 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011DEE 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011DF2 3028 0008                  		move.w	8(a0),d0
00011DF6 0640 0014                  		addi.w	#$14,d0
00011DFA 3340 0008                  		move.w	d0,8(a1)
00011DFE 08A9 0000 0022             		bclr	#0,$22(a1)
00011E04 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011E0A 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00011E10 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011E16 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011E1C                            
00011E1C                            Obj0B_Display:				; XREF: Obj0B_Index
00011E1C 6000 E382                  		bra.w	MarkObjGone
00011E20                            ; ===========================================================================
00011E20                            ; ---------------------------------------------------------------------------
00011E20                            ; Sprite mappings - pole that breaks (LZ)
00011E20                            ; ---------------------------------------------------------------------------
00011E20                            Map_obj0B:
00011E20                            	include "_maps\obj0B.asm"
00011E20                            ; ---------------------------------------------------------------------------
00011E20                            ; Sprite mappings - pole that breaks (LZ)
00011E20                            ; ---------------------------------------------------------------------------
00011E20 0000                       		dc.w byte_11326-Map_obj0B
00011E22 0000                       		dc.w byte_11331-Map_obj0B
00011E24 02                         byte_11326:	dc.b 2			; normal pole
00011E25 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011E2A 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011E2F 04                         byte_11331:	dc.b 4			; broken pole
00011E30 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011E35 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011E3A 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011E3F 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011E44                            		even
00011E44                            		even
00011E44                            
00011E44                            ; ===========================================================================
00011E44                            ; ---------------------------------------------------------------------------
00011E44                            ; Object 0C - flapping door (LZ)
00011E44                            ; ---------------------------------------------------------------------------
00011E44                            
00011E44                            Obj0C:					; XREF: Obj_Index
00011E44 7000                       		moveq	#0,d0
00011E46 1028 0024                  		move.b	$24(a0),d0
00011E4A 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00011E4E 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00011E52                            ; ===========================================================================
00011E52 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00011E54 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00011E56                            ; ===========================================================================
00011E56                            
00011E56                            Obj0C_Main:				; XREF: Obj0C_Index
00011E56 5428 0024                  		addq.b	#2,$24(a0)
00011E5A 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00011E62 317C 4328 0002             		move.w	#$4328,2(a0)
00011E68 0028 0004 0001             		ori.b	#4,1(a0)
00011E6E 117C 0028 0019             		move.b	#$28,$19(a0)
00011E74 7000                       		moveq	#0,d0
00011E76 1028 0028                  		move.b	$28(a0),d0	; get object type
00011E7A C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011E7E 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011E82                            
00011E82                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011E82 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011E86 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011E88 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00011E8E 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011E94 4A28 0001                  		tst.b	1(a0)
00011E98 6A00                       		bpl.s	Obj0C_Solid
00011E9A 303C 00BB                  		move.w	#$BB,d0
00011E9E 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play door sound
00011EA4                            
00011EA4                            Obj0C_Solid:
00011EA4 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011EAA 6100 9344                  		bsr.w	AnimateSprite
00011EAE 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011EB2 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011EB6 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011EB8 3038 D008                  		move.w	($FFFFD008).w,d0
00011EBC B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011EC0 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011EC2 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011EC8 323C 0013                  		move.w	#$13,d1
00011ECC 343C 0020                  		move.w	#$20,d2
00011ED0 3602                       		move.w	d2,d3
00011ED2 5243                       		addq.w	#1,d3
00011ED4 3828 0008                  		move.w	8(a0),d4
00011ED8 6100 E5EE                  		bsr.w	SolidObject	; make the door	solid
00011EDC                            
00011EDC                            Obj0C_Display:
00011EDC 6000 E2C2                  		bra.w	MarkObjGone
00011EE0                            ; ===========================================================================
00011EE0                            Ani_obj0C:
00011EE0                            	include "_anim\obj0C.asm"
00011EE0                            ; ---------------------------------------------------------------------------
00011EE0                            ; Animation script - flapping door (LZ)
00011EE0                            ; ---------------------------------------------------------------------------
00011EE0 0000                       		dc.w byte_113E6-Ani_obj0C
00011EE2 0000                       		dc.w byte_113EC-Ani_obj0C
00011EE4 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011EEA 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011EF0                            		even
00011EF0                            		even
00011EF0                            
00011EF0                            ; ---------------------------------------------------------------------------
00011EF0                            ; Sprite mappings - flapping door (LZ)
00011EF0                            ; ---------------------------------------------------------------------------
00011EF0                            Map_obj0C:
00011EF0                            	include "_maps\obj0C.asm"
00011EF0                            ; ---------------------------------------------------------------------------
00011EF0                            ; Sprite mappings - flapping door (LZ)
00011EF0                            ; ---------------------------------------------------------------------------
00011EF0 0000                       		dc.w byte_113F8-Map_obj0C
00011EF2 0000                       		dc.w byte_11403-Map_obj0C
00011EF4 0000                       		dc.w byte_1140E-Map_obj0C
00011EF6 02                         byte_113F8:	dc.b 2
00011EF7 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011EFC 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011F01 02                         byte_11403:	dc.b 2
00011F02 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011F07 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011F0C 02                         byte_1140E:	dc.b 2
00011F0D D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00011F12 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011F18 00                         		even
00011F18 00                         		even
00011F18                            
00011F18                            ; ===========================================================================
00011F18                            ; ---------------------------------------------------------------------------
00011F18                            ; Object 71 - invisible	solid blocks
00011F18                            ; ---------------------------------------------------------------------------
00011F18                            
00011F18                            Obj71:					; XREF: Obj_Index
00011F18 7000                       		moveq	#0,d0
00011F1A 1028 0024                  		move.b	$24(a0),d0
00011F1E 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00011F22 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011F26                            ; ===========================================================================
00011F26 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011F28 0000                       		dc.w Obj71_Solid-Obj71_Index
00011F2A                            ; ===========================================================================
00011F2A                            
00011F2A                            Obj71_Main:				; XREF: Obj71_Index
00011F2A 5428 0024                  		addq.b	#2,$24(a0)
00011F2E 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00011F36 317C 8680 0002             		move.w	#$8680,2(a0)
00011F3C 0028 0004 0001             		ori.b	#4,1(a0)
00011F42 1028 0028                  		move.b	$28(a0),d0	; get object type
00011F46 1200                       		move.b	d0,d1
00011F48 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00011F4C 0640 0010                  		addi.w	#$10,d0
00011F50 E248                       		lsr.w	#1,d0
00011F52 1140 0019                  		move.b	d0,$19(a0)	; set object width
00011F56 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011F5A 5241                       		addq.w	#1,d1
00011F5C E749                       		lsl.w	#3,d1
00011F5E 1141 0016                  		move.b	d1,$16(a0)	; set object height
00011F62                            
00011F62                            Obj71_Solid:				; XREF: Obj71_Index
00011F62 6100 C3F6                  		bsr.w	ChkObjOnScreen
00011F66 6600                       		bne.s	Obj71_ChkDel
00011F68 7200                       		moveq	#0,d1
00011F6A 1228 0019                  		move.b	$19(a0),d1
00011F6E 0641 000B                  		addi.w	#$B,d1
00011F72 7400                       		moveq	#0,d2
00011F74 1428 0016                  		move.b	$16(a0),d2
00011F78 3602                       		move.w	d2,d3
00011F7A 5243                       		addq.w	#1,d3
00011F7C 3828 0008                  		move.w	8(a0),d4
00011F80 6100 E58C                  		bsr.w	SolidObject71
00011F84                            
00011F84                            Obj71_ChkDel:
00011F84 3028 0008                  		move.w	8(a0),d0
00011F88 0240 FF80                  		andi.w	#$FF80,d0
00011F8C 3238 F700                  		move.w	($FFFFF700).w,d1
00011F90 0441 0080                  		subi.w	#$80,d1
00011F94 0241 FF80                  		andi.w	#$FF80,d1
00011F98 9041                       		sub.w	d1,d0
00011F9A 0C40 0280                  		cmpi.w	#$280,d0
00011F9E 6200                       		bhi.s	Obj71_Delete
00011FA0 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011FA4 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011FA6 4EFA C136                  		jmp	DisplaySprite	; if yes, display the object
00011FAA                            ; ===========================================================================
00011FAA                            
00011FAA                            Obj71_NoDisplay:
00011FAA 4E75                       		rts	
00011FAC                            ; ===========================================================================
00011FAC                            
00011FAC                            Obj71_Delete:
00011FAC 4EFA C16C                  		jmp	DeleteObject
00011FB0                            ; ===========================================================================
00011FB0                            ; ---------------------------------------------------------------------------
00011FB0                            ; Sprite mappings - invisible solid blocks
00011FB0                            ; ---------------------------------------------------------------------------
00011FB0                            Map_obj71:
00011FB0                            	include "_maps\obj71.asm"
00011FB0                            ; ---------------------------------------------------------------------------
00011FB0                            ; Sprite mappings - invisible solid blocks
00011FB0                            ; ---------------------------------------------------------------------------
00011FB0 0000                       		dc.w byte_114BC-Map_obj71
00011FB2 0000                       		dc.w byte_114D1-Map_obj71
00011FB4 0000                       		dc.w byte_114E6-Map_obj71
00011FB6 04                         byte_114BC:	dc.b 4
00011FB7 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011FBC F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011FC1 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011FC6 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011FCB 04                         byte_114D1:	dc.b 4
00011FCC E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011FD1 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011FD6 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011FDB 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011FE0 04                         byte_114E6:	dc.b 4
00011FE1 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011FE6 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011FEB 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011FF0 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011FF6 00                         		even
00011FF6 00                         		even
00011FF6                            
00011FF6                            ; ===========================================================================
00011FF6                            ; ---------------------------------------------------------------------------
00011FF6                            ; Object 5D - fans (SLZ)
00011FF6                            ; ---------------------------------------------------------------------------
00011FF6                            
00011FF6                            Obj5D:					; XREF: Obj_Index
00011FF6 7000                       		moveq	#0,d0
00011FF8 1028 0024                  		move.b	$24(a0),d0
00011FFC 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00012000 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00012004                            ; ===========================================================================
00012004 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00012006 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00012008                            ; ===========================================================================
00012008                            
00012008                            Obj5D_Main:				; XREF: Obj5D_Index
00012008 5428 0024                  		addq.b	#2,$24(a0)
0001200C 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00012014 317C 43A0 0002             		move.w	#$43A0,2(a0)
0001201A 0028 0004 0001             		ori.b	#4,1(a0)
00012020 117C 0010 0019             		move.b	#$10,$19(a0)
00012026 117C 0004 0018             		move.b	#4,$18(a0)
0001202C                            
0001202C                            Obj5D_Delay:				; XREF: Obj5D_Index
0001202C 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00012032 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00012034 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012038 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
0001203A 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00012040 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00012046 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00012048 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
0001204E                            
0001204E                            Obj5D_Blow:
0001204E 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00012052 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00012056 43F8 D000                  		lea	($FFFFD000).w,a1
0001205A 3029 0008                  		move.w	8(a1),d0
0001205E 9068 0008                  		sub.w	8(a0),d0
00012062 0828 0000 0022             		btst	#0,$22(a0)
00012068 6600                       		bne.s	Obj5D_ChkSonic
0001206A 4440                       		neg.w	d0
0001206C                            
0001206C                            Obj5D_ChkSonic:
0001206C 0640 0050                  		addi.w	#$50,d0
00012070 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00012074 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00012076 3229 000C                  		move.w	$C(a1),d1
0001207A 0641 0060                  		addi.w	#$60,d1
0001207E 9268 000C                  		sub.w	$C(a0),d1
00012082 6500                       		bcs.s	Obj5D_Animate
00012084 0C41 0070                  		cmpi.w	#$70,d1
00012088 6400                       		bcc.s	Obj5D_Animate
0001208A 0440 0050                  		subi.w	#$50,d0
0001208E 6400                       		bcc.s	loc_1159A
00012090 4640                       		not.w	d0
00012092 D040                       		add.w	d0,d0
00012094                            
00012094                            loc_1159A:
00012094 0640 0060                  		addi.w	#$60,d0
00012098 0828 0000 0022             		btst	#0,$22(a0)
0001209E 6600                       		bne.s	loc_115A8
000120A0 4440                       		neg.w	d0
000120A2                            
000120A2                            loc_115A8:
000120A2 4400                       		neg.b	d0
000120A4 E840                       		asr.w	#4,d0
000120A6 0828 0000 0028             		btst	#0,$28(a0)
000120AC 6700                       		beq.s	Obj5D_MoveSonic
000120AE 4440                       		neg.w	d0
000120B0                            
000120B0                            Obj5D_MoveSonic:
000120B0 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
000120B4                            
000120B4                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
000120B4 5328 001E                  		subq.b	#1,$1E(a0)
000120B8 6A00                       		bpl.s	Obj5D_ChkDel
000120BA 117C 0000 001E             		move.b	#0,$1E(a0)
000120C0 5228 001B                  		addq.b	#1,$1B(a0)
000120C4 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
000120CA 6500                       		bcs.s	loc_115D8
000120CC 117C 0000 001B             		move.b	#0,$1B(a0)
000120D2                            
000120D2                            loc_115D8:
000120D2 7000                       		moveq	#0,d0
000120D4 0828 0000 0028             		btst	#0,$28(a0)
000120DA 6700                       		beq.s	loc_115E4
000120DC 7002                       		moveq	#2,d0
000120DE                            
000120DE                            loc_115E4:
000120DE D028 001B                  		add.b	$1B(a0),d0
000120E2 1140 001A                  		move.b	d0,$1A(a0)
000120E6                            
000120E6                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
000120E6 6100 BFF6                  		bsr.w	DisplaySprite
000120EA 3028 0008                  		move.w	8(a0),d0
000120EE 0240 FF80                  		andi.w	#$FF80,d0
000120F2 3238 F700                  		move.w	($FFFFF700).w,d1
000120F6 0441 0080                  		subi.w	#$80,d1
000120FA 0241 FF80                  		andi.w	#$FF80,d1
000120FE 9041                       		sub.w	d1,d0
00012100 0C40 0280                  		cmpi.w	#$280,d0
00012104 6200 C014                  		bhi.w	DeleteObject
00012108 4E75                       		rts	
0001210A                            ; ===========================================================================
0001210A                            ; ---------------------------------------------------------------------------
0001210A                            ; Sprite mappings - fans (SLZ)
0001210A                            ; ---------------------------------------------------------------------------
0001210A                            Map_obj5D:
0001210A                            	include "_maps\obj5D.asm"
0001210A                            ; ---------------------------------------------------------------------------
0001210A                            ; Sprite mappings - fans (SLZ)
0001210A                            ; ---------------------------------------------------------------------------
0001210A 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
0001210E 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00012112 0000                       		dc.w byte_1161A-Map_obj5D
00012114 02                         byte_1161A:	dc.b 2
00012115 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
0001211A 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
0001211F 02                         byte_11625:	dc.b 2
00012120 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00012125 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
0001212A 02                         byte_11630:	dc.b 2
0001212B F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00012130 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00012136 00                         		even
00012136 00                         		even
00012136                            
00012136                            ; ===========================================================================
00012136                            ; ---------------------------------------------------------------------------
00012136                            ; Object 5E - seesaws (SLZ)
00012136                            ; ---------------------------------------------------------------------------
00012136                            
00012136                            Obj5E:					; XREF: Obj_Index
00012136 7000                       		moveq	#0,d0
00012138 1028 0024                  		move.b	$24(a0),d0
0001213C 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00012140 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00012144 3028 0030                  		move.w	$30(a0),d0
00012148 0240 FF80                  		andi.w	#$FF80,d0
0001214C 3238 F700                  		move.w	($FFFFF700).w,d1
00012150 0441 0080                  		subi.w	#$80,d1
00012154 0241 FF80                  		andi.w	#$FF80,d1
00012158 9041                       		sub.w	d1,d0
0001215A 6B00 BFBE                  		bmi.w	DeleteObject
0001215E 0C40 0280                  		cmpi.w	#$280,d0
00012162 6200 BFB6                  		bhi.w	DeleteObject
00012166 6000 BF76                  		bra.w	DisplaySprite
0001216A                            ; ===========================================================================
0001216A 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
0001216C 0000                       		dc.w Obj5E_Slope-Obj5E_Index
0001216E 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00012170 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00012172 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00012174 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00012176                            ; ===========================================================================
00012176                            
00012176                            Obj5E_Main:				; XREF: Obj5E_Index
00012176 5428 0024                  		addq.b	#2,$24(a0)
0001217A 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00012182 317C 0374 0002             		move.w	#$374,2(a0)
00012188 0028 0004 0001             		ori.b	#4,1(a0)
0001218E 117C 0004 0018             		move.b	#4,$18(a0)
00012194 117C 0030 0019             		move.b	#$30,$19(a0)
0001219A 3168 0008 0030             		move.w	8(a0),$30(a0)
000121A0 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
000121A4 6600                       		bne.s	loc_116D2	; if not, branch
000121A6 6100 C3E2                  		bsr.w	SingleObjLoad2
000121AA 6600                       		bne.s	loc_116D2
000121AC 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
000121B0 5C29 0024                  		addq.b	#6,$24(a1)
000121B4 3368 0008 0008             		move.w	8(a0),8(a1)
000121BA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000121C0 1368 0022 0022             		move.b	$22(a0),$22(a1)
000121C6 2348 003C                  		move.l	a0,$3C(a1)
000121CA                            
000121CA                            loc_116D2:
000121CA 0828 0000 0022             		btst	#0,$22(a0)
000121D0 6700                       		beq.s	loc_116E0
000121D2 117C 0002 001A             		move.b	#2,$1A(a0)
000121D8                            
000121D8                            loc_116E0:
000121D8 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
000121DE                            
000121DE                            Obj5E_Slope:				; XREF: Obj5E_Index
000121DE 1228 003A                  		move.b	$3A(a0),d1
000121E2 6100 0000                  		bsr.w	loc_11766
000121E6 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
000121EC 0828 0000 001A             		btst	#0,$1A(a0)
000121F2 6700                       		beq.s	loc_11702
000121F4 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
000121FA                            
000121FA                            loc_11702:
000121FA 43F8 D000                  		lea	($FFFFD000).w,a1
000121FE 3169 0012 0038             		move.w	$12(a1),$38(a0)
00012204 323C 0030                  		move.w	#$30,d1
00012208 4EB9 0000 7FA4             		jsr	(SlopeObject).l
0001220E 4E75                       		rts	
00012210                            ; ===========================================================================
00012210                            
00012210                            Obj5E_Slope2:				; XREF: Obj5E_Index
00012210 6100 0000                  		bsr.w	loc_1174A
00012214 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
0001221A 0828 0000 001A             		btst	#0,$1A(a0)
00012220 6700                       		beq.s	loc_11730
00012222 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00012228                            
00012228                            loc_11730:
00012228 323C 0030                  		move.w	#$30,d1
0001222C 4EB9 0000 8044             		jsr	(ExitPlatform).l
00012232 323C 0030                  		move.w	#$30,d1
00012236 3428 0008                  		move.w	8(a0),d2
0001223A 4EB9 0000 8FA2             		jsr	SlopeObject2
00012240 4E75                       		rts	
00012242                            ; ===========================================================================
00012242                            
00012242                            loc_1174A:				; XREF: Obj5E_Slope2
00012242 7202                       		moveq	#2,d1
00012244 43F8 D000                  		lea	($FFFFD000).w,a1
00012248 3028 0008                  		move.w	8(a0),d0
0001224C 9069 0008                  		sub.w	8(a1),d0
00012250 6400                       		bcc.s	loc_1175E
00012252 4440                       		neg.w	d0
00012254 7200                       		moveq	#0,d1
00012256                            
00012256                            loc_1175E:
00012256 0C40 0008                  		cmpi.w	#8,d0
0001225A 6400                       		bcc.s	loc_11766
0001225C 7201                       		moveq	#1,d1
0001225E                            
0001225E                            loc_11766:
0001225E 1028 001A                  		move.b	$1A(a0),d0
00012262 B001                       		cmp.b	d1,d0
00012264 6700                       		beq.s	locret_11790
00012266 6400                       		bcc.s	loc_11772
00012268 5400                       		addq.b	#2,d0
0001226A                            
0001226A                            loc_11772:
0001226A 5300                       		subq.b	#1,d0
0001226C 1140 001A                  		move.b	d0,$1A(a0)
00012270 1141 003A                  		move.b	d1,$3A(a0)
00012274 08A8 0000 0001             		bclr	#0,1(a0)
0001227A 0828 0001 001A             		btst	#1,$1A(a0)
00012280 6700                       		beq.s	locret_11790
00012282 08E8 0000 0001             		bset	#0,1(a0)
00012288                            
00012288                            locret_11790:
00012288 4E75                       		rts	
0001228A                            ; ===========================================================================
0001228A                            
0001228A                            Obj5E_Spikeball:			; XREF: Obj5E_Index
0001228A 5428 0024                  		addq.b	#2,$24(a0)
0001228E 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00012296 317C 04F0 0002             		move.w	#$4F0,2(a0)
0001229C 0028 0004 0001             		ori.b	#4,1(a0)
000122A2 117C 0004 0018             		move.b	#4,$18(a0)
000122A8 117C 008B 0020             		move.b	#$8B,$20(a0)
000122AE 117C 000C 0019             		move.b	#$C,$19(a0)
000122B4 3168 0008 0030             		move.w	8(a0),$30(a0)
000122BA 0668 0028 0008             		addi.w	#$28,8(a0)
000122C0 3168 000C 0034             		move.w	$C(a0),$34(a0)
000122C6 117C 0001 001A             		move.b	#1,$1A(a0)
000122CC 0828 0000 0022             		btst	#0,$22(a0)
000122D2 6700                       		beq.s	Obj5E_MoveSpike
000122D4 0468 0050 0008             		subi.w	#$50,8(a0)
000122DA 117C 0002 003A             		move.b	#2,$3A(a0)
000122E0                            
000122E0                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
000122E0 2268 003C                  		movea.l	$3C(a0),a1
000122E4 7000                       		moveq	#0,d0
000122E6 1028 003A                  		move.b	$3A(a0),d0
000122EA 9029 003A                  		sub.b	$3A(a1),d0
000122EE 6700                       		beq.s	loc_1183E
000122F0 6400                       		bcc.s	loc_117FC
000122F2 4400                       		neg.b	d0
000122F4                            
000122F4                            loc_117FC:
000122F4 323C F7E8                  		move.w	#-$818,d1
000122F8 343C FEEC                  		move.w	#-$114,d2
000122FC 0C00 0001                  		cmpi.b	#1,d0
00012300 6700                       		beq.s	loc_11822
00012302 323C F510                  		move.w	#-$AF0,d1
00012306 343C FF34                  		move.w	#-$CC,d2
0001230A 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00012310 6D00                       		blt.s	loc_11822
00012312 323C F200                  		move.w	#-$E00,d1
00012316 343C FF60                  		move.w	#-$A0,d2
0001231A                            
0001231A                            loc_11822:
0001231A 3141 0012                  		move.w	d1,$12(a0)
0001231E 3142 0010                  		move.w	d2,$10(a0)
00012322 3028 0008                  		move.w	8(a0),d0
00012326 9068 0030                  		sub.w	$30(a0),d0
0001232A 6400                       		bcc.s	loc_11838
0001232C 4468 0010                  		neg.w	$10(a0)
00012330                            
00012330                            loc_11838:
00012330 5428 0024                  		addq.b	#2,$24(a0)
00012334 6000                       		bra.s	Obj5E_SpikeFall
00012336                            ; ===========================================================================
00012336                            
00012336                            loc_1183E:				; XREF: Obj5E_MoveSpike
00012336 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
0001233C 7000                       		moveq	#0,d0
0001233E 1029 001A                  		move.b	$1A(a1),d0
00012342 343C 0028                  		move.w	#$28,d2
00012346 3228 0008                  		move.w	8(a0),d1
0001234A 9268 0030                  		sub.w	$30(a0),d1
0001234E 6400                       		bcc.s	loc_1185C
00012350 4442                       		neg.w	d2
00012352 5440                       		addq.w	#2,d0
00012354                            
00012354                            loc_1185C:
00012354 D040                       		add.w	d0,d0
00012356 3228 0034                  		move.w	$34(a0),d1
0001235A D272 0000                  		add.w	(a2,d0.w),d1
0001235E 3141 000C                  		move.w	d1,$C(a0)
00012362 D468 0030                  		add.w	$30(a0),d2
00012366 3142 0008                  		move.w	d2,8(a0)
0001236A 4268 000E                  		clr.w	$E(a0)
0001236E 4268 000A                  		clr.w	$A(a0)
00012372 4E75                       		rts	
00012374                            ; ===========================================================================
00012374                            
00012374                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
00012374 4A68 0012                  		tst.w	$12(a0)
00012378 6A00                       		bpl.s	loc_1189A
0001237A 6100 BD10                  		bsr.w	ObjectFall
0001237E 3028 0034                  		move.w	$34(a0),d0
00012382 0440 002F                  		subi.w	#$2F,d0
00012386 B068 000C                  		cmp.w	$C(a0),d0
0001238A 6E00                       		bgt.s	locret_11898
0001238C 6100 BCFE                  		bsr.w	ObjectFall
00012390                            
00012390                            locret_11898:
00012390 4E75                       		rts	
00012392                            ; ===========================================================================
00012392                            
00012392                            loc_1189A:				; XREF: Obj5E_SpikeFall
00012392 6100 BCF8                  		bsr.w	ObjectFall
00012396 2268 003C                  		movea.l	$3C(a0),a1
0001239A 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000123A0 7000                       		moveq	#0,d0
000123A2 1029 001A                  		move.b	$1A(a1),d0
000123A6 3228 0008                  		move.w	8(a0),d1
000123AA 9268 0030                  		sub.w	$30(a0),d1
000123AE 6400                       		bcc.s	loc_118BA
000123B0 5440                       		addq.w	#2,d0
000123B2                            
000123B2                            loc_118BA:
000123B2 D040                       		add.w	d0,d0
000123B4 3228 0034                  		move.w	$34(a0),d1
000123B8 D272 0000                  		add.w	(a2,d0.w),d1
000123BC B268 000C                  		cmp.w	$C(a0),d1
000123C0 6E00                       		bgt.s	locret_11938
000123C2 2268 003C                  		movea.l	$3C(a0),a1
000123C6 7202                       		moveq	#2,d1
000123C8 4A68 0010                  		tst.w	$10(a0)
000123CC 6B00                       		bmi.s	Obj5E_Spring
000123CE 7200                       		moveq	#0,d1
000123D0                            
000123D0                            Obj5E_Spring:
000123D0 1341 003A                  		move.b	d1,$3A(a1)
000123D4 1141 003A                  		move.b	d1,$3A(a0)
000123D8 B229 001A                  		cmp.b	$1A(a1),d1
000123DC 6700                       		beq.s	loc_1192C
000123DE 08A9 0003 0022             		bclr	#3,$22(a1)
000123E4 6700                       		beq.s	loc_1192C
000123E6 4229 0025                  		clr.b	$25(a1)
000123EA 137C 0002 0024             		move.b	#2,$24(a1)
000123F0 45F8 D000                  		lea	($FFFFD000).w,a2
000123F4 3568 0012 0012             		move.w	$12(a0),$12(a2)
000123FA 446A 0012                  		neg.w	$12(a2)
000123FE 08EA 0001 0022             		bset	#1,$22(a2)
00012404 08AA 0003 0022             		bclr	#3,$22(a2)
0001240A 422A 003C                  		clr.b	$3C(a2)
0001240E 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00012414 157C 0002 0024             		move.b	#2,$24(a2)
0001241A 303C 00CC                  		move.w	#$CC,d0
0001241E 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play spring sound
00012424                            
00012424                            loc_1192C:
00012424 4268 0010                  		clr.w	$10(a0)
00012428 4268 0012                  		clr.w	$12(a0)
0001242C 5528 0024                  		subq.b	#2,$24(a0)
00012430                            
00012430                            locret_11938:
00012430 4E75                       		rts	
00012432                            ; ===========================================================================
00012432 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001243C                            
0001243C                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
0001246C                            		even
0001246C                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
0001249C                            		even
0001249C                            ; ---------------------------------------------------------------------------
0001249C                            ; Sprite mappings - seesaws (SLZ)
0001249C                            ; ---------------------------------------------------------------------------
0001249C                            Map_obj5E:
0001249C                            	include "_maps\obj5E.asm"
0001249C                            ; ---------------------------------------------------------------------------
0001249C                            ; Sprite mappings - seesaws (SLZ)
0001249C                            ; ---------------------------------------------------------------------------
0001249C 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000124A0 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000124A4 07                         byte_119AC:	dc.b 7
000124A5 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
000124AA DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
000124AF E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
000124B4 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
000124B9 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
000124BE F406 0006 13               		dc.b $F4, 6, 0,	6, $13
000124C3 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
000124C8 04                         byte_119D0:	dc.b 4
000124C9 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
000124CE E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
000124D3 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
000124D8 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
000124DE 00                         		even
000124DE 00                         		even
000124DE                            
000124DE                            ; ---------------------------------------------------------------------------
000124DE                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000124DE                            ; ---------------------------------------------------------------------------
000124DE                            Map_obj5Ea:
000124DE                            	include "_maps\obj5Eballs.asm"
000124DE                            ; ---------------------------------------------------------------------------
000124DE                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000124DE                            ; ---------------------------------------------------------------------------
000124DE 0000                       		dc.w byte_119EA-Map_obj5Ea
000124E0 0000                       		dc.w byte_119F0-Map_obj5Ea
000124E2 01                         byte_119EA:	dc.b 1
000124E3 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000124E8 01                         byte_119F0:	dc.b 1
000124E9 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000124EE                            		even
000124EE                            		even
000124EE                            
000124EE                            ; ===========================================================================
000124EE                            ; ---------------------------------------------------------------------------
000124EE                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
000124EE                            ; ---------------------------------------------------------------------------
000124EE                            
000124EE                            Obj5F:					; XREF: Obj_Index
000124EE 7000                       		moveq	#0,d0
000124F0 1028 0024                  		move.b	$24(a0),d0
000124F4 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
000124F8 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
000124FC                            ; ===========================================================================
000124FC 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
000124FE 0000                       		dc.w Obj5F_Action-Obj5F_Index
00012500 0000                       		dc.w Obj5F_Display-Obj5F_Index
00012502 0000                       		dc.w Obj5F_End-Obj5F_Index
00012504                            ; ===========================================================================
00012504                            
00012504                            Obj5F_Main:				; XREF: Obj5F_Index
00012504 5428 0024                  		addq.b	#2,$24(a0)
00012508 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00012510 317C 0400 0002             		move.w	#$400,2(a0)
00012516 0028 0004 0001             		ori.b	#4,1(a0)
0001251C 117C 0003 0018             		move.b	#3,$18(a0)
00012522 117C 000C 0019             		move.b	#$C,$19(a0)
00012528 1028 0028                  		move.b	$28(a0),d0
0001252C 6700                       		beq.s	loc_11A3C
0001252E 1140 0024                  		move.b	d0,$24(a0)
00012532 4E75                       		rts	
00012534                            ; ===========================================================================
00012534                            
00012534                            loc_11A3C:
00012534 117C 009A 0020             		move.b	#$9A,$20(a0)
0001253A 0868 0000 0022             		bchg	#0,$22(a0)
00012540                            
00012540                            Obj5F_Action:				; XREF: Obj5F_Index
00012540 7000                       		moveq	#0,d0
00012542 1028 0025                  		move.b	$25(a0),d0
00012546 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
0001254A 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
0001254E 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012554 6100 8C9A                  		bsr.w	AnimateSprite
00012558 6000 DC46                  		bra.w	MarkObjGone
0001255C                            ; ===========================================================================
0001255C 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
0001255E 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00012560 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00012562                            ; ===========================================================================
00012562                            
00012562                            Obj5F_Walk:				; XREF: Obj5F_Index2
00012562 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012566 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001256A 6A00                       		bpl.s	locret_11A96	; if time remains, branch
0001256C 5428 0025                  		addq.b	#2,$25(a0)
00012570 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00012576 317C 0010 0010             		move.w	#$10,$10(a0)
0001257C 117C 0001 001C             		move.b	#1,$1C(a0)
00012582 0868 0000 0022             		bchg	#0,$22(a0)
00012588 6700                       		beq.s	locret_11A96
0001258A 4468 0010                  		neg.w	$10(a0)		; change direction
0001258E                            
0001258E                            locret_11A96:
0001258E 4E75                       		rts	
00012590                            ; ===========================================================================
00012590                            
00012590                            Obj5F_Wait:				; XREF: Obj5F_Index2
00012590 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012594 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012598 6B00                       		bmi.s	loc_11AA8
0001259A 6100 BB1C                  		bsr.w	SpeedToPos
0001259E 4E75                       		rts	
000125A0                            ; ===========================================================================
000125A0                            
000125A0                            loc_11AA8:
000125A0 5528 0025                  		subq.b	#2,$25(a0)
000125A4 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
000125AA 4268 0010                  		clr.w	$10(a0)		; stop walking
000125AE 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
000125B4 4E75                       		rts	
000125B6                            ; ===========================================================================
000125B6                            
000125B6                            Obj5F_Explode:				; XREF: Obj5F_Index2
000125B6 5368 0030                  		subq.w	#1,$30(a0)
000125BA 6A00                       		bpl.s	locret_11AD0
000125BC 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
000125C0 117C 0000 0024             		move.b	#0,$24(a0)
000125C6                            
000125C6                            locret_11AD0:
000125C6 4E75                       		rts	
000125C8                            ; ===========================================================================
000125C8                            
000125C8                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
000125C8 3038 D008                  		move.w	($FFFFD008).w,d0
000125CC 9068 0008                  		sub.w	8(a0),d0
000125D0 6400                       		bcc.s	loc_11ADE
000125D2 4440                       		neg.w	d0
000125D4                            
000125D4                            loc_11ADE:
000125D4 0C40 0060                  		cmpi.w	#$60,d0
000125D8 6400                       		bcc.s	locret_11B5E
000125DA 3038 D00C                  		move.w	($FFFFD00C).w,d0
000125DE 9068 000C                  		sub.w	$C(a0),d0
000125E2 6400                       		bcc.s	Obj5F_MakeFuse
000125E4 4440                       		neg.w	d0
000125E6                            
000125E6                            Obj5F_MakeFuse:
000125E6 0C40 0060                  		cmpi.w	#$60,d0
000125EA 6400                       		bcc.s	locret_11B5E
000125EC 4A78 FE08                  		tst.w	($FFFFFE08).w
000125F0 6600                       		bne.s	locret_11B5E
000125F2 117C 0004 0025             		move.b	#4,$25(a0)
000125F8 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
000125FE 4268 0010                  		clr.w	$10(a0)
00012602 117C 0002 001C             		move.b	#2,$1C(a0)
00012608 6100 BF80                  		bsr.w	SingleObjLoad2
0001260C 6600                       		bne.s	locret_11B5E
0001260E 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00012612 3368 0008 0008             		move.w	8(a0),8(a1)
00012618 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001261E 3368 000C 0034             		move.w	$C(a0),$34(a1)
00012624 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001262A 137C 0004 0028             		move.b	#4,$28(a1)
00012630 137C 0003 001C             		move.b	#3,$1C(a1)
00012636 337C 0010 0012             		move.w	#$10,$12(a1)
0001263C 0828 0001 0022             		btst	#1,$22(a0)
00012642 6700                       		beq.s	loc_11B54
00012644 4469 0012                  		neg.w	$12(a1)
00012648                            
00012648                            loc_11B54:
00012648 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
0001264E 2348 003C                  		move.l	a0,$3C(a1)
00012652                            
00012652                            locret_11B5E:
00012652 4E75                       		rts	
00012654                            ; ===========================================================================
00012654                            
00012654                            Obj5F_Display:				; XREF: Obj5F_Index
00012654 6100                       		bsr.s	loc_11B70
00012656 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001265C 6100 8B92                  		bsr.w	AnimateSprite
00012660 6000 DB3E                  		bra.w	MarkObjGone
00012664                            ; ===========================================================================
00012664                            
00012664                            loc_11B70:
00012664 5368 0030                  		subq.w	#1,$30(a0)
00012668 6B00                       		bmi.s	loc_11B7C
0001266A 6100 BA4C                  		bsr.w	SpeedToPos
0001266E 4E75                       		rts	
00012670                            ; ===========================================================================
00012670                            
00012670                            loc_11B7C:
00012670 4268 0030                  		clr.w	$30(a0)
00012674 4228 0024                  		clr.b	$24(a0)
00012678 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001267E 7203                       		moveq	#3,d1
00012680 2248                       		movea.l	a0,a1
00012682 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00012688 6000                       		bra.s	Obj5F_MakeShrap
0001268A                            ; ===========================================================================
0001268A                            
0001268A                            Obj5F_Loop:
0001268A 6100 BEFE                  		bsr.w	SingleObjLoad2
0001268E 6600                       		bne.s	loc_11BCE
00012690                            
00012690                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00012690 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
00012694 3368 0008 0008             		move.w	8(a0),8(a1)
0001269A 3368 000C 000C             		move.w	$C(a0),$C(a1)
000126A0 137C 0006 0028             		move.b	#6,$28(a1)
000126A6 137C 0004 001C             		move.b	#4,$1C(a1)
000126AC 335A 0010                  		move.w	(a2)+,$10(a1)
000126B0 335A 0012                  		move.w	(a2)+,$12(a1)
000126B4 137C 0098 0020             		move.b	#$98,$20(a1)
000126BA 08E9 0007 0001             		bset	#7,1(a1)
000126C0                            
000126C0                            loc_11BCE:
000126C0 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
000126C4                            
000126C4 117C 0006 0024             		move.b	#6,$24(a0)
000126CA                            
000126CA                            Obj5F_End:				; XREF: Obj5F_Index
000126CA 6100 B9EC                  		bsr.w	SpeedToPos
000126CE 0668 0018 0012             		addi.w	#$18,$12(a0)
000126D4 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000126DA 6100 8B14                  		bsr.w	AnimateSprite
000126DE 4A28 0001                  		tst.b	1(a0)
000126E2 6A00 BA36                  		bpl.w	DeleteObject
000126E6 6000 B9F6                  		bra.w	DisplaySprite
000126EA                            ; ===========================================================================
000126EA FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
000126FA                            
000126FA                            Ani_obj5F:
000126FA                            	include "_anim\obj5F.asm"
000126FA                            ; ---------------------------------------------------------------------------
000126FA                            ; Animation script - Bomb enemy
000126FA                            ; ---------------------------------------------------------------------------
000126FA 0000                       		dc.w byte_11C12-Ani_obj5F
000126FC 0000                       		dc.w byte_11C16-Ani_obj5F
000126FE 0000                       		dc.w byte_11C1C-Ani_obj5F
00012700 0000                       		dc.w byte_11C20-Ani_obj5F
00012702 0000                       		dc.w byte_11C24-Ani_obj5F
00012704 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00012708 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
0001270E 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00012712 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00012716 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
0001271A                            		even
0001271A                            		even
0001271A                            
0001271A                            ; ---------------------------------------------------------------------------
0001271A                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001271A                            ; ---------------------------------------------------------------------------
0001271A                            Map_obj5F:
0001271A                            	include "_maps\obj5F.asm"
0001271A                            ; ---------------------------------------------------------------------------
0001271A                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001271A                            ; ---------------------------------------------------------------------------
0001271A 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
0001271E 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00012722 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00012726 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
0001272A 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
0001272E 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00012732 03                         byte_11C40:	dc.b 3
00012733 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012738 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001273D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012742 03                         byte_11C50:	dc.b 3
00012743 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012748 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001274D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012752 03                         byte_11C60:	dc.b 3
00012753 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012758 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
0001275D E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012762 03                         byte_11C70:	dc.b 3
00012763 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012768 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
0001276D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012772 03                         byte_11C80:	dc.b 3
00012773 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012778 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
0001277D E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012782 03                         byte_11C90:	dc.b 3
00012783 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012788 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
0001278D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012792 02                         byte_11CA0:	dc.b 2
00012793 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012798 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001279D 02                         byte_11CAB:	dc.b 2
0001279E F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000127A3 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000127A8 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
000127A9 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
000127AE 01                         byte_11CBC:	dc.b 1			; fuse
000127AF E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
000127B4 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
000127B5 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000127BA 01                         byte_11CC8:	dc.b 1			; fireball
000127BB FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000127C0                            		even
000127C0                            		even
000127C0                            
000127C0                            ; ===========================================================================
000127C0                            ; ---------------------------------------------------------------------------
000127C0                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
000127C0                            ; ---------------------------------------------------------------------------
000127C0                            
000127C0                            Obj60:					; XREF: Obj_Index
000127C0 7000                       		moveq	#0,d0
000127C2 1028 0024                  		move.b	$24(a0),d0
000127C6 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
000127CA 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
000127CE                            ; ===========================================================================
000127CE 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
000127D0 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
000127D2 0000                       		dc.w Obj60_Display-Obj60_Index
000127D4 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
000127D6 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
000127D8                            ; ===========================================================================
000127D8                            
000127D8                            Obj60_Main:				; XREF: Obj60_Index
000127D8 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
000127E0 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
000127E6 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000127EC 6700                       		beq.s	loc_11D02
000127EE 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
000127F4                            
000127F4                            loc_11D02:
000127F4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000127FA 6600                       		bne.s	loc_11D10
000127FC 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00012802                            
00012802                            loc_11D10:
00012802 0028 0004 0001             		ori.b	#4,1(a0)
00012808 117C 0004 0018             		move.b	#4,$18(a0)
0001280E 117C 000B 0020             		move.b	#$B,$20(a0)
00012814 117C 000C 0019             		move.b	#$C,$19(a0)
0001281A 7400                       		moveq	#0,d2
0001281C 45E8 0037                  		lea	$37(a0),a2
00012820 264A                       		movea.l	a2,a3
00012822 524A                       		addq.w	#1,a2
00012824 7203                       		moveq	#3,d1
00012826                            
00012826                            Obj60_MakeOrbs:
00012826 6100 BD62                  		bsr.w	SingleObjLoad2
0001282A 6600                       		bne.s	loc_11D90
0001282C 5213                       		addq.b	#1,(a3)
0001282E 3A09                       		move.w	a1,d5
00012830 0445 D000                  		subi.w	#-$3000,d5
00012834 EC4D                       		lsr.w	#6,d5
00012836 0245 007F                  		andi.w	#$7F,d5
0001283A 14C5                       		move.b	d5,(a2)+
0001283C 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
0001283E 137C 0006 0024             		move.b	#6,$24(a1)
00012844 2368 0004 0004             		move.l	4(a0),4(a1)
0001284A 3368 0002 0002             		move.w	2(a0),2(a1)
00012850 0029 0004 0001             		ori.b	#4,1(a1)
00012856 137C 0004 0018             		move.b	#4,$18(a1)
0001285C 137C 0008 0019             		move.b	#8,$19(a1)
00012862 137C 0003 001A             		move.b	#3,$1A(a1)
00012868 137C 0098 0020             		move.b	#$98,$20(a1)
0001286E 1342 0026                  		move.b	d2,$26(a1)
00012872 0602 0040                  		addi.b	#$40,d2
00012876 2348 003C                  		move.l	a0,$3C(a1)
0001287A 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
0001287E                            
0001287E                            loc_11D90:
0001287E 7001                       		moveq	#1,d0
00012880 0828 0000 0022             		btst	#0,$22(a0)
00012886 6700                       		beq.s	Obj60_Move
00012888 4440                       		neg.w	d0
0001288A                            
0001288A                            Obj60_Move:
0001288A 1140 0036                  		move.b	d0,$36(a0)
0001288E 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
00012894 5428 0024                  		addq.b	#2,$24(a0)
00012898 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
0001289E 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
000128A4 6700                       		beq.s	locret_11DBC	; if not, branch
000128A6 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
000128AA                            
000128AA                            locret_11DBC:
000128AA 4E75                       		rts	
000128AC                            ; ===========================================================================
000128AC                            
000128AC                            Obj60_ChkSonic:				; XREF: Obj60_Index
000128AC 3038 D008                  		move.w	($FFFFD008).w,d0
000128B0 9068 0008                  		sub.w	8(a0),d0
000128B4 6400                       		bcc.s	loc_11DCA
000128B6 4440                       		neg.w	d0
000128B8                            
000128B8                            loc_11DCA:
000128B8 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
000128BC 6400                       		bcc.s	Obj60_Animate	; if not, branch
000128BE 3038 D00C                  		move.w	($FFFFD00C).w,d0
000128C2 9068 000C                  		sub.w	$C(a0),d0
000128C6 6400                       		bcc.s	loc_11DDC
000128C8 4440                       		neg.w	d0
000128CA                            
000128CA                            loc_11DDC:
000128CA 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
000128CE 6400                       		bcc.s	Obj60_Animate	; if not, branch
000128D0 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000128D4 6600                       		bne.s	Obj60_Animate	; if yes, branch
000128D6 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
000128DC                            
000128DC                            Obj60_Animate:
000128DC 43F9 0000 0000             		lea	(Ani_obj60).l,a1
000128E2 6100 890C                  		bsr.w	AnimateSprite
000128E6 6000 0000                  		bra.w	Obj60_ChkDel
000128EA                            ; ===========================================================================
000128EA                            
000128EA                            Obj60_Display:				; XREF: Obj60_Index
000128EA 6100 B7CC                  		bsr.w	SpeedToPos
000128EE                            
000128EE                            Obj60_ChkDel:				; XREF: Obj60_Animate
000128EE 3028 0008                  		move.w	8(a0),d0
000128F2 0240 FF80                  		andi.w	#$FF80,d0
000128F6 3238 F700                  		move.w	($FFFFF700).w,d1
000128FA 0441 0080                  		subi.w	#$80,d1
000128FE 0241 FF80                  		andi.w	#$FF80,d1
00012902 9041                       		sub.w	d1,d0
00012904 0C40 0280                  		cmpi.w	#$280,d0
00012908 6200 0000                  		bhi.w	Obj60_ChkGone
0001290C 6000 B7D0                  		bra.w	DisplaySprite
00012910                            ; ===========================================================================
00012910                            
00012910                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00012910 45F8 FC00                  		lea	($FFFFFC00).w,a2
00012914 7000                       		moveq	#0,d0
00012916 1028 0023                  		move.b	$23(a0),d0
0001291A 6700                       		beq.s	loc_11E34
0001291C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012922                            
00012922                            loc_11E34:
00012922 45E8 0037                  		lea	$37(a0),a2
00012926 7400                       		moveq	#0,d2
00012928 141A                       		move.b	(a2)+,d2
0001292A 5342                       		subq.w	#1,d2
0001292C 6500                       		bcs.s	Obj60_Delete
0001292E                            
0001292E                            loc_11E40:
0001292E 7000                       		moveq	#0,d0
00012930 101A                       		move.b	(a2)+,d0
00012932 ED48                       		lsl.w	#6,d0
00012934 0680 00FF D000             		addi.l	#$FFD000,d0
0001293A 2240                       		movea.l	d0,a1
0001293C 6100 B7DE                  		bsr.w	DeleteObject2
00012940 51CA FFEC                  		dbf	d2,loc_11E40
00012944                            
00012944                            Obj60_Delete:
00012944 6000 B7D4                  		bra.w	DeleteObject
00012948                            ; ===========================================================================
00012948                            
00012948                            Obj60_MoveOrb:				; XREF: Obj60_Index
00012948 2268 003C                  		movea.l	$3C(a0),a1
0001294C 0C11 0060                  		cmpi.b	#$60,0(a1)
00012950 6600 B7C8                  		bne.w	DeleteObject
00012954 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
0001295A 6600                       		bne.s	Obj60_Circle
0001295C 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
00012962 6600                       		bne.s	Obj60_Circle
00012964 5428 0024                  		addq.b	#2,$24(a0)
00012968 5329 0037                  		subq.b	#1,$37(a1)
0001296C 6600                       		bne.s	Obj60_FireOrb
0001296E 5429 0024                  		addq.b	#2,$24(a1)
00012972                            
00012972                            Obj60_FireOrb:
00012972 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
00012978 0829 0000 0022             		btst	#0,$22(a1)
0001297E 6700                       		beq.s	Obj60_Display2
00012980 4468 0010                  		neg.w	$10(a0)
00012984                            
00012984                            Obj60_Display2:
00012984 6000 B758                  		bra.w	DisplaySprite
00012988                            ; ===========================================================================
00012988                            
00012988                            Obj60_Circle:				; XREF: Obj60_MoveOrb
00012988 1028 0026                  		move.b	$26(a0),d0
0001298C 4EB9 0000 33D4             		jsr	(CalcSine).l
00012992 E841                       		asr.w	#4,d1
00012994 D269 0008                  		add.w	8(a1),d1
00012998 3141 0008                  		move.w	d1,8(a0)
0001299C E840                       		asr.w	#4,d0
0001299E D069 000C                  		add.w	$C(a1),d0
000129A2 3140 000C                  		move.w	d0,$C(a0)
000129A6 1029 0036                  		move.b	$36(a1),d0
000129AA D128 0026                  		add.b	d0,$26(a0)
000129AE 6000 B72E                  		bra.w	DisplaySprite
000129B2                            ; ===========================================================================
000129B2                            
000129B2                            Obj60_ChkDel2:				; XREF: Obj60_Index
000129B2 6100 B704                  		bsr.w	SpeedToPos
000129B6 4A28 0001                  		tst.b	1(a0)
000129BA 6A00 B75E                  		bpl.w	DeleteObject
000129BE 6000 B71E                  		bra.w	DisplaySprite
000129C2                            ; ===========================================================================
000129C2                            Ani_obj60:
000129C2                            	include "_anim\obj60.asm"
000129C2                            ; ---------------------------------------------------------------------------
000129C2                            ; Animation script - Orbinaut enemy
000129C2                            ; ---------------------------------------------------------------------------
000129C2 0000                       		dc.w byte_11EDA-Ani_obj60
000129C4 0000                       		dc.w byte_11EDE-Ani_obj60
000129C6 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
000129CA 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
000129D0                            		even
000129D0                            		even
000129D0                            
000129D0                            ; ---------------------------------------------------------------------------
000129D0                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000129D0                            ; ---------------------------------------------------------------------------
000129D0                            Map_obj60:
000129D0                            	include "_maps\obj60.asm"
000129D0                            ; ---------------------------------------------------------------------------
000129D0                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000129D0                            ; ---------------------------------------------------------------------------
000129D0 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
000129D4 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
000129D8 01                         byte_11EEC:	dc.b 1
000129D9 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000129DE 01                         byte_11EF2:	dc.b 1
000129DF F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
000129E4 01                         byte_11EF8:	dc.b 1
000129E5 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000129EA 01                         byte_11EFE:	dc.b 1
000129EB F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
000129F0                            		even
000129F0                            		even
000129F0                            
000129F0                            ; ===========================================================================
000129F0                            ; ---------------------------------------------------------------------------
000129F0                            ; Object 16 - harpoon (LZ)
000129F0                            ; ---------------------------------------------------------------------------
000129F0                            
000129F0                            Obj16:					; XREF: Obj_Index
000129F0 7000                       		moveq	#0,d0
000129F2 1028 0024                  		move.b	$24(a0),d0
000129F6 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
000129FA 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
000129FE                            ; ===========================================================================
000129FE 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00012A00 0000                       		dc.w Obj16_Move-Obj16_Index
00012A02 0000                       		dc.w Obj16_Wait-Obj16_Index
00012A04                            ; ===========================================================================
00012A04                            
00012A04                            Obj16_Main:				; XREF: Obj16_Index
00012A04 5428 0024                  		addq.b	#2,$24(a0)
00012A08 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00012A10 317C 03CC 0002             		move.w	#$3CC,2(a0)
00012A16 0028 0004 0001             		ori.b	#4,1(a0)
00012A1C 117C 0004 0018             		move.b	#4,$18(a0)
00012A22 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00012A28 117C 0014 0019             		move.b	#$14,$19(a0)
00012A2E 317C 003C 0030             		move.w	#60,$30(a0)
00012A34                            
00012A34                            Obj16_Move:				; XREF: Obj16_Index
00012A34 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00012A3A 6100 87B4                  		bsr.w	AnimateSprite
00012A3E 7000                       		moveq	#0,d0
00012A40 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00012A44 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00012A4A 6000 D754                  		bra.w	MarkObjGone
00012A4E                            ; ===========================================================================
00012A4E 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00012A54                            ; ===========================================================================
00012A54                            
00012A54                            Obj16_Wait:				; XREF: Obj16_Index
00012A54 5368 0030                  		subq.w	#1,$30(a0)
00012A58 6A00                       		bpl.s	Obj16_ChkDel
00012A5A 317C 003C 0030             		move.w	#60,$30(a0)
00012A60 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
00012A64 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
00012A6A                            
00012A6A                            Obj16_ChkDel:
00012A6A 6000 D734                  		bra.w	MarkObjGone
00012A6E                            ; ===========================================================================
00012A6E                            Ani_obj16:
00012A6E                            	include "_anim\obj16.asm"
00012A6E                            ; ---------------------------------------------------------------------------
00012A6E                            ; Animation script - harpoon (LZ)
00012A6E                            ; ---------------------------------------------------------------------------
00012A6E 0000                       		dc.w byte_11F8A-Ani_obj16
00012A70 0000                       		dc.w byte_11F8E-Ani_obj16
00012A72 0000                       		dc.w byte_11F92-Ani_obj16
00012A74 0000                       		dc.w byte_11F96-Ani_obj16
00012A76 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
00012A7A 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
00012A7E 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
00012A82 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
00012A86                            		even
00012A86                            		even
00012A86                            
00012A86                            ; ---------------------------------------------------------------------------
00012A86                            ; Sprite mappings - harpoon (LZ)
00012A86                            ; ---------------------------------------------------------------------------
00012A86                            Map_obj16:
00012A86                            	include "_maps\obj16.asm"
00012A86                            ; ---------------------------------------------------------------------------
00012A86                            ; Sprite mappings - harpoon (LZ)
00012A86                            ; ---------------------------------------------------------------------------
00012A86 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
00012A8A 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
00012A8E 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00012A92 01                         byte_11FA6:	dc.b 1
00012A93 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00012A98 01                         byte_11FAC:	dc.b 1
00012A99 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00012A9E 02                         byte_11FB2:	dc.b 2
00012A9F FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00012AA4 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00012AA9 01                         byte_11FBD:	dc.b 1
00012AAA F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00012AAF 01                         byte_11FC3:	dc.b 1
00012AB0 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00012AB5 02                         byte_11FC9:	dc.b 2
00012AB6 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00012ABB F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00012AC0                            		even
00012AC0                            		even
00012AC0                            
00012AC0                            ; ===========================================================================
00012AC0                            ; ---------------------------------------------------------------------------
00012AC0                            ; Object 61 - blocks (LZ)
00012AC0                            ; ---------------------------------------------------------------------------
00012AC0                            
00012AC0                            Obj61:					; XREF: Obj_Index
00012AC0 7000                       		moveq	#0,d0
00012AC2 1028 0024                  		move.b	$24(a0),d0
00012AC6 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00012ACA 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00012ACE                            ; ===========================================================================
00012ACE 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00012AD0 0000                       		dc.w Obj61_Action-Obj61_Index
00012AD2                            
00012AD2 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00012AD4 200C                       		dc.b $20, $C
00012AD6 1010                       		dc.b $10, $10
00012AD8 1010                       		dc.b $10, $10
00012ADA                            ; ===========================================================================
00012ADA                            
00012ADA                            Obj61_Main:				; XREF: Obj61_Index
00012ADA 5428 0024                  		addq.b	#2,$24(a0)
00012ADE 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00012AE6 317C 43E6 0002             		move.w	#$43E6,2(a0)
00012AEC 117C 0004 0001             		move.b	#4,1(a0)
00012AF2 117C 0003 0018             		move.b	#3,$18(a0)
00012AF8 7000                       		moveq	#0,d0
00012AFA 1028 0028                  		move.b	$28(a0),d0
00012AFE E648                       		lsr.w	#3,d0
00012B00 0240 000E                  		andi.w	#$E,d0
00012B04 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00012B08 115A 0019                  		move.b	(a2)+,$19(a0)
00012B0C 1152 0016                  		move.b	(a2),$16(a0)
00012B10 E248                       		lsr.w	#1,d0
00012B12 1140 001A                  		move.b	d0,$1A(a0)
00012B16 3168 0008 0034             		move.w	8(a0),$34(a0)
00012B1C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012B22 1028 0028                  		move.b	$28(a0),d0
00012B26 0200 000F                  		andi.b	#$F,d0
00012B2A 6700                       		beq.s	Obj61_Action
00012B2C 0C00 0007                  		cmpi.b	#7,d0
00012B30 6700                       		beq.s	Obj61_Action
00012B32 117C 0001 0038             		move.b	#1,$38(a0)
00012B38                            
00012B38                            Obj61_Action:				; XREF: Obj61_Index
00012B38 3F28 0008                  		move.w	8(a0),-(sp)
00012B3C 7000                       		moveq	#0,d0
00012B3E 1028 0028                  		move.b	$28(a0),d0
00012B42 0240 000F                  		andi.w	#$F,d0
00012B46 D040                       		add.w	d0,d0
00012B48 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00012B4C 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00012B50 381F                       		move.w	(sp)+,d4
00012B52 4A28 0001                  		tst.b	1(a0)
00012B56 6A00                       		bpl.s	Obj61_ChkDel
00012B58 7200                       		moveq	#0,d1
00012B5A 1228 0019                  		move.b	$19(a0),d1
00012B5E 0641 000B                  		addi.w	#$B,d1
00012B62 7400                       		moveq	#0,d2
00012B64 1428 0016                  		move.b	$16(a0),d2
00012B68 3602                       		move.w	d2,d3
00012B6A 5243                       		addq.w	#1,d3
00012B6C 6100 D95A                  		bsr.w	SolidObject
00012B70 1144 003F                  		move.b	d4,$3F(a0)
00012B74 6100 0000                  		bsr.w	loc_12180
00012B78                            
00012B78                            Obj61_ChkDel:
00012B78 3028 0034                  		move.w	$34(a0),d0
00012B7C 0240 FF80                  		andi.w	#$FF80,d0
00012B80 3238 F700                  		move.w	($FFFFF700).w,d1
00012B84 0441 0080                  		subi.w	#$80,d1
00012B88 0241 FF80                  		andi.w	#$FF80,d1
00012B8C 9041                       		sub.w	d1,d0
00012B8E 0C40 0280                  		cmpi.w	#$280,d0
00012B92 6200 B586                  		bhi.w	DeleteObject
00012B96 6000 B546                  		bra.w	DisplaySprite
00012B9A                            ; ===========================================================================
00012B9A 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012B9E 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012BA2 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00012BA6 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00012BAA                            ; ===========================================================================
00012BAA                            
00012BAA                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00012BAA 4E75                       		rts	
00012BAC                            ; ===========================================================================
00012BAC                            
00012BAC                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00012BAC 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00012BB0 6600                       		bne.s	loc_120D6	; if yes, branch
00012BB2 0828 0003 0022             		btst	#3,$22(a0)
00012BB8 6700                       		beq.s	locret_120D4
00012BBA 317C 001E 0036             		move.w	#30,$36(a0)	; wait for � second
00012BC0                            
00012BC0                            locret_120D4:
00012BC0 4E75                       		rts	
00012BC2                            ; ===========================================================================
00012BC2                            
00012BC2                            loc_120D6:
00012BC2 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00012BC6 66F8                       		bne.s	locret_120D4	; if time remains, branch
00012BC8 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012BCC 4228 0038                  		clr.b	$38(a0)
00012BD0 4E75                       		rts	
00012BD2                            ; ===========================================================================
00012BD2                            
00012BD2                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00012BD2 6100 B4E4                  		bsr.w	SpeedToPos
00012BD6 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00012BDA 6100 0000                  		bsr.w	ObjHitFloor
00012BDE 4A41                       		tst.w	d1
00012BE0 6A00 0000                  		bpl.w	locret_12106
00012BE4 5241                       		addq.w	#1,d1
00012BE6 D368 000C                  		add.w	d1,$C(a0)
00012BEA 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00012BEE 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012BF2                            
00012BF2                            locret_12106:
00012BF2 4E75                       		rts	
00012BF4                            ; ===========================================================================
00012BF4                            
00012BF4                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00012BF4 6100 B4C2                  		bsr.w	SpeedToPos
00012BF8 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00012BFC 6100 0000                  		bsr.w	ObjHitCeiling
00012C00 4A41                       		tst.w	d1
00012C02 6A00 0000                  		bpl.w	locret_12126
00012C06 9368 000C                  		sub.w	d1,$C(a0)
00012C0A 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00012C0E 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012C12                            
00012C12                            locret_12126:
00012C12 4E75                       		rts	
00012C14                            ; ===========================================================================
00012C14                            
00012C14                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00012C14 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00012C1A 6600                       		bne.s	locret_12138	; if not, branch
00012C1C 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00012C20 4228 0038                  		clr.b	$38(a0)
00012C24                            
00012C24                            locret_12138:
00012C24 4E75                       		rts	
00012C26                            ; ===========================================================================
00012C26                            
00012C26                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00012C26 3038 F646                  		move.w	($FFFFF646).w,d0
00012C2A 9068 000C                  		sub.w	$C(a0),d0
00012C2E 6700                       		beq.s	locret_1217E
00012C30 6400                       		bcc.s	loc_12162
00012C32 0C40 FFFE                  		cmpi.w	#-2,d0
00012C36 6C00                       		bge.s	loc_1214E
00012C38 70FE                       		moveq	#-2,d0
00012C3A                            
00012C3A                            loc_1214E:
00012C3A D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00012C3E 6100 0000                  		bsr.w	ObjHitCeiling
00012C42 4A41                       		tst.w	d1
00012C44 6A00 0000                  		bpl.w	locret_12160
00012C48 9368 000C                  		sub.w	d1,$C(a0)
00012C4C                            
00012C4C                            locret_12160:
00012C4C 4E75                       		rts	
00012C4E                            ; ===========================================================================
00012C4E                            
00012C4E                            loc_12162:				; XREF: Obj61_Type07
00012C4E 0C40 0002                  		cmpi.w	#2,d0
00012C52 6F00                       		ble.s	loc_1216A
00012C54 7002                       		moveq	#2,d0
00012C56                            
00012C56                            loc_1216A:
00012C56 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00012C5A 6100 0000                  		bsr.w	ObjHitFloor
00012C5E 4A41                       		tst.w	d1
00012C60 6A00 0000                  		bpl.w	locret_1217E
00012C64 5241                       		addq.w	#1,d1
00012C66 D368 000C                  		add.w	d1,$C(a0)
00012C6A                            
00012C6A                            locret_1217E:
00012C6A 4E75                       		rts	
00012C6C                            ; ===========================================================================
00012C6C                            
00012C6C                            loc_12180:				; XREF: Obj61_Action
00012C6C 4A28 0038                  		tst.b	$38(a0)
00012C70 6700                       		beq.s	locret_121C0
00012C72 0828 0003 0022             		btst	#3,$22(a0)
00012C78 6600                       		bne.s	loc_1219A
00012C7A 4A28 003E                  		tst.b	$3E(a0)
00012C7E 6700                       		beq.s	locret_121C0
00012C80 5928 003E                  		subq.b	#4,$3E(a0)
00012C84 6000                       		bra.s	loc_121A6
00012C86                            ; ===========================================================================
00012C86                            
00012C86                            loc_1219A:
00012C86 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00012C8C 6700                       		beq.s	locret_121C0
00012C8E 5828 003E                  		addq.b	#4,$3E(a0)
00012C92                            
00012C92                            loc_121A6:
00012C92 1028 003E                  		move.b	$3E(a0),d0
00012C96 4EB9 0000 33D4             		jsr	(CalcSine).l
00012C9C 323C 0400                  		move.w	#$400,d1
00012CA0 C1C1                       		muls.w	d1,d0
00012CA2 4840                       		swap	d0
00012CA4 D068 0030                  		add.w	$30(a0),d0
00012CA8 3140 000C                  		move.w	d0,$C(a0)
00012CAC                            
00012CAC                            locret_121C0:
00012CAC 4E75                       		rts	
00012CAE                            ; ===========================================================================
00012CAE                            ; ---------------------------------------------------------------------------
00012CAE                            ; Sprite mappings - blocks (LZ)
00012CAE                            ; ---------------------------------------------------------------------------
00012CAE                            Map_obj61:
00012CAE                            	include "_maps\obj61.asm"
00012CAE                            ; ---------------------------------------------------------------------------
00012CAE                            ; Sprite mappings - blocks (LZ)
00012CAE                            ; ---------------------------------------------------------------------------
00012CAE 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00012CB2 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012CB6 01                         byte_121CA:	dc.b 1
00012CB7 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012CBC 02                         byte_121D0:	dc.b 2
00012CBD F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00012CC2 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012CC7 01                         byte_121DB:	dc.b 1
00012CC8 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012CCD 01                         byte_121E1:	dc.b 1
00012CCE F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012CD4 00                         		even
00012CD4 00                         		even
00012CD4                            
00012CD4                            ; ===========================================================================
00012CD4                            ; ---------------------------------------------------------------------------
00012CD4                            ; Object 62 - gargoyle head (LZ)
00012CD4                            ; ---------------------------------------------------------------------------
00012CD4                            
00012CD4                            Obj62:					; XREF: Obj_Index
00012CD4 7000                       		moveq	#0,d0
00012CD6 1028 0024                  		move.b	$24(a0),d0
00012CDA 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00012CDE 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00012CE2 6000 D4BC                  		bra.w	MarkObjGone
00012CE6                            ; ===========================================================================
00012CE6 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012CE8 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00012CEA 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012CEC 0000                       		dc.w Obj62_AniFire-Obj62_Index
00012CEE                            
00012CEE 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00012CF6                            ; ===========================================================================
00012CF6                            
00012CF6                            Obj62_Main:				; XREF: Obj62_Index
00012CF6 5428 0024                  		addq.b	#2,$24(a0)
00012CFA 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012D02 317C 42E9 0002             		move.w	#$42E9,2(a0)
00012D08 0028 0004 0001             		ori.b	#4,1(a0)
00012D0E 117C 0003 0018             		move.b	#3,$18(a0)
00012D14 117C 0010 0019             		move.b	#$10,$19(a0)
00012D1A 1028 0028                  		move.b	$28(a0),d0	; get object type
00012D1E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012D22 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00012D28 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012D2E 0228 000F 0028             		andi.b	#$F,$28(a0)
00012D34                            
00012D34                            Obj62_MakeFire:				; XREF: Obj62_Index
00012D34 5328 001E                  		subq.b	#1,$1E(a0)
00012D38 6600                       		bne.s	Obj62_NoFire
00012D3A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012D40 6100 B618                  		bsr.w	ChkObjOnScreen
00012D44 6600                       		bne.s	Obj62_NoFire
00012D46 6100 B82C                  		bsr.w	SingleObjLoad
00012D4A 6600                       		bne.s	Obj62_NoFire
00012D4C 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00012D50 5829 0024                  		addq.b	#4,$24(a1)
00012D54 3368 0008 0008             		move.w	8(a0),8(a1)
00012D5A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012D60 1368 0001 0001             		move.b	1(a0),1(a1)
00012D66 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012D6C                            
00012D6C                            Obj62_NoFire:
00012D6C 4E75                       		rts	
00012D6E                            ; ===========================================================================
00012D6E                            
00012D6E                            Obj62_FireBall:				; XREF: Obj62_Index
00012D6E 5428 0024                  		addq.b	#2,$24(a0)
00012D72 117C 0008 0016             		move.b	#8,$16(a0)
00012D78 117C 0008 0017             		move.b	#8,$17(a0)
00012D7E 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012D86 317C 02E9 0002             		move.w	#$2E9,2(a0)
00012D8C 0028 0004 0001             		ori.b	#4,1(a0)
00012D92 117C 0004 0018             		move.b	#4,$18(a0)
00012D98 117C 0098 0020             		move.b	#$98,$20(a0)
00012D9E 117C 0008 0019             		move.b	#8,$19(a0)
00012DA4 117C 0002 001A             		move.b	#2,$1A(a0)
00012DAA 5068 000C                  		addq.w	#8,$C(a0)
00012DAE 317C 0200 0010             		move.w	#$200,$10(a0)
00012DB4 0828 0000 0022             		btst	#0,$22(a0)
00012DBA 6600                       		bne.s	Obj62_Sound
00012DBC 4468 0010                  		neg.w	$10(a0)
00012DC0                            
00012DC0                            Obj62_Sound:
00012DC0 303C 00AE                  		move.w	#$AE,d0
00012DC4 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012DCA                            
00012DCA                            Obj62_AniFire:				; XREF: Obj62_Index
00012DCA 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012DCE 0200 0007                  		andi.b	#7,d0
00012DD2 6600                       		bne.s	Obj62_StopFire
00012DD4 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012DDA                            
00012DDA                            Obj62_StopFire:
00012DDA 6100 B2DC                  		bsr.w	SpeedToPos
00012DDE 0828 0000 0022             		btst	#0,$22(a0)
00012DE4 6600                       		bne.s	Obj62_StopFire2
00012DE6 76F8                       		moveq	#-8,d3
00012DE8 6100 0000                  		bsr.w	ObjHitWallLeft
00012DEC 4A41                       		tst.w	d1
00012DEE 6B00 B32A                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012DF2 4E75                       		rts	
00012DF4                            ; ===========================================================================
00012DF4                            
00012DF4                            Obj62_StopFire2:
00012DF4 7608                       		moveq	#8,d3
00012DF6 6100 0000                  		bsr.w	ObjHitWallRight
00012DFA 4A41                       		tst.w	d1
00012DFC 6B00 B31C                  		bmi.w	DeleteObject
00012E00 4E75                       		rts	
00012E02                            ; ===========================================================================
00012E02                            ; ---------------------------------------------------------------------------
00012E02                            ; Sprite mappings - gargoyle head (LZ)
00012E02                            ; ---------------------------------------------------------------------------
00012E02                            Map_obj62:
00012E02                            	include "_maps\obj62.asm"
00012E02                            ; ---------------------------------------------------------------------------
00012E02                            ; Sprite mappings - gargoyle head (LZ)
00012E02                            ; ---------------------------------------------------------------------------
00012E02 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012E06 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012E0A 03                         byte_12320:	dc.b 3
00012E0B F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00012E10 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012E15 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012E1A 01                         byte_12330:	dc.b 1
00012E1B FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012E20 01                         byte_12336:	dc.b 1
00012E21 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012E26                            		even
00012E26                            		even
00012E26                            
00012E26                            ; ===========================================================================
00012E26                            ; ---------------------------------------------------------------------------
00012E26                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012E26                            ; ---------------------------------------------------------------------------
00012E26                            
00012E26                            Obj63:					; XREF: Obj_Index
00012E26 7000                       		moveq	#0,d0
00012E28 1028 0024                  		move.b	$24(a0),d0
00012E2C 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00012E30 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012E34 3028 0030                  		move.w	$30(a0),d0
00012E38 0240 FF80                  		andi.w	#$FF80,d0
00012E3C 3238 F700                  		move.w	($FFFFF700).w,d1
00012E40 0441 0080                  		subi.w	#$80,d1
00012E44 0241 FF80                  		andi.w	#$FF80,d1
00012E48 9041                       		sub.w	d1,d0
00012E4A 0C40 0280                  		cmpi.w	#$280,d0
00012E4E 6200                       		bhi.s	loc_1236A
00012E50                            
00012E50                            Obj63_Display:				; XREF: loc_1236A
00012E50 6000 B28C                  		bra.w	DisplaySprite
00012E54                            ; ===========================================================================
00012E54                            
00012E54                            loc_1236A:				; XREF: Obj63
00012E54 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012E5A 6600                       		bne.s	loc_12378
00012E5C 0C40 FF80                  		cmpi.w	#-$80,d0
00012E60 64EE                       		bcc.s	Obj63_Display
00012E62                            
00012E62                            loc_12378:
00012E62 1028 002F                  		move.b	$2F(a0),d0
00012E66 6A00 B2B2                  		bpl.w	DeleteObject
00012E6A 0240 007F                  		andi.w	#$7F,d0
00012E6E 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012E72 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012E78 6000 B2A0                  		bra.w	DeleteObject
00012E7C                            ; ===========================================================================
00012E7C 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00012E7E 0000                       		dc.w loc_124B2-Obj63_Index
00012E80 0000                       		dc.w loc_124C2-Obj63_Index
00012E82 0000                       		dc.w loc_124DE-Obj63_Index
00012E84                            ; ===========================================================================
00012E84                            
00012E84                            Obj63_Main:				; XREF: Obj63_Index
00012E84 1028 0028                  		move.b	$28(a0),d0
00012E88 6B00 0000                  		bmi.w	loc_12460
00012E8C 5428 0024                  		addq.b	#2,$24(a0)
00012E90 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012E98 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012E9E 0028 0004 0001             		ori.b	#4,1(a0)
00012EA4 117C 0010 0019             		move.b	#$10,$19(a0)
00012EAA 117C 0004 0018             		move.b	#4,$18(a0)
00012EB0 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012EB6 6600                       		bne.s	loc_123E2
00012EB8 5828 0024                  		addq.b	#4,$24(a0)
00012EBC 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012EC2 117C 0001 0018             		move.b	#1,$18(a0)
00012EC8 6000 0000                  		bra.w	loc_124DE
00012ECC                            ; ===========================================================================
00012ECC                            
00012ECC                            loc_123E2:
00012ECC 117C 0004 001A             		move.b	#4,$1A(a0)
00012ED2 7000                       		moveq	#0,d0
00012ED4 1028 0028                  		move.b	$28(a0),d0
00012ED8 3200                       		move.w	d0,d1
00012EDA E648                       		lsr.w	#3,d0
00012EDC 0240 001E                  		andi.w	#$1E,d0
00012EE0 45FA 0000                  		lea	Obj63_Data(pc),a2
00012EE4 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012EE8 315A 0038                  		move.w	(a2)+,$38(a0)
00012EEC 315A 0030                  		move.w	(a2)+,$30(a0)
00012EF0 214A 003C                  		move.l	a2,$3C(a0)
00012EF4 0241 000F                  		andi.w	#$F,d1
00012EF8 E549                       		lsl.w	#2,d1
00012EFA 1141 0038                  		move.b	d1,$38(a0)
00012EFE 117C 0004 003A             		move.b	#4,$3A(a0)
00012F04 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012F08 6700                       		beq.s	loc_1244C
00012F0A 117C 0001 003B             		move.b	#1,$3B(a0)
00012F10 4428 003A                  		neg.b	$3A(a0)
00012F14 7200                       		moveq	#0,d1
00012F16 1228 0038                  		move.b	$38(a0),d1
00012F1A D228 003A                  		add.b	$3A(a0),d1
00012F1E B228 0039                  		cmp.b	$39(a0),d1
00012F22 6500                       		bcs.s	loc_12448
00012F24 1001                       		move.b	d1,d0
00012F26 7200                       		moveq	#0,d1
00012F28 4A00                       		tst.b	d0
00012F2A 6A00                       		bpl.s	loc_12448
00012F2C 1228 0039                  		move.b	$39(a0),d1
00012F30 5901                       		subq.b	#4,d1
00012F32                            
00012F32                            loc_12448:
00012F32 1141 0038                  		move.b	d1,$38(a0)
00012F36                            
00012F36                            loc_1244C:
00012F36 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00012F3C 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00012F42 6100 0000                  		bsr.w	Obj63_ChangeDir
00012F46 6000 0000                  		bra.w	loc_124B2
00012F4A                            ; ===========================================================================
00012F4A                            
00012F4A                            loc_12460:				; XREF: Obj63_Main
00012F4A 1140 002F                  		move.b	d0,$2F(a0)
00012F4E 0240 007F                  		andi.w	#$7F,d0
00012F52 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012F56 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012F5C 6600 B1BC                  		bne.w	DeleteObject
00012F60 D040                       		add.w	d0,d0
00012F62 0240 001E                  		andi.w	#$1E,d0
00012F66 0640 0070                  		addi.w	#$70,d0
00012F6A 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00012F70 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012F74 321A                       		move.w	(a2)+,d1
00012F76 2248                       		movea.l	a0,a1
00012F78 6000                       		bra.s	Obj63_MakePtfms
00012F7A                            ; ===========================================================================
00012F7A                            
00012F7A                            Obj63_Loop:
00012F7A 6100 B5F8                  		bsr.w	SingleObjLoad
00012F7E 6600                       		bne.s	loc_124AA
00012F80                            
00012F80                            Obj63_MakePtfms:			; XREF: loc_12460
00012F80 12BC 0063                  		move.b	#$63,0(a1)
00012F84 335A 0008                  		move.w	(a2)+,8(a1)
00012F88 335A 000C                  		move.w	(a2)+,$C(a1)
00012F8C 301A                       		move.w	(a2)+,d0
00012F8E 1340 0028                  		move.b	d0,$28(a1)
00012F92                            
00012F92                            loc_124AA:
00012F92 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012F96                            
00012F96 588F                       		addq.l	#4,sp
00012F98 4E75                       		rts	
00012F9A                            ; ===========================================================================
00012F9A                            
00012F9A                            loc_124B2:				; XREF: Obj63_Index
00012F9A 7200                       		moveq	#0,d1
00012F9C 1228 0019                  		move.b	$19(a0),d1
00012FA0 4EB9 0000 7ED0             		jsr	(PlatformObject).l
00012FA6 6000 0000                  		bra.w	sub_12502
00012FAA                            ; ===========================================================================
00012FAA                            
00012FAA                            loc_124C2:				; XREF: Obj63_Index
00012FAA 7200                       		moveq	#0,d1
00012FAC 1228 0019                  		move.b	$19(a0),d1
00012FB0 4EB9 0000 8044             		jsr	(ExitPlatform).l
00012FB6 3F28 0008                  		move.w	8(a0),-(sp)
00012FBA 6100 0000                  		bsr.w	sub_12502
00012FBE 341F                       		move.w	(sp)+,d2
00012FC0 4EF9 0000 85AE             		jmp	(MvSonicOnPtfm2).l
00012FC6                            ; ===========================================================================
00012FC6                            
00012FC6                            loc_124DE:				; XREF: Obj63_Index
00012FC6 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012FCA 0240 0003                  		andi.w	#3,d0
00012FCE 6600                       		bne.s	loc_124FC
00012FD0 7201                       		moveq	#1,d1
00012FD2 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012FD6 6700                       		beq.s	loc_124F2
00012FD8 4401                       		neg.b	d1
00012FDA                            
00012FDA                            loc_124F2:
00012FDA D328 001A                  		add.b	d1,$1A(a0)
00012FDE 0228 0003 001A             		andi.b	#3,$1A(a0)
00012FE4                            
00012FE4                            loc_124FC:
00012FE4 588F                       		addq.l	#4,sp
00012FE6 6000 D1B8                  		bra.w	MarkObjGone
00012FEA                            
00012FEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012FEA                            
00012FEA                            
00012FEA                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012FEA 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012FEE 6700                       		beq.s	loc_12520
00012FF0 4A28 003B                  		tst.b	$3B(a0)
00012FF4 6600                       		bne.s	loc_12520
00012FF6 117C 0001 003B             		move.b	#1,$3B(a0)
00012FFC 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00013002 4428 003A                  		neg.b	$3A(a0)
00013006 6000                       		bra.s	loc_12534
00013008                            ; ===========================================================================
00013008                            
00013008                            loc_12520:
00013008 3028 0008                  		move.w	8(a0),d0
0001300C B068 0034                  		cmp.w	$34(a0),d0
00013010 6600                       		bne.s	loc_1256A
00013012 3028 000C                  		move.w	$C(a0),d0
00013016 B068 0036                  		cmp.w	$36(a0),d0
0001301A 6600                       		bne.s	loc_1256A
0001301C                            
0001301C                            loc_12534:
0001301C 7200                       		moveq	#0,d1
0001301E 1228 0038                  		move.b	$38(a0),d1
00013022 D228 003A                  		add.b	$3A(a0),d1
00013026 B228 0039                  		cmp.b	$39(a0),d1
0001302A 6500                       		bcs.s	loc_12552
0001302C 1001                       		move.b	d1,d0
0001302E 7200                       		moveq	#0,d1
00013030 4A00                       		tst.b	d0
00013032 6A00                       		bpl.s	loc_12552
00013034 1228 0039                  		move.b	$39(a0),d1
00013038 5901                       		subq.b	#4,d1
0001303A                            
0001303A                            loc_12552:
0001303A 1141 0038                  		move.b	d1,$38(a0)
0001303E 2268 003C                  		movea.l	$3C(a0),a1
00013042 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00013048 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
0001304E 6100 0000                  		bsr.w	Obj63_ChangeDir
00013052                            
00013052                            loc_1256A:
00013052 6100 B064                  		bsr.w	SpeedToPos
00013056 4E75                       		rts	
00013058                            ; End of function sub_12502
00013058                            
00013058                            
00013058                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013058                            
00013058                            
00013058                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00013058 7000                       		moveq	#0,d0
0001305A 343C FF00                  		move.w	#-$100,d2
0001305E 3028 0008                  		move.w	8(a0),d0
00013062 9068 0034                  		sub.w	$34(a0),d0
00013066 6400                       		bcc.s	loc_12584
00013068 4440                       		neg.w	d0
0001306A 4442                       		neg.w	d2
0001306C                            
0001306C                            loc_12584:
0001306C 7200                       		moveq	#0,d1
0001306E 363C FF00                  		move.w	#-$100,d3
00013072 3228 000C                  		move.w	$C(a0),d1
00013076 9268 0036                  		sub.w	$36(a0),d1
0001307A 6400                       		bcc.s	loc_12598
0001307C 4441                       		neg.w	d1
0001307E 4443                       		neg.w	d3
00013080                            
00013080                            loc_12598:
00013080 B240                       		cmp.w	d0,d1
00013082 6500                       		bcs.s	loc_125C2
00013084 3028 0008                  		move.w	8(a0),d0
00013088 9068 0034                  		sub.w	$34(a0),d0
0001308C 6700                       		beq.s	loc_125AE
0001308E 48C0                       		ext.l	d0
00013090 E180                       		asl.l	#8,d0
00013092 81C1                       		divs.w	d1,d0
00013094 4440                       		neg.w	d0
00013096                            
00013096                            loc_125AE:
00013096 3140 0010                  		move.w	d0,$10(a0)
0001309A 3143 0012                  		move.w	d3,$12(a0)
0001309E 4840                       		swap	d0
000130A0 3140 000A                  		move.w	d0,$A(a0)
000130A4 4268 000E                  		clr.w	$E(a0)
000130A8 4E75                       		rts	
000130AA                            ; ===========================================================================
000130AA                            
000130AA                            loc_125C2:				; XREF: Obj63_ChangeDir
000130AA 3228 000C                  		move.w	$C(a0),d1
000130AE 9268 0036                  		sub.w	$36(a0),d1
000130B2 6700                       		beq.s	loc_125D4
000130B4 48C1                       		ext.l	d1
000130B6 E181                       		asl.l	#8,d1
000130B8 83C0                       		divs.w	d0,d1
000130BA 4441                       		neg.w	d1
000130BC                            
000130BC                            loc_125D4:
000130BC 3141 0012                  		move.w	d1,$12(a0)
000130C0 3142 0010                  		move.w	d2,$10(a0)
000130C4 4841                       		swap	d1
000130C6 3141 000E                  		move.w	d1,$E(a0)
000130CA 4268 000A                  		clr.w	$A(a0)
000130CE 4E75                       		rts	
000130D0                            ; End of function Obj63_ChangeDir
000130D0                            
000130D0                            ; ===========================================================================
000130D0 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
000130D2 0000                       		dc.w word_12610-Obj63_Data
000130D4 0000                       		dc.w word_12628-Obj63_Data
000130D6 0000                       		dc.w word_1263C-Obj63_Data
000130D8 0000                       		dc.w word_12650-Obj63_Data
000130DA 0000                       		dc.w word_12668-Obj63_Data
000130DC 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
000130EC 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
000130F8 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00013108 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00013110 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00013124 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00013138 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00013150 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00013164                            
00013164                            ; ---------------------------------------------------------------------------
00013164                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00013164                            ; ---------------------------------------------------------------------------
00013164                            Map_obj63:
00013164                            	include "_maps\obj63.asm"
00013164                            ; ---------------------------------------------------------------------------
00013164                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00013164                            ; ---------------------------------------------------------------------------
00013164 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00013168 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
0001316C 0000                       		dc.w byte_1269E-Map_obj63
0001316E 01                         byte_12686:	dc.b 1
0001316F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00013174 01                         byte_1268C:	dc.b 1
00013175 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0001317A 01                         byte_12692:	dc.b 1
0001317B F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00013180 01                         byte_12698:	dc.b 1
00013181 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00013186 01                         byte_1269E:	dc.b 1
00013187 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
0001318C                            		even
0001318C                            		even
0001318C                            
0001318C                            ; ===========================================================================
0001318C                            ; ---------------------------------------------------------------------------
0001318C                            ; Object 64 - bubbles (LZ)
0001318C                            ; ---------------------------------------------------------------------------
0001318C                            
0001318C                            Obj64:					; XREF: Obj_Index
0001318C 7000                       		moveq	#0,d0
0001318E 1028 0024                  		move.b	$24(a0),d0
00013192 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00013196 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
0001319A                            ; ===========================================================================
0001319A 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
0001319C 0000                       		dc.w Obj64_Animate-Obj64_Index
0001319E 0000                       		dc.w Obj64_ChkWater-Obj64_Index
000131A0 0000                       		dc.w Obj64_Display2-Obj64_Index
000131A2 0000                       		dc.w Obj64_Delete3-Obj64_Index
000131A4 0000                       		dc.w Obj64_BblMaker-Obj64_Index
000131A6                            ; ===========================================================================
000131A6                            
000131A6                            Obj64_Main:				; XREF: Obj64_Index
000131A6 5428 0024                  		addq.b	#2,$24(a0)
000131AA 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
000131B2 317C 8348 0002             		move.w	#$8348,2(a0)
000131B8 117C 0084 0001             		move.b	#$84,1(a0)
000131BE 117C 0010 0019             		move.b	#$10,$19(a0)
000131C4 117C 0001 0018             		move.b	#1,$18(a0)
000131CA 1028 0028                  		move.b	$28(a0),d0	; get object type
000131CE 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
000131D0 5028 0024                  		addq.b	#8,$24(a0)
000131D4 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
000131D8 1140 0032                  		move.b	d0,$32(a0)
000131DC 1140 0033                  		move.b	d0,$33(a0)
000131E0 117C 0006 001C             		move.b	#6,$1C(a0)
000131E6 6000 0000                  		bra.w	Obj64_BblMaker
000131EA                            ; ===========================================================================
000131EA                            
000131EA                            Obj64_Bubble:				; XREF: Obj64_Main
000131EA 1140 001C                  		move.b	d0,$1C(a0)
000131EE 3168 0008 0030             		move.w	8(a0),$30(a0)
000131F4 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
000131FA 4EB9 0000 33AE             		jsr	(RandomNumber).l
00013200 1140 0026                  		move.b	d0,$26(a0)
00013204                            
00013204                            Obj64_Animate:				; XREF: Obj64_Index
00013204 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001320A 4EB9 0000 B1F0             		jsr	AnimateSprite
00013210 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00013216 6600                       		bne.s	Obj64_ChkWater
00013218 117C 0001 002E             		move.b	#1,$2E(a0)
0001321E                            
0001321E                            Obj64_ChkWater:				; XREF: Obj64_Index
0001321E 3038 F646                  		move.w	($FFFFF646).w,d0
00013222 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00013226 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00013228                            
00013228                            Obj64_Burst:				; XREF: Obj64_Wobble
00013228 117C 0006 0024             		move.b	#6,$24(a0)
0001322E 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00013232 6000 0000                  		bra.w	Obj64_Display2
00013236                            ; ===========================================================================
00013236                            
00013236                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00013236 1028 0026                  		move.b	$26(a0),d0
0001323A 5228 0026                  		addq.b	#1,$26(a0)
0001323E 0240 007F                  		andi.w	#$7F,d0
00013242 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00013248 1031 0000                  		move.b	(a1,d0.w),d0
0001324C 4880                       		ext.w	d0
0001324E D068 0030                  		add.w	$30(a0),d0
00013252 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00013256 4A28 002E                  		tst.b	$2E(a0)
0001325A 6700                       		beq.s	Obj64_Display
0001325C 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00013260 6700                       		beq.s	Obj64_Display	; if not, branch
00013262                            
00013262 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00013266 303C 00AD                  		move.w	#$AD,d0
0001326A 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00013270 43F8 D000                  		lea	($FFFFD000).w,a1
00013274 4269 0010                  		clr.w	$10(a1)
00013278 4269 0012                  		clr.w	$12(a1)
0001327C 4269 0014                  		clr.w	$14(a1)
00013280 137C 0015 001C             		move.b	#$15,$1C(a1)
00013286 337C 0023 003E             		move.w	#$23,$3E(a1)
0001328C 137C 0000 003C             		move.b	#0,$3C(a1)
00013292 08A9 0005 0022             		bclr	#5,$22(a1)
00013298 08A9 0004 0022             		bclr	#4,$22(a1)
0001329E 0829 0002 0022             		btst	#2,$22(a1)
000132A4 6700 FF82                  		beq.w	Obj64_Burst
000132A8 08A9 0002 0022             		bclr	#2,$22(a1)
000132AE 137C 0013 0016             		move.b	#$13,$16(a1)
000132B4 137C 0009 0017             		move.b	#9,$17(a1)
000132BA 5B69 000C                  		subq.w	#5,$C(a1)
000132BE 6000 FF68                  		bra.w	Obj64_Burst
000132C2                            ; ===========================================================================
000132C2                            
000132C2                            Obj64_Display:				; XREF: Obj64_Wobble
000132C2 6100 ADF4                  		bsr.w	SpeedToPos
000132C6 4A28 0001                  		tst.b	1(a0)
000132CA 6A00                       		bpl.s	Obj64_Delete
000132CC 4EFA AE10                  		jmp	DisplaySprite
000132D0                            ; ===========================================================================
000132D0                            
000132D0                            Obj64_Delete:
000132D0 4EFA AE48                  		jmp	DeleteObject
000132D4                            ; ===========================================================================
000132D4                            
000132D4                            Obj64_Display2:				; XREF: Obj64_Index
000132D4 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000132DA 4EB9 0000 B1F0             		jsr	AnimateSprite
000132E0 4A28 0001                  		tst.b	1(a0)
000132E4 6A00                       		bpl.s	Obj64_Delete2
000132E6 4EFA ADF6                  		jmp	DisplaySprite
000132EA                            ; ===========================================================================
000132EA                            
000132EA                            Obj64_Delete2:
000132EA 4EFA AE2E                  		jmp	DeleteObject
000132EE                            ; ===========================================================================
000132EE                            
000132EE                            Obj64_Delete3:				; XREF: Obj64_Index
000132EE 6000 AE2A                  		bra.w	DeleteObject
000132F2                            ; ===========================================================================
000132F2                            
000132F2                            Obj64_BblMaker:				; XREF: Obj64_Index
000132F2 4A68 0036                  		tst.w	$36(a0)
000132F6 6600                       		bne.s	loc_12874
000132F8 3038 F646                  		move.w	($FFFFF646).w,d0
000132FC B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00013300 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00013304 4A28 0001                  		tst.b	1(a0)
00013308 6A00 0000                  		bpl.w	Obj64_ChkDel
0001330C 5368 0038                  		subq.w	#1,$38(a0)
00013310 6A00 0000                  		bpl.w	loc_12914
00013314 317C 0001 0036             		move.w	#1,$36(a0)
0001331A                            
0001331A                            loc_1283A:
0001331A 4EB9 0000 33AE             		jsr	(RandomNumber).l
00013320 3200                       		move.w	d0,d1
00013322 0240 0007                  		andi.w	#7,d0
00013326 0C40 0006                  		cmpi.w	#6,d0
0001332A 64EE                       		bcc.s	loc_1283A
0001332C                            
0001332C 1140 0034                  		move.b	d0,$34(a0)
00013330 0241 000C                  		andi.w	#$C,d1
00013334 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
0001333A D2C1                       		adda.w	d1,a1
0001333C 2149 003C                  		move.l	a1,$3C(a0)
00013340 5328 0032                  		subq.b	#1,$32(a0)
00013344 6A00                       		bpl.s	loc_12872
00013346 1168 0033 0032             		move.b	$33(a0),$32(a0)
0001334C 08E8 0007 0036             		bset	#7,$36(a0)
00013352                            
00013352                            loc_12872:
00013352 6000                       		bra.s	loc_1287C
00013354                            ; ===========================================================================
00013354                            
00013354                            loc_12874:				; XREF: Obj64_BblMaker
00013354 5368 0038                  		subq.w	#1,$38(a0)
00013358 6A00 0000                  		bpl.w	loc_12914
0001335C                            
0001335C                            loc_1287C:
0001335C 4EB9 0000 33AE             		jsr	(RandomNumber).l
00013362 0240 001F                  		andi.w	#$1F,d0
00013366 3140 0038                  		move.w	d0,$38(a0)
0001336A 6100 B208                  		bsr.w	SingleObjLoad
0001336E 6600                       		bne.s	loc_128F8
00013370 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00013374 3368 0008 0008             		move.w	8(a0),8(a1)
0001337A 4EB9 0000 33AE             		jsr	(RandomNumber).l
00013380 0240 000F                  		andi.w	#$F,d0
00013384 5140                       		subq.w	#8,d0
00013386 D169 0008                  		add.w	d0,8(a1)
0001338A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013390 7000                       		moveq	#0,d0
00013392 1028 0034                  		move.b	$34(a0),d0
00013396 2468 003C                  		movea.l	$3C(a0),a2
0001339A 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
000133A0 0828 0007 0036             		btst	#7,$36(a0)
000133A6 6700                       		beq.s	loc_128F8
000133A8 4EB9 0000 33AE             		jsr	(RandomNumber).l
000133AE 0240 0003                  		andi.w	#3,d0
000133B2 6600                       		bne.s	loc_128E4
000133B4 08E8 0006 0036             		bset	#6,$36(a0)
000133BA 6600                       		bne.s	loc_128F8
000133BC 137C 0002 0028             		move.b	#2,$28(a1)
000133C2                            
000133C2                            loc_128E4:
000133C2 4A28 0034                  		tst.b	$34(a0)
000133C6 6600                       		bne.s	loc_128F8
000133C8 08E8 0006 0036             		bset	#6,$36(a0)
000133CE 6600                       		bne.s	loc_128F8
000133D0 137C 0002 0028             		move.b	#2,$28(a1)
000133D6                            
000133D6                            loc_128F8:
000133D6 5328 0034                  		subq.b	#1,$34(a0)
000133DA 6A00                       		bpl.s	loc_12914
000133DC 4EB9 0000 33AE             		jsr	(RandomNumber).l
000133E2 0240 007F                  		andi.w	#$7F,d0
000133E6 0640 0080                  		addi.w	#$80,d0
000133EA D168 0038                  		add.w	d0,$38(a0)
000133EE 4268 0036                  		clr.w	$36(a0)
000133F2                            
000133F2                            loc_12914:
000133F2 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000133F8 4EB9 0000 B1F0             		jsr	AnimateSprite
000133FE                            
000133FE                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
000133FE 3028 0008                  		move.w	8(a0),d0
00013402 0240 FF80                  		andi.w	#$FF80,d0
00013406 3238 F700                  		move.w	($FFFFF700).w,d1
0001340A 0441 0080                  		subi.w	#$80,d1
0001340E 0241 FF80                  		andi.w	#$FF80,d1
00013412 9041                       		sub.w	d1,d0
00013414 0C40 0280                  		cmpi.w	#$280,d0
00013418 6200 AD00                  		bhi.w	DeleteObject
0001341C 3038 F646                  		move.w	($FFFFF646).w,d0
00013420 B068 000C                  		cmp.w	$C(a0),d0
00013424 6500 ACB8                  		bcs.w	DisplaySprite
00013428 4E75                       		rts	
0001342A                            ; ===========================================================================
0001342A                            ; bubble production sequence
0001342A                            
0001342A                            ; 0 = small bubble, 1 =	large bubble
0001342A                            
0001342A 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
0001343C                            
0001343C                            ; ===========================================================================
0001343C                            
0001343C                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
0001343C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013440 6B00                       		bmi.s	loc_12998
00013442 43F8 D000                  		lea	($FFFFD000).w,a1
00013446 3029 0008                  		move.w	8(a1),d0
0001344A 3228 0008                  		move.w	8(a0),d1
0001344E 0441 0010                  		subi.w	#$10,d1
00013452 B240                       		cmp.w	d0,d1
00013454 6400                       		bcc.s	loc_12998
00013456 0641 0020                  		addi.w	#$20,d1
0001345A B240                       		cmp.w	d0,d1
0001345C 6500                       		bcs.s	loc_12998
0001345E 3029 000C                  		move.w	$C(a1),d0
00013462 3228 000C                  		move.w	$C(a0),d1
00013466 B240                       		cmp.w	d0,d1
00013468 6400                       		bcc.s	loc_12998
0001346A 0641 0010                  		addi.w	#$10,d1
0001346E B240                       		cmp.w	d0,d1
00013470 6500                       		bcs.s	loc_12998
00013472 7001                       		moveq	#1,d0
00013474 4E75                       		rts	
00013476                            ; ===========================================================================
00013476                            
00013476                            loc_12998:
00013476 7000                       		moveq	#0,d0
00013478 4E75                       		rts	
0001347A                            ; ===========================================================================
0001347A                            Ani_obj64:
0001347A                            	include "_anim\obj64.asm"
0001347A                            ; ---------------------------------------------------------------------------
0001347A                            ; Animation script - bubbles (LZ)
0001347A                            ; ---------------------------------------------------------------------------
0001347A 0000                       		dc.w byte_129AA-Ani_obj64
0001347C 0000                       		dc.w byte_129B0-Ani_obj64
0001347E 0000                       		dc.w byte_129B6-Ani_obj64
00013480 0000                       		dc.w byte_129BE-Ani_obj64
00013482 0000                       		dc.w byte_129BE-Ani_obj64
00013484 0000                       		dc.w byte_129C0-Ani_obj64
00013486 0000                       		dc.w byte_129C6-Ani_obj64
00013488 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
0001348E 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00013494 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
0001349C 04FC                       byte_129BE:	dc.b 4,	$FC
0001349E 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
000134A4 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
000134AA 00                         		even
000134AA 00                         		even
000134AA                            
000134AA                            ; ---------------------------------------------------------------------------
000134AA                            ; Sprite mappings - bubbles (LZ)
000134AA                            ; ---------------------------------------------------------------------------
000134AA                            Map_obj64:
000134AA                            	include "_maps\obj64.asm"
000134AA                            ; ---------------------------------------------------------------------------
000134AA                            ; Sprite mappings - bubbles (LZ)
000134AA                            ; ---------------------------------------------------------------------------
000134AA 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
000134AE 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
000134B2 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
000134B6 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
000134BA 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
000134BE 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
000134C2 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
000134C6 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
000134CA 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
000134CE 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
000134D2 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
000134D6 0000                       		dc.w byte_12A9C-Map_obj64
000134D8 01                         byte_129FA:	dc.b 1
000134D9 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
000134DE 01                         byte_12A00:	dc.b 1
000134DF FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
000134E4 01                         byte_12A06:	dc.b 1
000134E5 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
000134EA 01                         byte_12A0C:	dc.b 1
000134EB F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
000134F0 01                         byte_12A12:	dc.b 1
000134F1 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
000134F6 01                         byte_12A18:	dc.b 1
000134F7 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
000134FC 01                         byte_12A1E:	dc.b 1
000134FD F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00013502 04                         byte_12A24:	dc.b 4
00013503 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00013508 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
0001350D 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00013512 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00013517 04                         byte_12A39:	dc.b 4
00013518 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
0001351D F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00013522 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00013527 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
0001352C 01                         byte_12A4E:	dc.b 1
0001352D F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00013532 01                         byte_12A54:	dc.b 1
00013533 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00013538 01                         byte_12A5A:	dc.b 1
00013539 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
0001353E 01                         byte_12A60:	dc.b 1
0001353F F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00013544 01                         byte_12A66:	dc.b 1
00013545 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
0001354A 01                         byte_12A6C:	dc.b 1
0001354B F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00013550 01                         byte_12A72:	dc.b 1
00013551 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00013556 01                         byte_12A78:	dc.b 1
00013557 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
0001355C 01                         byte_12A7E:	dc.b 1
0001355D F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00013562 01                         byte_12A84:	dc.b 1
00013563 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00013568 01                         byte_12A8A:	dc.b 1
00013569 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
0001356E 01                         byte_12A90:	dc.b 1
0001356F F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00013574 01                         byte_12A96:	dc.b 1
00013575 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
0001357A 00                         byte_12A9C:	dc.b 0
0001357C 00                         		even
0001357C 00                         		even
0001357C                            
0001357C                            ; ===========================================================================
0001357C                            ; ---------------------------------------------------------------------------
0001357C                            ; Object 65 - waterfalls (LZ)
0001357C                            ; ---------------------------------------------------------------------------
0001357C                            
0001357C                            Obj65:					; XREF: Obj_Index
0001357C 7000                       		moveq	#0,d0
0001357E 1028 0024                  		move.b	$24(a0),d0
00013582 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00013586 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
0001358A                            ; ===========================================================================
0001358A 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
0001358C 0000                       		dc.w Obj65_Animate-Obj65_Index
0001358E 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00013590 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00013592 0000                       		dc.w loc_12B36-Obj65_Index
00013594                            ; ===========================================================================
00013594                            
00013594                            Obj65_Main:				; XREF: Obj65_Index
00013594 5828 0024                  		addq.b	#4,$24(a0)
00013598 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
000135A0 317C 4259 0002             		move.w	#$4259,2(a0)
000135A6 0028 0004 0001             		ori.b	#4,1(a0)
000135AC 117C 0018 0019             		move.b	#$18,$19(a0)
000135B2 117C 0001 0018             		move.b	#1,$18(a0)
000135B8 1028 0028                  		move.b	$28(a0),d0	; get object type
000135BC 6A00                       		bpl.s	loc_12AE6
000135BE 08E8 0007 0002             		bset	#7,2(a0)
000135C4                            
000135C4                            loc_12AE6:
000135C4 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
000135C8 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
000135CC 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
000135D0 6600                       		bne.s	Obj65_ChkDel	; if not, branch
000135D2 4228 0018                  		clr.b	$18(a0)
000135D6 5528 0024                  		subq.b	#2,$24(a0)
000135DA 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
000135E0 6700                       		beq.s	loc_12B0A	; if not, branch
000135E2 117C 0006 0024             		move.b	#6,$24(a0)
000135E8                            
000135E8                            loc_12B0A:
000135E8 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
000135EE 6700                       		beq.s	Obj65_Animate	; if not, branch
000135F0 117C 0008 0024             		move.b	#8,$24(a0)
000135F6                            
000135F6                            Obj65_Animate:				; XREF: Obj65_Index
000135F6 43F9 0000 0000             		lea	(Ani_obj65).l,a1
000135FC 4EB9 0000 B1F0             		jsr	AnimateSprite
00013602                            
00013602                            Obj65_ChkDel:				; XREF: Obj65_Index
00013602 6000 CB9C                  		bra.w	MarkObjGone
00013606                            ; ===========================================================================
00013606                            
00013606                            Obj65_FixHeight:			; XREF: Obj65_Index
00013606 3038 F646                  		move.w	($FFFFF646).w,d0
0001360A 0440 0010                  		subi.w	#$10,d0
0001360E 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00013612 60E2                       		bra.s	Obj65_Animate
00013614                            ; ===========================================================================
00013614                            
00013614                            loc_12B36:				; XREF: Obj65_Index
00013614 08A8 0007 0002             		bclr	#7,2(a0)
0001361A 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00013620 6600                       		bne.s	Obj65_Animate2
00013622 08E8 0007 0002             		bset	#7,2(a0)
00013628                            
00013628                            Obj65_Animate2:
00013628 60CC                       		bra.s	Obj65_Animate
0001362A                            ; ===========================================================================
0001362A                            Ani_obj65:
0001362A                            	include "_anim\obj65.asm"
0001362A                            ; ---------------------------------------------------------------------------
0001362A                            ; Animation script - waterfall (LZ)
0001362A                            ; ---------------------------------------------------------------------------
0001362A 0000                       		dc.w byte_12B4E-Ani_obj65
0001362C 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00013632 00                         		even
00013632 00                         		even
00013632                            
00013632                            ; ---------------------------------------------------------------------------
00013632                            ; Sprite mappings - waterfalls (LZ)
00013632                            ; ---------------------------------------------------------------------------
00013632                            Map_obj65:
00013632                            	include "_maps\obj65.asm"
00013632                            ; ---------------------------------------------------------------------------
00013632                            ; Sprite mappings - waterfalls (LZ)
00013632                            ; ---------------------------------------------------------------------------
00013632 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00013636 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
0001363A 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
0001363E 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00013642 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00013646 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
0001364A 01                         byte_12B6C:	dc.b 1
0001364B F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00013650 02                         byte_12B72:	dc.b 2
00013651 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00013656 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
0001365B 02                         byte_12B7D:	dc.b 2
0001365C F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013661 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00013666 01                         byte_12B88:	dc.b 1
00013667 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
0001366C 02                         byte_12B8E:	dc.b 2
0001366D F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013672 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00013677 01                         byte_12B99:	dc.b 1
00013678 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
0001367D 01                         byte_12B9F:	dc.b 1
0001367E F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00013683 01                         byte_12BA5:	dc.b 1
00013684 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00013689 02                         byte_12BAB:	dc.b 2
0001368A F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
0001368F 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00013694 02                         byte_12BB6:	dc.b 2
00013695 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
0001369A F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
0001369F 02                         byte_12BC1:	dc.b 2
000136A0 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
000136A5 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
000136AA 02                         byte_12BCC:	dc.b 2
000136AB F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
000136B0 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
000136B6 00                         		even
000136B6 00                         		even
000136B6                            
000136B6                            ; ===========================================================================
000136B6                            ; ---------------------------------------------------------------------------
000136B6                            ; Object 01 - Sonic
000136B6                            ; ---------------------------------------------------------------------------
000136B6                            
000136B6                            Obj01:					; XREF: Obj_Index
000136B6 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000136BA 6700                       		beq.s	Obj01_Normal	; if not, branch
000136BC 4EF9 0000 0000             		jmp	DebugMode
000136C2                            ; ===========================================================================
000136C2                            
000136C2                            Obj01_Normal:
000136C2 7000                       		moveq	#0,d0
000136C4 1028 0024                  		move.b	$24(a0),d0
000136C8 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
000136CC 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
000136D0                            ; ===========================================================================
000136D0 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
000136D2 0000                       		dc.w Obj01_Control-Obj01_Index
000136D4 0000                       		dc.w Obj01_Hurt-Obj01_Index
000136D6 0000                       		dc.w Obj01_Death-Obj01_Index
000136D8 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
000136DA 0000                       		dc.w Sonic_Drowned-Obj01_Index
000136DC                            ; ===========================================================================
000136DC                            
000136DC                            Obj01_Main:				; XREF: Obj01_Index
000136DC 5428 0024                  		addq.b	#2,$24(a0)
000136E0 117C 0013 0016             		move.b	#$13,$16(a0)
000136E6 117C 0009 0017             		move.b	#9,$17(a0)
000136EC 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000136F4 317C 0780 0002             		move.w	#$780,2(a0)
000136FA 117C 0002 0018             		move.b	#2,$18(a0)
00013700 117C 0018 0019             		move.b	#$18,$19(a0)
00013706 117C 0004 0001             		move.b	#4,1(a0)
0001370C 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
00013712 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
00013718 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
0001371E 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
00013724 11FC 0000 FE19             		move.b	#0,(Super_Sonic_flag).w
0001372A                            
0001372A                            Obj01_Control:				; XREF: Obj01_Index
0001372A 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
0001372E 6700                       		beq.s	loc_12C58	; if not, branch
00013730 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00013736 6700                       		beq.s	loc_12C58	; if not, branch
00013738 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
0001373E 4238 F7CC                  		clr.b	($FFFFF7CC).w
00013742 4E75                       		rts	
00013744                            ; ===========================================================================
00013744                            
00013744                            loc_12C58:
00013744 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00013748 6600                       		bne.s	loc_12C64	; if yes, branch
0001374A 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00013750                            
00013750                            loc_12C64:
00013750 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
00013756 6600                       		bne.s	loc_12C7E	; if yes, branch
00013758 7000                       		moveq	#0,d0
0001375A 1028 0022                  		move.b	$22(a0),d0
0001375E 0240 0006                  		andi.w	#6,d0
00013762 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00013766 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
0001376A                            
0001376A                            loc_12C7E:
0001376A 6100                       		bsr.s	Sonic_Display
0001376C 6100 0000                  		bsr.w	Sonic_Super
00013770 6100 0000                  		bsr.w	Sonic_RecordPos
00013774 6100 0000                  		bsr.w	Sonic_Water
00013778 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
0001377E 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00013784 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00013788 6700                       		beq.s	loc_12CA6
0001378A 4A28 001C                  		tst.b	$1C(a0)
0001378E 6600                       		bne.s	loc_12CA6
00013790 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00013796                            
00013796                            loc_12CA6:
00013796 6100 0000                  		bsr.w	Sonic_Animate
0001379A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001379E 6B00                       		bmi.s	loc_12CB6
000137A0 4EB9 0000 0000             		jsr	TouchResponse
000137A6                            
000137A6                            loc_12CB6:
000137A6 6100 0000                  		bsr.w	Sonic_Loops
000137AA 6100 0000                  		bsr.w	LoadSonicDynPLC
000137AE 4E75                       		rts	
000137B0                            ; ===========================================================================
000137B0 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
000137B2 0000                       		dc.w Obj01_MdJump-Obj01_Modes
000137B4 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
000137B6 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
000137B8                            ; ---------------------------------------------------------------------------
000137B8                            ; Music	to play	after invincibility wears off
000137B8                            ; ---------------------------------------------------------------------------
000137B8                            ;MusicList2:	incbin	misc\muslist2.bin
000137B8                            ;		even
000137B8                            ; ===========================================================================
000137B8                            
000137B8                            Sonic_Display:				; XREF: loc_12C7E
000137B8 3028 0030                  		move.w	$30(a0),d0
000137BC 6700                       		beq.s	Obj01_Display
000137BE 5368 0030                  		subq.w	#1,$30(a0)
000137C2 E648                       		lsr.w	#3,d0
000137C4 6400                       		bcc.s	Obj01_ChkInvin
000137C6                            
000137C6                            Obj01_Display:
000137C6 4EBA A916                  		jsr	DisplaySprite
000137CA                            
000137CA                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
000137CA                             
000137CA                            Obj01_ChkInvin:
000137CA 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000137CE 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
000137D2 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
000137D6 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
000137DA 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
000137DE 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
000137E2 4A38 F7AA                  		tst.b	($FFFFF7AA).w
000137E6 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
000137EA 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
000137F0 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
000137F4 4A38 FE2E                  		tst.b ($FFFFFE2E).w ; does Sonic have speed shoes?
000137F8 6600                       		bne.s Obj01_ChkShoes	
000137FA 7000                       		moveq	#0,d0
000137FC 1038 FE10                  		move.b	($FFFFFE10).w,d0
00013800                             
00013800 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00013806 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
00013808 43F9 0000 4194             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
0001380E 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013810                             
00013810                            Obj01_GetBgm2:
00013810 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00013816 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
00013818 43F9 0000 419A             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
0001381E 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013820                             
00013820                            Obj01_GetBgm3:
00013820 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00013826 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
00013828 43F9 0000 41A0             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
0001382E 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013830                             
00013830                            Obj01_GetBgm4:
00013830 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00013836 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
00013838 43F9 0000 41A6             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
0001383E                             
0001383E                            Obj01_PlayMusic:
0001383E 1031 0000                  		move.b	(a1,d0.w),d0
00013842 4EB9 0000 1470             		jsr	(PlaySound).l	; play normal music
00013848                             
00013848                            ; NineKode ends here.
00013848                            
00013848                            
00013848                            Obj01_RmvInvin:
00013848 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
0001384E                            
0001384E                            Obj01_ChkShoes:
0001384E 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00013852 6700                       		beq.s	Obj01_ExitChk	; if not, branch
00013854 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00013858 6700                       		beq.s	Obj01_ExitChk
0001385A 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
0001385E 6600                       		bne.s	Obj01_ExitChk
00013860 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013866 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
0001386C 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013872 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
00013878 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; does Sonic have invincibility?
0001387C 6600                       		bne.s Obj01_ExitChk
0001387E                            
0001387E 7000                       		moveq #0,d0
00013880 1038 FE10                  		move.b ($FFFFFE10).w,d0
00013884 0C78 0103 FE10             		cmpi.w #$103,($FFFFFE10).w ; check if level is SBZ3
0001388A 6600                       		bne.s playthemusic
0001388C 7009                       		moveq #9,d0 ; play SBZ music
0001388E                            playthemusic:
0001388E 43F9 0000 419A             		lea (MusicList2).l,a1 ; load music playlist
00013894 1031 0000                  		move.b (a1,d0.w),d0 ; add d0 to a1
00013898 4EB9 0000 1470             		jsr (PlaySound).l ; play normal music
0001389E                            ; ===========================================================================
0001389E                            
0001389E                            Obj01_ExitChk:
0001389E 4E75                       		rts	
000138A0                            
000138A0                            ; ---------------------------------------------------------------------------
000138A0                            ; Subroutine to	record Sonic's previous positions for invincibility stars
000138A0                            ; ---------------------------------------------------------------------------
000138A0                            
000138A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138A0                            
000138A0                            
000138A0                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
000138A0 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000138A4 43F8 CB00                  		lea	($FFFFCB00).w,a1
000138A8 43F1 0000                  		lea	(a1,d0.w),a1
000138AC 32E8 0008                  		move.w	8(a0),(a1)+
000138B0 32E8 000C                  		move.w	$C(a0),(a1)+
000138B4 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
000138B8 4E75                       		rts	
000138BA                            ; End of function Sonic_RecordPos
000138BA                            
000138BA                            ; ---------------------------------------------------------------------------
000138BA                            ; Subroutine for Sonic when he's underwater
000138BA                            ; ---------------------------------------------------------------------------
000138BA                            
000138BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138BA                            
000138BA                            
000138BA                            Sonic_Water:				; XREF: loc_12C7E
000138BA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000138C0 6700                       		beq.s	Obj01_InWater	; if yes, branch
000138C2                            
000138C2                            locret_12D80:
000138C2 4E75                       		rts	
000138C4                            ; ===========================================================================
000138C4                            
000138C4                            Obj01_InWater:
000138C4 3038 F646                  		move.w	($FFFFF646).w,d0
000138C8 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
000138CC 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
000138CE 08E8 0006 0022             		bset	#6,$22(a0)
000138D4 66EC                       		bne.s	locret_12D80
000138D6 6100 0000                  		bsr.w	ResumeMusic
000138DA 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
000138E0 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
000138E6 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
000138EC 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
000138F2 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
000138F8 4A38 FE19                  	tst.b	(Super_Sonic_flag).w	; Is Sonic Super?
000138FC 6700                       	beq.s	@Skip			; If not branch
000138FE 31FC 0500 F760             	move.w	#$500,(Sonic_top_speed).w
00013904 31FC 0018 F762             	move.w	#$18,(Sonic_acceleration).w
0001390A 31FC 0080 F764             	move.w	#$80,(Sonic_deceleration).w
00013910                            @Skip:		
00013910 E0E8 0010                  		asr	$10(a0)
00013914 E0E8 0012                  		asr	$12(a0)
00013918 E0E8 0012                  		asr	$12(a0)
0001391C 67A4                       		beq.s	locret_12D80
0001391E 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013924 303C 00AA                  		move.w	#$AA,d0
00013928 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play splash sound
0001392E                            ; ===========================================================================
0001392E                            
0001392E                            Obj01_OutWater:
0001392E 08A8 0006 0022             		bclr	#6,$22(a0)
00013934 678C                       		beq.s	locret_12D80
00013936 6100 0000                  		bsr.w	ResumeMusic
0001393A 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013940 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013946 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
0001394C 4A38 FE19                  	tst.b	(Super_Sonic_flag).w	; Is Sonic Super?
00013950 6700                       	beq.s	@Skip2			; If not branch
00013952 31FC 0A00 F760             	move.w	#$A00,(Sonic_top_speed).w
00013958 31FC 0030 F762             	move.w	#$30,(Sonic_acceleration).w
0001395E 31FC 0100 F764             	move.w	#$100,(Sonic_deceleration).w
00013964                            @Skip2
00013964 E1E8 0012                  		asl	$12(a0)
00013968 4A68 0012                  		tst.w   $12(a0)
0001396C 6700 FF54                  		beq.w	locret_12D80
00013970 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013976 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
0001397C 6E00                       		bgt.s	loc_12E0E
0001397E 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00013984                            
00013984                            loc_12E0E:
00013984 303C 00AA                  		move.w	#$AA,d0
00013988 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play splash sound
0001398E                            ; End of function Sonic_Water
0001398E                            
0001398E                            ; ===========================================================================
0001398E                            ; ---------------------------------------------------------------------------
0001398E                            ; Modes	for controlling	Sonic
0001398E                            ; ---------------------------------------------------------------------------
0001398E                            
0001398E                            Obj01_MdNormal:				; XREF: Obj01_Modes
0001398E 6100 0000                  		bsr.w	Sonic_SpinDash
00013992 6100 0000                  		bsr.w	Sonic_Jump
00013996 6100 0000                  		bsr.w	Sonic_SlopeResist
0001399A 6100 0000                  		bsr.w	Sonic_Move
0001399E 6100 0000                  		bsr.w	Sonic_Roll
000139A2 6100 0000                  		bsr.w	Sonic_Super
000139A6 6100 0000                  		bsr.w	Sonic_LevelBound
000139AA 4EBA A70C                  		jsr	SpeedToPos
000139AE 6100 0000                  		bsr.w	Sonic_AnglePos
000139B2 6100 0000                  		bsr.w	Sonic_SlopeRepel
000139B6 4E75                       		rts	
000139B8                            ; ===========================================================================
000139B8                            
000139B8                            Obj01_MdJump:				; XREF: Obj01_Modes
000139B8 4228 0039                  		clr.b	$39(a0)
000139BC 6100 0000                  		bsr.w	Sonic_JumpHeight
000139C0 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000139C4 6100 0000                  		bsr.w	Sonic_LevelBound
000139C8 4EBA A6C2                  		jsr	ObjectFall
000139CC 0828 0006 0022             		btst	#6,$22(a0)
000139D2 6700                       		beq.s	loc_12E5C
000139D4 0468 0028 0012             		subi.w	#$28,$12(a0)
000139DA                            
000139DA                            loc_12E5C:
000139DA 6100 0000                  		bsr.w	Sonic_JumpAngle
000139DE 6100 0000                  		bsr.w	Sonic_Floor
000139E2 4E75                       		rts	
000139E4                            ; ===========================================================================
000139E4                            
000139E4                            Obj01_MdRoll:				; XREF: Obj01_Modes
000139E4 6100 0000                  		bsr.w	Sonic_Jump
000139E8 6100 0000                  		bsr.w	Sonic_RollRepel
000139EC 6100 0000                  		bsr.w	Sonic_RollSpeed
000139F0 6100 0000                  		bsr.w	Sonic_LevelBound
000139F4 4EBA A6C2                  		jsr	SpeedToPos
000139F8 6100 0000                  		bsr.w	Sonic_AnglePos
000139FC 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013A00 4E75                       		rts	
00013A02                            ; ===========================================================================
00013A02                            
00013A02                            Obj01_MdJump2:				; XREF: Obj01_Modes
00013A02 4228 0039                  		clr.b	$39(a0)
00013A06 6100 0000                  		bsr.w	Sonic_JumpHeight
00013A0A 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013A0E 6100 0000                  		bsr.w	Sonic_LevelBound
00013A12 4EBA A678                  		jsr	ObjectFall
00013A16 0828 0006 0022             		btst	#6,$22(a0)
00013A1C 6700                       		beq.s	loc_12EA6
00013A1E 0468 0028 0012             		subi.w	#$28,$12(a0)
00013A24                            
00013A24                            loc_12EA6:
00013A24 6100 0000                  		bsr.w	Sonic_JumpAngle
00013A28 6100 0000                  		bsr.w	Sonic_Floor
00013A2C 4E75                       		rts	
00013A2E                            ; ---------------------------------------------------------------------------
00013A2E                            ; Subroutine to	make Sonic walk/run
00013A2E                            ; ---------------------------------------------------------------------------
00013A2E                            
00013A2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A2E                            
00013A2E                            
00013A2E                            Sonic_Move:				; XREF: Obj01_MdNormal
00013A2E 3C38 F760                  		move.w	($FFFFF760).w,d6
00013A32 3A38 F762                  		move.w	($FFFFF762).w,d5
00013A36 3838 F764                  		move.w	($FFFFF764).w,d4
00013A3A 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013A3E 6600 0000                  		bne.w	loc_12FEE
00013A42 4A68 003E                  		tst.w	$3E(a0)
00013A46 6600 0000                  		bne.w	Obj01_ResetScr
00013A4A 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013A50 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00013A52 6100 0000                  		bsr.w	Sonic_MoveLeft
00013A56                            
00013A56                            Obj01_NotLeft:
00013A56 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013A5C 6700                       		beq.s	Obj01_NotRight	; if not, branch
00013A5E 6100 0000                  		bsr.w	Sonic_MoveRight
00013A62                            
00013A62                            Obj01_NotRight:
00013A62 1028 0026                  		move.b	$26(a0),d0
00013A66 0600 0020                  		addi.b	#$20,d0
00013A6A 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00013A6E 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013A72 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013A76 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013A7A 08A8 0005 0022             		bclr	#5,$22(a0)
00013A80 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013A86 0828 0003 0022             		btst	#3,$22(a0)
00013A8C 6700                       		beq.s	Sonic_Balance
00013A8E 7000                       		moveq	#0,d0
00013A90 1028 003D                  		move.b	$3D(a0),d0
00013A94 ED48                       		lsl.w	#6,d0
00013A96 43F8 D000                  		lea	($FFFFD000).w,a1
00013A9A 43F1 0000                  		lea	(a1,d0.w),a1
00013A9E 4A29 0022                  		tst.b	$22(a1)
00013AA2 6B00                       		bmi.s	Sonic_LookUp
00013AA4 7200                       		moveq	#0,d1
00013AA6 1229 0019                  		move.b	$19(a1),d1
00013AAA 3401                       		move.w	d1,d2
00013AAC D442                       		add.w	d2,d2
00013AAE 5942                       		subq.w	#4,d2
00013AB0 D268 0008                  		add.w	8(a0),d1
00013AB4 9269 0008                  		sub.w	8(a1),d1
00013AB8 0C41 0004                  		cmpi.w	#4,d1
00013ABC 6D00                       		blt.s	loc_12F6A
00013ABE B242                       		cmp.w	d2,d1
00013AC0 6C00                       		bge.s	loc_12F5A
00013AC2 6000                       		bra.s	Sonic_LookUp
00013AC4                            ; ===========================================================================
00013AC4                            
00013AC4                            Sonic_Balance:
00013AC4 4EB9 0000 0000             		jsr	ObjHitFloor
00013ACA 0C41 000C                  		cmpi.w	#$C,d1
00013ACE 6D00                       		blt.s	Sonic_LookUp
00013AD0 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00013AD6 6600                       		bne.s	loc_12F62
00013AD8                            
00013AD8                            loc_12F5A:
00013AD8 08A8 0000 0022             		bclr	#0,$22(a0)
00013ADE 6000                       		bra.s	loc_12F70
00013AE0                            ; ===========================================================================
00013AE0                            
00013AE0                            loc_12F62:
00013AE0 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00013AE6 6600                       		bne.s	Sonic_LookUp
00013AE8                            
00013AE8                            loc_12F6A:
00013AE8 08E8 0000 0022             		bset	#0,$22(a0)
00013AEE                            
00013AEE                            loc_12F70:
00013AEE 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00013AF4 6000                       		bra.s	Obj01_ResetScr
00013AF6                            ; ===========================================================================
00013AF6                            
00013AF6                            Sonic_LookUp:
00013AF6 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00013AFC 6700                       		beq.s	Sonic_Duck	; if not, branch
00013AFE 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00013B04 5238 C903                  		addq.b	#1,($FFFFC903).w
00013B08 0C38 0078 C903             		cmp.b	#$78,($FFFFC903).w
00013B0E 6500                       		bcs.s	Obj01_ResetScr_Part2
00013B10 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
00013B16 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00013B1C 6700                       		beq.s	loc_12FC2
00013B1E 5478 F73E                  		addq.w	#2,($FFFFF73E).w
00013B22 6000                       		bra.s	loc_12FC2
00013B24                            ; ===========================================================================
00013B24                            
00013B24                            Sonic_Duck:
00013B24 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013B2A 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00013B2C 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
00013B32 5238 C903                  		addq.b	#1,($FFFFC903).w
00013B36 0C38 0078 C903             		cmpi.b	#$78,($FFFFC903).w
00013B3C 6500                       		bcs.s	Obj01_ResetScr_Part2
00013B3E 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
00013B44 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00013B4A 6700                       		beq.s	loc_12FC2
00013B4C 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013B50 6000                       		bra.s	loc_12FC2
00013B52                            ; ===========================================================================
00013B52                            
00013B52                            Obj01_ResetScr:
00013B52 11FC 0000 C903             		move.b	#0,($FFFFC903).w
00013B58                            		
00013B58                            Obj01_ResetScr_Part2:
00013B58 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00013B5E 6700                       		beq.s	loc_12FC2	; if yes, branch
00013B60 6400                       		bcc.s	loc_12FBE
00013B62 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00013B66                            
00013B66                            loc_12FBE:
00013B66 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00013B6A                            
00013B6A                            
00013B6A                            loc_12FC2:
00013B6A 1038 F602                  		move.b	($FFFFF602).w,d0
00013B6E 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00013B72 6600                       		bne.s	loc_12FEE	; if yes, branch
00013B74 3028 0014                  		move.w	$14(a0),d0
00013B78 6700                       		beq.s	loc_12FEE
00013B7A 6B00                       		bmi.s	loc_12FE2
00013B7C 9045                       		sub.w	d5,d0
00013B7E 6400                       		bcc.s	loc_12FDC
00013B80 303C 0000                  		move.w	#0,d0
00013B84                            
00013B84                            loc_12FDC:
00013B84 3140 0014                  		move.w	d0,$14(a0)
00013B88 6000                       		bra.s	loc_12FEE
00013B8A                            ; ===========================================================================
00013B8A                            
00013B8A                            loc_12FE2:
00013B8A D045                       		add.w	d5,d0
00013B8C 6400                       		bcc.s	loc_12FEA
00013B8E 303C 0000                  		move.w	#0,d0
00013B92                            
00013B92                            loc_12FEA:
00013B92 3140 0014                  		move.w	d0,$14(a0)
00013B96                            
00013B96                            loc_12FEE:
00013B96 1028 0026                  		move.b	$26(a0),d0
00013B9A 4EB9 0000 33D4             		jsr	(CalcSine).l
00013BA0 C3E8 0014                  		muls.w	$14(a0),d1
00013BA4 E081                       		asr.l	#8,d1
00013BA6 3141 0010                  		move.w	d1,$10(a0)
00013BAA C1E8 0014                  		muls.w	$14(a0),d0
00013BAE E080                       		asr.l	#8,d0
00013BB0 3140 0012                  		move.w	d0,$12(a0)
00013BB4                            
00013BB4                            loc_1300C:
00013BB4 1028 0026                  		move.b	$26(a0),d0
00013BB8 0600 0040                  		addi.b	#$40,d0
00013BBC 6B00                       		bmi.s	locret_1307C
00013BBE 123C 0040                  		move.b	#$40,d1
00013BC2 4A68 0014                  		tst.w	$14(a0)
00013BC6 6700                       		beq.s	locret_1307C
00013BC8 6B00                       		bmi.s	loc_13024
00013BCA 4441                       		neg.w	d1
00013BCC                            
00013BCC                            loc_13024:
00013BCC 1028 0026                  		move.b	$26(a0),d0
00013BD0 D001                       		add.b	d1,d0
00013BD2 3F00                       		move.w	d0,-(sp)
00013BD4 6100 0000                  		bsr.w	Sonic_WalkSpeed
00013BD8 301F                       		move.w	(sp)+,d0
00013BDA 4A41                       		tst.w	d1
00013BDC 6A00                       		bpl.s	locret_1307C
00013BDE E141                       		asl.w	#8,d1
00013BE0 0600 0020                  		addi.b	#$20,d0
00013BE4 0200 00C0                  		andi.b	#$C0,d0
00013BE8 6700                       		beq.s	loc_13078
00013BEA 0C00 0040                  		cmpi.b	#$40,d0
00013BEE 6700                       		beq.s	loc_13066
00013BF0 0C00 0080                  		cmpi.b	#$80,d0
00013BF4 6700                       		beq.s	loc_13060
00013BF6 D368 0010                  		add.w	d1,$10(a0)
00013BFA 08E8 0005 0022             		bset	#5,$22(a0)
00013C00 317C 0000 0014             		move.w	#0,$14(a0)
00013C06 4E75                       		rts	
00013C08                            ; ===========================================================================
00013C08                            
00013C08                            loc_13060:
00013C08 9368 0012                  		sub.w	d1,$12(a0)
00013C0C 4E75                       		rts	
00013C0E                            ; ===========================================================================
00013C0E                            
00013C0E                            loc_13066:
00013C0E 9368 0010                  		sub.w	d1,$10(a0)
00013C12 08E8 0005 0022             		bset	#5,$22(a0)
00013C18 317C 0000 0014             		move.w	#0,$14(a0)
00013C1E 4E75                       		rts	
00013C20                            ; ===========================================================================
00013C20                            
00013C20                            loc_13078:
00013C20 D368 0012                  		add.w	d1,$12(a0)
00013C24                            
00013C24                            locret_1307C:
00013C24 4E75                       		rts	
00013C26                            ; End of function Sonic_Move
00013C26                            
00013C26                            
00013C26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C26                            
00013C26                            
00013C26                            Sonic_MoveLeft:		   ; XREF: Sonic_Move
00013C26 3028 0014                  		move.w	$14(a0),d0
00013C2A 6700                       		beq.s	loc_13086
00013C2C 6A00                       		bpl.s	loc_130B2
00013C2E                            
00013C2E                            loc_13086:
00013C2E 08E8 0000 0022             		bset	#0,$22(a0)
00013C34 6600                       		bne.s	loc_1309A
00013C36 08A8 0005 0022             		bclr	#5,$22(a0)
00013C3C 117C 0001 001D             		move.b	#1,$1D(a0)
00013C42                            
00013C42                            loc_1309A:
00013C42 9045                       		sub.w	d5,d0
00013C44 3206                       		move.w	d6,d1
00013C46 4441                       		neg.w	d1
00013C48 B041                       		cmp.w	d1,d0
00013C4A 6E00                       		bgt.s	loc_130A6
00013C4C D045                       		add.w	d5,d0
00013C4E B041                       		cmp.w	d1,d0
00013C50 6F00                       		ble.s	loc_130A6
00013C52 3001                       		move.w	d1,d0
00013C54                            
00013C54                            loc_130A6:
00013C54 3140 0014                  		move.w	d0,$14(a0)
00013C58 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00013C5E 4E75                       		rts
00013C60                            
00013C60                            ; ===========================================================================
00013C60                            
00013C60                            loc_130B2:				; XREF: Sonic_MoveLeft
00013C60 9044                       		sub.w	d4,d0
00013C62 6400                       		bcc.s	loc_130BA
00013C64 303C FF80                  		move.w	#-$80,d0
00013C68                            
00013C68                            loc_130BA:
00013C68 3140 0014                  		move.w	d0,$14(a0)
00013C6C 1028 0026                  		move.b	$26(a0),d0
00013C70 0600 0020                  		addi.b	#$20,d0
00013C74 0200 00C0                  		andi.b	#$C0,d0
00013C78 6600                       		bne.s	locret_130E8
00013C7A 0C40 0400                  		cmpi.w	#$400,d0
00013C7E 6D00                       		blt.s	locret_130E8
00013C80 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013C86 08A8 0000 0022             		bclr	#0,$22(a0)
00013C8C 303C 00A4                  		move.w	#$A4,d0
00013C90 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play stopping sound
00013C96                            
00013C96                            locret_130E8:
00013C96 4E75                       		rts	
00013C98                            ; End of function Sonic_MoveLeft
00013C98                            
00013C98                            
00013C98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C98                            
00013C98                            
00013C98                            Sonic_MoveRight:	   ; XREF: Sonic_Move
00013C98 3028 0014                  		move.w	$14(a0),d0
00013C9C 6B00                       		bmi.s	loc_13118
00013C9E 08A8 0000 0022             		bclr	#0,$22(a0)
00013CA4 6700                       		beq.s	loc_13104
00013CA6 08A8 0005 0022             		bclr	#5,$22(a0)
00013CAC 117C 0001 001D             		move.b	#1,$1D(a0)
00013CB2                            
00013CB2                            loc_13104:
00013CB2 D045                       		add.w	d5,d0
00013CB4 B046                       		cmp.w	d6,d0
00013CB6 6D00                       		blt.s	loc_1310C
00013CB8 9045                       		sub.w	d5,d0
00013CBA B046                       		cmp.w	d6,d0
00013CBC 6C00                       		bge.s	loc_1310C
00013CBE 3006                       		move.w	d6,d0
00013CC0                            
00013CC0                            loc_1310C:
00013CC0 3140 0014                  		move.w	d0,$14(a0)
00013CC4 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00013CCA 4E75                       		rts
00013CCC                            
00013CCC                            ; ===========================================================================
00013CCC                            
00013CCC                            loc_13118:				; XREF: Sonic_MoveRight
00013CCC D044                       		add.w	d4,d0
00013CCE 6400                       		bcc.s	loc_13120
00013CD0 303C 0080                  		move.w	#$80,d0
00013CD4                            
00013CD4                            loc_13120:
00013CD4 3140 0014                  		move.w	d0,$14(a0)
00013CD8 1028 0026                  		move.b	$26(a0),d0
00013CDC 0600 0020                  		addi.b	#$20,d0
00013CE0 0200 00C0                  		andi.b	#$C0,d0
00013CE4 6600                       		bne.s	locret_1314E
00013CE6 0C40 FC00                  		cmpi.w	#-$400,d0
00013CEA 6E00                       		bgt.s	locret_1314E
00013CEC 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013CF2 08E8 0000 0022             		bset	#0,$22(a0)
00013CF8 303C 00A4                  		move.w	#$A4,d0
00013CFC 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play stopping sound
00013D02                            
00013D02                            locret_1314E:
00013D02 4E75                       		rts	
00013D04                            ; End of function Sonic_MoveRight
00013D04                            
00013D04                            ; ---------------------------------------------------------------------------
00013D04                            ; Subroutine to	change Sonic's speed as he rolls
00013D04                            ; ---------------------------------------------------------------------------
00013D04                            
00013D04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D04                            
00013D04                            
00013D04                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00013D04 3C38 F760                  		move.w	($FFFFF760).w,d6
00013D08 E346                       		asl.w	#1,d6
00013D0A 3A38 F762                  		move.w	($FFFFF762).w,d5
00013D0E E245                       		asr.w	#1,d5
00013D10 3838 F764                  		move.w	($FFFFF764).w,d4
00013D14 E444                       		asr.w	#2,d4
00013D16 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013D1A 6600 0000                  		bne.w	loc_131CC
00013D1E 4A68 003E                  		tst.w	$3E(a0)
00013D22 6600                       		bne.s	loc_13188
00013D24 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013D2A 6700                       		beq.s	loc_1317C	; if not, branch
00013D2C 6100 0000                  		bsr.w	Sonic_RollLeft
00013D30                            
00013D30                            loc_1317C:
00013D30 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013D36 6700                       		beq.s	loc_13188	; if not, branch
00013D38 6100 0000                  		bsr.w	Sonic_RollRight
00013D3C                            
00013D3C                            loc_13188:
00013D3C 3028 0014                  		move.w	$14(a0),d0
00013D40 6700                       		beq.s	loc_131AA
00013D42 6B00                       		bmi.s	loc_1319E
00013D44 9045                       		sub.w	d5,d0
00013D46 6400                       		bcc.s	loc_13198
00013D48 303C 0000                  		move.w	#0,d0
00013D4C                            
00013D4C                            loc_13198:
00013D4C 3140 0014                  		move.w	d0,$14(a0)
00013D50 6000                       		bra.s	loc_131AA
00013D52                            ; ===========================================================================
00013D52                            
00013D52                            loc_1319E:				; XREF: Sonic_RollSpeed
00013D52 D045                       		add.w	d5,d0
00013D54 6400                       		bcc.s	loc_131A6
00013D56 303C 0000                  		move.w	#0,d0
00013D5A                            
00013D5A                            loc_131A6:
00013D5A 3140 0014                  		move.w	d0,$14(a0)
00013D5E                            
00013D5E                            loc_131AA:
00013D5E 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013D62 6600                       		bne.s	loc_131CC	; if yes, branch
00013D64 08A8 0002 0022             		bclr	#2,$22(a0)
00013D6A 117C 0013 0016             		move.b	#$13,$16(a0)
00013D70 117C 0009 0017             		move.b	#9,$17(a0)
00013D76 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013D7C 5B68 000C                  		subq.w	#5,$C(a0)
00013D80                            
00013D80                            loc_131CC:
00013D80 0C78 0060 F73E             		cmp.w	#$60,($FFFFF73E).w
00013D86 6700                       		beq.s	@cont2
00013D88 6400                       		bcc.s	@cont1
00013D8A 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013D8E                            		
00013D8E                            @cont1:
00013D8E 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013D92                            		
00013D92                            @cont2:
00013D92 1028 0026                  		move.b	$26(a0),d0
00013D96 4EB9 0000 33D4             		jsr	(CalcSine).l
00013D9C C1E8 0014                  		muls.w	$14(a0),d0
00013DA0 E080                       		asr.l	#8,d0
00013DA2 3140 0012                  		move.w	d0,$12(a0)
00013DA6 C3E8 0014                  		muls.w	$14(a0),d1
00013DAA E081                       		asr.l	#8,d1
00013DAC 0C41 1000                  		cmpi.w	#$1000,d1
00013DB0 6F00                       		ble.s	loc_131F0
00013DB2 323C 1000                  		move.w	#$1000,d1
00013DB6                            
00013DB6                            loc_131F0:
00013DB6 0C41 F000                  		cmpi.w	#-$1000,d1
00013DBA 6C00                       		bge.s	loc_131FA
00013DBC 323C F000                  		move.w	#-$1000,d1
00013DC0                            
00013DC0                            loc_131FA:
00013DC0 3141 0010                  		move.w	d1,$10(a0)
00013DC4 6000 FDEE                  		bra.w	loc_1300C
00013DC8                            ; End of function Sonic_RollSpeed
00013DC8                            
00013DC8                            
00013DC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DC8                            
00013DC8                            
00013DC8                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00013DC8 3028 0014                  		move.w	$14(a0),d0
00013DCC 6700                       		beq.s	loc_1320A
00013DCE 6A00                       		bpl.s	loc_13218
00013DD0                            
00013DD0                            loc_1320A:
00013DD0 08E8 0000 0022             		bset	#0,$22(a0)
00013DD6 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013DDC 4E75                       		rts	
00013DDE                            ; ===========================================================================
00013DDE                            
00013DDE                            loc_13218:
00013DDE 9044                       		sub.w	d4,d0
00013DE0 6400                       		bcc.s	loc_13220
00013DE2 303C FF80                  		move.w	#-$80,d0
00013DE6                            
00013DE6                            loc_13220:
00013DE6 3140 0014                  		move.w	d0,$14(a0)
00013DEA 4E75                       		rts	
00013DEC                            ; End of function Sonic_RollLeft
00013DEC                            
00013DEC                            
00013DEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DEC                            
00013DEC                            
00013DEC                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00013DEC 3028 0014                  		move.w	$14(a0),d0
00013DF0 6B00                       		bmi.s	loc_1323A
00013DF2 08A8 0000 0022             		bclr	#0,$22(a0)
00013DF8 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013DFE 4E75                       		rts	
00013E00                            ; ===========================================================================
00013E00                            
00013E00                            loc_1323A:
00013E00 D044                       		add.w	d4,d0
00013E02 6400                       		bcc.s	loc_13242
00013E04 303C 0080                  		move.w	#$80,d0
00013E08                            
00013E08                            loc_13242:
00013E08 3140 0014                  		move.w	d0,$14(a0)
00013E0C 4E75                       		rts	
00013E0E                            ; End of function Sonic_RollRight
00013E0E                            
00013E0E                            ; ---------------------------------------------------------------------------
00013E0E                            ; Subroutine to	change Sonic's direction while jumping
00013E0E                            ; ---------------------------------------------------------------------------
00013E0E                            
00013E0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E0E                            
00013E0E                            
00013E0E                            Sonic_ChgJumpDir:		; XREF: Obj01_MdJump; Obj01_MdJump2
00013E0E 3C38 F760                  		move.w	($FFFFF760).w,d6
00013E12 3A38 F762                  		move.w	($FFFFF762).w,d5
00013E16 E345                       		asl.w	#1,d5
00013E18 0828 0004 0022             		btst	#4,$22(a0)	
00013E1E 6600                       		bne.s	Obj01_ResetScr2	
00013E20 3028 0010                  		move.w	$10(a0),d0	
00013E24 0838 0002 F602             		btst	#2,($FFFFF602).w; is left being pressed?	
00013E2A 6700                       		beq.s	loc_13278; if not, branch	
00013E2C 08E8 0000 0022             		bset	#0,$22(a0)	
00013E32 9045                       		sub.w	d5,d0	
00013E34 3206                       		move.w	d6,d1	
00013E36 4441                       		neg.w	d1	
00013E38 B041                       		cmp.w	d1,d0	
00013E3A 6E00                       		bgt.s	loc_13278	
00013E3C D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
00013E3E B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
00013E40 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
00013E42 3001                       		move.w	d1,d0
00013E44                            
00013E44                            loc_13278:
00013E44 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
00013E4A 6700                       		beq.s	Obj01_JumpMove; if not, branch	
00013E4C 08A8 0000 0022             		bclr	#0,$22(a0)	
00013E52 D045                       		add.w	d5,d0	
00013E54 B046                       		cmp.w	d6,d0	
00013E56 6D00                       		blt.s	Obj01_JumpMove
00013E58 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
00013E5A B046                       		cmp.w	d6,d0		; +++ compare speed with top speed
00013E5C 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
00013E5E 3006                       		move.w	d6,d0
00013E60                            
00013E60                            Obj01_JumpMove:
00013E60 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013E64                            
00013E64                            Obj01_ResetScr2:
00013E64 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013E6A 6700                       		beq.s	loc_132A4	; if yes, branch
00013E6C 6400                       		bcc.s	loc_132A0
00013E6E 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013E72                            
00013E72                            loc_132A0:
00013E72 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013E76                            
00013E76                            loc_132A4:
00013E76 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013E7C 6500                       		bcs.s	locret_132D2	; if yes, branch
00013E7E 3028 0010                  		move.w	$10(a0),d0
00013E82 3200                       		move.w	d0,d1
00013E84 EA41                       		asr.w	#5,d1
00013E86 6700                       		beq.s	locret_132D2
00013E88 6B00                       		bmi.s	loc_132C6
00013E8A 9041                       		sub.w	d1,d0
00013E8C 6400                       		bcc.s	loc_132C0
00013E8E 303C 0000                  		move.w	#0,d0
00013E92                            
00013E92                            loc_132C0:
00013E92 3140 0010                  		move.w	d0,$10(a0)
00013E96 4E75                       		rts	
00013E98                            ; ===========================================================================
00013E98                            
00013E98                            loc_132C6:
00013E98 9041                       		sub.w	d1,d0
00013E9A 6500                       		bcs.s	loc_132CE
00013E9C 303C 0000                  		move.w	#0,d0
00013EA0                            
00013EA0                            loc_132CE:
00013EA0 3140 0010                  		move.w	d0,$10(a0)
00013EA4                            
00013EA4                            locret_132D2:
00013EA4 4E75                       		rts	
00013EA6                            ; End of function Sonic_ChgJumpDir
00013EA6                            
00013EA6                            ; ===========================================================================
00013EA6                            ; ---------------------------------------------------------------------------
00013EA6                            ; Unused subroutine to squash Sonic
00013EA6                            ; ---------------------------------------------------------------------------
00013EA6 1028 0026                  		move.b	$26(a0),d0
00013EAA 0600 0020                  		addi.b	#$20,d0
00013EAE 0200 00C0                  		andi.b	#$C0,d0
00013EB2 6600                       		bne.s	locret_13302
00013EB4 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013EB8 4A41                       		tst.w	d1
00013EBA 6A00                       		bpl.s	locret_13302
00013EBC 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013EC2 317C 0000 0010             		move.w	#0,$10(a0)
00013EC8 317C 0000 0012             		move.w	#0,$12(a0)
00013ECE 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00013ED4                            
00013ED4                            locret_13302:
00013ED4 4E75                       		rts	
00013ED6                            ; ---------------------------------------------------------------------------
00013ED6                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00013ED6                            ; ---------------------------------------------------------------------------
00013ED6                            
00013ED6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013ED6                            
00013ED6                            
00013ED6                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00013ED6 2228 0008                  		move.l	8(a0),d1
00013EDA 3028 0010                  		move.w	$10(a0),d0
00013EDE 48C0                       		ext.l	d0
00013EE0 E180                       		asl.l	#8,d0
00013EE2 D280                       		add.l	d0,d1
00013EE4 4841                       		swap	d1
00013EE6 3038 F728                  		move.w	($FFFFF728).w,d0
00013EEA 0640 0010                  		addi.w	#$10,d0
00013EEE B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013EF0 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00013EF2 3038 F72A                  		move.w	($FFFFF72A).w,d0
00013EF6 0640 0128                  		addi.w	#$128,d0
00013EFA 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013EFE 6600                       		bne.s	loc_13332
00013F00 0640 0040                  		addi.w	#$40,d0
00013F04                            
00013F04                            loc_13332:
00013F04 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013F06 6300                       		bls.s	Boundary_Sides	; if yes, branch
00013F08                            
00013F08                            loc_13336:
00013F08 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013F0C 0640 00E0                  		addi.w	#$E0,d0
00013F10 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00013F14 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013F16 4E75                       		rts	
00013F18                            ; ===========================================================================
00013F18                            
00013F18                            Jmp_KillSonic:
00013F18 4EF9 0000 0000             	       jmp    KillSonic
00013F1E                            
00013F1E                            Boundary_Bottom:
00013F1E 3038 F726                  		move.w	($FFFFF726).w,d0
00013F22 3238 F72E                  		move.w	($FFFFF72E).w,d1
00013F26 B240                       		cmp.w	d0,d1			; screen still scrolling down?
00013F28 6D00                       		blt.s	Boundary_Bottom_locret	; if so, don't kill Sonic
00013F2A 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w	; is level SBZ2 ?
00013F30 6600 FFE6                  		bne.w	Jmp_KillSonic		; if not, kill Sonic
00013F34 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00013F3A 6500 FFDC                  		bcs.w	Jmp_KillSonic
00013F3E 4238 FE30                  		clr.b	($FFFFFE30).w		; clear lamppost counter
00013F42 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w	; restart the level
00013F48 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w	; set level to SBZ3 (LZ4)
00013F4E                            
00013F4E                            Boundary_Bottom_locret:
00013F4E 4E75                       		rts	
00013F50                            ; ===========================================================================
00013F50                            
00013F50                            
00013F50                            Boundary_Sides:
00013F50 3140 0008                  		move.w	d0,8(a0)
00013F54 317C 0000 000A             		move.w	#0,$A(a0)
00013F5A 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013F60 317C 0000 0014             		move.w	#0,$14(a0)
00013F66 60A0                       		bra.s	loc_13336
00013F68                            ; End of function Sonic_LevelBound
00013F68                            
00013F68                            ; ---------------------------------------------------------------------------
00013F68                            ; Subroutine allowing Sonic to roll when he's moving
00013F68                            ; ---------------------------------------------------------------------------
00013F68                            
00013F68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F68                            
00013F68                            
00013F68                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013F68 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013F6C 6600                       		bne.s	Obj01_NoRoll
00013F6E 3028 0014                  		move.w	$14(a0),d0
00013F72 6A00                       		bpl.s	loc_13392
00013F74 4440                       		neg.w	d0
00013F76                            
00013F76                            loc_13392:
00013F76 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013F7A 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013F7C 1038 F602                  		move.b	($FFFFF602).w,d0
00013F80 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013F84 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013F86 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013F8C 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013F8E                            
00013F8E                            Obj01_NoRoll:
00013F8E 4E75                       		rts	
00013F90                            ; ===========================================================================
00013F90                            
00013F90                            Obj01_ChkRoll:
00013F90 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013F96 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013F98 4E75                       		rts	
00013F9A                            ; ===========================================================================
00013F9A                            
00013F9A                            Obj01_DoRoll:
00013F9A 08E8 0002 0022             		bset	#2,$22(a0)
00013FA0 117C 000E 0016             		move.b	#$E,$16(a0)
00013FA6 117C 0007 0017             		move.b	#7,$17(a0)
00013FAC 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013FB2 5A68 000C                  		addq.w	#5,$C(a0)
00013FB6 303C 00BE                  		move.w	#$BE,d0
00013FBA 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play rolling sound
00013FC0 4A68 0014                  		tst.w	$14(a0)
00013FC4 6600                       		bne.s	locret_133E8
00013FC6 317C 0200 0014             		move.w	#$200,$14(a0)
00013FCC                            
00013FCC                            locret_133E8:
00013FCC 4E75                       		rts	
00013FCE                            ; End of function Sonic_Roll
00013FCE                            
00013FCE                            ; ---------------------------------------------------------------------------
00013FCE                            ; Subroutine allowing Sonic to jump
00013FCE                            ; ---------------------------------------------------------------------------
00013FCE                            
00013FCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013FCE                            
00013FCE                            
00013FCE                            Sonic_Jump:                ; XREF: Obj01_MdNormal; Obj01_MdRoll
00013FCE 1038 F603                  		move.b	($FFFFF603).w,d0
00013FD2 0200 0070                          andi.b	#$70,d0		; is A,	B or C 
00013FD6 6700 0000                          beq.w    locret_1348E        ; if not, branch
00013FDA 303C 00A0                          move.w    #$A0,d0    ; set jumping sound
00013FDE 4EB9 0000 1470                     jsr    (PlaySound).l ; play jumping sound
00013FE4 7000                               moveq    #0,d0
00013FE6 1028 0026                          move.b    $26(a0),d0
00013FEA 0600 0080                          addi.b    #$80,d0
00013FEE 4EB9 0000 0000                     jsr    sub_14D48
00013FF4 0C41 0006                          cmpi.w    #6,d1
00013FF8 6D00 0000                          blt.w    locret_1348E
00013FFC 343C 0680                          move.w    #$680,d2 ; set normal jump speed
00014000 4A38 FE19                          tst.b    ($FFFFFE19).w    ; is Sonic Super?
00014004 6700                               beq.s    Sonic_JumpContinue2 ; if not, branch
00014006 343C 0880                          move.w    #$880,d2        ; set higher jump speed if super
0001400A                            
0001400A                            Sonic_JumpContinue2:
0001400A 0828 0006 0022                     btst    #6,$22(a0) ; is player underwater?
00014010 6700                               beq.s    loc_1341C ; if not, branch
00014012 343C 0380                          move.w    #$380,d2 ; if yes, decrease his jump speed
00014016 4A38 FE19                          tst.b    ($FFFFFE19).w    ; is Sonic Super?
0001401A 6700                               beq.s    loc_1341C ; if not, branch
0001401C 343C 0530                          move.w    #$530,d2 ; super jump speed
00014020                            
00014020                            loc_1341C:
00014020 7000                       		moveq	#0,d0
00014022 1028 0026                  		move.b	$26(a0),d0
00014026 0400 0040                  		subi.b	#$40,d0
0001402A 4EB9 0000 33D4             		jsr	(CalcSine).l
00014030 C3C2                       		muls.w	d2,d1
00014032 E081                       		asr.l	#8,d1
00014034 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00014038 C1C2                       		muls.w	d2,d0
0001403A E080                       		asr.l	#8,d0
0001403C D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00014040 08E8 0001 0022             		bset	#1,$22(a0)
00014046 08A8 0005 0022             		bclr	#5,$22(a0)
0001404C 588F                       		addq.l	#4,sp
0001404E 117C 0001 003C             		move.b	#1,$3C(a0)
00014054 4228 0038                  		clr.b	$38(a0)
00014058 303C 00A0                  		move.w	#$A0,d0
0001405C 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play jumping sound
00014062 117C 0013 0016             		move.b	#$13,$16(a0)
00014068 117C 0009 0017             		move.b	#9,$17(a0)
0001406E 0828 0002 0022             		btst	#2,$22(a0)
00014074 6600                       		bne.s	loc_13490
00014076 117C 000E 0016             		move.b	#$E,$16(a0)
0001407C 117C 0007 0017             		move.b	#7,$17(a0)
00014082 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00014088 08E8 0002 0022             		bset	#2,$22(a0)
0001408E 5A68 000C                  		addq.w	#5,$C(a0)
00014092                            
00014092                            locret_1348E:
00014092 4E75                       		rts	
00014094                            ; ===========================================================================
00014094                            
00014094                            loc_13490:
00014094 08E8 0004 0022             		bset	#4,$22(a0)
0001409A 4E75                       		rts	
0001409C                            ; End of function Sonic_Jump
0001409C                            
0001409C                            
0001409C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001409C                            
0001409C                            
0001409C                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
0001409C 4A28 003C                  		tst.b	$3C(a0)
000140A0 6700                       		beq.s	loc_134C4
000140A2 323C FC00                  		move.w	#-$400,d1
000140A6 0828 0006 0022             		btst	#6,$22(a0)
000140AC 6700                       		beq.s	loc_134AE
000140AE 323C FE00                  		move.w	#-$200,d1
000140B2                            
000140B2                            loc_134AE:
000140B2 B268 0012                  		cmp.w	$12(a0),d1
000140B6 6F00                       		ble.s	locret_134C2
000140B8 1038 F602                  		move.b	($FFFFF602).w,d0
000140BC 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
000140C0 6600                       		bne.s	locret_134C2	; if yes, branch
000140C2 3141 0012                  		move.w	d1,$12(a0)
000140C6                            
000140C6                            locret_134C2:
000140C6 4A28 0012                  	tst.b	y_vel(a0)		; is Sonic exactly at the height of his jump?
000140CA 6700                       	beq.s	jmp_Sonic_CheckGoSuper	; if yes, test for turning into Super Sonic	
000140CC 4E75                       		rts	
000140CE                            ; ===========================================================================
000140CE                            
000140CE                            loc_134C4:
000140CE 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
000140D4 6C00                       		bge.s	locret_134D2
000140D6 317C F040 0012             		move.w	#-$FC0,$12(a0)
000140DC                            
000140DC                            locret_134D2:
000140DC 4E75                       		rts	
000140DE                            ; End of function Sonic_JumpHeight
000140DE                            
000140DE                            Jmp_Sonic_CheckGoSuper
000140DE 4EF9 0000 0000             	jmp Sonic_CheckGoSuper
000140E4                            ; ---------------------------------------------------------------------------
000140E4                            ; Subroutine to make Sonic perform a spindash
000140E4                            ; ---------------------------------------------------------------------------
000140E4                             
000140E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000140E4                             
000140E4                             
000140E4                            Sonic_SpinDash:
000140E4 4A28 0039                  		tst.b	$39(a0)			; already Spin Dashing?
000140E8 6600                       		bne.s	loc2_1AC8E		; if set, branch
000140EA 0C28 0008 001C             		cmpi.b	#8,$1C(a0)		; is anim duck
000140F0 6600                       		bne.s	locret2_1AC8C		; if not, return
000140F2 1038 F603                  		move.b	($FFFFF603).w,d0	; read controller
000140F6 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C ?
000140FA 6700 0000                  		beq.w	locret2_1AC8C		; if not, return
000140FE 117C 001D 001C             		move.b	#$1D,$1C(a0)		; set Spin Dash anim (9 in s2)
00014104 303C 00D1                  		move.w	#$D1,d0			; spin sound ($E0 in s2)
00014108 4EB9 0000 1476             		jsr	(PlaySound_Special).l	; play spin sound
0001410E 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00014110 117C 0001 0039             		move.b	#1,$39(a0)		; set Spin Dash flag
00014116 317C 0000 003A             		move.w	#0,$3A(a0)		; set charge count to 0
0001411C 0C28 000C 0028             		cmpi.b	#$C,$28(a0)		; ??? oxygen remaining?
00014122 11FC 0002 D1DC             		move.b	#2,($FFFFD1DC).w	; Set the Spin Dash dust animation to $2.
00014128                            						; the smoke/dust object
00014128                            loc2_1AC84:
00014128 6100 FDAC                  		bsr.w	Sonic_LevelBound
0001412C 6100 0000                  		bsr.w	Sonic_AnglePos
00014130                            
00014130                            locret2_1AC8C:
00014130 4E75                       		rts	
00014132                            ; ---------------------------------------------------------------------------
00014132                            
00014132                            loc2_1AC8E:
00014132 117C 001D 001C             		move.b	#$1D,$1C(a0)
00014138 1038 F602                  		move.b	($FFFFF602).w,d0	; read controller
0001413C 0800 0001                  		btst	#1,d0			; check down button
00014140 6600 0000                  		bne.w	loc2_1AD30		; if set, branch
00014144 117C 000E 0016             		move.b	#$E,$16(a0)		; $16(a0) is height/2
0001414A 117C 0007 0017             		move.b	#7,$17(a0)		; $17(a0) is width/2
00014150 117C 0002 001C             		move.b	#2,$1C(a0)		; set animation to roll
00014156 5A68 000C                  		addq.w	#5,$C(a0)		; $C(a0) is Y coordinate
0001415A 117C 0000 0039             		move.b	#0,$39(a0)		; clear Spin Dash flag
00014160 7000                       		moveq	#0,d0
00014162 1028 003A                  		move.b	$3A(a0),d0		; copy charge count
00014166 D040                       		add.w	d0,d0			; double it
00014168 317B 0000 0014             		move.w	Dash_Speeds(pc,d0.w),$14(a0) ; get normal speed
0001416E 3028 0014                  		move.w	$14(a0),d0		; get inertia
00014172 0440 0800                  		subi.w	#$800,d0		; subtract $800
00014176 D040                       		add.w	d0,d0			; double it
00014178 0240 1F00                  		andi.w	#$1F00,d0		; mask it against $1F00
0001417C 4440                       		neg.w	d0			; negate it
0001417E 0640 2000                  		addi.w	#$2000,d0		; add $2000
00014182 31C0 C904                  		move.w	d0,($FFFFC904).w	; move to $C904
00014186 0828 0000 0022             		btst	#0,$22(a0)		; is sonic facing right?
0001418C 6700                       		beq.s	loc2_1ACF4		; if not, branch
0001418E 4468 0014                  		neg.w	$14(a0)			; negate inertia
00014192                            ; ===========================================================================
00014192                            jmp_loc2_1AD78:
00014192 4EF9 0000 0000             	jmp loc2_1AD78
00014198                            loc2_1ACF4:
00014198 08E8 0002 0022             		bset	#2,$22(a0)		; set unused (in s1) flag
0001419E 11FC 0000 D1DC             		move.b	#0,($FFFFD1DC).w	; clear Spin Dash dust animation.
000141A4 303C 00BC                  		move.w	#$BC,d0			; spin release sound
000141A8 4EB9 0000 1476             		jsr	(PlaySound_Special).l	; play it!
000141AE 60E2                       		bra.s	jmp_loc2_1AD78
000141B0                            ; ===========================================================================
000141B0                            ;zafast:
000141B0                            ;		move.w	SuperDash_Speeds(pc,d0.w),$14(a0) ; get super speed
000141B0                            ;		move.w	$14(a0),d0		; get inertia
000141B0                            ;		subi.w	#$800,d0		; subtract $800
000141B0                            ;		add.w	d0,d0			; double it
000141B0                            ;		andi.w	#$1F00,d0		; mask it against $1F00
000141B0                            ;		neg.w	d0			; negate it
000141B0                            ;		addi.w	#$2000,d0		; add $2000
000141B0                            ;		move.w	d0,($FFFFC904).w	; move to $C904
000141B0                            ;		btst	#0,$22(a0)		; is sonic facing right?
000141B0                            ;		beq.s	loc2_1ACF4		; if not, branch
000141B0                            ;		neg.w	$14(a0)			; negate inertia
000141B0                            
000141B0                            ; ===========================================================================
000141B0                            Dash_Speeds:
000141B0 0800                       		dc.w  $800		; 0
000141B2 0880                       		dc.w  $880		; 1
000141B4 0900                       		dc.w  $900		; 2
000141B6 0980                       		dc.w  $980		; 3
000141B8 0A00                       		dc.w  $A00		; 4
000141BA 0A80                       		dc.w  $A80		; 5
000141BC 0B00                       		dc.w  $B00		; 6
000141BE 0B80                       		dc.w  $B80		; 7
000141C0 0C00                       		dc.w  $C00		; 8
000141C2                            ;SuperDash_Speeds:
000141C2                            ;		dc.w  $B00		; 0
000141C2                            ;		dc.w  $B80		; 1
000141C2                            ;		dc.w  $C00		; 2
000141C2                            ;		dc.w  $C80		; 3
000141C2                            ;		dc.w  $D00		; 4
000141C2                            ;		dc.w  $D80		; 5
000141C2                            ;		dc.w  $E00		; 6
000141C2                            ;		dc.w  $E80		; 7
000141C2                            ;		dc.w  $F00		; 8		
000141C2                            ; ===========================================================================
000141C2                            
000141C2                            loc2_1AD30:				; If still charging the dash...
000141C2 4A68 003A                  		tst.w	$3A(a0)		; check charge count
000141C6 6700                       		beq.s	loc2_1AD48	; if zero, branch
000141C8 3028 003A                  		move.w	$3A(a0),d0	; otherwise put it in d0
000141CC EA48                       		lsr.w	#5,d0		; shift right 5 (divide it by 32)
000141CE 9168 003A                  		sub.w	d0,$3A(a0)	; subtract from charge count
000141D2 6400                       		bcc.s	loc2_1AD48	; ??? branch if carry clear
000141D4 317C 0000 003A             		move.w	#0,$3A(a0)	; set charge count to 0
000141DA                            
000141DA                            loc2_1AD48:
000141DA 1038 F603                  		move.b	($FFFFF603).w,d0	; read controller
000141DE 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C?
000141E2 6700 0000                  		beq.w	loc2_1AD78		; if not, branch
000141E6 317C 1D00 001C             		move.w	#$1D00,$1C(a0)		; reset spdsh animation
000141EC 303C 00D1                  		move.w	#$D1,d0			; was $E0 in sonic 2
000141F0 11FC 0002 D1DC             		move.b	#2,$FFFFD1DC.w	; Set the Spin Dash dust animation to $2.		
000141F6 4EB9 0000 1476             		jsr	(PlaySound_Special).l	; play charge sound
000141FC 0668 0200 003A             		addi.w	#$200,$3A(a0)		; increase charge count
00014202 0C68 0800 003A             		cmpi.w	#$800,$3A(a0)		; check if it's maxed
00014208 6500                       		bcs.s	loc2_1AD78		; if not, then branch
0001420A 317C 0800 003A             		move.w	#$800,$3A(a0)		; reset it to max
00014210                            
00014210                            loc2_1AD78:
00014210 588F                       		addq.l	#4,sp			; increase stack ptr
00014212 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00014218 6700                       		beq.s	loc2_1AD8C
0001421A 6400                       		bcc.s	loc2_1AD88
0001421C 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00014220                            
00014220                            loc2_1AD88:
00014220 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00014224                            
00014224                            loc2_1AD8C:
00014224 6100 FCB0                  		bsr.w	Sonic_LevelBound
00014228 6100 0000                  		bsr.w	Sonic_AnglePos
0001422C                            		;move.w	#$60,($FFFFF73E).w	; reset looking up/down
0001422C 4E75                       		rts
0001422E                            ; End of subroutine Sonic_SpinDash
0001422E                            
0001422E                            SpinDash_dust:
0001422E                            Sprite_1DD20:				; DATA XREF: ROM:0001600C?o
0001422E 7000                       		moveq	#0,d0
00014230 1028 0024                  		move.b	$24(a0),d0
00014234 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
00014238 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
0001423C                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001423C 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBA?o h+6DBC?o ...
0001423E 0000                       		dc loc_1DD90-off_1DD2E; 1
00014240 0000                       		dc loc_1DE46-off_1DD2E; 2
00014242 0000                       		dc loc_1DE4A-off_1DD2E; 3
00014244                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014244                            
00014244                            loc_1DD36:				; DATA XREF: h+6DBA?o
00014244 5428 0024                  		addq.b	#2,$24(a0)
00014248 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
00014250 0028 0004 0001             		or.b	#4,1(a0)
00014256 117C 0001 0018             		move.b	#1,$18(a0)
0001425C 117C 0010 0019             		move.b	#$10,$19(a0)
00014262 317C 07A0 0002             		move	#$7A0,2(a0)
00014268 317C D000 003E             		move	#-$3000,$3E(a0)
0001426E 317C F400 003C             		move	#$F400,$3C(a0)
00014274 B0FC D1C0                  		cmp	#-$2E40,a0
00014278 6700                       		beq.s	loc_1DD8C
0001427A 117C 0001 0034             		move.b	#1,$34(a0)
00014280                            ;		cmp	#2,($FFFFFF70).w
00014280                            ;		beq.s	loc_1DD8C
00014280                            ;		move	#$48C,2(a0)
00014280                            ;		move	#-$4FC0,$3E(a0)
00014280                            ;		move	#-$6E80,$3C(a0)
00014280                            
00014280                            loc_1DD8C:				; CODE XREF: h+6DF6?j h+6E04?j
00014280                            ;		bsr.w	sub_16D6E
00014280                            
00014280                            loc_1DD90:				; DATA XREF: h+6DBA?o
00014280 3468 003E                  		movea.w	$3E(a0),a2
00014284 7000                       		moveq	#0,d0
00014286 1028 001C                  		move.b	$1C(a0),d0
0001428A D040                       		add	d0,d0
0001428C 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
00014290 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
00014294                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014294 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30?o h+6E32?o ...
00014296 0000                       		dc loc_1DDAC-off_1DDA4; 1
00014298 0000                       		dc loc_1DDCC-off_1DDA4; 2
0001429A 0000                       		dc loc_1DE20-off_1DDA4; 3
0001429C                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001429C                            
0001429C                            loc_1DDAC:				; DATA XREF: h+6E30?o
0001429C 3178 F646 000C             		move	($FFFFF646).w,$C(a0)
000142A2 4A28 001D                  		tst.b	$1D(a0)
000142A6 6600                       		bne.s	loc_1DE28
000142A8 316A 0008 0008             		move	8(a2),8(a0)
000142AE 117C 0000 0022             		move.b	#0,$22(a0)
000142B4 0268 7FFF 0002             		and	#$7FFF,2(a0)
000142BA 6000                       		bra.s	loc_1DE28
000142BC                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000142BC                            
000142BC                            loc_1DDCC:				; DATA XREF: h+6E30?o
000142BC                            ;		cmp.b	#$C,$28(a2)
000142BC                            ;		bcs.s	loc_1DE3E
000142BC 0C2A 0004 0024             		cmp.b	#4,$24(a2)
000142C2 6400                       		bcc.s	loc_1DE3E
000142C4 4A2A 0039                  		tst.b	$39(a2)
000142C8 6700                       		beq.s	loc_1DE3E
000142CA 316A 0008 0008             		move	8(a2),8(a0)
000142D0 316A 000C 000C             		move	$C(a2),$C(a0)
000142D6 116A 0022 0022             		move.b	$22(a2),$22(a0)
000142DC 0228 0001 0022             		and.b	#1,$22(a0)
000142E2 4A28 0034                  		tst.b	$34(a0)
000142E6 6700                       		beq.s	loc_1DE06
000142E8 5968 000C                  		sub	#4,$C(a0)
000142EC                            
000142EC                            loc_1DE06:				; CODE XREF: h+6E8A?j
000142EC 4A28 001D                  		tst.b	$1D(a0)
000142F0 6600                       		bne.s	loc_1DE28
000142F2 0268 7FFF 0002             		and	#$7FFF,2(a0)
000142F8 4A6A 0002                  		tst	2(a2)
000142FC 6A00                       		bpl.s	loc_1DE28
000142FE 0068 8000 0002             		or	#-$8000,2(a0)
00014304                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014304                            
00014304                            loc_1DE20:				; DATA XREF: h+6E30?o
00014304                            loc_1DE28:				; CODE XREF: h+6E42?j h+6E56?j ...
00014304 43F9 0000 0000             		lea	(off_1DF38).l,a1
0001430A 4EB9 0000 B1F0             		jsr	AnimateSprite
00014310 6100 0000                  		bsr.w	loc_1DEE4
00014314 4EFA 9DC8                  		jmp	DisplaySprite
00014318                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014318                            
00014318                            loc_1DE3E:				; CODE XREF: h+6E5E?j h+6E66?j ...
00014318 117C 0000 001C             		move.b	#0,$1C(a0)
0001431E 4E75                       		rts	
00014320                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014320                            
00014320                            loc_1DE46:				; DATA XREF: h+6DBA?o
00014320 6000 9DF8                  		bra.w	DeleteObject
00014324                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014324                            
00014324                            
00014324                            
00014324                            loc_1DE4A:
00014324 3468 003E                  	movea.w	$3E(a0),a2
00014328 7210                       	moveq	#$10,d1
0001432A 0C2A 000D 001C             	cmp.b	#$D,$1C(a2)
00014330 6700                       	beq.s	loc_1DE64
00014332 7206                       	moveq	#$6,d1
00014334 0C2A 0003 0021             	cmp.b	#$3,$21(a2)
0001433A 6700                       	beq.s	loc_1DE64
0001433C 117C 0002 0024             	move.b	#2,$24(a0)
00014342 117C 0000 0032             	move.b	#0,$32(a0)
00014348 4E75                       	rts
0001434A                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001434A                            
0001434A                            loc_1DE64:				; CODE XREF: h+6EE0?j
0001434A 5328 0032                  		subq.b	#1,$32(a0)
0001434E 6A00                       		bpl.s	loc_1DEE0
00014350 117C 0003 0032             		move.b	#3,$32(a0)
00014356 4EBA A21C                  		jsr	SingleObjLoad
0001435A 6600                       		bne.s	loc_1DEE0
0001435C 1290                       		move.b	0(a0),0(a1)
0001435E 336A 0008 0008             		move	8(a2),8(a1)
00014364 336A 000C 000C             		move	$C(a2),$C(a1)
0001436A 4A28 0034                  		tst.b	$34(a0)
0001436E 6700                       		beq.s	loc_1DE9A
00014370 5941                       		sub	#4,d1
00014372                            
00014372                            loc_1DE9A:				; CODE XREF: h+6F1E?j
00014372 D369 000C                  		add	d1,$C(a1)
00014376 137C 0000 0022             		move.b	#0,$22(a1)
0001437C 137C 0003 001C             		move.b	#3,$1C(a1)
00014382 5429 0024                  		addq.b	#2,$24(a1)
00014386 2368 0004 0004             		move.l	4(a0),4(a1)
0001438C 1368 0001 0001             		move.b	1(a0),1(a1)
00014392 137C 0001 0018             		move.b	#1,$18(a1)
00014398 137C 0004 0019             		move.b	#4,$19(a1)
0001439E 3368 0002 0002             		move	2(a0),2(a1)
000143A4 3368 003E 003E             		move	$3E(a0),$3E(a1)
000143AA 0269 7FFF 0002             		and	#$7FFF,2(a1)
000143B0 4A6A 0002                  		tst	2(a2)
000143B4 6A00                       		bpl.s	loc_1DEE0
000143B6 0069 8000 0002             		or	#-$8000,2(a1)
000143BC                            
000143BC                            loc_1DEE0:				; CODE XREF: h+6EF4?j h+6F00?j ...
000143BC 6100                       		bsr.s	loc_1DEE4
000143BE 4E75                       		rts	
000143C0                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000143C0                            
000143C0                            loc_1DEE4:				; CODE XREF: h+6EC0?p h+6F6C?p
000143C0 7000                       		moveq	#0,d0
000143C2 1028 001A                  		move.b	$1A(a0),d0
000143C6 B028 0030                  		cmp.b	$30(a0),d0
000143CA 6700 0000                  		beq.w	locret_1DF36
000143CE 1140 0030                  		move.b	d0,$30(a0)
000143D2 45F9 0000 0000             		lea	(off_1E074).l,a2
000143D8 D040                       		add	d0,d0
000143DA D4F2 0000                  		add	(a2,d0.w),a2
000143DE 3A1A                       		move	(a2)+,d5
000143E0 5345                       		subq	#1,d5
000143E2 6B00 0000                  		bmi.w	locret_1DF36
000143E6 3828 003C                  		move $3C(a0),d4
000143EA                            
000143EA                            loc_1DF0A:				; CODE XREF: h+6FBE?j
000143EA 7200                       		moveq	#0,d1
000143EC 321A                       		move	(a2)+,d1
000143EE 3601                       		move	d1,d3
000143F0 E04B                       		lsr.w	#8,d3
000143F2 0243 00F0                  		and	#$F0,d3	; 'ð'
000143F6 0643 0010                  		add	#$10,d3
000143FA 0241 0FFF                  		and	#$FFF,d1
000143FE EB89                       		lsl.l	#5,d1
00014400 0681 0000 0000             		add.l	#Art_Dust,d1
00014406 3404                       		move	d4,d2
00014408 D843                       		add	d3,d4
0001440A D843                       		add	d3,d4
0001440C 4EB9 0000 151A             		jsr	(QueueDMATransfer).l
00014412 51CD FFD6                  		dbf	d5,loc_1DF0A
00014416 4E75                           rts
00014418                            
00014418                            locret_1DF36:				; CODE XREF: h+6F7A?j h+6F90?j
00014418 4E75                       		rts	
0001441A                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001441A 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4?o h+6FC4?o ...
0001441C 0000                       		dc byte_1DF43-off_1DF38; 1
0001441E 0000                       		dc byte_1DF4F-off_1DF38; 2
00014420 0000                       		dc byte_1DF58-off_1DF38; 3
00014422 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4?o
00014425 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4?o
00014431 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4?o
0001443A 0311 1213 14FC             byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC; 0	; DATA XREF: h+6FC4?o
00014440                            
00014440                            return_1ABA4:
00014440 4E75                       	rts
00014442                            Sonic_CheckGoSuper:
00014442                            	include "_inc\SuperSonic.asm"
00014442                            ; ---------------------------------------------------------------------------
00014442                            ; Subroutine called at the peak of a jump that transforms Sonic into Super Sonic
00014442                            ; if he has enough rings and emeralds
00014442                            ; ---------------------------------------------------------------------------
00014442                            
00014442                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00014442                            ; loc_1AB38: test_set_SS:
00014442 4A38 FE19                  	tst.b	(Super_Sonic_flag).w	; is Sonic already Super?
00014446 66F8                       	bne.s	return_1ABA4		; if yes, branch
00014448                            ;	cmpi.b	#6,(Emerald_count).w	; does Sonic have exactly 7 emeralds?
00014448                            ;	bne.s	return_1ABA4		; if not, branch
00014448 0C78 0032 FE20             	cmpi.w	#50,(Ring_count).w	; does Sonic have at least 50 rings?
0001444E 65F0                       	bcs.s	return_1ABA4		; if not, branch
00014450                            
00014450 11FC 0001 F65F             	move.b	#1,(Super_Sonic_palette).w
00014456 11FC 000F F65E             	move.b	#$F,(Palette_frame_count).w
0001445C 11FC 0001 FE19             	move.b	#1,(Super_Sonic_flag).w
00014462 117C 0081 002A             	move.b	#$81,obj_control(a0)
00014468 117C 001F 001C             	move.b	#$1F,anim(a0)			; use transformation animation
0001446E                            ;	move.b	#$7E,(Object_RAM+$2040).w	; Obj7E is the ending sonic which is why it's commented out
0001446E 31FC 0A00 F760             	move.w	#$A00,(Sonic_top_speed).w
00014474 31FC 0030 F762             	move.w	#$30,(Sonic_acceleration).w
0001447A 31FC 0100 F764             	move.w	#$100,(Sonic_deceleration).w
00014480 317C 0000 0032             	move.w	#0,invincibility_time(a0)
00014486 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0001448C 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
00014492 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
00014498 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0001449E 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
000144A4 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
000144AA 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
000144B0 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w	
000144B6 303C 00C3                          move.w	#$C3,d0         ; 
000144BA 4EB9 0000 1470             	jsr	(PlaySound).l	; Play special ring sound effect.
000144C0 303C 009F                  	move.w	#$9F,d0         
000144C4 4EF9 0000 1476             	jmp	(PlaySound_Special).l	; load the invincibility song and return also playmusic doesn't exist
000144CA                            
000144CA                            ; End of subroutine Sonic_CheckGoSuper
000144CA                            
000144CA                            ; ---------------------------------------------------------------------------
000144CA                            ; Subroutine doing the extra logic for Super Sonic
000144CA                            ; ---------------------------------------------------------------------------
000144CA                            
000144CA                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000144CA                            rts:
000144CA 4E75                       	rts
000144CC                            ; loc_1ABA6:
000144CC                            Sonic_Super:
000144CC 4A38 FE19                  	tst.b	(Super_Sonic_flag).w	; Ignore all this code if not Super Sonic
000144D0 6700 0000                  	beq.w	return_1AC3C
000144D4 4A38 FE1E                  	tst.b	(Update_HUD_timer).w
000144D8 6700                       	beq.s	Sonic_RevertToNormal ; ?
000144DA 5378 F670                  	subq.w	#1,(Super_Sonic_frame_count).w
000144DE 6A00 0000                  	bpl.w	return_1AC3C
000144E2 31FC 003C F670             	move.w	#60,(Super_Sonic_frame_count).w	; Reset frame counter to 60
000144E8 4A78 FE20                  	tst.w	(Ring_count).w
000144EC 6700                       	beq.s	Sonic_RevertToNormal
000144EE 0038 0001 FE1D             	ori.b	#1,(Update_HUD_rings).w
000144F4 0C78 0001 FE20             	cmpi.w	#1,(Ring_count).w
000144FA 6700                       	beq.s	@update
000144FC 0C78 000A FE20             	cmpi.w	#10,(Ring_count).w
00014502 6700                       	beq.s	@update
00014504 0C78 0064 FE20             	cmpi.w	#100,(Ring_count).w
0001450A 6600                       	bne.s	@update2
0001450C                            @update
0001450C 0038 0080 FE1D             	ori.b	#$80,(Update_HUD_rings).w
00014512                            @update2
00014512 5378 FE20                  	subq.w	#1,(Ring_count).w
00014516 66B2                       	bne.s	rts
00014518                            ; loc_1ABF2:
00014518                            Sonic_RevertToNormal:
00014518 11FC 0002 F65F             	move.b	#2,(Super_Sonic_palette).w	; Remove rotating palette
0001451E 31FC 0028 F65C             	move.w	#$28,($FFFFF65C).w	; Unknown
00014524 11FC 0000 FE19             	move.b	#0,(Super_Sonic_flag).w
0001452A 117C 0001 001D             	move.b	#1,next_anim(a0)	; Change animation back to normal ?
00014530 317C 0001 0032             	move.w	#1,invincibility_time(a0)	; Remove invincibility
00014536 31FC 0600 F760             	move.w	#$600,(Sonic_top_speed).w
0001453C 31FC 000C F762             	move.w	#$C,(Sonic_acceleration).w
00014542 31FC 0080 F764             	move.w	#$80,(Sonic_deceleration).w
00014548 0828 0006 0022             	btst	#6,status(a0)	; Check if underwater, return if not
0001454E 6700                       	beq.s	return_1AC3C
00014550 31FC 0300 F760             	move.w	#$300,(Sonic_top_speed).w
00014556 31FC 0006 F762             	move.w	#6,(Sonic_acceleration).w
0001455C 31FC 0040 F764             	move.w	#$40,(Sonic_deceleration).w
00014562                            
00014562                            return_1AC3C:
00014562 4E75                       	rts
00014564                            ; End of subroutine Sonic_Super
00014564                            ; End of subroutine Sonic_Super
00014564                            ; -------------------------------------------------------------------------------
00014564                            ; Unknown Sprite Mappings
00014564                            ; -------------------------------------------------------------------------------
00014564                            MapUnc_1DF5E:
00014564 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
00014566 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
00014568 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
0001456A 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
0001456C 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
0001456E 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
00014570 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
00014572 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
00014574 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
00014576 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
00014578 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
0001457A 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
0001457C 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
0001457E 0000                       	dc word_1E004-MapUnc_1DF5E; 13
00014580 0000                       	dc word_1E016-MapUnc_1DF5E; 14
00014582 0000                       	dc word_1E028-MapUnc_1DF5E; 15
00014584 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
00014586 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
00014588 0000                       	dc word_1E056-MapUnc_1DF5E; 18
0001458A 0000                       	dc word_1E060-MapUnc_1DF5E; 19
0001458C 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
0001458E 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
00014590 00                         word_1DF8A:	dc.b 0
00014591 01                         word_1DF8C:	dc.b 1
00014592 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00014597 01                         word_1DF96:	dc.b 1
00014598 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001459D 01                         word_1DFA0:	dc.b 1
0001459E E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000145A3 01                         word_1DFAA:	dc.b 1
000145A4 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000145A9 01                         word_1DFB4:	dc.b 1
000145AA E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000145AF 01                         word_1DFBE:	dc.b 1
000145B0 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
000145B5 01                         word_1DFC8:	dc.b 1
000145B6 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000145BB 01                         word_1DFD2:	dc.b 1
000145BC F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000145C1 01                         word_1DFDC:	dc.b 1
000145C2 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
000145C7 01                         word_1DFE6:	dc.b 1
000145C8 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
000145CD 01                         word_1DFF0:	dc.b 1
000145CE 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
000145D3 01                         word_1DFFA:	dc.b 1
000145D4 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
000145D9 02                         word_1E004:	dc.b 2
000145DA F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
000145DF 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
000145E4 02                         word_1E016:	dc.b 2
000145E5 F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
000145EA 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
000145EF 02                         word_1E028:	dc.b 2
000145F0 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
000145F5 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
000145FA 02                         word_1E03A:	dc.b 2
000145FB F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00014600 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00014605 01                         word_1E04C:	dc.b 1
00014606 F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
0001460B 01                         word_1E056:	dc.b 1
0001460C F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
00014611 01                         word_1E060:	dc.b 1
00014612 F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
00014617 01                         word_1E06A:	dc.b 1
00014618 F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
0001461D 00                         	dc.b 0
0001461E 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
00014620 0000                       	dc word_1E0A2-off_1E074; 1
00014622 0000                       	dc word_1E0A6-off_1E074; 2
00014624 0000                       	dc word_1E0AA-off_1E074; 3
00014626 0000                       	dc word_1E0AE-off_1E074; 4
00014628 0000                       	dc word_1E0B2-off_1E074; 5
0001462A 0000                       	dc word_1E0B6-off_1E074; 6
0001462C 0000                       	dc word_1E0BA-off_1E074; 7
0001462E 0000                       	dc word_1E0BE-off_1E074; 8
00014630 0000                       	dc word_1E0C2-off_1E074; 9
00014632 0000                       	dc word_1E0C6-off_1E074; 10
00014634 0000                       	dc word_1E0CA-off_1E074; 11
00014636 0000                       	dc word_1E0CE-off_1E074; 12
00014638 0000                       	dc word_1E0D2-off_1E074; 13
0001463A 0000                       	dc word_1E0D8-off_1E074; 14
0001463C 0000                       	dc word_1E0DE-off_1E074; 15
0001463E 0000                       	dc word_1E0E4-off_1E074; 16
00014640 0000                       	dc word_1E0EA-off_1E074; 17
00014642 0000                       	dc word_1E0EA-off_1E074; 18
00014644 0000                       	dc word_1E0EA-off_1E074; 19
00014646 0000                       	dc word_1E0EA-off_1E074; 20
00014648 0000                       	dc word_1E0EC-off_1E074; 21
0001464A 0000                       word_1E0A0:	dc 0
0001464C 0001                       word_1E0A2:	dc 1
0001464E 7000                       	dc $7000
00014650 0001                       word_1E0A6:	dc 1
00014652 F008                       	dc $F008
00014654 0001                       word_1E0AA:	dc 1
00014656 F018                       	dc $F018
00014658 0001                       word_1E0AE:	dc 1
0001465A F028                       	dc $F028
0001465C 0001                       word_1E0B2:	dc 1
0001465E F038                       	dc $F038
00014660 0001                       word_1E0B6:	dc 1
00014662 F048                       	dc $F048
00014664 0001                       word_1E0BA:	dc 1
00014666 7058                       	dc $7058
00014668 0001                       word_1E0BE:	dc 1
0001466A 7060                       	dc $7060
0001466C 0001                       word_1E0C2:	dc 1
0001466E 7068                       	dc $7068
00014670 0001                       word_1E0C6:	dc 1
00014672 7070                       	dc $7070
00014674 0001                       word_1E0CA:	dc 1
00014676 7078                       	dc $7078
00014678 0001                       word_1E0CE:	dc 1
0001467A 7080                       	dc $7080
0001467C 0002                       word_1E0D2:	dc 2
0001467E 1088                       	dc $1088
00014680 708A                       	dc $708A
00014682 0002                       word_1E0D8:	dc 2
00014684 3092                       	dc $3092
00014686 7096                       	dc $7096
00014688 0002                       word_1E0DE:	dc 2
0001468A 509E                       	dc $509E
0001468C 70A4                       	dc $70A4
0001468E 0002                       word_1E0E4:	dc 2
00014690 50AC                       	dc $50AC
00014692 70B2                       	dc $70B2
00014694 0000                       word_1E0EA:	dc 0
00014696 0001                       word_1E0EC:	dc 1
00014698 F0BA                       	dc $F0BA
0001469A                            	even
0001469A                            
0001469A                            ; ---------------------------------------------------------------------------
0001469A                            ; Subroutine to	slow Sonic walking up a	slope
0001469A                            ; ---------------------------------------------------------------------------
0001469A                            
0001469A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001469A                            
0001469A                            
0001469A                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
0001469A 1028 0026                  		move.b	$26(a0),d0
0001469E 0600 0060                  		addi.b	#$60,d0
000146A2 0C00 00C0                  		cmpi.b	#$C0,d0
000146A6 6400                       		bcc.s	locret_13508
000146A8 1028 0026                  		move.b	$26(a0),d0
000146AC 4EB9 0000 33D4             		jsr	(CalcSine).l
000146B2 C1FC 0020                  		muls.w	#$20,d0
000146B6 E080                       		asr.l	#8,d0
000146B8 4A68 0014                  		tst.w	$14(a0)
000146BC 6700                       		beq.s	locret_13508
000146BE 6B00                       		bmi.s	loc_13504
000146C0 4A40                       		tst.w	d0
000146C2 6700                       		beq.s	locret_13502
000146C4 D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
000146C8                            
000146C8                            locret_13502:
000146C8 4E75                       		rts	
000146CA                            ; ===========================================================================
000146CA                            
000146CA                            loc_13504:
000146CA D168 0014                  		add.w	d0,$14(a0)
000146CE                            
000146CE                            locret_13508:
000146CE 4E75                       		rts	
000146D0                            ; End of function Sonic_SlopeResist
000146D0                            
000146D0                            ; ---------------------------------------------------------------------------
000146D0                            ; Subroutine to	push Sonic down	a slope	while he's rolling
000146D0                            ; ---------------------------------------------------------------------------
000146D0                            
000146D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000146D0                            
000146D0                            
000146D0                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
000146D0 1028 0026                  		move.b	$26(a0),d0
000146D4 0600 0060                  		addi.b	#$60,d0
000146D8 0C00 00C0                  		cmpi.b	#-$40,d0
000146DC 6400                       		bcc.s	locret_13544
000146DE 1028 0026                  		move.b	$26(a0),d0
000146E2 4EB9 0000 33D4             		jsr	(CalcSine).l
000146E8 C1FC 0050                  		muls.w	#$50,d0
000146EC E080                       		asr.l	#8,d0
000146EE 4A68 0014                  		tst.w	$14(a0)
000146F2 6B00                       		bmi.s	loc_1353A
000146F4 4A40                       		tst.w	d0
000146F6 6A00                       		bpl.s	loc_13534
000146F8 E480                       		asr.l	#2,d0
000146FA                            
000146FA                            loc_13534:
000146FA D168 0014                  		add.w	d0,$14(a0)
000146FE 4E75                       		rts	
00014700                            ; ===========================================================================
00014700                            
00014700                            loc_1353A:
00014700 4A40                       		tst.w	d0
00014702 6B00                       		bmi.s	loc_13540
00014704 E480                       		asr.l	#2,d0
00014706                            
00014706                            loc_13540:
00014706 D168 0014                  		add.w	d0,$14(a0)
0001470A                            
0001470A                            locret_13544:
0001470A 4E75                       		rts	
0001470C                            ; End of function Sonic_RollRepel
0001470C                            
0001470C                            ; ---------------------------------------------------------------------------
0001470C                            ; Subroutine to	push Sonic down	a slope
0001470C                            ; ---------------------------------------------------------------------------
0001470C                            
0001470C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001470C                            
0001470C                            
0001470C                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
0001470C 4E71                       		nop	
0001470E 4A28 0038                  		tst.b	$38(a0)
00014712 6600                       		bne.s	locret_13580
00014714 4A68 003E                  		tst.w	$3E(a0)
00014718 6600                       		bne.s	loc_13582
0001471A 1028 0026                  		move.b	$26(a0),d0
0001471E 0600 0020                  		addi.b	#$20,d0
00014722 0200 00C0                  		andi.b	#$C0,d0
00014726 6700                       		beq.s	locret_13580
00014728 3028 0014                  		move.w	$14(a0),d0
0001472C 6A00                       		bpl.s	loc_1356A
0001472E 4440                       		neg.w	d0
00014730                            
00014730                            loc_1356A:
00014730 0C40 0280                  		cmpi.w	#$280,d0
00014734 6400                       		bcc.s	locret_13580
00014736 4268 0014                  		clr.w	$14(a0)
0001473A 08E8 0001 0022             		bset	#1,$22(a0)
00014740 317C 001E 003E             		move.w	#$1E,$3E(a0)
00014746                            
00014746                            locret_13580:
00014746 4E75                       		rts	
00014748                            ; ===========================================================================
00014748                            
00014748                            loc_13582:
00014748 5368 003E                  		subq.w	#1,$3E(a0)
0001474C 4E75                       		rts	
0001474E                            ; End of function Sonic_SlopeRepel
0001474E                            
0001474E                            ; ---------------------------------------------------------------------------
0001474E                            ; Subroutine to	return Sonic's angle to 0 as he jumps
0001474E                            ; ---------------------------------------------------------------------------
0001474E                            
0001474E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001474E                            
0001474E                            
0001474E                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
0001474E 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00014752 6700                       		beq.s	locret_135A2	; if already 0,	branch
00014754 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00014756                            
00014756 5400                       		addq.b	#2,d0		; increase angle
00014758 6400                       		bcc.s	loc_13596
0001475A 7000                       		moveq	#0,d0
0001475C                            
0001475C                            loc_13596:
0001475C 6000                       		bra.s	loc_1359E
0001475E                            ; ===========================================================================
0001475E                            
0001475E                            loc_13598:
0001475E 5500                       		subq.b	#2,d0		; decrease angle
00014760 6400                       		bcc.s	loc_1359E
00014762 7000                       		moveq	#0,d0
00014764                            
00014764                            loc_1359E:
00014764 1140 0026                  		move.b	d0,$26(a0)
00014768                            
00014768                            locret_135A2:
00014768 4E75                       		rts	
0001476A                            ; End of function Sonic_JumpAngle
0001476A                            
0001476A                            ; ---------------------------------------------------------------------------
0001476A                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
0001476A                            ; ---------------------------------------------------------------------------
0001476A                            
0001476A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001476A                            
0001476A                            
0001476A                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
0001476A 3228 0010                  		move.w	$10(a0),d1
0001476E 3428 0012                  		move.w	$12(a0),d2
00014772 4EB9 0000 36A2             		jsr	(CalcAngle).l
00014778 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
0001477C 0400 0020                  		subi.b	#$20,d0
00014780 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00014784 0200 00C0                  		andi.b	#$C0,d0
00014788 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
0001478C 0C00 0040                  		cmpi.b	#$40,d0
00014790 6700 0000                  		beq.w	loc_13680
00014794 0C00 0080                  		cmpi.b	#$80,d0
00014798 6700 0000                  		beq.w	loc_136E2
0001479C 0C00 00C0                  		cmpi.b	#-$40,d0
000147A0 6700 0000                  		beq.w	loc_1373E
000147A4 6100 0000                  		bsr.w	Sonic_HitWall
000147A8 4A41                       		tst.w	d1
000147AA 6A00                       		bpl.s	loc_135F0
000147AC 9368 0008                  		sub.w	d1,8(a0)
000147B0 317C 0000 0010             		move.w	#0,$10(a0)
000147B6                            
000147B6                            loc_135F0:
000147B6 6100 0000                  		bsr.w	sub_14EB4
000147BA 4A41                       		tst.w	d1
000147BC 6A00                       		bpl.s	loc_13602
000147BE D368 0008                  		add.w	d1,8(a0)
000147C2 317C 0000 0010             		move.w	#0,$10(a0)
000147C8                            
000147C8                            loc_13602:
000147C8 6100 0000                  		bsr.w	Sonic_HitFloor
000147CC 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
000147D0 4A41                       		tst.w	d1
000147D2 6A00                       		bpl.s	locret_1367E
000147D4 1428 0012                  		move.b	$12(a0),d2
000147D8 5002                       		addq.b	#8,d2
000147DA 4402                       		neg.b	d2
000147DC B202                       		cmp.b	d2,d1
000147DE 6C00                       		bge.s	loc_1361E
000147E0 B002                       		cmp.b	d2,d0
000147E2 6D00                       		blt.s	locret_1367E
000147E4                            
000147E4                            loc_1361E:
000147E4 D368 000C                  		add.w	d1,$C(a0)
000147E8 1143 0026                  		move.b	d3,$26(a0)
000147EC 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000147F0 117C 0000 001C             		move.b	#0,$1C(a0)
000147F6 1003                       		move.b	d3,d0
000147F8 0600 0020                  		addi.b	#$20,d0
000147FC 0200 0040                  		andi.b	#$40,d0
00014800 6600                       		bne.s	loc_1365C
00014802 1003                       		move.b	d3,d0
00014804 0600 0010                  		addi.b	#$10,d0
00014808 0200 0020                  		andi.b	#$20,d0
0001480C 6700                       		beq.s	loc_1364E
0001480E E0E8 0012                  		asr	$12(a0)
00014812 6000                       		bra.s	loc_13670
00014814                            ; ===========================================================================
00014814                            
00014814                            loc_1364E:
00014814 317C 0000 0012             		move.w	#0,$12(a0)
0001481A 3168 0010 0014             		move.w	$10(a0),$14(a0)
00014820 4E75                       		rts	
00014822                            ; ===========================================================================
00014822                            
00014822                            loc_1365C:
00014822 317C 0000 0010             		move.w	#0,$10(a0)
00014828 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
0001482E 6F00                       		ble.s	loc_13670
00014830 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00014836                            
00014836                            loc_13670:
00014836 3168 0012 0014             		move.w	$12(a0),$14(a0)
0001483C 4A03                       		tst.b	d3
0001483E 6A00                       		bpl.s	locret_1367E
00014840 4468 0014                  		neg.w	$14(a0)
00014844                            
00014844                            locret_1367E:
00014844 4E75                       		rts	
00014846                            ; ===========================================================================
00014846                            
00014846                            loc_13680:
00014846 6100 0000                  		bsr.w	Sonic_HitWall
0001484A 4A41                       		tst.w	d1
0001484C 6A00                       		bpl.s	loc_1369A
0001484E 9368 0008                  		sub.w	d1,8(a0)
00014852 317C 0000 0010             		move.w	#0,$10(a0)
00014858 3168 0012 0014             		move.w	$12(a0),$14(a0)
0001485E 4E75                       		rts	
00014860                            ; ===========================================================================
00014860                            
00014860                            loc_1369A:
00014860 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014864 4A41                       		tst.w	d1
00014866 6A00                       		bpl.s	loc_136B4
00014868 9368 000C                  		sub.w	d1,$C(a0)
0001486C 4A68 0012                  		tst.w	$12(a0)
00014870 6A00                       		bpl.s	locret_136B2
00014872 317C 0000 0012             		move.w	#0,$12(a0)
00014878                            
00014878                            locret_136B2:
00014878 4E75                       		rts	
0001487A                            ; ===========================================================================
0001487A                            
0001487A                            loc_136B4:
0001487A 4A68 0012                  		tst.w	$12(a0)
0001487E 6B00                       		bmi.s	locret_136E0
00014880 6100 0000                  		bsr.w	Sonic_HitFloor
00014884 4A41                       		tst.w	d1
00014886 6A00                       		bpl.s	locret_136E0
00014888 D368 000C                  		add.w	d1,$C(a0)
0001488C 1143 0026                  		move.b	d3,$26(a0)
00014890 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014894 117C 0000 001C             		move.b	#0,$1C(a0)
0001489A 317C 0000 0012             		move.w	#0,$12(a0)
000148A0 3168 0010 0014             		move.w	$10(a0),$14(a0)
000148A6                            
000148A6                            locret_136E0:
000148A6 4E75                       		rts	
000148A8                            ; ===========================================================================
000148A8                            
000148A8                            loc_136E2:
000148A8 6100 0000                  		bsr.w	Sonic_HitWall
000148AC 4A41                       		tst.w	d1
000148AE 6A00                       		bpl.s	loc_136F4
000148B0 9368 0008                  		sub.w	d1,8(a0)
000148B4 317C 0000 0010             		move.w	#0,$10(a0)
000148BA                            
000148BA                            loc_136F4:
000148BA 6100 0000                  		bsr.w	sub_14EB4
000148BE 4A41                       		tst.w	d1
000148C0 6A00                       		bpl.s	loc_13706
000148C2 D368 0008                  		add.w	d1,8(a0)
000148C6 317C 0000 0010             		move.w	#0,$10(a0)
000148CC                            
000148CC                            loc_13706:
000148CC 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000148D0 4A41                       		tst.w	d1
000148D2 6A00                       		bpl.s	locret_1373C
000148D4 9368 000C                  		sub.w	d1,$C(a0)
000148D8 1003                       		move.b	d3,d0
000148DA 0600 0020                  		addi.b	#$20,d0
000148DE 0200 0040                  		andi.b	#$40,d0
000148E2 6600                       		bne.s	loc_13726
000148E4 317C 0000 0012             		move.w	#0,$12(a0)
000148EA 4E75                       		rts	
000148EC                            ; ===========================================================================
000148EC                            
000148EC                            loc_13726:
000148EC 1143 0026                  		move.b	d3,$26(a0)
000148F0 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000148F4 3168 0012 0014             		move.w	$12(a0),$14(a0)
000148FA 4A03                       		tst.b	d3
000148FC 6A00                       		bpl.s	locret_1373C
000148FE 4468 0014                  		neg.w	$14(a0)
00014902                            
00014902                            locret_1373C:
00014902 4E75                       		rts	
00014904                            ; ===========================================================================
00014904                            
00014904                            loc_1373E:
00014904 6100 0000                  		bsr.w	sub_14EB4
00014908 4A41                       		tst.w	d1
0001490A 6A00                       		bpl.s	loc_13758
0001490C D368 0008                  		add.w	d1,8(a0)
00014910 317C 0000 0010             		move.w	#0,$10(a0)
00014916 3168 0012 0014             		move.w	$12(a0),$14(a0)
0001491C 4E75                       		rts	
0001491E                            ; ===========================================================================
0001491E                            
0001491E                            loc_13758:
0001491E 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014922 4A41                       		tst.w	d1
00014924 6A00                       		bpl.s	loc_13772
00014926 9368 000C                  		sub.w	d1,$C(a0)
0001492A 4A68 0012                  		tst.w	$12(a0)
0001492E 6A00                       		bpl.s	locret_13770
00014930 317C 0000 0012             		move.w	#0,$12(a0)
00014936                            
00014936                            locret_13770:
00014936 4E75                       		rts	
00014938                            ; ===========================================================================
00014938                            
00014938                            loc_13772:
00014938 4A68 0012                  		tst.w	$12(a0)
0001493C 6B00                       		bmi.s	locret_1379E
0001493E 6100 0000                  		bsr.w	Sonic_HitFloor
00014942 4A41                       		tst.w	d1
00014944 6A00                       		bpl.s	locret_1379E
00014946 D368 000C                  		add.w	d1,$C(a0)
0001494A 1143 0026                  		move.b	d3,$26(a0)
0001494E 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014952 117C 0000 001C             		move.b	#0,$1C(a0)
00014958 317C 0000 0012             		move.w	#0,$12(a0)
0001495E 3168 0010 0014             		move.w	$10(a0),$14(a0)
00014964                            
00014964                            locret_1379E:
00014964 4E75                       		rts	
00014966                            ; End of function Sonic_Floor
00014966                            
00014966                            ; ---------------------------------------------------------------------------
00014966                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00014966                            ; ---------------------------------------------------------------------------
00014966                            
00014966                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014966                            
00014966                            
00014966                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00014966 0828 0004 0022             		btst	#4,$22(a0)
0001496C 6700                       		beq.s	loc_137AE
0001496E 4E71                       		nop	
00014970 4E71                       		nop	
00014972 4E71                       		nop	
00014974                            
00014974                            loc_137AE:
00014974 08A8 0005 0022             		bclr	#5,$22(a0)
0001497A 08A8 0001 0022             		bclr	#1,$22(a0)
00014980 08A8 0004 0022             		bclr	#4,$22(a0)
00014986 0828 0002 0022             		btst	#2,$22(a0)
0001498C 6700                       		beq.s	loc_137E4
0001498E 08A8 0002 0022             		bclr	#2,$22(a0)
00014994 117C 0013 0016             		move.b	#$13,$16(a0)
0001499A 117C 0009 0017             		move.b	#9,$17(a0)
000149A0 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
000149A6 5B68 000C                  		subq.w	#5,$C(a0)
000149AA                            
000149AA                            loc_137E4:
000149AA 117C 0000 003C             		move.b	#0,$3C(a0)
000149B0 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
000149B6 4E75                       		rts	
000149B8                            ; End of function Sonic_ResetOnFloor
000149B8                            
000149B8                            ; ===========================================================================
000149B8                            ; ---------------------------------------------------------------------------
000149B8                            ; Sonic	when he	gets hurt
000149B8                            ; ---------------------------------------------------------------------------
000149B8                            
000149B8                            Obj01_Hurt:				; XREF: Obj01_Index
000149B8 4EBA 96FE                  		jsr	SpeedToPos
000149BC 0668 0030 0012             		addi.w	#$30,$12(a0)
000149C2 0828 0006 0022             		btst	#6,$22(a0)
000149C8 6700                       		beq.s	loc_1380C
000149CA 0468 0020 0012             		subi.w	#$20,$12(a0)
000149D0                            
000149D0                            loc_1380C:
000149D0 6100 0000                  		bsr.w	Sonic_HurtStop
000149D4 6100 F500                  		bsr.w	Sonic_LevelBound
000149D8 6100 EEC6                  		bsr.w	Sonic_RecordPos
000149DC 6100 EEDC                  		bsr.w	Sonic_Water		
000149E0 6100 0000                  		bsr.w	Sonic_Animate
000149E4 6100 0000                  		bsr.w	LoadSonicDynPLC
000149E8 4EFA 96F4                  		jmp	DisplaySprite
000149EC                            
000149EC                            ; ---------------------------------------------------------------------------
000149EC                            ; Subroutine to	stop Sonic falling after he's been hurt
000149EC                            ; ---------------------------------------------------------------------------
000149EC                            
000149EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000149EC                            
000149EC                            
000149EC                            Sonic_HurtStop:				; XREF: Obj01_Hurt
000149EC 3038 F72E                  		move.w	($FFFFF72E).w,d0
000149F0 0640 00E0                  		addi.w	#$E0,d0
000149F4 B068 000C                  		cmp.w	$C(a0),d0
000149F8 6500 F51E                  		bcs.w	Jmp_KillSonic
000149FC 6100 FD6C                  		bsr.w	Sonic_Floor
00014A00 0828 0001 0022             		btst	#1,$22(a0)
00014A06 6600                       		bne.s	locret_13860
00014A08 7000                       		moveq	#0,d0
00014A0A 3140 0012                  		move.w	d0,$12(a0)
00014A0E 3140 0010                  		move.w	d0,$10(a0)
00014A12 3140 0014                  		move.w	d0,$14(a0)
00014A16 117C 0000 001C             		move.b	#0,$1C(a0)
00014A1C 5528 0024                  		subq.b	#2,$24(a0)
00014A20 317C 0078 0030             		move.w	#$78,$30(a0)
00014A26                            
00014A26                            locret_13860:
00014A26 4E75                       		rts	
00014A28                            ; End of function Sonic_HurtStop
00014A28                            
00014A28                            ; ===========================================================================
00014A28                            ; ---------------------------------------------------------------------------
00014A28                            ; Sonic	when he	dies
00014A28                            ; ---------------------------------------------------------------------------
00014A28                            
00014A28                            Obj01_Death:				; XREF: Obj01_Index
00014A28 6100 0000                  		bsr.w	GameOver
00014A2C 4EBA 965E                  		jsr	ObjectFall
00014A30 6100 EE6E                  		bsr.w	Sonic_RecordPos
00014A34 6100 0000                  		bsr.w	Sonic_Animate
00014A38 6100 0000                  		bsr.w	LoadSonicDynPLC
00014A3C 4EFA 96A0                  		jmp	DisplaySprite
00014A40                            
00014A40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014A40                            
00014A40                            
00014A40                            GameOver:				; XREF: Obj01_Death
00014A40 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014A44 0640 0100                  		addi.w	#$100,d0
00014A48 B068 000C                  		cmp.w	$C(a0),d0
00014A4C 6C00 0000                  		bge.w	locret_13900
00014A50 317C FFC8 0012             		move.w	#-$38,$12(a0)
00014A56 5428 0024                  		addq.b	#2,$24(a0)
00014A5A 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00014A5E 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00014A62 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00014A66 6600                       		bne.s	loc_138D4
00014A68 317C 0000 003A             		move.w	#0,$3A(a0)
00014A6E 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00014A74 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00014A7A 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00014A80 4238 FE1A                  		clr.b	($FFFFFE1A).w
00014A84                            
00014A84                            loc_138C2:
00014A84 303C 008F                  		move.w	#$8F,d0
00014A88 4EB9 0000 1470             		jsr	(PlaySound).l	; play game over music
00014A8E 7003                       		moveq	#3,d0
00014A90 4EF9 0000 16EA             		jmp	(LoadPLC).l	; load game over patterns
00014A96                            ; ===========================================================================
00014A96                            
00014A96                            loc_138D4:
00014A96 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00014A9C 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00014AA0 6700                       		beq.s	locret_13900	; if not, branch
00014AA2 317C 0000 003A             		move.w	#0,$3A(a0)
00014AA8 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00014AAE 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00014AB4 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00014ABA 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00014AC0 60C2                       		bra.s	loc_138C2
00014AC2                            ; ===========================================================================
00014AC2                            
00014AC2                            locret_13900:
00014AC2 4E75                       		rts	
00014AC4                            ; End of function GameOver
00014AC4                            
00014AC4                            ; ===========================================================================
00014AC4                            ; ---------------------------------------------------------------------------
00014AC4                            ; Sonic	when the level is restarted
00014AC4                            ; ---------------------------------------------------------------------------
00014AC4                            
00014AC4                            Obj01_ResetLevel:			; XREF: Obj01_Index
00014AC4 4A68 003A                  		tst.w	$3A(a0)
00014AC8 6700                       		beq.s	locret_13914
00014ACA 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00014ACE 6600                       		bne.s	locret_13914
00014AD0 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00014AD6                            
00014AD6                            locret_13914:
00014AD6 4E75                       		rts	
00014AD8                            
00014AD8                            ; ---------------------------------------------------------------------------
00014AD8                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00014AD8                            ; ---------------------------------------------------------------------------
00014AD8                            
00014AD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014AD8                            
00014AD8                            
00014AD8                            Sonic_Loops:				; XREF: Obj01_Control
00014AD8 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00014ADE 6700                       		beq.s	loc_13926	; if yes, branch
00014AE0 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00014AE4 6600 0000                  		bne.w	locret_139C2	; if not, branch
00014AE8                            
00014AE8                            loc_13926:
00014AE8 3028 000C                  		move.w	$C(a0),d0
00014AEC E248                       		lsr.w	#1,d0
00014AEE 0240 0380                  		andi.w	#$380,d0
00014AF2 1228 0008                  		move.b	8(a0),d1
00014AF6 0241 007F                  		andi.w	#$7F,d1
00014AFA D041                       		add.w	d1,d0
00014AFC 43F8 A400                  		lea	($FFFFA400).w,a1
00014B00 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00014B04 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00014B08 6700 F486                  		beq.w	Obj01_ChkRoll
00014B0C B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00014B10 6700 F47E                  		beq.w	Obj01_ChkRoll
00014B14 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00014B18 6700                       		beq.s	loc_13976
00014B1A B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00014B1E 6700                       		beq.s	loc_13966
00014B20 08A8 0006 0001             		bclr	#6,1(a0)
00014B26 4E75                       		rts	
00014B28                            ; ===========================================================================
00014B28                            
00014B28                            loc_13966:
00014B28 0828 0001 0022             		btst	#1,$22(a0)
00014B2E 6700                       		beq.s	loc_13976
00014B30 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014B36 4E75                       		rts	
00014B38                            ; ===========================================================================
00014B38                            
00014B38                            loc_13976:
00014B38 3428 0008                  		move.w	8(a0),d2
00014B3C 0C02 002C                  		cmpi.b	#$2C,d2
00014B40 6400                       		bcc.s	loc_13988
00014B42 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014B48 4E75                       		rts	
00014B4A                            ; ===========================================================================
00014B4A                            
00014B4A                            loc_13988:
00014B4A 0C02 00E0                  		cmpi.b	#-$20,d2
00014B4E 6500                       		bcs.s	loc_13996
00014B50 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014B56 4E75                       		rts	
00014B58                            ; ===========================================================================
00014B58                            
00014B58                            loc_13996:
00014B58 0828 0006 0001             		btst	#6,1(a0)
00014B5E 6600                       		bne.s	loc_139B2
00014B60 1228 0026                  		move.b	$26(a0),d1
00014B64 6700                       		beq.s	locret_139C2
00014B66 0C01 0080                  		cmpi.b	#-$80,d1
00014B6A 6200                       		bhi.s	locret_139C2
00014B6C 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014B72 4E75                       		rts	
00014B74                            ; ===========================================================================
00014B74                            
00014B74                            loc_139B2:
00014B74 1228 0026                  		move.b	$26(a0),d1
00014B78 0C01 0080                  		cmpi.b	#-$80,d1
00014B7C 6300                       		bls.s	locret_139C2
00014B7E 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014B84                            
00014B84                            locret_139C2:
00014B84 4E75                       		rts	
00014B86                            ; End of function Sonic_Loops
00014B86                            
00014B86                            ; ---------------------------------------------------------------------------
00014B86                            ; Sonic when he's drowning
00014B86                            ; ---------------------------------------------------------------------------
00014B86                             
00014B86                            ; ||||||||||||||| S	U B	R O	U T	I N	E |||||||||||||||||||||||||||||||||||||||
00014B86                             
00014B86                             
00014B86                            Sonic_Drowned:
00014B86 6100 9530                  		bsr.w   SpeedToPos		; Make Sonic able to move
00014B8A 0668 0010 0012             		addi.w  #$10,$12(a0)	; Apply gravity
00014B90 6100 ED0E                  		bsr.w   Sonic_RecordPos	; Record position
00014B94 6100                       		bsr.s   Sonic_Animate	; Animate Sonic
00014B96 6100 0000                  		bsr.w   LoadSonicDynPLC	; Load Sonic's DPLCs
00014B9A 6000 9542                  		bra.w   DisplaySprite	; And finally, display Sonic
00014B9E                            
00014B9E                            ; ---------------------------------------------------------------------------
00014B9E                            ; Subroutine to animate Sonic's sprites
00014B9E                            ; See also: AnimateSprite
00014B9E                            ; ---------------------------------------------------------------------------
00014B9E                            
00014B9E                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00014B9E                            
00014B9E                            ; loc_1B350:
00014B9E                            Sonic_Animate:
00014B9E 43F9 0000 0000             	lea	(SonicAniData).l,a1
00014BA4 4A38 FE19                  	tst.b	(Super_Sonic_flag).w
00014BA8 6700                       	beq.s	loc1
00014BAA 43F9 0000 0000             	lea	(SuperSonicAniData).l,a1
00014BB0                            loc1
00014BB0 7000                       	moveq	#0,d0
00014BB2 1028 001C                  	move.b	anim(a0),d0
00014BB6 B028 001D                  	cmp.b	next_anim(a0),d0	; has animation changed?
00014BBA 6700                       	beq.s	SAnim_Do		; if not, branch
00014BBC 1140 001D                  	move.b	d0,next_anim(a0)	; set to next animation
00014BC0 117C 0000 001B             	move.b	#0,anim_frame(a0)	; reset animation frame
00014BC6 117C 0000 001E             	move.b	#0,anim_frame_duration(a0)	; reset frame duration
00014BCC 08A8 0005 0022             	bclr	#5,status(a0)
00014BD2                            ; loc_1B384:
00014BD2                            SAnim_Do:
00014BD2 D040                       	add.w	d0,d0
00014BD4 D2F1 0000                  	adda.w	(a1,d0.w),a1	; calculate address of appropriate animation script
00014BD8 1011                       	move.b	(a1),d0
00014BDA 6B00                       	bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00014BDC 1228 0022                  	move.b	status(a0),d1
00014BE0 0201 0001                  	andi.b	#1,d1
00014BE4 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
00014BEA 8328 0001                  	or.b	d1,render_flags(a0)
00014BEE 5328 001E                  	subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame duration
00014BF2 6A00                       	bpl.s	SAnim_Delay			; if time remains, branch
00014BF4 1140 001E                  	move.b	d0,anim_frame_duration(a0)	; load frame duration
00014BF8                            ; loc_1B3AA:
00014BF8                            SAnim_Do2:
00014BF8 7200                       	moveq	#0,d1
00014BFA 1228 001B                  	move.b	anim_frame(a0),d1	; load current frame number
00014BFE 1031 1001                  	move.b	1(a1,d1.w),d0		; read sprite number from script
00014C02 0C00 00F0                  	cmpi.b	#$F0,d0
00014C06 6400                       	bcc.s	SAnim_End_FF		; if animation is complete, branch
00014C08                            ; loc_1B3BA:
00014C08                            SAnim_Next:
00014C08 1140 001A                  	move.b	d0,mapping_frame(a0)	; load sprite number
00014C0C 5228 001B                  	addq.b	#1,anim_frame(a0)	; go to next frame
00014C10                            ; return_1B3C2:
00014C10                            SAnim_Delay:
00014C10 4E75                       	rts
00014C12                            ; ===========================================================================
00014C12                            ; loc_1B3C4:
00014C12                            SAnim_End_FF:
00014C12 5200                       	addq.b	#1,d0		; is the end flag = $FF ?
00014C14 6600                       	bne.s	SAnim_End_FE	; if not, branch
00014C16 117C 0000 001B             	move.b	#0,anim_frame(a0)	; restart the animation
00014C1C 1029 0001                  	move.b	1(a1),d0	; read sprite number
00014C20 60E6                       	bra.s	SAnim_Next
00014C22                            ; ===========================================================================
00014C22                            ; loc_1B3D4:
00014C22                            SAnim_End_FE:
00014C22 5200                       	addq.b	#1,d0		; is the end flag = $FE ?
00014C24 6600                       	bne.s	SAnim_End_FD	; if not, branch
00014C26 1031 1002                  	move.b	2(a1,d1.w),d0	; read the next byte in the script
00014C2A 9128 001B                  	sub.b	d0,anim_frame(a0)	; jump back d0 bytes in the script
00014C2E 9200                       	sub.b	d0,d1
00014C30 1031 1001                  	move.b	1(a1,d1.w),d0	; read sprite number
00014C34 60D2                       	bra.s	SAnim_Next
00014C36                            ; ===========================================================================
00014C36                            ; loc_1B3E8:
00014C36                            SAnim_End_FD:
00014C36 5200                       	addq.b	#1,d0			; is the end flag = $FD ?
00014C38 6600                       	bne.s	SAnim_End		; if not, branch
00014C3A 1171 1002 001C             	move.b	2(a1,d1.w),anim(a0)	; read next byte, run that animation
00014C40                            ; return_1B3F2:
00014C40                            SAnim_End:
00014C40 4E75                       	rts
00014C42                            ; ===========================================================================
00014C42                            ; loc_1B3F4:
00014C42                            SAnim_WalkRun:
00014C42 5200                       	addq.b	#1,d0		; is the start flag = $FF ?
00014C44 6600 0000                  	bne.w	SAnim_Roll	; if not, branch
00014C48 7000                       	moveq	#0,d0		; is animation walking/running?
00014C4A 1028 0027                  	move.b	flip_angle(a0),d0	; if not, branch
00014C4E 6600 0000                  	bne.w	SAnim_Tumble
00014C52 7200                       	moveq	#0,d1
00014C54 1028 0026                  	move.b	angle(a0),d0	; get Sonic's angle
00014C58 6B00                       	bmi.s	loc2
00014C5A 6700                       	beq.s	loc2
00014C5C 5300                       	subq.b	#1,d0
00014C5E                            loc2
00014C5E 1428 0022                  	move.b	status(a0),d2
00014C62 0202 0001                  	andi.b	#1,d2		; is Sonic mirrored horizontally?
00014C66 6600                       	bne.s	loc3		; if yes, branch
00014C68 4600                       	not.b	d0		; reverse angle
00014C6A                            loc3
00014C6A 0600 0010                  	addi.b	#$10,d0		; add $10 to angle
00014C6E 6A00                       	bpl.s	loc4		; if angle is $0-$7F, branch
00014C70 7203                       	moveq	#3,d1
00014C72                            loc4
00014C72 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
00014C78 B302                       	eor.b	d1,d2
00014C7A 8528 0001                  	or.b	d2,render_flags(a0)
00014C7E 0828 0005 0022             	btst	#5,status(a0)
00014C84 6600 0000                  	bne.w	SAnim_Push
00014C88 E808                       	lsr.b	#4,d0		; divide angle by 16
00014C8A 0200 0006                  	andi.b	#6,d0		; angle must be 0, 2, 4 or 6
00014C8E 3428 0014                  	move.w	inertia(a0),d2	; get Sonic's "speed" for animation purposes
00014C92 6A00                       	bpl.s	loc5
00014C94 4442                       	neg.w	d2
00014C96                            loc5
00014C96 4A28 002B                  	tst.b	status_secondary(a0)
00014C9A 6A00 0000                  	bpl.w	loc6
00014C9E D442                       	add.w	d2,d2
00014CA0                            loc6
00014CA0 4A38 FE19                  	tst.b	(Super_Sonic_flag).w
00014CA4 6600                       	bne.s	SAnim_Super
00014CA6 43F9 0000 0000             	lea	(SonAni_Run).l,a1	; use running animation
00014CAC 0C42 0600                  	cmpi.w	#$600,d2		; is Sonic at running speed?
00014CB0 6400                       	bcc.s	loc7			; use running animation
00014CB2 43F9 0000 0000             	lea	(SonAni_Walk).l,a1	; if yes, branch
00014CB8 D000                       	add.b	d0,d0
00014CBA                            loc7
00014CBA D000                       	add.b	d0,d0
00014CBC 1600                       	move.b	d0,d3
00014CBE 7200                       	moveq	#0,d1
00014CC0 1228 001B                  	move.b	anim_frame(a0),d1
00014CC4 1031 1001                  	move.b	1(a1,d1.w),d0
00014CC8 0C00 00FF                  	cmpi.b	#-1,d0
00014CCC 6600                       	bne.s	loc8
00014CCE 117C 0000 001B             	move.b	#0,anim_frame(a0)
00014CD4 1029 0001                  	move.b	1(a1),d0
00014CD8                            loc8
00014CD8 1140 001A                  	move.b	d0,mapping_frame(a0)
00014CDC D728 001A                  	add.b	d3,mapping_frame(a0)
00014CE0 5328 001E                  	subq.b	#1,anim_frame_duration(a0)
00014CE4 6A00                       	bpl.s	return_1B4AC
00014CE6 4442                       	neg.w	d2
00014CE8 0642 0800                  	addi.w	#$800,d2
00014CEC 6A00                       	bpl.s	loc81
00014CEE 7400                       	moveq	#0,d2
00014CF0                            loc81
00014CF0 E04A                       	lsr.w	#8,d2
00014CF2 1142 001E                  	move.b	d2,anim_frame_duration(a0)	; modify frame duration
00014CF6 5228 001B                  	addq.b	#1,anim_frame(a0)		; modify frame number
00014CFA                            
00014CFA                            return_1B4AC:
00014CFA 4E75                       	rts
00014CFC                            ; ===========================================================================
00014CFC                            ; loc_1B4AE:
00014CFC                            SAnim_Super:
00014CFC 43F9 0000 0000             	lea	(SupSonAni_Run).l,a1	; use fast animation
00014D02 0C42 0800                  	cmpi.w	#$800,d2		; is Sonic moving fast?
00014D06 6400                       	bcc.s	SAnim_SuperRun		; if yes, branch
00014D08 43F9 0000 0000             	lea	(SupSonAni_Walk).l,a1	; use slower animation
00014D0E D000                       	add.b	d0,d0
00014D10 D000                       	add.b	d0,d0
00014D12 6000                       	bra.s	SAnim_SuperWalk
00014D14                            ; ---------------------------------------------------------------------------
00014D14                            ; loc_1B4C6:
00014D14                            SAnim_SuperRun:
00014D14 E208                       	lsr.b	#1,d0
00014D16                            ; loc_1B4C8:
00014D16                            SAnim_SuperWalk:
00014D16 1600                       	move.b	d0,d3
00014D18 7200                       	moveq	#0,d1
00014D1A 1228 001B                  	move.b	anim_frame(a0),d1
00014D1E 1031 1001                  	move.b	1(a1,d1.w),d0
00014D22 0C00 00FF                  	cmpi.b	#-1,d0
00014D26 6600                       	bne.s	loc9
00014D28 117C 0000 001B             	move.b	#0,anim_frame(a0)
00014D2E 1029 0001                  	move.b	1(a1),d0
00014D32                            loc9
00014D32 1140 001A                  	move.b	d0,mapping_frame(a0)
00014D36 D728 001A                  	add.b	d3,mapping_frame(a0)
00014D3A 1238 FE05                  	move.b	($FFFFFE05).w,d1
00014D3E 0201 0003                  	andi.b	#3,d1
00014D42 6600                       	bne.s	loc10
00014D44 0C28 00B5 001A             	cmpi.b	#-$4B,mapping_frame(a0)
00014D4A 6400                       	bcc.s	loc10
00014D4C 0628 0020 001A             	addi.b	#$20,mapping_frame(a0)
00014D52                            loc10
00014D52 5328 001E                  	subq.b	#1,anim_frame_duration(a0)
00014D56 6A00                       	bpl.s	return_1B51E
00014D58 4442                       	neg.w	d2
00014D5A 0642 0800                  	addi.w	#$800,d2
00014D5E 6A00                       	bpl.s	loc11
00014D60 7400                       	moveq	#0,d2
00014D62                            loc11
00014D62 E04A                       	lsr.w	#8,d2
00014D64 1142 001E                  	move.b	d2,anim_frame_duration(a0)
00014D68 5228 001B                  	addq.b	#1,anim_frame(a0)
00014D6C                            
00014D6C                            return_1B51E:
00014D6C 4E75                       	rts
00014D6E                            ; ===========================================================================
00014D6E                            ; loc_1B520:
00014D6E                            SAnim_Tumble:
00014D6E 1028 0027                  	move.b	flip_angle(a0),d0
00014D72 7200                       	moveq	#0,d1
00014D74 1428 0022                  	move.b	status(a0),d2
00014D78 0202 0001                  	andi.b	#1,d2
00014D7C 6600                       	bne.s	SAnim_Tumble_Left
00014D7E                            
00014D7E 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
00014D84 0600 000B                  	addi.b	#$B,d0
00014D88 80FC 0016                  	divu.w	#$16,d0
00014D8C 0600 005F                  	addi.b	#$5F,d0
00014D90 1140 001A                  	move.b	d0,mapping_frame(a0)
00014D94 117C 0000 001E             	move.b	#0,anim_frame_duration(a0)
00014D9A 4E75                       	rts
00014D9C                            ; ===========================================================================
00014D9C                            ; loc_1B54E:
00014D9C                            SAnim_Tumble_Left:
00014D9C 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
00014DA2 4A28 0029                  	tst.b	flip_turned(a0)
00014DA6 6700                       	beq.s	loc_1B566
00014DA8 0028 0001 0001             	ori.b	#1,render_flags(a0)
00014DAE 0600 000B                  	addi.b	#$B,d0
00014DB2 6000                       	bra.s	loc_1B572
00014DB4                            ; ===========================================================================
00014DB4                            
00014DB4                            loc_1B566:
00014DB4 0028 0003 0001             	ori.b	#3,render_flags(a0)
00014DBA 4400                       	neg.b	d0
00014DBC 0600 008F                  	addi.b	#$8F,d0
00014DC0                            
00014DC0                            loc_1B572:
00014DC0 80FC 0016                  	divu.w	#$16,d0
00014DC4 0600 005F                  	addi.b	#$5F,d0
00014DC8 1140 001A                  	move.b	d0,mapping_frame(a0)
00014DCC 117C 0000 001E             	move.b	#0,anim_frame_duration(a0)
00014DD2 4E75                       	rts
00014DD4                            ; ===========================================================================
00014DD4                            ; loc_1B586:
00014DD4                            SAnim_Roll:
00014DD4 5328 001E                  	subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame duration
00014DD8 6A00 FE36                  	bpl.w	SAnim_Delay			; if time remains, branch
00014DDC 5200                       	addq.b	#1,d0		; is the start flag = $FE ?
00014DDE 6600                       	bne.s	SAnim_Push	; if not, branch
00014DE0 3428 0014                  	move.w	inertia(a0),d2
00014DE4 6A00                       	bpl.s	loc12
00014DE6 4442                       	neg.w	d2
00014DE8                            loc12
00014DE8 43F9 0000 0000             	lea	(SonAni_Roll2).l,a1
00014DEE 0C42 0600                  	cmpi.w	#$600,d2
00014DF2 6400                       	bcc.s	loc14
00014DF4 43F9 0000 0000             	lea	(SonAni_Roll).l,a1
00014DFA                            loc14
00014DFA 4442                       	neg.w	d2
00014DFC 0642 0400                  	addi.w	#$400,d2
00014E00 6A00                       	bpl.s	loc15
00014E02 7400                       	moveq	#0,d2
00014E04                            loc15
00014E04 E04A                       	lsr.w	#8,d2
00014E06 1142 001E                  	move.b	d2,anim_frame_duration(a0)
00014E0A 1228 0022                  	move.b	status(a0),d1
00014E0E 0201 0001                  	andi.b	#1,d1
00014E12 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
00014E18 8328 0001                  	or.b	d1,render_flags(a0)
00014E1C 6000 FDDA                  	bra.w	SAnim_Do2
00014E20                            ; ===========================================================================
00014E20                            
00014E20                            SAnim_Push:
00014E20 5328 001E                  	subq.b	#1,anim_frame_duration(a0)	; subtract 1 from frame duration
00014E24 6A00 FDEA                  	bpl.w	SAnim_Delay			; if time remains, branch
00014E28 3428 0014                  	move.w	inertia(a0),d2
00014E2C 6B00                       	bmi.s	loc16
00014E2E 4442                       	neg.w	d2
00014E30                            loc16
00014E30 0642 0800                  	addi.w	#$800,d2
00014E34 6A00                       	bpl.s	loc17
00014E36 7400                       	moveq	#0,d2
00014E38                            loc17
00014E38 EC4A                       	lsr.w	#6,d2
00014E3A 1142 001E                  	move.b	d2,anim_frame_duration(a0)
00014E3E 43F9 0000 0000             	lea	(SonAni_Push).l,a1
00014E44 4A38 FE19                  	tst.b	(Super_Sonic_flag).w
00014E48 6700                       	beq.s	loc18
00014E4A 43F9 0000 0000             	lea	(SupSonAni_Push).l,a1
00014E50                            loc18
00014E50 1228 0022                  	move.b	status(a0),d1
00014E54 0201 0001                  	andi.b	#1,d1
00014E58 0228 00FC 0001             	andi.b	#$FC,render_flags(a0)
00014E5E 8328 0001                  	or.b	d1,render_flags(a0)
00014E62 6000 FD94                  	bra.w	SAnim_Do2
00014E66                            ; ===========================================================================
00014E66                            
00014E66                            ; ---------------------------------------------------------------------------
00014E66                            ; Animation script - Sonic
00014E66                            ; ---------------------------------------------------------------------------
00014E66                            ; off_1B618:
00014E66                            SonicAniData:
00014E66                            	include "_anim\Sonic.asm"
00014E66                            ; ---------------------------------------------------------------------------
00014E66                            ; Animation script - Sonic
00014E66                            ; ---------------------------------------------------------------------------
00014E66 0000                       		dc.w SonAni_Walk-SonicAniData	; 0
00014E68 0000                       		dc.w SonAni_Run-SonicAniData	; 1
00014E6A 0000                       		dc.w SonAni_Roll-SonicAniData	; 2
00014E6C 0000                       		dc.w SonAni_Roll2-SonicAniData	; 3
00014E6E 0000                       		dc.w SonAni_Push-SonicAniData	; 4
00014E70 0000                       		dc.w SonAni_Wait-SonicAniData	; 5
00014E72 0000                       		dc.w SonAni_Balance-SonicAniData	; 6
00014E74 0000                       		dc.w SonAni_LookUp-SonicAniData	; 7
00014E76 0000                       		dc.w SonAni_Duck-SonicAniData	; 8
00014E78 0000                       		dc.w SonAni_Warp1-SonicAniData	; 9
00014E7A 0000                       		dc.w SonAni_Warp2-SonicAniData	; A
00014E7C 0000                       		dc.w SonAni_Warp3-SonicAniData	; B
00014E7E 0000                       		dc.w SonAni_Warp4-SonicAniData	; C
00014E80 0000                       		dc.w SonAni_Stop-SonicAniData	; D
00014E82 0000                       		dc.w SonAni_Float1-SonicAniData	; E
00014E84 0000                       		dc.w SonAni_Float2-SonicAniData	; F
00014E86 0000                       		dc.w SonAni_Spring-SonicAniData	; 10
00014E88 0000                       		dc.w SonAni_LZHang-SonicAniData	; 11
00014E8A 0000                       		dc.w SonAni_Leap1-SonicAniData	; 12
00014E8C 0000                       		dc.w SonAni_Leap2-SonicAniData	; 13
00014E8E 0000                       		dc.w SonAni_Surf-SonicAniData	; 14
00014E90 0000                       		dc.w SonAni_Bubble-SonicAniData	; 15
00014E92 0000                       		dc.w SonAni_Death-SonicAniData	; 16
00014E94 0000                       		dc.w SonAni_Drown-SonicAniData	; 17
00014E96 0000                       		dc.w SonAni_Hurt-SonicAniData	; 18
00014E98 0000                       		dc.w SonAni_LZSlide-SonicAniData	; 19
00014E9A 0000                       		dc.w SonAni_Blank-SonicAniData	; 1A
00014E9C 0000                       		dc.w SonAni_Float3-SonicAniData	; 1B
00014E9E 0000                       		dc.w SonAni_Float4-SonicAniData	; 1C
00014EA0 0000                       		dc.w SonAni_Spindash-SonicAniData	; 1D
00014EA2 0000                       		dc.w SonAni_Blink-SonicAniData	; 1E
00014EA4 0000                       		dc.w SonAni_GetUp-SonicAniData	; 1F
00014EA6 0000                       		dc.w SonAni_Balance2-SonicAniData	; 20
00014EA8 0000                       		dc.w SonAni_Hang-SonicAniData		; 2A
00014EAA 0000                       		dc.w SonAni_Dash2-SonicAniData	; 2B
00014EAC 0000                       		dc.w SonAni_Dash3-SonicAniData	; 2C
00014EAE 0000                       		dc.w SonAni_Hang2-SonicAniData	; 2D
00014EB0 0000                       		dc.w SonAni_DeathBW-SonicAniData	; 2E	
00014EB2 0000                       		dc.w SonAni_Balance3-SonicAniData	; 2F
00014EB4 0000                       		dc.w SonAni_Balance4-SonicAniData	; 30		
00014EB6 0000                       		dc.w SonAni_Lying-SonicAniData	; 31
00014EB8 0000                       		dc.w SonAni_LieDown-SonicAniData	; 32
00014EBA FF0F 1011 1213 140D 0EFF   SonAni_Walk:	dc.b $FF, $F,$10,$11,$12,$13,$14, $D, $E,$FF
00014EC4 FF2D 2E2F 30FF FFFF FFFF   SonAni_Run:	dc.b $FF,$2D,$2E,$2F,$30,$FF,$FF,$FF,$FF,$FF
00014ECE FE3D 413E 413F 4140 41FF   SonAni_Roll:	dc.b $FE,$3D,$41,$3E,$41,$3F,$41,$40,$41,$FF
00014ED8 FE3D 413E 413F 4140 41FF   SonAni_Roll2:	dc.b $FE,$3D,$41,$3E,$41,$3F,$41,$40,$41,$FF
00014EE2 FD48 494A 4BFF FFFF FFFF   SonAni_Push:	dc.b $FD,$48,$49,$4A,$4B,$FF,$FF,$FF,$FF,$FF
00014EEC                            SonAni_Wait:
00014EEC 0501 0101 0101 0101 0101+  	dc.b   5,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1
00014EFC 0101 0101 0101 0101 0101+  	dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2
00014F0C 0303 0303 0304 0404 0505+  	dc.b   3,  3,  3,  3,  3,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5
00014F1C 0504 0404 0505 0504 0404+  	dc.b   5,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5,  5,  6,  6,  6
00014F2C 0606 0606 0606 0604 0404+  	dc.b   6,  6,  6,  6,  6,  6,  6,  4,  4,  4,  5,  5,  5,  4,  4,  4
00014F3C 0505 0504 0404 0505 0504+  	dc.b   5,  5,  5,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5,  5,  6
00014F4C 0606 0606 0606 0606 0604+  	dc.b   6,  6,  6,  6,  6,  6,  6,  6,  6,  4,  4,  4,  5,  5,  5,  4
00014F5C 0404 0505 0504 0404 0505+  	dc.b   4,  4,  5,  5,  5,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5
00014F6C 0506 0606 0606 0606 0606+  	dc.b   5,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  4,  4,  4,  5,  5
00014F7C 0504 0404 0505 0504 0404+  	dc.b   5,  4,  4,  4,  5,  5,  5,  4,  4,  4,  5,  5,  5,  4,  4,  4
00014F8C 0505 0506 0606 0606 0606+  	dc.b   5,  5,  5,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  7,  8,  8
00014F9C 0809 0909 FE06             	dc.b   8,  9,  9,  9,$FE,  6
00014FA2 09CC CDCE CDFF             SonAni_Balance:	dc.b   9,$CC,$CD,$CE,$CD,$FF
00014FA8 050B 0CFE 01               SonAni_LookUp:	dc.b   5, $B, $C,$FE,  1
00014FAD 054C 4DFE 01               SonAni_Duck:	dc.b   5,$4C,$4D,$FE,  1
00014FB2 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00014FB6 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00014FBA 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00014FBE 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
00014FC2 0102 FD00                  SonAni_Blink:	dc.b   1,  2,$FD,  0
00014FC6 030A FD00                  SonAni_GetUp:	dc.b   3, $A,$FD,  0
00014FCA 03C8 C9CA CBFF             SonAni_Balance2:    dc.b   3,$C8,$C9,$CA,$CB,$FF
00014FD0 05D2 D3D4 D5FD 00          SonAni_Stop:	dc.b   5,$D2,$D3,$D4,$D5,$FD,  0 ; halt/skidding animation
00014FD7 0754 59FF                  SonAni_Float1:	dc.b   7,$54,$59,$FF
00014FDB 0754 5556 5758 FF          SonAni_Float2:	dc.b   7,$54,$55,$56,$57,$58,$FF
00014FE2 2F5B FD00                  SonAni_Spring:	dc.b $2F,$5B,$FD,  0
00014FE6 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
00014FEA 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00014FF0 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
00014FF6 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00014FFA 0B5A 5A11 12FD 00          SonAni_Bubble:	dc.b  $B,$5A,$5A,$11,$12,$FD,  0 ; breathe
00015001 205D FF                    SonAni_Drown:	dc.b $20,$5D,$FF
00015004 205C FF                    SonAni_Death:	dc.b $20,$5C,$FF
00015007 404E FF                    SonAni_Hurt:	dc.b $40,$4E,$FF
0001500A 094E 4FFF                  SonAni_LZSlide:	dc.b   9,$4E,$4F,$FF
0001500E 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
00015012 0042 4342 4442 4542 4642+  SonAni_Spindash: dc.b   0,$42,$43,$42,$44,$42,$45,$42,$46,$42,$47,$FF
0001501E 0150 51FF                  SonAni_Hang:	dc.b   1,$50,$51,$FF
00015022 0F43 4343 FE01             SonAni_Dash2:	dc.b  $F,$43,$43,$43,$FE,  1
00015028 0F43 44FE 01               SonAni_Dash3:	dc.b  $F,$43,$44,$FE,  1
0001502D 136B 6CFF                  SonAni_Hang2:	dc.b $13,$6B,$6C,$FF
00015031 205E FF                    SonAni_DeathBW:	dc.b $20,$5E,$FF
00015034 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
0001503C 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
00015040 13D0 D1FF                  SonAni_Balance3:dc.b $13,$D0,$D1,$FF
00015044 03CF C8C9 CACB FE04        SonAni_Balance4:dc.b   3,$CF,$C8,$C9,$CA,$CB,$FE,  4
0001504C 0908 09FF                  SonAni_Lying:	dc.b   9,  8,  9,$FF
00015050 0307 FD00                  SonAni_LieDown:	dc.b   3,  7,$FD,  0
00015054                            		even
00015054                            ; ---------------------------------------------------------------------------
00015054                            ; Animation script - Super Sonic
00015054                            ; (many of these point to the data above this)
00015054                            ; ---------------------------------------------------------------------------
00015054                            SuperSonicAniData:
00015054 0000                       	dc.w SupSonAni_Walk-SuperSonicAniData		; 0
00015056 0000                       	dc.w SupSonAni_Run-SuperSonicAniData          ; 1
00015058 FE7A                       	dc.w SonAni_Roll-SuperSonicAniData            ; 2
0001505A FE84                       	dc.w SonAni_Roll2-SuperSonicAniData           ; 3
0001505C 0000                       	dc.w SupSonAni_Push-SuperSonicAniData         ; 4
0001505E 0000                       	dc.w SupSonAni_Stand-SuperSonicAniData        ; 5
00015060 0000                       	dc.w SupSonAni_Balance-SuperSonicAniData      ; 6
00015062 FF54                       	dc.w SonAni_LookUp-SuperSonicAniData          ; 7
00015064 0000                       	dc.w SupSonAni_Duck-SuperSonicAniData         ; 8
00015066 FFBE                       	dc.w SonAni_Spindash-SuperSonicAniData        ; 9
00015068 FF6E                       	dc.w SonAni_Blink-SuperSonicAniData           ; 10 ; $A
0001506A FF72                       	dc.w SonAni_GetUp-SuperSonicAniData           ; 11 ; $B
0001506C FF76                       	dc.w SonAni_Balance2-SuperSonicAniData        ; 12 ; $C
0001506E FF7C                       	dc.w SonAni_Stop-SuperSonicAniData            ; 13 ; $D
00015070 FF83                       	dc.w SonAni_Float1-SuperSonicAniData           ; 14 ; $E
00015072 FF87                       	dc.w SonAni_Float2-SuperSonicAniData          ; 15 ; $F
00015074 FF8E                       	dc.w SonAni_Spring-SuperSonicAniData          ; 16 ; $10
00015076 FFCA                       	dc.w SonAni_Hang-SuperSonicAniData            ; 17 ; $11
00015078 FFCE                       	dc.w SonAni_Dash2-SuperSonicAniData           ; 18 ; $12
0001507A FFD4                       	dc.w SonAni_Dash3-SuperSonicAniData           ; 19 ; $13
0001507C FFD9                       	dc.w SonAni_Hang2-SuperSonicAniData           ; 20 ; $14
0001507E FFA6                       	dc.w SonAni_Bubble-SuperSonicAniData          ; 21 ; $15
00015080 FFDD                       	dc.w SonAni_DeathBW-SuperSonicAniData         ; 22 ; $16
00015082 FFAD                       	dc.w SonAni_Drown-SuperSonicAniData           ; 23 ; $17
00015084 FFB0                       	dc.w SonAni_Death-SuperSonicAniData           ; 24 ; $18
00015086 FFB3                       	dc.w SonAni_Hurt-SuperSonicAniData            ; 25 ; $19
00015088 FFB3                       	dc.w SonAni_Hurt-SuperSonicAniData            ; 26 ; $1A
0001508A FFB6                       	dc.w SonAni_LZSlide-SuperSonicAniData           ; 27 ; $1B
0001508C FFBA                       	dc.w SonAni_Blank-SuperSonicAniData           ; 28 ; $1C
0001508E FFEC                       	dc.w SonAni_Balance3-SuperSonicAniData        ; 29 ; $1D
00015090 FFF0                       	dc.w SonAni_Balance4-SuperSonicAniData        ; 30 ; $1E
00015092 0000                       	dc.w SupSonAni_Transform-SuperSonicAniData    ; 31 ; $1F
00015094                            
00015094 FF77 7879 7A7B 7C75 76FF   SupSonAni_Walk:		dc.b $FF,$77,$78,$79,$7A,$7B,$7C,$75,$76,$FF
0001509E FFB5 B9FF FFFF FFFF FFFF   SupSonAni_Run:		dc.b $FF,$B5,$B9,$FF,$FF,$FF,$FF,$FF,$FF,$FF
000150A8 FDBD BEBF C0FF FFFF FFFF   SupSonAni_Push:		dc.b $FD,$BD,$BE,$BF,$C0,$FF,$FF,$FF,$FF,$FF
000150B2 0772 7374 73FF             SupSonAni_Stand:	dc.b   7,$72,$73,$74,$73,$FF
000150B8 09C2 C3C4 C3C5 C6C7 C6FF   SupSonAni_Balance:	dc.b   9,$C2,$C3,$C4,$C3,$C5,$C6,$C7,$C6,$FF
000150C2 05C1 FF                    SupSonAni_Duck:		dc.b   5,$C1,$FF
000150C5 026D 6D6E 6E6F 7071 7071+  SupSonAni_Transform:	dc.b   2,$6D,$6D,$6E,$6E,$6F,$70,$71,$70,$71,$70,$71,$70,$71,$FD,  0
000150D6 00                         	even		
000150D6 00                         	even		
000150D6                            
000150D6                            
000150D6                            ; ---------------------------------------------------------------------------
000150D6                            ; Sonic	pattern	loading	subroutine
000150D6                            ; ---------------------------------------------------------------------------
000150D6                            
000150D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150D6                            
000150D6                            
000150D6                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
000150D6 7000                       		moveq	#0,d0
000150D8 1028 001A                  		move.b	$1A(a0),d0	; load frame number
000150DC B038 F766                  		cmp.b	($FFFFF766).w,d0
000150E0 6700                       		beq.s	locret_13C96
000150E2 11C0 F766                  		move.b	d0,($FFFFF766).w
000150E6 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
000150EC D040                       		add.w	d0,d0
000150EE D4F2 0000                  		adda.w	(a2,d0.w),a2
000150F2 7A00                       		moveq	#0,d5
000150F4 1A1A                       		move.b	(a2)+,d5
000150F6 5345                       		subq.w	#1,d5
000150F8 6B00                       		bmi.s	locret_13C96
000150FA 383C F000                  		move.w	#$F000,d4
000150FE 2C3C 0000 0000             		move.l	#Art_Sonic,d6
00015104                            
00015104                            SPLC_ReadEntry:
00015104 7200                       		moveq	#0,d1
00015106 121A                       		move.b	(a2)+,d1
00015108 E149                       		lsl.w	#8,d1
0001510A 121A                       		move.b	(a2)+,d1
0001510C 3601                       		move.w	d1,d3
0001510E E04B                       		lsr.w	#8,d3
00015110 0243 00F0                  		andi.w	#$F0,d3
00015114 0643 0010                  		addi.w	#$10,d3
00015118 0241 0FFF                  		andi.w	#$FFF,d1
0001511C EB89                       		lsl.l	#5,d1
0001511E D286                       		add.l	d6,d1
00015120 3404                       		move.w	d4,d2
00015122 D843                       		add.w	d3,d4
00015124 D843                       		add.w	d3,d4
00015126 4EB9 0000 151A             		jsr	(QueueDMATransfer).l
0001512C 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
00015130                            
00015130                            locret_13C96:
00015130 4E75                       		rts	
00015132                            ; End of function LoadSonicDynPLC
00015132                            
00015132                            ; ===========================================================================
00015132                            ; ---------------------------------------------------------------------------
00015132                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00015132                            ; ---------------------------------------------------------------------------
00015132                            
00015132                            Obj0A:					; XREF: Obj_Index
00015132 7000                       		moveq	#0,d0
00015134 1028 0024                  		move.b	$24(a0),d0
00015138 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
0001513C 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00015140                            ; ===========================================================================
00015140 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00015144 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00015148 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
0001514C 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00015150 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00015152                            ; ===========================================================================
00015152                            
00015152                            Obj0A_Main:				; XREF: Obj0A_Index
00015152 5428 0024                  		addq.b	#2,$24(a0)
00015156 217C 0001 34AA 0004        		move.l	#Map_obj64,4(a0)
0001515E 317C 8348 0002             		move.w	#$8348,2(a0)
00015164 117C 0084 0001             		move.b	#$84,1(a0)
0001516A 117C 0010 0019             		move.b	#$10,$19(a0)
00015170 117C 0001 0018             		move.b	#1,$18(a0)
00015176 1028 0028                  		move.b	$28(a0),d0
0001517A 6A00                       		bpl.s	loc_13D00
0001517C 5028 0024                  		addq.b	#8,$24(a0)
00015180 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00015188 317C 0440 0002             		move.w	#$440,2(a0)
0001518E 0240 007F                  		andi.w	#$7F,d0
00015192 1140 0033                  		move.b	d0,$33(a0)
00015196 6000 0000                  		bra.w	Obj0A_Countdown
0001519A                            ; ===========================================================================
0001519A                            
0001519A                            loc_13D00:
0001519A 1140 001C                  		move.b	d0,$1C(a0)
0001519E 3168 0008 0030             		move.w	8(a0),$30(a0)
000151A4 317C FF78 0012             		move.w	#-$88,$12(a0)
000151AA                            
000151AA                            Obj0A_Animate:				; XREF: Obj0A_Index
000151AA 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000151B0 4EB9 0000 B1F0             		jsr	AnimateSprite
000151B6                            
000151B6                            Obj0A_ChkWater:				; XREF: Obj0A_Index
000151B6 3038 F646                  		move.w	($FFFFF646).w,d0
000151BA B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
000151BE 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
000151C0 117C 0006 0024             		move.b	#6,$24(a0)
000151C6 5E28 001C                  		addq.b	#7,$1C(a0)
000151CA 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
000151D0 6700                       		beq.s	Obj0A_Display
000151D2 6000                       		bra.s	Obj0A_Display
000151D4                            ; ===========================================================================
000151D4                            
000151D4                            Obj0A_Wobble:
000151D4 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000151D8 6700                       		beq.s	loc_13D44
000151DA 5868 0030                  		addq.w	#4,$30(a0)
000151DE                            
000151DE                            loc_13D44:
000151DE 1028 0026                  		move.b	$26(a0),d0
000151E2 5228 0026                  		addq.b	#1,$26(a0)
000151E6 0240 007F                  		andi.w	#$7F,d0
000151EA 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
000151F0 1031 0000                  		move.b	(a1,d0.w),d0
000151F4 4880                       		ext.w	d0
000151F6 D068 0030                  		add.w	$30(a0),d0
000151FA 3140 0008                  		move.w	d0,8(a0)
000151FE 6100                       		bsr.s	Obj0A_ShowNumber
00015200 4EBA 8EB6                  		jsr	SpeedToPos
00015204 4A28 0001                  		tst.b	1(a0)
00015208 6A00                       		bpl.s	Obj0A_Delete
0001520A 4EFA 8ED2                  		jmp	DisplaySprite
0001520E                            ; ===========================================================================
0001520E                            
0001520E                            Obj0A_Delete:
0001520E 4EFA 8F0A                  		jmp	DeleteObject
00015212                            ; ===========================================================================
00015212                            
00015212                            Obj0A_Display:				; XREF: Obj0A_Index
00015212 6100                       		bsr.s	Obj0A_ShowNumber
00015214 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001521A 4EB9 0000 B1F0             		jsr	AnimateSprite
00015220 4EFA 8EBC                  		jmp	DisplaySprite
00015224                            ; ===========================================================================
00015224                            
00015224                            Obj0A_Delete2:				; XREF: Obj0A_Index
00015224 4EFA 8EF4                  		jmp	DeleteObject
00015228                            ; ===========================================================================
00015228                            
00015228                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00015228 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
0001522E 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00015230 5368 0038                  		subq.w	#1,$38(a0)
00015234 6600                       		bne.s	Obj0A_Display2
00015236 117C 000E 0024             		move.b	#$E,$24(a0)
0001523C 5E28 001C                  		addq.b	#7,$1C(a0)
00015240 60D0                       		bra.s	Obj0A_Display
00015242                            ; ===========================================================================
00015242                            
00015242                            Obj0A_Display2:
00015242 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015248 4EB9 0000 B1F0             		jsr	AnimateSprite
0001524E 4A28 0001                  		tst.b	1(a0)
00015252 6A00                       		bpl.s	Obj0A_Delete3
00015254 4EFA 8E88                  		jmp	DisplaySprite
00015258                            ; ===========================================================================
00015258                            
00015258                            Obj0A_Delete3:
00015258 4EFA 8EC0                  		jmp	DeleteObject
0001525C                            ; ===========================================================================
0001525C                            
0001525C                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
0001525C 4A68 0038                  		tst.w	$38(a0)
00015260 6700                       		beq.s	locret_13E1A
00015262 5368 0038                  		subq.w	#1,$38(a0)
00015266 6600                       		bne.s	locret_13E1A
00015268 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
0001526E 6400                       		bcc.s	locret_13E1A
00015270 317C 000F 0038             		move.w	#$F,$38(a0)
00015276 4268 0012                  		clr.w	$12(a0)
0001527A 117C 0080 0001             		move.b	#$80,1(a0)
00015280 3028 0008                  		move.w	8(a0),d0
00015284 9078 F700                  		sub.w	($FFFFF700).w,d0
00015288 0640 0080                  		addi.w	#$80,d0
0001528C 3140 0008                  		move.w	d0,8(a0)
00015290 3028 000C                  		move.w	$C(a0),d0
00015294 9078 F704                  		sub.w	($FFFFF704).w,d0
00015298 0640 0080                  		addi.w	#$80,d0
0001529C 3140 000A                  		move.w	d0,$A(a0)
000152A0 117C 000C 0024             		move.b	#$C,$24(a0)
000152A6                            
000152A6                            locret_13E1A:
000152A6 4E75                       		rts	
000152A8                            ; ===========================================================================
000152A8                            Obj0A_WobbleData:
000152A8 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
000152B9 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
000152CA 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
000152DB 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
000152EB FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
000152F8 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015305 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015312 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
0001531F FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00015328                            ; ===========================================================================
00015328                            
00015328                            Obj0A_Countdown:			; XREF: Obj0A_Index
00015328 4A68 002C                  		tst.w	$2C(a0)
0001532C 6600 0000                  		bne.w	loc_13F86
00015330 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00015336 6400 0000                  		bcc.w	locret_1408C
0001533A 0838 0006 D022             		btst	#6,($FFFFD022).w
00015340 6700 0000                  		beq.w	locret_1408C
00015344 5368 0038                  		subq.w	#1,$38(a0)
00015348 6A00 0000                  		bpl.w	loc_13FAC
0001534C 317C 003B 0038             		move.w	#59,$38(a0)
00015352 317C 0001 0036             		move.w	#1,$36(a0)
00015358 4EB9 0000 33AE             		jsr	(RandomNumber).l
0001535E 0240 0001                  		andi.w	#1,d0
00015362 1140 0034                  		move.b	d0,$34(a0)
00015366 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
0001536A 0C40 0019                  		cmpi.w	#$19,d0
0001536E 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00015370 0C40 0014                  		cmpi.w	#$14,d0
00015374 6700                       		beq.s	Obj0A_WarnSound
00015376 0C40 000F                  		cmpi.w	#$F,d0
0001537A 6700                       		beq.s	Obj0A_WarnSound
0001537C 0C40 000C                  		cmpi.w	#$C,d0
00015380 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00015382 6600                       		bne.s	loc_13F02
00015384 303C 0092                  		move.w	#$92,d0
00015388 4EB9 0000 1470             		jsr	(PlaySound).l	; play countdown music
0001538E                            
0001538E                            loc_13F02:
0001538E 5328 0032                  		subq.b	#1,$32(a0)
00015392 6A00                       		bpl.s	Obj0A_ReduceAir
00015394 1168 0033 0032             		move.b	$33(a0),$32(a0)
0001539A 08E8 0007 0036             		bset	#7,$36(a0)
000153A0 6000                       		bra.s	Obj0A_ReduceAir
000153A2                            ; ===========================================================================
000153A2                            
000153A2                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
000153A2 303C 00C2                  		move.w	#$C2,d0
000153A6 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
000153AC                            
000153AC                            Obj0A_ReduceAir:
000153AC 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
000153B0 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
000153B4 6100 0000                  		bsr.w	ResumeMusic
000153B8 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000153BE 303C 00B2                  		move.w	#$B2,d0
000153C2 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play drowning sound
000153C8 117C 000A 0034             		move.b	#$A,$34(a0)
000153CE 317C 0001 0036             		move.w	#1,$36(a0)
000153D4 317C 0078 002C             		move.w	#$78,$2C(a0)
000153DA 2F08                       		move.l	a0,-(sp)
000153DC 41F8 D000                  		lea	($FFFFD000).w,a0
000153E0 6100 F584                  		bsr.w	Sonic_ResetOnFloor
000153E4 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
000153EA 08E8 0001 0022             		bset	#1,$22(a0)
000153F0 08E8 0007 0002             		bset	#7,2(a0)
000153F6 317C 0000 0012             		move.w	#0,$12(a0)
000153FC 317C 0000 0010             		move.w	#0,$10(a0)
00015402 317C 0000 0014             		move.w	#0,$14(a0)
00015408 117C 000A 0024             		move.b	#$A,$24(a0)		; Force the character to drown
0001540E 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00015414 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w	; Stop the timer immediately
0001541A 205F                       		movea.l	(sp)+,a0
0001541C 4E75                       		rts
0001541E                            ; ===========================================================================
0001541E                            
0001541E                            loc_13F86:
0001541E 5368 002C                  		subq.w	#1,$2C(a0)
00015422 6600                       		bne.s	loc_13FAC	; Make it jump straight to this location
00015424 11FC 0006 D024             		move.b	#6,($FFFFD000+$24).w
0001542A 4E75                       		rts
0001542C                            ; ===========================================================================
0001542C                            
0001542C                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
0001542C 6000                       		bra.s	Obj0A_MakeItem
0001542E                            ; ===========================================================================
0001542E                            
0001542E                            loc_13FAC:
0001542E 4A68 0036                  		tst.w	$36(a0)
00015432 6700 0000                  		beq.w	locret_1408C
00015436 5368 003A                  		subq.w	#1,$3A(a0)
0001543A 6A00 0000                  		bpl.w	locret_1408C
0001543E                            
0001543E                            Obj0A_MakeItem:
0001543E 4EB9 0000 33AE             		jsr	(RandomNumber).l
00015444 0240 000F                  		andi.w	#$F,d0
00015448 3140 003A                  		move.w	d0,$3A(a0)
0001544C 4EBA 9126                  		jsr	SingleObjLoad
00015450 6600 0000                  		bne.w	locret_1408C
00015454 12BC 000A                  		move.b	#$A,0(a1)	; load object
00015458 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
0001545E 7006                       		moveq	#6,d0
00015460 0838 0000 D022             		btst	#0,($FFFFD022).w
00015466 6700                       		beq.s	loc_13FF2
00015468 4440                       		neg.w	d0
0001546A 137C 0040 0026             		move.b	#$40,$26(a1)
00015470                            
00015470                            loc_13FF2:
00015470 D169 0008                  		add.w	d0,8(a1)
00015474 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
0001547A 137C 0006 0028             		move.b	#6,$28(a1)
00015480 4A68 002C                  		tst.w	$2C(a0)
00015484 6700 0000                  		beq.w	loc_1403E
00015488 0268 0007 003A             		andi.w	#7,$3A(a0)
0001548E 0668 0000 003A             		addi.w	#0,$3A(a0)
00015494 3038 D00C                  		move.w	($FFFFD00C).w,d0
00015498 0440 000C                  		subi.w	#$C,d0
0001549C 3340 000C                  		move.w	d0,$C(a1)
000154A0 4EB9 0000 33AE             		jsr	(RandomNumber).l
000154A6 1340 0026                  		move.b	d0,$26(a1)
000154AA 3038 FE04                  		move.w	($FFFFFE04).w,d0
000154AE 0200 0003                  		andi.b	#3,d0
000154B2 6600                       		bne.s	loc_14082
000154B4 137C 000E 0028             		move.b	#$E,$28(a1)
000154BA 6000                       		bra.s	loc_14082
000154BC                            ; ===========================================================================
000154BC                            
000154BC                            loc_1403E:
000154BC 0828 0007 0036             		btst	#7,$36(a0)
000154C2 6700                       		beq.s	loc_14082
000154C4 3438 FE14                  		move.w	($FFFFFE14).w,d2
000154C8 E24A                       		lsr.w	#1,d2
000154CA 4EB9 0000 33AE             		jsr	(RandomNumber).l
000154D0 0240 0003                  		andi.w	#3,d0
000154D4 6600                       		bne.s	loc_1406A
000154D6 08E8 0006 0036             		bset	#6,$36(a0)
000154DC 6600                       		bne.s	loc_14082
000154DE 1342 0028                  		move.b	d2,$28(a1)
000154E2 337C 001C 0038             		move.w	#$1C,$38(a1)
000154E8                            
000154E8                            loc_1406A:
000154E8 4A28 0034                  		tst.b	$34(a0)
000154EC 6600                       		bne.s	loc_14082
000154EE 08E8 0006 0036             		bset	#6,$36(a0)
000154F4 6600                       		bne.s	loc_14082
000154F6 1342 0028                  		move.b	d2,$28(a1)
000154FA 337C 001C 0038             		move.w	#$1C,$38(a1)
00015500                            
00015500                            loc_14082:
00015500 5328 0034                  		subq.b	#1,$34(a0)
00015504 6A00                       		bpl.s	locret_1408C
00015506 4268 0036                  		clr.w	$36(a0)
0001550A                            
0001550A                            locret_1408C:
0001550A 4E75                       		rts	
0001550C                            
0001550C                            ; ---------------------------------------------------------------------------
0001550C                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
0001550C                            ; ---------------------------------------------------------------------------
0001550C                            
0001550C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001550C                            
0001550C                            
0001550C                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
0001550C 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00015512                             
00015512                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
00015512                             
00015512 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
00015516                             
00015516 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
0001551C 6600                       		bne.s	Air_GetBgm2	; if not, branch
0001551E 43F9 0000 4194             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00015524 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00015526                             
00015526                            Air_GetBgm2:
00015526 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
0001552C 6600                       		bne.s	Air_GetBgm3	; if not, branch
0001552E 43F9 0000 419A             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00015534 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00015536                             
00015536                            Air_GetBgm3:
00015536 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
0001553C 6600                       		bne.s	Air_GetBgm4	; if not, branch
0001553E 43F9 0000 41A0             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00015544 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00015546                             
00015546                            Air_GetBgm4:
00015546 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
0001554C 6600                       		bne.s	Air_PlayMusic	; if not, branch
0001554E 43F9 0000 41A6             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00015554                             
00015554                            Air_PlayMusic:
00015554 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
00015558                             
00015558                            loc_140A6:
00015558 4EB9 0000 1470             		jsr	(PlaySound).l
0001555E                             
0001555E                            ; NineKode ends here
0001555E                            
0001555E                            loc_140AC:
0001555E 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00015564 4238 D372                  		clr.b	($FFFFD372).w
00015568 4E75                       		rts	
0001556A                            ; End of function ResumeMusic
0001556A                            
0001556A                            ; ===========================================================================
0001556A                            Ani_obj0A:
0001556A                            	include "_anim\obj0A.asm"
0001556A                            ; ---------------------------------------------------------------------------
0001556A                            ; Animation script - countdown numbers and bubbles (LZ)
0001556A                            ; ---------------------------------------------------------------------------
0001556A 0000                       		dc.w byte_140D6-Ani_obj0A
0001556C 0000                       		dc.w byte_140E0-Ani_obj0A
0001556E 0000                       		dc.w byte_140EA-Ani_obj0A
00015570 0000                       		dc.w byte_140F4-Ani_obj0A
00015572 0000                       		dc.w byte_140FE-Ani_obj0A
00015574 0000                       		dc.w byte_14108-Ani_obj0A
00015576 0000                       		dc.w byte_14112-Ani_obj0A
00015578 0000                       		dc.w byte_14118-Ani_obj0A
0001557A 0000                       		dc.w byte_14120-Ani_obj0A
0001557C 0000                       		dc.w byte_14128-Ani_obj0A
0001557E 0000                       		dc.w byte_14130-Ani_obj0A
00015580 0000                       		dc.w byte_14138-Ani_obj0A
00015582 0000                       		dc.w byte_14140-Ani_obj0A
00015584 0000                       		dc.w byte_14148-Ani_obj0A
00015586 0000                       		dc.w byte_1414A-Ani_obj0A
00015588 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00015592 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
0001559C 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
000155A6 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
000155B0 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
000155BA 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
000155C4 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
000155CA 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
000155D2 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
000155DA 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
000155E2 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
000155EA 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
000155F2 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
000155FA 0EFC                       byte_14148:	dc.b $E, $FC
000155FC 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00015602                            		even
00015602                            		even
00015602                            
00015602                            ; ---------------------------------------------------------------------------
00015602                            ; Sprite mappings - drowning countdown numbers (LZ)
00015602                            ; ---------------------------------------------------------------------------
00015602                            Map_obj0A:
00015602                            	include "_maps\obj0A.asm"
00015602                            ; ---------------------------------------------------------------------------
00015602                            ; Sprite mappings - drowning countdown numbers (LZ)
00015602                            ; ---------------------------------------------------------------------------
00015602 0000                       		dc.w byte_14152-Map_obj0A
00015604 01                         byte_14152:	dc.b 1
00015605 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
0001560A                            		even
0001560A                            		even
0001560A                            
0001560A                            ; ===========================================================================
0001560A                            ; ---------------------------------------------------------------------------
0001560A                            ; Object 38 - shield and invincibility stars
0001560A                            ; ---------------------------------------------------------------------------
0001560A                            
0001560A                            Obj38:					; XREF: Obj_Index
0001560A 7000                       		moveq	#0,d0
0001560C 1028 0024                  		move.b	$24(a0),d0
00015610 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00015614 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00015618                            ; ===========================================================================
00015618 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
0001561A 0000                       		dc.w Obj38_Shield-Obj38_Index
0001561C 0000                       		dc.w Obj38_Stars-Obj38_Index
0001561E                            ; ===========================================================================
0001561E                            
0001561E                            Obj38_Main:				; XREF: Obj38_Index
0001561E 5428 0024                  		addq.b	#2,$24(a0)
00015622 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
0001562A 117C 0004 0001             		move.b	#4,1(a0)
00015630 117C 0001 0018             		move.b	#1,$18(a0)
00015636 117C 0010 0019             		move.b	#$10,$19(a0)
0001563C 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00015640 6600                       		bne.s	Obj38_DoStars	; if not, branch
00015642 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00015648 4E75                       		rts	
0001564A                            ; ===========================================================================
0001564A                            
0001564A                            Obj38_DoStars:
0001564A 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
0001564E 317C 055C 0002             		move.w	#$55C,2(a0)
00015654 4E75                       		rts	
00015656                            ; ===========================================================================
00015656                            
00015656                            Obj38_Shield:				; XREF: Obj38_Index
00015656 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
0001565A 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
0001565C 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00015660 6700                       		beq.s	Obj38_Delete	; if not, branch
00015662 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00015668 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
0001566E 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00015674 43F9 0000 0000             		lea	(Ani_obj38).l,a1
0001567A 4EB9 0000 B1F0             		jsr	AnimateSprite
00015680 4EFA 8A5C                  		jmp	DisplaySprite
00015684                            ; ===========================================================================
00015684                            
00015684                            Obj38_RmvShield:
00015684 4E75                       		rts	
00015686                            ; ===========================================================================
00015686                            
00015686                            Obj38_Delete:
00015686 4EFA 8A92                  		jmp	DeleteObject
0001568A                            ; ===========================================================================
0001568A                            
0001568A                            Obj38_Stars:				; XREF: Obj38_Index
0001568A 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
0001568E 6700                       		beq.s	Obj38_Delete2	; if not, branch
00015690 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00015694 1228 001C                  		move.b	$1C(a0),d1
00015698 5301                       		subq.b	#1,d1
0001569A 6000                       		bra.s	Obj38_StarTrail
0001569C                            ; ===========================================================================
0001569C E909                       		lsl.b	#4,d1
0001569E 5801                       		addq.b	#4,d1
000156A0 9001                       		sub.b	d1,d0
000156A2 1228 0030                  		move.b	$30(a0),d1
000156A6 9001                       		sub.b	d1,d0
000156A8 5801                       		addq.b	#4,d1
000156AA 0201 000F                  		andi.b	#$F,d1
000156AE 1141 0030                  		move.b	d1,$30(a0)
000156B2 6000                       		bra.s	Obj38_StarTrail2a
000156B4                            ; ===========================================================================
000156B4                            
000156B4                            Obj38_StarTrail:			; XREF: Obj38_Stars
000156B4 E709                       		lsl.b	#3,d1
000156B6 1401                       		move.b	d1,d2
000156B8 D201                       		add.b	d1,d1
000156BA D202                       		add.b	d2,d1
000156BC 5801                       		addq.b	#4,d1
000156BE 9001                       		sub.b	d1,d0
000156C0 1228 0030                  		move.b	$30(a0),d1
000156C4 9001                       		sub.b	d1,d0
000156C6 5801                       		addq.b	#4,d1
000156C8 0C01 0018                  		cmpi.b	#$18,d1
000156CC 6500                       		bcs.s	Obj38_StarTrail2
000156CE 7200                       		moveq	#0,d1
000156D0                            
000156D0                            Obj38_StarTrail2:
000156D0 1141 0030                  		move.b	d1,$30(a0)
000156D4                            
000156D4                            Obj38_StarTrail2a:
000156D4 43F8 CB00                  		lea	($FFFFCB00).w,a1
000156D8 43F1 0000                  		lea	(a1,d0.w),a1
000156DC 3159 0008                  		move.w	(a1)+,8(a0)
000156E0 3159 000C                  		move.w	(a1)+,$C(a0)
000156E4 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000156EA 43F9 0000 0000             		lea	(Ani_obj38).l,a1
000156F0 4EB9 0000 B1F0             		jsr	AnimateSprite
000156F6 4EFA 89E6                  		jmp	DisplaySprite
000156FA                            ; ===========================================================================
000156FA                            
000156FA                            Obj38_Delete2:				; XREF: Obj38_Stars
000156FA 4EFA 8A1E                  		jmp	DeleteObject
000156FE                            ; ===========================================================================
000156FE                            ; ---------------------------------------------------------------------------
000156FE                            ; Object 4A - special stage entry from beta
000156FE                            ; ---------------------------------------------------------------------------
000156FE                            
000156FE                            Obj4A:					; XREF: Obj_Index
000156FE 7000                       		moveq	#0,d0
00015700 1028 0024                  		move.b	$24(a0),d0
00015704 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00015708 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
0001570C                            ; ===========================================================================
0001570C 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
0001570E 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00015710 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00015712                            ; ===========================================================================
00015712                            
00015712                            Obj4A_Main:				; XREF: Obj4A_Index
00015712 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00015716 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00015718 4E75                       		rts	
0001571A                            ; ===========================================================================
0001571A                            
0001571A                            Obj4A_Main2:
0001571A 5428 0024                  		addq.b	#2,$24(a0)
0001571E 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00015726 117C 0004 0001             		move.b	#4,1(a0)
0001572C 117C 0001 0018             		move.b	#1,$18(a0)
00015732 117C 0038 0019             		move.b	#$38,$19(a0)
00015738 317C 0541 0002             		move.w	#$541,2(a0)
0001573E 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00015744                            
00015744                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00015744 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
0001574A 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00015750 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00015756 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
0001575C 4EB9 0000 B1F0             		jsr	AnimateSprite
00015762 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00015768 6600                       		bne.s	Obj4A_Display
0001576A 4A38 D000                  		tst.b	($FFFFD000).w
0001576E 6700                       		beq.s	Obj4A_Display
00015770 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00015776 303C 00A8                  		move.w	#$A8,d0
0001577A 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
00015780                            
00015780                            Obj4A_Display:
00015780 4EFA 895C                  		jmp	DisplaySprite
00015784                            ; ===========================================================================
00015784                            
00015784                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
00015784 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00015788 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
0001578A 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00015790 4EFA 8988                  		jmp	DeleteObject
00015794                            ; ===========================================================================
00015794                            
00015794                            Obj4A_Wait:
00015794 4E75                       		rts	
00015796                            ; ===========================================================================
00015796                            	include "_inc\sub RememberState.asm"
00015796                            ; ---------------------------------------------------------------------------
00015796                            ; Subroutine to remember whether an object is destroyed/collected
00015796                            ; ---------------------------------------------------------------------------
00015796                            
00015796                            RememberState:
000157B4 6000 8928                  		bra.w	DisplaySprite
000157B8                            
000157B8                            	@offscreen:
000157B8 45F8 FC00                  		lea	(v_objstate).w,a2
000157BC 7000                       		moveq	#0,d0
000157BE 1028 0023                  		move.b	obRespawnNo(a0),d0
000157C2 6700                       		beq.s	@delete
000157C4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000157CA                            
000157CA                            	@delete:
000157CA 6000 894E                  		bra.w	DeleteObject
000157CA 6000 894E                  		bra.w	DeleteObject
000157CE =00000034                  id_Roll:	equ (SonAni_Roll-SonicAniData)/2	; 2
000157CE 0000 0000                  ptr_sndCC:	dc.l SoundCC
000157D2                            ani_booster:
000157D2                            	include "_anim\speedbooster.asm"
000157D2                            ; ---------------------------------------------------------------------------
000157D2                            ; Animation script - Sonic 4's Speed Booster
000157D2                            ; ---------------------------------------------------------------------------
000157D2 0000                       		dc.w idle-Ani_Booster
000157D4 0101 0101 FE01             idle:	dc.b 1,	1, 1, 1, $FE, 1
000157DA                            		even
000157DA                            		even
000157DA                            speedboosters:
000157DA                            	include "_inc\speedbooster.asm"
000157DA                            ; ----------------------------------------------------------------------------
000157DA                            ; Object 06 - Booster things from CPZ
000157DA                            ; ----------------------------------------------------------------------------
000157DA                            
000157DA                            		; DATA XREF: ROM:0001600Co
000157DA 7000                       		moveq	#0,d0
000157DC 1028 0024                  		move.b	obRoutine(a0),d0
000157E0 323B 0000                  		move.w	Booster_Index(pc,d0.w),d1
000157E4 4EFB 1000                  		jmp	Booster_Index(pc,d1.w)
000157E8                            ; ===========================================================================
000157E8 0000                       Booster_Index:	dc.w Booster_Init-Booster_Index; 0 ; DATA XREF: h+B346o h+B348o
000157EA 0000                       		dc.w Booster_Loop-Booster_Index; 1
000157EC 1000                       word_222BE:	dc.w $1000		; 0
000157EE 0A00                       		dc.w  $A00		; 1
000157F0                            ; ===========================================================================
000157F0                            
000157F0                            Booster_Init:				; DATA XREF: h+B346o
000157F0 5428 0024                  		addq.b	#2,obRoutine(a0)
000157F4 217C 0000 0000 0004        		move.l	#Map_SpeedBooster,obMap(a0)
000157FC                            		
000157FC                            		;move.w	#$372,obGfx(a0) ; SYZ2 specific code
000157FC                            		;cmpi.w	#(id_SYZ<<8)+1,(v_zone).w ; check if level is SY2
000157FC                            		;beq.s	@Continue	; if yes, branch
000157FC 317C 5000 0002             		move.w	#$0400*20,obGfx(a0) ; 0 = palette line, XXX = Tile address (VRAM address / $20)
00015802                            		
00015802                            	@Continue:	
00015802                            		;bsr.w	loc_22402
00015802 0028 0004 0001             		ori.b	#4,obRender(a0)
00015808 117C 0020 0019             		move.b	#$20,obActWid(a0) ; ' '
0001580E 117C 0001 0018             		move.b	#1,obPriority(a0)
00015814 1028 0028                  		move.b	obSubtype(a0),d0
00015818 0240 0002                  		andi.w	#2,d0
0001581C 317B 00CE 0030             		move.w	word_222BE(pc,d0.w),$30(a0)
00015822                            
00015822                            Booster_Loop:				; DATA XREF: h+B346o
00015822                            		;move.b	(obTimeFrame).w,obFrame(a0)
00015822                            		;andi.b	#2,d0
00015822                            		;move.b	d0,obFrame(a0)
00015822                            		;move.b	(v_ani1_frame).w,obFrame(a0)
00015822 3028 0008                  		move.w	obX(a0),d0
00015826 3200                       		move.w	d0,d1
00015828 0440 0010                  		subi.w	#$10,d0
0001582C 0641 0010                  		addi.w	#$10,d1
00015830 3428 000C                  		move.w	obY(a0),d2
00015834 3602                       		move.w	d2,d3
00015836 0442 0010                  		subi.w	#$10,d2
0001583A 0643 0010                  		addi.w	#$10,d3
0001583E                            		;lea	($FFFFB000).w,a1
0001583E 43F8 D000                  		lea	(v_player).w,a1
00015842 0829 0001 0022             		btst	#1,obStatus(a1)
00015848 6600                       		bne.s	loc_22384
0001584A 3829 0008                  		move.w	obX(a1),d4
0001584E B840                       		cmp.w	d0,d4
00015850 6500 0000                  		bcs.w	loc_22384
00015854 B841                       		cmp.w	d1,d4
00015856 6400 0000                  		bcc.w	loc_22384
0001585A 3829 000C                  		move.w	obY(a1),d4
0001585E B842                       		cmp.w	d2,d4
00015860 6500 0000                  		bcs.w	loc_22384
00015864 B843                       		cmp.w	d3,d4
00015866 6400 0000                  		bcc.w	loc_22384
0001586A 3F00                       		move.w	d0,-(sp)
0001586C 6100 0000                  		bsr.w	loc_22388
00015870 301F                       		move.w	(sp)+,d0
00015872                            		;bsr.w	loc_22388
00015872                            
00015872                            ;loc_22354:				; CODE XREF: h+B3B6j h+B3BEj ...
00015872                            		;lea	(v_player).w,a1 ; a1=character
00015872                            		;btst	#1,$22(a1)
00015872                            		;bne.s	loc_22384
00015872                            		;move.w	8(a1),d4
00015872                            		;cmp.w	d0,d4
00015872                            		;bcs.w	loc_22384
00015872                            		;cmp.w	d1,d4
00015872                            		;bcc.w	loc_22384
00015872                            		;move.w	$C(a1),d4
00015872                            		;cmp.w	d2,d4
00015872                            		;bcs.w	loc_22384
00015872                            		;cmp.w	d3,d4
00015872                            		;bcc.w	loc_22384
00015872                            		;bsr.w	loc_22388
00015872                            
00015872                            loc_22384:				; CODE XREF: h+B3EAj h+B3F2j ...
00015872 4EFA A92C                  		jmp	MarkObjGone		;jsr	loc_223FC
00015876                            ; ===========================================================================
00015876                            
00015876                            loc_22388:				; CODE XREF: h+B3DAp h+B40Cp
00015876 3029 0010                  		move.w	obVelX(a1),d0
0001587A 0828 0000 0022             		btst	#0,obStatus(a0)
00015880 6700                       		beq.s	loc_22396
00015882 4440                       		neg.w	d0
00015884                            
00015884                            loc_22396:				; CODE XREF: h+B41Ej
00015884 0C40 1000                  		cmpi.w	#$1000,d0 			; is the character already going super fast?
00015888 6C00                       		bge.s	loc_223D8 			; if yes, branch to not change the speed
0001588A 3368 0030 0010             		move.w	$30(a0),obVelX(a1)  ; make the character go super fast
00015890 08A9 0000 0022             		bclr	#0,obStatus(a1)		; turn him right
00015896 0828 0000 0022             		btst	#0,obStatus(a0)		; was that the correct direction?
0001589C 6700                       		beq.s	loc_223BA 			; if yes, branch
0001589E 08E9 0000 0022             		bset	#0,obStatus(a1)		; turn him left
000158A4 4469 0010                  		neg.w	obVelX(a1)			; make the boosting direction left
000158A8                            
000158A8                            loc_223BA:				; CODE XREF: h+B43Aj
000158A8                            		;move.w	#$F,$2E(a1)
000158A8 3369 0010 0014             		move.w	obVelX(a1),obInertia(a1)
000158AE 08A8 0005 0022             		bclr	#5,obStatus(a0)
000158B4 08A8 0006 0022             		bclr	#6,obStatus(a0)
000158BA 08A9 0005 0022             		bclr	#5,obStatus(a1)
000158C0                            		
000158C0                            		;addq.w	#5,obY(a1)
000158C0                            
000158C0                            loc_223D8:				; CODE XREF: h+B426j
000158C0                            		;move.w	#$D1,d0	; 'Ì'
000158C0                            		;jmp	(play_SFX).l
000158C0                            ;		bset	#2,obStatus(a1)		;set rolling bit
000158C0                            ;		move.b	#$E,obHeight(a1) 	; change hitbox
000158C0                            ;		move.b	#7,obWidth(a1)	  	; change hitbox
000158C0                            ;		move.b	#id_Roll,obAnim(a1) ; use "rolling" animation
000158C0 303C 00D1                  		move.w	#$D1,d0
000158C4 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play spring sound
000158CA                            ; ===========================================================================
000158CA                            ; -------------------------------------------------------------------------------
000158CA                            ; sprite mappings
000158CA                            ; -------------------------------------------------------------------------------
000158CA                            Map_SpeedBooster:	incbin "_maps/SpeedBooster.asm"
00015AA4                            Nem_SpeedBooster:	incbin "artnem/speedbooster.bin"
00015C9B                            ; ===========================================================================
00015C9B                            
00015C9B                            ;loc_223FC:				; CODE XREF: h+B410j	
00015C9B                            ;       out_of_range    DeleteObject
00015C9B                            ;		lea	(Ani_Eggman).l,a1
00015C9B                            ;		jsr	AnimateSprite
00015C9B                            ;		bra.w	RememberState
00015C9B                            ;		even
00015C9B                            ;		even
00015C9B                            ; ---------------------------------------------------------------------------
00015C9B                            ; Object 08 - water splash (LZ)
00015C9B                            ; ---------------------------------------------------------------------------
00015C9B                            
00015C9B                            Obj08:					; XREF: Obj_Index
00015C9C 0070 00                    		moveq	#0,d0
00015C9E 1028 0024                  		move.b	$24(a0),d0
00015CA2 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00015CA6 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00015CAA                            ; ===========================================================================
00015CAA 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00015CAC 0000                       		dc.w Obj08_Display-Obj08_Index
00015CAE 0000                       		dc.w Obj08_Delete-Obj08_Index
00015CB0                            ; ===========================================================================
00015CB0                            
00015CB0                            Obj08_Main:				; XREF: Obj08_Index
00015CB0 5428 0024                  		addq.b	#2,$24(a0)
00015CB4 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00015CBC 0028 0004 0001             		ori.b	#4,1(a0)
00015CC2 117C 0001 0018             		move.b	#1,$18(a0)
00015CC8 117C 0010 0019             		move.b	#$10,$19(a0)
00015CCE 317C 4259 0002             		move.w	#$4259,2(a0)
00015CD4 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00015CDA                            
00015CDA                            Obj08_Display:				; XREF: Obj08_Index
00015CDA 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00015CE0 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00015CE6 4EB9 0000 B1F0             		jsr	AnimateSprite
00015CEC 4EFA 83F0                  		jmp	DisplaySprite
00015CF0                            ; ===========================================================================
00015CF0                            
00015CF0                            Obj08_Delete:				; XREF: Obj08_Index
00015CF0 4EFA 8428                  		jmp	DeleteObject	; delete when animation	is complete
00015CF4                            ; ===========================================================================
00015CF4                            Ani_obj38:
00015CF4                            	include "_anim\obj38.asm"
00015CF4                            ; ---------------------------------------------------------------------------
00015CF4                            ; Animation script - shield and invincibility stars
00015CF4                            ; ---------------------------------------------------------------------------
00015CF4 0000                       		dc.w byte_14356-Ani_obj38
00015CF6 0000                       		dc.w byte_1435E-Ani_obj38
00015CF8 0000                       		dc.w byte_14364-Ani_obj38
00015CFA 0000                       		dc.w byte_1437E-Ani_obj38
00015CFC 0000                       		dc.w byte_14398-Ani_obj38
00015CFE 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00015D06 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00015D0C 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00015D1D 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00015D26 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00015D37 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00015D40 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00015D51 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00015D5A                            		even
00015D5A                            		even
00015D5A                            
00015D5A                            ; ---------------------------------------------------------------------------
00015D5A                            ; Sprite mappings - shield and invincibility stars
00015D5A                            ; ---------------------------------------------------------------------------
00015D5A                            Map_obj38:
00015D5A                            	include "_maps\obj38.asm"
00015D5A                            ; ---------------------------------------------------------------------------
00015D5A                            ; Sprite mappings - shield and invincibility stars
00015D5A                            ; ---------------------------------------------------------------------------
00015D5A 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00015D5E 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00015D62 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00015D66 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00015D6A 04                         byte_143C2:	dc.b 4
00015D6B E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00015D70 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00015D75 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00015D7A 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00015D7F 04                         byte_143D7:	dc.b 4
00015D80 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00015D85 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00015D8A 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00015D8F 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00015D94 04                         byte_143EC:	dc.b 4
00015D95 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00015D9A E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00015D9F 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00015DA4 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00015DA9 04                         byte_14401:	dc.b 4
00015DAA E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00015DAF E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00015DB4 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00015DB9 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00015DBE 04                         byte_14416:	dc.b 4
00015DBF E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00015DC4 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00015DC9 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00015DCE 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00015DD3 04                         byte_1442B:	dc.b 4
00015DD4 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00015DD9 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00015DDE 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00015DE3 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00015DE8 04                         byte_14440:	dc.b 4
00015DE9 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00015DEE E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00015DF3 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00015DF8 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00015DFE 00                         		even
00015DFE 00                         		even
00015DFE                            
00015DFE                            Ani_obj4A:
00015DFE                            	include "_anim\obj4A.asm"
00015DFE                            ; ---------------------------------------------------------------------------
00015DFE                            ; Animation script - special stage entry effect from beta
00015DFE                            ; ---------------------------------------------------------------------------
00015DFE 0000                       		dc.w byte_14458-Ani_obj4A
00015E00 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00015E14                            		even
00015E14                            		even
00015E14                            
00015E14                            ; ---------------------------------------------------------------------------
00015E14                            ; Sprite mappings - special stage entry	from beta
00015E14                            ; ---------------------------------------------------------------------------
00015E14                            Map_obj4A:
00015E14                            	include "_maps\obj4A.asm"
00015E14                            ; ---------------------------------------------------------------------------
00015E14                            ; Sprite mappings - special stage entry	from beta
00015E14                            ; ---------------------------------------------------------------------------
00015E14 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00015E18 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00015E1C 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00015E20 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00015E24 03                         byte_1447C:	dc.b 3
00015E25 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00015E2A 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00015E2F 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00015E34 03                         byte_1448C:	dc.b 3
00015E35 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00015E3A 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00015E3F 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00015E44 05                         byte_1449C:	dc.b 5
00015E45 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00015E4A EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00015E4F FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00015E54 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00015E59 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00015E5E 09                         byte_144B6:	dc.b 9
00015E5F F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00015E64 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00015E69 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00015E6E 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00015E73 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00015E78 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00015E7D F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00015E82 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00015E87 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00015E8C 12                         byte_144E4:	dc.b $12
00015E8D 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00015E92 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00015E97 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00015E9C 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00015EA1 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00015EA6 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00015EAB 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00015EB0 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00015EB5 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00015EBA 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00015EBF 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00015EC4 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00015EC9 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00015ECE F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00015ED3 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00015ED8 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00015EDD 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00015EE2 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00015EE7 11                         byte_1453F:	dc.b $11
00015EE8 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00015EED F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00015EF2 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00015EF7 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00015EFC 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00015F01 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00015F06 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00015F0B F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00015F10 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00015F15 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00015F1A 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00015F1F 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00015F24 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00015F29 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00015F2E F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00015F33 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00015F38 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00015F3D 09                         byte_14595:	dc.b 9
00015F3E FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00015F43 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00015F48 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00015F4D 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00015F52 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00015F57 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00015F5C 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00015F61 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00015F66 04                         		dc.b 4
00015F67 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00015F6C                            		even
00015F6C                            		even
00015F6C                            
00015F6C                            Ani_obj08:
00015F6C                            	include "_anim\obj08.asm"
00015F6C                            ; ---------------------------------------------------------------------------
00015F6C                            ; Animation script - water splash (LZ)
00015F6C                            ; ---------------------------------------------------------------------------
00015F6C 0000                       		dc.w byte_145C6-Ani_obj08
00015F6E 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00015F74                            		even
00015F74                            		even
00015F74                            
00015F74                            ; ---------------------------------------------------------------------------
00015F74                            ; Sprite mappings - water splash (LZ)
00015F74                            ; ---------------------------------------------------------------------------
00015F74                            Map_obj08:
00015F74                            	include "_maps\obj08.asm"
00015F74                            ; ---------------------------------------------------------------------------
00015F74                            ; Sprite mappings - water splash (LZ)
00015F74                            ; ---------------------------------------------------------------------------
00015F74 0000                       		dc.w byte_145D2-Map_obj08
00015F76 0000                       		dc.w byte_145DD-Map_obj08
00015F78 0000                       		dc.w byte_145E8-Map_obj08
00015F7A 02                         byte_145D2:	dc.b 2
00015F7B F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00015F80 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00015F85 02                         byte_145DD:	dc.b 2
00015F86 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00015F8B EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00015F90 01                         byte_145E8:	dc.b 1
00015F91 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00015F96                            		even
00015F96                            		even
00015F96                            
00015F96                            ; ---------------------------------------------------------------------------
00015F96                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00015F96                            ; ---------------------------------------------------------------------------
00015F96                            
00015F96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F96                            
00015F96                            
00015F96                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00015F96 0828 0003 0022             		btst	#3,$22(a0)
00015F9C 6700                       		beq.s	loc_14602
00015F9E 7000                       		moveq	#0,d0
00015FA0 11C0 F768                  		move.b	d0,($FFFFF768).w
00015FA4 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015FA8 4E75                       		rts	
00015FAA                            ; ===========================================================================
00015FAA                            
00015FAA                            loc_14602:
00015FAA 7003                       		moveq	#3,d0
00015FAC 11C0 F768                  		move.b	d0,($FFFFF768).w
00015FB0 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015FB4 1028 0026                  		move.b	$26(a0),d0
00015FB8 0600 0020                  		addi.b	#$20,d0
00015FBC 6A00                       		bpl.s	loc_14624
00015FBE 1028 0026                  		move.b	$26(a0),d0
00015FC2 6A00                       		bpl.s	loc_1461E
00015FC4 5300                       		subq.b	#1,d0
00015FC6                            
00015FC6                            loc_1461E:
00015FC6 0600 0020                  		addi.b	#$20,d0
00015FCA 6000                       		bra.s	loc_14630
00015FCC                            ; ===========================================================================
00015FCC                            
00015FCC                            loc_14624:
00015FCC 1028 0026                  		move.b	$26(a0),d0
00015FD0 6A00                       		bpl.s	loc_1462C
00015FD2 5200                       		addq.b	#1,d0
00015FD4                            
00015FD4                            loc_1462C:
00015FD4 0600 001F                  		addi.b	#$1F,d0
00015FD8                            
00015FD8                            loc_14630:
00015FD8 0200 00C0                  		andi.b	#$C0,d0
00015FDC 0C00 0040                  		cmpi.b	#$40,d0
00015FE0 6700 0000                  		beq.w	Sonic_WalkVertL
00015FE4 0C00 0080                  		cmpi.b	#$80,d0
00015FE8 6700 0000                  		beq.w	Sonic_WalkCeiling
00015FEC 0C00 00C0                  		cmpi.b	#$C0,d0
00015FF0 6700 0000                  		beq.w	Sonic_WalkVertR
00015FF4 3428 000C                  		move.w	$C(a0),d2
00015FF8 3628 0008                  		move.w	8(a0),d3
00015FFC 7000                       		moveq	#0,d0
00015FFE 1028 0016                  		move.b	$16(a0),d0
00016002 4880                       		ext.w	d0
00016004 D440                       		add.w	d0,d2
00016006 1028 0017                  		move.b	$17(a0),d0
0001600A 4880                       		ext.w	d0
0001600C D640                       		add.w	d0,d3
0001600E 49F8 F768                  		lea	($FFFFF768).w,a4
00016012 367C 0010                  		movea.w	#$10,a3
00016016 3C3C 0000                  		move.w	#0,d6
0001601A 7A0D                       		moveq	#$D,d5
0001601C 6100 0000                  		bsr.w	FindFloor
00016020 3F01                       		move.w	d1,-(sp)
00016022 3428 000C                  		move.w	$C(a0),d2
00016026 3628 0008                  		move.w	8(a0),d3
0001602A 7000                       		moveq	#0,d0
0001602C 1028 0016                  		move.b	$16(a0),d0
00016030 4880                       		ext.w	d0
00016032 D440                       		add.w	d0,d2
00016034 1028 0017                  		move.b	$17(a0),d0
00016038 4880                       		ext.w	d0
0001603A 4440                       		neg.w	d0
0001603C D640                       		add.w	d0,d3
0001603E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016042 367C 0010                  		movea.w	#$10,a3
00016046 3C3C 0000                  		move.w	#0,d6
0001604A 7A0D                       		moveq	#$D,d5
0001604C 6100 0000                  		bsr.w	FindFloor
00016050 301F                       		move.w	(sp)+,d0
00016052 6100 0000                  		bsr.w	Sonic_Angle
00016056 4A41                       		tst.w	d1
00016058 6700                       		beq.s	locret_146BE
0001605A 6A00                       		bpl.s	loc_146C0
0001605C 0C41 FFF2                  		cmpi.w	#-$E,d1
00016060 6D00                       		blt.s	locret_146E6
00016062 D368 000C                  		add.w	d1,$C(a0)
00016066                            
00016066                            locret_146BE:
00016066 4E75                       		rts	
00016068                            ; ===========================================================================
00016068                            
00016068                            loc_146C0:
00016068 0C41 000E                  		cmpi.w	#$E,d1
0001606C 6E00                       		bgt.s	loc_146CC
0001606E                            
0001606E                            loc_146C6:
0001606E D368 000C                  		add.w	d1,$C(a0)
00016072 4E75                       		rts	
00016074                            ; ===========================================================================
00016074                            
00016074                            loc_146CC:
00016074 4A28 0038                  		tst.b	$38(a0)
00016078 66F4                       		bne.s	loc_146C6
0001607A 08E8 0001 0022             		bset	#1,$22(a0)
00016080 08A8 0005 0022             		bclr	#5,$22(a0)
00016086 117C 0001 001D             		move.b	#1,$1D(a0)
0001608C 4E75                       		rts	
0001608E                            ; ===========================================================================
0001608E                            
0001608E                            locret_146E6:
0001608E 4E75                       		rts	
00016090                            ; End of function Sonic_AnglePos
00016090                            
00016090                            ; ===========================================================================
00016090 2428 0008                  		move.l	8(a0),d2
00016094 3028 0010                  		move.w	$10(a0),d0
00016098 48C0                       		ext.l	d0
0001609A E180                       		asl.l	#8,d0
0001609C 9480                       		sub.l	d0,d2
0001609E 2142 0008                  		move.l	d2,8(a0)
000160A2 303C 0038                  		move.w	#$38,d0
000160A6 48C0                       		ext.l	d0
000160A8 E180                       		asl.l	#8,d0
000160AA 9680                       		sub.l	d0,d3
000160AC 2143 000C                  		move.l	d3,$C(a0)
000160B0 4E75                       		rts	
000160B2                            ; ===========================================================================
000160B2                            
000160B2                            locret_1470A:
000160B2 4E75                       		rts	
000160B4                            ; ===========================================================================
000160B4 2628 000C                  		move.l	$C(a0),d3
000160B8 3028 0012                  		move.w	$12(a0),d0
000160BC 0440 0038                  		subi.w	#$38,d0
000160C0 3140 0012                  		move.w	d0,$12(a0)
000160C4 48C0                       		ext.l	d0
000160C6 E180                       		asl.l	#8,d0
000160C8 9680                       		sub.l	d0,d3
000160CA 2143 000C                  		move.l	d3,$C(a0)
000160CE 4E75                       		rts	
000160D0 4E75                       		rts	
000160D2                            ; ===========================================================================
000160D2 2428 0008                  		move.l	8(a0),d2
000160D6 2628 000C                  		move.l	$C(a0),d3
000160DA 3028 0010                  		move.w	$10(a0),d0
000160DE 48C0                       		ext.l	d0
000160E0 E180                       		asl.l	#8,d0
000160E2 9480                       		sub.l	d0,d2
000160E4 3028 0012                  		move.w	$12(a0),d0
000160E8 48C0                       		ext.l	d0
000160EA E180                       		asl.l	#8,d0
000160EC 9680                       		sub.l	d0,d3
000160EE 2142 0008                  		move.l	d2,8(a0)
000160F2 2143 000C                  		move.l	d3,$C(a0)
000160F6 4E75                       		rts	
000160F8                            
000160F8                            ; ---------------------------------------------------------------------------
000160F8                            ; Subroutine to	change Sonic's angle as he walks along the floor
000160F8                            ; ---------------------------------------------------------------------------
000160F8                            
000160F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000160F8                            
000160F8                            
000160F8                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
000160F8 1438 F76A                  		move.b	($FFFFF76A).w,d2
000160FC B240                       		cmp.w	d0,d1
000160FE 6F00                       		ble.s	loc_1475E
00016100 1438 F768                  		move.b	($FFFFF768).w,d2
00016104 3200                       		move.w	d0,d1
00016106                            
00016106                            loc_1475E:
00016106 0802 0000                  		btst	#0,d2
0001610A 6600                       		bne.s	loc_1476A
0001610C 1142 0026                  		move.b	d2,$26(a0)
00016110 4E75                       		rts	
00016112                            ; ===========================================================================
00016112                            
00016112                            loc_1476A:
00016112 1428 0026                  		move.b	$26(a0),d2
00016116 0602 0020                  		addi.b	#$20,d2
0001611A 0202 00C0                  		andi.b	#$C0,d2
0001611E 1142 0026                  		move.b	d2,$26(a0)
00016122 4E75                       		rts	
00016124                            ; End of function Sonic_Angle
00016124                            
00016124                            ; ---------------------------------------------------------------------------
00016124                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00016124                            ; ---------------------------------------------------------------------------
00016124                            
00016124                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016124                            
00016124                            
00016124                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00016124 3428 000C                  		move.w	$C(a0),d2
00016128 3628 0008                  		move.w	8(a0),d3
0001612C 7000                       		moveq	#0,d0
0001612E 1028 0017                  		move.b	$17(a0),d0
00016132 4880                       		ext.w	d0
00016134 4440                       		neg.w	d0
00016136 D440                       		add.w	d0,d2
00016138 1028 0016                  		move.b	$16(a0),d0
0001613C 4880                       		ext.w	d0
0001613E D640                       		add.w	d0,d3
00016140 49F8 F768                  		lea	($FFFFF768).w,a4
00016144 367C 0010                  		movea.w	#$10,a3
00016148 3C3C 0000                  		move.w	#0,d6
0001614C 7A0D                       		moveq	#$D,d5
0001614E 6100 0000                  		bsr.w	FindWall
00016152 3F01                       		move.w	d1,-(sp)
00016154 3428 000C                  		move.w	$C(a0),d2
00016158 3628 0008                  		move.w	8(a0),d3
0001615C 7000                       		moveq	#0,d0
0001615E 1028 0017                  		move.b	$17(a0),d0
00016162 4880                       		ext.w	d0
00016164 D440                       		add.w	d0,d2
00016166 1028 0016                  		move.b	$16(a0),d0
0001616A 4880                       		ext.w	d0
0001616C D640                       		add.w	d0,d3
0001616E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016172 367C 0010                  		movea.w	#$10,a3
00016176 3C3C 0000                  		move.w	#0,d6
0001617A 7A0D                       		moveq	#$D,d5
0001617C 6100 0000                  		bsr.w	FindWall
00016180 301F                       		move.w	(sp)+,d0
00016182 6100 FF74                  		bsr.w	Sonic_Angle
00016186 4A41                       		tst.w	d1
00016188 6700                       		beq.s	locret_147F0
0001618A 6A00                       		bpl.s	loc_147F2
0001618C 0C41 FFF2                  		cmpi.w	#-$E,d1
00016190 6D00 FF20                  		blt.w	locret_1470A
00016194 D368 0008                  		add.w	d1,8(a0)
00016198                            
00016198                            locret_147F0:
00016198 4E75                       		rts	
0001619A                            ; ===========================================================================
0001619A                            
0001619A                            loc_147F2:
0001619A 0C41 000E                  		cmpi.w	#$E,d1
0001619E 6E00                       		bgt.s	loc_147FE
000161A0                            
000161A0                            loc_147F8:
000161A0 D368 0008                  		add.w	d1,8(a0)
000161A4 4E75                       		rts	
000161A6                            ; ===========================================================================
000161A6                            
000161A6                            loc_147FE:
000161A6 4A28 0038                  		tst.b	$38(a0)
000161AA 66F4                       		bne.s	loc_147F8
000161AC 08E8 0001 0022             		bset	#1,$22(a0)
000161B2 08A8 0005 0022             		bclr	#5,$22(a0)
000161B8 117C 0001 001D             		move.b	#1,$1D(a0)
000161BE 4E75                       		rts	
000161C0                            ; End of function Sonic_WalkVertR
000161C0                            
000161C0                            ; ---------------------------------------------------------------------------
000161C0                            ; Subroutine allowing Sonic to walk upside-down
000161C0                            ; ---------------------------------------------------------------------------
000161C0                            
000161C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000161C0                            
000161C0                            
000161C0                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
000161C0 3428 000C                  		move.w	$C(a0),d2
000161C4 3628 0008                  		move.w	8(a0),d3
000161C8 7000                       		moveq	#0,d0
000161CA 1028 0016                  		move.b	$16(a0),d0
000161CE 4880                       		ext.w	d0
000161D0 9440                       		sub.w	d0,d2
000161D2 0A42 000F                  		eori.w	#$F,d2
000161D6 1028 0017                  		move.b	$17(a0),d0
000161DA 4880                       		ext.w	d0
000161DC D640                       		add.w	d0,d3
000161DE 49F8 F768                  		lea	($FFFFF768).w,a4
000161E2 367C FFF0                  		movea.w	#-$10,a3
000161E6 3C3C 1000                  		move.w	#$1000,d6
000161EA 7A0D                       		moveq	#$D,d5
000161EC 6100 0000                  		bsr.w	FindFloor
000161F0 3F01                       		move.w	d1,-(sp)
000161F2 3428 000C                  		move.w	$C(a0),d2
000161F6 3628 0008                  		move.w	8(a0),d3
000161FA 7000                       		moveq	#0,d0
000161FC 1028 0016                  		move.b	$16(a0),d0
00016200 4880                       		ext.w	d0
00016202 9440                       		sub.w	d0,d2
00016204 0A42 000F                  		eori.w	#$F,d2
00016208 1028 0017                  		move.b	$17(a0),d0
0001620C 4880                       		ext.w	d0
0001620E 9640                       		sub.w	d0,d3
00016210 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016214 367C FFF0                  		movea.w	#-$10,a3
00016218 3C3C 1000                  		move.w	#$1000,d6
0001621C 7A0D                       		moveq	#$D,d5
0001621E 6100 0000                  		bsr.w	FindFloor
00016222 301F                       		move.w	(sp)+,d0
00016224 6100 FED2                  		bsr.w	Sonic_Angle
00016228 4A41                       		tst.w	d1
0001622A 6700                       		beq.s	locret_14892
0001622C 6A00                       		bpl.s	loc_14894
0001622E 0C41 FFF2                  		cmpi.w	#-$E,d1
00016232 6D00 FE5A                  		blt.w	locret_146E6
00016236 9368 000C                  		sub.w	d1,$C(a0)
0001623A                            
0001623A                            locret_14892:
0001623A 4E75                       		rts	
0001623C                            ; ===========================================================================
0001623C                            
0001623C                            loc_14894:
0001623C 0C41 000E                  		cmpi.w	#$E,d1
00016240 6E00                       		bgt.s	loc_148A0
00016242                            
00016242                            loc_1489A:
00016242 9368 000C                  		sub.w	d1,$C(a0)
00016246 4E75                       		rts	
00016248                            ; ===========================================================================
00016248                            
00016248                            loc_148A0:
00016248 4A28 0038                  		tst.b	$38(a0)
0001624C 66F4                       		bne.s	loc_1489A
0001624E 08E8 0001 0022             		bset	#1,$22(a0)
00016254 08A8 0005 0022             		bclr	#5,$22(a0)
0001625A 117C 0001 001D             		move.b	#1,$1D(a0)
00016260 4E75                       		rts	
00016262                            ; End of function Sonic_WalkCeiling
00016262                            
00016262                            ; ---------------------------------------------------------------------------
00016262                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00016262                            ; ---------------------------------------------------------------------------
00016262                            
00016262                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016262                            
00016262                            
00016262                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
00016262 3428 000C                  		move.w	$C(a0),d2
00016266 3628 0008                  		move.w	8(a0),d3
0001626A 7000                       		moveq	#0,d0
0001626C 1028 0017                  		move.b	$17(a0),d0
00016270 4880                       		ext.w	d0
00016272 9440                       		sub.w	d0,d2
00016274 1028 0016                  		move.b	$16(a0),d0
00016278 4880                       		ext.w	d0
0001627A 9640                       		sub.w	d0,d3
0001627C 0A43 000F                  		eori.w	#$F,d3
00016280 49F8 F768                  		lea	($FFFFF768).w,a4
00016284 367C FFF0                  		movea.w	#-$10,a3
00016288 3C3C 0800                  		move.w	#$800,d6
0001628C 7A0D                       		moveq	#$D,d5
0001628E 6100 0000                  		bsr.w	FindWall
00016292 3F01                       		move.w	d1,-(sp)
00016294 3428 000C                  		move.w	$C(a0),d2
00016298 3628 0008                  		move.w	8(a0),d3
0001629C 7000                       		moveq	#0,d0
0001629E 1028 0017                  		move.b	$17(a0),d0
000162A2 4880                       		ext.w	d0
000162A4 D440                       		add.w	d0,d2
000162A6 1028 0016                  		move.b	$16(a0),d0
000162AA 4880                       		ext.w	d0
000162AC 9640                       		sub.w	d0,d3
000162AE 0A43 000F                  		eori.w	#$F,d3
000162B2 49F8 F76A                  		lea	($FFFFF76A).w,a4
000162B6 367C FFF0                  		movea.w	#-$10,a3
000162BA 3C3C 0800                  		move.w	#$800,d6
000162BE 7A0D                       		moveq	#$D,d5
000162C0 6100 0000                  		bsr.w	FindWall
000162C4 301F                       		move.w	(sp)+,d0
000162C6 6100 FE30                  		bsr.w	Sonic_Angle
000162CA 4A41                       		tst.w	d1
000162CC 6700                       		beq.s	locret_14934
000162CE 6A00                       		bpl.s	loc_14936
000162D0 0C41 FFF2                  		cmpi.w	#-$E,d1
000162D4 6D00 FDDC                  		blt.w	locret_1470A
000162D8 9368 0008                  		sub.w	d1,8(a0)
000162DC                            
000162DC                            locret_14934:
000162DC 4E75                       		rts	
000162DE                            ; ===========================================================================
000162DE                            
000162DE                            loc_14936:
000162DE 0C41 000E                  		cmpi.w	#$E,d1
000162E2 6E00                       		bgt.s	loc_14942
000162E4                            
000162E4                            loc_1493C:
000162E4 9368 0008                  		sub.w	d1,8(a0)
000162E8 4E75                       		rts	
000162EA                            ; ===========================================================================
000162EA                            
000162EA                            loc_14942:
000162EA 4A28 0038                  		tst.b	$38(a0)
000162EE 66F4                       		bne.s	loc_1493C
000162F0 08E8 0001 0022             		bset	#1,$22(a0)
000162F6 08A8 0005 0022             		bclr	#5,$22(a0)
000162FC 117C 0001 001D             		move.b	#1,$1D(a0)
00016302 4E75                       		rts	
00016304                            ; End of function Sonic_WalkVertL
00016304                            
00016304                            ; ---------------------------------------------------------------------------
00016304                            ; Subroutine to	find which tile	the object is standing on
00016304                            ; ---------------------------------------------------------------------------
00016304                            
00016304                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016304                            
00016304                            
00016304                            Floor_ChkTile:				; XREF: FindFloor; et al
00016304 3002                       		move.w	d2,d0
00016306 E248                       		lsr.w	#1,d0
00016308 0240 0380                  		andi.w	#$380,d0
0001630C 3203                       		move.w	d3,d1
0001630E E049                       		lsr.w	#8,d1
00016310 0241 007F                  		andi.w	#$7F,d1
00016314 D041                       		add.w	d1,d0
00016316 72FF                       		moveq	#-1,d1
00016318 43F8 A400                  		lea	($FFFFA400).w,a1
0001631C 1231 0000                  		move.b	(a1,d0.w),d1
00016320 6700                       		beq.s	loc_14996
00016322 6B00                       		bmi.s	loc_1499A
00016324 5301                       		subq.b	#1,d1
00016326 4881                       		ext.w	d1
00016328 EE59                       		ror.w	#7,d1
0001632A 3002                       		move.w	d2,d0
0001632C D040                       		add.w	d0,d0
0001632E 0240 01E0                  		andi.w	#$1E0,d0
00016332 D240                       		add.w	d0,d1
00016334 3003                       		move.w	d3,d0
00016336 E648                       		lsr.w	#3,d0
00016338 0240 001E                  		andi.w	#$1E,d0
0001633C D240                       		add.w	d0,d1
0001633E                            
0001633E                            loc_14996:
0001633E 2241                       		movea.l	d1,a1
00016340 4E75                       		rts	
00016342                            ; ===========================================================================
00016342                            
00016342                            loc_1499A:
00016342 0241 007F                  		andi.w	#$7F,d1
00016346 0828 0006 0001             		btst	#6,1(a0)
0001634C 6700                       		beq.s	loc_149B2
0001634E 5241                       		addq.w	#1,d1
00016350 0C41 0029                  		cmpi.w	#$29,d1
00016354 6600                       		bne.s	loc_149B2
00016356 323C 0051                  		move.w	#$51,d1
0001635A                            
0001635A                            loc_149B2:
0001635A 5301                       		subq.b	#1,d1
0001635C EE59                       		ror.w	#7,d1
0001635E 3002                       		move.w	d2,d0
00016360 D040                       		add.w	d0,d0
00016362 0240 01E0                  		andi.w	#$1E0,d0
00016366 D240                       		add.w	d0,d1
00016368 3003                       		move.w	d3,d0
0001636A E648                       		lsr.w	#3,d0
0001636C 0240 001E                  		andi.w	#$1E,d0
00016370 D240                       		add.w	d0,d1
00016372 2241                       		movea.l	d1,a1
00016374 4E75                       		rts	
00016376                            ; End of function Floor_ChkTile
00016376                            
00016376                            
00016376                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016376                            
00016376                            
00016376                            FindFloor:				; XREF: Sonic_AnglePos; et al
00016376 618C                       		bsr.s	Floor_ChkTile
00016378 3011                       		move.w	(a1),d0
0001637A 3800                       		move.w	d0,d4
0001637C 0240 07FF                  		andi.w	#$7FF,d0
00016380 6700                       		beq.s	loc_149DE
00016382 0B04                       		btst	d5,d4
00016384 6600                       		bne.s	loc_149EC
00016386                            
00016386                            loc_149DE:
00016386 D44B                       		add.w	a3,d2
00016388 6100 0000                  		bsr.w	FindFloor2
0001638C 944B                       		sub.w	a3,d2
0001638E 0641 0010                  		addi.w	#$10,d1
00016392 4E75                       		rts	
00016394                            ; ===========================================================================
00016394                            
00016394                            loc_149EC:
00016394 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00016398 1032 0000                  		move.b	(a2,d0.w),d0
0001639C 0240 00FF                  		andi.w	#$FF,d0
000163A0 67E4                       		beq.s	loc_149DE
000163A2 45F9 0000 0000             		lea	(AngleMap).l,a2
000163A8 18B2 0000                  		move.b	(a2,d0.w),(a4)
000163AC E948                       		lsl.w	#4,d0
000163AE 3203                       		move.w	d3,d1
000163B0 0804 000B                  		btst	#$B,d4
000163B4 6700                       		beq.s	loc_14A12
000163B6 4641                       		not.w	d1
000163B8 4414                       		neg.b	(a4)
000163BA                            
000163BA                            loc_14A12:
000163BA 0804 000C                  		btst	#$C,d4
000163BE 6700                       		beq.s	loc_14A22
000163C0 0614 0040                  		addi.b	#$40,(a4)
000163C4 4414                       		neg.b	(a4)
000163C6 0414 0040                  		subi.b	#$40,(a4)
000163CA                            
000163CA                            loc_14A22:
000163CA 0241 000F                  		andi.w	#$F,d1
000163CE D240                       		add.w	d0,d1
000163D0 45F9 0000 0000             		lea	(CollArray1).l,a2
000163D6 1032 1000                  		move.b	(a2,d1.w),d0
000163DA 4880                       		ext.w	d0
000163DC BD44                       		eor.w	d6,d4
000163DE 0804 000C                  		btst	#$C,d4
000163E2 6700                       		beq.s	loc_14A3E
000163E4 4440                       		neg.w	d0
000163E6                            
000163E6                            loc_14A3E:
000163E6 4A40                       		tst.w	d0
000163E8 679C                       		beq.s	loc_149DE
000163EA 6B00                       		bmi.s	loc_14A5A
000163EC 0C00 0010                  		cmpi.b	#$10,d0
000163F0 6700                       		beq.s	loc_14A66
000163F2 3202                       		move.w	d2,d1
000163F4 0241 000F                  		andi.w	#$F,d1
000163F8 D041                       		add.w	d1,d0
000163FA 323C 000F                  		move.w	#$F,d1
000163FE 9240                       		sub.w	d0,d1
00016400 4E75                       		rts	
00016402                            ; ===========================================================================
00016402                            
00016402                            loc_14A5A:
00016402 3202                       		move.w	d2,d1
00016404 0241 000F                  		andi.w	#$F,d1
00016408 D041                       		add.w	d1,d0
0001640A 6A00 FF7A                  		bpl.w	loc_149DE
0001640E                            
0001640E                            loc_14A66:
0001640E 944B                       		sub.w	a3,d2
00016410 6100 0000                  		bsr.w	FindFloor2
00016414 D44B                       		add.w	a3,d2
00016416 0441 0010                  		subi.w	#$10,d1
0001641A 4E75                       		rts	
0001641C                            ; End of function FindFloor
0001641C                            
0001641C                            
0001641C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001641C                            
0001641C                            
0001641C                            FindFloor2:				; XREF: FindFloor
0001641C 6100 FEE6                  		bsr.w	Floor_ChkTile
00016420 3011                       		move.w	(a1),d0
00016422 3800                       		move.w	d0,d4
00016424 0240 07FF                  		andi.w	#$7FF,d0
00016428 6700                       		beq.s	loc_14A86
0001642A 0B04                       		btst	d5,d4
0001642C 6600                       		bne.s	loc_14A94
0001642E                            
0001642E                            loc_14A86:
0001642E 323C 000F                  		move.w	#$F,d1
00016432 3002                       		move.w	d2,d0
00016434 0240 000F                  		andi.w	#$F,d0
00016438 9240                       		sub.w	d0,d1
0001643A 4E75                       		rts	
0001643C                            ; ===========================================================================
0001643C                            
0001643C                            loc_14A94:
0001643C 2478 F796                  		movea.l	($FFFFF796).w,a2
00016440 1032 0000                  		move.b	(a2,d0.w),d0
00016444 0240 00FF                  		andi.w	#$FF,d0
00016448 67E4                       		beq.s	loc_14A86
0001644A 45F9 0000 0000             		lea	(AngleMap).l,a2
00016450 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016454 E948                       		lsl.w	#4,d0
00016456 3203                       		move.w	d3,d1
00016458 0804 000B                  		btst	#$B,d4
0001645C 6700                       		beq.s	loc_14ABA
0001645E 4641                       		not.w	d1
00016460 4414                       		neg.b	(a4)
00016462                            
00016462                            loc_14ABA:
00016462 0804 000C                  		btst	#$C,d4
00016466 6700                       		beq.s	loc_14ACA
00016468 0614 0040                  		addi.b	#$40,(a4)
0001646C 4414                       		neg.b	(a4)
0001646E 0414 0040                  		subi.b	#$40,(a4)
00016472                            
00016472                            loc_14ACA:
00016472 0241 000F                  		andi.w	#$F,d1
00016476 D240                       		add.w	d0,d1
00016478 45F9 0000 0000             		lea	(CollArray1).l,a2
0001647E 1032 1000                  		move.b	(a2,d1.w),d0
00016482 4880                       		ext.w	d0
00016484 BD44                       		eor.w	d6,d4
00016486 0804 000C                  		btst	#$C,d4
0001648A 6700                       		beq.s	loc_14AE6
0001648C 4440                       		neg.w	d0
0001648E                            
0001648E                            loc_14AE6:
0001648E 4A40                       		tst.w	d0
00016490 679C                       		beq.s	loc_14A86
00016492 6B00                       		bmi.s	loc_14AFC
00016494 3202                       		move.w	d2,d1
00016496 0241 000F                  		andi.w	#$F,d1
0001649A D041                       		add.w	d1,d0
0001649C 323C 000F                  		move.w	#$F,d1
000164A0 9240                       		sub.w	d0,d1
000164A2 4E75                       		rts	
000164A4                            ; ===========================================================================
000164A4                            
000164A4                            loc_14AFC:
000164A4 3202                       		move.w	d2,d1
000164A6 0241 000F                  		andi.w	#$F,d1
000164AA D041                       		add.w	d1,d0
000164AC 6A00 FF80                  		bpl.w	loc_14A86
000164B0 4641                       		not.w	d1
000164B2 4E75                       		rts	
000164B4                            ; End of function FindFloor2
000164B4                            
000164B4                            
000164B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000164B4                            
000164B4                            
000164B4                            FindWall:				; XREF: Sonic_WalkVertR; et al
000164B4 6100 FE4E                  		bsr.w	Floor_ChkTile
000164B8 3011                       		move.w	(a1),d0
000164BA 3800                       		move.w	d0,d4
000164BC 0240 07FF                  		andi.w	#$7FF,d0
000164C0 6700                       		beq.s	loc_14B1E
000164C2 0B04                       		btst	d5,d4
000164C4 6600                       		bne.s	loc_14B2C
000164C6                            
000164C6                            loc_14B1E:
000164C6 D64B                       		add.w	a3,d3
000164C8 6100 0000                  		bsr.w	FindWall2
000164CC 964B                       		sub.w	a3,d3
000164CE 0641 0010                  		addi.w	#$10,d1
000164D2 4E75                       		rts	
000164D4                            ; ===========================================================================
000164D4                            
000164D4                            loc_14B2C:
000164D4 2478 F796                  		movea.l	($FFFFF796).w,a2
000164D8 1032 0000                  		move.b	(a2,d0.w),d0
000164DC 0240 00FF                  		andi.w	#$FF,d0
000164E0 67E4                       		beq.s	loc_14B1E
000164E2 45F9 0000 0000             		lea	(AngleMap).l,a2
000164E8 18B2 0000                  		move.b	(a2,d0.w),(a4)
000164EC E948                       		lsl.w	#4,d0
000164EE 3202                       		move.w	d2,d1
000164F0 0804 000C                  		btst	#$C,d4
000164F4 6700                       		beq.s	loc_14B5A
000164F6 4641                       		not.w	d1
000164F8 0614 0040                  		addi.b	#$40,(a4)
000164FC 4414                       		neg.b	(a4)
000164FE 0414 0040                  		subi.b	#$40,(a4)
00016502                            
00016502                            loc_14B5A:
00016502 0804 000B                  		btst	#$B,d4
00016506 6700                       		beq.s	loc_14B62
00016508 4414                       		neg.b	(a4)
0001650A                            
0001650A                            loc_14B62:
0001650A 0241 000F                  		andi.w	#$F,d1
0001650E D240                       		add.w	d0,d1
00016510 45F9 0000 0000             		lea	(CollArray2).l,a2
00016516 1032 1000                  		move.b	(a2,d1.w),d0
0001651A 4880                       		ext.w	d0
0001651C BD44                       		eor.w	d6,d4
0001651E 0804 000B                  		btst	#$B,d4
00016522 6700                       		beq.s	loc_14B7E
00016524 4440                       		neg.w	d0
00016526                            
00016526                            loc_14B7E:
00016526 4A40                       		tst.w	d0
00016528 679C                       		beq.s	loc_14B1E
0001652A 6B00                       		bmi.s	loc_14B9A
0001652C 0C00 0010                  		cmpi.b	#$10,d0
00016530 6700                       		beq.s	loc_14BA6
00016532 3203                       		move.w	d3,d1
00016534 0241 000F                  		andi.w	#$F,d1
00016538 D041                       		add.w	d1,d0
0001653A 323C 000F                  		move.w	#$F,d1
0001653E 9240                       		sub.w	d0,d1
00016540 4E75                       		rts	
00016542                            ; ===========================================================================
00016542                            
00016542                            loc_14B9A:
00016542 3203                       		move.w	d3,d1
00016544 0241 000F                  		andi.w	#$F,d1
00016548 D041                       		add.w	d1,d0
0001654A 6A00 FF7A                  		bpl.w	loc_14B1E
0001654E                            
0001654E                            loc_14BA6:
0001654E 964B                       		sub.w	a3,d3
00016550 6100 0000                  		bsr.w	FindWall2
00016554 D64B                       		add.w	a3,d3
00016556 0441 0010                  		subi.w	#$10,d1
0001655A 4E75                       		rts	
0001655C                            ; End of function FindWall
0001655C                            
0001655C                            
0001655C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001655C                            
0001655C                            
0001655C                            FindWall2:				; XREF: FindWall
0001655C 6100 FDA6                  		bsr.w	Floor_ChkTile
00016560 3011                       		move.w	(a1),d0
00016562 3800                       		move.w	d0,d4
00016564 0240 07FF                  		andi.w	#$7FF,d0
00016568 6700                       		beq.s	loc_14BC6
0001656A 0B04                       		btst	d5,d4
0001656C 6600                       		bne.s	loc_14BD4
0001656E                            
0001656E                            loc_14BC6:
0001656E 323C 000F                  		move.w	#$F,d1
00016572 3003                       		move.w	d3,d0
00016574 0240 000F                  		andi.w	#$F,d0
00016578 9240                       		sub.w	d0,d1
0001657A 4E75                       		rts	
0001657C                            ; ===========================================================================
0001657C                            
0001657C                            loc_14BD4:
0001657C 2478 F796                  		movea.l	($FFFFF796).w,a2
00016580 1032 0000                  		move.b	(a2,d0.w),d0
00016584 0240 00FF                  		andi.w	#$FF,d0
00016588 67E4                       		beq.s	loc_14BC6
0001658A 45F9 0000 0000             		lea	(AngleMap).l,a2
00016590 18B2 0000                  		move.b	(a2,d0.w),(a4)
00016594 E948                       		lsl.w	#4,d0
00016596 3202                       		move.w	d2,d1
00016598 0804 000C                  		btst	#$C,d4
0001659C 6700                       		beq.s	loc_14C02
0001659E 4641                       		not.w	d1
000165A0 0614 0040                  		addi.b	#$40,(a4)
000165A4 4414                       		neg.b	(a4)
000165A6 0414 0040                  		subi.b	#$40,(a4)
000165AA                            
000165AA                            loc_14C02:
000165AA 0804 000B                  		btst	#$B,d4
000165AE 6700                       		beq.s	loc_14C0A
000165B0 4414                       		neg.b	(a4)
000165B2                            
000165B2                            loc_14C0A:
000165B2 0241 000F                  		andi.w	#$F,d1
000165B6 D240                       		add.w	d0,d1
000165B8 45F9 0000 0000             		lea	(CollArray2).l,a2
000165BE 1032 1000                  		move.b	(a2,d1.w),d0
000165C2 4880                       		ext.w	d0
000165C4 BD44                       		eor.w	d6,d4
000165C6 0804 000B                  		btst	#$B,d4
000165CA 6700                       		beq.s	loc_14C26
000165CC 4440                       		neg.w	d0
000165CE                            
000165CE                            loc_14C26:
000165CE 4A40                       		tst.w	d0
000165D0 679C                       		beq.s	loc_14BC6
000165D2 6B00                       		bmi.s	loc_14C3C
000165D4 3203                       		move.w	d3,d1
000165D6 0241 000F                  		andi.w	#$F,d1
000165DA D041                       		add.w	d1,d0
000165DC 323C 000F                  		move.w	#$F,d1
000165E0 9240                       		sub.w	d0,d1
000165E2 4E75                       		rts	
000165E4                            ; ===========================================================================
000165E4                            
000165E4                            loc_14C3C:
000165E4 3203                       		move.w	d3,d1
000165E6 0241 000F                  		andi.w	#$F,d1
000165EA D041                       		add.w	d1,d0
000165EC 6A00 FF80                  		bpl.w	loc_14BC6
000165F0 4641                       		not.w	d1
000165F2 4E75                       		rts	
000165F4                            ; End of function FindWall2
000165F4                            
000165F4                            ; ---------------------------------------------------------------------------
000165F4                            ; Unused floor/wall subroutine - logs something	to do with collision
000165F4                            ; ---------------------------------------------------------------------------
000165F4                            
000165F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000165F4                            
000165F4                            
000165F4                            FloorLog_Unk:				; XREF: Level
000165F4 4E75                       		rts	
000165F6                            
000165F6 43F9 0000 0000             		lea	(CollArray1).l,a1
000165FC 45F9 0000 0000             		lea	(CollArray1).l,a2
00016602 363C 00FF                  		move.w	#$FF,d3
00016606                            
00016606                            loc_14C5E:
00016606 7A10                       		moveq	#$10,d5
00016608 343C 000F                  		move.w	#$F,d2
0001660C                            
0001660C                            loc_14C64:
0001660C 7800                       		moveq	#0,d4
0001660E 323C 000F                  		move.w	#$F,d1
00016612                            
00016612                            loc_14C6A:
00016612 3019                       		move.w	(a1)+,d0
00016614 EAA8                       		lsr.l	d5,d0
00016616 D944                       		addx.w	d4,d4
00016618 51C9 FFF8                  		dbf	d1,loc_14C6A
0001661C                            
0001661C 34C4                       		move.w	d4,(a2)+
0001661E 92FC 0020                  		suba.w	#$20,a1
00016622 5345                       		subq.w	#1,d5
00016624 51CA FFE6                  		dbf	d2,loc_14C64
00016628                            
00016628 D2FC 0020                  		adda.w	#$20,a1
0001662C 51CB FFD8                  		dbf	d3,loc_14C5E
00016630                            
00016630 43F9 0000 0000             		lea	(CollArray1).l,a1
00016636 45F9 0000 0000             		lea	(CollArray2).l,a2
0001663C 6100                       		bsr.s	FloorLog_Unk2
0001663E 43F9 0000 0000             		lea	(CollArray1).l,a1
00016644 45F9 0000 0000             		lea	(CollArray1).l,a2
0001664A                            
0001664A                            ; End of function FloorLog_Unk
0001664A                            
0001664A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001664A                            
0001664A                            
0001664A                            FloorLog_Unk2:				; XREF: FloorLog_Unk
0001664A 363C 0FFF                  		move.w	#$FFF,d3
0001664E                            
0001664E                            loc_14CA6:
0001664E 7400                       		moveq	#0,d2
00016650 323C 000F                  		move.w	#$F,d1
00016654 3019                       		move.w	(a1)+,d0
00016656 6700                       		beq.s	loc_14CD4
00016658 6B00                       		bmi.s	loc_14CBE
0001665A                            
0001665A                            loc_14CB2:
0001665A E248                       		lsr.w	#1,d0
0001665C 6400                       		bcc.s	loc_14CB8
0001665E 5202                       		addq.b	#1,d2
00016660                            
00016660                            loc_14CB8:
00016660 51C9 FFF8                  		dbf	d1,loc_14CB2
00016664                            
00016664 6000                       		bra.s	loc_14CD6
00016666                            ; ===========================================================================
00016666                            
00016666                            loc_14CBE:
00016666 0C40 FFFF                  		cmpi.w	#-1,d0
0001666A 6700                       		beq.s	loc_14CD0
0001666C                            
0001666C                            loc_14CC4:
0001666C E348                       		lsl.w	#1,d0
0001666E 6400                       		bcc.s	loc_14CCA
00016670 5302                       		subq.b	#1,d2
00016672                            
00016672                            loc_14CCA:
00016672 51C9 FFF8                  		dbf	d1,loc_14CC4
00016676                            
00016676 6000                       		bra.s	loc_14CD6
00016678                            ; ===========================================================================
00016678                            
00016678                            loc_14CD0:
00016678 303C 0010                  		move.w	#$10,d0
0001667C                            
0001667C                            loc_14CD4:
0001667C 3400                       		move.w	d0,d2
0001667E                            
0001667E                            loc_14CD6:
0001667E 14C2                       		move.b	d2,(a2)+
00016680 51CB FFCC                  		dbf	d3,loc_14CA6
00016684                            
00016684 4E75                       		rts	
00016686                            
00016686                            ; End of function FloorLog_Unk2
00016686                            
00016686                            
00016686                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016686                            
00016686                            
00016686                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00016686 2628 0008                  		move.l	8(a0),d3
0001668A 2428 000C                  		move.l	$C(a0),d2
0001668E 3228 0010                  		move.w	$10(a0),d1
00016692 48C1                       		ext.l	d1
00016694 E181                       		asl.l	#8,d1
00016696 D681                       		add.l	d1,d3
00016698 3228 0012                  		move.w	$12(a0),d1
0001669C 48C1                       		ext.l	d1
0001669E E181                       		asl.l	#8,d1
000166A0 D481                       		add.l	d1,d2
000166A2 4842                       		swap	d2
000166A4 4843                       		swap	d3
000166A6 11C0 F768                  		move.b	d0,($FFFFF768).w
000166AA 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000166AE 1200                       		move.b	d0,d1
000166B0 0600 0020                  		addi.b	#$20,d0
000166B4 6A00                       		bpl.s	loc_14D1A
000166B6 1001                       		move.b	d1,d0
000166B8 6A00                       		bpl.s	loc_14D14
000166BA 5300                       		subq.b	#1,d0
000166BC                            
000166BC                            loc_14D14:
000166BC 0600 0020                  		addi.b	#$20,d0
000166C0 6000                       		bra.s	loc_14D24
000166C2                            ; ===========================================================================
000166C2                            
000166C2                            loc_14D1A:
000166C2 1001                       		move.b	d1,d0
000166C4 6A00                       		bpl.s	loc_14D20
000166C6 5200                       		addq.b	#1,d0
000166C8                            
000166C8                            loc_14D20:
000166C8 0600 001F                  		addi.b	#$1F,d0
000166CC                            
000166CC                            loc_14D24:
000166CC 0200 00C0                  		andi.b	#$C0,d0
000166D0 6700 0000                  		beq.w	loc_14DF0
000166D4 0C00 0080                  		cmpi.b	#$80,d0
000166D8 6700 0000                  		beq.w	loc_14F7C
000166DC 0201 0038                  		andi.b	#$38,d1
000166E0 6600                       		bne.s	loc_14D3C
000166E2 5042                       		addq.w	#8,d2
000166E4                            
000166E4                            loc_14D3C:
000166E4 0C00 0040                  		cmpi.b	#$40,d0
000166E8 6700 0000                  		beq.w	loc_1504A
000166EC 6000 0000                  		bra.w	loc_14EBC
000166F0                            
000166F0                            ; End of function Sonic_WalkSpeed
000166F0                            
000166F0                            
000166F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000166F0                            
000166F0                            
000166F0                            sub_14D48:				; XREF: Sonic_Jump
000166F0 11C0 F768                  		move.b	d0,($FFFFF768).w
000166F4 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000166F8 0600 0020                  		addi.b	#$20,d0
000166FC 0200 00C0                  		andi.b	#$C0,d0
00016700 0C00 0040                  		cmpi.b	#$40,d0
00016704 6700 0000                  		beq.w	loc_14FD6
00016708 0C00 0080                  		cmpi.b	#$80,d0
0001670C 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00016710 0C00 00C0                  		cmpi.b	#$C0,d0
00016714 6700 0000                  		beq.w	sub_14E50
00016718                            
00016718                            ; End of function sub_14D48
00016718                            
00016718                            ; ---------------------------------------------------------------------------
00016718                            ; Subroutine to	make Sonic land	on the floor after jumping
00016718                            ; ---------------------------------------------------------------------------
00016718                            
00016718                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016718                            
00016718                            
00016718                            Sonic_HitFloor:				; XREF: Sonic_Floor
00016718 3428 000C                  		move.w	$C(a0),d2
0001671C 3628 0008                  		move.w	8(a0),d3
00016720 7000                       		moveq	#0,d0
00016722 1028 0016                  		move.b	$16(a0),d0
00016726 4880                       		ext.w	d0
00016728 D440                       		add.w	d0,d2
0001672A 1028 0017                  		move.b	$17(a0),d0
0001672E 4880                       		ext.w	d0
00016730 D640                       		add.w	d0,d3
00016732 49F8 F768                  		lea	($FFFFF768).w,a4
00016736 367C 0010                  		movea.w	#$10,a3
0001673A 3C3C 0000                  		move.w	#0,d6
0001673E 7A0D                       		moveq	#$D,d5
00016740 6100 FC34                  		bsr.w	FindFloor
00016744 3F01                       		move.w	d1,-(sp)
00016746 3428 000C                  		move.w	$C(a0),d2
0001674A 3628 0008                  		move.w	8(a0),d3
0001674E 7000                       		moveq	#0,d0
00016750 1028 0016                  		move.b	$16(a0),d0
00016754 4880                       		ext.w	d0
00016756 D440                       		add.w	d0,d2
00016758 1028 0017                  		move.b	$17(a0),d0
0001675C 4880                       		ext.w	d0
0001675E 9640                       		sub.w	d0,d3
00016760 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016764 367C 0010                  		movea.w	#$10,a3
00016768 3C3C 0000                  		move.w	#0,d6
0001676C 7A0D                       		moveq	#$D,d5
0001676E 6100 FC06                  		bsr.w	FindFloor
00016772 301F                       		move.w	(sp)+,d0
00016774 143C 0000                  		move.b	#0,d2
00016778                            
00016778                            loc_14DD0:
00016778 1638 F76A                  		move.b	($FFFFF76A).w,d3
0001677C B240                       		cmp.w	d0,d1
0001677E 6F00                       		ble.s	loc_14DDE
00016780 1638 F768                  		move.b	($FFFFF768).w,d3
00016784 C141                       		exg	d0,d1
00016786                            
00016786                            loc_14DDE:
00016786 0803 0000                  		btst	#0,d3
0001678A 6700                       		beq.s	locret_14DE6
0001678C 1602                       		move.b	d2,d3
0001678E                            
0001678E                            locret_14DE6:
0001678E 4E75                       		rts	
00016790                            
00016790                            ; End of function Sonic_HitFloor
00016790                            
00016790                            ; ===========================================================================
00016790 3428 000C                  		move.w	$C(a0),d2
00016794 3628 0008                  		move.w	8(a0),d3
00016798                            
00016798                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00016798 0642 000A                  		addi.w	#$A,d2
0001679C 49F8 F768                  		lea	($FFFFF768).w,a4
000167A0 367C 0010                  		movea.w	#$10,a3
000167A4 3C3C 0000                  		move.w	#0,d6
000167A8 7A0E                       		moveq	#$E,d5
000167AA 6100 FBCA                  		bsr.w	FindFloor
000167AE 143C 0000                  		move.b	#0,d2
000167B2                            
000167B2                            loc_14E0A:				; XREF: sub_14EB4
000167B2 1638 F768                  		move.b	($FFFFF768).w,d3
000167B6 0803 0000                  		btst	#0,d3
000167BA 6700                       		beq.s	locret_14E16
000167BC 1602                       		move.b	d2,d3
000167BE                            
000167BE                            locret_14E16:
000167BE 4E75                       		rts	
000167C0                            
000167C0                            ; ---------------------------------------------------------------------------
000167C0                            ; Subroutine allowing objects to interact with the floor
000167C0                            ; ---------------------------------------------------------------------------
000167C0                            
000167C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000167C0                            
000167C0                            
000167C0                            ObjHitFloor:
000167C0 3628 0008                  		move.w	8(a0),d3
000167C4                            
000167C4                            ; End of function ObjHitFloor
000167C4                            
000167C4                            
000167C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000167C4                            
000167C4                            
000167C4                            ObjHitFloor2:
000167C4 3428 000C                  		move.w	$C(a0),d2
000167C8 7000                       		moveq	#0,d0
000167CA 1028 0016                  		move.b	$16(a0),d0
000167CE 4880                       		ext.w	d0
000167D0 D440                       		add.w	d0,d2
000167D2 49F8 F768                  		lea	($FFFFF768).w,a4
000167D6 18BC 0000                  		move.b	#0,(a4)
000167DA 367C 0010                  		movea.w	#$10,a3
000167DE 3C3C 0000                  		move.w	#0,d6
000167E2 7A0D                       		moveq	#$D,d5
000167E4 6100 FB90                  		bsr.w	FindFloor
000167E8 1638 F768                  		move.b	($FFFFF768).w,d3
000167EC 0803 0000                  		btst	#0,d3
000167F0 6700                       		beq.s	locret_14E4E
000167F2 163C 0000                  		move.b	#0,d3
000167F6                            
000167F6                            locret_14E4E:
000167F6 4E75                       		rts	
000167F8                            ; End of function ObjHitFloor2
000167F8                            
000167F8                            
000167F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000167F8                            
000167F8                            
000167F8                            sub_14E50:				; XREF: sub_14D48
000167F8 3428 000C                  		move.w	$C(a0),d2
000167FC 3628 0008                  		move.w	8(a0),d3
00016800 7000                       		moveq	#0,d0
00016802 1028 0017                  		move.b	$17(a0),d0
00016806 4880                       		ext.w	d0
00016808 9440                       		sub.w	d0,d2
0001680A 1028 0016                  		move.b	$16(a0),d0
0001680E 4880                       		ext.w	d0
00016810 D640                       		add.w	d0,d3
00016812 49F8 F768                  		lea	($FFFFF768).w,a4
00016816 367C 0010                  		movea.w	#$10,a3
0001681A 3C3C 0000                  		move.w	#0,d6
0001681E 7A0E                       		moveq	#$E,d5
00016820 6100 FC92                  		bsr.w	FindWall
00016824 3F01                       		move.w	d1,-(sp)
00016826 3428 000C                  		move.w	$C(a0),d2
0001682A 3628 0008                  		move.w	8(a0),d3
0001682E 7000                       		moveq	#0,d0
00016830 1028 0017                  		move.b	$17(a0),d0
00016834 4880                       		ext.w	d0
00016836 D440                       		add.w	d0,d2
00016838 1028 0016                  		move.b	$16(a0),d0
0001683C 4880                       		ext.w	d0
0001683E D640                       		add.w	d0,d3
00016840 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016844 367C 0010                  		movea.w	#$10,a3
00016848 3C3C 0000                  		move.w	#0,d6
0001684C 7A0E                       		moveq	#$E,d5
0001684E 6100 FC64                  		bsr.w	FindWall
00016852 301F                       		move.w	(sp)+,d0
00016854 143C 00C0                  		move.b	#-$40,d2
00016858 6000 FF1E                  		bra.w	loc_14DD0
0001685C                            
0001685C                            ; End of function sub_14E50
0001685C                            
0001685C                            
0001685C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001685C                            
0001685C                            
0001685C                            sub_14EB4:				; XREF: Sonic_Floor
0001685C 3428 000C                  		move.w	$C(a0),d2
00016860 3628 0008                  		move.w	8(a0),d3
00016864                            
00016864                            loc_14EBC:
00016864 0643 000A                  		addi.w	#$A,d3
00016868 49F8 F768                  		lea	($FFFFF768).w,a4
0001686C 367C 0010                  		movea.w	#$10,a3
00016870 3C3C 0000                  		move.w	#0,d6
00016874 7A0E                       		moveq	#$E,d5
00016876 6100 FC3C                  		bsr.w	FindWall
0001687A 143C 00C0                  		move.b	#-$40,d2
0001687E 6000 FF32                  		bra.w	loc_14E0A
00016882                            
00016882                            ; End of function sub_14EB4
00016882                            
00016882                            ; ---------------------------------------------------------------------------
00016882                            ; Subroutine to	detect when an object hits a wall to its right
00016882                            ; ---------------------------------------------------------------------------
00016882                            
00016882                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016882                            
00016882                            
00016882                            ObjHitWallRight:
00016882 D668 0008                  		add.w	8(a0),d3
00016886 3428 000C                  		move.w	$C(a0),d2
0001688A 49F8 F768                  		lea	($FFFFF768).w,a4
0001688E 18BC 0000                  		move.b	#0,(a4)
00016892 367C 0010                  		movea.w	#$10,a3
00016896 3C3C 0000                  		move.w	#0,d6
0001689A 7A0E                       		moveq	#$E,d5
0001689C 6100 FC16                  		bsr.w	FindWall
000168A0 1638 F768                  		move.b	($FFFFF768).w,d3
000168A4 0803 0000                  		btst	#0,d3
000168A8 6700                       		beq.s	locret_14F06
000168AA 163C 00C0                  		move.b	#-$40,d3
000168AE                            
000168AE                            locret_14F06:
000168AE 4E75                       		rts	
000168B0                            
000168B0                            ; End of function ObjHitWallRight
000168B0                            
000168B0                            ; ---------------------------------------------------------------------------
000168B0                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
000168B0                            ; touches them
000168B0                            ; ---------------------------------------------------------------------------
000168B0                            
000168B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000168B0                            
000168B0                            
000168B0                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
000168B0 3428 000C                  		move.w	$C(a0),d2
000168B4 3628 0008                  		move.w	8(a0),d3
000168B8 7000                       		moveq	#0,d0
000168BA 1028 0016                  		move.b	$16(a0),d0
000168BE 4880                       		ext.w	d0
000168C0 9440                       		sub.w	d0,d2
000168C2 0A42 000F                  		eori.w	#$F,d2
000168C6 1028 0017                  		move.b	$17(a0),d0
000168CA 4880                       		ext.w	d0
000168CC D640                       		add.w	d0,d3
000168CE 49F8 F768                  		lea	($FFFFF768).w,a4
000168D2 367C FFF0                  		movea.w	#-$10,a3
000168D6 3C3C 1000                  		move.w	#$1000,d6
000168DA 7A0E                       		moveq	#$E,d5
000168DC 6100 FA98                  		bsr.w	FindFloor
000168E0 3F01                       		move.w	d1,-(sp)
000168E2 3428 000C                  		move.w	$C(a0),d2
000168E6 3628 0008                  		move.w	8(a0),d3
000168EA 7000                       		moveq	#0,d0
000168EC 1028 0016                  		move.b	$16(a0),d0
000168F0 4880                       		ext.w	d0
000168F2 9440                       		sub.w	d0,d2
000168F4 0A42 000F                  		eori.w	#$F,d2
000168F8 1028 0017                  		move.b	$17(a0),d0
000168FC 4880                       		ext.w	d0
000168FE 9640                       		sub.w	d0,d3
00016900 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016904 367C FFF0                  		movea.w	#-$10,a3
00016908 3C3C 1000                  		move.w	#$1000,d6
0001690C 7A0E                       		moveq	#$E,d5
0001690E 6100 FA66                  		bsr.w	FindFloor
00016912 301F                       		move.w	(sp)+,d0
00016914 143C 0080                  		move.b	#-$80,d2
00016918 6000 FE5E                  		bra.w	loc_14DD0
0001691C                            ; End of function Sonic_DontRunOnWalls
0001691C                            
0001691C                            ; ===========================================================================
0001691C 3428 000C                  		move.w	$C(a0),d2
00016920 3628 0008                  		move.w	8(a0),d3
00016924                            
00016924                            loc_14F7C:
00016924 0442 000A                  		subi.w	#$A,d2
00016928 0A42 000F                  		eori.w	#$F,d2
0001692C 49F8 F768                  		lea	($FFFFF768).w,a4
00016930 367C FFF0                  		movea.w	#-$10,a3
00016934 3C3C 1000                  		move.w	#$1000,d6
00016938 7A0E                       		moveq	#$E,d5
0001693A 6100 FA3A                  		bsr.w	FindFloor
0001693E 143C 0080                  		move.b	#-$80,d2
00016942 6000 FE6E                  		bra.w	loc_14E0A
00016946                            
00016946                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016946                            
00016946                            
00016946                            ObjHitCeiling:
00016946 3428 000C                  		move.w	$C(a0),d2
0001694A 3628 0008                  		move.w	8(a0),d3
0001694E 7000                       		moveq	#0,d0
00016950 1028 0016                  		move.b	$16(a0),d0
00016954 4880                       		ext.w	d0
00016956 9440                       		sub.w	d0,d2
00016958 0A42 000F                  		eori.w	#$F,d2
0001695C 49F8 F768                  		lea	($FFFFF768).w,a4
00016960 367C FFF0                  		movea.w	#-$10,a3
00016964 3C3C 1000                  		move.w	#$1000,d6
00016968 7A0E                       		moveq	#$E,d5
0001696A 6100 FA0A                  		bsr.w	FindFloor
0001696E 1638 F768                  		move.b	($FFFFF768).w,d3
00016972 0803 0000                  		btst	#0,d3
00016976 6700                       		beq.s	locret_14FD4
00016978 163C 0080                  		move.b	#-$80,d3
0001697C                            
0001697C                            locret_14FD4:
0001697C 4E75                       		rts	
0001697E                            ; End of function ObjHitCeiling
0001697E                            
0001697E                            ; ===========================================================================
0001697E                            
0001697E                            loc_14FD6:				; XREF: sub_14D48
0001697E 3428 000C                  		move.w	$C(a0),d2
00016982 3628 0008                  		move.w	8(a0),d3
00016986 7000                       		moveq	#0,d0
00016988 1028 0017                  		move.b	$17(a0),d0
0001698C 4880                       		ext.w	d0
0001698E 9440                       		sub.w	d0,d2
00016990 1028 0016                  		move.b	$16(a0),d0
00016994 4880                       		ext.w	d0
00016996 9640                       		sub.w	d0,d3
00016998 0A43 000F                  		eori.w	#$F,d3
0001699C 49F8 F768                  		lea	($FFFFF768).w,a4
000169A0 367C FFF0                  		movea.w	#-$10,a3
000169A4 3C3C 0800                  		move.w	#$800,d6
000169A8 7A0E                       		moveq	#$E,d5
000169AA 6100 FB08                  		bsr.w	FindWall
000169AE 3F01                       		move.w	d1,-(sp)
000169B0 3428 000C                  		move.w	$C(a0),d2
000169B4 3628 0008                  		move.w	8(a0),d3
000169B8 7000                       		moveq	#0,d0
000169BA 1028 0017                  		move.b	$17(a0),d0
000169BE 4880                       		ext.w	d0
000169C0 D440                       		add.w	d0,d2
000169C2 1028 0016                  		move.b	$16(a0),d0
000169C6 4880                       		ext.w	d0
000169C8 9640                       		sub.w	d0,d3
000169CA 0A43 000F                  		eori.w	#$F,d3
000169CE 49F8 F76A                  		lea	($FFFFF76A).w,a4
000169D2 367C FFF0                  		movea.w	#-$10,a3
000169D6 3C3C 0800                  		move.w	#$800,d6
000169DA 7A0E                       		moveq	#$E,d5
000169DC 6100 FAD6                  		bsr.w	FindWall
000169E0 301F                       		move.w	(sp)+,d0
000169E2 143C 0040                  		move.b	#$40,d2
000169E6 6000 FD90                  		bra.w	loc_14DD0
000169EA                            
000169EA                            ; ---------------------------------------------------------------------------
000169EA                            ; Subroutine to	stop Sonic when	he jumps at a wall
000169EA                            ; ---------------------------------------------------------------------------
000169EA                            
000169EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000169EA                            
000169EA                            
000169EA                            Sonic_HitWall:				; XREF: Sonic_Floor
000169EA 3428 000C                  		move.w	$C(a0),d2
000169EE 3628 0008                  		move.w	8(a0),d3
000169F2                            
000169F2                            loc_1504A:
000169F2 0443 000A                  		subi.w	#$A,d3
000169F6 0A43 000F                  		eori.w	#$F,d3
000169FA 49F8 F768                  		lea	($FFFFF768).w,a4
000169FE 367C FFF0                  		movea.w	#-$10,a3
00016A02 3C3C 0800                  		move.w	#$800,d6
00016A06 7A0E                       		moveq	#$E,d5
00016A08 6100 FAAA                  		bsr.w	FindWall
00016A0C 143C 0040                  		move.b	#$40,d2
00016A10 6000 FDA0                  		bra.w	loc_14E0A
00016A14                            ; End of function Sonic_HitWall
00016A14                            
00016A14                            ; ---------------------------------------------------------------------------
00016A14                            ; Subroutine to	detect when an object hits a wall to its left
00016A14                            ; ---------------------------------------------------------------------------
00016A14                            
00016A14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016A14                            
00016A14                            
00016A14                            ObjHitWallLeft:
00016A14 D668 0008                  		add.w	8(a0),d3
00016A18 3428 000C                  		move.w	$C(a0),d2
00016A1C 49F8 F768                  		lea	($FFFFF768).w,a4
00016A20 18BC 0000                  		move.b	#0,(a4)
00016A24 367C FFF0                  		movea.w	#-$10,a3
00016A28 3C3C 0800                  		move.w	#$800,d6
00016A2C 7A0E                       		moveq	#$E,d5
00016A2E 6100 FA84                  		bsr.w	FindWall
00016A32 1638 F768                  		move.b	($FFFFF768).w,d3
00016A36 0803 0000                  		btst	#0,d3
00016A3A 6700                       		beq.s	locret_15098
00016A3C 163C 0040                  		move.b	#$40,d3
00016A40                            
00016A40                            locret_15098:
00016A40 4E75                       		rts	
00016A42                            ; End of function ObjHitWallLeft
00016A42                            
00016A42                            ; ===========================================================================
00016A42                            ; ---------------------------------------------------------------------------
00016A42                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00016A42                            ; ---------------------------------------------------------------------------
00016A42                            
00016A42                            Obj66:					; XREF: Obj_Index
00016A42 7000                       		moveq	#0,d0
00016A44 1028 0024                  		move.b	$24(a0),d0
00016A48 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00016A4C 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00016A50                            ; ===========================================================================
00016A50 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00016A52 0000                       		dc.w Obj66_Action-Obj66_Index
00016A54 0000                       		dc.w Obj66_Display-Obj66_Index
00016A56 0000                       		dc.w Obj66_Release-Obj66_Index
00016A58                            ; ===========================================================================
00016A58                            
00016A58                            Obj66_Main:				; XREF: Obj66_Index
00016A58 5428 0024                  		addq.b	#2,$24(a0)
00016A5C 323C 0001                  		move.w	#1,d1
00016A60 2248                       		movea.l	a0,a1
00016A62 6000                       		bra.s	Obj66_MakeItem
00016A64                            ; ===========================================================================
00016A64                            
00016A64                            jmp_SingleObjLoad:
00016A64 4EF9 0000 E574             	jmp SingleObjLoad
00016A6A                            
00016A6A                            Obj66_Loop:
00016A6A 6100 FFF8                  		bsr.w	jmp_SingleObjLoad
00016A6E 6600                       		bne.s	loc_150FE
00016A70 12BC 0066                  		move.b	#$66,0(a1)
00016A74 5829 0024                  		addq.b	#4,$24(a1)
00016A78 3368 0008 0008             		move.w	8(a0),8(a1)
00016A7E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016A84 137C 0003 0018             		move.b	#3,$18(a1)
00016A8A 137C 0010 001A             		move.b	#$10,$1A(a1)
00016A90                            
00016A90                            Obj66_MakeItem:				; XREF: Obj66_Main
00016A90 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00016A98 337C 4348 0002             		move.w	#$4348,2(a1)
00016A9E 0029 0004 0001             		ori.b	#4,1(a1)
00016AA4 137C 0038 0019             		move.b	#$38,$19(a1)
00016AAA                            
00016AAA                            loc_150FE:
00016AAA 51C9 FFBE                  		dbf	d1,Obj66_Loop
00016AAE                            
00016AAE 117C 0030 0019             		move.b	#$30,$19(a0)
00016AB4 117C 0004 0018             		move.b	#4,$18(a0)
00016ABA 317C 003C 0030             		move.w	#$3C,$30(a0)
00016AC0 117C 0001 0034             		move.b	#1,$34(a0)
00016AC6 1168 0028 0038             		move.b	$28(a0),$38(a0)
00016ACC                            
00016ACC                            Obj66_Action:				; XREF: Obj66_Index
00016ACC 6100 0000                  		bsr.w	Obj66_ChkSwitch
00016AD0 4A28 0001                  		tst.b	1(a0)
00016AD4 6A00 0000                  		bpl.w	Obj66_Display
00016AD8 323C 0030                  		move.w	#$30,d1
00016ADC 3401                       		move.w	d1,d2
00016ADE 3602                       		move.w	d2,d3
00016AE0 5243                       		addq.w	#1,d3
00016AE2 3828 0008                  		move.w	8(a0),d4
00016AE6 6100 99E0                  		bsr.w	SolidObject
00016AEA 0828 0005 0022             		btst	#5,$22(a0)
00016AF0 6700 0000                  		beq.w	Obj66_Display
00016AF4 43F8 D000                  		lea	($FFFFD000).w,a1
00016AF8 720E                       		moveq	#$E,d1
00016AFA 3029 0008                  		move.w	8(a1),d0
00016AFE B068 0008                  		cmp.w	8(a0),d0
00016B02 6500                       		bcs.s	Obj66_GrabSonic
00016B04 7207                       		moveq	#7,d1
00016B06                            
00016B06                            Obj66_GrabSonic:
00016B06 B228 001A                  		cmp.b	$1A(a0),d1
00016B0A 6600                       		bne.s	Obj66_Display
00016B0C 1141 0032                  		move.b	d1,$32(a0)
00016B10 5828 0024                  		addq.b	#4,$24(a0)
00016B14 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00016B1A 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00016B20 337C 0800 0014             		move.w	#$800,$14(a1)
00016B26 337C 0000 0010             		move.w	#0,$10(a1)
00016B2C 337C 0000 0012             		move.w	#0,$12(a1)
00016B32 08A8 0005 0022             		bclr	#5,$22(a0)
00016B38 08A9 0005 0022             		bclr	#5,$22(a1)
00016B3E 08E9 0001 0022             		bset	#1,$22(a1)
00016B44 3429 0008                  		move.w	8(a1),d2
00016B48 3629 000C                  		move.w	$C(a1),d3
00016B4C 6100 0000                  		bsr.w	Obj66_ChgPos
00016B50 D569 0008                  		add.w	d2,8(a1)
00016B54 D769 000C                  		add.w	d3,$C(a1)
00016B58 E0E9 0008                  		asr	8(a1)
00016B5C E0E9 000C                  		asr	$C(a1)
00016B60                            
00016B60                            Obj66_Display:				; XREF: Obj66_Index
00016B60 6000 963E                  		bra.w	MarkObjGone
00016B64                            ; ===========================================================================
00016B64                            
00016B64                            Obj66_Release:				; XREF: Obj66_Index
00016B64 1028 001A                  		move.b	$1A(a0),d0
00016B68 0C00 0004                  		cmpi.b	#4,d0
00016B6C 6700                       		beq.s	loc_151C8
00016B6E 0C00 0007                  		cmpi.b	#7,d0
00016B72 6600                       		bne.s	loc_151F8
00016B74                            
00016B74                            loc_151C8:
00016B74 B028 0032                  		cmp.b	$32(a0),d0
00016B78 6700                       		beq.s	loc_151F8
00016B7A 43F8 D000                  		lea	($FFFFD000).w,a1
00016B7E 337C 0000 0010             		move.w	#0,$10(a1)
00016B84 337C 0800 0012             		move.w	#$800,$12(a1)
00016B8A 0C00 0004                  		cmpi.b	#4,d0
00016B8E 6700                       		beq.s	loc_151F0
00016B90 337C 0800 0010             		move.w	#$800,$10(a1)
00016B96 337C 0800 0012             		move.w	#$800,$12(a1)
00016B9C                            
00016B9C                            loc_151F0:
00016B9C 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00016BA0 5928 0024                  		subq.b	#4,$24(a0)
00016BA4                            
00016BA4                            loc_151F8:
00016BA4 6100                       		bsr.s	Obj66_ChkSwitch
00016BA6 6100                       		bsr.s	Obj66_ChgPos
00016BA8 6000 95F6                  		bra.w	MarkObjGone
00016BAC                            
00016BAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016BAC                            
00016BAC                            
00016BAC                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00016BAC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016BB0 7000                       		moveq	#0,d0
00016BB2 1028 0038                  		move.b	$38(a0),d0
00016BB6 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00016BBC 6700                       		beq.s	loc_15224	; if not, branch
00016BBE 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00016BC2 6600                       		bne.s	Obj66_Animate	; if yes, branch
00016BC4 4428 0034                  		neg.b	$34(a0)
00016BC8 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00016BCE 6000                       		bra.s	Obj66_Animate
00016BD0                            ; ===========================================================================
00016BD0                            
00016BD0                            loc_15224:
00016BD0 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00016BD4                            
00016BD4                            Obj66_Animate:
00016BD4 5328 001E                  		subq.b	#1,$1E(a0)
00016BD8 6A00                       		bpl.s	locret_15246
00016BDA 117C 0007 001E             		move.b	#7,$1E(a0)
00016BE0 1228 0034                  		move.b	$34(a0),d1
00016BE4 1028 001A                  		move.b	$1A(a0),d0
00016BE8 D001                       		add.b	d1,d0
00016BEA 0200 000F                  		andi.b	#$F,d0
00016BEE 1140 001A                  		move.b	d0,$1A(a0)
00016BF2                            
00016BF2                            locret_15246:
00016BF2 4E75                       		rts	
00016BF4                            ; End of function Obj66_ChkSwitch
00016BF4                            
00016BF4                            
00016BF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016BF4                            
00016BF4                            
00016BF4                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00016BF4 43F8 D000                  		lea	($FFFFD000).w,a1
00016BF8 7000                       		moveq	#0,d0
00016BFA 1028 001A                  		move.b	$1A(a0),d0
00016BFE D040                       		add.w	d0,d0
00016C00 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00016C04 101A                       		move.b	(a2)+,d0
00016C06 4880                       		ext.w	d0
00016C08 D068 0008                  		add.w	8(a0),d0
00016C0C 3340 0008                  		move.w	d0,8(a1)
00016C10 101A                       		move.b	(a2)+,d0
00016C12 4880                       		ext.w	d0
00016C14 D068 000C                  		add.w	$C(a0),d0
00016C18 3340 000C                  		move.w	d0,$C(a1)
00016C1C 4E75                       		rts	
00016C1E                            ; End of function Obj66_ChgPos
00016C1E                            
00016C1E                            ; ===========================================================================
00016C1E E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00016C22 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00016C26 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00016C2A 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00016C2E 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00016C32 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00016C36 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00016C3A E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00016C3E                            ; ---------------------------------------------------------------------------
00016C3E                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00016C3E                            ; ---------------------------------------------------------------------------
00016C3E                            Map_obj66:
00016C3E                            	include "_maps\obj66.asm"
00016C3E                            ; ---------------------------------------------------------------------------
00016C3E                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00016C3E                            ; ---------------------------------------------------------------------------
00016C3E 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00016C42 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00016C46 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00016C4A 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00016C4E 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00016C52 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00016C56 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00016C5A 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00016C5E 0000                       		dc.w byte_154A4-Map_obj66
00016C60 06                         byte_152B4:	dc.b 6
00016C61 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00016C66 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00016C6B E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00016C70 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00016C75 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00016C7A 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00016C7F 06                         byte_152D3:	dc.b 6
00016C80 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00016C85 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00016C8A F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00016C8F F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00016C94 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00016C99 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00016C9E 06                         byte_152F2:	dc.b 6
00016C9F 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00016CA4 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00016CA9 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00016CAE 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00016CB3 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00016CB8 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00016CBD 06                         byte_15311:	dc.b 6
00016CBE 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00016CC3 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00016CC8 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00016CCD 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00016CD2 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00016CD7 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00016CDC 06                         byte_15330:	dc.b 6
00016CDD 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00016CE2 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00016CE7 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00016CEC 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00016CF1 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00016CF6 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00016CFB 06                         byte_1534F:	dc.b 6
00016CFC 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00016D01 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00016D06 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00016D0B 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00016D10 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00016D15 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00016D1A 06                         byte_1536E:	dc.b 6
00016D1B 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00016D20 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00016D25 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00016D2A 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00016D2F 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00016D34 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00016D39 06                         byte_1538D:	dc.b 6
00016D3A 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00016D3F F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00016D44 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00016D49 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00016D4E 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00016D53 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00016D58 06                         byte_153AC:	dc.b 6
00016D59 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00016D5E 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00016D63 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00016D68 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00016D6D 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00016D72 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00016D77 06                         byte_153CB:	dc.b 6
00016D78 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00016D7D E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00016D82 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00016D87 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00016D8C F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00016D91 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00016D96 06                         byte_153EA:	dc.b 6
00016D97 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00016D9C E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00016DA1 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00016DA6 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00016DAB E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00016DB0 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00016DB5 06                         byte_15409:	dc.b 6
00016DB6 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00016DBB D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00016DC0 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00016DC5 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00016DCA E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00016DCF E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00016DD4 06                         byte_15428:	dc.b 6
00016DD5 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00016DDA D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00016DDF C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00016DE4 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00016DE9 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00016DEE E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00016DF3 06                         byte_15447:	dc.b 6
00016DF4 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00016DF9 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00016DFE CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00016E03 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00016E08 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00016E0D E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00016E12 06                         byte_15466:	dc.b 6
00016E13 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00016E18 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00016E1D D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00016E22 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00016E27 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00016E2C E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00016E31 06                         byte_15485:	dc.b 6
00016E32 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00016E37 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00016E3C DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00016E41 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00016E46 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00016E4B F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00016E50 0C                         byte_154A4:	dc.b $C
00016E51 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00016E56 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00016E5B E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00016E60 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00016E65 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00016E6A E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00016E6F 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00016E74 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00016E79 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00016E7E 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00016E83 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00016E88 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00016E8E 00                         		even
00016E8E 00                         		even
00016E8E                            
00016E8E                            ; ===========================================================================
00016E8E                            ; ---------------------------------------------------------------------------
00016E8E                            ; Object 67 - disc that	you run	around (SBZ)
00016E8E                            ; ---------------------------------------------------------------------------
00016E8E                            
00016E8E                            Obj67:					; XREF: Obj_Index
00016E8E 7000                       		moveq	#0,d0
00016E90 1028 0024                  		move.b	$24(a0),d0
00016E94 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00016E98 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00016E9C                            ; ===========================================================================
00016E9C 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00016E9E 0000                       		dc.w Obj67_Action-Obj67_Index
00016EA0                            ; ===========================================================================
00016EA0                            
00016EA0                            Obj67_Main:				; XREF: Obj67_Index
00016EA0 5428 0024                  		addq.b	#2,$24(a0)
00016EA4 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00016EAC 317C C344 0002             		move.w	#$C344,2(a0)
00016EB2 117C 0004 0001             		move.b	#4,1(a0)
00016EB8 117C 0004 0018             		move.b	#4,$18(a0)
00016EBE 117C 0008 0019             		move.b	#8,$19(a0)
00016EC4 3168 0008 0032             		move.w	8(a0),$32(a0)
00016ECA 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016ED0 117C 0018 0034             		move.b	#$18,$34(a0)
00016ED6 117C 0048 0038             		move.b	#$48,$38(a0)
00016EDC 1228 0028                  		move.b	$28(a0),d1	; get object type
00016EE0 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00016EE4 6700                       		beq.s	loc_15546
00016EE6 117C 0010 0034             		move.b	#$10,$34(a0)
00016EEC 117C 0038 0038             		move.b	#$38,$38(a0)
00016EF2                            
00016EF2                            loc_15546:
00016EF2 1228 0028                  		move.b	$28(a0),d1	; get object type
00016EF6 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00016EFA 4881                       		ext.w	d1
00016EFC E741                       		asl.w	#3,d1
00016EFE 3141 0036                  		move.w	d1,$36(a0)
00016F02 1028 0022                  		move.b	$22(a0),d0
00016F06 E418                       		ror.b	#2,d0
00016F08 0200 00C0                  		andi.b	#-$40,d0
00016F0C 1140 0026                  		move.b	d0,$26(a0)
00016F10                            
00016F10                            Obj67_Action:				; XREF: Obj67_Index
00016F10 6100 0000                  		bsr.w	Obj67_MoveSonic
00016F14 6100 0000                  		bsr.w	Obj67_MoveSpot
00016F18 6000 0000                  		bra.w	Obj67_ChkDel
00016F1C                            ; ===========================================================================
00016F1C                            
00016F1C                            Obj67_MoveSonic:			; XREF: Obj67_Action
00016F1C 7400                       		moveq	#0,d2
00016F1E 1428 0038                  		move.b	$38(a0),d2
00016F22 3602                       		move.w	d2,d3
00016F24 D643                       		add.w	d3,d3
00016F26 43F8 D000                  		lea	($FFFFD000).w,a1
00016F2A 3029 0008                  		move.w	8(a1),d0
00016F2E 9068 0032                  		sub.w	$32(a0),d0
00016F32 D042                       		add.w	d2,d0
00016F34 B043                       		cmp.w	d3,d0
00016F36 6400                       		bcc.s	loc_155A8
00016F38 3229 000C                  		move.w	$C(a1),d1
00016F3C 9268 0030                  		sub.w	$30(a0),d1
00016F40 D242                       		add.w	d2,d1
00016F42 B243                       		cmp.w	d3,d1
00016F44 6400                       		bcc.s	loc_155A8
00016F46 0829 0001 0022             		btst	#1,$22(a1)
00016F4C 6700                       		beq.s	loc_155B8
00016F4E 4228 003A                  		clr.b	$3A(a0)
00016F52 4E75                       		rts	
00016F54                            ; ===========================================================================
00016F54                            
00016F54                            loc_155A8:
00016F54 4A28 003A                  		tst.b	$3A(a0)
00016F58 6700                       		beq.s	locret_155B6
00016F5A 4229 0038                  		clr.b	$38(a1)
00016F5E 4228 003A                  		clr.b	$3A(a0)
00016F62                            
00016F62                            locret_155B6:
00016F62 4E75                       		rts	
00016F64                            ; ===========================================================================
00016F64                            
00016F64                            loc_155B8:
00016F64 4A28 003A                  		tst.b	$3A(a0)
00016F68 6600                       		bne.s	loc_155E2
00016F6A 117C 0001 003A             		move.b	#1,$3A(a0)
00016F70 0829 0002 0022             		btst	#2,$22(a1)
00016F76 6600                       		bne.s	loc_155D0
00016F78 4229 001C                  		clr.b	$1C(a1)
00016F7C                            
00016F7C                            loc_155D0:
00016F7C 08A9 0005 0022             		bclr	#5,$22(a1)
00016F82 137C 0001 001D             		move.b	#1,$1D(a1)
00016F88 137C 0001 0038             		move.b	#1,$38(a1)
00016F8E                            
00016F8E                            loc_155E2:
00016F8E 3029 0014                  		move.w	$14(a1),d0
00016F92 4A68 0036                  		tst.w	$36(a0)
00016F96 6A00                       		bpl.s	loc_15608
00016F98 0C40 FC00                  		cmpi.w	#-$400,d0
00016F9C 6F00                       		ble.s	loc_155FA
00016F9E 337C FC00 0014             		move.w	#-$400,$14(a1)
00016FA4 4E75                       		rts	
00016FA6                            ; ===========================================================================
00016FA6                            
00016FA6                            loc_155FA:
00016FA6 0C40 F100                  		cmpi.w	#-$F00,d0
00016FAA 6C00                       		bge.s	locret_15606
00016FAC 337C F100 0014             		move.w	#-$F00,$14(a1)
00016FB2                            
00016FB2                            locret_15606:
00016FB2 4E75                       		rts	
00016FB4                            ; ===========================================================================
00016FB4                            
00016FB4                            loc_15608:
00016FB4 0C40 0400                  		cmpi.w	#$400,d0
00016FB8 6C00                       		bge.s	loc_15616
00016FBA 337C 0400 0014             		move.w	#$400,$14(a1)
00016FC0 4E75                       		rts	
00016FC2                            ; ===========================================================================
00016FC2                            
00016FC2                            loc_15616:
00016FC2 0C40 0F00                  		cmpi.w	#$F00,d0
00016FC6 6F00                       		ble.s	locret_15622
00016FC8 337C 0F00 0014             		move.w	#$F00,$14(a1)
00016FCE                            
00016FCE                            locret_15622:
00016FCE 4E75                       		rts	
00016FD0                            ; ===========================================================================
00016FD0                            
00016FD0                            Obj67_MoveSpot:				; XREF: Obj67_Action
00016FD0 3028 0036                  		move.w	$36(a0),d0
00016FD4 D168 0026                  		add.w	d0,$26(a0)
00016FD8 1028 0026                  		move.b	$26(a0),d0
00016FDC 4EB9 0000 33D4             		jsr	(CalcSine).l
00016FE2 3428 0030                  		move.w	$30(a0),d2
00016FE6 3628 0032                  		move.w	$32(a0),d3
00016FEA 7800                       		moveq	#0,d4
00016FEC 1828 0034                  		move.b	$34(a0),d4
00016FF0 E14C                       		lsl.w	#8,d4
00016FF2 2A04                       		move.l	d4,d5
00016FF4 C9C0                       		muls.w	d0,d4
00016FF6 4844                       		swap	d4
00016FF8 CBC1                       		muls.w	d1,d5
00016FFA 4845                       		swap	d5
00016FFC D842                       		add.w	d2,d4
00016FFE DA43                       		add.w	d3,d5
00017000 3144 000C                  		move.w	d4,$C(a0)
00017004 3145 0008                  		move.w	d5,8(a0)
00017008 4E75                       		rts	
0001700A                            ; ===========================================================================
0001700A                            
0001700A                            Obj67_ChkDel:				; XREF: Obj67_Action
0001700A 3028 0032                  		move.w	$32(a0),d0
0001700E 0240 FF80                  		andi.w	#-$80,d0
00017012 3238 F700                  		move.w	($FFFFF700).w,d1
00017016 0441 0080                  		subi.w	#$80,d1
0001701A 0241 FF80                  		andi.w	#-$80,d1
0001701E 9041                       		sub.w	d1,d0
00017020 0C40 0280                  		cmpi.w	#$280,d0
00017024 6200                       		bhi.s	Obj67_Delete
00017026 4EF9 0000 E0DE             		jmp	DisplaySprite
0001702C                            ; ===========================================================================
0001702C                            
0001702C                            Obj67_Delete:
0001702C 4EF9 0000 E11A             		jmp	DeleteObject
00017032                            ; ===========================================================================
00017032                            ; ---------------------------------------------------------------------------
00017032                            ; Sprite mappings - disc that you run around (SBZ)
00017032                            ; (It's just a small blob that moves around in a circle. The disc itself is
00017032                            ; part of the level tiles.)
00017032                            ; ---------------------------------------------------------------------------
00017032                            Map_obj67:
00017032                            	include "_maps\obj67.asm"
00017032                            ; ---------------------------------------------------------------------------
00017032                            ; Sprite mappings - disc that you run around (SBZ)
00017032                            ; (It's just a small blob that moves around in a circle. The disc itself is
00017032                            ; part of the level tiles.)
00017032                            ; ---------------------------------------------------------------------------
00017032 0000                       		dc.w byte_15688-Map_obj67
00017034 01                         byte_15688:	dc.b 1
00017035 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001703A                            		even
0001703A                            		even
0001703A                            
0001703A                            ; ===========================================================================
0001703A                            ; ---------------------------------------------------------------------------
0001703A                            ; Object 68 - conveyor belts (SBZ)
0001703A                            ; ---------------------------------------------------------------------------
0001703A                            
0001703A                            Obj68:					; XREF: Obj_Index
0001703A 7000                       		moveq	#0,d0
0001703C 1028 0024                  		move.b	$24(a0),d0
00017040 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00017044 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00017048                            ; ===========================================================================
00017048 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
0001704A 0000                       		dc.w Obj68_Action-Obj68_Index
0001704C                            ; ===========================================================================
0001704C                            
0001704C                            Obj68_Main:				; XREF: Obj68_Index
0001704C 5428 0024                  		addq.b	#2,$24(a0)
00017050 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00017056 1228 0028                  		move.b	$28(a0),d1	; get object type
0001705A 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
0001705E 6700                       		beq.s	loc_156BA	; if zero, branch
00017060 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00017066                            
00017066                            loc_156BA:
00017066 1228 0028                  		move.b	$28(a0),d1	; get object type
0001706A 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001706E 4881                       		ext.w	d1
00017070 E841                       		asr.w	#4,d1
00017072 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00017076                            
00017076                            Obj68_Action:				; XREF: Obj68_Index
00017076 6100                       		bsr.s	Obj68_MoveSonic
00017078 3028 0008                  		move.w	8(a0),d0
0001707C 0240 FF80                  		andi.w	#$FF80,d0
00017080 3238 F700                  		move.w	($FFFFF700).w,d1
00017084 0441 0080                  		subi.w	#$80,d1
00017088 0241 FF80                  		andi.w	#$FF80,d1
0001708C 9041                       		sub.w	d1,d0
0001708E 0C40 0280                  		cmpi.w	#$280,d0
00017092 6200                       		bhi.s	Obj68_Delete
00017094 4E75                       		rts	
00017096                            ; ===========================================================================
00017096                            
00017096                            Obj68_Delete:
00017096 4EF9 0000 E11A             		jmp	DeleteObject
0001709C                            ; ===========================================================================
0001709C                            
0001709C                            Obj68_MoveSonic:			; XREF: Obj68_Action
0001709C 7400                       		moveq	#0,d2
0001709E 1428 0038                  		move.b	$38(a0),d2
000170A2 3602                       		move.w	d2,d3
000170A4 D643                       		add.w	d3,d3
000170A6 43F8 D000                  		lea	($FFFFD000).w,a1
000170AA 3029 0008                  		move.w	8(a1),d0
000170AE 9068 0008                  		sub.w	8(a0),d0
000170B2 D042                       		add.w	d2,d0
000170B4 B043                       		cmp.w	d3,d0
000170B6 6400                       		bcc.s	locret_1572E
000170B8 3229 000C                  		move.w	$C(a1),d1
000170BC 9268 000C                  		sub.w	$C(a0),d1
000170C0 0641 0030                  		addi.w	#$30,d1
000170C4 0C41 0030                  		cmpi.w	#$30,d1
000170C8 6400                       		bcc.s	locret_1572E
000170CA 0829 0001 0022             		btst	#1,$22(a1)
000170D0 6600                       		bne.s	locret_1572E
000170D2 3028 0036                  		move.w	$36(a0),d0
000170D6 D169 0008                  		add.w	d0,8(a1)
000170DA                            
000170DA                            locret_1572E:
000170DA 4E75                       		rts	
000170DC                            
000170DC                            ; ===========================================================================
000170DC                            ; ---------------------------------------------------------------------------
000170DC                            ; Object 69 - spinning platforms and trapdoors (SBZ)
000170DC                            ; ---------------------------------------------------------------------------
000170DC                            
000170DC                            Obj69:					; XREF: Obj_Index
000170DC 7000                       		moveq	#0,d0
000170DE 1028 0024                  		move.b	$24(a0),d0
000170E2 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
000170E6 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
000170EA                            ; ===========================================================================
000170EA 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
000170EC 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
000170EE 0000                       		dc.w Obj69_Spinner-Obj69_Index
000170F0                            ; ===========================================================================
000170F0                            
000170F0                            Obj69_Main:				; XREF: Obj69_Index
000170F0 5428 0024                  		addq.b	#2,$24(a0)
000170F4 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
000170FC 317C 4492 0002             		move.w	#$4492,2(a0)
00017102 0028 0004 0001             		ori.b	#4,1(a0)
00017108 117C 0080 0019             		move.b	#$80,$19(a0)
0001710E 7000                       		moveq	#0,d0
00017110 1028 0028                  		move.b	$28(a0),d0
00017114 0240 000F                  		andi.w	#$F,d0
00017118 C0FC 003C                  		mulu.w	#$3C,d0
0001711C 3140 0032                  		move.w	d0,$32(a0)
00017120 4A28 0028                  		tst.b	$28(a0)
00017124 6A00                       		bpl.s	Obj69_Trapdoor
00017126 5428 0024                  		addq.b	#2,$24(a0)
0001712A 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00017132 317C 04DF 0002             		move.w	#$4DF,2(a0)
00017138 117C 0010 0019             		move.b	#$10,$19(a0)
0001713E 117C 0002 001C             		move.b	#2,$1C(a0)
00017144 7000                       		moveq	#0,d0
00017146 1028 0028                  		move.b	$28(a0),d0	; get object type
0001714A 3200                       		move.w	d0,d1
0001714C 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00017150 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00017154 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00017158 3140 0032                  		move.w	d0,$32(a0)
0001715C 0241 0070                  		andi.w	#$70,d1
00017160 0641 0010                  		addi.w	#$10,d1
00017164 E549                       		lsl.w	#2,d1
00017166 5341                       		subq.w	#1,d1
00017168 3141 0036                  		move.w	d1,$36(a0)
0001716C 6000                       		bra.s	Obj69_Spinner
0001716E                            ; ===========================================================================
0001716E                            
0001716E                            Obj69_Trapdoor:				; XREF: Obj69_Index
0001716E 5368 0030                  		subq.w	#1,$30(a0)
00017172 6A00                       		bpl.s	Obj69_Animate
00017174 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001717A 0868 0000 001C             		bchg	#0,$1C(a0)
00017180 4A28 0001                  		tst.b	1(a0)
00017184 6A00                       		bpl.s	Obj69_Animate
00017186 303C 00BB                  		move.w	#$BB,d0
0001718A 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play door sound
00017190                            
00017190                            Obj69_Animate:
00017190 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00017196 4EB9 0000 B1F0             		jsr	AnimateSprite
0001719C 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
000171A0 6600                       		bne.s	Obj69_NotSolid	; if not, branch
000171A2 323C 004B                  		move.w	#$4B,d1
000171A6 343C 000C                  		move.w	#$C,d2
000171AA 3602                       		move.w	d2,d3
000171AC 5243                       		addq.w	#1,d3
000171AE 3828 0008                  		move.w	8(a0),d4
000171B2 6100 9314                  		bsr.w	SolidObject
000171B6 6000 8FE8                  		bra.w	MarkObjGone
000171BA                            ; ===========================================================================
000171BA                            
000171BA                            Obj69_NotSolid:
000171BA 0828 0003 0022             		btst	#3,$22(a0)
000171C0 6700                       		beq.s	Obj69_Display
000171C2 43F8 D000                  		lea	($FFFFD000).w,a1
000171C6 08A9 0003 0022             		bclr	#3,$22(a1)
000171CC 08A8 0003 0022             		bclr	#3,$22(a0)
000171D2 4228 0025                  		clr.b	$25(a0)
000171D6                            
000171D6                            Obj69_Display:
000171D6 6000 8FC8                  		bra.w	MarkObjGone
000171DA                            ; ===========================================================================
000171DA                            
000171DA                            Obj69_Spinner:				; XREF: Obj69_Index
000171DA 3038 FE04                  		move.w	($FFFFFE04).w,d0
000171DE C068 0036                  		and.w	$36(a0),d0
000171E2 6600                       		bne.s	Obj69_Delay
000171E4 117C 0001 0034             		move.b	#1,$34(a0)
000171EA                            
000171EA                            Obj69_Delay:
000171EA 4A28 0034                  		tst.b	$34(a0)
000171EE 6700                       		beq.s	Obj69_Animate2
000171F0 5368 0030                  		subq.w	#1,$30(a0)
000171F4 6A00                       		bpl.s	Obj69_Animate2
000171F6 3168 0032 0030             		move.w	$32(a0),$30(a0)
000171FC 4228 0034                  		clr.b	$34(a0)
00017200 0868 0000 001C             		bchg	#0,$1C(a0)
00017206                            
00017206                            Obj69_Animate2:
00017206 43F9 0000 0000             		lea	(Ani_obj69).l,a1
0001720C 4EB9 0000 B1F0             		jsr	AnimateSprite
00017212 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00017216 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00017218 323C 001B                  		move.w	#$1B,d1
0001721C 343C 0007                  		move.w	#7,d2
00017220 3602                       		move.w	d2,d3
00017222 5243                       		addq.w	#1,d3
00017224 3828 0008                  		move.w	8(a0),d4
00017228 6100 929E                  		bsr.w	SolidObject
0001722C 6000 8F72                  		bra.w	MarkObjGone
00017230                            ; ===========================================================================
00017230                            
00017230                            Obj69_NotSolid2:
00017230 0828 0003 0022             		btst	#3,$22(a0)
00017236 6700                       		beq.s	Obj69_Display2
00017238 43F8 D000                  		lea	($FFFFD000).w,a1
0001723C 08A9 0003 0022             		bclr	#3,$22(a1)
00017242 08A8 0003 0022             		bclr	#3,$22(a0)
00017248 4228 0025                  		clr.b	$25(a0)
0001724C                            
0001724C                            Obj69_Display2:
0001724C 6000 8F52                  		bra.w	MarkObjGone
00017250                            ; ===========================================================================
00017250                            Ani_obj69:
00017250                            	include "_anim\obj69.asm"
00017250                            ; ---------------------------------------------------------------------------
00017250                            ; Animation script - trapdoor (SBZ)
00017250                            ; ---------------------------------------------------------------------------
00017250 0000                       		dc.w byte_158AC-Ani_obj69
00017252 0000                       		dc.w byte_158B2-Ani_obj69
00017254 0000                       		dc.w byte_158B8-Ani_obj69
00017256 0000                       		dc.w byte_158CC-Ani_obj69
00017258 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
0001725E 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00017264 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00017271 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00017278 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00017285 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
0001728C                            		even
0001728C                            		even
0001728C                            
0001728C                            ; ---------------------------------------------------------------------------
0001728C                            ; Sprite mappings - trapdoor (SBZ)
0001728C                            ; ---------------------------------------------------------------------------
0001728C                            Map_obj69:
0001728C                            	include "_maps\obj69.asm"
0001728C                            ; ---------------------------------------------------------------------------
0001728C                            ; Sprite mappings - trapdoor (SBZ)
0001728C                            ; ---------------------------------------------------------------------------
0001728C 0000                       		dc.w byte_158E6-Map_obj69
0001728E 0000                       		dc.w byte_158FB-Map_obj69
00017290 0000                       		dc.w byte_15924-Map_obj69
00017292 04                         byte_158E6:	dc.b 4
00017293 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00017298 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
0001729D F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
000172A2 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
000172A7 08                         byte_158FB:	dc.b 8
000172A8 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
000172AD 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
000172B2 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
000172B7 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
000172BC F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
000172C1 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
000172C6 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
000172CB 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
000172D0 04                         byte_15924:	dc.b 4
000172D1 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
000172D6 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
000172DB 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
000172E0 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
000172E6 00                         		even
000172E6 00                         		even
000172E6                            
000172E6                            ; ---------------------------------------------------------------------------
000172E6                            ; Sprite mappings - spinning platforms (SBZ)
000172E6                            ; ---------------------------------------------------------------------------
000172E6                            Map_obj69a:
000172E6                            	include "_maps\obj69a.asm"
000172E6                            ; ---------------------------------------------------------------------------
000172E6                            ; Sprite mappings - spinning platforms (SBZ)
000172E6                            ; ---------------------------------------------------------------------------
000172E6 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
000172EA 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
000172EE 0000                       		dc.w byte_15970-Map_obj69a
000172F0 02                         byte_15944:	dc.b 2
000172F1 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
000172F6 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
000172FB 02                         byte_1594F:	dc.b 2
000172FC F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00017301 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00017306 02                         byte_1595A:	dc.b 2
00017307 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
0001730C 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00017311 02                         byte_15965:	dc.b 2
00017312 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00017317 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
0001731C 02                         byte_15970:	dc.b 2
0001731D F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00017322 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00017328 00                         		even
00017328 00                         		even
00017328                            
00017328                            ; ===========================================================================
00017328                            ; ---------------------------------------------------------------------------
00017328                            ; Object 6A - ground saws and pizza cutters (SBZ)
00017328                            ; ---------------------------------------------------------------------------
00017328                            
00017328                            Obj6A:					; XREF: Obj_Index
00017328 7000                       		moveq	#0,d0
0001732A 1028 0024                  		move.b	$24(a0),d0
0001732E 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00017332 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00017336                            ; ===========================================================================
00017336 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00017338 0000                       		dc.w Obj6A_Action-Obj6A_Index
0001733A                            ; ===========================================================================
0001733A                            
0001733A                            Obj6A_Main:				; XREF: Obj6A_Index
0001733A 5428 0024                  		addq.b	#2,$24(a0)
0001733E 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00017346 317C 43B5 0002             		move.w	#$43B5,2(a0)
0001734C 117C 0004 0001             		move.b	#4,1(a0)
00017352 117C 0004 0018             		move.b	#4,$18(a0)
00017358 117C 0020 0019             		move.b	#$20,$19(a0)
0001735E 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017364 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001736A 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00017370 6400                       		bcc.s	Obj6A_Action
00017372 117C 00A2 0020             		move.b	#$A2,$20(a0)
00017378                            
00017378                            Obj6A_Action:				; XREF: Obj6A_Index
00017378 7000                       		moveq	#0,d0
0001737A 1028 0028                  		move.b	$28(a0),d0
0001737E 0240 0007                  		andi.w	#7,d0
00017382 D040                       		add.w	d0,d0
00017384 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00017388 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
0001738C 3028 003A                  		move.w	$3A(a0),d0
00017390 0240 FF80                  		andi.w	#$FF80,d0
00017394 3238 F700                  		move.w	($FFFFF700).w,d1
00017398 0441 0080                  		subi.w	#$80,d1
0001739C 0241 FF80                  		andi.w	#$FF80,d1
000173A0 9041                       		sub.w	d1,d0
000173A2 0C40 0280                  		cmpi.w	#$280,d0
000173A6 6200                       		bhi.s	Obj6A_Delete
000173A8 4EF9 0000 E0DE             		jmp	DisplaySprite
000173AE                            ; ===========================================================================
000173AE                            
000173AE                            Obj6A_Delete:
000173AE 4EF9 0000 E11A             		jmp	DeleteObject
000173B4                            ; ===========================================================================
000173B4 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
000173B8 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
000173BC 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
000173BE                            ; ===========================================================================
000173BE                            
000173BE                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
000173BE 4E75                       		rts	
000173C0                            ; ===========================================================================
000173C0                            
000173C0                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
000173C0 323C 0060                  		move.w	#$60,d1
000173C4 7000                       		moveq	#0,d0
000173C6 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000173CA 0828 0000 0022             		btst	#0,$22(a0)
000173D0 6700                       		beq.s	Obj6A_Animate01
000173D2 4440                       		neg.w	d0
000173D4 D041                       		add.w	d1,d0
000173D6                            
000173D6                            Obj6A_Animate01:
000173D6 3228 003A                  		move.w	$3A(a0),d1
000173DA 9240                       		sub.w	d0,d1
000173DC 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
000173E0 5328 001E                  		subq.b	#1,$1E(a0)
000173E4 6A00                       		bpl.s	loc_15A46
000173E6 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
000173EC 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
000173F2                            
000173F2                            loc_15A46:
000173F2 4A28 0001                  		tst.b	1(a0)
000173F6 6A00                       		bpl.s	locret_15A60
000173F8 3038 FE04                  		move.w	($FFFFFE04).w,d0
000173FC 0240 000F                  		andi.w	#$F,d0
00017400 6600                       		bne.s	locret_15A60
00017402 303C 00B0                  		move.w	#$B0,d0
00017406 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play saw sound
0001740C                            
0001740C                            locret_15A60:
0001740C 4E75                       		rts	
0001740E                            ; ===========================================================================
0001740E                            
0001740E                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
0001740E 323C 0030                  		move.w	#$30,d1
00017412 7000                       		moveq	#0,d0
00017414 1038 FE64                  		move.b	($FFFFFE64).w,d0
00017418 0828 0000 0022             		btst	#0,$22(a0)
0001741E 6700                       		beq.s	Obj6A_Animate02
00017420 4440                       		neg.w	d0
00017422 0640 0080                  		addi.w	#$80,d0
00017426                            
00017426                            Obj6A_Animate02:
00017426 3228 0038                  		move.w	$38(a0),d1
0001742A 9240                       		sub.w	d0,d1
0001742C 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00017430 5328 001E                  		subq.b	#1,$1E(a0)
00017434 6A00                       		bpl.s	loc_15A96
00017436 117C 0002 001E             		move.b	#2,$1E(a0)
0001743C 0868 0000 001A             		bchg	#0,$1A(a0)
00017442                            
00017442                            loc_15A96:
00017442 4A28 0001                  		tst.b	1(a0)
00017446 6A00                       		bpl.s	locret_15AB0
00017448 1038 FE64                  		move.b	($FFFFFE64).w,d0
0001744C 0C00 0018                  		cmpi.b	#$18,d0
00017450 6600                       		bne.s	locret_15AB0
00017452 303C 00B0                  		move.w	#$B0,d0
00017456 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play saw sound
0001745C                            
0001745C                            locret_15AB0:
0001745C 4E75                       		rts	
0001745E                            ; ===========================================================================
0001745E                            
0001745E                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
0001745E 4A28 003D                  		tst.b	$3D(a0)
00017462 6600                       		bne.s	Obj6A_Animate03
00017464 3038 D008                  		move.w	($FFFFD008).w,d0
00017468 0440 00C0                  		subi.w	#$C0,d0
0001746C 6500                       		bcs.s	loc_15B02
0001746E 9068 0008                  		sub.w	8(a0),d0
00017472 6500                       		bcs.s	loc_15B02
00017474 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017478 0440 0080                  		subi.w	#$80,d0
0001747C B068 000C                  		cmp.w	$C(a0),d0
00017480 6400                       		bcc.s	locret_15B04
00017482 0640 0100                  		addi.w	#$100,d0
00017486 B068 000C                  		cmp.w	$C(a0),d0
0001748A 6500                       		bcs.s	locret_15B04
0001748C 117C 0001 003D             		move.b	#1,$3D(a0)
00017492 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
00017498 117C 00A2 0020             		move.b	#$A2,$20(a0)
0001749E 117C 0002 001A             		move.b	#2,$1A(a0)
000174A4 303C 00B0                  		move.w	#$B0,d0
000174A8 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play saw sound
000174AE                            
000174AE                            loc_15B02:
000174AE 588F                       		addq.l	#4,sp
000174B0                            
000174B0                            locret_15B04:
000174B0 4E75                       		rts	
000174B2                            ; ===========================================================================
000174B2                            
000174B2                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
000174B2 4EB9 0000 E0B8             		jsr	SpeedToPos
000174B8 3168 0008 003A             		move.w	8(a0),$3A(a0)
000174BE 5328 001E                  		subq.b	#1,$1E(a0)
000174C2 6A00                       		bpl.s	locret_15B24
000174C4 117C 0002 001E             		move.b	#2,$1E(a0)
000174CA 0868 0000 001A             		bchg	#0,$1A(a0)
000174D0                            
000174D0                            locret_15B24:
000174D0 4E75                       		rts	
000174D2                            ; ===========================================================================
000174D2                            
000174D2                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
000174D2 4A28 003D                  		tst.b	$3D(a0)
000174D6 6600                       		bne.s	Obj6A_Animate04
000174D8 3038 D008                  		move.w	($FFFFD008).w,d0
000174DC 0640 00E0                  		addi.w	#$E0,d0
000174E0 9068 0008                  		sub.w	8(a0),d0
000174E4 6400                       		bcc.s	loc_15B74
000174E6 3038 D00C                  		move.w	($FFFFD00C).w,d0
000174EA 0440 0080                  		subi.w	#$80,d0
000174EE B068 000C                  		cmp.w	$C(a0),d0
000174F2 6400                       		bcc.s	locret_15B76
000174F4 0640 0100                  		addi.w	#$100,d0
000174F8 B068 000C                  		cmp.w	$C(a0),d0
000174FC 6500                       		bcs.s	locret_15B76
000174FE 117C 0001 003D             		move.b	#1,$3D(a0)
00017504 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
0001750A 117C 00A2 0020             		move.b	#$A2,$20(a0)
00017510 117C 0002 001A             		move.b	#2,$1A(a0)
00017516 303C 00B0                  		move.w	#$B0,d0
0001751A 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play saw sound
00017520                            
00017520                            loc_15B74:
00017520 588F                       		addq.l	#4,sp
00017522                            
00017522                            locret_15B76:
00017522 4E75                       		rts	
00017524                            ; ===========================================================================
00017524                            
00017524                            Obj6A_Animate04:
00017524 4EB9 0000 E0B8             		jsr	SpeedToPos
0001752A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00017530 5328 001E                  		subq.b	#1,$1E(a0)
00017534 6A00                       		bpl.s	locret_15B96
00017536 117C 0002 001E             		move.b	#2,$1E(a0)
0001753C 0868 0000 001A             		bchg	#0,$1A(a0)
00017542                            
00017542                            locret_15B96:
00017542 4E75                       		rts	
00017544                            ; ===========================================================================
00017544                            ; ---------------------------------------------------------------------------
00017544                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00017544                            ; ---------------------------------------------------------------------------
00017544                            Map_obj6A:
00017544                            	include "_maps\obj6A.asm"
00017544                            ; ---------------------------------------------------------------------------
00017544                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00017544                            ; ---------------------------------------------------------------------------
00017544 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00017548 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
0001754C 07                         byte_15BA0:	dc.b 7
0001754D C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00017552 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00017557 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
0001755C E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00017561 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00017566 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
0001756B 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00017570 07                         byte_15BC4:	dc.b 7
00017571 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00017576 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
0001757B E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00017580 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00017585 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
0001758A 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
0001758F 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00017594 04                         byte_15BE8:	dc.b 4
00017595 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
0001759A E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
0001759F 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000175A4 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000175A9 04                         byte_15BFD:	dc.b 4
000175AA E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000175AF E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000175B4 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000175B9 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000175BE                            		even
000175BE                            		even
000175BE                            
000175BE                            ; ===========================================================================
000175BE                            ; ---------------------------------------------------------------------------
000175BE                            ; Object 6B - stomper (SBZ)
000175BE                            ; ---------------------------------------------------------------------------
000175BE                            
000175BE                            Obj6B:					; XREF: Obj_Index
000175BE 7000                       		moveq	#0,d0
000175C0 1028 0024                  		move.b	$24(a0),d0
000175C4 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
000175C8 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
000175CC                            ; ===========================================================================
000175CC 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
000175CE 0000                       		dc.w Obj6B_Action-Obj6B_Index
000175D0                            
000175D0 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
000175D4 1C20 3803                  		dc.b  $1C, $20,	$38,   3
000175D8 1C20 4004                  		dc.b  $1C, $20,	$40,   4
000175DC 1C20 6004                  		dc.b  $1C, $20,	$60,   4
000175E0 8040 0005                  		dc.b  $80, $40,	  0,   5
000175E4                            ; ===========================================================================
000175E4                            
000175E4                            Obj6B_Main:				; XREF: Obj6B_Index
000175E4 5428 0024                  		addq.b	#2,$24(a0)
000175E8 7000                       		moveq	#0,d0
000175EA 1028 0028                  		move.b	$28(a0),d0
000175EE E448                       		lsr.w	#2,d0
000175F0 0240 001C                  		andi.w	#$1C,d0
000175F4 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
000175F8 115B 0019                  		move.b	(a3)+,$19(a0)
000175FC 115B 0016                  		move.b	(a3)+,$16(a0)
00017600 E448                       		lsr.w	#2,d0
00017602 1140 001A                  		move.b	d0,$1A(a0)
00017606 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
0001760E 317C 22C0 0002             		move.w	#$22C0,2(a0)
00017614 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
0001761A 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
0001761C 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00017622 6700                       		beq.s	Obj6B_SBZ3
00017624                            
00017624                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00017624 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017628 7000                       		moveq	#0,d0
0001762A 1028 0023                  		move.b	$23(a0),d0
0001762E 6700                       		beq.s	Obj6B_Delete
00017630 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017636                            
00017636                            Obj6B_Delete:
00017636 4EF9 0000 E11A             		jmp	DeleteObject
0001763C                            ; ===========================================================================
0001763C                            
0001763C                            Obj6B_SBZ3:				; XREF: Obj6B_Main
0001763C 317C 41F0 0002             		move.w	#$41F0,2(a0)
00017642 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00017648 6600                       		bne.s	Obj6B_SBZ12
0001764A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001764E 7000                       		moveq	#0,d0
00017650 1028 0023                  		move.b	$23(a0),d0
00017654 6700                       		beq.s	Obj6B_SBZ12
00017656 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001765C 6700                       		beq.s	Obj6B_SBZ12
0001765E 4238 F7CB                  		clr.b	($FFFFF7CB).w
00017662 60C0                       		bra.s	Obj6B_ChkGone
00017664                            ; ===========================================================================
00017664                            
00017664                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00017664 0028 0004 0001             		ori.b	#4,1(a0)
0001766A 117C 0004 0018             		move.b	#4,$18(a0)
00017670 3168 0008 0034             		move.w	8(a0),$34(a0)
00017676 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001767C 7000                       		moveq	#0,d0
0001767E 101B                       		move.b	(a3)+,d0
00017680 3140 003C                  		move.w	d0,$3C(a0)
00017684 7000                       		moveq	#0,d0
00017686 1028 0028                  		move.b	$28(a0),d0
0001768A 6A00                       		bpl.s	Obj6B_Action
0001768C 0200 000F                  		andi.b	#$F,d0
00017690 1140 003E                  		move.b	d0,$3E(a0)
00017694 1153 0028                  		move.b	(a3),$28(a0)
00017698 0C13 0005                  		cmpi.b	#5,(a3)
0001769C 6600                       		bne.s	Obj6B_ChkGone2
0001769E 08E8 0004 0001             		bset	#4,1(a0)
000176A4                            
000176A4                            Obj6B_ChkGone2:
000176A4 45F8 FC00                  		lea	($FFFFFC00).w,a2
000176A8 7000                       		moveq	#0,d0
000176AA 1028 0023                  		move.b	$23(a0),d0
000176AE 6700                       		beq.s	Obj6B_Action
000176B0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000176B6                            
000176B6                            Obj6B_Action:				; XREF: Obj6B_Index
000176B6 3F28 0008                  		move.w	8(a0),-(sp)
000176BA 7000                       		moveq	#0,d0
000176BC 1028 0028                  		move.b	$28(a0),d0
000176C0 0240 000F                  		andi.w	#$F,d0
000176C4 D040                       		add.w	d0,d0
000176C6 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
000176CA 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
000176CE 381F                       		move.w	(sp)+,d4
000176D0 4A28 0001                  		tst.b	1(a0)
000176D4 6A00                       		bpl.s	Obj6B_ChkDel
000176D6 7200                       		moveq	#0,d1
000176D8 1228 0019                  		move.b	$19(a0),d1
000176DC 0641 000B                  		addi.w	#$B,d1
000176E0 7400                       		moveq	#0,d2
000176E2 1428 0016                  		move.b	$16(a0),d2
000176E6 3602                       		move.w	d2,d3
000176E8 5243                       		addq.w	#1,d3
000176EA 6100 8DDC                  		bsr.w	SolidObject
000176EE                            
000176EE                            Obj6B_ChkDel:
000176EE 3028 0034                  		move.w	$34(a0),d0
000176F2 0240 FF80                  		andi.w	#$FF80,d0
000176F6 3238 F700                  		move.w	($FFFFF700).w,d1
000176FA 0441 0080                  		subi.w	#$80,d1
000176FE 0241 FF80                  		andi.w	#$FF80,d1
00017702 9041                       		sub.w	d1,d0
00017704 0C40 0280                  		cmpi.w	#$280,d0
00017708 6200                       		bhi.s	loc_15D64
0001770A 4EF9 0000 E0DE             		jmp	DisplaySprite
00017710                            ; ===========================================================================
00017710                            
00017710                            loc_15D64:
00017710 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017716 6600                       		bne.s	Obj6B_Delete2
00017718 4238 F7CB                  		clr.b	($FFFFF7CB).w
0001771C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017720 7000                       		moveq	#0,d0
00017722 1028 0023                  		move.b	$23(a0),d0
00017726 6700                       		beq.s	Obj6B_Delete2
00017728 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001772E                            
0001772E                            Obj6B_Delete2:
0001772E 4EF9 0000 E11A             		jmp	DeleteObject
00017734                            ; ===========================================================================
00017734 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00017738 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
0001773C 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00017740                            ; ===========================================================================
00017740                            
00017740                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00017740 4E75                       		rts	
00017742                            ; ===========================================================================
00017742                            
00017742                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00017742 4A28 0038                  		tst.b	$38(a0)
00017746 6600                       		bne.s	loc_15DB4
00017748 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001774C 7000                       		moveq	#0,d0
0001774E 1028 003E                  		move.b	$3E(a0),d0
00017752 0832 0000 0000             		btst	#0,(a2,d0.w)
00017758 6700                       		beq.s	loc_15DC2
0001775A 117C 0001 0038             		move.b	#1,$38(a0)
00017760                            
00017760                            loc_15DB4:
00017760 3028 003C                  		move.w	$3C(a0),d0
00017764 B068 003A                  		cmp.w	$3A(a0),d0
00017768 6700                       		beq.s	loc_15DE0
0001776A 5468 003A                  		addq.w	#2,$3A(a0)
0001776E                            
0001776E                            loc_15DC2:
0001776E 3028 003A                  		move.w	$3A(a0),d0
00017772 0828 0000 0022             		btst	#0,$22(a0)
00017778 6700                       		beq.s	loc_15DD4
0001777A 4440                       		neg.w	d0
0001777C 0640 0080                  		addi.w	#$80,d0
00017780                            
00017780                            loc_15DD4:
00017780 3228 0034                  		move.w	$34(a0),d1
00017784 9240                       		sub.w	d0,d1
00017786 3141 0008                  		move.w	d1,8(a0)
0001778A 4E75                       		rts	
0001778C                            ; ===========================================================================
0001778C                            
0001778C                            loc_15DE0:
0001778C 5228 0028                  		addq.b	#1,$28(a0)
00017790 317C 00B4 0036             		move.w	#$B4,$36(a0)
00017796 4228 0038                  		clr.b	$38(a0)
0001779A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001779E 7000                       		moveq	#0,d0
000177A0 1028 0023                  		move.b	$23(a0),d0
000177A4 67C8                       		beq.s	loc_15DC2
000177A6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000177AC 60C0                       		bra.s	loc_15DC2
000177AE                            ; ===========================================================================
000177AE                            
000177AE                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
000177AE 4A28 0038                  		tst.b	$38(a0)
000177B2 6600                       		bne.s	loc_15E14
000177B4 5368 0036                  		subq.w	#1,$36(a0)
000177B8 6600                       		bne.s	loc_15E1E
000177BA 117C 0001 0038             		move.b	#1,$38(a0)
000177C0                            
000177C0                            loc_15E14:
000177C0 4A68 003A                  		tst.w	$3A(a0)
000177C4 6700                       		beq.s	loc_15E3C
000177C6 5568 003A                  		subq.w	#2,$3A(a0)
000177CA                            
000177CA                            loc_15E1E:
000177CA 3028 003A                  		move.w	$3A(a0),d0
000177CE 0828 0000 0022             		btst	#0,$22(a0)
000177D4 6700                       		beq.s	loc_15E30
000177D6 4440                       		neg.w	d0
000177D8 0640 0080                  		addi.w	#$80,d0
000177DC                            
000177DC                            loc_15E30:
000177DC 3228 0034                  		move.w	$34(a0),d1
000177E0 9240                       		sub.w	d0,d1
000177E2 3141 0008                  		move.w	d1,8(a0)
000177E6 4E75                       		rts	
000177E8                            ; ===========================================================================
000177E8                            
000177E8                            loc_15E3C:
000177E8 5328 0028                  		subq.b	#1,$28(a0)
000177EC 4228 0038                  		clr.b	$38(a0)
000177F0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000177F4 7000                       		moveq	#0,d0
000177F6 1028 0023                  		move.b	$23(a0),d0
000177FA 67CE                       		beq.s	loc_15E1E
000177FC 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00017802 60C6                       		bra.s	loc_15E1E
00017804                            ; ===========================================================================
00017804                            
00017804                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00017804 4A28 0038                  		tst.b	$38(a0)
00017808 6600                       		bne.s	loc_15E7C
0001780A 4A68 003A                  		tst.w	$3A(a0)
0001780E 6700                       		beq.s	loc_15E6A
00017810 5368 003A                  		subq.w	#1,$3A(a0)
00017814 6000                       		bra.s	loc_15E8E
00017816                            ; ===========================================================================
00017816                            
00017816                            loc_15E6A:
00017816 5368 0036                  		subq.w	#1,$36(a0)
0001781A 6A00                       		bpl.s	loc_15E8E
0001781C 317C 003C 0036             		move.w	#$3C,$36(a0)
00017822 117C 0001 0038             		move.b	#1,$38(a0)
00017828                            
00017828                            loc_15E7C:
00017828 5068 003A                  		addq.w	#8,$3A(a0)
0001782C 3028 003A                  		move.w	$3A(a0),d0
00017830 B068 003C                  		cmp.w	$3C(a0),d0
00017834 6600                       		bne.s	loc_15E8E
00017836 4228 0038                  		clr.b	$38(a0)
0001783A                            
0001783A                            loc_15E8E:
0001783A 3028 003A                  		move.w	$3A(a0),d0
0001783E 0828 0000 0022             		btst	#0,$22(a0)
00017844 6700                       		beq.s	loc_15EA0
00017846 4440                       		neg.w	d0
00017848 0640 0038                  		addi.w	#$38,d0
0001784C                            
0001784C                            loc_15EA0:
0001784C 3228 0030                  		move.w	$30(a0),d1
00017850 D240                       		add.w	d0,d1
00017852 3141 000C                  		move.w	d1,$C(a0)
00017856 4E75                       		rts	
00017858                            ; ===========================================================================
00017858                            
00017858                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00017858 4A28 0038                  		tst.b	$38(a0)
0001785C 6600                       		bne.s	loc_15ED0
0001785E 4A68 003A                  		tst.w	$3A(a0)
00017862 6700                       		beq.s	loc_15EBE
00017864 5168 003A                  		subq.w	#8,$3A(a0)
00017868 6000                       		bra.s	loc_15EF0
0001786A                            ; ===========================================================================
0001786A                            
0001786A                            loc_15EBE:
0001786A 5368 0036                  		subq.w	#1,$36(a0)
0001786E 6A00                       		bpl.s	loc_15EF0
00017870 317C 003C 0036             		move.w	#$3C,$36(a0)
00017876 117C 0001 0038             		move.b	#1,$38(a0)
0001787C                            
0001787C                            loc_15ED0:
0001787C 3028 003A                  		move.w	$3A(a0),d0
00017880 B068 003C                  		cmp.w	$3C(a0),d0
00017884 6700                       		beq.s	loc_15EE0
00017886 5068 003A                  		addq.w	#8,$3A(a0)
0001788A 6000                       		bra.s	loc_15EF0
0001788C                            ; ===========================================================================
0001788C                            
0001788C                            loc_15EE0:
0001788C 5368 0036                  		subq.w	#1,$36(a0)
00017890 6A00                       		bpl.s	loc_15EF0
00017892 317C 003C 0036             		move.w	#$3C,$36(a0)
00017898 4228 0038                  		clr.b	$38(a0)
0001789C                            
0001789C                            loc_15EF0:
0001789C 3028 003A                  		move.w	$3A(a0),d0
000178A0 0828 0000 0022             		btst	#0,$22(a0)
000178A6 6700                       		beq.s	loc_15F02
000178A8 4440                       		neg.w	d0
000178AA 0640 0038                  		addi.w	#$38,d0
000178AE                            
000178AE                            loc_15F02:
000178AE 3228 0030                  		move.w	$30(a0),d1
000178B2 D240                       		add.w	d0,d1
000178B4 3141 000C                  		move.w	d1,$C(a0)
000178B8 4E75                       		rts	
000178BA                            ; ===========================================================================
000178BA                            
000178BA                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
000178BA 4A28 0038                  		tst.b	$38(a0)
000178BE 6600                       		bne.s	loc_15F3E
000178C0 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000178C4 7000                       		moveq	#0,d0
000178C6 1028 003E                  		move.b	$3E(a0),d0
000178CA 0832 0000 0000             		btst	#0,(a2,d0.w)
000178D0 6700                       		beq.s	locret_15F5C
000178D2 117C 0001 0038             		move.b	#1,$38(a0)
000178D8 45F8 FC00                  		lea	($FFFFFC00).w,a2
000178DC 7000                       		moveq	#0,d0
000178DE 1028 0023                  		move.b	$23(a0),d0
000178E2 6700                       		beq.s	loc_15F3E
000178E4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000178EA                            
000178EA                            loc_15F3E:
000178EA 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
000178F2 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
000178FA 3168 0008 0034             		move.w	8(a0),$34(a0)
00017900 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00017906 6700                       		beq.s	loc_15F5E
00017908                            
00017908                            locret_15F5C:
00017908 4E75                       		rts	
0001790A                            ; ===========================================================================
0001790A                            
0001790A                            loc_15F5E:
0001790A 4228 0028                  		clr.b	$28(a0)
0001790E 4228 0038                  		clr.b	$38(a0)
00017912 4E75                       		rts	
00017914                            ; ===========================================================================
00017914                            ; ---------------------------------------------------------------------------
00017914                            ; Sprite mappings - stomper and	platforms (SBZ)
00017914                            ; ---------------------------------------------------------------------------
00017914                            Map_obj6B:
00017914                            	include "_maps\obj6B.asm"
00017914                            ; ---------------------------------------------------------------------------
00017914                            ; Sprite mappings - stomper and	platforms (SBZ)
00017914                            ; ---------------------------------------------------------------------------
00017914 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00017918 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
0001791C 0000                       		dc.w byte_15FB0-Map_obj6B
0001791E 04                         byte_15F72:	dc.b 4
0001791F F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00017924 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00017929 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
0001792E F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00017933 08                         byte_15F87:	dc.b 8
00017934 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00017939 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
0001793E E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00017943 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00017948 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
0001794D 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00017952 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00017957 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
0001795C 0E                         byte_15FB0:	dc.b $E
0001795D C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00017962 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00017967 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
0001796C C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00017971 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00017976 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
0001797B C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00017980 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00017985 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
0001798A E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
0001798F E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00017994 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00017999 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
0001799E 200F 0058 80               		dc.b $20, $F, 0, $58, $80
000179A4 00                         		even
000179A4 00                         		even
000179A4                            
000179A4                            ; ===========================================================================
000179A4                            ; ---------------------------------------------------------------------------
000179A4                            ; Object 6C - vanishing	platforms (SBZ)
000179A4                            ; ---------------------------------------------------------------------------
000179A4                            
000179A4                            Obj6C:					; XREF: Obj_Index
000179A4 7000                       		moveq	#0,d0
000179A6 1028 0024                  		move.b	$24(a0),d0
000179AA 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
000179AE 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
000179B2                            ; ===========================================================================
000179B2 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
000179B4 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000179B6 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000179B8 0000                       		dc.w loc_16068-Obj6C_Index
000179BA                            ; ===========================================================================
000179BA                            
000179BA                            Obj6C_Main:				; XREF: Obj6C_Index
000179BA 5C28 0024                  		addq.b	#6,$24(a0)
000179BE 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
000179C6 317C 44C3 0002             		move.w	#$44C3,2(a0)
000179CC 0028 0004 0001             		ori.b	#4,1(a0)
000179D2 117C 0010 0019             		move.b	#$10,$19(a0)
000179D8 117C 0004 0018             		move.b	#4,$18(a0)
000179DE 7000                       		moveq	#0,d0
000179E0 1028 0028                  		move.b	$28(a0),d0	; get object type
000179E4 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000179E8 5240                       		addq.w	#1,d0		; add 1
000179EA EF48                       		lsl.w	#7,d0		; multiply by $80
000179EC 3200                       		move.w	d0,d1
000179EE 5340                       		subq.w	#1,d0
000179F0 3140 0030                  		move.w	d0,$30(a0)
000179F4 3140 0032                  		move.w	d0,$32(a0)
000179F8 7000                       		moveq	#0,d0
000179FA 1028 0028                  		move.b	$28(a0),d0	; get object type
000179FE 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00017A02 0641 0080                  		addi.w	#$80,d1
00017A06 C0C1                       		mulu.w	d1,d0
00017A08 E088                       		lsr.l	#8,d0
00017A0A 3140 0036                  		move.w	d0,$36(a0)
00017A0E 5341                       		subq.w	#1,d1
00017A10 3141 0038                  		move.w	d1,$38(a0)
00017A14                            
00017A14                            loc_16068:				; XREF: Obj6C_Index
00017A14 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017A18 9068 0036                  		sub.w	$36(a0),d0
00017A1C C068 0038                  		and.w	$38(a0),d0
00017A20 6600                       		bne.s	Obj6C_Animate
00017A22 5928 0024                  		subq.b	#4,$24(a0)
00017A26 6000                       		bra.s	Obj6C_Vanish
00017A28                            ; ===========================================================================
00017A28                            
00017A28                            Obj6C_Animate:
00017A28 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00017A2E 4EB9 0000 B1F0             		jsr	AnimateSprite
00017A34 6000 876A                  		bra.w	MarkObjGone
00017A38                            ; ===========================================================================
00017A38                            
00017A38                            Obj6C_Vanish:				; XREF: Obj6C_Index
00017A38 5368 0030                  		subq.w	#1,$30(a0)
00017A3C 6A00                       		bpl.s	loc_160AA
00017A3E 317C 007F 0030             		move.w	#127,$30(a0)
00017A44 4A28 001C                  		tst.b	$1C(a0)
00017A48 6700                       		beq.s	loc_160A4
00017A4A 3168 0032 0030             		move.w	$32(a0),$30(a0)
00017A50                            
00017A50                            loc_160A4:
00017A50 0868 0000 001C             		bchg	#0,$1C(a0)
00017A56                            
00017A56                            loc_160AA:
00017A56 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00017A5C 4EB9 0000 B1F0             		jsr	AnimateSprite
00017A62 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00017A68 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00017A6A 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00017A70 6600                       		bne.s	loc_160D6
00017A72 7200                       		moveq	#0,d1
00017A74 1228 0019                  		move.b	$19(a0),d1
00017A78 4EB9 0000 7ED0             		jsr	(PlatformObject).l
00017A7E 6000 8720                  		bra.w	MarkObjGone
00017A82                            ; ===========================================================================
00017A82                            
00017A82                            loc_160D6:
00017A82 7200                       		moveq	#0,d1
00017A84 1228 0019                  		move.b	$19(a0),d1
00017A88 4EB9 0000 8044             		jsr	(ExitPlatform).l
00017A8E 3428 0008                  		move.w	8(a0),d2
00017A92 4EB9 0000 85AE             		jsr	(MvSonicOnPtfm2).l
00017A98 6000 8706                  		bra.w	MarkObjGone
00017A9C                            ; ===========================================================================
00017A9C                            
00017A9C                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00017A9C 0828 0003 0022             		btst	#3,$22(a0)
00017AA2 6700                       		beq.s	Obj6C_Display
00017AA4 43F8 D000                  		lea	($FFFFD000).w,a1
00017AA8 08A9 0003 0022             		bclr	#3,$22(a1)
00017AAE 08A8 0003 0022             		bclr	#3,$22(a0)
00017AB4 117C 0002 0024             		move.b	#2,$24(a0)
00017ABA 4228 0025                  		clr.b	$25(a0)
00017ABE                            
00017ABE                            Obj6C_Display:
00017ABE 6000 86E0                  		bra.w	MarkObjGone
00017AC2                            ; ===========================================================================
00017AC2                            Ani_obj6C:
00017AC2                            	include "_anim\obj6C.asm"
00017AC2                            ; ---------------------------------------------------------------------------
00017AC2                            ; Animation script - vanishing platforms (SBZ)
00017AC2                            ; ---------------------------------------------------------------------------
00017AC2 0000                       		dc.w byte_1611A-Ani_obj6C
00017AC4 0000                       		dc.w byte_16122-Ani_obj6C
00017AC6 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00017ACE 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00017AD6                            		even
00017AD6                            		even
00017AD6                            
00017AD6                            ; ---------------------------------------------------------------------------
00017AD6                            ; Sprite mappings - vanishing platforms	(SBZ)
00017AD6                            ; ---------------------------------------------------------------------------
00017AD6                            Map_obj6C:
00017AD6                            	include "_maps\obj6C.asm"
00017AD6                            ; ---------------------------------------------------------------------------
00017AD6                            ; Sprite mappings - vanishing platforms	(SBZ)
00017AD6                            ; ---------------------------------------------------------------------------
00017AD6 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00017ADA 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00017ADE 01                         byte_16132:	dc.b 1
00017ADF F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00017AE4 01                         byte_16138:	dc.b 1
00017AE5 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00017AEA 01                         byte_1613E:	dc.b 1
00017AEB F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00017AF0 00                         byte_16144:	dc.b 0
00017AF2 00                         		even
00017AF2 00                         		even
00017AF2                            
00017AF2                            ; ===========================================================================
00017AF2                            ; ---------------------------------------------------------------------------
00017AF2                            ; Object 6E - electrocution orbs (SBZ)
00017AF2                            ; ---------------------------------------------------------------------------
00017AF2                            
00017AF2                            Obj6E:					; XREF: Obj_Index
00017AF2 7000                       		moveq	#0,d0
00017AF4 1028 0024                  		move.b	$24(a0),d0
00017AF8 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00017AFC 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00017B00                            ; ===========================================================================
00017B00 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00017B02 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00017B04                            ; ===========================================================================
00017B04                            
00017B04                            Obj6E_Main:				; XREF: Obj6E_Index
00017B04 5428 0024                  		addq.b	#2,$24(a0)
00017B08 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00017B10 317C 047E 0002             		move.w	#$47E,2(a0)
00017B16 0028 0004 0001             		ori.b	#4,1(a0)
00017B1C 117C 0028 0019             		move.b	#$28,$19(a0)
00017B22 7000                       		moveq	#0,d0
00017B24 1028 0028                  		move.b	$28(a0),d0	; read object type
00017B28 E948                       		lsl.w	#4,d0		; multiply by $10
00017B2A 5340                       		subq.w	#1,d0
00017B2C 3140 0034                  		move.w	d0,$34(a0)
00017B30                            
00017B30                            Obj6E_Shock:				; XREF: Obj6E_Index
00017B30 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017B34 C068 0034                  		and.w	$34(a0),d0
00017B38 6600                       		bne.s	Obj6E_Animate
00017B3A 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00017B40 4A28 0001                  		tst.b	1(a0)
00017B44 6A00                       		bpl.s	Obj6E_Animate
00017B46 303C 00B1                  		move.w	#$B1,d0
00017B4A 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play electricity sound
00017B50                            
00017B50                            Obj6E_Animate:
00017B50 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00017B56 4EB9 0000 B1F0             		jsr	AnimateSprite
00017B5C 117C 0000 0020             		move.b	#0,$20(a0)
00017B62 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00017B68 6600                       		bne.s	Obj6E_Display	; if not, branch
00017B6A 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00017B70                            
00017B70                            Obj6E_Display:
00017B70 6000 862E                  		bra.w	MarkObjGone
00017B74                            ; ===========================================================================
00017B74                            Ani_obj6E:
00017B74                            	include "_anim\obj6E.asm"
00017B74                            ; ---------------------------------------------------------------------------
00017B74                            ; Animation script - electrocution orbs (SBZ)
00017B74                            ; ---------------------------------------------------------------------------
00017B74 0000                       		dc.w byte_161CC-Ani_obj6E
00017B76 0000                       		dc.w byte_161D0-Ani_obj6E
00017B78 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00017B7C 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00017B8C                            		even
00017B8C                            		even
00017B8C                            
00017B8C                            ; ---------------------------------------------------------------------------
00017B8C                            ; Sprite mappings - electrocution orbs (SBZ)
00017B8C                            ; ---------------------------------------------------------------------------
00017B8C                            Map_obj6E:
00017B8C                            	include "_maps\obj6E.asm"
00017B8C                            ; ---------------------------------------------------------------------------
00017B8C                            ; Sprite mappings - electrocution orbs (SBZ)
00017B8C                            ; ---------------------------------------------------------------------------
00017B8C 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
00017B90 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
00017B94 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
00017B98 02                         byte_161EC:	dc.b 2
00017B99 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017B9E 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017BA3 03                         byte_161F7:	dc.b 3
00017BA4 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00017BA9 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017BAE 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017BB3 05                         byte_16207:	dc.b 5
00017BB4 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00017BB9 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017BBE 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017BC3 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00017BC8 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00017BCD 04                         byte_16221:	dc.b 4
00017BCE F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017BD3 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017BD8 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00017BDD F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00017BE2 06                         byte_16236:	dc.b 6
00017BE3 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017BE8 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017BED F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
00017BF2 F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
00017BF7 F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
00017BFC F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
00017C01 04                         byte_16255:	dc.b 4
00017C02 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00017C07 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00017C0C F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
00017C11 F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
00017C16                            		even
00017C16                            		even
00017C16                            
00017C16                            ; ===========================================================================
00017C16                            ; ---------------------------------------------------------------------------
00017C16                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00017C16                            ; ---------------------------------------------------------------------------
00017C16                            
00017C16                            Obj6F:					; XREF: Obj_Index
00017C16 7000                       		moveq	#0,d0
00017C18 1028 0024                  		move.b	$24(a0),d0
00017C1C 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00017C20 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00017C24 3028 0030                  		move.w	$30(a0),d0
00017C28 0240 FF80                  		andi.w	#$FF80,d0
00017C2C 3238 F700                  		move.w	($FFFFF700).w,d1
00017C30 0441 0080                  		subi.w	#$80,d1
00017C34 0241 FF80                  		andi.w	#$FF80,d1
00017C38 9041                       		sub.w	d1,d0
00017C3A 0C40 0280                  		cmpi.w	#$280,d0
00017C3E 6200                       		bhi.s	loc_1629A
00017C40                            
00017C40                            Obj6F_Display:
00017C40 4EF9 0000 E0DE             		jmp	DisplaySprite
00017C46                            ; ===========================================================================
00017C46                            
00017C46                            loc_1629A:
00017C46 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00017C4C 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00017C4E 0C40 FF80                  		cmpi.w	#-$80,d0
00017C52 64EC                       		bcc.s	Obj6F_Display
00017C54                            
00017C54                            Obj6F_Act1or2:
00017C54 1028 002F                  		move.b	$2F(a0),d0
00017C58 6A00                       		bpl.s	Obj6F_Delete
00017C5A 0240 007F                  		andi.w	#$7F,d0
00017C5E 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00017C62 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00017C68                            
00017C68                            Obj6F_Delete:
00017C68 4EF9 0000 E11A             		jmp	DeleteObject
00017C6E                            ; ===========================================================================
00017C6E 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00017C70 0000                       		dc.w loc_163D8-Obj6F_Index
00017C72                            ; ===========================================================================
00017C72                            
00017C72                            Obj6F_Main:				; XREF: Obj6F_Index
00017C72 1028 0028                  		move.b	$28(a0),d0
00017C76 6B00 0000                  		bmi.w	loc_16380
00017C7A 5428 0024                  		addq.b	#2,$24(a0)
00017C7E 217C 0001 72E6 0004        		move.l	#Map_obj69a,4(a0)
00017C86 317C 04DF 0002             		move.w	#$4DF,2(a0)
00017C8C 117C 0010 0019             		move.b	#$10,$19(a0)
00017C92 0028 0004 0001             		ori.b	#4,1(a0)
00017C98 117C 0004 0018             		move.b	#4,$18(a0)
00017C9E 7000                       		moveq	#0,d0
00017CA0 1028 0028                  		move.b	$28(a0),d0
00017CA4 3200                       		move.w	d0,d1
00017CA6 E648                       		lsr.w	#3,d0
00017CA8 0240 001E                  		andi.w	#$1E,d0
00017CAC 45FA 0000                  		lea	off_164A6(pc),a2
00017CB0 D4F2 0000                  		adda.w	(a2,d0.w),a2
00017CB4 315A 0038                  		move.w	(a2)+,$38(a0)
00017CB8 315A 0030                  		move.w	(a2)+,$30(a0)
00017CBC 214A 003C                  		move.l	a2,$3C(a0)
00017CC0 0241 000F                  		andi.w	#$F,d1
00017CC4 E549                       		lsl.w	#2,d1
00017CC6 1141 0038                  		move.b	d1,$38(a0)
00017CCA 117C 0004 003A             		move.b	#4,$3A(a0)
00017CD0 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00017CD4 6700                       		beq.s	loc_16356
00017CD6 117C 0001 003B             		move.b	#1,$3B(a0)
00017CDC 4428 003A                  		neg.b	$3A(a0)
00017CE0 7200                       		moveq	#0,d1
00017CE2 1228 0038                  		move.b	$38(a0),d1
00017CE6 D228 003A                  		add.b	$3A(a0),d1
00017CEA B228 0039                  		cmp.b	$39(a0),d1
00017CEE 6500                       		bcs.s	loc_16352
00017CF0 1001                       		move.b	d1,d0
00017CF2 7200                       		moveq	#0,d1
00017CF4 4A00                       		tst.b	d0
00017CF6 6A00                       		bpl.s	loc_16352
00017CF8 1228 0039                  		move.b	$39(a0),d1
00017CFC 5901                       		subq.b	#4,d1
00017CFE                            
00017CFE                            loc_16352:
00017CFE 1141 0038                  		move.b	d1,$38(a0)
00017D02                            
00017D02                            loc_16356:
00017D02 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00017D08 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00017D0E 4A41                       		tst.w	d1
00017D10 6600                       		bne.s	loc_1636C
00017D12 117C 0001 001C             		move.b	#1,$1C(a0)
00017D18                            
00017D18                            loc_1636C:
00017D18 0C41 0008                  		cmpi.w	#8,d1
00017D1C 6600                       		bne.s	loc_16378
00017D1E 117C 0000 001C             		move.b	#0,$1C(a0)
00017D24                            
00017D24                            loc_16378:
00017D24 6100 B332                  		bsr.w	Obj63_ChangeDir
00017D28 6000 0000                  		bra.w	loc_163D8
00017D2C                            ; ===========================================================================
00017D2C                            
00017D2C                            loc_16380:				; XREF: Obj6F_Main
00017D2C 1140 002F                  		move.b	d0,$2F(a0)
00017D30 0240 007F                  		andi.w	#$7F,d0
00017D34 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00017D38 08F2 0000 0000             		bset	#0,(a2,d0.w)
00017D3E 6700                       		beq.s	loc_1639A
00017D40 4EF9 0000 E11A             		jmp	DeleteObject
00017D46                            ; ===========================================================================
00017D46                            
00017D46                            loc_1639A:
00017D46 D040                       		add.w	d0,d0
00017D48 0240 001E                  		andi.w	#$1E,d0
00017D4C 0640 0080                  		addi.w	#$80,d0
00017D50 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00017D56 D4F2 0000                  		adda.w	(a2,d0.w),a2
00017D5A 321A                       		move.w	(a2)+,d1
00017D5C 2248                       		movea.l	a0,a1
00017D5E 6000                       		bra.s	Obj6F_LoadPform
00017D60                            ; ===========================================================================
00017D60                            
00017D60                            Obj6F_Loop:
00017D60 4EB9 0000 E574             		jsr	SingleObjLoad
00017D66 6600                       		bne.s	loc_163D0
00017D68                            
00017D68                            Obj6F_LoadPform:			; XREF: loc_1639A
00017D68 12BC 006F                  		move.b	#$6F,0(a1)
00017D6C 335A 0008                  		move.w	(a2)+,8(a1)
00017D70 335A 000C                  		move.w	(a2)+,$C(a1)
00017D74 301A                       		move.w	(a2)+,d0
00017D76 1340 0028                  		move.b	d0,$28(a1)
00017D7A                            
00017D7A                            loc_163D0:
00017D7A 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00017D7E                            
00017D7E 588F                       		addq.l	#4,sp
00017D80 4E75                       		rts	
00017D82                            ; ===========================================================================
00017D82                            
00017D82                            loc_163D8:				; XREF: Obj6F_Index
00017D82 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00017D88 4EB9 0000 B1F0             		jsr	AnimateSprite
00017D8E 4A28 001A                  		tst.b	$1A(a0)
00017D92 6600                       		bne.s	loc_16404
00017D94 3F28 0008                  		move.w	8(a0),-(sp)
00017D98 6100 0000                  		bsr.w	loc_16424
00017D9C 323C 001B                  		move.w	#$1B,d1
00017DA0 343C 0007                  		move.w	#7,d2
00017DA4 3602                       		move.w	d2,d3
00017DA6 5243                       		addq.w	#1,d3
00017DA8 381F                       		move.w	(sp)+,d4
00017DAA 6000 871C                  		bra.w	SolidObject
00017DAE                            ; ===========================================================================
00017DAE                            
00017DAE                            loc_16404:
00017DAE 0828 0003 0022             		btst	#3,$22(a0)
00017DB4 6700                       		beq.s	loc_16420
00017DB6 43F8 D000                  		lea	($FFFFD000).w,a1
00017DBA 08A9 0003 0022             		bclr	#3,$22(a1)
00017DC0 08A8 0003 0022             		bclr	#3,$22(a0)
00017DC6 4228 0025                  		clr.b	$25(a0)
00017DCA                            
00017DCA                            loc_16420:
00017DCA 6000 0002                  		bra.w	*+4
00017DCE                            
00017DCE                            loc_16424:
00017DCE 3028 0008                  		move.w	8(a0),d0
00017DD2 B068 0034                  		cmp.w	$34(a0),d0
00017DD6 6600                       		bne.s	loc_16484
00017DD8 3028 000C                  		move.w	$C(a0),d0
00017DDC B068 0036                  		cmp.w	$36(a0),d0
00017DE0 6600                       		bne.s	loc_16484
00017DE2 7200                       		moveq	#0,d1
00017DE4 1228 0038                  		move.b	$38(a0),d1
00017DE8 D228 003A                  		add.b	$3A(a0),d1
00017DEC B228 0039                  		cmp.b	$39(a0),d1
00017DF0 6500                       		bcs.s	loc_16456
00017DF2 1001                       		move.b	d1,d0
00017DF4 7200                       		moveq	#0,d1
00017DF6 4A00                       		tst.b	d0
00017DF8 6A00                       		bpl.s	loc_16456
00017DFA 1228 0039                  		move.b	$39(a0),d1
00017DFE 5901                       		subq.b	#4,d1
00017E00                            
00017E00                            loc_16456:
00017E00 1141 0038                  		move.b	d1,$38(a0)
00017E04 2268 003C                  		movea.l	$3C(a0),a1
00017E08 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00017E0E 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00017E14 4A41                       		tst.w	d1
00017E16 6600                       		bne.s	loc_16474
00017E18 117C 0001 001C             		move.b	#1,$1C(a0)
00017E1E                            
00017E1E                            loc_16474:
00017E1E 0C41 0008                  		cmpi.w	#8,d1
00017E22 6600                       		bne.s	loc_16480
00017E24 117C 0000 001C             		move.b	#0,$1C(a0)
00017E2A                            
00017E2A                            loc_16480:
00017E2A 6100 B22C                  		bsr.w	Obj63_ChangeDir
00017E2E                            
00017E2E                            loc_16484:
00017E2E 4EF9 0000 E0B8             		jmp	SpeedToPos
00017E34                            ; ===========================================================================
00017E34                            Ani_obj6F:
00017E34                            	include "_anim\obj6F.asm"
00017E34                            ; ---------------------------------------------------------------------------
00017E34                            ; Animation script - platform on conveyor belt (SBZ)
00017E34                            ; ---------------------------------------------------------------------------
00017E34 0000                       		dc.w byte_1648E-Ani_obj6F
00017E36 0000                       		dc.w byte_164A2-Ani_obj6F
00017E38 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00017E45 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00017E4C 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00017E50 00                         		even
00017E50 00                         		even
00017E50                            
00017E50 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00017E56 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00017E5C 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00017E70 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00017E84 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00017E98 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00017EAC 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00017EC0 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00017ED4                            ; ===========================================================================
00017ED4                            ; ---------------------------------------------------------------------------
00017ED4                            ; Object 70 - large girder block (SBZ)
00017ED4                            ; ---------------------------------------------------------------------------
00017ED4                            
00017ED4                            Obj70:					; XREF: Obj_Index
00017ED4 7000                       		moveq	#0,d0
00017ED6 1028 0024                  		move.b	$24(a0),d0
00017EDA 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00017EDE 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00017EE2                            ; ===========================================================================
00017EE2 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00017EE4 0000                       		dc.w Obj70_Action-Obj70_Index
00017EE6                            ; ===========================================================================
00017EE6                            
00017EE6                            Obj70_Main:				; XREF: Obj70_Index
00017EE6 5428 0024                  		addq.b	#2,$24(a0)
00017EEA 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00017EF2 317C 42F0 0002             		move.w	#$42F0,2(a0)
00017EF8 0028 0004 0001             		ori.b	#4,1(a0)
00017EFE 117C 0004 0018             		move.b	#4,$18(a0)
00017F04 117C 0060 0019             		move.b	#$60,$19(a0)
00017F0A 117C 0018 0016             		move.b	#$18,$16(a0)
00017F10 3168 0008 0032             		move.w	8(a0),$32(a0)
00017F16 3168 000C 0030             		move.w	$C(a0),$30(a0)
00017F1C 6100 0000                  		bsr.w	Obj70_Move2
00017F20                            
00017F20                            Obj70_Action:				; XREF: Obj70_Index
00017F20 3F28 0008                  		move.w	8(a0),-(sp)
00017F24 4A68 003A                  		tst.w	$3A(a0)
00017F28 6700                       		beq.s	Obj70_Move
00017F2A 5368 003A                  		subq.w	#1,$3A(a0)
00017F2E 6600                       		bne.s	Obj70_Solid
00017F30                            
00017F30                            Obj70_Move:
00017F30 4EB9 0000 E0B8             		jsr	SpeedToPos
00017F36 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00017F3A 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00017F3C 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00017F40                            
00017F40                            Obj70_Solid:
00017F40 381F                       		move.w	(sp)+,d4
00017F42 4A28 0001                  		tst.b	1(a0)
00017F46 6A00                       		bpl.s	Obj70_ChkDel
00017F48 7200                       		moveq	#0,d1
00017F4A 1228 0019                  		move.b	$19(a0),d1
00017F4E 0641 000B                  		addi.w	#$B,d1
00017F52 7400                       		moveq	#0,d2
00017F54 1428 0016                  		move.b	$16(a0),d2
00017F58 3602                       		move.w	d2,d3
00017F5A 5243                       		addq.w	#1,d3
00017F5C 6100 856A                  		bsr.w	SolidObject
00017F60                            
00017F60                            Obj70_ChkDel:
00017F60 3028 0032                  		move.w	$32(a0),d0
00017F64 0240 FF80                  		andi.w	#$FF80,d0
00017F68 3238 F700                  		move.w	($FFFFF700).w,d1
00017F6C 0441 0080                  		subi.w	#$80,d1
00017F70 0241 FF80                  		andi.w	#$FF80,d1
00017F74 9041                       		sub.w	d1,d0
00017F76 0C40 0280                  		cmpi.w	#$280,d0
00017F7A 6200                       		bhi.s	Obj70_Delete
00017F7C 4EF9 0000 E0DE             		jmp	DisplaySprite
00017F82                            ; ===========================================================================
00017F82                            
00017F82                            Obj70_Delete:
00017F82 4EF9 0000 E11A             		jmp	DeleteObject
00017F88                            ; ===========================================================================
00017F88                            
00017F88                            Obj70_Move2:				; XREF: Obj70_Main
00017F88 1028 0038                  		move.b	$38(a0),d0
00017F8C 0240 0018                  		andi.w	#$18,d0
00017F90 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00017F96 43F1 0000                  		lea	(a1,d0.w),a1
00017F9A 3159 0010                  		move.w	(a1)+,$10(a0)
00017F9E 3159 0012                  		move.w	(a1)+,$12(a0)
00017FA2 3159 0034                  		move.w	(a1)+,$34(a0)
00017FA6 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00017FAA 317C 0007 003A             		move.w	#7,$3A(a0)
00017FB0 4E75                       		rts	
00017FB2                            ; ===========================================================================
00017FB2 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00017FBA 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00017FC2 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00017FCA 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00017FD2                            ; ---------------------------------------------------------------------------
00017FD2                            ; Sprite mappings - large girder block (SBZ)
00017FD2                            ; ---------------------------------------------------------------------------
00017FD2                            Map_obj70:
00017FD2                            	include "_maps\obj70.asm"
00017FD2                            ; ---------------------------------------------------------------------------
00017FD2                            ; Sprite mappings - large girder block (SBZ)
00017FD2                            ; ---------------------------------------------------------------------------
00017FD2 0000                       		dc.w byte_1662A-Map_obj70
00017FD4 0C                         byte_1662A:	dc.b $C
00017FD5 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00017FDA 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00017FDF E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00017FE4 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00017FE9 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00017FEE 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00017FF3 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00017FF8 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00017FFD E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00018002 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00018007 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
0001800C 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00018012 00                         		even
00018012 00                         		even
00018012                            
00018012                            ; ===========================================================================
00018012                            ; ---------------------------------------------------------------------------
00018012                            ; Object 72 - teleporter (SBZ)
00018012                            ; ---------------------------------------------------------------------------
00018012                            
00018012                            Obj72:					; XREF: Obj_Index
00018012 7000                       		moveq	#0,d0
00018014 1028 0024                  		move.b	$24(a0),d0
00018018 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
0001801C 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00018020 3028 0008                  		move.w	8(a0),d0
00018024 0240 FF80                  		andi.w	#$FF80,d0
00018028 3238 F700                  		move.w	($FFFFF700).w,d1
0001802C 0441 0080                  		subi.w	#$80,d1
00018030 0241 FF80                  		andi.w	#$FF80,d1
00018034 9041                       		sub.w	d1,d0
00018036 0C40 0280                  		cmpi.w	#$280,d0
0001803A 6200                       		bhi.s	Obj72_Delete
0001803C 4E75                       		rts	
0001803E                            ; ===========================================================================
0001803E                            
0001803E                            Obj72_Delete:
0001803E 4EF9 0000 E11A             		jmp	DeleteObject
00018044                            ; ===========================================================================
00018044 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00018046 0000                       		dc.w loc_166C8-Obj72_Index
00018048 0000                       		dc.w loc_1675E-Obj72_Index
0001804A 0000                       		dc.w loc_16798-Obj72_Index
0001804C                            ; ===========================================================================
0001804C                            
0001804C                            Obj72_Main:				; XREF: Obj72_Index
0001804C 5428 0024                  		addq.b	#2,$24(a0)
00018050 1028 0028                  		move.b	$28(a0),d0
00018054 D040                       		add.w	d0,d0
00018056 0240 001E                  		andi.w	#$1E,d0
0001805A 45FA 0000                  		lea	Obj72_Data(pc),a2
0001805E D4F2 0000                  		adda.w	(a2,d0.w),a2
00018062 315A 003A                  		move.w	(a2)+,$3A(a0)
00018066 214A 003C                  		move.l	a2,$3C(a0)
0001806A 315A 0036                  		move.w	(a2)+,$36(a0)
0001806E 315A 0038                  		move.w	(a2)+,$38(a0)
00018072                            
00018072                            loc_166C8:				; XREF: Obj72_Index
00018072 43F8 D000                  		lea	($FFFFD000).w,a1
00018076 3029 0008                  		move.w	8(a1),d0
0001807A 9068 0008                  		sub.w	8(a0),d0
0001807E 0828 0000 0022             		btst	#0,$22(a0)
00018084 6700                       		beq.s	loc_166E0
00018086 0640 000F                  		addi.w	#$F,d0
0001808A                            
0001808A                            loc_166E0:
0001808A 0C40 0010                  		cmpi.w	#$10,d0
0001808E 6400                       		bcc.s	locret_1675C
00018090 3229 000C                  		move.w	$C(a1),d1
00018094 9268 000C                  		sub.w	$C(a0),d1
00018098 0641 0020                  		addi.w	#$20,d1
0001809C 0C41 0040                  		cmpi.w	#$40,d1
000180A0 6400                       		bcc.s	locret_1675C
000180A2 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000180A6 6600                       		bne.s	locret_1675C
000180A8 0C28 0007 0028             		cmpi.b	#7,$28(a0)
000180AE 6600                       		bne.s	loc_1670E
000180B0 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
000180B6 6500                       		bcs.s	locret_1675C
000180B8                            
000180B8                            loc_1670E:
000180B8 5428 0024                  		addq.b	#2,$24(a0)
000180BC 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000180C2 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
000180C8 337C 0800 0014             		move.w	#$800,$14(a1)
000180CE 337C 0000 0010             		move.w	#0,$10(a1)
000180D4 337C 0000 0012             		move.w	#0,$12(a1)
000180DA 08A8 0005 0022             		bclr	#5,$22(a0)
000180E0 08A9 0005 0022             		bclr	#5,$22(a1)
000180E6 08E9 0001 0022             		bset	#1,$22(a1)
000180EC 3368 0008 0008             		move.w	8(a0),8(a1)
000180F2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000180F8 4228 0032                  		clr.b	$32(a0)
000180FC 303C 00BE                  		move.w	#$BE,d0
00018100 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00018106                            
00018106                            locret_1675C:
00018106 4E75                       		rts	
00018108                            ; ===========================================================================
00018108                            
00018108                            loc_1675E:				; XREF: Obj72_Index
00018108 43F8 D000                  		lea	($FFFFD000).w,a1
0001810C 1028 0032                  		move.b	$32(a0),d0
00018110 5428 0032                  		addq.b	#2,$32(a0)
00018114 4EB9 0000 33D4             		jsr	(CalcSine).l
0001811A EA40                       		asr.w	#5,d0
0001811C 3428 000C                  		move.w	$C(a0),d2
00018120 9440                       		sub.w	d0,d2
00018122 3342 000C                  		move.w	d2,$C(a1)
00018126 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
0001812C 6600                       		bne.s	locret_16796
0001812E 6100 0000                  		bsr.w	sub_1681C
00018132 5428 0024                  		addq.b	#2,$24(a0)
00018136 303C 00BC                  		move.w	#$BC,d0
0001813A 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play teleport sound
00018140                            
00018140                            locret_16796:
00018140 4E75                       		rts	
00018142                            ; ===========================================================================
00018142                            
00018142                            loc_16798:				; XREF: Obj72_Index
00018142 588F                       		addq.l	#4,sp
00018144 43F8 D000                  		lea	($FFFFD000).w,a1
00018148 5328 002E                  		subq.b	#1,$2E(a0)
0001814C 6A00                       		bpl.s	loc_167DA
0001814E 3368 0036 0008             		move.w	$36(a0),8(a1)
00018154 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001815A 7200                       		moveq	#0,d1
0001815C 1228 003A                  		move.b	$3A(a0),d1
00018160 5801                       		addq.b	#4,d1
00018162 B228 003B                  		cmp.b	$3B(a0),d1
00018166 6500                       		bcs.s	loc_167C2
00018168 7200                       		moveq	#0,d1
0001816A 6000                       		bra.s	loc_16800
0001816C                            ; ===========================================================================
0001816C                            
0001816C                            loc_167C2:
0001816C 1141 003A                  		move.b	d1,$3A(a0)
00018170 2468 003C                  		movea.l	$3C(a0),a2
00018174 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
0001817A 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00018180 6000 0000                  		bra.w	sub_1681C
00018184                            ; ===========================================================================
00018184                            
00018184                            loc_167DA:
00018184 2429 0008                  		move.l	8(a1),d2
00018188 2629 000C                  		move.l	$C(a1),d3
0001818C 3029 0010                  		move.w	$10(a1),d0
00018190 48C0                       		ext.l	d0
00018192 E180                       		asl.l	#8,d0
00018194 D480                       		add.l	d0,d2
00018196 3029 0012                  		move.w	$12(a1),d0
0001819A 48C0                       		ext.l	d0
0001819C E180                       		asl.l	#8,d0
0001819E D680                       		add.l	d0,d3
000181A0 2342 0008                  		move.l	d2,8(a1)
000181A4 2343 000C                  		move.l	d3,$C(a1)
000181A8 4E75                       		rts	
000181AA                            ; ===========================================================================
000181AA                            
000181AA                            loc_16800:
000181AA 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
000181B0 4228 0024                  		clr.b	$24(a0)
000181B4 4238 F7C8                  		clr.b	($FFFFF7C8).w
000181B8 337C 0000 0010             		move.w	#0,$10(a1)
000181BE 337C 0200 0012             		move.w	#$200,$12(a1)
000181C4 4E75                       		rts	
000181C6                            
000181C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000181C6                            
000181C6                            
000181C6                            sub_1681C:
000181C6 7000                       		moveq	#0,d0
000181C8 343C 1000                  		move.w	#$1000,d2
000181CC 3028 0036                  		move.w	$36(a0),d0
000181D0 9069 0008                  		sub.w	8(a1),d0
000181D4 6C00                       		bge.s	loc_16830
000181D6 4440                       		neg.w	d0
000181D8 4442                       		neg.w	d2
000181DA                            
000181DA                            loc_16830:
000181DA 7200                       		moveq	#0,d1
000181DC 363C 1000                  		move.w	#$1000,d3
000181E0 3228 0038                  		move.w	$38(a0),d1
000181E4 9269 000C                  		sub.w	$C(a1),d1
000181E8 6C00                       		bge.s	loc_16844
000181EA 4441                       		neg.w	d1
000181EC 4443                       		neg.w	d3
000181EE                            
000181EE                            loc_16844:
000181EE B240                       		cmp.w	d0,d1
000181F0 6500                       		bcs.s	loc_1687A
000181F2 7200                       		moveq	#0,d1
000181F4 3228 0038                  		move.w	$38(a0),d1
000181F8 9269 000C                  		sub.w	$C(a1),d1
000181FC 4841                       		swap	d1
000181FE 83C3                       		divs.w	d3,d1
00018200 7000                       		moveq	#0,d0
00018202 3028 0036                  		move.w	$36(a0),d0
00018206 9069 0008                  		sub.w	8(a1),d0
0001820A 6700                       		beq.s	loc_16866
0001820C 4840                       		swap	d0
0001820E 81C1                       		divs.w	d1,d0
00018210                            
00018210                            loc_16866:
00018210 3340 0010                  		move.w	d0,$10(a1)
00018214 3343 0012                  		move.w	d3,$12(a1)
00018218 4A41                       		tst.w	d1
0001821A 6A00                       		bpl.s	loc_16874
0001821C 4441                       		neg.w	d1
0001821E                            
0001821E                            loc_16874:
0001821E 3141 002E                  		move.w	d1,$2E(a0)
00018222 4E75                       		rts	
00018224                            ; ===========================================================================
00018224                            
00018224                            loc_1687A:
00018224 7000                       		moveq	#0,d0
00018226 3028 0036                  		move.w	$36(a0),d0
0001822A 9069 0008                  		sub.w	8(a1),d0
0001822E 4840                       		swap	d0
00018230 81C2                       		divs.w	d2,d0
00018232 7200                       		moveq	#0,d1
00018234 3228 0038                  		move.w	$38(a0),d1
00018238 9269 000C                  		sub.w	$C(a1),d1
0001823C 6700                       		beq.s	loc_16898
0001823E 4841                       		swap	d1
00018240 83C0                       		divs.w	d0,d1
00018242                            
00018242                            loc_16898:
00018242 3341 0012                  		move.w	d1,$12(a1)
00018246 3342 0010                  		move.w	d2,$10(a1)
0001824A 4A40                       		tst.w	d0
0001824C 6A00                       		bpl.s	loc_168A6
0001824E 4440                       		neg.w	d0
00018250                            
00018250                            loc_168A6:
00018250 3140 002E                  		move.w	d0,$2E(a0)
00018254 4E75                       		rts	
00018256                            ; End of function sub_1681C
00018256                            
00018256                            ; ===========================================================================
00018256 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
0001825C 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00018262 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00018266 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
0001826C 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00018272 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00018278 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
0001827E 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00018284 0884 0298 0894             		dc.w $884, $298, $894
0001828A 0270 0894 0190             		dc.w $270, $894, $190
00018290 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00018296 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
0001829C 1184 0498 1158             		dc.w $1184, $498, $1158
000182A2 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
000182A8 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
000182AE 04E8 0F94 0590             		dc.w $4E8, $F94, $590
000182B4 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
000182BA 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
000182C0 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
000182C6 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
000182CC 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
000182D2 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
000182D8 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
000182DE                            ; ===========================================================================
000182DE                            ; ---------------------------------------------------------------------------
000182DE                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
000182DE                            ; ---------------------------------------------------------------------------
000182DE                            
000182DE                            Obj78:					; XREF: Obj_Index
000182DE 7000                       		moveq	#0,d0
000182E0 1028 0024                  		move.b	$24(a0),d0
000182E4 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
000182E8 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
000182EC                            ; ===========================================================================
000182EC 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
000182EE 0000                       		dc.w Obj78_Action-Obj78_Index
000182F0 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000182F2 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
000182F4 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000182F6 0000                       		dc.w Obj78_Delete-Obj78_Index
000182F8 0000                       		dc.w loc_16CC0-Obj78_Index
000182FA                            ; ===========================================================================
000182FA                            
000182FA                            locret_16950:
000182FA 4E75                       		rts	
000182FC                            ; ===========================================================================
000182FC                            
000182FC                            Obj78_Main:				; XREF: Obj78_Index
000182FC 117C 0007 0016             		move.b	#7,$16(a0)
00018302 117C 0008 0017             		move.b	#8,$17(a0)
00018308 4EB9 0000 E08C             		jsr	ObjectFall
0001830E 4EBA E4B0                  		jsr	ObjHitFloor
00018312 4A41                       		tst.w	d1
00018314 6AE4                       		bpl.s	locret_16950
00018316 D368 000C                  		add.w	d1,$C(a0)
0001831A 4268 0012                  		clr.w	$12(a0)
0001831E 5428 0024                  		addq.b	#2,$24(a0)
00018322 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
0001832A 317C 22B0 0002             		move.w	#$22B0,2(a0)
00018330 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00018336 6700                       		beq.s	loc_16996
00018338 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
0001833E                            
0001833E                            loc_16996:
0001833E 0228 0003 0001             		andi.b	#3,1(a0)
00018344 0028 0004 0001             		ori.b	#4,1(a0)
0001834A 1168 0001 0022             		move.b	1(a0),$22(a0)
00018350 117C 0004 0018             		move.b	#4,$18(a0)
00018356 117C 0008 0019             		move.b	#8,$19(a0)
0001835C 117C 000B 0020             		move.b	#$B,$20(a0)
00018362 3428 0008                  		move.w	8(a0),d2
00018366 7A0C                       		moveq	#$C,d5
00018368 0828 0000 0022             		btst	#0,$22(a0)
0001836E 6700                       		beq.s	loc_169CA
00018370 4445                       		neg.w	d5
00018372                            
00018372                            loc_169CA:
00018372 1C3C 0004                  		move.b	#4,d6
00018376 7600                       		moveq	#0,d3
00018378 7804                       		moveq	#4,d4
0001837A 2448                       		movea.l	a0,a2
0001837C 7202                       		moveq	#2,d1
0001837E                            
0001837E                            Obj78_LoadBody:
0001837E 4EB9 0000 E58A             		jsr	SingleObjLoad2
00018384 6600                       		bne.s	Obj78_QuitLoad
00018386 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
0001838A 1346 0024                  		move.b	d6,$24(a1)
0001838E 5406                       		addq.b	#2,d6
00018390 2368 0004 0004             		move.l	4(a0),4(a1)
00018396 3368 0002 0002             		move.w	2(a0),2(a1)
0001839C 137C 0005 0018             		move.b	#5,$18(a1)
000183A2 137C 0008 0019             		move.b	#8,$19(a1)
000183A8 137C 00CB 0020             		move.b	#$CB,$20(a1)
000183AE D445                       		add.w	d5,d2
000183B0 3342 0008                  		move.w	d2,8(a1)
000183B4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000183BA 1368 0022 0022             		move.b	$22(a0),$22(a1)
000183C0 1368 0022 0001             		move.b	$22(a0),1(a1)
000183C6 137C 0008 001A             		move.b	#8,$1A(a1)
000183CC 234A 003C                  		move.l	a2,$3C(a1)
000183D0 1344 003C                  		move.b	d4,$3C(a1)
000183D4 5804                       		addq.b	#4,d4
000183D6 2449                       		movea.l	a1,a2
000183D8                            
000183D8                            Obj78_QuitLoad:
000183D8 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
000183DC                            
000183DC 117C 0007 002A             		move.b	#7,$2A(a0)
000183E2 4228 003C                  		clr.b	$3C(a0)
000183E6                            
000183E6                            Obj78_Action:				; XREF: Obj78_Index
000183E6 4A28 0022                  		tst.b	$22(a0)
000183EA 6B00 0000                  		bmi.w	loc_16C96
000183EE 7000                       		moveq	#0,d0
000183F0 1028 0025                  		move.b	$25(a0),d0
000183F4 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
000183F8 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
000183FC 1228 002B                  		move.b	$2B(a0),d1
00018400 6A00                       		bpl.s	Obj78_Display
00018402 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00018408 1028 0026                  		move.b	$26(a0),d0
0001840C 0240 007F                  		andi.w	#$7F,d0
00018410 5828 0026                  		addq.b	#4,$26(a0)
00018414 1031 0000                  		move.b	(a1,d0.w),d0
00018418 6A00                       		bpl.s	Obj78_AniHead
0001841A 08A8 0007 002B             		bclr	#7,$2B(a0)
00018420 6000                       		bra.s	Obj78_Display
00018422                            ; ===========================================================================
00018422                            
00018422                            Obj78_AniHead:
00018422 0201 0010                  		andi.b	#$10,d1
00018426 D001                       		add.b	d1,d0
00018428 1140 001A                  		move.b	d0,$1A(a0)
0001842C                            
0001842C                            Obj78_Display:
0001842C 3028 0008                  		move.w	8(a0),d0
00018430 0240 FF80                  		andi.w	#$FF80,d0
00018434 3238 F700                  		move.w	($FFFFF700).w,d1
00018438 0441 0080                  		subi.w	#$80,d1
0001843C 0241 FF80                  		andi.w	#$FF80,d1
00018440 9041                       		sub.w	d1,d0
00018442 0C40 0280                  		cmpi.w	#$280,d0
00018446 6200 0000                  		bhi.w	Obj78_ChkGone
0001844A 4EF9 0000 E0DE             		jmp	DisplaySprite
00018450                            ; ===========================================================================
00018450                            
00018450                            Obj78_ChkGone:
00018450 45F8 FC00                  		lea	($FFFFFC00).w,a2
00018454 7000                       		moveq	#0,d0
00018456 1028 0023                  		move.b	$23(a0),d0
0001845A 6700                       		beq.s	loc_16ABC
0001845C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018462                            
00018462                            loc_16ABC:
00018462 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
00018468 4E75                       		rts	
0001846A                            ; ===========================================================================
0001846A                            
0001846A                            Obj78_Delete:				; XREF: Obj78_Index
0001846A 4EF9 0000 E11A             		jmp	DeleteObject
00018470                            ; ===========================================================================
00018470 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00018472 0000                       		dc.w loc_16B02-Obj78_Index2
00018474                            ; ===========================================================================
00018474                            
00018474                            Obj78_Move:				; XREF: Obj78_Index2
00018474 5328 002A                  		subq.b	#1,$2A(a0)
00018478 6B00                       		bmi.s	Obj78_Move2
0001847A 4E75                       		rts	
0001847C                            ; ===========================================================================
0001847C                            
0001847C                            Obj78_Move2:
0001847C 5428 0025                  		addq.b	#2,$25(a0)
00018480 117C 0010 002A             		move.b	#$10,$2A(a0)
00018486 317C FF40 0010             		move.w	#-$C0,$10(a0)
0001848C 317C 0040 0014             		move.w	#$40,$14(a0)
00018492 0868 0004 002B             		bchg	#4,$2B(a0)
00018498 6600                       		bne.s	loc_16AFC
0001849A 4268 0010                  		clr.w	$10(a0)
0001849E 4468 0014                  		neg.w	$14(a0)
000184A2                            
000184A2                            loc_16AFC:
000184A2 08E8 0007 002B             		bset	#7,$2B(a0)
000184A8                            
000184A8                            loc_16B02:				; XREF: Obj78_Index2
000184A8 5328 002A                  		subq.b	#1,$2A(a0)
000184AC 6B00                       		bmi.s	loc_16B5E
000184AE 2F28 0008                  		move.l	8(a0),-(sp)
000184B2 2428 0008                  		move.l	8(a0),d2
000184B6 3028 0010                  		move.w	$10(a0),d0
000184BA 0828 0000 0022             		btst	#0,$22(a0)
000184C0 6700                       		beq.s	loc_16B1E
000184C2 4440                       		neg.w	d0
000184C4                            
000184C4                            loc_16B1E:
000184C4 48C0                       		ext.l	d0
000184C6 E180                       		asl.l	#8,d0
000184C8 D480                       		add.l	d0,d2
000184CA 2142 0008                  		move.l	d2,8(a0)
000184CE 4EBA E2F0                  		jsr	ObjHitFloor
000184D2 241F                       		move.l	(sp)+,d2
000184D4 0C41 FFF8                  		cmpi.w	#-8,d1
000184D8 6D00                       		blt.s	loc_16B70
000184DA 0C41 000C                  		cmpi.w	#$C,d1
000184DE 6C00                       		bge.s	loc_16B70
000184E0 D368 000C                  		add.w	d1,$C(a0)
000184E4 4842                       		swap	d2
000184E6 B468 0008                  		cmp.w	8(a0),d2
000184EA 6700                       		beq.s	locret_16B5C
000184EC 7000                       		moveq	#0,d0
000184EE 1028 003C                  		move.b	$3C(a0),d0
000184F2 5228 003C                  		addq.b	#1,$3C(a0)
000184F6 0228 000F 003C             		andi.b	#$F,$3C(a0)
000184FC 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018500                            
00018500                            locret_16B5C:
00018500 4E75                       		rts	
00018502                            ; ===========================================================================
00018502                            
00018502                            loc_16B5E:
00018502 5528 0025                  		subq.b	#2,$25(a0)
00018506 117C 0007 002A             		move.b	#7,$2A(a0)
0001850C 317C 0000 0010             		move.w	#0,$10(a0)
00018512 4E75                       		rts	
00018514                            ; ===========================================================================
00018514                            
00018514                            loc_16B70:
00018514 2142 0008                  		move.l	d2,8(a0)
00018518 0868 0000 0022             		bchg	#0,$22(a0)
0001851E 1168 0022 0001             		move.b	$22(a0),1(a0)
00018524 7000                       		moveq	#0,d0
00018526 1028 003C                  		move.b	$3C(a0),d0
0001852A 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00018530 5228 003C                  		addq.b	#1,$3C(a0)
00018534 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001853A 4E75                       		rts	
0001853C                            ; ===========================================================================
0001853C                            
0001853C                            Obj78_BodySeg2:				; XREF: Obj78_Index
0001853C 2268 003C                  		movea.l	$3C(a0),a1
00018540 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00018546 6A00                       		bpl.s	Obj78_BodySeg1
00018548 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001854E 1028 0026                  		move.b	$26(a0),d0
00018552 0240 007F                  		andi.w	#$7F,d0
00018556 5828 0026                  		addq.b	#4,$26(a0)
0001855A 4A31 0004                  		tst.b	4(a1,d0.w)
0001855E 6A00                       		bpl.s	Obj78_AniBody
00018560 5828 0026                  		addq.b	#4,$26(a0)
00018564                            
00018564                            Obj78_AniBody:
00018564 1031 0000                  		move.b	(a1,d0.w),d0
00018568 5000                       		addq.b	#8,d0
0001856A 1140 001A                  		move.b	d0,$1A(a0)
0001856E                            
0001856E                            Obj78_BodySeg1:				; XREF: Obj78_Index
0001856E 2268 003C                  		movea.l	$3C(a0),a1
00018572 4A28 0022                  		tst.b	$22(a0)
00018576 6B00 0000                  		bmi.w	loc_16C90
0001857A 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00018580 1169 0025 0025             		move.b	$25(a1),$25(a0)
00018586 6700 0000                  		beq.w	loc_16C64
0001858A 3169 0014 0014             		move.w	$14(a1),$14(a0)
00018590 3029 0010                  		move.w	$10(a1),d0
00018594 D069 0014                  		add.w	$14(a1),d0
00018598 3140 0010                  		move.w	d0,$10(a0)
0001859C 2428 0008                  		move.l	8(a0),d2
000185A0 2602                       		move.l	d2,d3
000185A2 3028 0010                  		move.w	$10(a0),d0
000185A6 0828 0000 0022             		btst	#0,$22(a0)
000185AC 6700                       		beq.s	loc_16C0C
000185AE 4440                       		neg.w	d0
000185B0                            
000185B0                            loc_16C0C:
000185B0 48C0                       		ext.l	d0
000185B2 E180                       		asl.l	#8,d0
000185B4 D480                       		add.l	d0,d2
000185B6 2142 0008                  		move.l	d2,8(a0)
000185BA 4843                       		swap	d3
000185BC B668 0008                  		cmp.w	8(a0),d3
000185C0 6700                       		beq.s	loc_16C64
000185C2 7000                       		moveq	#0,d0
000185C4 1028 003C                  		move.b	$3C(a0),d0
000185C8 1231 002C                  		move.b	$2C(a1,d0.w),d1
000185CC 0C01 0080                  		cmpi.b	#-$80,d1
000185D0 6600                       		bne.s	loc_16C50
000185D2 4843                       		swap	d3
000185D4 2143 0008                  		move.l	d3,8(a0)
000185D8 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000185DC 0868 0000 0022             		bchg	#0,$22(a0)
000185E2 1168 0022 0001             		move.b	$22(a0),1(a0)
000185E8 5228 003C                  		addq.b	#1,$3C(a0)
000185EC 0228 000F 003C             		andi.b	#$F,$3C(a0)
000185F2 6000                       		bra.s	loc_16C64
000185F4                            ; ===========================================================================
000185F4                            
000185F4                            loc_16C50:
000185F4 4881                       		ext.w	d1
000185F6 D368 000C                  		add.w	d1,$C(a0)
000185FA 5228 003C                  		addq.b	#1,$3C(a0)
000185FE 0228 000F 003C             		andi.b	#$F,$3C(a0)
00018604 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00018608                            
00018608                            loc_16C64:
00018608 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
0001860E 6700                       		beq.s	loc_16C90
00018610 0C11 0027                  		cmpi.b	#$27,0(a1)
00018614 6700                       		beq.s	loc_16C7C
00018616 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
0001861C 6600                       		bne.s	loc_16C82
0001861E                            
0001861E                            loc_16C7C:
0001861E 4229 0020                  		clr.b	$20(a1)	; immediately remove all touch response values when destroying the head to avoid taking damage
00018622 117C 000A 0024             		move.b	#$A,$24(a0)
00018628                            
00018628                            loc_16C82:
00018628 4EF9 0000 E0DE             		jmp	DisplaySprite
0001862E                            
0001862E                            ; ===========================================================================
0001862E FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00018636                            ; ===========================================================================
00018636                            
00018636                            loc_16C90:
00018636 08E9 0007 0022             		bset	#7,$22(a1)
0001863C                            
0001863C                            loc_16C96:
0001863C 7000                       		moveq	#0,d0
0001863E 1028 0024                  		move.b	$24(a0),d0
00018642 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00018646 0828 0000 0022             		btst	#0,$22(a0)
0001864C 6700                       		beq.s	loc_16CAA
0001864E 4440                       		neg.w	d0
00018650                            
00018650                            loc_16CAA:
00018650 3140 0010                  		move.w	d0,$10(a0)
00018654 317C FC00 0012             		move.w	#-$400,$12(a0)
0001865A 117C 000C 0024             		move.b	#$C,$24(a0)
00018660 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00018666                            
00018666                            loc_16CC0:				; XREF: Obj78_Index
00018666 4EB9 0000 E08C             		jsr	ObjectFall
0001866C 4A68 0012                  		tst.w	$12(a0)
00018670 6B00                       		bmi.s	loc_16CE0
00018672 4EBA E14C                  		jsr	ObjHitFloor
00018676 4A41                       		tst.w	d1
00018678 6A00                       		bpl.s	loc_16CE0
0001867A D368 000C                  		add.w	d1,$C(a0)
0001867E 317C FC00 0012             		move.w	#-$400,$12(a0)
00018684                            
00018684                            loc_16CE0:
00018684 4A28 0001                  		tst.b	1(a0)
00018688 6A00 FDC6                  		bpl.w	Obj78_ChkGone
0001868C 4EF9 0000 E0DE             		jmp	DisplaySprite
00018692                            ; ===========================================================================
00018692                            Ani_obj78:
00018692                            	include "_anim\obj78.asm"
00018692                            ; ---------------------------------------------------------------------------
00018692                            ; Animation script - Caterkiller enemy (uses non-standard format)
00018692                            ; ---------------------------------------------------------------------------
00018692 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
000186A2 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
000186B2 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
000186C2 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
000186D2 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
000186E2 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
000186F2 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00018702 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00018712                            	even
00018712                            	even
00018712                            
00018712                            ; ---------------------------------------------------------------------------
00018712                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00018712                            ; ---------------------------------------------------------------------------
00018712                            Map_obj78:
00018712                            	include "_maps\obj78.asm"
00018712                            ; ---------------------------------------------------------------------------
00018712                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00018712                            ; ---------------------------------------------------------------------------
00018712 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00018716 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
0001871A 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
0001871E 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00018722 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00018726 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
0001872A 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
0001872E 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00018732 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00018736 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
0001873A 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
0001873E 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00018742 01                         byte_16D9E:	dc.b 1
00018743 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00018748 01                         byte_16DA4:	dc.b 1
00018749 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
0001874E 01                         byte_16DAA:	dc.b 1
0001874F F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00018754 01                         byte_16DB0:	dc.b 1
00018755 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
0001875A 01                         byte_16DB6:	dc.b 1
0001875B EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00018760 01                         byte_16DBC:	dc.b 1
00018761 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00018766 01                         byte_16DC2:	dc.b 1
00018767 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
0001876C 01                         byte_16DC8:	dc.b 1
0001876D EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00018772 01                         byte_16DCE:	dc.b 1
00018773 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00018778 01                         byte_16DD4:	dc.b 1
00018779 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
0001877E 01                         byte_16DDA:	dc.b 1
0001877F F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00018784 01                         byte_16DE0:	dc.b 1
00018785 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
0001878A 01                         byte_16DE6:	dc.b 1
0001878B F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00018790 01                         byte_16DEC:	dc.b 1
00018791 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00018796 01                         byte_16DF2:	dc.b 1
00018797 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
0001879C 01                         byte_16DF8:	dc.b 1
0001879D F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
000187A2 01                         byte_16DFE:	dc.b 1
000187A3 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
000187A8 01                         byte_16E04:	dc.b 1
000187A9 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
000187AE 01                         byte_16E0A:	dc.b 1
000187AF F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
000187B4 01                         byte_16E10:	dc.b 1
000187B5 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
000187BA 01                         byte_16E16:	dc.b 1
000187BB EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
000187C0 01                         byte_16E1C:	dc.b 1
000187C1 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
000187C6 01                         byte_16E22:	dc.b 1
000187C7 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
000187CC 01                         byte_16E28:	dc.b 1
000187CD EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
000187D2                            		even
000187D2                            		even
000187D2                            
000187D2                            ; ===========================================================================
000187D2                            ; ---------------------------------------------------------------------------
000187D2                            ; Object 79 - lamppost
000187D2                            ; ---------------------------------------------------------------------------
000187D2                            
000187D2                            Obj79:					; XREF: Obj_Index
000187D2 7000                       		moveq	#0,d0
000187D4 1028 0024                  		move.b	$24(a0),d0
000187D8 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
000187DC 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
000187E0 4EF9 0001 01A0             		jmp	MarkObjGone
000187E6                            ; ===========================================================================
000187E6 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
000187E8 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
000187EA 0000                       		dc.w Obj79_AfterHit-Obj79_Index
000187EC 0000                       		dc.w Obj79_Twirl-Obj79_Index
000187EE                            ; ===========================================================================
000187EE                            
000187EE                            Obj79_Main:				; XREF: Obj79_Index
000187EE 5428 0024                  		addq.b	#2,$24(a0)
000187F2 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
000187FA 317C 06C0 0002             		move.w	#($D800/$20),2(a0)
00018800 117C 0004 0001             		move.b	#4,1(a0)
00018806 117C 0008 0019             		move.b	#8,$19(a0)
0001880C 117C 0005 0018             		move.b	#5,$18(a0)
00018812 45F8 FC00                  		lea	($FFFFFC00).w,a2
00018816 7000                       		moveq	#0,d0
00018818 1028 0023                  		move.b	$23(a0),d0
0001881C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018822 0832 0000 0002             		btst	#0,2(a2,d0.w)
00018828 6600                       		bne.s	Obj79_RedLamp
0001882A 1238 FE30                  		move.b	($FFFFFE30).w,d1
0001882E 0201 007F                  		andi.b	#$7F,d1
00018832 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00018836 0202 007F                  		andi.b	#$7F,d2
0001883A B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
0001883C 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
0001883E                            
0001883E                            Obj79_RedLamp:
0001883E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018844 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
0001884A 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00018850 4E75                       		rts	
00018852                            ; ===========================================================================
00018852                            
00018852                            Obj79_BlueLamp:				; XREF: Obj79_Index
00018852 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00018856 6600 0000                  		bne.w	locret_16F90	; if yes, branch
0001885A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001885E 6B00 0000                  		bmi.w	locret_16F90
00018862 1238 FE30                  		move.b	($FFFFFE30).w,d1
00018866 0201 007F                  		andi.b	#$7F,d1
0001886A 1428 0028                  		move.b	$28(a0),d2
0001886E 0202 007F                  		andi.b	#$7F,d2
00018872 B202                       		cmp.b	d2,d1
00018874 6500                       		bcs.s	Obj79_HitLamp
00018876 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001887A 7000                       		moveq	#0,d0
0001887C 1028 0023                  		move.b	$23(a0),d0
00018880 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018886 117C 0004 0024             		move.b	#4,$24(a0)
0001888C 117C 0003 001A             		move.b	#3,$1A(a0)
00018892 6000 0000                  		bra.w	locret_16F90
00018896                            ; ===========================================================================
00018896                            
00018896                            Obj79_HitLamp:
00018896 3038 D008                  		move.w	($FFFFD008).w,d0
0001889A 9068 0008                  		sub.w	8(a0),d0
0001889E 5040                       		addq.w	#8,d0
000188A0 0C40 0010                  		cmpi.w	#$10,d0
000188A4 6400 0000                  		bcc.w	locret_16F90
000188A8 3038 D00C                  		move.w	($FFFFD00C).w,d0
000188AC 9068 000C                  		sub.w	$C(a0),d0
000188B0 0640 0040                  		addi.w	#$40,d0
000188B4 0C40 0068                  		cmpi.w	#$68,d0
000188B8 6400                       		bcc.s	locret_16F90
000188BA 303C 00A1                  		move.w	#$A1,d0
000188BE 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play lamppost sound
000188C4 5428 0024                  		addq.b	#2,$24(a0)
000188C8 4EB9 0000 E574             		jsr	SingleObjLoad
000188CE 6600                       		bne.s	loc_16F76
000188D0 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
000188D4 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
000188DA 3368 0008 0030             		move.w	8(a0),$30(a1)
000188E0 3368 000C 0032             		move.w	$C(a0),$32(a1)
000188E6 0469 0018 0032             		subi.w	#$18,$32(a1)
000188EC 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
000188F4 337C 06C0 0002             		move.w	#($D800/$20),2(a1)
000188FA 137C 0004 0001             		move.b	#4,1(a1)
00018900 137C 0008 0019             		move.b	#8,$19(a1)
00018906 137C 0004 0018             		move.b	#4,$18(a1)
0001890C 137C 0002 001A             		move.b	#2,$1A(a1)
00018912 337C 0020 0036             		move.w	#$20,$36(a1)
00018918                            
00018918                            loc_16F76:
00018918 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
0001891E 6100 0000                  		bsr.w	Obj79_StoreInfo
00018922 45F8 FC00                  		lea	($FFFFFC00).w,a2
00018926 7000                       		moveq	#0,d0
00018928 1028 0023                  		move.b	$23(a0),d0
0001892C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018932                            
00018932                            locret_16F90:
00018932 4E75                       		rts	
00018934                            ; ===========================================================================
00018934                            
00018934                            Obj79_AfterHit:				; XREF: Obj79_Index
00018934 4E75                       		rts	
00018936                            ; ===========================================================================
00018936                            
00018936                            Obj79_Twirl:				; XREF: Obj79_Index
00018936 5368 0036                  		subq.w	#1,$36(a0)
0001893A 6A00                       		bpl.s	loc_16FA0
0001893C 117C 0004 0024             		move.b	#4,$24(a0)
00018942                            
00018942                            loc_16FA0:
00018942 1028 0026                  		move.b	$26(a0),d0
00018946 0428 0010 0026             		subi.b	#$10,$26(a0)
0001894C 0400 0040                  		subi.b	#$40,d0
00018950 4EB9 0000 33D4             		jsr	(CalcSine).l
00018956 C3FC 0C00                  		muls.w	#$C00,d1
0001895A 4841                       		swap	d1
0001895C D268 0030                  		add.w	$30(a0),d1
00018960 3141 0008                  		move.w	d1,8(a0)
00018964 C1FC 0C00                  		muls.w	#$C00,d0
00018968 4840                       		swap	d0
0001896A D068 0032                  		add.w	$32(a0),d0
0001896E 3140 000C                  		move.w	d0,$C(a0)
00018972 4E75                       		rts	
00018974                            ; ===========================================================================
00018974                            ; ---------------------------------------------------------------------------
00018974                            ; Subroutine to	store information when you hit a lamppost
00018974                            ; ---------------------------------------------------------------------------
00018974                            
00018974                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00018974 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
0001897A 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00018980 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00018986 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
0001898C 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00018992 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00018998 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
0001899E 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
000189A4 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
000189AA 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
000189B0 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
000189B6 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
000189BC 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
000189C2 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
000189C8 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
000189CE 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
000189D4 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
000189DA 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
000189E0 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
000189E6 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
000189EC 4E75                       		rts	
000189EE                            
000189EE                            ; ---------------------------------------------------------------------------
000189EE                            ; Subroutine to	load stored info when you start	a level	from a lamppost
000189EE                            ; ---------------------------------------------------------------------------
000189EE                            
000189EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000189EE                            
000189EE                            
000189EE                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
000189EE 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
000189F4 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
000189FA 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00018A00 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00018A06 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00018A0C 4278 FE20                  		clr.w	($FFFFFE20).w
00018A10 4238 FE1B                  		clr.b	($FFFFFE1B).w
00018A14 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00018A1A 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00018A20 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00018A24 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00018A2A 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00018A30 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00018A36 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00018A3C 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00018A42 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00018A48 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00018A4E 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00018A54 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00018A5A 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00018A60 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00018A66 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00018A6C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00018A72 6600                       		bne.s	loc_170E4
00018A74 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00018A7A 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00018A80 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00018A86                            
00018A86                            loc_170E4:
00018A86 4A38 FE30                  		tst.b	($FFFFFE30).w
00018A8A 6A00                       		bpl.s	locret_170F6
00018A8C 3038 FE32                  		move.w	($FFFFFE32).w,d0
00018A90 0440 00A0                  		subi.w	#$A0,d0
00018A94 31C0 F728                  		move.w	d0,($FFFFF728).w
00018A98                            
00018A98                            locret_170F6:
00018A98 4E75                       		rts	
00018A9A                            ; End of function Obj79_LoadInfo
00018A9A                            
00018A9A                            ; ===========================================================================
00018A9A                            ; ---------------------------------------------------------------------------
00018A9A                            ; Sprite mappings - lamppost
00018A9A                            ; ---------------------------------------------------------------------------
00018A9A                            Map_obj79:
00018A9A                            	include "_maps\obj79.asm"
00018A9A                            ; ---------------------------------------------------------------------------
00018A9A                            ; Sprite mappings - lamppost
00018A9A                            ; ---------------------------------------------------------------------------
00018A9A 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00018A9E 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00018AA2 06                         byte_17100:	dc.b 6
00018AA3 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00018AA8 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00018AAD F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00018AB2 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00018AB7 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00018ABC D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00018AC1 04                         byte_1711F:	dc.b 4
00018AC2 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00018AC7 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00018ACC F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00018AD1 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00018AD6 02                         byte_17134:	dc.b 2
00018AD7 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00018ADC F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00018AE1 06                         byte_1713F:	dc.b 6
00018AE2 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00018AE7 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00018AEC F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00018AF1 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00018AF6 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00018AFB D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00018B00                            		even
00018B00                            		even
00018B00                            
00018B00                            ; ===========================================================================
00018B00                            ; ---------------------------------------------------------------------------
00018B00                            ; Object 7D - hidden points at the end of a level
00018B00                            ; ---------------------------------------------------------------------------
00018B00                            
00018B00                            Obj7D:					; XREF: Obj_Index
00018B00 7000                       		moveq	#0,d0
00018B02 1028 0024                  		move.b	$24(a0),d0
00018B06 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00018B0A 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00018B0E                            ; ===========================================================================
00018B0E 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00018B10 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00018B12                            ; ===========================================================================
00018B12                            
00018B12                            Obj7D_Main:				; XREF: Obj7D_Index
00018B12 7410                       		moveq	#$10,d2
00018B14 3602                       		move.w	d2,d3
00018B16 D643                       		add.w	d3,d3
00018B18 43F8 D000                  		lea	($FFFFD000).w,a1
00018B1C 3029 0008                  		move.w	8(a1),d0
00018B20 9068 0008                  		sub.w	8(a0),d0
00018B24 D042                       		add.w	d2,d0
00018B26 B043                       		cmp.w	d3,d0
00018B28 6400                       		bcc.s	Obj7D_ChkDel
00018B2A 3229 000C                  		move.w	$C(a1),d1
00018B2E 9268 000C                  		sub.w	$C(a0),d1
00018B32 D242                       		add.w	d2,d1
00018B34 B243                       		cmp.w	d3,d1
00018B36 6400                       		bcc.s	Obj7D_ChkDel
00018B38 4A78 FE08                  		tst.w	($FFFFFE08).w
00018B3C 6600                       		bne.s	Obj7D_ChkDel
00018B3E 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00018B42 6600                       		bne.s	Obj7D_ChkDel
00018B44 5428 0024                  		addq.b	#2,$24(a0)
00018B48 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00018B50 317C 84B6 0002             		move.w	#$84B6,2(a0)
00018B56 0028 0004 0001             		ori.b	#4,1(a0)
00018B5C 117C 0000 0018             		move.b	#0,$18(a0)
00018B62 117C 0010 0019             		move.b	#$10,$19(a0)
00018B68 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00018B6E 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00018B74 303C 00C9                  		move.w	#$C9,d0
00018B78 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play bonus sound
00018B7E 7000                       		moveq	#0,d0
00018B80 1028 0028                  		move.b	$28(a0),d0
00018B84 D040                       		add.w	d0,d0
00018B86 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00018B8A 4EB9 0000 0000             		jsr	AddPoints
00018B90                            
00018B90                            Obj7D_ChkDel:
00018B90 3028 0008                  		move.w	8(a0),d0
00018B94 0240 FF80                  		andi.w	#$FF80,d0
00018B98 3238 F700                  		move.w	($FFFFF700).w,d1
00018B9C 0441 0080                  		subi.w	#$80,d1
00018BA0 0241 FF80                  		andi.w	#$FF80,d1
00018BA4 9041                       		sub.w	d1,d0
00018BA6 0C40 0280                  		cmpi.w	#$280,d0
00018BAA 6200                       		bhi.s	Obj7D_Delete
00018BAC 4E75                       		rts	
00018BAE                            ; ===========================================================================
00018BAE                            
00018BAE                            Obj7D_Delete:
00018BAE 4EF9 0000 E11A             		jmp	DeleteObject
00018BB4                            ; ===========================================================================
00018BB4 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00018BB6 03E8                       		dc.w 1000
00018BB8 0064                       		dc.w 100
00018BBA 000A                       		dc.w 10
00018BBC                            ; ===========================================================================
00018BBC                            
00018BBC                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00018BBC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00018BC0 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00018BC2 3028 0008                  		move.w	8(a0),d0
00018BC6 0240 FF80                  		andi.w	#-$80,d0
00018BCA 3238 F700                  		move.w	($FFFFF700).w,d1
00018BCE 0441 0080                  		subi.w	#$80,d1
00018BD2 0241 FF80                  		andi.w	#-$80,d1
00018BD6 9041                       		sub.w	d1,d0
00018BD8 0C40 0280                  		cmpi.w	#$280,d0
00018BDC 6200                       		bhi.s	Obj7D_Delete2
00018BDE 4EF9 0000 E0DE             		jmp	DisplaySprite
00018BE4                            ; ===========================================================================
00018BE4                            
00018BE4                            Obj7D_Delete2:
00018BE4 4EF9 0000 E11A             		jmp	DeleteObject
00018BEA                            ; ===========================================================================
00018BEA                            ; ---------------------------------------------------------------------------
00018BEA                            ; Sprite mappings - hidden points at the end of	a level
00018BEA                            ; ---------------------------------------------------------------------------
00018BEA                            Map_obj7D:
00018BEA                            	include "_maps\obj7D.asm"
00018BEA                            ; ---------------------------------------------------------------------------
00018BEA                            ; Sprite mappings - hidden points at the end of	a level
00018BEA                            ; ---------------------------------------------------------------------------
00018BEA 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00018BEE 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00018BF2 00                         byte_17250:	dc.b 0
00018BF3 01                         byte_17251:	dc.b 1
00018BF4 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00018BF9 01                         byte_17257:	dc.b 1
00018BFA F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00018BFF 01                         byte_1725D:	dc.b 1
00018C00 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00018C06 00                         		even
00018C06 00                         		even
00018C06                            
00018C06                            ; ===========================================================================
00018C06                            ; ---------------------------------------------------------------------------
00018C06                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00018C06                            ; ---------------------------------------------------------------------------
00018C06                            
00018C06                            Obj8A:					; XREF: Obj_Index
00018C06 7000                       		moveq	#0,d0
00018C08 1028 0024                  		move.b	$24(a0),d0
00018C0C 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00018C10 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00018C14                            ; ===========================================================================
00018C14 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00018C16 0000                       		dc.w Obj8A_Display-Obj8A_Index
00018C18                            ; ===========================================================================
00018C18                            
00018C18                            Obj8A_Main:				; XREF: Obj8A_Index
00018C18 5428 0024                  		addq.b	#2,$24(a0)
00018C1C 317C 0120 0008             		move.w	#$120,8(a0)
00018C22 317C 00F0 000A             		move.w	#$F0,$A(a0)
00018C28 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00018C30 317C 05A0 0002             		move.w	#$5A0,2(a0)
00018C36 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00018C3A 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00018C3E 117C 0000 0001             		move.b	#0,1(a0)
00018C44 117C 0000 0018             		move.b	#0,$18(a0)
00018C4A 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00018C50 6600                       		bne.s	Obj8A_Display	; if not, branch
00018C52 317C 00A6 0002             		move.w	#$A6,2(a0)
00018C58 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00018C5E 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00018C62 6700                       		beq.s	Obj8A_Display	; if not, branch
00018C64 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00018C6A 6600                       		bne.s	Obj8A_Display	; if not, branch
00018C6C 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00018C72 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00018C78 4EF9 0000 E11A             		jmp	DeleteObject
00018C7E                            ; ===========================================================================
00018C7E                            
00018C7E                            Obj8A_Display:				; XREF: Obj8A_Index
00018C7E 4EF9 0000 E0DE             		jmp	DisplaySprite
00018C84                            ; ===========================================================================
00018C84                            ; ---------------------------------------------------------------------------
00018C84                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00018C84                            ; ---------------------------------------------------------------------------
00018C84                            Map_obj8A:
00018C84                            	include "_maps\obj8A.asm"
00018C84                            ; ---------------------------------------------------------------------------
00018C84                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00018C84                            ; ---------------------------------------------------------------------------
00018C84 0000 0000                  		dc.w byte_172F8-Map_obj8A, byte_1733F-Map_obj8A
00018C88 0000 0000                  		dc.w byte_17390-Map_obj8A, byte_173C3-Map_obj8A
00018C8C 0000 0000                  		dc.w byte_1743C-Map_obj8A, byte_174A1-Map_obj8A
00018C90 0000 0000                  		dc.w byte_17524-Map_obj8A, byte_17598-Map_obj8A
00018C94 0000 0000                  		dc.w byte_17634-Map_obj8A, byte_17680-Map_obj8A
00018C98 0000                       		dc.w byte_176A9-Map_obj8A
00018C9A 0E                         byte_172F8:	dc.b $E			 ; SONIC TEAM STAFF
00018C9B F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
00018CA0 F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
00018CA5 F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
00018CAA F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
00018CAF F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
00018CB4 F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
00018CB9 F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
00018CBE F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00018CC3 F809 0008 08               		dc.b $F8, 9, 0,	8, 8
00018CC8 F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
00018CCD F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
00018CD2 F805 0004 48               		dc.b $F8, 5, 0,	4, $48
00018CD7 F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
00018CDC F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
00018CE1 10                         byte_1733F:	dc.b $10		; GAME PLAN CAROL YAS
00018CE2 D805 0000 80               		dc.b $D8, 5, 0,	0, $80
00018CE7 D805 0004 90               		dc.b $D8, 5, 0,	4, $90
00018CEC D809 0008 A0               		dc.b $D8, 9, 0,	8, $A0
00018CF1 D805 000E B4               		dc.b $D8, 5, 0,	$E, $B4
00018CF6 D805 0012 D0               		dc.b $D8, 5, 0,	$12, $D0
00018CFB D805 0016 E0               		dc.b $D8, 5, 0,	$16, $E0
00018D00 D805 0004 F0               		dc.b $D8, 5, 0,	4, $F0
00018D05 D805 001A 00               		dc.b $D8, 5, 0,	$1A, 0
00018D0A 0805 001E C8               		dc.b 8,	5, 0, $1E, $C8
00018D0F 0805 0004 D8               		dc.b 8,	5, 0, 4, $D8
00018D14 0805 0022 E8               		dc.b 8,	5, 0, $22, $E8
00018D19 0805 0026 F8               		dc.b 8,	5, 0, $26, $F8
00018D1E 0805 0016 08               		dc.b 8,	5, 0, $16, 8
00018D23 0805 002A 20               		dc.b 8,	5, 0, $2A, $20
00018D28 0805 0004 30               		dc.b 8,	5, 0, 4, $30
00018D2D 0805 002E 44               		dc.b 8,	5, 0, $2E, $44
00018D32 0A                         byte_17390:	dc.b $A			 ; PROGRAM YU 2
00018D33 D805 0012 80               		dc.b $D8, 5, 0,	$12, $80
00018D38 D805 0022 90               		dc.b $D8, 5, 0,	$22, $90
00018D3D D805 0026 A0               		dc.b $D8, 5, 0,	$26, $A0
00018D42 D805 0000 B0               		dc.b $D8, 5, 0,	0, $B0
00018D47 D805 0022 C0               		dc.b $D8, 5, 0,	$22, $C0
00018D4C D805 0004 D0               		dc.b $D8, 5, 0,	4, $D0
00018D51 D809 0008 E0               		dc.b $D8, 9, 0,	8, $E0
00018D56 0805 002A E8               		dc.b 8,	5, 0, $2A, $E8
00018D5B 0805 0032 F8               		dc.b 8,	5, 0, $32, $F8
00018D60 0805 0036 08               		dc.b 8,	5, 0, $36, 8
00018D65 18                         byte_173C3:	dc.b $18		 ; CHARACTER DESIGN BIGISLAND
00018D66 D805 001E 88               		dc.b $D8, 5, 0,	$1E, $88
00018D6B D805 003A 98               		dc.b $D8, 5, 0,	$3A, $98
00018D70 D805 0004 A8               		dc.b $D8, 5, 0,	4, $A8
00018D75 D805 0022 B8               		dc.b $D8, 5, 0,	$22, $B8
00018D7A D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
00018D7F D805 001E D8               		dc.b $D8, 5, 0,	$1E, $D8
00018D84 D805 003E E8               		dc.b $D8, 5, 0,	$3E, $E8
00018D89 D805 000E F8               		dc.b $D8, 5, 0,	$E, $F8
00018D8E D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
00018D93 D805 0042 20               		dc.b $D8, 5, 0,	$42, $20
00018D98 D805 000E 30               		dc.b $D8, 5, 0,	$E, $30
00018D9D D805 002E 40               		dc.b $D8, 5, 0,	$2E, $40
00018DA2 D801 0046 50               		dc.b $D8, 1, 0,	$46, $50
00018DA7 D805 0000 58               		dc.b $D8, 5, 0,	0, $58
00018DAC D805 001A 68               		dc.b $D8, 5, 0,	$1A, $68
00018DB1 0805 0048 C0               		dc.b 8,	5, 0, $48, $C0
00018DB6 0801 0046 D0               		dc.b 8,	1, 0, $46, $D0
00018DBB 0805 0000 D8               		dc.b 8,	5, 0, 0, $D8
00018DC0 0801 0046 E8               		dc.b 8,	1, 0, $46, $E8
00018DC5 0805 002E F0               		dc.b 8,	5, 0, $2E, $F0
00018DCA 0805 0016 00               		dc.b 8,	5, 0, $16, 0
00018DCF 0805 0004 10               		dc.b 8,	5, 0, 4, $10
00018DD4 0805 001A 20               		dc.b 8,	5, 0, $1A, $20
00018DD9 0805 0042 30               		dc.b 8,	5, 0, $42, $30
00018DDE 14                         byte_1743C:	dc.b $14		 ; DESIGN JINYA	PHENIX RIE
00018DDF D005 0042 A0               		dc.b $D0, 5, 0,	$42, $A0
00018DE4 D005 000E B0               		dc.b $D0, 5, 0,	$E, $B0
00018DE9 D005 002E C0               		dc.b $D0, 5, 0,	$2E, $C0
00018DEE D001 0046 D0               		dc.b $D0, 1, 0,	$46, $D0
00018DF3 D005 0000 D8               		dc.b $D0, 5, 0,	0, $D8
00018DF8 D005 001A E8               		dc.b $D0, 5, 0,	$1A, $E8
00018DFD 0005 004C E8               		dc.b 0,	5, 0, $4C, $E8
00018E02 0001 0046 F8               		dc.b 0,	1, 0, $46, $F8
00018E07 0005 001A 04               		dc.b 0,	5, 0, $1A, 4
00018E0C 0005 002A 14               		dc.b 0,	5, 0, $2A, $14
00018E11 0005 0004 24               		dc.b 0,	5, 0, 4, $24
00018E16 2005 0012 D0               		dc.b $20, 5, 0,	$12, $D0
00018E1B 2005 003A E0               		dc.b $20, 5, 0,	$3A, $E0
00018E20 2005 000E F0               		dc.b $20, 5, 0,	$E, $F0
00018E25 2005 001A 00               		dc.b $20, 5, 0,	$1A, 0
00018E2A 2001 0046 10               		dc.b $20, 1, 0,	$46, $10
00018E2F 2005 0050 18               		dc.b $20, 5, 0,	$50, $18
00018E34 2005 0022 30               		dc.b $20, 5, 0,	$22, $30
00018E39 2001 0046 40               		dc.b $20, 1, 0,	$46, $40
00018E3E 2005 000E 48               		dc.b $20, 5, 0,	$E, $48
00018E43 1A                         byte_174A1:	dc.b $1A		 ; SOUND PRODUCE MASATO	NAKAMURA
00018E44 D805 002E 98               		dc.b $D8, 5, 0,	$2E, $98
00018E49 D805 0026 A8               		dc.b $D8, 5, 0,	$26, $A8
00018E4E D805 0032 B8               		dc.b $D8, 5, 0,	$32, $B8
00018E53 D805 001A C8               		dc.b $D8, 5, 0,	$1A, $C8
00018E58 D805 0054 D8               		dc.b $D8, 5, 0,	$54, $D8
00018E5D D805 0012 F8               		dc.b $D8, 5, 0,	$12, $F8
00018E62 D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
00018E67 D805 0026 18               		dc.b $D8, 5, 0,	$26, $18
00018E6C D805 0042 28               		dc.b $D8, 5, 0,	$42, $28
00018E71 D805 0032 38               		dc.b $D8, 5, 0,	$32, $38
00018E76 D805 001E 48               		dc.b $D8, 5, 0,	$1E, $48
00018E7B D805 000E 58               		dc.b $D8, 5, 0,	$E, $58
00018E80 0809 0008 88               		dc.b 8,	9, 0, 8, $88
00018E85 0805 0004 9C               		dc.b 8,	5, 0, 4, $9C
00018E8A 0805 002E AC               		dc.b 8,	5, 0, $2E, $AC
00018E8F 0805 0004 BC               		dc.b 8,	5, 0, 4, $BC
00018E94 0805 003E CC               		dc.b 8,	5, 0, $3E, $CC
00018E99 0805 0026 DC               		dc.b 8,	5, 0, $26, $DC
00018E9E 0805 001A F8               		dc.b 8,	5, 0, $1A, $F8
00018EA3 0805 0004 08               		dc.b 8,	5, 0, 4, 8
00018EA8 0805 0058 18               		dc.b 8,	5, 0, $58, $18
00018EAD 0805 0004 28               		dc.b 8,	5, 0, 4, $28
00018EB2 0809 0008 38               		dc.b 8,	9, 0, 8, $38
00018EB7 0805 0032 4C               		dc.b 8,	5, 0, $32, $4C
00018EBC 0805 0022 5C               		dc.b 8,	5, 0, $22, $5C
00018EC1 0805 0004 6C               		dc.b 8,	5, 0, 4, $6C
00018EC6 17                         byte_17524:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
00018EC7 D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
00018ECC D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
00018ED1 D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
00018ED6 D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
00018EDB D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
00018EE0 D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
00018EE5 D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
00018EEA D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
00018EEF D005 0000 28               		dc.b $D0, 5, 0,	0, $28
00018EF4 D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
00018EF9 D005 0004 48               		dc.b $D0, 5, 0,	4, $48
00018EFE D009 0008 58               		dc.b $D0, 9, 0,	8, $58
00018F03 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
00018F08 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
00018F0D 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
00018F12 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
00018F17 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
00018F1C 0005 0004 14               		dc.b 0,	5, 0, 4, $14
00018F21 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
00018F26 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
00018F2B 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
00018F30 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
00018F35 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
00018F3A 1F                         byte_17598:	dc.b $1F		 ; SPECIAL THANKS FUJIO	MINEGISHI PAPA
00018F3B D805 002E 80               		dc.b $D8, 5, 0,	$2E, $80
00018F40 D805 0012 90               		dc.b $D8, 5, 0,	$12, $90
00018F45 D805 000E A0               		dc.b $D8, 5, 0,	$E, $A0
00018F4A D805 001E B0               		dc.b $D8, 5, 0,	$1E, $B0
00018F4F D801 0046 C0               		dc.b $D8, 1, 0,	$46, $C0
00018F54 D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
00018F59 D805 0016 D8               		dc.b $D8, 5, 0,	$16, $D8
00018F5E D805 003E F8               		dc.b $D8, 5, 0,	$3E, $F8
00018F63 D805 003A 08               		dc.b $D8, 5, 0,	$3A, 8
00018F68 D805 0004 18               		dc.b $D8, 5, 0,	4, $18
00018F6D D805 001A 28               		dc.b $D8, 5, 0,	$1A, $28
00018F72 D805 0058 38               		dc.b $D8, 5, 0,	$58, $38
00018F77 D805 002E 48               		dc.b $D8, 5, 0,	$2E, $48
00018F7C 0005 005C B0               		dc.b 0,	5, 0, $5C, $B0
00018F81 0005 0032 C0               		dc.b 0,	5, 0, $32, $C0
00018F86 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
00018F8B 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
00018F90 0005 0026 E8               		dc.b 0,	5, 0, $26, $E8
00018F95 0009 0008 00               		dc.b 0,	9, 0, 8, 0
00018F9A 0001 0046 14               		dc.b 0,	1, 0, $46, $14
00018F9F 0005 001A 1C               		dc.b 0,	5, 0, $1A, $1C
00018FA4 0005 000E 2C               		dc.b 0,	5, 0, $E, $2C
00018FA9 0005 0000 3C               		dc.b 0,	5, 0, 0, $3C
00018FAE 0001 0046 4C               		dc.b 0,	1, 0, $46, $4C
00018FB3 0005 002E 54               		dc.b 0,	5, 0, $2E, $54
00018FB8 0005 003A 64               		dc.b 0,	5, 0, $3A, $64
00018FBD 0001 0046 74               		dc.b 0,	1, 0, $46, $74
00018FC2 2005 0012 F8               		dc.b $20, 5, 0,	$12, $F8
00018FC7 2005 0004 08               		dc.b $20, 5, 0,	4, 8
00018FCC 2005 0012 18               		dc.b $20, 5, 0,	$12, $18
00018FD1 2005 0004 28               		dc.b $20, 5, 0,	4, $28
00018FD6 0F                         byte_17634:	dc.b $F			 ; PRESENTED BY	SEGA
00018FD7 F805 0012 80               		dc.b $F8, 5, 0,	$12, $80
00018FDC F805 0022 90               		dc.b $F8, 5, 0,	$22, $90
00018FE1 F805 000E A0               		dc.b $F8, 5, 0,	$E, $A0
00018FE6 F805 002E B0               		dc.b $F8, 5, 0,	$2E, $B0
00018FEB F805 000E C0               		dc.b $F8, 5, 0,	$E, $C0
00018FF0 F805 001A D0               		dc.b $F8, 5, 0,	$1A, $D0
00018FF5 F805 003E E0               		dc.b $F8, 5, 0,	$3E, $E0
00018FFA F805 000E F0               		dc.b $F8, 5, 0,	$E, $F0
00018FFF F805 0042 00               		dc.b $F8, 5, 0,	$42, 0
00019004 F805 0048 18               		dc.b $F8, 5, 0,	$48, $18
00019009 F805 002A 28               		dc.b $F8, 5, 0,	$2A, $28
0001900E F805 002E 40               		dc.b $F8, 5, 0,	$2E, $40
00019013 F805 000E 50               		dc.b $F8, 5, 0,	$E, $50
00019018 F805 0000 60               		dc.b $F8, 5, 0,	0, $60
0001901D F805 0004 70               		dc.b $F8, 5, 0,	4, $70
00019022 08                         byte_17680:	dc.b 8			 ; TRY AGAIN
00019023 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
00019028 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
0001902D 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
00019032 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
00019037 3005 0000 08               		dc.b $30, 5, 0,	0, 8
0001903C 3005 0004 18               		dc.b $30, 5, 0,	4, $18
00019041 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
00019046 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
0001904B 11                         byte_176A9:	dc.b $11		 ; SONIC TEAM PRESENTS
0001904C E805 002E B4               		dc.b $E8, 5, 0,	$2E, $B4
00019051 E805 0026 C4               		dc.b $E8, 5, 0,	$26, $C4
00019056 E805 001A D4               		dc.b $E8, 5, 0,	$1A, $D4
0001905B E801 0046 E4               		dc.b $E8, 1, 0,	$46, $E4
00019060 E805 001E EC               		dc.b $E8, 5, 0,	$1E, $EC
00019065 E805 003E 04               		dc.b $E8, 5, 0,	$3E, 4
0001906A E805 000E 14               		dc.b $E8, 5, 0,	$E, $14
0001906F E805 0004 24               		dc.b $E8, 5, 0,	4, $24
00019074 E809 0008 34               		dc.b $E8, 9, 0,	8, $34
00019079 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0
0001907E 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0
00019083 0005 000E E0               		dc.b 0,	5, 0, $E, $E0
00019088 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0
0001908D 0005 000E 00               		dc.b 0,	5, 0, $E, 0
00019092 0005 001A 10               		dc.b 0,	5, 0, $1A, $10
00019097 0005 003E 20               		dc.b 0,	5, 0, $3E, $20
0001909C 0005 002E 30               		dc.b 0,	5, 0, $2E, $30
000190A2 00                         		even
000190A2 00                         		even
000190A2                            
000190A2                            ; ===========================================================================
000190A2                            ; ---------------------------------------------------------------------------
000190A2                            ; Object 3D - Eggman (GHZ)
000190A2                            ; ---------------------------------------------------------------------------
000190A2                            
000190A2                            Obj3D:					; XREF: Obj_Index
000190A2 7000                       		moveq	#0,d0
000190A4 1028 0024                  		move.b	$24(a0),d0
000190A8 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
000190AC 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
000190B0                            ; ===========================================================================
000190B0 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
000190B2 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
000190B4 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
000190B6 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
000190B8                            
000190B8 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
000190BA 0401                       		dc.b 4,	1
000190BC 0607                       		dc.b 6,	7
000190BE                            ; ===========================================================================
000190BE                            
000190BE                            Obj3D_Main:				; XREF: Obj3D_Index
000190BE 45F9 0001 90B8             		lea	(Obj3D_ObjData).l,a2
000190C4 2248                       		movea.l	a0,a1
000190C6 7202                       		moveq	#2,d1
000190C8 6000                       		bra.s	Obj3D_LoadBoss
000190CA                            ; ===========================================================================
000190CA                            
000190CA                            Obj3D_Loop:
000190CA 4EB9 0000 E58A             		jsr	SingleObjLoad2
000190D0 6600                       		bne.s	loc_17772
000190D2                            
000190D2                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
000190D2 135A 0024                  		move.b	(a2)+,$24(a1)
000190D6 12BC 003D                  		move.b	#$3D,0(a1)
000190DA 3368 0008 0008             		move.w	8(a0),8(a1)
000190E0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000190E6 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
000190EE 337C 0400 0002             		move.w	#$400,2(a1)
000190F4 137C 0004 0001             		move.b	#4,1(a1)
000190FA 137C 0020 0019             		move.b	#$20,$19(a1)
00019100 137C 0003 0018             		move.b	#3,$18(a1)
00019106 135A 001C                  		move.b	(a2)+,$1C(a1)
0001910A 2348 0034                  		move.l	a0,$34(a1)
0001910E 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00019112                            
00019112                            loc_17772:
00019112 3168 0008 0030             		move.w	8(a0),$30(a0)
00019118 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001911E 117C 000F 0020             		move.b	#$F,$20(a0)
00019124 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001912A                            
0001912A                            Obj3D_ShipMain:				; XREF: Obj3D_Index
0001912A 7000                       		moveq	#0,d0
0001912C 1028 0025                  		move.b	$25(a0),d0
00019130 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00019134 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00019138 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001913E 4EB9 0000 B1F0             		jsr	AnimateSprite
00019144 1028 0022                  		move.b	$22(a0),d0
00019148 0200 0003                  		andi.b	#3,d0
0001914C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019152 8128 0001                  		or.b	d0,1(a0)
00019156 4EF9 0000 E0DE             		jmp	DisplaySprite
0001915C                            ; ===========================================================================
0001915C 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
0001915E 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
00019160 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
00019162 0000                       		dc.w loc_17954-Obj3D_ShipIndex
00019164 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00019166 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00019168 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
0001916A                            ; ===========================================================================
0001916A                            
0001916A                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
0001916A 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
00019170 6100 0000                  		bsr.w	BossMove
00019174 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
0001917A 6600                       		bne.s	loc_177E6
0001917C 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00019182 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00019186                            
00019186                            loc_177E6:
00019186 1028 003F                  		move.b	$3F(a0),d0
0001918A 4EB9 0000 33D4             		jsr	(CalcSine).l
00019190 EC40                       		asr.w	#6,d0
00019192 D068 0038                  		add.w	$38(a0),d0
00019196 3140 000C                  		move.w	d0,$C(a0)
0001919A 3168 0030 0008             		move.w	$30(a0),8(a0)
000191A0 5428 003F                  		addq.b	#2,$3F(a0)
000191A4 0C28 0008 0025             		cmpi.b	#8,$25(a0)
000191AA 6400                       		bcc.s	locret_1784A
000191AC 4A28 0022                  		tst.b	$22(a0)
000191B0 6B00                       		bmi.s	loc_1784C
000191B2 4A28 0020                  		tst.b	$20(a0)
000191B6 6600                       		bne.s	locret_1784A
000191B8 4A28 003E                  		tst.b	$3E(a0)
000191BC 6600                       		bne.s	Obj3D_ShipFlash
000191BE 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
000191C4 303C 00AC                  		move.w	#$AC,d0
000191C8 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play boss damage sound
000191CE                            
000191CE                            Obj3D_ShipFlash:
000191CE 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
000191D2 7000                       		moveq	#0,d0		; move 0 (black) to d0
000191D4 4A51                       		tst.w	(a1)
000191D6 6600                       		bne.s	loc_1783C
000191D8 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
000191DC                            
000191DC                            loc_1783C:
000191DC 3280                       		move.w	d0,(a1)		; load colour stored in	d0
000191DE 5328 003E                  		subq.b	#1,$3E(a0)
000191E2 6600                       		bne.s	locret_1784A
000191E4 117C 000F 0020             		move.b	#$F,$20(a0)
000191EA                            
000191EA                            locret_1784A:
000191EA 4E75                       		rts	
000191EC                            ; ===========================================================================
000191EC                            
000191EC                            loc_1784C:				; XREF: loc_177E6
000191EC 7064                       		moveq	#100,d0
000191EE 6100 0000                  		bsr.w	AddPoints
000191F2 117C 0008 0025             		move.b	#8,$25(a0)
000191F8 317C 00B3 003C             		move.w	#$B3,$3C(a0)
000191FE 4E75                       		rts	
00019200                            
00019200                            ; ---------------------------------------------------------------------------
00019200                            ; Defeated boss	subroutine
00019200                            ; ---------------------------------------------------------------------------
00019200                            
00019200                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019200                            
00019200                            
00019200                            BossDefeated:
00019200 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00019204 0200 0007                  		andi.b	#7,d0
00019208 6600                       		bne.s	locret_178A2
0001920A 4EB9 0000 E574             		jsr	SingleObjLoad
00019210 6600                       		bne.s	locret_178A2
00019212 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00019216 3368 0008 0008             		move.w	8(a0),8(a1)
0001921C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019222 4EB9 0000 33AE             		jsr	(RandomNumber).l
00019228 3200                       		move.w	d0,d1
0001922A 7200                       		moveq	#0,d1
0001922C 1200                       		move.b	d0,d1
0001922E E409                       		lsr.b	#2,d1
00019230 0441 0020                  		subi.w	#$20,d1
00019234 D369 0008                  		add.w	d1,8(a1)
00019238 E048                       		lsr.w	#8,d0
0001923A E608                       		lsr.b	#3,d0
0001923C D169 000C                  		add.w	d0,$C(a1)
00019240                            
00019240                            locret_178A2:
00019240 4E75                       		rts	
00019242                            ; End of function BossDefeated
00019242                            
00019242                            ; ---------------------------------------------------------------------------
00019242                            ; Subroutine to	move a boss
00019242                            ; ---------------------------------------------------------------------------
00019242                            
00019242                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019242                            
00019242                            
00019242                            BossMove:
00019242 2428 0030                  		move.l	$30(a0),d2
00019246 2628 0038                  		move.l	$38(a0),d3
0001924A 3028 0010                  		move.w	$10(a0),d0
0001924E 48C0                       		ext.l	d0
00019250 E180                       		asl.l	#8,d0
00019252 D480                       		add.l	d0,d2
00019254 3028 0012                  		move.w	$12(a0),d0
00019258 48C0                       		ext.l	d0
0001925A E180                       		asl.l	#8,d0
0001925C D680                       		add.l	d0,d3
0001925E 2142 0030                  		move.l	d2,$30(a0)
00019262 2143 0038                  		move.l	d3,$38(a0)
00019266 4E75                       		rts	
00019268                            ; End of function BossMove
00019268                            
00019268                            ; ===========================================================================
00019268                            
00019268                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
00019268 317C FF00 0010             		move.w	#-$100,$10(a0)
0001926E 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019274 6100 FFCC                  		bsr.w	BossMove
00019278 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001927E 6600                       		bne.s	loc_17916
00019280 317C 0000 0010             		move.w	#0,$10(a0)
00019286 317C 0000 0012             		move.w	#0,$12(a0)
0001928C 5428 0025                  		addq.b	#2,$25(a0)
00019290 4EB9 0000 E58A             		jsr	SingleObjLoad2
00019296 6600                       		bne.s	loc_17910
00019298 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
0001929C 3368 0030 0008             		move.w	$30(a0),8(a1)
000192A2 3368 0038 000C             		move.w	$38(a0),$C(a1)
000192A8 2348 0034                  		move.l	a0,$34(a1)
000192AC                            
000192AC                            loc_17910:
000192AC 317C 0077 003C             		move.w	#$77,$3C(a0)
000192B2                            
000192B2                            loc_17916:
000192B2 6000 FED2                  		bra.w	loc_177E6
000192B6                            ; ===========================================================================
000192B6                            
000192B6                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
000192B6 5368 003C                  		subq.w	#1,$3C(a0)
000192BA 6A00                       		bpl.s	Obj3D_Reverse
000192BC 5428 0025                  		addq.b	#2,$25(a0)
000192C0 317C 003F 003C             		move.w	#$3F,$3C(a0)
000192C6 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
000192CC 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
000192D2 6600                       		bne.s	Obj3D_Reverse
000192D4 317C 007F 003C             		move.w	#$7F,$3C(a0)
000192DA 317C 0040 0010             		move.w	#$40,$10(a0)
000192E0                            
000192E0                            Obj3D_Reverse:
000192E0 0828 0000 0022             		btst	#0,$22(a0)
000192E6 6600                       		bne.s	loc_17950
000192E8 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
000192EC                            
000192EC                            loc_17950:
000192EC 6000 FE98                  		bra.w	loc_177E6
000192F0                            ; ===========================================================================
000192F0                            
000192F0                            loc_17954:				; XREF: Obj3D_ShipIndex
000192F0 5368 003C                  		subq.w	#1,$3C(a0)
000192F4 6B00                       		bmi.s	loc_17960
000192F6 6100 FF4A                  		bsr.w	BossMove
000192FA 6000                       		bra.s	loc_17976
000192FC                            ; ===========================================================================
000192FC                            
000192FC                            loc_17960:
000192FC 0868 0000 0022             		bchg	#0,$22(a0)
00019302 317C 003F 003C             		move.w	#$3F,$3C(a0)
00019308 5528 0025                  		subq.b	#2,$25(a0)
0001930C 317C 0000 0010             		move.w	#0,$10(a0)
00019312                            
00019312                            loc_17976:
00019312 6000 FE72                  		bra.w	loc_177E6
00019316                            ; ===========================================================================
00019316                            
00019316                            loc_1797A:				; XREF: Obj3D_ShipIndex
00019316 5368 003C                  		subq.w	#1,$3C(a0)
0001931A 6B00                       		bmi.s	loc_17984
0001931C 6000 FEE2                  		bra.w	BossDefeated
00019320                            ; ===========================================================================
00019320                            
00019320                            loc_17984:
00019320 08E8 0000 0022             		bset	#0,$22(a0)
00019326 08A8 0007 0022             		bclr	#7,$22(a0)
0001932C 4268 0010                  		clr.w	$10(a0)
00019330 5428 0025                  		addq.b	#2,$25(a0)
00019334 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001933A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001933E 6600                       		bne.s	locret_179AA
00019340 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019346                            
00019346                            locret_179AA:
00019346 4E75                       		rts	
00019348                            ; ===========================================================================
00019348                            
00019348                            loc_179AC:				; XREF: Obj3D_ShipIndex
00019348 5268 003C                  		addq.w	#1,$3C(a0)
0001934C 6700                       		beq.s	loc_179BC
0001934E 6A00                       		bpl.s	loc_179C2
00019350 0668 0018 0012             		addi.w	#$18,$12(a0)
00019356 6000                       		bra.s	loc_179EE
00019358                            ; ===========================================================================
00019358                            
00019358                            loc_179BC:
00019358 4268 0012                  		clr.w	$12(a0)
0001935C 6000                       		bra.s	loc_179EE
0001935E                            ; ===========================================================================
0001935E                            
0001935E                            loc_179C2:
0001935E 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00019364 6500                       		bcs.s	loc_179DA
00019366 6700                       		beq.s	loc_179E0
00019368 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001936E 6500                       		bcs.s	loc_179EE
00019370 5428 0025                  		addq.b	#2,$25(a0)
00019374 6000                       		bra.s	loc_179EE
00019376                            ; ===========================================================================
00019376                            
00019376                            loc_179DA:
00019376 5168 0012                  		subq.w	#8,$12(a0)
0001937A 6000                       		bra.s	loc_179EE
0001937C                            ; ===========================================================================
0001937C                            
0001937C                            loc_179E0:
0001937C 4268 0012                  		clr.w	$12(a0)
00019380 303C 0081                  		move.w	#$81,d0
00019384 4EB9 0000 1470             		jsr	(PlaySound).l	; play GHZ music
0001938A                            
0001938A                            loc_179EE:
0001938A 6100 FEB6                  		bsr.w	BossMove
0001938E 6000 FDF6                  		bra.w	loc_177E6
00019392                            ; ===========================================================================
00019392                            
00019392                            loc_179F6:				; XREF: Obj3D_ShipIndex
00019392 317C 0400 0010             		move.w	#$400,$10(a0)
00019398 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001939E 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
000193A4 6700                       		beq.s	loc_17A10
000193A6 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000193AA 6000                       		bra.s	loc_17A16
000193AC                            ; ===========================================================================
000193AC                            
000193AC                            loc_17A10:
000193AC 4A28 0001                  		tst.b	1(a0)
000193B0 6A00                       		bpl.s	Obj3D_ShipDel
000193B2                            
000193B2                            loc_17A16:
000193B2 6100 FE8E                  		bsr.w	BossMove
000193B6 6000 FDCE                  		bra.w	loc_177E6
000193BA                            ; ===========================================================================
000193BA                            
000193BA                            Obj3D_ShipDel:
000193BA 4EF9 0000 E11A             		jmp	DeleteObject
000193C0                            ; ===========================================================================
000193C0                            
000193C0                            Obj3D_FaceMain:				; XREF: Obj3D_Index
000193C0 7000                       		moveq	#0,d0
000193C2 7201                       		moveq	#1,d1
000193C4 2268 0034                  		movea.l	$34(a0),a1
000193C8 1029 0025                  		move.b	$25(a1),d0
000193CC 5900                       		subq.b	#4,d0
000193CE 6600                       		bne.s	loc_17A3E
000193D0 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
000193D6 6600                       		bne.s	loc_17A46
000193D8 7204                       		moveq	#4,d1
000193DA                            
000193DA                            loc_17A3E:
000193DA 5D00                       		subq.b	#6,d0
000193DC 6B00                       		bmi.s	loc_17A46
000193DE 720A                       		moveq	#$A,d1
000193E0 6000                       		bra.s	loc_17A5A
000193E2                            ; ===========================================================================
000193E2                            
000193E2                            loc_17A46:
000193E2 4A29 0020                  		tst.b	$20(a1)
000193E6 6600                       		bne.s	loc_17A50
000193E8 7205                       		moveq	#5,d1
000193EA 6000                       		bra.s	loc_17A5A
000193EC                            ; ===========================================================================
000193EC                            
000193EC                            loc_17A50:
000193EC 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000193F2 6500                       		bcs.s	loc_17A5A
000193F4 7204                       		moveq	#4,d1
000193F6                            
000193F6                            loc_17A5A:
000193F6 1141 001C                  		move.b	d1,$1C(a0)
000193FA 5500                       		subq.b	#2,d0
000193FC 6600                       		bne.s	Obj3D_FaceDisp
000193FE 117C 0006 001C             		move.b	#6,$1C(a0)
00019404 4A28 0001                  		tst.b	1(a0)
00019408 6A00                       		bpl.s	Obj3D_FaceDel
0001940A                            
0001940A                            Obj3D_FaceDisp:
0001940A 6000                       		bra.s	Obj3D_Display
0001940C                            ; ===========================================================================
0001940C                            
0001940C                            Obj3D_FaceDel:
0001940C 4EF9 0000 E11A             		jmp	DeleteObject
00019412                            ; ===========================================================================
00019412                            
00019412                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00019412 117C 0007 001C             		move.b	#7,$1C(a0)
00019418 2268 0034                  		movea.l	$34(a0),a1
0001941C 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
00019422 6600                       		bne.s	loc_17A96
00019424 117C 000B 001C             		move.b	#$B,$1C(a0)
0001942A 4A28 0001                  		tst.b	1(a0)
0001942E 6A00                       		bpl.s	Obj3D_FlameDel
00019430 6000                       		bra.s	Obj3D_FlameDisp
00019432                            ; ===========================================================================
00019432                            
00019432                            loc_17A96:
00019432 3029 0010                  		move.w	$10(a1),d0
00019436 6700                       		beq.s	Obj3D_FlameDisp
00019438 117C 0008 001C             		move.b	#8,$1C(a0)
0001943E                            
0001943E                            Obj3D_FlameDisp:
0001943E 6000                       		bra.s	Obj3D_Display
00019440                            ; ===========================================================================
00019440                            
00019440                            Obj3D_FlameDel:
00019440 4EF9 0000 E11A             		jmp	DeleteObject
00019446                            ; ===========================================================================
00019446                            
00019446                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
00019446 2268 0034                  		movea.l	$34(a0),a1
0001944A 3169 0008 0008             		move.w	8(a1),8(a0)
00019450 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019456 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001945C 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00019462 4EB9 0000 B1F0             		jsr	AnimateSprite
00019468 1028 0022                  		move.b	$22(a0),d0
0001946C 0200 0003                  		andi.b	#3,d0
00019470 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019476 8128 0001                  		or.b	d0,1(a0)
0001947A 4EF9 0000 E0DE             		jmp	DisplaySprite
00019480                            ; ===========================================================================
00019480                            ; ---------------------------------------------------------------------------
00019480                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00019480                            ; ---------------------------------------------------------------------------
00019480                            
00019480                            Obj48:					; XREF: Obj_Index
00019480 7000                       		moveq	#0,d0
00019482 1028 0024                  		move.b	$24(a0),d0
00019486 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
0001948A 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
0001948E                            ; ===========================================================================
0001948E 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00019490 0000                       		dc.w Obj48_Base-Obj48_Index
00019492 0000                       		dc.w Obj48_Display2-Obj48_Index
00019494 0000                       		dc.w loc_17C68-Obj48_Index
00019496 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00019498                            ; ===========================================================================
00019498                            
00019498                            Obj48_Main:				; XREF: Obj48_Index
00019498 5428 0024                  		addq.b	#2,$24(a0)
0001949C 317C 4080 0026             		move.w	#$4080,$26(a0)
000194A2 317C FE00 003E             		move.w	#-$200,$3E(a0)
000194A8 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
000194B0 317C 046C 0002             		move.w	#$46C,2(a0)
000194B6 45E8 0028                  		lea	$28(a0),a2
000194BA 14FC 0000                  		move.b	#0,(a2)+
000194BE 7205                       		moveq	#5,d1
000194C0 2248                       		movea.l	a0,a1
000194C2 6000                       		bra.s	loc_17B60
000194C4                            ; ===========================================================================
000194C4                            
000194C4                            Obj48_MakeLinks:
000194C4 4EB9 0000 E58A             		jsr	SingleObjLoad2
000194CA 6600                       		bne.s	Obj48_MakeBall
000194CC 3368 0008 0008             		move.w	8(a0),8(a1)
000194D2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000194D8 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
000194DC 137C 0006 0024             		move.b	#6,$24(a1)
000194E2 237C 0000 86C8 0004        		move.l	#Map_obj15,4(a1)
000194EA 337C 0380 0002             		move.w	#$380,2(a1)
000194F0 137C 0001 001A             		move.b	#1,$1A(a1)
000194F6 5228 0028                  		addq.b	#1,$28(a0)
000194FA                            
000194FA                            loc_17B60:				; XREF: Obj48_Main
000194FA 3A09                       		move.w	a1,d5
000194FC 0445 D000                  		subi.w	#$D000,d5
00019500 EC4D                       		lsr.w	#6,d5
00019502 0245 007F                  		andi.w	#$7F,d5
00019506 14C5                       		move.b	d5,(a2)+
00019508 137C 0004 0001             		move.b	#4,1(a1)
0001950E 137C 0008 0019             		move.b	#8,$19(a1)
00019514 137C 0006 0018             		move.b	#6,$18(a1)
0001951A 2368 0034 0034             		move.l	$34(a0),$34(a1)
00019520 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00019524                            
00019524                            Obj48_MakeBall:
00019524 137C 0008 0024             		move.b	#8,$24(a1)
0001952A 237C 0000 8C26 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00019532 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00019538 137C 0001 001A             		move.b	#1,$1A(a1)
0001953E 137C 0005 0018             		move.b	#5,$18(a1)
00019544 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
0001954A 4E75                       		rts	
0001954C                            ; ===========================================================================
0001954C                            
0001954C 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00019552                            
00019552                            ; ===========================================================================
00019552                            
00019552                            Obj48_Base:				; XREF: Obj48_Index
00019552 47F9 0001 954C             		lea	(Obj48_PosData).l,a3
00019558 45E8 0028                  		lea	$28(a0),a2
0001955C 7C00                       		moveq	#0,d6
0001955E 1C1A                       		move.b	(a2)+,d6
00019560                            
00019560                            loc_17BC6:
00019560 7800                       		moveq	#0,d4
00019562 181A                       		move.b	(a2)+,d4
00019564 ED4C                       		lsl.w	#6,d4
00019566 0684 00FF D000             		addi.l	#$FFD000,d4
0001956C 2244                       		movea.l	d4,a1
0001956E 101B                       		move.b	(a3)+,d0
00019570 B029 003C                  		cmp.b	$3C(a1),d0
00019574 6700                       		beq.s	loc_17BE0
00019576 5229 003C                  		addq.b	#1,$3C(a1)
0001957A                            
0001957A                            loc_17BE0:
0001957A 51CE FFE4                  		dbf	d6,loc_17BC6
0001957E                            
0001957E B029 003C                  		cmp.b	$3C(a1),d0
00019582 6600                       		bne.s	loc_17BFA
00019584 2268 0034                  		movea.l	$34(a0),a1
00019588 0C29 0006 0025             		cmpi.b	#6,$25(a1)
0001958E 6600                       		bne.s	loc_17BFA
00019590 5428 0024                  		addq.b	#2,$24(a0)
00019594                            
00019594                            loc_17BFA:
00019594 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
0001959A 6700                       		beq.s	Obj48_Display
0001959C 5268 0032                  		addq.w	#1,$32(a0)
000195A0                            
000195A0                            Obj48_Display:
000195A0 6100 0000                  		bsr.w	sub_17C2A
000195A4 1028 0026                  		move.b	$26(a0),d0
000195A8 4EB9 0000 863A             		jsr	(Obj15_Move2).l
000195AE 4EF9 0000 E0DE             		jmp	DisplaySprite
000195B4                            ; ===========================================================================
000195B4                            
000195B4                            Obj48_Display2:				; XREF: Obj48_Index
000195B4 6100 0000                  		bsr.w	sub_17C2A
000195B8 4EB9 0000 85FA             		jsr	(Obj48_Move).l
000195BE 4EF9 0000 E0DE             		jmp	DisplaySprite
000195C4                            
000195C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000195C4                            
000195C4                            
000195C4                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
000195C4 2268 0034                  		movea.l	$34(a0),a1
000195C8 0628 0020 001B             		addi.b	#$20,$1B(a0)
000195CE 6400                       		bcc.s	loc_17C3C
000195D0 0868 0000 001A             		bchg	#0,$1A(a0)
000195D6                            
000195D6                            loc_17C3C:
000195D6 3169 0008 003A             		move.w	8(a1),$3A(a0)
000195DC 3029 000C                  		move.w	$C(a1),d0
000195E0 D068 0032                  		add.w	$32(a0),d0
000195E4 3140 0038                  		move.w	d0,$38(a0)
000195E8 1169 0022 0022             		move.b	$22(a1),$22(a0)
000195EE 4A29 0022                  		tst.b	$22(a1)
000195F2 6A00                       		bpl.s	locret_17C66
000195F4 10BC 003F                  		move.b	#$3F,0(a0)
000195F8 117C 0000 0024             		move.b	#0,$24(a0)
000195FE                            
000195FE                            locret_17C66:
000195FE 4E75                       		rts	
00019600                            ; End of function sub_17C2A
00019600                            
00019600                            ; ===========================================================================
00019600                            
00019600                            loc_17C68:				; XREF: Obj48_Index
00019600 2268 0034                  		movea.l	$34(a0),a1
00019604 4A29 0022                  		tst.b	$22(a1)
00019608 6A00                       		bpl.s	Obj48_Display3
0001960A 10BC 003F                  		move.b	#$3F,0(a0)
0001960E 117C 0000 0024             		move.b	#0,$24(a0)
00019614                            
00019614                            Obj48_Display3:
00019614 4EF9 0000 E0DE             		jmp	DisplaySprite
0001961A                            ; ===========================================================================
0001961A                            
0001961A                            Obj48_ChkVanish:			; XREF: Obj48_Index
0001961A 7000                       		moveq	#0,d0
0001961C 4A28 001A                  		tst.b	$1A(a0)
00019620 6600                       		bne.s	Obj48_Vanish
00019622 5200                       		addq.b	#1,d0
00019624                            
00019624                            Obj48_Vanish:
00019624 1140 001A                  		move.b	d0,$1A(a0)
00019628 2268 0034                  		movea.l	$34(a0),a1
0001962C 4A29 0022                  		tst.b	$22(a1)
00019630 6A00                       		bpl.s	Obj48_Display4
00019632 117C 0000 0020             		move.b	#0,$20(a0)
00019638 6100 FBC6                  		bsr.w	BossDefeated
0001963C 5328 003C                  		subq.b	#1,$3C(a0)
00019640 6A00                       		bpl.s	Obj48_Display4
00019642 10BC 003F                  		move.b	#$3F,(a0)
00019646 117C 0000 0024             		move.b	#0,$24(a0)
0001964C                            
0001964C                            Obj48_Display4:
0001964C 4EF9 0000 E0DE             		jmp	DisplaySprite
00019652                            ; ===========================================================================
00019652                            Ani_Eggman:
00019652                            	include "_anim\Eggman.asm"
00019652                            ; ---------------------------------------------------------------------------
00019652                            ; Animation script - Eggman (bosses)
00019652                            ; ---------------------------------------------------------------------------
00019652 0000                       		dc.w byte_17CD4-Ani_Eggman
00019654 0000                       		dc.w byte_17CD8-Ani_Eggman
00019656 0000                       		dc.w byte_17CDC-Ani_Eggman
00019658 0000                       		dc.w byte_17CE0-Ani_Eggman
0001965A 0000                       		dc.w byte_17CE4-Ani_Eggman
0001965C 0000                       		dc.w byte_17CE8-Ani_Eggman
0001965E 0000                       		dc.w byte_17CEC-Ani_Eggman
00019660 0000                       		dc.w byte_17CF0-Ani_Eggman
00019662 0000                       		dc.w byte_17CF4-Ani_Eggman
00019664 0000                       		dc.w byte_17CF8-Ani_Eggman
00019666 0000                       		dc.w byte_17CFC-Ani_Eggman
00019668 0000                       		dc.w byte_17D00-Ani_Eggman
0001966A 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
0001966E 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00019672 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00019676 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
0001967A 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
0001967E 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00019682 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00019686 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
0001968A 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
0001968E 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00019692 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00019696 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
000196A2                            		even
000196A2                            		even
000196A2                            
000196A2                            ; ---------------------------------------------------------------------------
000196A2                            ; Sprite mappings - Eggman (boss levels)
000196A2                            ; ---------------------------------------------------------------------------
000196A2                            Map_Eggman:
000196A2                            	include "_maps\Eggman.asm"
000196A2                            ; ---------------------------------------------------------------------------
000196A2                            ; Sprite mappings - Eggman (boss levels)
000196A2                            ; ---------------------------------------------------------------------------
000196A2 0000 0000                  		dc.w byte_17D26-Map_Eggman, byte_17D45-Map_Eggman
000196A6 0000 0000                  		dc.w byte_17D50-Map_Eggman, byte_17D5B-Map_Eggman
000196AA 0000 0000                  		dc.w byte_17D6B-Map_Eggman, byte_17D7B-Map_Eggman
000196AE 0000 0000                  		dc.w byte_17D8B-Map_Eggman, byte_17D9B-Map_Eggman
000196B2 0000 0000                  		dc.w byte_17DB0-Map_Eggman, byte_17DB6-Map_Eggman
000196B6 0000 0000                  		dc.w byte_17DBC-Map_Eggman, byte_17DBD-Map_Eggman
000196BA 0000                       		dc.w byte_17DC8-Map_Eggman
000196BC 06                         byte_17D26:	dc.b 6
000196BD EC01 000A E4               		dc.b $EC, 1, 0,	$A, $E4
000196C2 EC05 000C 0C               		dc.b $EC, 5, 0,	$C, $C
000196C7 FC0E 2010 E4               		dc.b $FC, $E, $20, $10,	$E4
000196CC FC0E 201C 04               		dc.b $FC, $E, $20, $1C,	4
000196D1 140C 2028 EC               		dc.b $14, $C, $20, $28,	$EC
000196D6 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C
000196DB 02                         byte_17D45:	dc.b 2
000196DC E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
000196E1 EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC
000196E6 02                         byte_17D50:	dc.b 2
000196E7 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
000196EC EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
000196F1 03                         byte_17D5B:	dc.b 3
000196F2 E408 003D F4               		dc.b $E4, 8, 0,	$3D, $F4
000196F7 EC09 0040 EC               		dc.b $EC, 9, 0,	$40, $EC
000196FC EC05 0046 04               		dc.b $EC, 5, 0,	$46, 4
00019701 03                         byte_17D6B:	dc.b 3
00019702 E408 004A F4               		dc.b $E4, 8, 0,	$4A, $F4
00019707 EC09 004D EC               		dc.b $EC, 9, 0,	$4D, $EC
0001970C EC05 0053 04               		dc.b $EC, 5, 0,	$53, 4
00019711 03                         byte_17D7B:	dc.b 3
00019712 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00019717 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
0001971C EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00019721 03                         byte_17D8B:	dc.b 3
00019722 E404 0064 04               		dc.b $E4, 4, 0,	$64, 4
00019727 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
0001972C EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00019731 04                         byte_17D9B:	dc.b 4
00019732 E409 0066 F4               		dc.b $E4, 9, 0,	$66, $F4
00019737 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
0001973C EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00019741 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00019746 01                         byte_17DB0:	dc.b 1
00019747 0405 002D 22               		dc.b 4,	5, 0, $2D, $22
0001974C 01                         byte_17DB6:	dc.b 1
0001974D 0405 0031 22               		dc.b 4,	5, 0, $31, $22
00019752 00                         byte_17DBC:	dc.b 0
00019753 02                         byte_17DBD:	dc.b 2
00019754 0008 012A 22               		dc.b 0,	8, 1, $2A, $22
00019759 0808 112A 22               		dc.b 8,	8, $11,	$2A, $22
0001975E 02                         byte_17DC8:	dc.b 2
0001975F F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22
00019764 0001 0139 3A               		dc.b 0,	1, 1, $39, $3A
0001976A 00                         		even
0001976A 00                         		even
0001976A                            
0001976A                            ; ---------------------------------------------------------------------------
0001976A                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001976A                            ; ---------------------------------------------------------------------------
0001976A                            Map_BossItems:
0001976A                            	include "_maps\Boss items.asm"
0001976A                            ; ---------------------------------------------------------------------------
0001976A                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001976A                            ; ---------------------------------------------------------------------------
0001976A 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
0001976E 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00019772 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00019776 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
0001977A 01                         byte_17DE4:	dc.b 1
0001977B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00019780 02                         byte_17DEA:	dc.b 2
00019781 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00019786 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001978B 00                         		dc.b 0
0001978C 01                         byte_17DF6:	dc.b 1
0001978D FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00019792 01                         byte_17DFC:	dc.b 1
00019793 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00019798 01                         byte_17E02:	dc.b 1
00019799 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
0001979E 04                         byte_17E08:	dc.b 4
0001979F F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
000197A4 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
000197A9 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
000197AE 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
000197B3 00                         		dc.b 0
000197B4 02                         byte_17E1E:	dc.b 2
000197B5 0005 0017 00               		dc.b 0,	5, 0, $17, 0
000197BA 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
000197BF 00                         		dc.b 0
000197C0 02                         byte_17E2A:	dc.b 2
000197C1 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
000197C6 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
000197CC 00                         		even
000197CC 00                         		even
000197CC                            
000197CC                            ; ===========================================================================
000197CC                            ; ---------------------------------------------------------------------------
000197CC                            ; Object 77 - Eggman (LZ)
000197CC                            ; ---------------------------------------------------------------------------
000197CC                            
000197CC                            Obj77:					; XREF: Obj_Index
000197CC 7000                       		moveq	#0,d0
000197CE 1028 0024                  		move.b	$24(a0),d0
000197D2 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
000197D6 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
000197DA                            ; ===========================================================================
000197DA 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
000197DC 0000                       		dc.w Obj77_ShipMain-Obj77_Index
000197DE 0000                       		dc.w Obj77_FaceMain-Obj77_Index
000197E0 0000                       		dc.w Obj77_FlameMain-Obj77_Index
000197E2                            
000197E2 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
000197E4 0401                       		dc.b 4,	1
000197E6 0607                       		dc.b 6,	7
000197E8                            ; ===========================================================================
000197E8                            
000197E8                            Obj77_Main:				; XREF: Obj77_Index
000197E8 317C 1E10 0008             		move.w	#$1E10,8(a0)
000197EE 317C 05C0 000C             		move.w	#$5C0,$C(a0)
000197F4 3168 0008 0030             		move.w	8(a0),$30(a0)
000197FA 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019800 117C 000F 0020             		move.b	#$F,$20(a0)
00019806 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001980C 117C 0004 0018             		move.b	#4,$18(a0)
00019812 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
00019816 2248                       		movea.l	a0,a1
00019818 7202                       		moveq	#2,d1
0001981A 6000                       		bra.s	Obj77_LoadBoss
0001981C                            ; ===========================================================================
0001981C                            
0001981C                            Obj77_Loop:
0001981C 4EB9 0000 E58A             		jsr	SingleObjLoad2
00019822 6600                       		bne.s	Obj77_ShipMain
00019824 12BC 0077                  		move.b	#$77,0(a1)
00019828 3368 0008 0008             		move.w	8(a0),8(a1)
0001982E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019834                            
00019834                            Obj77_LoadBoss:				; XREF: Obj77_Main
00019834 08A8 0000 0022             		bclr	#0,$22(a0)
0001983A 4229 0025                  		clr.b	$25(a1)
0001983E 135A 0024                  		move.b	(a2)+,$24(a1)
00019842 135A 001C                  		move.b	(a2)+,$1C(a1)
00019846 1368 0018 0018             		move.b	$18(a0),$18(a1)
0001984C 237C 0001 96A2 0004        		move.l	#Map_Eggman,4(a1)
00019854 337C 0400 0002             		move.w	#$400,2(a1)
0001985A 137C 0004 0001             		move.b	#4,1(a1)
00019860 137C 0020 0019             		move.b	#$20,$19(a1)
00019866 2348 0034                  		move.l	a0,$34(a1)
0001986A 51C9 FFB0                  		dbf	d1,Obj77_Loop
0001986E                            
0001986E                            Obj77_ShipMain:
0001986E 43F8 D000                  		lea	($FFFFD000).w,a1
00019872 7000                       		moveq	#0,d0
00019874 1028 0025                  		move.b	$25(a0),d0
00019878 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
0001987C 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
00019880 43F9 0001 9652             		lea	(Ani_Eggman).l,a1
00019886 4EB9 0000 B1F0             		jsr	AnimateSprite
0001988C 7003                       		moveq	#3,d0
0001988E C028 0022                  		and.b	$22(a0),d0
00019892 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019898 8128 0001                  		or.b	d0,1(a0)
0001989C 4EF9 0000 E0DE             		jmp	DisplaySprite
000198A2                            ; ===========================================================================
000198A2 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
000198A6 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
000198AA 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
000198AE 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
000198B2                            ; ===========================================================================
000198B2                            
000198B2                            loc_17F1E:				; XREF: Obj77_ShipIndex
000198B2 3029 0008                  		move.w	8(a1),d0
000198B6 0C40 1DA0                  		cmpi.w	#$1DA0,d0
000198BA 6500                       		bcs.s	loc_17F38
000198BC 317C FE80 0012             		move.w	#-$180,$12(a0)
000198C2 317C 0060 0010             		move.w	#$60,$10(a0)
000198C8 5428 0025                  		addq.b	#2,$25(a0)
000198CC                            
000198CC                            loc_17F38:
000198CC 6100 F974                  		bsr.w	BossMove
000198D0 3168 0038 000C             		move.w	$38(a0),$C(a0)
000198D6 3168 0030 0008             		move.w	$30(a0),8(a0)
000198DC                            
000198DC                            loc_17F48:
000198DC 4A28 003D                  		tst.b	$3D(a0)
000198E0 6600                       		bne.s	loc_17F8E
000198E2 4A28 0022                  		tst.b	$22(a0)
000198E6 6B00                       		bmi.s	loc_17F92
000198E8 4A28 0020                  		tst.b	$20(a0)
000198EC 6600                       		bne.s	locret_17F8C
000198EE 4A28 003E                  		tst.b	$3E(a0)
000198F2 6600                       		bne.s	loc_17F70
000198F4 117C 0020 003E             		move.b	#$20,$3E(a0)
000198FA 303C 00AC                  		move.w	#$AC,d0
000198FE 4EB9 0000 1476             		jsr	(PlaySound_Special).l
00019904                            
00019904                            loc_17F70:
00019904 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019908 7000                       		moveq	#0,d0
0001990A 4A51                       		tst.w	(a1)
0001990C 6600                       		bne.s	loc_17F7E
0001990E 303C 0EEE                  		move.w	#$EEE,d0
00019912                            
00019912                            loc_17F7E:
00019912 3280                       		move.w	d0,(a1)
00019914 5328 003E                  		subq.b	#1,$3E(a0)
00019918 6600                       		bne.s	locret_17F8C
0001991A 117C 000F 0020             		move.b	#$F,$20(a0)
00019920                            
00019920                            locret_17F8C:
00019920 4E75                       		rts	
00019922                            ; ===========================================================================
00019922                            
00019922                            loc_17F8E:				; XREF: loc_17F48
00019922 6000 F8DC                  		bra.w	BossDefeated
00019926                            ; ===========================================================================
00019926                            
00019926                            loc_17F92:				; XREF: loc_17F48
00019926 7064                       		moveq	#100,d0
00019928 6100 0000                  		bsr.w	AddPoints
0001992C 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019932 4E75                       		rts	
00019934                            ; ===========================================================================
00019934                            
00019934                            loc_17FA0:				; XREF: Obj77_ShipIndex
00019934 70FE                       		moveq	#-2,d0
00019936 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
0001993C 6500                       		bcs.s	loc_17FB6
0001993E 317C 1E48 0030             		move.w	#$1E48,$30(a0)
00019944 4268 0010                  		clr.w	$10(a0)
00019948 5240                       		addq.w	#1,d0
0001994A                            
0001994A                            loc_17FB6:
0001994A 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
00019950 6E00                       		bgt.s	loc_17FCA
00019952 317C 0500 0038             		move.w	#$500,$38(a0)
00019958 4268 0012                  		clr.w	$12(a0)
0001995C 5240                       		addq.w	#1,d0
0001995E                            
0001995E                            loc_17FCA:
0001995E 6600                       		bne.s	loc_17FDC
00019960 317C 0140 0010             		move.w	#$140,$10(a0)
00019966 317C FE00 0012             		move.w	#-$200,$12(a0)
0001996C 5428 0025                  		addq.b	#2,$25(a0)
00019970                            
00019970                            loc_17FDC:
00019970 6000 FF5A                  		bra.w	loc_17F38
00019974                            ; ===========================================================================
00019974                            
00019974                            loc_17FE0:				; XREF: Obj77_ShipIndex
00019974 70FE                       		moveq	#-2,d0
00019976 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
0001997C 6500                       		bcs.s	loc_17FF6
0001997E 317C 1E70 0030             		move.w	#$1E70,$30(a0)
00019984 4268 0010                  		clr.w	$10(a0)
00019988 5240                       		addq.w	#1,d0
0001998A                            
0001998A                            loc_17FF6:
0001998A 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
00019990 6E00                       		bgt.s	loc_1800A
00019992 317C 04C0 0038             		move.w	#$4C0,$38(a0)
00019998 4268 0012                  		clr.w	$12(a0)
0001999C 5240                       		addq.w	#1,d0
0001999E                            
0001999E                            loc_1800A:
0001999E 6600                       		bne.s	loc_1801A
000199A0 317C FE80 0012             		move.w	#-$180,$12(a0)
000199A6 5428 0025                  		addq.b	#2,$25(a0)
000199AA 4228 003F                  		clr.b	$3F(a0)
000199AE                            
000199AE                            loc_1801A:
000199AE 6000 FF1C                  		bra.w	loc_17F38
000199B2                            ; ===========================================================================
000199B2                            
000199B2                            loc_1801E:				; XREF: Obj77_ShipIndex
000199B2 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
000199B8 6E00                       		bgt.s	loc_1804E
000199BA 317C 0100 0038             		move.w	#$100,$38(a0)
000199C0 317C 0140 0010             		move.w	#$140,$10(a0)
000199C6 317C FF80 0012             		move.w	#-$80,$12(a0)
000199CC 4A28 003D                  		tst.b	$3D(a0)
000199D0 6700                       		beq.s	loc_18046
000199D2 E1E8 0010                  		asl	$10(a0)
000199D6 E1E8 0012                  		asl	$12(a0)
000199DA                            
000199DA                            loc_18046:
000199DA 5428 0025                  		addq.b	#2,$25(a0)
000199DE 6000 FEEC                  		bra.w	loc_17F38
000199E2                            ; ===========================================================================
000199E2                            
000199E2                            loc_1804E:
000199E2 08E8 0000 0022             		bset	#0,$22(a0)
000199E8 5428 003F                  		addq.b	#2,$3F(a0)
000199EC 1028 003F                  		move.b	$3F(a0),d0
000199F0 4EB9 0000 33D4             		jsr	(CalcSine).l
000199F6 4A41                       		tst.w	d1
000199F8 6A00                       		bpl.s	loc_1806C
000199FA 08A8 0000 0022             		bclr	#0,$22(a0)
00019A00                            
00019A00                            loc_1806C:
00019A00 E840                       		asr.w	#4,d0
00019A02 4840                       		swap	d0
00019A04 4240                       		clr.w	d0
00019A06 D0A8 0030                  		add.l	$30(a0),d0
00019A0A 4840                       		swap	d0
00019A0C 3140 0008                  		move.w	d0,8(a0)
00019A10 3028 0012                  		move.w	$12(a0),d0
00019A14 3238 D00C                  		move.w	($FFFFD00C).w,d1
00019A18 9268 000C                  		sub.w	$C(a0),d1
00019A1C 6500                       		bcs.s	loc_180A2
00019A1E 0441 0048                  		subi.w	#$48,d1
00019A22 6500                       		bcs.s	loc_180A2
00019A24 E240                       		asr.w	#1,d0
00019A26 0441 0028                  		subi.w	#$28,d1
00019A2A 6500                       		bcs.s	loc_180A2
00019A2C E240                       		asr.w	#1,d0
00019A2E 0441 0028                  		subi.w	#$28,d1
00019A32 6500                       		bcs.s	loc_180A2
00019A34 7000                       		moveq	#0,d0
00019A36                            
00019A36                            loc_180A2:
00019A36 48C0                       		ext.l	d0
00019A38 E180                       		asl.l	#8,d0
00019A3A 4A28 003D                  		tst.b	$3D(a0)
00019A3E 6700                       		beq.s	loc_180AE
00019A40 D080                       		add.l	d0,d0
00019A42                            
00019A42                            loc_180AE:
00019A42 D1A8 0038                  		add.l	d0,$38(a0)
00019A46 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019A4C 6000 FE8E                  		bra.w	loc_17F48
00019A50                            ; ===========================================================================
00019A50                            
00019A50                            loc_180BC:				; XREF: Obj77_ShipIndex
00019A50 70FE                       		moveq	#-2,d0
00019A52 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
00019A58 6500                       		bcs.s	loc_180D2
00019A5A 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
00019A60 4268 0010                  		clr.w	$10(a0)
00019A64 5240                       		addq.w	#1,d0
00019A66                            
00019A66                            loc_180D2:
00019A66 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
00019A6C 6E00                       		bgt.s	loc_180E6
00019A6E 317C 00C0 0038             		move.w	#$C0,$38(a0)
00019A74 4268 0012                  		clr.w	$12(a0)
00019A78 5240                       		addq.w	#1,d0
00019A7A                            
00019A7A                            loc_180E6:
00019A7A 6600                       		bne.s	loc_180F2
00019A7C 5428 0025                  		addq.b	#2,$25(a0)
00019A80 08A8 0000 0022             		bclr	#0,$22(a0)
00019A86                            
00019A86                            loc_180F2:
00019A86 6000 FE44                  		bra.w	loc_17F38
00019A8A                            ; ===========================================================================
00019A8A                            
00019A8A                            loc_180F6:				; XREF: Obj77_ShipIndex
00019A8A 4A28 003D                  		tst.b	$3D(a0)
00019A8E 6600                       		bne.s	loc_18112
00019A90 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
00019A96 6D00                       		blt.s	loc_18126
00019A98 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
00019A9E 6E00                       		bgt.s	loc_18126
00019AA0 117C 0032 003C             		move.b	#$32,$3C(a0)
00019AA6                            
00019AA6                            loc_18112:
00019AA6 303C 0082                  		move.w	#$82,d0
00019AAA 4EB9 0000 1470             		jsr	(PlaySound).l	; play LZ music
00019AB0 08E8 0000 0022             		bset	#0,$22(a0)
00019AB6 5428 0025                  		addq.b	#2,$25(a0)
00019ABA                            
00019ABA                            loc_18126:
00019ABA 6000 FE10                  		bra.w	loc_17F38
00019ABE                            ; ===========================================================================
00019ABE                            
00019ABE                            loc_1812A:				; XREF: Obj77_ShipIndex
00019ABE 4A28 003D                  		tst.b	$3D(a0)
00019AC2 6600                       		bne.s	loc_18136
00019AC4 5328 003C                  		subq.b	#1,$3C(a0)
00019AC8 6600                       		bne.s	loc_1814E
00019ACA                            
00019ACA                            loc_18136:
00019ACA 4228 003C                  		clr.b	$3C(a0)
00019ACE 317C 0400 0010             		move.w	#$400,$10(a0)
00019AD4 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019ADA 4228 003D                  		clr.b	$3D(a0)
00019ADE 5428 0025                  		addq.b	#2,$25(a0)
00019AE2                            
00019AE2                            loc_1814E:
00019AE2 6000 FDE8                  		bra.w	loc_17F38
00019AE6                            ; ===========================================================================
00019AE6                            
00019AE6                            loc_18152:				; XREF: Obj77_ShipIndex
00019AE6 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
00019AEC 6400                       		bcc.s	loc_18160
00019AEE 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019AF2 6000                       		bra.s	loc_18166
00019AF4                            ; ===========================================================================
00019AF4                            
00019AF4                            loc_18160:
00019AF4 4A28 0001                  		tst.b	1(a0)
00019AF8 6A00                       		bpl.s	Obj77_ShipDel
00019AFA                            
00019AFA                            loc_18166:
00019AFA 6000 FDD0                  		bra.w	loc_17F38
00019AFE                            ; ===========================================================================
00019AFE                            
00019AFE                            Obj77_ShipDel:
00019AFE 4EF9 0000 E11A             		jmp	DeleteObject
00019B04                            ; ===========================================================================
00019B04                            
00019B04                            Obj77_FaceMain:				; XREF: Obj77_Index
00019B04 2268 0034                  		movea.l	$34(a0),a1
00019B08 1011                       		move.b	(a1),d0
00019B0A B010                       		cmp.b	(a0),d0
00019B0C 6600                       		bne.s	Obj77_FaceDel
00019B0E 7000                       		moveq	#0,d0
00019B10 1029 0025                  		move.b	$25(a1),d0
00019B14 7201                       		moveq	#1,d1
00019B16 4A28 003D                  		tst.b	$3D(a0)
00019B1A 6700                       		beq.s	loc_1818C
00019B1C 720A                       		moveq	#$A,d1
00019B1E 6000                       		bra.s	loc_181A0
00019B20                            ; ===========================================================================
00019B20                            
00019B20                            loc_1818C:
00019B20 4A29 0020                  		tst.b	$20(a1)
00019B24 6600                       		bne.s	loc_18196
00019B26 7205                       		moveq	#5,d1
00019B28 6000                       		bra.s	loc_181A0
00019B2A                            ; ===========================================================================
00019B2A                            
00019B2A                            loc_18196:
00019B2A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019B30 6500                       		bcs.s	loc_181A0
00019B32 7204                       		moveq	#4,d1
00019B34                            
00019B34                            loc_181A0:
00019B34 1141 001C                  		move.b	d1,$1C(a0)
00019B38 0C00 000E                  		cmpi.b	#$E,d0
00019B3C 6600                       		bne.s	loc_181B6
00019B3E 117C 0006 001C             		move.b	#6,$1C(a0)
00019B44 4A28 0001                  		tst.b	1(a0)
00019B48 6A00                       		bpl.s	Obj77_FaceDel
00019B4A                            
00019B4A                            loc_181B6:
00019B4A 6000                       		bra.s	Obj77_Display
00019B4C                            ; ===========================================================================
00019B4C                            
00019B4C                            Obj77_FaceDel:
00019B4C 4EF9 0000 E11A             		jmp	DeleteObject
00019B52                            ; ===========================================================================
00019B52                            
00019B52                            Obj77_FlameMain:			; XREF: Obj77_Index
00019B52 117C 0007 001C             		move.b	#7,$1C(a0)
00019B58 2268 0034                  		movea.l	$34(a0),a1
00019B5C 1011                       		move.b	(a1),d0
00019B5E B010                       		cmp.b	(a0),d0
00019B60 6600                       		bne.s	Obj77_FlameDel
00019B62 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
00019B68 6600                       		bne.s	loc_181F0
00019B6A 117C 000B 001C             		move.b	#$B,$1C(a0)
00019B70 4A28 0001                  		tst.b	1(a0)
00019B74 6A00                       		bpl.s	Obj77_FlameDel
00019B76 6000                       		bra.s	loc_181F0
00019B78                            ; ===========================================================================
00019B78 4A69 0010                  		tst.w	$10(a1)
00019B7C 6700                       		beq.s	loc_181F0
00019B7E 117C 0008 001C             		move.b	#8,$1C(a0)
00019B84                            
00019B84                            loc_181F0:
00019B84 6000                       		bra.s	Obj77_Display
00019B86                            ; ===========================================================================
00019B86                            
00019B86                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
00019B86 4EF9 0000 E11A             		jmp	DeleteObject
00019B8C                            ; ===========================================================================
00019B8C                            
00019B8C                            Obj77_Display:
00019B8C 43F9 0001 9652             		lea	(Ani_Eggman).l,a1
00019B92 4EB9 0000 B1F0             		jsr	AnimateSprite
00019B98 2268 0034                  		movea.l	$34(a0),a1
00019B9C 3169 0008 0008             		move.w	8(a1),8(a0)
00019BA2 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019BA8 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019BAE 7003                       		moveq	#3,d0
00019BB0 C028 0022                  		and.b	$22(a0),d0
00019BB4 0228 00FC 0001             		andi.b	#-4,1(a0)
00019BBA 8128 0001                  		or.b	d0,1(a0)
00019BBE 4EF9 0000 E0DE             		jmp	DisplaySprite
00019BC4                            ; ===========================================================================
00019BC4                            ; ---------------------------------------------------------------------------
00019BC4                            ; Object 73 - Eggman (MZ)
00019BC4                            ; ---------------------------------------------------------------------------
00019BC4                            
00019BC4                            Obj73:					; XREF: Obj_Index
00019BC4 7000                       		moveq	#0,d0
00019BC6 1028 0024                  		move.b	$24(a0),d0
00019BCA 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00019BCE 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00019BD2                            ; ===========================================================================
00019BD2 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00019BD4 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00019BD6 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00019BD8 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00019BDA 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00019BDC                            
00019BDC 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00019BDF 0401 04                    		dc.b 4,	1, 4
00019BE2 0607 04                    		dc.b 6,	7, 4
00019BE5 0800 03                    		dc.b 8,	0, 3
00019BE8                            ; ===========================================================================
00019BE8                            
00019BE8                            Obj73_Main:				; XREF: Obj73_Index
00019BE8 3168 0008 0030             		move.w	8(a0),$30(a0)
00019BEE 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019BF4 117C 000F 0020             		move.b	#$F,$20(a0)
00019BFA 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019C00 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00019C04 2248                       		movea.l	a0,a1
00019C06 7203                       		moveq	#3,d1
00019C08 6000                       		bra.s	Obj73_LoadBoss
00019C0A                            ; ===========================================================================
00019C0A                            
00019C0A                            Obj73_Loop:
00019C0A 4EB9 0000 E58A             		jsr	SingleObjLoad2
00019C10 6600                       		bne.s	Obj73_ShipMain
00019C12 12BC 0073                  		move.b	#$73,0(a1)
00019C16 3368 0008 0008             		move.w	8(a0),8(a1)
00019C1C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019C22                            
00019C22                            Obj73_LoadBoss:				; XREF: Obj73_Main
00019C22 08A8 0000 0022             		bclr	#0,$22(a0)
00019C28 4229 0025                  		clr.b	$25(a1)
00019C2C 135A 0024                  		move.b	(a2)+,$24(a1)
00019C30 135A 001C                  		move.b	(a2)+,$1C(a1)
00019C34 135A 0018                  		move.b	(a2)+,$18(a1)
00019C38 237C 0001 96A2 0004        		move.l	#Map_Eggman,4(a1)
00019C40 337C 0400 0002             		move.w	#$400,2(a1)
00019C46 137C 0004 0001             		move.b	#4,1(a1)
00019C4C 137C 0020 0019             		move.b	#$20,$19(a1)
00019C52 2348 0034                  		move.l	a0,$34(a1)
00019C56 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00019C5A                            
00019C5A                            Obj73_ShipMain:
00019C5A 7000                       		moveq	#0,d0
00019C5C 1028 0025                  		move.b	$25(a0),d0
00019C60 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
00019C64 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00019C68 43F9 0001 9652             		lea	(Ani_Eggman).l,a1
00019C6E 4EB9 0000 B1F0             		jsr	AnimateSprite
00019C74 7003                       		moveq	#3,d0
00019C76 C028 0022                  		and.b	$22(a0),d0
00019C7A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019C80 8128 0001                  		or.b	d0,1(a0)
00019C84 4EF9 0000 E0DE             		jmp	DisplaySprite
00019C8A                            ; ===========================================================================
00019C8A 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00019C8C 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00019C8E 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00019C90 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00019C92 0000                       		dc.w loc_18582-Obj73_ShipIndex
00019C94                            ; ===========================================================================
00019C94                            
00019C94                            loc_18302:				; XREF: Obj73_ShipIndex
00019C94 1028 003F                  		move.b	$3F(a0),d0
00019C98 5428 003F                  		addq.b	#2,$3F(a0)
00019C9C 4EB9 0000 33D4             		jsr	(CalcSine).l
00019CA2 E440                       		asr.w	#2,d0
00019CA4 3140 0012                  		move.w	d0,$12(a0)
00019CA8 317C FF00 0010             		move.w	#-$100,$10(a0)
00019CAE 6100 F592                  		bsr.w	BossMove
00019CB2 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00019CB8 6600                       		bne.s	loc_18334
00019CBA 5428 0025                  		addq.b	#2,$25(a0)
00019CBE 4228 0028                  		clr.b	$28(a0)
00019CC2 42A8 0010                  		clr.l	$10(a0)
00019CC6                            
00019CC6                            loc_18334:
00019CC6 4EB9 0000 33AE             		jsr	(RandomNumber).l
00019CCC 1140 0034                  		move.b	d0,$34(a0)
00019CD0                            
00019CD0                            loc_1833E:
00019CD0 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019CD6 3168 0030 0008             		move.w	$30(a0),8(a0)
00019CDC 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00019CE2 6400                       		bcc.s	locret_18390
00019CE4 4A28 0022                  		tst.b	$22(a0)
00019CE8 6B00                       		bmi.s	loc_18392
00019CEA 4A28 0020                  		tst.b	$20(a0)
00019CEE 6600                       		bne.s	locret_18390
00019CF0 4A28 003E                  		tst.b	$3E(a0)
00019CF4 6600                       		bne.s	loc_18374
00019CF6 117C 0028 003E             		move.b	#$28,$3E(a0)
00019CFC 303C 00AC                  		move.w	#$AC,d0
00019D00 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019D06                            
00019D06                            loc_18374:
00019D06 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019D0A 7000                       		moveq	#0,d0
00019D0C 4A51                       		tst.w	(a1)
00019D0E 6600                       		bne.s	loc_18382
00019D10 303C 0EEE                  		move.w	#$EEE,d0
00019D14                            
00019D14                            loc_18382:
00019D14 3280                       		move.w	d0,(a1)
00019D16 5328 003E                  		subq.b	#1,$3E(a0)
00019D1A 6600                       		bne.s	locret_18390
00019D1C 117C 000F 0020             		move.b	#$F,$20(a0)
00019D22                            
00019D22                            locret_18390:
00019D22 4E75                       		rts	
00019D24                            ; ===========================================================================
00019D24                            
00019D24                            loc_18392:				; XREF: loc_1833E
00019D24 7064                       		moveq	#100,d0
00019D26 6100 0000                  		bsr.w	AddPoints
00019D2A 117C 0004 0025             		move.b	#4,$25(a0)
00019D30 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019D36 4268 0010                  		clr.w	$10(a0)
00019D3A 4E75                       		rts	
00019D3C                            ; ===========================================================================
00019D3C                            
00019D3C                            loc_183AA:				; XREF: Obj73_ShipIndex
00019D3C 7000                       		moveq	#0,d0
00019D3E 1028 0028                  		move.b	$28(a0),d0
00019D42 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00019D46 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00019D4A 0228 0006 0028             		andi.b	#6,$28(a0)
00019D50 6000 FF7E                  		bra.w	loc_1833E
00019D54                            ; ===========================================================================
00019D54 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00019D56 0000                       		dc.w Obj73_MakeLava2-off_183C2
00019D58 0000                       		dc.w loc_183CA-off_183C2
00019D5A 0000                       		dc.w Obj73_MakeLava2-off_183C2
00019D5C                            ; ===========================================================================
00019D5C                            
00019D5C                            loc_183CA:				; XREF: off_183C2
00019D5C 4A68 0010                  		tst.w	$10(a0)
00019D60 6600                       		bne.s	loc_183FE
00019D62 7040                       		moveq	#$40,d0
00019D64 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00019D6A 6700                       		beq.s	loc_183E6
00019D6C 6500                       		bcs.s	loc_183DE
00019D6E 4440                       		neg.w	d0
00019D70                            
00019D70                            loc_183DE:
00019D70 3140 0012                  		move.w	d0,$12(a0)
00019D74 6000 F4CC                  		bra.w	BossMove
00019D78                            ; ===========================================================================
00019D78                            
00019D78                            loc_183E6:
00019D78 317C 0200 0010             		move.w	#$200,$10(a0)
00019D7E 317C 0100 0012             		move.w	#$100,$12(a0)
00019D84 0828 0000 0022             		btst	#0,$22(a0)
00019D8A 6600                       		bne.s	loc_183FE
00019D8C 4468 0010                  		neg.w	$10(a0)
00019D90                            
00019D90                            loc_183FE:
00019D90 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00019D96 6400                       		bcc.s	Obj73_MakeLava
00019D98 6100 F4A8                  		bsr.w	BossMove
00019D9C 5968 0012                  		subq.w	#4,$12(a0)
00019DA0                            
00019DA0                            Obj73_MakeLava:
00019DA0 5328 0034                  		subq.b	#1,$34(a0)
00019DA4 6400                       		bcc.s	loc_1845C
00019DA6 4EB9 0000 E574             		jsr	SingleObjLoad
00019DAC 6600                       		bne.s	loc_1844A
00019DAE 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00019DB2 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00019DB8 4EB9 0000 33AE             		jsr	(RandomNumber).l
00019DBE 0280 0000 FFFF             		andi.l	#$FFFF,d0
00019DC4 80FC 0050                  		divu.w	#$50,d0
00019DC8 4840                       		swap	d0
00019DCA 0640 1878                  		addi.w	#$1878,d0
00019DCE 3340 0008                  		move.w	d0,8(a1)
00019DD2 EE09                       		lsr.b	#7,d1
00019DD4 337C 00FF 0028             		move.w	#$FF,$28(a1)
00019DDA                            
00019DDA                            loc_1844A:
00019DDA 4EB9 0000 33AE             		jsr	(RandomNumber).l
00019DE0 0200 001F                  		andi.b	#$1F,d0
00019DE4 0600 0040                  		addi.b	#$40,d0
00019DE8 1140 0034                  		move.b	d0,$34(a0)
00019DEC                            
00019DEC                            loc_1845C:
00019DEC 0828 0000 0022             		btst	#0,$22(a0)
00019DF2 6700                       		beq.s	loc_18474
00019DF4 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00019DFA 6D00                       		blt.s	locret_1849C
00019DFC 317C 1910 0030             		move.w	#$1910,$30(a0)
00019E02 6000                       		bra.s	loc_18482
00019E04                            ; ===========================================================================
00019E04                            
00019E04                            loc_18474:
00019E04 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00019E0A 6E00                       		bgt.s	locret_1849C
00019E0C 317C 1830 0030             		move.w	#$1830,$30(a0)
00019E12                            
00019E12                            loc_18482:
00019E12 4268 0010                  		clr.w	$10(a0)
00019E16 317C FE80 0012             		move.w	#-$180,$12(a0)
00019E1C 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00019E22 6400                       		bcc.s	loc_18498
00019E24 4468 0012                  		neg.w	$12(a0)
00019E28                            
00019E28                            loc_18498:
00019E28 5428 0028                  		addq.b	#2,$28(a0)
00019E2C                            
00019E2C                            locret_1849C:
00019E2C 4E75                       		rts	
00019E2E                            ; ===========================================================================
00019E2E                            
00019E2E                            Obj73_MakeLava2:			; XREF: off_183C2
00019E2E 6100 F412                  		bsr.w	BossMove
00019E32 3028 0038                  		move.w	$38(a0),d0
00019E36 0440 022C                  		subi.w	#$22C,d0
00019E3A 6E00                       		bgt.s	locret_184F4
00019E3C 303C 022C                  		move.w	#$22C,d0
00019E40 4A68 0012                  		tst.w	$12(a0)
00019E44 6700                       		beq.s	loc_184EA
00019E46 4268 0012                  		clr.w	$12(a0)
00019E4A 317C 0050 003C             		move.w	#$50,$3C(a0)
00019E50 0868 0000 0022             		bchg	#0,$22(a0)
00019E56 4EB9 0000 E574             		jsr	SingleObjLoad
00019E5C 6600                       		bne.s	loc_184EA
00019E5E 3368 0030 0008             		move.w	$30(a0),8(a1)
00019E64 3368 0038 000C             		move.w	$38(a0),$C(a1)
00019E6A 0669 0018 000C             		addi.w	#$18,$C(a1)
00019E70 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00019E74 137C 0001 0028             		move.b	#1,$28(a1)
00019E7A                            
00019E7A                            loc_184EA:
00019E7A 5368 003C                  		subq.w	#1,$3C(a0)
00019E7E 6600                       		bne.s	locret_184F4
00019E80 5428 0028                  		addq.b	#2,$28(a0)
00019E84                            
00019E84                            locret_184F4:
00019E84 4E75                       		rts	
00019E86                            ; ===========================================================================
00019E86                            
00019E86                            loc_184F6:				; XREF: Obj73_ShipIndex
00019E86 5368 003C                  		subq.w	#1,$3C(a0)
00019E8A 6B00                       		bmi.s	loc_18500
00019E8C 6000 F372                  		bra.w	BossDefeated
00019E90                            ; ===========================================================================
00019E90                            
00019E90                            loc_18500:
00019E90 08E8 0000 0022             		bset	#0,$22(a0)
00019E96 08A8 0007 0022             		bclr	#7,$22(a0)
00019E9C 4268 0010                  		clr.w	$10(a0)
00019EA0 5428 0025                  		addq.b	#2,$25(a0)
00019EA4 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00019EAA 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019EAE 6600                       		bne.s	locret_1852A
00019EB0 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019EB6 4268 0012                  		clr.w	$12(a0)
00019EBA                            
00019EBA                            locret_1852A:
00019EBA 4E75                       		rts	
00019EBC                            ; ===========================================================================
00019EBC                            
00019EBC                            loc_1852C:				; XREF: Obj73_ShipIndex
00019EBC 5268 003C                  		addq.w	#1,$3C(a0)
00019EC0 6700                       		beq.s	loc_18544
00019EC2 6A00                       		bpl.s	loc_1854E
00019EC4 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00019ECA 6400                       		bcc.s	loc_18544
00019ECC 0668 0018 0012             		addi.w	#$18,$12(a0)
00019ED2 6000                       		bra.s	loc_1857A
00019ED4                            ; ===========================================================================
00019ED4                            
00019ED4                            loc_18544:
00019ED4 4268 0012                  		clr.w	$12(a0)
00019ED8 4268 003C                  		clr.w	$3C(a0)
00019EDC 6000                       		bra.s	loc_1857A
00019EDE                            ; ===========================================================================
00019EDE                            
00019EDE                            loc_1854E:
00019EDE 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00019EE4 6500                       		bcs.s	loc_18566
00019EE6 6700                       		beq.s	loc_1856C
00019EE8 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00019EEE 6500                       		bcs.s	loc_1857A
00019EF0 5428 0025                  		addq.b	#2,$25(a0)
00019EF4 6000                       		bra.s	loc_1857A
00019EF6                            ; ===========================================================================
00019EF6                            
00019EF6                            loc_18566:
00019EF6 5168 0012                  		subq.w	#8,$12(a0)
00019EFA 6000                       		bra.s	loc_1857A
00019EFC                            ; ===========================================================================
00019EFC                            
00019EFC                            loc_1856C:
00019EFC 4268 0012                  		clr.w	$12(a0)
00019F00 303C 0083                  		move.w	#$83,d0
00019F04 4EB9 0000 1470             		jsr	(PlaySound).l	; play MZ music
00019F0A                            
00019F0A                            loc_1857A:
00019F0A 6100 F336                  		bsr.w	BossMove
00019F0E 6000 FDC0                  		bra.w	loc_1833E
00019F12                            ; ===========================================================================
00019F12                            
00019F12                            loc_18582:				; XREF: Obj73_ShipIndex
00019F12 317C 0500 0010             		move.w	#$500,$10(a0)
00019F18 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019F1E 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00019F24 6400                       		bcc.s	loc_1859C
00019F26 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019F2A 6000                       		bra.s	loc_185A2
00019F2C                            ; ===========================================================================
00019F2C                            
00019F2C                            loc_1859C:
00019F2C 4A28 0001                  		tst.b	1(a0)
00019F30 6A00                       		bpl.s	Obj73_ShipDel
00019F32                            
00019F32                            loc_185A2:
00019F32 6100 F30E                  		bsr.w	BossMove
00019F36 6000 FD98                  		bra.w	loc_1833E
00019F3A                            ; ===========================================================================
00019F3A                            
00019F3A                            Obj73_ShipDel:
00019F3A 4EF9 0000 E11A             		jmp	DeleteObject
00019F40                            ; ===========================================================================
00019F40                            
00019F40                            Obj73_FaceMain:				; XREF: Obj73_Index
00019F40 7000                       		moveq	#0,d0
00019F42 7201                       		moveq	#1,d1
00019F44 2268 0034                  		movea.l	$34(a0),a1
00019F48 1029 0025                  		move.b	$25(a1),d0
00019F4C 5540                       		subq.w	#2,d0
00019F4E 6600                       		bne.s	loc_185D2
00019F50 0829 0001 0028             		btst	#1,$28(a1)
00019F56 6700                       		beq.s	loc_185DA
00019F58 4A69 0012                  		tst.w	$12(a1)
00019F5C 6600                       		bne.s	loc_185DA
00019F5E 7204                       		moveq	#4,d1
00019F60 6000                       		bra.s	loc_185EE
00019F62                            ; ===========================================================================
00019F62                            
00019F62                            loc_185D2:
00019F62 5500                       		subq.b	#2,d0
00019F64 6B00                       		bmi.s	loc_185DA
00019F66 720A                       		moveq	#$A,d1
00019F68 6000                       		bra.s	loc_185EE
00019F6A                            ; ===========================================================================
00019F6A                            
00019F6A                            loc_185DA:
00019F6A 4A29 0020                  		tst.b	$20(a1)
00019F6E 6600                       		bne.s	loc_185E4
00019F70 7205                       		moveq	#5,d1
00019F72 6000                       		bra.s	loc_185EE
00019F74                            ; ===========================================================================
00019F74                            
00019F74                            loc_185E4:
00019F74 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019F7A 6500                       		bcs.s	loc_185EE
00019F7C 7204                       		moveq	#4,d1
00019F7E                            
00019F7E                            loc_185EE:
00019F7E 1141 001C                  		move.b	d1,$1C(a0)
00019F82 5900                       		subq.b	#4,d0
00019F84 6600                       		bne.s	loc_18602
00019F86 117C 0006 001C             		move.b	#6,$1C(a0)
00019F8C 4A28 0001                  		tst.b	1(a0)
00019F90 6A00                       		bpl.s	Obj73_FaceDel
00019F92                            
00019F92                            loc_18602:
00019F92 6000                       		bra.s	Obj73_Display
00019F94                            ; ===========================================================================
00019F94                            
00019F94                            Obj73_FaceDel:
00019F94 4EF9 0000 E11A             		jmp	DeleteObject
00019F9A                            ; ===========================================================================
00019F9A                            
00019F9A                            Obj73_FlameMain:			; XREF: Obj73_Index
00019F9A 117C 0007 001C             		move.b	#7,$1C(a0)
00019FA0 2268 0034                  		movea.l	$34(a0),a1
00019FA4 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019FAA 6D00                       		blt.s	loc_1862A
00019FAC 117C 000B 001C             		move.b	#$B,$1C(a0)
00019FB2 4A28 0001                  		tst.b	1(a0)
00019FB6 6A00                       		bpl.s	Obj73_FlameDel
00019FB8 6000                       		bra.s	loc_18636
00019FBA                            ; ===========================================================================
00019FBA                            
00019FBA                            loc_1862A:
00019FBA 4A69 0010                  		tst.w	$10(a1)
00019FBE 6700                       		beq.s	loc_18636
00019FC0 117C 0008 001C             		move.b	#8,$1C(a0)
00019FC6                            
00019FC6                            loc_18636:
00019FC6 6000                       		bra.s	Obj73_Display
00019FC8                            ; ===========================================================================
00019FC8                            
00019FC8                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00019FC8 4EF9 0000 E11A             		jmp	DeleteObject
00019FCE                            ; ===========================================================================
00019FCE                            
00019FCE                            Obj73_Display:
00019FCE 43F9 0001 9652             		lea	(Ani_Eggman).l,a1
00019FD4 4EB9 0000 B1F0             		jsr	AnimateSprite
00019FDA                            
00019FDA                            loc_1864A:
00019FDA 2268 0034                  		movea.l	$34(a0),a1
00019FDE 3169 0008 0008             		move.w	8(a1),8(a0)
00019FE4 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019FEA 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019FF0 7003                       		moveq	#3,d0
00019FF2 C028 0022                  		and.b	$22(a0),d0
00019FF6 0228 00FC 0001             		andi.b	#-4,1(a0)
00019FFC 8128 0001                  		or.b	d0,1(a0)
0001A000 4EF9 0000 E0DE             		jmp	DisplaySprite
0001A006                            ; ===========================================================================
0001A006                            
0001A006                            Obj73_TubeMain:				; XREF: Obj73_Index
0001A006 2268 0034                  		movea.l	$34(a0),a1
0001A00A 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001A010 6600                       		bne.s	loc_18688
0001A012 4A28 0001                  		tst.b	1(a0)
0001A016 6A00                       		bpl.s	Obj73_TubeDel
0001A018                            
0001A018                            loc_18688:
0001A018 217C 0001 976A 0004        		move.l	#Map_BossItems,4(a0)
0001A020 317C 246C 0002             		move.w	#$246C,2(a0)
0001A026 117C 0004 001A             		move.b	#4,$1A(a0)
0001A02C 60AC                       		bra.s	loc_1864A
0001A02E                            ; ===========================================================================
0001A02E                            
0001A02E                            Obj73_TubeDel:
0001A02E 4EF9 0000 E11A             		jmp	DeleteObject
0001A034                            ; ===========================================================================
0001A034                            ; ---------------------------------------------------------------------------
0001A034                            ; Object 74 - lava that	Eggman drops (MZ)
0001A034                            ; ---------------------------------------------------------------------------
0001A034                            
0001A034                            Obj74:					; XREF: Obj_Index
0001A034 7000                       		moveq	#0,d0
0001A036 1028 0024                  		move.b	$24(a0),d0
0001A03A 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001A03E 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001A042 4EF9 0000 E0DE             		jmp	DisplaySprite
0001A048                            ; ===========================================================================
0001A048 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001A04A 0000                       		dc.w Obj74_Action-Obj74_Index
0001A04C 0000                       		dc.w loc_18886-Obj74_Index
0001A04E 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001A050                            ; ===========================================================================
0001A050                            
0001A050                            Obj74_Main:				; XREF: Obj74_Index
0001A050 117C 0008 0016             		move.b	#8,$16(a0)
0001A056 117C 0008 0017             		move.b	#8,$17(a0)
0001A05C 217C 0000 BE48 0004        		move.l	#Map_obj14,4(a0)
0001A064 317C 0345 0002             		move.w	#$345,2(a0)
0001A06A 117C 0004 0001             		move.b	#4,1(a0)
0001A070 117C 0005 0018             		move.b	#5,$18(a0)
0001A076 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A07C 117C 0008 0019             		move.b	#8,$19(a0)
0001A082 5428 0024                  		addq.b	#2,$24(a0)
0001A086 4A28 0028                  		tst.b	$28(a0)
0001A08A 6600                       		bne.s	loc_1870A
0001A08C 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A092 5428 0024                  		addq.b	#2,$24(a0)
0001A096 6000 0000                  		bra.w	loc_18886
0001A09A                            ; ===========================================================================
0001A09A                            
0001A09A                            loc_1870A:
0001A09A 117C 001E 0029             		move.b	#$1E,$29(a0)
0001A0A0 303C 00AE                  		move.w	#$AE,d0
0001A0A4 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play lava sound
0001A0AA                            
0001A0AA                            Obj74_Action:				; XREF: Obj74_Index
0001A0AA 7000                       		moveq	#0,d0
0001A0AC 1028 0025                  		move.b	$25(a0),d0
0001A0B0 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001A0B4 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001A0B8 4EB9 0000 E0B8             		jsr	SpeedToPos
0001A0BE 43F9 0000 EFAC             		lea	(Ani_obj14).l,a1
0001A0C4 4EB9 0000 B1F0             		jsr	AnimateSprite
0001A0CA 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
0001A0D0 6200                       		bhi.s	Obj74_Delete
0001A0D2 4E75                       		rts	
0001A0D4                            ; ===========================================================================
0001A0D4                            
0001A0D4                            Obj74_Delete:
0001A0D4 4EF9 0000 E11A             		jmp	DeleteObject
0001A0DA                            ; ===========================================================================
0001A0DA 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001A0DC 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001A0DE 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001A0E0 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001A0E2                            ; ===========================================================================
0001A0E2                            
0001A0E2                            Obj74_Drop:				; XREF: Obj74_Index2
0001A0E2 08E8 0001 0022             		bset	#1,$22(a0)
0001A0E8 5328 0029                  		subq.b	#1,$29(a0)
0001A0EC 6A00                       		bpl.s	locret_18780
0001A0EE 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A0F4 4228 0028                  		clr.b	$28(a0)
0001A0F8 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A0FE 08A8 0001 0022             		bclr	#1,$22(a0)
0001A104 6100 C6BA                  		bsr.w	ObjHitFloor
0001A108 4A41                       		tst.w	d1
0001A10A 6A00                       		bpl.s	locret_18780
0001A10C 5428 0025                  		addq.b	#2,$25(a0)
0001A110                            
0001A110                            locret_18780:
0001A110 4E75                       		rts	
0001A112                            ; ===========================================================================
0001A112                            
0001A112                            Obj74_MakeFlame:			; XREF: Obj74_Index2
0001A112 5568 000C                  		subq.w	#2,$C(a0)
0001A116 08E8 0007 0002             		bset	#7,2(a0)
0001A11C 317C 00A0 0010             		move.w	#$A0,$10(a0)
0001A122 4268 0012                  		clr.w	$12(a0)
0001A126 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A12C 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A132 117C 0003 0029             		move.b	#3,$29(a0)
0001A138 4EB9 0000 E58A             		jsr	SingleObjLoad2
0001A13E 6600                       		bne.s	loc_187CA
0001A140 47D1                       		lea	(a1),a3
0001A142 45D0                       		lea	(a0),a2
0001A144 7003                       		moveq	#3,d0
0001A146                            
0001A146                            Obj74_Loop:
0001A146 26DA                       		move.l	(a2)+,(a3)+
0001A148 26DA                       		move.l	(a2)+,(a3)+
0001A14A 26DA                       		move.l	(a2)+,(a3)+
0001A14C 26DA                       		move.l	(a2)+,(a3)+
0001A14E 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001A152                            
0001A152 4469 0010                  		neg.w	$10(a1)
0001A156 5429 0025                  		addq.b	#2,$25(a1)
0001A15A                            
0001A15A                            loc_187CA:
0001A15A 5428 0025                  		addq.b	#2,$25(a0)
0001A15E 4E75                       		rts	
0001A160                            
0001A160                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A160                            
0001A160                            
0001A160                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
0001A160 4EB9 0000 E58A             		jsr	SingleObjLoad2
0001A166 6600                       		bne.s	locret_187EE
0001A168 3368 0008 0008             		move.w	8(a0),8(a1)
0001A16E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A174 12BC 0074                  		move.b	#$74,(a1)
0001A178 337C 0067 0028             		move.w	#$67,$28(a1)
0001A17E                            
0001A17E                            locret_187EE:
0001A17E 4E75                       		rts	
0001A180                            ; End of function Obj74_Duplicate2
0001A180                            
0001A180                            ; ===========================================================================
0001A180                            
0001A180                            Obj74_Duplicate:			; XREF: Obj74_Index2
0001A180 6100 C63E                  		bsr.w	ObjHitFloor
0001A184 4A41                       		tst.w	d1
0001A186 6A00                       		bpl.s	loc_18826
0001A188 3028 0008                  		move.w	8(a0),d0
0001A18C 0C40 1940                  		cmpi.w	#$1940,d0
0001A190 6E00                       		bgt.s	loc_1882C
0001A192 3228 0030                  		move.w	$30(a0),d1
0001A196 B240                       		cmp.w	d0,d1
0001A198 6700                       		beq.s	loc_1881E
0001A19A 0240 0010                  		andi.w	#$10,d0
0001A19E 0241 0010                  		andi.w	#$10,d1
0001A1A2 B240                       		cmp.w	d0,d1
0001A1A4 6700                       		beq.s	loc_1881E
0001A1A6 61B8                       		bsr.s	Obj74_Duplicate2
0001A1A8 3168 0008 0032             		move.w	8(a0),$32(a0)
0001A1AE                            
0001A1AE                            loc_1881E:
0001A1AE 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A1B4 4E75                       		rts	
0001A1B6                            ; ===========================================================================
0001A1B6                            
0001A1B6                            loc_18826:
0001A1B6 5428 0025                  		addq.b	#2,$25(a0)
0001A1BA 4E75                       		rts	
0001A1BC                            ; ===========================================================================
0001A1BC                            
0001A1BC                            loc_1882C:
0001A1BC 5428 0024                  		addq.b	#2,$24(a0)
0001A1C0 4E75                       		rts	
0001A1C2                            ; ===========================================================================
0001A1C2                            
0001A1C2                            Obj74_FallEdge:				; XREF: Obj74_Index2
0001A1C2 08A8 0001 0022             		bclr	#1,$22(a0)
0001A1C8 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
0001A1CE 3028 0008                  		move.w	8(a0),d0
0001A1D2 9068 0032                  		sub.w	$32(a0),d0
0001A1D6 6A00                       		bpl.s	loc_1884A
0001A1D8 4440                       		neg.w	d0
0001A1DA                            
0001A1DA                            loc_1884A:
0001A1DA 0C40 0012                  		cmpi.w	#$12,d0
0001A1DE 6600                       		bne.s	loc_18856
0001A1E0 08A8 0007 0002             		bclr	#7,2(a0)
0001A1E6                            
0001A1E6                            loc_18856:
0001A1E6 6100 C5D8                  		bsr.w	ObjHitFloor
0001A1EA 4A41                       		tst.w	d1
0001A1EC 6A00                       		bpl.s	locret_1887E
0001A1EE 5328 0029                  		subq.b	#1,$29(a0)
0001A1F2 6700                       		beq.s	Obj74_Delete2
0001A1F4 4268 0012                  		clr.w	$12(a0)
0001A1F8 3168 0032 0008             		move.w	$32(a0),8(a0)
0001A1FE 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A204 08E8 0007 0002             		bset	#7,2(a0)
0001A20A 5528 0025                  		subq.b	#2,$25(a0)
0001A20E                            
0001A20E                            locret_1887E:
0001A20E 4E75                       		rts	
0001A210                            ; ===========================================================================
0001A210                            
0001A210                            Obj74_Delete2:
0001A210 4EF9 0000 E11A             		jmp	DeleteObject
0001A216                            ; ===========================================================================
0001A216                            
0001A216                            loc_18886:				; XREF: Obj74_Index
0001A216 08E8 0007 0002             		bset	#7,2(a0)
0001A21C 5328 0029                  		subq.b	#1,$29(a0)
0001A220 6600                       		bne.s	Obj74_Animate
0001A222 117C 0001 001C             		move.b	#1,$1C(a0)
0001A228 5968 000C                  		subq.w	#4,$C(a0)
0001A22C 4228 0020                  		clr.b	$20(a0)
0001A230                            
0001A230                            Obj74_Animate:
0001A230 43F9 0000 EFAC             		lea	(Ani_obj14).l,a1
0001A236 4EF9 0000 B1F0             		jmp	AnimateSprite
0001A23C                            ; ===========================================================================
0001A23C                            
0001A23C                            Obj74_Delete3:				; XREF: Obj74_Index
0001A23C 4EF9 0000 E11A             		jmp	DeleteObject
0001A242                            ; ===========================================================================
0001A242                            
0001A242                            Obj7A_Delete:
0001A242 4EF9 0000 E11A             		jmp	DeleteObject
0001A248                            ; ===========================================================================
0001A248                            ; ---------------------------------------------------------------------------
0001A248                            ; Object 7A - Eggman (SLZ)
0001A248                            ; ---------------------------------------------------------------------------
0001A248                            
0001A248                            Obj7A:					; XREF: Obj_Index
0001A248 7000                       		moveq	#0,d0
0001A24A 1028 0024                  		move.b	$24(a0),d0
0001A24E 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001A252 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001A256                            ; ===========================================================================
0001A256 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001A258 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001A25A 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001A25C 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001A25E 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001A260                            
0001A260 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001A263 0401 04                    		dc.b 4,	1, 4
0001A266 0607 04                    		dc.b 6,	7, 4
0001A269 0800 03                    		dc.b 8,	0, 3
0001A26C                            ; ===========================================================================
0001A26C                            
0001A26C                            Obj7A_Main:				; XREF: Obj7A_Index
0001A26C 317C 2188 0008             		move.w	#$2188,8(a0)
0001A272 317C 0228 000C             		move.w	#$228,$C(a0)
0001A278 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A27E 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A284 117C 000F 0020             		move.b	#$F,$20(a0)
0001A28A 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A290 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
0001A294 2248                       		movea.l	a0,a1
0001A296 7203                       		moveq	#3,d1
0001A298 6000                       		bra.s	Obj7A_LoadBoss
0001A29A                            ; ===========================================================================
0001A29A                            
0001A29A                            Obj7A_Loop:
0001A29A 4EB9 0000 E58A             		jsr	SingleObjLoad2
0001A2A0 6600                       		bne.s	loc_1895C
0001A2A2 12BC 007A                  		move.b	#$7A,0(a1)
0001A2A6 3368 0008 0008             		move.w	8(a0),8(a1)
0001A2AC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A2B2                            
0001A2B2                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
0001A2B2 08A8 0000 0022             		bclr	#0,$22(a0)
0001A2B8 4229 0025                  		clr.b	$25(a1)
0001A2BC 135A 0024                  		move.b	(a2)+,$24(a1)
0001A2C0 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A2C4 135A 0018                  		move.b	(a2)+,$18(a1)
0001A2C8 237C 0001 96A2 0004        		move.l	#Map_Eggman,4(a1)
0001A2D0 337C 0400 0002             		move.w	#$400,2(a1)
0001A2D6 137C 0004 0001             		move.b	#4,1(a1)
0001A2DC 137C 0020 0019             		move.b	#$20,$19(a1)
0001A2E2 2348 0034                  		move.l	a0,$34(a1)
0001A2E6 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001A2EA                            
0001A2EA                            loc_1895C:
0001A2EA 43F8 D040                  		lea	($FFFFD040).w,a1
0001A2EE 45E8 002A                  		lea	$2A(a0),a2
0001A2F2 705E                       		moveq	#$5E,d0
0001A2F4 723E                       		moveq	#$3E,d1
0001A2F6                            
0001A2F6                            loc_18968:
0001A2F6 B011                       		cmp.b	(a1),d0
0001A2F8 6600                       		bne.s	loc_18974
0001A2FA 4A29 0028                  		tst.b	$28(a1)
0001A2FE 6700                       		beq.s	loc_18974
0001A300 34C9                       		move.w	a1,(a2)+
0001A302                            
0001A302                            loc_18974:
0001A302 D2FC 0040                  		adda.w	#$40,a1
0001A306 51C9 FFEE                  		dbf	d1,loc_18968
0001A30A                            
0001A30A                            Obj7A_ShipMain:				; XREF: Obj7A_Index
0001A30A 7000                       		moveq	#0,d0
0001A30C 1028 0025                  		move.b	$25(a0),d0
0001A310 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001A314 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001A318 43F9 0001 9652             		lea	(Ani_Eggman).l,a1
0001A31E 4EB9 0000 B1F0             		jsr	AnimateSprite
0001A324 7003                       		moveq	#3,d0
0001A326 C028 0022                  		and.b	$22(a0),d0
0001A32A 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A330 8128 0001                  		or.b	d0,1(a0)
0001A334 4EF9 0000 E0DE             		jmp	DisplaySprite
0001A33A                            ; ===========================================================================
0001A33A 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001A33C 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001A33E 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001A340 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001A342 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001A344 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001A346                            ; ===========================================================================
0001A346                            
0001A346                            loc_189B8:				; XREF: Obj7A_ShipIndex
0001A346 317C FF00 0010             		move.w	#-$100,$10(a0)
0001A34C 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001A352 6400                       		bcc.s	loc_189CA
0001A354 5428 0025                  		addq.b	#2,$25(a0)
0001A358                            
0001A358                            loc_189CA:
0001A358 6100 EEE8                  		bsr.w	BossMove
0001A35C 1028 003F                  		move.b	$3F(a0),d0
0001A360 5428 003F                  		addq.b	#2,$3F(a0)
0001A364 4EB9 0000 33D4             		jsr	(CalcSine).l
0001A36A EC40                       		asr.w	#6,d0
0001A36C D068 0038                  		add.w	$38(a0),d0
0001A370 3140 000C                  		move.w	d0,$C(a0)
0001A374 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A37A 6000                       		bra.s	loc_189FE
0001A37C                            ; ===========================================================================
0001A37C                            
0001A37C                            loc_189EE:
0001A37C 6100 EEC4                  		bsr.w	BossMove
0001A380 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A386 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A38C                            
0001A38C                            loc_189FE:
0001A38C 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001A392 6400                       		bcc.s	locret_18A44
0001A394 4A28 0022                  		tst.b	$22(a0)
0001A398 6B00                       		bmi.s	loc_18A46
0001A39A 4A28 0020                  		tst.b	$20(a0)
0001A39E 6600                       		bne.s	locret_18A44
0001A3A0 4A28 003E                  		tst.b	$3E(a0)
0001A3A4 6600                       		bne.s	loc_18A28
0001A3A6 117C 0020 003E             		move.b	#$20,$3E(a0)
0001A3AC 303C 00AC                  		move.w	#$AC,d0
0001A3B0 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A3B6                            
0001A3B6                            loc_18A28:
0001A3B6 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001A3BA 7000                       		moveq	#0,d0
0001A3BC 4A51                       		tst.w	(a1)
0001A3BE 6600                       		bne.s	loc_18A36
0001A3C0 303C 0EEE                  		move.w	#$EEE,d0
0001A3C4                            
0001A3C4                            loc_18A36:
0001A3C4 3280                       		move.w	d0,(a1)
0001A3C6 5328 003E                  		subq.b	#1,$3E(a0)
0001A3CA 6600                       		bne.s	locret_18A44
0001A3CC 117C 000F 0020             		move.b	#$F,$20(a0)
0001A3D2                            
0001A3D2                            locret_18A44:
0001A3D2 4E75                       		rts	
0001A3D4                            ; ===========================================================================
0001A3D4                            
0001A3D4                            loc_18A46:
0001A3D4 7064                       		moveq	#100,d0
0001A3D6 6100 0000                  		bsr.w	AddPoints
0001A3DA 117C 0006 0025             		move.b	#6,$25(a0)
0001A3E0 117C 0078 003C             		move.b	#$78,$3C(a0)
0001A3E6 4268 0010                  		clr.w	$10(a0)
0001A3EA 4E75                       		rts	
0001A3EC                            ; ===========================================================================
0001A3EC                            
0001A3EC                            loc_18A5E:				; XREF: Obj7A_ShipIndex
0001A3EC 3028 0030                  		move.w	$30(a0),d0
0001A3F0 317C 0200 0010             		move.w	#$200,$10(a0)
0001A3F6 0828 0000 0022             		btst	#0,$22(a0)
0001A3FC 6600                       		bne.s	loc_18A7C
0001A3FE 4468 0010                  		neg.w	$10(a0)
0001A402 0C40 2008                  		cmpi.w	#$2008,d0
0001A406 6E00                       		bgt.s	loc_18A88
0001A408 6000                       		bra.s	loc_18A82
0001A40A                            ; ===========================================================================
0001A40A                            
0001A40A                            loc_18A7C:
0001A40A 0C40 2138                  		cmpi.w	#$2138,d0
0001A40E 6D00                       		blt.s	loc_18A88
0001A410                            
0001A410                            loc_18A82:
0001A410 0868 0000 0022             		bchg	#0,$22(a0)
0001A416                            
0001A416                            loc_18A88:
0001A416 3028 0008                  		move.w	8(a0),d0
0001A41A 72FF                       		moveq	#-1,d1
0001A41C 7402                       		moveq	#2,d2
0001A41E 45E8 002A                  		lea	$2A(a0),a2
0001A422 7828                       		moveq	#$28,d4
0001A424 4A68 0010                  		tst.w	$10(a0)
0001A428 6A00                       		bpl.s	loc_18A9E
0001A42A 4444                       		neg.w	d4
0001A42C                            
0001A42C                            loc_18A9E:
0001A42C 321A                       		move.w	(a2)+,d1
0001A42E 2641                       		movea.l	d1,a3
0001A430 082B 0003 0022             		btst	#3,$22(a3)
0001A436 6600                       		bne.s	loc_18AB4
0001A438 362B 0008                  		move.w	8(a3),d3
0001A43C D644                       		add.w	d4,d3
0001A43E 9640                       		sub.w	d0,d3
0001A440 6700                       		beq.s	loc_18AC0
0001A442                            
0001A442                            loc_18AB4:
0001A442 51CA FFE8                  		dbf	d2,loc_18A9E
0001A446                            
0001A446 1142 0028                  		move.b	d2,$28(a0)
0001A44A 6000 FF0C                  		bra.w	loc_189CA
0001A44E                            ; ===========================================================================
0001A44E                            
0001A44E                            loc_18AC0:
0001A44E 1142 0028                  		move.b	d2,$28(a0)
0001A452 5428 0025                  		addq.b	#2,$25(a0)
0001A456 117C 0028 003C             		move.b	#$28,$3C(a0)
0001A45C 6000 FEFA                  		bra.w	loc_189CA
0001A460                            ; ===========================================================================
0001A460                            
0001A460                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
0001A460 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001A466 6600                       		bne.s	loc_18B36
0001A468 70FF                       		moveq	#-1,d0
0001A46A 1028 0028                  		move.b	$28(a0),d0
0001A46E 4880                       		ext.w	d0
0001A470 6B00                       		bmi.s	loc_18B40
0001A472 5540                       		subq.w	#2,d0
0001A474 4440                       		neg.w	d0
0001A476 D040                       		add.w	d0,d0
0001A478 43E8 002A                  		lea	$2A(a0),a1
0001A47C 3031 0000                  		move.w	(a1,d0.w),d0
0001A480 2440                       		movea.l	d0,a2
0001A482 43F8 D040                  		lea	($FFFFD040).w,a1
0001A486 723E                       		moveq	#$3E,d1
0001A488                            
0001A488                            loc_18AFA:
0001A488 B0A9 003C                  		cmp.l	$3C(a1),d0
0001A48C 6700                       		beq.s	loc_18B40
0001A48E D2FC 0040                  		adda.w	#$40,a1
0001A492 51C9 FFF4                  		dbf	d1,loc_18AFA
0001A496                            
0001A496 2F08                       		move.l	a0,-(sp)
0001A498 41D2                       		lea	(a2),a0
0001A49A 4EB9 0000 E58A             		jsr	SingleObjLoad2
0001A4A0 205F                       		movea.l	(sp)+,a0
0001A4A2 6600                       		bne.s	loc_18B40
0001A4A4 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
0001A4A8 3368 0008 0008             		move.w	8(a0),8(a1)
0001A4AE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A4B4 0669 0020 000C             		addi.w	#$20,$C(a1)
0001A4BA 136A 0022 0022             		move.b	$22(a2),$22(a1)
0001A4C0 234A 003C                  		move.l	a2,$3C(a1)
0001A4C4                            
0001A4C4                            loc_18B36:
0001A4C4 5328 003C                  		subq.b	#1,$3C(a0)
0001A4C8 6700                       		beq.s	loc_18B40
0001A4CA 6000 FEC0                  		bra.w	loc_189FE
0001A4CE                            ; ===========================================================================
0001A4CE                            
0001A4CE                            loc_18B40:
0001A4CE 5528 0025                  		subq.b	#2,$25(a0)
0001A4D2 6000 FE84                  		bra.w	loc_189CA
0001A4D6                            ; ===========================================================================
0001A4D6                            
0001A4D6                            loc_18B48:				; XREF: Obj7A_ShipIndex
0001A4D6 5328 003C                  		subq.b	#1,$3C(a0)
0001A4DA 6B00                       		bmi.s	loc_18B52
0001A4DC 6000 ED22                  		bra.w	BossDefeated
0001A4E0                            ; ===========================================================================
0001A4E0                            
0001A4E0                            loc_18B52:
0001A4E0 5428 0025                  		addq.b	#2,$25(a0)
0001A4E4 4268 0012                  		clr.w	$12(a0)
0001A4E8 08E8 0000 0022             		bset	#0,$22(a0)
0001A4EE 08A8 0007 0022             		bclr	#7,$22(a0)
0001A4F4 4268 0010                  		clr.w	$10(a0)
0001A4F8 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001A4FE 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001A502 6600                       		bne.s	loc_18B7C
0001A504 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001A50A                            
0001A50A                            loc_18B7C:
0001A50A 6000 FE80                  		bra.w	loc_189FE
0001A50E                            ; ===========================================================================
0001A50E                            
0001A50E                            loc_18B80:				; XREF: Obj7A_ShipIndex
0001A50E 5228 003C                  		addq.b	#1,$3C(a0)
0001A512 6700                       		beq.s	loc_18B90
0001A514 6A00                       		bpl.s	loc_18B96
0001A516 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A51C 6000                       		bra.s	loc_18BC2
0001A51E                            ; ===========================================================================
0001A51E                            
0001A51E                            loc_18B90:
0001A51E 4268 0012                  		clr.w	$12(a0)
0001A522 6000                       		bra.s	loc_18BC2
0001A524                            ; ===========================================================================
0001A524                            
0001A524                            loc_18B96:
0001A524 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001A52A 6500                       		bcs.s	loc_18BAE
0001A52C 6700                       		beq.s	loc_18BB4
0001A52E 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001A534 6500                       		bcs.s	loc_18BC2
0001A536 5428 0025                  		addq.b	#2,$25(a0)
0001A53A 6000                       		bra.s	loc_18BC2
0001A53C                            ; ===========================================================================
0001A53C                            
0001A53C                            loc_18BAE:
0001A53C 5168 0012                  		subq.w	#8,$12(a0)
0001A540 6000                       		bra.s	loc_18BC2
0001A542                            ; ===========================================================================
0001A542                            
0001A542                            loc_18BB4:
0001A542 4268 0012                  		clr.w	$12(a0)
0001A546 303C 0084                  		move.w	#$84,d0
0001A54A 4EB9 0000 1470             		jsr	(PlaySound).l	; play SLZ music
0001A550                            
0001A550                            loc_18BC2:
0001A550 6000 FE2A                  		bra.w	loc_189EE
0001A554                            ; ===========================================================================
0001A554                            
0001A554                            loc_18BC6:				; XREF: Obj7A_ShipIndex
0001A554 317C 0400 0010             		move.w	#$400,$10(a0)
0001A55A 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A560 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
0001A566 6400                       		bcc.s	loc_18BE0
0001A568 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A56C 6000                       		bra.s	loc_18BE8
0001A56E                            ; ===========================================================================
0001A56E                            
0001A56E                            loc_18BE0:
0001A56E 4A28 0001                  		tst.b	1(a0)
0001A572 6A00 FCCE                  		bpl.w	Obj7A_Delete
0001A576                            
0001A576                            loc_18BE8:
0001A576 6100 ECCA                  		bsr.w	BossMove
0001A57A 6000 FDDC                  		bra.w	loc_189CA
0001A57E                            ; ===========================================================================
0001A57E                            
0001A57E                            Obj7A_FaceMain:				; XREF: Obj7A_Index
0001A57E 7000                       		moveq	#0,d0
0001A580 7201                       		moveq	#1,d1
0001A582 2268 0034                  		movea.l	$34(a0),a1
0001A586 1029 0025                  		move.b	$25(a1),d0
0001A58A 0C00 0006                  		cmpi.b	#6,d0
0001A58E 6B00                       		bmi.s	loc_18C06
0001A590 720A                       		moveq	#$A,d1
0001A592 6000                       		bra.s	loc_18C1A
0001A594                            ; ===========================================================================
0001A594                            
0001A594                            loc_18C06:
0001A594 4A29 0020                  		tst.b	$20(a1)
0001A598 6600                       		bne.s	loc_18C10
0001A59A 7205                       		moveq	#5,d1
0001A59C 6000                       		bra.s	loc_18C1A
0001A59E                            ; ===========================================================================
0001A59E                            
0001A59E                            loc_18C10:
0001A59E 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A5A4 6500                       		bcs.s	loc_18C1A
0001A5A6 7204                       		moveq	#4,d1
0001A5A8                            
0001A5A8                            loc_18C1A:
0001A5A8 1141 001C                  		move.b	d1,$1C(a0)
0001A5AC 0C00 000A                  		cmpi.b	#$A,d0
0001A5B0 6600                       		bne.s	loc_18C32
0001A5B2 117C 0006 001C             		move.b	#6,$1C(a0)
0001A5B8 4A28 0001                  		tst.b	1(a0)
0001A5BC 6A00 FC84                  		bpl.w	Obj7A_Delete
0001A5C0                            
0001A5C0                            loc_18C32:
0001A5C0 6000                       		bra.s	loc_18C6C
0001A5C2                            ; ===========================================================================
0001A5C2                            
0001A5C2                            Obj7A_FlameMain:			; XREF: Obj7A_Index
0001A5C2 117C 0008 001C             		move.b	#8,$1C(a0)
0001A5C8 2268 0034                  		movea.l	$34(a0),a1
0001A5CC 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A5D2 6600                       		bne.s	loc_18C56
0001A5D4 4A28 0001                  		tst.b	1(a0)
0001A5D8 6A00 FC68                  		bpl.w	Obj7A_Delete
0001A5DC 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A5E2 6000                       		bra.s	loc_18C6C
0001A5E4                            ; ===========================================================================
0001A5E4                            
0001A5E4                            loc_18C56:
0001A5E4 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001A5EA 6E00                       		bgt.s	loc_18C6C
0001A5EC 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001A5F2 6D00                       		blt.s	loc_18C6C
0001A5F4 117C 0007 001C             		move.b	#7,$1C(a0)
0001A5FA                            
0001A5FA                            loc_18C6C:
0001A5FA 43F9 0001 9652             		lea	(Ani_Eggman).l,a1
0001A600 4EB9 0000 B1F0             		jsr	AnimateSprite
0001A606                            
0001A606                            loc_18C78:
0001A606 2268 0034                  		movea.l	$34(a0),a1
0001A60A 3169 0008 0008             		move.w	8(a1),8(a0)
0001A610 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A616 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A61C 7003                       		moveq	#3,d0
0001A61E C028 0022                  		and.b	$22(a0),d0
0001A622 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A628 8128 0001                  		or.b	d0,1(a0)
0001A62C 4EF9 0000 E0DE             		jmp	DisplaySprite
0001A632                            ; ===========================================================================
0001A632                            
0001A632                            Obj7A_TubeMain:				; XREF: Obj7A_Index
0001A632 2268 0034                  		movea.l	$34(a0),a1
0001A636 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A63C 6600                       		bne.s	loc_18CB8
0001A63E 4A28 0001                  		tst.b	1(a0)
0001A642 6A00 FBFE                  		bpl.w	Obj7A_Delete
0001A646                            
0001A646                            loc_18CB8:
0001A646 217C 0001 976A 0004        		move.l	#Map_BossItems,4(a0)
0001A64E 317C 246C 0002             		move.w	#$246C,2(a0)
0001A654 117C 0003 001A             		move.b	#3,$1A(a0)
0001A65A 60AA                       		bra.s	loc_18C78
0001A65C                            ; ===========================================================================
0001A65C                            ; ---------------------------------------------------------------------------
0001A65C                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001A65C                            ; ---------------------------------------------------------------------------
0001A65C                            
0001A65C                            Obj7B:					; XREF: Obj_Index
0001A65C 7000                       		moveq	#0,d0
0001A65E 1028 0024                  		move.b	$24(a0),d0
0001A662 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001A666 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001A66A 3028 0030                  		move.w	$30(a0),d0
0001A66E 0240 FF80                  		andi.w	#$FF80,d0
0001A672 3238 F700                  		move.w	($FFFFF700).w,d1
0001A676 0441 0080                  		subi.w	#$80,d1
0001A67A 0241 FF80                  		andi.w	#$FF80,d1
0001A67E 9041                       		sub.w	d1,d0
0001A680 6B00 FBC0                  		bmi.w	Obj7A_Delete
0001A684 0C40 0280                  		cmpi.w	#$280,d0
0001A688 6200 FBB8                  		bhi.w	Obj7A_Delete
0001A68C 4EF9 0000 E0DE             		jmp	DisplaySprite
0001A692                            ; ===========================================================================
0001A692 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001A694 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001A696 0000                       		dc.w loc_18DC6-Obj7B_Index
0001A698 0000                       		dc.w loc_18EAA-Obj7B_Index
0001A69A 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001A69C 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001A69E                            ; ===========================================================================
0001A69E                            
0001A69E                            Obj7B_Main:				; XREF: Obj7B_Index
0001A69E 217C 0001 24DE 0004        		move.l	#Map_obj5Ea,4(a0)
0001A6A6 317C 0518 0002             		move.w	#$518,2(a0)
0001A6AC 117C 0001 001A             		move.b	#1,$1A(a0)
0001A6B2 0028 0004 0001             		ori.b	#4,1(a0)
0001A6B8 117C 0004 0018             		move.b	#4,$18(a0)
0001A6BE 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A6C4 117C 000C 0019             		move.b	#$C,$19(a0)
0001A6CA 2268 003C                  		movea.l	$3C(a0),a1
0001A6CE 3169 0008 0030             		move.w	8(a1),$30(a0)
0001A6D4 3169 000C 0034             		move.w	$C(a1),$34(a0)
0001A6DA 08E8 0000 0022             		bset	#0,$22(a0)
0001A6E0 3028 0008                  		move.w	8(a0),d0
0001A6E4 B069 0008                  		cmp.w	8(a1),d0
0001A6E8 6E00                       		bgt.s	loc_18D68
0001A6EA 08A8 0000 0022             		bclr	#0,$22(a0)
0001A6F0 117C 0002 003A             		move.b	#2,$3A(a0)
0001A6F6                            
0001A6F6                            loc_18D68:
0001A6F6 5428 0024                  		addq.b	#2,$24(a0)
0001A6FA                            
0001A6FA                            Obj7B_Fall:				; XREF: Obj7B_Index
0001A6FA 4EB9 0000 E08C             		jsr	ObjectFall
0001A700 2268 003C                  		movea.l	$3C(a0),a1
0001A704 45F9 0000 0000             		lea	(word_19018).l,a2
0001A70A 7000                       		moveq	#0,d0
0001A70C 1029 001A                  		move.b	$1A(a1),d0
0001A710 3228 0008                  		move.w	8(a0),d1
0001A714 9268 0030                  		sub.w	$30(a0),d1
0001A718 6400                       		bcc.s	loc_18D8E
0001A71A 5440                       		addq.w	#2,d0
0001A71C                            
0001A71C                            loc_18D8E:
0001A71C D040                       		add.w	d0,d0
0001A71E 3228 0034                  		move.w	$34(a0),d1
0001A722 D272 0000                  		add.w	(a2,d0.w),d1
0001A726 B268 000C                  		cmp.w	$C(a0),d1
0001A72A 6E00                       		bgt.s	locret_18DC4
0001A72C 2268 003C                  		movea.l	$3C(a0),a1
0001A730 7202                       		moveq	#2,d1
0001A732 0828 0000 0022             		btst	#0,$22(a0)
0001A738 6700                       		beq.s	loc_18DAE
0001A73A 7200                       		moveq	#0,d1
0001A73C                            
0001A73C                            loc_18DAE:
0001A73C 317C 00F0 0028             		move.w	#$F0,$28(a0)
0001A742 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
0001A748 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001A74E 6000 0000                  		bra.w	loc_18FA2
0001A752                            ; ===========================================================================
0001A752                            
0001A752                            locret_18DC4:
0001A752 4E75                       		rts	
0001A754                            ; ===========================================================================
0001A754                            
0001A754                            loc_18DC6:				; XREF: Obj7B_Index
0001A754 2268 003C                  		movea.l	$3C(a0),a1
0001A758 7000                       		moveq	#0,d0
0001A75A 1028 003A                  		move.b	$3A(a0),d0
0001A75E 9029 003A                  		sub.b	$3A(a1),d0
0001A762 6700                       		beq.s	loc_18E2A
0001A764 6400                       		bcc.s	loc_18DDA
0001A766 4400                       		neg.b	d0
0001A768                            
0001A768                            loc_18DDA:
0001A768 323C F7E8                  		move.w	#-$818,d1
0001A76C 343C FEEC                  		move.w	#-$114,d2
0001A770 0C00 0001                  		cmpi.b	#1,d0
0001A774 6700                       		beq.s	loc_18E00
0001A776 323C F6A0                  		move.w	#-$960,d1
0001A77A 343C FF0C                  		move.w	#-$F4,d2
0001A77E 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001A784 6D00                       		blt.s	loc_18E00
0001A786 323C F5E0                  		move.w	#-$A20,d1
0001A78A 343C FF80                  		move.w	#-$80,d2
0001A78E                            
0001A78E                            loc_18E00:
0001A78E 3141 0012                  		move.w	d1,$12(a0)
0001A792 3142 0010                  		move.w	d2,$10(a0)
0001A796 3028 0008                  		move.w	8(a0),d0
0001A79A 9068 0030                  		sub.w	$30(a0),d0
0001A79E 6400                       		bcc.s	loc_18E16
0001A7A0 4468 0010                  		neg.w	$10(a0)
0001A7A4                            
0001A7A4                            loc_18E16:
0001A7A4 117C 0001 001A             		move.b	#1,$1A(a0)
0001A7AA 317C 0020 0028             		move.w	#$20,$28(a0)
0001A7B0 5428 0024                  		addq.b	#2,$24(a0)
0001A7B4 6000 0000                  		bra.w	loc_18EAA
0001A7B8                            ; ===========================================================================
0001A7B8                            
0001A7B8                            loc_18E2A:				; XREF: loc_18DC6
0001A7B8 45F9 0000 0000             		lea	(word_19018).l,a2
0001A7BE 7000                       		moveq	#0,d0
0001A7C0 1029 001A                  		move.b	$1A(a1),d0
0001A7C4 343C 0028                  		move.w	#$28,d2
0001A7C8 3228 0008                  		move.w	8(a0),d1
0001A7CC 9268 0030                  		sub.w	$30(a0),d1
0001A7D0 6400                       		bcc.s	loc_18E48
0001A7D2 4442                       		neg.w	d2
0001A7D4 5440                       		addq.w	#2,d0
0001A7D6                            
0001A7D6                            loc_18E48:
0001A7D6 D040                       		add.w	d0,d0
0001A7D8 3228 0034                  		move.w	$34(a0),d1
0001A7DC D272 0000                  		add.w	(a2,d0.w),d1
0001A7E0 3141 000C                  		move.w	d1,$C(a0)
0001A7E4 D468 0030                  		add.w	$30(a0),d2
0001A7E8 3142 0008                  		move.w	d2,8(a0)
0001A7EC 4268 000E                  		clr.w	$E(a0)
0001A7F0 4268 000A                  		clr.w	$A(a0)
0001A7F4 5368 0028                  		subq.w	#1,$28(a0)
0001A7F8 6600                       		bne.s	loc_18E7A
0001A7FA 317C 0020 0028             		move.w	#$20,$28(a0)
0001A800 117C 0008 0024             		move.b	#8,$24(a0)
0001A806 4E75                       		rts	
0001A808                            ; ===========================================================================
0001A808                            
0001A808                            loc_18E7A:
0001A808 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
0001A80E 6600                       		bne.s	loc_18E88
0001A810 117C 0005 001F             		move.b	#5,$1F(a0)
0001A816                            
0001A816                            loc_18E88:
0001A816 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
0001A81C 6600                       		bne.s	loc_18E96
0001A81E 117C 0002 001F             		move.b	#2,$1F(a0)
0001A824                            
0001A824                            loc_18E96:
0001A824 5328 001E                  		subq.b	#1,$1E(a0)
0001A828 6E00                       		bgt.s	locret_18EA8
0001A82A 0868 0000 001A             		bchg	#0,$1A(a0)
0001A830 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001A836                            
0001A836                            locret_18EA8:
0001A836 4E75                       		rts	
0001A838                            ; ===========================================================================
0001A838                            
0001A838                            loc_18EAA:				; XREF: Obj7B_Index
0001A838 43F8 D040                  		lea	($FFFFD040).w,a1
0001A83C 707A                       		moveq	#$7A,d0
0001A83E 7240                       		moveq	#$40,d1
0001A840 743E                       		moveq	#$3E,d2
0001A842                            
0001A842                            loc_18EB4:
0001A842 B011                       		cmp.b	(a1),d0
0001A844 6700                       		beq.s	loc_18EC0
0001A846 D2C1                       		adda.w	d1,a1
0001A848 51CA FFF8                  		dbf	d2,loc_18EB4
0001A84C                            
0001A84C 6000                       		bra.s	loc_18F38
0001A84E                            ; ===========================================================================
0001A84E                            
0001A84E                            loc_18EC0:
0001A84E 3029 0008                  		move.w	8(a1),d0
0001A852 3229 000C                  		move.w	$C(a1),d1
0001A856 3428 0008                  		move.w	8(a0),d2
0001A85A 3628 000C                  		move.w	$C(a0),d3
0001A85E 45FA 0000                  		lea	byte_19022(pc),a2
0001A862 47FA 0000                  		lea	byte_19026(pc),a3
0001A866 181A                       		move.b	(a2)+,d4
0001A868 4884                       		ext.w	d4
0001A86A D044                       		add.w	d4,d0
0001A86C 181B                       		move.b	(a3)+,d4
0001A86E 4884                       		ext.w	d4
0001A870 D444                       		add.w	d4,d2
0001A872 B440                       		cmp.w	d0,d2
0001A874 6500                       		bcs.s	loc_18F38
0001A876 181A                       		move.b	(a2)+,d4
0001A878 4884                       		ext.w	d4
0001A87A D044                       		add.w	d4,d0
0001A87C 181B                       		move.b	(a3)+,d4
0001A87E 4884                       		ext.w	d4
0001A880 D444                       		add.w	d4,d2
0001A882 B042                       		cmp.w	d2,d0
0001A884 6500                       		bcs.s	loc_18F38
0001A886 181A                       		move.b	(a2)+,d4
0001A888 4884                       		ext.w	d4
0001A88A D244                       		add.w	d4,d1
0001A88C 181B                       		move.b	(a3)+,d4
0001A88E 4884                       		ext.w	d4
0001A890 D644                       		add.w	d4,d3
0001A892 B641                       		cmp.w	d1,d3
0001A894 6500                       		bcs.s	loc_18F38
0001A896 181A                       		move.b	(a2)+,d4
0001A898 4884                       		ext.w	d4
0001A89A D244                       		add.w	d4,d1
0001A89C 181B                       		move.b	(a3)+,d4
0001A89E 4884                       		ext.w	d4
0001A8A0 D644                       		add.w	d4,d3
0001A8A2 B243                       		cmp.w	d3,d1
0001A8A4 6500                       		bcs.s	loc_18F38
0001A8A6 5428 0024                  		addq.b	#2,$24(a0)
0001A8AA 4268 0028                  		clr.w	$28(a0)
0001A8AE 4229 0020                  		clr.b	$20(a1)
0001A8B2 5329 0021                  		subq.b	#1,$21(a1)
0001A8B6 6600                       		bne.s	loc_18F38
0001A8B8 08E9 0007 0022             		bset	#7,$22(a1)
0001A8BE 4268 0010                  		clr.w	$10(a0)
0001A8C2 4268 0012                  		clr.w	$12(a0)
0001A8C6                            
0001A8C6                            loc_18F38:
0001A8C6 4A68 0012                  		tst.w	$12(a0)
0001A8CA 6A00                       		bpl.s	loc_18F5C
0001A8CC 4EB9 0000 E08C             		jsr	ObjectFall
0001A8D2 3028 0034                  		move.w	$34(a0),d0
0001A8D6 0440 002F                  		subi.w	#$2F,d0
0001A8DA B068 000C                  		cmp.w	$C(a0),d0
0001A8DE 6E00                       		bgt.s	loc_18F58
0001A8E0 4EB9 0000 E08C             		jsr	ObjectFall
0001A8E6                            
0001A8E6                            loc_18F58:
0001A8E6 6000 FF20                  		bra.w	loc_18E7A
0001A8EA                            ; ===========================================================================
0001A8EA                            
0001A8EA                            loc_18F5C:
0001A8EA 4EB9 0000 E08C             		jsr	ObjectFall
0001A8F0 2268 003C                  		movea.l	$3C(a0),a1
0001A8F4 45F9 0000 0000             		lea	(word_19018).l,a2
0001A8FA 7000                       		moveq	#0,d0
0001A8FC 1029 001A                  		move.b	$1A(a1),d0
0001A900 3228 0008                  		move.w	8(a0),d1
0001A904 9268 0030                  		sub.w	$30(a0),d1
0001A908 6400                       		bcc.s	loc_18F7E
0001A90A 5440                       		addq.w	#2,d0
0001A90C                            
0001A90C                            loc_18F7E:
0001A90C D040                       		add.w	d0,d0
0001A90E 3228 0034                  		move.w	$34(a0),d1
0001A912 D272 0000                  		add.w	(a2,d0.w),d1
0001A916 B268 000C                  		cmp.w	$C(a0),d1
0001A91A 6ECA                       		bgt.s	loc_18F58
0001A91C 2268 003C                  		movea.l	$3C(a0),a1
0001A920 7202                       		moveq	#2,d1
0001A922 4A68 0010                  		tst.w	$10(a0)
0001A926 6B00                       		bmi.s	loc_18F9C
0001A928 7200                       		moveq	#0,d1
0001A92A                            
0001A92A                            loc_18F9C:
0001A92A 317C 0000 0028             		move.w	#0,$28(a0)
0001A930                            
0001A930                            loc_18FA2:
0001A930 1341 003A                  		move.b	d1,$3A(a1)
0001A934 1141 003A                  		move.b	d1,$3A(a0)
0001A938 B229 001A                  		cmp.b	$1A(a1),d1
0001A93C 6700                       		beq.s	loc_19008
0001A93E 08A9 0003 0022             		bclr	#3,$22(a1)
0001A944 6700                       		beq.s	loc_19008
0001A946 4229 0025                  		clr.b	$25(a1)
0001A94A 137C 0002 0024             		move.b	#2,$24(a1)
0001A950 45F8 D000                  		lea	($FFFFD000).w,a2
0001A954 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001A95A 446A 0012                  		neg.w	$12(a2)
0001A95E 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0001A964 6600                       		bne.s	loc_18FDC
0001A966 E0EA 0012                  		asr	$12(a2)
0001A96A                            
0001A96A                            loc_18FDC:
0001A96A 08EA 0001 0022             		bset	#1,$22(a2)
0001A970 08AA 0003 0022             		bclr	#3,$22(a2)
0001A976 422A 003C                  		clr.b	$3C(a2)
0001A97A 2F08                       		move.l	a0,-(sp)
0001A97C 41D2                       		lea	(a2),a0
0001A97E 4EBA 9610                  		jsr	Obj01_ChkRoll
0001A982 205F                       		movea.l	(sp)+,a0
0001A984 157C 0002 0024             		move.b	#2,$24(a2)
0001A98A 303C 00CC                  		move.w	#$CC,d0
0001A98E 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play "spring" sound
0001A994                            
0001A994                            loc_19008:
0001A994 4268 0010                  		clr.w	$10(a0)
0001A998 4268 0012                  		clr.w	$12(a0)
0001A99C 5428 0024                  		addq.b	#2,$24(a0)
0001A9A0 6000 FE66                  		bra.w	loc_18E7A
0001A9A4                            ; ===========================================================================
0001A9A4 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001A9AE                            		even
0001A9AE E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001A9B2                            		even
0001A9B2 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001A9B6                            		even
0001A9B6                            ; ===========================================================================
0001A9B6                            
0001A9B6                            Obj7B_Explode:				; XREF: Obj7B_Index
0001A9B6 10BC 003F                  		move.b	#$3F,(a0)
0001A9BA 4228 0024                  		clr.b	$24(a0)
0001A9BE 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
0001A9C4 6700                       		beq.s	Obj7B_MakeFrag
0001A9C6 4E75                       		rts	
0001A9C8                            ; ===========================================================================
0001A9C8                            
0001A9C8                            Obj7B_MakeFrag:
0001A9C8 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001A9CE 7203                       		moveq	#3,d1
0001A9D0 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001A9D4                            
0001A9D4                            Obj7B_Loop:
0001A9D4 4EB9 0000 E574             		jsr	SingleObjLoad
0001A9DA 6600                       		bne.s	loc_1909A
0001A9DC 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
0001A9E0 137C 000A 0024             		move.b	#$A,$24(a1)
0001A9E6 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
0001A9EE 137C 0003 0018             		move.b	#3,$18(a1)
0001A9F4 337C 0518 0002             		move.w	#$518,2(a1)
0001A9FA 3368 0008 0008             		move.w	8(a0),8(a1)
0001AA00 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AA06 335A 0010                  		move.w	(a2)+,$10(a1)
0001AA0A 335A 0012                  		move.w	(a2)+,$12(a1)
0001AA0E 137C 0098 0020             		move.b	#$98,$20(a1)
0001AA14 0029 0004 0001             		ori.b	#4,1(a1)
0001AA1A 08E9 0007 0001             		bset	#7,1(a1)
0001AA20 137C 000C 0019             		move.b	#$C,$19(a1)
0001AA26                            
0001AA26                            loc_1909A:
0001AA26 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001AA2A                            
0001AA2A 4E75                       		rts	
0001AA2C                            ; ===========================================================================
0001AA2C FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
0001AA30 FF60 FDC0                  		dc.w $FF60, $FDC0
0001AA34 0100 FCC0                  		dc.w $100, $FCC0
0001AA38 00A0 FDC0                  		dc.w $A0, $FDC0
0001AA3C                            ; ===========================================================================
0001AA3C                            
0001AA3C                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
0001AA3C 4EB9 0000 E0B8             		jsr	SpeedToPos
0001AA42 3168 0008 0030             		move.w	8(a0),$30(a0)
0001AA48 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001AA4E 0668 0018 0012             		addi.w	#$18,$12(a0)
0001AA54 7004                       		moveq	#4,d0
0001AA56 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001AA5A E448                       		lsr.w	#2,d0
0001AA5C 1140 001A                  		move.b	d0,$1A(a0)
0001AA60 4A28 0001                  		tst.b	1(a0)
0001AA64 6A00 F7DC                  		bpl.w	Obj7A_Delete
0001AA68 4E75                       		rts	
0001AA6A                            ; ===========================================================================
0001AA6A                            ; ---------------------------------------------------------------------------
0001AA6A                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001AA6A                            ; ---------------------------------------------------------------------------
0001AA6A                            Map_obj7B:
0001AA6A                            	include "_maps\obj7B.asm"
0001AA6A                            ; ---------------------------------------------------------------------------
0001AA6A                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001AA6A                            ; ---------------------------------------------------------------------------
0001AA6A 0000                       		dc.w byte_190E2-Map_obj7B
0001AA6C 0000                       		dc.w byte_190E8-Map_obj7B
0001AA6E 01                         byte_190E2:	dc.b 1
0001AA6F FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001AA74 01                         byte_190E8:	dc.b 1
0001AA75 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001AA7A                            		even
0001AA7A                            		even
0001AA7A                            
0001AA7A                            ; ===========================================================================
0001AA7A                            ; ---------------------------------------------------------------------------
0001AA7A                            ; Object 75 - Eggman (SYZ)
0001AA7A                            ; ---------------------------------------------------------------------------
0001AA7A                            
0001AA7A                            Obj75:					; XREF: Obj_Index
0001AA7A 7000                       		moveq	#0,d0
0001AA7C 1028 0024                  		move.b	$24(a0),d0
0001AA80 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001AA84 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001AA88                            ; ===========================================================================
0001AA88 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001AA8A 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001AA8C 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001AA8E 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001AA90 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001AA92                            
0001AA92 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
0001AA95 0401 05                    		dc.b 4,	1, 5
0001AA98 0607 05                    		dc.b 6,	7, 5
0001AA9B 0800 05                    		dc.b 8,	0, 5
0001AA9E                            ; ===========================================================================
0001AA9E                            
0001AA9E                            Obj75_Main:				; XREF: Obj75_Index
0001AA9E 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
0001AAA4 317C 04DA 000C             		move.w	#$4DA,$C(a0)
0001AAAA 3168 0008 0030             		move.w	8(a0),$30(a0)
0001AAB0 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001AAB6 117C 000F 0020             		move.b	#$F,$20(a0)
0001AABC 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001AAC2 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
0001AAC6 2248                       		movea.l	a0,a1
0001AAC8 7203                       		moveq	#3,d1
0001AACA 6000                       		bra.s	Obj75_LoadBoss
0001AACC                            ; ===========================================================================
0001AACC                            
0001AACC                            Obj75_Loop:
0001AACC 4EB9 0000 E58A             		jsr	SingleObjLoad2
0001AAD2 6600                       		bne.s	Obj75_ShipMain
0001AAD4 12BC 0075                  		move.b	#$75,(a1)
0001AAD8 3368 0008 0008             		move.w	8(a0),8(a1)
0001AADE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AAE4                            
0001AAE4                            Obj75_LoadBoss:				; XREF: Obj75_Main
0001AAE4 08A8 0000 0022             		bclr	#0,$22(a0)
0001AAEA 4229 0025                  		clr.b	$25(a1)
0001AAEE 135A 0024                  		move.b	(a2)+,$24(a1)
0001AAF2 135A 001C                  		move.b	(a2)+,$1C(a1)
0001AAF6 135A 0018                  		move.b	(a2)+,$18(a1)
0001AAFA 237C 0001 96A2 0004        		move.l	#Map_Eggman,4(a1)
0001AB02 337C 0400 0002             		move.w	#$400,2(a1)
0001AB08 137C 0004 0001             		move.b	#4,1(a1)
0001AB0E 137C 0020 0019             		move.b	#$20,$19(a1)
0001AB14 2348 0034                  		move.l	a0,$34(a1)
0001AB18 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001AB1C                            
0001AB1C                            Obj75_ShipMain:				; XREF: Obj75_Index
0001AB1C 7000                       		moveq	#0,d0
0001AB1E 1028 0025                  		move.b	$25(a0),d0
0001AB22 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001AB26 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001AB2A 43F9 0001 9652             		lea	(Ani_Eggman).l,a1
0001AB30 4EB9 0000 B1F0             		jsr	AnimateSprite
0001AB36 7003                       		moveq	#3,d0
0001AB38 C028 0022                  		and.b	$22(a0),d0
0001AB3C 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001AB42 8128 0001                  		or.b	d0,1(a0)
0001AB46 4EF9 0000 E0DE             		jmp	DisplaySprite
0001AB4C                            ; ===========================================================================
0001AB4C 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001AB50 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001AB54 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001AB58                            ; ===========================================================================
0001AB58                            
0001AB58                            loc_191CC:				; XREF: Obj75_ShipIndex
0001AB58 317C FF00 0010             		move.w	#-$100,$10(a0)
0001AB5E 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001AB64 6400                       		bcc.s	loc_191DE
0001AB66 5428 0025                  		addq.b	#2,$25(a0)
0001AB6A                            
0001AB6A                            loc_191DE:
0001AB6A 1028 003F                  		move.b	$3F(a0),d0
0001AB6E 5428 003F                  		addq.b	#2,$3F(a0)
0001AB72 4EB9 0000 33D4             		jsr	(CalcSine).l
0001AB78 E440                       		asr.w	#2,d0
0001AB7A 3140 0012                  		move.w	d0,$12(a0)
0001AB7E                            
0001AB7E                            loc_191F2:
0001AB7E 6100 E6C2                  		bsr.w	BossMove
0001AB82 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001AB88 3168 0030 0008             		move.w	$30(a0),8(a0)
0001AB8E                            
0001AB8E                            loc_19202:
0001AB8E 3028 0008                  		move.w	8(a0),d0
0001AB92 0440 2C00                  		subi.w	#$2C00,d0
0001AB96 EA48                       		lsr.w	#5,d0
0001AB98 1140 0034                  		move.b	d0,$34(a0)
0001AB9C 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001ABA2 6400                       		bcc.s	locret_19256
0001ABA4 4A28 0022                  		tst.b	$22(a0)
0001ABA8 6B00                       		bmi.s	loc_19258
0001ABAA 4A28 0020                  		tst.b	$20(a0)
0001ABAE 6600                       		bne.s	locret_19256
0001ABB0 4A28 003E                  		tst.b	$3E(a0)
0001ABB4 6600                       		bne.s	loc_1923A
0001ABB6 117C 0020 003E             		move.b	#$20,$3E(a0)
0001ABBC 303C 00AC                  		move.w	#$AC,d0
0001ABC0 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001ABC6                            
0001ABC6                            loc_1923A:
0001ABC6 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001ABCA 7000                       		moveq	#0,d0
0001ABCC 4A51                       		tst.w	(a1)
0001ABCE 6600                       		bne.s	loc_19248
0001ABD0 303C 0EEE                  		move.w	#$EEE,d0
0001ABD4                            
0001ABD4                            loc_19248:
0001ABD4 3280                       		move.w	d0,(a1)
0001ABD6 5328 003E                  		subq.b	#1,$3E(a0)
0001ABDA 6600                       		bne.s	locret_19256
0001ABDC 117C 000F 0020             		move.b	#$F,$20(a0)
0001ABE2                            
0001ABE2                            locret_19256:
0001ABE2 4E75                       		rts	
0001ABE4                            ; ===========================================================================
0001ABE4                            
0001ABE4                            loc_19258:				; XREF: loc_19202
0001ABE4 7064                       		moveq	#100,d0
0001ABE6 6100 0000                  		bsr.w	AddPoints
0001ABEA 117C 0006 0025             		move.b	#6,$25(a0)
0001ABF0 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001ABF6 4268 0010                  		clr.w	$10(a0)
0001ABFA 4E75                       		rts	
0001ABFC                            ; ===========================================================================
0001ABFC                            
0001ABFC                            loc_19270:				; XREF: Obj75_ShipIndex
0001ABFC 3028 0030                  		move.w	$30(a0),d0
0001AC00 317C 0140 0010             		move.w	#$140,$10(a0)
0001AC06 0828 0000 0022             		btst	#0,$22(a0)
0001AC0C 6600                       		bne.s	loc_1928E
0001AC0E 4468 0010                  		neg.w	$10(a0)
0001AC12 0C40 2C08                  		cmpi.w	#$2C08,d0
0001AC16 6E00                       		bgt.s	loc_1929E
0001AC18 6000                       		bra.s	loc_19294
0001AC1A                            ; ===========================================================================
0001AC1A                            
0001AC1A                            loc_1928E:
0001AC1A 0C40 2D38                  		cmpi.w	#$2D38,d0
0001AC1E 6D00                       		blt.s	loc_1929E
0001AC20                            
0001AC20                            loc_19294:
0001AC20 0868 0000 0022             		bchg	#0,$22(a0)
0001AC26 4228 003D                  		clr.b	$3D(a0)
0001AC2A                            
0001AC2A                            loc_1929E:
0001AC2A 0440 2C10                  		subi.w	#$2C10,d0
0001AC2E 0240 001F                  		andi.w	#$1F,d0
0001AC32 0440 001F                  		subi.w	#$1F,d0
0001AC36 6A00                       		bpl.s	loc_192AE
0001AC38 4440                       		neg.w	d0
0001AC3A                            
0001AC3A                            loc_192AE:
0001AC3A 5340                       		subq.w	#1,d0
0001AC3C 6E00                       		bgt.s	loc_192E8
0001AC3E 4A28 003D                  		tst.b	$3D(a0)
0001AC42 6600                       		bne.s	loc_192E8
0001AC44 3238 D008                  		move.w	($FFFFD008).w,d1
0001AC48 0441 2C00                  		subi.w	#$2C00,d1
0001AC4C EA41                       		asr.w	#5,d1
0001AC4E B228 0034                  		cmp.b	$34(a0),d1
0001AC52 6600                       		bne.s	loc_192E8
0001AC54 7000                       		moveq	#0,d0
0001AC56 1028 0034                  		move.b	$34(a0),d0
0001AC5A EB40                       		asl.w	#5,d0
0001AC5C 0640 2C10                  		addi.w	#$2C10,d0
0001AC60 3140 0030                  		move.w	d0,$30(a0)
0001AC64 6100 0000                  		bsr.w	Obj75_FindBlocks
0001AC68 5428 0025                  		addq.b	#2,$25(a0)
0001AC6C 4268 0028                  		clr.w	$28(a0)
0001AC70 4268 0010                  		clr.w	$10(a0)
0001AC74                            
0001AC74                            loc_192E8:
0001AC74 6000 FEF4                  		bra.w	loc_191DE
0001AC78                            ; ===========================================================================
0001AC78                            
0001AC78                            loc_192EC:				; XREF: Obj75_ShipIndex
0001AC78 7000                       		moveq	#0,d0
0001AC7A 1028 0028                  		move.b	$28(a0),d0
0001AC7E 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001AC82 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001AC86                            ; ===========================================================================
0001AC86 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001AC88 0000                       		dc.w loc_19348-off_192FA
0001AC8A 0000                       		dc.w loc_1938E-off_192FA
0001AC8C 0000                       		dc.w loc_193D0-off_192FA
0001AC8E                            ; ===========================================================================
0001AC8E                            
0001AC8E                            loc_19302:				; XREF: off_192FA
0001AC8E 317C 0180 0012             		move.w	#$180,$12(a0)
0001AC94 3028 0038                  		move.w	$38(a0),d0
0001AC98 0C40 0556                  		cmpi.w	#$556,d0
0001AC9C 6500                       		bcs.s	loc_19344
0001AC9E 317C 0556 0038             		move.w	#$556,$38(a0)
0001ACA4 4268 003C                  		clr.w	$3C(a0)
0001ACA8 70FF                       		moveq	#-1,d0
0001ACAA 3028 0036                  		move.w	$36(a0),d0
0001ACAE 6700                       		beq.s	loc_1933C
0001ACB0 2240                       		movea.l	d0,a1
0001ACB2 137C 00FF 0029             		move.b	#-1,$29(a1)
0001ACB8 117C 00FF 0029             		move.b	#-1,$29(a0)
0001ACBE 2348 0034                  		move.l	a0,$34(a1)
0001ACC2 317C 0032 003C             		move.w	#$32,$3C(a0)
0001ACC8                            
0001ACC8                            loc_1933C:
0001ACC8 4268 0012                  		clr.w	$12(a0)
0001ACCC 5428 0028                  		addq.b	#2,$28(a0)
0001ACD0                            
0001ACD0                            loc_19344:
0001ACD0 6000 FEAC                  		bra.w	loc_191F2
0001ACD4                            ; ===========================================================================
0001ACD4                            
0001ACD4                            loc_19348:				; XREF: off_192FA
0001ACD4 5368 003C                  		subq.w	#1,$3C(a0)
0001ACD8 6A00                       		bpl.s	loc_19366
0001ACDA 5428 0028                  		addq.b	#2,$28(a0)
0001ACDE 317C F800 0012             		move.w	#-$800,$12(a0)
0001ACE4 4A68 0036                  		tst.w	$36(a0)
0001ACE8 6600                       		bne.s	loc_19362
0001ACEA E0E8 0012                  		asr	$12(a0)
0001ACEE                            
0001ACEE                            loc_19362:
0001ACEE 7000                       		moveq	#0,d0
0001ACF0 6000                       		bra.s	loc_1937C
0001ACF2                            ; ===========================================================================
0001ACF2                            
0001ACF2                            loc_19366:
0001ACF2 7000                       		moveq	#0,d0
0001ACF4 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001ACFA 6E00                       		bgt.s	loc_1937C
0001ACFC 7002                       		moveq	#2,d0
0001ACFE 0828 0001 003D             		btst	#1,$3D(a0)
0001AD04 6700                       		beq.s	loc_1937C
0001AD06 4440                       		neg.w	d0
0001AD08                            
0001AD08                            loc_1937C:
0001AD08 D068 0038                  		add.w	$38(a0),d0
0001AD0C 3140 000C                  		move.w	d0,$C(a0)
0001AD10 3168 0030 0008             		move.w	$30(a0),8(a0)
0001AD16 6000 FE76                  		bra.w	loc_19202
0001AD1A                            ; ===========================================================================
0001AD1A                            
0001AD1A                            loc_1938E:				; XREF: off_192FA
0001AD1A 303C 04DA                  		move.w	#$4DA,d0
0001AD1E 4A68 0036                  		tst.w	$36(a0)
0001AD22 6700                       		beq.s	loc_1939C
0001AD24 0440 0018                  		subi.w	#$18,d0
0001AD28                            
0001AD28                            loc_1939C:
0001AD28 B068 0038                  		cmp.w	$38(a0),d0
0001AD2C 6D00                       		blt.s	loc_193BE
0001AD2E 317C 0008 003C             		move.w	#8,$3C(a0)
0001AD34 4A68 0036                  		tst.w	$36(a0)
0001AD38 6700                       		beq.s	loc_193B4
0001AD3A 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001AD40                            
0001AD40                            loc_193B4:
0001AD40 5428 0028                  		addq.b	#2,$28(a0)
0001AD44 4268 0012                  		clr.w	$12(a0)
0001AD48 6000                       		bra.s	loc_193CC
0001AD4A                            ; ===========================================================================
0001AD4A                            
0001AD4A                            loc_193BE:
0001AD4A 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
0001AD50 6C00                       		bge.s	loc_193CC
0001AD52 0668 000C 0012             		addi.w	#$C,$12(a0)
0001AD58                            
0001AD58                            loc_193CC:
0001AD58 6000 FE24                  		bra.w	loc_191F2
0001AD5C                            ; ===========================================================================
0001AD5C                            
0001AD5C                            loc_193D0:				; XREF: off_192FA
0001AD5C 5368 003C                  		subq.w	#1,$3C(a0)
0001AD60 6E00                       		bgt.s	loc_19406
0001AD62 6B00                       		bmi.s	loc_193EE
0001AD64 70FF                       		moveq	#-1,d0
0001AD66 3028 0036                  		move.w	$36(a0),d0
0001AD6A 6700                       		beq.s	loc_193E8
0001AD6C 2240                       		movea.l	d0,a1
0001AD6E 137C 000A 0029             		move.b	#$A,$29(a1)
0001AD74                            
0001AD74                            loc_193E8:
0001AD74 4268 0036                  		clr.w	$36(a0)
0001AD78 6000                       		bra.s	loc_19406
0001AD7A                            ; ===========================================================================
0001AD7A                            
0001AD7A                            loc_193EE:
0001AD7A 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001AD80 6600                       		bne.s	loc_19406
0001AD82 4228 0029                  		clr.b	$29(a0)
0001AD86 5528 0025                  		subq.b	#2,$25(a0)
0001AD8A 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001AD90 6000                       		bra.s	loc_19446
0001AD92                            ; ===========================================================================
0001AD92                            
0001AD92                            loc_19406:
0001AD92 7001                       		moveq	#1,d0
0001AD94 4A68 0036                  		tst.w	$36(a0)
0001AD98 6700                       		beq.s	loc_19410
0001AD9A 7002                       		moveq	#2,d0
0001AD9C                            
0001AD9C                            loc_19410:
0001AD9C 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001ADA2 6700                       		beq.s	loc_19424
0001ADA4 6D00                       		blt.s	loc_1941C
0001ADA6 4440                       		neg.w	d0
0001ADA8                            
0001ADA8                            loc_1941C:
0001ADA8 4A68 0036                  		tst.w	$36(a0)
0001ADAC D168 0038                  		add.w	d0,$38(a0)
0001ADB0                            
0001ADB0                            loc_19424:
0001ADB0 7000                       		moveq	#0,d0
0001ADB2 4A68 0036                  		tst.w	$36(a0)
0001ADB6 6700                       		beq.s	loc_19438
0001ADB8 7002                       		moveq	#2,d0
0001ADBA 0828 0000 003D             		btst	#0,$3D(a0)
0001ADC0 6700                       		beq.s	loc_19438
0001ADC2 4440                       		neg.w	d0
0001ADC4                            
0001ADC4                            loc_19438:
0001ADC4 D068 0038                  		add.w	$38(a0),d0
0001ADC8 3140 000C                  		move.w	d0,$C(a0)
0001ADCC 3168 0030 0008             		move.w	$30(a0),8(a0)
0001ADD2                            
0001ADD2                            loc_19446:
0001ADD2 6000 FDBA                  		bra.w	loc_19202
0001ADD6                            
0001ADD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ADD6                            
0001ADD6                            
0001ADD6                            Obj75_FindBlocks:			; XREF: loc_192AE
0001ADD6 4268 0036                  		clr.w	$36(a0)
0001ADDA 43F8 D040                  		lea	($FFFFD040).w,a1
0001ADDE 703E                       		moveq	#$3E,d0
0001ADE0 7276                       		moveq	#$76,d1
0001ADE2 1428 0034                  		move.b	$34(a0),d2
0001ADE6                            
0001ADE6                            Obj75_FindLoop:
0001ADE6 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001ADE8 6600                       		bne.s	loc_1946A	; if not, branch
0001ADEA B429 0028                  		cmp.b	$28(a1),d2
0001ADEE 6600                       		bne.s	loc_1946A
0001ADF0 3149 0036                  		move.w	a1,$36(a0)
0001ADF4 6000                       		bra.s	locret_19472
0001ADF6                            ; ===========================================================================
0001ADF6                            
0001ADF6                            loc_1946A:
0001ADF6 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001ADFA 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001ADFE                            
0001ADFE                            locret_19472:
0001ADFE 4E75                       		rts	
0001AE00                            ; End of function Obj75_FindBlocks
0001AE00                            
0001AE00                            ; ===========================================================================
0001AE00                            
0001AE00                            loc_19474:				; XREF: Obj75_ShipIndex
0001AE00 5368 003C                  		subq.w	#1,$3C(a0)
0001AE04 6B00                       		bmi.s	loc_1947E
0001AE06 6000 E3F8                  		bra.w	BossDefeated
0001AE0A                            ; ===========================================================================
0001AE0A                            
0001AE0A                            loc_1947E:
0001AE0A 5428 0025                  		addq.b	#2,$25(a0)
0001AE0E 4268 0012                  		clr.w	$12(a0)
0001AE12 08E8 0000 0022             		bset	#0,$22(a0)
0001AE18 08A8 0007 0022             		bclr	#7,$22(a0)
0001AE1E 4268 0010                  		clr.w	$10(a0)
0001AE22 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001AE28 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001AE2C 6600                       		bne.s	loc_194A8
0001AE2E 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001AE34                            
0001AE34                            loc_194A8:
0001AE34 6000 FD58                  		bra.w	loc_19202
0001AE38                            ; ===========================================================================
0001AE38                            
0001AE38                            loc_194AC:				; XREF: Obj75_ShipIndex
0001AE38 5268 003C                  		addq.w	#1,$3C(a0)
0001AE3C 6700                       		beq.s	loc_194BC
0001AE3E 6A00                       		bpl.s	loc_194C2
0001AE40 0668 0018 0012             		addi.w	#$18,$12(a0)
0001AE46 6000                       		bra.s	loc_194EE
0001AE48                            ; ===========================================================================
0001AE48                            
0001AE48                            loc_194BC:
0001AE48 4268 0012                  		clr.w	$12(a0)
0001AE4C 6000                       		bra.s	loc_194EE
0001AE4E                            ; ===========================================================================
0001AE4E                            
0001AE4E                            loc_194C2:
0001AE4E 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001AE54 6500                       		bcs.s	loc_194DA
0001AE56 6700                       		beq.s	loc_194E0
0001AE58 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001AE5E 6500                       		bcs.s	loc_194EE
0001AE60 5428 0025                  		addq.b	#2,$25(a0)
0001AE64 6000                       		bra.s	loc_194EE
0001AE66                            ; ===========================================================================
0001AE66                            
0001AE66                            loc_194DA:
0001AE66 5168 0012                  		subq.w	#8,$12(a0)
0001AE6A 6000                       		bra.s	loc_194EE
0001AE6C                            ; ===========================================================================
0001AE6C                            
0001AE6C                            loc_194E0:
0001AE6C 4268 0012                  		clr.w	$12(a0)
0001AE70 303C 0085                  		move.w	#$85,d0
0001AE74 4EB9 0000 1470             		jsr	(PlaySound).l	; play SYZ music
0001AE7A                            
0001AE7A                            loc_194EE:
0001AE7A 6000 FD02                  		bra.w	loc_191F2
0001AE7E                            ; ===========================================================================
0001AE7E                            
0001AE7E                            loc_194F2:				; XREF: Obj75_ShipIndex
0001AE7E 317C 0400 0010             		move.w	#$400,$10(a0)
0001AE84 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001AE8A 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
0001AE90 6400                       		bcc.s	loc_1950C
0001AE92 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001AE96 6000                       		bra.s	loc_19512
0001AE98                            ; ===========================================================================
0001AE98                            
0001AE98                            loc_1950C:
0001AE98 4A28 0001                  		tst.b	1(a0)
0001AE9C 6A00                       		bpl.s	Obj75_ShipDelete
0001AE9E                            
0001AE9E                            loc_19512:
0001AE9E 6100 E3A2                  		bsr.w	BossMove
0001AEA2 6000 FCC6                  		bra.w	loc_191DE
0001AEA6                            ; ===========================================================================
0001AEA6                            
0001AEA6                            Obj75_ShipDelete:
0001AEA6 4EF9 0000 E11A             		jmp	DeleteObject
0001AEAC                            ; ===========================================================================
0001AEAC                            
0001AEAC                            Obj75_FaceMain:				; XREF: Obj75_Index
0001AEAC 7201                       		moveq	#1,d1
0001AEAE 2268 0034                  		movea.l	$34(a0),a1
0001AEB2 7000                       		moveq	#0,d0
0001AEB4 1029 0025                  		move.b	$25(a1),d0
0001AEB8 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001AEBC 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001AEC0 1141 001C                  		move.b	d1,$1C(a0)
0001AEC4 1010                       		move.b	(a0),d0
0001AEC6 B011                       		cmp.b	(a1),d0
0001AEC8 6600                       		bne.s	Obj75_FaceDelete
0001AECA 6000                       		bra.s	loc_195BE
0001AECC                            ; ===========================================================================
0001AECC                            
0001AECC                            Obj75_FaceDelete:
0001AECC 4EF9 0000 E11A             		jmp	DeleteObject
0001AED2                            ; ===========================================================================
0001AED2 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001AED6 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001AEDA 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001AEDE                            ; ===========================================================================
0001AEDE                            
0001AEDE                            loc_19552:				; XREF: off_19546
0001AEDE 720A                       		moveq	#$A,d1
0001AEE0 4E75                       		rts	
0001AEE2                            ; ===========================================================================
0001AEE2                            
0001AEE2                            loc_19556:				; XREF: off_19546
0001AEE2 7206                       		moveq	#6,d1
0001AEE4 4E75                       		rts	
0001AEE6                            ; ===========================================================================
0001AEE6                            
0001AEE6                            loc_1955A:				; XREF: off_19546
0001AEE6 7000                       		moveq	#0,d0
0001AEE8 1029 0028                  		move.b	$28(a1),d0
0001AEEC 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001AEF0 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001AEF4                            ; ===========================================================================
0001AEF4 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001AEF8 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001AEFC                            ; ===========================================================================
0001AEFC                            
0001AEFC                            loc_19570:				; XREF: off_19568
0001AEFC 6000                       		bra.s	loc_19574
0001AEFE                            ; ===========================================================================
0001AEFE                            
0001AEFE                            loc_19572:				; XREF: off_19568
0001AEFE 7206                       		moveq	#6,d1
0001AF00                            
0001AF00                            loc_19574:				; XREF: off_19546
0001AF00 4A29 0020                  		tst.b	$20(a1)
0001AF04 6600                       		bne.s	loc_1957E
0001AF06 7205                       		moveq	#5,d1
0001AF08 4E75                       		rts	
0001AF0A                            ; ===========================================================================
0001AF0A                            
0001AF0A                            loc_1957E:
0001AF0A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001AF10 6500                       		bcs.s	locret_19588
0001AF12 7204                       		moveq	#4,d1
0001AF14                            
0001AF14                            locret_19588:
0001AF14 4E75                       		rts	
0001AF16                            ; ===========================================================================
0001AF16                            
0001AF16                            Obj75_FlameMain:			; XREF: Obj75_Index
0001AF16 117C 0007 001C             		move.b	#7,$1C(a0)
0001AF1C 2268 0034                  		movea.l	$34(a0),a1
0001AF20 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001AF26 6600                       		bne.s	loc_195AA
0001AF28 117C 000B 001C             		move.b	#$B,$1C(a0)
0001AF2E 4A28 0001                  		tst.b	1(a0)
0001AF32 6A00                       		bpl.s	Obj75_FlameDelete
0001AF34 6000                       		bra.s	loc_195B6
0001AF36                            ; ===========================================================================
0001AF36                            
0001AF36                            loc_195AA:
0001AF36 4A69 0010                  		tst.w	$10(a1)
0001AF3A 6700                       		beq.s	loc_195B6
0001AF3C 117C 0008 001C             		move.b	#8,$1C(a0)
0001AF42                            
0001AF42                            loc_195B6:
0001AF42 6000                       		bra.s	loc_195BE
0001AF44                            ; ===========================================================================
0001AF44                            
0001AF44                            Obj75_FlameDelete:
0001AF44 4EF9 0000 E11A             		jmp	DeleteObject
0001AF4A                            ; ===========================================================================
0001AF4A                            
0001AF4A                            loc_195BE:
0001AF4A 43F9 0001 9652             		lea	(Ani_Eggman).l,a1
0001AF50 4EB9 0000 B1F0             		jsr	AnimateSprite
0001AF56 2268 0034                  		movea.l	$34(a0),a1
0001AF5A 3169 0008 0008             		move.w	8(a1),8(a0)
0001AF60 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AF66                            
0001AF66                            loc_195DA:
0001AF66 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001AF6C 7003                       		moveq	#3,d0
0001AF6E C028 0022                  		and.b	$22(a0),d0
0001AF72 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001AF78 8128 0001                  		or.b	d0,1(a0)
0001AF7C 4EF9 0000 E0DE             		jmp	DisplaySprite
0001AF82                            ; ===========================================================================
0001AF82                            
0001AF82                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001AF82 217C 0001 976A 0004        		move.l	#Map_BossItems,4(a0)
0001AF8A 317C 246C 0002             		move.w	#$246C,2(a0)
0001AF90 117C 0005 001A             		move.b	#5,$1A(a0)
0001AF96 2268 0034                  		movea.l	$34(a0),a1
0001AF9A 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001AFA0 6600                       		bne.s	loc_1961C
0001AFA2 4A28 0001                  		tst.b	1(a0)
0001AFA6 6A00                       		bpl.s	Obj75_SpikeDelete
0001AFA8                            
0001AFA8                            loc_1961C:
0001AFA8 3169 0008 0008             		move.w	8(a1),8(a0)
0001AFAE 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AFB4 3028 003C                  		move.w	$3C(a0),d0
0001AFB8 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001AFBE 6600                       		bne.s	loc_19652
0001AFC0 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001AFC6 6700                       		beq.s	loc_1964C
0001AFC8 4A29 0028                  		tst.b	$28(a1)
0001AFCC 6600                       		bne.s	loc_19658
0001AFCE 0C40 0094                  		cmpi.w	#$94,d0
0001AFD2 6C00                       		bge.s	loc_19658
0001AFD4 5E40                       		addq.w	#7,d0
0001AFD6 6000                       		bra.s	loc_19658
0001AFD8                            ; ===========================================================================
0001AFD8                            
0001AFD8                            loc_1964C:
0001AFD8 4A69 003C                  		tst.w	$3C(a1)
0001AFDC 6A00                       		bpl.s	loc_19658
0001AFDE                            
0001AFDE                            loc_19652:
0001AFDE 4A40                       		tst.w	d0
0001AFE0 6F00                       		ble.s	loc_19658
0001AFE2 5B40                       		subq.w	#5,d0
0001AFE4                            
0001AFE4                            loc_19658:
0001AFE4 3140 003C                  		move.w	d0,$3C(a0)
0001AFE8 E440                       		asr.w	#2,d0
0001AFEA D168 000C                  		add.w	d0,$C(a0)
0001AFEE 117C 0008 0019             		move.b	#8,$19(a0)
0001AFF4 117C 000C 0016             		move.b	#$C,$16(a0)
0001AFFA 4228 0020                  		clr.b	$20(a0)
0001AFFE 2268 0034                  		movea.l	$34(a0),a1
0001B002 4A29 0020                  		tst.b	$20(a1)
0001B006 6700                       		beq.s	loc_19688
0001B008 4A29 0029                  		tst.b	$29(a1)
0001B00C 6600                       		bne.s	loc_19688
0001B00E 117C 0084 0020             		move.b	#$84,$20(a0)
0001B014                            
0001B014                            loc_19688:
0001B014 6000 FF50                  		bra.w	loc_195DA
0001B018                            ; ===========================================================================
0001B018                            
0001B018                            Obj75_SpikeDelete:
0001B018 4EF9 0000 E11A             		jmp	DeleteObject
0001B01E                            ; ===========================================================================
0001B01E                            ; ---------------------------------------------------------------------------
0001B01E                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001B01E                            ; ---------------------------------------------------------------------------
0001B01E                            
0001B01E                            Obj76:					; XREF: Obj_Index
0001B01E 7000                       		moveq	#0,d0
0001B020 1028 0024                  		move.b	$24(a0),d0
0001B024 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001B028 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001B02C                            ; ===========================================================================
0001B02C 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001B02E 0000                       		dc.w Obj76_Action-Obj76_Index
0001B030 0000                       		dc.w loc_19762-Obj76_Index
0001B032                            ; ===========================================================================
0001B032                            
0001B032                            Obj76_Main:				; XREF: Obj76_Index
0001B032 7800                       		moveq	#0,d4
0001B034 3A3C 2C10                  		move.w	#$2C10,d5
0001B038 7C09                       		moveq	#9,d6
0001B03A 43D0                       		lea	(a0),a1
0001B03C 6000                       		bra.s	Obj76_MakeBlock
0001B03E                            ; ===========================================================================
0001B03E                            
0001B03E                            Obj76_Loop:
0001B03E 4EB9 0000 E574             		jsr	SingleObjLoad
0001B044 6600                       		bne.s	Obj76_ExitLoop
0001B046                            
0001B046                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001B046 12BC 0076                  		move.b	#$76,(a1)
0001B04A 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001B052 337C 4000 0002             		move.w	#$4000,2(a1)
0001B058 137C 0004 0001             		move.b	#4,1(a1)
0001B05E 137C 0010 0019             		move.b	#$10,$19(a1)
0001B064 137C 0010 0016             		move.b	#$10,$16(a1)
0001B06A 137C 0003 0018             		move.b	#3,$18(a1)
0001B070 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001B074 337C 0582 000C             		move.w	#$582,$C(a1)
0001B07A 3344 0028                  		move.w	d4,$28(a1)
0001B07E 0644 0101                  		addi.w	#$101,d4
0001B082 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001B086 5429 0024                  		addq.b	#2,$24(a1)
0001B08A 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001B08E                            
0001B08E                            Obj76_ExitLoop:
0001B08E 4E75                       		rts	
0001B090                            ; ===========================================================================
0001B090                            
0001B090                            Obj76_Action:				; XREF: Obj76_Index
0001B090 1028 0029                  		move.b	$29(a0),d0
0001B094 B028 0028                  		cmp.b	$28(a0),d0
0001B098 6700                       		beq.s	Obj76_Solid
0001B09A 4A00                       		tst.b	d0
0001B09C 6B00                       		bmi.s	loc_19718
0001B09E                            
0001B09E                            loc_19712:
0001B09E 6100 0000                  		bsr.w	Obj76_Break
0001B0A2 6000                       		bra.s	Obj76_Display
0001B0A4                            ; ===========================================================================
0001B0A4                            
0001B0A4                            loc_19718:
0001B0A4 2268 0034                  		movea.l	$34(a0),a1
0001B0A8 4A29 0021                  		tst.b	$21(a1)
0001B0AC 67F0                       		beq.s	loc_19712
0001B0AE 3169 0008 0008             		move.w	8(a1),8(a0)
0001B0B4 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B0BA 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001B0C0 B2C8                       		cmpa.w	a0,a1
0001B0C2 6500                       		bcs.s	Obj76_Display
0001B0C4 3029 0012                  		move.w	$12(a1),d0
0001B0C8 48C0                       		ext.l	d0
0001B0CA E080                       		asr.l	#8,d0
0001B0CC D168 000C                  		add.w	d0,$C(a0)
0001B0D0 6000                       		bra.s	Obj76_Display
0001B0D2                            ; ===========================================================================
0001B0D2                            
0001B0D2                            Obj76_Solid:				; XREF: Obj76_Action
0001B0D2 323C 001B                  		move.w	#$1B,d1
0001B0D6 343C 0010                  		move.w	#$10,d2
0001B0DA 363C 0011                  		move.w	#$11,d3
0001B0DE 3828 0008                  		move.w	8(a0),d4
0001B0E2 4EB9 0001 04C8             		jsr	SolidObject
0001B0E8                            
0001B0E8                            Obj76_Display:				; XREF: Obj76_Action
0001B0E8 4EF9 0000 E0DE             		jmp	DisplaySprite
0001B0EE                            ; ===========================================================================
0001B0EE                            
0001B0EE                            loc_19762:				; XREF: Obj76_Index
0001B0EE 4A28 0001                  		tst.b	1(a0)
0001B0F2 6A00                       		bpl.s	Obj76_Delete
0001B0F4 4EB9 0000 E08C             		jsr	ObjectFall
0001B0FA 4EF9 0000 E0DE             		jmp	DisplaySprite
0001B100                            ; ===========================================================================
0001B100                            
0001B100                            Obj76_Delete:
0001B100 4EF9 0000 E11A             		jmp	DeleteObject
0001B106                            
0001B106                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B106                            
0001B106                            
0001B106                            Obj76_Break:				; XREF: Obj76_Action
0001B106 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001B10A 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001B10E 7801                       		moveq	#1,d4
0001B110 7203                       		moveq	#3,d1
0001B112 7438                       		moveq	#$38,d2
0001B114 5428 0024                  		addq.b	#2,$24(a0)
0001B118 117C 0008 0019             		move.b	#8,$19(a0)
0001B11E 117C 0008 0016             		move.b	#8,$16(a0)
0001B124 43D0                       		lea	(a0),a1
0001B126 6000                       		bra.s	Obj76_MakeFrag
0001B128                            ; ===========================================================================
0001B128                            
0001B128                            Obj76_LoopFrag:
0001B128 4EB9 0000 E58A             		jsr	SingleObjLoad2
0001B12E 6600                       		bne.s	loc_197D4
0001B130                            
0001B130                            Obj76_MakeFrag:
0001B130 45D0                       		lea	(a0),a2
0001B132 47D1                       		lea	(a1),a3
0001B134 7603                       		moveq	#3,d3
0001B136                            
0001B136                            loc_197AA:
0001B136 26DA                       		move.l	(a2)+,(a3)+
0001B138 26DA                       		move.l	(a2)+,(a3)+
0001B13A 26DA                       		move.l	(a2)+,(a3)+
0001B13C 26DA                       		move.l	(a2)+,(a3)+
0001B13E 51CB FFF6                  		dbf	d3,loc_197AA
0001B142                            
0001B142 335C 0010                  		move.w	(a4)+,$10(a1)
0001B146 335C 0012                  		move.w	(a4)+,$12(a1)
0001B14A 361D                       		move.w	(a5)+,d3
0001B14C D769 0008                  		add.w	d3,8(a1)
0001B150 361D                       		move.w	(a5)+,d3
0001B152 D769 000C                  		add.w	d3,$C(a1)
0001B156 1344 001A                  		move.b	d4,$1A(a1)
0001B15A 5244                       		addq.w	#1,d4
0001B15C 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001B160                            
0001B160                            loc_197D4:
0001B160 303C 00CB                  		move.w	#$CB,d0
0001B164 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play smashing sound
0001B16A                            ; End of function Obj76_Break
0001B16A                            
0001B16A                            ; ===========================================================================
0001B16A FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001B16E 0180 FE00                  		dc.w $180, $FE00
0001B172 FF00 FF00                  		dc.w $FF00, $FF00
0001B176 0100 FF00                  		dc.w $100, $FF00
0001B17A FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001B17E 0010 0000                  		dc.w $10, 0
0001B182 0000 0010                  		dc.w 0,	$10
0001B186 0010 0010                  		dc.w $10, $10
0001B18A                            ; ---------------------------------------------------------------------------
0001B18A                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001B18A                            ; ---------------------------------------------------------------------------
0001B18A                            Map_obj76:
0001B18A                            	include "_maps\obj76.asm"
0001B18A                            ; ---------------------------------------------------------------------------
0001B18A                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001B18A                            ; ---------------------------------------------------------------------------
0001B18A 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001B18E 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001B192 0000                       		dc.w byte_19826-Map_obj76
0001B194 02                         byte_19808:	dc.b 2
0001B195 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001B19A 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001B19F 00                         		dc.b 0
0001B1A0 01                         byte_19814:	dc.b 1
0001B1A1 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001B1A6 01                         byte_1981A:	dc.b 1
0001B1A7 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001B1AC 01                         byte_19820:	dc.b 1
0001B1AD F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001B1B2 01                         byte_19826:	dc.b 1
0001B1B3 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001B1B8                            		even
0001B1B8                            		even
0001B1B8                            
0001B1B8                            ; ===========================================================================
0001B1B8                            
0001B1B8                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001B1B8 4EF9 0000 E11A             		jmp	DeleteObject
0001B1BE                            ; ===========================================================================
0001B1BE                            ; ---------------------------------------------------------------------------
0001B1BE                            ; Object 82 - Eggman (SBZ2)
0001B1BE                            ; ---------------------------------------------------------------------------
0001B1BE                            
0001B1BE                            Obj82:					; XREF: Obj_Index
0001B1BE 7000                       		moveq	#0,d0
0001B1C0 1028 0024                  		move.b	$24(a0),d0
0001B1C4 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001B1C8 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001B1CC                            ; ===========================================================================
0001B1CC 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001B1CE 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001B1D0 0000                       		dc.w Obj82_Switch-Obj82_Index
0001B1D2                            
0001B1D2 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001B1D5 0400 03                    		dc.b 4,	0, 3
0001B1D8                            ; ===========================================================================
0001B1D8                            
0001B1D8                            Obj82_Main:				; XREF: Obj82_Index
0001B1D8 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001B1DC 317C 2160 0008             		move.w	#$2160,8(a0)
0001B1E2 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001B1E8 117C 000F 0020             		move.b	#$F,$20(a0)
0001B1EE 117C 0010 0021             		move.b	#$10,$21(a0)
0001B1F4 08A8 0000 0022             		bclr	#0,$22(a0)
0001B1FA 4228 0025                  		clr.b	$25(a0)
0001B1FE 115A 0024                  		move.b	(a2)+,$24(a0)
0001B202 115A 001C                  		move.b	(a2)+,$1C(a0)
0001B206 115A 0018                  		move.b	(a2)+,$18(a0)
0001B20A 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001B212 317C 0400 0002             		move.w	#$400,2(a0)
0001B218 117C 0004 0001             		move.b	#4,1(a0)
0001B21E 08E8 0007 0001             		bset	#7,1(a0)
0001B224 117C 0020 0019             		move.b	#$20,$19(a0)
0001B22A 4EB9 0000 E58A             		jsr	SingleObjLoad2
0001B230 6600                       		bne.s	Obj82_Eggman
0001B232 2348 0034                  		move.l	a0,$34(a1)
0001B236 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001B23A 337C 2130 0008             		move.w	#$2130,8(a1)
0001B240 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001B246 4228 0025                  		clr.b	$25(a0)
0001B24A 135A 0024                  		move.b	(a2)+,$24(a1)
0001B24E 135A 001C                  		move.b	(a2)+,$1C(a1)
0001B252 135A 0018                  		move.b	(a2)+,$18(a1)
0001B256 237C 0000 C978 0004        		move.l	#Map_obj32,4(a1)
0001B25E 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001B264 137C 0004 0001             		move.b	#4,1(a1)
0001B26A 08E9 0007 0001             		bset	#7,1(a1)
0001B270 137C 0010 0019             		move.b	#$10,$19(a1)
0001B276 137C 0000 001A             		move.b	#0,$1A(a1)
0001B27C                            
0001B27C                            Obj82_Eggman:				; XREF: Obj82_Index
0001B27C 7000                       		moveq	#0,d0
0001B27E 1028 0025                  		move.b	$25(a0),d0
0001B282 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001B286 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001B28A 43FA 0000                  		lea	Ani_obj82(pc),a1
0001B28E 4EB9 0000 B1F0             		jsr	AnimateSprite
0001B294 4EF9 0000 E0DE             		jmp	DisplaySprite
0001B29A                            ; ===========================================================================
0001B29A 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001B29C 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001B29E 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001B2A0 0000                       		dc.w loc_19934-Obj82_EggIndex
0001B2A2                            ; ===========================================================================
0001B2A2                            
0001B2A2                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001B2A2 3028 0008                  		move.w	8(a0),d0
0001B2A6 9078 D008                  		sub.w	($FFFFD008).w,d0
0001B2AA 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001B2AE 6400                       		bcc.s	loc_19934	; if not, branch
0001B2B0 5428 0025                  		addq.b	#2,$25(a0)
0001B2B4 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001B2BA 117C 0001 001C             		move.b	#1,$1C(a0)
0001B2C0                            
0001B2C0                            loc_19934:				; XREF: Obj82_EggIndex
0001B2C0 4EF9 0000 E0B8             		jmp	SpeedToPos
0001B2C6                            ; ===========================================================================
0001B2C6                            
0001B2C6                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001B2C6 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001B2CA 6600                       		bne.s	loc_19954	; if time remains, branch
0001B2CC 5428 0025                  		addq.b	#2,$25(a0)
0001B2D0 117C 0002 001C             		move.b	#2,$1C(a0)
0001B2D6 5868 000C                  		addq.w	#4,$C(a0)
0001B2DA 317C 000F 003C             		move.w	#15,$3C(a0)
0001B2E0                            
0001B2E0                            loc_19954:
0001B2E0 60DE                       		bra.s	loc_19934
0001B2E2                            ; ===========================================================================
0001B2E2                            
0001B2E2                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001B2E2 5368 003C                  		subq.w	#1,$3C(a0)
0001B2E6 6E00                       		bgt.s	loc_199D0
0001B2E8 6600                       		bne.s	loc_1996A
0001B2EA 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001B2F0 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001B2F6                            
0001B2F6                            loc_1996A:
0001B2F6 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001B2FC 6E00                       		bgt.s	loc_19976
0001B2FE 4268 0010                  		clr.w	$10(a0)
0001B302                            
0001B302                            loc_19976:
0001B302 0668 0024 0012             		addi.w	#$24,$12(a0)
0001B308 4A68 0012                  		tst.w	$12(a0)
0001B30C 6B00                       		bmi.s	Obj82_FindBlocks
0001B30E 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001B314 6500                       		bcs.s	Obj82_FindBlocks
0001B316 317C 5357 0028             		move.w	#$5357,$28(a0)
0001B31C 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001B322 6500                       		bcs.s	Obj82_FindBlocks
0001B324 317C 059B 000C             		move.w	#$59B,$C(a0)
0001B32A 4268 0012                  		clr.w	$12(a0)
0001B32E                            
0001B32E                            Obj82_FindBlocks:
0001B32E 3028 0010                  		move.w	$10(a0),d0
0001B332 8068 0012                  		or.w	$12(a0),d0
0001B336 6600                       		bne.s	loc_199D0
0001B338 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001B33C 703E                       		moveq	#$3E,d0
0001B33E 7240                       		moveq	#$40,d1
0001B340                            
0001B340                            Obj82_FindLoop:	
0001B340 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001B342 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001B346 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001B34A                            
0001B34A 6600                       		bne.s	loc_199D0
0001B34C 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001B352 5428 0025                  		addq.b	#2,$25(a0)
0001B356 117C 0001 001C             		move.b	#1,$1C(a0)
0001B35C                            
0001B35C                            loc_199D0:
0001B35C 6000 FF62                  		bra.w	loc_19934
0001B360                            ; ===========================================================================
0001B360                            
0001B360                            Obj82_Switch:				; XREF: Obj82_Index
0001B360 7000                       		moveq	#0,d0
0001B362 1028 0025                  		move.b	$25(a0),d0
0001B366 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001B36A 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001B36E                            ; ===========================================================================
0001B36E 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001B370 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001B372                            ; ===========================================================================
0001B372                            
0001B372                            loc_199E6:				; XREF: Obj82_SwIndex
0001B372 2268 0034                  		movea.l	$34(a0),a1
0001B376 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001B37C 6600                       		bne.s	Obj82_SwDisplay
0001B37E 117C 0001 001A             		move.b	#1,$1A(a0)
0001B384 5428 0025                  		addq.b	#2,$25(a0)
0001B388                            
0001B388                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001B388 4EF9 0000 E0DE             		jmp	DisplaySprite
0001B38E                            ; ===========================================================================
0001B38E                            Ani_obj82:
0001B38E                            	include "_anim\obj82.asm"
0001B38E                            ; ---------------------------------------------------------------------------
0001B38E                            ; Animation script - Eggman (SBZ2)
0001B38E                            ; ---------------------------------------------------------------------------
0001B38E 0000                       		dc.w byte_19A10-Ani_obj82
0001B390 0000                       		dc.w byte_19A14-Ani_obj82
0001B392 0000                       		dc.w byte_19A18-Ani_obj82
0001B394 0000                       		dc.w byte_19A20-Ani_obj82
0001B396 0000                       		dc.w byte_19A24-Ani_obj82
0001B398 0000                       		dc.w byte_19A2A-Ani_obj82
0001B39A 0000                       		dc.w byte_19A30-Ani_obj82
0001B39C 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001B3A0 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001B3A4 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001B3AC 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001B3B0 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001B3B6 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001B3BC 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001B3C0                            		even
0001B3C0                            		even
0001B3C0                            
0001B3C0                            ; ---------------------------------------------------------------------------
0001B3C0                            ; Sprite mappings - Eggman (SBZ2)
0001B3C0                            ; ---------------------------------------------------------------------------
0001B3C0                            Map_obj82:
0001B3C0                            	include "_maps\obj82.asm"
0001B3C0                            ; ---------------------------------------------------------------------------
0001B3C0                            ; Sprite mappings - Eggman (SBZ2)
0001B3C0                            ; ---------------------------------------------------------------------------
0001B3C0 0000 0000                  		dc.w byte_19A4A-Map_obj82, byte_19A5A-Map_obj82
0001B3C4 0000 0000                  		dc.w byte_19A70-Map_obj82, byte_19A86-Map_obj82
0001B3C8 0000 0000                  		dc.w byte_19A9C-Map_obj82, byte_19AB2-Map_obj82
0001B3CC 0000 0000                  		dc.w byte_19AC8-Map_obj82, byte_19AEC-Map_obj82
0001B3D0 0000 0000                  		dc.w byte_19B06-Map_obj82, byte_19B26-Map_obj82
0001B3D4 0000                       		dc.w byte_19B4F-Map_obj82
0001B3D6 03                         byte_19A4A:	dc.b 3
0001B3D7 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001B3DC E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B3E1 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B3E6 04                         byte_19A5A:	dc.b 4
0001B3E7 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
0001B3EC E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B3F1 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B3F6 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001B3FB 00                         		dc.b 0
0001B3FC 04                         byte_19A70:	dc.b 4
0001B3FD E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
0001B402 E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
0001B407 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
0001B40C FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
0001B411 00                         		dc.b 0
0001B412 04                         byte_19A86:	dc.b 4
0001B413 F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
0001B418 F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
0001B41D 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
0001B422 EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
0001B427 00                         		dc.b 0
0001B428 04                         byte_19A9C:	dc.b 4
0001B429 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001B42E F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001B433 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
0001B438 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B43D 00                         		dc.b 0
0001B43E 04                         byte_19AB2:	dc.b 4
0001B43F E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001B444 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001B449 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B44E 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B453 00                         		dc.b 0
0001B454 07                         byte_19AC8:	dc.b 7
0001B455 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001B45A E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001B45F 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001B464 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001B469 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001B46E F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
0001B473 F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
0001B478 05                         byte_19AEC:	dc.b 5
0001B479 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001B47E F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001B483 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001B488 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001B48D E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B492 06                         byte_19B06:	dc.b 6
0001B493 EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
0001B498 EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
0001B49D 0905 0844 00               		dc.b 9,	5, 8, $44, 0
0001B4A2 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
0001B4A7 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
0001B4AC E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0001B4B1 00                         		dc.b 0
0001B4B2 08                         byte_19B26:	dc.b 8
0001B4B3 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001B4B8 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001B4BD E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001B4C2 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001B4C7 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
0001B4CC F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
0001B4D1 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
0001B4D6 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
0001B4DB 03                         byte_19B4F:	dc.b 3
0001B4DC EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4
0001B4E1 F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
0001B4E6 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
0001B4EC 00                         		even
0001B4EC 00                         		even
0001B4EC                            
0001B4EC                            ; ===========================================================================
0001B4EC                            ; ---------------------------------------------------------------------------
0001B4EC                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001B4EC                            ; ---------------------------------------------------------------------------
0001B4EC                            
0001B4EC                            Obj83:					; XREF: Obj_Index
0001B4EC 7000                       		moveq	#0,d0
0001B4EE 1028 0024                  		move.b	$24(a0),d0
0001B4F2 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001B4F6 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001B4FA                            ; ===========================================================================
0001B4FA 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001B4FC 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001B4FE 0000                       		dc.w loc_19C36-Obj83_Index
0001B500 0000                       		dc.w loc_19C62-Obj83_Index
0001B502 0000                       		dc.w loc_19C72-Obj83_Index
0001B504 0000                       		dc.w loc_19C80-Obj83_Index
0001B506                            ; ===========================================================================
0001B506                            
0001B506                            Obj83_Main:				; XREF: Obj83_Index
0001B506 317C 2080 0008             		move.w	#$2080,8(a0)
0001B50C 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001B512 117C 0080 0019             		move.b	#$80,$19(a0)
0001B518 117C 0010 0016             		move.b	#$10,$16(a0)
0001B51E 117C 0004 0001             		move.b	#4,1(a0)
0001B524 08E8 0007 0001             		bset	#7,1(a0)
0001B52A 7800                       		moveq	#0,d4
0001B52C 3A3C 2010                  		move.w	#$2010,d5
0001B530 7C07                       		moveq	#7,d6
0001B532 45E8 0030                  		lea	$30(a0),a2
0001B536                            
0001B536                            Obj83_MakeBlock:
0001B536 4EB9 0000 E574             		jsr	SingleObjLoad
0001B53C 6600                       		bne.s	Obj83_ExitMake
0001B53E 34C9                       		move.w	a1,(a2)+
0001B540 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001B544 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001B54C 337C 4518 0002             		move.w	#$4518,2(a1)
0001B552 137C 0004 0001             		move.b	#4,1(a1)
0001B558 137C 0010 0019             		move.b	#$10,$19(a1)
0001B55E 137C 0010 0016             		move.b	#$10,$16(a1)
0001B564 137C 0003 0018             		move.b	#3,$18(a1)
0001B56A 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001B56E 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001B574 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001B578 137C 0008 0024             		move.b	#8,$24(a1)
0001B57E 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001B582                            
0001B582                            Obj83_ExitMake:
0001B582 5428 0024                  		addq.b	#2,$24(a0)
0001B586 4E75                       		rts	
0001B588                            ; ===========================================================================
0001B588                            
0001B588                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001B588 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001B58E 6600                       		bne.s	Obj83_Solid	; if not, branch
0001B590 4228 001A                  		clr.b	$1A(a0)
0001B594 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001B598                            
0001B598                            Obj83_Solid:
0001B598 7000                       		moveq	#0,d0
0001B59A 1028 001A                  		move.b	$1A(a0),d0
0001B59E 4400                       		neg.b	d0
0001B5A0 4880                       		ext.w	d0
0001B5A2 5040                       		addq.w	#8,d0
0001B5A4 E940                       		asl.w	#4,d0
0001B5A6 383C 2100                  		move.w	#$2100,d4
0001B5AA 9840                       		sub.w	d0,d4
0001B5AC 1140 0019                  		move.b	d0,$19(a0)
0001B5B0 3144 0008                  		move.w	d4,8(a0)
0001B5B4 720B                       		moveq	#$B,d1
0001B5B6 D240                       		add.w	d0,d1
0001B5B8 7410                       		moveq	#$10,d2
0001B5BA 7611                       		moveq	#$11,d3
0001B5BC 4EF9 0001 04C8             		jmp	SolidObject
0001B5C2                            ; ===========================================================================
0001B5C2                            
0001B5C2                            loc_19C36:				; XREF: Obj83_Index
0001B5C2 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001B5C8 6400                       		bcc.s	Obj83_Solid2
0001B5CA 70FF                       		moveq	#-1,d0
0001B5CC 1028 001A                  		move.b	$1A(a0),d0
0001B5D0 4880                       		ext.w	d0
0001B5D2 D040                       		add.w	d0,d0
0001B5D4 3030 0030                  		move.w	$30(a0,d0.w),d0
0001B5D8 2240                       		movea.l	d0,a1
0001B5DA 337C 474F 0028             		move.w	#$474F,$28(a1)
0001B5E0 5228 001A                  		addq.b	#1,$1A(a0)
0001B5E4 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001B5EA 6700                       		beq.s	loc_19C62
0001B5EC                            
0001B5EC                            Obj83_Solid2:
0001B5EC 60AA                       		bra.s	Obj83_Solid
0001B5EE                            ; ===========================================================================
0001B5EE                            
0001B5EE                            loc_19C62:				; XREF: Obj83_Index
0001B5EE 08A8 0003 0022             		bclr	#3,$22(a0)
0001B5F4 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B5FA 6000 FBBC                  		bra.w	loc_1982C
0001B5FE                            ; ===========================================================================
0001B5FE                            
0001B5FE                            loc_19C72:				; XREF: Obj83_Index
0001B5FE 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001B604 6700                       		beq.s	Obj83_Break	; if yes, branch
0001B606 4EF9 0000 E0DE             		jmp	DisplaySprite
0001B60C                            ; ===========================================================================
0001B60C                            
0001B60C                            loc_19C80:				; XREF: Obj83_Index
0001B60C 4A28 0001                  		tst.b	1(a0)
0001B610 6A00 FBA6                  		bpl.w	loc_1982C
0001B614 4EB9 0000 E08C             		jsr	ObjectFall
0001B61A 4EF9 0000 E0DE             		jmp	DisplaySprite
0001B620                            ; ===========================================================================
0001B620                            
0001B620                            Obj83_Break:				; XREF: loc_19C72
0001B620 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001B624 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001B628 7801                       		moveq	#1,d4
0001B62A 7203                       		moveq	#3,d1
0001B62C 7438                       		moveq	#$38,d2
0001B62E 5428 0024                  		addq.b	#2,$24(a0)
0001B632 117C 0008 0019             		move.b	#8,$19(a0)
0001B638 117C 0008 0016             		move.b	#8,$16(a0)
0001B63E 43D0                       		lea	(a0),a1
0001B640 6000                       		bra.s	Obj83_MakeFrag
0001B642                            ; ===========================================================================
0001B642                            
0001B642                            Obj83_LoopFrag:
0001B642 4EB9 0000 E58A             		jsr	SingleObjLoad2
0001B648 6600                       		bne.s	Obj83_BreakSnd
0001B64A                            
0001B64A                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001B64A 45D0                       		lea	(a0),a2
0001B64C 47D1                       		lea	(a1),a3
0001B64E 7603                       		moveq	#3,d3
0001B650                            
0001B650                            loc_19CC4:
0001B650 26DA                       		move.l	(a2)+,(a3)+
0001B652 26DA                       		move.l	(a2)+,(a3)+
0001B654 26DA                       		move.l	(a2)+,(a3)+
0001B656 26DA                       		move.l	(a2)+,(a3)+
0001B658 51CB FFF6                  		dbf	d3,loc_19CC4
0001B65C                            
0001B65C 335C 0012                  		move.w	(a4)+,$12(a1)
0001B660 361D                       		move.w	(a5)+,d3
0001B662 D769 0008                  		add.w	d3,8(a1)
0001B666 361D                       		move.w	(a5)+,d3
0001B668 D769 000C                  		add.w	d3,$C(a1)
0001B66C 1344 001A                  		move.b	d4,$1A(a1)
0001B670 5244                       		addq.w	#1,d4
0001B672 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001B676                            
0001B676                            Obj83_BreakSnd:
0001B676 303C 00CB                  		move.w	#$CB,d0
0001B67A 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play smashing sound
0001B680 4EF9 0000 E0DE             		jmp	DisplaySprite
0001B686                            ; ===========================================================================
0001B686 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001B68A 0120 00C0                  		dc.w $120, $C0
0001B68E FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001B692 0010 0000                  		dc.w $10, 0
0001B696 0000 0010                  		dc.w 0,	$10
0001B69A 0010 0010                  		dc.w $10, $10
0001B69E                            ; ---------------------------------------------------------------------------
0001B69E                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001B69E                            ; ---------------------------------------------------------------------------
0001B69E                            Map_obj83:
0001B69E                            	include "_maps\obj83.asm"
0001B69E                            ; ---------------------------------------------------------------------------
0001B69E                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001B69E                            ; ---------------------------------------------------------------------------
0001B69E 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001B6A2 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001B6A6 0000                       		dc.w byte_19D46-Map_obj83
0001B6A8 01                         byte_19D1C:	dc.b 1
0001B6A9 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001B6AE 02                         byte_19D22:	dc.b 2
0001B6AF F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001B6B4 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001B6B9 00                         		dc.b 0
0001B6BA 02                         byte_19D2E:	dc.b 2
0001B6BB F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001B6C0 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001B6C5 00                         		dc.b 0
0001B6C6 02                         byte_19D3A:	dc.b 2
0001B6C7 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001B6CC F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001B6D1 00                         		dc.b 0
0001B6D2 02                         byte_19D46:	dc.b 2
0001B6D3 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001B6D8 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001B6DE 00                         		even
0001B6DE 00                         		even
0001B6DE                            
0001B6DE                            ; ===========================================================================
0001B6DE                            ; ---------------------------------------------------------------------------
0001B6DE                            ; Object 85 - Eggman (FZ)
0001B6DE                            ; ---------------------------------------------------------------------------
0001B6DE                            
0001B6DE                            Obj85_Delete:
0001B6DE 4EF9 0000 E11A             		jmp	DeleteObject
0001B6E4                            ; ===========================================================================
0001B6E4                            
0001B6E4                            Obj85:					; XREF: Obj_Index
0001B6E4 7000                       		moveq	#0,d0
0001B6E6 1028 0024                  		move.b	$24(a0),d0
0001B6EA 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001B6EE 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001B6F2                            ; ===========================================================================
0001B6F2 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001B6F4 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001B6F6 0000                       		dc.w loc_1A38E-Obj85_Index
0001B6F8 0000                       		dc.w loc_1A346-Obj85_Index
0001B6FA 0000                       		dc.w loc_1A2C6-Obj85_Index
0001B6FC 0000                       		dc.w loc_1A3AC-Obj85_Index
0001B6FE 0000                       		dc.w loc_1A264-Obj85_Index
0001B700                            
0001B700 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001B706 0001 B3C0                  		dc.l Map_obj82		; mappings pointer
0001B70A 25B0 0590 0300             		dc.w $25B0, $590, $300
0001B710 0000 0000                  		dc.l Map_obj84
0001B714 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001B71A 0000 0000                  		dc.l Map_FZBoss
0001B71E 26E0 0596 0470             		dc.w $26E0, $596, $470
0001B724 0001 B3C0                  		dc.l Map_obj82
0001B728 26E0 0596 0400             		dc.w $26E0, $596, $400
0001B72E 0001 96A2                  		dc.l Map_Eggman
0001B732 26E0 0596 0400             		dc.w $26E0, $596, $400
0001B738 0001 96A2                  		dc.l Map_Eggman
0001B73C                            
0001B73C 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001B741 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001B746 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001B74B 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001B750 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001B755 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001B75A                            ; ===========================================================================
0001B75A                            
0001B75A                            Obj85_Main:				; XREF: Obj85_Index
0001B75A 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001B75E 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001B762 2248                       		movea.l	a0,a1
0001B764 7205                       		moveq	#5,d1
0001B766 6000                       		bra.s	Obj85_LoadBoss
0001B768                            ; ===========================================================================
0001B768                            
0001B768                            Obj85_Loop:
0001B768 4EB9 0000 E58A             		jsr	SingleObjLoad2
0001B76E 6600                       		bne.s	loc_19E20
0001B770                            
0001B770                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001B770 12BC 0085                  		move.b	#$85,(a1)
0001B774 335A 0008                  		move.w	(a2)+,8(a1)
0001B778 335A 000C                  		move.w	(a2)+,$C(a1)
0001B77C 335A 0002                  		move.w	(a2)+,2(a1)
0001B780 235A 0004                  		move.l	(a2)+,4(a1)
0001B784 135B 0024                  		move.b	(a3)+,$24(a1)
0001B788 135B 001C                  		move.b	(a3)+,$1C(a1)
0001B78C 135B 0018                  		move.b	(a3)+,$18(a1)
0001B790 135B 0017                  		move.b	(a3)+,$17(a1)
0001B794 135B 0016                  		move.b	(a3)+,$16(a1)
0001B798 137C 0004 0001             		move.b	#4,1(a1)
0001B79E 08E8 0007 0001             		bset	#7,1(a0)
0001B7A4 2348 0034                  		move.l	a0,$34(a1)
0001B7A8 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001B7AC                            
0001B7AC                            loc_19E20:
0001B7AC 45E8 0036                  		lea	$36(a0),a2
0001B7B0 4EB9 0000 E574             		jsr	SingleObjLoad
0001B7B6 6600                       		bne.s	loc_19E5A
0001B7B8 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001B7BC 3489                       		move.w	a1,(a2)
0001B7BE 2348 0034                  		move.l	a0,$34(a1)
0001B7C2 45E8 0038                  		lea	$38(a0),a2
0001B7C6 7400                       		moveq	#0,d2
0001B7C8 7203                       		moveq	#3,d1
0001B7CA                            
0001B7CA                            loc_19E3E:
0001B7CA 4EB9 0000 E58A             		jsr	SingleObjLoad2
0001B7D0 6600                       		bne.s	loc_19E5A
0001B7D2 34C9                       		move.w	a1,(a2)+
0001B7D4 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001B7D8 2348 0034                  		move.l	a0,$34(a1)
0001B7DC 1342 0028                  		move.b	d2,$28(a1)
0001B7E0 5442                       		addq.w	#2,d2
0001B7E2 51C9 FFE6                  		dbf	d1,loc_19E3E
0001B7E6                            
0001B7E6                            loc_19E5A:
0001B7E6 317C 0000 0034             		move.w	#0,$34(a0)
0001B7EC 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001B7F2 317C FFFF 0030             		move.w	#-1,$30(a0)
0001B7F8                            
0001B7F8                            Obj85_Eggman:				; XREF: Obj85_Index
0001B7F8 7000                       		moveq	#0,d0
0001B7FA 1028 0034                  		move.b	$34(a0),d0
0001B7FE 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001B802 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001B806 4EF9 0000 E0DE             		jmp	DisplaySprite
0001B80C                            ; ===========================================================================
0001B80C 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001B810 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001B814 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001B818 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001B81C                            ; ===========================================================================
0001B81C                            
0001B81C                            loc_19E90:				; XREF: off_19E80
0001B81C 4AB8 F680                  		tst.l	($FFFFF680).w
0001B820 6600                       		bne.s	loc_19EA2
0001B822 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001B828 6500                       		bcs.s	loc_19EA2
0001B82A 5428 0034                  		addq.b	#2,$34(a0)
0001B82E                            
0001B82E                            loc_19EA2:
0001B82E 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001B832 4E75                       		rts	
0001B834                            ; ===========================================================================
0001B834                            
0001B834                            loc_19EA8:				; XREF: off_19E80
0001B834 4A68 0030                  		tst.w	$30(a0)
0001B838 6A00                       		bpl.s	loc_19F10
0001B83A 4268 0030                  		clr.w	$30(a0)
0001B83E 4EB9 0000 33AE             		jsr	(RandomNumber).l
0001B844 0240 000C                  		andi.w	#$C,d0
0001B848 3200                       		move.w	d0,d1
0001B84A 5441                       		addq.w	#2,d1
0001B84C 4A80                       		tst.l	d0
0001B84E 6A00                       		bpl.s	loc_19EC6
0001B850 C340                       		exg	d1,d0
0001B852                            
0001B852                            loc_19EC6:
0001B852 43FA 0000                  		lea	word_19FD6(pc),a1
0001B856 3031 0000                  		move.w	(a1,d0.w),d0
0001B85A 3231 1000                  		move.w	(a1,d1.w),d1
0001B85E 3140 0030                  		move.w	d0,$30(a0)
0001B862 74FF                       		moveq	#-1,d2
0001B864 3430 0038                  		move.w	$38(a0,d0.w),d2
0001B868 2242                       		movea.l	d2,a1
0001B86A 137C 00FF 0029             		move.b	#-1,$29(a1)
0001B870 337C FFFF 0030             		move.w	#-1,$30(a1)
0001B876 3430 1038                  		move.w	$38(a0,d1.w),d2
0001B87A 2242                       		movea.l	d2,a1
0001B87C 137C 0001 0029             		move.b	#1,$29(a1)
0001B882 337C 0000 0030             		move.w	#0,$30(a1)
0001B888 317C 0001 0032             		move.w	#1,$32(a0)
0001B88E 4228 0035                  		clr.b	$35(a0)
0001B892 303C 00B7                  		move.w	#$B7,d0
0001B896 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001B89C                            
0001B89C                            loc_19F10:
0001B89C 4A68 0032                  		tst.w	$32(a0)
0001B8A0 6B00 0000                  		bmi.w	loc_19FA6
0001B8A4 08A8 0000 0022             		bclr	#0,$22(a0)
0001B8AA 3038 D008                  		move.w	($FFFFD008).w,d0
0001B8AE 9068 0008                  		sub.w	8(a0),d0
0001B8B2 6500                       		bcs.s	loc_19F2E
0001B8B4 08E8 0000 0022             		bset	#0,$22(a0)
0001B8BA                            
0001B8BA                            loc_19F2E:
0001B8BA 323C 002B                  		move.w	#$2B,d1
0001B8BE 343C 0014                  		move.w	#$14,d2
0001B8C2 363C 0014                  		move.w	#$14,d3
0001B8C6 3828 0008                  		move.w	8(a0),d4
0001B8CA 4EB9 0001 04C8             		jsr	SolidObject
0001B8D0 4A44                       		tst.w	d4
0001B8D2 6E00                       		bgt.s	loc_19F50
0001B8D4                            
0001B8D4                            loc_19F48:
0001B8D4 4A28 0035                  		tst.b	$35(a0)
0001B8D8 6600                       		bne.s	loc_19F88
0001B8DA 6000                       		bra.s	loc_19F96
0001B8DC                            ; ===========================================================================
0001B8DC                            
0001B8DC                            loc_19F50:
0001B8DC 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001B8E0 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001B8E6 66EC                       		bne.s	loc_19F48
0001B8E8 303C 0300                  		move.w	#$300,d0
0001B8EC 0828 0000 0022             		btst	#0,$22(a0)
0001B8F2 6600                       		bne.s	loc_19F6A
0001B8F4 4440                       		neg.w	d0
0001B8F6                            
0001B8F6                            loc_19F6A:
0001B8F6 31C0 D010                  		move.w	d0,($FFFFD010).w
0001B8FA 4A28 0035                  		tst.b	$35(a0)
0001B8FE 6600                       		bne.s	loc_19F88
0001B900 5328 0021                  		subq.b	#1,$21(a0)
0001B904 117C 0064 0035             		move.b	#$64,$35(a0)
0001B90A 303C 00AC                  		move.w	#$AC,d0
0001B90E 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001B914                            
0001B914                            loc_19F88:
0001B914 5328 0035                  		subq.b	#1,$35(a0)
0001B918 6700                       		beq.s	loc_19F96
0001B91A 117C 0003 001C             		move.b	#3,$1C(a0)
0001B920 6000                       		bra.s	loc_19F9C
0001B922                            ; ===========================================================================
0001B922                            
0001B922                            loc_19F96:
0001B922 117C 0001 001C             		move.b	#1,$1C(a0)
0001B928                            
0001B928                            loc_19F9C:
0001B928 43FA FA64                  		lea	Ani_obj82(pc),a1
0001B92C 4EF9 0000 B1F0             		jmp	AnimateSprite
0001B932                            ; ===========================================================================
0001B932                            
0001B932                            loc_19FA6:
0001B932 4A28 0021                  		tst.b	$21(a0)
0001B936 6700                       		beq.s	loc_19FBC
0001B938 5428 0034                  		addq.b	#2,$34(a0)
0001B93C 317C FFFF 0030             		move.w	#-1,$30(a0)
0001B942 4268 0032                  		clr.w	$32(a0)
0001B946 4E75                       		rts	
0001B948                            ; ===========================================================================
0001B948                            
0001B948                            loc_19FBC:
0001B948 117C 0006 0034             		move.b	#6,$34(a0)
0001B94E 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001B954 317C 053C 000C             		move.w	#$53C,$C(a0)
0001B95A 117C 0014 0016             		move.b	#$14,$16(a0)
0001B960 4E75                       		rts	
0001B962                            ; ===========================================================================
0001B962 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001B972                            ; ===========================================================================
0001B972                            
0001B972                            loc_19FE6:				; XREF: off_19E80
0001B972 70FF                       		moveq	#-1,d0
0001B974 3028 0036                  		move.w	$36(a0),d0
0001B978 2240                       		movea.l	d0,a1
0001B97A 4A68 0030                  		tst.w	$30(a0)
0001B97E 6A00                       		bpl.s	loc_1A000
0001B980 4268 0030                  		clr.w	$30(a0)
0001B984 137C 00FF 0029             		move.b	#-1,$29(a1)
0001B98A 6100                       		bsr.s	loc_1A020
0001B98C                            
0001B98C                            loc_1A000:
0001B98C 700F                       		moveq	#$F,d0
0001B98E C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001B992 6600                       		bne.s	loc_1A00A
0001B994 6100                       		bsr.s	loc_1A020
0001B996                            
0001B996                            loc_1A00A:
0001B996 4A68 0032                  		tst.w	$32(a0)
0001B99A 6700                       		beq.s	locret_1A01E
0001B99C 5528 0034                  		subq.b	#2,$34(a0)
0001B9A0 317C FFFF 0030             		move.w	#-1,$30(a0)
0001B9A6 4268 0032                  		clr.w	$32(a0)
0001B9AA                            
0001B9AA                            locret_1A01E:
0001B9AA 4E75                       		rts	
0001B9AC                            ; ===========================================================================
0001B9AC                            
0001B9AC                            loc_1A020:
0001B9AC 303C 00B1                  		move.w	#$B1,d0
0001B9B0 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play electricity sound
0001B9B6                            ; ===========================================================================
0001B9B6                            
0001B9B6                            loc_1A02A:				; XREF: off_19E80
0001B9B6 117C 0030 0017             		move.b	#$30,$17(a0)
0001B9BC 08E8 0000 0022             		bset	#0,$22(a0)
0001B9C2 4EB9 0000 E0B8             		jsr	SpeedToPos
0001B9C8 117C 0006 001A             		move.b	#6,$1A(a0)
0001B9CE 0668 0010 0012             		addi.w	#$10,$12(a0)
0001B9D4 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001B9DA 6500                       		bcs.s	loc_1A070
0001B9DC 317C 059C 000C             		move.w	#$59C,$C(a0)
0001B9E2 5428 0034                  		addq.b	#2,$34(a0)
0001B9E6 117C 0020 0017             		move.b	#$20,$17(a0)
0001B9EC 317C 0100 0010             		move.w	#$100,$10(a0)
0001B9F2 317C FF00 0012             		move.w	#-$100,$12(a0)
0001B9F8 5438 F742                  		addq.b	#2,($FFFFF742).w
0001B9FC                            
0001B9FC                            loc_1A070:
0001B9FC 6000 0000                  		bra.w	loc_1A166
0001BA00                            ; ===========================================================================
0001BA00                            
0001BA00                            loc_1A074:				; XREF: off_19E80
0001BA00 08E8 0000 0022             		bset	#0,$22(a0)
0001BA06 117C 0004 001C             		move.b	#4,$1C(a0)
0001BA0C 4EB9 0000 E0B8             		jsr	SpeedToPos
0001BA12 0668 0010 0012             		addi.w	#$10,$12(a0)
0001BA18 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001BA1E 6500                       		bcs.s	loc_1A09A
0001BA20 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001BA26                            
0001BA26                            loc_1A09A:
0001BA26 317C 0400 0010             		move.w	#$400,$10(a0)
0001BA2C 3028 0008                  		move.w	8(a0),d0
0001BA30 9078 D008                  		sub.w	($FFFFD008).w,d0
0001BA34 6A00                       		bpl.s	loc_1A0B4
0001BA36 317C 0500 0010             		move.w	#$500,$10(a0)
0001BA3C 6000 0000                  		bra.w	loc_1A0F2
0001BA40                            ; ===========================================================================
0001BA40                            
0001BA40                            loc_1A0B4:
0001BA40 0440 0070                  		subi.w	#$70,d0
0001BA44 6500                       		bcs.s	loc_1A0F2
0001BA46 0468 0100 0010             		subi.w	#$100,$10(a0)
0001BA4C 5140                       		subq.w	#8,d0
0001BA4E 6500                       		bcs.s	loc_1A0F2
0001BA50 0468 0100 0010             		subi.w	#$100,$10(a0)
0001BA56 5140                       		subq.w	#8,d0
0001BA58 6500                       		bcs.s	loc_1A0F2
0001BA5A 0468 0080 0010             		subi.w	#$80,$10(a0)
0001BA60 5140                       		subq.w	#8,d0
0001BA62 6500                       		bcs.s	loc_1A0F2
0001BA64 0468 0080 0010             		subi.w	#$80,$10(a0)
0001BA6A 5140                       		subq.w	#8,d0
0001BA6C 6500                       		bcs.s	loc_1A0F2
0001BA6E 0468 0080 0010             		subi.w	#$80,$10(a0)
0001BA74 0440 0038                  		subi.w	#$38,d0
0001BA78 6500                       		bcs.s	loc_1A0F2
0001BA7A 4268 0010                  		clr.w	$10(a0)
0001BA7E                            
0001BA7E                            loc_1A0F2:
0001BA7E 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001BA84 6500                       		bcs.s	loc_1A110
0001BA86 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001BA8C 317C 0240 0010             		move.w	#$240,$10(a0)
0001BA92 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001BA98 5428 0034                  		addq.b	#2,$34(a0)
0001BA9C                            
0001BA9C                            loc_1A110:
0001BA9C 6000                       		bra.s	loc_1A15C
0001BA9E                            ; ===========================================================================
0001BA9E                            
0001BA9E                            loc_1A112:				; XREF: off_19E80
0001BA9E 4EB9 0000 E0B8             		jsr	SpeedToPos
0001BAA4 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001BAAA 6500                       		bcs.s	loc_1A124
0001BAAC 4268 0010                  		clr.w	$10(a0)
0001BAB0                            
0001BAB0                            loc_1A124:
0001BAB0 0668 0034 0012             		addi.w	#$34,$12(a0)
0001BAB6 4A68 0012                  		tst.w	$12(a0)
0001BABA 6B00                       		bmi.s	loc_1A142
0001BABC 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001BAC2 6500                       		bcs.s	loc_1A142
0001BAC4 317C 0592 000C             		move.w	#$592,$C(a0)
0001BACA 4268 0012                  		clr.w	$12(a0)
0001BACE                            
0001BACE                            loc_1A142:
0001BACE 3028 0010                  		move.w	$10(a0),d0
0001BAD2 8068 0012                  		or.w	$12(a0),d0
0001BAD6 6600                       		bne.s	loc_1A15C
0001BAD8 5428 0034                  		addq.b	#2,$34(a0)
0001BADC 317C FE80 0012             		move.w	#-$180,$12(a0)
0001BAE2 117C 0001 0021             		move.b	#1,$21(a0)
0001BAE8                            
0001BAE8                            loc_1A15C:
0001BAE8 43FA F8A4                  		lea	Ani_obj82(pc),a1
0001BAEC 4EB9 0000 B1F0             		jsr	AnimateSprite
0001BAF2                            
0001BAF2                            loc_1A166:
0001BAF2 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001BAF8 6C00                       		bge.s	loc_1A172
0001BAFA 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001BAFE                            
0001BAFE                            loc_1A172:
0001BAFE 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001BB04 6C00                       		bge.s	locret_1A190
0001BB06 323C 001B                  		move.w	#$1B,d1
0001BB0A 343C 0070                  		move.w	#$70,d2
0001BB0E 363C 0071                  		move.w	#$71,d3
0001BB12 3828 0008                  		move.w	8(a0),d4
0001BB16 4EF9 0001 04C8             		jmp	SolidObject
0001BB1C                            ; ===========================================================================
0001BB1C                            
0001BB1C                            locret_1A190:
0001BB1C 4E75                       		rts	
0001BB1E                            ; ===========================================================================
0001BB1E                            
0001BB1E                            loc_1A192:				; XREF: off_19E80
0001BB1E 217C 0001 96A2 0004        		move.l	#Map_Eggman,4(a0)
0001BB26 317C 0400 0002             		move.w	#$400,2(a0)
0001BB2C 117C 0000 001C             		move.b	#0,$1C(a0)
0001BB32 08E8 0000 0022             		bset	#0,$22(a0)
0001BB38 4EB9 0000 E0B8             		jsr	SpeedToPos
0001BB3E 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001BB44 6400                       		bcc.s	loc_1A1D0
0001BB46 317C 0180 0010             		move.w	#$180,$10(a0)
0001BB4C 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001BB52 117C 000F 0020             		move.b	#$F,$20(a0)
0001BB58 5428 0034                  		addq.b	#2,$34(a0)
0001BB5C                            
0001BB5C                            loc_1A1D0:
0001BB5C 6000 FF8A                  		bra.w	loc_1A15C
0001BB60                            ; ===========================================================================
0001BB60                            
0001BB60                            loc_1A1D4:				; XREF: off_19E80
0001BB60 08E8 0000 0022             		bset	#0,$22(a0)
0001BB66 4EB9 0000 E0B8             		jsr	SpeedToPos
0001BB6C 4A68 0030                  		tst.w	$30(a0)
0001BB70 6600                       		bne.s	loc_1A1FC
0001BB72 4A28 0020                  		tst.b	$20(a0)
0001BB76 6600                       		bne.s	loc_1A216
0001BB78 317C 001E 0030             		move.w	#$1E,$30(a0)
0001BB7E 303C 00AC                  		move.w	#$AC,d0
0001BB82 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001BB88                            
0001BB88                            loc_1A1FC:
0001BB88 5368 0030                  		subq.w	#1,$30(a0)
0001BB8C 6600                       		bne.s	loc_1A216
0001BB8E 4A28 0022                  		tst.b	$22(a0)
0001BB92 6A00                       		bpl.s	loc_1A210
0001BB94 317C 0060 0012             		move.w	#$60,$12(a0)
0001BB9A 6000                       		bra.s	loc_1A216
0001BB9C                            ; ===========================================================================
0001BB9C                            
0001BB9C                            loc_1A210:
0001BB9C 117C 000F 0020             		move.b	#$F,$20(a0)
0001BBA2                            
0001BBA2                            loc_1A216:
0001BBA2 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001BBA8 6D00                       		blt.s	loc_1A23A
0001BBAA 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001BBB0 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001BBB6 4278 D014                  		clr.w	($FFFFD014).w
0001BBBA 4A68 0012                  		tst.w	$12(a0)
0001BBBE 6A00                       		bpl.s	loc_1A248
0001BBC0 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001BBC6                            
0001BBC6                            loc_1A23A:
0001BBC6 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001BBCC 6D00                       		blt.s	loc_1A248
0001BBCE 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001BBD4                            
0001BBD4                            loc_1A248:
0001BBD4 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001BBDA 6500                       		bcs.s	loc_1A260
0001BBDC 4A28 0001                  		tst.b	1(a0)
0001BBE0 6B00                       		bmi.s	loc_1A260
0001BBE2 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001BBE8 6000 FAF4                  		bra.w	Obj85_Delete
0001BBEC                            ; ===========================================================================
0001BBEC                            
0001BBEC                            loc_1A260:
0001BBEC 6000 FEFA                  		bra.w	loc_1A15C
0001BBF0                            ; ===========================================================================
0001BBF0                            
0001BBF0                            loc_1A264:				; XREF: Obj85_Index
0001BBF0 2268 0034                  		movea.l	$34(a0),a1
0001BBF4 1011                       		move.b	(a1),d0
0001BBF6 B010                       		cmp.b	(a0),d0
0001BBF8 6600 FAE4                  		bne.w	Obj85_Delete
0001BBFC 117C 0007 001C             		move.b	#7,$1C(a0)
0001BC02 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001BC08 6C00                       		bge.s	loc_1A280
0001BC0A 6000                       		bra.s	loc_1A2A6
0001BC0C                            ; ===========================================================================
0001BC0C                            
0001BC0C                            loc_1A280:
0001BC0C 4A69 0010                  		tst.w	$10(a1)
0001BC10 6700                       		beq.s	loc_1A28C
0001BC12 117C 000B 001C             		move.b	#$B,$1C(a0)
0001BC18                            
0001BC18                            loc_1A28C:
0001BC18 43FA DA38                  		lea	Ani_Eggman(pc),a1
0001BC1C 4EB9 0000 B1F0             		jsr	AnimateSprite
0001BC22                            
0001BC22                            loc_1A296:
0001BC22 2268 0034                  		movea.l	$34(a0),a1
0001BC26 3169 0008 0008             		move.w	8(a1),8(a0)
0001BC2C 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001BC32                            
0001BC32                            loc_1A2A6:
0001BC32 2268 0034                  		movea.l	$34(a0),a1
0001BC36 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001BC3C 7003                       		moveq	#3,d0
0001BC3E C028 0022                  		and.b	$22(a0),d0
0001BC42 0228 00FC 0001             		andi.b	#-4,1(a0)
0001BC48 8128 0001                  		or.b	d0,1(a0)
0001BC4C 4EF9 0000 E0DE             		jmp	DisplaySprite
0001BC52                            ; ===========================================================================
0001BC52                            
0001BC52                            loc_1A2C6:				; XREF: Obj85_Index
0001BC52 2268 0034                  		movea.l	$34(a0),a1
0001BC56 1011                       		move.b	(a1),d0
0001BC58 B010                       		cmp.b	(a0),d0
0001BC5A 6600 FA82                  		bne.w	Obj85_Delete
0001BC5E 0CA9 0001 96A2 0004        		cmpi.l	#Map_Eggman,4(a1)
0001BC66 6700                       		beq.s	loc_1A2E4
0001BC68 117C 000A 001A             		move.b	#$A,$1A(a0)
0001BC6E 60C2                       		bra.s	loc_1A2A6
0001BC70                            ; ===========================================================================
0001BC70                            
0001BC70                            loc_1A2E4:
0001BC70 117C 0001 001C             		move.b	#1,$1C(a0)
0001BC76 4A29 0021                  		tst.b	$21(a1)
0001BC7A 6F00                       		ble.s	loc_1A312
0001BC7C 117C 0006 001C             		move.b	#6,$1C(a0)
0001BC82 217C 0001 96A2 0004        		move.l	#Map_Eggman,4(a0)
0001BC8A 317C 0400 0002             		move.w	#$400,2(a0)
0001BC90 43FA D9C0                  		lea	Ani_Eggman(pc),a1
0001BC94 4EB9 0000 B1F0             		jsr	AnimateSprite
0001BC9A 6000 FF86                  		bra.w	loc_1A296
0001BC9E                            ; ===========================================================================
0001BC9E                            
0001BC9E                            loc_1A312:
0001BC9E 4A28 0001                  		tst.b	1(a0)
0001BCA2 6A00 FA3A                  		bpl.w	Obj85_Delete
0001BCA6 6100 D558                  		bsr.w	BossDefeated
0001BCAA 117C 0002 0018             		move.b	#2,$18(a0)
0001BCB0 117C 0000 001C             		move.b	#0,$1C(a0)
0001BCB6 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001BCBE 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001BCC4 43FA 0000                  		lea	Ani_obj85(pc),a1
0001BCC8 4EB9 0000 B1F0             		jsr	AnimateSprite
0001BCCE 6000 FF52                  		bra.w	loc_1A296
0001BCD2                            ; ===========================================================================
0001BCD2                            
0001BCD2                            loc_1A346:				; XREF: Obj85_Index
0001BCD2 08E8 0000 0022             		bset	#0,$22(a0)
0001BCD8 2268 0034                  		movea.l	$34(a0),a1
0001BCDC 0CA9 0001 96A2 0004        		cmpi.l	#Map_Eggman,4(a1)
0001BCE4 6700                       		beq.s	loc_1A35E
0001BCE6 6000 FF4A                  		bra.w	loc_1A2A6
0001BCEA                            ; ===========================================================================
0001BCEA                            
0001BCEA                            loc_1A35E:
0001BCEA 3169 0008 0008             		move.w	8(a1),8(a0)
0001BCF0 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001BCF6 4A28 001E                  		tst.b	$1E(a0)
0001BCFA 6600                       		bne.s	loc_1A376
0001BCFC 117C 0014 001E             		move.b	#$14,$1E(a0)
0001BD02                            
0001BD02                            loc_1A376:
0001BD02 5328 001E                  		subq.b	#1,$1E(a0)
0001BD06 6E00                       		bgt.s	loc_1A38A
0001BD08 5228 001A                  		addq.b	#1,$1A(a0)
0001BD0C 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001BD12 6E00 F9CA                  		bgt.w	Obj85_Delete
0001BD16                            
0001BD16                            loc_1A38A:
0001BD16 6000 FF0A                  		bra.w	loc_1A296
0001BD1A                            ; ===========================================================================
0001BD1A                            
0001BD1A                            loc_1A38E:				; XREF: Obj85_Index
0001BD1A 117C 000B 001A             		move.b	#$B,$1A(a0)
0001BD20 3038 D008                  		move.w	($FFFFD008).w,d0
0001BD24 9068 0008                  		sub.w	8(a0),d0
0001BD28 6500                       		bcs.s	loc_1A3A6
0001BD2A 4A28 0001                  		tst.b	1(a0)
0001BD2E 6A00 F9AE                  		bpl.w	Obj85_Delete
0001BD32                            
0001BD32                            loc_1A3A6:
0001BD32 4EF9 0000 E0DE             		jmp	DisplaySprite
0001BD38                            ; ===========================================================================
0001BD38                            
0001BD38                            loc_1A3AC:				; XREF: Obj85_Index
0001BD38 117C 0000 001A             		move.b	#0,$1A(a0)
0001BD3E 08E8 0000 0022             		bset	#0,$22(a0)
0001BD44 2268 0034                  		movea.l	$34(a0),a1
0001BD48 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001BD4E 6600                       		bne.s	loc_1A3D0
0001BD50 0CA9 0001 96A2 0004        		cmpi.l	#Map_Eggman,4(a1)
0001BD58 6700 F984                  		beq.w	Obj85_Delete
0001BD5C                            
0001BD5C                            loc_1A3D0:
0001BD5C 6000 FED4                  		bra.w	loc_1A2A6
0001BD60                            ; ===========================================================================
0001BD60                            Ani_obj85:
0001BD60                            	include "_anim\obj85.asm"
0001BD60                            ; ---------------------------------------------------------------------------
0001BD60                            ; Animation script - Eggman (FZ)
0001BD60                            ; ---------------------------------------------------------------------------
0001BD60 0000                       		dc.w byte_1A3D6-Ani_obj85
0001BD62 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001BD66                            		even
0001BD66                            		even
0001BD66                            
0001BD66                            Map_Eggman2:
0001BD66                            	include "_maps\Eggman2.asm"
0001BD66                            ; ---------------------------------------------------------------------------
0001BD66                            ; Sprite mappings - Eggman (FZ)
0001BD66                            ; ---------------------------------------------------------------------------
0001BD66 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001BD68 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001BD6A 06                         byte_1A3DE:	dc.b 6
0001BD6B E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001BD70 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001BD75 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001BD7A FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001BD7F FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001BD84 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001BD89 06                         byte_1A3FD:	dc.b 6
0001BD8A E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001BD8F EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001BD94 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001BD99 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001BD9E FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001BDA3 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001BDA8                            		even
0001BDA8                            		even
0001BDA8                            
0001BDA8                            Map_FZBoss:
0001BDA8                            	include "_maps\FZ boss.asm"
0001BDA8                            ; ---------------------------------------------------------------------------
0001BDA8                            ; Sprite mappings - boss (FZ)
0001BDA8                            ; ---------------------------------------------------------------------------
0001BDA8 0000                       		dc.w byte_1A422-Map_FZBoss
0001BDAA 0000                       		dc.w byte_1A42D-Map_FZBoss
0001BDAC 0000                       		dc.w byte_1A43D-Map_FZBoss
0001BDAE 02                         byte_1A422:	dc.b 2
0001BDAF 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001BDB4 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001BDB9 03                         byte_1A42D:	dc.b 3
0001BDBA 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001BDBF 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001BDC4 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001BDC9 02                         byte_1A43D:	dc.b 2
0001BDCA 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001BDCF 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001BDD4                            		even
0001BDD4                            		even
0001BDD4                            
0001BDD4                            ; ===========================================================================
0001BDD4                            
0001BDD4                            Obj84_Delete:
0001BDD4 4EF9 0000 E11A             		jmp	DeleteObject
0001BDDA                            ; ===========================================================================
0001BDDA                            ; ---------------------------------------------------------------------------
0001BDDA                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001BDDA                            ; ---------------------------------------------------------------------------
0001BDDA                            
0001BDDA                            Obj84:					; XREF: Obj_Index
0001BDDA 7000                       		moveq	#0,d0
0001BDDC 1028 0024                  		move.b	$24(a0),d0
0001BDE0 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001BDE4 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001BDE8                            ; ===========================================================================
0001BDE8 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001BDEA 0000                       		dc.w loc_1A4CE-Obj84_Index
0001BDEC 0000                       		dc.w loc_1A57E-Obj84_Index
0001BDEE                            
0001BDEE 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001BDF2 2550 0620                  		dc.w $2550, $620
0001BDF6 2490 04C0                  		dc.w $2490, $4C0
0001BDFA 2510 04C0                  		dc.w $2510, $4C0
0001BDFE                            ; ===========================================================================
0001BDFE                            
0001BDFE                            Obj84_Main:				; XREF: Obj84_Index
0001BDFE 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001BE02 7000                       		moveq	#0,d0
0001BE04 1028 0028                  		move.b	$28(a0),d0
0001BE08 D040                       		add.w	d0,d0
0001BE0A D2C0                       		adda.w	d0,a1
0001BE0C 117C 0004 0001             		move.b	#4,1(a0)
0001BE12 08E8 0007 0001             		bset	#7,1(a0)
0001BE18 08E8 0004 0001             		bset	#4,1(a0)
0001BE1E 317C 0300 0002             		move.w	#$300,2(a0)
0001BE24 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001BE2C 3159 0008                  		move.w	(a1)+,8(a0)
0001BE30 3151 000C                  		move.w	(a1),$C(a0)
0001BE34 3159 0038                  		move.w	(a1)+,$38(a0)
0001BE38 117C 0020 0016             		move.b	#$20,$16(a0)
0001BE3E 117C 0060 0017             		move.b	#$60,$17(a0)
0001BE44 117C 0020 0019             		move.b	#$20,$19(a0)
0001BE4A 117C 0060 0016             		move.b	#$60,$16(a0)
0001BE50 117C 0003 0018             		move.b	#3,$18(a0)
0001BE56 5428 0024                  		addq.b	#2,$24(a0)
0001BE5A                            
0001BE5A                            loc_1A4CE:				; XREF: Obj84_Index
0001BE5A 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001BE60 6F00                       		ble.s	loc_1A4DC
0001BE62 08E8 0001 0001             		bset	#1,1(a0)
0001BE68                            
0001BE68                            loc_1A4DC:
0001BE68 42A8 003C                  		clr.l	$3C(a0)
0001BE6C 4A28 0029                  		tst.b	$29(a0)
0001BE70 6700                       		beq.s	loc_1A4EA
0001BE72 5428 0024                  		addq.b	#2,$24(a0)
0001BE76                            
0001BE76                            loc_1A4EA:
0001BE76 2028 003C                  		move.l	$3C(a0),d0
0001BE7A 2228 0038                  		move.l	$38(a0),d1
0001BE7E D280                       		add.l	d0,d1
0001BE80 4841                       		swap	d1
0001BE82 3141 000C                  		move.w	d1,$C(a0)
0001BE86 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001BE8C 6600                       		bne.s	loc_1A524
0001BE8E 4A68 0030                  		tst.w	$30(a0)
0001BE92 6A00                       		bpl.s	loc_1A524
0001BE94 70F6                       		moveq	#-$A,d0
0001BE96 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001BE9C 6F00                       		ble.s	loc_1A514
0001BE9E 700E                       		moveq	#$E,d0
0001BEA0                            
0001BEA0                            loc_1A514:
0001BEA0 D240                       		add.w	d0,d1
0001BEA2 2268 0034                  		movea.l	$34(a0),a1
0001BEA6 3341 000C                  		move.w	d1,$C(a1)
0001BEAA 3368 0008 0008             		move.w	8(a0),8(a1)
0001BEB0                            
0001BEB0                            loc_1A524:
0001BEB0 323C 002B                  		move.w	#$2B,d1
0001BEB4 343C 0060                  		move.w	#$60,d2
0001BEB8 363C 0061                  		move.w	#$61,d3
0001BEBC 3828 0008                  		move.w	8(a0),d4
0001BEC0 4EB9 0001 04C8             		jsr	SolidObject
0001BEC6 7000                       		moveq	#0,d0
0001BEC8 3228 003C                  		move.w	$3C(a0),d1
0001BECC 6A00                       		bpl.s	loc_1A550
0001BECE 4441                       		neg.w	d1
0001BED0 5141                       		subq.w	#8,d1
0001BED2 6500                       		bcs.s	loc_1A55C
0001BED4 5200                       		addq.b	#1,d0
0001BED6 E841                       		asr.w	#4,d1
0001BED8 D041                       		add.w	d1,d0
0001BEDA 6000                       		bra.s	loc_1A55C
0001BEDC                            ; ===========================================================================
0001BEDC                            
0001BEDC                            loc_1A550:
0001BEDC 0441 0027                  		subi.w	#$27,d1
0001BEE0 6500                       		bcs.s	loc_1A55C
0001BEE2 5200                       		addq.b	#1,d0
0001BEE4 E841                       		asr.w	#4,d1
0001BEE6 D041                       		add.w	d1,d0
0001BEE8                            
0001BEE8                            loc_1A55C:
0001BEE8 1140 001A                  		move.b	d0,$1A(a0)
0001BEEC 3038 D008                  		move.w	($FFFFD008).w,d0
0001BEF0 9068 0008                  		sub.w	8(a0),d0
0001BEF4 6B00                       		bmi.s	loc_1A578
0001BEF6 0440 0140                  		subi.w	#$140,d0
0001BEFA 6B00                       		bmi.s	loc_1A578
0001BEFC 4A28 0001                  		tst.b	1(a0)
0001BF00 6A00 FED2                  		bpl.w	Obj84_Delete
0001BF04                            
0001BF04                            loc_1A578:
0001BF04 4EF9 0000 E0DE             		jmp	DisplaySprite
0001BF0A                            ; ===========================================================================
0001BF0A                            
0001BF0A                            loc_1A57E:				; XREF: Obj84_Index
0001BF0A 7000                       		moveq	#0,d0
0001BF0C 1028 0028                  		move.b	$28(a0),d0
0001BF10 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001BF14 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001BF18 6000 FF5C                  		bra.w	loc_1A4EA
0001BF1C                            ; ===========================================================================
0001BF1C 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001BF1E 0000                       		dc.w loc_1A598-off_1A590
0001BF20 0000                       		dc.w loc_1A604-off_1A590
0001BF22 0000                       		dc.w loc_1A604-off_1A590
0001BF24                            ; ===========================================================================
0001BF24                            
0001BF24                            loc_1A598:				; XREF: off_1A590
0001BF24 4A28 0029                  		tst.b	$29(a0)
0001BF28 6600                       		bne.s	loc_1A5D4
0001BF2A 2268 0034                  		movea.l	$34(a0),a1
0001BF2E 4A29 0021                  		tst.b	$21(a1)
0001BF32 6600                       		bne.s	loc_1A5B4
0001BF34 6100 D2CA                  		bsr.w	BossDefeated
0001BF38 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001BF40                            
0001BF40                            loc_1A5B4:
0001BF40 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001BF48 6400                       		bcc.s	locret_1A602
0001BF4A 42A8 003C                  		clr.l	$3C(a0)
0001BF4E 2268 0034                  		movea.l	$34(a0),a1
0001BF52 5369 0032                  		subq.w	#1,$32(a1)
0001BF56 4269 0030                  		clr.w	$30(a1)
0001BF5A 5528 0024                  		subq.b	#2,$24(a0)
0001BF5E 4E75                       		rts	
0001BF60                            ; ===========================================================================
0001BF60                            
0001BF60                            loc_1A5D4:
0001BF60 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001BF66 6C00                       		bge.s	loc_1A5E4
0001BF68 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001BF70                            
0001BF70                            loc_1A5E4:
0001BF70 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001BF78 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001BF7E 6E00                       		bgt.s	locret_1A602
0001BF80 4268 003E                  		clr.w	$3E(a0)
0001BF84 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001BF8A 4228 0029                  		clr.b	$29(a0)
0001BF8E                            
0001BF8E                            locret_1A602:
0001BF8E 4E75                       		rts	
0001BF90                            ; ===========================================================================
0001BF90                            
0001BF90                            loc_1A604:				; XREF: off_1A590
0001BF90 08E8 0001 0001             		bset	#1,1(a0)
0001BF96 4A28 0029                  		tst.b	$29(a0)
0001BF9A 6600                       		bne.s	loc_1A646
0001BF9C 2268 0034                  		movea.l	$34(a0),a1
0001BFA0 4A29 0021                  		tst.b	$21(a1)
0001BFA4 6600                       		bne.s	loc_1A626
0001BFA6 6100 D258                  		bsr.w	BossDefeated
0001BFAA 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001BFB2                            
0001BFB2                            loc_1A626:
0001BFB2 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001BFBA 6400                       		bcc.s	locret_1A674
0001BFBC 42A8 003C                  		clr.l	$3C(a0)
0001BFC0 2268 0034                  		movea.l	$34(a0),a1
0001BFC4 5369 0032                  		subq.w	#1,$32(a1)
0001BFC8 4269 0030                  		clr.w	$30(a1)
0001BFCC 5528 0024                  		subq.b	#2,$24(a0)
0001BFD0 4E75                       		rts	
0001BFD2                            ; ===========================================================================
0001BFD2                            
0001BFD2                            loc_1A646:
0001BFD2 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001BFD8 6D00                       		blt.s	loc_1A656
0001BFDA 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001BFE2                            
0001BFE2                            loc_1A656:
0001BFE2 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001BFEA 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001BFF0 6D00                       		blt.s	locret_1A674
0001BFF2 4268 003E                  		clr.w	$3E(a0)
0001BFF6 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001BFFC 4228 0029                  		clr.b	$29(a0)
0001C000                            
0001C000                            locret_1A674:
0001C000 4E75                       		rts	
0001C002                            ; ===========================================================================
0001C002                            ; ---------------------------------------------------------------------------
0001C002                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001C002                            ; ---------------------------------------------------------------------------
0001C002                            Map_obj84:
0001C002                            	include "_maps\obj84.asm"
0001C002                            ; ---------------------------------------------------------------------------
0001C002                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001C002                            ; ---------------------------------------------------------------------------
0001C002 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001C006 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001C00A 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001C00E 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001C012 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001C016 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001C01A 06                         byte_1A68E:	dc.b 6
0001C01B A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C020 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C025 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C02A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C02F B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C034 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C039 08                         byte_1A6AD:	dc.b 8
0001C03A A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C03F A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C044 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C049 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C04E B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C053 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C058 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C05D D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C062 0A                         byte_1A6D6:	dc.b $A
0001C063 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C068 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C06D B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C072 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C077 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C07C B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C081 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C086 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C08B F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C090 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C095 0C                         byte_1A709:	dc.b $C
0001C096 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C09B A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C0A0 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C0A5 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C0AA B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C0AF B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C0B4 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C0B9 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C0BE F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C0C3 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C0C8 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C0CD 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C0D2 0D                         byte_1A746:	dc.b $D
0001C0D3 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C0D8 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C0DD B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C0E2 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C0E7 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C0EC B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C0F1 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C0F6 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C0FB F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C100 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C105 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C10A 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C10F 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001C114 0E                         byte_1A788:	dc.b $E
0001C115 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001C11A A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001C11F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001C124 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001C129 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001C12E B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001C133 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001C138 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001C13D F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001C142 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001C147 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001C14C 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001C151 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001C156 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001C15B 02                         byte_1A7CF:	dc.b 2
0001C15C F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001C161 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001C166                            		even
0001C166                            		even
0001C166                            
0001C166                            ; ===========================================================================
0001C166                            ; ---------------------------------------------------------------------------
0001C166                            ; Object 86 - energy balls (FZ)
0001C166                            ; ---------------------------------------------------------------------------
0001C166                            
0001C166                            Obj86:					; XREF: Obj_Index
0001C166 7000                       		moveq	#0,d0
0001C168 1028 0024                  		move.b	$24(a0),d0
0001C16C 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001C170 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001C174                            ; ===========================================================================
0001C174 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001C176 0000                       		dc.w Obj86_Generator-Obj86_Index
0001C178 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001C17A 0000                       		dc.w loc_1A962-Obj86_Index
0001C17C 0000                       		dc.w loc_1A982-Obj86_Index
0001C17E                            ; ===========================================================================
0001C17E                            
0001C17E                            Obj86_Main:				; XREF: Obj86_Index
0001C17E 317C 2588 0008             		move.w	#$2588,8(a0)
0001C184 317C 053C 000C             		move.w	#$53C,$C(a0)
0001C18A 317C 0300 0002             		move.w	#$300,2(a0)
0001C190 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001C198 117C 0000 001C             		move.b	#0,$1C(a0)
0001C19E 117C 0003 0018             		move.b	#3,$18(a0)
0001C1A4 117C 0008 0017             		move.b	#8,$17(a0)
0001C1AA 117C 0008 0016             		move.b	#8,$16(a0)
0001C1B0 117C 0004 0001             		move.b	#4,1(a0)
0001C1B6 08E8 0007 0001             		bset	#7,1(a0)
0001C1BC 5428 0024                  		addq.b	#2,$24(a0)
0001C1C0                            
0001C1C0                            Obj86_Generator:			; XREF: Obj86_Index
0001C1C0 2268 0034                  		movea.l	$34(a0),a1
0001C1C4 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001C1CA 6600                       		bne.s	loc_1A850
0001C1CC 10BC 003F                  		move.b	#$3F,(a0)
0001C1D0 117C 0000 0024             		move.b	#0,$24(a0)
0001C1D6 4EF9 0000 E0DE             		jmp	DisplaySprite
0001C1DC                            ; ===========================================================================
0001C1DC                            
0001C1DC                            loc_1A850:
0001C1DC 117C 0000 001C             		move.b	#0,$1C(a0)
0001C1E2 4A28 0029                  		tst.b	$29(a0)
0001C1E6 6700                       		beq.s	loc_1A86C
0001C1E8 5428 0024                  		addq.b	#2,$24(a0)
0001C1EC 117C 0001 001C             		move.b	#1,$1C(a0)
0001C1F2 117C 003E 0028             		move.b	#$3E,$28(a0)
0001C1F8                            
0001C1F8                            loc_1A86C:
0001C1F8 323C 0013                  		move.w	#$13,d1
0001C1FC 343C 0008                  		move.w	#8,d2
0001C200 363C 0011                  		move.w	#$11,d3
0001C204 3828 0008                  		move.w	8(a0),d4
0001C208 4EB9 0001 04C8             		jsr	SolidObject
0001C20E 3038 D008                  		move.w	($FFFFD008).w,d0
0001C212 9068 0008                  		sub.w	8(a0),d0
0001C216 6B00                       		bmi.s	loc_1A89A
0001C218 0440 0140                  		subi.w	#$140,d0
0001C21C 6B00                       		bmi.s	loc_1A89A
0001C21E 4A28 0001                  		tst.b	1(a0)
0001C222 6A00 FBB0                  		bpl.w	Obj84_Delete
0001C226                            
0001C226                            loc_1A89A:
0001C226 43FA 0000                  		lea	Ani_obj86(pc),a1
0001C22A 4EB9 0000 B1F0             		jsr	AnimateSprite
0001C230 4EF9 0000 E0DE             		jmp	DisplaySprite
0001C236                            ; ===========================================================================
0001C236                            
0001C236                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001C236 4A28 0029                  		tst.b	$29(a0)
0001C23A 6700 0000                  		beq.w	loc_1A954
0001C23E 4228 0029                  		clr.b	$29(a0)
0001C242 D068 0030                  		add.w	$30(a0),d0
0001C246 0240 001E                  		andi.w	#$1E,d0
0001C24A D4C0                       		adda.w	d0,a2
0001C24C 5868 0030                  		addq.w	#4,$30(a0)
0001C250 4268 0032                  		clr.w	$32(a0)
0001C254 7403                       		moveq	#3,d2
0001C256                            
0001C256                            Obj86_Loop:
0001C256 4EB9 0000 E58A             		jsr	SingleObjLoad2
0001C25C 6600 0000                  		bne.w	loc_1A954
0001C260 12BC 0086                  		move.b	#$86,(a1)
0001C264 3368 0008 0008             		move.w	8(a0),8(a1)
0001C26A 337C 053C 000C             		move.w	#$53C,$C(a1)
0001C270 137C 0008 0024             		move.b	#8,$24(a1)
0001C276 337C 2300 0002             		move.w	#$2300,2(a1)
0001C27C 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001C284 137C 000C 0016             		move.b	#$C,$16(a1)
0001C28A 137C 000C 0017             		move.b	#$C,$17(a1)
0001C290 137C 0000 0020             		move.b	#0,$20(a1)
0001C296 137C 0003 0018             		move.b	#3,$18(a1)
0001C29C 337C 003E 0028             		move.w	#$3E,$28(a1)
0001C2A2 137C 0004 0001             		move.b	#4,1(a1)
0001C2A8 08E9 0007 0001             		bset	#7,1(a1)
0001C2AE 2348 0034                  		move.l	a0,$34(a1)
0001C2B2 4EB9 0000 33AE             		jsr	(RandomNumber).l
0001C2B8 3228 0032                  		move.w	$32(a0),d1
0001C2BC C3FC FFB1                  		muls.w	#-$4F,d1
0001C2C0 0641 2578                  		addi.w	#$2578,d1
0001C2C4 0240 001F                  		andi.w	#$1F,d0
0001C2C8 0440 0010                  		subi.w	#$10,d0
0001C2CC D041                       		add.w	d1,d0
0001C2CE 3340 0030                  		move.w	d0,$30(a1)
0001C2D2 5268 0032                  		addq.w	#1,$32(a0)
0001C2D6 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001C2DC 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001C2E0                            
0001C2E0                            loc_1A954:
0001C2E0 4A68 0032                  		tst.w	$32(a0)
0001C2E4 6600                       		bne.s	loc_1A95E
0001C2E6 5428 0024                  		addq.b	#2,$24(a0)
0001C2EA                            
0001C2EA                            loc_1A95E:
0001C2EA 6000 FF0C                  		bra.w	loc_1A86C
0001C2EE                            ; ===========================================================================
0001C2EE                            
0001C2EE                            loc_1A962:				; XREF: Obj86_Index
0001C2EE 117C 0002 001C             		move.b	#2,$1C(a0)
0001C2F4 4A68 0038                  		tst.w	$38(a0)
0001C2F8 6600                       		bne.s	loc_1A97E
0001C2FA 117C 0002 0024             		move.b	#2,$24(a0)
0001C300 2268 0034                  		movea.l	$34(a0),a1
0001C304 337C FFFF 0032             		move.w	#-1,$32(a1)
0001C30A                            
0001C30A                            loc_1A97E:
0001C30A 6000 FEEC                  		bra.w	loc_1A86C
0001C30E                            ; ===========================================================================
0001C30E                            
0001C30E                            loc_1A982:				; XREF: Obj86_Index
0001C30E 7000                       		moveq	#0,d0
0001C310 1028 0025                  		move.b	$25(a0),d0
0001C314 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001C318 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001C31C 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001C320 4EB9 0000 B1F0             		jsr	AnimateSprite
0001C326 4EF9 0000 E0DE             		jmp	DisplaySprite
0001C32C                            ; ===========================================================================
0001C32C 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001C32E 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001C330 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001C332                            ; ===========================================================================
0001C332                            
0001C332                            loc_1A9A6:				; XREF: Obj86_Index2
0001C332 3028 0030                  		move.w	$30(a0),d0
0001C336 9068 0008                  		sub.w	8(a0),d0
0001C33A E940                       		asl.w	#4,d0
0001C33C 3140 0010                  		move.w	d0,$10(a0)
0001C340 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001C346 5428 0025                  		addq.b	#2,$25(a0)
0001C34A 4E75                       		rts	
0001C34C                            ; ===========================================================================
0001C34C                            
0001C34C                            loc_1A9C0:				; XREF: Obj86_Index2
0001C34C 4A68 0010                  		tst.w	$10(a0)
0001C350 6700                       		beq.s	loc_1A9E6
0001C352 4EB9 0000 E0B8             		jsr	SpeedToPos
0001C358 3028 0008                  		move.w	8(a0),d0
0001C35C 9068 0030                  		sub.w	$30(a0),d0
0001C360 6400                       		bcc.s	loc_1A9E6
0001C362 4268 0010                  		clr.w	$10(a0)
0001C366 D168 0008                  		add.w	d0,8(a0)
0001C36A 2268 0034                  		movea.l	$34(a0),a1
0001C36E 5369 0032                  		subq.w	#1,$32(a1)
0001C372                            
0001C372                            loc_1A9E6:
0001C372 117C 0000 001C             		move.b	#0,$1C(a0)
0001C378 5368 0028                  		subq.w	#1,$28(a0)
0001C37C 6600                       		bne.s	locret_1AA1C
0001C37E 5428 0025                  		addq.b	#2,$25(a0)
0001C382 117C 0001 001C             		move.b	#1,$1C(a0)
0001C388 117C 009A 0020             		move.b	#$9A,$20(a0)
0001C38E 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001C394 7000                       		moveq	#0,d0
0001C396 3038 D008                  		move.w	($FFFFD008).w,d0
0001C39A 9068 0008                  		sub.w	8(a0),d0
0001C39E 3140 0010                  		move.w	d0,$10(a0)
0001C3A2 317C 0140 0012             		move.w	#$140,$12(a0)
0001C3A8                            
0001C3A8                            locret_1AA1C:
0001C3A8 4E75                       		rts	
0001C3AA                            ; ===========================================================================
0001C3AA                            
0001C3AA                            loc_1AA1E:				; XREF: Obj86_Index2
0001C3AA 4EB9 0000 E0B8             		jsr	SpeedToPos
0001C3B0 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001C3B6 6400                       		bcc.s	loc_1AA34
0001C3B8 5368 0028                  		subq.w	#1,$28(a0)
0001C3BC 6700                       		beq.s	loc_1AA34
0001C3BE 4E75                       		rts	
0001C3C0                            ; ===========================================================================
0001C3C0                            
0001C3C0                            loc_1AA34:
0001C3C0 2268 0034                  		movea.l	$34(a0),a1
0001C3C4 5369 0038                  		subq.w	#1,$38(a1)
0001C3C8 6000 FA0A                  		bra.w	Obj84_Delete
0001C3CC                            ; ===========================================================================
0001C3CC                            Ani_obj86:
0001C3CC                            	include "_anim\obj86.asm"
0001C3CC                            ; ---------------------------------------------------------------------------
0001C3CC                            ; Animation script - energy ball launcher (FZ)
0001C3CC                            ; ---------------------------------------------------------------------------
0001C3CC 0000                       		dc.w byte_1AA46-Ani_obj86
0001C3CE 0000                       		dc.w byte_1AA4A-Ani_obj86
0001C3D0 0000                       		dc.w byte_1AA50-Ani_obj86
0001C3D2 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001C3D6 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001C3DC 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001C3E2                            		even
0001C3E2                            		even
0001C3E2                            
0001C3E2                            ; ---------------------------------------------------------------------------
0001C3E2                            ; Sprite mappings - energy ball	launcher (FZ)
0001C3E2                            ; ---------------------------------------------------------------------------
0001C3E2                            Map_obj86:
0001C3E2                            	include "_maps\obj86.asm"
0001C3E2                            ; ---------------------------------------------------------------------------
0001C3E2                            ; Sprite mappings - energy ball	launcher (FZ)
0001C3E2                            ; ---------------------------------------------------------------------------
0001C3E2 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001C3E6 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001C3EA 01                         byte_1AA5E:	dc.b 1
0001C3EB F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001C3F0 01                         byte_1AA64:	dc.b 1
0001C3F1 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001C3F6 01                         byte_1AA6A:	dc.b 1
0001C3F7 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001C3FC 01                         byte_1AA70:	dc.b 1
0001C3FD F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001C402                            		even
0001C402                            		even
0001C402                            
0001C402                            Ani_obj86a:
0001C402                            	include "_anim\obj86a.asm"
0001C402                            ; ---------------------------------------------------------------------------
0001C402                            ; Animation script - energy balls (FZ)
0001C402                            ; ---------------------------------------------------------------------------
0001C402 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001C404 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001C406 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001C415 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001C424 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001C428 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001C432                            		even
0001C432                            		even
0001C432                            
0001C432                            ; ---------------------------------------------------------------------------
0001C432                            ; Sprite mappings - energy balls (FZ)
0001C432                            ; ---------------------------------------------------------------------------
0001C432                            Map_obj86a:
0001C432                            	include "_maps\obj86a.asm"
0001C432                            ; ---------------------------------------------------------------------------
0001C432                            ; Sprite mappings - energy balls (FZ)
0001C432                            ; ---------------------------------------------------------------------------
0001C432 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001C436 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001C43A 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001C43E 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001C442 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001C446 0000                       		dc.w byte_1AB20-Map_obj86a
0001C448 02                         byte_1AABC:	dc.b 2
0001C449 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001C44E 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001C453 02                         byte_1AAC7:	dc.b 2
0001C454 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001C459 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001C45E 02                         byte_1AAD2:	dc.b 2
0001C45F F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001C464 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001C469 02                         byte_1AADD:	dc.b 2
0001C46A F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001C46F 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001C474 02                         byte_1AAE8:	dc.b 2
0001C475 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001C47A 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001C47F 02                         byte_1AAF3:	dc.b 2
0001C480 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001C485 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001C48A 01                         byte_1AAFE:	dc.b 1
0001C48B F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001C490 01                         byte_1AB04:	dc.b 1
0001C491 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001C496 02                         byte_1AB0A:	dc.b 2
0001C497 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001C49C 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001C4A1 02                         byte_1AB15:	dc.b 2
0001C4A2 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001C4A7 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001C4AC 00                         byte_1AB20:	dc.b 0
0001C4AE 00                         		even
0001C4AE 00                         		even
0001C4AE                            
0001C4AE                            ; ===========================================================================
0001C4AE                            ; ---------------------------------------------------------------------------
0001C4AE                            ; Object 3E - prison capsule
0001C4AE                            ; ---------------------------------------------------------------------------
0001C4AE                            
0001C4AE                            Obj3E:					; XREF: Obj_Index
0001C4AE 7000                       		moveq	#0,d0
0001C4B0 1028 0024                  		move.b	$24(a0),d0
0001C4B4 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001C4B8 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001C4BC 3028 0008                  		move.w	8(a0),d0
0001C4C0 0240 FF80                  		andi.w	#$FF80,d0
0001C4C4 3238 F700                  		move.w	($FFFFF700).w,d1
0001C4C8 0441 0080                  		subi.w	#$80,d1
0001C4CC 0241 FF80                  		andi.w	#$FF80,d1
0001C4D0 9041                       		sub.w	d1,d0
0001C4D2 0C40 0280                  		cmpi.w	#$280,d0
0001C4D6 6200                       		bhi.s	Obj3E_Delete
0001C4D8 4EF9 0000 E0DE             		jmp	DisplaySprite
0001C4DE                            ; ===========================================================================
0001C4DE                            
0001C4DE                            Obj3E_Delete:
0001C4DE 4EF9 0000 E11A             		jmp	DeleteObject
0001C4E4                            ; ===========================================================================
0001C4E4 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001C4E6 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001C4E8 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001C4EA 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001C4EC 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001C4EE 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001C4F0 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001C4F2 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001C4F4                            
0001C4F4 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001C4F8 040C 0501                  		dc.b 4,	$C, 5, 1
0001C4FC 0610 0403                  		dc.b 6,	$10, 4,	3
0001C500 0810 0305                  		dc.b 8,	$10, 3,	5
0001C504                            ; ===========================================================================
0001C504                            
0001C504                            Obj3E_Main:				; XREF: Obj3E_Index
0001C504 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001C50C 317C 049D 0002             		move.w	#$49D,2(a0)
0001C512 117C 0004 0001             		move.b	#4,1(a0)
0001C518 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001C51E 7000                       		moveq	#0,d0
0001C520 1028 0028                  		move.b	$28(a0),d0
0001C524 E548                       		lsl.w	#2,d0
0001C526 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001C52A 1159 0024                  		move.b	(a1)+,$24(a0)
0001C52E 1159 0019                  		move.b	(a1)+,$19(a0)
0001C532 1159 0018                  		move.b	(a1)+,$18(a0)
0001C536 1159 001A                  		move.b	(a1)+,$1A(a0)
0001C53A 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001C53E 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001C540 117C 0006 0020             		move.b	#6,$20(a0)
0001C546 117C 0008 0021             		move.b	#8,$21(a0)
0001C54C                            
0001C54C                            Obj3E_Not02:
0001C54C 4E75                       		rts	
0001C54E                            ; ===========================================================================
0001C54E                            
0001C54E                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001C54E 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001C554 6700                       		beq.s	Obj3E_ChkOpened
0001C556 323C 002B                  		move.w	#$2B,d1
0001C55A 343C 0018                  		move.w	#$18,d2
0001C55E 363C 0018                  		move.w	#$18,d3
0001C562 3828 0008                  		move.w	8(a0),d4
0001C566 4EF9 0001 04C8             		jmp	SolidObject
0001C56C                            ; ===========================================================================
0001C56C                            
0001C56C                            Obj3E_ChkOpened:
0001C56C 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001C570 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001C572 4228 0025                  		clr.b	$25(a0)
0001C576 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001C57C 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001C582                            
0001C582                            Obj3E_DoOpen:
0001C582 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001C588 4E75                       		rts	
0001C58A                            ; ===========================================================================
0001C58A                            
0001C58A                            Obj3E_Switched:				; XREF: Obj3E_Index
0001C58A 323C 0017                  		move.w	#$17,d1
0001C58E 343C 0008                  		move.w	#8,d2
0001C592 363C 0008                  		move.w	#8,d3
0001C596 3828 0008                  		move.w	8(a0),d4
0001C59A 4EB9 0001 04C8             		jsr	SolidObject
0001C5A0 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001C5A6 4EB9 0000 B1F0             		jsr	AnimateSprite
0001C5AC 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001C5B2 4A28 0025                  		tst.b	$25(a0)
0001C5B6 6700                       		beq.s	locret_1AC60
0001C5B8 5068 000C                  		addq.w	#8,$C(a0)
0001C5BC 117C 000A 0024             		move.b	#$A,$24(a0)
0001C5C2 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001C5C8 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001C5CC 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001C5D0 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001C5D6 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001C5DC 4228 0025                  		clr.b	$25(a0)
0001C5E0 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001C5E6 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001C5EC                            
0001C5EC                            locret_1AC60:
0001C5EC 4E75                       		rts	
0001C5EE                            ; ===========================================================================
0001C5EE                            
0001C5EE                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001C5EE 7007                       		moveq	#7,d0
0001C5F0 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001C5F4 6600                       		bne.s	loc_1ACA0
0001C5F6 4EB9 0000 E574             		jsr	SingleObjLoad
0001C5FC 6600                       		bne.s	loc_1ACA0
0001C5FE 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001C602 3368 0008 0008             		move.w	8(a0),8(a1)
0001C608 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C60E 4EB9 0000 33AE             		jsr	(RandomNumber).l
0001C614 7200                       		moveq	#0,d1
0001C616 1200                       		move.b	d0,d1
0001C618 E409                       		lsr.b	#2,d1
0001C61A 0441 0020                  		subi.w	#$20,d1
0001C61E D369 0008                  		add.w	d1,8(a1)
0001C622 E048                       		lsr.w	#8,d0
0001C624 E608                       		lsr.b	#3,d0
0001C626 D169 000C                  		add.w	d0,$C(a1)
0001C62A                            
0001C62A                            loc_1ACA0:
0001C62A 5368 001E                  		subq.w	#1,$1E(a0)
0001C62E 6700                       		beq.s	Obj3E_MakeAnimal
0001C630 4E75                       		rts	
0001C632                            ; ===========================================================================
0001C632                            
0001C632                            Obj3E_MakeAnimal:
0001C632 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001C638 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001C63E 117C 0006 001A             		move.b	#6,$1A(a0)
0001C644 317C 0096 001E             		move.w	#$96,$1E(a0)
0001C64A 0668 0020 000C             		addi.w	#$20,$C(a0)
0001C650 7C07                       		moveq	#7,d6
0001C652 3A3C 009A                  		move.w	#$9A,d5
0001C656 78E4                       		moveq	#-$1C,d4
0001C658                            
0001C658                            Obj3E_Loop:
0001C658 4EB9 0000 E574             		jsr	SingleObjLoad
0001C65E 6600                       		bne.s	locret_1ACF8
0001C660 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001C664 3368 0008 0008             		move.w	8(a0),8(a1)
0001C66A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C670 D969 0008                  		add.w	d4,8(a1)
0001C674 5E44                       		addq.w	#7,d4
0001C676 3345 0036                  		move.w	d5,$36(a1)
0001C67A 5145                       		subq.w	#8,d5
0001C67C 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001C680                            
0001C680                            locret_1ACF8:
0001C680 4E75                       		rts	
0001C682                            ; ===========================================================================
0001C682                            
0001C682                            Obj3E_Animals:				; XREF: Obj3E_Index
0001C682 7007                       		moveq	#7,d0
0001C684 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001C688 6600                       		bne.s	loc_1AD38
0001C68A 4EB9 0000 E574             		jsr	SingleObjLoad
0001C690 6600                       		bne.s	loc_1AD38
0001C692 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001C696 3368 0008 0008             		move.w	8(a0),8(a1)
0001C69C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C6A2 4EB9 0000 33AE             		jsr	(RandomNumber).l
0001C6A8 0240 001F                  		andi.w	#$1F,d0
0001C6AC 5D40                       		subq.w	#6,d0
0001C6AE 4A41                       		tst.w	d1
0001C6B0 6A00                       		bpl.s	loc_1AD2E
0001C6B2 4440                       		neg.w	d0
0001C6B4                            
0001C6B4                            loc_1AD2E:
0001C6B4 D169 0008                  		add.w	d0,8(a1)
0001C6B8 337C 000C 0036             		move.w	#$C,$36(a1)
0001C6BE                            
0001C6BE                            loc_1AD38:
0001C6BE 5368 001E                  		subq.w	#1,$1E(a0)
0001C6C2 6600                       		bne.s	locret_1AD48
0001C6C4 5428 0024                  		addq.b	#2,$24(a0)
0001C6C8 317C 00B4 001E             		move.w	#180,$1E(a0)
0001C6CE                            
0001C6CE                            locret_1AD48:
0001C6CE 4E75                       		rts	
0001C6D0                            ; ===========================================================================
0001C6D0                            
0001C6D0                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001C6D0 703E                       		moveq	#$3E,d0
0001C6D2 7228                       		moveq	#$28,d1
0001C6D4 7440                       		moveq	#$40,d2
0001C6D6 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001C6DA                            
0001C6DA                            Obj3E_FindObj28:
0001C6DA B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001C6DC 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001C6DE D2C2                       		adda.w	d2,a1		; next object RAM
0001C6E0 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001C6E4                            
0001C6E4 4EB9 0000 F784             		jsr	GotThroughAct
0001C6EA 4EF9 0000 E11A             		jmp	DeleteObject
0001C6F0                            ; ===========================================================================
0001C6F0                            
0001C6F0                            Obj3E_Obj28Found:
0001C6F0 4E75                       		rts	
0001C6F2                            ; ===========================================================================
0001C6F2                            Ani_obj3E:
0001C6F2                            	include "_anim\obj3E.asm"
0001C6F2                            ; ---------------------------------------------------------------------------
0001C6F2                            ; Animation script - prison capsule
0001C6F2                            ; ---------------------------------------------------------------------------
0001C6F2 0000                       		dc.w byte_1AD70-Ani_obj3E
0001C6F4 0000                       		dc.w byte_1AD70-Ani_obj3E
0001C6F6 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001C6FA                            		even
0001C6FA                            		even
0001C6FA                            
0001C6FA                            ; ---------------------------------------------------------------------------
0001C6FA                            ; Sprite mappings - prison capsule
0001C6FA                            ; ---------------------------------------------------------------------------
0001C6FA                            Map_obj3E:
0001C6FA                            	include "_maps\obj3E.asm"
0001C6FA                            ; ---------------------------------------------------------------------------
0001C6FA                            ; Sprite mappings - prison capsule
0001C6FA                            ; ---------------------------------------------------------------------------
0001C6FA 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001C6FE 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001C702 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001C706 0000                       		dc.w byte_1ADE2-Map_obj3E
0001C708 07                         byte_1AD82:	dc.b 7
0001C709 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001C70E E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001C713 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001C718 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001C71D F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001C722 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001C727 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001C72C 01                         byte_1ADA6:	dc.b 1
0001C72D F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001C732 06                         byte_1ADAC:	dc.b 6
0001C733 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001C738 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001C73D 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001C742 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001C747 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001C74C 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001C751 01                         byte_1ADCB:	dc.b 1
0001C752 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001C757 02                         byte_1ADD1:	dc.b 2
0001C758 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001C75D 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001C762 01                         byte_1ADDC:	dc.b 1
0001C763 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001C768 00                         byte_1ADE2:	dc.b 0
0001C76A 00                         		even
0001C76A 00                         		even
0001C76A                            
0001C76A                            ; ---------------------------------------------------------------------------
0001C76A                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001C76A                            ; ---------------------------------------------------------------------------
0001C76A                            
0001C76A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C76A                            
0001C76A                            
0001C76A                            TouchResponse:				; XREF: Obj01
0001C76A 4E71                       		nop	
0001C76C 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001C770 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001C774 5142                       		subq.w	#8,d2
0001C776 7A00                       		moveq	#0,d5
0001C778 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001C77C 5705                       		subq.b	#3,d5
0001C77E 9645                       		sub.w	d5,d3
0001C780 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001C786 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001C788 0643 000C                  		addi.w	#$C,d3
0001C78C 7A0A                       		moveq	#$A,d5
0001C78E                            
0001C78E                            Touch_NoDuck:
0001C78E 383C 0010                  		move.w	#$10,d4
0001C792 DA45                       		add.w	d5,d5
0001C794 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001C798 3C3C 005F                  		move.w	#$5F,d6
0001C79C                            
0001C79C                            Touch_Loop:
0001C79C 4A29 0001                  		tst.b	1(a1)
0001C7A0 6A00                       		bpl.s	Touch_NextObj
0001C7A2 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001C7A6 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001C7A8                            
0001C7A8                            Touch_NextObj:
0001C7A8 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001C7AC 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001C7B0                            
0001C7B0 7000                       		moveq	#0,d0
0001C7B2 4E75                       		rts	
0001C7B4                            ; ===========================================================================
0001C7B4 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001C7B6 0C14                       		dc.b   $C, $14
0001C7B8 140C                       		dc.b  $14,  $C
0001C7BA 0410                       		dc.b	4, $10
0001C7BC 0C12                       		dc.b   $C, $12
0001C7BE 1010                       		dc.b  $10, $10
0001C7C0 0606                       		dc.b	6,   6
0001C7C2 180C                       		dc.b  $18,  $C
0001C7C4 0C10                       		dc.b   $C, $10
0001C7C6 100C                       		dc.b  $10,  $C
0001C7C8 0808                       		dc.b	8,   8
0001C7CA 1410                       		dc.b  $14, $10
0001C7CC 1408                       		dc.b  $14,   8
0001C7CE 0E0E                       		dc.b   $E,  $E
0001C7D0 1818                       		dc.b  $18, $18
0001C7D2 2810                       		dc.b  $28, $10
0001C7D4 1018                       		dc.b  $10, $18
0001C7D6 0810                       		dc.b	8, $10
0001C7D8 2070                       		dc.b  $20, $70
0001C7DA 4020                       		dc.b  $40, $20
0001C7DC 8020                       		dc.b  $80, $20
0001C7DE 2020                       		dc.b  $20, $20
0001C7E0 0808                       		dc.b	8,   8
0001C7E2 0404                       		dc.b	4,   4
0001C7E4 2008                       		dc.b  $20,   8
0001C7E6 0C0C                       		dc.b   $C,  $C
0001C7E8 0804                       		dc.b	8,   4
0001C7EA 1804                       		dc.b  $18,   4
0001C7EC 2804                       		dc.b  $28,   4
0001C7EE 0408                       		dc.b	4,   8
0001C7F0 0418                       		dc.b	4, $18
0001C7F2 0428                       		dc.b	4, $28
0001C7F4 0420                       		dc.b	4, $20
0001C7F6 1818                       		dc.b  $18, $18
0001C7F8 0C18                       		dc.b   $C, $18
0001C7FA 4808                       		dc.b  $48,   8
0001C7FC                            ; ===========================================================================
0001C7FC                            
0001C7FC                            Touch_Height:				; XREF: TouchResponse
0001C7FC 0240 003F                  		andi.w	#$3F,d0
0001C800 D040                       		add.w	d0,d0
0001C802 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001C806 7200                       		moveq	#0,d1
0001C808 121A                       		move.b	(a2)+,d1
0001C80A 3029 0008                  		move.w	8(a1),d0
0001C80E 9041                       		sub.w	d1,d0
0001C810 9042                       		sub.w	d2,d0
0001C812 6400                       		bcc.s	loc_1AE98
0001C814 D241                       		add.w	d1,d1
0001C816 D041                       		add.w	d1,d0
0001C818 6500                       		bcs.s	Touch_Width
0001C81A 6000 FF8C                  		bra.w	Touch_NextObj
0001C81E                            ; ===========================================================================
0001C81E                            
0001C81E                            loc_1AE98:
0001C81E B044                       		cmp.w	d4,d0
0001C820 6200 FF86                  		bhi.w	Touch_NextObj
0001C824                            
0001C824                            Touch_Width:
0001C824 7200                       		moveq	#0,d1
0001C826 121A                       		move.b	(a2)+,d1
0001C828 3029 000C                  		move.w	$C(a1),d0
0001C82C 9041                       		sub.w	d1,d0
0001C82E 9043                       		sub.w	d3,d0
0001C830 6400                       		bcc.s	loc_1AEB6
0001C832 D241                       		add.w	d1,d1
0001C834 D240                       		add.w	d0,d1
0001C836 6500                       		bcs.s	Touch_ChkValue
0001C838 6000 FF6E                  		bra.w	Touch_NextObj
0001C83C                            ; ===========================================================================
0001C83C                            
0001C83C                            loc_1AEB6:
0001C83C B045                       		cmp.w	d5,d0
0001C83E 6200 FF68                  		bhi.w	Touch_NextObj
0001C842                            
0001C842                            Touch_ChkValue:
0001C842 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001C846 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001C84A 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001C84E 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001C852 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001C856 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001C858 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001C85C                            
0001C85C                            ; touch	response is $40-$7F
0001C85C                            
0001C85C 1029 0020                  		move.b	$20(a1),d0
0001C860 0200 003F                  		andi.b	#$3F,d0
0001C864 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001C868 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001C86A 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001C870 6400 0000                  		bcc.w	locret_1AEF2
0001C874 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001C878                            
0001C878                            locret_1AEF2:
0001C878 4E75                       		rts	
0001C87A                            ; ===========================================================================
0001C87A                            
0001C87A                            Touch_Monitor:
0001C87A 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001C87E 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001C880 3028 000C                  		move.w	$C(a0),d0
0001C884 0440 0010                  		subi.w	#$10,d0
0001C888 B069 000C                  		cmp.w	$C(a1),d0
0001C88C 6500                       		bcs.s	locret_1AF2E
0001C88E 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001C892 337C FE80 0012             		move.w	#-$180,$12(a1)
0001C898 4A29 0025                  		tst.b	$25(a1)
0001C89C 6600                       		bne.s	locret_1AF2E
0001C89E 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001C8A2 4E75                       		rts	
0001C8A4                            ; ===========================================================================
0001C8A4                            
0001C8A4                            loc_1AF1E:
0001C8A4 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001C8AA 6600                       		bne.s	locret_1AF2E
0001C8AC 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001C8B0 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001C8B4                            
0001C8B4                            locret_1AF2E:
0001C8B4 4E75                       		rts	
0001C8B6                            ; ===========================================================================
0001C8B6                            
0001C8B6                            Touch_Enemy:				; XREF: Touch_ChkValue
0001C8B6 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001C8BA 6600                       		bne.s	loc_1AF40	; if yes, branch
0001C8BC 0C28 001D 001C             		cmpi.b	#$1D,$1C(a0)	; is Sonic Spin Dashing?
0001C8C2 6700 0000                  		beq.w	loc_1AF40	; if yes, branch
0001C8C6 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001C8CC 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001C8D0                            
0001C8D0                            loc_1AF40:
0001C8D0 4A29 0021                  		tst.b	$21(a1)
0001C8D4 6700                       		beq.s	Touch_KillEnemy
0001C8D6 4468 0010                  		neg.w	$10(a0)
0001C8DA 4468 0012                  		neg.w	$12(a0)
0001C8DE E0E8 0010                  		asr	$10(a0)
0001C8E2 E0E8 0012                  		asr	$12(a0)
0001C8E6 137C 0000 0020             		move.b	#0,$20(a1)
0001C8EC 5329 0021                  		subq.b	#1,$21(a1)
0001C8F0 6600                       		bne.s	locret_1AF68
0001C8F2 08E9 0007 0022             		bset	#7,$22(a1)
0001C8F8                            
0001C8F8                            locret_1AF68:
0001C8F8 4E75                       		rts	
0001C8FA                            ; ===========================================================================
0001C8FA                            
0001C8FA                            Touch_KillEnemy:
0001C8FA 08E9 0007 0022             		bset	#7,$22(a1)
0001C900 7000                       		moveq	#0,d0
0001C902 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001C906 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001C90A 0C40 0006                  		cmpi.w	#6,d0
0001C90E 6500                       		bcs.s	loc_1AF82
0001C910 7006                       		moveq	#6,d0
0001C912                            
0001C912                            loc_1AF82:
0001C912 3340 003E                  		move.w	d0,$3E(a1)
0001C916 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001C91A 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001C920 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001C922 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001C926 337C 000A 003E             		move.w	#$A,$3E(a1)
0001C92C                            
0001C92C                            loc_1AF9C:
0001C92C 6100 0000                  		bsr.w	AddPoints
0001C930 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001C934 137C 0000 0024             		move.b	#0,$24(a1)
0001C93A 4A68 0012                  		tst.w	$12(a0)
0001C93E 6B00                       		bmi.s	loc_1AFC2
0001C940 3028 000C                  		move.w	$C(a0),d0
0001C944 B069 000C                  		cmp.w	$C(a1),d0
0001C948 6400                       		bcc.s	loc_1AFCA
0001C94A 4468 0012                  		neg.w	$12(a0)
0001C94E 4E75                       		rts	
0001C950                            ; ===========================================================================
0001C950                            
0001C950                            loc_1AFC2:
0001C950 0668 0100 0012             		addi.w	#$100,$12(a0)
0001C956 4E75                       		rts	
0001C958                            ; ===========================================================================
0001C958                            
0001C958                            loc_1AFCA:
0001C958 0468 0100 0012             		subi.w	#$100,$12(a0)
0001C95E 4E75                       		rts	
0001C960                            ; ===========================================================================
0001C960 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001C968                            ; ===========================================================================
0001C968                            
0001C968                            loc_1AFDA:				; XREF: Touch_CatKiller
0001C968 08E9 0007 0022             		bset	#7,$22(a1)
0001C96E                            
0001C96E                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001C96E 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001C972 6700                       		beq.s	Touch_Hurt	; if not, branch
0001C974                            
0001C974                            loc_1AFE6:				; XREF: Touch_Hurt
0001C974 70FF                       		moveq	#-1,d0
0001C976 4E75                       		rts	
0001C978                            ; ===========================================================================
0001C978                            
0001C978                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001C978 4E71                       		nop	
0001C97A 4A68 0030                  		tst.w	$30(a0)
0001C97E 66F4                       		bne.s	loc_1AFE6
0001C980 2449                       		movea.l	a1,a2
0001C982                            
0001C982                            ; End of function TouchResponse
0001C982                            ; continue straight to HurtSonic
0001C982                            
0001C982                            ; ---------------------------------------------------------------------------
0001C982                            ; Hurting Sonic	subroutine
0001C982                            ; ---------------------------------------------------------------------------
0001C982                            
0001C982                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C982                            
0001C982                            
0001C982                            HurtSonic:
0001C982 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001C986 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001C988 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001C98C 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001C990 4EB9 0000 E574             		jsr	SingleObjLoad
0001C996 6600                       		bne.s	Hurt_Shield
0001C998 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001C99C 3368 0008 0008             		move.w	8(a0),8(a1)
0001C9A2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C9A8                            
0001C9A8                            Hurt_Shield:
0001C9A8 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001C9AE 117C 0004 0024             		move.b	#4,$24(a0)
0001C9B4 4EB9 0001 4966             		jsr	Sonic_ResetOnFloor
0001C9BA 08E8 0001 0022             		bset	#1,$22(a0)
0001C9C0 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001C9C6 317C FE00 0010             		move.w	#-$200,$10(a0)
0001C9CC 0828 0006 0022             		btst	#6,$22(a0)
0001C9D2 6700                       		beq.s	Hurt_Reverse
0001C9D4 317C FE00 0012             		move.w	#-$200,$12(a0)
0001C9DA 317C FF00 0010             		move.w	#-$100,$10(a0)
0001C9E0                            
0001C9E0                            Hurt_Reverse:
0001C9E0 3028 0008                  		move.w	8(a0),d0
0001C9E4 B06A 0008                  		cmp.w	8(a2),d0
0001C9E8 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001C9EA 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001C9EE                            
0001C9EE                            Hurt_ChkSpikes:
0001C9EE 117C 0000 0039             		move.b	#0,$39(a0)	; clear Spin Dash flag
0001C9F4 317C 0000 0014             		move.w	#0,$14(a0)
0001C9FA 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001CA00 317C 0078 0030             		move.w	#$78,$30(a0)
0001CA06 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001CA0A 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001CA0E 6600                       		bne.s	Hurt_Sound	; if not, branch
0001CA10 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001CA14 6600                       		bne.s	Hurt_Sound	; if not, branch
0001CA16 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001CA1A                            
0001CA1A                            Hurt_Sound:
0001CA1A 4EB9 0000 1476             		jsr	(PlaySound_Special).l
0001CA20 70FF                       		moveq	#-1,d0
0001CA22 4E75                       		rts	
0001CA24                            ; ===========================================================================
0001CA24                            
0001CA24                            Hurt_NoRings:
0001CA24 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001CA28 6600 FF7E                  		bne.w	Hurt_Shield	; if yes, branch
0001CA2C                            ; End of function HurtSonic
0001CA2C                            
0001CA2C                            ; ---------------------------------------------------------------------------
0001CA2C                            ; Subroutine to	kill Sonic
0001CA2C                            ; ---------------------------------------------------------------------------
0001CA2C                            
0001CA2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA2C                            
0001CA2C                            
0001CA2C                            KillSonic:
0001CA2C 4238 FE19                  		clr.b   (Super_Sonic_Flag).w ; Revert Sonic to Normal
0001CA30 31FC 0600 F760             		move.w  #$600,(Sonic_top_speed).w ; Revert speeds
0001CA36 31FC 000C F762             		move.w  #$C,(Sonic_acceleration).w ; ^^^
0001CA3C 31FC 0080 F764             		move.w  #$80,(Sonic_deceleration).w ; ^^^
0001CA42 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001CA46 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001CA48 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001CA4E 117C 0006 0024             		move.b	#6,$24(a0)
0001CA54 4EB9 0001 4966             		jsr	Sonic_ResetOnFloor
0001CA5A 08E8 0001 0022             		bset	#1,$22(a0)
0001CA60 317C F900 0012             		move.w	#-$700,$12(a0)
0001CA66 317C 0000 0010             		move.w	#0,$10(a0)
0001CA6C 317C 0000 0014             		move.w	#0,$14(a0)
0001CA72 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001CA78 117C 0016 001C             		move.b	#$16,$1C(a0)
0001CA7E 08E8 0007 0002             		bset	#7,2(a0)
0001CA84 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001CA88 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001CA8C 6600                       		bne.s	Kill_Sound
0001CA8E 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001CA92                            
0001CA92                            Kill_Sound:
0001CA92 4EB9 0000 1476             		jsr	(PlaySound_Special).l
0001CA98                            
0001CA98                            Kill_NoDeath:
0001CA98 70FF                       		moveq	#-1,d0
0001CA9A 4E75                       		rts	
0001CA9C                            ; End of function KillSonic
0001CA9C                            
0001CA9C                            
0001CA9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA9C                            
0001CA9C                            
0001CA9C                            Touch_Special:				; XREF: Touch_ChkValue
0001CA9C 1229 0020                  		move.b	$20(a1),d1
0001CAA0 0201 003F                  		andi.b	#$3F,d1
0001CAA4 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001CAA8 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001CAAA 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001CAAE 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001CAB0 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001CAB4 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001CAB6 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001CABA 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001CABC 4E75                       		rts	
0001CABE                            ; ===========================================================================
0001CABE                            
0001CABE                            Touch_CatKiller:			; XREF: Touch_Special
0001CABE 6000 FEA8                  		bra.w	loc_1AFDA
0001CAC2                            ; ===========================================================================
0001CAC2                            
0001CAC2                            Touch_Yadrin:				; XREF: Touch_Special
0001CAC2 9A40                       		sub.w	d0,d5
0001CAC4 0C45 0008                  		cmpi.w	#8,d5
0001CAC8 6400                       		bcc.s	loc_1B144
0001CACA 3029 0008                  		move.w	8(a1),d0
0001CACE 5940                       		subq.w	#4,d0
0001CAD0 0829 0000 0022             		btst	#0,$22(a1)
0001CAD6 6700                       		beq.s	loc_1B130
0001CAD8 0440 0010                  		subi.w	#$10,d0
0001CADC                            
0001CADC                            loc_1B130:
0001CADC 9042                       		sub.w	d2,d0
0001CADE 6400                       		bcc.s	loc_1B13C
0001CAE0 0640 0018                  		addi.w	#$18,d0
0001CAE4 6500                       		bcs.s	loc_1B140
0001CAE6 6000                       		bra.s	loc_1B144
0001CAE8                            ; ===========================================================================
0001CAE8                            
0001CAE8                            loc_1B13C:
0001CAE8 B044                       		cmp.w	d4,d0
0001CAEA 6200                       		bhi.s	loc_1B144
0001CAEC                            
0001CAEC                            loc_1B140:
0001CAEC 6000 FE80                  		bra.w	Touch_ChkHurt
0001CAF0                            ; ===========================================================================
0001CAF0                            
0001CAF0                            loc_1B144:
0001CAF0 6000 FDC4                  		bra.w	Touch_Enemy
0001CAF4                            ; ===========================================================================
0001CAF4                            
0001CAF4                            Touch_D7orE1:				; XREF: Touch_Special
0001CAF4 5229 0021                  		addq.b	#1,$21(a1)
0001CAF8 4E75                       		rts	
0001CAFA                            ; End of function Touch_Special
0001CAFA                            
0001CAFA                            ; ---------------------------------------------------------------------------
0001CAFA                            ; Subroutine to	show the special stage layout
0001CAFA                            ; ---------------------------------------------------------------------------
0001CAFA                            
0001CAFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CAFA                            
0001CAFA                            
0001CAFA                            SS_ShowLayout:				; XREF: SpecialStage
0001CAFA 6100 0000                  		bsr.w	SS_AniWallsRings
0001CAFE 6100 0000                  		bsr.w	SS_AniItems
0001CB02 3F05                       		move.w	d5,-(sp)
0001CB04 43F8 8000                  		lea	($FFFF8000).w,a1
0001CB08 1038 F780                  		move.b	($FFFFF780).w,d0
0001CB0C                            ;		andi.b	#$FC,d0
0001CB0C 4EB9 0000 33D4             		jsr	(CalcSine).l
0001CB12 3800                       		move.w	d0,d4
0001CB14 3A01                       		move.w	d1,d5
0001CB16 C9FC 0018                  		muls.w	#$18,d4
0001CB1A CBFC 0018                  		muls.w	#$18,d5
0001CB1E 7400                       		moveq	#0,d2
0001CB20 3438 F700                  		move.w	($FFFFF700).w,d2
0001CB24 84FC 0018                  		divu.w	#$18,d2
0001CB28 4842                       		swap	d2
0001CB2A 4442                       		neg.w	d2
0001CB2C 0642 FF4C                  		addi.w	#-$B4,d2
0001CB30 7600                       		moveq	#0,d3
0001CB32 3638 F704                  		move.w	($FFFFF704).w,d3
0001CB36 86FC 0018                  		divu.w	#$18,d3
0001CB3A 4843                       		swap	d3
0001CB3C 4443                       		neg.w	d3
0001CB3E 0643 FF4C                  		addi.w	#-$B4,d3
0001CB42 3E3C 000F                  		move.w	#$F,d7
0001CB46                            
0001CB46                            loc_1B19E:
0001CB46 48A7 E000                  		movem.w	d0-d2,-(sp)
0001CB4A 48A7 C000                  		movem.w	d0-d1,-(sp)
0001CB4E 4440                       		neg.w	d0
0001CB50 C3C2                       		muls.w	d2,d1
0001CB52 C1C3                       		muls.w	d3,d0
0001CB54 2C00                       		move.l	d0,d6
0001CB56 DC81                       		add.l	d1,d6
0001CB58 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001CB5C C1C2                       		muls.w	d2,d0
0001CB5E C3C3                       		muls.w	d3,d1
0001CB60 D280                       		add.l	d0,d1
0001CB62 2406                       		move.l	d6,d2
0001CB64 3C3C 000F                  		move.w	#$F,d6
0001CB68                            
0001CB68                            loc_1B1C0:
0001CB68 2002                       		move.l	d2,d0
0001CB6A E080                       		asr.l	#8,d0
0001CB6C 32C0                       		move.w	d0,(a1)+
0001CB6E 2001                       		move.l	d1,d0
0001CB70 E080                       		asr.l	#8,d0
0001CB72 32C0                       		move.w	d0,(a1)+
0001CB74 D485                       		add.l	d5,d2
0001CB76 D284                       		add.l	d4,d1
0001CB78 51CE FFEE                  		dbf	d6,loc_1B1C0
0001CB7C                            
0001CB7C 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001CB80 0643 0018                  		addi.w	#$18,d3
0001CB84 51CF FFC0                  		dbf	d7,loc_1B19E
0001CB88                            
0001CB88 3A1F                       		move.w	(sp)+,d5
0001CB8A 41F9 00FF 0000             		lea	($FF0000).l,a0
0001CB90 7000                       		moveq	#0,d0
0001CB92 3038 F704                  		move.w	($FFFFF704).w,d0
0001CB96 80FC 0018                  		divu.w	#$18,d0
0001CB9A C0FC 0080                  		mulu.w	#$80,d0
0001CB9E D1C0                       		adda.l	d0,a0
0001CBA0 7000                       		moveq	#0,d0
0001CBA2 3038 F700                  		move.w	($FFFFF700).w,d0
0001CBA6 80FC 0018                  		divu.w	#$18,d0
0001CBAA D0C0                       		adda.w	d0,a0
0001CBAC 49F8 8000                  		lea	($FFFF8000).w,a4
0001CBB0 3E3C 000F                  		move.w	#$F,d7
0001CBB4                            
0001CBB4                            loc_1B20C:
0001CBB4 3C3C 000F                  		move.w	#$F,d6
0001CBB8                            
0001CBB8                            loc_1B210:
0001CBB8 7000                       		moveq	#0,d0
0001CBBA 1018                       		move.b	(a0)+,d0
0001CBBC 6700                       		beq.s	loc_1B268
0001CBBE 0C00 004E                  		cmpi.b	#$4E,d0
0001CBC2 6200                       		bhi.s	loc_1B268
0001CBC4 3614                       		move.w	(a4),d3
0001CBC6 0643 0120                  		addi.w	#$120,d3
0001CBCA 0C43 0070                  		cmpi.w	#$70,d3
0001CBCE 6500                       		bcs.s	loc_1B268
0001CBD0 0C43 01D0                  		cmpi.w	#$1D0,d3
0001CBD4 6400                       		bcc.s	loc_1B268
0001CBD6 342C 0002                  		move.w	2(a4),d2
0001CBDA 0642 00F0                  		addi.w	#$F0,d2
0001CBDE 0C42 0070                  		cmpi.w	#$70,d2
0001CBE2 6500                       		bcs.s	loc_1B268
0001CBE4 0C42 0170                  		cmpi.w	#$170,d2
0001CBE8 6400                       		bcc.s	loc_1B268
0001CBEA 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001CBF0 E748                       		lsl.w	#3,d0
0001CBF2 4BF5 0000                  		lea	(a5,d0.w),a5
0001CBF6 225D                       		movea.l	(a5)+,a1
0001CBF8 321D                       		move.w	(a5)+,d1
0001CBFA D241                       		add.w	d1,d1
0001CBFC D2F1 1000                  		adda.w	(a1,d1.w),a1
0001CC00 365D                       		movea.w	(a5)+,a3
0001CC02 7200                       		moveq	#0,d1
0001CC04 1219                       		move.b	(a1)+,d1
0001CC06 5301                       		subq.b	#1,d1
0001CC08 6B00                       		bmi.s	loc_1B268
0001CC0A 4EB9 0000 E23E             		jsr	sub_D762
0001CC10                            
0001CC10                            loc_1B268:
0001CC10 584C                       		addq.w	#4,a4
0001CC12 51CE FFA4                  		dbf	d6,loc_1B210
0001CC16                            
0001CC16 41E8 0070                  		lea	$70(a0),a0
0001CC1A 51CF FF98                  		dbf	d7,loc_1B20C
0001CC1E                            
0001CC1E 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001CC22 0C05 0050                  		cmpi.b	#$50,d5
0001CC26 6700                       		beq.s	loc_1B288
0001CC28 24BC 0000 0000             		move.l	#0,(a2)
0001CC2E 4E75                       		rts	
0001CC30                            ; ===========================================================================
0001CC30                            
0001CC30                            loc_1B288:
0001CC30 157C 0000 FFFB             		move.b	#0,-5(a2)
0001CC36 4E75                       		rts	
0001CC38                            ; End of function SS_ShowLayout
0001CC38                            
0001CC38                            ; ---------------------------------------------------------------------------
0001CC38                            ; Subroutine to	animate	walls and rings	in the special stage
0001CC38                            ; ---------------------------------------------------------------------------
0001CC38                            
0001CC38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC38                            
0001CC38                            
0001CC38                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001CC38 43F9 00FF 400C             		lea	($FF400C).l,a1
0001CC3E 7000                       		moveq	#0,d0
0001CC40 1038 F780                  		move.b	($FFFFF780).w,d0
0001CC44 E408                       		lsr.b	#2,d0
0001CC46 0240 000F                  		andi.w	#$F,d0
0001CC4A 7223                       		moveq	#$23,d1
0001CC4C                            
0001CC4C                            loc_1B2A4:
0001CC4C 3280                       		move.w	d0,(a1)
0001CC4E 5049                       		addq.w	#8,a1
0001CC50 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001CC54                            
0001CC54 43F9 00FF 4005             		lea	($FF4005).l,a1
0001CC5A 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001CC5E 6A00                       		bpl.s	loc_1B2C8
0001CC60 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001CC66 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001CC6A 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001CC70                            
0001CC70                            loc_1B2C8:
0001CC70 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001CC76 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001CC7A 6A00                       		bpl.s	loc_1B2E4
0001CC7C 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001CC82 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001CC86 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001CC8C                            
0001CC8C                            loc_1B2E4:
0001CC8C 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001CC90 1340 0138                  		move.b	d0,$138(a1)
0001CC94 1340 0160                  		move.b	d0,$160(a1)
0001CC98 1340 0148                  		move.b	d0,$148(a1)
0001CC9C 1340 0150                  		move.b	d0,$150(a1)
0001CCA0 1340 01D8                  		move.b	d0,$1D8(a1)
0001CCA4 1340 01E0                  		move.b	d0,$1E0(a1)
0001CCA8 1340 01E8                  		move.b	d0,$1E8(a1)
0001CCAC 1340 01F0                  		move.b	d0,$1F0(a1)
0001CCB0 1340 01F8                  		move.b	d0,$1F8(a1)
0001CCB4 1340 0200                  		move.b	d0,$200(a1)
0001CCB8 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001CCBC 6A00                       		bpl.s	loc_1B326
0001CCBE 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001CCC4 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001CCC8 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001CCCE                            
0001CCCE                            loc_1B326:
0001CCCE 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001CCD2 1340 0168                  		move.b	d0,$168(a1)
0001CCD6 1340 0170                  		move.b	d0,$170(a1)
0001CCDA 1340 0178                  		move.b	d0,$178(a1)
0001CCDE 1340 0180                  		move.b	d0,$180(a1)
0001CCE2 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001CCE6 6A00                       		bpl.s	loc_1B350
0001CCE8 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001CCEE 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001CCF2 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001CCF8                            
0001CCF8                            loc_1B350:
0001CCF8 43F9 00FF 4016             		lea	($FF4016).l,a1
0001CCFE 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001CD04 7000                       		moveq	#0,d0
0001CD06 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001CD0A D040                       		add.w	d0,d0
0001CD0C 41F0 0000                  		lea	(a0,d0.w),a0
0001CD10 3290                       		move.w	(a0),(a1)
0001CD12 3368 0002 0008             		move.w	2(a0),8(a1)
0001CD18 3368 0004 0010             		move.w	4(a0),$10(a1)
0001CD1E 3368 0006 0018             		move.w	6(a0),$18(a1)
0001CD24 3368 0008 0020             		move.w	8(a0),$20(a1)
0001CD2A 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001CD30 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001CD36 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001CD3C D0FC 0020                  		adda.w	#$20,a0
0001CD40 D2FC 0048                  		adda.w	#$48,a1
0001CD44 3290                       		move.w	(a0),(a1)
0001CD46 3368 0002 0008             		move.w	2(a0),8(a1)
0001CD4C 3368 0004 0010             		move.w	4(a0),$10(a1)
0001CD52 3368 0006 0018             		move.w	6(a0),$18(a1)
0001CD58 3368 0008 0020             		move.w	8(a0),$20(a1)
0001CD5E 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001CD64 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001CD6A 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001CD70 D0FC 0020                  		adda.w	#$20,a0
0001CD74 D2FC 0048                  		adda.w	#$48,a1
0001CD78 3290                       		move.w	(a0),(a1)
0001CD7A 3368 0002 0008             		move.w	2(a0),8(a1)
0001CD80 3368 0004 0010             		move.w	4(a0),$10(a1)
0001CD86 3368 0006 0018             		move.w	6(a0),$18(a1)
0001CD8C 3368 0008 0020             		move.w	8(a0),$20(a1)
0001CD92 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001CD98 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001CD9E 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001CDA4 D0FC 0020                  		adda.w	#$20,a0
0001CDA8 D2FC 0048                  		adda.w	#$48,a1
0001CDAC 3290                       		move.w	(a0),(a1)
0001CDAE 3368 0002 0008             		move.w	2(a0),8(a1)
0001CDB4 3368 0004 0010             		move.w	4(a0),$10(a1)
0001CDBA 3368 0006 0018             		move.w	6(a0),$18(a1)
0001CDC0 3368 0008 0020             		move.w	8(a0),$20(a1)
0001CDC6 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001CDCC 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001CDD2 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001CDD8 D0FC 0020                  		adda.w	#$20,a0
0001CDDC D2FC 0048                  		adda.w	#$48,a1
0001CDE0 4E75                       		rts	
0001CDE2                            ; End of function SS_AniWallsRings
0001CDE2                            
0001CDE2                            ; ===========================================================================
0001CDE2 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001CDF2 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001CE02 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001CE12 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001CE22 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001CE32 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001CE42 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001CE52 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001CE62                            ; ---------------------------------------------------------------------------
0001CE62                            ; Subroutine to	remove items when you collect them in the special stage
0001CE62                            ; ---------------------------------------------------------------------------
0001CE62                            
0001CE62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE62                            
0001CE62                            
0001CE62                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001CE62 45F9 00FF 4400             		lea	($FF4400).l,a2
0001CE68 303C 001F                  		move.w	#$1F,d0
0001CE6C                            
0001CE6C                            loc_1B4C4:
0001CE6C 4A12                       		tst.b	(a2)
0001CE6E 6700                       		beq.s	locret_1B4CE
0001CE70 504A                       		addq.w	#8,a2
0001CE72 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001CE76                            
0001CE76                            locret_1B4CE:
0001CE76 4E75                       		rts	
0001CE78                            ; End of function SS_RemoveCollectedItem
0001CE78                            
0001CE78                            ; ---------------------------------------------------------------------------
0001CE78                            ; Subroutine to	animate	special	stage items when you touch them
0001CE78                            ; ---------------------------------------------------------------------------
0001CE78                            
0001CE78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE78                            
0001CE78                            
0001CE78                            SS_AniItems:				; XREF: SS_ShowLayout
0001CE78 41F9 00FF 4400             		lea	($FF4400).l,a0
0001CE7E 3E3C 001F                  		move.w	#$1F,d7
0001CE82                            
0001CE82                            loc_1B4DA:
0001CE82 7000                       		moveq	#0,d0
0001CE84 1010                       		move.b	(a0),d0
0001CE86 6700                       		beq.s	loc_1B4E8
0001CE88 E548                       		lsl.w	#2,d0
0001CE8A 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001CE8E 4E91                       		jsr	(a1)
0001CE90                            
0001CE90                            loc_1B4E8:
0001CE90 5048                       		addq.w	#8,a0
0001CE92                            
0001CE92                            loc_1B4EA:
0001CE92 51CF FFEE                  		dbf	d7,loc_1B4DA
0001CE96                            
0001CE96 4E75                       		rts	
0001CE98                            ; End of function SS_AniItems
0001CE98                            
0001CE98                            ; ===========================================================================
0001CE98 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001CE9C 0000 0000                  		dc.l SS_AniBumper
0001CEA0 0000 0000                  		dc.l SS_Ani1Up
0001CEA4 0000 0000                  		dc.l SS_AniReverse
0001CEA8 0000 0000                  		dc.l SS_AniEmeraldSparks
0001CEAC 0000 0000                  		dc.l SS_AniGlassBlock
0001CEB0                            ; ===========================================================================
0001CEB0                            
0001CEB0                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001CEB0 5328 0002                  		subq.b	#1,2(a0)
0001CEB4 6A00                       		bpl.s	locret_1B530
0001CEB6 117C 0005 0002             		move.b	#5,2(a0)
0001CEBC 7000                       		moveq	#0,d0
0001CEBE 1028 0003                  		move.b	3(a0),d0
0001CEC2 5228 0003                  		addq.b	#1,3(a0)
0001CEC6 2268 0004                  		movea.l	4(a0),a1
0001CECA 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001CECE 1280                       		move.b	d0,(a1)
0001CED0 6600                       		bne.s	locret_1B530
0001CED2 4290                       		clr.l	(a0)
0001CED4 42A8 0004                  		clr.l	4(a0)
0001CED8                            
0001CED8                            locret_1B530:
0001CED8 4E75                       		rts	
0001CEDA                            ; ===========================================================================
0001CEDA 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001CEE0                            ; ===========================================================================
0001CEE0                            
0001CEE0                            SS_AniBumper:				; XREF: SS_AniIndex
0001CEE0 5328 0002                  		subq.b	#1,2(a0)
0001CEE4 6A00                       		bpl.s	locret_1B566
0001CEE6 117C 0007 0002             		move.b	#7,2(a0)
0001CEEC 7000                       		moveq	#0,d0
0001CEEE 1028 0003                  		move.b	3(a0),d0
0001CEF2 5228 0003                  		addq.b	#1,3(a0)
0001CEF6 2268 0004                  		movea.l	4(a0),a1
0001CEFA 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001CEFE 6600                       		bne.s	loc_1B564
0001CF00 4290                       		clr.l	(a0)
0001CF02 42A8 0004                  		clr.l	4(a0)
0001CF06 12BC 0025                  		move.b	#$25,(a1)
0001CF0A 4E75                       		rts	
0001CF0C                            ; ===========================================================================
0001CF0C                            
0001CF0C                            loc_1B564:
0001CF0C 1280                       		move.b	d0,(a1)
0001CF0E                            
0001CF0E                            locret_1B566:
0001CF0E 4E75                       		rts	
0001CF10                            ; ===========================================================================
0001CF10 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001CF16                            ; ===========================================================================
0001CF16                            
0001CF16                            SS_Ani1Up:				; XREF: SS_AniIndex
0001CF16 5328 0002                  		subq.b	#1,2(a0)
0001CF1A 6A00                       		bpl.s	locret_1B596
0001CF1C 117C 0005 0002             		move.b	#5,2(a0)
0001CF22 7000                       		moveq	#0,d0
0001CF24 1028 0003                  		move.b	3(a0),d0
0001CF28 5228 0003                  		addq.b	#1,3(a0)
0001CF2C 2268 0004                  		movea.l	4(a0),a1
0001CF30 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001CF34 1280                       		move.b	d0,(a1)
0001CF36 6600                       		bne.s	locret_1B596
0001CF38 4290                       		clr.l	(a0)
0001CF3A 42A8 0004                  		clr.l	4(a0)
0001CF3E                            
0001CF3E                            locret_1B596:
0001CF3E 4E75                       		rts	
0001CF40                            ; ===========================================================================
0001CF40 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001CF46                            ; ===========================================================================
0001CF46                            
0001CF46                            SS_AniReverse:				; XREF: SS_AniIndex
0001CF46 5328 0002                  		subq.b	#1,2(a0)
0001CF4A 6A00                       		bpl.s	locret_1B5CC
0001CF4C 117C 0007 0002             		move.b	#7,2(a0)
0001CF52 7000                       		moveq	#0,d0
0001CF54 1028 0003                  		move.b	3(a0),d0
0001CF58 5228 0003                  		addq.b	#1,3(a0)
0001CF5C 2268 0004                  		movea.l	4(a0),a1
0001CF60 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001CF64 6600                       		bne.s	loc_1B5CA
0001CF66 4290                       		clr.l	(a0)
0001CF68 42A8 0004                  		clr.l	4(a0)
0001CF6C 12BC 002B                  		move.b	#$2B,(a1)
0001CF70 4E75                       		rts	
0001CF72                            ; ===========================================================================
0001CF72                            
0001CF72                            loc_1B5CA:
0001CF72 1280                       		move.b	d0,(a1)
0001CF74                            
0001CF74                            locret_1B5CC:
0001CF74 4E75                       		rts	
0001CF76                            ; ===========================================================================
0001CF76 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001CF7C                            ; ===========================================================================
0001CF7C                            
0001CF7C                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001CF7C 5328 0002                  		subq.b	#1,2(a0)
0001CF80 6A00                       		bpl.s	locret_1B60C
0001CF82 117C 0005 0002             		move.b	#5,2(a0)
0001CF88 7000                       		moveq	#0,d0
0001CF8A 1028 0003                  		move.b	3(a0),d0
0001CF8E 5228 0003                  		addq.b	#1,3(a0)
0001CF92 2268 0004                  		movea.l	4(a0),a1
0001CF96 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001CF9A 1280                       		move.b	d0,(a1)
0001CF9C 6600                       		bne.s	locret_1B60C
0001CF9E 4290                       		clr.l	(a0)
0001CFA0 42A8 0004                  		clr.l	4(a0)
0001CFA4 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001CFAA 303C 00A8                  		move.w	#$A8,d0
0001CFAE 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001CFB4                            
0001CFB4                            locret_1B60C:
0001CFB4 4E75                       		rts	
0001CFB6                            ; ===========================================================================
0001CFB6 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001CFBC                            ; ===========================================================================
0001CFBC                            
0001CFBC                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001CFBC 5328 0002                  		subq.b	#1,2(a0)
0001CFC0 6A00                       		bpl.s	locret_1B640
0001CFC2 117C 0001 0002             		move.b	#1,2(a0)
0001CFC8 7000                       		moveq	#0,d0
0001CFCA 1028 0003                  		move.b	3(a0),d0
0001CFCE 5228 0003                  		addq.b	#1,3(a0)
0001CFD2 2268 0004                  		movea.l	4(a0),a1
0001CFD6 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001CFDA 1280                       		move.b	d0,(a1)
0001CFDC 6600                       		bne.s	locret_1B640
0001CFDE 12A8 0004                  		move.b	4(a0),(a1)
0001CFE2 4290                       		clr.l	(a0)
0001CFE4 42A8 0004                  		clr.l	4(a0)
0001CFE8                            
0001CFE8                            locret_1B640:
0001CFE8 4E75                       		rts	
0001CFEA                            ; ===========================================================================
0001CFEA 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001CFF4                            ; ---------------------------------------------------------------------------
0001CFF4                            ; Special stage	layout pointers
0001CFF4                            ; ---------------------------------------------------------------------------
0001CFF4                            SS_LayoutIndex:
0001CFF4                            	include "_inc\Special stage layout pointers.asm"
0001CFF4                            ; ---------------------------------------------------------------------------
0001CFF4                            ; Special stage	layout pointers
0001CFF4                            ; ---------------------------------------------------------------------------
0001CFF4 0000 0000                  	dc.l SS_1
0001CFF8 0000 0000                  	dc.l SS_2
0001CFFC 0000 0000                  	dc.l SS_3
0001D000 0000 0000                  	dc.l SS_4
0001D004 0000 0000                  	dc.l SS_5
0001D008 0000 0000                  	dc.l SS_6
0001D00C                            	even
0001D00C                            	even
0001D00C                            
0001D00C                            ; ---------------------------------------------------------------------------
0001D00C                            ; Special stage	start locations
0001D00C                            ; ---------------------------------------------------------------------------
0001D00C                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001D024                            		even
0001D024                            
0001D024                            ; ---------------------------------------------------------------------------
0001D024                            ; Subroutine to	load special stage layout
0001D024                            ; ---------------------------------------------------------------------------
0001D024                            
0001D024                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D024                            
0001D024                            
0001D024                            SS_Load:				; XREF: SpecialStage
0001D024 7000                       		moveq	#0,d0
0001D026 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001D02A 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001D02E 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001D034 6500                       		bcs.s	SS_ChkEmldNum
0001D036 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001D03C                            
0001D03C                            SS_ChkEmldNum:
0001D03C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001D042 6700                       		beq.s	SS_LoadData	; if yes, branch
0001D044 7200                       		moveq	#0,d1
0001D046 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001D04A 5301                       		subq.b	#1,d1
0001D04C 6500                       		bcs.s	SS_LoadData
0001D04E 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001D052                            
0001D052                            SS_ChkEmldLoop:	
0001D052 B033 1000                  		cmp.b	(a3,d1.w),d0
0001D056 6600                       		bne.s	SS_ChkEmldRepeat
0001D058 60CA                       		bra.s	SS_Load
0001D05A                            ; ===========================================================================
0001D05A                            
0001D05A                            SS_ChkEmldRepeat:
0001D05A 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001D05E                            
0001D05E                            SS_LoadData:
0001D05E E548                       		lsl.w	#2,d0
0001D060 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001D064 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001D068 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001D06C 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001D070 43F9 00FF 4000             		lea	($FF4000).l,a1
0001D076 303C 0000                  		move.w	#0,d0
0001D07A 4EB9 0000 1888             		jsr	(EniDec).l
0001D080 43F9 00FF 0000             		lea	($FF0000).l,a1
0001D086 303C 0FFF                  		move.w	#$FFF,d0
0001D08A                            
0001D08A                            SS_ClrRAM3:
0001D08A 4299                       		clr.l	(a1)+
0001D08C 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001D090                            
0001D090 43F9 00FF 1020             		lea	($FF1020).l,a1
0001D096 41F9 00FF 4000             		lea	($FF4000).l,a0
0001D09C 723F                       		moveq	#$3F,d1
0001D09E                            
0001D09E                            loc_1B6F6:
0001D09E 743F                       		moveq	#$3F,d2
0001D0A0                            
0001D0A0                            loc_1B6F8:
0001D0A0 12D8                       		move.b	(a0)+,(a1)+
0001D0A2 51CA FFFC                  		dbf	d2,loc_1B6F8
0001D0A6                            
0001D0A6 43E9 0040                  		lea	$40(a1),a1
0001D0AA 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001D0AE                            
0001D0AE 43F9 00FF 4008             		lea	($FF4008).l,a1
0001D0B4 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001D0BA 724D                       		moveq	#$4D,d1
0001D0BC                            
0001D0BC                            loc_1B714:
0001D0BC 22D8                       		move.l	(a0)+,(a1)+
0001D0BE 32FC 0000                  		move.w	#0,(a1)+
0001D0C2 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001D0C8 32D8                       		move.w	(a0)+,(a1)+
0001D0CA 51C9 FFF0                  		dbf	d1,loc_1B714
0001D0CE                            
0001D0CE 43F9 00FF 4400             		lea	($FF4400).l,a1
0001D0D4 323C 003F                  		move.w	#$3F,d1
0001D0D8                            
0001D0D8                            loc_1B730:
0001D0D8                            
0001D0D8 4299                       		clr.l	(a1)+
0001D0DA 51C9 FFFC                  		dbf	d1,loc_1B730
0001D0DE                            
0001D0DE 4E75                       		rts	
0001D0E0                            ; End of function SS_Load
0001D0E0                            
0001D0E0                            ; ===========================================================================
0001D0E0                            ; ---------------------------------------------------------------------------
0001D0E0                            ; Special stage	mappings and VRAM pointers
0001D0E0                            ; ---------------------------------------------------------------------------
0001D0E0                            SS_MapIndex:
0001D0E0                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001D0E0                            ; ---------------------------------------------------------------------------
0001D0E0                            ; Special stage	mappings and VRAM pointers
0001D0E0                            ; ---------------------------------------------------------------------------
0001D0E0 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001D0E4 0142                       	dc.w $142		; VRAM setting
0001D0E6 0000 0000                  	dc.l Map_SSWalls
0001D0EA 0142                       	dc.w $142
0001D0EC 0000 0000                  	dc.l Map_SSWalls
0001D0F0 0142                       	dc.w $142
0001D0F2 0000 0000                  	dc.l Map_SSWalls
0001D0F6 0142                       	dc.w $142
0001D0F8 0000 0000                  	dc.l Map_SSWalls
0001D0FC 0142                       	dc.w $142
0001D0FE 0000 0000                  	dc.l Map_SSWalls
0001D102 0142                       	dc.w $142
0001D104 0000 0000                  	dc.l Map_SSWalls
0001D108 0142                       	dc.w $142
0001D10A 0000 0000                  	dc.l Map_SSWalls
0001D10E 0142                       	dc.w $142
0001D110 0000 0000                  	dc.l Map_SSWalls
0001D114 0142                       	dc.w $142
0001D116 0000 0000                  	dc.l Map_SSWalls
0001D11A 2142                       	dc.w $2142
0001D11C 0000 0000                  	dc.l Map_SSWalls
0001D120 2142                       	dc.w $2142
0001D122 0000 0000                  	dc.l Map_SSWalls
0001D126 2142                       	dc.w $2142
0001D128 0000 0000                  	dc.l Map_SSWalls
0001D12C 2142                       	dc.w $2142
0001D12E 0000 0000                  	dc.l Map_SSWalls
0001D132 2142                       	dc.w $2142
0001D134 0000 0000                  	dc.l Map_SSWalls
0001D138 2142                       	dc.w $2142
0001D13A 0000 0000                  	dc.l Map_SSWalls
0001D13E 2142                       	dc.w $2142
0001D140 0000 0000                  	dc.l Map_SSWalls
0001D144 2142                       	dc.w $2142
0001D146 0000 0000                  	dc.l Map_SSWalls
0001D14A 2142                       	dc.w $2142
0001D14C 0000 0000                  	dc.l Map_SSWalls
0001D150 4142                       	dc.w $4142
0001D152 0000 0000                  	dc.l Map_SSWalls
0001D156 4142                       	dc.w $4142
0001D158 0000 0000                  	dc.l Map_SSWalls
0001D15C 4142                       	dc.w $4142
0001D15E 0000 0000                  	dc.l Map_SSWalls
0001D162 4142                       	dc.w $4142
0001D164 0000 0000                  	dc.l Map_SSWalls
0001D168 4142                       	dc.w $4142
0001D16A 0000 0000                  	dc.l Map_SSWalls
0001D16E 4142                       	dc.w $4142
0001D170 0000 0000                  	dc.l Map_SSWalls
0001D174 4142                       	dc.w $4142
0001D176 0000 0000                  	dc.l Map_SSWalls
0001D17A 4142                       	dc.w $4142
0001D17C 0000 0000                  	dc.l Map_SSWalls
0001D180 4142                       	dc.w $4142
0001D182 0000 0000                  	dc.l Map_SSWalls
0001D186 6142                       	dc.w $6142
0001D188 0000 0000                  	dc.l Map_SSWalls
0001D18C 6142                       	dc.w $6142
0001D18E 0000 0000                  	dc.l Map_SSWalls
0001D192 6142                       	dc.w $6142
0001D194 0000 0000                  	dc.l Map_SSWalls
0001D198 6142                       	dc.w $6142
0001D19A 0000 0000                  	dc.l Map_SSWalls
0001D19E 6142                       	dc.w $6142
0001D1A0 0000 0000                  	dc.l Map_SSWalls
0001D1A4 6142                       	dc.w $6142
0001D1A6 0000 0000                  	dc.l Map_SSWalls
0001D1AA 6142                       	dc.w $6142
0001D1AC 0000 0000                  	dc.l Map_SSWalls
0001D1B0 6142                       	dc.w $6142
0001D1B2 0000 0000                  	dc.l Map_SSWalls
0001D1B6 6142                       	dc.w $6142
0001D1B8 0000 F5E6                  	dc.l Map_obj47
0001D1BC 023B                       	dc.w $23B
0001D1BE 0000 0000                  	dc.l Map_SS_R
0001D1C2 0570                       	dc.w $570
0001D1C4 0000 0000                  	dc.l Map_SS_R
0001D1C8 0251                       	dc.w $251
0001D1CA 0000 0000                  	dc.l Map_SS_R
0001D1CE 0370                       	dc.w $370
0001D1D0 0000 0000                  	dc.l Map_SS_Up
0001D1D4 0263                       	dc.w $263
0001D1D6 0000 0000                  	dc.l Map_SS_Down
0001D1DA 0263                       	dc.w $263
0001D1DC 0000 0000                  	dc.l Map_SS_R
0001D1E0 22F0                       	dc.w $22F0
0001D1E2 0000 0000                  	dc.l Map_SS_Glass
0001D1E6 0470                       	dc.w $470
0001D1E8 0000 0000                  	dc.l Map_SS_Glass
0001D1EC 05F0                       	dc.w $5F0
0001D1EE 0000 0000                  	dc.l Map_SS_Glass
0001D1F2 65F0                       	dc.w $65F0
0001D1F4 0000 0000                  	dc.l Map_SS_Glass
0001D1F8 25F0                       	dc.w $25F0
0001D1FA 0000 0000                  	dc.l Map_SS_Glass
0001D1FE 45F0                       	dc.w $45F0
0001D200 0000 0000                  	dc.l Map_SS_R
0001D204 02F0                       	dc.w $2F0
0001D206 0100 F5E6                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001D20A 023B                       	dc.w $23B
0001D20C 0200 F5E6                  	dc.l Map_obj47+$2000000
0001D210 023B                       	dc.w $23B
0001D212 0000 0000                  	dc.l Map_SS_R
0001D216 0797                       	dc.w $797
0001D218 0000 0000                  	dc.l Map_SS_R
0001D21C 07A0                       	dc.w $7A0
0001D21E 0000 0000                  	dc.l Map_SS_R
0001D222 07A9                       	dc.w $7A9
0001D224 0000 0000                  	dc.l Map_SS_R
0001D228 0797                       	dc.w $797
0001D22A 0000 0000                  	dc.l Map_SS_R
0001D22E 07A0                       	dc.w $7A0
0001D230 0000 0000                  	dc.l Map_SS_R
0001D234 07A9                       	dc.w $7A9
0001D236 0000 AA32                  	dc.l Map_obj25
0001D23A 27B2                       	dc.w $27B2
0001D23C 0000 0000                  	dc.l Map_SS_Chaos3
0001D240 0770                       	dc.w $770
0001D242 0000 0000                  	dc.l Map_SS_Chaos3
0001D246 2770                       	dc.w $2770
0001D248 0000 0000                  	dc.l Map_SS_Chaos3
0001D24C 4770                       	dc.w $4770
0001D24E 0000 0000                  	dc.l Map_SS_Chaos3
0001D252 6770                       	dc.w $6770
0001D254 0000 0000                  	dc.l Map_SS_Chaos1
0001D258 0770                       	dc.w $770
0001D25A 0000 0000                  	dc.l Map_SS_Chaos2
0001D25E 0770                       	dc.w $770
0001D260 0000 0000                  	dc.l Map_SS_R
0001D264 04F0                       	dc.w $4F0
0001D266 0400 AA32                  	dc.l Map_obj25+$4000000
0001D26A 27B2                       	dc.w $27B2
0001D26C 0500 AA32                  	dc.l Map_obj25+$5000000
0001D270 27B2                       	dc.w $27B2
0001D272 0600 AA32                  	dc.l Map_obj25+$6000000
0001D276 27B2                       	dc.w $27B2
0001D278 0700 AA32                  	dc.l Map_obj25+$7000000
0001D27C 27B2                       	dc.w $27B2
0001D27E 0000 0000                  	dc.l Map_SS_Glass
0001D282 23F0                       	dc.w $23F0
0001D284 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001D288 23F0                       	dc.w $23F0
0001D28A 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001D28E 23F0                       	dc.w $23F0
0001D290 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001D294 23F0                       	dc.w $23F0
0001D296 0000 0000                  	dc.l Map_SS_R+$2000000
0001D29A 04F0                       	dc.w $4F0
0001D29C 0000 0000                  	dc.l Map_SS_Glass
0001D2A0 05F0                       	dc.w $5F0
0001D2A2 0000 0000                  	dc.l Map_SS_Glass
0001D2A6 65F0                       	dc.w $65F0
0001D2A8 0000 0000                  	dc.l Map_SS_Glass
0001D2AC 25F0                       	dc.w $25F0
0001D2AE 0000 0000                  	dc.l Map_SS_Glass
0001D2B2 45F0                       	dc.w $45F0
0001D2B2 45F0                       	dc.w $45F0
0001D2B4                            
0001D2B4                            ; ---------------------------------------------------------------------------
0001D2B4                            ; Sprite mappings - special stage "R" block
0001D2B4                            ; ---------------------------------------------------------------------------
0001D2B4                            Map_SS_R:
0001D2B4                            	include "_maps\SSRblock.asm"
0001D2B4                            ; ---------------------------------------------------------------------------
0001D2B4                            ; Sprite mappings - special stage "R" block
0001D2B4                            ; ---------------------------------------------------------------------------
0001D2B4 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001D2B8 0000                       		dc.w byte_1B91E-Map_SS_R
0001D2BA 01                         byte_1B912:	dc.b 1
0001D2BB F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001D2C0 01                         byte_1B918:	dc.b 1
0001D2C1 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001D2C6 00                         byte_1B91E:	dc.b 0
0001D2C8 00                         		even
0001D2C8 00                         		even
0001D2C8                            
0001D2C8                            ; ---------------------------------------------------------------------------
0001D2C8                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001D2C8                            ; ---------------------------------------------------------------------------
0001D2C8                            Map_SS_Glass:
0001D2C8                            	include "_maps\SSglassblock.asm"
0001D2C8                            ; ---------------------------------------------------------------------------
0001D2C8                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001D2C8                            ; ---------------------------------------------------------------------------
0001D2C8 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001D2CC 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001D2D0 01                         byte_1B928:	dc.b 1
0001D2D1 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001D2D6 01                         byte_1B92E:	dc.b 1
0001D2D7 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001D2DC 01                         byte_1B934:	dc.b 1
0001D2DD F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001D2E2 01                         byte_1B93A:	dc.b 1
0001D2E3 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001D2E8                            		even
0001D2E8                            		even
0001D2E8                            
0001D2E8                            ; ---------------------------------------------------------------------------
0001D2E8                            ; Sprite mappings - special stage "UP" block
0001D2E8                            ; ---------------------------------------------------------------------------
0001D2E8                            Map_SS_Up:
0001D2E8                            	include "_maps\SSUPblock.asm"
0001D2E8                            ; ---------------------------------------------------------------------------
0001D2E8                            ; Sprite mappings - special stage "UP" block
0001D2E8                            ; ---------------------------------------------------------------------------
0001D2E8 0000                       		dc.w byte_1B944-Map_SS_Up
0001D2EA 0000                       		dc.w byte_1B94A-Map_SS_Up
0001D2EC 01                         byte_1B944:	dc.b 1
0001D2ED F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001D2F2 01                         byte_1B94A:	dc.b 1
0001D2F3 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001D2F8                            		even
0001D2F8                            		even
0001D2F8                            
0001D2F8                            ; ---------------------------------------------------------------------------
0001D2F8                            ; Sprite mappings - special stage "DOWN" block
0001D2F8                            ; ---------------------------------------------------------------------------
0001D2F8                            Map_SS_Down:
0001D2F8                            	include "_maps\SSDOWNblock.asm"
0001D2F8                            ; ---------------------------------------------------------------------------
0001D2F8                            ; Sprite mappings - special stage "DOWN" block
0001D2F8                            ; ---------------------------------------------------------------------------
0001D2F8 0000                       		dc.w byte_1B954-Map_SS_Down
0001D2FA 0000                       		dc.w byte_1B95A-Map_SS_Down
0001D2FC 01                         byte_1B954:	dc.b 1
0001D2FD F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001D302 01                         byte_1B95A:	dc.b 1
0001D303 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001D308                            		even
0001D308                            		even
0001D308                            
0001D308                            ; ---------------------------------------------------------------------------
0001D308                            ; Sprite mappings - special stage chaos	emeralds
0001D308                            ; ---------------------------------------------------------------------------
0001D308 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001D30A 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001D30C 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001D30E 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001D310 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001D312 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001D314 01                         byte_1B96C:	dc.b 1
0001D315 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001D31A 01                         byte_1B972:	dc.b 1
0001D31B F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001D320 01                         byte_1B978:	dc.b 1
0001D321 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001D326 01                         byte_1B97E:	dc.b 1
0001D327 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001D32C                            		even
0001D32C                            ; ===========================================================================
0001D32C                            ; ---------------------------------------------------------------------------
0001D32C                            ; Object 09 - Sonic (special stage)
0001D32C                            ; ---------------------------------------------------------------------------
0001D32C                            
0001D32C                            Obj09:					; XREF: Obj_Index
0001D32C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001D330 6700                       		beq.s	Obj09_Normal	; if not, branch
0001D332 6100 0000                  		bsr.w	SS_FixCamera
0001D336 6000 0000                  		bra.w	DebugMode
0001D33A                            ; ===========================================================================
0001D33A                            
0001D33A                            Obj09_Normal:
0001D33A 7000                       		moveq	#0,d0
0001D33C 1028 0024                  		move.b	$24(a0),d0
0001D340 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001D344 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001D348                            ; ===========================================================================
0001D348 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001D34A 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001D34C 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001D34E 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001D350                            ; ===========================================================================
0001D350                            
0001D350                            Obj09_Main:				; XREF: Obj09_Index
0001D350 5428 0024                  		addq.b	#2,$24(a0)
0001D354 117C 000E 0016             		move.b	#$E,$16(a0)
0001D35A 117C 0007 0017             		move.b	#7,$17(a0)
0001D360 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001D368 317C 0780 0002             		move.w	#$780,2(a0)
0001D36E 117C 0004 0001             		move.b	#4,1(a0)
0001D374 117C 0000 0018             		move.b	#0,$18(a0)
0001D37A 117C 0002 001C             		move.b	#2,$1C(a0)
0001D380 08E8 0002 0022             		bset	#2,$22(a0)
0001D386 08E8 0001 0022             		bset	#1,$22(a0)
0001D38C                            
0001D38C                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001D38C 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001D390 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001D392 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001D398 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001D39A 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001D3A0                            
0001D3A0                            Obj09_NoDebug:
0001D3A0 117C 0000 0030             		move.b	#0,$30(a0)
0001D3A6 7000                       		moveq	#0,d0
0001D3A8 1028 0022                  		move.b	$22(a0),d0
0001D3AC 0240 0002                  		andi.w	#2,d0
0001D3B0 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001D3B4 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001D3B8 4EB9 0001 50D6             		jsr	LoadSonicDynPLC
0001D3BE 4EF9 0000 E0DE             		jmp	DisplaySprite
0001D3C4                            ; ===========================================================================
0001D3C4 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001D3C6 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001D3C8                            ; ===========================================================================
0001D3C8                            
0001D3C8                            Obj09_OnWall:				; XREF: Obj09_Modes
0001D3C8 6100 0000                  		bsr.w	Obj09_Jump
0001D3CC 6100 0000                  		bsr.w	Obj09_Move
0001D3D0 6100 0000                  		bsr.w	Obj09_Fall
0001D3D4 6000                       		bra.s	Obj09_Display
0001D3D6                            ; ===========================================================================
0001D3D6                            
0001D3D6                            Obj09_InAir:				; XREF: Obj09_Modes
0001D3D6 6100 0000                  		bsr.w	nullsub_2
0001D3DA 6100 0000                  		bsr.w	Obj09_Move
0001D3DE 6100 0000                  		bsr.w	Obj09_Fall
0001D3E2                            
0001D3E2                            Obj09_Display:				; XREF: Obj09_OnWall
0001D3E2 6100 0000                  		bsr.w	Obj09_ChkItems
0001D3E6 6100 0000                  		bsr.w	Obj09_ChkItems2
0001D3EA 4EB9 0000 E0B8             		jsr	SpeedToPos
0001D3F0 6100 0000                  		bsr.w	SS_FixCamera
0001D3F4 3038 F780                  		move.w	($FFFFF780).w,d0
0001D3F8 D078 F782                  		add.w	($FFFFF782).w,d0
0001D3FC 31C0 F780                  		move.w	d0,($FFFFF780).w
0001D400 4EB9 0001 4B9E             		jsr	Sonic_Animate
0001D406 4E75                       		rts	
0001D408                            
0001D408                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D408                            
0001D408                            
0001D408                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001D408 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001D40E 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001D410 6100 0000                  		bsr.w	Obj09_MoveLeft
0001D414                            
0001D414                            Obj09_ChkRight:
0001D414 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001D41A 6700                       		beq.s	loc_1BA78	; if not, branch
0001D41C 6100 0000                  		bsr.w	Obj09_MoveRight
0001D420                            
0001D420                            loc_1BA78:
0001D420 1038 F602                  		move.b	($FFFFF602).w,d0
0001D424 0200 000C                  		andi.b	#$C,d0
0001D428 6600                       		bne.s	loc_1BAA8
0001D42A 3028 0014                  		move.w	$14(a0),d0
0001D42E 6700                       		beq.s	loc_1BAA8
0001D430 6B00                       		bmi.s	loc_1BA9A
0001D432 0440 000C                  		subi.w	#$C,d0
0001D436 6400                       		bcc.s	loc_1BA94
0001D438 303C 0000                  		move.w	#0,d0
0001D43C                            
0001D43C                            loc_1BA94:
0001D43C 3140 0014                  		move.w	d0,$14(a0)
0001D440 6000                       		bra.s	loc_1BAA8
0001D442                            ; ===========================================================================
0001D442                            
0001D442                            loc_1BA9A:
0001D442 0640 000C                  		addi.w	#$C,d0
0001D446 6400                       		bcc.s	loc_1BAA4
0001D448 303C 0000                  		move.w	#0,d0
0001D44C                            
0001D44C                            loc_1BAA4:
0001D44C 3140 0014                  		move.w	d0,$14(a0)
0001D450                            
0001D450                            loc_1BAA8:
0001D450 1038 F780                  		move.b	($FFFFF780).w,d0
0001D454 0600 0020                  		addi.b	#$20,d0
0001D458 0200 00C0                  		andi.b	#$C0,d0
0001D45C 4400                       		neg.b	d0
0001D45E 4EB9 0000 33D4             		jsr	(CalcSine).l
0001D464 C3E8 0014                  		muls.w	$14(a0),d1
0001D468 D3A8 0008                  		add.l	d1,8(a0)
0001D46C C1E8 0014                  		muls.w	$14(a0),d0
0001D470 D1A8 000C                  		add.l	d0,$C(a0)
0001D474 48E7 C000                  		movem.l	d0-d1,-(sp)
0001D478 2428 000C                  		move.l	$C(a0),d2
0001D47C 2628 0008                  		move.l	8(a0),d3
0001D480 6100 0000                  		bsr.w	sub_1BCE8
0001D484 6700                       		beq.s	loc_1BAF2
0001D486 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001D48A 93A8 0008                  		sub.l	d1,8(a0)
0001D48E 91A8 000C                  		sub.l	d0,$C(a0)
0001D492 317C 0000 0014             		move.w	#0,$14(a0)
0001D498 4E75                       		rts	
0001D49A                            ; ===========================================================================
0001D49A                            
0001D49A                            loc_1BAF2:
0001D49A 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001D49E 4E75                       		rts	
0001D4A0                            ; End of function Obj09_Move
0001D4A0                            
0001D4A0                            
0001D4A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D4A0                            
0001D4A0                            
0001D4A0                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001D4A0 08E8 0000 0022             		bset	#0,$22(a0)
0001D4A6 3028 0014                  		move.w	$14(a0),d0
0001D4AA 6700                       		beq.s	loc_1BB06
0001D4AC 6A00                       		bpl.s	loc_1BB1A
0001D4AE                            
0001D4AE                            loc_1BB06:
0001D4AE 0440 000C                  		subi.w	#$C,d0
0001D4B2 0C40 F800                  		cmpi.w	#-$800,d0
0001D4B6 6E00                       		bgt.s	loc_1BB14
0001D4B8 303C F800                  		move.w	#-$800,d0
0001D4BC                            
0001D4BC                            loc_1BB14:
0001D4BC 3140 0014                  		move.w	d0,$14(a0)
0001D4C0 4E75                       		rts	
0001D4C2                            ; ===========================================================================
0001D4C2                            
0001D4C2                            loc_1BB1A:
0001D4C2 0440 0040                  		subi.w	#$40,d0
0001D4C6 6400                       		bcc.s	loc_1BB22
0001D4C8 4E71                       		nop	
0001D4CA                            
0001D4CA                            loc_1BB22:
0001D4CA 3140 0014                  		move.w	d0,$14(a0)
0001D4CE 4E75                       		rts	
0001D4D0                            ; End of function Obj09_MoveLeft
0001D4D0                            
0001D4D0                            
0001D4D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D4D0                            
0001D4D0                            
0001D4D0                            Obj09_MoveRight:			; XREF: Obj09_Move
0001D4D0 08A8 0000 0022             		bclr	#0,$22(a0)
0001D4D6 3028 0014                  		move.w	$14(a0),d0
0001D4DA 6B00                       		bmi.s	loc_1BB48
0001D4DC 0640 000C                  		addi.w	#$C,d0
0001D4E0 0C40 0800                  		cmpi.w	#$800,d0
0001D4E4 6D00                       		blt.s	loc_1BB42
0001D4E6 303C 0800                  		move.w	#$800,d0
0001D4EA                            
0001D4EA                            loc_1BB42:
0001D4EA 3140 0014                  		move.w	d0,$14(a0)
0001D4EE 6000                       		bra.s	locret_1BB54
0001D4F0                            ; ===========================================================================
0001D4F0                            
0001D4F0                            loc_1BB48:
0001D4F0 0640 0040                  		addi.w	#$40,d0
0001D4F4 6400                       		bcc.s	loc_1BB50
0001D4F6 4E71                       		nop	
0001D4F8                            
0001D4F8                            loc_1BB50:
0001D4F8 3140 0014                  		move.w	d0,$14(a0)
0001D4FC                            
0001D4FC                            locret_1BB54:
0001D4FC 4E75                       		rts	
0001D4FE                            ; End of function Obj09_MoveRight
0001D4FE                            
0001D4FE                            
0001D4FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D4FE                            
0001D4FE                            
0001D4FE                            Obj09_Jump:				; XREF: Obj09_OnWall
0001D4FE 1038 F603                  		move.b	($FFFFF603).w,d0
0001D502 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001D506 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001D508 1038 F780                  		move.b	($FFFFF780).w,d0
0001D50C 0200 00FC                  		andi.b	#$FC,d0
0001D510 4400                       		neg.b	d0
0001D512 0400 0040                  		subi.b	#$40,d0
0001D516 4EB9 0000 33D4             		jsr	(CalcSine).l
0001D51C C3FC 0680                  		muls.w	#$680,d1
0001D520 E081                       		asr.l	#8,d1
0001D522 3141 0010                  		move.w	d1,$10(a0)
0001D526 C1FC 0680                  		muls.w	#$680,d0
0001D52A E080                       		asr.l	#8,d0
0001D52C 3140 0012                  		move.w	d0,$12(a0)
0001D530 08E8 0001 0022             		bset	#1,$22(a0)
0001D536 303C 00A0                  		move.w	#$A0,d0
0001D53A 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play jumping sound
0001D540                            
0001D540                            Obj09_NoJump:
0001D540 4E75                       		rts	
0001D542                            ; End of function Obj09_Jump
0001D542                            
0001D542                            
0001D542                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D542                            
0001D542                            
0001D542                            nullsub_2:				; XREF: Obj09_InAir
0001D542 4E75                       		rts	
0001D544                            ; End of function nullsub_2
0001D544                            
0001D544                            ; ===========================================================================
0001D544                            ; ---------------------------------------------------------------------------
0001D544                            ; unused subroutine to limit Sonic's upward vertical speed
0001D544                            ; ---------------------------------------------------------------------------
0001D544 323C FC00                  		move.w	#-$400,d1
0001D548 B268 0012                  		cmp.w	$12(a0),d1
0001D54C 6F00                       		ble.s	locret_1BBB4
0001D54E 1038 F602                  		move.b	($FFFFF602).w,d0
0001D552 0200 0070                  		andi.b	#$70,d0
0001D556 6600                       		bne.s	locret_1BBB4
0001D558 3141 0012                  		move.w	d1,$12(a0)
0001D55C                            
0001D55C                            locret_1BBB4:
0001D55C 4E75                       		rts	
0001D55E                            ; ---------------------------------------------------------------------------
0001D55E                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001D55E                            ; ---------------------------------------------------------------------------
0001D55E                            
0001D55E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D55E                            
0001D55E                            
0001D55E                            SS_FixCamera:				; XREF: Obj09
0001D55E 3428 000C                  		move.w	$C(a0),d2
0001D562 3628 0008                  		move.w	8(a0),d3
0001D566 3038 F700                  		move.w	($FFFFF700).w,d0
0001D56A 0443 00A0                  		subi.w	#$A0,d3
0001D56E 6500                       		bcs.s	loc_1BBCE
0001D570 9043                       		sub.w	d3,d0
0001D572 9178 F700                  		sub.w	d0,($FFFFF700).w
0001D576                            
0001D576                            loc_1BBCE:
0001D576 3038 F704                  		move.w	($FFFFF704).w,d0
0001D57A 0442 0070                  		subi.w	#$70,d2
0001D57E 6500                       		bcs.s	locret_1BBDE
0001D580 9042                       		sub.w	d2,d0
0001D582 9178 F704                  		sub.w	d0,($FFFFF704).w
0001D586                            
0001D586                            locret_1BBDE:
0001D586 4E75                       		rts	
0001D588                            ; End of function SS_FixCamera
0001D588                            
0001D588                            ; ===========================================================================
0001D588                            
0001D588                            Obj09_ExitStage:			; XREF: Obj09_Index
0001D588 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001D58E 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001D594 6600                       		bne.s	loc_1BBF4
0001D596 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001D59C                            
0001D59C                            loc_1BBF4:
0001D59C 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001D5A2 6D00                       		blt.s	loc_1BC12
0001D5A4 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001D5AA 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001D5B0 5428 0024                  		addq.b	#2,$24(a0)
0001D5B4 317C 003C 0038             		move.w	#$3C,$38(a0)
0001D5BA                            
0001D5BA                            loc_1BC12:
0001D5BA 3038 F780                  		move.w	($FFFFF780).w,d0
0001D5BE D078 F782                  		add.w	($FFFFF782).w,d0
0001D5C2 31C0 F780                  		move.w	d0,($FFFFF780).w
0001D5C6 4EB9 0001 4B9E             		jsr	Sonic_Animate
0001D5CC 4EB9 0001 50D6             		jsr	LoadSonicDynPLC
0001D5D2 6100 FF8A                  		bsr.w	SS_FixCamera
0001D5D6 4EF9 0000 E0DE             		jmp	DisplaySprite
0001D5DC                            ; ===========================================================================
0001D5DC                            
0001D5DC                            Obj09_Exit2:				; XREF: Obj09_Index
0001D5DC 5368 0038                  		subq.w	#1,$38(a0)
0001D5E0 6600                       		bne.s	loc_1BC40
0001D5E2 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001D5E8                            
0001D5E8                            loc_1BC40:
0001D5E8 4EB9 0001 4B9E             		jsr	Sonic_Animate
0001D5EE 4EB9 0001 50D6             		jsr	LoadSonicDynPLC
0001D5F4 6100 FF68                  		bsr.w	SS_FixCamera
0001D5F8 4EF9 0000 E0DE             		jmp	DisplaySprite
0001D5FE                            
0001D5FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D5FE                            
0001D5FE                            
0001D5FE                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001D5FE 2428 000C                  		move.l	$C(a0),d2
0001D602 2628 0008                  		move.l	8(a0),d3
0001D606 1038 F780                  		move.b	($FFFFF780).w,d0
0001D60A 0200 00FC                  		andi.b	#$FC,d0
0001D60E 4EB9 0000 33D4             		jsr	(CalcSine).l
0001D614 3828 0010                  		move.w	$10(a0),d4
0001D618 48C4                       		ext.l	d4
0001D61A E184                       		asl.l	#8,d4
0001D61C C1FC 002A                  		muls.w	#$2A,d0
0001D620 D084                       		add.l	d4,d0
0001D622 3828 0012                  		move.w	$12(a0),d4
0001D626 48C4                       		ext.l	d4
0001D628 E184                       		asl.l	#8,d4
0001D62A C3FC 002A                  		muls.w	#$2A,d1
0001D62E D284                       		add.l	d4,d1
0001D630 D680                       		add.l	d0,d3
0001D632 6100 0000                  		bsr.w	sub_1BCE8
0001D636 6700                       		beq.s	loc_1BCB0
0001D638 9680                       		sub.l	d0,d3
0001D63A 7000                       		moveq	#0,d0
0001D63C 3140 0010                  		move.w	d0,$10(a0)
0001D640 08A8 0001 0022             		bclr	#1,$22(a0)
0001D646 D481                       		add.l	d1,d2
0001D648 6100 0000                  		bsr.w	sub_1BCE8
0001D64C 6700                       		beq.s	loc_1BCC6
0001D64E 9481                       		sub.l	d1,d2
0001D650 7200                       		moveq	#0,d1
0001D652 3141 0012                  		move.w	d1,$12(a0)
0001D656 4E75                       		rts	
0001D658                            ; ===========================================================================
0001D658                            
0001D658                            loc_1BCB0:
0001D658 D481                       		add.l	d1,d2
0001D65A 6100 0000                  		bsr.w	sub_1BCE8
0001D65E 6700                       		beq.s	loc_1BCD4
0001D660 9481                       		sub.l	d1,d2
0001D662 7200                       		moveq	#0,d1
0001D664 3141 0012                  		move.w	d1,$12(a0)
0001D668 08A8 0001 0022             		bclr	#1,$22(a0)
0001D66E                            
0001D66E                            loc_1BCC6:
0001D66E E080                       		asr.l	#8,d0
0001D670 E081                       		asr.l	#8,d1
0001D672 3140 0010                  		move.w	d0,$10(a0)
0001D676 3141 0012                  		move.w	d1,$12(a0)
0001D67A 4E75                       		rts	
0001D67C                            ; ===========================================================================
0001D67C                            
0001D67C                            loc_1BCD4:
0001D67C E080                       		asr.l	#8,d0
0001D67E E081                       		asr.l	#8,d1
0001D680 3140 0010                  		move.w	d0,$10(a0)
0001D684 3141 0012                  		move.w	d1,$12(a0)
0001D688 08E8 0001 0022             		bset	#1,$22(a0)
0001D68E 4E75                       		rts	
0001D690                            ; End of function Obj09_Fall
0001D690                            
0001D690                            
0001D690                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D690                            
0001D690                            
0001D690                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001D690 43F9 00FF 0000             		lea	($FF0000).l,a1
0001D696 7800                       		moveq	#0,d4
0001D698 4842                       		swap	d2
0001D69A 3802                       		move.w	d2,d4
0001D69C 4842                       		swap	d2
0001D69E 0644 0044                  		addi.w	#$44,d4
0001D6A2 88FC 0018                  		divu.w	#$18,d4
0001D6A6 C8FC 0080                  		mulu.w	#$80,d4
0001D6AA D3C4                       		adda.l	d4,a1
0001D6AC 7800                       		moveq	#0,d4
0001D6AE 4843                       		swap	d3
0001D6B0 3803                       		move.w	d3,d4
0001D6B2 4843                       		swap	d3
0001D6B4 0644 0014                  		addi.w	#$14,d4
0001D6B8 88FC 0018                  		divu.w	#$18,d4
0001D6BC D2C4                       		adda.w	d4,a1
0001D6BE 7A00                       		moveq	#0,d5
0001D6C0 1819                       		move.b	(a1)+,d4
0001D6C2 6100                       		bsr.s	sub_1BD30
0001D6C4 1819                       		move.b	(a1)+,d4
0001D6C6 6100                       		bsr.s	sub_1BD30
0001D6C8 D2FC 007E                  		adda.w	#$7E,a1
0001D6CC 1819                       		move.b	(a1)+,d4
0001D6CE 6100                       		bsr.s	sub_1BD30
0001D6D0 1819                       		move.b	(a1)+,d4
0001D6D2 6100                       		bsr.s	sub_1BD30
0001D6D4 4A05                       		tst.b	d5
0001D6D6 4E75                       		rts	
0001D6D8                            ; End of function sub_1BCE8
0001D6D8                            
0001D6D8                            
0001D6D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D6D8                            
0001D6D8                            
0001D6D8                            sub_1BD30:				; XREF: sub_1BCE8
0001D6D8 6700                       		beq.s	locret_1BD44
0001D6DA 0C04 0028                  		cmpi.b	#$28,d4
0001D6DE 6700                       		beq.s	locret_1BD44
0001D6E0 0C04 003A                  		cmpi.b	#$3A,d4
0001D6E4 6500                       		bcs.s	loc_1BD46
0001D6E6 0C04 004B                  		cmpi.b	#$4B,d4
0001D6EA 6400                       		bcc.s	loc_1BD46
0001D6EC                            
0001D6EC                            locret_1BD44:
0001D6EC 4E75                       		rts	
0001D6EE                            ; ===========================================================================
0001D6EE                            
0001D6EE                            loc_1BD46:
0001D6EE 1144 0030                  		move.b	d4,$30(a0)
0001D6F2 2149 0032                  		move.l	a1,$32(a0)
0001D6F6 7AFF                       		moveq	#-1,d5
0001D6F8 4E75                       		rts	
0001D6FA                            ; End of function sub_1BD30
0001D6FA                            
0001D6FA                            
0001D6FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D6FA                            
0001D6FA                            
0001D6FA                            Obj09_ChkItems:				; XREF: Obj09_Display
0001D6FA 43F9 00FF 0000             		lea	($FF0000).l,a1
0001D700 7800                       		moveq	#0,d4
0001D702 3828 000C                  		move.w	$C(a0),d4
0001D706 0644 0050                  		addi.w	#$50,d4
0001D70A 88FC 0018                  		divu.w	#$18,d4
0001D70E C8FC 0080                  		mulu.w	#$80,d4
0001D712 D3C4                       		adda.l	d4,a1
0001D714 7800                       		moveq	#0,d4
0001D716 3828 0008                  		move.w	8(a0),d4
0001D71A 0644 0020                  		addi.w	#$20,d4
0001D71E 88FC 0018                  		divu.w	#$18,d4
0001D722 D2C4                       		adda.w	d4,a1
0001D724 1811                       		move.b	(a1),d4
0001D726 6600                       		bne.s	Obj09_ChkCont
0001D728 4A28 003A                  		tst.b	$3A(a0)
0001D72C 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001D730 7800                       		moveq	#0,d4
0001D732 4E75                       		rts	
0001D734                            ; ===========================================================================
0001D734                            
0001D734                            Obj09_ChkCont:
0001D734 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001D738 6600                       		bne.s	Obj09_Chk1Up
0001D73A 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001D73E 6600                       		bne.s	Obj09_GetCont
0001D740 14BC 0001                  		move.b	#1,(a2)
0001D744 2549 0004                  		move.l	a1,4(a2)
0001D748                            
0001D748                            Obj09_GetCont:
0001D748 4EB9 0000 A6D8             		jsr	CollectRing
0001D74E 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001D754 6500                       		bcs.s	Obj09_NoCont
0001D756 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001D75C 6600                       		bne.s	Obj09_NoCont
0001D75E 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001D762 303C 00BF                  		move.w	#$BF,d0
0001D766 4EB9 0000 1470             		jsr	(PlaySound).l	; play extra continue sound
0001D76C                            
0001D76C                            Obj09_NoCont:
0001D76C 7800                       		moveq	#0,d4
0001D76E 4E75                       		rts	
0001D770                            ; ===========================================================================
0001D770                            
0001D770                            Obj09_Chk1Up:
0001D770 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001D774 6600                       		bne.s	Obj09_ChkEmer
0001D776 6100 F6EA                  		bsr.w	SS_RemoveCollectedItem
0001D77A 6600                       		bne.s	Obj09_Get1Up
0001D77C 14BC 0003                  		move.b	#3,(a2)
0001D780 2549 0004                  		move.l	a1,4(a2)
0001D784                            
0001D784                            Obj09_Get1Up:
0001D784 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001D788 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001D78C 303C 0088                  		move.w	#$88,d0
0001D790 4EB9 0000 1470             		jsr	(PlaySound).l	; play extra life music
0001D796 7800                       		moveq	#0,d4
0001D798 4E75                       		rts	
0001D79A                            ; ===========================================================================
0001D79A                            
0001D79A                            Obj09_ChkEmer:
0001D79A 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001D79E 6500                       		bcs.s	Obj09_ChkGhost
0001D7A0 0C04 0040                  		cmpi.b	#$40,d4
0001D7A4 6200                       		bhi.s	Obj09_ChkGhost
0001D7A6 6100 F6BA                  		bsr.w	SS_RemoveCollectedItem
0001D7AA 6600                       		bne.s	Obj09_GetEmer
0001D7AC 14BC 0005                  		move.b	#5,(a2)
0001D7B0 2549 0004                  		move.l	a1,4(a2)
0001D7B4                            
0001D7B4                            Obj09_GetEmer:
0001D7B4 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001D7BA 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001D7BC 0404 003B                  		subi.b	#$3B,d4
0001D7C0 7000                       		moveq	#0,d0
0001D7C2 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001D7C6 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001D7CA 1584 0000                  		move.b	d4,(a2,d0.w)
0001D7CE 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001D7D2                            
0001D7D2                            Obj09_NoEmer:
0001D7D2 303C 0093                  		move.w	#$93,d0
0001D7D6 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play emerald music
0001D7DC 7800                       		moveq	#0,d4
0001D7DE 4E75                       		rts	
0001D7E0                            ; ===========================================================================
0001D7E0                            
0001D7E0                            Obj09_ChkGhost:
0001D7E0 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001D7E4 6600                       		bne.s	Obj09_ChkGhostTag
0001D7E6 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001D7EC                            
0001D7EC                            Obj09_ChkGhostTag:
0001D7EC 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001D7F0 6600                       		bne.s	Obj09_NoGhost
0001D7F2 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001D7F8 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001D7FA 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001D800                            
0001D800                            Obj09_NoGhost:
0001D800 78FF                       		moveq	#-1,d4
0001D802 4E75                       		rts	
0001D804                            ; ===========================================================================
0001D804                            
0001D804                            Obj09_MakeGhostSolid:
0001D804 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001D80A 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001D80C 43F9 00FF 1020             		lea	($FF1020).l,a1
0001D812 723F                       		moveq	#$3F,d1
0001D814                            
0001D814                            Obj09_GhostLoop2:
0001D814 743F                       		moveq	#$3F,d2
0001D816                            
0001D816                            Obj09_GhostLoop:
0001D816 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001D81A 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001D81C 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001D820                            
0001D820                            Obj09_NoReplace:
0001D820 5249                       		addq.w	#1,a1
0001D822 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001D826 43E9 0040                  		lea	$40(a1),a1
0001D82A 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001D82E                            
0001D82E                            Obj09_GhostNotSolid:
0001D82E 4228 003A                  		clr.b	$3A(a0)
0001D832 7800                       		moveq	#0,d4
0001D834 4E75                       		rts	
0001D836                            ; End of function Obj09_ChkItems
0001D836                            
0001D836                            
0001D836                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D836                            
0001D836                            
0001D836                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001D836 1028 0030                  		move.b	$30(a0),d0
0001D83A 6600                       		bne.s	Obj09_ChkBumper
0001D83C 5328 0036                  		subq.b	#1,$36(a0)
0001D840 6A00                       		bpl.s	loc_1BEA0
0001D842 117C 0000 0036             		move.b	#0,$36(a0)
0001D848                            
0001D848                            loc_1BEA0:
0001D848 5328 0037                  		subq.b	#1,$37(a0)
0001D84C 6A00                       		bpl.s	locret_1BEAC
0001D84E 117C 0000 0037             		move.b	#0,$37(a0)
0001D854                            
0001D854                            locret_1BEAC:
0001D854 4E75                       		rts	
0001D856                            ; ===========================================================================
0001D856                            
0001D856                            Obj09_ChkBumper:
0001D856 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001D85A 6600                       		bne.s	Obj09_GOAL
0001D85C 2228 0032                  		move.l	$32(a0),d1
0001D860 0481 00FF 0001             		subi.l	#$FF0001,d1
0001D866 3401                       		move.w	d1,d2
0001D868 0241 007F                  		andi.w	#$7F,d1
0001D86C C2FC 0018                  		mulu.w	#$18,d1
0001D870 0441 0014                  		subi.w	#$14,d1
0001D874 EE4A                       		lsr.w	#7,d2
0001D876 0242 007F                  		andi.w	#$7F,d2
0001D87A C4FC 0018                  		mulu.w	#$18,d2
0001D87E 0442 0044                  		subi.w	#$44,d2
0001D882 9268 0008                  		sub.w	8(a0),d1
0001D886 9468 000C                  		sub.w	$C(a0),d2
0001D88A 4EB9 0000 36A2             		jsr	(CalcAngle).l
0001D890 4EB9 0000 33D4             		jsr	(CalcSine).l
0001D896 C3FC F900                  		muls.w	#-$700,d1
0001D89A E081                       		asr.l	#8,d1
0001D89C 3141 0010                  		move.w	d1,$10(a0)
0001D8A0 C1FC F900                  		muls.w	#-$700,d0
0001D8A4 E080                       		asr.l	#8,d0
0001D8A6 3140 0012                  		move.w	d0,$12(a0)
0001D8AA 08E8 0001 0022             		bset	#1,$22(a0)
0001D8B0 6100 F5B0                  		bsr.w	SS_RemoveCollectedItem
0001D8B4 6600                       		bne.s	Obj09_BumpSnd
0001D8B6 14BC 0002                  		move.b	#2,(a2)
0001D8BA 2028 0032                  		move.l	$32(a0),d0
0001D8BE 5380                       		subq.l	#1,d0
0001D8C0 2540 0004                  		move.l	d0,4(a2)
0001D8C4                            
0001D8C4                            Obj09_BumpSnd:
0001D8C4 303C 00B4                  		move.w	#$B4,d0
0001D8C8 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play bumper sound
0001D8CE                            ; ===========================================================================
0001D8CE                            
0001D8CE                            Obj09_GOAL:
0001D8CE 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001D8D2 6600                       		bne.s	Obj09_UPblock
0001D8D4 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001D8D8 303C 00A8                  		move.w	#$A8,d0		; change item
0001D8DC 4EB9 0000 1476             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001D8E2 4E75                       		rts	
0001D8E4                            ; ===========================================================================
0001D8E4                            
0001D8E4                            Obj09_UPblock:
0001D8E4 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001D8E8 6600                       		bne.s	Obj09_DOWNblock
0001D8EA 4A28 0036                  		tst.b	$36(a0)
0001D8EE 6600 0000                  		bne.w	Obj09_NoGlass
0001D8F2 117C 001E 0036             		move.b	#$1E,$36(a0)
0001D8F8 0838 0006 F783             		btst	#6,($FFFFF783).w
0001D8FE 6700                       		beq.s	Obj09_UPsnd
0001D900 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001D904 2268 0032                  		movea.l	$32(a0),a1
0001D908 5389                       		subq.l	#1,a1
0001D90A 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001D90E                            
0001D90E                            Obj09_UPsnd:
0001D90E 303C 00A9                  		move.w	#$A9,d0
0001D912 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play up/down sound
0001D918                            ; ===========================================================================
0001D918                            
0001D918                            Obj09_DOWNblock:
0001D918 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001D91C 6600                       		bne.s	Obj09_Rblock
0001D91E 4A28 0036                  		tst.b	$36(a0)
0001D922 6600 0000                  		bne.w	Obj09_NoGlass
0001D926 117C 001E 0036             		move.b	#$1E,$36(a0)
0001D92C 0838 0006 F783             		btst	#6,($FFFFF783).w
0001D932 6600                       		bne.s	Obj09_DOWNsnd
0001D934 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001D938 2268 0032                  		movea.l	$32(a0),a1
0001D93C 5389                       		subq.l	#1,a1
0001D93E 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001D942                            
0001D942                            Obj09_DOWNsnd:
0001D942 303C 00A9                  		move.w	#$A9,d0
0001D946 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play up/down sound
0001D94C                            ; ===========================================================================
0001D94C                            
0001D94C                            Obj09_Rblock:
0001D94C 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001D950 6600                       		bne.s	Obj09_ChkGlass
0001D952 4A28 0037                  		tst.b	$37(a0)
0001D956 6600 0000                  		bne.w	Obj09_NoGlass
0001D95A 117C 001E 0037             		move.b	#$1E,$37(a0)
0001D960 6100 F500                  		bsr.w	SS_RemoveCollectedItem
0001D964 6600                       		bne.s	Obj09_RevStage
0001D966 14BC 0004                  		move.b	#4,(a2)
0001D96A 2028 0032                  		move.l	$32(a0),d0
0001D96E 5380                       		subq.l	#1,d0
0001D970 2540 0004                  		move.l	d0,4(a2)
0001D974                            
0001D974                            Obj09_RevStage:
0001D974 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001D978 303C 00A9                  		move.w	#$A9,d0
0001D97C 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play sound
0001D982                            ; ===========================================================================
0001D982                            
0001D982                            Obj09_ChkGlass:
0001D982 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001D986 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001D988 0C00 002E                  		cmpi.b	#$2E,d0
0001D98C 6700                       		beq.s	Obj09_Glass
0001D98E 0C00 002F                  		cmpi.b	#$2F,d0
0001D992 6700                       		beq.s	Obj09_Glass
0001D994 0C00 0030                  		cmpi.b	#$30,d0
0001D998 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001D99A                            
0001D99A                            Obj09_Glass:
0001D99A 6100 F4C6                  		bsr.w	SS_RemoveCollectedItem
0001D99E 6600                       		bne.s	Obj09_GlassSnd
0001D9A0 14BC 0006                  		move.b	#6,(a2)
0001D9A4 2268 0032                  		movea.l	$32(a0),a1
0001D9A8 5389                       		subq.l	#1,a1
0001D9AA 2549 0004                  		move.l	a1,4(a2)
0001D9AE 1011                       		move.b	(a1),d0
0001D9B0 5200                       		addq.b	#1,d0		; change glass type when touched
0001D9B2 0C00 0030                  		cmpi.b	#$30,d0
0001D9B6 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001D9B8 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001D9BA                            
0001D9BA                            Obj09_GlassUpdate:
0001D9BA 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001D9BE                            
0001D9BE                            Obj09_GlassSnd:
0001D9BE 303C 00BA                  		move.w	#$BA,d0
0001D9C2 4EF9 0000 1476             		jmp	(PlaySound_Special).l ;	play glass block sound
0001D9C8                            ; ===========================================================================
0001D9C8                            
0001D9C8                            Obj09_NoGlass:
0001D9C8 4E75                       		rts	
0001D9CA                            ; End of function Obj09_ChkItems2
0001D9CA                            
0001D9CA                            ; ===========================================================================
0001D9CA                            ; ---------------------------------------------------------------------------
0001D9CA                            ; Object 10 - blank
0001D9CA                            ; ---------------------------------------------------------------------------
0001D9CA                            
0001D9CA                            Obj10:					; XREF: Obj_Index
0001D9CA 4E75                       		rts	
0001D9CC                            ; ---------------------------------------------------------------------------
0001D9CC                            ; Subroutine to	animate	level graphics
0001D9CC                            ; ---------------------------------------------------------------------------
0001D9CC                            
0001D9CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D9CC                            
0001D9CC                            
0001D9CC                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001D9CC 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001D9D0 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001D9D2 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D9D8 6100 0000                  		bsr.w	AniArt_GiantRing
0001D9DC 7000                       		moveq	#0,d0
0001D9DE 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D9E2 D040                       		add.w	d0,d0
0001D9E4 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001D9E8 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001D9EC                            ; ===========================================================================
0001D9EC                            
0001D9EC                            AniArt_Pause:
0001D9EC 4E75                       		rts	
0001D9EE                            ; End of function AniArt_Load
0001D9EE                            
0001D9EE                            ; ===========================================================================
0001D9EE 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001D9F2 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001D9F6 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001D9FA 0000                       		dc.w AniArt_Ending-AniArt_Index
0001D9FC                            ; ===========================================================================
0001D9FC                            ; ---------------------------------------------------------------------------
0001D9FC                            ; Animated pattern routine - Green Hill
0001D9FC                            ; ---------------------------------------------------------------------------
0001D9FC                            
0001D9FC                            AniArt_GHZ:				; XREF: AniArt_Index
0001D9FC 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001DA00 6A00                       		bpl.s	loc_1C08A
0001DA02 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001DA08 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001DA0E 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001DA12 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001DA16 0240 0001                  		andi.w	#1,d0
0001DA1A 6700                       		beq.s	loc_1C078
0001DA1C 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001DA20                            
0001DA20                            loc_1C078:
0001DA20 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001DA2A 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001DA2E 6000 0000                  		bra.w	LoadTiles
0001DA32                            ; ===========================================================================
0001DA32                            
0001DA32                            loc_1C08A:
0001DA32 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001DA36 6A00                       		bpl.s	loc_1C0C0
0001DA38 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001DA3E 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001DA44 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001DA48 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001DA4C 0240 0001                  		andi.w	#1,d0
0001DA50 6700                       		beq.s	loc_1C0AE
0001DA52 43E9 0200                  		lea	$200(a1),a1
0001DA56                            
0001DA56                            loc_1C0AE:
0001DA56 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001DA60 323C 000F                  		move.w	#$F,d1
0001DA64 6000 0000                  		bra.w	LoadTiles
0001DA68                            ; ===========================================================================
0001DA68                            
0001DA68                            loc_1C0C0:
0001DA68 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001DA6C 6A00                       		bpl.s	locret_1C10C
0001DA6E 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001DA74 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001DA78 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001DA7C 0240 0003                  		andi.w	#3,d0
0001DA80 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001DA84 0800 0000                  		btst	#0,d0
0001DA88 6600                       		bne.s	loc_1C0E8
0001DA8A 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001DA90                            
0001DA90                            loc_1C0E8:
0001DA90 EF48                       		lsl.w	#7,d0
0001DA92 3200                       		move.w	d0,d1
0001DA94 D040                       		add.w	d0,d0
0001DA96 D041                       		add.w	d1,d0
0001DA98 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001DAA2 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001DAA8 43F1 0000                  		lea	(a1,d0.w),a1
0001DAAC 323C 000B                  		move.w	#$B,d1
0001DAB0 6100 0000                  		bsr.w	LoadTiles
0001DAB4                            
0001DAB4                            locret_1C10C:
0001DAB4 4E75                       		rts	
0001DAB6                            ; ===========================================================================
0001DAB6 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001DABA                            ; ===========================================================================
0001DABA                            ; ---------------------------------------------------------------------------
0001DABA                            ; Animated pattern routine - Marble
0001DABA                            ; ---------------------------------------------------------------------------
0001DABA                            
0001DABA                            AniArt_MZ:				; XREF: AniArt_Index
0001DABA 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001DABE 6A00                       		bpl.s	loc_1C150
0001DAC0 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001DAC6 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001DACC 7000                       		moveq	#0,d0
0001DACE 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001DAD2 5200                       		addq.b	#1,d0
0001DAD4 0C00 0003                  		cmpi.b	#3,d0
0001DAD8 6600                       		bne.s	loc_1C134
0001DADA 7000                       		moveq	#0,d0
0001DADC                            
0001DADC                            loc_1C134:
0001DADC 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001DAE0 C0FC 0100                  		mulu.w	#$100,d0
0001DAE4 D2C0                       		adda.w	d0,a1
0001DAE6 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001DAF0 323C 0007                  		move.w	#7,d1
0001DAF4 6100 0000                  		bsr.w	LoadTiles
0001DAF8                            
0001DAF8                            loc_1C150:
0001DAF8 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001DAFC 6A00                       		bpl.s	loc_1C1AE
0001DAFE 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001DB04 7000                       		moveq	#0,d0
0001DB06 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001DB0A 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001DB10 EE58                       		ror.w	#7,d0
0001DB12 D8C0                       		adda.w	d0,a4
0001DB14 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001DB1E 7600                       		moveq	#0,d3
0001DB20 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001DB24 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001DB28 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001DB2C 343C 0003                  		move.w	#3,d2
0001DB30                            
0001DB30                            loc_1C188:
0001DB30 3003                       		move.w	d3,d0
0001DB32 D040                       		add.w	d0,d0
0001DB34 0240 001E                  		andi.w	#$1E,d0
0001DB38 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001DB3E 3033 0000                  		move.w	(a3,d0.w),d0
0001DB42 47F3 0000                  		lea	(a3,d0.w),a3
0001DB46 224C                       		movea.l	a4,a1
0001DB48 323C 001F                  		move.w	#$1F,d1
0001DB4C 4E93                       		jsr	(a3)
0001DB4E 5843                       		addq.w	#4,d3
0001DB50 51CA FFDE                  		dbf	d2,loc_1C188
0001DB54 4E75                       		rts	
0001DB56                            ; ===========================================================================
0001DB56                            
0001DB56                            loc_1C1AE:
0001DB56 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001DB5A 6A00 0000                  		bpl.w	locret_1C1EA
0001DB5E 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001DB64 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001DB6A 7000                       		moveq	#0,d0
0001DB6C 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001DB70 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001DB74 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001DB7A C0FC 00C0                  		mulu.w	#$C0,d0
0001DB7E D2C0                       		adda.w	d0,a1
0001DB80 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001DB8A 323C 0005                  		move.w	#5,d1
0001DB8E 6000 0000                  		bra.w	LoadTiles
0001DB92                            ; ===========================================================================
0001DB92                            
0001DB92                            locret_1C1EA:
0001DB92 4E75                       		rts	
0001DB94                            ; ===========================================================================
0001DB94                            ; ---------------------------------------------------------------------------
0001DB94                            ; Animated pattern routine - Scrap Brain
0001DB94                            ; ---------------------------------------------------------------------------
0001DB94                            
0001DB94                            AniArt_SBZ:				; XREF: AniArt_Index
0001DB94 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001DB98 6700                       		beq.s	loc_1C1F8
0001DB9A 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001DB9E 6000                       		bra.s	loc_1C250
0001DBA0                            ; ===========================================================================
0001DBA0                            
0001DBA0                            loc_1C1F8:
0001DBA0 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001DBA4 6A00                       		bpl.s	loc_1C250
0001DBA6 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001DBAC 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001DBB2 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001DBBC 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001DBC0 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001DBC4 0240 0007                  		andi.w	#7,d0
0001DBC8 6700                       		beq.s	loc_1C234
0001DBCA 5340                       		subq.w	#1,d0
0001DBCC C0FC 0180                  		mulu.w	#$180,d0
0001DBD0 43F1 0000                  		lea	(a1,d0.w),a1
0001DBD4 323C 000B                  		move.w	#$B,d1
0001DBD8 6000 0000                  		bra.w	LoadTiles
0001DBDC                            ; ===========================================================================
0001DBDC                            
0001DBDC                            loc_1C234:
0001DBDC 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001DBE2                            
0001DBE2                            loc_1C23A:
0001DBE2 323C 0005                  		move.w	#5,d1
0001DBE6 6100 0000                  		bsr.w	LoadTiles
0001DBEA 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001DBF0 323C 0005                  		move.w	#5,d1
0001DBF4 6000 0000                  		bra.w	LoadTiles
0001DBF8                            ; ===========================================================================
0001DBF8                            
0001DBF8                            loc_1C250:
0001DBF8 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001DBFC 6700                       		beq.s	loc_1C25C
0001DBFE 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001DC02 6000                       		bra.s	locret_1C2A0
0001DC04                            ; ===========================================================================
0001DC04                            
0001DC04                            loc_1C25C:
0001DC04 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001DC08 6A00                       		bpl.s	locret_1C2A0
0001DC0A 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001DC10 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001DC16 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001DC20 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001DC24 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001DC28 0240 0007                  		andi.w	#7,d0
0001DC2C 6700                       		beq.s	loc_1C298
0001DC2E 5340                       		subq.w	#1,d0
0001DC30 C0FC 0180                  		mulu.w	#$180,d0
0001DC34 43F1 0000                  		lea	(a1,d0.w),a1
0001DC38 323C 000B                  		move.w	#$B,d1
0001DC3C 6000 0000                  		bra.w	LoadTiles
0001DC40                            ; ===========================================================================
0001DC40                            
0001DC40                            loc_1C298:
0001DC40 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001DC46 609A                       		bra.s	loc_1C23A
0001DC48                            ; ===========================================================================
0001DC48                            
0001DC48                            locret_1C2A0:
0001DC48 4E75                       		rts	
0001DC4A                            ; ===========================================================================
0001DC4A                            ; ---------------------------------------------------------------------------
0001DC4A                            ; Animated pattern routine - ending sequence
0001DC4A                            ; ---------------------------------------------------------------------------
0001DC4A                            
0001DC4A                            AniArt_Ending:				; XREF: AniArt_Index
0001DC4A 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001DC4E 6A00                       		bpl.s	loc_1C2F4
0001DC50 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001DC56 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001DC5C 45F8 9400                  		lea	($FFFF9400).w,a2
0001DC60 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001DC64 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001DC68 0240 0001                  		andi.w	#1,d0
0001DC6C 6700                       		beq.s	loc_1C2CE
0001DC6E 43E9 0200                  		lea	$200(a1),a1
0001DC72 45EA 0200                  		lea	$200(a2),a2
0001DC76                            
0001DC76                            loc_1C2CE:
0001DC76 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001DC80 323C 000F                  		move.w	#$F,d1
0001DC84 6100 0000                  		bsr.w	LoadTiles
0001DC88 224A                       		movea.l	a2,a1
0001DC8A 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001DC94 323C 000F                  		move.w	#$F,d1
0001DC98 6000 0000                  		bra.w	LoadTiles
0001DC9C                            ; ===========================================================================
0001DC9C                            
0001DC9C                            loc_1C2F4:
0001DC9C 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001DCA0 6A00                       		bpl.s	loc_1C33C
0001DCA2 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001DCA8 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001DCAC 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001DCB0 0240 0007                  		andi.w	#7,d0
0001DCB4 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001DCB8 EF48                       		lsl.w	#7,d0
0001DCBA 3200                       		move.w	d0,d1
0001DCBC D040                       		add.w	d0,d0
0001DCBE D041                       		add.w	d1,d0
0001DCC0 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001DCCA 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001DCD0 43F1 0000                  		lea	(a1,d0.w),a1
0001DCD4 323C 000B                  		move.w	#$B,d1
0001DCD8 6000 0000                  		bra.w	LoadTiles
0001DCDC                            ; ===========================================================================
0001DCDC 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001DCE4                            ; ===========================================================================
0001DCE4                            
0001DCE4                            loc_1C33C:
0001DCE4 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001DCE8 6A00                       		bpl.s	loc_1C37A
0001DCEA 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001DCF0 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001DCF4 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001DCF8 0240 0003                  		andi.w	#3,d0
0001DCFC 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001DD00 E148                       		lsl.w	#8,d0
0001DD02 D040                       		add.w	d0,d0
0001DD04 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001DD0E 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001DD12 43F1 0000                  		lea	(a1,d0.w),a1
0001DD16 323C 000F                  		move.w	#$F,d1
0001DD1A 6000 0000                  		bra.w	LoadTiles
0001DD1E                            ; ===========================================================================
0001DD1E 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001DD22                            ; ===========================================================================
0001DD22                            
0001DD22                            loc_1C37A:
0001DD22 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001DD26 6A00                       		bpl.s	locret_1C3B4
0001DD28 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001DD2E 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001DD32 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001DD36 0240 0003                  		andi.w	#3,d0
0001DD3A 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001DD3E E148                       		lsl.w	#8,d0
0001DD40 D040                       		add.w	d0,d0
0001DD42 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001DD4C 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001DD50 43F1 0000                  		lea	(a1,d0.w),a1
0001DD54 323C 000F                  		move.w	#$F,d1
0001DD58 6000 0000                  		bra.w	LoadTiles
0001DD5C                            ; ===========================================================================
0001DD5C                            
0001DD5C                            locret_1C3B4:
0001DD5C 4E75                       		rts	
0001DD5E                            ; ===========================================================================
0001DD5E                            
0001DD5E                            AniArt_none:				; XREF: AniArt_Index
0001DD5E 4E75                       		rts	
0001DD60                            
0001DD60                            ; ---------------------------------------------------------------------------
0001DD60                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001DD60                            ; ---------------------------------------------------------------------------
0001DD60                            
0001DD60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD60                            
0001DD60                            
0001DD60                            LoadTiles:
0001DD60 2C99                       		move.l	(a1)+,(a6)
0001DD62 2C99                       		move.l	(a1)+,(a6)
0001DD64 2C99                       		move.l	(a1)+,(a6)
0001DD66 2C99                       		move.l	(a1)+,(a6)
0001DD68 2C99                       		move.l	(a1)+,(a6)
0001DD6A 2C99                       		move.l	(a1)+,(a6)
0001DD6C 2C99                       		move.l	(a1)+,(a6)
0001DD6E 2C99                       		move.l	(a1)+,(a6)
0001DD70 51C9 FFEE                  		dbf	d1,LoadTiles
0001DD74 4E75                       		rts	
0001DD76                            ; End of function LoadTiles
0001DD76                            
0001DD76                            ; ===========================================================================
0001DD76                            ; ---------------------------------------------------------------------------
0001DD76                            ; Animated pattern routine - more Marble Zone
0001DD76                            ; ---------------------------------------------------------------------------
0001DD76 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001DD7A 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001DD7E 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001DD82 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001DD86 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001DD8A 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001DD8E 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001DD92 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001DD96                            ; ===========================================================================
0001DD96                            
0001DD96                            loc_1C3EE:				; XREF: AniArt_MZextra
0001DD96 2C91                       		move.l	(a1),(a6)
0001DD98 43E9 0010                  		lea	$10(a1),a1
0001DD9C 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001DDA0 4E75                       		rts	
0001DDA2                            ; ===========================================================================
0001DDA2                            
0001DDA2                            loc_1C3FA:				; XREF: AniArt_MZextra
0001DDA2 2029 0002                  		move.l	2(a1),d0
0001DDA6 1029 0001                  		move.b	1(a1),d0
0001DDAA E098                       		ror.l	#8,d0
0001DDAC 2C80                       		move.l	d0,(a6)
0001DDAE 43E9 0010                  		lea	$10(a1),a1
0001DDB2 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001DDB6 4E75                       		rts	
0001DDB8                            ; ===========================================================================
0001DDB8                            
0001DDB8                            loc_1C410:				; XREF: AniArt_MZextra
0001DDB8 2CA9 0002                  		move.l	2(a1),(a6)
0001DDBC 43E9 0010                  		lea	$10(a1),a1
0001DDC0 51C9 FFF6                  		dbf	d1,loc_1C410
0001DDC4 4E75                       		rts	
0001DDC6                            ; ===========================================================================
0001DDC6                            
0001DDC6                            loc_1C41E:				; XREF: AniArt_MZextra
0001DDC6 2029 0004                  		move.l	4(a1),d0
0001DDCA 1029 0003                  		move.b	3(a1),d0
0001DDCE E098                       		ror.l	#8,d0
0001DDD0 2C80                       		move.l	d0,(a6)
0001DDD2 43E9 0010                  		lea	$10(a1),a1
0001DDD6 51C9 FFEE                  		dbf	d1,loc_1C41E
0001DDDA 4E75                       		rts	
0001DDDC                            ; ===========================================================================
0001DDDC                            
0001DDDC                            loc_1C434:				; XREF: AniArt_MZextra
0001DDDC 2CA9 0004                  		move.l	4(a1),(a6)
0001DDE0 43E9 0010                  		lea	$10(a1),a1
0001DDE4 51C9 FFF6                  		dbf	d1,loc_1C434
0001DDE8 4E75                       		rts	
0001DDEA                            ; ===========================================================================
0001DDEA                            
0001DDEA                            loc_1C442:				; XREF: AniArt_MZextra
0001DDEA 2029 0006                  		move.l	6(a1),d0
0001DDEE 1029 0005                  		move.b	5(a1),d0
0001DDF2 E098                       		ror.l	#8,d0
0001DDF4 2C80                       		move.l	d0,(a6)
0001DDF6 43E9 0010                  		lea	$10(a1),a1
0001DDFA 51C9 FFEE                  		dbf	d1,loc_1C442
0001DDFE 4E75                       		rts	
0001DE00                            ; ===========================================================================
0001DE00                            
0001DE00                            loc_1C458:				; XREF: AniArt_MZextra
0001DE00 2CA9 0006                  		move.l	6(a1),(a6)
0001DE04 43E9 0010                  		lea	$10(a1),a1
0001DE08 51C9 FFF6                  		dbf	d1,loc_1C458
0001DE0C 4E75                       		rts	
0001DE0E                            ; ===========================================================================
0001DE0E                            
0001DE0E                            loc_1C466:				; XREF: AniArt_MZextra
0001DE0E 2029 0008                  		move.l	8(a1),d0
0001DE12 1029 0007                  		move.b	7(a1),d0
0001DE16 E098                       		ror.l	#8,d0
0001DE18 2C80                       		move.l	d0,(a6)
0001DE1A 43E9 0010                  		lea	$10(a1),a1
0001DE1E 51C9 FFEE                  		dbf	d1,loc_1C466
0001DE22 4E75                       		rts	
0001DE24                            ; ===========================================================================
0001DE24                            
0001DE24                            loc_1C47C:				; XREF: AniArt_MZextra
0001DE24 2CA9 0008                  		move.l	8(a1),(a6)
0001DE28 43E9 0010                  		lea	$10(a1),a1
0001DE2C 51C9 FFF6                  		dbf	d1,loc_1C47C
0001DE30 4E75                       		rts	
0001DE32                            ; ===========================================================================
0001DE32                            
0001DE32                            loc_1C48A:				; XREF: AniArt_MZextra
0001DE32 2029 000A                  		move.l	$A(a1),d0
0001DE36 1029 0009                  		move.b	9(a1),d0
0001DE3A E098                       		ror.l	#8,d0
0001DE3C 2C80                       		move.l	d0,(a6)
0001DE3E 43E9 0010                  		lea	$10(a1),a1
0001DE42 51C9 FFEE                  		dbf	d1,loc_1C48A
0001DE46 4E75                       		rts	
0001DE48                            ; ===========================================================================
0001DE48                            
0001DE48                            loc_1C4A0:				; XREF: AniArt_MZextra
0001DE48 2CA9 000A                  		move.l	$A(a1),(a6)
0001DE4C 43E9 0010                  		lea	$10(a1),a1
0001DE50 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001DE54 4E75                       		rts	
0001DE56                            ; ===========================================================================
0001DE56                            
0001DE56                            loc_1C4AE:				; XREF: AniArt_MZextra
0001DE56 2029 000C                  		move.l	$C(a1),d0
0001DE5A 1029 000B                  		move.b	$B(a1),d0
0001DE5E E098                       		ror.l	#8,d0
0001DE60 2C80                       		move.l	d0,(a6)
0001DE62 43E9 0010                  		lea	$10(a1),a1
0001DE66 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001DE6A 4E75                       		rts	
0001DE6C                            ; ===========================================================================
0001DE6C                            
0001DE6C                            loc_1C4C4:				; XREF: AniArt_MZextra
0001DE6C 2CA9 000C                  		move.l	$C(a1),(a6)
0001DE70 43E9 0010                  		lea	$10(a1),a1
0001DE74 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001DE78 4E75                       		rts	
0001DE7A                            ; ===========================================================================
0001DE7A                            
0001DE7A                            loc_1C4D2:				; XREF: AniArt_MZextra
0001DE7A 2029 000C                  		move.l	$C(a1),d0
0001DE7E E198                       		rol.l	#8,d0
0001DE80 1011                       		move.b	0(a1),d0
0001DE82 2C80                       		move.l	d0,(a6)
0001DE84 43E9 0010                  		lea	$10(a1),a1
0001DE88 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001DE8C 4E75                       		rts	
0001DE8E                            ; ===========================================================================
0001DE8E                            
0001DE8E                            loc_1C4E8:				; XREF: AniArt_MZextra
0001DE8E 3CA9 000E                  		move.w	$E(a1),(a6)
0001DE92 3C91                       		move.w	0(a1),(a6)
0001DE94 43E9 0010                  		lea	$10(a1),a1
0001DE98 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001DE9C 4E75                       		rts	
0001DE9E                            ; ===========================================================================
0001DE9E                            
0001DE9E                            loc_1C4FA:				; XREF: AniArt_MZextra
0001DE9E 2011                       		move.l	0(a1),d0
0001DEA0 1029 000F                  		move.b	$F(a1),d0
0001DEA4 E098                       		ror.l	#8,d0
0001DEA6 2C80                       		move.l	d0,(a6)
0001DEA8 43E9 0010                  		lea	$10(a1),a1
0001DEAC 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001DEB0 4E75                       		rts	
0001DEB2                            
0001DEB2                            ; ---------------------------------------------------------------------------
0001DEB2                            ; Animated pattern routine - giant ring
0001DEB2                            ; ---------------------------------------------------------------------------
0001DEB2                            
0001DEB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DEB2                            
0001DEB2                            
0001DEB2                            AniArt_GiantRing:			; XREF: AniArt_Load
0001DEB2 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001DEB6 6600                       		bne.s	loc_1C518
0001DEB8 4E75                       		rts
0001DEBA                            ; ===========================================================================
0001DEBA                            
0001DEBA                            loc_1C518:
0001DEBA 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001DEC0 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001DEC6 7000                       		moveq	#0,d0
0001DEC8 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001DECC 43F1 0000                  		lea	(a1,d0.w),a1
0001DED0 0640 8000                  		addi.w	#$8000,d0
0001DED4 E588                       		lsl.l	#2,d0
0001DED6 E448                       		lsr.w	#2,d0
0001DED8 0040 4000                  		ori.w	#$4000,d0
0001DEDC 4840                       		swap	d0
0001DEDE 2D40 0004                  		move.l	d0,4(a6)
0001DEE2 323C 000D                  		move.w	#$D,d1
0001DEE6 6000 FE78                  		bra.w	LoadTiles
0001DEEA                            ; End of function AniArt_GiantRing
0001DEEA                            
0001DEEA                            ; ===========================================================================
0001DEEA                            ; ---------------------------------------------------------------------------
0001DEEA                            ; Object 21 - SCORE, TIME, RINGS
0001DEEA                            ; ---------------------------------------------------------------------------
0001DEEA                            
0001DEEA                            Obj21:					; XREF: Obj_Index
0001DEEA 7000                       		moveq	#0,d0
0001DEEC 1028 0024                  		move.b	$24(a0),d0
0001DEF0 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001DEF4 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001DEF8                            ; ===========================================================================
0001DEF8 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001DEFA 0000                       		dc.w Obj21_Flash-Obj21_Index
0001DEFC                            ; ===========================================================================
0001DEFC                            
0001DEFC                            Obj21_Main:				; XREF: Obj21_Main
0001DEFC 5428 0024                  		addq.b	#2,$24(a0)
0001DF00 317C 0090 0008             		move.w	#$90,8(a0)
0001DF06 317C 0108 000A             		move.w	#$108,$A(a0)
0001DF0C 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001DF14 317C 06BA 0002                             move.w    #$6BA,2(a0)
0001DF1A 117C 0000 0001             		move.b	#0,1(a0)
0001DF20 117C 0000 0018             		move.b	#0,$18(a0)
0001DF26                            
0001DF26                            Obj21_Flash:				; XREF: Obj21_Main
0001DF26 7000                       		moveq	#0,d0
0001DF28 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001DF2E 6600                       		bne.s	Obj21_Display
0001DF30 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001DF34 6600                       		bne.s	Obj21_Flash2	; if not, branch
0001DF36 5240                       		addq.w	#1,d0		; make ring counter flash red
0001DF38                            ; ===========================================================================
0001DF38                            
0001DF38                            Obj21_Flash2:
0001DF38 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001DF3E 6600                       		bne.s	Obj21_Display	; if not, branch
0001DF40 5440                       		addq.w	#2,d0		; make time counter flash red
0001DF42                            
0001DF42                            Obj21_Display:
0001DF42 1140 001A                  		move.b	d0,$1A(a0)
0001DF46 4EF9 0000 E0DE             		jmp	DisplaySprite
0001DF4C                            ; ===========================================================================
0001DF4C                            ; ---------------------------------------------------------------------------
0001DF4C                            ; Sprite mappings - SCORE, TIME, RINGS
0001DF4C                            ; ---------------------------------------------------------------------------
0001DF4C                            Map_obj21:
0001DF4C                            	include "_maps\obj21.asm"
0001DF4C                            ; ---------------------------------------------------------------------------
0001DF4C                            ; Sprite mappings - SCORE, TIME, RINGS (CENTISECONDS)
0001DF4C                            ; ---------------------------------------------------------------------------
0001DF4C 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001DF50 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001DF54 0B                         byte_1C5BC:	dc.b $B
0001DF55 800D 8010 00               		dc.b $80, $D, $80, $10, 0	; SCOR
0001DF5A 800D 8028 20               		dc.b $80, $D, $80, $28,	$20	; E nnn
0001DF5F 800D 8030 40               		dc.b $80, $D, $80, $30,	$40	; nnnn
0001DF64 900D 8020 00               		dc.b $90, $D, $80, $20,	0	; TIME
0001DF69 900D 8038 28               		dc.b $90, $D, $80, $38,	$28	; n'nn
0001DF6E 9009 8000 48               			dc.b $90, 9, $80, $0,	$48	; "nn
0001DF73 A00D 8018 00               		dc.b $A0, $D, $80, $18, 0	; RING
0001DF78 A001 8010 20               		dc.b $A0, 1, $80, $10, $20	; S
0001DF7D A009 8040 30               		dc.b $A0, 9, $80, $40, $30	; rings
0001DF82 4005 811A 00               		dc.b $40, 5, $81, $1A, 0	; icon
0001DF87 400D 811E 10               		dc.b $40, $D, $81, $1E, $10	; SONIC x nn
0001DF8C 00                         		dc.b 0
0001DF8D 0B                         byte_1C5F0:	dc.b $B
0001DF8E 800D 8010 00               		dc.b $80, $D, $80, $10, 0	; SCOR
0001DF93 800D 8028 20               		dc.b $80, $D, $80, $28,	$20	; E nnn
0001DF98 800D 8030 40               		dc.b $80, $D, $80, $30,	$40	; nnnn
0001DF9D 900D 8020 00               		dc.b $90, $D, $80, $20,	0	; TIME
0001DFA2 900D 8038 28               		dc.b $90, $D, $80, $38,	$28	; n'nn
0001DFA7 9009 8000 48               			dc.b $90, 9, $80, $0,	$48	; "nn
0001DFAC A00D A018 00               		dc.b $A0, $D, $A0, $18, 0	; RING
0001DFB1 A001 A010 20               		dc.b $A0, 1, $A0, $10, $20	; S
0001DFB6 A009 8040 30               		dc.b $A0, 9, $80, $40, $30	; rings
0001DFBB 4005 811A 00               		dc.b $40, 5, $81, $1A, 0	; icon
0001DFC0 400D 811E 10               		dc.b $40, $D, $81, $1E, $10	; SONIC x nn
0001DFC5 00                         		dc.b 0
0001DFC6 0B                         byte_1C624:	dc.b $B
0001DFC7 800D 8010 00               		dc.b $80, $D, $80, $10, 0	; SCOR
0001DFCC 800D 8028 20               		dc.b $80, $D, $80, $28,	$20	; E nnn
0001DFD1 800D 8030 40               		dc.b $80, $D, $80, $30,	$40	; nnnn
0001DFD6 900D A020 00               		dc.b $90, $D, $A0, $20,	0	; TIME
0001DFDB 900D 8038 28               		dc.b $90, $D, $80, $38,	$28	; n'nn
0001DFE0 9009 8000 48               			dc.b $90, 9, $80, $0,	$48	; "nn
0001DFE5 A00D 8018 00               		dc.b $A0, $D, $80, $18, 0	; RING
0001DFEA A001 8010 20               		dc.b $A0, 1, $80, $10, $20	; S
0001DFEF A009 8040 30               		dc.b $A0, 9, $80, $40, $30	; rings
0001DFF4 4005 811A 00               		dc.b $40, 5, $81, $1A, 0	; icon
0001DFF9 400D 811E 10               		dc.b $40, $D, $81, $1E, $10	; SONIC x nn
0001DFFE 00                         		dc.b 0
0001DFFF 0B                         byte_1C658:	dc.b $B
0001E000 800D 8010 00               		dc.b $80, $D, $80, $10, 0	; SCOR
0001E005 800D 8028 20               		dc.b $80, $D, $80, $28,	$20	; E nnn
0001E00A 800D 8030 40               		dc.b $80, $D, $80, $30,	$40	; nnnn
0001E00F 900D A020 00               		dc.b $90, $D, $A0, $20,	0	; TIME
0001E014 900D 8038 28               		dc.b $90, $D, $80, $38,	$28	; n'nn
0001E019 9009 8000 48               			dc.b $90, 9, $80, $0,	$48	; "nn
0001E01E A00D A018 00               		dc.b $A0, $D, $A0, $18, 0	; RING
0001E023 A001 A010 20               		dc.b $A0, 1, $A0, $10, $20	; S
0001E028 A009 8040 30               		dc.b $A0, 9, $80, $40, $30	; rings
0001E02D 4005 811A 00               		dc.b $40, 5, $81, $1A, 0	; icon
0001E032 400D 811E 10               		dc.b $40, $D, $81, $1E, $10	; SONIC x nn
0001E038 00                         		even
0001E038 00                         		even
0001E038                            
0001E038                            ; ---------------------------------------------------------------------------
0001E038                            ; Add points subroutine
0001E038                            ; ---------------------------------------------------------------------------
0001E038                            
0001E038                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E038                            
0001E038                            
0001E038                            AddPoints:
0001E038 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001E03E 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001E042 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001E046 D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001E048 223C 000F 423F             		move.l	#999999,d1
0001E04E B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001E050 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001E054 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001E056 2481                       		move.l	d1,(a2)
0001E058                            
0001E058                            loc_1C6AC:
0001E058 2013                       		move.l	(a3),d0
0001E05A B092                       		cmp.l	(a2),d0
0001E05C 6500 0000                  		bcs.w	locret_1C6B6
0001E060 2480                       		move.l	d0,(a2)
0001E062                            
0001E062                            locret_1C6B6:
0001E062 4E75                       		rts	
0001E064                            ; End of function AddPoints
0001E064                            
0001E064                            ; ---------------------------------------------------------------------------
0001E064                            ; Subroutine to	update the HUD
0001E064                            ; ---------------------------------------------------------------------------
0001E064                            
0001E064                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E064                            
0001E064                            
0001E064                            HudUpdate:
0001E064 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001E068 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001E06C 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001E070 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001E072 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001E076 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001E07C 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001E080 6100 0000                  		bsr.w	Hud_Score
0001E084                            
0001E084                            Hud_ChkRings:
0001E084 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001E088 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001E08A 6A00                       		bpl.s	loc_1C6E4
0001E08C 6100 0000                  		bsr.w	Hud_LoadZero
0001E090                            
0001E090                            loc_1C6E4:
0001E090 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001E094 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001E09A 7200                       		moveq	#0,d1
0001E09C 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001E0A0 6100 0000                  		bsr.w	Hud_Rings
0001E0A4                            
0001E0A4                            Hud_ChkTime:
0001E0A4 4A38 FE1E                          tst.b    ($FFFFFE1E).w    ; does the time    need updating?
0001E0A8 6700 0000                          beq.w    Hud_ChkLives    ; if not, branch    ;Mercury HUD Centiseconds (bsr.s => bsr.w) ported by -paranoimia-
0001E0AC 4A78 F63A                          tst.w    ($FFFFF63A).w    ; is the game paused?
0001E0B0 6600 0000                          bne.w    Hud_ChkLives    ; if yes, branch    ;Mercury HUD Centiseconds (bsr.s => bsr.w) ported by -paranoimia-
0001E0B4 43F8 FE22                          lea    ($FFFFFE22).w,a1
0001E0B8 0C99 0009 3B63                     cmpi.l    #$93B63,(a1)+    ; is the time 9'59"99?
0001E0BE 6700 0000                          beq.w    TimeOver    ; if yes, branch    ;Mercury HUD Centiseconds (bsr.s => bsr.w) ported by -paranoimia-
0001E0C2 1238 FEBF                          move.b    ($FFFFFEBF).w,d1
0001E0C6 5201                               addi.b    #1,d1
0001E0C8 0C01 0003                          cmpi.b    #3,d1
0001E0CC 6600                               bne.s    Cent_Skip
0001E0CE 123C 0000                          move.b    #0,d1
0001E0D2                            
0001E0D2                            Cent_Skip:
0001E0D2 11C1 FEBF                          move.b    d1,($FFFFFEBF).w
0001E0D6 0C01 0002                          cmpi.b    #2,d1
0001E0DA 6700                               beq.s    Cent_Skip2
0001E0DC 5201                               addi.b    #1,d1
0001E0DE                            
0001E0DE                            Cent_Skip2:
0001E0DE D321                               add.b    d1,-(a1)
0001E0E0 0C11 0064                          cmpi.b    #100,(a1)
0001E0E4 6500                               bcs.s    Hud_DoCent
0001E0E6 12BC 0000                          move.b    #0,(a1)
0001E0EA 5221                               addq.b    #1,-(a1)
0001E0EC 0C11 003C                          cmpi.b    #60,(a1)
0001E0F0 6500                               bcs.s    loc_1C734
0001E0F2 12BC 0000                          move.b    #0,(a1)
0001E0F6 5221                               addq.b    #1,-(a1)
0001E0F8 0C11 0009                          cmpi.b    #9,(a1)
0001E0FC 6500                               bcs.s    loc_1C734
0001E0FE 12BC 0009                          move.b    #9,(a1)
0001E102                            
0001E102                            loc_1C734:
0001E102 203C 5E40 0003                     move.l    #$5E400003,d0
0001E108 7200                               moveq    #0,d1
0001E10A 1238 FE23                          move.b    ($FFFFFE23).w,d1 ; load    minutes
0001E10E 6100 0000                          bsr.w    Hud_Mins
0001E112 203C 5EC0 0003                     move.l    #$5EC00003,d0
0001E118 7200                               moveq    #0,d1
0001E11A 1238 FE24                          move.b    ($FFFFFE24).w,d1 ; load    seconds
0001E11E 6100 0000                          bsr.w    Hud_Secs
0001E122                            
0001E122                            Hud_DoCent:
0001E122 203C 5780 0003                     move.l    #$57800003,d0    ;Mercury Macros ported by -paranoimia-
0001E128 7200                               moveq    #0,d1
0001E12A 1238 FE25                          move.b    ($FFFFFE25).w,d1 ; load    centiseconds
0001E12E 6100 0000                          bsr.w    Hud_Secs
0001E132                            
0001E132                            Hud_ChkLives:
0001E132 4A38 FE1C                          tst.b    ($FFFFFE1C).w    ; does the lives counter need updating?
0001E136 6700                               beq.s    Hud_ChkBonus    ; if not, branch
0001E138 4238 FE1C                          clr.b    ($FFFFFE1C).w
0001E13C 6100 0000                          bsr.w    Hud_Lives
0001E140                            
0001E140                            Hud_ChkBonus:
0001E140 4A38 F7D6                          tst.b    ($FFFFF7D6).w    ; do time/ring bonus counters need updating?
0001E144 6700                               beq.s    Hud_End        ; if not, branch
0001E146 4238 F7D6                          clr.b    ($FFFFF7D6).w
0001E14A 23FC 6E00 0002 00C0 0004           move.l    #$6E000002,($C00004).l
0001E154 7200                               moveq    #0,d1
0001E156 3238 F7D2                          move.w    ($FFFFF7D2).w,d1 ; load    time bonus
0001E15A 6100 0000                          bsr.w    Hud_TimeRingBonus
0001E15E 7200                               moveq    #0,d1
0001E160 3238 F7D4                          move.w    ($FFFFF7D4).w,d1 ; load    ring bonus
0001E164 6100 0000                          bsr.w    Hud_TimeRingBonus
0001E168                            
0001E168                            Hud_End:
0001E168 4E75                               rts
0001E16A                            ; ===========================================================================
0001E16A                            
0001E16A                            TimeOver:				; XREF: Hud_ChkTime
0001E16A 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001E16E 41F8 D000                  		lea	($FFFFD000).w,a0
0001E172 2448                       		movea.l	a0,a2
0001E174 6100 E8B6                  		bsr.w	KillSonic
0001E178 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001E17E 4E75                       		rts
0001E180                            ; ===========================================================================
0001E180                            
0001E180                            HudDebug:				; XREF: HudUpdate
0001E180 6100 0000                  		bsr.w	HudDb_XY
0001E184 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001E188 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001E18A 6A00                       		bpl.s	HudDb_Rings
0001E18C 6100 0000                  		bsr.w	Hud_LoadZero
0001E190                            
0001E190                            HudDb_Rings:
0001E190 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001E194 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001E19A 7200                       		moveq	#0,d1
0001E19C 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001E1A0 6100 0000                  		bsr.w	Hud_Rings
0001E1A4                            
0001E1A4                            HudDb_ObjCount:
0001E1A4 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001E1AA 7200                       		moveq	#0,d1
0001E1AC 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001E1B0 6100 0000                  		bsr.w	Hud_Secs
0001E1B4 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001E1B8 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001E1BA 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001E1BE 6100 0000                  		bsr.w	Hud_Lives
0001E1C2                            
0001E1C2                            HudDb_ChkBonus:
0001E1C2 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001E1C6 6700                       		beq.s	HudDb_End	; if not, branch
0001E1C8 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001E1CC 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001E1D6 7200                       		moveq	#0,d1
0001E1D8 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001E1DC 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001E1E0 7200                       		moveq	#0,d1
0001E1E2 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001E1E6 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001E1EA                            
0001E1EA                            HudDb_End:
0001E1EA 4E75                       		rts
0001E1EC                            ; End of function HudUpdate
0001E1EC                            
0001E1EC                            ; ---------------------------------------------------------------------------
0001E1EC                            ; Subroutine to	load "0" on the	HUD
0001E1EC                            ; ---------------------------------------------------------------------------
0001E1EC                            
0001E1EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E1EC                            
0001E1EC                            
0001E1EC                            Hud_LoadZero:				; XREF: HudUpdate
0001E1EC 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001E1F6 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001E1FA 343C 0002                  		move.w	#2,d2
0001E1FE 6000                       		bra.s	loc_1C83E
0001E200                            ; End of function Hud_LoadZero
0001E200                            
0001E200                            ; ---------------------------------------------------------------------------
0001E200                            ; Subroutine to    load " on the    HUD        ported by -paranoimia-
0001E200                            ; ---------------------------------------------------------------------------
0001E200                            
0001E200                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0001E200                            
0001E200                            
0001E200                            Hud_LoadMarks:                ; XREF: HUD_Update
0001E200 23FC 5740 0003 00D0 0004           move.l    #$57400003,($D00004).l  ;locVRAM    $D740
0001E20A 45FA 0000                          lea    Hud_TilesMarks(pc),a2
0001E20E 343C 0002                          move.w    #2,d2
0001E212 6000                               bra.s    loc_1C83E
0001E214                            ; End of function Hud_LoadMarks
0001E214                            
0001E214                            ; ---------------------------------------------------------------------------
0001E214                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001E214                            ; ---------------------------------------------------------------------------
0001E214                            
0001E214                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E214                            
0001E214                            
0001E214                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001E214 4DF9 00C0 0000             		lea	($C00000).l,a6
0001E21A 6100 0000                  		bsr.w	Hud_Lives
0001E21E 61E0                       		bsr.s    Hud_LoadMarks
0001E220 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001E22A 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001E22E 343C 000E                  		move.w	#$E,d2
0001E232                            
0001E232                            loc_1C83E:				; XREF: Hud_LoadZero
0001E232 43FA 0000                  		lea	Art_Hud(pc),a1
0001E236                            
0001E236                            loc_1C842:
0001E236 323C 000F                  		move.w	#$F,d1
0001E23A 101A                       		move.b	(a2)+,d0
0001E23C 6B00                       		bmi.s	loc_1C85E
0001E23E 4880                       		ext.w	d0
0001E240 EB48                       		lsl.w	#5,d0
0001E242 47F1 0000                  		lea	(a1,d0.w),a3
0001E246                            
0001E246                            loc_1C852:
0001E246 2C9B                       		move.l	(a3)+,(a6)
0001E248 51C9 FFFC                  		dbf	d1,loc_1C852
0001E24C                            
0001E24C                            loc_1C858:
0001E24C 51CA FFE8                  		dbf	d2,loc_1C842
0001E250                            
0001E250 4E75                       		rts
0001E252                            ; ===========================================================================
0001E252                            
0001E252                            loc_1C85E:
0001E252 2CBC 0000 0000             		move.l	#0,(a6)
0001E258 51C9 FFF8                  		dbf	d1,loc_1C85E
0001E25C                            
0001E25C 60EE                       		bra.s	loc_1C858
0001E25E                            ; End of function Hud_Base
0001E25E                            
0001E25E                            ; ===========================================================================
0001E25E 1A00 0000                  Hud_TilesMarks:    dc.b $1A, 0, 0, 0
0001E262 16FF FFFF FFFF FF00 0018+  Hud_TilesBase:    dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,    0, 0, $18, 0, 0
0001E26E FFFF 0000                  Hud_TilesZero:    dc.b $FF, $FF, 0, 0
0001E272                            ; ---------------------------------------------------------------------------
0001E272                            ; Subroutine to	load debug mode	numbers	patterns
0001E272                            ; ---------------------------------------------------------------------------
0001E272                            
0001E272                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E272                            
0001E272                            
0001E272                            HudDb_XY:				; XREF: HudDebug
0001E272 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001E27C 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001E280 4841                       		swap	d1
0001E282 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001E286 6100                       		bsr.s	HudDb_XY2
0001E288 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001E28C 4841                       		swap	d1
0001E28E 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001E292                            ; End of function HudDb_XY
0001E292                            
0001E292                            
0001E292                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E292                            
0001E292                            
0001E292                            HudDb_XY2:
0001E292 7C07                       		moveq	#7,d6
0001E294 43F9 0000 058C             		lea	(Art_Text).l,a1
0001E29A                            
0001E29A                            HudDb_XYLoop:
0001E29A E959                       		rol.w	#4,d1
0001E29C 3401                       		move.w	d1,d2
0001E29E 0242 000F                  		andi.w	#$F,d2
0001E2A2 0C42 000A                  		cmpi.w	#$A,d2
0001E2A6 6500                       		bcs.s	loc_1C8B2
0001E2A8 5E42                       		addq.w	#7,d2
0001E2AA                            
0001E2AA                            loc_1C8B2:
0001E2AA EB4A                       		lsl.w	#5,d2
0001E2AC 47F1 2000                  		lea	(a1,d2.w),a3
0001E2B0 2C9B                       		move.l	(a3)+,(a6)
0001E2B2 2C9B                       		move.l	(a3)+,(a6)
0001E2B4 2C9B                       		move.l	(a3)+,(a6)
0001E2B6 2C9B                       		move.l	(a3)+,(a6)
0001E2B8 2C9B                       		move.l	(a3)+,(a6)
0001E2BA 2C9B                       		move.l	(a3)+,(a6)
0001E2BC 2C9B                       		move.l	(a3)+,(a6)
0001E2BE 2C9B                       		move.l	(a3)+,(a6)
0001E2C0 4841                       		swap	d1
0001E2C2 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001E2C6                            
0001E2C6 4E75                       		rts	
0001E2C8                            ; End of function HudDb_XY2
0001E2C8                            
0001E2C8                            ; ---------------------------------------------------------------------------
0001E2C8                            ; Subroutine to	load rings numbers patterns
0001E2C8                            ; ---------------------------------------------------------------------------
0001E2C8                            
0001E2C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E2C8                            
0001E2C8                            
0001E2C8                            Hud_Rings:				; XREF: HudUpdate
0001E2C8 45F9 0000 0000             		lea	(Hud_100).l,a2
0001E2CE 7C02                       		moveq	#2,d6
0001E2D0 6000                       		bra.s	Hud_LoadArt
0001E2D2                            ; End of function Hud_Rings
0001E2D2                            
0001E2D2                            ; ---------------------------------------------------------------------------
0001E2D2                            ; Subroutine to	load score numbers patterns
0001E2D2                            ; ---------------------------------------------------------------------------
0001E2D2                            
0001E2D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E2D2                            
0001E2D2                            
0001E2D2                            Hud_Score:				; XREF: HudUpdate
0001E2D2 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001E2D8 7C05                       		moveq	#5,d6
0001E2DA                            
0001E2DA                            Hud_LoadArt:
0001E2DA 7800                       		moveq	#0,d4
0001E2DC 43FA 0000                  		lea	Art_Hud(pc),a1
0001E2E0                            
0001E2E0                            Hud_ScoreLoop:
0001E2E0 7400                       		moveq	#0,d2
0001E2E2 261A                       		move.l	(a2)+,d3
0001E2E4                            
0001E2E4                            loc_1C8EC:
0001E2E4 9283                       		sub.l	d3,d1
0001E2E6 6500                       		bcs.s	loc_1C8F4
0001E2E8 5242                       		addq.w	#1,d2
0001E2EA 60F8                       		bra.s	loc_1C8EC
0001E2EC                            ; ===========================================================================
0001E2EC                            
0001E2EC                            loc_1C8F4:
0001E2EC D283                       		add.l	d3,d1
0001E2EE 4A42                       		tst.w	d2
0001E2F0 6700                       		beq.s	loc_1C8FE
0001E2F2 383C 0001                  		move.w	#1,d4
0001E2F6                            
0001E2F6                            loc_1C8FE:
0001E2F6 4A44                       		tst.w	d4
0001E2F8 6700                       		beq.s	loc_1C92C
0001E2FA ED4A                       		lsl.w	#6,d2
0001E2FC 2D40 0004                  		move.l	d0,4(a6)
0001E300 47F1 2000                  		lea	(a1,d2.w),a3
0001E304 2C9B                       		move.l	(a3)+,(a6)
0001E306 2C9B                       		move.l	(a3)+,(a6)
0001E308 2C9B                       		move.l	(a3)+,(a6)
0001E30A 2C9B                       		move.l	(a3)+,(a6)
0001E30C 2C9B                       		move.l	(a3)+,(a6)
0001E30E 2C9B                       		move.l	(a3)+,(a6)
0001E310 2C9B                       		move.l	(a3)+,(a6)
0001E312 2C9B                       		move.l	(a3)+,(a6)
0001E314 2C9B                       		move.l	(a3)+,(a6)
0001E316 2C9B                       		move.l	(a3)+,(a6)
0001E318 2C9B                       		move.l	(a3)+,(a6)
0001E31A 2C9B                       		move.l	(a3)+,(a6)
0001E31C 2C9B                       		move.l	(a3)+,(a6)
0001E31E 2C9B                       		move.l	(a3)+,(a6)
0001E320 2C9B                       		move.l	(a3)+,(a6)
0001E322 2C9B                       		move.l	(a3)+,(a6)
0001E324                            
0001E324                            loc_1C92C:
0001E324 0680 0040 0000             		addi.l	#$400000,d0
0001E32A 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001E32E                            
0001E32E 4E75                       		rts
0001E330                            ; End of function Hud_Score
0001E330                            
0001E330                            ; ---------------------------------------------------------------------------
0001E330                            ; Subroutine to	load countdown numbers on the continue screen
0001E330                            ; ---------------------------------------------------------------------------
0001E330                            
0001E330                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E330                            
0001E330                            
0001E330                            ContScrCounter:				; XREF: ContinueScreen
0001E330 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001E33A 4DF9 00C0 0000             		lea	($C00000).l,a6
0001E340 45F9 0000 0000             		lea	(Hud_10).l,a2
0001E346 7C01                       		moveq	#1,d6
0001E348 7800                       		moveq	#0,d4
0001E34A 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001E34E                            
0001E34E                            ContScr_Loop:
0001E34E 7400                       		moveq	#0,d2
0001E350 261A                       		move.l	(a2)+,d3
0001E352                            
0001E352                            loc_1C95A:
0001E352 9283                       		sub.l	d3,d1
0001E354 6500                       		bcs.s	loc_1C962
0001E356 5242                       		addq.w	#1,d2
0001E358 60F8                       		bra.s	loc_1C95A
0001E35A                            ; ===========================================================================
0001E35A                            
0001E35A                            loc_1C962:
0001E35A D283                       		add.l	d3,d1
0001E35C ED4A                       		lsl.w	#6,d2
0001E35E 47F1 2000                  		lea	(a1,d2.w),a3
0001E362 2C9B                       		move.l	(a3)+,(a6)
0001E364 2C9B                       		move.l	(a3)+,(a6)
0001E366 2C9B                       		move.l	(a3)+,(a6)
0001E368 2C9B                       		move.l	(a3)+,(a6)
0001E36A 2C9B                       		move.l	(a3)+,(a6)
0001E36C 2C9B                       		move.l	(a3)+,(a6)
0001E36E 2C9B                       		move.l	(a3)+,(a6)
0001E370 2C9B                       		move.l	(a3)+,(a6)
0001E372 2C9B                       		move.l	(a3)+,(a6)
0001E374 2C9B                       		move.l	(a3)+,(a6)
0001E376 2C9B                       		move.l	(a3)+,(a6)
0001E378 2C9B                       		move.l	(a3)+,(a6)
0001E37A 2C9B                       		move.l	(a3)+,(a6)
0001E37C 2C9B                       		move.l	(a3)+,(a6)
0001E37E 2C9B                       		move.l	(a3)+,(a6)
0001E380 2C9B                       		move.l	(a3)+,(a6)
0001E382 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001E386                            
0001E386 4E75                       		rts
0001E388                            ; End of function ContScrCounter
0001E388                            
0001E388                            ; ===========================================================================
0001E388                            ; ---------------------------------------------------------------------------
0001E388                            ; HUD counter sizes
0001E388                            ; ---------------------------------------------------------------------------
0001E388 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001E38C 0000 2710                  Hud_10000:	dc.l 10000
0001E390 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001E394 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001E398 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001E39C 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001E3A0                            
0001E3A0                            ; ---------------------------------------------------------------------------
0001E3A0                            ; Subroutine to	load time numbers patterns
0001E3A0                            ; ---------------------------------------------------------------------------
0001E3A0                            
0001E3A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E3A0                            
0001E3A0                            
0001E3A0                            Hud_Mins:				; XREF: Hud_ChkTime
0001E3A0 45F9 0001 E39C             		lea	(Hud_1).l,a2
0001E3A6 7C00                       		moveq	#0,d6
0001E3A8 6000                       		bra.s	loc_1C9BA
0001E3AA                            ; End of function Hud_Mins
0001E3AA                            
0001E3AA                            
0001E3AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E3AA                            
0001E3AA                            
0001E3AA                            Hud_Secs:				; XREF: Hud_ChkTime
0001E3AA 45F9 0001 E398             		lea	(Hud_10).l,a2
0001E3B0 7C01                       		moveq	#1,d6
0001E3B2                            
0001E3B2                            loc_1C9BA:
0001E3B2 7800                       		moveq	#0,d4
0001E3B4 43FA 0000                  		lea	Art_Hud(pc),a1
0001E3B8                            
0001E3B8                            Hud_TimeLoop:
0001E3B8 7400                       		moveq	#0,d2
0001E3BA 261A                       		move.l	(a2)+,d3
0001E3BC                            
0001E3BC                            loc_1C9C4:
0001E3BC 9283                       		sub.l	d3,d1
0001E3BE 6500                       		bcs.s	loc_1C9CC
0001E3C0 5242                       		addq.w	#1,d2
0001E3C2 60F8                       		bra.s	loc_1C9C4
0001E3C4                            ; ===========================================================================
0001E3C4                            
0001E3C4                            loc_1C9CC:
0001E3C4 D283                       		add.l	d3,d1
0001E3C6 4A42                       		tst.w	d2
0001E3C8 6700                       		beq.s	loc_1C9D6
0001E3CA 383C 0001                  		move.w	#1,d4
0001E3CE                            
0001E3CE                            loc_1C9D6:
0001E3CE ED4A                       		lsl.w	#6,d2
0001E3D0 2D40 0004                  		move.l	d0,4(a6)
0001E3D4 47F1 2000                  		lea	(a1,d2.w),a3
0001E3D8 2C9B                       		move.l	(a3)+,(a6)
0001E3DA 2C9B                       		move.l	(a3)+,(a6)
0001E3DC 2C9B                       		move.l	(a3)+,(a6)
0001E3DE 2C9B                       		move.l	(a3)+,(a6)
0001E3E0 2C9B                       		move.l	(a3)+,(a6)
0001E3E2 2C9B                       		move.l	(a3)+,(a6)
0001E3E4 2C9B                       		move.l	(a3)+,(a6)
0001E3E6 2C9B                       		move.l	(a3)+,(a6)
0001E3E8 2C9B                       		move.l	(a3)+,(a6)
0001E3EA 2C9B                       		move.l	(a3)+,(a6)
0001E3EC 2C9B                       		move.l	(a3)+,(a6)
0001E3EE 2C9B                       		move.l	(a3)+,(a6)
0001E3F0 2C9B                       		move.l	(a3)+,(a6)
0001E3F2 2C9B                       		move.l	(a3)+,(a6)
0001E3F4 2C9B                       		move.l	(a3)+,(a6)
0001E3F6 2C9B                       		move.l	(a3)+,(a6)
0001E3F8 0680 0040 0000             		addi.l	#$400000,d0
0001E3FE 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001E402                            
0001E402 4E75                       		rts
0001E404                            ; End of function Hud_Secs
0001E404                            
0001E404                            ; ---------------------------------------------------------------------------
0001E404                            ; Subroutine to	load time/ring bonus numbers patterns
0001E404                            ; ---------------------------------------------------------------------------
0001E404                            
0001E404                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E404                            
0001E404                            
0001E404                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001E404 45F9 0001 E390             		lea	(Hud_1000).l,a2
0001E40A 7C03                       		moveq	#3,d6
0001E40C 7800                       		moveq	#0,d4
0001E40E 43FA 0000                  		lea	Art_Hud(pc),a1
0001E412                            
0001E412                            Hud_BonusLoop:
0001E412 7400                       		moveq	#0,d2
0001E414 261A                       		move.l	(a2)+,d3
0001E416                            
0001E416                            loc_1CA1E:
0001E416 9283                       		sub.l	d3,d1
0001E418 6500                       		bcs.s	loc_1CA26
0001E41A 5242                       		addq.w	#1,d2
0001E41C 60F8                       		bra.s	loc_1CA1E
0001E41E                            ; ===========================================================================
0001E41E                            
0001E41E                            loc_1CA26:
0001E41E D283                       		add.l	d3,d1
0001E420 4A42                       		tst.w	d2
0001E422 6700                       		beq.s	loc_1CA30
0001E424 383C 0001                  		move.w	#1,d4
0001E428                            
0001E428                            loc_1CA30:
0001E428 4A44                       		tst.w	d4
0001E42A 6700                       		beq.s	Hud_ClrBonus
0001E42C ED4A                       		lsl.w	#6,d2
0001E42E 47F1 2000                  		lea	(a1,d2.w),a3
0001E432 2C9B                       		move.l	(a3)+,(a6)
0001E434 2C9B                       		move.l	(a3)+,(a6)
0001E436 2C9B                       		move.l	(a3)+,(a6)
0001E438 2C9B                       		move.l	(a3)+,(a6)
0001E43A 2C9B                       		move.l	(a3)+,(a6)
0001E43C 2C9B                       		move.l	(a3)+,(a6)
0001E43E 2C9B                       		move.l	(a3)+,(a6)
0001E440 2C9B                       		move.l	(a3)+,(a6)
0001E442 2C9B                       		move.l	(a3)+,(a6)
0001E444 2C9B                       		move.l	(a3)+,(a6)
0001E446 2C9B                       		move.l	(a3)+,(a6)
0001E448 2C9B                       		move.l	(a3)+,(a6)
0001E44A 2C9B                       		move.l	(a3)+,(a6)
0001E44C 2C9B                       		move.l	(a3)+,(a6)
0001E44E 2C9B                       		move.l	(a3)+,(a6)
0001E450 2C9B                       		move.l	(a3)+,(a6)
0001E452                            
0001E452                            loc_1CA5A:
0001E452 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001E456                            
0001E456 4E75                       		rts
0001E458                            ; ===========================================================================
0001E458                            
0001E458                            Hud_ClrBonus:
0001E458 7A0F                       		moveq	#$F,d5
0001E45A                            
0001E45A                            Hud_ClrBonusLoop:
0001E45A 2CBC 0000 0000             		move.l	#0,(a6)
0001E460 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001E464                            
0001E464 60EC                       		bra.s	loc_1CA5A
0001E466                            ; End of function Hud_TimeRingBonus
0001E466                            
0001E466                            ; ---------------------------------------------------------------------------
0001E466                            ; Subroutine to	load uncompressed lives	counter	patterns
0001E466                            ; ---------------------------------------------------------------------------
0001E466                            
0001E466                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E466                            
0001E466                            
0001E466                            Hud_Lives:				; XREF: Hud_ChkLives
0001E466 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001E46C 7200                       		moveq	#0,d1
0001E46E 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001E472 45F9 0001 E398             		lea	(Hud_10).l,a2
0001E478 7C01                       		moveq	#1,d6
0001E47A 7800                       		moveq	#0,d4
0001E47C 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001E480                            
0001E480                            Hud_LivesLoop:
0001E480 2D40 0004                  		move.l	d0,4(a6)
0001E484 7400                       		moveq	#0,d2
0001E486 261A                       		move.l	(a2)+,d3
0001E488                            
0001E488                            loc_1CA90:
0001E488 9283                       		sub.l	d3,d1
0001E48A 6500                       		bcs.s	loc_1CA98
0001E48C 5242                       		addq.w	#1,d2
0001E48E 60F8                       		bra.s	loc_1CA90
0001E490                            ; ===========================================================================
0001E490                            
0001E490                            loc_1CA98:
0001E490 D283                       		add.l	d3,d1
0001E492 4A42                       		tst.w	d2
0001E494 6700                       		beq.s	loc_1CAA2
0001E496 383C 0001                  		move.w	#1,d4
0001E49A                            
0001E49A                            loc_1CAA2:
0001E49A 4A44                       		tst.w	d4
0001E49C 6700                       		beq.s	Hud_ClrLives
0001E49E                            
0001E49E                            loc_1CAA6:
0001E49E EB4A                       		lsl.w	#5,d2
0001E4A0 47F1 2000                  		lea	(a1,d2.w),a3
0001E4A4 2C9B                       		move.l	(a3)+,(a6)
0001E4A6 2C9B                       		move.l	(a3)+,(a6)
0001E4A8 2C9B                       		move.l	(a3)+,(a6)
0001E4AA 2C9B                       		move.l	(a3)+,(a6)
0001E4AC 2C9B                       		move.l	(a3)+,(a6)
0001E4AE 2C9B                       		move.l	(a3)+,(a6)
0001E4B0 2C9B                       		move.l	(a3)+,(a6)
0001E4B2 2C9B                       		move.l	(a3)+,(a6)
0001E4B4                            
0001E4B4                            loc_1CABC:
0001E4B4 0680 0040 0000             		addi.l	#$400000,d0
0001E4BA 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001E4BE                            
0001E4BE 4E75                       		rts
0001E4C0                            ; ===========================================================================
0001E4C0                            
0001E4C0                            Hud_ClrLives:
0001E4C0 4A46                       		tst.w	d6
0001E4C2 67DA                       		beq.s	loc_1CAA6
0001E4C4 7A07                       		moveq	#7,d5
0001E4C6                            
0001E4C6                            Hud_ClrLivesLoop:
0001E4C6 2CBC 0000 0000             		move.l	#0,(a6)
0001E4CC 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001E4D0 60E2                       		bra.s	loc_1CABC
0001E4D2                            ; End of function Hud_Lives
0001E4D2                            
0001E4D2                            ; ===========================================================================
0001E4D2                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001E852                            		even
0001E852                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001E992                            		even
0001E992                            ; ===========================================================================
0001E992                            ; ---------------------------------------------------------------------------
0001E992                            ; When debug mode is currently in use
0001E992                            ; ---------------------------------------------------------------------------
0001E992                            
0001E992                            DebugMode:				; XREF: Obj01; Obj09
0001E992 7000                       		moveq	#0,d0
0001E994 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001E998 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001E99C 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001E9A0                            ; ===========================================================================
0001E9A0 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001E9A2 0000                       		dc.w Debug_Skip-Debug_Index
0001E9A4                            ; ===========================================================================
0001E9A4                            
0001E9A4                            Debug_Main:				; XREF: Debug_Index
0001E9A4 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001E9A8 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001E9AE 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001E9B4 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001E9BA 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001E9C0 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001E9C6 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001E9CC 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001E9D2 117C 0000 001A             		move.b	#0,$1A(a0)
0001E9D8 117C 0000 001C             		move.b	#0,$1C(a0)
0001E9DE 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001E9E4 6600                       		bne.s	Debug_Zone	; if not, branch
0001E9E6 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001E9EC 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001E9F2 7006                       		moveq	#6,d0		; use 6th debug	item list
0001E9F4 6000                       		bra.s	Debug_UseList
0001E9F6                            ; ===========================================================================
0001E9F6                            
0001E9F6                            Debug_Zone:
0001E9F6 7000                       		moveq	#0,d0
0001E9F8 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001E9FC                            
0001E9FC                            Debug_UseList:
0001E9FC 45F9 0000 0000             		lea	(DebugList).l,a2
0001EA02 D040                       		add.w	d0,d0
0001EA04 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001EA08 3C1A                       		move.w	(a2)+,d6
0001EA0A BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001EA0E 6200                       		bhi.s	loc_1CF9E
0001EA10 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001EA16                            
0001EA16                            loc_1CF9E:
0001EA16 6100 0000                  		bsr.w	Debug_ShowItem
0001EA1A 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001EA20 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001EA26                            
0001EA26                            Debug_Skip:				; XREF: Debug_Index
0001EA26 7006                       		moveq	#6,d0
0001EA28 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001EA2E 6700                       		beq.s	loc_1CFBE
0001EA30 7000                       		moveq	#0,d0
0001EA32 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001EA36                            
0001EA36                            loc_1CFBE:
0001EA36 45F9 0000 0000             		lea	(DebugList).l,a2
0001EA3C D040                       		add.w	d0,d0
0001EA3E D4F2 0000                  		adda.w	(a2,d0.w),a2
0001EA42 3C1A                       		move.w	(a2)+,d6
0001EA44 6100 0000                  		bsr.w	Debug_Control
0001EA48 4EF9 0000 E0DE             		jmp	DisplaySprite
0001EA4E                            
0001EA4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EA4E                            
0001EA4E                            
0001EA4E                            Debug_Control:
0001EA4E 7800                       		moveq	#0,d4
0001EA50 323C 0001                  		move.w	#1,d1
0001EA54 1838 F605                  		move.b	($FFFFF605).w,d4
0001EA58 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001EA5C 6600                       		bne.s	loc_1D018	; if yes, branch
0001EA5E 1038 F604                  		move.b	($FFFFF604).w,d0
0001EA62 0240 000F                  		andi.w	#$F,d0
0001EA66 6600                       		bne.s	loc_1D000
0001EA68 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001EA6E 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001EA74 6000 0000                  		bra.w	Debug_BackItem
0001EA78                            ; ===========================================================================
0001EA78                            
0001EA78                            loc_1D000:
0001EA78 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001EA7C 6600                       		bne.s	loc_1D01C
0001EA7E 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001EA84 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001EA88 6600                       		bne.s	loc_1D018
0001EA8A 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001EA90                            
0001EA90                            loc_1D018:
0001EA90 1838 F604                  		move.b	($FFFFF604).w,d4
0001EA94                            
0001EA94                            loc_1D01C:
0001EA94 7200                       		moveq	#0,d1
0001EA96 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001EA9A 5241                       		addq.w	#1,d1
0001EA9C 4841                       		swap	d1
0001EA9E E881                       		asr.l	#4,d1
0001EAA0 2428 000C                  		move.l	$C(a0),d2
0001EAA4 2628 0008                  		move.l	8(a0),d3
0001EAA8 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001EAAC 6700                       		beq.s	loc_1D03C	; if not, branch
0001EAAE 9481                       		sub.l	d1,d2
0001EAB0 6400                       		bcc.s	loc_1D03C
0001EAB2 7400                       		moveq	#0,d2
0001EAB4                            
0001EAB4                            loc_1D03C:
0001EAB4 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001EAB8 6700                       		beq.s	loc_1D052	; if not, branch
0001EABA D481                       		add.l	d1,d2
0001EABC 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001EAC2 6500                       		bcs.s	loc_1D052
0001EAC4 243C 07FF 0000             		move.l	#$7FF0000,d2
0001EACA                            
0001EACA                            loc_1D052:
0001EACA 0804 0002                  		btst	#2,d4
0001EACE 6700                       		beq.s	loc_1D05E
0001EAD0 9681                       		sub.l	d1,d3
0001EAD2 6400                       		bcc.s	loc_1D05E
0001EAD4 7600                       		moveq	#0,d3
0001EAD6                            
0001EAD6                            loc_1D05E:
0001EAD6 0804 0003                  		btst	#3,d4
0001EADA 6700                       		beq.s	loc_1D066
0001EADC D681                       		add.l	d1,d3
0001EADE                            
0001EADE                            loc_1D066:
0001EADE 2142 000C                  		move.l	d2,$C(a0)
0001EAE2 2143 0008                  		move.l	d3,8(a0)
0001EAE6                            
0001EAE6                            Debug_BackItem:
0001EAE6 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001EAEC 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001EAEE 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001EAF4 6700                       		beq.s	Debug_NextItem	; if not, branch
0001EAF6 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001EAFA 6400                       		bcc.s	Debug_NoLoop
0001EAFC DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001EB00 6000                       		bra.s	Debug_NoLoop
0001EB02                            ; ===========================================================================
0001EB02                            
0001EB02                            Debug_NextItem:
0001EB02 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001EB08 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001EB0A 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001EB0E BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001EB12 6200                       		bhi.s	Debug_NoLoop
0001EB14 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001EB1A                            
0001EB1A                            Debug_NoLoop:
0001EB1A 6000 0000                  		bra.w	Debug_ShowItem
0001EB1E                            ; ===========================================================================
0001EB1E                            
0001EB1E                            Debug_MakeItem:
0001EB1E 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001EB24 6700                       		beq.s	Debug_Exit	; if not, branch
0001EB26 4EB9 0000 E574             		jsr	SingleObjLoad
0001EB2C 6600                       		bne.s	Debug_Exit
0001EB2E 3368 0008 0008             		move.w	8(a0),8(a1)
0001EB34 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001EB3A 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001EB3E 1368 0001 0001             		move.b	1(a0),1(a1)
0001EB44 1368 0001 0022             		move.b	1(a0),$22(a1)
0001EB4A 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001EB50 7000                       		moveq	#0,d0
0001EB52 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001EB56 E748                       		lsl.w	#3,d0
0001EB58 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001EB5E 4E75                       		rts	
0001EB60                            ; ===========================================================================
0001EB60                            
0001EB60                            Debug_Exit:
0001EB60 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001EB66 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001EB68 7000                       		moveq	#0,d0
0001EB6A 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001EB6E 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001EB76 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001EB7C 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001EB80 3140 000A                  		move.w	d0,$A(a0)
0001EB84 3140 000E                  		move.w	d0,$E(a0)
0001EB88 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001EB8E 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001EB94 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001EB9A 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001EB9C 4278 F780                  		clr.w	($FFFFF780).w
0001EBA0 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001EBA6 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001EBAE 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001EBB4 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001EBBA 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001EBC0 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001EBC6                            
0001EBC6                            Debug_DoNothing:
0001EBC6 4E75                       		rts	
0001EBC8                            ; End of function Debug_Control
0001EBC8                            
0001EBC8                            
0001EBC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EBC8                            
0001EBC8                            
0001EBC8                            Debug_ShowItem:				; XREF: Debug_Main
0001EBC8 7000                       		moveq	#0,d0
0001EBCA 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001EBCE E748                       		lsl.w	#3,d0
0001EBD0 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001EBD6 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001EBDC 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001EBE2 4E75                       		rts	
0001EBE4                            ; End of function Debug_ShowItem
0001EBE4                            
0001EBE4                            ; ===========================================================================
0001EBE4                            ; ---------------------------------------------------------------------------
0001EBE4                            ; Debug	list pointers
0001EBE4                            ; ---------------------------------------------------------------------------
0001EBE4                            DebugList:
0001EBE4                            	include "_inc\Debug list pointers.asm"
0001EBE4                            ; ---------------------------------------------------------------------------
0001EBE4                            ; Debug	list pointers
0001EBE4                            ; ---------------------------------------------------------------------------
0001EBE4 0000                       	dc.w Debug_GHZ-DebugList
0001EBE6 0000                       	dc.w Debug_LZ-DebugList
0001EBE8 0000                       	dc.w Debug_MZ-DebugList
0001EBEA 0000                       	dc.w Debug_SLZ-DebugList
0001EBEC 0000                       	dc.w Debug_SYZ-DebugList
0001EBEE 0000                       	dc.w Debug_SBZ-DebugList
0001EBF0 0000                       	dc.w Debug_Ending-DebugList
0001EBF0 0000                       	dc.w Debug_Ending-DebugList
0001EBF2                            
0001EBF2                            ; ---------------------------------------------------------------------------
0001EBF2                            ; Debug	list - Green Hill
0001EBF2                            ; ---------------------------------------------------------------------------
0001EBF2                            Debug_GHZ:
0001EBF2                            	include "_inc\Debug list - GHZ.asm"
0001EBF2                            ; ---------------------------------------------------------------------------
0001EBF2                            ; Debug	list - Green Hill
0001EBF2                            ; ---------------------------------------------------------------------------
0001EBF2 0010                       	dc.w $10			; number of items in list
0001EBF4 2500 AA32                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001EBF8 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001EBFC 2600 B062                  	dc.l Map_obj26+$26000000
0001EC00 0000 0680                  	dc.b 0,	0, 6, $80
0001EC04 1F00 A1BA                  	dc.l Map_obj1F+$1F000000
0001EC08 0000 0400                  	dc.b 0,	0, 4, 0
0001EC0C 2200 A49A                  	dc.l Map_obj22+$22000000
0001EC10 0000 0444                  	dc.b 0,	0, 4, $44
0001EC14 2B00 B6A8                  	dc.l Map_obj2B+$2B000000
0001EC18 0000 047B                  	dc.b 0,	0, 4, $7B
0001EC1C 3600 DAB8                  	dc.l Map_obj36+$36000000
0001EC20 0000 051B                  	dc.b 0,	0, 5, $1B
0001EC24 1800 8BB8                  	dc.l Map_obj18+$18000000
0001EC28 0000 4000                  	dc.b 0,	0, $40,	0
0001EC2C 3B00 DBDE                  	dc.l Map_obj3B+$3B000000
0001EC30 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001EC34 4001 0292                  	dc.l Map_obj40+$40000000
0001EC38 0000 04F0                  	dc.b 0,	0, 4, $F0
0001EC3C 4100 E806                  	dc.l Map_obj41+$41000000
0001EC40 0000 0523                  	dc.b 0,	0, 5, $23
0001EC44 4200 EA2C                  	dc.l Map_obj42+$42000000
0001EC48 0000 249B                  	dc.b 0,	0, $24,	$9B
0001EC4C 4400 ED3A                  	dc.l Map_obj44+$44000000
0001EC50 0000 434C                  	dc.b 0,	0, $43,	$4C
0001EC54 1900 8C26                  	dc.l Map_obj48+$19000000
0001EC58 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001EC5C 7901 8A9A                  	dc.l Map_obj79+$79000000
0001EC60 0100 07A0                  	dc.b 1,	0, 7, $A0
0001EC64 4B00 AA72                  	dc.l Map_obj4B+$4B000000
0001EC68 0000 2400                  	dc.b 0,	0, $24,	0
0001EC6C 7D01 8BEA                  	dc.l Map_obj7D+$7D000000
0001EC70 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001EC74                            	even
0001EC74                            	even
0001EC74                            
0001EC74                            ; ---------------------------------------------------------------------------
0001EC74                            ; Debug	list - Labyrinth
0001EC74                            ; ---------------------------------------------------------------------------
0001EC74                            Debug_LZ:
0001EC74                            	include "_inc\Debug list - LZ.asm"
0001EC74                            ; ---------------------------------------------------------------------------
0001EC74                            ; Debug	list - Labyrinth
0001EC74                            ; ---------------------------------------------------------------------------
0001EC74 0019                       	dc.w $19
0001EC76 2500 AA32                  	dc.l Map_obj25+$25000000
0001EC7A 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001EC7E 2600 B062                  	dc.l Map_obj26+$26000000
0001EC82 0000 0680                  	dc.b 0,	0, 6, $80
0001EC86 4100 E806                  	dc.l Map_obj41+$41000000
0001EC8A 0000 0523                  	dc.b 0,	0, 5, $23
0001EC8E 2C00 B74E                  	dc.l Map_obj2C+$2C000000
0001EC92 0800 2486                  	dc.b 8,	0, $24,	$86
0001EC96 2D00 B93A                  	dc.l Map_obj2D+$2D000000
0001EC9A 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001EC9E 1601 2A86                  	dc.l Map_obj16+$16000000
0001ECA2 0000 03CC                  	dc.b 0,	0, 3, $CC
0001ECA6 1601 2A86                  	dc.l Map_obj16+$16000000
0001ECAA 0203 03CC                  	dc.b 2,	3, 3, $CC
0001ECAE 3300 CDB8                  	dc.l Map_obj33+$33000000
0001ECB2 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001ECB6 3200 C978                  	dc.l Map_obj32+$32000000
0001ECBA 0000 0513                  	dc.b 0,	0, 5, $13
0001ECBE 3600 DAB8                  	dc.l Map_obj36+$36000000
0001ECC2 0000 051B                  	dc.b 0,	0, 5, $1B
0001ECC6 5201 0BA8                  	dc.l Map_obj52a+$52000000
0001ECCA 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001ECCE 6101 2CAE                  	dc.l Map_obj61+$61000000
0001ECD2 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001ECD6 6101 2CAE                  	dc.l Map_obj61+$61000000
0001ECDA 1301 43E6                  	dc.b $13, 1, $43, $E6
0001ECDE 6101 2CAE                  	dc.l Map_obj61+$61000000
0001ECE2 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001ECE6 6201 2E02                  	dc.l Map_obj62+$62000000
0001ECEA 0000 443E                  	dc.b 0,	0, $44,	$3E
0001ECEE 6101 2CAE                  	dc.l Map_obj61+$61000000
0001ECF2 2702 43E6                  	dc.b $27, 2, $43, $E6
0001ECF6 6101 2CAE                  	dc.l Map_obj61+$61000000
0001ECFA 3003 43E6                  	dc.b $30, 3, $43, $E6
0001ECFE 6301 3164                  	dc.l Map_obj63+$63000000
0001ED02 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001ED06 6001 29D0                  	dc.l Map_obj60+$60000000
0001ED0A 0000 0467                  	dc.b 0,	0, 4, $67
0001ED0E 6401 34AA                  	dc.l Map_obj64+$64000000
0001ED12 8413 8348                  	dc.b $84, $13, $83, $48
0001ED16 6501 3632                  	dc.l Map_obj65+$65000000
0001ED1A 0202 C259                  	dc.b 2,	2, $C2,	$59
0001ED1E 6501 3632                  	dc.l Map_obj65+$65000000
0001ED22 0909 C259                  	dc.b 9,	9, $C2,	$59
0001ED26 0B01 1E20                  	dc.l Map_obj0B+$B000000
0001ED2A 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001ED2E 0C01 1EF0                  	dc.l Map_obj0C+$C000000
0001ED32 0200 4328                  	dc.b 2,	0, $43,	$28
0001ED36 7901 8A9A                  	dc.l Map_obj79+$79000000
0001ED3A 0100 07A0                  	dc.b 1,	0, 7, $A0
0001ED3E                            	even
0001ED3E                            	even
0001ED3E                            
0001ED3E                            ; ---------------------------------------------------------------------------
0001ED3E                            ; Debug	list - Marble
0001ED3E                            ; ---------------------------------------------------------------------------
0001ED3E                            Debug_MZ:
0001ED3E                            	include "_inc\Debug list - MZ.asm"
0001ED3E                            ; ---------------------------------------------------------------------------
0001ED3E                            ; Debug	list - Marble
0001ED3E                            ; ---------------------------------------------------------------------------
0001ED3E 0012                       	dc.w $12
0001ED40 2500 AA32                  	dc.l Map_obj25+$25000000
0001ED44 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001ED48 2600 B062                  	dc.l Map_obj26+$26000000
0001ED4C 0000 0680                  	dc.b 0,	0, 6, $80
0001ED50 2200 A49A                  	dc.l Map_obj22+$22000000
0001ED54 0000 0444                  	dc.b 0,	0, 4, $44
0001ED58 3600 DAB8                  	dc.l Map_obj36+$36000000
0001ED5C 0000 051B                  	dc.b 0,	0, 5, $1B
0001ED60 4100 E806                  	dc.l Map_obj41+$41000000
0001ED64 0000 0523                  	dc.b 0,	0, 5, $23
0001ED68 1300 BE48                  	dc.l Map_obj14+$13000000
0001ED6C 0000 0345                  	dc.b 0,	0, 3, $45
0001ED70 4600 F3EC                  	dc.l Map_obj46+$46000000
0001ED74 0000 4000                  	dc.b 0,	0, $40,	0
0001ED78 4C00 FD3E                  	dc.l Map_obj4C+$4C000000
0001ED7C 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001ED80 4E01 0022                  	dc.l Map_obj4E+$4E000000
0001ED84 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001ED88 3300 CDB8                  	dc.l Map_obj33+$33000000
0001ED8C 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001ED90 5001 0420                  	dc.l Map_obj50+$50000000
0001ED94 0000 247B                  	dc.b 0,	0, $24,	$7B
0001ED98 5101 08DC                  	dc.l Map_obj51+$51000000
0001ED9C 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001EDA0 5201 0B52                  	dc.l Map_obj52+$52000000
0001EDA4 0000 02B8                  	dc.b 0,	0, 2, $B8
0001EDA8 5300 91BE                  	dc.l Map_obj53+$53000000
0001EDAC 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001EDB0 5400 FD04                  	dc.l Map_obj54+$54000000
0001EDB4 0000 8680                  	dc.b 0,	0, $86,	$80
0001EDB8 5501 0D46                  	dc.l Map_obj55+$55000000
0001EDBC 0000 04B8                  	dc.b 0,	0, 4, $B8
0001EDC0 7801 8712                  	dc.l Map_obj78+$78000000
0001EDC4 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001EDC8 7901 8A9A                  	dc.l Map_obj79+$79000000
0001EDCC 0100 07A0                  	dc.b 1,	0, 7, $A0
0001EDD0                            	even
0001EDD0                            	even
0001EDD0                            
0001EDD0                            ; ---------------------------------------------------------------------------
0001EDD0                            ; Debug	list - Star Light
0001EDD0                            ; ---------------------------------------------------------------------------
0001EDD0                            Debug_SLZ:
0001EDD0                            	include "_inc\Debug list - SLZ.asm"
0001EDD0                            ; ---------------------------------------------------------------------------
0001EDD0                            ; Debug	list - Star Light
0001EDD0                            ; ---------------------------------------------------------------------------
0001EDD0 000F                       	dc.w $F
0001EDD2 2500 AA32                  	dc.l Map_obj25+$25000000
0001EDD6 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001EDDA 2600 B062                  	dc.l Map_obj26+$26000000
0001EDDE 0000 0680                  	dc.b 0,	0, 6, $80
0001EDE2 5901 1848                  	dc.l Map_obj59+$59000000
0001EDE6 0000 4000                  	dc.b 0,	0, $40,	0
0001EDEA 5300 91BE                  	dc.l Map_obj53+$53000000
0001EDEE 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001EDF2 1800 8C16                  	dc.l Map_obj18b+$18000000
0001EDF6 0000 4000                  	dc.b 0,	0, $40,	0
0001EDFA 5A01 1982                  	dc.l Map_obj5A+$5A000000
0001EDFE 0000 4000                  	dc.b 0,	0, $40,	0
0001EE02 5B01 1B3A                  	dc.l Map_obj5B+$5B000000
0001EE06 0000 4000                  	dc.b 0,	0, $40,	0
0001EE0A 5D01 210A                  	dc.l Map_obj5D+$5D000000
0001EE0E 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001EE12 5E01 249C                  	dc.l Map_obj5E+$5E000000
0001EE16 0000 0374                  	dc.b 0,	0, 3, $74
0001EE1A 4100 E806                  	dc.l Map_obj41+$41000000
0001EE1E 0000 0523                  	dc.b 0,	0, 5, $23
0001EE22 1300 BE48                  	dc.l Map_obj14+$13000000
0001EE26 0000 0480                  	dc.b 0,	0, 4, $80
0001EE2A 1C00 92CE                  	dc.l Map_obj1C+$1C000000
0001EE2E 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001EE32 5F01 271A                  	dc.l Map_obj5F+$5F000000
0001EE36 0000 0400                  	dc.b 0,	0, 4, 0
0001EE3A 6001 29D0                  	dc.l Map_obj60+$60000000
0001EE3E 0000 2429                  	dc.b 0,	0, $24,	$29
0001EE42 7901 8A9A                  	dc.l Map_obj79+$79000000
0001EE46 0100 07A0                  	dc.b 1,	0, 7, $A0
0001EE4A                            	even
0001EE4A                            	even
0001EE4A                            
0001EE4A                            ; ---------------------------------------------------------------------------
0001EE4A                            ; Debug	list - Spring Yard
0001EE4A                            ; ---------------------------------------------------------------------------
0001EE4A                            Debug_SYZ:
0001EE4A                            	include "_inc\Debug list - SYZ.asm"
0001EE4A                            ; ---------------------------------------------------------------------------
0001EE4A                            ; Debug	list - Spring Yard
0001EE4A                            ; ---------------------------------------------------------------------------
0001EE4A 000F                       	dc.w $F
0001EE4C 2500 AA32                  	dc.l Map_obj25+$25000000
0001EE50 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001EE54 2600 B062                  	dc.l Map_obj26+$26000000
0001EE58 0000 0680                  	dc.b 0,	0, 6, $80
0001EE5C 3600 DAB8                  	dc.l Map_obj36+$36000000
0001EE60 0000 051B                  	dc.b 0,	0, 5, $1B
0001EE64 4100 E806                  	dc.l Map_obj41+$41000000
0001EE68 0000 0523                  	dc.b 0,	0, 5, $23
0001EE6C 4300 EC8C                  	dc.l Map_obj43+$43000000
0001EE70 0000 04B8                  	dc.b 0,	0, 4, $B8
0001EE74 1200 F46A                  	dc.l Map_obj12+$12000000
0001EE78 0000 0000                  	dc.b 0,	0, 0, 0
0001EE7C 4700 F5E6                  	dc.l Map_obj47+$47000000
0001EE80 0000 0380                  	dc.b 0,	0, 3, $80
0001EE84 1F00 A1BA                  	dc.l Map_obj1F+$1F000000
0001EE88 0000 0400                  	dc.b 0,	0, 4, 0
0001EE8C 2200 A49A                  	dc.l Map_obj22+$22000000
0001EE90 0000 0444                  	dc.b 0,	0, 4, $44
0001EE94 5001 0420                  	dc.l Map_obj50+$50000000
0001EE98 0000 247B                  	dc.b 0,	0, $24,	$7B
0001EE9C 1800 8C04                  	dc.l Map_obj18a+$18000000
0001EEA0 0000 4000                  	dc.b 0,	0, $40,	0
0001EEA4 5601 1208                  	dc.l Map_obj56+$56000000
0001EEA8 0000 4000                  	dc.b 0,	0, $40,	0
0001EEAC 3200 C978                  	dc.l Map_obj32+$32000000
0001EEB0 0000 0513                  	dc.b 0,	0, 5, $13
0001EEB4 7801 8712                  	dc.l Map_obj78+$78000000
0001EEB8 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001EEBC 7901 8A9A                  	dc.l Map_obj79+$79000000
0001EEC0 0100 07A0                  	dc.b 1,	0, 7, $A0
0001EEC4                            	even
0001EEC4                            	even
0001EEC4                            
0001EEC4                            ; ---------------------------------------------------------------------------
0001EEC4                            ; Debug	list - Scrap Brain
0001EEC4                            ; ---------------------------------------------------------------------------
0001EEC4                            Debug_SBZ:
0001EEC4                            	include "_inc\Debug list - SBZ.asm"
0001EEC4                            ; ---------------------------------------------------------------------------
0001EEC4                            ; Debug	list - Scrap Brain
0001EEC4                            ; ---------------------------------------------------------------------------
0001EEC4 001D                       	dc.w $1D
0001EEC6 2500 AA32                  	dc.l Map_obj25+$25000000
0001EECA 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001EECE 2600 B062                  	dc.l Map_obj26+$26000000
0001EED2 0000 0680                  	dc.b 0,	0, 6, $80
0001EED6 5F01 271A                  	dc.l Map_obj5F+$5F000000
0001EEDA 0000 0400                  	dc.b 0,	0, 4, 0
0001EEDE 6001 29D0                  	dc.l Map_obj60+$60000000
0001EEE2 0000 0429                  	dc.b 0,	0, 4, $29
0001EEE6 7801 8712                  	dc.l Map_obj78+$78000000
0001EEEA 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001EEEE 1501 15A4                  	dc.l Map_obj15b+$15000000
0001EEF2 0702 4391                  	dc.b 7,	2, $43,	$91
0001EEF6 6701 7032                  	dc.l Map_obj67+$67000000
0001EEFA E000 C344                  	dc.b $E0, 0, $C3, $44
0001EEFE 5201 0B52                  	dc.l Map_obj52+$52000000
0001EF02 2802 22C0                  	dc.b $28, 2, $22, $C0
0001EF06 3200 C978                  	dc.l Map_obj32+$32000000
0001EF0A 0000 0513                  	dc.b 0,	0, 5, $13
0001EF0E 6901 728C                  	dc.l Map_obj69+$69000000
0001EF12 0300 4492                  	dc.b 3,	0, $44,	$92
0001EF16 6901 72E6                  	dc.l Map_obj69a+$69000000
0001EF1A 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001EF1E 6A01 7544                  	dc.l Map_obj6A+$6A000000
0001EF22 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001EF26 5300 91BE                  	dc.l Map_obj53+$53000000
0001EF2A 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001EF2E 5201 0B52                  	dc.l Map_obj52+$52000000
0001EF32 3903 4460                  	dc.b $39, 3, $44, $60
0001EF36 6B01 7914                  	dc.l Map_obj6B+$6B000000
0001EF3A 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001EF3E 2A00 9464                  	dc.l Map_obj2A+$2A000000
0001EF42 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001EF46 6B01 7914                  	dc.l Map_obj6B+$6B000000
0001EF4A 1301 22C0                  	dc.b $13, 1, $22, $C0
0001EF4E 6A01 7544                  	dc.l Map_obj6A+$6A000000
0001EF52 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001EF56 6B01 7914                  	dc.l Map_obj6B+$6B000000
0001EF5A 2401 22C0                  	dc.b $24, 1, $22, $C0
0001EF5E 6A01 7544                  	dc.l Map_obj6A+$6A000000
0001EF62 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001EF66 6B01 7914                  	dc.l Map_obj6B+$6B000000
0001EF6A 3401 22C0                  	dc.b $34, 1, $22, $C0
0001EF6E 6C01 7AD6                  	dc.l Map_obj6C+$6C000000
0001EF72 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001EF76 6D00 F0DC                  	dc.l Map_obj6D+$6D000000
0001EF7A 6400 83D9                  	dc.b $64, 0, $83, $D9
0001EF7E 6D00 F0DC                  	dc.l Map_obj6D+$6D000000
0001EF82 640B 83D9                  	dc.b $64, $B, $83, $D9
0001EF86 6E01 7B8C                  	dc.l Map_obj6E+$6E000000
0001EF8A 0400 047E                  	dc.b 4,	0, 4, $7E
0001EF8E 7001 7FD2                  	dc.l Map_obj70+$70000000
0001EF92 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001EF96 7101 1FB0                  	dc.l Map_obj71+$71000000
0001EF9A 1100 8680                  	dc.b $11, 0, $86, $80
0001EF9E 1E00 98D2                  	dc.l Map_obj1E+$1E000000
0001EFA2 0400 2302                  	dc.b 4,	0, $23,	2
0001EFA6 7901 8A9A                  	dc.l Map_obj79+$79000000
0001EFAA 0100 07A0                  	dc.b 1,	0, 7, $A0
0001EFAE                            	even
0001EFAE                            	even
0001EFAE                            
0001EFAE                            ; ---------------------------------------------------------------------------
0001EFAE                            ; Debug	list - ending sequence / special stage
0001EFAE                            ; ---------------------------------------------------------------------------
0001EFAE                            Debug_Ending:
0001EFAE                            	include "_inc\Debug list - Ending and SS.asm"
0001EFAE                            ; ---------------------------------------------------------------------------
0001EFAE                            ; Debug	list - ending sequence / special stage
0001EFAE                            ; ---------------------------------------------------------------------------
0001EFAE 000D                       	dc.w $D
0001EFB0 2500 AA32                  	dc.l Map_obj25+$25000000
0001EFB4 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001EFB8 4700 F5E6                  	dc.l Map_obj47+$47000000
0001EFBC 0000 0380                  	dc.b 0,	0, 3, $80
0001EFC0 2800 9EEC                  	dc.l Map_obj28a+$28000000
0001EFC4 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001EFC8 2800 9EEC                  	dc.l Map_obj28a+$28000000
0001EFCC 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001EFD0 2800 9EEC                  	dc.l Map_obj28a+$28000000
0001EFD4 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001EFD8 2800 9ED4                  	dc.l Map_obj28+$28000000
0001EFDC 0D00 0553                  	dc.b $D, 0, 5, $53
0001EFE0 2800 9ED4                  	dc.l Map_obj28+$28000000
0001EFE4 0E00 0553                  	dc.b $E, 0, 5, $53
0001EFE8 2800 9ED4                  	dc.l Map_obj28+$28000000
0001EFEC 0F00 0573                  	dc.b $F, 0, 5, $73
0001EFF0 2800 9ED4                  	dc.l Map_obj28+$28000000
0001EFF4 1000 0573                  	dc.b $10, 0, 5,	$73
0001EFF8 2800 9EEC                  	dc.l Map_obj28a+$28000000
0001EFFC 1100 0585                  	dc.b $11, 0, 5,	$85
0001F000 2800 9F04                  	dc.l Map_obj28b+$28000000
0001F004 1200 0593                  	dc.b $12, 0, 5,	$93
0001F008 2800 9EEC                  	dc.l Map_obj28a+$28000000
0001F00C 1300 0565                  	dc.b $13, 0, 5,	$65
0001F010 2800 9F04                  	dc.l Map_obj28b+$28000000
0001F014 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001F018                            	even
0001F018                            	even
0001F018                            
0001F018                            ; ---------------------------------------------------------------------------
0001F018                            ; Main level load blocks
0001F018                            ; ---------------------------------------------------------------------------
0001F018                            MainLoadBlocks:
0001F018                            	include "_inc\Main level load blocks.asm"
0001F018                            ; ---------------------------------------------------------------------------
0001F018                            ; Main level load blocks
0001F018                            ;
0001F018                            ; ===FORMAT===
0001F018                            ; level	patterns + (1st	PLC num	* 10^6)
0001F018                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001F018                            ; 256x256 mappings
0001F018                            ; blank, music (unused), pal index (unused), pal index
0001F018                            ; ---------------------------------------------------------------------------
0001F018 0000 0000                  	dc.l Nem_GHZ+$4000000
0001F01C 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001F020 0000 0000                  	dc.l Blk256_GHZ
0001F024 0081 0404                  	dc.b 0,	$81, 4,	4
0001F028 0000 0000                  	dc.l Nem_LZ+$6000000
0001F02C 0000 0000                  	dc.l Blk16_LZ+$7000000
0001F030 0000 0000                  	dc.l Blk256_LZ
0001F034 0082 0505                  	dc.b 0,	$82, 5,	5
0001F038 0000 0000                  	dc.l Nem_MZ+$8000000
0001F03C 0000 0000                  	dc.l Blk16_MZ+$9000000
0001F040 0000 0000                  	dc.l Blk256_MZ
0001F044 0083 0606                  	dc.b 0,	$83, 6,	6
0001F048 0000 0000                  	dc.l Nem_SLZ+$A000000
0001F04C 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001F050 0000 0000                  	dc.l Blk256_SLZ
0001F054 0084 0707                  	dc.b 0,	$84, 7,	7
0001F058 0000 0000                  	dc.l Nem_SYZ+$C000000
0001F05C 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001F060 0000 0000                  	dc.l Blk256_SYZ
0001F064 0085 0808                  	dc.b 0,	$85, 8,	8
0001F068 0000 0000                  	dc.l Nem_SBZ+$E000000
0001F06C 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001F070 0000 0000                  	dc.l Blk256_SBZ
0001F074 0086 0909                  	dc.b 0,	$86, 9,	9
0001F078 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001F07C 0000 0000                  	dc.l Blk16_GHZ
0001F080 0000 0000                  	dc.l Blk256_GHZ
0001F084 0086 1313                  	dc.b 0,	$86, $13, $13
0001F088                            	even
0001F088                            	even
0001F088                            
0001F088                            ; ---------------------------------------------------------------------------
0001F088                            ; Pattern load cues
0001F088                            ; ---------------------------------------------------------------------------
0001F088                            ArtLoadCues:
0001F088                            	include "_inc\Pattern load cues.asm"
0001F088                            ; ---------------------------------------------------------------------------
0001F088                            ; Pattern load cues - index
0001F088                            ; ---------------------------------------------------------------------------
0001F088 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001F08C 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001F090 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001F094 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001F098 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001F09C 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001F0A0 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001F0A4 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001F0A8 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001F0AC 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001F0B0 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001F0B4 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001F0B8 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001F0BC 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001F0C0 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001F0C4 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001F0C8                            ; ---------------------------------------------------------------------------
0001F0C8                            ; Pattern load cues - standard block 1
0001F0C8                            ; ---------------------------------------------------------------------------
0001F0C8 0004                       PLC_Main:	dc.w 4
0001F0CA 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001F0CE D800                       		dc.w $D800
0001F0D0 0000 0000                  		dc.l Nem_Hud		; HUD
0001F0D4 D940                       		dc.w $D940
0001F0D6 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001F0DA FA80                       		dc.w $FA80
0001F0DC 0000 0000                  		dc.l Nem_Ring		; rings
0001F0E0 F640                       		dc.w $F640
0001F0E2 0000 0000                  		dc.l Nem_Points		; points from enemy
0001F0E6 F2E0                       		dc.w $F2E0
0001F0E8                            ; ---------------------------------------------------------------------------
0001F0E8                            ; Pattern load cues - standard block 2
0001F0E8                            ; ---------------------------------------------------------------------------
0001F0E8 0002                       PLC_Main2:	dc.w 2
0001F0EA 0000 0000                  		dc.l Nem_Monitors	; monitors
0001F0EE D000                       		dc.w $D000
0001F0F0 0000 0000                  		dc.l Nem_Shield		; shield
0001F0F4 A820                       		dc.w $A820
0001F0F6 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001F0FA AB80                       		dc.w $AB80
0001F0FC                            ; ---------------------------------------------------------------------------
0001F0FC                            ; Pattern load cues - explosion
0001F0FC                            ; ---------------------------------------------------------------------------
0001F0FC 0000                       PLC_Explode:	dc.w 0
0001F0FE 0000 0000                  		dc.l Nem_Explode	; explosion
0001F102 B400                       		dc.w $B400
0001F104                            ; ---------------------------------------------------------------------------
0001F104                            ; Pattern load cues - game/time	over
0001F104                            ; ---------------------------------------------------------------------------
0001F104 0000                       PLC_GameOver:	dc.w 0
0001F106 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001F10A ABC0                       		dc.w $ABC0
0001F10C                            ; ---------------------------------------------------------------------------
0001F10C                            ; Pattern load cues - Green Hill
0001F10C                            ; ---------------------------------------------------------------------------
0001F10C 000A                       PLC_GHZ:	dc.w $A
0001F10E 0000 0000                  		dc.l Nem_GHZ	; GHZ main patterns
0001F112 0000                       		dc.w 0
0001F114 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001F118 6B00                       		dc.w $6B00
0001F11A 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001F11E 7A00                       		dc.w $7A00
0001F120 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001F124 8000                       		dc.w $8000
0001F126 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001F12A 8880                       		dc.w $8880
0001F12C 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001F130 8F60                       		dc.w $8F60
0001F132 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001F136 9360                       		dc.w $9360
0001F138 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001F13C 9E00                       		dc.w $9E00
0001F13E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F142 A360                       		dc.w $A360
0001F144 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F148 A460                       		dc.w $A460
0001F14A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F14E A660                       		dc.w $A660
0001F150 0000 0000                  		dc.l ArtNem_DignlSprng	; diagonal spring
0001F154 A860                       		dc.W $A860
0001F156 0005                       PLC_GHZ2:	dc.w 5
0001F158 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001F15C 7000                       		dc.w $7000
0001F15E 0000 0000                  		dc.l Nem_Bridge		; bridge
0001F162 71C0                       		dc.w $71C0
0001F164 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001F168 7300                       		dc.w $7300
0001F16A 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001F16E 7540                       		dc.w $7540
0001F170 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001F174 A1E0                       		dc.w $A1E0
0001F176 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001F17A 6980                       		dc.w $6980
0001F17C                            ; ---------------------------------------------------------------------------
0001F17C                            ; Pattern load cues - Labyrinth
0001F17C                            ; ---------------------------------------------------------------------------
0001F17C 000B                       PLC_LZ:		dc.w $B
0001F17E 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001F182 0000                       		dc.w 0
0001F184 0000 0000                  		dc.l Nem_LzBlock1	; block
0001F188 3C00                       		dc.w $3C00
0001F18A 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001F18E 3E00                       		dc.w $3E00
0001F190 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001F194 4B20                       		dc.w $4B20
0001F196 0000 0000                  		dc.l Nem_Water		; water	surface
0001F19A 6000                       		dc.w $6000
0001F19C 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001F1A0 6200                       		dc.w $6200
0001F1A2 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001F1A6 6500                       		dc.w $6500
0001F1A8 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001F1AC 6900                       		dc.w $6900
0001F1AE 0000 0000                  		dc.l Nem_LzBlock3	; block
0001F1B2 7780                       		dc.w $7780
0001F1B4 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001F1B8 7880                       		dc.w $7880
0001F1BA 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001F1BE 7980                       		dc.w $7980
0001F1C0 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001F1C4 94C0                       		dc.w $94C0
0001F1C6 000C                       PLC_LZ2:	dc.w $C
0001F1C8 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001F1CC 7BC0                       		dc.w $7BC0
0001F1CE 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001F1D2 7CC0                       		dc.w $7CC0
0001F1D4 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001F1D8 7EC0                       		dc.w $7EC0
0001F1DA 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001F1DE 5D20                       		dc.w $5D20
0001F1E0 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001F1E4 8800                       		dc.w $8800
0001F1E6 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001F1EA 89E0                       		dc.w $89E0
0001F1EC 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001F1F0 8CE0                       		dc.w $8CE0
0001F1F2 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001F1F6 90C0                       		dc.w $90C0
0001F1F8 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001F1FC A1E0                       		dc.w $A1E0
0001F1FE 0000 0000                  		dc.l Nem_Cork		; cork block
0001F202 A000                       		dc.w $A000
0001F204 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F208 A360                       		dc.w $A360
0001F20A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F20E A460                       		dc.w $A460
0001F210 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F214 A660                       		dc.w $A660
0001F216 0000 0000                  		dc.l ArtNem_DignlSprng	; diagonal spring
0001F21A A860                       		dc.W $A860
0001F21C                            ; ---------------------------------------------------------------------------
0001F21C                            ; Pattern load cues - Marble
0001F21C                            ; ---------------------------------------------------------------------------
0001F21C 0009                       PLC_MZ:		dc.w 9
0001F21E 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001F222 0000                       		dc.w 0
0001F224 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001F228 6000                       		dc.w $6000
0001F22A 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001F22E 68A0                       		dc.w $68A0
0001F230 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001F234 7000                       		dc.w $7000
0001F236 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001F23A 71C0                       		dc.w $71C0
0001F23C 0000 0000                  		dc.l Nem_Lava		; lava
0001F240 7500                       		dc.w $7500
0001F242 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001F246 8880                       		dc.w $8880
0001F248 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001F24C 8F60                       		dc.w $8F60
0001F24E 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001F252 9700                       		dc.w $9700
0001F254 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001F258 9FE0                       		dc.w $9FE0
0001F25A 0004                       PLC_MZ2:	dc.w 4
0001F25C 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001F260 A260                       		dc.w $A260
0001F262 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F266 A360                       		dc.w $A360
0001F268 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F26C A460                       		dc.w $A460
0001F26E 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F272 A660                       		dc.w $A660
0001F274 0000 0000                  		dc.l ArtNem_DignlSprng	; diagonal spring
0001F278 A860                       		dc.W $A860
0001F27A 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001F27E 5700                       		dc.w $5700
0001F280                            ; ---------------------------------------------------------------------------
0001F280                            ; Pattern load cues - Star Light
0001F280                            ; ---------------------------------------------------------------------------
0001F280 0008                       PLC_SLZ:	dc.w 8
0001F282 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001F286 0000                       		dc.w 0
0001F288 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001F28C 8000                       		dc.w $8000
0001F28E 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001F292 8520                       		dc.w $8520
0001F294 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001F298 9000                       		dc.w $9000
0001F29A 0000 0000                  		dc.l Nem_SlzBlock	; block
0001F29E 9C00                       		dc.w $9C00
0001F2A0 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001F2A4 A260                       		dc.w $A260
0001F2A6 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F2AA A360                       		dc.w $A360
0001F2AC 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F2B0 A460                       		dc.w $A460
0001F2B2 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F2B6 A660                       		dc.w $A660
0001F2B8 0000 0000                  		dc.l ArtNem_DignlSprng	; diagonal spring
0001F2BC A860                       		dc.W $A860
0001F2BE 0005                       PLC_SLZ2:	dc.w 5
0001F2C0 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001F2C4 6E80                       		dc.w $6E80
0001F2C6 0000 0000                  		dc.l Nem_Fan		; fan
0001F2CA 7400                       		dc.w $7400
0001F2CC 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001F2D0 7980                       		dc.w $7980
0001F2D2 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001F2D6 7B80                       		dc.w $7B80
0001F2D8 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001F2DC 9B00                       		dc.w $9B00
0001F2DE 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001F2E2 9E00                       		dc.w $9E00
0001F2E4                            ; ---------------------------------------------------------------------------
0001F2E4                            ; Pattern load cues - Spring Yard
0001F2E4                            ; ---------------------------------------------------------------------------
0001F2E4 0004                       PLC_SYZ:	dc.w 4
0001F2E6 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001F2EA 0000                       		dc.w 0
0001F2EC 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001F2F0 8000                       		dc.w $8000
0001F2F2 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001F2F6 8880                       		dc.w $8880
0001F2F8 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001F2FC 8F60                       		dc.w $8F60
0001F2FE 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001F302 9700                       		dc.w $9700
0001F304 0007                       PLC_SYZ2:	dc.w 7
0001F306 0000 0000                  		dc.l Nem_Bumper		; bumper
0001F30A 7000                       		dc.w $7000
0001F30C 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001F310 72C0                       		dc.w $72C0
0001F312 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001F316 7740                       		dc.w $7740
0001F318 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001F31C 9FE0                       		dc.w $9FE0
0001F31E 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001F322 A1E0                       		dc.w $A1E0
0001F324 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F328 A360                       		dc.w $A360
0001F32A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F32E A460                       		dc.w $A460
0001F330 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F334 A660                       		dc.w $A660
0001F336 0000 0000                  		dc.l ArtNem_DignlSprng	; diagonal spring
0001F33A A860                       		dc.W $A860
0001F33C                            ; ---------------------------------------------------------------------------
0001F33C                            ; Pattern load cues - Scrap Brain
0001F33C                            ; ---------------------------------------------------------------------------
0001F33C 000B                       PLC_SBZ:	dc.w $B
0001F33E 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001F342 0000                       		dc.w 0
0001F344 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001F348 5800                       		dc.w $5800
0001F34A 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001F34E 5D00                       		dc.w $5D00
0001F350 0000 0000                  		dc.l Nem_Girder		; girder
0001F354 5E00                       		dc.w $5E00
0001F356 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001F35A 6040                       		dc.w $6040
0001F35C 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001F360 6880                       		dc.w $6880
0001F362 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001F366 6900                       		dc.w $6900
0001F368 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001F36C 7220                       		dc.w $7220
0001F36E 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001F372 76A0                       		dc.w $76A0
0001F374 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001F378 7B20                       		dc.w $7B20
0001F37A 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001F37E 7EA0                       		dc.w $7EA0
0001F380 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001F384 9860                       		dc.w $9860
0001F386 000C                       PLC_SBZ2:	dc.w $C
0001F388 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001F38C 5600                       		dc.w $5600
0001F38E 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001F392 8000                       		dc.w $8000
0001F394 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001F398 8520                       		dc.w $8520
0001F39A 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001F39E 8C00                       		dc.w $8C00
0001F3A0 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001F3A4 8DE0                       		dc.w $8DE0
0001F3A6 0000 0000                  		dc.l Nem_Electric	; electric orb
0001F3AA 8FC0                       		dc.w $8FC0
0001F3AC 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001F3B0 9240                       		dc.w $9240
0001F3B2 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001F3B6 7F20                       		dc.w $7F20
0001F3B8 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001F3BC 9BE0                       		dc.w $9BE0
0001F3BE 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001F3C2 A1E0                       		dc.w $A1E0
0001F3C4 0000 0000                  		dc.l Nem_Spikes		; spikes
0001F3C8 A360                       		dc.w $A360
0001F3CA 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001F3CE A460                       		dc.w $A460
0001F3D0 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001F3D4 A660                       		dc.w $A660
0001F3D6 0000 0000                  		dc.l ArtNem_DignlSprng	; diagonal spring
0001F3DA A860                       		dc.W $A860
0001F3DC                            ; ---------------------------------------------------------------------------
0001F3DC                            ; Pattern load cues - title card
0001F3DC                            ; ---------------------------------------------------------------------------
0001F3DC 0000                       PLC_TitleCard:	dc.w 0
0001F3DE 0000 0000                  		dc.l Nem_TitleCard
0001F3E2 B000                       		dc.w $B000
0001F3E4                            ; ---------------------------------------------------------------------------
0001F3E4                            ; Pattern load cues - act 3 boss
0001F3E4                            ; ---------------------------------------------------------------------------
0001F3E4 0005                       PLC_Boss:	dc.w 5
0001F3E6 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001F3EA 8000                       		dc.w $8000
0001F3EC 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001F3F0 8D80                       		dc.w $8D80
0001F3F2 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001F3F6 93A0                       		dc.w $93A0
0001F3F8 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001F3FC A300                       		dc.w $A300
0001F3FE 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001F402 A300                       		dc.w $A300
0001F404 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001F408 A540                       		dc.w $A540
0001F40A                            ; ---------------------------------------------------------------------------
0001F40A                            ; Pattern load cues - act 1/2 signpost
0001F40A                            ; ---------------------------------------------------------------------------
0001F40A 0002                       PLC_Signpost:	dc.w 2
0001F40C 0000 0000                  		dc.l Nem_SignPost	; signpost
0001F410 D000                       		dc.w $D000
0001F412 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001F416 96C0                       		dc.w $96C0
0001F418 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001F41C 8C40                       		dc.w $8C40
0001F41E                            ; ---------------------------------------------------------------------------
0001F41E                            ; Pattern load cues - beta special stage warp effect
0001F41E                            ; ---------------------------------------------------------------------------
0001F41E 0000                       PLC_Warp:	dc.w 0
0001F420 0000 0000                  		dc.l Nem_Warp
0001F424 A820                       		dc.w $A820
0001F426                            ; ---------------------------------------------------------------------------
0001F426                            ; Pattern load cues - special stage
0001F426                            ; ---------------------------------------------------------------------------
0001F426 0010                       PLC_SpeStage:	dc.w $10
0001F428 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001F42C 0000                       		dc.w 0
0001F42E 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001F432 0A20                       		dc.w $A20
0001F434 0000 0000                  		dc.l Nem_SSWalls	; walls
0001F438 2840                       		dc.w $2840
0001F43A 0000 0000                  		dc.l Nem_Bumper		; bumper
0001F43E 4760                       		dc.w $4760
0001F440 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001F444 4A20                       		dc.w $4A20
0001F446 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001F44A 4C60                       		dc.w $4C60
0001F44C 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001F450 5E00                       		dc.w $5E00
0001F452 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001F456 6E00                       		dc.w $6E00
0001F458 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001F45C 7E00                       		dc.w $7E00
0001F45E 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001F462 8E00                       		dc.w $8E00
0001F464 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001F468 9E00                       		dc.w $9E00
0001F46A 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001F46E AE00                       		dc.w $AE00
0001F470 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001F474 BE00                       		dc.w $BE00
0001F476 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001F47A EE00                       		dc.w $EE00
0001F47C 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001F480 F2E0                       		dc.w $F2E0
0001F482 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001F486 F400                       		dc.w $F400
0001F488 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001F48C F520                       		dc.w $F520
0001F48E 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001F492 F2E0                       		dc.w $F2E0
0001F494 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001F498 F400                       		dc.w $F400
0001F49A 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001F49E F520                       		dc.w $F520
0001F4A0                            ; ---------------------------------------------------------------------------
0001F4A0                            ; Pattern load cues - GHZ animals
0001F4A0                            ; ---------------------------------------------------------------------------
0001F4A0 0001                       PLC_GHZAnimals:	dc.w 1
0001F4A2 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001F4A6 B000                       		dc.w $B000
0001F4A8 0000 0000                  		dc.l Nem_Flicky		; flicky
0001F4AC B240                       		dc.w $B240
0001F4AE                            ; ---------------------------------------------------------------------------
0001F4AE                            ; Pattern load cues - LZ animals
0001F4AE                            ; ---------------------------------------------------------------------------
0001F4AE 0001                       PLC_LZAnimals:	dc.w 1
0001F4B0 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001F4B4 B000                       		dc.w $B000
0001F4B6 0000 0000                  		dc.l Nem_Seal		; seal
0001F4BA B240                       		dc.w $B240
0001F4BC                            ; ---------------------------------------------------------------------------
0001F4BC                            ; Pattern load cues - MZ animals
0001F4BC                            ; ---------------------------------------------------------------------------
0001F4BC 0001                       PLC_MZAnimals:	dc.w 1
0001F4BE 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001F4C2 B000                       		dc.w $B000
0001F4C4 0000 0000                  		dc.l Nem_Seal		; seal
0001F4C8 B240                       		dc.w $B240
0001F4CA                            ; ---------------------------------------------------------------------------
0001F4CA                            ; Pattern load cues - SLZ animals
0001F4CA                            ; ---------------------------------------------------------------------------
0001F4CA 0001                       PLC_SLZAnimals:	dc.w 1
0001F4CC 0000 0000                  		dc.l Nem_Pig		; pig
0001F4D0 B000                       		dc.w $B000
0001F4D2 0000 0000                  		dc.l Nem_Flicky		; flicky
0001F4D6 B240                       		dc.w $B240
0001F4D8                            ; ---------------------------------------------------------------------------
0001F4D8                            ; Pattern load cues - SYZ animals
0001F4D8                            ; ---------------------------------------------------------------------------
0001F4D8 0001                       PLC_SYZAnimals:	dc.w 1
0001F4DA 0000 0000                  		dc.l Nem_Pig		; pig
0001F4DE B000                       		dc.w $B000
0001F4E0 0000 0000                  		dc.l Nem_Chicken	; chicken
0001F4E4 B240                       		dc.w $B240
0001F4E6                            ; ---------------------------------------------------------------------------
0001F4E6                            ; Pattern load cues - SBZ animals
0001F4E6                            ; ---------------------------------------------------------------------------
0001F4E6 0001                       PLC_SBZAnimals:	dc.w 1
0001F4E8 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001F4EC B000                       		dc.w $B000
0001F4EE 0000 0000                  		dc.l Nem_Chicken	; chicken
0001F4F2 B240                       		dc.w $B240
0001F4F4                            ; ---------------------------------------------------------------------------
0001F4F4                            ; Pattern load cues - special stage results screen
0001F4F4                            ; ---------------------------------------------------------------------------
0001F4F4 0001                       PLC_SpeStResult:dc.w 1
0001F4F6 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001F4FA A820                       		dc.w $A820
0001F4FC 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001F500 AA20                       		dc.w $AA20
0001F502                            ; ---------------------------------------------------------------------------
0001F502                            ; Pattern load cues - ending sequence
0001F502                            ; ---------------------------------------------------------------------------
0001F502 000E                       PLC_Ending:	dc.w $E
0001F504 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001F508 0000                       		dc.w 0
0001F50A 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001F50E 39A0                       		dc.w $39A0
0001F510 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001F514 6B00                       		dc.w $6B00
0001F516 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001F51A 7400                       		dc.w $7400
0001F51C 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001F520 78A0                       		dc.w $78A0
0001F522 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001F526 7C20                       		dc.w $7C20
0001F528 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001F52C A480                       		dc.w $A480
0001F52E 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001F532 AA60                       		dc.w $AA60
0001F534 0000 0000                  		dc.l Nem_Chicken	; chicken
0001F538 ACA0                       		dc.w $ACA0
0001F53A 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001F53E AE60                       		dc.w $AE60
0001F540 0000 0000                  		dc.l Nem_Seal		; seal
0001F544 B0A0                       		dc.w $B0A0
0001F546 0000 0000                  		dc.l Nem_Pig		; pig
0001F54A B260                       		dc.w $B260
0001F54C 0000 0000                  		dc.l Nem_Flicky		; flicky
0001F550 B4A0                       		dc.w $B4A0
0001F552 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001F556 B660                       		dc.w $B660
0001F558 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001F55C B8A0                       		dc.w $B8A0
0001F55E                            ; ---------------------------------------------------------------------------
0001F55E                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001F55E                            ; ---------------------------------------------------------------------------
0001F55E 0002                       PLC_TryAgain:	dc.w 2
0001F560 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001F564 78A0                       		dc.w $78A0
0001F566 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001F56A 7C20                       		dc.w $7C20
0001F56C 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001F570 B400                       		dc.w $B400
0001F572                            ; ---------------------------------------------------------------------------
0001F572                            ; Pattern load cues - Eggman on SBZ 2
0001F572                            ; ---------------------------------------------------------------------------
0001F572 0002                       PLC_EggmanSBZ2:	dc.w 2
0001F574 0000 0000                  		dc.l Nem_SbzBlock	; block
0001F578 A300                       		dc.w $A300
0001F57A 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001F57E 8000                       		dc.w $8000
0001F580 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001F584 9400                       		dc.w $9400
0001F586                            ; ---------------------------------------------------------------------------
0001F586                            ; Pattern load cues - final boss
0001F586                            ; ---------------------------------------------------------------------------
0001F586 0004                       PLC_FZBoss:	dc.w 4
0001F588 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001F58C 7400                       		dc.w $7400
0001F58E 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001F592 6000                       		dc.w $6000
0001F594 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001F598 8000                       		dc.w $8000
0001F59A 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001F59E 8E00                       		dc.w $8E00
0001F5A0 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001F5A4 A540                       		dc.w $A540
0001F5A6                            		even
0001F5A6                            		even
0001F5A6                            
0001F5A6                            		incbin	misc\padding.bin
0001F694                            		even
0001F694                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001FAF6                            		even
0001FAF6                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001FBEE                            		even
0001FBEE                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001FD02                            		even
0001FD02                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
00020D0E                            		even
00020D0E                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
000226DC                            		even
000226DC                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00022710                            		even
00022710                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
000227CE                            		even
000227CE                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00022C76                            		even
00022C76                            ; ---------------------------------------------------------------------------
00022C76                            ; Sprite mappings - Sonic
00022C76                            ; ---------------------------------------------------------------------------
00022C76                            Map_Sonic:
00022C76                            	include "_maps\Sonic.asm"
00022C76                            ; --------------------------------------------------------------------------------
00022C76                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00022C76                            ; --------------------------------------------------------------------------------
00022C76                            
00022C76                            SME_N6hqJ:	
00022C76 0000 0000                  		dc.w SME_N6hqJ_1AC-SME_N6hqJ, SME_N6hqJ_1AD-SME_N6hqJ	
00022C7A 0000 0000                  		dc.w SME_N6hqJ_1C2-SME_N6hqJ, SME_N6hqJ_1CD-SME_N6hqJ	
00022C7E 0000 0000                  		dc.w SME_N6hqJ_1E2-SME_N6hqJ, SME_N6hqJ_1F7-SME_N6hqJ	
00022C82 0000 0000                  		dc.w SME_N6hqJ_211-SME_N6hqJ, SME_N6hqJ_221-SME_N6hqJ	
00022C86 0000 0000                  		dc.w SME_N6hqJ_22C-SME_N6hqJ, SME_N6hqJ_237-SME_N6hqJ	
00022C8A 0000 0000                  		dc.w SME_N6hqJ_242-SME_N6hqJ, SME_N6hqJ_24D-SME_N6hqJ	
00022C8E 0000 0000                  		dc.w SME_N6hqJ_262-SME_N6hqJ, SME_N6hqJ_277-SME_N6hqJ	
00022C92 0000 0000                  		dc.w SME_N6hqJ_287-SME_N6hqJ, SME_N6hqJ_29C-SME_N6hqJ	
00022C96 0000 0000                  		dc.w SME_N6hqJ_2AC-SME_N6hqJ, SME_N6hqJ_2B7-SME_N6hqJ	
00022C9A 0000 0000                  		dc.w SME_N6hqJ_2C7-SME_N6hqJ, SME_N6hqJ_2DC-SME_N6hqJ	
00022C9E 0000 0000                  		dc.w SME_N6hqJ_2EC-SME_N6hqJ, SME_N6hqJ_2F7-SME_N6hqJ	
00022CA2 0000 0000                  		dc.w SME_N6hqJ_30C-SME_N6hqJ, SME_N6hqJ_326-SME_N6hqJ	
00022CA6 0000 0000                  		dc.w SME_N6hqJ_33B-SME_N6hqJ, SME_N6hqJ_350-SME_N6hqJ	
00022CAA 0000 0000                  		dc.w SME_N6hqJ_36A-SME_N6hqJ, SME_N6hqJ_384-SME_N6hqJ	
00022CAE 0000 0000                  		dc.w SME_N6hqJ_399-SME_N6hqJ, SME_N6hqJ_3B3-SME_N6hqJ	
00022CB2 0000 0000                  		dc.w SME_N6hqJ_3C3-SME_N6hqJ, SME_N6hqJ_3D3-SME_N6hqJ	
00022CB6 0000 0000                  		dc.w SME_N6hqJ_3E3-SME_N6hqJ, SME_N6hqJ_3EE-SME_N6hqJ	
00022CBA 0000 0000                  		dc.w SME_N6hqJ_3FE-SME_N6hqJ, SME_N6hqJ_40E-SME_N6hqJ	
00022CBE 0000 0000                  		dc.w SME_N6hqJ_41E-SME_N6hqJ, SME_N6hqJ_429-SME_N6hqJ	
00022CC2 0000 0000                  		dc.w SME_N6hqJ_43E-SME_N6hqJ, SME_N6hqJ_458-SME_N6hqJ	
00022CC6 0000 0000                  		dc.w SME_N6hqJ_46D-SME_N6hqJ, SME_N6hqJ_482-SME_N6hqJ	
00022CCA 0000 0000                  		dc.w SME_N6hqJ_497-SME_N6hqJ, SME_N6hqJ_4B1-SME_N6hqJ	
00022CCE 0000 0000                  		dc.w SME_N6hqJ_4C6-SME_N6hqJ, SME_N6hqJ_4DB-SME_N6hqJ	
00022CD2 0000 0000                  		dc.w SME_N6hqJ_4E6-SME_N6hqJ, SME_N6hqJ_4F1-SME_N6hqJ	
00022CD6 0000 0000                  		dc.w SME_N6hqJ_4FC-SME_N6hqJ, SME_N6hqJ_507-SME_N6hqJ	
00022CDA 0000 0000                  		dc.w SME_N6hqJ_51C-SME_N6hqJ, SME_N6hqJ_52C-SME_N6hqJ	
00022CDE 0000 0000                  		dc.w SME_N6hqJ_541-SME_N6hqJ, SME_N6hqJ_551-SME_N6hqJ	
00022CE2 0000 0000                  		dc.w SME_N6hqJ_55C-SME_N6hqJ, SME_N6hqJ_567-SME_N6hqJ	
00022CE6 0000 0000                  		dc.w SME_N6hqJ_572-SME_N6hqJ, SME_N6hqJ_57D-SME_N6hqJ	
00022CEA 0000 0000                  		dc.w SME_N6hqJ_58D-SME_N6hqJ, SME_N6hqJ_598-SME_N6hqJ	
00022CEE 0000 0000                  		dc.w SME_N6hqJ_5A8-SME_N6hqJ, SME_N6hqJ_5B3-SME_N6hqJ	
00022CF2 0000 0000                  		dc.w SME_N6hqJ_5B9-SME_N6hqJ, SME_N6hqJ_5BF-SME_N6hqJ	
00022CF6 0000 0000                  		dc.w SME_N6hqJ_5C5-SME_N6hqJ, SME_N6hqJ_5CB-SME_N6hqJ	
00022CFA 0000 0000                  		dc.w SME_N6hqJ_5D1-SME_N6hqJ, SME_N6hqJ_5D7-SME_N6hqJ	
00022CFE 0000 0000                  		dc.w SME_N6hqJ_5DD-SME_N6hqJ, SME_N6hqJ_5E3-SME_N6hqJ	
00022D02 0000 0000                  		dc.w SME_N6hqJ_5E9-SME_N6hqJ, SME_N6hqJ_5EF-SME_N6hqJ	
00022D06 0000 0000                  		dc.w SME_N6hqJ_5F5-SME_N6hqJ, SME_N6hqJ_605-SME_N6hqJ	
00022D0A 0000 0000                  		dc.w SME_N6hqJ_615-SME_N6hqJ, SME_N6hqJ_625-SME_N6hqJ	
00022D0E 0000 0000                  		dc.w SME_N6hqJ_635-SME_N6hqJ, SME_N6hqJ_63B-SME_N6hqJ	
00022D12 0000 0000                  		dc.w SME_N6hqJ_641-SME_N6hqJ, SME_N6hqJ_64C-SME_N6hqJ	
00022D16 0000 0000                  		dc.w SME_N6hqJ_657-SME_N6hqJ, SME_N6hqJ_667-SME_N6hqJ	
00022D1A 0000 0000                  		dc.w SME_N6hqJ_677-SME_N6hqJ, SME_N6hqJ_682-SME_N6hqJ	
00022D1E 0000 0000                  		dc.w SME_N6hqJ_68D-SME_N6hqJ, SME_N6hqJ_69D-SME_N6hqJ	
00022D22 0000 0000                  		dc.w SME_N6hqJ_6B2-SME_N6hqJ, SME_N6hqJ_6C2-SME_N6hqJ	
00022D26 0000 0000                  		dc.w SME_N6hqJ_6D2-SME_N6hqJ, SME_N6hqJ_6E2-SME_N6hqJ	
00022D2A 0000 0000                  		dc.w SME_N6hqJ_6F2-SME_N6hqJ, SME_N6hqJ_702-SME_N6hqJ	
00022D2E 0000 0000                  		dc.w SME_N6hqJ_70D-SME_N6hqJ, SME_N6hqJ_722-SME_N6hqJ	
00022D32 0000 0000                  		dc.w SME_N6hqJ_737-SME_N6hqJ, SME_N6hqJ_747-SME_N6hqJ	
00022D36 0000 0000                  		dc.w SME_N6hqJ_757-SME_N6hqJ, SME_N6hqJ_767-SME_N6hqJ	
00022D3A 0000 0000                  		dc.w SME_N6hqJ_772-SME_N6hqJ, SME_N6hqJ_778-SME_N6hqJ	
00022D3E 0000 0000                  		dc.w SME_N6hqJ_783-SME_N6hqJ, SME_N6hqJ_793-SME_N6hqJ	
00022D42 0000 0000                  		dc.w SME_N6hqJ_7A3-SME_N6hqJ, SME_N6hqJ_7B3-SME_N6hqJ	
00022D46 0000 0000                  		dc.w SME_N6hqJ_7BE-SME_N6hqJ, SME_N6hqJ_7C9-SME_N6hqJ	
00022D4A 0000 0000                  		dc.w SME_N6hqJ_7D9-SME_N6hqJ, SME_N6hqJ_7E4-SME_N6hqJ	
00022D4E 0000 0000                  		dc.w SME_N6hqJ_7F4-SME_N6hqJ, SME_N6hqJ_804-SME_N6hqJ	
00022D52 0000 0000                  		dc.w SME_N6hqJ_80A-SME_N6hqJ, SME_N6hqJ_81A-SME_N6hqJ	
00022D56 0000 0000                  		dc.w SME_N6hqJ_82A-SME_N6hqJ, SME_N6hqJ_844-SME_N6hqJ	
00022D5A 0000 0000                  		dc.w SME_N6hqJ_85E-SME_N6hqJ, SME_N6hqJ_869-SME_N6hqJ	
00022D5E 0000 0000                  		dc.w SME_N6hqJ_874-SME_N6hqJ, SME_N6hqJ_87F-SME_N6hqJ	
00022D62 0000 0000                  		dc.w SME_N6hqJ_88F-SME_N6hqJ, SME_N6hqJ_8A4-SME_N6hqJ	
00022D66 0000 0000                  		dc.w SME_N6hqJ_8B4-SME_N6hqJ, SME_N6hqJ_8BF-SME_N6hqJ	
00022D6A 0000 0000                  		dc.w SME_N6hqJ_8CF-SME_N6hqJ, SME_N6hqJ_8E4-SME_N6hqJ	
00022D6E 0000 0000                  		dc.w SME_N6hqJ_8F4-SME_N6hqJ, SME_N6hqJ_8FF-SME_N6hqJ	
00022D72 0000 0000                  		dc.w SME_N6hqJ_914-SME_N6hqJ, SME_N6hqJ_92E-SME_N6hqJ	
00022D76 0000 0000                  		dc.w SME_N6hqJ_948-SME_N6hqJ, SME_N6hqJ_962-SME_N6hqJ	
00022D7A 0000 0000                  		dc.w SME_N6hqJ_981-SME_N6hqJ, SME_N6hqJ_9A0-SME_N6hqJ	
00022D7E 0000 0000                  		dc.w SME_N6hqJ_9BA-SME_N6hqJ, SME_N6hqJ_9D4-SME_N6hqJ	
00022D82 0000 0000                  		dc.w SME_N6hqJ_9E4-SME_N6hqJ, SME_N6hqJ_9F4-SME_N6hqJ	
00022D86 0000 0000                  		dc.w SME_N6hqJ_A04-SME_N6hqJ, SME_N6hqJ_A0F-SME_N6hqJ	
00022D8A 0000 0000                  		dc.w SME_N6hqJ_A1F-SME_N6hqJ, SME_N6hqJ_A2F-SME_N6hqJ	
00022D8E 0000 0000                  		dc.w SME_N6hqJ_A3F-SME_N6hqJ, SME_N6hqJ_A4A-SME_N6hqJ	
00022D92 0000 0000                  		dc.w SME_N6hqJ_A5F-SME_N6hqJ, SME_N6hqJ_A79-SME_N6hqJ	
00022D96 0000 0000                  		dc.w SME_N6hqJ_A8E-SME_N6hqJ, SME_N6hqJ_AA3-SME_N6hqJ	
00022D9A 0000 0000                  		dc.w SME_N6hqJ_AB8-SME_N6hqJ, SME_N6hqJ_AD2-SME_N6hqJ	
00022D9E 0000 0000                  		dc.w SME_N6hqJ_AE7-SME_N6hqJ, SME_N6hqJ_AFC-SME_N6hqJ	
00022DA2 0000 0000                  		dc.w SME_N6hqJ_B0C-SME_N6hqJ, SME_N6hqJ_B21-SME_N6hqJ	
00022DA6 0000 0000                  		dc.w SME_N6hqJ_B31-SME_N6hqJ, SME_N6hqJ_B3C-SME_N6hqJ	
00022DAA 0000 0000                  		dc.w SME_N6hqJ_B4C-SME_N6hqJ, SME_N6hqJ_B61-SME_N6hqJ	
00022DAE 0000 0000                  		dc.w SME_N6hqJ_B71-SME_N6hqJ, SME_N6hqJ_B7C-SME_N6hqJ	
00022DB2 0000 0000                  		dc.w SME_N6hqJ_B96-SME_N6hqJ, SME_N6hqJ_BB5-SME_N6hqJ	
00022DB6 0000 0000                  		dc.w SME_N6hqJ_BCF-SME_N6hqJ, SME_N6hqJ_BE9-SME_N6hqJ	
00022DBA 0000 0000                  		dc.w SME_N6hqJ_C08-SME_N6hqJ, SME_N6hqJ_C27-SME_N6hqJ	
00022DBE 0000 0000                  		dc.w SME_N6hqJ_C41-SME_N6hqJ, SME_N6hqJ_C60-SME_N6hqJ	
00022DC2 0000 0000                  		dc.w SME_N6hqJ_C70-SME_N6hqJ, SME_N6hqJ_C80-SME_N6hqJ	
00022DC6 0000 0000                  		dc.w SME_N6hqJ_C90-SME_N6hqJ, SME_N6hqJ_C9B-SME_N6hqJ	
00022DCA 0000 0000                  		dc.w SME_N6hqJ_CAB-SME_N6hqJ, SME_N6hqJ_CBB-SME_N6hqJ	
00022DCE 0000 0000                  		dc.w SME_N6hqJ_CCB-SME_N6hqJ, SME_N6hqJ_CD6-SME_N6hqJ	
00022DD2 0000 0000                  		dc.w SME_N6hqJ_CEB-SME_N6hqJ, SME_N6hqJ_D05-SME_N6hqJ	
00022DD6 0000 0000                  		dc.w SME_N6hqJ_D1F-SME_N6hqJ, SME_N6hqJ_D34-SME_N6hqJ	
00022DDA 0000 0000                  		dc.w SME_N6hqJ_D49-SME_N6hqJ, SME_N6hqJ_D63-SME_N6hqJ	
00022DDE 0000 0000                  		dc.w SME_N6hqJ_D7D-SME_N6hqJ, SME_N6hqJ_D97-SME_N6hqJ	
00022DE2 0000 0000                  		dc.w SME_N6hqJ_DAC-SME_N6hqJ, SME_N6hqJ_DC1-SME_N6hqJ	
00022DE6 0000 0000                  		dc.w SME_N6hqJ_DD6-SME_N6hqJ, SME_N6hqJ_DF0-SME_N6hqJ	
00022DEA 0000 0000                  		dc.w SME_N6hqJ_E05-SME_N6hqJ, SME_N6hqJ_E1A-SME_N6hqJ	
00022DEE 0000 0000                  		dc.w SME_N6hqJ_E2F-SME_N6hqJ, SME_N6hqJ_E49-SME_N6hqJ	
00022DF2 0000 0000                  		dc.w SME_N6hqJ_E5E-SME_N6hqJ, SME_N6hqJ_E73-SME_N6hqJ	
00022DF6 0000 0000                  		dc.w SME_N6hqJ_E88-SME_N6hqJ, SME_N6hqJ_E9D-SME_N6hqJ	
00022DFA 0000 0000                  		dc.w SME_N6hqJ_EA8-SME_N6hqJ, SME_N6hqJ_EB8-SME_N6hqJ	
00022DFE 0000 0000                  		dc.w SME_N6hqJ_EC8-SME_N6hqJ, SME_N6hqJ_ED8-SME_N6hqJ	
00022E02 0000 0000                  		dc.w SME_N6hqJ_EE8-SME_N6hqJ, SME_N6hqJ_EF8-SME_N6hqJ	
00022E06 0000 0000                  		dc.w SME_N6hqJ_F08-SME_N6hqJ, SME_N6hqJ_F18-SME_N6hqJ	
00022E0A 0000 0000                  		dc.w SME_N6hqJ_F28-SME_N6hqJ, SME_N6hqJ_F38-SME_N6hqJ	
00022E0E 0000 0000                  		dc.w SME_N6hqJ_F52-SME_N6hqJ, SME_N6hqJ_F67-SME_N6hqJ	
00022E12 0000 0000                  		dc.w SME_N6hqJ_F7C-SME_N6hqJ, SME_N6hqJ_F91-SME_N6hqJ	
00022E16 0000 0000                  		dc.w SME_N6hqJ_FA1-SME_N6hqJ, SME_N6hqJ_FB1-SME_N6hqJ	
00022E1A 0000 0000                  		dc.w SME_N6hqJ_FC1-SME_N6hqJ, SME_N6hqJ_FD6-SME_N6hqJ	
00022E1E 0000 0000                  		dc.w SME_N6hqJ_FEB-SME_N6hqJ, SME_N6hqJ_1000-SME_N6hqJ	
00022E22 00                         SME_N6hqJ_1AC:	dc.b 0	
00022E23 04                         SME_N6hqJ_1AD:	dc.b 4	
00022E24 E405 0000 F8               		dc.b $E4, 5, 0, 0, $F8	
00022E29 EC03 0004 F0               		dc.b $EC, 3, 0, 4, $F0	
00022E2E F409 0008 F8               		dc.b $F4, 9, 0, 8, $F8	
00022E33 0409 000E F8               		dc.b 4, 9, 0, $E, $F8	
00022E38 02                         SME_N6hqJ_1C2:	dc.b 2	
00022E39 EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00022E3E 0C09 000C F8               		dc.b $C, 9, 0, $C, $F8	
00022E43 04                         SME_N6hqJ_1CD:	dc.b 4	
00022E44 EC03 0000 F0               		dc.b $EC, 3, 0, 0, $F0	
00022E49 EC05 0004 F8               		dc.b $EC, 5, 0, 4, $F8	
00022E4E FC05 0008 F8               		dc.b $FC, 5, 0, 8, $F8	
00022E53 0C09 000C F8               		dc.b $C, 9, 0, $C, $F8	
00022E58 04                         SME_N6hqJ_1E2:	dc.b 4	
00022E59 EC03 0000 F0               		dc.b $EC, 3, 0, 0, $F0	
00022E5E EC05 0004 F8               		dc.b $EC, 5, 0, 4, $F8	
00022E63 FC05 0008 F8               		dc.b $FC, 5, 0, 8, $F8	
00022E68 0C09 000C F8               		dc.b $C, 9, 0, $C, $F8	
00022E6D 05                         SME_N6hqJ_1F7:	dc.b 5	
00022E6E EC03 0000 F0               		dc.b $EC, 3, 0, 0, $F0	
00022E73 EC05 0004 F8               		dc.b $EC, 5, 0, 4, $F8	
00022E78 FC05 0008 F8               		dc.b $FC, 5, 0, 8, $F8	
00022E7D 0C01 000C F8               		dc.b $C, 1, 0, $C, $F8	
00022E82 0C05 000E 00               		dc.b $C, 5, 0, $E, 0	
00022E87 03                         SME_N6hqJ_211:	dc.b 3	
00022E88 EC03 0000 F0               		dc.b $EC, 3, 0, 0, $F0	
00022E8D EC07 0004 F8               		dc.b $EC, 7, 0, 4, $F8	
00022E92 0C09 000C F8               		dc.b $C, 9, 0, $C, $F8	
00022E97 02                         SME_N6hqJ_221:	dc.b 2	
00022E98 F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00022E9D 0401 000C 08               		dc.b 4, 1, 0, $C, 8	
00022EA2 02                         SME_N6hqJ_22C:	dc.b 2	
00022EA3 F40B 0000 E8               		dc.b $F4, $B, 0, 0, $E8	
00022EA8 0405 000C 00               		dc.b 4, 5, 0, $C, 0	
00022EAD 02                         SME_N6hqJ_237:	dc.b 2	
00022EAE F40B 0000 E8               		dc.b $F4, $B, 0, 0, $E8	
00022EB3 0405 000C 00               		dc.b 4, 5, 0, $C, 0	
00022EB8 02                         SME_N6hqJ_242:	dc.b 2	
00022EB9 E40B 0000 F0               		dc.b $E4, $B, 0, 0, $F0	
00022EBE 040D 000C F0               		dc.b 4, $D, 0, $C, $F0	
00022EC3 04                         SME_N6hqJ_24D:	dc.b 4	
00022EC4 E405 0000 F8               		dc.b $E4, 5, 0, 0, $F8	
00022EC9 EC03 0004 F0               		dc.b $EC, 3, 0, 4, $F0	
00022ECE F409 0008 F8               		dc.b $F4, 9, 0, 8, $F8	
00022ED3 0409 000E F8               		dc.b 4, 9, 0, $E, $F8	
00022ED8 04                         SME_N6hqJ_262:	dc.b 4	
00022ED9 EC03 0000 F0               		dc.b $EC, 3, 0, 0, $F0	
00022EDE E405 0004 F8               		dc.b $E4, 5, 0, 4, $F8	
00022EE3 F405 0008 F8               		dc.b $F4, 5, 0, 8, $F8	
00022EE8 0409 000C F8               		dc.b 4, 9, 0, $C, $F8	
00022EED 03                         SME_N6hqJ_277:	dc.b 3	
00022EEE EB0D 0000 EE               		dc.b $EB, $D, 0, 0, $EE	
00022EF3 0301 0008 EC               		dc.b 3, 1, 0, 8, $EC	
00022EF8 FB0F 000A F4               		dc.b $FB, $F, 0, $A, $F4	
00022EFD 04                         SME_N6hqJ_287:	dc.b 4	
00022EFE EC0D 0000 EE               		dc.b $EC, $D, 0, 0, $EE	
00022F03 0401 0008 EC               		dc.b 4, 1, 0, 8, $EC	
00022F08 FC0B 000A F4               		dc.b $FC, $B, 0, $A, $F4	
00022F0D 0401 0016 0C               		dc.b 4, 1, 0, $16, $C	
00022F12 03                         SME_N6hqJ_29C:	dc.b 3	
00022F13 ED0D 0000 ED               		dc.b $ED, $D, 0, 0, $ED	
00022F18 FD09 0008 F4               		dc.b $FD, 9, 0, 8, $F4	
00022F1D 0D05 000E F7               		dc.b $D, 5, 0, $E, $F7	
00022F22 02                         SME_N6hqJ_2AC:	dc.b 2	
00022F23 EC09 0000 F4               		dc.b $EC, 9, 0, 0, $F4	
00022F28 FC0F 0006 EE               		dc.b $FC, $F, 0, 6, $EE	
00022F2D 03                         SME_N6hqJ_2B7:	dc.b 3	
00022F2E EB09 0000 F4               		dc.b $EB, 9, 0, 0, $F4	
00022F33 FB0F 0006 EE               		dc.b $FB, $F, 0, 6, $EE	
00022F38 FB01 0016 0E               		dc.b $FB, 1, 0, $16, $E	
00022F3D 04                         SME_N6hqJ_2C7:	dc.b 4	
00022F3E EC09 0000 F4               		dc.b $EC, 9, 0, 0, $F4	
00022F43 0401 0006 EC               		dc.b 4, 1, 0, 6, $EC	
00022F48 FC0B 0008 F4               		dc.b $FC, $B, 0, 8, $F4	
00022F4D 0401 0014 0C               		dc.b 4, 1, 0, $14, $C	
00022F52 03                         SME_N6hqJ_2DC:	dc.b 3	
00022F53 ED0D 0000 ED               		dc.b $ED, $D, 0, 0, $ED	
00022F58 FD09 0008 F4               		dc.b $FD, 9, 0, 8, $F4	
00022F5D 0D05 000E F7               		dc.b $D, 5, 0, $E, $F7	
00022F62 02                         SME_N6hqJ_2EC:	dc.b 2	
00022F63 EC0D 0000 EE               		dc.b $EC, $D, 0, 0, $EE	
00022F68 FC0B 0008 F3               		dc.b $FC, $B, 0, 8, $F3	
00022F6D 04                         SME_N6hqJ_2F7:	dc.b 4	
00022F6E EB09 0000 EA               		dc.b $EB, 9, 0, 0, $EA	
00022F73 FB09 0006 EA               		dc.b $FB, 9, 0, 6, $EA	
00022F78 F305 000C 02               		dc.b $F3, 5, 0, $C, 2	
00022F7D 0B01 0010 FA               		dc.b $B, 1, 0, $10, $FA	
00022F82 05                         SME_N6hqJ_30C:	dc.b 5	
00022F83 EC09 0000 EB               		dc.b $EC, 9, 0, 0, $EB	
00022F88 EC01 0006 03               		dc.b $EC, 1, 0, 6, 3	
00022F8D FC0D 0008 EB               		dc.b $FC, $D, 0, 8, $EB	
00022F92 FC05 0010 0B               		dc.b $FC, 5, 0, $10, $B	
00022F97 0C01 0014 FB               		dc.b $C, 1, 0, $14, $FB	
00022F9C 04                         SME_N6hqJ_326:	dc.b 4	
00022F9D ED07 0000 EC               		dc.b $ED, 7, 0, 0, $EC	
00022FA2 ED03 0008 FC               		dc.b $ED, 3, 0, 8, $FC	
00022FA7 F501 000C 04               		dc.b $F5, 1, 0, $C, 4	
00022FAC 0505 000E 04               		dc.b 5, 5, 0, $E, 4	
00022FB1 04                         SME_N6hqJ_33B:	dc.b 4	
00022FB2 EC09 0000 EB               		dc.b $EC, 9, 0, 0, $EB	
00022FB7 EC01 0006 03               		dc.b $EC, 1, 0, 6, 3	
00022FBC FC05 0008 EB               		dc.b $FC, 5, 0, 8, $EB	
00022FC1 FC0B 000C FB               		dc.b $FC, $B, 0, $C, $FB	
00022FC6 05                         SME_N6hqJ_350:	dc.b 5	
00022FC7 EB09 0000 EA               		dc.b $EB, 9, 0, 0, $EA	
00022FCC EB01 0006 02               		dc.b $EB, 1, 0, 6, 2	
00022FD1 FB0D 0008 EA               		dc.b $FB, $D, 0, 8, $EA	
00022FD6 F301 0010 0A               		dc.b $F3, 1, 0, $10, $A	
00022FDB 0B05 0012 F2               		dc.b $B, 5, 0, $12, $F2	
00022FE0 05                         SME_N6hqJ_36A:	dc.b 5	
00022FE1 EC09 0000 EB               		dc.b $EC, 9, 0, 0, $EB	
00022FE6 EC01 0006 03               		dc.b $EC, 1, 0, 6, 3	
00022FEB FC0D 0008 EB               		dc.b $FC, $D, 0, 8, $EB	
00022FF0 FA05 0010 0B               		dc.b $FA, 5, 0, $10, $B	
00022FF5 0C01 0014 FB               		dc.b $C, 1, 0, $14, $FB	
00022FFA 04                         SME_N6hqJ_384:	dc.b 4	
00022FFB ED07 0000 EC               		dc.b $ED, 7, 0, 0, $EC	
00023000 ED03 0008 FC               		dc.b $ED, 3, 0, 8, $FC	
00023005 F501 000C 04               		dc.b $F5, 1, 0, $C, 4	
0002300A 0505 000E 04               		dc.b 5, 5, 0, $E, 4	
0002300F 05                         SME_N6hqJ_399:	dc.b 5	
00023010 EC09 0000 EB               		dc.b $EC, 9, 0, 0, $EB	
00023015 FC09 0006 EB               		dc.b $FC, 9, 0, 6, $EB	
0002301A F401 000C 03               		dc.b $F4, 1, 0, $C, 3	
0002301F 0C01 000E FB               		dc.b $C, 1, 0, $E, $FB	
00023024 0405 0010 03               		dc.b 4, 5, 0, $10, 3	
00023029 03                         SME_N6hqJ_3B3:	dc.b 3	
0002302A F207 0000 EB               		dc.b $F2, 7, 0, 0, $EB	
0002302F EC0B 0008 FB               		dc.b $EC, $B, 0, 8, $FB	
00023034 0C05 0014 03               		dc.b $C, 5, 0, $14, 3	
00023039 03                         SME_N6hqJ_3C3:	dc.b 3	
0002303A F207 0000 EC               		dc.b $F2, 7, 0, 0, $EC	
0002303F EC0B 0008 FC               		dc.b $EC, $B, 0, 8, $FC	
00023044 0C05 0014 04               		dc.b $C, 5, 0, $14, 4	
00023049 03                         SME_N6hqJ_3D3:	dc.b 3	
0002304A F307 0000 ED               		dc.b $F3, 7, 0, 0, $ED	
0002304F F403 0008 FD               		dc.b $F4, 3, 0, 8, $FD	
00023054 F905 000C 05               		dc.b $F9, 5, 0, $C, 5	
00023059 02                         SME_N6hqJ_3E3:	dc.b 2	
0002305A F407 0000 EC               		dc.b $F4, 7, 0, 0, $EC	
0002305F F20B 0008 FC               		dc.b $F2, $B, 0, 8, $FC	
00023064 03                         SME_N6hqJ_3EE:	dc.b 3	
00023065 F407 0000 EB               		dc.b $F4, 7, 0, 0, $EB	
0002306A E305 0008 FB               		dc.b $E3, 5, 0, 8, $FB	
0002306F F30B 000C FB               		dc.b $F3, $B, 0, $C, $FB	
00023074 03                         SME_N6hqJ_3FE:	dc.b 3	
00023075 F407 0000 EC               		dc.b $F4, 7, 0, 0, $EC	
0002307A EC0B 0008 FC               		dc.b $EC, $B, 0, 8, $FC	
0002307F 0C05 0014 04               		dc.b $C, 5, 0, $14, 4	
00023084 03                         SME_N6hqJ_40E:	dc.b 3	
00023085 F307 0000 ED               		dc.b $F3, 7, 0, 0, $ED	
0002308A F403 0008 FD               		dc.b $F4, 3, 0, 8, $FD	
0002308F F905 000C 05               		dc.b $F9, 5, 0, $C, 5	
00023094 02                         SME_N6hqJ_41E:	dc.b 2	
00023095 F207 0000 EC               		dc.b $F2, 7, 0, 0, $EC	
0002309A F40B 0008 FC               		dc.b $F4, $B, 0, 8, $FC	
0002309F 04                         SME_N6hqJ_429:	dc.b 4	
000230A0 EE05 0000 F3               		dc.b $EE, 5, 0, 0, $F3	
000230A5 FE07 0004 EB               		dc.b $FE, 7, 0, 4, $EB	
000230AA FE0D 000C FB               		dc.b $FE, $D, 0, $C, $FB	
000230AF 0E01 0014 FB               		dc.b $E, 1, 0, $14, $FB	
000230B4 05                         SME_N6hqJ_43E:	dc.b 5	
000230B5 DD05 0000 FC               		dc.b $DD, 5, 0, 0, $FC	
000230BA ED09 0004 F4               		dc.b $ED, 9, 0, 4, $F4	
000230BF FD07 000A EC               		dc.b $FD, 7, 0, $A, $EC	
000230C4 FD0D 0012 FC               		dc.b $FD, $D, 0, $12, $FC	
000230C9 0D01 001A FC               		dc.b $D, 1, 0, $1A, $FC	
000230CE 04                         SME_N6hqJ_458:	dc.b 4	
000230CF EC0D 0000 F5               		dc.b $EC, $D, 0, 0, $F5	
000230D4 FC07 0008 ED               		dc.b $FC, 7, 0, 8, $ED	
000230D9 FC05 0010 FD               		dc.b $FC, 5, 0, $10, $FD	
000230DE 0C01 0014 FD               		dc.b $C, 1, 0, $14, $FD	
000230E3 04                         SME_N6hqJ_46D:	dc.b 4	
000230E4 ED0D 0000 F4               		dc.b $ED, $D, 0, 0, $F4	
000230E9 FD07 0008 EC               		dc.b $FD, 7, 0, 8, $EC	
000230EE FD09 0010 FC               		dc.b $FD, 9, 0, $10, $FC	
000230F3 0D01 0016 FC               		dc.b $D, 1, 0, $16, $FC	
000230F8 04                         SME_N6hqJ_482:	dc.b 4	
000230F9 EE09 0000 F3               		dc.b $EE, 9, 0, 0, $F3	
000230FE FE07 0006 EB               		dc.b $FE, 7, 0, 6, $EB	
00023103 FE0D 000E FB               		dc.b $FE, $D, 0, $E, $FB	
00023108 0E01 0016 FB               		dc.b $E, 1, 0, $16, $FB	
0002310D 05                         SME_N6hqJ_497:	dc.b 5	
0002310E DD05 0000 FA               		dc.b $DD, 5, 0, 0, $FA	
00023113 ED09 0004 F4               		dc.b $ED, 9, 0, 4, $F4	
00023118 FD07 000A EC               		dc.b $FD, 7, 0, $A, $EC	
0002311D FD0D 0012 FC               		dc.b $FD, $D, 0, $12, $FC	
00023122 0D01 001A FC               		dc.b $D, 1, 0, $1A, $FC	
00023127 04                         SME_N6hqJ_4B1:	dc.b 4	
00023128 EC0D 0000 F5               		dc.b $EC, $D, 0, 0, $F5	
0002312D FC07 0008 ED               		dc.b $FC, 7, 0, 8, $ED	
00023132 FC05 0010 FD               		dc.b $FC, 5, 0, $10, $FD	
00023137 0C01 0014 FD               		dc.b $C, 1, 0, $14, $FD	
0002313C 04                         SME_N6hqJ_4C6:	dc.b 4	
0002313D ED0D 0000 F4               		dc.b $ED, $D, 0, 0, $F4	
00023142 FD07 0008 EC               		dc.b $FD, 7, 0, 8, $EC	
00023147 FD09 0010 FC               		dc.b $FD, 9, 0, $10, $FC	
0002314C 0D01 0016 FC               		dc.b $D, 1, 0, $16, $FC	
00023151 02                         SME_N6hqJ_4DB:	dc.b 2	
00023152 EE09 0000 F8               		dc.b $EE, 9, 0, 0, $F8	
00023157 FE0F 0006 F0               		dc.b $FE, $F, 0, 6, $F0	
0002315C 02                         SME_N6hqJ_4E6:	dc.b 2	
0002315D EE09 0000 F8               		dc.b $EE, 9, 0, 0, $F8	
00023162 FE0F 0006 F0               		dc.b $FE, $F, 0, 6, $F0	
00023167 02                         SME_N6hqJ_4F1:	dc.b 2	
00023168 EE09 0000 F8               		dc.b $EE, 9, 0, 0, $F8	
0002316D FE0F 0006 F0               		dc.b $FE, $F, 0, 6, $F0	
00023172 02                         SME_N6hqJ_4FC:	dc.b 2	
00023173 EE09 0000 F8               		dc.b $EE, 9, 0, 0, $F8	
00023178 FE0F 0006 F0               		dc.b $FE, $F, 0, 6, $F0	
0002317D 04                         SME_N6hqJ_507:	dc.b 4	
0002317E EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
00023183 EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
00023188 FC0D 0008 F4               		dc.b $FC, $D, 0, 8, $F4	
0002318D 0C09 0010 FA               		dc.b $C, 9, 0, $10, $FA	
00023192 03                         SME_N6hqJ_51C:	dc.b 3	
00023193 EC0D 0000 ED               		dc.b $EC, $D, 0, 0, $ED	
00023198 FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
0002319D 0C09 0010 F8               		dc.b $C, 9, 0, $10, $F8	
000231A2 04                         SME_N6hqJ_52C:	dc.b 4	
000231A3 EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
000231A8 EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
000231AD FC0D 0008 F4               		dc.b $FC, $D, 0, 8, $F4	
000231B2 0C09 0010 FD               		dc.b $C, 9, 0, $10, $FD	
000231B7 03                         SME_N6hqJ_541:	dc.b 3	
000231B8 EC0D 0000 ED               		dc.b $EC, $D, 0, 0, $ED	
000231BD FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
000231C2 0C09 0010 F8               		dc.b $C, 9, 0, $10, $F8	
000231C7 02                         SME_N6hqJ_551:	dc.b 2	
000231C8 F007 0000 EE               		dc.b $F0, 7, 0, 0, $EE	
000231CD F00B 0008 FE               		dc.b $F0, $B, 0, 8, $FE	
000231D2 02                         SME_N6hqJ_55C:	dc.b 2	
000231D3 F007 0000 EE               		dc.b $F0, 7, 0, 0, $EE	
000231D8 F00B 0008 FE               		dc.b $F0, $B, 0, 8, $FE	
000231DD 02                         SME_N6hqJ_567:	dc.b 2	
000231DE F007 0000 EE               		dc.b $F0, 7, 0, 0, $EE	
000231E3 F00B 0008 FE               		dc.b $F0, $B, 0, 8, $FE	
000231E8 02                         SME_N6hqJ_572:	dc.b 2	
000231E9 F007 0000 EE               		dc.b $F0, 7, 0, 0, $EE	
000231EE F00B 0008 FE               		dc.b $F0, $B, 0, 8, $FE	
000231F3 03                         SME_N6hqJ_57D:	dc.b 3	
000231F4 E901 0000 F4               		dc.b $E9, 1, 0, 0, $F4	
000231F9 F907 0002 EC               		dc.b $F9, 7, 0, 2, $EC	
000231FE EC0B 000A FC               		dc.b $EC, $B, 0, $A, $FC	
00023203 02                         SME_N6hqJ_58D:	dc.b 2	
00023204 F307 0000 EC               		dc.b $F3, 7, 0, 0, $EC	
00023209 EB0B 0008 FC               		dc.b $EB, $B, 0, 8, $FC	
0002320E 03                         SME_N6hqJ_598:	dc.b 3	
0002320F E901 0000 F4               		dc.b $E9, 1, 0, 0, $F4	
00023214 F907 0002 EC               		dc.b $F9, 7, 0, 2, $EC	
00023219 EC0B 000A FC               		dc.b $EC, $B, 0, $A, $FC	
0002321E 02                         SME_N6hqJ_5A8:	dc.b 2	
0002321F F307 0000 EC               		dc.b $F3, 7, 0, 0, $EC	
00023224 EB0B 0008 FC               		dc.b $EB, $B, 0, 8, $FC	
00023229 01                         SME_N6hqJ_5B3:	dc.b 1	
0002322A F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002322F 01                         SME_N6hqJ_5B9:	dc.b 1	
00023230 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00023235 01                         SME_N6hqJ_5BF:	dc.b 1	
00023236 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002323B 01                         SME_N6hqJ_5C5:	dc.b 1	
0002323C F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00023241 01                         SME_N6hqJ_5CB:	dc.b 1	
00023242 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00023247 01                         SME_N6hqJ_5D1:	dc.b 1	
00023248 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
0002324D 01                         SME_N6hqJ_5D7:	dc.b 1	
0002324E F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00023253 01                         SME_N6hqJ_5DD:	dc.b 1	
00023254 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00023259 01                         SME_N6hqJ_5E3:	dc.b 1	
0002325A F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
0002325F 01                         SME_N6hqJ_5E9:	dc.b 1	
00023260 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00023265 01                         SME_N6hqJ_5EF:	dc.b 1	
00023266 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
0002326B 03                         SME_N6hqJ_5F5:	dc.b 3	
0002326C E509 0000 F3               		dc.b $E5, 9, 0, 0, $F3	
00023271 F509 0006 F3               		dc.b $F5, 9, 0, 6, $F3	
00023276 050D 000C EB               		dc.b 5, $D, 0, $C, $EB	
0002327B 03                         SME_N6hqJ_605:	dc.b 3	
0002327C E409 0000 F3               		dc.b $E4, 9, 0, 0, $F3	
00023281 F409 0006 F3               		dc.b $F4, 9, 0, 6, $F3	
00023286 0409 000C F3               		dc.b 4, 9, 0, $C, $F3	
0002328B 03                         SME_N6hqJ_615:	dc.b 3	
0002328C E509 0000 F3               		dc.b $E5, 9, 0, 0, $F3	
00023291 F509 0006 F3               		dc.b $F5, 9, 0, 6, $F3	
00023296 050D 000C EB               		dc.b 5, $D, 0, $C, $EB	
0002329B 03                         SME_N6hqJ_625:	dc.b 3	
0002329C E509 0000 F3               		dc.b $E5, 9, 0, 0, $F3	
000232A1 F509 0006 F3               		dc.b $F5, 9, 0, 6, $F3	
000232A6 0509 000C F3               		dc.b 5, 9, 0, $C, $F3	
000232AB 01                         SME_N6hqJ_635:	dc.b 1	
000232AC F40B 0000 F6               		dc.b $F4, $B, 0, 0, $F6	
000232B1 01                         SME_N6hqJ_63B:	dc.b 1	
000232B2 F40F 0000 F2               		dc.b $F4, $F, 0, 0, $F2	
000232B7 02                         SME_N6hqJ_641:	dc.b 2	
000232B8 F801 0000 EC               		dc.b $F8, 1, 0, 0, $EC	
000232BD F00F 0002 F4               		dc.b $F0, $F, 0, 2, $F4	
000232C2 02                         SME_N6hqJ_64C:	dc.b 2	
000232C3 F003 0000 EC               		dc.b $F0, 3, 0, 0, $EC	
000232C8 F00F 0004 F4               		dc.b $F0, $F, 0, 4, $F4	
000232CD 03                         SME_N6hqJ_657:	dc.b 3	
000232CE E80F 0000 E8               		dc.b $E8, $F, 0, 0, $E8	
000232D3 E801 0010 08               		dc.b $E8, 1, 0, $10, 8	
000232D8 F805 0012 08               		dc.b $F8, 5, 0, $12, 8	
000232DD 03                         SME_N6hqJ_667:	dc.b 3	
000232DE E80F 0000 E8               		dc.b $E8, $F, 0, 0, $E8	
000232E3 E801 0010 08               		dc.b $E8, 1, 0, $10, 8	
000232E8 F805 0012 08               		dc.b $F8, 5, 0, $12, 8	
000232ED 02                         SME_N6hqJ_677:	dc.b 2	
000232EE E80B 0000 F4               		dc.b $E8, $B, 0, 0, $F4	
000232F3 0809 000C F4               		dc.b 8, 9, 0, $C, $F4	
000232F8 02                         SME_N6hqJ_682:	dc.b 2	
000232F9 E80B 0000 F4               		dc.b $E8, $B, 0, 0, $F4	
000232FE 0809 000C F4               		dc.b 8, 9, 0, $C, $F4	
00023303 03                         SME_N6hqJ_68D:	dc.b 3	
00023304 FC05 0000 EC               		dc.b $FC, 5, 0, 0, $EC	
00023309 F40B 0004 FC               		dc.b $F4, $B, 0, 4, $FC	
0002330E F401 0010 14               		dc.b $F4, 1, 0, $10, $14	
00023313 04                         SME_N6hqJ_69D:	dc.b 4	
00023314 F401 0000 E8               		dc.b $F4, 1, 0, 0, $E8	
00023319 F407 0002 F0               		dc.b $F4, 7, 0, 2, $F0	
0002331E F407 0802 00               		dc.b $F4, 7, 8, 2, 0	
00023323 F401 0800 10               		dc.b $F4, 1, 8, 0, $10	
00023328 03                         SME_N6hqJ_6B2:	dc.b 3	
00023329 FC05 0800 04               		dc.b $FC, 5, 8, 0, 4	
0002332E F40B 0804 EC               		dc.b $F4, $B, 8, 4, $EC	
00023333 F401 0810 E4               		dc.b $F4, 1, 8, $10, $E4	
00023338 03                         SME_N6hqJ_6C2:	dc.b 3	
00023339 F401 0000 E4               		dc.b $F4, 1, 0, 0, $E4	
0002333E F40B 0002 EC               		dc.b $F4, $B, 0, 2, $EC	
00023343 FC01 000E 04               		dc.b $FC, 1, 0, $E, 4	
00023348 03                         SME_N6hqJ_6D2:	dc.b 3	
00023349 F401 0800 14               		dc.b $F4, 1, 8, 0, $14	
0002334E F40B 0802 FC               		dc.b $F4, $B, 8, 2, $FC	
00023353 FC01 080E F4               		dc.b $FC, 1, 8, $E, $F4	
00023358 03                         SME_N6hqJ_6E2:	dc.b 3	
00023359 FC05 0000 EC               		dc.b $FC, 5, 0, 0, $EC	
0002335E F40B 0004 FC               		dc.b $F4, $B, 0, 4, $FC	
00023363 F401 0010 14               		dc.b $F4, 1, 0, $10, $14	
00023368 03                         SME_N6hqJ_6F2:	dc.b 3	
00023369 E409 0000 F4               		dc.b $E4, 9, 0, 0, $F4	
0002336E F40F 0006 EC               		dc.b $F4, $F, 0, 6, $EC	
00023373 0401 0016 0C               		dc.b 4, 1, 0, $16, $C	
00023378 02                         SME_N6hqJ_702:	dc.b 2	
00023379 E80B 0000 F4               		dc.b $E8, $B, 0, 0, $F4	
0002337E 0805 000C FC               		dc.b 8, 5, 0, $C, $FC	
00023383 04                         SME_N6hqJ_70D:	dc.b 4	
00023384 EA01 0000 E8               		dc.b $EA, 1, 0, 0, $E8	
00023389 EA0B 0002 F0               		dc.b $EA, $B, 0, 2, $F0	
0002338E EA01 000E 08               		dc.b $EA, 1, 0, $E, 8	
00023393 0A0D 0010 F0               		dc.b $A, $D, 0, $10, $F0	
00023398 04                         SME_N6hqJ_722:	dc.b 4	
00023399 EA01 0000 E8               		dc.b $EA, 1, 0, 0, $E8	
0002339E EA0B 0002 F0               		dc.b $EA, $B, 0, 2, $F0	
000233A3 EA01 000E 08               		dc.b $EA, 1, 0, $E, 8	
000233A8 0A0D 0010 F0               		dc.b $A, $D, 0, $10, $F0	
000233AD 03                         SME_N6hqJ_737:	dc.b 3	
000233AE EA0D 0000 E8               		dc.b $EA, $D, 0, 0, $E8	
000233B3 EA01 0008 08               		dc.b $EA, 1, 0, 8, 8	
000233B8 FA0B 000A F0               		dc.b $FA, $B, 0, $A, $F0	
000233BD 03                         SME_N6hqJ_747:	dc.b 3	
000233BE E409 0000 F0               		dc.b $E4, 9, 0, 0, $F0	
000233C3 F40B 0006 F0               		dc.b $F4, $B, 0, 6, $F0	
000233C8 F401 0012 08               		dc.b $F4, 1, 0, $12, 8	
000233CD 03                         SME_N6hqJ_757:	dc.b 3	
000233CE E50B 0000 F0               		dc.b $E5, $B, 0, 0, $F0	
000233D3 F401 000C 08               		dc.b $F4, 1, 0, $C, 8	
000233D8 0505 000E F8               		dc.b 5, 5, 0, $E, $F8	
000233DD 02                         SME_N6hqJ_767:	dc.b 2	
000233DE EC0B 0000 F1               		dc.b $EC, $B, 0, 0, $F1	
000233E3 FC01 000C 09               		dc.b $FC, 1, 0, $C, 9	
000233E8 01                         SME_N6hqJ_772:	dc.b 1	
000233E9 EE0F 0000 F0               		dc.b $EE, $F, 0, 0, $F0	
000233EE 02                         SME_N6hqJ_778:	dc.b 2	
000233EF F20B 0000 F0               		dc.b $F2, $B, 0, 0, $F0	
000233F4 FA01 000C 08               		dc.b $FA, 1, 0, $C, 8	
000233F9 03                         SME_N6hqJ_783:	dc.b 3	
000233FA E401 0000 00               		dc.b $E4, 1, 0, 0, 0	
000233FF F40B 0002 F0               		dc.b $F4, $B, 0, 2, $F0	
00023404 F401 000E 08               		dc.b $F4, 1, 0, $E, 8	
00023409 03                         SME_N6hqJ_793:	dc.b 3	
0002340A E509 0000 F0               		dc.b $E5, 9, 0, 0, $F0	
0002340F F50B 0006 F0               		dc.b $F5, $B, 0, 6, $F0	
00023414 ED03 0012 08               		dc.b $ED, 3, 0, $12, 8	
00023419 03                         SME_N6hqJ_7A3:	dc.b 3	
0002341A E405 0000 F8               		dc.b $E4, 5, 0, 0, $F8	
0002341F F40B 0004 F0               		dc.b $F4, $B, 0, 4, $F0	
00023424 F401 0010 08               		dc.b $F4, 1, 0, $10, 8	
00023429 02                         SME_N6hqJ_7B3:	dc.b 2	
0002342A ED0B 0000 F0               		dc.b $ED, $B, 0, 0, $F0	
0002342F F501 000C 08               		dc.b $F5, 1, 0, $C, 8	
00023434 02                         SME_N6hqJ_7BE:	dc.b 2	
00023435 F401 0000 F0               		dc.b $F4, 1, 0, 0, $F0	
0002343A F10B 0002 F8               		dc.b $F1, $B, 0, 2, $F8	
0002343F 03                         SME_N6hqJ_7C9:	dc.b 3	
00023440 E405 0000 F1               		dc.b $E4, 5, 0, 0, $F1	
00023445 F40B 0004 F0               		dc.b $F4, $B, 0, 4, $F0	
0002344A F401 0010 08               		dc.b $F4, 1, 0, $10, 8	
0002344F 02                         SME_N6hqJ_7D9:	dc.b 2	
00023450 E105 0000 F0               		dc.b $E1, 5, 0, 0, $F0	
00023455 F10F 0004 F0               		dc.b $F1, $F, 0, 4, $F0	
0002345A 03                         SME_N6hqJ_7E4:	dc.b 3	
0002345B E807 0000 F0               		dc.b $E8, 7, 0, 0, $F0	
00023460 E003 0008 00               		dc.b $E0, 3, 0, 8, 0	
00023465 0009 000C 00               		dc.b 0, 9, 0, $C, 0	
0002346A 03                         SME_N6hqJ_7F4:	dc.b 3	
0002346B E807 0000 F0               		dc.b $E8, 7, 0, 0, $F0	
00023470 E003 0008 00               		dc.b $E0, 3, 0, 8, 0	
00023475 0009 000C 00               		dc.b 0, 9, 0, $C, 0	
0002347A 01                         SME_N6hqJ_804:	dc.b 1	
0002347B F00B 0000 F5               		dc.b $F0, $B, 0, 0, $F5	
00023480 03                         SME_N6hqJ_80A:	dc.b 3	
00023481 E60B 0000 F0               		dc.b $E6, $B, 0, 0, $F0	
00023486 EE01 000C 08               		dc.b $EE, 1, 0, $C, 8	
0002348B 0609 000E F0               		dc.b 6, 9, 0, $E, $F0	
00023490 03                         SME_N6hqJ_81A:	dc.b 3	
00023491 E40A 0000 F0               		dc.b $E4, $A, 0, 0, $F0	
00023496 FC00 0009 08               		dc.b $FC, 0, 0, 9, 8	
0002349B FC0A 000A F0               		dc.b $FC, $A, 0, $A, $F0	
000234A0 05                         SME_N6hqJ_82A:	dc.b 5	
000234A1 E408 0000 F0               		dc.b $E4, 8, 0, 0, $F0	
000234A6 EC01 0003 F0               		dc.b $EC, 1, 0, 3, $F0	
000234AB EC05 0005 F8               		dc.b $EC, 5, 0, 5, $F8	
000234B0 FC0A 0009 F0               		dc.b $FC, $A, 0, 9, $F0	
000234B5 FD00 0012 08               		dc.b $FD, 0, 0, $12, 8	
000234BA 05                         SME_N6hqJ_844:	dc.b 5	
000234BB E408 0000 F0               		dc.b $E4, 8, 0, 0, $F0	
000234C0 EC01 0003 F0               		dc.b $EC, 1, 0, 3, $F0	
000234C5 EC05 0005 F8               		dc.b $EC, 5, 0, 5, $F8	
000234CA FC0A 0009 F0               		dc.b $FC, $A, 0, 9, $F0	
000234CF FD00 0012 08               		dc.b $FD, 0, 0, $12, 8	
000234D4 02                         SME_N6hqJ_85E:	dc.b 2	
000234D5 E70A 0000 F1               		dc.b $E7, $A, 0, 0, $F1	
000234DA FF0A 0009 F3               		dc.b $FF, $A, 0, 9, $F3	
000234DF 02                         SME_N6hqJ_869:	dc.b 2	
000234E0 E70A 0000 F1               		dc.b $E7, $A, 0, 0, $F1	
000234E5 FF0A 0009 F3               		dc.b $FF, $A, 0, 9, $F3	
000234EA 02                         SME_N6hqJ_874:	dc.b 2	
000234EB E70A 0000 F1               		dc.b $E7, $A, 0, 0, $F1	
000234F0 FF0A 0009 F3               		dc.b $FF, $A, 0, 9, $F3	
000234F5 03                         SME_N6hqJ_87F:	dc.b 3	
000234F6 E30E 0000 EE               		dc.b $E3, $E, 0, 0, $EE	
000234FB 0301 000C EC               		dc.b 3, 1, 0, $C, $EC	
00023500 FB0F 000E F4               		dc.b $FB, $F, 0, $E, $F4	
00023505 04                         SME_N6hqJ_88F:	dc.b 4	
00023506 E40E 0000 EE               		dc.b $E4, $E, 0, 0, $EE	
0002350B 0401 000C EC               		dc.b 4, 1, 0, $C, $EC	
00023510 FC0B 000E F4               		dc.b $FC, $B, 0, $E, $F4	
00023515 0401 001A 0C               		dc.b 4, 1, 0, $1A, $C	
0002351A 03                         SME_N6hqJ_8A4:	dc.b 3	
0002351B E50E 0000 ED               		dc.b $E5, $E, 0, 0, $ED	
00023520 FD09 000C F4               		dc.b $FD, 9, 0, $C, $F4	
00023525 0D05 0012 F7               		dc.b $D, 5, 0, $12, $F7	
0002352A 02                         SME_N6hqJ_8B4:	dc.b 2	
0002352B E40A 0000 F4               		dc.b $E4, $A, 0, 0, $F4	
00023530 FC0F 0009 EE               		dc.b $FC, $F, 0, 9, $EE	
00023535 03                         SME_N6hqJ_8BF:	dc.b 3	
00023536 E30A 0000 F4               		dc.b $E3, $A, 0, 0, $F4	
0002353B FB0F 0009 EE               		dc.b $FB, $F, 0, 9, $EE	
00023540 FB01 0019 0E               		dc.b $FB, 1, 0, $19, $E	
00023545 04                         SME_N6hqJ_8CF:	dc.b 4	
00023546 E40A 0000 F4               		dc.b $E4, $A, 0, 0, $F4	
0002354B 0401 0009 EC               		dc.b 4, 1, 0, 9, $EC	
00023550 FC0B 000B F4               		dc.b $FC, $B, 0, $B, $F4	
00023555 0401 0017 0C               		dc.b 4, 1, 0, $17, $C	
0002355A 03                         SME_N6hqJ_8E4:	dc.b 3	
0002355B E50E 0000 ED               		dc.b $E5, $E, 0, 0, $ED	
00023560 FD09 000C F4               		dc.b $FD, 9, 0, $C, $F4	
00023565 0D05 0012 F7               		dc.b $D, 5, 0, $12, $F7	
0002356A 02                         SME_N6hqJ_8F4:	dc.b 2	
0002356B E40E 0000 EE               		dc.b $E4, $E, 0, 0, $EE	
00023570 FC0B 000C F3               		dc.b $FC, $B, 0, $C, $F3	
00023575 04                         SME_N6hqJ_8FF:	dc.b 4	
00023576 EB0D 0000 E2               		dc.b $EB, $D, 0, 0, $E2	
0002357B F305 0008 02               		dc.b $F3, 5, 0, 8, 2	
00023580 FB09 000C EA               		dc.b $FB, 9, 0, $C, $EA	
00023585 0B01 0012 FA               		dc.b $B, 1, 0, $12, $FA	
0002358A 05                         SME_N6hqJ_914:	dc.b 5	
0002358B EC0D 0000 E3               		dc.b $EC, $D, 0, 0, $E3	
00023590 EC01 0008 03               		dc.b $EC, 1, 0, 8, 3	
00023595 FC0D 000A EB               		dc.b $FC, $D, 0, $A, $EB	
0002359A FC05 0012 0B               		dc.b $FC, 5, 0, $12, $B	
0002359F 0C01 0016 FB               		dc.b $C, 1, 0, $16, $FB	
000235A4 05                         SME_N6hqJ_92E:	dc.b 5	
000235A5 ED0A 0000 E4               		dc.b $ED, $A, 0, 0, $E4	
000235AA ED03 0009 FC               		dc.b $ED, 3, 0, 9, $FC	
000235AF 0500 000D F4               		dc.b 5, 0, 0, $D, $F4	
000235B4 F501 000E 04               		dc.b $F5, 1, 0, $E, 4	
000235B9 0505 0010 04               		dc.b 5, 5, 0, $10, 4	
000235BE 05                         SME_N6hqJ_948:	dc.b 5	
000235BF E400 0000 F1               		dc.b $E4, 0, 0, 0, $F1	
000235C4 EC0D 0001 E3               		dc.b $EC, $D, 0, 1, $E3	
000235C9 EC01 0009 03               		dc.b $EC, 1, 0, 9, 3	
000235CE FC05 000B EB               		dc.b $FC, 5, 0, $B, $EB	
000235D3 FC0B 000F FB               		dc.b $FC, $B, 0, $F, $FB	
000235D8 06                         SME_N6hqJ_962:	dc.b 6	
000235D9 E300 0000 F0               		dc.b $E3, 0, 0, 0, $F0	
000235DE EB0D 0001 E2               		dc.b $EB, $D, 0, 1, $E2	
000235E3 EB01 0009 02               		dc.b $EB, 1, 0, 9, 2	
000235E8 F301 000B 0A               		dc.b $F3, 1, 0, $B, $A	
000235ED FB0D 000D EA               		dc.b $FB, $D, 0, $D, $EA	
000235F2 0B05 0015 F2               		dc.b $B, 5, 0, $15, $F2	
000235F7 06                         SME_N6hqJ_981:	dc.b 6	
000235F8 E400 0000 F1               		dc.b $E4, 0, 0, 0, $F1	
000235FD EC0D 0001 E3               		dc.b $EC, $D, 0, 1, $E3	
00023602 EC01 0009 03               		dc.b $EC, 1, 0, 9, 3	
00023607 FC0D 000B EB               		dc.b $FC, $D, 0, $B, $EB	
0002360C FA05 0013 0B               		dc.b $FA, 5, 0, $13, $B	
00023611 0C01 0017 FB               		dc.b $C, 1, 0, $17, $FB	
00023616 05                         SME_N6hqJ_9A0:	dc.b 5	
00023617 ED0A 0000 E4               		dc.b $ED, $A, 0, 0, $E4	
0002361C ED03 0009 FC               		dc.b $ED, 3, 0, 9, $FC	
00023621 0500 000D F4               		dc.b 5, 0, 0, $D, $F4	
00023626 F501 000E 04               		dc.b $F5, 1, 0, $E, 4	
0002362B 0505 0010 04               		dc.b 5, 5, 0, $10, 4	
00023630 05                         SME_N6hqJ_9BA:	dc.b 5	
00023631 EC0D 0000 E3               		dc.b $EC, $D, 0, 0, $E3	
00023636 F401 0008 03               		dc.b $F4, 1, 0, 8, 3	
0002363B FC09 000A EB               		dc.b $FC, 9, 0, $A, $EB	
00023640 0C00 0010 FB               		dc.b $C, 0, 0, $10, $FB	
00023645 0405 0011 03               		dc.b 4, 5, 0, $11, 3	
0002364A 03                         SME_N6hqJ_9D4:	dc.b 3	
0002364B F20B 0000 E3               		dc.b $F2, $B, 0, 0, $E3	
00023650 EC0B 000C FB               		dc.b $EC, $B, 0, $C, $FB	
00023655 0C05 0018 03               		dc.b $C, 5, 0, $18, 3	
0002365A 03                         SME_N6hqJ_9E4:	dc.b 3	
0002365B F20B 0000 E4               		dc.b $F2, $B, 0, 0, $E4	
00023660 EC0B 000C FC               		dc.b $EC, $B, 0, $C, $FC	
00023665 0C05 0018 04               		dc.b $C, 5, 0, $18, 4	
0002366A 03                         SME_N6hqJ_9F4:	dc.b 3	
0002366B F30B 0000 E5               		dc.b $F3, $B, 0, 0, $E5	
00023670 F403 000C FD               		dc.b $F4, 3, 0, $C, $FD	
00023675 F905 0010 05               		dc.b $F9, 5, 0, $10, 5	
0002367A 02                         SME_N6hqJ_A04:	dc.b 2	
0002367B F40A 0000 E4               		dc.b $F4, $A, 0, 0, $E4	
00023680 F20B 0009 FC               		dc.b $F2, $B, 0, 9, $FC	
00023685 03                         SME_N6hqJ_A0F:	dc.b 3	
00023686 F40A 0000 E3               		dc.b $F4, $A, 0, 0, $E3	
0002368B E305 0009 FB               		dc.b $E3, 5, 0, 9, $FB	
00023690 F30B 000D FB               		dc.b $F3, $B, 0, $D, $FB	
00023695 03                         SME_N6hqJ_A1F:	dc.b 3	
00023696 F40A 0000 E4               		dc.b $F4, $A, 0, 0, $E4	
0002369B EC0B 0009 FC               		dc.b $EC, $B, 0, 9, $FC	
000236A0 0C05 0015 04               		dc.b $C, 5, 0, $15, 4	
000236A5 03                         SME_N6hqJ_A2F:	dc.b 3	
000236A6 F30B 0000 E5               		dc.b $F3, $B, 0, 0, $E5	
000236AB F403 000C FD               		dc.b $F4, 3, 0, $C, $FD	
000236B0 F905 0010 05               		dc.b $F9, 5, 0, $10, 5	
000236B5 02                         SME_N6hqJ_A3F:	dc.b 2	
000236B6 F40B 0000 E4               		dc.b $F4, $B, 0, 0, $E4	
000236BB F20B 000C FC               		dc.b $F2, $B, 0, $C, $FC	
000236C0 04                         SME_N6hqJ_A4A:	dc.b 4	
000236C1 EE05 0000 F3               		dc.b $EE, 5, 0, 0, $F3	
000236C6 FE07 0004 EB               		dc.b $FE, 7, 0, 4, $EB	
000236CB FE0D 000C FB               		dc.b $FE, $D, 0, $C, $FB	
000236D0 0E00 0014 FB               		dc.b $E, 0, 0, $14, $FB	
000236D5 05                         SME_N6hqJ_A5F:	dc.b 5	
000236D6 DD05 0000 FC               		dc.b $DD, 5, 0, 0, $FC	
000236DB ED09 0004 F4               		dc.b $ED, 9, 0, 4, $F4	
000236E0 FD07 000A EC               		dc.b $FD, 7, 0, $A, $EC	
000236E5 FD0D 0012 FC               		dc.b $FD, $D, 0, $12, $FC	
000236EA 0D00 001A FC               		dc.b $D, 0, 0, $1A, $FC	
000236EF 04                         SME_N6hqJ_A79:	dc.b 4	
000236F0 EC0D 0000 F5               		dc.b $EC, $D, 0, 0, $F5	
000236F5 FC07 0008 ED               		dc.b $FC, 7, 0, 8, $ED	
000236FA FC05 0010 FD               		dc.b $FC, 5, 0, $10, $FD	
000236FF 0C01 0014 FD               		dc.b $C, 1, 0, $14, $FD	
00023704 04                         SME_N6hqJ_A8E:	dc.b 4	
00023705 ED0D 0000 F4               		dc.b $ED, $D, 0, 0, $F4	
0002370A FD0B 0008 E4               		dc.b $FD, $B, 0, 8, $E4	
0002370F FD09 0014 FC               		dc.b $FD, 9, 0, $14, $FC	
00023714 0D00 001A FC               		dc.b $D, 0, 0, $1A, $FC	
00023719 04                         SME_N6hqJ_AA3:	dc.b 4	
0002371A EE09 0000 F3               		dc.b $EE, 9, 0, 0, $F3	
0002371F FE0B 0006 E3               		dc.b $FE, $B, 0, 6, $E3	
00023724 FE0D 0012 FB               		dc.b $FE, $D, 0, $12, $FB	
00023729 0E00 001A FB               		dc.b $E, 0, 0, $1A, $FB	
0002372E 05                         SME_N6hqJ_AB8:	dc.b 5	
0002372F DD05 0000 FA               		dc.b $DD, 5, 0, 0, $FA	
00023734 ED09 0004 F4               		dc.b $ED, 9, 0, 4, $F4	
00023739 FD0B 000A E4               		dc.b $FD, $B, 0, $A, $E4	
0002373E FD0D 0016 FC               		dc.b $FD, $D, 0, $16, $FC	
00023743 0D00 001E FC               		dc.b $D, 0, 0, $1E, $FC	
00023748 04                         SME_N6hqJ_AD2:	dc.b 4	
00023749 EC0D 0000 F5               		dc.b $EC, $D, 0, 0, $F5	
0002374E FC07 0008 ED               		dc.b $FC, 7, 0, 8, $ED	
00023753 FC05 0010 FD               		dc.b $FC, 5, 0, $10, $FD	
00023758 0C01 0014 FD               		dc.b $C, 1, 0, $14, $FD	
0002375D 04                         SME_N6hqJ_AE7:	dc.b 4	
0002375E ED0D 0000 F4               		dc.b $ED, $D, 0, 0, $F4	
00023763 FD07 0008 EC               		dc.b $FD, 7, 0, 8, $EC	
00023768 FD09 0010 FC               		dc.b $FD, 9, 0, $10, $FC	
0002376D 0D00 0016 FC               		dc.b $D, 0, 0, $16, $FC	
00023772 03                         SME_N6hqJ_AFC:	dc.b 3	
00023773 E30E 0000 EE               		dc.b $E3, $E, 0, 0, $EE	
00023778 0301 000C EC               		dc.b 3, 1, 0, $C, $EC	
0002377D FB0F 000E F4               		dc.b $FB, $F, 0, $E, $F4	
00023782 04                         SME_N6hqJ_B0C:	dc.b 4	
00023783 E40E 0000 EE               		dc.b $E4, $E, 0, 0, $EE	
00023788 0401 000C EC               		dc.b 4, 1, 0, $C, $EC	
0002378D FC0B 000E F4               		dc.b $FC, $B, 0, $E, $F4	
00023792 0401 001A 0C               		dc.b 4, 1, 0, $1A, $C	
00023797 03                         SME_N6hqJ_B21:	dc.b 3	
00023798 E50E 0000 ED               		dc.b $E5, $E, 0, 0, $ED	
0002379D FD09 000C F4               		dc.b $FD, 9, 0, $C, $F4	
000237A2 0D05 0012 F7               		dc.b $D, 5, 0, $12, $F7	
000237A7 02                         SME_N6hqJ_B31:	dc.b 2	
000237A8 E40A 0000 F4               		dc.b $E4, $A, 0, 0, $F4	
000237AD FC0F 0009 EE               		dc.b $FC, $F, 0, 9, $EE	
000237B2 03                         SME_N6hqJ_B3C:	dc.b 3	
000237B3 E30A 0000 F4               		dc.b $E3, $A, 0, 0, $F4	
000237B8 FB0F 0009 EE               		dc.b $FB, $F, 0, 9, $EE	
000237BD FB01 0019 0E               		dc.b $FB, 1, 0, $19, $E	
000237C2 04                         SME_N6hqJ_B4C:	dc.b 4	
000237C3 E40A 0000 F4               		dc.b $E4, $A, 0, 0, $F4	
000237C8 0401 0009 EC               		dc.b 4, 1, 0, 9, $EC	
000237CD FC0B 000B F4               		dc.b $FC, $B, 0, $B, $F4	
000237D2 0401 0017 0C               		dc.b 4, 1, 0, $17, $C	
000237D7 03                         SME_N6hqJ_B61:	dc.b 3	
000237D8 E50E 0000 ED               		dc.b $E5, $E, 0, 0, $ED	
000237DD FD09 000C F4               		dc.b $FD, 9, 0, $C, $F4	
000237E2 0D05 0012 F7               		dc.b $D, 5, 0, $12, $F7	
000237E7 02                         SME_N6hqJ_B71:	dc.b 2	
000237E8 E40E 0000 EE               		dc.b $E4, $E, 0, 0, $EE	
000237ED FC0B 000C F3               		dc.b $FC, $B, 0, $C, $F3	
000237F2 05                         SME_N6hqJ_B7C:	dc.b 5	
000237F3 E304 0000 EA               		dc.b $E3, 4, 0, 0, $EA	
000237F8 EB0D 0002 E2               		dc.b $EB, $D, 0, 2, $E2	
000237FD FB09 000A EA               		dc.b $FB, 9, 0, $A, $EA	
00023802 F305 0010 02               		dc.b $F3, 5, 0, $10, 2	
00023807 0B01 0014 FA               		dc.b $B, 1, 0, $14, $FA	
0002380C 06                         SME_N6hqJ_B96:	dc.b 6	
0002380D E404 0000 EB               		dc.b $E4, 4, 0, 0, $EB	
00023812 EC0D 0002 E3               		dc.b $EC, $D, 0, 2, $E3	
00023817 EC01 000A 03               		dc.b $EC, 1, 0, $A, 3	
0002381C FC0D 000C EB               		dc.b $FC, $D, 0, $C, $EB	
00023821 FC05 0014 0B               		dc.b $FC, 5, 0, $14, $B	
00023826 0C01 0018 FB               		dc.b $C, 1, 0, $18, $FB	
0002382B 05                         SME_N6hqJ_BB5:	dc.b 5	
0002382C EB09 0000 E4               		dc.b $EB, 9, 0, 0, $E4	
00023831 FB05 0006 EC               		dc.b $FB, 5, 0, 6, $EC	
00023836 ED03 000A FC               		dc.b $ED, 3, 0, $A, $FC	
0002383B F501 000E 04               		dc.b $F5, 1, 0, $E, 4	
00023840 0505 0010 04               		dc.b 5, 5, 0, $10, 4	
00023845 05                         SME_N6hqJ_BCF:	dc.b 5	
00023846 E404 0000 EB               		dc.b $E4, 4, 0, 0, $EB	
0002384B EC0D 0002 E3               		dc.b $EC, $D, 0, 2, $E3	
00023850 EC01 000A 03               		dc.b $EC, 1, 0, $A, 3	
00023855 FC05 000C EB               		dc.b $FC, 5, 0, $C, $EB	
0002385A FC0B 0010 FB               		dc.b $FC, $B, 0, $10, $FB	
0002385F 06                         SME_N6hqJ_BE9:	dc.b 6	
00023860 E304 0000 EA               		dc.b $E3, 4, 0, 0, $EA	
00023865 EB0D 0002 E2               		dc.b $EB, $D, 0, 2, $E2	
0002386A EB01 000A 02               		dc.b $EB, 1, 0, $A, 2	
0002386F F301 000C 0A               		dc.b $F3, 1, 0, $C, $A	
00023874 FB0D 000E EA               		dc.b $FB, $D, 0, $E, $EA	
00023879 0B05 0016 F2               		dc.b $B, 5, 0, $16, $F2	
0002387E 06                         SME_N6hqJ_C08:	dc.b 6	
0002387F E404 0000 EB               		dc.b $E4, 4, 0, 0, $EB	
00023884 EC0D 0002 E3               		dc.b $EC, $D, 0, 2, $E3	
00023889 EC01 000A 03               		dc.b $EC, 1, 0, $A, 3	
0002388E FC0D 000C EB               		dc.b $FC, $D, 0, $C, $EB	
00023893 FA05 0014 0B               		dc.b $FA, 5, 0, $14, $B	
00023898 0C01 0018 FB               		dc.b $C, 1, 0, $18, $FB	
0002389D 05                         SME_N6hqJ_C27:	dc.b 5	
0002389E EB09 0000 E4               		dc.b $EB, 9, 0, 0, $E4	
000238A3 FB05 0006 EC               		dc.b $FB, 5, 0, 6, $EC	
000238A8 ED03 000A FC               		dc.b $ED, 3, 0, $A, $FC	
000238AD F501 000E 04               		dc.b $F5, 1, 0, $E, 4	
000238B2 0505 0010 04               		dc.b 5, 5, 0, $10, 4	
000238B7 06                         SME_N6hqJ_C41:	dc.b 6	
000238B8 E404 0000 EB               		dc.b $E4, 4, 0, 0, $EB	
000238BD EC0D 0002 E3               		dc.b $EC, $D, 0, 2, $E3	
000238C2 FC09 000A EB               		dc.b $FC, 9, 0, $A, $EB	
000238C7 F401 0010 03               		dc.b $F4, 1, 0, $10, 3	
000238CC 0405 0012 03               		dc.b 4, 5, 0, $12, 3	
000238D1 0C01 0016 FB               		dc.b $C, 1, 0, $16, $FB	
000238D6 03                         SME_N6hqJ_C60:	dc.b 3	
000238D7 F20B 0000 E3               		dc.b $F2, $B, 0, 0, $E3	
000238DC EC0B 000C FB               		dc.b $EC, $B, 0, $C, $FB	
000238E1 0C05 0018 03               		dc.b $C, 5, 0, $18, 3	
000238E6 03                         SME_N6hqJ_C70:	dc.b 3	
000238E7 F20B 0000 E4               		dc.b $F2, $B, 0, 0, $E4	
000238EC EC0B 000C FC               		dc.b $EC, $B, 0, $C, $FC	
000238F1 0C05 0018 04               		dc.b $C, 5, 0, $18, 4	
000238F6 03                         SME_N6hqJ_C80:	dc.b 3	
000238F7 F30B 0000 E5               		dc.b $F3, $B, 0, 0, $E5	
000238FC F403 000C FD               		dc.b $F4, 3, 0, $C, $FD	
00023901 F905 0010 05               		dc.b $F9, 5, 0, $10, 5	
00023906 02                         SME_N6hqJ_C90:	dc.b 2	
00023907 F40A 0000 E4               		dc.b $F4, $A, 0, 0, $E4	
0002390C F20B 0009 FC               		dc.b $F2, $B, 0, 9, $FC	
00023911 03                         SME_N6hqJ_C9B:	dc.b 3	
00023912 F40A 0000 E3               		dc.b $F4, $A, 0, 0, $E3	
00023917 E305 0009 FB               		dc.b $E3, 5, 0, 9, $FB	
0002391C F30B 000D FB               		dc.b $F3, $B, 0, $D, $FB	
00023921 03                         SME_N6hqJ_CAB:	dc.b 3	
00023922 F40A 0000 E4               		dc.b $F4, $A, 0, 0, $E4	
00023927 EC0B 0009 FC               		dc.b $EC, $B, 0, 9, $FC	
0002392C 0C05 0015 04               		dc.b $C, 5, 0, $15, 4	
00023931 03                         SME_N6hqJ_CBB:	dc.b 3	
00023932 F30B 0000 E5               		dc.b $F3, $B, 0, 0, $E5	
00023937 F403 000C FD               		dc.b $F4, 3, 0, $C, $FD	
0002393C F905 0010 05               		dc.b $F9, 5, 0, $10, 5	
00023941 02                         SME_N6hqJ_CCB:	dc.b 2	
00023942 F20B 0000 E4               		dc.b $F2, $B, 0, 0, $E4	
00023947 F40B 000C FC               		dc.b $F4, $B, 0, $C, $FC	
0002394C 04                         SME_N6hqJ_CD6:	dc.b 4	
0002394D EE05 0000 F3               		dc.b $EE, 5, 0, 0, $F3	
00023952 FE0B 0004 E3               		dc.b $FE, $B, 0, 4, $E3	
00023957 FE0D 0010 FB               		dc.b $FE, $D, 0, $10, $FB	
0002395C 0E00 0018 FB               		dc.b $E, 0, 0, $18, $FB	
00023961 05                         SME_N6hqJ_CEB:	dc.b 5	
00023962 DD05 0000 FC               		dc.b $DD, 5, 0, 0, $FC	
00023967 ED09 0004 F4               		dc.b $ED, 9, 0, 4, $F4	
0002396C FD0B 000A E4               		dc.b $FD, $B, 0, $A, $E4	
00023971 FD0D 0016 FC               		dc.b $FD, $D, 0, $16, $FC	
00023976 0D00 001E FC               		dc.b $D, 0, 0, $1E, $FC	
0002397B 05                         SME_N6hqJ_D05:	dc.b 5	
0002397C EC0D 0000 F5               		dc.b $EC, $D, 0, 0, $F5	
00023981 0401 0008 E5               		dc.b 4, 1, 0, 8, $E5	
00023986 FC07 000A ED               		dc.b $FC, 7, 0, $A, $ED	
0002398B FC05 0012 FD               		dc.b $FC, 5, 0, $12, $FD	
00023990 0C00 0016 FD               		dc.b $C, 0, 0, $16, $FD	
00023995 04                         SME_N6hqJ_D1F:	dc.b 4	
00023996 ED0D 0000 F4               		dc.b $ED, $D, 0, 0, $F4	
0002399B FD0B 0008 E4               		dc.b $FD, $B, 0, 8, $E4	
000239A0 FD09 0014 FC               		dc.b $FD, 9, 0, $14, $FC	
000239A5 0D00 001A FC               		dc.b $D, 0, 0, $1A, $FC	
000239AA 04                         SME_N6hqJ_D34:	dc.b 4	
000239AB EE09 0000 F3               		dc.b $EE, 9, 0, 0, $F3	
000239B0 FE0B 0006 E3               		dc.b $FE, $B, 0, 6, $E3	
000239B5 FE0D 0012 FB               		dc.b $FE, $D, 0, $12, $FB	
000239BA 0E00 001A FB               		dc.b $E, 0, 0, $1A, $FB	
000239BF 05                         SME_N6hqJ_D49:	dc.b 5	
000239C0 DD05 0000 FA               		dc.b $DD, 5, 0, 0, $FA	
000239C5 ED09 0004 F4               		dc.b $ED, 9, 0, 4, $F4	
000239CA FD0B 000A E4               		dc.b $FD, $B, 0, $A, $E4	
000239CF FD0D 0016 FC               		dc.b $FD, $D, 0, $16, $FC	
000239D4 0D00 001E FC               		dc.b $D, 0, 0, $1E, $FC	
000239D9 05                         SME_N6hqJ_D63:	dc.b 5	
000239DA EC0D 0000 F5               		dc.b $EC, $D, 0, 0, $F5	
000239DF 0401 0008 E5               		dc.b 4, 1, 0, 8, $E5	
000239E4 FC07 000A ED               		dc.b $FC, 7, 0, $A, $ED	
000239E9 FC05 0012 FD               		dc.b $FC, 5, 0, $12, $FD	
000239EE 0C00 0016 FD               		dc.b $C, 0, 0, $16, $FD	
000239F3 05                         SME_N6hqJ_D7D:	dc.b 5	
000239F4 ED0D 0000 F4               		dc.b $ED, $D, 0, 0, $F4	
000239F9 0501 0008 E4               		dc.b 5, 1, 0, 8, $E4	
000239FE FD07 000A EC               		dc.b $FD, 7, 0, $A, $EC	
00023A03 FD09 0012 FC               		dc.b $FD, 9, 0, $12, $FC	
00023A08 0D00 0018 FC               		dc.b $D, 0, 0, $18, $FC	
00023A0D 04                         SME_N6hqJ_D97:	dc.b 4	
00023A0E F008 0000 FC               		dc.b $F0, 8, 0, 0, $FC	
00023A13 F800 0003 FC               		dc.b $F8, 0, 0, 3, $FC	
00023A18 F805 0004 04               		dc.b $F8, 5, 0, 4, 4	
00023A1D 0009 0008 EC               		dc.b 0, 9, 0, 8, $EC	
00023A22 04                         SME_N6hqJ_DAC:	dc.b 4	
00023A23 E604 0000 FA               		dc.b $E6, 4, 0, 0, $FA	
00023A28 EE0B 0002 F2               		dc.b $EE, $B, 0, 2, $F2	
00023A2D EE02 000E 0A               		dc.b $EE, 2, 0, $E, $A	
00023A32 0E04 0011 FA               		dc.b $E, 4, 0, $11, $FA	
00023A37 04                         SME_N6hqJ_DC1:	dc.b 4	
00023A38 EC02 0000 F0               		dc.b $EC, 2, 0, 0, $F0	
00023A3D EC05 0003 F8               		dc.b $EC, 5, 0, 3, $F8	
00023A42 FC08 0007 F8               		dc.b $FC, 8, 0, 7, $F8	
00023A47 0405 000A 00               		dc.b 4, 5, 0, $A, 0	
00023A4C 05                         SME_N6hqJ_DD6:	dc.b 5	
00023A4D EE08 0000 EE               		dc.b $EE, 8, 0, 0, $EE	
00023A52 F60D 0003 E6               		dc.b $F6, $D, 0, 3, $E6	
00023A57 F605 000B 06               		dc.b $F6, 5, 0, $B, 6	
00023A5C 0604 000F EE               		dc.b 6, 4, 0, $F, $EE	
00023A61 0600 0011 06               		dc.b 6, 0, 0, $11, 6	
00023A66 04                         SME_N6hqJ_DF0:	dc.b 4	
00023A67 E809 0000 FC               		dc.b $E8, 9, 0, 0, $FC	
00023A6C F800 0006 FC               		dc.b $F8, 0, 0, 6, $FC	
00023A71 F805 0007 04               		dc.b $F8, 5, 0, 7, 4	
00023A76 0009 000B EC               		dc.b 0, 9, 0, $B, $EC	
00023A7B 04                         SME_N6hqJ_E05:	dc.b 4	
00023A7C E604 0000 FA               		dc.b $E6, 4, 0, 0, $FA	
00023A81 EE0B 0002 F2               		dc.b $EE, $B, 0, 2, $F2	
00023A86 EE02 000E 0A               		dc.b $EE, 2, 0, $E, $A	
00023A8B 0E00 0011 FA               		dc.b $E, 0, 0, $11, $FA	
00023A90 04                         SME_N6hqJ_E1A:	dc.b 4	
00023A91 EC06 0000 E8               		dc.b $EC, 6, 0, 0, $E8	
00023A96 EC05 0006 F8               		dc.b $EC, 5, 0, 6, $F8	
00023A9B FC00 000A F8               		dc.b $FC, 0, 0, $A, $F8	
00023AA0 FC06 000B 00               		dc.b $FC, 6, 0, $B, 0	
00023AA5 05                         SME_N6hqJ_E2F:	dc.b 5	
00023AA6 EE08 0000 EE               		dc.b $EE, 8, 0, 0, $EE	
00023AAB F60D 0003 E6               		dc.b $F6, $D, 0, 3, $E6	
00023AB0 F605 000B 06               		dc.b $F6, 5, 0, $B, 6	
00023AB5 0604 000F EE               		dc.b 6, 4, 0, $F, $EE	
00023ABA 0600 0011 06               		dc.b 6, 0, 0, $11, 6	
00023ABF 04                         SME_N6hqJ_E49:	dc.b 4	
00023AC0 E509 0000 EE               		dc.b $E5, 9, 0, 0, $EE	
00023AC5 F505 0006 EB               		dc.b $F5, 5, 0, 6, $EB	
00023ACA F505 000A FB               		dc.b $F5, 5, 0, $A, $FB	
00023ACF 050D 000E EB               		dc.b 5, $D, 0, $E, $EB	
00023AD4 04                         SME_N6hqJ_E5E:	dc.b 4	
00023AD5 E409 0000 EE               		dc.b $E4, 9, 0, 0, $EE	
00023ADA F405 0006 EB               		dc.b $F4, 5, 0, 6, $EB	
00023ADF F405 000A FB               		dc.b $F4, 5, 0, $A, $FB	
00023AE4 040D 000E EB               		dc.b 4, $D, 0, $E, $EB	
00023AE9 04                         SME_N6hqJ_E73:	dc.b 4	
00023AEA E509 0000 EE               		dc.b $E5, 9, 0, 0, $EE	
00023AEF F505 0006 EB               		dc.b $F5, 5, 0, 6, $EB	
00023AF4 F505 000A FB               		dc.b $F5, 5, 0, $A, $FB	
00023AF9 050D 000E EB               		dc.b 5, $D, 0, $E, $EB	
00023AFE 04                         SME_N6hqJ_E88:	dc.b 4	
00023AFF E409 0000 EE               		dc.b $E4, 9, 0, 0, $EE	
00023B04 F405 0006 EB               		dc.b $F4, 5, 0, 6, $EB	
00023B09 F405 000A FB               		dc.b $F4, 5, 0, $A, $FB	
00023B0E 040D 000E EB               		dc.b 4, $D, 0, $E, $EB	
00023B13 02                         SME_N6hqJ_E9D:	dc.b 2	
00023B14 FC02 0000 F0               		dc.b $FC, 2, 0, 0, $F0	
00023B19 F40B 0003 F8               		dc.b $F4, $B, 0, 3, $F8	
00023B1E 03                         SME_N6hqJ_EA8:	dc.b 3	
00023B1F E40A 0000 EC               		dc.b $E4, $A, 0, 0, $EC	
00023B24 FC08 0009 EC               		dc.b $FC, 8, 0, 9, $EC	
00023B29 0405 000C F1               		dc.b 4, 5, 0, $C, $F1	
00023B2E 03                         SME_N6hqJ_EB8:	dc.b 3	
00023B2F E40A 0000 EC               		dc.b $E4, $A, 0, 0, $EC	
00023B34 FC08 0009 EC               		dc.b $FC, 8, 0, 9, $EC	
00023B39 0405 000C F1               		dc.b 4, 5, 0, $C, $F1	
00023B3E 03                         SME_N6hqJ_EC8:	dc.b 3	
00023B3F E40A 0000 EC               		dc.b $E4, $A, 0, 0, $EC	
00023B44 FC08 0009 EC               		dc.b $FC, 8, 0, 9, $EC	
00023B49 0405 000C F1               		dc.b 4, 5, 0, $C, $F1	
00023B4E 03                         SME_N6hqJ_ED8:	dc.b 3	
00023B4F E50A 0000 ED               		dc.b $E5, $A, 0, 0, $ED	
00023B54 FD08 0009 ED               		dc.b $FD, 8, 0, 9, $ED	
00023B59 0505 000C F1               		dc.b 5, 5, 0, $C, $F1	
00023B5E 03                         SME_N6hqJ_EE8:	dc.b 3	
00023B5F E50A 0000 ED               		dc.b $E5, $A, 0, 0, $ED	
00023B64 FD08 0009 ED               		dc.b $FD, 8, 0, 9, $ED	
00023B69 0505 000C F1               		dc.b 5, 5, 0, $C, $F1	
00023B6E 03                         SME_N6hqJ_EF8:	dc.b 3	
00023B6F E50A 0000 ED               		dc.b $E5, $A, 0, 0, $ED	
00023B74 FD08 0009 ED               		dc.b $FD, 8, 0, 9, $ED	
00023B79 0505 000C F1               		dc.b 5, 5, 0, $C, $F1	
00023B7E 03                         SME_N6hqJ_F08:	dc.b 3	
00023B7F EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00023B84 EC03 000C 08               		dc.b $EC, 3, 0, $C, 8	
00023B89 0C05 0010 F1               		dc.b $C, 5, 0, $10, $F1	
00023B8E 03                         SME_N6hqJ_F18:	dc.b 3	
00023B8F EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00023B94 EC03 000C 08               		dc.b $EC, 3, 0, $C, 8	
00023B99 0C05 0010 F1               		dc.b $C, 5, 0, $10, $F1	
00023B9E 03                         SME_N6hqJ_F28:	dc.b 3	
00023B9F EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00023BA4 EC03 000C 08               		dc.b $EC, 3, 0, $C, 8	
00023BA9 0C05 0010 F1               		dc.b $C, 5, 0, $10, $F1	
00023BAE 05                         SME_N6hqJ_F38:	dc.b 5	
00023BAF EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
00023BB4 EC01 000C 08               		dc.b $EC, 1, 0, $C, 8	
00023BB9 EC01 000E 10               		dc.b $EC, 1, 0, $E, $10	
00023BBE FC01 0010 08               		dc.b $FC, 1, 0, $10, 8	
00023BC3 0C05 0012 F1               		dc.b $C, 5, 0, $12, $F1	
00023BC8 04                         SME_N6hqJ_F52:	dc.b 4	
00023BC9 EC07 0000 EB               		dc.b $EC, 7, 0, 0, $EB	
00023BCE EC09 0008 FB               		dc.b $EC, 9, 0, 8, $FB	
00023BD3 FC05 000E FB               		dc.b $FC, 5, 0, $E, $FB	
00023BD8 0C09 0012 EE               		dc.b $C, 9, 0, $12, $EE	
00023BDD 04                         SME_N6hqJ_F67:	dc.b 4	
00023BDE EC07 0000 EC               		dc.b $EC, 7, 0, 0, $EC	
00023BE3 EC09 0008 FC               		dc.b $EC, 9, 0, 8, $FC	
00023BE8 FC05 000E FC               		dc.b $FC, 5, 0, $E, $FC	
00023BED 0C09 0012 EF               		dc.b $C, 9, 0, $12, $EF	
00023BF2 04                         SME_N6hqJ_F7C:	dc.b 4	
00023BF3 EC07 0000 EC               		dc.b $EC, 7, 0, 0, $EC	
00023BF8 EC09 0008 FC               		dc.b $EC, 9, 0, 8, $FC	
00023BFD FC09 000E FC               		dc.b $FC, 9, 0, $E, $FC	
00023C02 0C09 0014 F0               		dc.b $C, 9, 0, $14, $F0	
00023C07 03                         SME_N6hqJ_F91:	dc.b 3	
00023C08 F403 0000 E8               		dc.b $F4, 3, 0, 0, $E8	
00023C0D EC0B 0004 F0               		dc.b $EC, $B, 0, 4, $F0	
00023C12 0C05 0010 F0               		dc.b $C, 5, 0, $10, $F0	
00023C17 03                         SME_N6hqJ_FA1:	dc.b 3	
00023C18 F403 0800 0C               		dc.b $F4, 3, 8, 0, $C	
00023C1D EC0B 0804 F4               		dc.b $EC, $B, 8, 4, $F4	
00023C22 0C05 0810 FC               		dc.b $C, 5, 8, $10, $FC	
00023C27 03                         SME_N6hqJ_FB1:	dc.b 3	
00023C28 F403 0800 0C               		dc.b $F4, 3, 8, 0, $C	
00023C2D EC0B 0804 F4               		dc.b $EC, $B, 8, 4, $F4	
00023C32 0C05 0810 FC               		dc.b $C, 5, 8, $10, $FC	
00023C37 04                         SME_N6hqJ_FC1:	dc.b 4	
00023C38 EC0D 0000 ED               		dc.b $EC, $D, 0, 0, $ED	
00023C3D FC0D 0008 EF               		dc.b $FC, $D, 0, 8, $EF	
00023C42 FC01 0010 0F               		dc.b $FC, 1, 0, $10, $F	
00023C47 0C05 0012 01               		dc.b $C, 5, 0, $12, 1	
00023C4C 04                         SME_N6hqJ_FD6:	dc.b 4	
00023C4D EC0D 0000 EE               		dc.b $EC, $D, 0, 0, $EE	
00023C52 FC0D 0008 EF               		dc.b $FC, $D, 0, 8, $EF	
00023C57 FC01 0010 0F               		dc.b $FC, 1, 0, $10, $F	
00023C5C 0C05 0012 01               		dc.b $C, 5, 0, $12, 1	
00023C61 04                         SME_N6hqJ_FEB:	dc.b 4	
00023C62 EC0D 0000 EF               		dc.b $EC, $D, 0, 0, $EF	
00023C67 FC0D 0008 EF               		dc.b $FC, $D, 0, 8, $EF	
00023C6C FC01 0010 0F               		dc.b $FC, 1, 0, $10, $F	
00023C71 0C05 0012 01               		dc.b $C, 5, 0, $12, 1	
00023C76 02                         SME_N6hqJ_1000:	dc.b 2	
00023C77 EC09 0000 F4               		dc.b $EC, 9, 0, 0, $F4	
00023C7C FC0B 0006 F7               		dc.b $FC, $B, 0, 6, $F7	
00023C82 00                         		even
00023C82 00                         		even
00023C82                            
00023C82                            ; ---------------------------------------------------------------------------
00023C82                            ; Uncompressed graphics	loading	array for Sonic
00023C82                            ; ---------------------------------------------------------------------------
00023C82                            SonicDynPLC:
00023C82                            	include "_inc\Sonic dynamic pattern load cues.asm"
00023C82                            ; --------------------------------------------------------------------------------
00023C82                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00023C82                            
00023C82                            SME_QQU6s:	
00023C82 0000 0000                  		dc.w SME_QQU6s_1AC-SME_QQU6s, SME_QQU6s_1AD-SME_QQU6s	
00023C86 0000 0000                  		dc.w SME_QQU6s_1B6-SME_QQU6s, SME_QQU6s_1BB-SME_QQU6s	
00023C8A 0000 0000                  		dc.w SME_QQU6s_1C4-SME_QQU6s, SME_QQU6s_1CD-SME_QQU6s	
00023C8E 0000 0000                  		dc.w SME_QQU6s_1D8-SME_QQU6s, SME_QQU6s_1DF-SME_QQU6s	
00023C92 0000 0000                  		dc.w SME_QQU6s_1E4-SME_QQU6s, SME_QQU6s_1E9-SME_QQU6s	
00023C96 0000 0000                  		dc.w SME_QQU6s_1EE-SME_QQU6s, SME_QQU6s_1F3-SME_QQU6s	
00023C9A 0000 0000                  		dc.w SME_QQU6s_1FC-SME_QQU6s, SME_QQU6s_205-SME_QQU6s	
00023C9E 0000 0000                  		dc.w SME_QQU6s_20C-SME_QQU6s, SME_QQU6s_215-SME_QQU6s	
00023CA2 0000 0000                  		dc.w SME_QQU6s_21C-SME_QQU6s, SME_QQU6s_221-SME_QQU6s	
00023CA6 0000 0000                  		dc.w SME_QQU6s_228-SME_QQU6s, SME_QQU6s_231-SME_QQU6s	
00023CAA 0000 0000                  		dc.w SME_QQU6s_238-SME_QQU6s, SME_QQU6s_23D-SME_QQU6s	
00023CAE 0000 0000                  		dc.w SME_QQU6s_246-SME_QQU6s, SME_QQU6s_251-SME_QQU6s	
00023CB2 0000 0000                  		dc.w SME_QQU6s_25A-SME_QQU6s, SME_QQU6s_263-SME_QQU6s	
00023CB6 0000 0000                  		dc.w SME_QQU6s_26E-SME_QQU6s, SME_QQU6s_279-SME_QQU6s	
00023CBA 0000 0000                  		dc.w SME_QQU6s_282-SME_QQU6s, SME_QQU6s_28D-SME_QQU6s	
00023CBE 0000 0000                  		dc.w SME_QQU6s_294-SME_QQU6s, SME_QQU6s_29B-SME_QQU6s	
00023CC2 0000 0000                  		dc.w SME_QQU6s_2A2-SME_QQU6s, SME_QQU6s_2A7-SME_QQU6s	
00023CC6 0000 0000                  		dc.w SME_QQU6s_2AE-SME_QQU6s, SME_QQU6s_2B5-SME_QQU6s	
00023CCA 0000 0000                  		dc.w SME_QQU6s_2BC-SME_QQU6s, SME_QQU6s_2C1-SME_QQU6s	
00023CCE 0000 0000                  		dc.w SME_QQU6s_2CA-SME_QQU6s, SME_QQU6s_2D5-SME_QQU6s	
00023CD2 0000 0000                  		dc.w SME_QQU6s_2DE-SME_QQU6s, SME_QQU6s_2E7-SME_QQU6s	
00023CD6 0000 0000                  		dc.w SME_QQU6s_2F0-SME_QQU6s, SME_QQU6s_2FB-SME_QQU6s	
00023CDA 0000 0000                  		dc.w SME_QQU6s_304-SME_QQU6s, SME_QQU6s_30D-SME_QQU6s	
00023CDE 0000 0000                  		dc.w SME_QQU6s_312-SME_QQU6s, SME_QQU6s_317-SME_QQU6s	
00023CE2 0000 0000                  		dc.w SME_QQU6s_31C-SME_QQU6s, SME_QQU6s_321-SME_QQU6s	
00023CE6 0000 0000                  		dc.w SME_QQU6s_32A-SME_QQU6s, SME_QQU6s_331-SME_QQU6s	
00023CEA 0000 0000                  		dc.w SME_QQU6s_33A-SME_QQU6s, SME_QQU6s_341-SME_QQU6s	
00023CEE 0000 0000                  		dc.w SME_QQU6s_346-SME_QQU6s, SME_QQU6s_34B-SME_QQU6s	
00023CF2 0000 0000                  		dc.w SME_QQU6s_350-SME_QQU6s, SME_QQU6s_355-SME_QQU6s	
00023CF6 0000 0000                  		dc.w SME_QQU6s_35C-SME_QQU6s, SME_QQU6s_361-SME_QQU6s	
00023CFA 0000 0000                  		dc.w SME_QQU6s_368-SME_QQU6s, SME_QQU6s_36D-SME_QQU6s	
00023CFE 0000 0000                  		dc.w SME_QQU6s_370-SME_QQU6s, SME_QQU6s_373-SME_QQU6s	
00023D02 0000 0000                  		dc.w SME_QQU6s_376-SME_QQU6s, SME_QQU6s_379-SME_QQU6s	
00023D06 0000 0000                  		dc.w SME_QQU6s_37C-SME_QQU6s, SME_QQU6s_37F-SME_QQU6s	
00023D0A 0000 0000                  		dc.w SME_QQU6s_382-SME_QQU6s, SME_QQU6s_385-SME_QQU6s	
00023D0E 0000 0000                  		dc.w SME_QQU6s_388-SME_QQU6s, SME_QQU6s_38B-SME_QQU6s	
00023D12 0000 0000                  		dc.w SME_QQU6s_38E-SME_QQU6s, SME_QQU6s_395-SME_QQU6s	
00023D16 0000 0000                  		dc.w SME_QQU6s_39C-SME_QQU6s, SME_QQU6s_3A3-SME_QQU6s	
00023D1A 0000 0000                  		dc.w SME_QQU6s_3AA-SME_QQU6s, SME_QQU6s_3AD-SME_QQU6s	
00023D1E 0000 0000                  		dc.w SME_QQU6s_3B0-SME_QQU6s, SME_QQU6s_3B5-SME_QQU6s	
00023D22 0000 0000                  		dc.w SME_QQU6s_3BA-SME_QQU6s, SME_QQU6s_3C1-SME_QQU6s	
00023D26 0000 0000                  		dc.w SME_QQU6s_3C8-SME_QQU6s, SME_QQU6s_3CD-SME_QQU6s	
00023D2A 0000 0000                  		dc.w SME_QQU6s_3D2-SME_QQU6s, SME_QQU6s_3D9-SME_QQU6s	
00023D2E 0000 0000                  		dc.w SME_QQU6s_3DE-SME_QQU6s, SME_QQU6s_3E5-SME_QQU6s	
00023D32 0000 0000                  		dc.w SME_QQU6s_3EC-SME_QQU6s, SME_QQU6s_3F3-SME_QQU6s	
00023D36 0000 0000                  		dc.w SME_QQU6s_3FA-SME_QQU6s, SME_QQU6s_401-SME_QQU6s	
00023D3A 0000 0000                  		dc.w SME_QQU6s_406-SME_QQU6s, SME_QQU6s_40F-SME_QQU6s	
00023D3E 0000 0000                  		dc.w SME_QQU6s_418-SME_QQU6s, SME_QQU6s_41F-SME_QQU6s	
00023D42 0000 0000                  		dc.w SME_QQU6s_426-SME_QQU6s, SME_QQU6s_42D-SME_QQU6s	
00023D46 0000 0000                  		dc.w SME_QQU6s_432-SME_QQU6s, SME_QQU6s_435-SME_QQU6s	
00023D4A 0000 0000                  		dc.w SME_QQU6s_43A-SME_QQU6s, SME_QQU6s_441-SME_QQU6s	
00023D4E 0000 0000                  		dc.w SME_QQU6s_448-SME_QQU6s, SME_QQU6s_44F-SME_QQU6s	
00023D52 0000 0000                  		dc.w SME_QQU6s_454-SME_QQU6s, SME_QQU6s_459-SME_QQU6s	
00023D56 0000 0000                  		dc.w SME_QQU6s_460-SME_QQU6s, SME_QQU6s_465-SME_QQU6s	
00023D5A 0000 0000                  		dc.w SME_QQU6s_46C-SME_QQU6s, SME_QQU6s_473-SME_QQU6s	
00023D5E 0000 0000                  		dc.w SME_QQU6s_476-SME_QQU6s, SME_QQU6s_47D-SME_QQU6s	
00023D62 0000 0000                  		dc.w SME_QQU6s_484-SME_QQU6s, SME_QQU6s_48F-SME_QQU6s	
00023D66 0000 0000                  		dc.w SME_QQU6s_49A-SME_QQU6s, SME_QQU6s_49F-SME_QQU6s	
00023D6A 0000 0000                  		dc.w SME_QQU6s_4A4-SME_QQU6s, SME_QQU6s_4A9-SME_QQU6s	
00023D6E 0000 0000                  		dc.w SME_QQU6s_4B0-SME_QQU6s, SME_QQU6s_4B9-SME_QQU6s	
00023D72 0000 0000                  		dc.w SME_QQU6s_4C0-SME_QQU6s, SME_QQU6s_4C5-SME_QQU6s	
00023D76 0000 0000                  		dc.w SME_QQU6s_4CC-SME_QQU6s, SME_QQU6s_4D5-SME_QQU6s	
00023D7A 0000 0000                  		dc.w SME_QQU6s_4DC-SME_QQU6s, SME_QQU6s_4E1-SME_QQU6s	
00023D7E 0000 0000                  		dc.w SME_QQU6s_4EA-SME_QQU6s, SME_QQU6s_4F5-SME_QQU6s	
00023D82 0000 0000                  		dc.w SME_QQU6s_500-SME_QQU6s, SME_QQU6s_50B-SME_QQU6s	
00023D86 0000 0000                  		dc.w SME_QQU6s_518-SME_QQU6s, SME_QQU6s_525-SME_QQU6s	
00023D8A 0000 0000                  		dc.w SME_QQU6s_530-SME_QQU6s, SME_QQU6s_53B-SME_QQU6s	
00023D8E 0000 0000                  		dc.w SME_QQU6s_542-SME_QQU6s, SME_QQU6s_549-SME_QQU6s	
00023D92 0000 0000                  		dc.w SME_QQU6s_550-SME_QQU6s, SME_QQU6s_555-SME_QQU6s	
00023D96 0000 0000                  		dc.w SME_QQU6s_55C-SME_QQU6s, SME_QQU6s_563-SME_QQU6s	
00023D9A 0000 0000                  		dc.w SME_QQU6s_56A-SME_QQU6s, SME_QQU6s_56F-SME_QQU6s	
00023D9E 0000 0000                  		dc.w SME_QQU6s_578-SME_QQU6s, SME_QQU6s_583-SME_QQU6s	
00023DA2 0000 0000                  		dc.w SME_QQU6s_58C-SME_QQU6s, SME_QQU6s_595-SME_QQU6s	
00023DA6 0000 0000                  		dc.w SME_QQU6s_59E-SME_QQU6s, SME_QQU6s_5A9-SME_QQU6s	
00023DAA 0000 0000                  		dc.w SME_QQU6s_5B2-SME_QQU6s, SME_QQU6s_5BB-SME_QQU6s	
00023DAE 0000 0000                  		dc.w SME_QQU6s_5C2-SME_QQU6s, SME_QQU6s_5CB-SME_QQU6s	
00023DB2 0000 0000                  		dc.w SME_QQU6s_5D2-SME_QQU6s, SME_QQU6s_5D7-SME_QQU6s	
00023DB6 0000 0000                  		dc.w SME_QQU6s_5DE-SME_QQU6s, SME_QQU6s_5E7-SME_QQU6s	
00023DBA 0000 0000                  		dc.w SME_QQU6s_5EE-SME_QQU6s, SME_QQU6s_5F3-SME_QQU6s	
00023DBE 0000 0000                  		dc.w SME_QQU6s_5FE-SME_QQU6s, SME_QQU6s_60B-SME_QQU6s	
00023DC2 0000 0000                  		dc.w SME_QQU6s_616-SME_QQU6s, SME_QQU6s_621-SME_QQU6s	
00023DC6 0000 0000                  		dc.w SME_QQU6s_62E-SME_QQU6s, SME_QQU6s_63B-SME_QQU6s	
00023DCA 0000 0000                  		dc.w SME_QQU6s_646-SME_QQU6s, SME_QQU6s_653-SME_QQU6s	
00023DCE 0000 0000                  		dc.w SME_QQU6s_65A-SME_QQU6s, SME_QQU6s_661-SME_QQU6s	
00023DD2 0000 0000                  		dc.w SME_QQU6s_668-SME_QQU6s, SME_QQU6s_66D-SME_QQU6s	
00023DD6 0000 0000                  		dc.w SME_QQU6s_674-SME_QQU6s, SME_QQU6s_67B-SME_QQU6s	
00023DDA 0000 0000                  		dc.w SME_QQU6s_682-SME_QQU6s, SME_QQU6s_687-SME_QQU6s	
00023DDE 0000 0000                  		dc.w SME_QQU6s_690-SME_QQU6s, SME_QQU6s_69B-SME_QQU6s	
00023DE2 0000 0000                  		dc.w SME_QQU6s_6A6-SME_QQU6s, SME_QQU6s_6AF-SME_QQU6s	
00023DE6 0000 0000                  		dc.w SME_QQU6s_6B8-SME_QQU6s, SME_QQU6s_6C3-SME_QQU6s	
00023DEA 0000 0000                  		dc.w SME_QQU6s_6CE-SME_QQU6s, SME_QQU6s_6D9-SME_QQU6s	
00023DEE 0000 0000                  		dc.w SME_QQU6s_6E2-SME_QQU6s, SME_QQU6s_6EB-SME_QQU6s	
00023DF2 0000 0000                  		dc.w SME_QQU6s_6F4-SME_QQU6s, SME_QQU6s_6FF-SME_QQU6s	
00023DF6 0000 0000                  		dc.w SME_QQU6s_708-SME_QQU6s, SME_QQU6s_711-SME_QQU6s	
00023DFA 0000 0000                  		dc.w SME_QQU6s_71A-SME_QQU6s, SME_QQU6s_725-SME_QQU6s	
00023DFE 0000 0000                  		dc.w SME_QQU6s_72E-SME_QQU6s, SME_QQU6s_737-SME_QQU6s	
00023E02 0000 0000                  		dc.w SME_QQU6s_740-SME_QQU6s, SME_QQU6s_749-SME_QQU6s	
00023E06 0000 0000                  		dc.w SME_QQU6s_74E-SME_QQU6s, SME_QQU6s_755-SME_QQU6s	
00023E0A 0000 0000                  		dc.w SME_QQU6s_75C-SME_QQU6s, SME_QQU6s_763-SME_QQU6s	
00023E0E 0000 0000                  		dc.w SME_QQU6s_76A-SME_QQU6s, SME_QQU6s_771-SME_QQU6s	
00023E12 0000 0000                  		dc.w SME_QQU6s_778-SME_QQU6s, SME_QQU6s_77F-SME_QQU6s	
00023E16 0000 0000                  		dc.w SME_QQU6s_786-SME_QQU6s, SME_QQU6s_78D-SME_QQU6s	
00023E1A 0000 0000                  		dc.w SME_QQU6s_798-SME_QQU6s, SME_QQU6s_7A1-SME_QQU6s	
00023E1E 0000 0000                  		dc.w SME_QQU6s_7AA-SME_QQU6s, SME_QQU6s_7B3-SME_QQU6s	
00023E22 0000 0000                  		dc.w SME_QQU6s_7BA-SME_QQU6s, SME_QQU6s_7C1-SME_QQU6s	
00023E26 0000 0000                  		dc.w SME_QQU6s_7C8-SME_QQU6s, SME_QQU6s_7D1-SME_QQU6s	
00023E2A 0000 0000                  		dc.w SME_QQU6s_7DA-SME_QQU6s, SME_QQU6s_7E3-SME_QQU6s	
00023E2E 00                         SME_QQU6s_1AC:	dc.b 0	
00023E2F 0430 0030 0450 0850 0E     SME_QQU6s_1AD:	dc.b 4, $30, 0, $30, 4, $50, 8, $50, $E	
00023E38 02B0 1450 20               SME_QQU6s_1B6:	dc.b 2, $B0, $14, $50, $20	
00023E3D 0430 2630 2A30 2E50 32     SME_QQU6s_1BB:	dc.b 4, $30, $26, $30, $2A, $30, $2E, $50, $32	
00023E46 0430 2630 3830 2E50 32     SME_QQU6s_1C4:	dc.b 4, $30, $26, $30, $38, $30, $2E, $50, $32	
00023E4F 0530 2630 3830 2E10 3230+  SME_QQU6s_1CD:	dc.b 5, $30, $26, $30, $38, $30, $2E, $10, $32, $30, $3C	
00023E5A 0330 2670 4050 32          SME_QQU6s_1D8:	dc.b 3, $30, $26, $70, $40, $50, $32	
00023E61 02B0 4810 54               SME_QQU6s_1DF:	dc.b 2, $B0, $48, $10, $54	
00023E66 02B0 5630 62               SME_QQU6s_1E4:	dc.b 2, $B0, $56, $30, $62	
00023E6B 02B0 5630 66               SME_QQU6s_1E9:	dc.b 2, $B0, $56, $30, $66	
00023E70 02B0 6A70 76               SME_QQU6s_1EE:	dc.b 2, $B0, $6A, $70, $76	
00023E75 0430 7E30 8250 8650 0E     SME_QQU6s_1F3:	dc.b 4, $30, $7E, $30, $82, $50, $86, $50, $E	
00023E7E 0430 8C30 9030 9450 0E     SME_QQU6s_1FC:	dc.b 4, $30, $8C, $30, $90, $30, $94, $50, $E	
00023E87 0370 9810 A0F0 A2          SME_QQU6s_205:	dc.b 3, $70, $98, $10, $A0, $F0, $A2	
00023E8E 0470 9810 B2B0 B410 C0     SME_QQU6s_20C:	dc.b 4, $70, $98, $10, $B2, $B0, $B4, $10, $C0	
00023E97 0370 C250 CA30 D0          SME_QQU6s_215:	dc.b 3, $70, $C2, $50, $CA, $30, $D0	
00023E9E 0250 D4F0 DA               SME_QQU6s_21C:	dc.b 2, $50, $D4, $F0, $DA	
00023EA3 0350 D4F0 EA10 FA          SME_QQU6s_221:	dc.b 3, $50, $D4, $F0, $EA, $10, $FA	
00023EAA 0450 D410 FCB0 FE11 0A     SME_QQU6s_228:	dc.b 4, $50, $D4, $10, $FC, $B0, $FE, $11, $A	
00023EB3 0370 C251 0C31 12          SME_QQU6s_231:	dc.b 3, $70, $C2, $51, $C, $31, $12	
00023EBA 0270 98B1 16               SME_QQU6s_238:	dc.b 2, $70, $98, $B1, $16	
00023EBF 0451 2251 2831 2E11 32     SME_QQU6s_23D:	dc.b 4, $51, $22, $51, $28, $31, $2E, $11, $32	
00023EC8 0551 2211 3471 3631 3E11+  SME_QQU6s_246:	dc.b 5, $51, $22, $11, $34, $71, $36, $31, $3E, $11, $42	
00023ED3 0471 4431 4C11 5031 52     SME_QQU6s_251:	dc.b 4, $71, $44, $31, $4C, $11, $50, $31, $52	
00023EDC 0451 5611 5C31 5EB1 62     SME_QQU6s_25A:	dc.b 4, $51, $56, $11, $5C, $31, $5E, $B1, $62	
00023EE5 0551 5611 6E71 7011 7831+  SME_QQU6s_263:	dc.b 5, $51, $56, $11, $6E, $71, $70, $11, $78, $31, $7A	
00023EF0 0551 5611 7E71 8031 8811+  SME_QQU6s_26E:	dc.b 5, $51, $56, $11, $7E, $71, $80, $31, $88, $11, $8C	
00023EFB 0471 4431 8E11 9231 94     SME_QQU6s_279:	dc.b 4, $71, $44, $31, $8E, $11, $92, $31, $94	
00023F04 0551 2251 9811 9E11 A031+  SME_QQU6s_282:	dc.b 5, $51, $22, $51, $98, $11, $9E, $11, $A0, $31, $A2	
00023F0F 0371 A6B1 AE31 BA          SME_QQU6s_28D:	dc.b 3, $71, $A6, $B1, $AE, $31, $BA	
00023F16 0371 A6B1 BE31 CA          SME_QQU6s_294:	dc.b 3, $71, $A6, $B1, $BE, $31, $CA	
00023F1D 0371 CE31 D631 DA          SME_QQU6s_29B:	dc.b 3, $71, $CE, $31, $D6, $31, $DA	
00023F24 0271 DEB1 E6               SME_QQU6s_2A2:	dc.b 2, $71, $DE, $B1, $E6	
00023F29 0371 DE31 F2B1 F6          SME_QQU6s_2A7:	dc.b 3, $71, $DE, $31, $F2, $B1, $F6	
00023F30 0371 DEB2 0232 0E          SME_QQU6s_2AE:	dc.b 3, $71, $DE, $B2, 2, $32, $E	
00023F37 0371 CE32 1232 16          SME_QQU6s_2B5:	dc.b 3, $71, $CE, $32, $12, $32, $16	
00023F3E 0271 A6B2 1A               SME_QQU6s_2BC:	dc.b 2, $71, $A6, $B2, $1A	
00023F43 0432 2672 2A72 3212 3A     SME_QQU6s_2C1:	dc.b 4, $32, $26, $72, $2A, $72, $32, $12, $3A	
00023F4C 0532 3C52 4072 2A72 4612+  SME_QQU6s_2CA:	dc.b 5, $32, $3C, $52, $40, $72, $2A, $72, $46, $12, $3A	
00023F57 0472 4E72 5632 5E12 62     SME_QQU6s_2D5:	dc.b 4, $72, $4E, $72, $56, $32, $5E, $12, $62	
00023F60 0472 6472 6C52 7412 7A     SME_QQU6s_2DE:	dc.b 4, $72, $64, $72, $6C, $52, $74, $12, $7A	
00023F69 0452 7C72 6C72 8212 7A     SME_QQU6s_2E7:	dc.b 4, $52, $7C, $72, $6C, $72, $82, $12, $7A	
00023F72 0532 8A52 8E72 6C72 9412+  SME_QQU6s_2F0:	dc.b 5, $32, $8A, $52, $8E, $72, $6C, $72, $94, $12, $7A	
00023F7D 0472 9C72 5632 A412 62     SME_QQU6s_2FB:	dc.b 4, $72, $9C, $72, $56, $32, $A4, $12, $62	
00023F86 0472 A872 2A52 B012 3A     SME_QQU6s_304:	dc.b 4, $72, $A8, $72, $2A, $52, $B0, $12, $3A	
00023F8F 0252 B6F2 BC               SME_QQU6s_30D:	dc.b 2, $52, $B6, $F2, $BC	
00023F94 0252 CCF2 D2               SME_QQU6s_312:	dc.b 2, $52, $CC, $F2, $D2	
00023F99 0252 B6F2 E2               SME_QQU6s_317:	dc.b 2, $52, $B6, $F2, $E2	
00023F9E 0252 CCF2 F2               SME_QQU6s_31C:	dc.b 2, $52, $CC, $F2, $F2	
00023FA3 0453 0213 0873 0A53 12     SME_QQU6s_321:	dc.b 4, $53, 2, $13, 8, $73, $A, $53, $12	
00023FAC 0373 1873 2053 28          SME_QQU6s_32A:	dc.b 3, $73, $18, $73, $20, $53, $28	
00023FB3 0453 0213 2E73 3053 38     SME_QQU6s_331:	dc.b 4, $53, 2, $13, $2E, $73, $30, $53, $38	
00023FBC 0373 1873 3E53 46          SME_QQU6s_33A:	dc.b 3, $73, $18, $73, $3E, $53, $46	
00023FC3 0273 4CB3 54               SME_QQU6s_341:	dc.b 2, $73, $4C, $B3, $54	
00023FC8 0273 60B3 68               SME_QQU6s_346:	dc.b 2, $73, $60, $B3, $68	
00023FCD 0273 4CB3 74               SME_QQU6s_34B:	dc.b 2, $73, $4C, $B3, $74	
00023FD2 0273 60B3 80               SME_QQU6s_350:	dc.b 2, $73, $60, $B3, $80	
00023FD7 0313 8C73 8EB3 96          SME_QQU6s_355:	dc.b 3, $13, $8C, $73, $8E, $B3, $96	
00023FDE 0273 A2B3 AA               SME_QQU6s_35C:	dc.b 2, $73, $A2, $B3, $AA	
00023FE3 0313 B673 8EB3 C0          SME_QQU6s_361:	dc.b 3, $13, $B6, $73, $8E, $B3, $C0	
00023FEA 0273 A2B3 CC               SME_QQU6s_368:	dc.b 2, $73, $A2, $B3, $CC	
00023FEF 01F4 00                    SME_QQU6s_36D:	dc.b 1, $F4, 0	
00023FF2 01F4 10                    SME_QQU6s_370:	dc.b 1, $F4, $10	
00023FF5 01F4 20                    SME_QQU6s_373:	dc.b 1, $F4, $20	
00023FF8 01F4 30                    SME_QQU6s_376:	dc.b 1, $F4, $30	
00023FFB 01F4 40                    SME_QQU6s_379:	dc.b 1, $F4, $40	
00023FFE 01F4 50                    SME_QQU6s_37C:	dc.b 1, $F4, $50	
00024001 01F4 60                    SME_QQU6s_37F:	dc.b 1, $F4, $60	
00024004 01F4 70                    SME_QQU6s_382:	dc.b 1, $F4, $70	
00024007 01F4 80                    SME_QQU6s_385:	dc.b 1, $F4, $80	
0002400A 01F4 90                    SME_QQU6s_388:	dc.b 1, $F4, $90	
0002400D 01F4 A0                    SME_QQU6s_38B:	dc.b 1, $F4, $A0	
00024010 0353 D853 DE73 E4          SME_QQU6s_38E:	dc.b 3, $53, $D8, $53, $DE, $73, $E4	
00024017 0353 D853 EC53 F2          SME_QQU6s_395:	dc.b 3, $53, $D8, $53, $EC, $53, $F2	
0002401E 0353 D853 DE73 B8          SME_QQU6s_39C:	dc.b 3, $53, $D8, $53, $DE, $73, $B8	
00024025 0353 D853 EC54 B0          SME_QQU6s_3A3:	dc.b 3, $53, $D8, $53, $EC, $54, $B0	
0002402C 01B4 B6                    SME_QQU6s_3AA:	dc.b 1, $B4, $B6	
0002402F 01F4 C2                    SME_QQU6s_3AD:	dc.b 1, $F4, $C2	
00024032 0214 D2F4 D4               SME_QQU6s_3B0:	dc.b 2, $14, $D2, $F4, $D4	
00024037 0234 E4F4 E8               SME_QQU6s_3B5:	dc.b 2, $34, $E4, $F4, $E8	
0002403C 03F4 F815 0835 0A          SME_QQU6s_3BA:	dc.b 3, $F4, $F8, $15, 8, $35, $A	
00024043 03F5 0E15 1E35 20          SME_QQU6s_3C1:	dc.b 3, $F5, $E, $15, $1E, $35, $20	
0002404A 02B5 2455 30               SME_QQU6s_3C8:	dc.b 2, $B5, $24, $55, $30	
0002404F 02B5 3655 42               SME_QQU6s_3CD:	dc.b 2, $B5, $36, $55, $42	
00024054 0335 48B5 4C15 58          SME_QQU6s_3D2:	dc.b 3, $35, $48, $B5, $4C, $15, $58	
0002405B 0215 5A75 5C               SME_QQU6s_3D9:	dc.b 2, $15, $5A, $75, $5C	
00024060 0335 48B5 4C15 58          SME_QQU6s_3DE:	dc.b 3, $35, $48, $B5, $4C, $15, $58	
00024067 0315 64B5 6615 72          SME_QQU6s_3E5:	dc.b 3, $15, $64, $B5, $66, $15, $72	
0002406E 0315 64B5 6615 72          SME_QQU6s_3EC:	dc.b 3, $15, $64, $B5, $66, $15, $72	
00024075 0335 74B5 7815 84          SME_QQU6s_3F3:	dc.b 3, $35, $74, $B5, $78, $15, $84	
0002407C 0355 86F5 8C15 9C          SME_QQU6s_3FA:	dc.b 3, $55, $86, $F5, $8C, $15, $9C	
00024083 02B5 9E35 AA               SME_QQU6s_401:	dc.b 2, $B5, $9E, $35, $AA	
00024088 0415 AEB5 B015 BC75 BE     SME_QQU6s_406:	dc.b 4, $15, $AE, $B5, $B0, $15, $BC, $75, $BE	
00024091 0415 AEB5 C615 BC75 BE     SME_QQU6s_40F:	dc.b 4, $15, $AE, $B5, $C6, $15, $BC, $75, $BE	
0002409A 0375 D215 DAB5 DC          SME_QQU6s_418:	dc.b 3, $75, $D2, $15, $DA, $B5, $DC	
000240A1 0355 E8B5 EE15 FA          SME_QQU6s_41F:	dc.b 3, $55, $E8, $B5, $EE, $15, $FA	
000240A8 03B5 FC16 0836 0A          SME_QQU6s_426:	dc.b 3, $B5, $FC, $16, 8, $36, $A	
000240AF 02B6 0E16 1A               SME_QQU6s_42D:	dc.b 2, $B6, $E, $16, $1A	
000240B4 01F6 1C                    SME_QQU6s_432:	dc.b 1, $F6, $1C	
000240B7 02B6 2C16 38               SME_QQU6s_435:	dc.b 2, $B6, $2C, $16, $38	
000240BC 0316 3AB6 3C16 48          SME_QQU6s_43A:	dc.b 3, $16, $3A, $B6, $3C, $16, $48	
000240C3 0356 4AB6 5036 5C          SME_QQU6s_441:	dc.b 3, $56, $4A, $B6, $50, $36, $5C	
000240CA 0336 60B6 6416 70          SME_QQU6s_448:	dc.b 3, $36, $60, $B6, $64, $16, $70	
000240D1 02B6 7216 7E               SME_QQU6s_44F:	dc.b 2, $B6, $72, $16, $7E	
000240D6 0216 80B6 82               SME_QQU6s_454:	dc.b 2, $16, $80, $B6, $82	
000240DB 0336 8EB6 9216 9E          SME_QQU6s_459:	dc.b 3, $36, $8E, $B6, $92, $16, $9E	
000240E2 0236 A0F6 A4               SME_QQU6s_460:	dc.b 2, $36, $A0, $F6, $A4	
000240E7 0376 B436 BC56 C0          SME_QQU6s_465:	dc.b 3, $76, $B4, $36, $BC, $56, $C0	
000240EE 0376 C636 BC56 CE          SME_QQU6s_46C:	dc.b 3, $76, $C6, $36, $BC, $56, $CE	
000240F5 01B7 D6                    SME_QQU6s_473:	dc.b 1, $B7, $D6	
000240F8 03B7 E217 EE57 F0          SME_QQU6s_476:	dc.b 3, $B7, $E2, $17, $EE, $57, $F0	
000240FF 0387 F60A 1888 00          SME_QQU6s_47D:	dc.b 3, $87, $F6, $A, $18, $88, 0	
00024106 0528 0918 0C38 0E88 1208+  SME_QQU6s_484:	dc.b 5, $28, 9, $18, $C, $38, $E, $88, $12, 8, $1B	
00024111 0528 1C18 1F38 0E88 1208+  SME_QQU6s_48F:	dc.b 5, $28, $1C, $18, $1F, $38, $E, $88, $12, 8, $1B	
0002411C 0288 2188 2A               SME_QQU6s_49A:	dc.b 2, $88, $21, $88, $2A	
00024121 0288 3388 2A               SME_QQU6s_49F:	dc.b 2, $88, $33, $88, $2A	
00024126 0288 3C88 2A               SME_QQU6s_4A4:	dc.b 2, $88, $3C, $88, $2A	
0002412B 03B6 D410 A0F0 A2          SME_QQU6s_4A9:	dc.b 3, $B6, $D4, $10, $A0, $F0, $A2	
00024132 04B6 D410 B2B0 B410 C0     SME_QQU6s_4B0:	dc.b 4, $B6, $D4, $10, $B2, $B0, $B4, $10, $C0	
0002413B 03B6 E050 CA30 D0          SME_QQU6s_4B9:	dc.b 3, $B6, $E0, $50, $CA, $30, $D0	
00024142 0286 ECF0 DA               SME_QQU6s_4C0:	dc.b 2, $86, $EC, $F0, $DA	
00024147 0386 ECF0 EA10 FA          SME_QQU6s_4C5:	dc.b 3, $86, $EC, $F0, $EA, $10, $FA	
0002414E 0486 EC10 FCB0 FE11 0A     SME_QQU6s_4CC:	dc.b 4, $86, $EC, $10, $FC, $B0, $FE, $11, $A	
00024157 03B6 E051 0C31 12          SME_QQU6s_4D5:	dc.b 3, $B6, $E0, $51, $C, $31, $12	
0002415E 02B6 D4B1 16               SME_QQU6s_4DC:	dc.b 2, $B6, $D4, $B1, $16	
00024163 0476 F531 2E51 2811 32     SME_QQU6s_4E1:	dc.b 4, $76, $F5, $31, $2E, $51, $28, $11, $32	
0002416C 0576 F511 3471 3631 3E11+  SME_QQU6s_4EA:	dc.b 5, $76, $F5, $11, $34, $71, $36, $31, $3E, $11, $42	
00024177 0586 FD31 4C07 0611 5031+  SME_QQU6s_4F5:	dc.b 5, $86, $FD, $31, $4C, 7, 6, $11, $50, $31, $52	
00024182 0507 0777 0811 5C31 5EB1+  SME_QQU6s_500:	dc.b 5, 7, 7, $77, 8, $11, $5C, $31, $5E, $B1, $62	
0002418D 0607 0777 0811 6E11 7871+  SME_QQU6s_50B:	dc.b 6, 7, 7, $77, 8, $11, $6E, $11, $78, $71, $70, $31, $7A	
0002419A 0607 0777 0811 7E71 8031+  SME_QQU6s_518:	dc.b 6, 7, 7, $77, 8, $11, $7E, $71, $80, $31, $88, $11, $8C	
000241A7 0586 FD31 8E07 0611 9231+  SME_QQU6s_525:	dc.b 5, $86, $FD, $31, $8E, 7, 6, $11, $92, $31, $94	
000241B2 0576 F511 9E51 9801 A031+  SME_QQU6s_530:	dc.b 5, $76, $F5, $11, $9E, $51, $98, 1, $A0, $31, $A2	
000241BD 03B7 10B1 AE31 BA          SME_QQU6s_53B:	dc.b 3, $B7, $10, $B1, $AE, $31, $BA	
000241C4 03B7 10B1 BE31 CA          SME_QQU6s_542:	dc.b 3, $B7, $10, $B1, $BE, $31, $CA	
000241CB 03B7 1C31 D631 DA          SME_QQU6s_549:	dc.b 3, $B7, $1C, $31, $D6, $31, $DA	
000241D2 0287 28B1 E6               SME_QQU6s_550:	dc.b 2, $87, $28, $B1, $E6	
000241D7 0387 2831 F2B1 F6          SME_QQU6s_555:	dc.b 3, $87, $28, $31, $F2, $B1, $F6	
000241DE 0387 28B2 0232 0E          SME_QQU6s_55C:	dc.b 3, $87, $28, $B2, 2, $32, $E	
000241E5 03B7 1C32 1232 16          SME_QQU6s_563:	dc.b 3, $B7, $1C, $32, $12, $32, $16	
000241EC 02B7 10B2 1A               SME_QQU6s_56A:	dc.b 2, $B7, $10, $B2, $1A	
000241F1 0432 2677 3172 3207 39     SME_QQU6s_56F:	dc.b 4, $32, $26, $77, $31, $72, $32, 7, $39	
000241FA 0532 3C52 4077 3172 4607+  SME_QQU6s_578:	dc.b 5, $32, $3C, $52, $40, $77, $31, $72, $46, 7, $39	
00024205 0472 4E77 3A32 5E17 42     SME_QQU6s_583:	dc.b 4, $72, $4E, $77, $3A, $32, $5E, $17, $42	
0002420E 0472 64B7 4452 7407 50     SME_QQU6s_58C:	dc.b 4, $72, $64, $B7, $44, $52, $74, 7, $50	
00024217 0452 7CB7 4472 8207 50     SME_QQU6s_595:	dc.b 4, $52, $7C, $B7, $44, $72, $82, 7, $50	
00024220 0532 8A52 8EB7 4472 9407+  SME_QQU6s_59E:	dc.b 5, $32, $8A, $52, $8E, $B7, $44, $72, $94, 7, $50	
0002422B 0472 9C77 3A32 A417 42     SME_QQU6s_5A9:	dc.b 4, $72, $9C, $77, $3A, $32, $A4, $17, $42	
00024234 0472 A877 3152 B007 39     SME_QQU6s_5B2:	dc.b 4, $72, $A8, $77, $31, $52, $B0, 7, $39	
0002423D 03B7 5110 A0F0 A2          SME_QQU6s_5BB:	dc.b 3, $B7, $51, $10, $A0, $F0, $A2	
00024244 04B7 5110 B2B0 B410 C0     SME_QQU6s_5C2:	dc.b 4, $B7, $51, $10, $B2, $B0, $B4, $10, $C0	
0002424D 03B7 5D50 CA30 D0          SME_QQU6s_5CB:	dc.b 3, $B7, $5D, $50, $CA, $30, $D0	
00024254 0287 69F0 DA               SME_QQU6s_5D2:	dc.b 2, $87, $69, $F0, $DA	
00024259 0387 69F0 EA10 FA          SME_QQU6s_5D7:	dc.b 3, $87, $69, $F0, $EA, $10, $FA	
00024260 0487 6910 FCB0 FE11 0A     SME_QQU6s_5DE:	dc.b 4, $87, $69, $10, $FC, $B0, $FE, $11, $A	
00024269 03B7 5D51 0C31 12          SME_QQU6s_5E7:	dc.b 3, $B7, $5D, $51, $C, $31, $12	
00024270 02B7 51B1 16               SME_QQU6s_5EE:	dc.b 2, $B7, $51, $B1, $16	
00024275 0517 7277 7451 2831 2E11+  SME_QQU6s_5F3:	dc.b 5, $17, $72, $77, $74, $51, $28, $31, $2E, $11, $32	
00024280 0617 7277 7411 3471 3631+  SME_QQU6s_5FE:	dc.b 6, $17, $72, $77, $74, $11, $34, $71, $36, $31, $3E, $11, $42	
0002428D 0557 7C37 8231 4C11 5031+  SME_QQU6s_60B:	dc.b 5, $57, $7C, $37, $82, $31, $4C, $11, $50, $31, $52	
00024298 0517 8677 8811 5C31 5EB1+  SME_QQU6s_616:	dc.b 5, $17, $86, $77, $88, $11, $5C, $31, $5E, $B1, $62	
000242A3 0617 8677 8811 6E11 7871+  SME_QQU6s_621:	dc.b 6, $17, $86, $77, $88, $11, $6E, $11, $78, $71, $70, $31, $7A	
000242B0 0617 8677 8811 7E71 8031+  SME_QQU6s_62E:	dc.b 6, $17, $86, $77, $88, $11, $7E, $71, $80, $31, $88, $11, $8C	
000242BD 0557 7C37 8231 8E11 9231+  SME_QQU6s_63B:	dc.b 5, $57, $7C, $37, $82, $31, $8E, $11, $92, $31, $94	
000242C8 0617 7277 7451 9811 9E31+  SME_QQU6s_646:	dc.b 6, $17, $72, $77, $74, $51, $98, $11, $9E, $31, $A2, $11, $A0	
000242D5 03B7 90B1 AE31 BA          SME_QQU6s_653:	dc.b 3, $B7, $90, $B1, $AE, $31, $BA	
000242DC 03B7 90B1 BE31 CA          SME_QQU6s_65A:	dc.b 3, $B7, $90, $B1, $BE, $31, $CA	
000242E3 03B7 9C31 D631 DA          SME_QQU6s_661:	dc.b 3, $B7, $9C, $31, $D6, $31, $DA	
000242EA 0287 A8B1 E6               SME_QQU6s_668:	dc.b 2, $87, $A8, $B1, $E6	
000242EF 0387 A831 F2B1 F6          SME_QQU6s_66D:	dc.b 3, $87, $A8, $31, $F2, $B1, $F6	
000242F6 0387 A8B2 0232 0E          SME_QQU6s_674:	dc.b 3, $87, $A8, $B2, 2, $32, $E	
000242FD 03B7 9C32 1232 16          SME_QQU6s_67B:	dc.b 3, $B7, $9C, $32, $12, $32, $16	
00024304 02B7 90B2 1A               SME_QQU6s_682:	dc.b 2, $B7, $90, $B2, $1A	
00024309 0432 26B7 B172 3207 BD     SME_QQU6s_687:	dc.b 4, $32, $26, $B7, $B1, $72, $32, 7, $BD	
00024312 0532 3C52 40B7 B172 4607+  SME_QQU6s_690:	dc.b 5, $32, $3C, $52, $40, $B7, $B1, $72, $46, 7, $BD	
0002431D 0572 4E17 BE77 C032 5E07+  SME_QQU6s_69B:	dc.b 5, $72, $4E, $17, $BE, $77, $C0, $32, $5E, 7, $C8	
00024328 0472 64B7 C952 7407 D5     SME_QQU6s_6A6:	dc.b 4, $72, $64, $B7, $C9, $52, $74, 7, $D5	
00024331 0452 7CB7 C972 8207 D5     SME_QQU6s_6AF:	dc.b 4, $52, $7C, $B7, $C9, $72, $82, 7, $D5	
0002433A 0532 8A52 8EB7 C972 9407+  SME_QQU6s_6B8:	dc.b 5, $32, $8A, $52, $8E, $B7, $C9, $72, $94, 7, $D5	
00024345 0572 9C17 BE77 C032 A407+  SME_QQU6s_6C3:	dc.b 5, $72, $9C, $17, $BE, $77, $C0, $32, $A4, 7, $C8	
00024350 0572 A817 B277 B552 B007+  SME_QQU6s_6CE:	dc.b 5, $72, $A8, $17, $B2, $77, $B5, $52, $B0, 7, $BD	
0002435B 0428 4508 4838 4958 4D     SME_QQU6s_6D9:	dc.b 4, $28, $45, 8, $48, $38, $49, $58, $4D	
00024364 0418 53B8 5528 6118 64     SME_QQU6s_6E2:	dc.b 4, $18, $53, $B8, $55, $28, $61, $18, $64	
0002436D 0428 6638 6928 6D38 70     SME_QQU6s_6EB:	dc.b 4, $28, $66, $38, $69, $28, $6D, $38, $70	
00024376 0528 7478 7738 7F18 8308+  SME_QQU6s_6F4:	dc.b 5, $28, $74, $78, $77, $38, $7F, $18, $83, 8, $85	
00024381 0458 8608 8C38 4958 8D     SME_QQU6s_6FF:	dc.b 4, $58, $86, 8, $8C, $38, $49, $58, $8D	
0002438A 0418 93B8 9528 6108 A1     SME_QQU6s_708:	dc.b 4, $18, $93, $B8, $95, $28, $61, 8, $A1	
00024393 0458 A238 6908 A858 A9     SME_QQU6s_711:	dc.b 4, $58, $A2, $38, $69, 8, $A8, $58, $A9	
0002439C 0528 7478 AF38 B718 BB08+  SME_QQU6s_71A:	dc.b 5, $28, $74, $78, $AF, $38, $B7, $18, $BB, 8, $85	
000243A7 0458 BD38 C338 C778 CB     SME_QQU6s_725:	dc.b 4, $58, $BD, $38, $C3, $38, $C7, $78, $CB	
000243B0 0458 D338 D938 C778 DD     SME_QQU6s_72E:	dc.b 4, $58, $D3, $38, $D9, $38, $C7, $78, $DD	
000243B9 0458 BD38 C338 C778 E5     SME_QQU6s_737:	dc.b 4, $58, $BD, $38, $C3, $38, $C7, $78, $E5	
000243C2 0458 D338 D938 C778 ED     SME_QQU6s_740:	dc.b 4, $58, $D3, $38, $D9, $38, $C7, $78, $ED	
000243CB 0228 F5B8 F8               SME_QQU6s_749:	dc.b 2, $28, $F5, $B8, $F8	
000243D0 0389 0429 0D39 10          SME_QQU6s_74E:	dc.b 3, $89, 4, $29, $D, $39, $10	
000243D7 0388 3329 0D39 10          SME_QQU6s_755:	dc.b 3, $88, $33, $29, $D, $39, $10	
000243DE 0388 3C29 0D39 10          SME_QQU6s_75C:	dc.b 3, $88, $3C, $29, $D, $39, $10	
000243E5 0389 0429 0D39 14          SME_QQU6s_763:	dc.b 3, $89, 4, $29, $D, $39, $14	
000243EC 0388 3329 0D39 14          SME_QQU6s_76A:	dc.b 3, $88, $33, $29, $D, $39, $14	
000243F3 0388 3C29 0D39 14          SME_QQU6s_771:	dc.b 3, $88, $3C, $29, $D, $39, $14	
000243FA 03B9 1839 2439 28          SME_QQU6s_778:	dc.b 3, $B9, $18, $39, $24, $39, $28	
00024401 03B9 2C39 3839 28          SME_QQU6s_77F:	dc.b 3, $B9, $2C, $39, $38, $39, $28	
00024408 03B9 3C39 4839 28          SME_QQU6s_786:	dc.b 3, $B9, $3C, $39, $48, $39, $28	
0002440F 05B9 4C19 2419 5819 3A39+  SME_QQU6s_78D:	dc.b 5, $B9, $4C, $19, $24, $19, $58, $19, $3A, $39, $28	
0002441A 0479 5A59 6239 6859 6C     SME_QQU6s_798:	dc.b 4, $79, $5A, $59, $62, $39, $68, $59, $6C	
00024423 0479 7259 6239 7A59 7E     SME_QQU6s_7A1:	dc.b 4, $79, $72, $59, $62, $39, $7A, $59, $7E	
0002442C 0479 8459 6259 8C59 92     SME_QQU6s_7AA:	dc.b 4, $79, $84, $59, $62, $59, $8C, $59, $92	
00024435 0339 98B9 9C39 A8          SME_QQU6s_7B3:	dc.b 3, $39, $98, $B9, $9C, $39, $A8	
0002443C 0339 ACB9 B039 BC          SME_QQU6s_7BA:	dc.b 3, $39, $AC, $B9, $B0, $39, $BC	
00024443 0339 C0B9 C439 BC          SME_QQU6s_7C1:	dc.b 3, $39, $C0, $B9, $C4, $39, $BC	
0002444A 0479 D079 D819 E039 E2     SME_QQU6s_7C8:	dc.b 4, $79, $D0, $79, $D8, $19, $E0, $39, $E2	
00024453 0479 E679 EE19 E039 E2     SME_QQU6s_7D1:	dc.b 4, $79, $E6, $79, $EE, $19, $E0, $39, $E2	
0002445C 0479 F679 FE19 E039 E2     SME_QQU6s_7DA:	dc.b 4, $79, $F6, $79, $FE, $19, $E0, $39, $E2	
00024465 025A 06BA 0C               SME_QQU6s_7E3:	dc.b 2, $5A, 6, $BA, $C	
0002446A                            		even
0002446A                            		even
0002446A                            
0002446A                            ; ---------------------------------------------------------------------------
0002446A                            ; Uncompressed graphics	- Sonic
0002446A                            ; ---------------------------------------------------------------------------
0002446A                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0003878A                            		even
0003878A                            Art_Dust:	incbin	artunc\spindust.bin		
0003A0CA                            		even
0003A0CA                            ; ---------------------------------------------------------------------------
0003A0CA                            ; Compressed graphics - various
0003A0CA                            ; ---------------------------------------------------------------------------
0003A0CA                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0003A1CE                            		even
0003A1CE                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0003A208                            		even
0003A208                            Nem_Shield:	incbin	artnem\shield.bin	; shield
0003A39E                            		even
0003A39E                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
0003A4E6                            		even
0003A4E6                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0003A5F0                            		even
0003A5F0                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
0003A642                            		even
0003A642                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0003A88A                            		even
0003A88A                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0003AA10                            		even
0003AA10                            ; ---------------------------------------------------------------------------
0003AA10                            ; Sprite mappings - walls of the special stage
0003AA10                            ; ---------------------------------------------------------------------------
0003AA10                            Map_SSWalls:
0003AA10                            	include "_maps\SSwalls.asm"
0003AA10                            ; ---------------------------------------------------------------------------
0003AA10                            ; Sprite mappings - walls of the special stage
0003AA10                            ; ---------------------------------------------------------------------------
0003AA10 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
0003AA14 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
0003AA18 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
0003AA1C 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
0003AA20 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
0003AA24 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
0003AA28 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
0003AA2C 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
0003AA30 01                         byte_2C584:	dc.b 1
0003AA31 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0003AA36 01                         byte_2C58A:	dc.b 1
0003AA37 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0003AA3C 01                         byte_2C590:	dc.b 1
0003AA3D F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0003AA42 01                         byte_2C596:	dc.b 1
0003AA43 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0003AA48 01                         byte_2C59C:	dc.b 1
0003AA49 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0003AA4E 01                         byte_2C5A2:	dc.b 1
0003AA4F F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0003AA54 01                         byte_2C5A8:	dc.b 1
0003AA55 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0003AA5A 01                         byte_2C5AE:	dc.b 1
0003AA5B F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0003AA60 01                         byte_2C5B4:	dc.b 1
0003AA61 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0003AA66 01                         byte_2C5BA:	dc.b 1
0003AA67 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0003AA6C 01                         byte_2C5C0:	dc.b 1
0003AA6D F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0003AA72 01                         byte_2C5C6:	dc.b 1
0003AA73 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0003AA78 01                         byte_2C5CC:	dc.b 1
0003AA79 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0003AA7E 01                         byte_2C5D2:	dc.b 1
0003AA7F F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0003AA84 01                         byte_2C5D8:	dc.b 1
0003AA85 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0003AA8A 01                         byte_2C5DE:	dc.b 1
0003AA8B F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0003AA90                            		even
0003AA90                            		even
0003AA90                            ; ---------------------------------------------------------------------------
0003AA90                            ; Compressed graphics - special stage
0003AA90                            ; ---------------------------------------------------------------------------
0003AA90                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
0003B3C8                            		even
0003B3C8                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
0003B4FC                            		even
0003B4FC                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
0003C18C                            		even
0003C18C                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
0003C48C                            		even
0003C48C                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
0003C980                            		even
0003C980                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
0003CA6E                            		even
0003CA6E                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
0003CB3E                            		even
0003CB3E                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
0003CC34                            		even
0003CC34                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
0003CC92                            		even
0003CC92                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
0003CD24                            		even
0003CD24                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
0003CDE6                            		even
0003CDE6                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
0003CEB4                            		even
0003CEB4                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
0003CF80                            		even
0003CF80                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
0003D048                            		even
0003D048                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
0003D112                            		even
0003D112                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
0003D1E2                            		even
0003D1E2                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
0003D3D6                            		even
0003D3D6                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
0003D53E                            		even
0003D53E                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
0003D5EE                            		even
0003D5EE                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
0003D6C8                            		even
0003D6C8                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
0003D74C                            		even
0003D74C                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
0003D8CA                            		even
0003D8CA                            ; ---------------------------------------------------------------------------
0003D8CA                            ; Compressed graphics - GHZ stuff
0003D8CA                            ; ---------------------------------------------------------------------------
0003D8CA                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
0003D914                            		even
0003D914                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
0003DA2E                            		even
0003DA2E                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
0003DB1A                            		even
0003DB1A                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
0003DB62                            		even
0003DB62                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
0003DD00                            		even
0003DD00                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
0003DD7C                            		even
0003DD7C                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
0003DF90                            		even
0003DF90                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
0003E0BC                            		even
0003E0BC                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
0003E1EA                            		even
0003E1EA                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
0003E288                            		even
0003E288                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
0003E2E8                            		even
0003E2E8                            ; ---------------------------------------------------------------------------
0003E2E8                            ; Compressed graphics - LZ stuff
0003E2E8                            ; ---------------------------------------------------------------------------
0003E2E8                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
0003E40C                            		even
0003E40C                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
0003EC00                            		even
0003EC00                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
0003ED80                            		even
0003ED80                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
0003EEEA                            		even
0003EEEA                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
0003F540                            		even
0003F540                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
0003F5F6                            		even
0003F5F6                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
0003F698                            		even
0003F698                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
0003F7F4                            		even
0003F7F4                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
0003F858                            		even
0003F858                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
0003F9AA                            		even
0003F9AA                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
0003FE8C                            		even
0003FE8C                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
0003FFFC                            		even
0003FFFC                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
000402B4                            		even
000402B4                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
000403EC                            		even
000403EC                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00040516                            		even
00040516                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00040626                            		even
00040626                            ; ---------------------------------------------------------------------------
00040626                            ; Compressed graphics - MZ stuff
00040626                            ; ---------------------------------------------------------------------------
00040626                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
000408B4                            		even
000408B4                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00040972                            		even
00040972                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00040A2A                            		even
00040A2A                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00040A7E                            		even
00040A7E                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00040D5C                            		even
00040D5C                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
00041672                            		even
00041672                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
000417D6                            		even
000417D6                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
0004185E                            		even
0004185E                            ; ---------------------------------------------------------------------------
0004185E                            ; Compressed graphics - SLZ stuff
0004185E                            ; ---------------------------------------------------------------------------
0004185E                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00041A9A                            		even
00041A9A                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00041BE0                            		even
00041BE0                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00041E24                            		even
00041E24                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00041E86                            		even
00041E86                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00041F68                            		even
00041F68                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
0004214A                            		even
0004214A                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00042256                            		even
00042256                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
000422FA                            		even
000422FA                            ; ---------------------------------------------------------------------------
000422FA                            ; Compressed graphics - SYZ stuff
000422FA                            ; ---------------------------------------------------------------------------
000422FA                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
00042464                            		even
00042464                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
000424C6                            		even
000424C6                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
000425A8                            		even
000425A8                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
00042836                            		even
00042836                            ; ---------------------------------------------------------------------------
00042836                            ; Compressed graphics - SBZ stuff
00042836                            ; ---------------------------------------------------------------------------
00042836                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
0004288A                            		even
0004288A                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00042B26                            		even
00042B26                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00042D2A                            		even
00042D2A                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
00042EC8                            		even
00042EC8                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
000431F8                            		even
000431F8                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
000433D6                            		even
000433D6                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
0004342E                            		even
0004342E                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
000435AE                            		even
000435AE                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
000436AC                            		even
000436AC                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
00043838                            		even
00043838                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
00043888                            		even
00043888                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
000438E0                            		even
000438E0                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
000439DC                            		even
000439DC                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
00043AF2                            		even
00043AF2                            ; ---------------------------------------------------------------------------
00043AF2                            ; Compressed graphics - enemies
00043AF2                            ; ---------------------------------------------------------------------------
00043AF2                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
00043EB2                            		even
00043EB2                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
000443A0                            		even
000443A0                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
00044746                            		even
00044746                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0004492E                            		even
0004492E                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
00045018                            		even
00045018                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
00045280                            		even
00045280                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0004550A                            		even
0004550A                            Nem_Roller:	incbin	artnem\roller.bin	; roller
00045A2E                            		even
00045A2E                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
00045CB8                            		even
00045CB8                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
000462D6                            		even
000462D6                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
000466BE                            		even
000466BE                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
000469BA                            		even
000469BA                            Nem_Splats:	incbin	artnem\splats.bin	; splats
00046C02                            		even
00046C02                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
00046E9A                            		even
00046E9A                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
00047078                            		even
00047078                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
00047206                            		even
00047206                            ; ---------------------------------------------------------------------------
00047206                            ; Compressed graphics - various
00047206                            ; ---------------------------------------------------------------------------
00047206                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
00047814                            		even
00047814                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0004790A                            		even
0004790A                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
00047A10                            		even
00047A10                            Nem_Ring:	incbin	artnem\rings.bin	; rings
00047B04                            		even
00047B04                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
00047F76 00                         		even
00047F76                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
000485DC                            		even
000485DC                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0004868C                            		even
0004868C                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0004881E                            		even
0004881E                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
00048920                            		even
00048920                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
000489FC                            		even
000489FC                            ArtNem_DignlSprng:	incbin	"artnem\Diagonal spring.bin" ; diagonal spring
00048BD0 00                         		even
00048BD0                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0004904C                            		even
0004904C                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0004910C                            		even
0004910C                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
00049280                            		even
00049280                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
00049582                            		even
00049582                            ; ---------------------------------------------------------------------------
00049582                            ; Compressed graphics - continue screen
00049582                            ; ---------------------------------------------------------------------------
00049582                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
00049832                            		even
00049832                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
00049A6C                            		even
00049A6C                            ; ---------------------------------------------------------------------------
00049A6C                            ; Compressed graphics - animals
00049A6C                            ; ---------------------------------------------------------------------------
00049A6C                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
00049BC4                            		even
00049BC4                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
00049D20                            		even
00049D20                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
00049E9C                            		even
00049E9C                            Nem_Seal:	incbin	artnem\seal.bin		; seal
00049FB8                            		even
00049FB8                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0004A0EE                            		even
0004A0EE                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0004A228                            		even
0004A228                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0004A384                            		even
0004A384                            ; ---------------------------------------------------------------------------
0004A384                            ; Compressed graphics - primary patterns and block mappings
0004A384                            ; ---------------------------------------------------------------------------
0004A384                            Blk16_GHZ:	incbin	map16\ghz.bin
0004AC98                            		even
0004AC98                            Nem_GHZ:	incbin	artnem\8x8ghz.bin	; GHZ primary patterns
0004C2AA                            		even
0004C2AA                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; Title Screen and Ending only
0004D90A                            		even
0004D90A                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; Title Screen and Ending only
0004ECB2                            		even
0004ECB2                            Blk256_GHZ:	incbin	map256\ghz.bin
00050D6C                            		even
00050D6C                            Blk16_TS:	incbin	map16\ts.bin
00050E6E                            		even
00050E6E                            Nem_TS_1st:	incbin	artnem\8x8ts1.bin; GHZ primary patterns
00051AC4                            		even
00051AC4                            Blk256_TS:	incbin	map256\ts.bin
00052012                            		even
00052012                            Blk16_LZ:	incbin	map16\lz.bin
0005233C                            		even
0005233C                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00053E84                            		even
00053E84                            Blk256_LZ:	incbin	map256\lz.bin
00056674                            		even
00056674                            Blk16_MZ:	incbin	map16\mz.bin
00056E7E                            		even
00056E7E                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
000596C2                            		even
000596C2                            Blk256_MZ:	incbin	map256\mz.bin
0005AE82                            		even
0005AE82                            Blk16_SLZ:	incbin	map16\slz.bin
0005B666                            		even
0005B666                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
0005F1BA                            		even
0005F1BA                            Blk256_SLZ:	incbin	map256\slz.bin
000615EA                            		even
000615EA                            Blk16_SYZ:	incbin	map16\syz.bin
00061F58                            		even
00061F58                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
00065684                            		even
00065684                            Blk256_SYZ:	incbin	map256\syz.bin
00067A34                            		even
00067A34                            Blk16_SBZ:	incbin	map16\sbz.bin
000688CE                            		even
000688CE                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0006B07A                            		even
0006B07A                            Blk256_SBZ:	incbin	map256\sbz.bin
0006DACA                            		even
0006DACA                            ; ---------------------------------------------------------------------------
0006DACA                            ; Compressed graphics - bosses and ending sequence
0006DACA                            ; ---------------------------------------------------------------------------
0006DACA                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
0006E32E                            		even
0006E32E                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
0006E618                            		even
0006E618                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0006EE9C                            		even
0006EE9C                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
0006F6C8                            		even
0006F6C8                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
0006FE30                            		even
0006FE30                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
000703B0                            		even
000703B0                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
000704D0                            		even
000704D0                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
000706CE                            		even
000706CE                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
000718AC                            		even
000718AC                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
000721F0                            		even
000721F0                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
000725C6                            		even
000725C6                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
00072B56                            		even
00072B56                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
00072DDE                            		even
00072DDE                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
000733DC                            		even
000733DC                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
00073664                            		even
00073664                            		incbin	misc\padding2.bin
00073768                            		even
00073768                            MenuslctrART:	incbin	"artkos\Menuslctr.bin"	; art for that soncc 4 menu selecting thingy 
000738A4                            		even
000738A4                            ;The Menu Selector uses the third palette line for the Title Screen.
000738A4                            ;Load it into Flex2, and select the title palette.
000738A4                            ;Change the palette lines to 3, and slide it to 0 in the palettes tab. 
000738A4                            ;The rest is is right here.
000738A4                            ; - Chron Delta
000738A4                            MenuslctrMappings:	incbin	"_maps\Menuslctr.asm"	; mappings for that soncc 4 menu selecting thingy
00073A2A                            		even		
00073A2A                            ; ---------------------------------------------------------------------------
00073A2A                            ; Collision data
00073A2A                            ; ---------------------------------------------------------------------------
00073A2A                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
00073B2A                            		even
00073B2A                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00074B2A                            		even
00074B2A                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00075B2A                            		even
00075B2A                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
00075CE2 00                         		even
00075CE2                            Col_LZ:		incbin	collide\lz.bin		; LZ index
00075DAA                            		even
00075DAA                            Col_MZ:		incbin	collide\mz.bin		; MZ index
00075F3A                            		even
00075F3A                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
0007612E                            		even
0007612E                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
00076322                            		even
00076322                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
0007657A                            		even
0007657A                            ; ---------------------------------------------------------------------------
0007657A                            ; Special layouts
0007657A                            ; ---------------------------------------------------------------------------
0007657A                            SS_1:		incbin	sslayout\1.bin
000767F4                            		even
000767F4                            SS_2:		incbin	sslayout\2.bin
00076C06                            		even
00076C06                            SS_3:		incbin	sslayout\3.bin
00076F62                            		even
00076F62                            SS_4:		incbin	sslayout\4.bin
0007743C                            		even
0007743C                            SS_5:		incbin	sslayout\5.bin
0007790E                            		even
0007790E                            SS_6:		incbin	sslayout\6.bin
00077C1E                            		even
00077C1E                            ; ---------------------------------------------------------------------------
00077C1E                            ; Animated uncompressed graphics
00077C1E                            ; ---------------------------------------------------------------------------
00077C1E                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
00077E1E                            		even
00077E1E                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0007821E                            		even
0007821E                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0007869E                            		even
0007869E                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0007899E                            		even
0007899E                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
00078F9E                            		even
00078F9E                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0007929E                            		even
0007929E                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
00079D1E                            		even
00079D1E                            
00079D1E                            ; ---------------------------------------------------------------------------
00079D1E                            ; Level	layout index
00079D1E                            ; ---------------------------------------------------------------------------
00079D1E 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
00079D24 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
00079D2A 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
00079D30 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
00079D36 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
00079D3C 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
00079D42 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
00079D48 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
00079D4E 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
00079D54 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
00079D5A 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
00079D60 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
00079D66 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00079D6C 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00079D72 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00079D78 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
00079D7E 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
00079D84 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
00079D8A 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
00079D90 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
00079D96 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
00079D9C 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
00079DA2 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
00079DA8 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
00079DAE 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00079DB4 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00079DBA 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00079DC0 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00079DC6                            
00079DC6                            Level_GHZ1:	incbin	levels\ghz1.bin
00079EB8                            		even
00079EB8 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
00079EBC                            Level_GHZ2:	incbin	levels\ghz2.bin
00079F84                            		even
00079F84 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
00079F88                            Level_GHZ3:	incbin	levels\ghz3.bin
0007A0AA                            		even
0007A0AA                            Level_GHZbg:	incbin	levels\ghzbg.bin
0007A0CC                            		even
0007A0CC 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0007A0D0 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0007A0D4                            
0007A0D4                            Level_LZ1:	incbin	levels\lz1.bin
0007A1D6                            		even
0007A1D6                            Level_LZbg:	incbin	levels\lzbg.bin
0007A2D8                            		even
0007A2D8 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0007A2DC                            Level_LZ2:	incbin	levels\lz2.bin
0007A376                            		even
0007A376 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0007A37A                            Level_LZ3:	incbin	levels\lz3.bin
0007A494                            		even
0007A494 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0007A498                            Level_SBZ3:	incbin	levels\sbz3.bin
0007A552                            		even
0007A552 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0007A556                            
0007A556                            Level_MZ1:	incbin	levels\mz1.bin
0007A5F4                            		even
0007A5F4                            Level_MZ1bg:	incbin	levels\mz1bg.bin
0007A66E                            		even
0007A66E                            Level_MZ2:	incbin	levels\mz2.bin
0007A712                            		even
0007A712                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0007A7A4                            		even
0007A7A4 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0007A7A8                            Level_MZ3:	incbin	levels\mz3.bin
0007A88A                            		even
0007A88A                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0007A92E                            		even
0007A92E 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0007A932 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0007A936                            
0007A936                            Level_SLZ1:	incbin	levels\slz1.bin
0007AA48                            		even
0007AA48                            Level_SLZbg:	incbin	levels\slzbg.bin
0007AAC2                            		even
0007AAC2                            Level_SLZ2:	incbin	levels\slz2.bin
0007ABB2                            		even
0007ABB2                            Level_SLZ3:	incbin	levels\slz3.bin
0007ACCC                            		even
0007ACCC 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0007ACD0                            
0007ACD0                            Level_SYZ1:	incbin	levels\syz1.bin
0007AD8C                            		even
0007AD8C                            Level_SYZbg:	incbin	levels\syzbg.bin
0007ADC6                            		even
0007ADC6 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0007ADCA                            Level_SYZ2:	incbin	levels\syz2.bin
0007AECE                            		even
0007AECE 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0007AED2                            Level_SYZ3:	incbin	levels\syz3.bin
0007B02C                            		even
0007B02C 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0007B030 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0007B034                            
0007B034                            Level_SBZ1:	incbin	levels\sbz1.bin
0007B156                            		even
0007B156                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0007B194                            		even
0007B194                            Level_SBZ2:	incbin	levels\sbz2.bin
0007B2D6                            		even
0007B2D6                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0007B440                            		even
0007B440 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0007B444 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0007B448                            Level_End:	incbin	levels\ending.bin
0007B478 00                         		even
0007B478 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0007B47C                            
0007B47C                            ; ---------------------------------------------------------------------------
0007B47C                            ; Animated uncompressed giant ring graphics
0007B47C                            ; ---------------------------------------------------------------------------
0007B47C                            Art_BigRing:	incbin	artunc\bigring.bin
0007C0BC                            		even
0007C0BC                            
0007C0BC                            		incbin	misc\padding3.bin
0007C158                            		even
0007C158                            
0007C158                            ; ---------------------------------------------------------------------------
0007C158                            ; Sprite locations index
0007C158                            ; ---------------------------------------------------------------------------
0007C158 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C15C 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C160 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C164 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C168 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C16C 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C170 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C174 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C178 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C17C 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C180 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C184 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C188 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C18C 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C190 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C194 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C198 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C19C 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C1A0 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C1A4 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C1A8 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C1AC 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C1B0 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C1B4 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C1B8 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C1BC 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C1C0 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C1C4 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0007C1C8 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0007C1CC 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0007C1D0 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0007C1D4 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0007C1D8 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0007C1DC 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0007C1E0 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0007C1E4 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0007C1E8 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0007C1EE                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0007C6F8                            		even
0007C6F8                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0007CCB6                            		even
0007CCB6                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0007D370                            		even
0007D370                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0007D7DE                            		even
0007D7DE                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0007DB20                            		even
0007DB20                            ObjPos_LZ3:	incbin	objpos\lz3.bin
0007E102                            		even
0007E102                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
0007E59A                            		even
0007E59A                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
0007E5CC                            		even
0007E5CC                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
0007E5FE                            		even
0007E5FE                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
0007E630                            		even
0007E630                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
0007E662                            		even
0007E662                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
0007E6AC                            		even
0007E6AC                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
0007E6EA                            		even
0007E6EA                            ObjPos_MZ1:	incbin	objpos\mz1.bin
0007EA56                            		even
0007EA56                            ObjPos_MZ2:	incbin	objpos\mz2.bin
0007EF00                            		even
0007EF00                            ObjPos_MZ3:	incbin	objpos\mz3.bin
0007F476                            		even
0007F476                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
0007F9B6                            		even
0007F9B6                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
0007FE1E                            		even
0007FE1E                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
00080400                            		even
00080400                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
0008088C                            		even
0008088C                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
00080DF6                            		even
00080DF6                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
000813FC                            		even
000813FC                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
00081B3A                            		even
00081B3A                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
00082218                            		even
00082218                            ObjPos_FZ:	incbin	objpos\fz.bin
0008222A                            		even
0008222A                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
0008225C                            		even
0008225C                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
0008228E                            		even
0008228E                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
000822C0                            		even
000822C0                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
000822F2                            		even
000822F2                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
00082324                            		even
00082324                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
0008235C                            		even
0008235C                            ObjPos_End:	incbin	objpos\ending.bin
000824B8                            		even
000824B8 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
000824BE                            ; ---------------------------------------------------------------------------
000824BE                            		incbin	misc\padding4.bin
00082AE8                            		even
00082AE8                            
00082AE8 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
00082AEC 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
00082AF0 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
00082AF4 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
00082AF8 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
00082AFC 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
00082B00                            ; ---------------------------------------------------------------------------
00082B00                            ; PSG instruments used in music
00082B00                            ; ---------------------------------------------------------------------------
00082B00 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
00082B0C 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00082B18 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
00082B24                            PSG1:		incbin	sound\psg1.bin
00082B3B                            PSG2:		incbin	sound\psg2.bin
00082B42                            PSG3:		incbin	sound\psg3.bin
00082B53                            PSG4:		incbin	sound\psg4.bin
00082B5E                            PSG6:		incbin	sound\psg6.bin
00082B6D                            PSG5:		incbin	sound\psg5.bin
00082B97                            PSG7:		incbin	sound\psg7.bin
00082BB3                            PSG8:		incbin	sound\psg8.bin
00082BDB                            PSG9:		incbin	sound\psg9.bin
00082BEC                            
00082BEC 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
00082BF4                            ; ---------------------------------------------------------------------------
00082BF4                            ; Music	Pointers
00082BF4                            ; ---------------------------------------------------------------------------
00082BF4 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
00082BFC 0000 0000 0000 0000        		dc.l Music83, Music84
00082C04 0000 0000 0000 0000        		dc.l Music85, Music86
00082C0C 0000 0000 0000 0000        		dc.l Music87, Music88
00082C14 0000 0000 0000 0000        		dc.l Music89, Music8A
00082C1C 0000 0000 0000 0000        		dc.l Music8B, Music8C
00082C24 0000 0000 0000 0000        		dc.l Music8D, Music8E
00082C2C 0000 0000 0000 0000        		dc.l Music8F, Music90
00082C34 0000 0000 0000 0000        		dc.l Music91, Music92
00082C3C 0000 0000 0000 0000        		dc.l Music93, Music94
00082C44 0000 0000 0000 0000        		dc.l Music95, Music96
00082C4C 0000 0000 0000 0000        		dc.l Music97, Music98
00082C54 0000 0000 0000 0000        		dc.l Music99, Music9A
00082C5C 0000 0000 0000 0000        		dc.l Music9B, Music9C
00082C64 0000 0000 0000 0000        		dc.l Music9D, Music9E
00082C6C 0000 0000                  		dc.l Music9F
00082C70                            ; ---------------------------------------------------------------------------
00082C70                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
00082C70                            ; ---------------------------------------------------------------------------
00082C70 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
00082C80 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
00082C90 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
00082CA0 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
00082CB0 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
00082CC0 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
00082CD0 9090 9090                  		dc.b $90, $90, $90, $90
00082CD4                            
00082CD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00082CD4                            
00082CD4                            YM_Access_WaitRead:
00082CD4 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop off (allow it to continue)
00082CDC                            		rept	$10					; EXT: delay for a long enough time to allow the...
00082CDC                            		nop						; EXT: '' ...68k pointer to be saved correctly.
00082CDC 4E71 4E71 4E71 4E71 4E71+  		endr						; EXT: ''
00082CFC                            
00082CFC                            sub_71B4C:
00082CFC 4DF9 00FF F000             		lea	($FFF000).l,a6
00082D02                            
00082D02 41F9 00A0 02EF             		lea	($A00000+YM_Access).l,a0		; EXT: load access address in Z80
00082D08 203C 00A0 0000             		move.l	#$A00000,d0				; EXT: prepare Z80 RAM address in d0 (i.e. start of Cue list address)
00082D0E 33FC 0100 00A1 1100 0839+  		StopZ80						; EXT: request Z80 stop on
00082D20 4A18                       		tst.b	(a0)+					; EXT: is the Z80 accessing the 68k pointer?
00082D22 66B0                       		bne.s	YM_Access_WaitRead			; EXT: if so, branch and wait for it to finish...
00082D24 1218                       		move.b	(a0)+,d1				; EXT: load lower byte of pointer
00082D26 1018                       		move.b	(a0)+,d0				; EXT: load upper byte of pointer
00082D28 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop off
00082D30 E148                       		lsl.w	#$08,d0					; EXT: shift upper byte up
00082D32 1001                       		move.b	d1,d0					; EXT: put lower byte with it
00082D34 2D40 0010                  		move.l	d0,$10(a6)				; EXT: store the cue address
00082D38                            
00082D38 422E 000E                  		clr.b	$E(a6)
00082D3C 4A2E 0003                  		tst.b	3(a6)		; is music paused?
00082D40 6600 0000                  		bne.w	loc_71E50	; if yes, branch
00082D44 532E 0001                  		subq.b	#1,1(a6)
00082D48 6600                       		bne.s	loc_71B9E
00082D4A 4EBA 0000                  		jsr	sub_7260C(pc)
00082D4E                            
00082D4E                            loc_71B9E:
00082D4E 102E 0004                  		move.b	4(a6),d0
00082D52 6700                       		beq.s	loc_71BA8
00082D54 4EBA 0000                  		jsr	sub_72504(pc)
00082D58                            
00082D58                            loc_71BA8:
00082D58 4A2E 0024                  		tst.b	$24(a6)
00082D5C 6700                       		beq.s	loc_71BB2
00082D5E 4EBA 0000                  		jsr	sub_7267C(pc)
00082D62                            
00082D62                            loc_71BB2:
00082D62 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
00082D66 6700                       		beq.s	loc_71BBC	; if not, branch
00082D68 4EBA 0000                  		jsr	Sound_Play(pc)
00082D6C                            
00082D6C                            loc_71BBC:
00082D6C 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00082D72 6700                       		beq.s	loc_71BC8
00082D74 4EBA 0000                  		jsr	Sound_ChkValue(pc)
00082D78                            
00082D78                            loc_71BC8:
00082D78 4BEE 0010                  		lea	$40-$30(a6),a5			; MJ: making correction for flow below
00082D7C 7E01                       		moveq	#2-1,d7				; MJ: set number of PCM channels to run
00082D7E 1D7C 007F 0008             		move.b	#$80-1,$08(a6)			; MJ: reset as PCM channel
00082D84                            
00082D84                            SD_NextPCM:
00082D84 522E 0008                  		addq.b	#$01,$08(a6)			; MJ: advance PCM channel ID
00082D88 4BED 0030                  		lea	$30(a5),a5			; MJ: advance to next channel
00082D8C 4A15                       		tst.b	(a5)
00082D8E 6A00                       		bpl.s	loc_71BD4
00082D90 4EBA 0000                  		jsr	sub_71C4E(pc)
00082D94                            
00082D94                            loc_71BD4:
00082D94 51CF FFEE                  		dbf	d7,SD_NextPCM			; MJ: repeat for number of PCM channels available
00082D98 422E 0008                  		clr.b	8(a6)
00082D9C 7E05                       		moveq	#5,d7
00082D9E                            
00082D9E                            loc_71BDA:
00082D9E DAFC 0030                  		adda.w	#$30,a5
00082DA2 4A15                       		tst.b	(a5)
00082DA4 6A00                       		bpl.s	loc_71BE6
00082DA6 4EBA 0000                  		jsr	sub_71CCA(pc)
00082DAA                            
00082DAA                            loc_71BE6:
00082DAA 51CF FFF2                  		dbf	d7,loc_71BDA
00082DAE                            
00082DAE 7E02                       		moveq	#2,d7
00082DB0                            
00082DB0                            loc_71BEC:
00082DB0 DAFC 0030                  		adda.w	#$30,a5
00082DB4 4A15                       		tst.b	(a5)
00082DB6 6A00                       		bpl.s	loc_71BF8
00082DB8 4EBA 0000                  		jsr	sub_72850(pc)
00082DBC                            
00082DBC                            loc_71BF8:
00082DBC 51CF FFF2                  		dbf	d7,loc_71BEC
00082DC0                            
00082DC0 1D7C 0080 000E             		move.b	#$80,$E(a6)
00082DC6 7E02                       		moveq	#2,d7
00082DC8                            
00082DC8                            loc_71C04:
00082DC8 DAFC 0030                  		adda.w	#$30,a5
00082DCC 4A15                       		tst.b	(a5)
00082DCE 6A00                       		bpl.s	loc_71C10
00082DD0 4EBA 0000                  		jsr	sub_71CCA(pc)
00082DD4                            
00082DD4                            loc_71C10:
00082DD4 51CF FFF2                  		dbf	d7,loc_71C04
00082DD8                            
00082DD8 7E02                       		moveq	#2,d7
00082DDA                            
00082DDA                            loc_71C16:
00082DDA DAFC 0030                  		adda.w	#$30,a5
00082DDE 4A15                       		tst.b	(a5)
00082DE0 6A00                       		bpl.s	loc_71C22
00082DE2 4EBA 0000                  		jsr	sub_72850(pc)
00082DE6                            
00082DE6                            loc_71C22:
00082DE6 51CF FFF2                  		dbf	d7,loc_71C16
00082DEA 1D7C 0040 000E             		move.b	#$40,$E(a6)
00082DF0 DAFC 0030                  		adda.w	#$30,a5
00082DF4 4A15                       		tst.b	(a5)
00082DF6 6A00                       		bpl.s	loc_71C38
00082DF8 4EBA 0000                  		jsr	sub_71CCA(pc)
00082DFC                            
00082DFC                            loc_71C38:
00082DFC DAFC 0030                  		adda.w	#$30,a5
00082E00 4A15                       		tst.b	(a5)
00082E02 6A00                       		bpl.s	loc_71C44
00082E04 4EBA 0000                  		jsr	sub_72850(pc)
00082E08                            
00082E08                            loc_71C44:
00082E08 6000                       		bra.s	YM_Access_TestWrite			; EXT: jump into the access loop
00082E0A                            
00082E0A                            YM_Access_WaitWrite:
00082E0A 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop off (allow it to continue)
00082E12                            		rept	$10					; EXT: delay for a long enough time to let the Z80...
00082E12                            		nop						; EXT: '' ...finish writing the 68k pointer, so it doesn't...
00082E12 4E71 4E71 4E71 4E71 4E71+  		endr						; EXT: '' ...clash with 68k's pointer writing.
00082E32                            
00082E32                            YM_Access_TestWrite:
00082E32 41F9 00A0 02EF             		lea	($A00000+YM_Access).l,a0		; EXT: load access address in Z80
00082E38 43EE 0013                  		lea	$13(a6),a1				; EXT: load the 68k's pointer finish location
00082E3C 33FC 0100 00A1 1100 0839+  		StopZ80						; EXT: request Z80 stop on
00082E4E 4A18                       		tst.b	(a0)+					; EXT: is the Z80 accessing the 68k pointer?
00082E50 66B8                       		bne.s	YM_Access_WaitWrite			; EXT: if so, branch and wait for it to finish...
00082E52 10D1                       		move.b	(a1),(a0)+				; EXT: save lower byte of pointer
00082E54 10A1                       		move.b	-(a1),(a0)				; EXT: save upper byte of pointer
00082E56 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop off
00082E5E                            
00082E5E 4E75                       		rts	
00082E60                            
00082E60                            ; End of function sub_71B4C
00082E60                            
00082E60                            
00082E60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00082E60                            
00082E60                            
00082E60                            sub_71C4E:				; XREF: sub_71B4C
00082E60 532D 000E                  		subq.b	#1,$E(a5)
00082E64 6600 0000                  		bne.w	locret_71CAA
00082E68 286D 0004                  		movea.l	4(a5),a4
00082E6C                            
00082E6C                            loc_71C5E:
00082E6C 7A00                       		moveq	#0,d5
00082E6E 1A1C                       		move.b	(a4)+,d5
00082E70 0C05 00E0                  		cmpi.b	#-$20,d5
00082E74 6500                       		bcs.s	loc_71C6E
00082E76 4EBA 0000                  		jsr	sub_72A5A(pc)
00082E7A 60F0                       		bra.s	loc_71C5E
00082E7C                            ; ===========================================================================
00082E7C                            
00082E7C                            loc_71C6E:
00082E7C 4A05                       		tst.b	d5
00082E7E 6A00                       		bpl.s	loc_71C84
00082E80 1B45 0010                  		move.b	d5,$10(a5)
00082E84 1A1C                       		move.b	(a4)+,d5
00082E86 6A00                       		bpl.s	loc_71C84
00082E88 534C                       		subq.w	#1,a4
00082E8A 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00082E90 6000                       		bra.s	loc_71C88
00082E92                            ; ===========================================================================
00082E92                            
00082E92                            loc_71C84:
00082E92 4EBA 0000                  		jsr	sub_71D40(pc)
00082E96                            
00082E96                            loc_71C88:
00082E96 2B4C 0004                  		move.l	a4,4(a5)
00082E9A 0815 0002                  		btst	#2,(a5)
00082E9E 6600                       		bne.s	locret_71CAA
00082EA0 7000                       		moveq	#0,d0
00082EA2 102D 0010                  		move.b	$10(a5),d0
00082EA6 0400 0080                  		subi.b	#$80,d0					; MJ: minus 80
00082EAA D040                       		add.w	d0,d0					; MJ: multiply by 4 (long-word size)
00082EAC D040                       		add.w	d0,d0					; MJ: ''
00082EAE 48E7 00C0                  		movem.l	a0/a1,-(sp)				; MJ: store register data
00082EB2 41F9 0000 0000             		lea	(SampleList).l,a0			; MJ: load sample list
00082EB8 2070 0000                  		move.l	(a0,d0.w),a0				; MJ: load correct sample z80 pointer address
00082EBC                            
00082EBC 0C2E 0080 0008             		cmpi.b	#$80,$08(a6)				; MJ: is this PCM 1?
00082EC2 6600                       		bne.s	WritePCM2				; MJ: if not, branch for PCM 2 writing
00082EC4                            
00082EC4                            	; --- Writing to PCM 1 ---
00082EC4                            
00082EC4 33FC 0100 00A1 1100 0839+  		StopZ80
00082ED6 43F9 00A0 02E6             		lea	($A00000+PCM1_Sample).l,a1			; MJ: load PCM 1 slot address
00082EDC 12D8                       		move.b	(a0)+,(a1)+					; MJ: set address of sample
00082EDE 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00082EE0 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00082EE2 13FC 0064 00A0 0047        		move.b	#(CUPCM1_NewSample&$FF),($A00000+CU_Stack).l	; MJ: set routine to run
00082EEA 13FC 0002 00A0 0048        		move.b	#(CUPCM1_NewSample>>$08),($A00000+CU_Stack+1).l	; MJ: ''
00082EF2 13FC 00C9 00A0 01D2        		move.b	#%11001001,($A00000+CUPCM1_RET).l		; MJ: change "NOP" to "RET"
00082EFA 33FC 0000 00A1 1100        		StartZ80
00082F02                            
00082F02 4CDF 0300                  		movem.l	(sp)+,a0/a1				; MJ: restore register data
00082F06                            
00082F06                            locret_71CAA:
00082F06 4E75                       		rts						; MJ: return
00082F08                            
00082F08                            	; --- Writing to PCM 2 ---
00082F08                            
00082F08                            WritePCM2:
00082F08 33FC 0100 00A1 1100 0839+  		StopZ80
00082F1A 43F9 00A0 02E9             		lea	($A00000+PCM2_Sample).l,a1			; MJ: load PCM 2 slot address
00082F20 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00082F22 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00082F24 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
00082F26 13FC 0028 00A0 01D3        		move.b	#%00101000,($A00000+CUPCM2_RET).l		; change "JR NZ" to "JR Z"
00082F2E 33FC 0000 00A1 1100        		StartZ80
00082F36                            
00082F36 4CDF 0300                  		movem.l	(sp)+,a0/a1				; MJ: restore register data
00082F3A 4E75                       		rts						; MJ: return
00082F3C                            
00082F3C                            ; ===========================================================================
00082F3C                            
00082F3C                            sub_71CCA:				; XREF: sub_71B4C
00082F3C 532D 000E                  		subq.b	#1,$E(a5)
00082F40 6600                       		bne.s	loc_71CE0
00082F42 0895 0004                  		bclr	#4,(a5)
00082F46 4EBA 0000                  		jsr	sub_71CEC(pc)
00082F4A 4EBA 0000                  		jsr	sub_71E18(pc)
00082F4E 6000 0000                  		bra.w	loc_726E2
00082F52                            ; ===========================================================================
00082F52                            
00082F52                            loc_71CE0:
00082F52 4EBA 0000                  		jsr	sub_71D9E(pc)
00082F56 4EBA 0000                  		jsr	sub_71DC6(pc)
00082F5A 6000 0000                  		bra.w	loc_71E24
00082F5E                            ; End of function sub_71CCA
00082F5E                            
00082F5E                            
00082F5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00082F5E                            
00082F5E                            
00082F5E                            sub_71CEC:				; XREF: sub_71CCA
00082F5E 286D 0004                  		movea.l	4(a5),a4
00082F62 0895 0001                  		bclr	#1,(a5)
00082F66                            
00082F66                            loc_71CF4:
00082F66 7A00                       		moveq	#0,d5
00082F68 1A1C                       		move.b	(a4)+,d5
00082F6A 0C05 00E0                  		cmpi.b	#-$20,d5
00082F6E 6500                       		bcs.s	loc_71D04
00082F70 4EBA 0000                  		jsr	sub_72A5A(pc)
00082F74 60F0                       		bra.s	loc_71CF4
00082F76                            ; ===========================================================================
00082F76                            
00082F76                            loc_71D04:
00082F76 4EBA 0000                  		jsr	sub_726FE(pc)
00082F7A 4A05                       		tst.b	d5
00082F7C 6A00                       		bpl.s	loc_71D1A
00082F7E 4EBA 0000                  		jsr	sub_71D22(pc)
00082F82 1A1C                       		move.b	(a4)+,d5
00082F84 6A00                       		bpl.s	loc_71D1A
00082F86 534C                       		subq.w	#1,a4
00082F88 6000 0000                  		bra.w	sub_71D60
00082F8C                            ; ===========================================================================
00082F8C                            
00082F8C                            loc_71D1A:
00082F8C 4EBA 0000                  		jsr	sub_71D40(pc)
00082F90 6000 0000                  		bra.w	sub_71D60
00082F94                            ; End of function sub_71CEC
00082F94                            
00082F94                            
00082F94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00082F94                            
00082F94                            
00082F94                            sub_71D22:				; XREF: sub_71CEC
00082F94 0405 0080                  		subi.b	#$80,d5
00082F98 6700                       		beq.s	loc_71D58
00082F9A DA2D 0008                  		add.b	8(a5),d5
00082F9E 0245 007F                  		andi.w	#$7F,d5
00082FA2 E34D                       		lsl.w	#1,d5
00082FA4 41FA 0000                  		lea	word_72790(pc),a0
00082FA8 3C30 5000                  		move.w	(a0,d5.w),d6
00082FAC 3B46 0010                  		move.w	d6,$10(a5)
00082FB0 4E75                       		rts	
00082FB2                            ; End of function sub_71D22
00082FB2                            
00082FB2                            
00082FB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00082FB2                            
00082FB2                            
00082FB2                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00082FB2 1005                       		move.b	d5,d0
00082FB4 122D 0002                  		move.b	2(a5),d1
00082FB8                            
00082FB8                            loc_71D46:
00082FB8 5301                       		subq.b	#1,d1
00082FBA 6700                       		beq.s	loc_71D4E
00082FBC D005                       		add.b	d5,d0
00082FBE 60F8                       		bra.s	loc_71D46
00082FC0                            ; ===========================================================================
00082FC0                            
00082FC0                            loc_71D4E:
00082FC0 1B40 000F                  		move.b	d0,$F(a5)
00082FC4 1B40 000E                  		move.b	d0,$E(a5)
00082FC8 4E75                       		rts	
00082FCA                            ; End of function sub_71D40
00082FCA                            
00082FCA                            ; ===========================================================================
00082FCA                            
00082FCA                            loc_71D58:				; XREF: sub_71D22
00082FCA 08D5 0001                  		bset	#1,(a5)
00082FCE 426D 0010                  		clr.w	$10(a5)
00082FD2                            
00082FD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00082FD2                            
00082FD2                            
00082FD2                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
00082FD2 2B4C 0004                  		move.l	a4,4(a5)
00082FD6 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00082FDC 0815 0004                  		btst	#4,(a5)
00082FE0 6600                       		bne.s	locret_71D9C
00082FE2 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
00082FE8 422D 000C                  		clr.b	$C(a5)
00082FEC 0815 0003                  		btst	#3,(a5)
00082FF0 6700                       		beq.s	locret_71D9C
00082FF2 206D 0014                  		movea.l	$14(a5),a0
00082FF6 1B58 0018                  		move.b	(a0)+,$18(a5)
00082FFA 1B58 0019                  		move.b	(a0)+,$19(a5)
00082FFE 1B58 001A                  		move.b	(a0)+,$1A(a5)
00083002 1018                       		move.b	(a0)+,d0
00083004 E208                       		lsr.b	#1,d0
00083006 1B40 001B                  		move.b	d0,$1B(a5)
0008300A 426D 001C                  		clr.w	$1C(a5)
0008300E                            
0008300E                            locret_71D9C:
0008300E 4E75                       		rts	
00083010                            ; End of function sub_71D60
00083010                            
00083010                            
00083010                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083010                            
00083010                            
00083010                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
00083010 4A2D 0012                  		tst.b	$12(a5)
00083014 6700                       		beq.s	locret_71DC4
00083016 532D 0012                  		subq.b	#1,$12(a5)
0008301A 6600                       		bne.s	locret_71DC4
0008301C 08D5 0001                  		bset	#1,(a5)
00083020 4A2D 0001                  		tst.b	1(a5)
00083024 6B00 0000                  		bmi.w	loc_71DBE
00083028 4EBA 0000                  		jsr	sub_726FE(pc)
0008302C 584F                       		addq.w	#4,sp
0008302E 4E75                       		rts	
00083030                            ; ===========================================================================
00083030                            
00083030                            loc_71DBE:
00083030 4EBA 0000                  		jsr	sub_729A0(pc)
00083034 584F                       		addq.w	#4,sp
00083036                            
00083036                            locret_71DC4:
00083036 4E75                       		rts	
00083038                            ; End of function sub_71D9E
00083038                            
00083038                            
00083038                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083038                            
00083038                            
00083038                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
00083038 584F                       		addq.w	#4,sp
0008303A 0815 0003                  		btst	#3,(a5)
0008303E 6700                       		beq.s	locret_71E16
00083040 4A2D 0018                  		tst.b	$18(a5)
00083044 6700                       		beq.s	loc_71DDA
00083046 532D 0018                  		subq.b	#1,$18(a5)
0008304A 4E75                       		rts	
0008304C                            ; ===========================================================================
0008304C                            
0008304C                            loc_71DDA:
0008304C 532D 0019                  		subq.b	#1,$19(a5)
00083050 6700                       		beq.s	loc_71DE2
00083052 4E75                       		rts	
00083054                            ; ===========================================================================
00083054                            
00083054                            loc_71DE2:
00083054 206D 0014                  		movea.l	$14(a5),a0
00083058 1B68 0001 0019             		move.b	1(a0),$19(a5)
0008305E 4A2D 001B                  		tst.b	$1B(a5)
00083062 6600                       		bne.s	loc_71DFE
00083064 1B68 0003 001B             		move.b	3(a0),$1B(a5)
0008306A 442D 001A                  		neg.b	$1A(a5)
0008306E 4E75                       		rts	
00083070                            ; ===========================================================================
00083070                            
00083070                            loc_71DFE:
00083070 532D 001B                  		subq.b	#1,$1B(a5)
00083074 1C2D 001A                  		move.b	$1A(a5),d6
00083078 4886                       		ext.w	d6
0008307A DC6D 001C                  		add.w	$1C(a5),d6
0008307E 3B46 001C                  		move.w	d6,$1C(a5)
00083082 DC6D 0010                  		add.w	$10(a5),d6
00083086 594F                       		subq.w	#4,sp
00083088                            
00083088                            locret_71E16:
00083088 4E75                       		rts	
0008308A                            ; End of function sub_71DC6
0008308A                            
0008308A                            
0008308A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008308A                            
0008308A                            
0008308A                            sub_71E18:				; XREF: sub_71CCA
0008308A 0815 0001                  		btst	#1,(a5)
0008308E 6600                       		bne.s	locret_71E48
00083090 3C2D 0010                  		move.w	$10(a5),d6
00083094 6700                       		beq.s	loc_71E4A
00083096                            
00083096                            loc_71E24:				; XREF: sub_71CCA
00083096 102D 001E                  		move.b	$1E(a5),d0
0008309A 4880                       		ext.w	d0
0008309C DC40                       		add.w	d0,d6
0008309E 0815 0002                  		btst	#2,(a5)
000830A2 6600                       		bne.s	locret_71E48
000830A4 3206                       		move.w	d6,d1
000830A6 E049                       		lsr.w	#8,d1
000830A8 103C 00A4                  		move.b	#-$5C,d0
000830AC 4EBA 0000                  		jsr	sub_72722(pc)
000830B0 1206                       		move.b	d6,d1
000830B2 103C 00A0                  		move.b	#-$60,d0
000830B6 4EBA 0000                  		jsr	sub_72722(pc)
000830BA                            
000830BA                            locret_71E48:
000830BA 4E75                       		rts	
000830BC                            ; ===========================================================================
000830BC                            
000830BC                            loc_71E4A:
000830BC 08D5 0001                  		bset	#1,(a5)
000830C0 4E75                       		rts	
000830C2                            ; End of function sub_71E18
000830C2                            
000830C2                            ; ===========================================================================
000830C2                            
000830C2                            loc_71E50:				; XREF: sub_71B4C
000830C2 6B00                       		bmi.s	loc_71E94
000830C4 0C2E 0002 0003             		cmpi.b	#2,3(a6)
000830CA 6700 0000                  		beq.w	loc_71EFE
000830CE 1D7C 0002 0003             		move.b	#2,3(a6)
000830D4 7602                       		moveq	#2,d3
000830D6 103C 00B4                  		move.b	#-$4C,d0
000830DA 7200                       		moveq	#0,d1
000830DC                            
000830DC                            loc_71E6A:
000830DC 4EBA 0000                  		jsr	sub_7272E(pc)
000830E0 4EBA 0000                  		jsr	sub_72764(pc)
000830E4 5200                       		addq.b	#1,d0
000830E6 51CB FFF4                  		dbf	d3,loc_71E6A
000830EA                            
000830EA 7602                       		moveq	#2,d3
000830EC 7028                       		moveq	#$28,d0
000830EE                            
000830EE                            loc_71E7C:
000830EE 1203                       		move.b	d3,d1
000830F0 4EBA 0000                  		jsr	sub_7272E(pc)
000830F4 5801                       		addq.b	#4,d1
000830F6 4EBA 0000                  		jsr	sub_7272E(pc)
000830FA 51CB FFF2                  		dbf	d3,loc_71E7C
000830FE                            
000830FE 4EBA 0000                  		jsr	sub_729B6(pc)
00083102 6000 FD04                  		bra.w	loc_71C44
00083106                            ; ===========================================================================
00083106                            
00083106                            loc_71E94:				; XREF: loc_71E50
00083106 422E 0003                  		clr.b	3(a6)
0008310A 7630                       		moveq	#$30,d3
0008310C 4BEE 0040                  		lea	$40(a6),a5
00083110 7807                       		moveq	#7,d4					; MJ: number of YM2612 based channels
00083112                            
00083112                            loc_71EA0:
00083112 0815 0007                  		btst	#7,(a5)
00083116 6700                       		beq.s	loc_71EB8
00083118 0815 0002                  		btst	#2,(a5)
0008311C 6600                       		bne.s	loc_71EB8
0008311E 103C 00B4                  		move.b	#-$4C,d0
00083122 122D 000A                  		move.b	$A(a5),d1
00083126 4EBA 0000                  		jsr	sub_72722(pc)
0008312A                            
0008312A                            loc_71EB8:
0008312A DAC3                       		adda.w	d3,a5
0008312C 51CC FFE4                  		dbf	d4,loc_71EA0
00083130                            
00083130 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
00083134 7802                       		moveq	#2,d4
00083136                            
00083136                            loc_71EC4:
00083136 0815 0007                  		btst	#7,(a5)
0008313A 6700                       		beq.s	loc_71EDC
0008313C 0815 0002                  		btst	#2,(a5)
00083140 6600                       		bne.s	loc_71EDC
00083142 103C 00B4                  		move.b	#-$4C,d0
00083146 122D 000A                  		move.b	$A(a5),d1
0008314A 4EBA 0000                  		jsr	sub_72722(pc)
0008314E                            
0008314E                            loc_71EDC:
0008314E DAC3                       		adda.w	d3,a5
00083150 51CC FFE4                  		dbf	d4,loc_71EC4
00083154                            
00083154 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
00083158 0815 0007                  		btst	#7,(a5)
0008315C 6700                       		beq.s	loc_71EFE
0008315E 0815 0002                  		btst	#2,(a5)
00083162 6600                       		bne.s	loc_71EFE
00083164 103C 00B4                  		move.b	#-$4C,d0
00083168 122D 000A                  		move.b	$A(a5),d1
0008316C 4EBA 0000                  		jsr	sub_72722(pc)
00083170                            
00083170                            loc_71EFE:
00083170 6000 FC96                  		bra.w	loc_71C44
00083174                            
00083174                            ; ---------------------------------------------------------------------------
00083174                            ; Subroutine to	play a sound or	music track
00083174                            ; ---------------------------------------------------------------------------
00083174                            
00083174                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083174                            
00083174                            
00083174                            Sound_Play:				; XREF: sub_71B4C
00083174 2079 0008 2AE8             		movea.l	(Go_SoundTypes).l,a0
0008317A 43EE 000A                  		lea	$A(a6),a1	; load music track number
0008317E 1616                       		move.b	0(a6),d3
00083180 7802                       		moveq	#2,d4
00083182                            
00083182                            loc_71F12:
00083182 1011                       		move.b	(a1),d0		; move track number to d0
00083184 1200                       		move.b	d0,d1
00083186 4219                       		clr.b	(a1)+
00083188 0400 0081                  		subi.b	#$81,d0
0008318C 6500                       		bcs.s	loc_71F3E
0008318E 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00083194 6700                       		beq.s	loc_71F2C
00083196 1D41 000A                  		move.b	d1,$A(a6)
0008319A 6000                       		bra.s	loc_71F3E
0008319C                            ; ===========================================================================
0008319C                            
0008319C                            loc_71F2C:
0008319C 0240 007F                  		andi.w	#$7F,d0
000831A0 1430 0000                  		move.b	(a0,d0.w),d2
000831A4 B403                       		cmp.b	d3,d2
000831A6 6500                       		bcs.s	loc_71F3E
000831A8 1602                       		move.b	d2,d3
000831AA 1D41 0009                  		move.b	d1,9(a6)	; set music flag
000831AE                            
000831AE                            loc_71F3E:
000831AE 51CC FFD2                  		dbf	d4,loc_71F12
000831B2                            
000831B2 4A03                       		tst.b	d3
000831B4 6B00                       		bmi.s	locret_71F4A
000831B6 1C83                       		move.b	d3,0(a6)
000831B8                            
000831B8                            locret_71F4A:
000831B8 4E75                       		rts	
000831BA                            ; End of function Sound_Play
000831BA                            
000831BA                            
000831BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000831BA                            
000831BA                            
000831BA                            Sound_ChkValue:				; XREF: sub_71B4C
000831BA 7E00                       		moveq	#0,d7
000831BC 1E2E 0009                  		move.b	9(a6),d7
000831C0 6700 0000                  		beq.w	Sound_E4
000831C4 6A00                       		bpl.s	locret_71F8C
000831C6 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
000831CC 0C07 009F                  		cmpi.b	#$9F,d7
000831D0 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
000831D4 0C07 00A0                  		cmpi.b	#$A0,d7
000831D8 6500 0000                  		bcs.w	locret_71F8C
000831DC 0C07 00CF                  		cmpi.b	#$CF,d7
000831E0 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
000831E4 0C07 00D0                  		cmpi.b	#$D0,d7
000831E8 6500 0000                  		bcs.w	locret_71F8C
000831EC 0C07 00D1                  		cmpi.b	#$D1,d7
000831F0 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
000831F4 0C07 00DF                  		cmpi.b	#$DF,d7
000831F8 6500 0000                  		blo.w	Sound_D1toDF	; sound	$D1-$DF
000831FC 0C07 00E4                  		cmpi.b	#$E4,d7
00083200 6300                       		bls.s	Sound_E0toE4	; sound	$E0-$E4
00083202                            
00083202                            locret_71F8C:
00083202 4E75                       		rts	
00083204                            ; ===========================================================================
00083204                            
00083204                            Sound_E0toE4:				; XREF: Sound_ChkValue
00083204 0407 00E0                  		subi.b	#$E0,d7
00083208 E54F                       		lsl.w	#2,d7
0008320A 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
0008320E                            ; ===========================================================================
0008320E                            
0008320E                            Sound_ExIndex:
0008320E 6000 0000                  		bra.w	Sound_E0
00083212                            ; ===========================================================================
00083212 6000 0000                  		bra.w	Sound_E1
00083216                            ; ===========================================================================
00083216 6000 0000                  		bra.w	Sound_E2
0008321A                            ; ===========================================================================
0008321A 6000 0000                  		bra.w	Sound_E3
0008321E                            ; ===========================================================================
0008321E 6000 0000                  		bra.w	Sound_E4
00083222                            ; ===========================================================================
00083222                            ; ---------------------------------------------------------------------------
00083222                            ; Play "Say-gaa" PCM sound
00083222                            ; ---------------------------------------------------------------------------
00083222                            
00083222                            Sound_E1:
00083222 33FC 0100 00A1 1100 0839+  		StopZ80						; MJ: request Z80 stop "ON"
00083234 45F9 0000 0000             		lea	(SegaPCM).l,a2				; MJ: load sample address
0008323A 47F9 00A0 4000             		lea	($A04000).l,a3				; MJ: load YM2612 port
00083240 16FC 002A                  		move.b	#$2A,(a3)+				; MJ: set YM2612 address to the PCM data port
00083244 283C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM)-$01,d4		; MJ: prepare size
0008324A 3604                       		move.w	d4,d3					; MJ: get lower word size
0008324C 4844                       		swap	d4					; MJ: get upper word size
0008324E                            
0008324E                            PlayPCM_Loop:
0008324E 169A                       		move.b	(a2)+,(a3)				; MJ: save sample data to port
00083250 702B                       		moveq	#$2B,d0					; MJ: set delay time
00083252 51C8 FFFE                  		dbf	d0,*					; MJ: delay...
00083256 51CB FFF6                  		dbf	d3,PlayPCM_Loop				; MJ: repeat til done
0008325A 51CC FFF2                  		dbf	d4,PlayPCM_Loop				; MJ: ''
0008325E 16BC 0080                  		move.b	#$80,(a3)				; MJ: save mute data to port
00083262 584F                       		addq.w	#$04,sp					; MJ: skip return address
00083264 534B                       		subq.w	#$01,a3					; MJ: move back to address port
00083266 4A13                       		tst.b	(a3)					; MJ: is the YM2612 busy?
00083268 6BFC                       		bmi.s	*-$02					; MJ: if so, branch and recheck
0008326A 16BC 002A                  		move.b	#$2A,(a3)				; MJ: write address (set it back to DAC port for the Z80)
0008326E 33FC 0000 00A1 1100        		StartZ80					; MJ: request Z80 stop "OFF"
00083276 4E75                       		rts						; MJ: return
00083278                            
00083278                            ; ===========================================================================
00083278                            ; ---------------------------------------------------------------------------
00083278                            ; Play music track $81-$9F
00083278                            ; ---------------------------------------------------------------------------
00083278                            
00083278                            Sound_81to9F:				; XREF: Sound_ChkValue
00083278                            
00083278                            
00083278 33FC 0100 00A1 1100 0839+  		StopZ80
0008328A 41F9 0000 0000             		lea	(StopSample).l,a0				; MJ: load stop sample address
00083290 43F9 00A0 02E6             		lea	($A00000+PCM1_Sample).l,a1			; MJ: load PCM 1 slot address
00083296 12D8                       		move.b	(a0)+,(a1)+					; MJ: set address of sample
00083298 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
0008329A 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
0008329C 13FC 0064 00A0 0047        		move.b	#(CUPCM1_NewSample&$FF),($A00000+CU_Stack).l	; MJ: set routine to run
000832A4 13FC 0002 00A0 0048        		move.b	#(CUPCM1_NewSample>>$08),($A00000+CU_Stack+1).l	; MJ: ''
000832AC 13FC 00C9 00A0 01D2        		move.b	#%11001001,($A00000+CUPCM1_RET).l		; MJ: change "NOP" to "RET"
000832B4 41F9 0000 0000             		lea	(StopSample).l,a0				; MJ: load stop sample address
000832BA 43F9 00A0 02E9             		lea	($A00000+PCM2_Sample).l,a1			; MJ: load PCM 2 slot address
000832C0 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
000832C2 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
000832C4 12D8                       		move.b	(a0)+,(a1)+					; MJ: ''
000832C6 13FC 0028 00A0 01D3        		move.b	#%00101000,($A00000+CUPCM2_RET).l		; MJ: change "JR NZ" to "JR Z"
000832CE 33FC 0000 00A1 1100        		StartZ80
000832D6                            
000832D6                            
000832D6                            
000832D6 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
000832DA 6600                       		bne.s	loc_72024	; if not, branch
000832DC 4A2E 0027                  		tst.b	$27(a6)
000832E0 6600 0000                  		bne.w	loc_721B6
000832E4 4BEE 0040                  		lea	$40(a6),a5
000832E8 700A                       		moveq	#10,d0					; MJ: number of channels in total
000832EA                            
000832EA                            loc_71FE6:
000832EA 0895 0002                  		bclr	#2,(a5)
000832EE DAFC 0030                  		adda.w	#$30,a5
000832F2 51C8 FFF6                  		dbf	d0,loc_71FE6
000832F6                            
000832F6 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
000832FA 7005                       		moveq	#5,d0
000832FC                            
000832FC                            loc_71FF8:
000832FC 0895 0007                  		bclr	#7,(a5)
00083300 DAFC 0030                  		adda.w	#$30,a5
00083304 51C8 FFF6                  		dbf	d0,loc_71FF8
00083308 4216                       		clr.b	0(a6)
0008330A 204E                       		movea.l	a6,a0
0008330C 43EE 03D0                  		lea	$3D0(a6),a1				; MJ: new SFX location
00083310 303C 0087                  		move.w	#$87,d0
00083314                            
00083314                            loc_72012:
00083314 22D8                       		move.l	(a0)+,(a1)+
00083316 51C8 FFFC                  		dbf	d0,loc_72012
0008331A                            
0008331A 1D7C 0080 0027             		move.b	#$80,$27(a6)
00083320 4216                       		clr.b	0(a6)
00083322 6000                       		bra.s	loc_7202C
00083324                            ; ===========================================================================
00083324                            
00083324                            loc_72024:
00083324 422E 0027                  		clr.b	$27(a6)
00083328 422E 0026                  		clr.b	$26(a6)
0008332C                            
0008332C                            loc_7202C:
0008332C 4EBA 0000                  		jsr	sub_725CA(pc)
00083330 2879 0008 2AF8             		movea.l	(off_719A0).l,a4
00083336 0407 0081                  		subi.b	#$81,d7
0008333A 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
00083340 2879 0008 2AF0             		movea.l	(Go_MusicIndex).l,a4
00083346 E54F                       		lsl.w	#2,d7
00083348 2874 7000                  		movea.l	(a4,d7.w),a4
0008334C 7000                       		moveq	#0,d0
0008334E 3014                       		move.w	(a4),d0
00083350 D08C                       		add.l	a4,d0
00083352 2D40 0018                  		move.l	d0,$18(a6)
00083356 102C 0005                  		move.b	5(a4),d0
0008335A 1D40 0028                  		move.b	d0,$28(a6)
0008335E 4A2E 002A                  		tst.b	$2A(a6)
00083362 6700                       		beq.s	loc_72068
00083364 102E 0029                  		move.b	$29(a6),d0
00083368                            
00083368                            loc_72068:
00083368 1D40 0002                  		move.b	d0,2(a6)
0008336C 1D40 0001                  		move.b	d0,1(a6)
00083370 7200                       		moveq	#0,d1
00083372 264C                       		movea.l	a4,a3
00083374 5C4C                       		addq.w	#6,a4
00083376 7E00                       		moveq	#0,d7
00083378 1E2B 0002                  		move.b	2(a3),d7
0008337C 6700 0000                  		beq.w	loc_72114
00083380 5307                       		subq.b	#1,d7
00083382 123C 00C0                  		move.b	#-$40,d1
00083386 182B 0004                  		move.b	4(a3),d4
0008338A 7C30                       		moveq	#$30,d6
0008338C 1A3C 0001                  		move.b	#1,d5
00083390 43EE 0040                  		lea	$40(a6),a1
00083394 45FA 0000                  		lea	byte_721BA(pc),a2
00083398                            
00083398                            loc_72098:
00083398 08D1 0007                  		bset	#7,(a1)
0008339C 135A 0001                  		move.b	(a2)+,1(a1)
000833A0 1344 0002                  		move.b	d4,2(a1)
000833A4 1346 000D                  		move.b	d6,$D(a1)
000833A8 1341 000A                  		move.b	d1,$A(a1)
000833AC 1345 000E                  		move.b	d5,$E(a1)
000833B0 7000                       		moveq	#0,d0
000833B2 3340 0010                  		move.w	d0,$10(a1)				; MJ: clear FM's frequency (ensures no frequency writing)
000833B6 301C                       		move.w	(a4)+,d0
000833B8 D08B                       		add.l	a3,d0
000833BA 2340 0004                  		move.l	d0,4(a1)
000833BE 335C 0008                  		move.w	(a4)+,8(a1)
000833C2 D2C6                       		adda.w	d6,a1
000833C4 51CF FFD2                  		dbf	d7,loc_72098
000833C8 702B                       		moveq	#$2B,d0					; MJ: set YM2612 address to DAC/FM6 switch
000833CA 123C 0080                  		move.b	#%10000000,d1				; MJ: set to turn DAC on
000833CE 0C2B 0008 0002             		cmpi.b	#8,2(a3)				; MJ: changed to 8 (8 = 6FM channels, no DAC)
000833D4 6600                       		bne.s	loc_720D8
000833D6                            	;	moveq	#$2B,d0					; MJ: removed...
000833D6 7200                       		moveq	#0,d1
000833D8 4EBA 0000                  		jsr	sub_7272E(pc)
000833DC 6000 0000                  		bra.w	loc_72114
000833E0                            ; ===========================================================================
000833E0                            
000833E0                            loc_720D8:
000833E0 4EBA 0000                  		jsr	sub_7272E(pc)				; MJ: added... (turn DAC on)
000833E4 7028                       		moveq	#$28,d0
000833E6 7206                       		moveq	#6,d1
000833E8 4EBA 0000                  		jsr	sub_7272E(pc)
000833EC 103C 0042                  		move.b	#$42,d0
000833F0 727F                       		moveq	#$7F,d1
000833F2 4EBA 0000                  		jsr	sub_72764(pc)
000833F6 103C 004A                  		move.b	#$4A,d0
000833FA 727F                       		moveq	#$7F,d1
000833FC 4EBA 0000                  		jsr	sub_72764(pc)
00083400 103C 0046                  		move.b	#$46,d0
00083404 727F                       		moveq	#$7F,d1
00083406 4EBA 0000                  		jsr	sub_72764(pc)
0008340A 103C 004E                  		move.b	#$4E,d0
0008340E 727F                       		moveq	#$7F,d1
00083410 4EBA 0000                  		jsr	sub_72764(pc)
00083414 103C 00B6                  		move.b	#-$4A,d0
00083418 123C 00C0                  		move.b	#-$40,d1
0008341C 4EBA 0000                  		jsr	sub_72764(pc)
00083420                            
00083420                            loc_72114:
00083420 7A02                       		moveq	#$02,d5					; EXT: set PSG to delay for 1 extra frame (This is to match the PSG with the FM/DAC which is delayed a frame by the Z80)
00083422 7E00                       		moveq	#0,d7
00083424 1E2B 0003                  		move.b	3(a3),d7
00083428 6700                       		beq.s	loc_72154
0008342A 5307                       		subq.b	#1,d7
0008342C 43EE 01C0                  		lea	$1C0(a6),a1				; MJ: new BGM/SFX location
00083430 45FA 0000                  		lea	byte_721C2(pc),a2
00083434                            
00083434                            loc_72126:
00083434 08D1 0007                  		bset	#7,(a1)
00083438 135A 0001                  		move.b	(a2)+,1(a1)
0008343C 1344 0002                  		move.b	d4,2(a1)
00083440 1346 000D                  		move.b	d6,$D(a1)
00083444 1345 000E                  		move.b	d5,$E(a1)
00083448 337C FFFF 0010             		move.w	#$FFFF,$10(a1)				; MJ: clear PSG's frequency (ensures no frequency writing)
0008344E 137C 0001 0012             		move.b	#$01,$12(a1)				; MJ: set key release rate to 1
00083454 7000                       		moveq	#0,d0
00083456 301C                       		move.w	(a4)+,d0
00083458 D08B                       		add.l	a3,d0
0008345A 2340 0004                  		move.l	d0,4(a1)
0008345E 335C 0008                  		move.w	(a4)+,8(a1)
00083462 101C                       		move.b	(a4)+,d0
00083464 135C 000B                  		move.b	(a4)+,$B(a1)
00083468 D2C6                       		adda.w	d6,a1
0008346A 51CF FFC8                  		dbf	d7,loc_72126
0008346E                            
0008346E                            loc_72154:
0008346E 43EE 0250                  		lea	$250(a6),a1				; MJ: new SFX location
00083472 7E05                       		moveq	#5,d7
00083474                            
00083474                            loc_7215A:
00083474 4A11                       		tst.b	(a1)
00083476 6A00 0000                  		bpl.w	loc_7217C
0008347A 7000                       		moveq	#0,d0
0008347C 1029 0001                  		move.b	1(a1),d0
00083480 6B00                       		bmi.s	loc_7216E
00083482 5500                       		subq.b	#2,d0
00083484 E508                       		lsl.b	#2,d0
00083486 6000                       		bra.s	loc_72170
00083488                            ; ===========================================================================
00083488                            
00083488                            loc_7216E:
00083488 E608                       		lsr.b	#3,d0
0008348A                            
0008348A                            loc_72170:
0008348A 41FA 0000                  		lea	dword_722CC(pc),a0
0008348E 2070 0000                  		movea.l	(a0,d0.w),a0
00083492 08D0 0002                  		bset	#2,(a0)
00083496                            
00083496                            loc_7217C:
00083496 D2C6                       		adda.w	d6,a1
00083498 51CF FFDA                  		dbf	d7,loc_7215A
0008349C                            
0008349C 4A6E 0370                  		tst.w	$370(a6)				; MJ: new SFX location
000834A0 6A00                       		bpl.s	loc_7218E
000834A2 08EE 0002 0130             		bset	#2,$130(a6)				; MJ: new BGM location
000834A8                            
000834A8                            loc_7218E:
000834A8 4A6E 03A0                  		tst.w	$3A0(a6)				; MJ: new SFX location
000834AC 6A00                       		bpl.s	loc_7219A
000834AE 08EE 0002 0220             		bset	#2,$220(a6)				; MJ: new BGM location
000834B4                            
000834B4                            
000834B4                            loc_7219A:
000834B4 4BEE 00A0                  		lea	$A0(a6),a5				; MJ: new FM location
000834B8 7805                       		moveq	#5,d4
000834BA                            
000834BA                            loc_721A0:
000834BA 4EBA 0000                  		jsr	sub_726FE(pc)
000834BE DAC6                       		adda.w	d6,a5
000834C0 51CC FFF8                  		dbf	d4,loc_721A0
000834C4 7802                       		moveq	#2,d4
000834C6                            
000834C6                            loc_721AC:
000834C6 4EBA 0000                  		jsr	sub_729A0(pc)
000834CA DAC6                       		adda.w	d6,a5
000834CC 51CC FFF8                  		dbf	d4,loc_721AC
000834D0                            
000834D0                            loc_721B6:
000834D0 584F                       		addq.w	#4,sp
000834D2 4E75                       		rts	
000834D4                            ; ===========================================================================
000834D4 0606 0001 0204 0506 00     byte_721BA:	dc.b 6,	6, 0, 1, 2, 4, 5, 6, 0			; MJ: extra 6 (for PCM 2)
000834DE 00                         		even
000834DE 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
000834E2                            		even
000834E2                            ; ===========================================================================
000834E2                            ; ---------------------------------------------------------------------------
000834E2                            ; Play normal sound effect
000834E2                            ; ---------------------------------------------------------------------------
000834E2                            
000834E2                            Sound_D1toDF:
000834E2 4A2E 0027                  		tst.b	$27(a6)
000834E6 6600 0000                  		bne.w	loc_722C6
000834EA 4A2E 0004                  		tst.b	4(a6)
000834EE 6600 0000                  		bne.w	loc_722C6
000834F2 4A2E 0024                  		tst.b	$24(a6)
000834F6 6600 0000                  		bne.w	loc_722C6
000834FA 4238 C900                  		clr.b	($FFFFC900).w
000834FE 0C07 00D1                  		cmp.b	#$D1,d7		; is this the Spin Dash sound?
00083502 6600                       		bne.s	@cont3	; if not, branch
00083504 3F00                       		move.w	d0,-(sp)
00083506 1038 C902                  		move.b	($FFFFC902).w,d0	; store extra frequency
0008350A 4A38 C901                  		tst.b	($FFFFC901).w	; is the Spin Dash timer active?
0008350E 6600                       		bne.s	@cont1		; if it is, branch
00083510 103C 00FF                  		move.b	#-1,d0		; otherwise, reset frequency (becomes 0 on next line)
00083514                            		
00083514                            @cont1:
00083514 5200                       		addq.b	#1,d0
00083516 0C00 000C                  		cmp.b	#$C,d0		; has the limit been reached?
0008351A 6400                       		bcc.s	@cont2		; if it has, branch
0008351C 11C0 C902                  		move.b	d0,($FFFFC902).w	; otherwise, set new frequency
00083520                            		
00083520                            @cont2:
00083520 11FC 0001 C900             		move.b	#1,($FFFFC900).w	; set flag
00083526 11FC 003C C901             		move.b	#60,($FFFFC901).w	; set timer
0008352C 301F                       		move.w	(sp)+,d0
0008352E                            		
0008352E                            @cont3:
0008352E 2079 0008 2AF4             		movea.l	(Go_SoundIndex).l,a0
00083534 0407 00A1                  		sub.b	#$A1,d7
00083538 6000 0000                  		bra	SoundEffects_Common
0008353C                            
0008353C                            Sound_A0toCF:				; XREF: Sound_ChkValue
0008353C 4A2E 0027                  		tst.b	$27(a6)
00083540 6600 0000                  		bne.w	loc_722C6
00083544 4A2E 0004                  		tst.b	4(a6)
00083548 6600 0000                  		bne.w	loc_722C6
0008354C 4A2E 0024                  		tst.b	$24(a6)
00083550 6600 0000                  		bne.w	loc_722C6
00083554 4238 C900                  		clr.b	($FFFFC900).w		
00083558 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
0008355C 6600                       		bne.s	Sound_notB5	; if not, branch
0008355E 4A2E 002B                  		tst.b	$2B(a6)
00083562 6600                       		bne.s	loc_721EE
00083564 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
00083568                            
00083568                            loc_721EE:
00083568 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
0008356E                            
0008356E                            Sound_notB5:
0008356E 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
00083572 6600                       		bne.s	Sound_notA7	; if not, branch
00083574 4A2E 002C                  		tst.b	$2C(a6)
00083578 6600 0000                  		bne.w	locret_722C4
0008357C 1D7C 0080 002C             		move.b	#$80,$2C(a6)
00083582                            
00083582                            Sound_notA7:
00083582 2079 0008 2AF4             		movea.l	(Go_SoundIndex).l,a0
00083588 0407 00A0                  		subi.b	#$A0,d7
0008358C                            SoundEffects_Common:
0008358C E54F                       		lsl.w	#2,d7
0008358E 2670 7000                  		movea.l	(a0,d7.w),a3
00083592 224B                       		movea.l	a3,a1
00083594 7200                       		moveq	#0,d1
00083596 3219                       		move.w	(a1)+,d1
00083598 D28B                       		add.l	a3,d1
0008359A 1A19                       		move.b	(a1)+,d5
0008359C 1E19                       		move.b	(a1)+,d7
0008359E 5307                       		subq.b	#1,d7
000835A0 7C30                       		moveq	#$30,d6
000835A2                            
000835A2                            loc_72228:
000835A2 7600                       		moveq	#0,d3
000835A4 1629 0001                  		move.b	1(a1),d3
000835A8 7402                       		moveq	#$02,d2					; EXT: set PSG to delay for 1 extra frame (This is to match the PSG with the FM/DAC which is delayed a frame by the Z80)
000835AA 1803                       		move.b	d3,d4
000835AC 6B00                       		bmi.s	loc_72244
000835AE 143C 0001                  		move.b	#$01,d2					; EXT: set DAC/FM to delay for 0 frames like normal (these have an auto delay of 1 frame in the Z80)
000835B2 5543                       		subq.w	#2,d3
000835B4 E54B                       		lsl.w	#2,d3
000835B6 4BFA 0000                  		lea	dword_722CC(pc),a5
000835BA 2A75 3000                  		movea.l	(a5,d3.w),a5
000835BE 08D5 0002                  		bset	#2,(a5)
000835C2 6000                       		bra.s	loc_7226E
000835C4                            		
000835C4                            ; ===========================================================================
000835C4                            
000835C4                            loc_72244:
000835C4 E64B                       		lsr.w	#3,d3
000835C6 4BFA 0000                  		lea	dword_722CC(pc),a5
000835CA 2A75 3000                  		movea.l	(a5,d3.w),a5
000835CE 08D5 0002                  		bset	#2,(a5)
000835D2 0C04 00C0                  		cmpi.b	#$C0,d4
000835D6 6600                       		bne.s	loc_7226E
000835D8 1004                       		move.b	d4,d0
000835DA 0000 001F                  		ori.b	#$1F,d0
000835DE 13C0 00C0 0011             		move.b	d0,($C00011).l
000835E4 0840 0005                  		bchg	#5,d0
000835E8 13C0 00C0 0011             		move.b	d0,($C00011).l
000835EE                            
000835EE                            loc_7226E:
000835EE 4BFA 0000                  		lea	dword_722EC(pc),a5
000835F2 2A75 3000                  		movea.l	(a5,d3.w),a5
000835F6 244D                       		movea.l	a5,a2
000835F8 700B                       		moveq	#$B,d0
000835FA                            
000835FA                            loc_72276:
000835FA 429A                       		clr.l	(a2)+
000835FC 51C8 FFFC                  		dbf	d0,loc_72276
00083600                            
00083600 3A99                       		move.w	(a1)+,(a5)
00083602 1B45 0002                  		move.b	d5,2(a5)
00083606 7000                       		moveq	#0,d0
00083608 3019                       		move.w	(a1)+,d0
0008360A D08B                       		add.l	a3,d0
0008360C 2B40 0004                  		move.l	d0,4(a5)
00083610 3B59 0008                  		move.w	(a1)+,8(a5)
00083614 4A38 C900                  		tst.b	($FFFFC900).w	; is the Spin Dash sound playing?
00083618 6700                       		beq.s	@cont		; if not, branch
0008361A 3F00                       		move.w	d0,-(sp)
0008361C 1038 C902                  		move.b	($FFFFC902).w,d0
00083620 D12D 0008                  		add.b	d0,8(a5)
00083624 301F                       		move.w	(sp)+,d0
00083626                            		
00083626                            @cont:
00083626 1B42 000E                  		move.b	d2,$E(a5)				; EXT: moving d2 contents (1 for FM/4 for PSG)
0008362A 1B46 000D                  		move.b	d6,$D(a5)
0008362E 4A04                       		tst.b	d4
00083630 6B00                       		bmi.s	loc_722A8
00083632 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00083638 2B41 0020                  		move.l	d1,$20(a5)
0008363C                            
0008363C                            loc_722A8:
0008363C 51CF FF64                  		dbf	d7,loc_72228
00083640                            
00083640 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
00083644 6A00                       		bpl.s	loc_722B8
00083646 08EE 0002 0370             		bset	#2,$370(a6)				; MJ: new SFX location
0008364C                            
0008364C                            loc_722B8:
0008364C 4A2E 0340                  		tst.b	$340(a6)				; MJ: new SFX location
00083650 6A00                       		bpl.s	locret_722C4
00083652 08EE 0002 03A0             		bset	#2,$3A0(a6)				; MJ: new SFX location
00083658                            
00083658                            locret_722C4:
00083658 4E75                       		rts	
0008365A                            ; ===========================================================================
0008365A                            
0008365A                            loc_722C6:
0008365A 4216                       		clr.b	0(a6)
0008365C 4E75                       		rts	
0008365E                            ; ===========================================================================
0008365E 00FF F100                  dword_722CC:	dc.l $FFF0D0+$30				; MJ: new locations (see all +$30)
00083662 0000 0000                  		dc.l 0
00083666 00FF F130                  		dc.l $FFF100+$30
0008366A 00FF F160                  		dc.l $FFF130+$30
0008366E 00FF F1C0                  		dc.l $FFF190+$30
00083672 00FF F1F0                  		dc.l $FFF1C0+$30
00083676 00FF F220                  		dc.l $FFF1F0+$30
0008367A 00FF F220                  		dc.l $FFF1F0+$30
0008367E 00FF F250                  dword_722EC:	dc.l $FFF220+$30
00083682 0000 0000                  		dc.l 0
00083686 00FF F280                  		dc.l $FFF250+$30
0008368A 00FF F2B0                  		dc.l $FFF280+$30
0008368E 00FF F2E0                  		dc.l $FFF2B0+$30
00083692 00FF F310                  		dc.l $FFF2E0+$30
00083696 00FF F340                  		dc.l $FFF310+$30
0008369A 00FF F340                  		dc.l $FFF310+$30
0008369E                            ; ===========================================================================
0008369E                            ; ---------------------------------------------------------------------------
0008369E                            ; Play GHZ waterfall sound
0008369E                            ; ---------------------------------------------------------------------------
0008369E                            
0008369E                            Sound_D0toDF:				; XREF: Sound_ChkValue
0008369E 4A2E 0027                  		tst.b	$27(a6)
000836A2 6600 0000                  		bne.w	locret_723C6
000836A6 4A2E 0004                  		tst.b	4(a6)
000836AA 6600 0000                  		bne.w	locret_723C6
000836AE 4A2E 0024                  		tst.b	$24(a6)
000836B2 6600 0000                  		bne.w	locret_723C6
000836B6 2079 0008 2AEC             		movea.l	(Go_SoundD0).l,a0
000836BC 0407 00D0                  		subi.b	#$D0,d7
000836C0 E54F                       		lsl.w	#2,d7
000836C2 2670 7000                  		movea.l	(a0,d7.w),a3
000836C6 224B                       		movea.l	a3,a1
000836C8 7000                       		moveq	#0,d0
000836CA 3019                       		move.w	(a1)+,d0
000836CC D08B                       		add.l	a3,d0
000836CE 2D40 0020                  		move.l	d0,$20(a6)
000836D2 1A19                       		move.b	(a1)+,d5
000836D4 1E19                       		move.b	(a1)+,d7
000836D6 5307                       		subq.b	#1,d7
000836D8 7C30                       		moveq	#$30,d6
000836DA                            
000836DA                            loc_72348:
000836DA 1829 0001                  		move.b	1(a1),d4
000836DE 6B00                       		bmi.s	loc_7235A
000836E0 08EE 0002 0130             		bset	#2,$130(a6)				; MJ: new BGM location
000836E6 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000836EA 6000                       		bra.s	loc_72364
000836EC                            ; ===========================================================================
000836EC                            
000836EC                            loc_7235A:
000836EC 08EE 0002 0220             		bset	#2,$220(a6)				; MJ: new BGM location
000836F2 4BEE 03A0                  		lea	$3A0(a6),a5				; MJ: new SFX location
000836F6                            
000836F6                            loc_72364:
000836F6 244D                       		movea.l	a5,a2
000836F8 700B                       		moveq	#$B,d0
000836FA                            
000836FA                            loc_72368:
000836FA 429A                       		clr.l	(a2)+
000836FC 51C8 FFFC                  		dbf	d0,loc_72368
00083700                            
00083700 3A99                       		move.w	(a1)+,(a5)
00083702 1B45 0002                  		move.b	d5,2(a5)
00083706 7000                       		moveq	#0,d0
00083708 3019                       		move.w	(a1)+,d0
0008370A D08B                       		add.l	a3,d0
0008370C 2B40 0004                  		move.l	d0,4(a5)
00083710 3B59 0008                  		move.w	(a1)+,8(a5)
00083714 1B7C 0001 000E             		move.b	#1,$E(a5)
0008371A 1B46 000D                  		move.b	d6,$D(a5)
0008371E 4A04                       		tst.b	d4
00083720 6B00                       		bmi.s	loc_72396
00083722 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00083728                            
00083728                            loc_72396:
00083728 51CF FFB0                  		dbf	d7,loc_72348
0008372C                            
0008372C 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
00083730 6A00                       		bpl.s	loc_723A6
00083732 08EE 0002 0370             		bset	#2,$370(a6)				; MJ: new SFX location
00083738                            
00083738                            loc_723A6:
00083738 4A2E 0340                  		tst.b	$340(a6)				; MJ: new SFX location
0008373C 6A00                       		bpl.s	locret_723C6
0008373E 08EE 0002 03A0             		bset	#2,$3A0(a6)				; MJ: new SFX location
00083744 0004 001F                  		ori.b	#$1F,d4
00083748 13C4 00C0 0011             		move.b	d4,($C00011).l
0008374E 0844 0005                  		bchg	#5,d4
00083752 13C4 00C0 0011             		move.b	d4,($C00011).l
00083758                            
00083758                            locret_723C6:
00083758 4E75                       		rts	
0008375A                            ; End of function Sound_ChkValue
0008375A                            
0008375A                            ; ===========================================================================
0008375A 00FF F130                  		dc.l $FFF100+$30				; MJ: new channel locations (see +$30)
0008375E 00FF F220                  		dc.l $FFF1F0+$30
00083762 00FF F280                  		dc.l $FFF250+$30
00083766 00FF F340                  		dc.l $FFF310+$30
0008376A 00FF F370                  		dc.l $FFF340+$30
0008376E 00FF F3A0                  		dc.l $FFF370+$30
00083772                            
00083772                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083772                            
00083772                            
00083772                            Snd_FadeOut1:				; XREF: Sound_E0
00083772 4216                       		clr.b	0(a6)
00083774 4BEE 0250                  		lea	$250(a6),a5				; MJ: new SFX location
00083778 7E05                       		moveq	#5,d7
0008377A                            
0008377A                            loc_723EA:
0008377A 4A15                       		tst.b	(a5)
0008377C 6A00 0000                  		bpl.w	loc_72472
00083780 0895 0007                  		bclr	#7,(a5)
00083784 7600                       		moveq	#0,d3
00083786 162D 0001                  		move.b	1(a5),d3
0008378A 6B00                       		bmi.s	loc_7243C
0008378C 4EBA 0000                  		jsr	sub_726FE(pc)
00083790 0C03 0004                  		cmpi.b	#4,d3
00083794 6600                       		bne.s	loc_72416
00083796 4A2E 0370                  		tst.b	$370(a6)				; MJ: new SFX location
0008379A 6A00                       		bpl.s	loc_72416
0008379C 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000837A0 226E 0020                  		movea.l	$20(a6),a1
000837A4 6000                       		bra.s	loc_72428
000837A6                            ; ===========================================================================
000837A6                            
000837A6                            loc_72416:
000837A6 5503                       		subq.b	#2,d3
000837A8 E50B                       		lsl.b	#2,d3
000837AA 41FA FEB2                  		lea	dword_722CC(pc),a0
000837AE 264D                       		movea.l	a5,a3
000837B0 2A70 3000                  		movea.l	(a0,d3.w),a5
000837B4 226E 0018                  		movea.l	$18(a6),a1
000837B8                            
000837B8                            loc_72428:
000837B8 0895 0002                  		bclr	#2,(a5)
000837BC 08D5 0001                  		bset	#1,(a5)
000837C0 102D 000B                  		move.b	$B(a5),d0
000837C4 4EBA 0000                  		jsr	sub_72C4E(pc)
000837C8 2A4B                       		movea.l	a3,a5
000837CA 6000                       		bra.s	loc_72472
000837CC                            ; ===========================================================================
000837CC                            
000837CC                            loc_7243C:
000837CC 4EBA 0000                  		jsr	sub_729A0(pc)
000837D0 41EE 03A0                  		lea	$3A0(a6),a0				; MJ: new SFX location
000837D4 0C03 00E0                  		cmpi.b	#$E0,d3
000837D8 6700                       		beq.s	loc_7245A
000837DA 0C03 00C0                  		cmpi.b	#$C0,d3
000837DE 6700                       		beq.s	loc_7245A
000837E0 E60B                       		lsr.b	#3,d3
000837E2 41FA FE7A                  		lea	dword_722CC(pc),a0
000837E6 2070 3000                  		movea.l	(a0,d3.w),a0
000837EA                            
000837EA                            loc_7245A:
000837EA 0890 0002                  		bclr	#2,(a0)
000837EE 08D0 0001                  		bset	#1,(a0)
000837F2 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000837F8 6600                       		bne.s	loc_72472
000837FA 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00083802                            
00083802                            loc_72472:
00083802 DAFC 0030                  		adda.w	#$30,a5
00083806 51CF FF72                  		dbf	d7,loc_723EA
0008380A                            
0008380A 4E75                       		rts	
0008380C                            ; End of function Snd_FadeOut1
0008380C                            
0008380C                            
0008380C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008380C                            
0008380C                            
0008380C                            Snd_FadeOut2:				; XREF: Sound_E0
0008380C 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
00083810 4A15                       		tst.b	(a5)
00083812 6A00                       		bpl.s	loc_724AE
00083814 0895 0007                  		bclr	#7,(a5)
00083818 0815 0002                  		btst	#2,(a5)
0008381C 6600                       		bne.s	loc_724AE
0008381E 4EBA 0000                  		jsr	loc_7270A(pc)
00083822 4BEE 0130                  		lea	$130(a6),a5				; MJ: new BGM location
00083826 0895 0002                  		bclr	#2,(a5)
0008382A 08D5 0001                  		bset	#1,(a5)
0008382E 4A15                       		tst.b	(a5)
00083830 6A00                       		bpl.s	loc_724AE
00083832 226E 0018                  		movea.l	$18(a6),a1
00083836 102D 000B                  		move.b	$B(a5),d0
0008383A 4EBA 0000                  		jsr	sub_72C4E(pc)
0008383E                            
0008383E                            loc_724AE:
0008383E 4BEE 03A0                  		lea	$3A0(a6),a5				; MJ: new SFX location
00083842 4A15                       		tst.b	(a5)
00083844 6A00                       		bpl.s	locret_724E4
00083846 0895 0007                  		bclr	#7,(a5)
0008384A 0815 0002                  		btst	#2,(a5)
0008384E 6600                       		bne.s	locret_724E4
00083850 4EBA 0000                  		jsr	loc_729A6(pc)
00083854 4BEE 0220                  		lea	$220(a6),a5				; MJ: new BGM location
00083858 0895 0002                  		bclr	#2,(a5)
0008385C 08D5 0001                  		bset	#1,(a5)
00083860 4A15                       		tst.b	(a5)
00083862 6A00                       		bpl.s	locret_724E4
00083864 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
0008386A 6600                       		bne.s	locret_724E4
0008386C 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
00083874                            
00083874                            locret_724E4:
00083874 4E75                       		rts	
00083876                            ; End of function Snd_FadeOut2
00083876                            
00083876                            ; ===========================================================================
00083876                            ; ---------------------------------------------------------------------------
00083876                            ; Fade out music
00083876                            ; ---------------------------------------------------------------------------
00083876                            
00083876                            Sound_E0:				; XREF: Sound_ExIndex
00083876 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
0008387A 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
0008387E 1D7C 0003 0006             		move.b	#3,6(a6)
00083884 1D7C 0028 0004             		move.b	#$28,4(a6)
0008388A 422E 0040                  		clr.b	$40(a6)
0008388E 422E 0070                  		clr.b	$70(a6)					; MJ: stop PCM 2 as well
00083892 422E 002A                  		clr.b	$2A(a6)
00083896 4E75                       		rts	
00083898                            
00083898                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083898                            
00083898                            
00083898                            sub_72504:				; XREF: sub_71B4C
00083898 102E 0006                  		move.b	6(a6),d0
0008389C 6700                       		beq.s	loc_72510
0008389E 532E 0006                  		subq.b	#1,6(a6)
000838A2 4E75                       		rts	
000838A4                            ; ===========================================================================
000838A4                            
000838A4                            loc_72510:
000838A4 532E 0004                  		subq.b	#1,4(a6)
000838A8 6700 0000                  		beq.w	Sound_E4
000838AC 1D7C 0003 0006             		move.b	#3,6(a6)
000838B2 4BEE 00A0                  		lea	$A0(a6),a5				; MJ: new FM location
000838B6 7E05                       		moveq	#5,d7
000838B8                            
000838B8                            loc_72524:
000838B8 4A15                       		tst.b	(a5)
000838BA 6A00                       		bpl.s	loc_72538
000838BC 522D 0009                  		addq.b	#1,9(a5)
000838C0 6A00                       		bpl.s	loc_72534
000838C2 0895 0007                  		bclr	#7,(a5)
000838C6 6000                       		bra.s	loc_72538
000838C8                            ; ===========================================================================
000838C8                            
000838C8                            loc_72534:
000838C8 4EBA 0000                  		jsr	sub_72CB4(pc)
000838CC                            
000838CC                            loc_72538:
000838CC DAFC 0030                  		adda.w	#$30,a5
000838D0 51CF FFE6                  		dbf	d7,loc_72524
000838D4                            
000838D4 7E02                       		moveq	#2,d7
000838D6                            
000838D6                            loc_72542:
000838D6 4A15                       		tst.b	(a5)
000838D8 6A00                       		bpl.s	loc_72560
000838DA 522D 0009                  		addq.b	#1,9(a5)
000838DE 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
000838E4 6500                       		bcs.s	loc_72558
000838E6 0895 0007                  		bclr	#7,(a5)
000838EA 6000                       		bra.s	loc_72560
000838EC                            ; ===========================================================================
000838EC                            
000838EC                            loc_72558:
000838EC 1C2D 0009                  		move.b	9(a5),d6
000838F0 4EBA 0000                  		jsr	sub_7296A(pc)
000838F4                            
000838F4                            loc_72560:
000838F4 DAFC 0030                  		adda.w	#$30,a5
000838F8 51CF FFDC                  		dbf	d7,loc_72542
000838FC                            
000838FC 4E75                       		rts	
000838FE                            ; End of function sub_72504
000838FE                            
000838FE                            
000838FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000838FE                            
000838FE                            
000838FE                            sub_7256A:				; XREF: Sound_E4; sub_725CA
000838FE 7602                       		moveq	#2,d3
00083900 7028                       		moveq	#$28,d0
00083902                            
00083902                            loc_7256E:
00083902 1203                       		move.b	d3,d1
00083904 4EBA 0000                  		jsr	sub_7272E(pc)
00083908 5801                       		addq.b	#4,d1
0008390A 4EBA 0000                  		jsr	sub_7272E(pc)
0008390E 51CB FFF2                  		dbf	d3,loc_7256E
00083912                            
00083912 7040                       		moveq	#$40,d0
00083914 727F                       		moveq	#$7F,d1
00083916 7802                       		moveq	#2,d4
00083918                            
00083918                            loc_72584:
00083918 7603                       		moveq	#3,d3
0008391A                            
0008391A                            loc_72586:
0008391A 4EBA 0000                  		jsr	sub_7272E(pc)
0008391E 4EBA 0000                  		jsr	sub_72764(pc)
00083922 5840                       		addq.w	#4,d0
00083924 51CB FFF4                  		dbf	d3,loc_72586
00083928                            
00083928 0400 000F                  		subi.b	#$F,d0
0008392C 51CC FFEA                  		dbf	d4,loc_72584
00083930                            
00083930 4E75                       		rts	
00083932                            ; End of function sub_7256A
00083932                            
00083932                            ; ===========================================================================
00083932                            ; ---------------------------------------------------------------------------
00083932                            ; Stop music
00083932                            ; ---------------------------------------------------------------------------
00083932                            
00083932                            Sound_E4:
00083932 33FC 0100 00A1 1100 0839+  		StopZ80
00083944 41F9 0000 0000             		lea	(StopSample).l,a0				; EXT: load stop sample address
0008394A 43F9 00A0 02E6             		lea	($A00000+PCM1_Sample).l,a1			; EXT: load PCM 1 slot address
00083950 12D8                       		move.b	(a0)+,(a1)+					; EXT: set address of sample
00083952 12D8                       		move.b	(a0)+,(a1)+					; EXT: ''
00083954 12D8                       		move.b	(a0)+,(a1)+					; EXT: ''
00083956 13FC 0064 00A0 0047        		move.b	#(CUPCM1_NewSample&$FF),($A00000+CU_Stack).l	; EXT: set routine to run
0008395E 13FC 0002 00A0 0048        		move.b	#(CUPCM1_NewSample>>$08),($A00000+CU_Stack+1).l	; EXT: ''
00083966 13FC 00C9 00A0 01D2        		move.b	#%11001001,($A00000+CUPCM1_RET).l		; EXT: change "NOP" to "RET"
0008396E 41F9 0000 0000             		lea	(StopSample).l,a0				; EXT: load stop sample address
00083974 43F9 00A0 02E9             		lea	($A00000+PCM2_Sample).l,a1			; EXT: load PCM 2 slot address
0008397A 12D8                       		move.b	(a0)+,(a1)+					; EXT: ''
0008397C 12D8                       		move.b	(a0)+,(a1)+					; EXT: ''
0008397E 12D8                       		move.b	(a0)+,(a1)+					; EXT: ''
00083980 13FC 0028 00A0 01D3        		move.b	#%00101000,($A00000+CUPCM2_RET).l		; EXT: change "JR NZ" to "JR Z"
00083988 33FC 0000 00A1 1100        		StartZ80
00083990                            
00083990 702B                       		moveq	#$2B,d0
00083992 123C 0080                  		move.b	#$80,d1
00083996 4EBA 0000                  		jsr	sub_7272E(pc)
0008399A 7027                       		moveq	#$27,d0
0008399C 7200                       		moveq	#0,d1
0008399E 4EBA 0000                  		jsr	sub_7272E(pc)
000839A2 204E                       		movea.l	a6,a0
000839A4 2C2E 0010                  		move.l	$10(a6),d6					; EXT: store YM Cue list pointer
000839A8 303C 00EF                  		move.w	#$EF,d0						; MJ: new size of data to clear
000839AC                            
000839AC                            loc_725B6:
000839AC 4298                       		clr.l	(a0)+
000839AE 51C8 FFFC                  		dbf	d0,loc_725B6
000839B2                            
000839B2 2D46 0010                  		move.l	d6,$10(a6)					; EXT: restore YM Cue list pointer
000839B6 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
000839BC 4EBA FF40                  		jsr	sub_7256A(pc)
000839C0 6000 0000                  		bra.w	sub_729B6
000839C4                            
000839C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000839C4                            
000839C4                            
000839C4                            sub_725CA:				; XREF: Sound_ChkValue
000839C4 204E                       		movea.l	a6,a0
000839C6 1216                       		move.b	0(a6),d1
000839C8 142E 0027                  		move.b	$27(a6),d2
000839CC 162E 002A                  		move.b	$2A(a6),d3
000839D0 182E 0026                  		move.b	$26(a6),d4
000839D4 3A2E 000A                  		move.w	$A(a6),d5
000839D8 2C2E 0010                  		move.l	$10(a6),d6					; EXT: store YM Cue list pointer
000839DC 303C 0093                  		move.w	#$93,d0						; MJ: new size
000839E0                            
000839E0                            loc_725E4:
000839E0 4298                       		clr.l	(a0)+
000839E2 51C8 FFFC                  		dbf	d0,loc_725E4
000839E6                            
000839E6 1C81                       		move.b	d1,0(a6)
000839E8 1D42 0027                  		move.b	d2,$27(a6)
000839EC 1D43 002A                  		move.b	d3,$2A(a6)
000839F0 1D44 0026                  		move.b	d4,$26(a6)
000839F4 3D45 000A                  		move.w	d5,$A(a6)
000839F8 2D46 0010                  		move.l	d6,$10(a6)					; EXT: restore YM Cue list pointer
000839FC 1D7C 0080 0009             		move.b	#$80,9(a6)
00083A02 4EBA FEFA                  		jsr	sub_7256A(pc)
00083A06 6000 0000                  		bra.w	sub_729B6
00083A0A                            ; End of function sub_725CA
00083A0A                            
00083A0A                            
00083A0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083A0A                            
00083A0A                            
00083A0A                            sub_7260C:				; XREF: sub_71B4C
00083A0A 1D6E 0002 0001             		move.b	2(a6),1(a6)
00083A10 41EE 004E                  		lea	$4E(a6),a0
00083A14 7030                       		moveq	#$30,d0
00083A16 720A                       		moveq	#10,d1				; MJ: new number of channels
00083A18                            
00083A18                            loc_7261A:
00083A18 5210                       		addq.b	#1,(a0)
00083A1A D0C0                       		adda.w	d0,a0
00083A1C 51C9 FFFA                  		dbf	d1,loc_7261A
00083A20                            
00083A20 4E75                       		rts	
00083A22                            ; End of function sub_7260C
00083A22                            
00083A22                            ; ===========================================================================
00083A22                            ; ---------------------------------------------------------------------------
00083A22                            ; Speed	up music
00083A22                            ; ---------------------------------------------------------------------------
00083A22                            
00083A22                            Sound_E2:				; XREF: Sound_ExIndex
00083A22 4A2E 0027                  		tst.b	$27(a6)
00083A26 6600                       		bne.s	loc_7263E
00083A28 1D6E 0029 0002             		move.b	$29(a6),2(a6)
00083A2E 1D6E 0029 0001             		move.b	$29(a6),1(a6)
00083A34 1D7C 0080 002A             		move.b	#$80,$2A(a6)
00083A3A 4E75                       		rts	
00083A3C                            ; ===========================================================================
00083A3C                            
00083A3C                            loc_7263E:
00083A3C 1D6E 03F9 03D2             		move.b	$3F9(a6),$3D2(a6)			; MJ: new location
00083A42 1D6E 03F9 03D1             		move.b	$3F9(a6),$3D1(a6)			; MJ: new location
00083A48 1D7C 0080 03FA             		move.b	#$80,$3FA(a6)
00083A4E 4E75                       		rts	
00083A50                            ; ===========================================================================
00083A50                            ; ---------------------------------------------------------------------------
00083A50                            ; Change music back to normal speed
00083A50                            ; ---------------------------------------------------------------------------
00083A50                            
00083A50                            Sound_E3:				; XREF: Sound_ExIndex
00083A50 4A2E 0027                  		tst.b	$27(a6)
00083A54 6600                       		bne.s	loc_7266A
00083A56 1D6E 0028 0002             		move.b	$28(a6),2(a6)
00083A5C 1D6E 0028 0001             		move.b	$28(a6),1(a6)
00083A62 422E 002A                  		clr.b	$2A(a6)
00083A66 4E75                       		rts	
00083A68                            ; ===========================================================================
00083A68                            
00083A68                            loc_7266A:
00083A68 1D6E 03F8 03D2             		move.b	$3F8(a6),$3D2(a6)
00083A6E 1D6E 03F8 03D1             		move.b	$3F8(a6),$3D1(a6)
00083A74 422E 03FA                  		clr.b	$3FA(a6)
00083A78 4E75                       		rts	
00083A7A                            
00083A7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083A7A                            
00083A7A                            
00083A7A                            sub_7267C:				; XREF: sub_71B4C
00083A7A 4A2E 0025                  		tst.b	$25(a6)
00083A7E 6700                       		beq.s	loc_72688
00083A80 532E 0025                  		subq.b	#1,$25(a6)
00083A84 4E75                       		rts	
00083A86                            ; ===========================================================================
00083A86                            
00083A86                            loc_72688:
00083A86 4A2E 0026                  		tst.b	$26(a6)
00083A8A 6700                       		beq.s	loc_726D6
00083A8C 532E 0026                  		subq.b	#1,$26(a6)
00083A90 1D7C 0002 0025             		move.b	#2,$25(a6)
00083A96 4BEE 00A0                  		lea	$A0(a6),a5				; MJ: new SFX location
00083A9A 7E05                       		moveq	#5,d7
00083A9C                            
00083A9C                            loc_7269E:
00083A9C 4A15                       		tst.b	(a5)
00083A9E 6A00                       		bpl.s	loc_726AA
00083AA0 532D 0009                  		subq.b	#1,9(a5)
00083AA4 4EBA 0000                  		jsr	sub_72CB4(pc)
00083AA8                            
00083AA8                            loc_726AA:
00083AA8 DAFC 0030                  		adda.w	#$30,a5
00083AAC 51CF FFEE                  		dbf	d7,loc_7269E
00083AB0 7E02                       		moveq	#2,d7
00083AB2                            
00083AB2                            loc_726B4:
00083AB2 4A15                       		tst.b	(a5)
00083AB4 6A00                       		bpl.s	loc_726CC
00083AB6 532D 0009                  		subq.b	#1,9(a5)
00083ABA 1C2D 0009                  		move.b	9(a5),d6
00083ABE 0C06 0010                  		cmpi.b	#$10,d6
00083AC2 6500                       		bcs.s	loc_726C8
00083AC4 7C0F                       		moveq	#$F,d6
00083AC6                            
00083AC6                            loc_726C8:
00083AC6 4EBA 0000                  		jsr	sub_7296A(pc)
00083ACA                            
00083ACA                            loc_726CC:
00083ACA DAFC 0030                  		adda.w	#$30,a5
00083ACE 51CF FFE2                  		dbf	d7,loc_726B4
00083AD2 4E75                       		rts	
00083AD4                            ; ===========================================================================
00083AD4                            
00083AD4                            loc_726D6:
00083AD4 08AE 0002 0040             		bclr	#2,$40(a6)
00083ADA 08AE 0002 0070             		bclr	#2,$70(a6)				; MJ: do PCM 2 as well...
00083AE0 422E 0024                  		clr.b	$24(a6)
00083AE4 4E75                       		rts	
00083AE6                            ; End of function sub_7267C
00083AE6                            
00083AE6                            ; ===========================================================================
00083AE6                            
00083AE6                            loc_726E2:				; XREF: sub_71CCA
00083AE6 0815 0001                  		btst	#1,(a5)
00083AEA 6600                       		bne.s	locret_726FC
00083AEC 0815 0002                  		btst	#2,(a5)
00083AF0 6600                       		bne.s	locret_726FC
00083AF2 7028                       		moveq	#$28,d0
00083AF4 122D 0001                  		move.b	1(a5),d1
00083AF8 0001 00F0                  		ori.b	#-$10,d1
00083AFC 6000 0000                  		bra.w	sub_7272E
00083B00                            ; ===========================================================================
00083B00                            
00083B00                            locret_726FC:
00083B00 4E75                       		rts	
00083B02                            
00083B02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083B02                            
00083B02                            
00083B02                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
00083B02 0815 0004                  		btst	#4,(a5)
00083B06 6600                       		bne.s	locret_72714
00083B08 0815 0002                  		btst	#2,(a5)
00083B0C 6600                       		bne.s	locret_72714
00083B0E                            
00083B0E                            loc_7270A:				; XREF: Snd_FadeOut2
00083B0E 7028                       		moveq	#$28,d0
00083B10 122D 0001                  		move.b	1(a5),d1
00083B14 6000 0000                  		bra.w	sub_7272E
00083B18                            ; ===========================================================================
00083B18                            
00083B18                            locret_72714:
00083B18 4E75                       		rts	
00083B1A                            ; End of function sub_726FE
00083B1A                            
00083B1A                            ; ===========================================================================
00083B1A                            
00083B1A                            loc_72716:				; XREF: sub_72A5A
00083B1A 0815 0002                  		btst	#2,(a5)
00083B1E 6600                       		bne.s	locret_72720
00083B20 6000 0000                  		bra.w	sub_72722
00083B24                            ; ===========================================================================
00083B24                            
00083B24                            locret_72720:
00083B24 4E75                       		rts
00083B26                            
00083B26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083B26                            
00083B26                            
00083B26                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
00083B26 082D 0002 0001             		btst	#2,1(a5)
00083B2C 6600                       		bne.s	loc_7275A
00083B2E D02D 0001                  		add.b	1(a5),d0
00083B32                            ; End of function sub_72722
00083B32                            
00083B32                            
00083B32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083B32                            
00083B32                            sub_7272E:
00083B32 48E7 2080                  		movem.l	d2/a0,-(sp)				; EXT: store register data
00083B36 206E 0010                  		movea.l	$10(a6),a0				; EXT: load Cue pointer
00083B3A 5248                       		addq.w	#$01,a0					; EXT: skip $40
00083B3C 143C 0000                  		move.b	#$00,d2					; EXT: prepare d2 for YM2612 port address ($4000 - $4001)
00083B40 33FC 0100 00A1 1100 0839+  		StopZ80						; EXT: request Z80 stop "ON"
00083B52 10C2                       		move.b	d2,(a0)+				; EXT: write YM2612 port address
00083B54 10C1                       		move.b	d1,(a0)+				; EXT: write YM2612 data
00083B56 10C0                       		move.b	d0,(a0)+				; EXT: write YM2612 address
00083B58 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop "OFF"
00083B60 3408                       		move.w	a0,d2					; EXT: load Cue pointer
00083B62 0242 0FFF                  		andi.w	#$0FFF,d2				; EXT: wrap it
00083B66 0042 1000                  		ori.w	#$1000,d2				; EXT: ''
00083B6A 3D42 0012                  		move.w	d2,$12(a6)				; EXT: update it
00083B6E 4CDF 0104                  		movem.l	(sp)+,d2/a0				; EXT: restore register data
00083B72 4E75                       		rts						; EXT: return
00083B74                            
00083B74                            ; ===========================================================================
00083B74                            
00083B74                            loc_7275A:				; XREF: sub_72722
00083B74 142D 0001                  		move.b	1(a5),d2
00083B78 0882 0002                  		bclr	#2,d2
00083B7C D002                       		add.b	d2,d0
00083B7E                            
00083B7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083B7E                            
00083B7E                            
00083B7E                            sub_72764:
00083B7E 48E7 2080                  		movem.l	d2/a0,-(sp)				; EXT: store register data
00083B82 206E 0010                  		movea.l	$10(a6),a0				; EXT: load Cue pointer
00083B86 5248                       		addq.w	#$01,a0					; EXT: skip $40
00083B88 143C 0002                  		move.b	#$02,d2					; EXT: prepare d2 for YM2612 port address ($4002 - $4003)
00083B8C 33FC 0100 00A1 1100 0839+  		StopZ80						; EXT: request Z80 stop "ON"
00083B9E 10C2                       		move.b	d2,(a0)+				; EXT: write YM2612 port address
00083BA0 10C1                       		move.b	d1,(a0)+				; EXT: write YM2612 data
00083BA2 10C0                       		move.b	d0,(a0)+				; EXT: write YM2612 address
00083BA4 33FC 0000 00A1 1100        		StartZ80					; EXT: request Z80 stop "OFF"
00083BAC 3408                       		move.w	a0,d2					; EXT: load Cue pointer
00083BAE 0242 0FFF                  		andi.w	#$0FFF,d2				; EXT: wrap it
00083BB2 0042 1000                  		ori.w	#$1000,d2				; EXT: ''
00083BB6 3D42 0012                  		move.w	d2,$12(a6)				; EXT: update it
00083BBA 4CDF 0104                  		movem.l	(sp)+,d2/a0				; EXT: restore register data
00083BBE 4E75                       		rts						; EXT: return
00083BC0                            
00083BC0                            ; ===========================================================================
00083BC0 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
00083BD2 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
00083BE4 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
00083BF4 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
00083C04 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
00083C14 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
00083C24 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
00083C34 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
00083C44 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
00083C54 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
00083C64 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
00083C74 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
00083C80                            
00083C80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083C80                            
00083C80                            
00083C80                            sub_72850:				; XREF: sub_71B4C
00083C80 532D 000E                  		subq.b	#1,$E(a5)
00083C84 6600                       		bne.s	loc_72866
00083C86 0895 0004                  		bclr	#4,(a5)
00083C8A 4EBA 0000                  		jsr	sub_72878(pc)
00083C8E 4EBA 0000                  		jsr	sub_728DC(pc)
00083C92 6000 0000                  		bra.w	loc_7292E
00083C96                            ; ===========================================================================
00083C96                            
00083C96                            loc_72866:
00083C96 4EBA F378                  		jsr	sub_71D9E(pc)
00083C9A 4EBA 0000                  		jsr	sub_72926(pc)
00083C9E 4EBA F398                  		jsr	sub_71DC6(pc)
00083CA2 4EBA 0000                  		jsr	sub_728E2(pc)
00083CA6 4E75                       		rts	
00083CA8                            ; End of function sub_72850
00083CA8                            
00083CA8                            
00083CA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083CA8                            
00083CA8                            
00083CA8                            sub_72878:				; XREF: sub_72850
00083CA8 0895 0001                  		bclr	#1,(a5)
00083CAC 286D 0004                  		movea.l	4(a5),a4
00083CB0                            
00083CB0                            loc_72880:
00083CB0 7A00                       		moveq	#0,d5
00083CB2 1A1C                       		move.b	(a4)+,d5
00083CB4 0C05 00E0                  		cmpi.b	#$E0,d5
00083CB8 6500                       		bcs.s	loc_72890
00083CBA 4EBA 0000                  		jsr	sub_72A5A(pc)
00083CBE 60F0                       		bra.s	loc_72880
00083CC0                            ; ===========================================================================
00083CC0                            
00083CC0                            loc_72890:
00083CC0 4A05                       		tst.b	d5
00083CC2 6A00                       		bpl.s	loc_728A4
00083CC4 4EBA 0000                  		jsr	sub_728AC(pc)
00083CC8 1A1C                       		move.b	(a4)+,d5
00083CCA 4A05                       		tst.b	d5
00083CCC 6A00                       		bpl.s	loc_728A4
00083CCE 534C                       		subq.w	#1,a4
00083CD0 6000 F300                  		bra.w	sub_71D60
00083CD4                            ; ===========================================================================
00083CD4                            
00083CD4                            loc_728A4:
00083CD4 4EBA F2DC                  		jsr	sub_71D40(pc)
00083CD8 6000 F2F8                  		bra.w	sub_71D60
00083CDC                            ; End of function sub_72878
00083CDC                            
00083CDC                            
00083CDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083CDC                            
00083CDC                            
00083CDC                            sub_728AC:				; XREF: sub_72878
00083CDC 0405 0081                  		subi.b	#$81,d5
00083CE0 6500                       		bcs.s	loc_728CA
00083CE2 DA2D 0008                  		add.b	8(a5),d5
00083CE6 0245 007F                  		andi.w	#$7F,d5
00083CEA E34D                       		lsl.w	#1,d5
00083CEC 41FA 0000                  		lea	word_729CE(pc),a0
00083CF0 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
00083CF6 6000 F2DA                  		bra.w	sub_71D60
00083CFA                            ; ===========================================================================
00083CFA                            
00083CFA                            loc_728CA:
00083CFA 08D5 0001                  		bset	#1,(a5)
00083CFE 3B7C FFFF 0010             		move.w	#-1,$10(a5)
00083D04 4EBA F2CC                  		jsr	sub_71D60(pc)
00083D08 6000 0000                  		bra.w	sub_729A0
00083D0C                            ; End of function sub_728AC
00083D0C                            
00083D0C                            
00083D0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083D0C                            
00083D0C                            
00083D0C                            sub_728DC:				; XREF: sub_72850
00083D0C 3C2D 0010                  		move.w	$10(a5),d6
00083D10 6B00                       		bmi.s	loc_72920
00083D12                            ; End of function sub_728DC
00083D12                            
00083D12                            
00083D12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083D12                            
00083D12                            
00083D12                            sub_728E2:				; XREF: sub_72850
00083D12 102D 001E                  		move.b	$1E(a5),d0
00083D16 4880                       		ext.w	d0
00083D18 DC40                       		add.w	d0,d6
00083D1A 0815 0002                  		btst	#2,(a5)
00083D1E 6600                       		bne.s	locret_7291E
00083D20 0815 0001                  		btst	#1,(a5)
00083D24 6600                       		bne.s	locret_7291E
00083D26 102D 0001                  		move.b	1(a5),d0
00083D2A 0C00 00E0                  		cmpi.b	#$E0,d0
00083D2E 6600                       		bne.s	loc_72904
00083D30 103C 00C0                  		move.b	#$C0,d0
00083D34                            
00083D34                            loc_72904:
00083D34 3206                       		move.w	d6,d1
00083D36 0201 000F                  		andi.b	#$F,d1
00083D3A 8001                       		or.b	d1,d0
00083D3C E84E                       		lsr.w	#4,d6
00083D3E 0206 003F                  		andi.b	#$3F,d6
00083D42 13C0 00C0 0011             		move.b	d0,($C00011).l
00083D48 13C6 00C0 0011             		move.b	d6,($C00011).l
00083D4E                            
00083D4E                            locret_7291E:
00083D4E 4E75                       		rts	
00083D50                            ; End of function sub_728E2
00083D50                            
00083D50                            ; ===========================================================================
00083D50                            
00083D50                            loc_72920:				; XREF: sub_728DC
00083D50 08D5 0001                  		bset	#1,(a5)
00083D54 4E75                       		rts	
00083D56                            
00083D56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083D56                            
00083D56                            
00083D56                            sub_72926:				; XREF: sub_72850
00083D56 4A2D 000B                  		tst.b	$B(a5)
00083D5A 6700 0000                  		beq.w	locret_7298A
00083D5E                            
00083D5E                            loc_7292E:				; XREF: sub_72850
00083D5E 1C2D 0009                  		move.b	9(a5),d6
00083D62 7000                       		moveq	#0,d0
00083D64 102D 000B                  		move.b	$B(a5),d0
00083D68 6700                       		beq.s	sub_7296A
00083D6A 2079 0008 2AFC             		movea.l	(Go_PSGIndex).l,a0
00083D70 5340                       		subq.w	#1,d0
00083D72 E548                       		lsl.w	#2,d0
00083D74 2070 0000                  		movea.l	(a0,d0.w),a0
00083D78 102D 000C                  		move.b	$C(a5),d0
00083D7C 1030 0000                  		move.b	(a0,d0.w),d0
00083D80 522D 000C                  		addq.b	#1,$C(a5)
00083D84 0800 0007                  		btst	#7,d0
00083D88 6700                       		beq.s	loc_72960
00083D8A 0C00 0080                  		cmpi.b	#$80,d0
00083D8E 6700                       		beq.s	loc_7299A
00083D90                            
00083D90                            loc_72960:
00083D90 DC40                       		add.w	d0,d6
00083D92 0C06 0010                  		cmpi.b	#$10,d6
00083D96 6500                       		bcs.s	sub_7296A
00083D98 7C0F                       		moveq	#$F,d6
00083D9A                            ; End of function sub_72926
00083D9A                            
00083D9A                            
00083D9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083D9A                            
00083D9A                            
00083D9A                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
00083D9A 0815 0001                  		btst	#1,(a5)
00083D9E 6600                       		bne.s	locret_7298A
00083DA0 0815 0002                  		btst	#2,(a5)
00083DA4 6600                       		bne.s	locret_7298A
00083DA6 0815 0004                  		btst	#4,(a5)
00083DAA 6600                       		bne.s	loc_7298C
00083DAC                            
00083DAC                            loc_7297C:
00083DAC 8C2D 0001                  		or.b	1(a5),d6
00083DB0 0606 0010                  		addi.b	#$10,d6
00083DB4 13C6 00C0 0011             		move.b	d6,($C00011).l
00083DBA                            
00083DBA                            locret_7298A:
00083DBA 4E75                       		rts	
00083DBC                            ; ===========================================================================
00083DBC                            
00083DBC                            loc_7298C:
00083DBC 4A2D 0013                  		tst.b	$13(a5)
00083DC0 67EA                       		beq.s	loc_7297C
00083DC2 4A2D 0012                  		tst.b	$12(a5)
00083DC6 66E4                       		bne.s	loc_7297C
00083DC8 4E75                       		rts	
00083DCA                            ; End of function sub_7296A
00083DCA                            
00083DCA                            ; ===========================================================================
00083DCA                            
00083DCA                            loc_7299A:				; XREF: sub_72926
00083DCA 532D 000C                  		subq.b	#1,$C(a5)
00083DCE 4E75                       		rts	
00083DD0                            
00083DD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083DD0                            
00083DD0                            
00083DD0                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
00083DD0 0815 0002                  		btst	#2,(a5)
00083DD4 6600                       		bne.s	locret_729B4
00083DD6                            
00083DD6                            loc_729A6:				; XREF: Snd_FadeOut2
00083DD6 102D 0001                  		move.b	1(a5),d0
00083DDA 0000 001F                  		ori.b	#$1F,d0
00083DDE 13C0 00C0 0011             		move.b	d0,($C00011).l
00083DE4                            
00083DE4                            locret_729B4:
00083DE4 4E75                       		rts	
00083DE6                            ; End of function sub_729A0
00083DE6                            
00083DE6                            
00083DE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083DE6                            
00083DE6                            
00083DE6                            sub_729B6:				; XREF: loc_71E7C
00083DE6 41F9 00C0 0011             		lea	($C00011).l,a0
00083DEC 10BC 009F                  		move.b	#$9F,(a0)
00083DF0 10BC 00BF                  		move.b	#$BF,(a0)
00083DF4 10BC 00DF                  		move.b	#$DF,(a0)
00083DF8 10BC 00FF                  		move.b	#$FF,(a0)
00083DFC 4E75                       		rts	
00083DFE                            ; End of function sub_729B6
00083DFE                            
00083DFE                            ; ===========================================================================
00083DFE 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
00083E10 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
00083E22 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
00083E36 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
00083E4A 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
00083E5E 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
00083E72 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
00083E86 0011 0000                  		dc.w $11, 0
00083E8A                            
00083E8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00083E8A                            
00083E8A                            
00083E8A                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00083E8A 0445 00E0                  		subi.w	#$E0,d5
00083E8E E54D                       		lsl.w	#2,d5
00083E90 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
00083E94                            ; End of function sub_72A5A
00083E94                            
00083E94                            ; ===========================================================================
00083E94                            
00083E94                            loc_72A64:
00083E94 6000 0000                  		bra.w	loc_72ACC
00083E98                            ; ===========================================================================
00083E98 6000 0000                  		bra.w	loc_72AEC
00083E9C                            ; ===========================================================================
00083E9C 6000 0000                  		bra.w	loc_72AF2
00083EA0                            ; ===========================================================================
00083EA0 6000 0000                  		bra.w	loc_72AF8
00083EA4                            ; ===========================================================================
00083EA4 6000 0000                  		bra.w	loc_72B14
00083EA8                            ; ===========================================================================
00083EA8 6000 0000                  		bra.w	loc_72B9E
00083EAC                            ; ===========================================================================
00083EAC 6000 0000                  		bra.w	loc_72BA4
00083EB0                            ; ===========================================================================
00083EB0 6000 0000                  		bra.w	loc_72BAE
00083EB4                            ; ===========================================================================
00083EB4 6000 0000                  		bra.w	loc_72BB4
00083EB8                            ; ===========================================================================
00083EB8 6000 0000                  		bra.w	loc_72BBE
00083EBC                            ; ===========================================================================
00083EBC 6000 0000                  		bra.w	loc_72BC6
00083EC0                            ; ===========================================================================
00083EC0 6000 0000                  		bra.w	loc_72BD0
00083EC4                            ; ===========================================================================
00083EC4 6000 0000                  		bra.w	loc_72BE6
00083EC8                            ; ===========================================================================
00083EC8 6000 0000                  		bra.w	loc_72BEE
00083ECC                            ; ===========================================================================
00083ECC 6000 0000                  		bra.w	loc_72BF4
00083ED0                            ; ===========================================================================
00083ED0 6000 0000                  		bra.w	loc_72C26
00083ED4                            ; ===========================================================================
00083ED4 6000 0000                  		bra.w	loc_72D30
00083ED8                            ; ===========================================================================
00083ED8 6000 0000                  		bra.w	loc_72D52
00083EDC                            ; ===========================================================================
00083EDC 6000 0000                  		bra.w	loc_72D58
00083EE0                            ; ===========================================================================
00083EE0 6000 0000                  		bra.w	loc_72E06
00083EE4                            ; ===========================================================================
00083EE4 6000 0000                  		bra.w	loc_72E20
00083EE8                            ; ===========================================================================
00083EE8 6000 0000                  		bra.w	loc_72E26
00083EEC                            ; ===========================================================================
00083EEC 6000 0000                  		bra.w	loc_72E2C
00083EF0                            ; ===========================================================================
00083EF0 6000 0000                  		bra.w	loc_72E38
00083EF4                            ; ===========================================================================
00083EF4 6000 0000                  		bra.w	loc_72E52
00083EF8                            ; ===========================================================================
00083EF8 6000 0000                  		bra.w	loc_72E64
00083EFC                            ; ===========================================================================
00083EFC                            
00083EFC                            loc_72ACC:				; XREF: loc_72A64
00083EFC 121C                       		move.b	(a4)+,d1
00083EFE 4A2D 0001                  		tst.b	1(a5)
00083F02 6B00                       		bmi.s	locret_72AEA
00083F04 102D 000A                  		move.b	$A(a5),d0
00083F08 0200 0037                  		andi.b	#$37,d0
00083F0C 8200                       		or.b	d0,d1
00083F0E 1B41 000A                  		move.b	d1,$A(a5)
00083F12 103C 00B4                  		move.b	#$B4,d0
00083F16 6000 FC02                  		bra.w	loc_72716
00083F1A                            ; ===========================================================================
00083F1A                            
00083F1A                            locret_72AEA:
00083F1A 4E75                       		rts	
00083F1C                            ; ===========================================================================
00083F1C                            
00083F1C                            loc_72AEC:				; XREF: loc_72A64
00083F1C 1B5C 001E                  		move.b	(a4)+,$1E(a5)
00083F20 4E75                       		rts	
00083F22                            ; ===========================================================================
00083F22                            
00083F22                            loc_72AF2:				; XREF: loc_72A64
00083F22 1D5C 0007                  		move.b	(a4)+,7(a6)
00083F26 4E75                       		rts	
00083F28                            ; ===========================================================================
00083F28                            
00083F28                            loc_72AF8:				; XREF: loc_72A64
00083F28 7000                       		moveq	#0,d0
00083F2A 102D 000D                  		move.b	$D(a5),d0
00083F2E 2875 0000                  		movea.l	(a5,d0.w),a4
00083F32 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
00083F3A 544C                       		addq.w	#2,a4
00083F3C 5800                       		addq.b	#4,d0
00083F3E 1B40 000D                  		move.b	d0,$D(a5)
00083F42 4E75                       		rts	
00083F44                            ; ===========================================================================
00083F44                            
00083F44                            loc_72B14:				; XREF: loc_72A64
00083F44 204E                       		movea.l	a6,a0
00083F46 43EE 03D0                  		lea	$3D0(a6),a1				; MJ: new SFX location
00083F4A 303C 0093                  		move.w	#$93,d0					; MJ: new size to store
00083F4E                            
00083F4E                            loc_72B1E:
00083F4E 20D9                       		move.l	(a1)+,(a0)+
00083F50 51C8 FFFC                  		dbf	d0,loc_72B1E
00083F54                            
00083F54 08EE 0002 0040             		bset	#2,$40(a6)
00083F5A 08EE 0002 0070             		bset	#2,$70(a6)				; MJ: enable PCM 2
00083F60 264D                       		movea.l	a5,a3
00083F62 1C3C 0028                  		move.b	#$28,d6
00083F66 9C2E 0026                  		sub.b	$26(a6),d6
00083F6A 7E05                       		moveq	#5,d7
00083F6C 4BEE 00A0                  		lea	$A0(a6),a5				; MJ: new FM location
00083F70                            
00083F70                            loc_72B3A:
00083F70 0815 0007                  		btst	#7,(a5)
00083F74 6700                       		beq.s	loc_72B5C
00083F76 08D5 0001                  		bset	#1,(a5)
00083F7A DD2D 0009                  		add.b	d6,9(a5)
00083F7E 0815 0002                  		btst	#2,(a5)
00083F82 6600                       		bne.s	loc_72B5C
00083F84 7000                       		moveq	#0,d0
00083F86 102D 000B                  		move.b	$B(a5),d0
00083F8A 226E 0018                  		movea.l	$18(a6),a1
00083F8E 4EBA 0000                  		jsr	sub_72C4E(pc)
00083F92                            
00083F92                            loc_72B5C:
00083F92 DAFC 0030                  		adda.w	#$30,a5
00083F96 51CF FFD8                  		dbf	d7,loc_72B3A
00083F9A                            
00083F9A 7E02                       		moveq	#2,d7
00083F9C                            
00083F9C                            loc_72B66:
00083F9C 0815 0007                  		btst	#7,(a5)
00083FA0 6700                       		beq.s	loc_72B78
00083FA2 08D5 0001                  		bset	#1,(a5)
00083FA6 4EBA FE28                  		jsr	sub_729A0(pc)
00083FAA DD2D 0009                  		add.b	d6,9(a5)
00083FAE                            
00083FAE                            loc_72B78:
00083FAE DAFC 0030                  		adda.w	#$30,a5
00083FB2 51CF FFE8                  		dbf	d7,loc_72B66
00083FB6 2A4B                       		movea.l	a3,a5
00083FB8 1D7C 0080 0024             		move.b	#$80,$24(a6)
00083FBE 1D7C 0028 0026             		move.b	#$28,$26(a6)
00083FC4 422E 0027                  		clr.b	$27(a6)
00083FC8 504F                       		addq.w	#8,sp
00083FCA 4E75                       		rts	
00083FCC                            ; ===========================================================================
00083FCC                            
00083FCC                            loc_72B9E:				; XREF: loc_72A64
00083FCC 1B5C 0002                  		move.b	(a4)+,2(a5)
00083FD0 4E75                       		rts	
00083FD2                            ; ===========================================================================
00083FD2                            
00083FD2                            loc_72BA4:				; XREF: loc_72A64
00083FD2 101C                       		move.b	(a4)+,d0
00083FD4 D12D 0009                  		add.b	d0,9(a5)
00083FD8 6000 0000                  		bra.w	sub_72CB4
00083FDC                            ; ===========================================================================
00083FDC                            
00083FDC                            loc_72BAE:				; XREF: loc_72A64
00083FDC 08D5 0004                  		bset	#4,(a5)
00083FE0 4E75                       		rts	
00083FE2                            ; ===========================================================================
00083FE2                            
00083FE2                            loc_72BB4:				; XREF: loc_72A64
00083FE2 1B54 0012                  		move.b	(a4),$12(a5)
00083FE6 1B5C 0013                  		move.b	(a4)+,$13(a5)
00083FEA 4E75                       		rts	
00083FEC                            ; ===========================================================================
00083FEC                            
00083FEC                            loc_72BBE:				; XREF: loc_72A64
00083FEC 101C                       		move.b	(a4)+,d0
00083FEE D12D 0008                  		add.b	d0,8(a5)
00083FF2 4E75                       		rts	
00083FF4                            ; ===========================================================================
00083FF4                            
00083FF4                            loc_72BC6:				; XREF: loc_72A64
00083FF4 1D54 0002                  		move.b	(a4),2(a6)
00083FF8 1D5C 0001                  		move.b	(a4)+,1(a6)
00083FFC 4E75                       		rts	
00083FFE                            ; ===========================================================================
00083FFE                            
00083FFE                            loc_72BD0:				; XREF: loc_72A64
00083FFE 41EE 0040                  		lea	$40(a6),a0
00084002 101C                       		move.b	(a4)+,d0
00084004 7230                       		moveq	#$30,d1
00084006 740A                       		moveq	#10,d2				; MJ: extra channel
00084008                            
00084008                            loc_72BDA:
00084008 1140 0002                  		move.b	d0,2(a0)
0008400C D0C1                       		adda.w	d1,a0
0008400E 51CA FFF8                  		dbf	d2,loc_72BDA
00084012                            
00084012 4E75                       		rts	
00084014                            ; ===========================================================================
00084014                            
00084014                            loc_72BE6:				; XREF: loc_72A64
00084014 101C                       		move.b	(a4)+,d0
00084016 D12D 0009                  		add.b	d0,9(a5)
0008401A 4E75                       		rts	
0008401C                            ; ===========================================================================
0008401C                            
0008401C                            loc_72BEE:				; XREF: loc_72A64
0008401C 422E 002C                  		clr.b	$2C(a6)
00084020 4E75                       		rts	
00084022                            ; ===========================================================================
00084022                            
00084022                            loc_72BF4:				; XREF: loc_72A64
00084022 0895 0007                  		bclr	#7,(a5)
00084026 0895 0004                  		bclr	#4,(a5)
0008402A 4EBA FAD6                  		jsr	sub_726FE(pc)
0008402E 4A2E 0280                  		tst.b	$280(a6)				; MJ: new SFX location
00084032 6B00                       		bmi.s	loc_72C22
00084034 264D                       		movea.l	a5,a3
00084036 4BEE 0130                  		lea	$130(a6),a5				; MJ: new BGM location
0008403A 226E 0018                  		movea.l	$18(a6),a1
0008403E 0895 0002                  		bclr	#2,(a5)
00084042 08D5 0001                  		bset	#1,(a5)
00084046 102D 000B                  		move.b	$B(a5),d0
0008404A 4EBA 0000                  		jsr	sub_72C4E(pc)
0008404E 2A4B                       		movea.l	a3,a5
00084050                            
00084050                            loc_72C22:
00084050 504F                       		addq.w	#8,sp
00084052 4E75                       		rts	
00084054                            ; ===========================================================================
00084054                            
00084054                            loc_72C26:				; XREF: loc_72A64
00084054 7000                       		moveq	#0,d0
00084056 101C                       		move.b	(a4)+,d0
00084058 1B40 000B                  		move.b	d0,$B(a5)
0008405C 0815 0002                  		btst	#2,(a5)
00084060 6600 0000                  		bne.w	locret_72CAA
00084064 226E 0018                  		movea.l	$18(a6),a1
00084068 4A2E 000E                  		tst.b	$E(a6)
0008406C 6700                       		beq.s	sub_72C4E
0008406E 226D 0020                  		movea.l	$20(a5),a1
00084072 4A2E 000E                  		tst.b	$E(a6)
00084076 6B00                       		bmi.s	sub_72C4E
00084078 226E 0020                  		movea.l	$20(a6),a1
0008407C                            
0008407C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008407C                            
0008407C                            
0008407C                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
0008407C 5340                       		subq.w	#1,d0
0008407E 6B00                       		bmi.s	loc_72C5C
00084080 323C 0019                  		move.w	#$19,d1
00084084                            
00084084                            loc_72C56:
00084084 D2C1                       		adda.w	d1,a1
00084086 51C8 FFFC                  		dbf	d0,loc_72C56
0008408A                            
0008408A                            loc_72C5C:
0008408A 1219                       		move.b	(a1)+,d1
0008408C 1B41 001F                  		move.b	d1,$1F(a5)
00084090 1801                       		move.b	d1,d4
00084092 103C 00B0                  		move.b	#$B0,d0
00084096 4EBA FA8E                  		jsr	sub_72722(pc)
0008409A 45FA 0000                  		lea	byte_72D18(pc),a2
0008409E 7613                       		moveq	#$13,d3
000840A0                            
000840A0                            loc_72C72:
000840A0 101A                       		move.b	(a2)+,d0
000840A2 1219                       		move.b	(a1)+,d1
000840A4 4EBA FA80                  		jsr	sub_72722(pc)
000840A8 51CB FFF6                  		dbf	d3,loc_72C72
000840AC 7A03                       		moveq	#3,d5
000840AE 0244 0007                  		andi.w	#7,d4
000840B2 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
000840B6 162D 0009                  		move.b	9(a5),d3
000840BA                            
000840BA                            loc_72C8C:
000840BA 101A                       		move.b	(a2)+,d0
000840BC 1219                       		move.b	(a1)+,d1
000840BE E20C                       		lsr.b	#1,d4
000840C0 6400                       		bcc.s	loc_72C96
000840C2 D203                       		add.b	d3,d1
000840C4                            
000840C4                            loc_72C96:
000840C4 4EBA FA60                  		jsr	sub_72722(pc)
000840C8 51CD FFF0                  		dbf	d5,loc_72C8C
000840CC 103C 00B4                  		move.b	#$B4,d0
000840D0 122D 000A                  		move.b	$A(a5),d1
000840D4 4EBA FA50                  		jsr	sub_72722(pc)
000840D8                            
000840D8                            locret_72CAA:
000840D8 4E75                       		rts	
000840DA                            ; End of function sub_72C4E
000840DA                            
000840DA                            ; ===========================================================================
000840DA 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
000840E2                            
000840E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000840E2                            
000840E2                            
000840E2                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
000840E2 0815 0002                  		btst	#2,(a5)
000840E6 6600                       		bne.s	locret_72D16
000840E8 7000                       		moveq	#0,d0
000840EA 102D 000B                  		move.b	$B(a5),d0
000840EE 226E 0018                  		movea.l	$18(a6),a1
000840F2 4A2E 000E                  		tst.b	$E(a6)
000840F6 6700                       		beq.s	loc_72CD8
000840F8 226E 0020                  		movea.l	$20(a6),a1
000840FC 4A2E 000E                  		tst.b	$E(a6)
00084100 6B00                       		bmi.s	loc_72CD8
00084102 226E 0020                  		movea.l	$20(a6),a1
00084106                            
00084106                            loc_72CD8:
00084106 5340                       		subq.w	#1,d0
00084108 6B00                       		bmi.s	loc_72CE6
0008410A 323C 0019                  		move.w	#$19,d1
0008410E                            
0008410E                            loc_72CE0:
0008410E D2C1                       		adda.w	d1,a1
00084110 51C8 FFFC                  		dbf	d0,loc_72CE0
00084114                            
00084114                            loc_72CE6:
00084114 D2FC 0015                  		adda.w	#$15,a1
00084118 45FA 0000                  		lea	byte_72D2C(pc),a2
0008411C 102D 001F                  		move.b	$1F(a5),d0
00084120 0240 0007                  		andi.w	#7,d0
00084124 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
00084128 162D 0009                  		move.b	9(a5),d3
0008412C 6B00                       		bmi.s	locret_72D16
0008412E 7A03                       		moveq	#3,d5
00084130                            
00084130                            loc_72D02:
00084130 101A                       		move.b	(a2)+,d0
00084132 1219                       		move.b	(a1)+,d1
00084134 E20C                       		lsr.b	#1,d4
00084136 6400                       		bcc.s	loc_72D12
00084138 D203                       		add.b	d3,d1
0008413A 6500                       		bcs.s	loc_72D12
0008413C 4EBA F9E8                  		jsr	sub_72722(pc)
00084140                            
00084140                            loc_72D12:
00084140 51CD FFEE                  		dbf	d5,loc_72D02
00084144                            
00084144                            locret_72D16:
00084144 4E75                       		rts	
00084146                            ; End of function sub_72CB4
00084146                            
00084146                            ; ===========================================================================
00084146 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
00084150 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
0008415A 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
0008415E                            ; ===========================================================================
0008415E                            
0008415E                            loc_72D30:				; XREF: loc_72A64
0008415E 08D5 0003                  		bset	#3,(a5)
00084162 2B4C 0014                  		move.l	a4,$14(a5)
00084166 1B5C 0018                  		move.b	(a4)+,$18(a5)
0008416A 1B5C 0019                  		move.b	(a4)+,$19(a5)
0008416E 1B5C 001A                  		move.b	(a4)+,$1A(a5)
00084172 101C                       		move.b	(a4)+,d0
00084174 E208                       		lsr.b	#1,d0
00084176 1B40 001B                  		move.b	d0,$1B(a5)
0008417A 426D 001C                  		clr.w	$1C(a5)
0008417E 4E75                       		rts	
00084180                            ; ===========================================================================
00084180                            
00084180                            loc_72D52:				; XREF: loc_72A64
00084180 08D5 0003                  		bset	#3,(a5)
00084184 4E75                       		rts	
00084186                            ; ===========================================================================
00084186                            
00084186                            loc_72D58:				; XREF: loc_72A64
00084186 0895 0007                  		bclr	#7,(a5)
0008418A 0895 0004                  		bclr	#4,(a5)
0008418E 4A2D 0001                  		tst.b	1(a5)
00084192 6B00                       		bmi.s	loc_72D74
00084194 4A2E 0008                  		tst.b	8(a6)
00084198 6B00 0000                  		bmi.w	loc_72E02
0008419C 4EBA F964                  		jsr	sub_726FE(pc)
000841A0 6000                       		bra.s	loc_72D78
000841A2                            ; ===========================================================================
000841A2                            
000841A2                            loc_72D74:
000841A2 4EBA FC2C                  		jsr	sub_729A0(pc)
000841A6                            
000841A6                            loc_72D78:
000841A6 4A2E 000E                  		tst.b	$E(a6)
000841AA 6A00 0000                  		bpl.w	loc_72E02
000841AE 4216                       		clr.b	0(a6)
000841B0 7000                       		moveq	#0,d0
000841B2 102D 0001                  		move.b	1(a5),d0
000841B6 6B00                       		bmi.s	loc_72DCC
000841B8 41FA F4A4                  		lea	dword_722CC(pc),a0
000841BC 264D                       		movea.l	a5,a3
000841BE 0C00 0004                  		cmpi.b	#4,d0
000841C2 6600                       		bne.s	loc_72DA8
000841C4 4A2E 0370                  		tst.b	$370(a6)				; MJ: new SFX location
000841C8 6A00                       		bpl.s	loc_72DA8
000841CA 4BEE 0370                  		lea	$370(a6),a5				; MJ: new SFX location
000841CE 226E 0020                  		movea.l	$20(a6),a1
000841D2 6000                       		bra.s	loc_72DB8
000841D4                            ; ===========================================================================
000841D4                            
000841D4                            loc_72DA8:
000841D4 5500                       		subq.b	#2,d0
000841D6 E508                       		lsl.b	#2,d0
000841D8 2A70 0000                  		movea.l	(a0,d0.w),a5
000841DC 4A15                       		tst.b	(a5)
000841DE 6A00                       		bpl.s	loc_72DC8
000841E0 226E 0018                  		movea.l	$18(a6),a1
000841E4                            
000841E4                            loc_72DB8:
000841E4 0895 0002                  		bclr	#2,(a5)
000841E8 08D5 0001                  		bset	#1,(a5)
000841EC 102D 000B                  		move.b	$B(a5),d0
000841F0 4EBA FE8A                  		jsr	sub_72C4E(pc)
000841F4                            
000841F4                            loc_72DC8:
000841F4 2A4B                       		movea.l	a3,a5
000841F6 6000                       		bra.s	loc_72E02
000841F8                            ; ===========================================================================
000841F8                            
000841F8                            loc_72DCC:
000841F8 41EE 03A0                  		lea	$3A0(a6),a0				; MJ: new SFX location
000841FC 4A10                       		tst.b	(a0)
000841FE 6A00                       		bpl.s	loc_72DE0
00084200 0C00 00E0                  		cmpi.b	#$E0,d0
00084204 6700                       		beq.s	loc_72DEA
00084206 0C00 00C0                  		cmpi.b	#$C0,d0
0008420A 6700                       		beq.s	loc_72DEA
0008420C                            
0008420C                            loc_72DE0:
0008420C 41FA F450                  		lea	dword_722CC(pc),a0
00084210 E608                       		lsr.b	#3,d0
00084212 2070 0000                  		movea.l	(a0,d0.w),a0
00084216                            
00084216                            loc_72DEA:
00084216 0890 0002                  		bclr	#2,(a0)
0008421A 08D0 0001                  		bset	#1,(a0)
0008421E 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00084224 6600                       		bne.s	loc_72E02
00084226 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0008422E                            
0008422E                            loc_72E02:
0008422E 584F                       		addq.w	#4,sp					; MJ: changed to 4 (go back, but not out of sound driver)
00084230 4A2E 0008                  		tst.b	$08(a6)					; MJ: is this a PCM channel?
00084234 6600                       		bne.s	FlagF2_NoWaitFrame			; MJ: if so, branch
00084236 584F                       		addq.w	#4,sp					; MJ: go back outside the sound driver like normal
00084238                            
00084238                            FlagF2_NoWaitFrame:
00084238 4E75                       		rts	
0008423A                            ; ===========================================================================
0008423A                            
0008423A                            loc_72E06:				; XREF: loc_72A64
0008423A 1B7C 00E0 0001             		move.b	#$E0,1(a5)
00084240 1B5C 001F                  		move.b	(a4)+,$1F(a5)
00084244 0815 0002                  		btst	#2,(a5)
00084248 6600                       		bne.s	locret_72E1E 
0008424A 102C FFFF                  		move.b	-1(a4),d0				; MJ: reload F3 setting to d0
0008424E 13C0 00C0 0011             		move.b	d0,($C00011).l				; MJ: save F3 setting (should be EX (PSG 4) related)
00084254 0200 0003                  		andi.b	#%00000011,d0				; MJ: get only frequency mode bits
00084258 0C00 0003                  		cmpi.b	#%00000011,d0				; MJ: has it been set to use PSG 3's frequency?
0008425C 6600                       		bne.s	locret_72E1E				; MJ: if not, branch
0008425E 13FC 00DF 00C0 0011        		move.b	#%11011111,($C00011).l			; MJ: mute PSG 3's volume
00084266                            
00084266                            locret_72E1E:
00084266 4E75                       		rts	
00084268                            ; ===========================================================================
00084268                            
00084268                            loc_72E20:				; XREF: loc_72A64
00084268 0895 0003                  		bclr	#3,(a5)
0008426C 4E75                       		rts	
0008426E                            ; ===========================================================================
0008426E                            
0008426E                            loc_72E26:				; XREF: loc_72A64
0008426E 1B5C 000B                  		move.b	(a4)+,$B(a5)
00084272 4E75                       		rts	
00084274                            ; ===========================================================================
00084274                            
00084274                            loc_72E2C:				; XREF: loc_72A64
00084274 101C                       		move.b	(a4)+,d0
00084276 E148                       		lsl.w	#8,d0
00084278 101C                       		move.b	(a4)+,d0
0008427A D8C0                       		adda.w	d0,a4
0008427C 534C                       		subq.w	#1,a4
0008427E 4E75                       		rts	
00084280                            ; ===========================================================================
00084280                            
00084280                            loc_72E38:				; XREF: loc_72A64
00084280 7000                       		moveq	#0,d0
00084282 101C                       		move.b	(a4)+,d0
00084284 121C                       		move.b	(a4)+,d1
00084286 4A35 0024                  		tst.b	$24(a5,d0.w)
0008428A 6600                       		bne.s	loc_72E48
0008428C 1B81 0024                  		move.b	d1,$24(a5,d0.w)
00084290                            
00084290                            loc_72E48:
00084290 5335 0024                  		subq.b	#1,$24(a5,d0.w)
00084294 66DE                       		bne.s	loc_72E2C
00084296 544C                       		addq.w	#2,a4
00084298 4E75                       		rts	
0008429A                            ; ===========================================================================
0008429A                            
0008429A                            loc_72E52:				; XREF: loc_72A64
0008429A 7000                       		moveq	#0,d0
0008429C 102D 000D                  		move.b	$D(a5),d0
000842A0 5900                       		subq.b	#4,d0
000842A2 2B8C 0000                  		move.l	a4,(a5,d0.w)
000842A6 1B40 000D                  		move.b	d0,$D(a5)
000842AA 60C8                       		bra.s	loc_72E2C
000842AC                            ; ===========================================================================
000842AC                            
000842AC                            loc_72E64:				; XREF: loc_72A64
000842AC 103C 0088                  		move.b	#$88,d0
000842B0 123C 000F                  		move.b	#$F,d1
000842B4 4EBA F87C                  		jsr	sub_7272E(pc)
000842B8 103C 008C                  		move.b	#$8C,d0
000842BC 123C 000F                  		move.b	#$F,d1
000842C0 6000 F870                  		bra.w	sub_7272E
000842C4                            ; ===========================================================================
000842C4                            Z80ROM:		incbin	"Dual PCM\Z80.bin"
000862C4                            Z80ROM_End:	even
000862C4                            Music81:	incbin	sound\music81.bin
00087692 00                         		even
00087692                            Music82:	incbin	sound\music82.bin
0008D1BC                            		even
0008D1BC                            Music83:	incbin	sound\music83.bin
0008E684 00                         		even
0008E684                            Music84:	incbin	sound\music84.bin
0008FD54 00                         		even
0008FD54                            Music85:	incbin	sound\music85.bin
00090C80                            		even
00090C80                            Music86:	incbin	sound\music86.bin
00093EA2 00                         		even
00093EA2                            Music87:	incbin	sound\music87.bin
0009408E 00                         		even
0009408E                            Music88:	incbin	sound\music88.bin
00094182 00                         		even
00094182                            Music89:	incbin	sound\music89.bin
00095506 00                         		even
00095506                            Music8A:	incbin	sound\music8A.bin
000A7C46 00                         		even
000A7C46                            Music8B:	incbin	sound\music8B.bin
000A8D26 00                         		even
000A8D26                            Music8C:	incbin	sound\music8C.bin
000ABB5C 00                         		even
000ABB5C                            Music8D:	incbin	sound\music8D.bin
000ACAEE 00                         		even
000ACAEE                            Music8E:	incbin	sound\music8E.bin
000ACE00 00                         		even
000ACE00                            Music8F:	incbin	sound\music8F.bin
000ACF56 00                         		even
000ACF56                            Music90:	incbin	sound\music90.bin
000AD0BA 00                         		even
000AD0BA                            Music91:	incbin	sound\music91.bin
000BA8B6 00                         		even
000BA8B6                            Music92:	incbin	sound\music92.bin
000BA9E6 00                         		even
000BA9E6                            Music93:	incbin	sound\music93.bin
000BAABA 00                         		even
000BAABA                            Music94:	incbin	sound\music94.bin
000BC754                            		even
000BC754                            Music95:	incbin	sound\music95.bin
000BF4FC 00                         		even
000BF4FC                            Music96:	incbin	sound\music96.bin
000C0BEC 00                         		even
000C0BEC                            Music97:	incbin	sound\music97.bin
000C7006 00                         		even
000C7006                            Music98:	incbin	sound\music98.bin
000CADC8 00                         		even
000CADC8                            Music99:	incbin	sound\music92.bin
000CAEF8 00                         		even
000CAEF8                            Music9A:	incbin	sound\music9A.bin
000CCEC6                            		even
000CCEC6                            Music9B:	incbin	sound\music9B.bin
000D3278                            		even
000D3278                            Music9C:	incbin	sound\music9C.bin
000D56CE                            		even
000D56CE                            Music9D:	incbin	sound\music9D.bin
000D8860                            		even
000D8860                            Music9E:	incbin	sound\music9E.bin
000DF410 00                         		even
000DF410                            Music9F:	incbin	sound\music9F.bin
000E6530 00                         		even
000E6530                            ; ---------------------------------------------------------------------------
000E6530                            ; Sound	effect pointers
000E6530                            ; ---------------------------------------------------------------------------
000E6530 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000E653C 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000E6548 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000E6554 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000E6560 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000E656C 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000E6578 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000E6584 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000E6590 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000E659C 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000E65A8 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000E65B4 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000E65C0 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000E65CC 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000E65D8 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000E65E4 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000E65F0 0000 0000                  		dc.l SoundD1
000E65F4                            
000E65F4 0000 0000                  SoundD0Index:	dc.l SoundD0
000E65F8                            SoundA0:	incbin	sound\soundA0.bin
000E660E                            		even
000E660E                            SoundA1:	incbin	sound\soundA1.bin
000E6638                            		even
000E6638                            SoundA2:	incbin	sound\soundA2.bin
000E6658                            		even
000E6658                            SoundA3:	incbin	sound\soundA3.bin
000E668A                            		even
000E668A                            SoundA4:	incbin	sound\soundA4.bin
000E66C0                            		even
000E66C0                            SoundA5:	incbin	sound\soundA5.bin
000E66EC                            		even
000E66EC                            SoundA6:	incbin	sound\soundA6.bin
000E671C                            		even
000E671C                            SoundA7:	incbin	sound\soundA7.bin
000E674C                            		even
000E674C                            SoundA8:	incbin	sound\soundA8.bin
000E6780                            		even
000E6780                            SoundA9:	incbin	sound\soundA9.bin
000E6792                            		even
000E6792                            SoundAA:	incbin	sound\soundAA.bin
000E67D4                            		even
000E67D4                            SoundAB:	incbin	sound\soundAB.bin
000E67F4                            		even
000E67F4                            SoundAC:	incbin	sound\soundAC.bin
000E6828                            		even
000E6828                            SoundAD:	incbin	sound\soundAD.bin
000E685E                            		even
000E685E                            SoundAE:	incbin	sound\soundAE.bin
000E68A8                            		even
000E68A8                            SoundAF:	incbin	sound\soundAF.bin
000E68D6                            		even
000E68D6                            SoundB0:	incbin	sound\soundB0.bin
000E6908                            		even
000E6908                            SoundB1:	incbin	sound\soundB1.bin
000E6934                            		even
000E6934                            SoundB2:	incbin	sound\soundB2.bin
000E6984                            		even
000E6984                            SoundB3:	incbin	sound\soundB3.bin
000E69CE                            		even
000E69CE                            SoundB4:	incbin	sound\soundB4.bin
000E6A2A                            		even
000E6A2A                            SoundB5:	incbin	sound\soundB5.bin
000E6A58                            		even
000E6A58                            SoundB6:	incbin	sound\soundB6.bin
000E6A76                            		even
000E6A76                            SoundB7:	incbin	sound\soundB7.bin
000E6AB2                            		even
000E6AB2                            SoundB8:	incbin	sound\soundB8.bin
000E6AD0                            		even
000E6AD0                            SoundB9:	incbin	sound\soundB9.bin
000E6B34                            		even
000E6B34                            SoundBA:	incbin	sound\soundBA.bin
000E6B5C                            		even
000E6B5C                            SoundBB:	incbin	sound\soundBB.bin
000E6B88                            		even
000E6B88                            SoundBC:	incbin	sound\soundBC.bin
000E6BCA                            		even
000E6BCA                            SoundBD:	incbin	sound\soundBD.bin
000E6C1E                            		even
000E6C1E                            SoundBE:	incbin	sound\soundBE.bin
000E6C58                            		even
000E6C58                            SoundBF:	incbin	sound\soundBF.bin
000E6CCA                            		even
000E6CCA                            SoundC0:	incbin	sound\soundC0.bin
000E6CF8                            		even
000E6CF8                            SoundC1:	incbin	sound\soundC1.bin
000E6D32                            		even
000E6D32                            SoundC2:	incbin	sound\soundC2.bin
000E6D5C                            		even
000E6D5C                            SoundC3:	incbin	sound\soundC3.bin
000E6DD6                            		even
000E6DD6                            SoundC4:	incbin	sound\soundC4.bin
000E6DFE                            		even
000E6DFE                            SoundC5:	incbin	sound\soundC5.bin
000E6E66                            		even
000E6E66                            SoundC6:	incbin	sound\soundC6.bin
000E6EA8                            		even
000E6EA8                            SoundC7:	incbin	sound\soundC7.bin
000E6ED6                            		even
000E6ED6                            SoundC8:	incbin	sound\soundC8.bin
000E6EE8                            		even
000E6EE8                            SoundC9:	incbin	sound\soundC9.bin
000E6F16                            		even
000E6F16                            SoundCA:	incbin	sound\soundCA.bin
000E6F44                            		even
000E6F44                            SoundCB:	incbin	sound\soundCB.bin
000E6F90                            		even
000E6F90                            SoundCC:	incbin	sound\soundCC.bin
000E6FCA                            		even
000E6FCA                            SoundCD:	incbin	sound\soundCD.bin
000E6FD8                            		even
000E6FD8                            SoundCE:	incbin	sound\soundCE.bin
000E7006                            		even
000E7006                            SoundCF:	incbin	sound\soundCF.bin
000E703E                            		even
000E703E                            SoundD0:	incbin	sound\soundD0.bin
000E7078                            		even
000E7078                            SoundD1:	incbin	sound\soundD1.bin
000E70B4                            		even			
000E70B4                            SegaPCM:	incbin	sound\segapcm.wav,$3A
000F873A 00                         SegaPCM_End:	even
000F873A                            
000F873A                            ; ===========================================================================
000F873A                            ; ---------------------------------------------------------------------------
000F873A                            ; Sample 68k PCM list
000F873A                            ; ---------------------------------------------------------------------------
000F873A                            
000F873A 0000 0000                  SampleList:		dc.l	StopSample			; 80 (THIS IS A REST NOTE, DO NOT EDIT...)
000F873E 0000 0000                  			dc.l	Sonic1Kick			; 81
000F8742 0000 0000                  			dc.l	Sonic1Snare			; 82
000F8746 0000 0000                  			dc.l	Sonic1TimpaniLow		; 83
000F874A 0000 0000                  			dc.l	ChaotixCrash			; 84
000F874E 0000 0000                   			dc.l	ChaotixSplash			; 85
000F8752 0000 0000                  			dc.l	ChaotixTom1			; 86
000F8756 0000 0000                  			dc.l	ChaotixTom2			; 87
000F875A 0000 0000                  			dc.l	Sonic1TimpaniHigh		; 88
000F875E 0000 0000                  			dc.l	Sonic1TimpaniMid		; 89
000F8762 0000 0000                  			dc.l	Sonic1TimpaniLow		; 8A
000F8766 0000 0000                  			dc.l	Sonic1TimpaniLower		; 8B
000F876A 0000 0000                  			dc.l	Sonic3CleanSnare		; 8C
000F876E 0000 0000                  			dc.l	KSTHi		; 8D
000F8772 0000 0000                  			dc.l	KSTLo		; 8E
000F8776 0000 0000                  			dc.l	MainCrash		; 8F
000F877A 0000 0000                  			dc.l	RideCymbal		; 90
000F877E 0000 0000                  			dc.l	Sonic1SnareSonic3Kick		; 91
000F8782 0000 0000                  			dc.l	Sonic3Kick		; 92
000F8786 0000 0000                  			dc.l	Tom1		; 93
000F878A 0000 0000                  			dc.l	Tom2		; 94
000F878E 0000 0000                  			dc.l	Tom3		; 95
000F8792 0000 0000                  			dc.l	Tom4		; 96
000F8796 0000 0000                  			dc.l	Sonic2Clap		; 97
000F879A 0000 0000                  			dc.l	Sonic1SnareSonic2Clap		; 98
000F879E 0000 0000                  			dc.l	S1STom1		; 99	
000F87A2 0000 0000                  			dc.l	S1STom2		; 9A			
000F87A6 0000 0000                  			dc.l	S1STom3		; 9B
000F87AA 0000 0000                  			dc.l	S1STom4		; 9C			
000F87AE 0000 0000                  			dc.l	S1SLLZK		; 9D
000F87B2 0000 0000                  			dc.l	LLZK		; 9E			
000F87B6 0000 0000                  			dc.l	Bongo1		; 9F
000F87BA 0000 0000                  			dc.l	Bongo2		; A0
000F87BE 0000 0000                  			dc.l	S1SnareCrash	;A1
000F87C2 0000 0000                  			dc.l	S1SnareKick	;A2
000F87C6 0000 0000                  			dc.l	MainCrashWoo	;A3
000F87CA 0000 0000                  			dc.l	Woo		;A4
000F87CE 0000 0000                  			dc.l	GoS1Snare	;A5
000F87D2 0000 0000                  			dc.l	CmonRoll	;A6
000F87D6 0000 0000                  			dc.l	ReverseCymbal	;A7
000F87DA 0000 0000                  			dc.l	Cutscene1	;A8
000F87DE 0000 0000                  			dc.l	Cutscene2	;A9
000F87E2 0000 0000                  			dc.l	Snare3	;AA
000F87E6 0000 0000                  			dc.l	Snare3Crash	;AB
000F87EA 0000 0000                  			dc.l	EGGStation	;AC
000F87EE                            ; ---------------------------------------------------------------------------
000F87EE                            ; Sample z80 pointers
000F87EE                            ; ---------------------------------------------------------------------------
000F87EE                            
000F87EE 0000 00                    StopSample:		dcz80	SWF_StopSample
000F87F1 0000 00                    Sonic1Kick:		dcz80	SWF_S1Kick
000F87F4 0000 00                    Sonic1Snare:		dcz80	SWF_S1Snare
000F87F7 0000 00                    Sonic1TimpaniHigh:	dcz80	SWF_S1TimpaniHigh
000F87FA 0000 00                    Sonic1TimpaniMid:	dcz80	SWF_S1TimpaniMid
000F87FD 0000 00                    Sonic1TimpaniLow:	dcz80	SWF_S1TimpaniLow
000F8800 0000 00                    Sonic1TimpaniLower:	dcz80	SWF_S1TimpaniLower
000F8803 0000 00                    ChaotixCrash:	dcz80	SWF_ChaotixCrash
000F8806 0000 00                    ChaotixSplash:	dcz80	SWF_ChaotixSplash
000F8809 0000 00                    ChaotixTom1:	dcz80	SWF_ChaotixTom1
000F880C 0000 00                    ChaotixTom2:	dcz80	SWF_ChaotixTom2
000F880F 0000 00                    Sonic3CleanSnare:	dcz80	SWF_Sonic3CleanSnare
000F8812 0000 00                    KSTHi:	dcz80	SWF_KSTHi
000F8815 0000 00                    KSTLo:	dcz80	SWF_KSTLo
000F8818 0000 00                    MainCrash:	dcz80	SWF_MainCrash
000F881B 0000 00                    RideCymbal:	dcz80	SWF_RideCymbal
000F881E 0000 00                    Sonic1SnareSonic3Kick:	dcz80	SWF_Sonic1SnareSonic3Kick
000F8821 0000 00                    Sonic3Kick:	dcz80	SWF_Sonic3Kick
000F8824 0000 00                    Tom1:	dcz80	SWF_Tom1
000F8827 0000 00                    Tom2:	dcz80	SWF_Tom2
000F882A 0000 00                    Tom3:	dcz80	SWF_Tom3
000F882D 0000 00                    Tom4:	dcz80	SWF_Tom4
000F8830 0000 00                    Sonic2Clap:	dcz80	SWF_Sonic2Clap
000F8833 0000 00                    Sonic1SnareSonic2Clap:	dcz80	SWF_Sonic1SnareSonic2Clap
000F8836 0000 00                    S1STom1:	dcz80	SWF_S1STom1
000F8839 0000 00                    S1STom2:	dcz80	SWF_S1STom2
000F883C 0000 00                    S1STom3:	dcz80	SWF_S1STom3
000F883F 0000 00                    S1STom4:	dcz80	SWF_S1STom4
000F8842 0000 00                    LLZK:	dcz80	SWF_LLZK
000F8845 0000 00                    S1SLLZK:	dcz80	SWF_S1SLLZK
000F8848 0000 00                    Bongo1:	dcz80	SWF_Bongo1
000F884B 0000 00                    Bongo2:	dcz80	SWF_Bongo2
000F884E 0000 00                    S1SnareCrash: dcz80 SWF_S1SnareCrash
000F8851 0000 00                    S1SnareKick: dcz80 SWF_S1SnareKick
000F8854 0000 00                    MainCrashWoo: dcz80 SWF_MainCrashWoo
000F8857 0000 00                    Woo: dcz80 SWF_Woo
000F885A 0000 00                    GoS1Snare: dcz80 SWF_GoS1Snare
000F885D 0000 00                    CmonRoll: dcz80 SWF_CmonRoll
000F8860 0000 00                    ReverseCymbal: dcz80 SWF_ReverseCymbal
000F8863 0000 00                    Cutscene1: dcz80 SWF_Cutscene1
000F8866 0000 00                    Cutscene2: dcz80 SWF_Cutscene2
000F8869 0000 00                    Snare3: dcz80 SWF_Snare3
000F886C 0000 00                    Snare3Crash: dcz80 SWF_Snare3Crash
000F886F 0000 00                    EGGStation: dcz80 SWF_EGGStation
000F8872                            ; ---------------------------------------------------------------------------
000F8872                            ; Sample file includes
000F8872                            ; ---------------------------------------------------------------------------
000F8872 0000 0000 0000 0000 0000+  			align	$20,$FF
000F8880                            SWF_StopSample:		dcb.b	$7FFF,$00
0010087F 80                         			dc.b	$80
00100880                            ; ---------------------------------------------------------------------------
00100880                            SWF_S1Kick:		incbin	"Dual PCM\Samples\incswf\Sonic 1 Kick.swf"
001019A0                            SWF_S1Snare:		incbin	"Dual PCM\Samples\incswf\Sonic 1 Snare.swf"
001026E0                            SWF_S1TimpaniHigh:	incbin	"Dual PCM\Samples\incswf\Sonic 1 Timpani High.swf"
00106D80                            SWF_S1TimpaniMid:	incbin	"Dual PCM\Samples\incswf\Sonic 1 Timpani Mid.swf"
0010BCC0                            SWF_S1TimpaniLow:	incbin	"Dual PCM\Samples\incswf\Sonic 1 Timpani Low.swf"
00111B00                            SWF_S1TimpaniLower:	incbin	"Dual PCM\Samples\incswf\Sonic 1 Timpani Lower.swf"
00117EE0                            SWF_ChaotixCrash:	incbin	"Dual PCM\Samples\incswf\Knuckles Chaotix Crash Cymbal.swf"
0011F6E0                            SWF_ChaotixSplash:	incbin	"Dual PCM\Samples\incswf\Knuckles Chaotix Splash Cymbal.swf"
00121D80                            SWF_ChaotixTom1:	incbin	"Dual PCM\Samples\incswf\Knuckles Chaotix Tom 1.swf"
00128DC0                            SWF_ChaotixTom2:	incbin	"Dual PCM\Samples\incswf\Knuckles Chaotix Tom 2.swf"
00129F20                            SWF_Sonic3CleanSnare:	incbin	"Dual PCM\Samples\incswf\Sonic 3 Cleaner Snare.swf"
0012AE00                            SWF_KSTHi:	incbin	"Dual PCM\Samples\incswf\KSTHi.swf"
0012F4A0                            SWF_KSTLo:	incbin	"Dual PCM\Samples\incswf\KSTLo.swf"
001352E0                            SWF_MainCrash:	incbin	"Dual PCM\Samples\incswf\MainCrash.swf"
0013A220                            SWF_RideCymbal:	incbin	"Dual PCM\Samples\incswf\RideCymbal.swf"
0013C080                            SWF_Sonic1SnareSonic3Kick:	incbin	"Dual PCM\Samples\incswf\Sonic 1 Snare and Sonic 3 Kick.swf"
0013CDA0                            SWF_Sonic3Kick:	incbin	"Dual PCM\Samples\incswf\Sonic 3 Kick.swf"
0013D3C0                            SWF_Tom1:	incbin	"Dual PCM\Samples\incswf\Tom1.swf"
0013E2A0                            SWF_Tom2:	incbin	"Dual PCM\Samples\incswf\Tom2.swf"
0013F480                            SWF_Tom3:	incbin	"Dual PCM\Samples\incswf\Tom3.swf"
00140A60                            SWF_Tom4:	incbin	"Dual PCM\Samples\incswf\Tom4.swf"
00142A00                            SWF_Sonic2Clap:	incbin	"Dual PCM\Samples\incswf\Sonic 2 Clap.swf"
00143720                            SWF_Sonic1SnareSonic2Clap:	incbin	"Dual PCM\Samples\incswf\Sonic 1 Snare and Sonic 2 Clap.swf"
00144460                            SWF_S1STom1:	incbin	"Dual PCM\Samples\incswf\S1STom1.swf"
00145340                            SWF_S1STom2:	incbin	"Dual PCM\Samples\incswf\S1STom2.swf"
00146520                            SWF_S1STom3:	incbin	"Dual PCM\Samples\incswf\S1STom3.swf"
00147B00                            SWF_S1STom4:	incbin	"Dual PCM\Samples\incswf\S1STom4.swf"
00149AA0                            SWF_LLZK:	incbin	"Dual PCM\Samples\incswf\LLZK.swf"
0014B520                            SWF_S1SLLZK:	incbin	"Dual PCM\Samples\incswf\S1SLLZK.swf"
0014CFA0                            SWF_Bongo1:	incbin	"Dual PCM\Samples\incswf\Bongo1.swf"
0014D940                            SWF_Bongo2:	incbin	"Dual PCM\Samples\incswf\Bongo2.swf"
0014E680                            SWF_S1SnareCrash:	incbin	"Dual PCM\Samples\incswf\S1Snare and MainCrash.swf"
001535A0                            SWF_S1SnareKick:	incbin	"Dual PCM\Samples\incswf\S1SnareKick.swf"
001546C0                            SWF_MainCrashWoo:	incbin	"Dual PCM\Samples\incswf\MainCrashWoo.swf"
001595E0                            SWF_Woo:	incbin	"Dual PCM\Samples\incswf\Woo.swf"
0015AB20                            SWF_GoS1Snare:	incbin	"Dual PCM\Samples\incswf\GoS1Snare.swf"
0015BF20                            SWF_CmonRoll:	incbin	"Dual PCM\Samples\incswf\CmonRoll.swf"
0015EC60                            SWF_ReverseCymbal:	incbin	"Dual PCM\Samples\incswf\Reverse cymbal.swf"
001624E0                            SWF_Cutscene1:	incbin	"Dual PCM\Samples\incswf\Cutscene1.swf"
00167400                            SWF_Cutscene2:	incbin	"Dual PCM\Samples\incswf\Cutscene2.swf"
0016C320                            SWF_Snare3:	incbin	"Dual PCM\Samples\incswf\Snare3.swf"
0016D820                            SWF_Snare3Crash:	incbin	"Dual PCM\Samples\incswf\Snare3Crash.swf"
00172740                            SWF_EGGStation:	incbin	"Dual PCM\Samples\incswf\EGGStation.swf"
00177660                            ; ===============================================================
00177660                            ; ---------------------------------------------------------------
00177660                            ; Error handling module
00177660                            ; ---------------------------------------------------------------
00177660                             
00177660 4EBA 0000                  BusError:   jsr ErrorHandler(pc)
00177664 4255 5320 4552 524F 5200           dc.b    "BUS ERROR",0           ; text
0017766E 01                                 dc.b    1               ; extended stack frame
00177670 00                                 even
00177670                             
00177670 4EBA 0000                  AddressError:   jsr ErrorHandler(pc)
00177674 4144 4452 4553 5320 4552+          dc.b    "ADDRESS ERROR",0       ; text
00177682 01                                 dc.b    1               ; extended stack frame
00177684 00                                 even
00177684                             
00177684 4EBA 0000                  IllegalInstr:   jsr ErrorHandler(pc)
00177688 494C 4C45 4741 4C20 494E+          dc.b    "ILLEGAL INSTRUCTION",0     ; text
0017769C 00                                 dc.b    0               ; extended stack frame
0017769E 00                                 even
0017769E                             
0017769E 4EBA 0000                  ZeroDivide: jsr ErrorHandler(pc)
001776A2 5A45 524F 2044 4956 4944+          dc.b    "ZERO DIVIDE",0         ; text
001776AE 00                                 dc.b    0               ; extended stack frame
001776B0 00                                 even
001776B0                             
001776B0 4EBA 0000                  ChkInstr:   jsr ErrorHandler(pc)
001776B4 4348 4B20 494E 5354 5255+          dc.b    "CHK INSTRUCTION",0         ; text
001776C4 00                                 dc.b    0               ; extended stack frame
001776C6 00                                 even
001776C6                             
001776C6 4EBA 0000                  TrapvInstr: jsr ErrorHandler(pc)
001776CA 5452 4150 5620 494E 5354+          dc.b    "TRAPV INSTRUCTION",0       ; text
001776DC 00                                 dc.b    0               ; extended stack frame
001776DE 00                                 even
001776DE                             
001776DE 4EBA 0000                  PrivilegeViol:  jsr ErrorHandler(pc)
001776E2 5052 4956 494C 4547 4520+          dc.b    "PRIVILEGE VIOLATION",0     ; text
001776F6 00                                 dc.b    0               ; extended stack frame
001776F8 00                                 even
001776F8                             
001776F8 4EBA 0000                  Trace:      jsr ErrorHandler(pc)
001776FC 5452 4143 4500                     dc.b    "TRACE",0           ; text
00177702 00                                 dc.b    0               ; extended stack frame
00177704 00                                 even
00177704                             
00177704 4EBA 0000                  Line1010Emu:    jsr ErrorHandler(pc)
00177708 4C49 4E45 2031 3031 3020+          dc.b    "LINE 1010 EMULATOR",0      ; text
0017771B 00                                 dc.b    0               ; extended stack frame
0017771C                                    even
0017771C                             
0017771C 4EBA 0000                  Line1111Emu:    jsr ErrorHandler(pc)
00177720 4C49 4E45 2031 3131 3120+          dc.b    "LINE 1111 EMULATOR",0      ; text
00177733 00                                 dc.b    0               ; extended stack frame
00177734                                    even
00177734                             
00177734 4EBA 0000                  ErrorExcept:    jsr ErrorHandler(pc)
00177738 4552 524F 5220 4558 4345+          dc.b    "ERROR EXCEPTION",0         ; text
00177748 00                                 dc.b    0               ; extended stack frame
0017774A 00                                 even
0017774A                             
0017774A                            ErrorHandler:   incbin  "ErrorHandler.bin"
00177F2E                            
00177F2E                            	include	"s2_menu.asm"	; Sonic 2 level select
00177F2E                            ;===============================================================================
00177F2E                            ; Menu do Sonic 2 No Sonic 1 reprogramado por Esrael L. G. Neto
00177F2E                            ; [ In�cio ]
00177F2E                            ;
00177F2E                            ; O c�digo deste menu foi desenvolvido para funcionar com
00177F2E                            ; o disassembly do Sonic 1 feito por -> drx (www.hacking-cult.org)
00177F2E                            ; 
00177F2E                            ; Se estiver usando um disassembly diferente modifique os jumps no final do 
00177F2E                            ; c�digo para que aponte para as rotinas equivalentes.
00177F2E                            ; 
00177F2E                            ; Para pode utilizar este menu basta fazer a seguinte modifica��o no c�digo 
00177F2E                            ; original:
00177F2E                            ; Localize o label  -> loc_3242 adicione -> jmp     Level_Select_Menu
00177F2E                            ; O c�digo deve ficar como abaixo
00177F2E                            ;               ......................
00177F2E                            ; loc_3242:
00177F2E                            ;		tst.b	($FFFFFFE0).w
00177F2E                            ;		beq.w	PlayLevel	
00177F2E                            ;		btst	#6,($FFFFF604).w 
00177F2E                            ;		beq.w	PlayLevel	  		
00177F2E                            ;		jmp     Level_Select_Menu ; <- Carrega o Menu do Sonic 2	
00177F2E                            ;		moveq	#2,d0		
00177F2E                            ;		bsr.w	PalLoad		 
00177F2E                            ;               ...............
00177F2E                            ;
00177F2E                            ; N�o esque�a de incluir este asm em seu c�digo com a diretiva include:
00177F2E                            ;               include 's2_menu.asm'
00177F2E                            ;===============================================================================  
00177F2E =FFFFFFE1                  Slow_Motion_Flag      equ $FFFFFFE1
00177F2E =FFFFFFE2                  Debug_Mode_Flag       equ $FFFFFFE2
00177F2E                            
00177F2E =00000083                  Level_Select_Menu_snd   = $0083
00177F2E =00000093                  Emerald_Snd             = $0093
00177F2E =000000B5                  Ring_Snd                = $00B5
00177F2E =000000E0                  Volume_Down             = $00E0
00177F2E =000000E4                  Stop_Sound              = $00E4
00177F2E                            ;-------------------------------------------------------------------------------
00177F2E                            Level_Select_Menu:
00177F2E 103C 00E4                                  move.b  #Stop_Sound, D0
00177F32 6100 0000                                  bsr     Menu_Play_Music
00177F36 6100 0000                                  bsr     Menu_Pal_FadeFrom
00177F3A 46FC 2700                                  move    #$2700, SR
00177F3E 3038 F60C                                  move.w  ($FFFFF60C).w, D0
00177F42 0200 00BF                                  andi.b  #$BF, D0
00177F46 33C0 00C0 0004                             move.w  D0, ($00C00004)
00177F4C 6100 0000                                  bsr     Menu_ClearScreen
00177F50 4DF9 00C0 0004                             lea     ($00C00004), A6
00177F56 3CBC 8004                                  move.w  #$8004, (A6)
00177F5A 3CBC 8230                                  move.w  #$8230, (A6)
00177F5E 3CBC 8407                                  move.w  #$8407, (A6)
00177F62 3CBC 8230                                  move.w  #$8230, (A6)
00177F66 3CBC 8700                                  move.w  #$8700, (A6)
00177F6A 3CBC 8C81                                  move.w  #$8C81, (A6)
00177F6E 3CBC 9001                                  move.w  #$9001, (A6)
00177F72 43F8 AC00                                  lea     ($FFFFAC00).w, A1
00177F76 7000                                       moveq   #$00, D0
00177F78 323C 00FF                                  move.w  #$00FF, D1
00177F7C                            Offset_0x026ACA:
00177F7C 22C0                                       move.l  D0, (A1)+
00177F7E 51C9 FFFC                                  dbra    D1, Offset_0x026ACA
00177F82 43F8 B000                                  lea     ($FFFFB000).w, A1
00177F86 7000                                       moveq   #$00, D0
00177F88 323C 07FF                                  move.w  #$07FF, D1
00177F8C                            Offset_0x026ADA:
00177F8C 22C0                                       move.l  D0, (A1)+
00177F8E 51C9 FFFC                                  dbra    D1, Offset_0x026ADA
00177F92 4278 DC00                                  clr.w   ($FFFFDC00).w
00177F96 21FC FFFF DC00 DCFC                        move.l  #$FFFFDC00, ($FFFFDCFC).w
00177F9E 23FC 4200 0000 00C0 0004                   move.l  #$42000000, ($00C00004)
00177FA8 41F9 0000 0000                             lea     (Menu_Font), A0
00177FAE 6100 0000                                  bsr     Menu_NemesisDec
00177FB2 23FC 5200 0000 00C0 0004                   move.l  #$52000000, ($00C00004)
00177FBC 41F9 0000 0000                             lea     (Level_Icons), A0
00177FC2 4EB9 0000 0000                             jsr     Menu_NemesisDec
00177FC8                            ;-------------------------------------------------------------------------------                
00177FC8                            ; Carrega o Mapeamento do Fundo Sonic/Miles               
00177FC8                            ;-------------------------------------------------------------------------------
00177FC8 43F9 FFFF 0000                             lea     ($FFFF0000), A1
00177FCE 41F9 0000 0000                             lea     (Menu_Mappings), A0
00177FD4 303C 6000                                  move.w  #$6000, D0
00177FD8 6100 0000                                  bsr     Menu_EnigmaDec
00177FDC 43F9 FFFF 0000                             lea     ($FFFF0000), A1
00177FE2 203C 6000 0003                             move.l  #$60000003, D0
00177FE8 7227                                       moveq   #$27, D1
00177FEA 741B                                       moveq   #$1B, D2
00177FEC 6100 0000                                  bsr     Menu_ShowVDPGraphics
00177FF0                            ;-------------------------------------------------------------------------------                
00177FF0                            ; Carrega o Texto do Menu de Seleзгo de Fases               
00177FF0                            ;-------------------------------------------------------------------------------
00177FF0 47F9 FFFF 0000             		lea		($FFFF0000),a3
00177FF6 323C 045F                  		move.w	#$045F,d1
00177FFA                            
00177FFA                            Offset_0x026B4E:
00177FFA 36FC 0000                  		move.w	#$0000,(a3)+
00177FFE 51C9 FFFA                  		dbra	d1,Offset_0x026B4E
00178002 47F9 FFFF 0000             		lea		($FFFF0000),a3
00178008 43F9 0000 0000             		lea		(Menu_Level_Select_Text),a1
0017800E 4BF9 0000 0000             		lea		(Menu_Text_Positions),a5
00178014 7000                       		moveq	#$00,d0
00178016 323C 0009                  		move.w	#$0009,d1	; Quantidade de textos a ser carregada e posiзгo do Sound Test
0017801A                            
0017801A                            Menu_Loop_Load_Text:
0017801A 361D                       		move.w	(a5)+,d3
0017801C 45F3 3000                  		lea		$00(a3,d3),a2
00178020 7400                       		moveq	#$00,d2
00178022 1419                       		move.b	(a1)+,d2
00178024 3602                       		move.w	d2,d3
00178026                            
00178026                            Offset_0x026B7A:
00178026 1019                       		move.b	(a1)+,d0
00178028 34C0                       		move.w	d0,(a2)+
0017802A 51CA FFFA                  		dbra	d2,Offset_0x026B7A
0017802E 343C 000D                  		move.w	#$000D,d2
00178032 9443                       		sub.w	d3,d2
00178034 6500                       		bcs.s	Offset_0x026B92
00178036                            
00178036                            Offset_0x026B8A:
00178036 34FC 0000                  		move.w	#$0000,(a2)+
0017803A 51CA FFFA                  		dbra	d2,Offset_0x026B8A
0017803E                            
0017803E                            Offset_0x026B92:
0017803E 34BC 0011                  		move.w	#$0011,(a2) 	 	 	 ; Load "1"
00178042 45EA 0050                  		lea		$0050(a2),a2
00178046 34BC 0012                  		move.w	#$0012,(a2) 	 	 	 ; Load "2"
0017804A 45EA 0050                  		lea		$0050(a2),a2
0017804E 34BC 0013                  		move.w	#$0013,(a2) 	 	 	 ; Load "3"
00178052 51C9 FFC6                  		dbra	d1,Menu_Loop_Load_Text
00178056                            ;-------------------------------------------------------------------------------
00178056 720E                       		moveq	#$0E,d1
00178058 45EA FBA0                  		lea		$FFFFFBA0(a2),a2
0017805C                            
0017805C                            Menu_Clear_Act_x:						; Limpa os nъmeros dos acts nгo usados e carrega o "*" do Sound Test
0017805C 34BC 0000                  		move.w	#$0000,(a2)				; Load " "
00178060 45EA 0050                  		lea		$0050(a2),a2
00178064 51C9 FFF6                  		dbra	d1,Menu_Clear_Act_x
00178068                            ;		lea     $FF10(a2), a2
00178068                            ;		move.w  #$001A, (a2)          ; Load "*"
00178068                            ;-------------------------------------------------------------------------------
00178068                            ; Carrega o Mapeamento das Asas onde s�o mostrados os �cones
00178068                            ;------------------------------------------------------------------------------- 
00178068 41F9 0000 0000                             lea     (Wings_Mappings), A0
0017806E 43F9 FFFF 0670                             lea     ($FFFF0670), A1
00178074 323C 0006                                  move     #$06, D1
00178078                            Menu_Loop_Next_Line:
00178078 303C 0009                                  move     #$09, D0
0017807C                            Menu_Loop_Load_Wings:
0017807C 32D8                                       move.w   (A0)+, (A1)+
0017807E 51C8 FFFC                                  dbra     D0, Menu_Loop_Load_Wings
00178082 D2FC 003C                                  add.w    #$3C, A1
00178086 51C9 FFF0                                  dbra     D1, Menu_Loop_Next_Line
0017808A                            ;-------------------------------------------------------------------------------                
0017808A                            ; Carrega o Mapeamento dos �cones               
0017808A                            ;-------------------------------------------------------------------------------                                    
0017808A 43F9 FFFF 08C0                             lea     ($FFFF08C0), A1
00178090 41F9 0000 0000                             lea     (Icons_Mappings), A0
00178096 303C 0090                                  move.w  #$0090, D0
0017809A 6100 0000                                  bsr     Menu_EnigmaDec
0017809E 43F9 FFFF 0000                             lea     ($FFFF0000), A1
001780A4 203C 4000 0003                             move.l  #$40000003, D0
001780AA 7227                                       moveq   #$27, D1
001780AC 741B                                       moveq   #$1B, D2
001780AE 6100 0000                                  bsr     Menu_ShowVDPGraphics
001780B2                            ;-------------------------------------------------------------------------------                
001780B2 7600                                       moveq   #$00, D3
001780B4 6100 0000                                  bsr     Offset_0x027040
001780B8 4278 FF70                                  clr.w   ($FFFFFF70).w
001780BC 4278 FE40                                  clr.w   ($FFFFFE40).w
001780C0 4238 F711                                  clr.b   ($FFFFF711).w
001780C4 4278 F7F0                                  clr.w   ($FFFFF7F0).w
001780C8                            ;------------------------------------------------------------------------------- 
001780C8 31FC 0000 F7B8                             move.w  #$0000, ($FFFFF7B8).w  ; Inicializa os quadros das anima��es do menu
001780CE 31FC 0000 F7DA                             move.w  #$0000, ($FFFFF7DA).w  ; Inicializa o contador das anima��es do menu 
001780D4 4EB9 0000 0000                             jsr     Dynamic_Menu           ; Chama a rotina de anima��o
001780DA                            ;-------------------------------------------------------------------------------
001780DA                            
001780DA 7014                                       moveq   #$14, D0
001780DC 6100 0000                                  bsr     Menu_PalLoad1
001780E0 43F8 FB40                                  lea     ($FFFFFB40).w, A1
001780E4 45F8 FBC0                                  lea     ($FFFFFBC0).w, A2
001780E8 7207                                       moveq   #$07, D1
001780EA                            Offset_0x026C26:
001780EA 24D1                                       move.l  (A1), (A2)+
001780EC 4299                                       clr.l   (A1)+
001780EE 51C9 FFFA                                  dbra    D1, Offset_0x026C26
001780F2 103C 0083                                  move.b  #Level_Select_Menu_snd, D0
001780F6 6100 0000                                  bsr     Menu_Play_Music
001780FA 7000                                       moveq   #$00, D0
001780FC 4EB9 0000 0000                             jsr     Menu_LoadPLC2
00178102 31FC 0707 F614                             move.w  #$0707, ($FFFFF614).w
00178108 4278 FFDC                                  clr.w   ($FFFFFFDC).w
0017810C 42B8 EE00                                  clr.l   ($FFFFEE00).w
00178110 42B8 EE04                                  clr.l   ($FFFFEE04).w
00178114 4278 FF0C                                  clr.w   ($FFFFFF0C).w
00178118 4278 FF0E                                  clr.w   ($FFFFFF0E).w
0017811C 11FC 0018 F62A                             move.b  #$18, ($FFFFF62A).w
00178122 6100 0000                                  bsr     Menu_DelayProgram
00178126 3038 F60C                                  move.w  ($FFFFF60C).w, D0
0017812A 0000 0040                                  ori.b   #$40, D0
0017812E 33C0 00C0 0004                             move.w  D0, ($00C00004)
00178134 6100 0000                                  bsr     Menu_Pal_FadeTo
00178138                            Menu_Main_Loop:
00178138 11FC 0018 F62A                             move.b  #$18, ($FFFFF62A).w
0017813E 6100 0000                                  bsr     Menu_DelayProgram
00178142 46FC 2700                                  move    #$2700, SR
00178146 7600                                       moveq   #$00, D3
00178148 6100 0000                                  bsr     Offset_0x026ED8
0017814C 6100 0000                                  bsr     Offset_0x026DEC
00178150 363C 6000                                  move.w  #$6000, D3
00178154 6100 0000                                  bsr     Offset_0x027048
00178158 46FC 2300                                  move    #$2300, SR
0017815C 4EB9 0000 0000                             jsr     Dynamic_Menu
00178162 6100 0000                                  bsr     Menu_RunPLC
00178166 0838 0004 F604                             btst    #$04, ($FFFFF604).w
0017816C 6700                                       beq.s   Offset_0x026CC6
0017816E 31FC 0001 FFD8                             move.w  #$0001, ($FFFFFFD8).w
00178174                            Offset_0x026CC6:
00178174 1038 F605                                  move.b  ($FFFFF605).w, D0
00178178 8038 F607                                  or.b    ($FFFFF607).w, D0
0017817C 0200 0080                                  andi.b  #$80, D0
00178180 6600                                       bne.s   Offset_0x026CD8
00178182 60B4                                       bra     Menu_Main_Loop
00178184                            Offset_0x026CD8:
00178184 3038 FF82                                  move.w  ($FFFFFF82).w, D0
00178188 D040                                       add.w   D0, D0
0017818A 303B 0000                                  move.w  Menu_Level_Select_Array(PC, D0), D0
0017818E 6B00 0000                                  bmi     Menu_Game_Reset
00178192 0C40 0600                                  cmpi.w  #$0600, D0
00178196 6700 0000                                  beq     Menu_Ending_Sequence
0017819A 0C40 5555                                  cmpi.w  #$5555, D0
0017819E 6798                                       beq     Menu_Main_Loop
001781A0 0C40 4000                                  cmpi.w  #$4000, D0
001781A4 6600 0000                                  bne     Menu_Load_Level
001781A8 11FC 0010 F600                             move.b  #$10, ($FFFFF600).w
001781AE 4278 FE10                                  clr.w   ($FFFFFE10).w
001781B2 11FC 0003 FE12                             move.b  #$03, ($FFFFFE12).w
001781B8 11FC 0003 FEC6                             move.b  #$03, ($FFFFFEC6).w
001781BE 7000                                       moveq   #$00, D0
001781C0 31C0 FE20                                  move.w  D0, ($FFFFFE20).w
001781C4 21C0 FE22                                  move.l  D0, ($FFFFFE22).w
001781C8 21C0 FE26                                  move.l  D0, ($FFFFFE26).w
001781CC 31C0 FED0                                  move.w  D0, ($FFFFFED0).w
001781D0 21C0 FED2                                  move.l  D0, ($FFFFFED2).w
001781D4 21C0 FED6                                  move.l  D0, ($FFFFFED6).w
001781D8 21FC 0000 1388 FFC0                        move.l  #$00001388, ($FFFFFFC0).w
001781E0 21FC 0000 1388 FFC4                        move.l  #$00001388, ($FFFFFFC4).w
001781E8 31F8 FF72 FF70                             move.w  ($FFFFFF72).w, ($FFFFFF70).w
001781EE 4E75                                       rts
001781F0                            Menu_Game_Reset:
001781F0 11FC 0000 F600                             move.b  #$0000, ($FFFFF600).w
001781F6 4E75                                       rts
001781F8                            Menu_Ending_Sequence:
001781F8 11FC 0018 F600                             move.b	#$0018,($FFFFF600).w
001781FE 31FC 0600 FE10             		move.w	#$0600,($FFFFFE10).w
00178204 4E75                       		rts
00178206                            Menu_Level_Select_Array:
00178206 0000 0001 0002                             dc.w    $0000, $0001, $0002	;GHZ
0017820C 0200 0201 0202                             dc.w    $0200, $0201, $0202	;MZ
00178212 0400 0401 0402                             dc.w    $0400, $0401, $0402	;SYZ				
00178218 0100 0101 0102                             dc.w    $0100, $0101, $0102 ;LZ
0017821E 0300 0301 0302                             dc.w    $0300, $0301, $0302	;SLZ
00178224 0500 0501 0103                             dc.w    $0500, $0501, $0103	;SBZ
0017822A 0502 4000 0600                             dc.w    $0502, $4000, $0600	
00178230 FFFF                                       dc.w    $FFFF
00178232                            Menu_Load_Level:
00178232 0240 3FFF                                  andi.w  #$3FFF, D0
00178236 31C0 FE10                                  move.w  D0, ($FFFFFE10).w
0017823A 11FC 000C F600                             move.b  #$0C, ($FFFFF600).w
00178240 11FC 0003 FE12                             move.b  #$03, ($FFFFFE12).w
00178246 11FC 0003 FEC6                             move.b  #$03, ($FFFFFEC6).w
0017824C 7000                                       moveq   #$00, D0
0017824E 31C0 FE20                                  move.w  D0, ($FFFFFE20).w
00178252 21C0 FE22                                  move.l  D0, ($FFFFFE22).w
00178256 21C0 FE26                                  move.l  D0, ($FFFFFE26).w
0017825A 31C0 FED0                                  move.w  D0, ($FFFFFED0).w
0017825E 21C0 FED2                                  move.l  D0, ($FFFFFED2).w
00178262 21C0 FED6                                  move.l  D0, ($FFFFFED6).w
00178266 4E71                                       nop
00178268 4E71                                       nop
0017826A 21FC 0000 1388 FFC0                        move.l  #$00001388, ($FFFFFFC0).w
00178272 21FC 0000 1388 FFC4                        move.l  #$00001388, ($FFFFFFC4).w
0017827A 103C 00E0                                  move.b  #Volume_Down, D0
0017827E 6100 0000                                  bsr     Menu_Play_Music     
00178282 7000                                       moveq   #$00, D0
00178284 31C0 FF8A                                  move.w  D0, ($FFFFFF8A).w
00178288 31C0 FFDC                                  move.w  D0, ($FFFFFFDC).w
0017828C 4E75                                       rts
0017828E                            Offset_0x026DEC:
0017828E 1238 F605                                  move.b  ($FFFFF605).w, D1
00178292 0201 0003                                  andi.b  #$03, D1
00178296 6600                                       bne.s   Offset_0x026DFC
00178298 5378 FF80                                  subq.w  #$01, ($FFFFFF80).w
0017829C 6A00                                       bpl.s   Offset_0x026E32
0017829E                            Offset_0x026DFC:
0017829E 31FC 000B FF80                             move.w  #$000B, ($FFFFFF80).w
001782A4 1238 F604                                  move.b  ($FFFFF604).w, D1
001782A8 0201 0003                                  andi.b  #$03, D1
001782AC 6700                                       beq.s   Offset_0x026E32
001782AE 3038 FF82                                  move.w  ($FFFFFF82).w, D0
001782B2 0801 0000                                  btst    #$00, D1
001782B6 6700                                       beq.s   Offset_0x026E1C
001782B8 5340                                       subq.w  #$01, D0
001782BA 6400                                       bcc.s   Offset_0x026E1C
001782BC 7015                                       moveq   #$15, D0     ; �ltimo item ap�s apertar para cima
001782BE                            Offset_0x026E1C:
001782BE 0801 0001                                  btst    #$01, D1
001782C2 6700                                       beq.s   Offset_0x026E2C
001782C4 5240                                       addq.w  #$01, D0
001782C6 0C40 0016                                  cmpi.w  #$0016, D0   ; Verifica qual o �ltimo item da lista
001782CA 6500                                       bcs.s   Offset_0x026E2C
001782CC 7000                                       moveq   #$00, D0
001782CE                            Offset_0x026E2C:
001782CE 31C0 FF82                                  move.w  D0, ($FFFFFF82).w
001782D2 4E75                                       rts
001782D4                            Offset_0x026E32:
001782D4 0C78 0015 FF82                             cmpi.w  #$0015, ($FFFFFF82).w ; se o item for igual muda as fun��es de esquerda e direita 
001782DA 6600                                       bne.s   Offset_0x026E9C
001782DC 3038 FF84                                  move.w  ($FFFFFF84).w, D0
001782E0 1238 F605                                  move.b  ($FFFFF605).w, D1
001782E4 0801 0002                                  btst    #$02, D1
001782E8 6700                                       beq.s   Offset_0x026E4E
001782EA 5300                                       subq.b  #$01, D0
001782EC 6400                                       bcc.s   Offset_0x026E4E
001782EE 707F                                       moveq   #$7F, D0
001782F0                            Offset_0x026E4E:
001782F0 0801 0003                                  btst    #$03, D1
001782F4 6700                                       beq.s   Offset_0x026E5E
001782F6 5200                                       addq.b  #$01, D0
001782F8 0C40 0080                                  cmpi.w  #$0080, D0
001782FC 6500                                       bcs.s   Offset_0x026E5E
001782FE 7000                                       moveq   #$00, D0
00178300                            Offset_0x026E5E:
00178300 0801 0006                                  btst    #$06, D1
00178304 6700                                       beq.s   Offset_0x026E6C
00178306 0600 0010                                  addi.b  #$10, D0
0017830A 0200 007F                                  andi.b  #$7F, D0
0017830E                            Offset_0x026E6C:
0017830E 31C0 FF84                                  move.w  D0, ($FFFFFF84).w
00178312 0241 0030                                  andi.w  #$0030, D1
00178316 6700                                       beq.s   Offset_0x026E9A
00178318 3038 FF84                                  move.w  ($FFFFFF84).w, D0
0017831C 0640 0080                                  addi.w  #$0080, D0
00178320 6100 0000                                  bsr     Menu_Play_Music 
00178324 41F9 0000 0000                             lea     (Code_Debug_Mode), A0   
0017832A 45F9 0000 0000                             lea     (Code_All_Emeralds), A2 
00178330 43F8 FF0A                                  lea     ($FFFFFF0A).w, A1
00178334 7401                                       moveq   #$01, D2
00178336 6100 0000                                  bsr     Menu_Code_Test 
0017833A                            Offset_0x026E9A:
0017833A 4E75                                       rts
0017833C                            Offset_0x026E9C:
0017833C 1238 F605                                  move.b  ($FFFFF605).w, D1
00178340 0201 000C                                  andi.b  #$0C, D1
00178344 6700                                       beq.s   Offset_0x026EB2
00178346 3038 FF82                                  move.w  ($FFFFFF82).w, D0
0017834A 103B 0000                                  move.b  Menu_Left_Right_Select(PC, D0), D0
0017834E 31C0 FF82                                  move.w  D0, ($FFFFFF82).w
00178352                            Offset_0x026EB2:
00178352 4E75                                       rts
00178354                            Menu_Left_Right_Select:                   
00178354 0F10 1112 1212 1313 1314+                  dc.b    $0F, $10, $11, $12, $12, $12, $13, $13, $13, $14, $14, $14, $15, $15, $15
00178363 0001 0203 0609 0C                          dc.b    $00, $01, $02, $03, $06, $09, $0C
0017836A                            Offset_0x026ED8:
0017836A 49F9 FFFF 0000                             lea     ($FFFF0000), A4
00178370 4BF9 0000 0000                             lea     (Menu_Text_Highlight), A5
00178376 4DF9 00C0 0000                             lea     ($00C00000), A6
0017837C 7000                                       moveq   #$00, D0
0017837E 3038 FF82                                  move.w  ($FFFFFF82).w, D0
00178382 E548                                       lsl.w   #$02, D0
00178384 47F5 0000                                  lea     $00(A5, D0), A3
00178388 7000                                       moveq   #$00, D0
0017838A 1013                                       move.b  (A3), D0
0017838C C0FC 0050                                  mulu.w  #$0050, D0
00178390 7200                                       moveq   #$00, D1
00178392 122B 0001                                  move.b  $0001(A3), D1
00178396 D041                                       add.w   D1, D0
00178398 43F4 0000                                  lea     $00(A4, D0), A1
0017839C 7200                                       moveq   #$00, D1
0017839E 1213                                       move.b  (A3), D1
001783A0 EF49                                       lsl.w   #$07, D1
001783A2 D22B 0001                                  add.b   $0001(A3), D1
001783A6 0641 C000                                  addi.w  #$C000, D1
001783AA E589                                       lsl.l   #$02, D1
001783AC E449                                       lsr.w   #$02, D1
001783AE 0041 4000                                  ori.w   #$4000, D1
001783B2 4841                                       swap.w  D1
001783B4 2D41 0004                                  move.l  D1, $0004(A6)
001783B8 740E                                       moveq   #$0E, D2    ; Quantidade de letras a selecionar (Highlight)
001783BA                            Offset_0x026F28:                
001783BA 3019                                       move.w  (A1)+, D0
001783BC D043                                       add.w   D3, D0
001783BE 3C80                                       move.w  D0, (A6)
001783C0 51CA FFF8                                  dbra    D2, Offset_0x026F28
001783C4 544B                                       addq.w  #$02, A3
001783C6 7000                                       moveq   #$00, D0
001783C8 1013                                       move.b  (A3), D0
001783CA 6700                                       beq.s   Offset_0x026F6C
001783CC C0FC 0050                                  mulu.w  #$0050, D0
001783D0 7200                                       moveq   #$00, D1
001783D2 122B 0001                                  move.b  $0001(A3), D1
001783D6 D041                                       add.w   D1, D0
001783D8 43F4 0000                                  lea     $00(A4, D0), A1
001783DC 7200                                       moveq   #$00, D1
001783DE 1213                                       move.b  (A3), D1
001783E0 EF49                                       lsl.w   #$07, D1
001783E2 D22B 0001                                  add.b   $0001(A3), D1
001783E6 0641 C000                                  addi.w  #$C000, D1
001783EA E589                                       lsl.l   #$02, D1
001783EC E449                                       lsr.w   #$02, D1
001783EE 0041 4000                                  ori.w   #$4000, D1
001783F2 4841                                       swap.w  D1
001783F4 2D41 0004                                  move.l  D1, $0004(A6)
001783F8 3019                                       move.w  (A1)+, D0
001783FA D043                                       add.w   D3, D0
001783FC 3C80                                       move.w  D0, (A6)
001783FE                            Offset_0x026F6C:
001783FE 0C78 0015 FF82                             cmpi.w  #$0015, ($FFFFFF82).w  ; Se for igual seleciona o n�mero do Sound Test
00178404 6600                                       bne.s   Offset_0x026F78
00178406 6100 0000                                  bsr     Offset_0x026F7A
0017840A                            Offset_0x026F78:
0017840A 4E75                                       rts
0017840C                            Offset_0x026F7A:
0017840C 23FC 49C6 0003 00C0 0004                   move.l  #$49C60003, ($00C00004) ; Posi��o dos n�meros do Sound Test
00178416 3038 FF84                                  move.w  ($FFFFFF84).w, D0
0017841A 1400                                       move.b  D0, D2
0017841C E808                                       lsr.b   #$04, D0
0017841E 6100                                       bsr.s   Offset_0x026F90
00178420 1002                                       move.b  D2, D0
00178422                            Offset_0x026F90:
00178422 0240 000F                                  andi.w  #$000F, D0
00178426 0C00 000A                                  cmpi.b  #$0A, D0
0017842A 6500                                       bcs.s   Offset_0x026F9E
0017842C 5800                                       addi.b  #$04, D0
0017842E                            Offset_0x026F9E:
0017842E 0600 0010                                  addi.b  #$10, D0
00178432 D043                                       add.w   D3, D0
00178434 3C80                                       move.w  D0, (A6)
00178436 4E75                                       rts
00178438                            ;-------------------------------------------------------------------------------                
00178438                            Menu_Code_Test: 
00178438 3038 FF0C                                  move.w  ($FFFFFF0C).w, D0
0017843C D0C0                                       adda.w  D0, A0
0017843E 3038 FF84                                  move.w  ($FFFFFF84).w, D0
00178442 B010                                       cmp.b   (A0), D0
00178444 6600                                       bne.s   Menu_Reset_Debug_Mode_Code_Counter
00178446 5278 FF0C                                  addq.w  #$01, ($FFFFFF0C).w
0017844A 4A28 0001                                  tst.b   $0001(A0)
0017844E 6A00                                       bpl.s   Menu_All_Emeralds_Code_Test 
00178450 32BC 0101                                  move.w  #$0101, (A1)
00178454 6000 0000                                  bra     Menu_Set_Debug_Flag 
00178458                            Menu_Reset_Debug_Mode_Code_Counter: 
00178458 31FC 0000 FF0C                             move.w  #$0000, ($FFFFFF0C).w
0017845E                            Menu_All_Emeralds_Code_Test: 
0017845E 3038 FF0E                                  move.w  ($FFFFFF0E).w, D0
00178462 D4C0                                       adda.w  D0, A2
00178464 3038 FF84                                  move.w  ($FFFFFF84).w, D0
00178468 B012                                       cmp.b   (A2), D0
0017846A 6600                                       bne.s   Menu_Reset_All_Emerald_Code_Counter 
0017846C 5278 FF0E                                  addq.w  #$01, ($FFFFFF0E).w
00178470 4A2A 0001                                  tst.b   $0001(A2)
00178474 6A00                                       bpl.s   Menu_Code_Not_0xFF 
00178476 4A42                                       tst.w   D2
00178478 6600                                       bne.s   Menu_Set_All_Emeralds 
0017847A                            Menu_Set_Debug_Flag: 
0017847A 11FC 0001 FFE1                             move.b  #$01, (Slow_Motion_Flag).w
00178480 11FC 0001 FFE2                             move.b  #$01, (Debug_Mode_Flag).w
00178486 103C 00B5                                  move.b  #Ring_Snd, D0
0017848A 6100 0000                                  bsr     Menu_Play_Music 
0017848E 6000                                       bra.s   Menu_Reset_All_Emerald_Code_Counter 
00178490                            Menu_Set_All_Emeralds: 
00178490 31FC 0006 FE56                             move.w  #$0006, ($FFFFFE56).w
00178496 103C 0093                                  move.b  #Emerald_Snd, D0
0017849A 6100 0000                                  bsr     Menu_Play_Music 
0017849E                            Menu_Reset_All_Emerald_Code_Counter: 
0017849E 31FC 0000 FF0E                             move.w  #$0000, ($FFFFFF0E).w
001784A4                            Menu_Code_Not_0xFF: 
001784A4 4E75                                       rts               
001784A6                            Code_Debug_Mode: 
001784A6 0109 0902 0101 0204 FF                     dc.b    $01, $09, $09, $02, $01, $01, $02, $04, $FF
001784AF                            Code_All_Emeralds: 
001784AF 0401 0206 FF                               dc.b    $04, $01, $02, $06, $FF
001784B4                            ;-------------------------------------------------------------------------------                 
001784B4                            Offset_0x027040:
001784B4 6100 FF56                                  bsr     Offset_0x026F7A
001784B8 6000 0000                                  bra     Offset_0x027050
001784BC                            Offset_0x027048:
001784BC 6100 FEAC                                  bsr     Offset_0x026ED8
001784C0 6000 0000                                  bra     Offset_0x027050
001784C4                            Offset_0x027050:
001784C4 3038 FF82                                  move.w  ($FFFFFF82).w, D0
001784C8 47F9 0000 0000                             lea     (Menu_Icon_List), A3
001784CE 47F3 0000                                  lea     $00(A3, D0), A3
001784D2 43F9 FFFF 08C0                             lea     ($FFFF08C0), A1
001784D8 7000                                       moveq   #$00, D0
001784DA 1013                                       move.b  (A3), D0
001784DC E748                                       lsl.w   #$03, D0
001784DE 3200                                       move.w  D0, D1
001784E0 D040                                       add.w   D0, D0
001784E2 D041                                       add.w   D1, D0
001784E4 43F1 0000                                  lea     $00(A1, D0), A1
001784E8 203C 4B36 0003                             move.l  #$4B360003, D0        ; Posi��o Horizontal dos �cones
001784EE 7203                                       moveq   #$03, D1
001784F0 7402                                       moveq   #$02, D2
001784F2 6100 0000                                  bsr     Menu_ShowVDPGraphics 
001784F6 43F9 0000 0000                             lea     (Icon_Palettes), A1  
001784FC 7000                                       moveq   #$00, D0
001784FE 1013                                       move.b  (A3), D0
00178500 EB48                                       lsl.w   #$05, D0
00178502 43F1 0000                                  lea     $00(A1, D0), A1
00178506 45F8 FB40                                  lea     ($FFFFFB40).w, A2
0017850A 7207                                       moveq   #$07, D1
0017850C                            Offset_0x027098:                
0017850C 24D9                                       move.l  (A1)+, (A2)+
0017850E 51C9 FFFC                                  dbra    D1, Offset_0x027098
00178512 4E75                                       rts
00178514                            ;-------------------------------------------------------------------------------                            
00178514                            Dynamic_Menu:                           
00178514 5338 F7DA                                  subq.b  #$01, ($FFFFF7DA).w          ; Decrementa em 1 o Tempo
00178518 6A00                                       bpl.s   Exit_Dinamic_Menu            ; Se for maior ou igual a 0 sai da fun��o
0017851A 11FC 0007 F7DA                             move.b  #$07, ($FFFFF7DA).w          ; Inicializa o tempo de dura��o de cada frame
00178520 1038 F7B8                                  move.b  ($FFFFF7B8).w, D0            ; Carrega o Id do Frame Atual em D0
00178524 5238 F7B8                                  addq.b  #$01, ($FFFFF7B8).w          ; Carrega o pr�ximo frame em $FFFFFFB8
00178528 0240 001F                                  andi.w  #$001F, D0
0017852C 103B 0000                                  move.b  Sonic_Miles_Frame_Select(PC, D0), D0  ; Carrega o Id do frame em D0
00178530                                          ; muls.w  #$0140, D0                   ; Multiplica o Id pelo tamanho em bytes de cada frame
00178530 ED48                                       lsl.w   #$06, D0
00178532 4DF9 00C0 0000                             lea     ($00C00000), A6
00178538 2D7C 4020 0000 0004                        move.l  #$40200000, $0004(A6)
00178540 43F9 0000 0000                             lea     (Sonic_Miles_Spr), A1
00178546 43F1 0000                                  lea     $00(A1, D0), A1
0017854A 303C 0009                                  move.w  #$0009, D0                   ; Tiles-1 a serem carregados por vez 
0017854E                            Menu_Loop_Load_Tiles:
0017854E 2C99                                       move.l  (A1)+, (A6)
00178550 2C99                                       move.l  (A1)+, (A6)     
00178552 2C99                                       move.l  (A1)+, (A6)     
00178554 2C99                                       move.l  (A1)+, (A6)     
00178556 2C99                                       move.l  (A1)+, (A6)     
00178558 2C99                                       move.l  (A1)+, (A6)
0017855A 2C99                                       move.l  (A1)+, (A6)
0017855C 2C99                                       move.l  (A1)+, (A6)
0017855E 51C8 FFEE                                  dbra    D0, Menu_Loop_Load_Tiles
00178562                            Exit_Dinamic_Menu:                
00178562 4E75                                       rts              
00178564                            Sonic_Miles_Frame_Select:     
00178564 0000 0000 0000 0000 0000+                  dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
00178572 050A                                       dc.b    $05, $0A
00178574 0F0F 0F0F 0F0F 0F0F 0F0F+                  dc.b    $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F
00178582 0A05                                       dc.b    $0A, $05   
00178584                                            ; 0 = 0000000000  ; 1 = 0101000000  ; 2 = 1010000000 ; 3 = 1111000000
00178584                            ;------------------------------------------------------------------------------                  
00178584 =00000000                  __ = $00
00178584 =0000001E                  _A = $1E
00178584 =0000001F                  _B = $1F
00178584 =00000020                  _C = $20
00178584 =00000021                  _D = $21
00178584 =00000022                  _E = $22    
00178584 =00000023                  _F = $23
00178584 =00000024                  _G = $24
00178584 =00000025                  _H = $25
00178584 =00000026                  _I = $26
00178584 =00000027                  _J = $27
00178584 =00000028                  _K = $28
00178584 =00000029                  _L = $29
00178584 =0000002A                  _M = $2A
00178584 =0000002B                  _N = $2B
00178584 =0000002C                  _O = $2C
00178584 =0000002D                  _P = $2D
00178584 =0000002E                  _Q = $2E
00178584 =0000002F                  _R = $2F
00178584 =00000030                  _S = $30
00178584 =00000031                  _T = $31
00178584 =00000032                  _U = $32
00178584 =00000033                  _V = $33
00178584 =00000034                  _W = $34
00178584 =00000035                  _X = $35
00178584 =00000036                  _Y = $36
00178584 =00000037                  _Z = $37
00178584 =0000001A                  _st = $1A
00178584                            ;-------------------------------------------------------------------------------  
00178584                            Icon_Palettes: 
00178584 0000 0000 0048 006A 008E+                  dc.w    $0000, $0000, $0048, $006A, $008E, $00CE, $0EEE, $00E0
00178594 00A4 0082 0062 0000 0E86+                  dc.w    $00A4, $0082, $0062, $0000, $0E86, $0026, $0E42, $0C00
001785A4 0000 0000 0420 0820 0C00+                  dc.w    $0000, $0000, $0420, $0820, $0C00, $0E60, $0A00, $0000
001785B4 0E00 0000 0000 0000 0444+                  dc.w    $0E00, $0000, $0000, $0000, $0444, $0666, $0AAA, $0EEE
001785C4 0000 0204 0026 0248 046A+                  dc.w    $0000, $0204, $0026, $0248, $046A, $048C, $06CE, $0002
001785D4 0000 0220 0040 0060 0080+                  dc.w    $0000, $0220, $0040, $0060, $0080, $02A0, $06E0, $0A0C
001785E4 0000 0000 0A00 0660 0C80+                  dc.w    $0000, $0000, $0A00, $0660, $0C80, $0EC0, $006A, $0008
001785F4 028A 00AE 004C 006E 0060+                  dc.w    $028A, $00AE, $004C, $006E, $0060, $0066, $00C0, $00CA
00178604 0000 0000 0CE2 0000 0480+                  dc.w    $0000, $0000, $0CE2, $0000, $0480, $0240, $0EEE, $04AC
00178614 006A 0026 0842 0620 0400+                  dc.w    $006A, $0026, $0842, $0620, $0400, $0000, $0000, $0000
00178624 0000 0000 0EEE 0ECA 0E86+                  dc.w    $0000, $0000, $0EEE, $0ECA, $0E86, $0E64, $0E42, $06AE
00178634 048A 0268 0246 0024 0888+                  dc.w    $048A, $0268, $0246, $0024, $0888, $0444, $000E, $0008
00178644 0000 0000 0A26 0C48 0E8C+                  dc.w    $0000, $0000, $0A26, $0C48, $0E8C, $00CE, $00C4, $0080
00178654 0C00 0000 0EEE 0EEA 0EC8+                  dc.w    $0C00, $0000, $0EEE, $0EEA, $0EC8, $006E, $004A, $0028
00178664 0000 0000 0048 006A 008E+                  dc.w    $0000, $0000, $0048, $006A, $008E, $00CE, $0EEE, $00E0
00178674 00A4 0082 0062 0808 0A4A+                  dc.w    $00A4, $0082, $0062, $0808, $0A4A, $0026, $0626, $0404
00178684 0000 0000 0EEE 0ECA 0E86+                  dc.w    $0000, $0000, $0EEE, $0ECA, $0E86, $0E64, $0E42, $06AE
00178694 048A 0268 0246 0024 0888+                  dc.w    $048A, $0268, $0246, $0024, $0888, $0444, $000E, $0008
001786A4 0000 0000 0048 006A 008E+                  dc.w    $0000, $0000, $0048, $006A, $008E, $00CE, $0EEE, $00E0
001786B4 00A4 0082 0062 0400 0E86+                  dc.w    $00A4, $0082, $0062, $0400, $0E86, $006E, $0E42, $0C00
001786C4 0000 0000 0CE2 08C0 0480+                  dc.w    $0000, $0000, $0CE2, $08C0, $0480, $0240, $0EEE, $02AC
001786D4 006A 0026 0AA6 0000 060A+                  dc.w    $006A, $0026, $0AA6, $0000, $060A, $0408, $0204, $0000
001786E4 0000 0000 0C06 0C0A 0C6E+                  dc.w    $0000, $0000, $0C06, $0C0A, $0C6E, $0068, $008A, $0000
001786F4 02CE 00EC 00AE 006E 0EEE+                  dc.w    $02CE, $00EC, $00AE, $006E, $0EEE, $0000, $000E, $00C4
00178704 0000 0000 0EEE 0AAA 0000+                  dc.w    $0000, $0000, $0EEE, $0AAA, $0000, $0666, $0444, $0E40
00178714 0C00 0800 00CE 028E 000E+                  dc.w    $0C00, $0800, $00CE, $028E, $000E, $0084, $0062, $0020
00178724 0000 0000 0004 0044 0084+                  dc.w    $0000, $0000, $0004, $0044, $0084, $0088, $00A8, $00AC
00178734 006C 002C 0028 0006 0666+                  dc.w    $006C, $002C, $0028, $0006, $0666, $0888, $0CCC, $0EEE
00178744 0000 0000 06CE 04AC 028A+                  dc.w    $0000, $0000, $06CE, $04AC, $028A, $0068, $0046, $00E8
00178754 00C4 0080 0040 0EEE 0C00+                  dc.w    $00C4, $0080, $0040, $0EEE, $0C00, $0EC0, $0860, $0000
00178764 0000 0000 0E64 0E86 0EA8+                  dc.w    $0000, $0000, $0E64, $0E86, $0EA8, $0ECA, $0EEE, $0000
00178774 00AE 006E 0E22 00E0 0000+                  dc.w    $00AE, $006E, $0E22, $00E0, $0000, $0000, $0000, $0000
00178784 0000 0E20 004E 006E 0048+                  dc.w    $0000, $0E20, $004E, $006E, $0048, $008C, $00CE, $08EE
00178794 0800 0400 0000 0EE8 0E80+                  dc.w    $0800, $0400, $0000, $0EE8, $0E80, $0E60, $0000, $0000
001787A4 0000 0000 0A22 0C42 0000+                  dc.w    $0000, $0000, $0A22, $0C42, $0000, $0E66, $0EEE, $0AAA
001787B4 0888 0444 08AE 046A 000E+                  dc.w    $0888, $0444, $08AE, $046A, $000E, $0000, $00EE, $0000
001787C4 0000 0000 0A22 0C42 0000+                  dc.w    $0000, $0000, $0A22, $0C42, $0000, $0E66, $0EEE, $0AAA
001787D4 0888 0444 08AE 046A 000E+                  dc.w    $0888, $0444, $08AE, $046A, $000E, $0000, $00EE, $0000
001787E4                            ;-------------------------------------------------------------------------------  
001787E4                            Menu_Icon_List: 
001787E4 0000 000E 0E0E 0606 060B+                  dc.b    $00, $00, $00, $0E, $0E, $0E, $06, $06, $06, $0B, $0B, $0B, $0D, $0D, $0D, $09
001787F4 0909 0410 0F11                             dc.b    $09, $09, $04, $10, $0F, $11
001787FA                            ;-------------------------------------------------------------------------------                 
001787FA                            Menu_Text_Highlight:                  
001787FA 0306 0324 0306 0424 0306+                  dc.w    $0306, $0324, $0306, $0424, $0306, $0524, $0706, $0724
0017880A 0706 0824 0706 0924 0B06+                  dc.w    $0706, $0824, $0706, $0924, $0B06, $0B24, $0B06, $0C24
0017881A 0B06 0D24 0F06 0F24 0F06+                  dc.w    $0B06, $0D24, $0F06, $0F24, $0F06, $1024, $0F06, $1124
0017882A 1306 1324 1306 1424 1306+                  dc.w    $1306, $1324, $1306, $1424, $1306, $1524, $032C, $034A
0017883A 032C 044A 032C 054A 072C+                  dc.w    $032C, $044A, $032C, $054A, $072C, $0000, $0B2C, $0000
0017884A 0F2C 0000 132C 134A                        dc.w    $0F2C, $0000, $132C, $134A
00178852                            ;-------------------------------------------------------------------------------                
00178852                            Menu_Text_Positions:                   
00178852 00F6 0236 0376 04B6 05F6+                  dc.w    $00F6, $0236, $0376, $04B6, $05F6, $011C, $025C, $039C
00178862 04DC 061C                                  dc.w    $04DC, $061C
00178866                            ;-------------------------------------------------------------------------------                          
00178866                            Menu_Level_Select_Text: 
00178866 0E30 2D29 1E30 2500 2526+                  dc.b    $0E, _S, _P, _L, _A, _S, _H, __, _H, _I, _L, _L, __, __, __, __
00178876 0E2A 222B 3200 0000 0000+                  dc.b    $0E, _M, _E, _N, _U, __, __, __, __, __, __, __, __, __, __, __
00178886 0E20 1E30 262B 2C00 3031+                  dc.b    $0E, _C, _A, _S, _I, _N, _O, __, _S, _T, _R, _E, _E, _T, __, __
00178896 0E29 2C30 3100 291E 1F36+                  dc.b    $0E, _L, _O, _S, _T, __, _L, _A, _B, _Y, _R, _I, _N, _T, _H, __
001788A6 0E34 2C2F 2921 002A 1E2D+                  dc.b    $0E, _W, _O, _R, _L, _D, __, _M, _A, _P, __, __, __, __, __, __
001788B6 0E2A 1E21 0024 221E 2F00+                  dc.b    $0E, _M, _A, _D, __, _G, _E, _A, _R, __, __, __, __, __, __, __
001788C6 0E22 2424 0030 311E 3126+                  dc.b    $0E, _E, _G, _G, __, _S, _T, _A, _T, _I, _O, _N, __, __, __, __   
001788D6 0E30 2D22 2026 1E29 0030+                  dc.b    $0E, _S, _P, _E, _C, _I, _A, _L, __, _S, _T, _A, _G, _E, __, __
001788E6 0E22 2B21 262B 2400 3022+                  dc.b    $0E, _E, _N, _D, _I, _N, _G, __, _S, _E, _Q, _U, _E, _N, _C, _E
001788F6 0E30 2C32 2B21 0031 2230+                  dc.b    $0E, _S, _O, _U, _N, _D, __, _T, _E, _S, _T, __, __, _st,__, __
00178906                            ;-------------------------------------------------------------------------------
00178906                            Wings_Mappings: 
00178906 6000 6000 6000 604D 604E+                  dc.w    $6000, $6000, $6000, $604D, $604E, $684E, $684D, $6000, $6000, $6000   
0017891A                            ;Wings_Line_1:                 
0017891A 604F 6050 6051 6052 6053+                  dc.w    $604F, $6050, $6051, $6052, $6053, $6853, $6852, $6851, $6850, $684F
0017892E                            ;Wings_Line_2:
0017892E 6054 6055 6056 6057 6057+                  dc.w    $6054, $6055, $6056, $6057, $6057, $6057, $6057, $6856, $6855, $6854
00178942                            ;Wings_Line_3:
00178942 6058 6059 605A 6057 6057+                  dc.w    $6058, $6059, $605A, $6057, $6057, $6057, $6057, $685A, $6859, $6858
00178956                            ;Wings_Line_4:
00178956 605B 605C 605D 6057 6057+                  dc.w    $605B, $605C, $605D, $6057, $6057, $6057, $6057, $685D, $685C, $685B
0017896A                            ;Wings_Line_5:
0017896A 6000 605E 605F 6060 6061+                  dc.w    $6000, $605E, $605F, $6060, $6061, $6062, $6063, $6064, $685E, $6000
0017897E                            ;Wings_Line_6:
0017897E 6000 6000 6065 6066 6067+                  dc.w    $6000, $6000, $6065, $6066, $6067, $6867, $6866, $6865, $6000, $6000 
00178992                            ;-------------------------------------------------------------------------------    
00178992                            Menu_Palette:
00178992                                            incbin  'data\menu\menu.pal'            
00178A12                            Menu_ClearScreen:
00178A12 4EF8 1380                                  jmp     ClearScreen
00178A16                            Menu_ShowVDPGraphics:                
00178A16 4EF8 14FA                                  jmp     ShowVDPGraphics                
00178A1A                            Menu_NemesisDec: 
00178A1A 4EF8 15AA                                  jmp     NemDec  
00178A1E                            Menu_LoadPLC2:      
00178A1E 4EF8 171C                                  jmp     LoadPLC2
00178A22                            Menu_RunPLC:                    
00178A22 4EF8 1756                                  jmp     RunPLC_RAM                           
00178A26                            Menu_EnigmaDec
00178A26 4EF8 1888                                  jmp     EniDec
00178A2A                            Menu_Pal_FadeTo:
00178A2A 4EF8 20CA                                  jmp     Pal_FadeTo
00178A2E                            Menu_Pal_FadeFrom:
00178A2E 4EF8 2180                                  jmp     Pal_FadeFrom     
00178A32                            Menu_Play_Music:
00178A32 4EF8 1470                                  jmp     PlaySound  
00178A36                            Menu_PalLoad1:
00178A36 4EF8 242E                                  jmp     PalLoad1
00178A3A                            Menu_DelayProgram:
00178A3A 4EF8 33A2                                  jmp     DelayProgram
00178A3E                            ;-------------------------------------------------------------------------------
00178A3E                            Menu_Font:
00178A3E                                            incbin  'data\menu\menufont.nem' 
00178FB2                            Level_Icons:
00178FB2                                            incbin  'data\menu\levelico.nem'   
0017A2AE                            Menu_Mappings:
0017A2AE                                            incbin  'data\menu\menubg.eni'
0017A45A                            Icons_Mappings:
0017A45A                                            incbin  'data\menu\iconsmap.eni'
0017A470                            Sonic_Miles_Spr:                                         
0017A470                                            incbin  'data\menu\soncmils.dat'   
0017A970                            ;===============================================================================
0017A970                            ; Menu do Sonic 2 No Sonic 1 reprogramado por Esrael L. G. Neto
0017A970                            ; [ Fim ]
0017A970                            ;===============================================================================
0017A970                            ;===============================================================================
0017A970                            ; end of 'ROM'
0017A970                            EndOfRom:
0017A970                            
0017A970                            
